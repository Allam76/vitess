// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func yyPosition(yylex interface{}) int {
	return yylex.(*Tokenizer).Position
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:57
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	int                   int
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	statements            Statements
	partitions            Partitions
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	joinCondition         JoinCondition
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	asOf                  *AsOf
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	sqlVal                *SQLVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	setExprs              SetExprs
	setExpr               *SetExpr
	colIdent              ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	TableSpec             *TableSpec
	columnType            ColumnType
	columnOrder           *ColumnOrder
	triggerOrder          *TriggerOrder
	colKeyOpt             ColumnKeyOption
	optVal                Expr
	LengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexInfo             *IndexInfo
	indexOption           *IndexOption
	indexOptions          []*IndexOption
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	constraintDefinition  *ConstraintDefinition
	constraintInfo        ConstraintInfo
	ReferenceAction       ReferenceAction
	partDefs              []*PartitionDefinition
	partDef               *PartitionDefinition
	partSpec              *PartitionSpec
	vindexParam           VindexParam
	vindexParams          []VindexParam
	showFilter            *ShowFilter
	optLike               *OptLike
	over                  *Over
	caseStatementCases    []CaseStatementCase
	caseStatementCase     CaseStatementCase
	ifStatementConditions []IfStatementCondition
	ifStatementCondition  IfStatementCondition
	signalInfo            SignalInfo
	signalInfos           []SignalInfo
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const UNLOCK = 57373
const KEYS = 57374
const OF = 57375
const UNIQUE = 57376
const KEY = 57377
const SYSTEM_TIME = 57378
const VALUES = 57379
const LAST_INSERT_ID = 57380
const NEXT = 57381
const VALUE = 57382
const SHARE = 57383
const MODE = 57384
const SQL_NO_CACHE = 57385
const SQL_CACHE = 57386
const JOIN = 57387
const STRAIGHT_JOIN = 57388
const LEFT = 57389
const RIGHT = 57390
const INNER = 57391
const OUTER = 57392
const CROSS = 57393
const NATURAL = 57394
const USE = 57395
const FORCE = 57396
const ON = 57397
const USING = 57398
const ID = 57399
const HEX = 57400
const STRING = 57401
const INTEGRAL = 57402
const FLOAT = 57403
const HEXNUM = 57404
const VALUE_ARG = 57405
const LIST_ARG = 57406
const COMMENT = 57407
const COMMENT_KEYWORD = 57408
const BIT_LITERAL = 57409
const NULL = 57410
const TRUE = 57411
const FALSE = 57412
const OFF = 57413
const OR = 57414
const AND = 57415
const NOT = 57416
const BETWEEN = 57417
const CASE = 57418
const WHEN = 57419
const THEN = 57420
const ELSE = 57421
const ELSEIF = 57422
const END = 57423
const LE = 57424
const GE = 57425
const NE = 57426
const NULL_SAFE_EQUAL = 57427
const IS = 57428
const LIKE = 57429
const REGEXP = 57430
const IN = 57431
const SHIFT_LEFT = 57432
const SHIFT_RIGHT = 57433
const DIV = 57434
const MOD = 57435
const UNARY = 57436
const COLLATE = 57437
const BINARY = 57438
const UNDERSCORE_BINARY = 57439
const UNDERSCORE_UTF8MB4 = 57440
const INTERVAL = 57441
const JSON_EXTRACT_OP = 57442
const JSON_UNQUOTE_EXTRACT_OP = 57443
const CREATE = 57444
const ALTER = 57445
const DROP = 57446
const RENAME = 57447
const ANALYZE = 57448
const ADD = 57449
const FLUSH = 57450
const MODIFY = 57451
const CHANGE = 57452
const SCHEMA = 57453
const TABLE = 57454
const INDEX = 57455
const INDEXES = 57456
const VIEW = 57457
const TO = 57458
const IGNORE = 57459
const IF = 57460
const PRIMARY = 57461
const COLUMN = 57462
const SPATIAL = 57463
const FULLTEXT = 57464
const KEY_BLOCK_SIZE = 57465
const CHECK = 57466
const ACTION = 57467
const CASCADE = 57468
const CONSTRAINT = 57469
const FOREIGN = 57470
const NO = 57471
const REFERENCES = 57472
const RESTRICT = 57473
const FIRST = 57474
const AFTER = 57475
const SHOW = 57476
const DESCRIBE = 57477
const EXPLAIN = 57478
const DATE = 57479
const ESCAPE = 57480
const REPAIR = 57481
const OPTIMIZE = 57482
const TRUNCATE = 57483
const FORMAT = 57484
const MAXVALUE = 57485
const PARTITION = 57486
const REORGANIZE = 57487
const LESS = 57488
const THAN = 57489
const PROCEDURE = 57490
const TRIGGER = 57491
const TRIGGERS = 57492
const VINDEX = 57493
const VINDEXES = 57494
const STATUS = 57495
const VARIABLES = 57496
const WARNINGS = 57497
const SEQUENCE = 57498
const EACH = 57499
const ROW = 57500
const BEFORE = 57501
const FOLLOWS = 57502
const PRECEDES = 57503
const DEFINER = 57504
const CLASS_ORIGIN = 57505
const SUBCLASS_ORIGIN = 57506
const MESSAGE_TEXT = 57507
const MYSQL_ERRNO = 57508
const CONSTRAINT_CATALOG = 57509
const CONSTRAINT_SCHEMA = 57510
const CONSTRAINT_NAME = 57511
const CATALOG_NAME = 57512
const SCHEMA_NAME = 57513
const TABLE_NAME = 57514
const COLUMN_NAME = 57515
const CURSOR_NAME = 57516
const SIGNAL = 57517
const SQLSTATE = 57518
const BEGIN = 57519
const START = 57520
const TRANSACTION = 57521
const COMMIT = 57522
const ROLLBACK = 57523
const BIT = 57524
const TINYINT = 57525
const SMALLINT = 57526
const MEDIUMINT = 57527
const INT = 57528
const INTEGER = 57529
const BIGINT = 57530
const INTNUM = 57531
const REAL = 57532
const DOUBLE = 57533
const FLOAT_TYPE = 57534
const DECIMAL = 57535
const NUMERIC = 57536
const DEC = 57537
const FIXED = 57538
const PRECISION = 57539
const TIME = 57540
const TIMESTAMP = 57541
const DATETIME = 57542
const YEAR = 57543
const CHAR = 57544
const VARCHAR = 57545
const BOOL = 57546
const CHARACTER = 57547
const VARBINARY = 57548
const NCHAR = 57549
const NVARCHAR = 57550
const NATIONAL = 57551
const VARYING = 57552
const TEXT = 57553
const TINYTEXT = 57554
const MEDIUMTEXT = 57555
const LONGTEXT = 57556
const LONG = 57557
const BLOB = 57558
const TINYBLOB = 57559
const MEDIUMBLOB = 57560
const LONGBLOB = 57561
const JSON = 57562
const ENUM = 57563
const GEOMETRY = 57564
const POINT = 57565
const LINESTRING = 57566
const POLYGON = 57567
const GEOMETRYCOLLECTION = 57568
const MULTIPOINT = 57569
const MULTILINESTRING = 57570
const MULTIPOLYGON = 57571
const NULLX = 57572
const AUTO_INCREMENT = 57573
const APPROXNUM = 57574
const SIGNED = 57575
const UNSIGNED = 57576
const ZEROFILL = 57577
const COLLATION = 57578
const DATABASES = 57579
const SCHEMAS = 57580
const TABLES = 57581
const VITESS_METADATA = 57582
const VSCHEMA = 57583
const FULL = 57584
const PROCESSLIST = 57585
const COLUMNS = 57586
const FIELDS = 57587
const ENGINES = 57588
const PLUGINS = 57589
const NAMES = 57590
const CHARSET = 57591
const GLOBAL = 57592
const SESSION = 57593
const ISOLATION = 57594
const LEVEL = 57595
const READ = 57596
const WRITE = 57597
const ONLY = 57598
const REPEATABLE = 57599
const COMMITTED = 57600
const UNCOMMITTED = 57601
const SERIALIZABLE = 57602
const CURRENT_TIMESTAMP = 57603
const DATABASE = 57604
const CURRENT_DATE = 57605
const CURRENT_USER = 57606
const CURRENT_TIME = 57607
const LOCALTIME = 57608
const LOCALTIMESTAMP = 57609
const UTC_DATE = 57610
const UTC_TIME = 57611
const UTC_TIMESTAMP = 57612
const REPLACE = 57613
const CONVERT = 57614
const CAST = 57615
const SUBSTR = 57616
const SUBSTRING = 57617
const GROUP_CONCAT = 57618
const SEPARATOR = 57619
const TIMESTAMPADD = 57620
const TIMESTAMPDIFF = 57621
const OVER = 57622
const WINDOW = 57623
const GROUPING = 57624
const GROUPS = 57625
const AVG = 57626
const BIT_AND = 57627
const BIT_OR = 57628
const BIT_XOR = 57629
const COUNT = 57630
const JSON_ARRAYAGG = 57631
const JSON_OBJECTAGG = 57632
const MAX = 57633
const MIN = 57634
const STDDEV_POP = 57635
const STDDEV = 57636
const STD = 57637
const STDDEV_SAMP = 57638
const SUM = 57639
const VAR_POP = 57640
const VARIANCE = 57641
const VAR_SAMP = 57642
const CUME_DIST = 57643
const DENSE_RANK = 57644
const FIRST_VALUE = 57645
const LAG = 57646
const LAST_VALUE = 57647
const LEAD = 57648
const NTH_VALUE = 57649
const NTILE = 57650
const ROW_NUMBER = 57651
const PERCENT_RANK = 57652
const RANK = 57653
const MATCH = 57654
const AGAINST = 57655
const BOOLEAN = 57656
const LANGUAGE = 57657
const WITH = 57658
const QUERY = 57659
const EXPANSION = 57660
const UNUSED = 57661
const ARRAY = 57662
const DESCRIPTION = 57663
const EMPTY = 57664
const EXCEPT = 57665
const JSON_TABLE = 57666
const LATERAL = 57667
const MEMBER = 57668
const RECURSIVE = 57669
const ACTIVE = 57670
const ADMIN = 57671
const BUCKETS = 57672
const CLONE = 57673
const COMPONENT = 57674
const DEFINITION = 57675
const ENFORCED = 57676
const EXCLUDE = 57677
const FOLLOWING = 57678
const GEOMCOLLECTION = 57679
const GET_MASTER_PUBLIC_KEY = 57680
const HISTOGRAM = 57681
const HISTORY = 57682
const INACTIVE = 57683
const INVISIBLE = 57684
const LOCKED = 57685
const MASTER_COMPRESSION_ALGORITHMS = 57686
const MASTER_PUBLIC_KEY_PATH = 57687
const MASTER_TLS_CIPHERSUITES = 57688
const MASTER_ZSTD_COMPRESSION_LEVEL = 57689
const NESTED = 57690
const NETWORK_NAMESPACE = 57691
const NOWAIT = 57692
const NULLS = 57693
const OJ = 57694
const OLD = 57695
const OPTIONAL = 57696
const ORDINALITY = 57697
const ORGANIZATION = 57698
const OTHERS = 57699
const PATH = 57700
const PERSIST = 57701
const PERSIST_ONLY = 57702
const PRECEDING = 57703
const PRIVILEGE_CHECKS_USER = 57704
const PROCESS = 57705
const RANDOM = 57706
const REFERENCE = 57707
const REQUIRE_ROW_FORMAT = 57708
const RESOURCE = 57709
const RESPECT = 57710
const RESTART = 57711
const RETAIN = 57712
const REUSE = 57713
const ROLE = 57714
const SECONDARY = 57715
const SECONDARY_ENGINE = 57716
const SECONDARY_LOAD = 57717
const SECONDARY_UNLOAD = 57718
const SKIP = 57719
const SRID = 57720
const THREAD_PRIORITY = 57721
const TIES = 57722
const UNBOUNDED = 57723
const VCPU = 57724
const VISIBLE = 57725
const SYSTEM = 57726

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"OF",
	"UNIQUE",
	"KEY",
	"SYSTEM_TIME",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"ELSEIF",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"MODIFY",
	"CHANGE",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"INDEXES",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"FIRST",
	"AFTER",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"FORMAT",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TRIGGERS",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"EACH",
	"ROW",
	"BEFORE",
	"FOLLOWS",
	"PRECEDES",
	"DEFINER",
	"CLASS_ORIGIN",
	"SUBCLASS_ORIGIN",
	"MESSAGE_TEXT",
	"MYSQL_ERRNO",
	"CONSTRAINT_CATALOG",
	"CONSTRAINT_SCHEMA",
	"CONSTRAINT_NAME",
	"CATALOG_NAME",
	"SCHEMA_NAME",
	"TABLE_NAME",
	"COLUMN_NAME",
	"CURSOR_NAME",
	"SIGNAL",
	"SQLSTATE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DEC",
	"FIXED",
	"PRECISION",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NATIONAL",
	"VARYING",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"LONG",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"OVER",
	"WINDOW",
	"GROUPING",
	"GROUPS",
	"AVG",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"COUNT",
	"JSON_ARRAYAGG",
	"JSON_OBJECTAGG",
	"MAX",
	"MIN",
	"STDDEV_POP",
	"STDDEV",
	"STD",
	"STDDEV_SAMP",
	"SUM",
	"VAR_POP",
	"VARIANCE",
	"VAR_SAMP",
	"CUME_DIST",
	"DENSE_RANK",
	"FIRST_VALUE",
	"LAG",
	"LAST_VALUE",
	"LEAD",
	"NTH_VALUE",
	"NTILE",
	"ROW_NUMBER",
	"PERCENT_RANK",
	"RANK",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"DESCRIPTION",
	"EMPTY",
	"EXCEPT",
	"JSON_TABLE",
	"LATERAL",
	"MEMBER",
	"RECURSIVE",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"SYSTEM",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 32,
	-2, 4,
	-1, 34,
	166, 79,
	-2, 796,
	-1, 42,
	170, 413,
	171, 413,
	-2, 401,
	-1, 49,
	1, 1120,
	402, 1120,
	-2, 432,
	-1, 354,
	116, 804,
	-2, 800,
	-1, 355,
	116, 805,
	-2, 801,
	-1, 456,
	86, 1072,
	116, 1072,
	-2, 68,
	-1, 457,
	86, 986,
	116, 986,
	-2, 69,
	-1, 462,
	86, 949,
	116, 949,
	-2, 765,
	-1, 464,
	86, 1018,
	116, 1018,
	-2, 767,
	-1, 657,
	5, 32,
	-2, 426,
	-1, 661,
	5, 32,
	-2, 425,
	-1, 820,
	1, 482,
	5, 482,
	12, 482,
	13, 482,
	14, 482,
	15, 482,
	17, 482,
	19, 482,
	29, 482,
	30, 482,
	45, 482,
	46, 482,
	47, 482,
	48, 482,
	49, 482,
	51, 482,
	52, 482,
	55, 482,
	56, 482,
	58, 482,
	59, 482,
	402, 482,
	-2, 507,
	-1, 823,
	56, 49,
	58, 49,
	-2, 53,
	-1, 1004,
	116, 807,
	-2, 803,
	-1, 1240,
	57, 343,
	60, 343,
	-2, 307,
	-1, 1289,
	5, 33,
	-2, 571,
	-1, 1349,
	5, 32,
	-2, 742,
	-1, 1442,
	5, 32,
	-2, 70,
	-1, 1580,
	1, 526,
	5, 526,
	12, 526,
	13, 526,
	14, 526,
	15, 526,
	17, 526,
	19, 526,
	29, 526,
	30, 526,
	45, 526,
	46, 526,
	47, 526,
	48, 526,
	49, 526,
	51, 526,
	52, 526,
	55, 526,
	56, 526,
	58, 526,
	59, 526,
	402, 526,
	-2, 507,
	-1, 1689,
	5, 33,
	-2, 743,
	-1, 1719,
	5, 32,
	-2, 70,
	-1, 1759,
	5, 32,
	-2, 745,
	-1, 1846,
	5, 33,
	-2, 746,
	-1, 1897,
	402, 128,
	-2, 32,
}

const yyPrivate = 57344

const yyLast = 19379

var yyAct = [...]int{

	388, 56, 1930, 1891, 1208, 1952, 1892, 1896, 1905, 1921,
	1833, 1850, 1900, 7, 1646, 1593, 1899, 6, 1898, 5,
	1901, 8, 1491, 745, 452, 1773, 1895, 1206, 66, 359,
	1150, 1488, 1737, 387, 1119, 980, 1851, 1594, 497, 1397,
	1560, 1561, 1163, 1117, 1702, 1121, 1159, 1722, 372, 1557,
	1201, 1113, 320, 1230, 1149, 88, 1567, 56, 1571, 333,
	1508, 1042, 1029, 1115, 1233, 1465, 1466, 951, 467, 338,
	1542, 1196, 940, 1065, 1434, 1156, 1104, 816, 836, 1006,
	1375, 676, 1057, 688, 924, 835, 682, 817, 455, 357,
	697, 499, 342, 1097, 450, 473, 825, 447, 1972, 352,
	1968, 1963, 1955, 321, 322, 1947, 458, 325, 761, 1946,
	1916, 65, 1144, 70, 1909, 1861, 762, 1890, 1809, 710,
	709, 719, 720, 712, 713, 714, 715, 716, 717, 718,
	711, 1843, 1879, 721, 346, 1647, 1860, 1525, 348, 1318,
	1674, 472, 72, 73, 74, 75, 76, 401, 1588, 407,
	409, 408, 405, 406, 404, 403, 402, 1384, 1138, 628,
	1383, 1139, 1140, 1385, 410, 411, 1842, 57, 30, 31,
	1589, 1590, 837, 1060, 838, 27, 28, 57, 30, 31,
	644, 475, 324, 477, 330, 654, 332, 323, 32, 1897,
	3, 1417, 1170, 27, 62, 57, 30, 31, 32, 52,
	53, 98, 94, 95, 1493, 96, 1744, 1185, 1541, 361,
	1172, 90, 1172, 1176, 1178, 1190, 1177, 1185, 1197, 1665,
	315, 1663, 43, 327, 1865, 1866, 63, 627, 630, 1215,
	1852, 632, 1827, 971, 652, 495, 639, 640, 1495, 99,
	970, 476, 968, 1878, 63, 1889, 328, 1834, 1490, 1098,
	317, 1935, 83, 1825, 67, 1214, 1723, 1724, 1164, 1470,
	1973, 1970, 1731, 1964, 629, 631, 90, 1925, 1956, 647,
	474, 482, 653, 648, 645, 646, 332, 972, 1732, 969,
	1448, 1122, 1124, 915, 1494, 1774, 318, 1374, 34, 59,
	39, 38, 41, 496, 54, 496, 496, 907, 1776, 670,
	496, 1373, 496, 1372, 470, 85, 87, 289, 496, 82,
	331, 93, 733, 734, 1817, 92, 91, 56, 56, 1692,
	42, 61, 60, 1145, 1388, 50, 51, 40, 1263, 658,
	1380, 1262, 1278, 660, 978, 659, 844, 831, 701, 56,
	953, 954, 955, 956, 957, 958, 959, 960, 961, 962,
	963, 964, 97, 1887, 730, 1810, 89, 732, 491, 1166,
	1166, 55, 1123, 44, 45, 684, 46, 47, 1185, 1775,
	92, 91, 721, 1730, 1299, 1199, 663, 664, 626, 1134,
	1424, 1923, 1175, 975, 1924, 1398, 1922, 743, 1232, 747,
	748, 749, 750, 751, 752, 753, 754, 755, 756, 757,
	1679, 760, 763, 763, 763, 769, 763, 763, 769, 763,
	769, 778, 779, 780, 781, 782, 783, 784, 785, 786,
	787, 788, 789, 790, 791, 792, 793, 794, 795, 796,
	797, 798, 799, 800, 801, 802, 803, 804, 805, 806,
	807, 808, 809, 810, 811, 1841, 821, 58, 1296, 1612,
	1295, 481, 649, 686, 1165, 1165, 84, 58, 711, 694,
	675, 721, 735, 736, 737, 738, 739, 740, 741, 742,
	1231, 79, 1013, 679, 683, 58, 696, 941, 833, 947,
	733, 734, 27, 458, 57, 30, 31, 1011, 1012, 1010,
	702, 696, 1184, 1166, 496, 496, 1223, 1485, 468, 636,
	1527, 1613, 668, 695, 694, 32, 657, 661, 80, 815,
	1166, 764, 766, 768, 770, 772, 774, 775, 777, 765,
	767, 696, 771, 773, 672, 776, 673, 746, 685, 674,
	633, 634, 466, 63, 651, 638, 1489, 641, 759, 1294,
	1798, 1293, 1238, 655, 824, 829, 839, 1251, 486, 487,
	488, 489, 1962, 662, 733, 734, 1906, 478, 695, 694,
	1250, 1971, 942, 1931, 1509, 1939, 731, 1938, 695, 694,
	27, 1058, 57, 30, 31, 1966, 696, 1943, 744, 916,
	1058, 1224, 1307, 926, 637, 909, 696, 27, 1165, 57,
	30, 31, 1255, 32, 1474, 1470, 695, 694, 1600, 1471,
	1936, 1249, 1478, 1480, 691, 1165, 1511, 1848, 1484, 1717,
	32, 1907, 1481, 27, 696, 57, 30, 31, 1716, 1475,
	1030, 63, 1031, 714, 715, 716, 717, 718, 711, 496,
	496, 721, 695, 694, 987, 1824, 32, 1439, 63, 1945,
	496, 496, 1437, 1937, 1906, 981, 982, 1950, 1953, 1949,
	696, 1418, 1247, 1241, 1242, 820, 1240, 988, 1243, 1244,
	989, 1906, 1513, 1386, 63, 1387, 1967, 1517, 55, 1512,
	1887, 1510, 496, 1959, 1953, 1958, 1515, 25, 712, 713,
	714, 715, 716, 717, 718, 711, 1751, 1906, 721, 1514,
	1714, 355, 1954, 1253, 1256, 1876, 695, 694, 1605, 1907,
	695, 694, 1516, 1518, 1275, 1276, 1277, 1932, 27, 63,
	57, 30, 31, 1459, 696, 667, 1907, 943, 696, 1009,
	1409, 1435, 929, 930, 1235, 965, 1414, 1413, 1875, 927,
	928, 32, 104, 56, 1166, 104, 1628, 666, 1007, 468,
	1003, 104, 1907, 1822, 983, 1792, 337, 1410, 747, 1768,
	1880, 945, 1708, 1877, 1248, 1398, 55, 1789, 1887, 63,
	468, 1415, 669, 1407, 58, 1856, 669, 104, 1728, 1408,
	1649, 329, 104, 55, 104, 1887, 1708, 1853, 1787, 985,
	1246, 1643, 1906, 1047, 1050, 104, 1002, 485, 944, 1000,
	1059, 1639, 104, 1004, 996, 998, 999, 1636, 977, 55,
	997, 1887, 1634, 1005, 1768, 1837, 1014, 1015, 1016, 1017,
	1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027,
	1028, 1252, 1116, 1033, 1034, 1633, 821, 1036, 1412, 1165,
	821, 1162, 1166, 993, 994, 1474, 1470, 1907, 976, 1455,
	1471, 1055, 1454, 1472, 1473, 444, 445, 1393, 1071, 1221,
	1073, 1220, 58, 1032, 949, 695, 694, 468, 923, 984,
	1475, 922, 458, 1061, 931, 932, 1708, 1826, 1254, 58,
	695, 694, 921, 696, 913, 937, 938, 1529, 911, 1080,
	1081, 1768, 1818, 1146, 1085, 1151, 746, 1088, 696, 1129,
	1045, 1046, 1093, 1131, 55, 58, 1887, 695, 694, 1768,
	1779, 1768, 669, 1931, 1708, 1707, 1783, 967, 910, 496,
	908, 496, 1694, 669, 1008, 696, 1154, 1127, 1037, 1039,
	1136, 1135, 744, 926, 1044, 1132, 493, 1165, 1782, 1147,
	1691, 669, 827, 1160, 1606, 1161, 1004, 1040, 1620, 1619,
	1411, 1158, 1164, 1616, 1617, 1616, 1615, 27, 1376, 57,
	30, 31, 27, 1203, 1204, 1205, 1290, 669, 1069, 1070,
	1101, 669, 1038, 669, 1167, 1076, 1077, 1078, 1079, 67,
	32, 1198, 1200, 847, 846, 1347, 67, 828, 1143, 830,
	827, 104, 27, 1348, 485, 1558, 485, 485, 832, 1499,
	58, 485, 1376, 485, 1101, 1128, 832, 826, 63, 485,
	1100, 1038, 63, 63, 1279, 377, 376, 379, 380, 381,
	382, 744, 1038, 1758, 378, 383, 1687, 1003, 27, 1290,
	1797, 1906, 104, 1101, 1618, 828, 1927, 826, 1389, 1101,
	1137, 820, 1290, 63, 1863, 820, 1290, 1312, 832, 820,
	485, 1311, 1237, 1219, 1007, 826, 979, 914, 1854, 339,
	710, 709, 719, 720, 712, 713, 714, 715, 716, 717,
	718, 711, 1790, 1147, 721, 1268, 1267, 1739, 1718, 63,
	1004, 1106, 1109, 1110, 1111, 1107, 1907, 1108, 1112, 1284,
	719, 720, 712, 713, 714, 715, 716, 717, 718, 711,
	1280, 1172, 721, 1697, 1202, 1599, 1572, 1573, 1350, 1351,
	63, 1197, 821, 821, 821, 821, 821, 1392, 1234, 1192,
	1287, 1281, 1282, 1283, 1191, 1265, 1266, 1116, 683, 1368,
	1492, 1207, 1740, 1913, 1911, 1352, 1893, 1624, 1575, 821,
	458, 1558, 1440, 55, 948, 1887, 104, 104, 104, 1306,
	1317, 1319, 918, 991, 1210, 1578, 1212, 1325, 1326, 1327,
	1328, 485, 1362, 1577, 1360, 1359, 1371, 1363, 104, 1361,
	1358, 1364, 485, 1110, 1111, 1872, 1370, 343, 344, 104,
	1859, 1496, 1264, 104, 1870, 689, 690, 1288, 104, 1353,
	1390, 1273, 1356, 104, 1272, 485, 485, 1756, 1151, 1365,
	1354, 1355, 1377, 1357, 687, 1171, 1638, 1308, 1400, 1604,
	1603, 1394, 1458, 1399, 1395, 1396, 1286, 677, 1428, 56,
	1378, 845, 1379, 665, 1289, 1291, 1381, 1292, 678, 496,
	1008, 496, 496, 1298, 494, 1685, 1301, 1302, 1303, 58,
	981, 982, 1211, 1309, 1735, 1310, 917, 1443, 1313, 1314,
	1227, 1315, 1316, 689, 690, 1320, 1321, 1322, 1323, 1324,
	1114, 906, 340, 341, 1271, 1786, 1331, 1332, 1333, 334,
	1335, 1336, 1270, 1338, 1339, 1340, 1341, 1436, 1343, 1344,
	1345, 1438, 1803, 1755, 335, 67, 1802, 1742, 1376, 1300,
	1457, 1915, 1914, 1467, 1479, 1483, 1297, 1349, 939, 1367,
	692, 1914, 1464, 1445, 1446, 1447, 1915, 1427, 1456, 1429,
	1430, 1431, 1432, 1453, 1814, 1462, 1040, 1476, 1477, 1486,
	1487, 820, 820, 820, 820, 820, 1469, 1501, 1602, 1533,
	485, 485, 104, 104, 104, 974, 820, 104, 1463, 69,
	71, 485, 485, 1526, 1461, 1904, 24, 48, 820, 64,
	1, 1468, 1648, 1736, 1245, 1832, 1503, 1157, 1148, 1563,
	78, 56, 1507, 1502, 465, 77, 1520, 1519, 1186, 1187,
	1188, 1189, 104, 485, 1222, 635, 1726, 104, 297, 1155,
	1405, 1460, 1559, 1582, 1583, 1584, 1404, 458, 1401, 1416,
	1169, 1403, 1562, 1402, 104, 1505, 1406, 853, 851, 852,
	485, 1534, 1535, 1536, 1537, 1538, 1521, 1522, 1442, 1523,
	1524, 850, 855, 854, 1585, 1581, 1168, 849, 300, 453,
	840, 1530, 1531, 693, 86, 1576, 49, 1729, 1482, 1239,
	81, 946, 1592, 642, 643, 1579, 302, 1501, 1151, 729,
	1151, 1269, 1382, 1569, 485, 1597, 1598, 459, 1565, 1864,
	1596, 681, 1801, 1741, 1591, 1305, 1528, 1622, 1623, 758,
	1056, 360, 995, 375, 1449, 374, 1451, 1452, 1587, 373,
	370, 1506, 371, 705, 1226, 708, 986, 1346, 703, 1580,
	485, 485, 722, 723, 724, 725, 726, 727, 728, 358,
	706, 707, 704, 710, 709, 719, 720, 712, 713, 714,
	715, 716, 717, 718, 711, 350, 819, 721, 812, 1105,
	821, 1103, 1102, 1539, 1540, 104, 919, 1631, 1545, 1601,
	1626, 1548, 448, 104, 104, 1586, 1553, 104, 104, 1630,
	1574, 104, 104, 104, 1632, 1570, 1672, 818, 669, 1498,
	1635, 650, 1607, 1608, 1629, 316, 1673, 1808, 485, 1611,
	1564, 1543, 1544, 1677, 1546, 1547, 1614, 1549, 1550, 1551,
	1552, 990, 1554, 1555, 1556, 1642, 29, 68, 1627, 345,
	19, 18, 1678, 1654, 1661, 17, 710, 709, 719, 720,
	712, 713, 714, 715, 716, 717, 718, 711, 656, 1653,
	721, 20, 710, 709, 719, 720, 712, 713, 714, 715,
	716, 717, 718, 711, 21, 22, 721, 16, 1695, 104,
	485, 15, 485, 14, 1656, 479, 104, 104, 33, 1686,
	104, 37, 36, 35, 10, 1700, 1444, 1213, 326, 952,
	950, 1951, 1390, 1929, 56, 1903, 1902, 1644, 1704, 1705,
	1151, 104, 1701, 104, 104, 23, 13, 12, 11, 9,
	104, 1881, 4, 336, 1710, 1706, 1106, 1109, 1110, 1111,
	1107, 1711, 1108, 1112, 26, 2, 1572, 1573, 0, 1725,
	104, 104, 104, 104, 104, 0, 1419, 1420, 1675, 0,
	0, 0, 0, 1426, 0, 1727, 1655, 0, 0, 0,
	1596, 0, 1657, 1433, 0, 0, 1738, 0, 1563, 0,
	1733, 1760, 0, 1666, 1667, 0, 0, 1721, 0, 0,
	0, 0, 746, 0, 0, 0, 0, 0, 0, 820,
	0, 1696, 1734, 0, 1698, 0, 0, 0, 0, 0,
	0, 1562, 1712, 0, 1785, 0, 0, 0, 0, 1757,
	0, 0, 0, 0, 1784, 0, 1796, 1688, 1689, 1690,
	0, 1693, 1765, 1766, 1772, 1778, 1777, 1767, 1680, 1681,
	0, 0, 0, 1699, 1682, 1764, 0, 1683, 0, 1563,
	0, 56, 1684, 0, 0, 0, 1791, 0, 1745, 1746,
	1747, 1748, 1749, 0, 0, 1788, 1752, 1753, 0, 1813,
	0, 680, 1795, 0, 1799, 0, 1794, 0, 0, 0,
	0, 0, 1562, 104, 104, 104, 104, 104, 1821, 1815,
	0, 0, 1819, 0, 0, 104, 1829, 1823, 104, 0,
	0, 0, 104, 1719, 0, 0, 0, 0, 0, 1830,
	104, 0, 102, 0, 0, 314, 1780, 1839, 1781, 1836,
	1835, 102, 0, 0, 0, 0, 1738, 1151, 0, 1845,
	1828, 485, 1844, 0, 458, 0, 0, 1750, 1831, 0,
	0, 0, 1754, 0, 349, 0, 0, 451, 461, 0,
	1858, 0, 102, 0, 102, 1867, 0, 1869, 0, 1874,
	1868, 0, 0, 1871, 0, 102, 1769, 1821, 1770, 1771,
	1759, 0, 102, 1882, 0, 0, 1894, 1886, 56, 1888,
	1908, 1885, 0, 1884, 746, 1883, 1912, 0, 1910, 485,
	0, 0, 0, 0, 0, 0, 0, 0, 1873, 0,
	485, 104, 485, 485, 1609, 0, 0, 56, 0, 1804,
	1805, 1806, 1807, 0, 1928, 1926, 1811, 1812, 0, 0,
	0, 0, 1940, 56, 0, 0, 0, 0, 0, 0,
	56, 1838, 746, 0, 0, 0, 56, 56, 56, 0,
	1816, 56, 1114, 0, 1928, 1928, 56, 1960, 0, 1942,
	56, 104, 0, 1928, 56, 0, 1944, 56, 0, 56,
	485, 1928, 1948, 56, 0, 0, 1928, 1957, 0, 0,
	1928, 0, 1840, 1122, 1124, 0, 1965, 0, 0, 310,
	1846, 0, 0, 1969, 709, 719, 720, 712, 713, 714,
	715, 716, 717, 718, 711, 386, 1855, 721, 1919, 0,
	485, 0, 0, 0, 1066, 0, 0, 307, 1862, 0,
	0, 0, 0, 0, 0, 0, 0, 710, 709, 719,
	720, 712, 713, 714, 715, 716, 717, 718, 711, 0,
	0, 721, 485, 485, 0, 1917, 1918, 0, 0, 0,
	0, 0, 1173, 1174, 0, 1179, 1180, 1181, 1182, 1183,
	485, 0, 0, 0, 1123, 0, 0, 0, 0, 290,
	1941, 102, 0, 1193, 1194, 1195, 293, 0, 0, 0,
	485, 485, 460, 485, 485, 0, 301, 308, 309, 0,
	0, 0, 1961, 1933, 1934, 0, 0, 0, 0, 0,
	0, 483, 0, 0, 0, 0, 0, 0, 1713, 0,
	1715, 0, 102, 0, 1676, 0, 0, 0, 0, 0,
	0, 0, 299, 0, 0, 0, 0, 0, 0, 306,
	0, 0, 104, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1743, 710, 709, 719, 720, 712, 713, 714,
	715, 716, 717, 718, 711, 0, 0, 721, 0, 0,
	0, 485, 0, 0, 104, 485, 0, 0, 0, 291,
	0, 0, 485, 0, 0, 485, 485, 485, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 822, 0, 0, 0, 0, 0, 0,
	303, 294, 295, 0, 304, 305, 313, 0, 0, 0,
	296, 298, 0, 292, 312, 311, 102, 102, 102, 0,
	0, 0, 0, 0, 0, 461, 0, 0, 0, 1671,
	0, 0, 0, 0, 101, 0, 0, 0, 102, 0,
	0, 0, 0, 319, 0, 0, 0, 0, 0, 102,
	0, 0, 0, 102, 1670, 0, 0, 0, 102, 0,
	0, 0, 0, 925, 485, 485, 485, 0, 0, 449,
	0, 0, 0, 485, 469, 0, 471, 0, 0, 0,
	0, 485, 0, 0, 0, 0, 0, 480, 498, 0,
	498, 498, 0, 0, 490, 498, 0, 498, 0, 0,
	0, 0, 0, 498, 0, 0, 104, 710, 709, 719,
	720, 712, 713, 714, 715, 716, 717, 718, 711, 0,
	0, 721, 0, 0, 0, 0, 0, 0, 0, 485,
	0, 0, 710, 709, 719, 720, 712, 713, 714, 715,
	716, 717, 718, 711, 699, 1669, 721, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1421, 1422, 1423, 1425, 0, 0, 0, 0, 0,
	0, 0, 0, 485, 485, 0, 485, 0, 0, 485,
	0, 104, 0, 104, 0, 0, 0, 0, 0, 0,
	485, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	485, 0, 102, 102, 102, 0, 0, 102, 0, 0,
	0, 0, 0, 0, 485, 0, 0, 0, 0, 0,
	0, 485, 104, 710, 709, 719, 720, 712, 713, 714,
	715, 716, 717, 718, 711, 0, 0, 721, 0, 0,
	0, 0, 102, 0, 0, 0, 0, 102, 0, 460,
	485, 0, 0, 0, 0, 841, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 0, 905, 0, 0, 0,
	0, 0, 485, 925, 0, 0, 0, 0, 0, 485,
	485, 0, 0, 492, 0, 0, 0, 0, 0, 498,
	498, 0, 0, 0, 0, 0, 0, 0, 0, 485,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 485, 0, 0, 0,
	349, 349, 0, 0, 671, 349, 349, 349, 349, 0,
	0, 0, 461, 0, 0, 0, 485, 0, 0, 0,
	0, 0, 0, 0, 0, 485, 0, 0, 0, 0,
	0, 0, 349, 349, 349, 349, 0, 0, 349, 349,
	349, 349, 349, 1668, 0, 0, 0, 0, 0, 349,
	349, 349, 0, 349, 349, 0, 349, 349, 349, 349,
	0, 349, 349, 349, 0, 102, 0, 0, 0, 0,
	0, 0, 0, 102, 1125, 0, 0, 102, 102, 0,
	0, 102, 1133, 925, 461, 0, 0, 0, 0, 0,
	1610, 0, 0, 0, 0, 0, 925, 0, 0, 0,
	0, 0, 0, 0, 498, 498, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 498, 498, 0, 814, 0,
	823, 710, 709, 719, 720, 712, 713, 714, 715, 716,
	717, 718, 711, 0, 0, 721, 0, 0, 0, 0,
	848, 0, 0, 0, 0, 0, 0, 498, 0, 0,
	0, 912, 0, 0, 0, 449, 0, 0, 0, 102,
	920, 0, 0, 0, 0, 0, 102, 102, 0, 0,
	102, 0, 0, 0, 699, 1658, 1659, 498, 1660, 0,
	1504, 1662, 0, 1664, 0, 0, 0, 0, 0, 0,
	0, 102, 0, 1228, 1229, 0, 0, 0, 0, 0,
	102, 710, 709, 719, 720, 712, 713, 714, 715, 716,
	717, 718, 711, 0, 0, 721, 0, 875, 1035, 0,
	102, 102, 102, 102, 102, 0, 0, 0, 0, 0,
	925, 0, 0, 1041, 1043, 0, 460, 0, 1049, 1052,
	1053, 1054, 349, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1062, 1063, 0, 0, 0, 0,
	0, 1709, 0, 0, 0, 1064, 0, 1067, 1068, 0,
	0, 0, 1072, 0, 1074, 1075, 0, 0, 0, 0,
	0, 0, 1082, 1083, 1084, 0, 1086, 1087, 349, 1089,
	1090, 1091, 1092, 0, 1094, 1095, 1096, 0, 0, 0,
	862, 0, 0, 0, 933, 934, 935, 349, 460, 936,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	498, 0, 498, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 349, 349, 0, 0, 0, 349, 0, 0,
	349, 0, 876, 0, 966, 349, 0, 0, 0, 973,
	0, 0, 461, 102, 102, 102, 102, 102, 0, 0,
	0, 0, 0, 0, 0, 1366, 992, 0, 102, 0,
	0, 0, 1125, 0, 0, 0, 0, 0, 0, 0,
	102, 0, 0, 0, 498, 0, 498, 889, 892, 893,
	894, 895, 896, 897, 0, 898, 899, 900, 901, 902,
	903, 904, 0, 877, 878, 879, 880, 856, 860, 890,
	857, 863, 859, 861, 858, 1285, 864, 865, 866, 867,
	868, 869, 870, 871, 872, 873, 874, 881, 882, 883,
	884, 885, 886, 887, 888, 0, 710, 709, 719, 720,
	712, 713, 714, 715, 716, 717, 718, 711, 0, 0,
	721, 0, 0, 0, 498, 710, 709, 719, 720, 712,
	713, 714, 715, 716, 717, 718, 711, 0, 0, 721,
	0, 102, 0, 0, 0, 1274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1099, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1130, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 891,
	0, 102, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 0, 0, 0, 0,
	1304, 0, 349, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1329, 1330, 0, 0, 0,
	1334, 0, 0, 1337, 0, 0, 460, 0, 1342, 0,
	0, 1209, 0, 0, 0, 0, 0, 0, 1216, 1217,
	0, 0, 1218, 0, 0, 0, 0, 0, 0, 461,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1225, 0, 0, 0, 0, 0, 0,
	0, 0, 1236, 0, 0, 498, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1257, 1258, 1259, 1260, 1261, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1441, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 0, 498, 0, 498, 498, 0, 0,
	102, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 102, 0, 0, 498, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1532, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 460, 0, 0, 1566, 1568, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1568, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 498, 498, 0, 498, 1595, 0,
	0, 0, 0, 0, 0, 0, 102, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1450, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1497, 0, 0, 0, 0, 0, 0,
	0, 1125, 0, 1125, 0, 1637, 0, 0, 0, 1641,
	0, 0, 0, 0, 0, 0, 1645, 0, 0, 1650,
	1651, 1652, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1703, 1703,
	1703, 0, 0, 0, 0, 0, 461, 498, 0, 0,
	0, 0, 0, 0, 0, 1703, 0, 102, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1621, 0, 0, 0, 0, 0,
	0, 0, 1625, 498, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1761, 1762, 0,
	1763, 0, 0, 1703, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1595, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1595, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1793, 0,
	0, 0, 0, 0, 0, 1703, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1820, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1595, 0, 0, 0,
	0, 0, 0, 498, 498, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	460, 0, 0, 1847, 0, 0, 0, 0, 1720, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1857, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1595, 0, 0, 0, 0, 0, 0, 0, 0, 1703,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	613, 601, 0, 566, 616, 540, 556, 624, 557, 560,
	592, 526, 576, 197, 554, 0, 543, 521, 550, 522,
	541, 568, 141, 539, 603, 579, 615, 166, 588, 614,
	572, 0, 622, 169, 585, 0, 244, 184, 0, 0,
	570, 605, 574, 599, 565, 593, 531, 584, 617, 555,
	590, 618, 0, 0, 1800, 484, 0, 1152, 1153, 0,
	0, 0, 0, 0, 127, 0, 587, 612, 552, 589,
	591, 520, 586, 0, 524, 527, 623, 608, 546, 547,
	548, 1391, 0, 0, 0, 0, 0, 0, 569, 575,
	596, 563, 0, 0, 0, 0, 0, 0, 0, 0,
	544, 0, 583, 0, 0, 0, 528, 525, 0, 0,
	567, 0, 0, 0, 530, 0, 545, 597, 0, 500,
	149, 0, 0, 600, 607, 564, 0, 278, 611, 562,
	561, 214, 0, 249, 152, 167, 121, 106, 116, 1849,
	151, 193, 223, 231, 553, 518, 604, 542, 551, 135,
	549, 225, 201, 269, 0, 582, 206, 224, 170, 258,
	216, 267, 268, 279, 280, 253, 276, 284, 241, 0,
	0, 0, 0, 0, 0, 122, 254, 183, 188, 131,
	133, 132, 117, 236, 256, 126, 134, 245, 250, 109,
	252, 266, 128, 235, 111, 264, 248, 181, 161, 162,
	110, 0, 221, 140, 148, 137, 196, 0, 0, 0,
	261, 262, 136, 287, 118, 275, 113, 119, 274, 190,
	0, 0, 0, 257, 265, 182, 175, 0, 112, 263,
	180, 174, 165, 144, 154, 211, 172, 212, 155, 186,
	185, 187, 0, 523, 0, 246, 272, 288, 124, 538,
	0, 255, 282, 283, 0, 0, 125, 147, 143, 210,
	189, 120, 157, 243, 164, 171, 220, 286, 200, 226,
	129, 271, 242, 534, 537, 532, 0, 533, 577, 578,
	619, 620, 621, 598, 529, 0, 535, 536, 0, 602,
	609, 610, 594, 625, 558, 559, 501, 502, 503, 504,
	505, 506, 507, 508, 509, 510, 511, 512, 513, 514,
	515, 516, 517, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 581, 105, 114, 168, 285, 218,
	146, 273, 519, 139, 0, 0, 571, 573, 580, 595,
	107, 108, 115, 123, 130, 138, 142, 145, 150, 153,
	156, 158, 159, 160, 163, 173, 176, 177, 178, 179,
	191, 192, 194, 195, 198, 199, 202, 203, 204, 205,
	207, 208, 209, 213, 215, 217, 219, 222, 227, 228,
	229, 230, 232, 233, 234, 237, 238, 239, 240, 247,
	251, 259, 260, 270, 277, 281, 606, 613, 601, 0,
	566, 616, 540, 556, 624, 557, 560, 592, 526, 576,
	197, 554, 0, 543, 521, 550, 522, 541, 568, 141,
	539, 603, 579, 615, 166, 588, 614, 572, 0, 622,
	169, 585, 0, 244, 184, 0, 0, 570, 605, 574,
	599, 565, 593, 531, 584, 617, 555, 590, 618, 0,
	0, 0, 484, 0, 1152, 1153, 0, 0, 0, 0,
	0, 127, 0, 587, 612, 552, 589, 591, 520, 586,
	0, 524, 527, 623, 608, 546, 547, 548, 0, 0,
	0, 0, 0, 0, 0, 569, 575, 596, 563, 0,
	0, 0, 0, 0, 0, 0, 0, 544, 0, 583,
	0, 0, 0, 528, 525, 0, 0, 567, 0, 0,
	0, 530, 0, 545, 597, 0, 500, 149, 0, 0,
	600, 607, 564, 0, 278, 611, 562, 561, 214, 0,
	249, 152, 167, 121, 106, 116, 0, 151, 193, 223,
	231, 553, 518, 604, 542, 551, 135, 549, 225, 201,
	269, 0, 582, 206, 224, 170, 258, 216, 267, 268,
	279, 280, 253, 276, 284, 241, 0, 0, 0, 0,
	0, 0, 122, 254, 183, 188, 131, 133, 132, 117,
	236, 256, 126, 134, 245, 250, 109, 252, 266, 128,
	235, 111, 264, 248, 181, 161, 162, 110, 0, 221,
	140, 148, 137, 196, 0, 0, 0, 261, 262, 136,
	287, 118, 275, 113, 119, 274, 190, 0, 0, 0,
	257, 265, 182, 175, 0, 112, 263, 180, 174, 165,
	144, 154, 211, 172, 212, 155, 186, 185, 187, 0,
	523, 0, 246, 272, 288, 124, 538, 0, 255, 282,
	283, 0, 0, 125, 147, 143, 210, 189, 120, 157,
	243, 164, 171, 220, 286, 200, 226, 129, 271, 242,
	534, 537, 532, 0, 533, 577, 578, 619, 620, 621,
	598, 529, 0, 535, 536, 0, 602, 609, 610, 594,
	625, 558, 559, 501, 502, 503, 504, 505, 506, 507,
	508, 509, 510, 511, 512, 513, 514, 515, 516, 517,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 581, 105, 114, 168, 285, 218, 146, 273, 519,
	139, 0, 0, 571, 573, 580, 595, 107, 108, 115,
	123, 130, 138, 142, 145, 150, 153, 156, 158, 159,
	160, 163, 173, 176, 177, 178, 179, 191, 192, 194,
	195, 198, 199, 202, 203, 204, 205, 207, 208, 209,
	213, 215, 217, 219, 222, 227, 228, 229, 230, 232,
	233, 234, 237, 238, 239, 240, 247, 251, 259, 260,
	270, 277, 281, 606, 613, 601, 0, 566, 616, 540,
	556, 624, 557, 560, 592, 526, 576, 197, 554, 0,
	543, 521, 550, 522, 541, 568, 141, 539, 603, 579,
	615, 166, 588, 614, 572, 0, 622, 169, 585, 0,
	244, 184, 0, 0, 570, 605, 574, 599, 565, 593,
	531, 584, 617, 555, 590, 618, 0, 0, 0, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 0,
	587, 612, 552, 589, 591, 520, 586, 0, 524, 527,
	623, 608, 546, 547, 548, 0, 0, 0, 0, 0,
	0, 0, 569, 575, 596, 563, 0, 0, 0, 0,
	0, 0, 1500, 0, 544, 0, 583, 0, 0, 0,
	528, 525, 0, 0, 567, 0, 0, 0, 530, 0,
	545, 597, 0, 500, 149, 0, 0, 600, 607, 564,
	0, 278, 611, 562, 561, 214, 0, 249, 152, 167,
	121, 106, 116, 0, 151, 193, 223, 231, 553, 518,
	604, 542, 551, 135, 549, 225, 201, 269, 0, 582,
	206, 224, 170, 258, 216, 267, 268, 279, 280, 253,
	276, 284, 241, 0, 0, 0, 0, 0, 0, 122,
	254, 183, 188, 131, 133, 132, 117, 236, 256, 126,
	134, 245, 250, 109, 252, 266, 128, 235, 111, 264,
	248, 181, 161, 162, 110, 0, 221, 140, 148, 137,
	196, 0, 0, 0, 261, 262, 136, 287, 118, 275,
	113, 119, 274, 190, 0, 0, 0, 257, 265, 182,
	175, 0, 112, 263, 180, 174, 165, 144, 154, 211,
	172, 212, 155, 186, 185, 187, 0, 523, 0, 246,
	272, 288, 124, 538, 0, 255, 282, 283, 0, 0,
	125, 147, 143, 210, 189, 120, 157, 243, 164, 171,
	220, 286, 200, 226, 129, 271, 242, 534, 537, 532,
	0, 533, 577, 578, 619, 620, 621, 598, 529, 0,
	535, 536, 0, 602, 609, 610, 594, 625, 558, 559,
	501, 502, 503, 504, 505, 506, 507, 508, 509, 510,
	511, 512, 513, 514, 515, 516, 517, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 581, 105,
	114, 168, 285, 218, 146, 273, 519, 139, 0, 0,
	571, 573, 580, 595, 107, 108, 115, 123, 130, 138,
	142, 145, 150, 153, 156, 158, 159, 160, 163, 173,
	176, 177, 178, 179, 191, 192, 194, 195, 198, 199,
	202, 203, 204, 205, 207, 208, 209, 213, 215, 217,
	219, 222, 227, 228, 229, 230, 232, 233, 234, 237,
	238, 239, 240, 247, 251, 259, 260, 270, 277, 281,
	606, 613, 601, 0, 566, 616, 540, 556, 624, 557,
	560, 592, 526, 576, 197, 554, 0, 543, 521, 550,
	522, 541, 568, 141, 539, 603, 579, 615, 166, 588,
	614, 572, 0, 622, 169, 585, 0, 244, 184, 0,
	0, 570, 605, 574, 599, 565, 593, 531, 584, 617,
	555, 590, 618, 63, 0, 0, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 0, 587, 612, 552,
	589, 591, 520, 586, 0, 524, 527, 623, 608, 546,
	547, 548, 0, 0, 0, 0, 0, 0, 0, 569,
	575, 596, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 544, 0, 583, 0, 0, 0, 528, 525, 0,
	0, 567, 0, 0, 0, 530, 0, 545, 597, 0,
	500, 149, 0, 0, 600, 607, 564, 0, 278, 611,
	562, 561, 214, 0, 249, 152, 167, 121, 106, 116,
	0, 151, 193, 223, 231, 553, 518, 604, 542, 551,
	135, 549, 225, 201, 269, 0, 582, 206, 224, 170,
	258, 216, 267, 268, 279, 280, 253, 276, 284, 241,
	0, 0, 0, 0, 0, 0, 122, 254, 183, 188,
	131, 133, 132, 117, 236, 256, 126, 134, 245, 250,
	109, 252, 266, 128, 235, 111, 264, 248, 181, 161,
	162, 110, 0, 221, 140, 148, 137, 196, 0, 0,
	0, 261, 262, 136, 287, 118, 275, 113, 119, 274,
	190, 0, 0, 0, 257, 265, 182, 175, 0, 112,
	263, 180, 174, 165, 144, 154, 211, 172, 212, 155,
	186, 185, 187, 0, 523, 0, 246, 272, 288, 124,
	538, 0, 255, 282, 283, 0, 0, 125, 147, 143,
	210, 189, 120, 157, 243, 164, 171, 220, 286, 200,
	226, 129, 271, 242, 534, 537, 532, 0, 533, 577,
	578, 619, 620, 621, 598, 529, 0, 535, 536, 0,
	602, 609, 610, 594, 625, 558, 559, 501, 502, 503,
	504, 505, 506, 507, 508, 509, 510, 511, 512, 513,
	514, 515, 516, 517, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 581, 105, 114, 168, 285,
	218, 146, 273, 519, 139, 0, 0, 571, 573, 580,
	595, 107, 108, 115, 123, 130, 138, 142, 145, 150,
	153, 156, 158, 159, 160, 163, 173, 176, 177, 178,
	179, 191, 192, 194, 195, 198, 199, 202, 203, 204,
	205, 207, 208, 209, 213, 215, 217, 219, 222, 227,
	228, 229, 230, 232, 233, 234, 237, 238, 239, 240,
	247, 251, 259, 260, 270, 277, 281, 606, 613, 601,
	0, 566, 616, 540, 556, 624, 557, 560, 592, 526,
	576, 197, 554, 0, 543, 521, 550, 522, 541, 568,
	141, 539, 603, 579, 615, 166, 588, 614, 572, 0,
	622, 169, 585, 0, 244, 184, 0, 0, 570, 605,
	574, 599, 565, 593, 531, 584, 617, 555, 590, 618,
	0, 0, 0, 103, 0, 0, 0, 0, 0, 0,
	0, 0, 127, 0, 587, 612, 552, 589, 591, 520,
	586, 0, 524, 527, 623, 608, 546, 547, 548, 0,
	0, 0, 0, 0, 0, 0, 569, 575, 596, 563,
	0, 0, 0, 0, 0, 0, 1134, 0, 544, 0,
	583, 0, 0, 0, 528, 525, 0, 0, 567, 0,
	0, 0, 530, 0, 545, 597, 0, 500, 149, 0,
	0, 600, 607, 564, 0, 278, 611, 562, 561, 214,
	0, 249, 152, 167, 121, 106, 116, 0, 151, 193,
	223, 231, 553, 518, 604, 542, 551, 135, 549, 225,
	201, 269, 0, 582, 206, 224, 170, 258, 216, 267,
	268, 279, 280, 253, 276, 284, 241, 0, 0, 0,
	0, 0, 0, 122, 254, 183, 188, 131, 133, 132,
	117, 236, 256, 126, 134, 245, 250, 109, 252, 266,
	128, 235, 111, 264, 248, 181, 161, 162, 110, 0,
	221, 140, 148, 137, 196, 0, 0, 0, 261, 262,
	136, 287, 118, 275, 113, 119, 274, 190, 0, 0,
	0, 257, 265, 182, 175, 0, 112, 263, 180, 174,
	165, 144, 154, 211, 172, 212, 155, 186, 185, 187,
	0, 523, 0, 246, 272, 288, 124, 538, 0, 255,
	282, 283, 0, 0, 125, 147, 143, 210, 189, 120,
	157, 243, 164, 171, 220, 286, 200, 226, 129, 271,
	242, 534, 537, 532, 0, 533, 577, 578, 619, 620,
	621, 598, 529, 0, 535, 536, 0, 602, 609, 610,
	594, 625, 558, 559, 501, 502, 503, 504, 505, 506,
	507, 508, 509, 510, 511, 512, 513, 514, 515, 516,
	517, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 581, 105, 114, 168, 285, 218, 146, 273,
	519, 139, 0, 0, 571, 573, 580, 595, 107, 108,
	115, 123, 130, 138, 142, 145, 150, 153, 156, 158,
	159, 160, 163, 173, 176, 177, 178, 179, 191, 192,
	194, 195, 198, 199, 202, 203, 204, 205, 207, 208,
	209, 213, 215, 217, 219, 222, 227, 228, 229, 230,
	232, 233, 234, 237, 238, 239, 240, 247, 251, 259,
	260, 270, 277, 281, 606, 613, 601, 0, 566, 616,
	540, 556, 624, 557, 560, 592, 526, 576, 197, 554,
	0, 543, 521, 550, 522, 541, 568, 141, 539, 603,
	579, 615, 166, 588, 614, 572, 0, 622, 169, 585,
	0, 244, 184, 0, 0, 570, 605, 574, 599, 565,
	593, 531, 584, 617, 555, 590, 618, 0, 0, 0,
	354, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 587, 612, 552, 589, 591, 520, 586, 0, 524,
	527, 623, 608, 546, 547, 548, 0, 0, 0, 0,
	0, 0, 0, 569, 575, 596, 563, 0, 0, 0,
	0, 0, 0, 1001, 0, 544, 0, 583, 0, 0,
	0, 528, 525, 0, 0, 567, 0, 0, 0, 530,
	0, 545, 597, 0, 500, 149, 0, 0, 600, 607,
	564, 0, 278, 611, 562, 561, 214, 0, 249, 152,
	167, 121, 106, 116, 0, 151, 193, 223, 231, 553,
	518, 604, 542, 551, 135, 549, 225, 201, 269, 0,
	582, 206, 224, 170, 258, 216, 267, 268, 279, 280,
	253, 276, 284, 241, 0, 0, 0, 0, 0, 0,
	122, 254, 183, 188, 131, 133, 132, 117, 236, 256,
	126, 134, 245, 250, 109, 252, 266, 128, 235, 111,
	264, 248, 181, 161, 162, 110, 0, 221, 140, 148,
	137, 196, 0, 0, 0, 261, 262, 136, 287, 118,
	275, 113, 119, 274, 190, 0, 0, 0, 257, 265,
	182, 175, 0, 112, 263, 180, 174, 165, 144, 154,
	211, 172, 212, 155, 186, 185, 187, 0, 523, 0,
	246, 272, 288, 124, 538, 0, 255, 282, 283, 0,
	0, 125, 147, 143, 210, 189, 120, 157, 243, 164,
	171, 220, 286, 200, 226, 129, 271, 242, 534, 537,
	532, 0, 533, 577, 578, 619, 620, 621, 598, 529,
	0, 535, 536, 0, 602, 609, 610, 594, 625, 558,
	559, 501, 502, 503, 504, 505, 506, 507, 508, 509,
	510, 511, 512, 513, 514, 515, 516, 517, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 581,
	105, 114, 168, 285, 218, 146, 273, 519, 139, 0,
	0, 571, 573, 580, 595, 107, 108, 115, 123, 130,
	138, 142, 145, 150, 153, 156, 158, 159, 160, 163,
	173, 176, 177, 178, 179, 191, 192, 194, 195, 198,
	199, 202, 203, 204, 205, 207, 208, 209, 213, 215,
	217, 219, 222, 227, 228, 229, 230, 232, 233, 234,
	237, 238, 239, 240, 247, 251, 259, 260, 270, 277,
	281, 606, 613, 601, 0, 566, 616, 540, 556, 624,
	557, 560, 592, 526, 576, 197, 554, 0, 543, 521,
	550, 522, 541, 568, 141, 539, 603, 579, 615, 166,
	588, 614, 572, 0, 622, 169, 585, 0, 244, 184,
	0, 0, 570, 605, 574, 599, 565, 593, 531, 584,
	617, 555, 590, 618, 0, 0, 0, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 0, 587, 612,
	552, 589, 591, 520, 586, 0, 524, 527, 623, 608,
	546, 547, 548, 0, 0, 0, 0, 0, 0, 0,
	569, 575, 596, 563, 0, 0, 0, 0, 0, 0,
	0, 0, 544, 0, 583, 0, 0, 0, 528, 525,
	0, 0, 567, 0, 0, 0, 530, 0, 545, 597,
	0, 500, 149, 0, 0, 600, 607, 564, 0, 278,
	611, 562, 561, 214, 0, 249, 152, 167, 121, 106,
	116, 0, 151, 193, 223, 231, 553, 518, 604, 542,
	551, 135, 549, 225, 201, 269, 0, 582, 206, 224,
	170, 258, 216, 267, 268, 279, 280, 253, 276, 284,
	241, 0, 0, 0, 0, 0, 0, 122, 254, 183,
	188, 131, 133, 132, 117, 236, 256, 126, 134, 245,
	250, 109, 252, 266, 128, 235, 111, 264, 248, 181,
	161, 162, 110, 0, 221, 140, 148, 137, 196, 0,
	0, 0, 261, 262, 136, 287, 118, 275, 113, 119,
	274, 190, 0, 0, 0, 257, 265, 182, 175, 0,
	112, 263, 180, 174, 165, 144, 154, 211, 172, 212,
	155, 186, 185, 187, 0, 523, 0, 246, 272, 288,
	124, 538, 0, 255, 282, 283, 0, 0, 125, 147,
	143, 210, 189, 120, 157, 243, 164, 171, 220, 286,
	200, 226, 129, 271, 242, 534, 537, 532, 0, 533,
	577, 578, 619, 620, 621, 598, 529, 0, 535, 536,
	0, 602, 609, 610, 594, 625, 558, 559, 501, 502,
	503, 504, 505, 506, 507, 508, 509, 510, 511, 512,
	513, 514, 515, 516, 517, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 581, 105, 114, 168,
	285, 218, 146, 273, 519, 139, 0, 0, 571, 573,
	580, 595, 107, 108, 115, 123, 130, 138, 142, 145,
	150, 153, 156, 158, 159, 160, 163, 173, 176, 177,
	178, 179, 191, 192, 194, 195, 198, 199, 202, 203,
	204, 205, 207, 208, 209, 213, 215, 217, 219, 222,
	227, 228, 229, 230, 232, 233, 234, 237, 238, 239,
	240, 247, 251, 259, 260, 270, 277, 281, 606, 613,
	601, 0, 566, 616, 540, 556, 624, 557, 560, 592,
	526, 576, 197, 554, 0, 543, 521, 550, 522, 541,
	568, 141, 539, 603, 579, 615, 166, 588, 614, 572,
	0, 622, 169, 585, 0, 244, 184, 0, 0, 570,
	605, 574, 599, 565, 593, 531, 584, 617, 555, 590,
	618, 0, 0, 0, 354, 0, 0, 0, 0, 0,
	0, 0, 0, 127, 0, 587, 612, 552, 589, 591,
	520, 586, 0, 524, 527, 623, 608, 546, 547, 548,
	0, 0, 0, 0, 0, 0, 0, 569, 575, 596,
	563, 0, 0, 0, 0, 0, 0, 0, 0, 544,
	0, 583, 0, 0, 0, 528, 525, 0, 0, 567,
	0, 0, 0, 530, 0, 545, 597, 0, 500, 149,
	0, 0, 600, 607, 564, 0, 278, 611, 562, 561,
	214, 0, 249, 152, 167, 121, 106, 116, 0, 151,
	193, 223, 231, 553, 518, 604, 542, 551, 135, 549,
	225, 201, 269, 0, 582, 206, 224, 170, 258, 216,
	267, 268, 279, 280, 253, 276, 284, 241, 0, 0,
	0, 0, 0, 0, 122, 254, 183, 188, 131, 133,
	132, 117, 236, 256, 126, 134, 245, 250, 109, 252,
	266, 128, 235, 111, 264, 248, 181, 161, 162, 110,
	0, 221, 140, 148, 137, 196, 0, 0, 0, 261,
	262, 136, 287, 118, 275, 113, 119, 274, 190, 0,
	0, 0, 257, 265, 182, 175, 0, 112, 263, 180,
	174, 165, 144, 154, 211, 172, 212, 155, 186, 185,
	187, 0, 523, 0, 246, 272, 288, 124, 538, 0,
	255, 282, 283, 0, 0, 125, 147, 143, 210, 189,
	120, 157, 243, 164, 171, 220, 286, 200, 226, 129,
	271, 242, 534, 537, 532, 0, 533, 577, 578, 619,
	620, 621, 598, 529, 0, 535, 536, 0, 602, 609,
	610, 594, 625, 558, 559, 501, 502, 503, 504, 505,
	506, 507, 508, 509, 510, 511, 512, 513, 514, 515,
	516, 517, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 581, 105, 114, 168, 285, 218, 146,
	273, 519, 139, 0, 0, 571, 573, 580, 595, 107,
	108, 115, 123, 130, 138, 142, 145, 150, 153, 156,
	158, 159, 160, 163, 173, 176, 177, 178, 179, 191,
	192, 194, 195, 198, 199, 202, 203, 204, 205, 207,
	208, 209, 213, 215, 217, 219, 222, 227, 228, 229,
	230, 232, 233, 234, 237, 238, 239, 240, 247, 251,
	259, 260, 270, 277, 281, 606, 613, 601, 0, 566,
	616, 540, 556, 624, 557, 560, 592, 526, 576, 197,
	554, 0, 543, 521, 550, 522, 541, 568, 141, 539,
	603, 579, 615, 166, 588, 614, 572, 0, 622, 169,
	585, 0, 244, 184, 0, 0, 570, 605, 574, 599,
	565, 593, 531, 584, 617, 555, 590, 618, 0, 0,
	0, 103, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 0, 587, 612, 552, 589, 591, 520, 586, 0,
	524, 527, 623, 608, 546, 547, 548, 0, 0, 0,
	0, 0, 0, 0, 569, 575, 596, 563, 0, 0,
	0, 0, 0, 0, 0, 0, 544, 0, 583, 0,
	0, 0, 528, 525, 0, 0, 567, 0, 0, 0,
	530, 0, 545, 597, 0, 500, 149, 0, 0, 600,
	607, 564, 0, 278, 611, 562, 561, 214, 0, 249,
	152, 167, 121, 106, 116, 0, 151, 193, 223, 231,
	553, 518, 604, 542, 551, 135, 549, 225, 201, 269,
	0, 582, 206, 224, 170, 258, 216, 267, 268, 279,
	280, 253, 276, 284, 241, 0, 0, 0, 0, 0,
	0, 122, 254, 183, 188, 131, 133, 132, 117, 236,
	256, 126, 134, 245, 250, 109, 252, 266, 128, 235,
	111, 264, 248, 181, 161, 162, 110, 0, 221, 140,
	148, 137, 196, 0, 0, 0, 261, 262, 136, 287,
	118, 275, 113, 119, 274, 190, 0, 0, 0, 257,
	265, 182, 175, 0, 112, 263, 180, 174, 165, 144,
	154, 211, 172, 212, 155, 186, 185, 187, 0, 523,
	0, 246, 272, 288, 124, 538, 0, 255, 282, 283,
	0, 0, 125, 147, 143, 210, 189, 120, 157, 243,
	164, 171, 220, 286, 200, 226, 129, 271, 242, 534,
	537, 532, 0, 533, 577, 578, 619, 620, 621, 598,
	529, 0, 535, 536, 0, 602, 609, 610, 594, 625,
	558, 559, 501, 502, 503, 504, 505, 506, 507, 508,
	509, 510, 511, 512, 513, 514, 515, 516, 517, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	581, 105, 114, 168, 285, 218, 146, 273, 519, 139,
	0, 0, 571, 573, 580, 595, 107, 108, 115, 123,
	130, 138, 142, 145, 150, 153, 156, 158, 159, 160,
	163, 173, 176, 177, 178, 179, 191, 192, 194, 195,
	198, 199, 202, 203, 204, 205, 207, 208, 209, 213,
	215, 217, 219, 222, 227, 228, 229, 230, 232, 233,
	234, 237, 238, 239, 240, 247, 251, 259, 260, 270,
	277, 281, 606, 197, 0, 0, 0, 0, 356, 0,
	0, 0, 141, 353, 0, 0, 0, 166, 0, 0,
	0, 0, 400, 169, 0, 0, 244, 184, 0, 0,
	0, 0, 389, 390, 0, 0, 0, 0, 0, 0,
	1141, 0, 63, 0, 0, 354, 377, 376, 379, 380,
	381, 382, 0, 0, 127, 378, 383, 384, 385, 1142,
	0, 0, 351, 368, 0, 399, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 365, 366, 0, 0,
	0, 0, 414, 0, 367, 0, 0, 362, 363, 364,
	369, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	149, 0, 0, 391, 0, 0, 0, 278, 0, 0,
	412, 214, 0, 249, 152, 167, 121, 106, 116, 0,
	151, 193, 223, 231, 397, 0, 0, 0, 0, 135,
	0, 225, 201, 269, 0, 0, 206, 224, 170, 258,
	216, 267, 268, 279, 280, 253, 276, 284, 241, 0,
	0, 0, 0, 0, 0, 122, 254, 183, 188, 131,
	133, 132, 117, 236, 256, 126, 134, 245, 250, 109,
	252, 266, 128, 235, 111, 264, 248, 181, 161, 162,
	110, 0, 221, 140, 148, 137, 196, 0, 0, 0,
	261, 262, 136, 287, 118, 275, 113, 119, 274, 190,
	0, 0, 0, 257, 265, 182, 175, 0, 112, 263,
	180, 174, 165, 144, 154, 211, 172, 212, 155, 186,
	185, 187, 0, 0, 0, 246, 272, 288, 124, 0,
	0, 255, 282, 283, 0, 0, 125, 147, 143, 210,
	189, 120, 157, 243, 164, 171, 220, 286, 200, 226,
	129, 271, 242, 401, 413, 407, 409, 408, 405, 406,
	404, 403, 402, 415, 392, 393, 394, 395, 398, 0,
	410, 411, 0, 0, 0, 0, 428, 429, 430, 431,
	432, 433, 434, 427, 435, 436, 437, 438, 439, 440,
	441, 442, 443, 416, 417, 418, 419, 420, 421, 422,
	423, 426, 424, 425, 396, 105, 114, 168, 285, 218,
	146, 273, 0, 139, 0, 0, 0, 0, 0, 0,
	107, 108, 115, 123, 130, 138, 142, 145, 150, 153,
	156, 158, 159, 160, 163, 173, 176, 177, 178, 179,
	191, 192, 194, 195, 198, 199, 202, 203, 204, 205,
	207, 208, 209, 213, 215, 217, 219, 222, 227, 228,
	229, 230, 232, 233, 234, 237, 238, 239, 240, 247,
	251, 259, 260, 270, 277, 281, 197, 0, 0, 0,
	0, 356, 0, 0, 0, 141, 353, 0, 0, 0,
	166, 0, 0, 0, 0, 400, 169, 0, 0, 244,
	184, 0, 0, 0, 0, 389, 390, 0, 0, 0,
	0, 0, 0, 0, 0, 63, 0, 669, 354, 377,
	376, 379, 380, 381, 382, 0, 0, 127, 378, 383,
	384, 385, 0, 0, 0, 351, 368, 0, 399, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 365,
	366, 0, 0, 0, 0, 414, 0, 367, 0, 0,
	362, 363, 364, 369, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 149, 0, 0, 391, 0, 0, 0,
	278, 0, 0, 412, 214, 0, 249, 152, 167, 121,
	106, 116, 0, 151, 193, 223, 231, 397, 0, 0,
	0, 0, 135, 0, 225, 201, 269, 0, 0, 206,
	224, 170, 258, 216, 267, 268, 279, 280, 253, 276,
	284, 241, 0, 0, 0, 0, 0, 0, 122, 254,
	183, 188, 131, 133, 132, 117, 236, 256, 126, 134,
	245, 250, 109, 252, 266, 128, 235, 111, 264, 248,
	181, 161, 162, 110, 0, 221, 140, 148, 137, 196,
	0, 0, 0, 261, 262, 136, 287, 118, 275, 113,
	119, 274, 190, 0, 0, 0, 257, 265, 182, 175,
	0, 112, 263, 180, 174, 165, 144, 154, 211, 172,
	212, 155, 186, 185, 187, 0, 0, 0, 246, 272,
	288, 124, 0, 0, 255, 282, 283, 0, 0, 125,
	147, 143, 210, 189, 120, 157, 243, 164, 171, 220,
	286, 200, 226, 129, 271, 242, 401, 413, 407, 409,
	408, 405, 406, 404, 403, 402, 415, 392, 393, 394,
	395, 398, 0, 410, 411, 0, 0, 0, 0, 428,
	429, 430, 431, 432, 433, 434, 427, 435, 436, 437,
	438, 439, 440, 441, 442, 443, 416, 417, 418, 419,
	420, 421, 422, 423, 426, 424, 425, 396, 105, 114,
	168, 285, 218, 146, 273, 0, 139, 0, 0, 0,
	0, 0, 0, 107, 108, 115, 123, 130, 138, 142,
	145, 150, 153, 156, 158, 159, 160, 163, 173, 176,
	177, 178, 179, 191, 192, 194, 195, 198, 199, 202,
	203, 204, 205, 207, 208, 209, 213, 215, 217, 219,
	222, 227, 228, 229, 230, 232, 233, 234, 237, 238,
	239, 240, 247, 251, 259, 260, 270, 277, 281, 197,
	0, 0, 0, 0, 356, 0, 0, 0, 141, 353,
	0, 0, 0, 166, 0, 0, 0, 0, 400, 169,
	0, 0, 244, 184, 0, 0, 0, 0, 389, 390,
	0, 0, 0, 0, 0, 0, 0, 0, 63, 0,
	0, 354, 377, 376, 379, 380, 381, 382, 0, 0,
	127, 378, 383, 384, 385, 0, 0, 0, 351, 368,
	0, 399, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 365, 366, 347, 0, 0, 0, 414, 0,
	367, 0, 0, 362, 363, 364, 369, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 149, 0, 0, 391,
	0, 0, 0, 278, 0, 0, 412, 214, 0, 249,
	152, 167, 121, 106, 116, 0, 151, 193, 223, 231,
	397, 0, 0, 0, 0, 135, 0, 225, 201, 269,
	0, 0, 206, 224, 170, 258, 216, 267, 268, 279,
	280, 253, 276, 284, 241, 0, 0, 0, 0, 0,
	0, 122, 254, 183, 188, 131, 133, 132, 117, 236,
	256, 126, 134, 245, 250, 109, 252, 266, 128, 235,
	111, 264, 248, 181, 161, 162, 110, 0, 221, 140,
	148, 137, 196, 0, 0, 0, 261, 262, 136, 287,
	118, 275, 113, 119, 274, 190, 0, 0, 0, 257,
	265, 182, 175, 0, 112, 263, 180, 174, 165, 144,
	154, 211, 172, 212, 155, 186, 185, 187, 0, 0,
	0, 246, 272, 288, 124, 0, 0, 255, 282, 283,
	0, 0, 125, 147, 143, 210, 189, 120, 157, 243,
	164, 171, 220, 286, 200, 226, 129, 271, 242, 401,
	413, 407, 409, 408, 405, 406, 404, 403, 402, 415,
	392, 393, 394, 395, 398, 0, 410, 411, 0, 0,
	0, 0, 428, 429, 430, 431, 432, 433, 434, 427,
	435, 436, 437, 438, 439, 440, 441, 442, 443, 416,
	417, 418, 419, 420, 421, 422, 423, 426, 424, 425,
	396, 105, 114, 168, 285, 218, 146, 273, 0, 139,
	0, 0, 0, 0, 0, 0, 107, 108, 115, 123,
	130, 138, 142, 145, 150, 153, 156, 158, 159, 160,
	163, 173, 176, 177, 178, 179, 191, 192, 194, 195,
	198, 199, 202, 203, 204, 205, 207, 208, 209, 213,
	215, 217, 219, 222, 227, 228, 229, 230, 232, 233,
	234, 237, 238, 239, 240, 247, 251, 259, 260, 270,
	277, 281, 197, 0, 0, 0, 0, 356, 0, 0,
	0, 141, 353, 0, 0, 0, 166, 0, 0, 0,
	0, 400, 169, 0, 0, 244, 184, 0, 0, 0,
	0, 389, 390, 0, 0, 0, 0, 0, 0, 0,
	0, 63, 0, 0, 354, 377, 1051, 379, 380, 381,
	382, 0, 0, 127, 378, 383, 384, 385, 0, 0,
	0, 351, 368, 0, 399, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 365, 366, 347, 0, 0,
	0, 414, 0, 367, 0, 0, 362, 363, 364, 369,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 149,
	0, 0, 391, 0, 0, 0, 278, 0, 0, 412,
	214, 0, 249, 152, 167, 121, 106, 116, 0, 151,
	193, 223, 231, 397, 0, 0, 0, 0, 135, 0,
	225, 201, 269, 0, 0, 206, 224, 170, 258, 216,
	267, 268, 279, 280, 253, 276, 284, 241, 0, 0,
	0, 0, 0, 0, 122, 254, 183, 188, 131, 133,
	132, 117, 236, 256, 126, 134, 245, 250, 109, 252,
	266, 128, 235, 111, 264, 248, 181, 161, 162, 110,
	0, 221, 140, 148, 137, 196, 0, 0, 0, 261,
	262, 136, 287, 118, 275, 113, 119, 274, 190, 0,
	0, 0, 257, 265, 182, 175, 0, 112, 263, 180,
	174, 165, 144, 154, 211, 172, 212, 155, 186, 185,
	187, 0, 0, 0, 246, 272, 288, 124, 0, 0,
	255, 282, 283, 0, 0, 125, 147, 143, 210, 189,
	120, 157, 243, 164, 171, 220, 286, 200, 226, 129,
	271, 242, 401, 413, 407, 409, 408, 405, 406, 404,
	403, 402, 415, 392, 393, 394, 395, 398, 0, 410,
	411, 0, 0, 0, 0, 428, 429, 430, 431, 432,
	433, 434, 427, 435, 436, 437, 438, 439, 440, 441,
	442, 443, 416, 417, 418, 419, 420, 421, 422, 423,
	426, 424, 425, 396, 105, 114, 168, 285, 218, 146,
	273, 0, 139, 0, 0, 0, 0, 0, 0, 107,
	108, 115, 123, 130, 138, 142, 145, 150, 153, 156,
	158, 159, 160, 163, 173, 176, 177, 178, 179, 191,
	192, 194, 195, 198, 199, 202, 203, 204, 205, 207,
	208, 209, 213, 215, 217, 219, 222, 227, 228, 229,
	230, 232, 233, 234, 237, 238, 239, 240, 247, 251,
	259, 260, 270, 277, 281, 197, 0, 0, 0, 0,
	356, 0, 0, 0, 141, 353, 0, 0, 0, 166,
	0, 0, 0, 0, 400, 169, 0, 0, 244, 184,
	0, 0, 0, 0, 389, 390, 0, 0, 0, 0,
	0, 0, 0, 0, 63, 0, 0, 354, 377, 1048,
	379, 380, 381, 382, 0, 0, 127, 378, 383, 384,
	385, 0, 0, 0, 351, 368, 0, 399, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 365, 366,
	347, 0, 0, 0, 414, 0, 367, 0, 0, 362,
	363, 364, 369, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 149, 0, 0, 391, 0, 0, 0, 278,
	0, 0, 412, 214, 0, 249, 152, 167, 121, 106,
	116, 0, 151, 193, 223, 231, 397, 0, 0, 0,
	0, 135, 0, 225, 201, 269, 0, 0, 206, 224,
	170, 258, 216, 267, 268, 279, 280, 253, 276, 284,
	241, 0, 0, 0, 0, 0, 0, 122, 254, 183,
	188, 131, 133, 132, 117, 236, 256, 126, 134, 245,
	250, 109, 252, 266, 128, 235, 111, 264, 248, 181,
	161, 162, 110, 0, 221, 140, 148, 137, 196, 0,
	0, 0, 261, 262, 136, 287, 118, 275, 113, 119,
	274, 190, 0, 0, 0, 257, 265, 182, 175, 0,
	112, 263, 180, 174, 165, 144, 154, 211, 172, 212,
	155, 186, 185, 187, 0, 0, 0, 246, 272, 288,
	124, 0, 0, 255, 282, 283, 0, 0, 125, 147,
	143, 210, 189, 120, 157, 243, 164, 171, 220, 286,
	200, 226, 129, 271, 242, 401, 413, 407, 409, 408,
	405, 406, 404, 403, 402, 415, 392, 393, 394, 395,
	398, 0, 410, 411, 0, 0, 0, 0, 428, 429,
	430, 431, 432, 433, 434, 427, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 416, 417, 418, 419, 420,
	421, 422, 423, 426, 424, 425, 396, 105, 114, 168,
	285, 218, 146, 273, 0, 139, 0, 0, 0, 0,
	0, 0, 107, 108, 115, 123, 130, 138, 142, 145,
	150, 153, 156, 158, 159, 160, 163, 173, 176, 177,
	178, 179, 191, 192, 194, 195, 198, 199, 202, 203,
	204, 205, 207, 208, 209, 213, 215, 217, 219, 222,
	227, 228, 229, 230, 232, 233, 234, 237, 238, 239,
	240, 247, 251, 259, 260, 270, 277, 281, 27, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	197, 0, 0, 0, 0, 356, 0, 0, 0, 141,
	353, 0, 0, 0, 166, 0, 0, 0, 0, 400,
	169, 0, 0, 244, 184, 0, 0, 0, 0, 389,
	390, 0, 0, 0, 0, 0, 0, 0, 0, 63,
	0, 0, 354, 377, 376, 379, 380, 381, 382, 0,
	0, 127, 378, 383, 384, 385, 0, 0, 0, 351,
	368, 0, 399, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 365, 366, 0, 0, 0, 0, 414,
	0, 367, 0, 0, 362, 363, 364, 369, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 149, 0, 0,
	391, 0, 0, 0, 278, 0, 0, 412, 214, 0,
	249, 152, 167, 121, 106, 116, 0, 151, 193, 223,
	231, 397, 0, 0, 0, 0, 135, 0, 225, 201,
	269, 0, 0, 206, 224, 170, 258, 216, 267, 268,
	279, 280, 253, 276, 284, 241, 0, 0, 0, 0,
	0, 0, 122, 254, 183, 188, 131, 133, 132, 117,
	236, 256, 126, 134, 245, 250, 109, 252, 266, 128,
	235, 111, 264, 248, 181, 161, 162, 110, 0, 221,
	140, 148, 137, 196, 0, 0, 0, 261, 262, 136,
	287, 118, 275, 113, 119, 274, 190, 0, 0, 0,
	257, 265, 182, 175, 0, 112, 263, 180, 174, 165,
	144, 154, 211, 172, 212, 155, 186, 185, 187, 0,
	0, 0, 246, 272, 288, 124, 0, 0, 255, 282,
	283, 0, 0, 125, 147, 143, 210, 189, 120, 157,
	243, 164, 171, 220, 286, 200, 226, 129, 271, 242,
	401, 413, 407, 409, 408, 405, 406, 404, 403, 402,
	415, 392, 393, 394, 395, 398, 0, 410, 411, 0,
	0, 0, 0, 428, 429, 430, 431, 432, 433, 434,
	427, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	416, 417, 418, 419, 420, 421, 422, 423, 426, 424,
	425, 396, 105, 114, 168, 285, 218, 146, 273, 0,
	139, 0, 0, 0, 0, 0, 0, 107, 108, 115,
	123, 130, 138, 142, 145, 150, 153, 156, 158, 159,
	160, 163, 173, 176, 177, 178, 179, 191, 192, 194,
	195, 198, 199, 202, 203, 204, 205, 207, 208, 209,
	213, 215, 217, 219, 222, 227, 228, 229, 230, 232,
	233, 234, 237, 238, 239, 240, 247, 251, 259, 260,
	270, 277, 281, 197, 0, 0, 0, 0, 356, 0,
	0, 0, 141, 353, 0, 0, 0, 166, 0, 0,
	0, 0, 400, 169, 0, 0, 244, 184, 0, 0,
	0, 0, 389, 390, 0, 0, 0, 0, 0, 0,
	0, 0, 63, 0, 0, 354, 377, 376, 379, 380,
	381, 382, 0, 0, 127, 378, 383, 384, 385, 0,
	0, 0, 351, 368, 0, 399, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 365, 366, 0, 0,
	0, 0, 414, 0, 367, 0, 0, 362, 363, 364,
	369, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	149, 0, 0, 391, 0, 0, 0, 278, 0, 0,
	412, 214, 0, 249, 152, 167, 121, 106, 116, 0,
	151, 193, 223, 231, 397, 0, 0, 0, 0, 135,
	0, 225, 201, 269, 0, 0, 206, 224, 170, 258,
	216, 267, 268, 279, 280, 253, 276, 284, 241, 0,
	0, 0, 0, 0, 0, 122, 254, 183, 188, 131,
	133, 132, 117, 236, 256, 126, 134, 245, 250, 109,
	252, 266, 128, 235, 111, 264, 248, 181, 161, 162,
	110, 0, 221, 140, 148, 137, 196, 0, 0, 0,
	261, 262, 136, 287, 118, 275, 113, 119, 274, 190,
	0, 0, 0, 257, 265, 182, 175, 0, 112, 263,
	180, 174, 165, 144, 154, 211, 172, 212, 155, 186,
	185, 187, 0, 0, 0, 246, 272, 288, 124, 0,
	0, 255, 282, 283, 0, 0, 125, 147, 143, 210,
	189, 120, 157, 243, 164, 171, 220, 286, 200, 226,
	129, 271, 242, 401, 413, 407, 409, 408, 405, 406,
	404, 403, 402, 415, 392, 393, 394, 395, 398, 0,
	410, 411, 0, 0, 0, 0, 428, 429, 430, 431,
	432, 433, 434, 427, 435, 436, 437, 438, 439, 440,
	441, 442, 443, 416, 417, 418, 419, 420, 421, 422,
	423, 426, 424, 425, 396, 105, 114, 168, 285, 218,
	146, 273, 0, 139, 0, 0, 0, 0, 0, 0,
	107, 108, 115, 123, 130, 138, 142, 145, 150, 153,
	156, 158, 159, 160, 163, 173, 176, 177, 178, 179,
	191, 192, 194, 195, 198, 199, 202, 203, 204, 205,
	207, 208, 209, 213, 215, 217, 219, 222, 227, 228,
	229, 230, 232, 233, 234, 237, 238, 239, 240, 247,
	251, 259, 260, 270, 277, 281, 197, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 0, 0, 0, 0,
	166, 0, 0, 0, 0, 400, 169, 0, 0, 244,
	184, 0, 0, 0, 0, 389, 390, 0, 0, 0,
	0, 0, 0, 0, 0, 63, 0, 0, 354, 377,
	376, 379, 380, 381, 382, 0, 0, 127, 378, 383,
	384, 385, 0, 0, 0, 0, 368, 0, 399, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 365,
	366, 0, 0, 0, 0, 414, 0, 367, 0, 0,
	362, 363, 364, 369, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 149, 0, 0, 391, 0, 0, 0,
	278, 0, 0, 412, 214, 0, 249, 152, 167, 121,
	106, 116, 0, 151, 193, 223, 231, 397, 0, 0,
	0, 0, 135, 0, 225, 201, 269, 0, 1920, 206,
	224, 170, 258, 216, 267, 268, 279, 280, 253, 276,
	284, 241, 0, 0, 0, 0, 0, 0, 122, 254,
	183, 188, 131, 133, 132, 117, 236, 256, 126, 134,
	245, 250, 109, 252, 266, 128, 235, 111, 264, 248,
	181, 161, 162, 110, 0, 221, 140, 148, 137, 196,
	0, 0, 0, 261, 262, 136, 287, 118, 275, 113,
	119, 274, 190, 0, 0, 0, 257, 265, 182, 175,
	0, 112, 263, 180, 174, 165, 144, 154, 211, 172,
	212, 155, 186, 185, 187, 0, 0, 0, 246, 272,
	288, 124, 0, 0, 255, 282, 283, 0, 0, 125,
	147, 143, 210, 189, 120, 157, 243, 164, 171, 220,
	286, 200, 226, 129, 271, 242, 401, 413, 407, 409,
	408, 405, 406, 404, 403, 402, 415, 392, 393, 394,
	395, 398, 0, 410, 411, 0, 0, 0, 0, 428,
	429, 430, 431, 432, 433, 434, 427, 435, 436, 437,
	438, 439, 440, 441, 442, 443, 416, 417, 418, 419,
	420, 421, 422, 423, 426, 424, 425, 396, 105, 114,
	168, 285, 218, 146, 273, 0, 139, 0, 0, 0,
	0, 0, 0, 107, 108, 115, 123, 130, 138, 142,
	145, 150, 153, 156, 158, 159, 160, 163, 173, 176,
	177, 178, 179, 191, 192, 194, 195, 198, 199, 202,
	203, 204, 205, 207, 208, 209, 213, 215, 217, 219,
	222, 227, 228, 229, 230, 232, 233, 234, 237, 238,
	239, 240, 247, 251, 259, 260, 270, 277, 281, 197,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	0, 0, 0, 166, 0, 0, 0, 0, 400, 169,
	0, 0, 244, 184, 0, 0, 0, 0, 389, 390,
	0, 0, 0, 0, 0, 0, 0, 0, 63, 0,
	669, 354, 377, 376, 379, 380, 381, 382, 0, 0,
	127, 378, 383, 384, 385, 0, 0, 0, 0, 368,
	0, 399, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 365, 366, 0, 0, 0, 0, 414, 0,
	367, 0, 0, 362, 363, 364, 369, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 149, 0, 0, 391,
	0, 0, 0, 278, 0, 0, 412, 214, 0, 249,
	152, 167, 121, 106, 116, 0, 151, 193, 223, 231,
	397, 0, 0, 0, 0, 135, 0, 225, 201, 269,
	0, 0, 206, 224, 170, 258, 216, 267, 268, 279,
	280, 253, 276, 284, 241, 0, 0, 0, 0, 0,
	0, 122, 254, 183, 188, 131, 133, 132, 117, 236,
	256, 126, 134, 245, 250, 109, 252, 266, 128, 235,
	111, 264, 248, 181, 161, 162, 110, 0, 221, 140,
	148, 137, 196, 0, 0, 0, 261, 262, 136, 287,
	118, 275, 113, 119, 274, 190, 0, 0, 0, 257,
	265, 182, 175, 0, 112, 263, 180, 174, 165, 144,
	154, 211, 172, 212, 155, 186, 185, 187, 0, 0,
	0, 246, 272, 288, 124, 0, 0, 255, 282, 283,
	0, 0, 125, 147, 143, 210, 189, 120, 157, 243,
	164, 171, 220, 286, 200, 226, 129, 271, 242, 401,
	413, 407, 409, 408, 405, 406, 404, 403, 402, 415,
	392, 393, 394, 395, 398, 0, 410, 411, 0, 0,
	0, 0, 428, 429, 430, 431, 432, 433, 434, 427,
	435, 436, 437, 438, 439, 440, 441, 442, 443, 416,
	417, 418, 419, 420, 421, 422, 423, 426, 424, 425,
	396, 105, 114, 168, 285, 218, 146, 273, 0, 139,
	0, 0, 0, 0, 0, 0, 107, 108, 115, 123,
	130, 138, 142, 145, 150, 153, 156, 158, 159, 160,
	163, 173, 176, 177, 178, 179, 191, 192, 194, 195,
	198, 199, 202, 203, 204, 205, 207, 208, 209, 213,
	215, 217, 219, 222, 227, 228, 229, 230, 232, 233,
	234, 237, 238, 239, 240, 247, 251, 259, 260, 270,
	277, 281, 197, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 0, 0, 0, 166, 0, 0, 0,
	0, 400, 169, 0, 0, 244, 184, 0, 0, 0,
	0, 389, 390, 0, 0, 0, 0, 0, 0, 0,
	0, 63, 0, 0, 354, 377, 376, 379, 380, 381,
	382, 0, 0, 127, 378, 383, 384, 385, 0, 0,
	0, 0, 368, 0, 399, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 365, 366, 0, 0, 0,
	0, 414, 0, 367, 0, 0, 362, 363, 364, 369,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 149,
	0, 0, 391, 0, 0, 0, 278, 0, 0, 412,
	214, 0, 249, 152, 167, 121, 106, 116, 0, 151,
	193, 223, 231, 397, 0, 0, 0, 0, 135, 0,
	225, 201, 269, 0, 0, 206, 224, 170, 258, 216,
	267, 268, 279, 280, 253, 276, 284, 241, 0, 0,
	0, 0, 0, 0, 122, 254, 183, 188, 131, 133,
	132, 117, 236, 256, 126, 134, 245, 250, 109, 252,
	266, 128, 235, 111, 264, 248, 181, 161, 162, 110,
	0, 221, 140, 148, 137, 196, 0, 0, 0, 261,
	262, 136, 287, 118, 275, 113, 119, 274, 190, 0,
	0, 0, 257, 265, 182, 175, 0, 112, 263, 180,
	174, 165, 144, 154, 211, 172, 212, 155, 186, 185,
	187, 0, 0, 0, 246, 272, 288, 124, 0, 0,
	255, 282, 283, 0, 0, 125, 147, 143, 210, 189,
	120, 157, 243, 164, 171, 220, 286, 200, 226, 129,
	271, 242, 401, 413, 407, 409, 408, 405, 406, 404,
	403, 402, 415, 392, 393, 394, 395, 398, 0, 410,
	411, 0, 0, 0, 0, 428, 429, 430, 431, 432,
	433, 434, 427, 435, 436, 437, 438, 439, 440, 441,
	442, 443, 416, 417, 418, 419, 420, 421, 422, 423,
	426, 424, 425, 396, 105, 114, 168, 285, 218, 146,
	273, 0, 139, 0, 0, 0, 0, 0, 0, 107,
	108, 115, 123, 130, 138, 142, 145, 150, 153, 156,
	158, 159, 160, 163, 173, 176, 177, 178, 179, 191,
	192, 194, 195, 198, 199, 202, 203, 204, 205, 207,
	208, 209, 213, 215, 217, 219, 222, 227, 228, 229,
	230, 232, 233, 234, 237, 238, 239, 240, 247, 251,
	259, 260, 270, 277, 281, 197, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 0, 0, 0, 0, 166,
	0, 0, 0, 0, 0, 169, 0, 0, 244, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 710, 709, 719, 720, 712, 713,
	714, 715, 716, 717, 718, 711, 0, 0, 721, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 149, 0, 0, 0, 0, 0, 0, 278,
	0, 0, 0, 214, 0, 249, 152, 167, 121, 106,
	116, 0, 151, 193, 223, 231, 0, 0, 0, 0,
	0, 135, 0, 225, 201, 269, 0, 0, 206, 224,
	170, 258, 216, 267, 268, 279, 280, 253, 276, 284,
	241, 0, 0, 0, 0, 0, 0, 122, 254, 183,
	188, 131, 133, 132, 117, 236, 256, 126, 134, 245,
	250, 109, 252, 266, 128, 235, 111, 264, 248, 181,
	161, 162, 110, 0, 221, 140, 148, 137, 196, 0,
	0, 0, 261, 262, 136, 287, 118, 275, 113, 119,
	274, 190, 0, 0, 0, 257, 265, 182, 175, 0,
	112, 263, 180, 174, 165, 144, 154, 211, 172, 212,
	155, 186, 185, 187, 0, 0, 0, 246, 272, 288,
	124, 0, 0, 255, 282, 283, 0, 0, 125, 147,
	143, 210, 189, 120, 157, 243, 164, 171, 220, 286,
	200, 226, 129, 271, 242, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 114, 168,
	285, 218, 146, 273, 0, 139, 0, 0, 0, 0,
	0, 0, 107, 108, 115, 123, 130, 138, 142, 145,
	150, 153, 156, 158, 159, 160, 163, 173, 176, 177,
	178, 179, 191, 192, 194, 195, 198, 199, 202, 203,
	204, 205, 207, 208, 209, 213, 215, 217, 219, 222,
	227, 228, 229, 230, 232, 233, 234, 237, 238, 239,
	240, 247, 251, 259, 260, 270, 277, 281, 197, 0,
	0, 0, 1120, 0, 0, 0, 0, 141, 0, 0,
	0, 0, 166, 0, 0, 0, 0, 0, 169, 0,
	0, 244, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1122, 1124, 0, 0, 0, 0, 0,
	103, 0, 1126, 0, 0, 0, 0, 0, 0, 127,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 149, 0, 0, 0, 0,
	0, 0, 278, 0, 1123, 0, 214, 0, 249, 152,
	167, 121, 106, 116, 0, 151, 193, 223, 231, 0,
	0, 0, 0, 0, 135, 0, 225, 201, 269, 0,
	0, 206, 224, 170, 258, 216, 267, 268, 279, 280,
	253, 276, 284, 241, 0, 0, 0, 0, 0, 0,
	122, 254, 183, 188, 131, 133, 132, 117, 236, 256,
	126, 134, 245, 250, 109, 252, 266, 128, 235, 111,
	264, 248, 181, 161, 162, 110, 0, 221, 140, 148,
	137, 196, 0, 0, 0, 261, 262, 136, 287, 118,
	275, 113, 119, 274, 190, 0, 0, 0, 257, 265,
	182, 175, 0, 112, 263, 180, 174, 165, 144, 154,
	211, 172, 212, 155, 186, 185, 187, 0, 0, 0,
	246, 272, 288, 124, 0, 0, 255, 282, 283, 0,
	0, 125, 147, 143, 210, 189, 120, 157, 243, 164,
	171, 220, 286, 200, 226, 129, 271, 242, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 114, 168, 285, 218, 146, 273, 0, 139, 0,
	0, 0, 0, 0, 0, 107, 108, 115, 123, 130,
	138, 142, 145, 150, 153, 156, 158, 159, 160, 163,
	173, 176, 177, 178, 179, 191, 192, 194, 195, 198,
	199, 202, 203, 204, 205, 207, 208, 209, 213, 215,
	217, 219, 222, 227, 228, 229, 230, 232, 233, 234,
	237, 238, 239, 240, 247, 251, 259, 260, 270, 277,
	281, 197, 0, 0, 0, 1120, 0, 0, 0, 0,
	141, 0, 0, 0, 0, 166, 0, 0, 0, 0,
	0, 169, 0, 0, 244, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1122, 1124, 0, 0,
	0, 0, 0, 103, 0, 1126, 0, 0, 0, 0,
	0, 0, 127, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 149, 0,
	0, 0, 0, 0, 0, 278, 0, 1123, 0, 214,
	0, 249, 152, 167, 121, 106, 116, 0, 151, 193,
	223, 231, 0, 0, 0, 0, 0, 135, 0, 225,
	201, 269, 0, 0, 1118, 224, 170, 258, 216, 267,
	268, 279, 280, 253, 276, 284, 241, 0, 0, 0,
	0, 0, 0, 122, 254, 183, 188, 131, 133, 132,
	117, 236, 256, 126, 134, 245, 250, 109, 252, 266,
	128, 235, 111, 264, 248, 181, 161, 162, 110, 0,
	221, 140, 148, 137, 196, 0, 0, 0, 261, 262,
	136, 287, 118, 275, 113, 119, 274, 190, 0, 0,
	0, 257, 265, 182, 175, 0, 112, 263, 180, 174,
	165, 144, 154, 211, 172, 212, 155, 186, 185, 187,
	0, 0, 0, 246, 272, 288, 124, 0, 0, 255,
	282, 283, 0, 0, 125, 147, 143, 210, 189, 120,
	157, 243, 164, 171, 220, 286, 200, 226, 129, 271,
	242, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 105, 114, 168, 285, 218, 146, 273,
	0, 139, 0, 0, 0, 0, 0, 0, 107, 108,
	115, 123, 130, 138, 142, 145, 150, 153, 156, 158,
	159, 160, 163, 173, 176, 177, 178, 179, 191, 192,
	194, 195, 198, 199, 202, 203, 204, 205, 207, 208,
	209, 213, 215, 217, 219, 222, 227, 228, 229, 230,
	232, 233, 234, 237, 238, 239, 240, 247, 251, 259,
	260, 270, 277, 281, 197, 0, 0, 0, 698, 0,
	0, 0, 0, 141, 0, 0, 0, 0, 166, 0,
	0, 0, 0, 0, 169, 0, 0, 244, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 484, 0, 700, 0,
	0, 0, 0, 0, 0, 127, 0, 0, 0, 0,
	0, 695, 694, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 696,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 149, 0, 0, 0, 0, 0, 0, 278, 0,
	0, 0, 214, 0, 249, 152, 167, 121, 106, 116,
	0, 151, 193, 223, 231, 0, 0, 0, 0, 0,
	135, 0, 225, 201, 269, 0, 0, 206, 224, 170,
	258, 216, 267, 268, 279, 280, 253, 276, 284, 241,
	0, 0, 0, 0, 0, 0, 122, 254, 183, 188,
	131, 133, 132, 117, 236, 256, 126, 134, 245, 250,
	109, 252, 266, 128, 235, 111, 264, 248, 181, 161,
	162, 110, 0, 221, 140, 148, 137, 196, 0, 0,
	0, 261, 262, 136, 287, 118, 275, 113, 119, 274,
	190, 0, 0, 0, 257, 265, 182, 175, 0, 112,
	263, 180, 174, 165, 144, 154, 211, 172, 212, 155,
	186, 185, 187, 0, 0, 0, 246, 272, 288, 124,
	0, 0, 255, 282, 283, 0, 0, 125, 147, 143,
	210, 189, 120, 157, 243, 164, 171, 220, 286, 200,
	226, 129, 271, 242, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 105, 114, 168, 285,
	218, 146, 273, 0, 139, 0, 0, 0, 0, 0,
	0, 107, 108, 115, 123, 130, 138, 142, 145, 150,
	153, 156, 158, 159, 160, 163, 173, 176, 177, 178,
	179, 191, 192, 194, 195, 198, 199, 202, 203, 204,
	205, 207, 208, 209, 213, 215, 217, 219, 222, 227,
	228, 229, 230, 232, 233, 234, 237, 238, 239, 240,
	247, 251, 259, 260, 270, 277, 281, 27, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	0, 0, 0, 166, 0, 0, 0, 0, 0, 169,
	0, 0, 244, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 63, 0,
	0, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 149, 0, 0, 0,
	0, 0, 0, 278, 0, 0, 0, 214, 0, 249,
	152, 167, 121, 106, 116, 0, 151, 193, 223, 231,
	0, 0, 0, 0, 0, 135, 0, 225, 201, 269,
	0, 0, 206, 224, 170, 258, 216, 267, 268, 279,
	280, 253, 276, 284, 241, 0, 0, 0, 0, 0,
	0, 122, 254, 183, 188, 131, 133, 132, 117, 236,
	256, 126, 134, 245, 250, 109, 252, 266, 128, 235,
	111, 264, 248, 181, 161, 162, 110, 0, 221, 140,
	148, 137, 196, 0, 0, 0, 261, 262, 136, 287,
	118, 275, 113, 119, 274, 190, 0, 0, 0, 257,
	265, 182, 175, 0, 112, 263, 180, 174, 165, 144,
	154, 211, 172, 212, 155, 186, 185, 187, 0, 0,
	0, 246, 272, 288, 124, 0, 0, 255, 282, 283,
	0, 0, 125, 147, 143, 210, 189, 120, 157, 243,
	164, 171, 220, 286, 200, 226, 129, 271, 242, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 114, 168, 285, 218, 146, 273, 0, 139,
	0, 0, 0, 0, 0, 0, 107, 108, 115, 123,
	130, 138, 142, 145, 150, 153, 156, 158, 159, 160,
	163, 173, 176, 177, 178, 179, 191, 192, 194, 195,
	198, 199, 202, 203, 204, 205, 207, 208, 209, 213,
	215, 217, 219, 222, 227, 228, 229, 230, 232, 233,
	234, 237, 238, 239, 240, 247, 251, 259, 260, 270,
	277, 281, 197, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 0, 0, 0, 166, 1369, 0, 0,
	0, 0, 169, 0, 0, 244, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 103, 0, 1126, 0, 0, 0,
	0, 0, 0, 127, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 149,
	0, 0, 0, 0, 0, 0, 278, 0, 0, 0,
	214, 0, 249, 152, 167, 121, 106, 116, 0, 151,
	193, 223, 231, 0, 0, 0, 0, 0, 135, 0,
	225, 201, 269, 0, 0, 206, 224, 170, 258, 216,
	267, 268, 279, 280, 253, 276, 284, 241, 0, 0,
	0, 0, 0, 0, 122, 254, 183, 188, 131, 133,
	132, 117, 236, 256, 126, 134, 245, 250, 109, 252,
	266, 128, 235, 111, 264, 248, 181, 161, 162, 110,
	0, 221, 140, 148, 137, 196, 0, 0, 0, 261,
	262, 136, 287, 118, 275, 113, 119, 274, 190, 0,
	0, 0, 257, 265, 182, 175, 0, 112, 263, 180,
	174, 165, 144, 154, 211, 172, 212, 155, 186, 185,
	187, 0, 0, 0, 246, 272, 288, 124, 0, 0,
	255, 282, 283, 0, 0, 125, 147, 143, 210, 189,
	120, 157, 243, 164, 171, 220, 286, 200, 226, 129,
	271, 242, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 105, 114, 168, 285, 218, 146,
	273, 0, 139, 0, 0, 0, 0, 0, 0, 107,
	108, 115, 123, 130, 138, 142, 145, 150, 153, 156,
	158, 159, 160, 163, 173, 176, 177, 178, 179, 191,
	192, 194, 195, 198, 199, 202, 203, 204, 205, 207,
	208, 209, 213, 215, 217, 219, 222, 227, 228, 229,
	230, 232, 233, 234, 237, 238, 239, 240, 247, 251,
	259, 260, 270, 277, 281, 27, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 197, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	0, 166, 0, 0, 0, 0, 0, 169, 0, 0,
	244, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 63, 0, 0, 103,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 149, 0, 0, 0, 0, 0,
	0, 278, 0, 0, 0, 214, 0, 249, 152, 167,
	121, 106, 116, 0, 151, 193, 223, 231, 0, 0,
	0, 0, 0, 135, 0, 225, 201, 269, 0, 0,
	206, 224, 170, 258, 216, 267, 268, 279, 280, 253,
	276, 284, 241, 0, 0, 0, 0, 0, 0, 122,
	254, 183, 188, 131, 133, 132, 117, 236, 256, 126,
	134, 245, 250, 109, 252, 266, 128, 235, 111, 264,
	248, 181, 161, 162, 110, 0, 221, 140, 148, 137,
	196, 0, 0, 0, 261, 262, 136, 287, 118, 275,
	113, 119, 274, 190, 0, 0, 0, 257, 265, 182,
	175, 0, 112, 263, 180, 174, 165, 144, 154, 211,
	172, 212, 155, 186, 185, 187, 0, 0, 0, 246,
	272, 288, 124, 0, 0, 255, 282, 283, 0, 0,
	125, 147, 143, 210, 189, 120, 157, 243, 164, 171,
	220, 286, 200, 226, 129, 271, 242, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	114, 168, 285, 218, 146, 273, 0, 139, 0, 0,
	0, 0, 0, 0, 107, 108, 115, 123, 130, 138,
	142, 145, 150, 153, 156, 158, 159, 160, 163, 173,
	176, 177, 178, 179, 191, 192, 194, 195, 198, 199,
	202, 203, 204, 205, 207, 208, 209, 213, 215, 217,
	219, 222, 227, 228, 229, 230, 232, 233, 234, 237,
	238, 239, 240, 247, 251, 259, 260, 270, 277, 281,
	197, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	843, 0, 0, 0, 166, 0, 0, 0, 0, 0,
	169, 0, 0, 244, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 484, 0, 842, 0, 0, 0, 0, 0,
	0, 127, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 149, 0, 0,
	0, 0, 0, 0, 278, 0, 0, 0, 214, 0,
	249, 152, 167, 121, 106, 116, 0, 151, 193, 223,
	231, 0, 0, 0, 0, 0, 135, 0, 225, 201,
	269, 0, 0, 206, 224, 170, 258, 216, 267, 268,
	279, 280, 253, 276, 284, 241, 0, 0, 0, 0,
	0, 0, 122, 254, 183, 188, 131, 133, 132, 117,
	236, 256, 126, 134, 245, 250, 109, 252, 266, 128,
	235, 111, 264, 248, 181, 161, 162, 110, 0, 221,
	140, 148, 137, 196, 0, 0, 0, 261, 262, 136,
	287, 118, 275, 113, 119, 274, 190, 0, 0, 0,
	257, 265, 182, 175, 0, 112, 263, 180, 174, 165,
	144, 154, 211, 172, 212, 155, 186, 185, 187, 0,
	0, 0, 246, 272, 288, 124, 0, 0, 255, 282,
	283, 0, 0, 125, 147, 143, 210, 189, 120, 157,
	243, 164, 171, 220, 286, 200, 226, 129, 271, 242,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 105, 114, 168, 285, 218, 146, 273, 0,
	139, 0, 0, 0, 0, 0, 0, 107, 108, 115,
	123, 130, 138, 142, 145, 150, 153, 156, 158, 159,
	160, 163, 173, 176, 177, 178, 179, 191, 192, 194,
	195, 198, 199, 202, 203, 204, 205, 207, 208, 209,
	213, 215, 217, 219, 222, 227, 228, 229, 230, 232,
	233, 234, 237, 238, 239, 240, 247, 251, 259, 260,
	270, 277, 281, 197, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 0, 0, 0, 0, 166, 0, 0,
	0, 0, 0, 169, 0, 0, 244, 184, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 103, 0, 1126, 0, 0,
	0, 0, 0, 0, 127, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	149, 0, 0, 0, 0, 0, 0, 278, 0, 0,
	0, 214, 0, 249, 152, 167, 121, 106, 116, 0,
	151, 193, 223, 231, 0, 0, 0, 0, 0, 135,
	0, 225, 201, 269, 0, 0, 206, 224, 170, 258,
	216, 267, 268, 279, 280, 253, 276, 284, 241, 0,
	0, 0, 0, 0, 0, 122, 254, 183, 188, 131,
	133, 132, 117, 236, 256, 126, 134, 245, 250, 109,
	252, 266, 128, 235, 111, 264, 248, 181, 161, 162,
	110, 0, 221, 140, 148, 137, 196, 0, 0, 0,
	261, 262, 136, 287, 118, 275, 113, 119, 274, 190,
	0, 0, 0, 257, 265, 182, 175, 0, 112, 263,
	180, 174, 165, 144, 154, 211, 172, 212, 155, 186,
	185, 187, 0, 0, 0, 246, 272, 288, 124, 0,
	0, 255, 282, 283, 0, 0, 125, 147, 143, 210,
	189, 120, 157, 243, 164, 171, 220, 286, 200, 226,
	129, 271, 242, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 114, 168, 285, 218,
	146, 273, 0, 139, 0, 0, 0, 0, 0, 0,
	107, 108, 115, 123, 130, 138, 142, 145, 150, 153,
	156, 158, 159, 160, 163, 173, 176, 177, 178, 179,
	191, 192, 194, 195, 198, 199, 202, 203, 204, 205,
	207, 208, 209, 213, 215, 217, 219, 222, 227, 228,
	229, 230, 232, 233, 234, 237, 238, 239, 240, 247,
	251, 259, 260, 270, 277, 281, 197, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 0, 0, 0, 0,
	166, 0, 0, 0, 0, 0, 169, 0, 0, 244,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 63, 0, 0, 103, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 149, 0, 0, 0, 0, 0, 0,
	278, 0, 0, 0, 214, 0, 249, 152, 167, 121,
	106, 116, 0, 151, 193, 223, 231, 0, 0, 0,
	0, 0, 135, 0, 225, 201, 269, 0, 0, 206,
	224, 170, 258, 216, 267, 268, 279, 280, 253, 276,
	284, 241, 0, 0, 0, 0, 0, 0, 122, 254,
	183, 188, 131, 133, 132, 117, 236, 256, 126, 134,
	245, 250, 109, 252, 266, 128, 235, 111, 264, 248,
	181, 161, 162, 110, 0, 221, 140, 148, 137, 196,
	0, 0, 0, 261, 262, 136, 287, 118, 275, 113,
	119, 274, 190, 0, 0, 0, 257, 265, 182, 175,
	0, 112, 263, 180, 174, 165, 144, 154, 211, 172,
	212, 155, 186, 185, 187, 0, 0, 0, 246, 272,
	288, 124, 0, 0, 255, 282, 283, 0, 0, 125,
	147, 143, 210, 189, 120, 157, 243, 164, 171, 220,
	286, 200, 226, 129, 271, 242, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 114,
	168, 285, 218, 146, 273, 0, 139, 0, 0, 0,
	0, 0, 0, 107, 108, 115, 123, 130, 138, 142,
	145, 150, 153, 156, 158, 159, 160, 163, 173, 176,
	177, 178, 179, 191, 192, 194, 195, 198, 199, 202,
	203, 204, 205, 207, 208, 209, 213, 215, 217, 219,
	222, 227, 228, 229, 230, 232, 233, 234, 237, 238,
	239, 240, 247, 251, 259, 260, 270, 277, 281, 197,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	0, 0, 0, 166, 0, 0, 0, 0, 0, 169,
	0, 0, 244, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 63, 0,
	0, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 149, 0, 0, 0,
	0, 0, 0, 278, 0, 0, 0, 214, 0, 249,
	152, 167, 121, 106, 116, 0, 151, 193, 223, 231,
	0, 0, 0, 0, 0, 135, 0, 225, 201, 269,
	0, 0, 206, 224, 170, 258, 216, 267, 268, 279,
	280, 253, 276, 284, 241, 0, 0, 0, 0, 0,
	0, 122, 254, 183, 188, 131, 133, 132, 117, 236,
	256, 126, 134, 245, 250, 109, 252, 266, 128, 235,
	111, 264, 248, 181, 161, 162, 110, 0, 221, 140,
	148, 137, 196, 0, 0, 0, 261, 262, 136, 287,
	118, 275, 113, 119, 274, 190, 0, 0, 0, 257,
	265, 182, 175, 0, 112, 263, 180, 174, 165, 144,
	154, 211, 172, 212, 155, 186, 185, 187, 0, 0,
	0, 246, 272, 288, 124, 0, 0, 255, 282, 283,
	0, 0, 125, 147, 143, 210, 189, 120, 157, 243,
	164, 171, 220, 286, 200, 226, 129, 271, 242, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 114, 168, 285, 218, 146, 273, 0, 139,
	0, 0, 0, 0, 0, 0, 107, 108, 115, 123,
	130, 138, 142, 145, 150, 153, 156, 158, 159, 160,
	163, 173, 176, 177, 178, 179, 191, 192, 194, 195,
	198, 199, 202, 203, 204, 205, 207, 208, 209, 213,
	215, 217, 219, 222, 227, 228, 229, 230, 232, 233,
	234, 237, 238, 239, 240, 247, 251, 259, 260, 270,
	277, 281, 197, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 0, 0, 0, 166, 0, 0, 0,
	0, 0, 169, 0, 0, 244, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 484, 0, 700, 0, 0, 0,
	0, 0, 0, 127, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 149,
	0, 0, 0, 0, 0, 0, 278, 0, 0, 0,
	214, 0, 249, 152, 167, 121, 106, 116, 0, 151,
	193, 223, 231, 0, 0, 0, 0, 0, 135, 0,
	225, 201, 269, 0, 0, 206, 224, 170, 258, 216,
	267, 268, 279, 280, 253, 276, 284, 241, 0, 0,
	0, 0, 0, 0, 122, 254, 183, 188, 131, 133,
	132, 117, 236, 256, 126, 134, 245, 250, 109, 252,
	266, 128, 235, 111, 264, 248, 181, 161, 162, 110,
	0, 221, 140, 148, 137, 196, 0, 0, 0, 261,
	262, 136, 287, 118, 275, 113, 119, 274, 190, 0,
	0, 0, 257, 265, 182, 175, 0, 112, 263, 180,
	174, 165, 144, 154, 211, 172, 212, 155, 186, 185,
	187, 0, 0, 0, 246, 272, 288, 124, 0, 0,
	255, 282, 283, 0, 0, 125, 147, 143, 210, 189,
	120, 157, 243, 164, 171, 220, 286, 200, 226, 129,
	271, 242, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 105, 114, 168, 285, 218, 146,
	273, 0, 139, 0, 0, 0, 0, 0, 0, 107,
	108, 115, 123, 130, 138, 142, 145, 150, 153, 156,
	158, 159, 160, 163, 173, 176, 177, 178, 179, 191,
	192, 194, 195, 198, 199, 202, 203, 204, 205, 207,
	208, 209, 213, 215, 217, 219, 222, 227, 228, 229,
	230, 232, 233, 234, 237, 238, 239, 240, 247, 251,
	259, 260, 270, 277, 281, 197, 0, 0, 0, 0,
	0, 0, 0, 813, 141, 0, 0, 0, 0, 166,
	0, 0, 0, 0, 0, 169, 0, 0, 244, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 149, 0, 0, 0, 0, 0, 0, 278,
	0, 0, 0, 214, 0, 249, 152, 167, 121, 106,
	116, 0, 151, 193, 223, 231, 0, 0, 0, 0,
	0, 135, 0, 225, 201, 269, 0, 0, 206, 224,
	170, 258, 216, 267, 268, 279, 280, 253, 276, 284,
	241, 0, 0, 0, 0, 0, 0, 122, 254, 183,
	188, 131, 133, 132, 117, 236, 256, 126, 134, 245,
	250, 109, 252, 266, 128, 235, 111, 264, 248, 181,
	161, 162, 110, 0, 221, 140, 148, 137, 196, 0,
	0, 0, 261, 262, 136, 287, 118, 275, 113, 119,
	274, 190, 0, 0, 0, 257, 265, 182, 175, 0,
	112, 263, 180, 174, 165, 144, 154, 211, 172, 212,
	155, 186, 185, 187, 0, 0, 0, 246, 272, 288,
	124, 0, 0, 255, 282, 283, 0, 0, 125, 147,
	143, 210, 189, 120, 157, 243, 164, 171, 220, 286,
	200, 226, 129, 271, 242, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 114, 168,
	285, 218, 146, 273, 0, 139, 0, 0, 0, 0,
	0, 0, 107, 108, 115, 123, 130, 138, 142, 145,
	150, 153, 156, 158, 159, 160, 163, 173, 176, 177,
	178, 179, 191, 192, 194, 195, 198, 199, 202, 203,
	204, 205, 207, 208, 209, 213, 215, 217, 219, 222,
	227, 228, 229, 230, 232, 233, 234, 237, 238, 239,
	240, 247, 251, 259, 260, 270, 277, 281, 446, 0,
	0, 0, 0, 0, 0, 197, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 0, 0, 0, 0, 166,
	0, 0, 0, 0, 0, 169, 0, 0, 244, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 149, 0, 0, 0, 0, 0, 0, 278,
	0, 0, 0, 214, 0, 249, 152, 167, 121, 106,
	116, 0, 151, 193, 223, 231, 0, 0, 0, 0,
	0, 135, 0, 225, 201, 269, 0, 0, 206, 224,
	170, 258, 216, 267, 268, 279, 280, 253, 276, 284,
	241, 0, 0, 0, 0, 0, 0, 122, 254, 183,
	188, 131, 133, 132, 117, 236, 256, 126, 134, 245,
	250, 109, 252, 266, 128, 235, 111, 264, 248, 181,
	161, 162, 110, 0, 221, 140, 148, 137, 196, 0,
	0, 0, 261, 262, 136, 287, 118, 275, 113, 119,
	274, 190, 0, 0, 0, 257, 265, 182, 175, 0,
	112, 263, 180, 174, 165, 144, 154, 211, 172, 212,
	155, 186, 185, 187, 0, 0, 0, 246, 272, 288,
	124, 0, 0, 255, 282, 283, 0, 0, 125, 147,
	143, 210, 189, 120, 157, 243, 164, 171, 220, 286,
	200, 226, 129, 271, 242, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 114, 168,
	285, 218, 146, 273, 0, 139, 0, 0, 0, 0,
	0, 0, 107, 108, 115, 123, 130, 138, 142, 145,
	150, 153, 156, 158, 159, 160, 163, 173, 176, 177,
	178, 179, 191, 192, 194, 195, 198, 199, 202, 203,
	204, 205, 207, 208, 209, 213, 215, 217, 219, 222,
	227, 228, 229, 230, 232, 233, 234, 237, 238, 239,
	240, 247, 251, 259, 260, 270, 277, 281, 197, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 0, 166, 0, 0, 0, 0, 0, 169, 0,
	0, 244, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	103, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 149, 0, 0, 0, 100,
	0, 0, 278, 0, 0, 0, 214, 0, 249, 152,
	167, 121, 106, 116, 0, 151, 193, 223, 231, 0,
	0, 0, 0, 0, 135, 0, 225, 201, 269, 0,
	0, 206, 224, 170, 258, 216, 267, 268, 279, 280,
	253, 276, 284, 241, 0, 0, 0, 0, 0, 0,
	122, 254, 183, 188, 131, 133, 132, 117, 236, 256,
	126, 134, 245, 250, 109, 252, 266, 128, 235, 111,
	264, 248, 181, 161, 162, 110, 0, 221, 140, 148,
	137, 196, 0, 0, 0, 261, 262, 136, 287, 118,
	275, 113, 119, 274, 190, 0, 0, 0, 257, 265,
	182, 175, 0, 112, 263, 180, 174, 165, 144, 154,
	211, 172, 212, 155, 186, 185, 187, 0, 0, 0,
	246, 272, 288, 124, 0, 0, 255, 282, 283, 0,
	0, 125, 147, 143, 210, 189, 120, 157, 243, 164,
	171, 220, 286, 200, 226, 129, 271, 242, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 114, 168, 285, 218, 146, 273, 0, 139, 0,
	0, 0, 0, 0, 0, 107, 108, 115, 123, 130,
	138, 142, 145, 150, 153, 156, 158, 159, 160, 163,
	173, 176, 177, 178, 179, 191, 192, 194, 195, 198,
	199, 202, 203, 204, 205, 207, 208, 209, 213, 215,
	217, 219, 222, 227, 228, 229, 230, 232, 233, 234,
	237, 238, 239, 240, 247, 251, 259, 260, 270, 277,
	281, 197, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 0, 0, 0, 0, 166, 0, 0, 0, 0,
	0, 169, 0, 0, 244, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 127, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 149, 0,
	0, 0, 0, 0, 0, 278, 0, 0, 0, 214,
	0, 249, 152, 167, 121, 106, 116, 0, 151, 193,
	223, 231, 0, 0, 0, 0, 0, 135, 0, 225,
	201, 269, 0, 0, 206, 224, 170, 258, 216, 267,
	268, 279, 280, 253, 276, 284, 241, 0, 0, 0,
	0, 0, 0, 122, 254, 183, 188, 131, 133, 132,
	117, 236, 256, 126, 134, 245, 250, 109, 252, 266,
	128, 235, 111, 264, 248, 181, 161, 162, 110, 0,
	221, 140, 148, 137, 196, 0, 0, 0, 261, 262,
	136, 287, 118, 275, 113, 119, 274, 190, 0, 0,
	0, 257, 265, 182, 175, 0, 112, 263, 180, 174,
	165, 144, 154, 211, 172, 212, 155, 186, 185, 187,
	0, 0, 0, 246, 272, 288, 124, 0, 0, 255,
	282, 283, 0, 0, 125, 147, 143, 210, 189, 120,
	157, 243, 164, 171, 220, 286, 200, 226, 129, 271,
	242, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 105, 114, 168, 285, 218, 146, 273,
	0, 139, 0, 0, 0, 0, 0, 0, 107, 108,
	115, 123, 130, 138, 142, 145, 150, 153, 156, 158,
	159, 160, 163, 173, 176, 177, 178, 179, 191, 192,
	194, 195, 198, 199, 202, 203, 204, 205, 207, 208,
	209, 213, 215, 217, 219, 222, 227, 228, 229, 230,
	232, 233, 234, 237, 238, 239, 240, 247, 251, 259,
	260, 270, 277, 281, 197, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 0, 0, 0, 166, 0,
	0, 0, 0, 0, 169, 0, 0, 244, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 103, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 149, 0, 0, 0, 0, 0, 0, 278, 0,
	0, 0, 214, 0, 249, 152, 167, 121, 106, 116,
	0, 151, 193, 223, 231, 0, 0, 0, 0, 0,
	135, 0, 225, 201, 269, 0, 0, 206, 224, 170,
	258, 216, 267, 268, 279, 280, 253, 276, 284, 241,
	0, 0, 0, 0, 0, 0, 122, 254, 183, 188,
	131, 133, 132, 117, 236, 256, 126, 134, 245, 250,
	109, 252, 266, 128, 235, 111, 264, 248, 181, 161,
	162, 110, 0, 221, 140, 148, 137, 196, 0, 0,
	0, 261, 262, 136, 287, 118, 275, 113, 119, 274,
	190, 0, 0, 0, 257, 265, 182, 175, 0, 112,
	263, 180, 174, 165, 144, 154, 211, 172, 212, 155,
	186, 185, 187, 0, 0, 0, 246, 272, 288, 124,
	0, 0, 255, 282, 283, 0, 0, 125, 147, 143,
	210, 189, 120, 157, 243, 164, 171, 220, 286, 200,
	226, 129, 271, 242, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 105, 114, 168, 285,
	218, 146, 273, 0, 139, 0, 0, 0, 0, 0,
	0, 107, 108, 115, 123, 130, 138, 142, 145, 150,
	153, 156, 158, 159, 160, 163, 173, 176, 177, 178,
	179, 191, 192, 194, 195, 198, 199, 202, 203, 204,
	205, 207, 208, 209, 213, 215, 217, 219, 222, 227,
	228, 229, 230, 232, 233, 234, 237, 238, 239, 240,
	247, 251, 259, 260, 270, 277, 281, 197, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	0, 166, 0, 0, 0, 0, 0, 169, 0, 0,
	244, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 354,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 149, 0, 0, 0, 0, 0,
	0, 278, 0, 0, 0, 214, 0, 249, 152, 167,
	121, 106, 116, 0, 151, 193, 223, 231, 0, 0,
	0, 0, 0, 135, 0, 225, 201, 269, 0, 0,
	206, 224, 170, 258, 216, 267, 268, 279, 280, 253,
	276, 284, 241, 0, 0, 0, 0, 0, 0, 122,
	254, 183, 188, 131, 133, 132, 117, 236, 256, 126,
	134, 245, 250, 109, 252, 266, 128, 235, 111, 264,
	248, 181, 161, 162, 110, 0, 221, 140, 148, 137,
	196, 0, 0, 0, 261, 262, 136, 287, 118, 275,
	113, 463, 274, 190, 0, 0, 0, 257, 265, 182,
	175, 0, 112, 263, 180, 174, 165, 144, 154, 211,
	172, 212, 155, 186, 185, 187, 0, 0, 0, 246,
	272, 288, 124, 0, 0, 255, 282, 283, 0, 0,
	125, 147, 143, 210, 464, 462, 157, 243, 164, 171,
	220, 286, 200, 226, 129, 271, 242, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	114, 168, 285, 218, 146, 273, 0, 139, 0, 0,
	0, 0, 0, 0, 107, 108, 115, 123, 130, 138,
	142, 145, 150, 153, 156, 158, 159, 160, 163, 173,
	176, 177, 178, 179, 191, 192, 194, 195, 198, 199,
	202, 203, 204, 205, 207, 208, 209, 213, 215, 217,
	219, 222, 227, 228, 229, 230, 232, 233, 234, 237,
	238, 239, 240, 247, 251, 259, 260, 270, 277, 281,
	197, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	0, 0, 0, 0, 166, 0, 0, 0, 0, 0,
	169, 0, 0, 244, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 354, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 149, 0, 0,
	0, 0, 0, 0, 278, 0, 0, 0, 214, 0,
	249, 152, 167, 121, 106, 116, 0, 151, 193, 223,
	231, 0, 0, 0, 0, 0, 135, 0, 225, 201,
	269, 0, 0, 206, 224, 170, 258, 216, 267, 268,
	279, 280, 253, 276, 284, 241, 0, 0, 0, 0,
	0, 0, 122, 254, 183, 188, 131, 133, 132, 117,
	236, 256, 126, 134, 245, 250, 109, 252, 266, 128,
	235, 111, 264, 248, 181, 161, 162, 110, 0, 221,
	140, 148, 137, 196, 0, 0, 0, 261, 262, 136,
	287, 118, 275, 113, 119, 274, 190, 0, 0, 0,
	257, 265, 182, 175, 0, 112, 263, 180, 174, 165,
	144, 154, 211, 172, 212, 155, 186, 185, 187, 0,
	0, 0, 246, 272, 288, 124, 0, 0, 255, 282,
	283, 0, 0, 125, 147, 143, 210, 189, 120, 157,
	243, 164, 171, 220, 286, 200, 226, 129, 271, 242,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 105, 114, 168, 285, 218, 146, 273, 0,
	139, 0, 0, 0, 0, 0, 0, 107, 108, 115,
	123, 130, 138, 142, 145, 150, 153, 156, 158, 159,
	160, 163, 173, 176, 177, 178, 179, 191, 192, 194,
	195, 198, 199, 202, 203, 204, 205, 207, 208, 209,
	213, 215, 217, 219, 222, 227, 228, 229, 230, 232,
	233, 234, 237, 238, 239, 240, 247, 251, 259, 260,
	270, 277, 281, 197, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 0, 0, 0, 0, 166, 0, 0,
	0, 0, 0, 169, 0, 0, 244, 184, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 354, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	149, 0, 0, 0, 0, 0, 0, 278, 0, 0,
	0, 214, 0, 249, 152, 167, 121, 106, 116, 0,
	151, 193, 223, 231, 0, 0, 0, 0, 0, 135,
	0, 225, 201, 269, 0, 0, 206, 224, 170, 258,
	216, 267, 268, 279, 280, 253, 276, 284, 241, 0,
	0, 0, 0, 0, 0, 122, 254, 183, 188, 131,
	133, 132, 117, 236, 256, 126, 134, 245, 250, 109,
	252, 834, 128, 235, 111, 264, 248, 181, 161, 162,
	110, 0, 221, 140, 148, 137, 196, 0, 0, 0,
	261, 262, 136, 287, 118, 275, 113, 463, 274, 190,
	0, 0, 0, 257, 265, 182, 175, 0, 112, 263,
	180, 174, 165, 144, 154, 211, 172, 212, 155, 186,
	185, 187, 0, 0, 0, 246, 272, 288, 124, 0,
	0, 255, 282, 283, 0, 0, 125, 147, 143, 210,
	464, 462, 157, 243, 164, 171, 220, 286, 200, 226,
	129, 271, 242, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 114, 168, 285, 218,
	146, 273, 0, 139, 0, 0, 0, 0, 0, 0,
	107, 108, 115, 123, 130, 138, 142, 145, 150, 153,
	156, 158, 159, 160, 163, 173, 176, 177, 178, 179,
	191, 192, 194, 195, 198, 199, 202, 203, 204, 205,
	207, 208, 209, 213, 215, 217, 219, 222, 227, 228,
	229, 230, 232, 233, 234, 237, 238, 239, 240, 247,
	251, 259, 260, 270, 277, 281, 197, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 0, 0, 0, 0,
	166, 0, 0, 0, 0, 0, 169, 0, 0, 244,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 354, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 149, 0, 0, 0, 0, 0, 0,
	278, 0, 0, 0, 214, 0, 249, 152, 167, 121,
	106, 116, 0, 151, 193, 223, 231, 0, 0, 0,
	0, 0, 135, 0, 225, 201, 269, 0, 0, 206,
	224, 170, 258, 216, 267, 268, 279, 280, 253, 276,
	284, 241, 0, 0, 0, 0, 0, 0, 122, 254,
	183, 188, 131, 133, 132, 117, 236, 256, 126, 134,
	245, 250, 109, 252, 454, 128, 235, 111, 264, 248,
	181, 161, 162, 110, 0, 221, 140, 148, 137, 196,
	0, 0, 0, 261, 262, 136, 287, 118, 275, 113,
	463, 274, 190, 0, 0, 0, 257, 265, 182, 175,
	0, 112, 263, 180, 174, 165, 144, 154, 211, 172,
	212, 155, 186, 185, 187, 0, 0, 0, 246, 272,
	288, 124, 0, 0, 255, 282, 283, 0, 0, 125,
	147, 143, 210, 464, 462, 457, 456, 164, 171, 220,
	286, 200, 226, 129, 271, 242, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 114,
	168, 285, 218, 146, 273, 0, 139, 0, 0, 0,
	0, 0, 0, 107, 108, 115, 123, 130, 138, 142,
	145, 150, 153, 156, 158, 159, 160, 163, 173, 176,
	177, 178, 179, 191, 192, 194, 195, 198, 199, 202,
	203, 204, 205, 207, 208, 209, 213, 215, 217, 219,
	222, 227, 228, 229, 230, 232, 233, 234, 237, 238,
	239, 240, 247, 251, 259, 260, 270, 277, 281,
}
var yyPact = [...]int{

	169, -1000, -291, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1260, 1324, -1000, -1000, -1000,
	-1000, -1000, -1000, 414, 177, -1000, -1000, -1000, 182, 73,
	16680, 178, 1957, 17446, -1000, 24, -1000, -1000, 127, 17446,
	-1000, -1000, -69, -74, -1000, 30, 1012, -1000, -1000, 52,
	-1000, -1000, -1000, -1000, -1000, -1000, 1242, 1258, 1043, 1232,
	1124, -1000, 8211, 142, 142, 16297, 18978, -1000, -1000, 438,
	17446, 174, 17446, -147, 135, 135, 75, 135, -1000, 471,
	-1000, -1000, -1000, 17446, 136, 17063, 136, 136, 136, 136,
	17446, -1000, 242, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 17446,
	866, 1195, 5076, 99, 5076, 5076, -1000, 488, -1000, 5076,
	66, 5076, 13, 440, 63, 16, -1000, 5076, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 187, 1012, 467, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1184, 675, 703, 170,
	17446, 405, -1000, 1188, 9755, 9755, 1260, -1000, 1012, -1000,
	-1000, -1000, 1155, -1000, -1000, 536, 1279, -1000, 12436, 222,
	-1000, 9755, 1386, 945, -1000, -1000, 945, -1000, -1000, 195,
	-1000, -1000, 10904, 10904, 10904, 10904, 10904, 10904, 10904, 10904,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 945, -1000, 9372, 945,
	945, 945, 945, 945, 945, 945, 945, 945, 945, 9755,
	945, 945, 945, 945, 945, 945, 945, 945, 945, 945,
	945, 945, 945, 945, 945, 945, 945, 945, 945, 945,
	945, 945, 945, 945, 945, 945, 945, 945, 945, 945,
	945, 945, 945, 945, 945, 945, 945, 945, 945, 945,
	945, 945, 945, 945, 15907, 14758, 17446, 969, 921, -1000,
	-1000, 221, 938, 18595, -97, -1000, -1000, -1000, 460, 13992,
	-1000, 220, -1000, 1182, -1000, 915, 17446, -1000, 2718, -1000,
	17063, 1229, 165, 850, 508, 848, 818, 17446, 814, 989,
	150, 17446, 1213, 1087, -1000, -1000, 17446, 812, 801, 798,
	-1000, 7061, -1000, 5076, 5076, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 135, 135, 5076, 5076,
	17446, 17446, 17446, -1000, -1000, 17446, -1000, -1000, -1000, 5076,
	5076, -1000, 1277, 466, 466, -1000, -1000, -1000, -1000, 9755,
	-1000, 10904, 385, -1000, 1079, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 794, -1000, -1000, 160, -1000, 663, -1000, -1000,
	17446, 5076, 74, 111, 104, 17446, -1000, 1316, 287, 780,
	218, 988, -1000, 621, 1242, 703, 1124, 594, 1097, -1000,
	-1000, -1000, 17446, -1000, 9755, 9755, 723, -1000, 15524, -1000,
	-1000, 5870, 398, 10904, 652, 393, 10904, 10904, 10904, 10904,
	10904, 10904, 10904, 10904, 10904, 10904, 10904, 10904, 10904, 10904,
	10904, 560, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	793, -1000, 1012, 944, 944, 261, 261, 261, 261, 261,
	261, 261, 11287, 1223, 703, 904, 521, 9372, 8211, 8211,
	703, 9755, 9755, 8977, 8594, 8211, 8211, 1223, 490, 521,
	18212, -1000, -1000, 10521, -1000, -1000, -1000, -1000, -1000, 703,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 17063, 17063,
	8211, 8211, 8211, 8211, 703, 703, 8211, 8211, 8211, 8211,
	8211, 703, 703, 703, 703, 1223, 1223, 8211, 8211, 8211,
	1223, 8211, 8211, 1223, 8211, 8211, 8211, 8211, 1223, 8211,
	8211, 8211, 88, 17446, -1000, 971, 1026, -1000, -1000, -1000,
	1228, 13609, 12053, 88, 939, 14758, 17446, -1000, -1000, 14758,
	17446, 5473, 17829, 938, -97, 972, -1000, -112, -111, 7445,
	212, -1000, -1000, -1000, 6664, -1000, 4282, 797, 905, -1000,
	-59, -1000, -1000, -1000, 1034, -1000, 1034, 155, -6, 1034,
	1034, 1034, 1034, 1034, -15, -15, -15, -15, -5, -1000,
	-1000, -1000, -1000, -1000, 1057, 1052, -1000, 1034, 1034, 1034,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1044, 161,
	1044, 1037, 1037, 1037, 1037, 1065, -1000, 17446, 5076, 1209,
	5076, 79, -1000, -1000, 17446, 17446, 987, -1000, 17446, 985,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 791,
	789, -1000, -1000, -1000, -1000, -1000, 485, -1000, -1000, 17446,
	1218, 17446, 17446, 376, 521, 953, -1000, 662, 17446, -1000,
	984, -1000, 456, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 532, -1000, 17446, 17446,
	17446, 17446, 17446, 207, -1000, 1131, 9755, 9755, 6664, 9755,
	-1000, -1000, -1000, 1188, -1000, 1223, 1243, -1000, 1147, 1144,
	8211, -1000, -1000, 398, 383, -1000, -1000, 633, -1000, -1000,
	-1000, -1000, 216, 945, -1000, 2888, -1000, -1000, -1000, -1000,
	652, 10904, 10904, 10904, 953, 2888, 2869, 981, 1896, 261,
	520, 520, 350, 350, 350, 350, 350, 577, 577, -1000,
	-1000, -1000, 703, -1000, -1000, -1000, 8211, -1000, 9755, -1000,
	703, 898, -1000, 898, -1000, 483, 428, 437, 1275, 898,
	363, 1268, 898, 898, 898, 8211, 499, -1000, 9755, 703,
	-1000, 1469, 983, 979, 898, 703, 974, 898, 898, -158,
	-158, 703, 898, 703, 898, 898, -158, -158, -158, -158,
	8211, 8211, 898, 898, 898, 8211, 898, 898, 8211, 898,
	898, 898, 898, 8211, 898, 898, 898, 946, 945, -1000,
	17829, 14758, 14758, 14758, 14758, 14758, -1000, 1115, 1110, -1000,
	1109, 1107, 1116, 17446, -1000, 902, 13609, -1000, 945, -1000,
	13214, 228, 173, 171, 157, -1000, -1000, 1266, 14758, 936,
	-1000, 936, -1000, 214, -1000, -1000, 972, -97, -114, -1000,
	-1000, -1000, -1000, 521, -1000, 603, -1000, 208, 970, 3885,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1050, 787, -1000,
	1166, 324, 325, 695, 1163, -1000, -1000, -1000, 692, -61,
	-1000, -1000, 588, -15, -15, 1034, 1034, 153, 1034, -1000,
	-15, -1000, -1000, -1000, 212, 1179, 212, 212, 212, 212,
	-15, 659, 659, -1000, -1000, -1000, -1000, 579, -1000, 1044,
	-1000, -1000, 574, -1000, -1000, -1000, 1077, 17063, 1012, 1215,
	-1000, -1000, -1000, 1285, -1000, -1000, 147, -1000, 5076, 17446,
	5076, 5076, 1266, 782, 779, 466, 376, 1169, -1000, -1000,
	-1000, 651, 9755, -1000, 10904, -1000, -1000, 160, 944, -1000,
	699, 458, 475, 122, 122, -1000, 450, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 87, 1064, -1000, -1000,
	-1000, -1000, 36, 70, 1129, 521, 521, -1000, -1000, 17446,
	-1000, -1000, -1000, -1000, 978, -1000, -1000, -1000, 4679, 8211,
	-1000, 953, 2888, 2634, -1000, 10904, -1000, 703, 521, -1000,
	8211, -1000, -1000, 452, 560, 452, 10904, 10904, -1000, 10904,
	10904, -1000, -193, -1000, 961, 415, -1000, 9755, 795, -1000,
	-1000, 10904, 10904, -1000, -1000, -1000, -1000, -1000, 15141, -1000,
	-158, -158, -158, -158, -158, -1000, -1000, -1000, -1000, 898,
	898, -158, -158, -158, 898, -158, -158, 898, -158, -158,
	-158, -158, 898, -158, -158, -158, 1076, 17829, 945, -1000,
	12831, 17063, 980, 1026, 1041, 1073, 1601, -1000, -1000, -1000,
	-1000, 1108, -1000, 1100, -1000, -1000, -1000, -1000, 17063, 10904,
	228, -1000, 945, 945, 945, 1260, 9755, 936, -1000, -1000,
	276, -1000, -1000, -123, -105, -1000, -1000, -1000, 6267, 4282,
	-1000, 4282, 17063, 113, -1000, 695, 695, -1000, -1000, -1000,
	1038, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 527, 10904,
	1309, -1000, 1165, -1000, 1164, 636, -1000, -1000, 875, 212,
	212, -15, -1000, -1000, 1034, -1000, 212, -1000, 389, -1000,
	-1000, -1000, -1000, 212, 887, -1000, 885, 966, -1000, 880,
	17446, -1000, -1000, -1000, 1072, -1000, -1000, -1000, 17446, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 376, -1000, 10904, -1000,
	521, 2888, -1000, -1000, -1000, 679, -1000, 695, 232, -1000,
	-1000, -1000, 765, 1163, -1000, -1000, 742, -1000, 737, 17063,
	1161, 731, 17446, 17063, -1000, -1000, 700, 721, 9755, -1000,
	17063, -198, 710, 17063, 17063, 17063, -1000, -1000, 1266, 14758,
	-1000, -1000, 703, -1000, 10904, 2888, -1000, -1000, 703, 1034,
	1034, -1000, 1034, 1037, -1000, 1034, 17, 1034, 15, 703,
	703, 2554, 2336, 2245, 2220, 945, -154, -1000, 521, 9755,
	2056, 1485, -1000, 239, -1000, -1000, -1000, -1000, -1000, -158,
	-158, -1000, -1000, -1000, -1000, -158, -1000, -1000, -158, -1000,
	-1000, -1000, -1000, -158, -1000, -1000, -1000, -1000, 1198, 930,
	958, -1000, -1000, 7828, 703, 872, 203, 854, -1000, 1260,
	-1000, -1000, 9755, 1036, -1000, 9755, -1000, -1000, -1000, 854,
	1930, -1000, 17063, 17063, 17063, 1242, 521, -1000, -1000, -1000,
	-1000, 3885, -1000, 846, -1000, 1034, -1000, -1000, -1000, 17063,
	-1000, 2888, -131, -1000, -1000, -1000, -1000, -1000, -1000, 212,
	-1000, -1000, -1000, -1000, -1000, -15, 628, -15, 555, -1000,
	546, 1011, -1000, 1012, 17446, -1000, -1000, 2888, 700, 107,
	-1000, 1065, 324, 113, -1000, -1000, -1000, -1000, 708, 240,
	-1000, 145, 107, 700, 521, 1208, -1000, 6267, -1000, -1000,
	1010, 1066, -1000, 1264, 965, -1000, 2888, -1000, -1000, 146,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10904, 10904,
	10904, 10904, 10904, 703, 624, 521, 10904, 10904, 703, 1257,
	-1000, -1000, -1000, -1000, -1000, 1152, -1000, 945, -1000, -1000,
	976, 17063, 17063, -1000, 17063, 1242, 521, 17063, 521, 11670,
	-1000, 14375, 843, -1000, 843, 843, -1000, 229, 17063, 1206,
	841, -1000, -1000, 212, -1000, 212, 869, 847, 17063, -1000,
	1236, 719, -1000, -1000, 697, 1005, 695, -1000, -1000, 685,
	-1000, -1000, 17063, -1000, 107, 945, 962, -1000, 454, 17063,
	17446, 1262, 1256, -1000, -1000, 1469, 1469, 1469, 1469, 22,
	-1000, -1000, 1469, 1469, -1000, 9755, 1295, -1000, 945, -1000,
	1012, 198, -1000, -1000, -1000, 823, -1000, 228, 17063, -1000,
	-1000, -1000, 229, -1000, 683, 450, 573, -1000, -1000, 106,
	-1000, -1000, -1000, -1000, 808, -1000, 58, -1000, -1000, -1000,
	17063, 1065, -1000, -1000, -1000, -1000, 86, 6267, 4282, 746,
	-1000, -1000, 9755, 9755, -1000, -1000, -1000, -1000, 703, 114,
	-203, -1000, -1000, 954, 17829, 958, 703, 17063, -1000, -1000,
	-1000, -1000, -1000, 544, -1000, 17446, 229, 55, -1000, 718,
	991, -1000, 707, -1000, 17063, -1000, -1000, 1064, 521, 943,
	-1000, 1128, -196, -220, 703, 938, -1000, -1000, -1000, 977,
	-1000, 229, 47, 229, 17063, -1000, 86, 1137, -198, -1000,
	1123, -1000, -1000, 17063, -1000, 668, 635, -1000, 694, -1000,
	80, -1000, -201, 691, 159, -1000, -1000, 229, 81, -217,
	1071, -1000, -1000, -1000, -1000, -1000, -1000, 702, -1000, 945,
	-221, 1069, 1068, 1272, -1000, -292, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 9755, 9755, 10138, -1000,
	-1000, 1287, -1000, 1281, 238, 238, 941, 822, 625, 1469,
	703, -1000, -1000, -1000, 109, 572, -1000, -1000, -1000, 482,
	-1000, 9755, 702, -1000, -1000, -1000, -1000, -1000, 497, 702,
	-1000, 557, -293, -1000, -297, 702, 564, 607, -300, 133,
	702, 590, -1000, 9755, 472, 702, -1000, -301, 128, 702,
	-1000, 493, -1000, 581, -1000, -302, 702, 126, 476, -304,
	-1000, 125, 702, -1000,
}
var yyPgo = [...]int{

	0, 1655, 189, 677, 1654, 1643, 1642, 18, 16, 12,
	20, 1641, 1639, 1638, 1637, 1636, 1635, 8, 7, 1626,
	1625, 1335, 26, 1623, 2, 1621, 5, 67, 1620, 1619,
	1618, 1617, 1616, 1614, 1613, 1612, 1611, 1608, 1605, 1603,
	1601, 1597, 1595, 1594, 1581, 1578, 1565, 1561, 1560, 113,
	1559, 1557, 1556, 83, 1551, 92, 1537, 1536, 1535, 64,
	2014, 73, 61, 138, 1531, 1529, 63, 77, 87, 1527,
	58, 1525, 1520, 97, 1512, 1506, 1502, 76, 1501, 1499,
	2203, 1498, 94, 1496, 43, 34, 80, 1495, 1479, 1468,
	1467, 89, 99, 1466, 1464, 1462, 48, 1460, 1459, 116,
	1455, 1453, 1452, 79, 23, 40, 33, 41, 1451, 209,
	29, 1450, 82, 1449, 1445, 1443, 1442, 28, 1441, 47,
	1439, 86, 70, 208, 4, 35, 59, 81, 1438, 44,
	93, 56, 49, 24, 85, 1437, 88, 78, 1432, 1431,
	771, 1429, 1426, 72, 1424, 1423, 53, 1421, 451, 95,
	55, 1420, 1419, 1418, 1417, 51, 65, 1416, 1414, 52,
	235, 91, 691, 2005, 38, 90, 1413, 27, 1410, 1781,
	84, 45, 62, 1409, 1408, 60, 1407, 1406, 1403, 1402,
	1401, 1389, 1388, 1387, 1195, 1386, 1383, 1381, 492, 112,
	1380, 1379, 71, 50, 1378, 1376, 1370, 74, 68, 1369,
	75, 42, 1368, 1366, 1365, 1364, 39, 31, 1355, 1354,
	1350, 1348, 54, 30, 1347, 37, 15, 25, 36, 11,
	46, 1345, 10, 1344, 32, 1343, 14, 1342, 22, 66,
	9, 3, 6, 1341, 1340, 1339, 0, 173, 96, 1337,
	1330, 108,
}
var yyR1 = [...]int{

	0, 234, 235, 235, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	6, 3, 4, 4, 5, 5, 7, 7, 52, 52,
	8, 9, 9, 9, 9, 238, 238, 75, 75, 73,
	73, 74, 74, 130, 130, 10, 10, 10, 10, 134,
	134, 137, 137, 137, 138, 138, 138, 138, 173, 173,
	124, 12, 12, 12, 12, 12, 12, 12, 12, 158,
	158, 31, 31, 32, 32, 32, 120, 120, 120, 11,
	11, 11, 11, 11, 17, 19, 19, 23, 23, 24,
	20, 20, 20, 20, 25, 25, 26, 21, 21, 30,
	30, 28, 28, 27, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 22, 22, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 228, 228, 227,
	226, 226, 225, 225, 224, 37, 208, 210, 210, 209,
	209, 209, 209, 198, 177, 177, 177, 177, 177, 177,
	177, 176, 176, 176, 176, 180, 180, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 179, 179, 179, 179,
	179, 179, 179, 179, 181, 181, 181, 181, 181, 182,
	182, 182, 182, 182, 182, 182, 182, 182, 182, 182,
	182, 182, 182, 182, 182, 182, 182, 182, 182, 182,
	182, 182, 182, 182, 183, 183, 183, 183, 183, 183,
	183, 183, 197, 197, 184, 184, 192, 192, 193, 193,
	193, 190, 190, 191, 191, 194, 194, 186, 187, 195,
	188, 188, 188, 189, 189, 189, 196, 196, 196, 196,
	185, 199, 199, 219, 219, 218, 218, 217, 217, 217,
	207, 207, 214, 214, 214, 214, 214, 202, 202, 202,
	201, 201, 203, 203, 206, 206, 216, 216, 215, 200,
	200, 220, 220, 220, 220, 220, 204, 204, 205, 205,
	205, 231, 232, 230, 230, 230, 230, 230, 211, 211,
	211, 212, 212, 212, 213, 213, 213, 233, 233, 33,
	33, 33, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 119, 119, 119, 35, 36, 36, 36, 36, 36,
	36, 36, 36, 156, 156, 229, 229, 229, 229, 229,
	223, 221, 221, 222, 222, 13, 38, 38, 14, 14,
	14, 14, 14, 14, 15, 15, 39, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 40, 64, 144,
	144, 142, 142, 145, 145, 143, 143, 143, 146, 146,
	146, 147, 147, 174, 174, 174, 41, 41, 46, 46,
	47, 48, 157, 157, 44, 44, 45, 45, 45, 45,
	58, 58, 239, 239, 43, 43, 42, 42, 42, 42,
	16, 240, 49, 50, 50, 51, 51, 51, 55, 55,
	55, 53, 53, 53, 54, 54, 61, 61, 60, 60,
	62, 62, 62, 62, 122, 122, 122, 123, 123, 166,
	166, 166, 165, 165, 65, 65, 66, 66, 67, 67,
	68, 68, 68, 68, 83, 83, 84, 84, 84, 84,
	84, 94, 94, 129, 129, 131, 131, 69, 69, 69,
	69, 70, 70, 71, 71, 72, 72, 155, 155, 171,
	171, 76, 76, 76, 78, 77, 77, 77, 77, 79,
	79, 81, 81, 80, 80, 82, 85, 85, 85, 85,
	86, 86, 63, 63, 63, 63, 63, 63, 63, 141,
	141, 88, 88, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 102, 102, 102, 102, 102, 102, 89,
	89, 89, 89, 89, 89, 89, 59, 59, 103, 103,
	103, 109, 104, 104, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 97, 97,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	241, 241, 99, 98, 98, 98, 98, 98, 98, 56,
	56, 56, 56, 56, 172, 172, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 113,
	113, 57, 57, 111, 111, 112, 114, 114, 110, 110,
	110, 91, 91, 91, 91, 91, 91, 91, 91, 93,
	93, 93, 115, 115, 116, 116, 117, 117, 118, 118,
	121, 125, 125, 125, 126, 126, 126, 126, 127, 127,
	127, 90, 90, 90, 90, 90, 90, 128, 128, 128,
	128, 132, 132, 105, 105, 107, 107, 106, 108, 133,
	133, 136, 136, 136, 136, 135, 135, 135, 168, 168,
	168, 139, 139, 148, 148, 149, 149, 140, 140, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 154, 154,
	153, 153, 153, 150, 150, 150, 151, 151, 167, 167,
	163, 163, 164, 164, 169, 169, 170, 170, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 236, 237,
	159, 160, 160, 160,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 4, 6, 7,
	5, 10, 1, 3, 1, 3, 7, 8, 1, 1,
	9, 8, 7, 6, 6, 1, 1, 1, 3, 1,
	3, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	0, 2, 2, 11, 7, 9, 5, 5, 15, 0,
	3, 1, 1, 1, 1, 1, 0, 2, 2, 1,
	1, 1, 1, 1, 4, 5, 8, 1, 2, 5,
	7, 10, 8, 11, 1, 2, 5, 2, 4, 2,
	3, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	0, 2, 1, 3, 3, 4, 4, 2, 4, 1,
	3, 3, 3, 3, 0, 2, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 3, 2,
	2, 2, 2, 2, 1, 2, 2, 2, 1, 4,
	4, 3, 3, 2, 4, 5, 2, 3, 4, 2,
	2, 3, 3, 3, 3, 3, 4, 1, 1, 1,
	1, 1, 6, 6, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 3, 0, 5, 0, 3,
	5, 0, 1, 0, 1, 1, 2, 2, 3, 1,
	0, 3, 3, 0, 2, 2, 2, 1, 2, 1,
	2, 5, 4, 0, 1, 1, 2, 2, 3, 2,
	0, 1, 2, 3, 3, 2, 2, 1, 1, 1,
	1, 1, 0, 1, 0, 1, 1, 3, 3, 3,
	1, 10, 11, 11, 12, 12, 1, 1, 0, 2,
	2, 3, 3, 1, 1, 2, 2, 2, 0, 1,
	3, 1, 2, 3, 1, 1, 1, 0, 2, 1,
	1, 1, 6, 10, 9, 7, 7, 7, 9, 7,
	12, 14, 7, 7, 9, 9, 10, 5, 6, 8,
	7, 0, 1, 2, 4, 7, 5, 5, 5, 12,
	7, 5, 9, 0, 1, 1, 1, 1, 1, 1,
	7, 1, 3, 8, 8, 3, 3, 5, 4, 6,
	4, 4, 4, 4, 3, 2, 3, 4, 4, 3,
	6, 6, 4, 4, 4, 4, 4, 3, 3, 2,
	6, 2, 3, 4, 3, 7, 6, 5, 4, 2,
	4, 3, 4, 3, 3, 5, 2, 3, 3, 1,
	1, 0, 1, 1, 1, 0, 2, 2, 0, 2,
	2, 0, 2, 0, 1, 1, 2, 1, 1, 2,
	1, 1, 1, 1, 3, 3, 1, 1, 1, 1,
	0, 3, 1, 1, 2, 2, 2, 2, 3, 3,
	2, 0, 2, 0, 2, 1, 2, 2, 0, 1,
	1, 0, 1, 1, 0, 1, 0, 1, 1, 3,
	1, 2, 3, 5, 2, 4, 7, 0, 1, 0,
	1, 2, 1, 1, 0, 2, 1, 3, 1, 1,
	1, 3, 1, 3, 2, 6, 1, 4, 6, 3,
	2, 0, 3, 1, 3, 1, 3, 4, 4, 4,
	3, 2, 4, 0, 1, 0, 2, 0, 1, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 3, 0, 5, 5, 5,
	0, 2, 1, 3, 3, 2, 3, 1, 2, 0,
	3, 1, 1, 3, 3, 4, 4, 5, 3, 4,
	5, 6, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 1,
	1, 3, 1, 3, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 1, 1, 1, 5, 6,
	6, 6, 5, 5, 5, 6, 5, 5, 6, 5,
	5, 5, 5, 6, 5, 5, 5, 4, 4, 5,
	5, 5, 5, 5, 4, 4, 4, 4, 4, 4,
	3, 6, 6, 6, 8, 8, 8, 8, 9, 4,
	7, 5, 4, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 8, 8,
	0, 2, 3, 4, 4, 4, 4, 4, 4, 0,
	3, 4, 7, 3, 1, 1, 2, 3, 3, 1,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 0, 3, 0, 2, 0, 3, 1, 3,
	2, 0, 1, 1, 0, 2, 4, 4, 0, 2,
	4, 2, 1, 3, 5, 4, 6, 1, 3, 3,
	5, 0, 5, 1, 3, 1, 2, 3, 1, 1,
	3, 3, 3, 3, 3, 1, 2, 1, 1, 1,
	1, 1, 1, 0, 2, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 1, 0, 1, 0, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -234, -1, -2, -6, -7, -8, -9, -10, -12,
	-33, -13, -14, -15, -39, -40, -41, -46, -47, -48,
	-44, -43, -42, -16, -21, -3, -4, 6, 7, -52,
	9, 10, 29, -37, 119, -34, -35, -36, 122, 121,
	158, 123, 151, 53, 194, 195, 197, 198, -239, -157,
	156, 157, 30, 31, 125, 192, -236, 8, 288, 120,
	153, 152, 25, 57, -235, 402, -117, 15, -51, 5,
	-49, -240, -49, -49, -49, -49, -49, -208, -210, 57,
	94, -151, 132, 75, 279, 128, -158, 129, -150, 179,
	34, 139, 138, 129, 129, 130, 132, 279, 128, 166,
	129, -80, -169, 60, -162, 330, 142, 345, 346, 194,
	205, 199, 233, 221, 331, 347, 143, 187, 219, 222,
	266, 141, 180, 348, 253, 261, 190, 69, 197, 275,
	349, 184, 186, 185, 191, 154, 217, 210, 350, 338,
	208, 27, 351, 263, 238, 352, 335, 262, 209, 125,
	353, 145, 139, 354, 239, 243, 355, 267, 356, 357,
	358, 203, 204, 359, 269, 237, 32, 140, 332, 38,
	163, 270, 241, 360, 236, 231, 361, 362, 363, 364,
	235, 202, 230, 182, 42, 245, 244, 246, 183, 265,
	224, 365, 366, 146, 367, 368, 211, 18, 369, 370,
	273, 157, 371, 372, 373, 374, 161, 375, 376, 377,
	264, 240, 242, 378, 136, 379, 165, 380, 334, 381,
	271, 207, 382, 147, 162, 156, 274, 383, 384, 385,
	386, 148, 387, 388, 389, 198, 188, 390, 391, 392,
	393, 173, 277, 268, 41, 192, 250, 394, 201, 138,
	193, 395, 195, 170, 181, 256, 189, 228, 164, 396,
	397, 215, 216, 234, 200, 229, 196, 166, 167, 158,
	398, 276, 251, 336, 223, 220, 171, 399, 132, 168,
	169, 400, 257, 258, 172, 333, 272, 218, 252, 129,
	112, 222, 266, 119, 254, 255, 263, -202, 264, 165,
	-174, 129, -142, 253, 257, 258, 172, 60, 130, 131,
	32, 268, 267, 259, -169, 196, -58, 123, 159, -80,
	-159, -159, -159, 256, 256, -159, -30, 193, -2, -140,
	132, 258, 134, -126, 17, 16, -5, -3, -236, 6,
	20, 21, -55, 43, 44, -50, -62, 103, -63, -169,
	-87, 77, -92, 28, 60, -162, 23, -91, -88, -110,
	-108, -109, 112, 113, 114, 101, 102, 109, 78, 115,
	-97, -95, -96, -98, -100, -101, 62, 61, 70, 63,
	64, 65, 66, 71, 72, 73, -163, -106, -236, 47,
	48, 128, 289, 290, 291, 292, 329, 149, 293, 80,
	37, 278, 287, 286, 285, 283, 284, 280, 282, 281,
	295, 296, 135, 279, 107, 288, 318, 319, 320, 321,
	322, 323, 324, 325, 327, 328, 326, 308, 301, 302,
	303, 304, 305, 306, 307, 309, 310, 311, 312, 313,
	314, 315, 316, 317, -140, -140, 11, -73, -74, -80,
	-82, -169, -133, -173, 196, -136, 268, 267, -110, -135,
	-163, -169, 266, 222, 265, -209, 94, -198, 60, -80,
	130, -80, 288, -149, 135, -149, 166, -149, 86, -38,
	-80, -148, 135, -163, 60, -162, -148, -148, -148, -148,
	-80, 116, -80, 60, 29, -160, -236, -164, -163, -161,
	124, 301, 302, 303, 304, 305, 306, 307, 308, 309,
	310, 311, 312, 313, 314, 315, 316, 317, 150, 337,
	76, 22, 24, 248, 79, 112, 16, 80, 111, 289,
	119, 51, 280, 282, 278, 291, 292, 279, 254, 28,
	10, 25, 152, 21, 105, 121, 83, 84, 85, 155,
	23, 153, 73, 149, 19, 54, 11, 13, 299, 300,
	14, 135, 134, 96, 130, 49, 8, 115, 26, 93,
	45, 341, 35, 342, 47, 94, 17, 283, 284, 30,
	343, 329, 160, 107, 52, 39, 77, 71, 33, 74,
	55, 75, 15, 50, 297, 344, 95, 122, 288, 48,
	128, 6, 294, 29, 151, 46, 401, 129, 82, 295,
	296, 133, 72, 5, 34, 31, 9, 53, 56, 285,
	286, 287, 37, 81, 12, 298, 279, 128, 60, 165,
	129, 166, 132, -160, -160, -204, 11, 96, -160, 170,
	171, -160, -145, -144, 167, 261, 262, 256, 260, 12,
	-64, 94, 171, 256, 169, -160, -45, -2, -9, -7,
	-8, -2, 86, -159, -159, 29, 62, 40, -237, 59,
	129, -80, 119, 121, 124, 55, -127, 19, 30, -63,
	-169, -118, -121, -63, -117, -2, -49, 39, -53, 20,
	21, 68, 11, -166, 76, 75, 93, -165, 22, -163,
	62, 116, -63, -89, 96, 77, 94, 95, 79, 98,
	97, 108, 101, 102, 103, 104, 105, 106, 107, 99,
	100, 111, 86, 87, 88, 89, 90, 91, 92, -141,
	-236, -109, -236, 117, 118, -92, -92, -92, -92, -92,
	-92, -92, -92, -236, -2, -104, -63, -236, -236, -236,
	-236, -236, -236, -236, -236, -236, -236, -236, -113, -63,
	-236, -241, -99, -236, -241, -99, -241, -99, -241, -236,
	-241, -99, -241, -99, -241, -241, -99, -241, -236, -236,
	-236, -236, -236, -236, -236, -236, -236, -236, -236, -236,
	-236, -236, -236, -236, -236, -236, -236, -236, -236, -236,
	-236, -236, -236, -236, -236, -236, -236, -236, -236, -236,
	-236, -236, -81, 26, -80, -66, -67, -68, -69, -83,
	-109, -236, -80, -80, -73, -238, 58, 11, 56, -238,
	58, 116, 58, -133, 196, -134, -137, 269, 271, 86,
	-168, -163, 62, 28, 116, 29, 59, 58, -80, -176,
	-180, -182, -181, -183, -178, -179, 219, 222, 226, 224,
	220, 225, 112, 223, 228, 229, 230, 231, 232, 233,
	234, 235, 236, 237, 238, 29, 154, 215, 216, 217,
	218, 239, 240, 241, 242, 243, 244, 245, 246, 199,
	221, 331, 200, 201, 202, 203, 204, 205, 207, 208,
	209, 210, 211, 212, 213, -163, 22, 132, 60, 77,
	60, 60, -80, 60, 58, 133, -73, 23, 55, -75,
	-80, 60, 60, 60, -170, -169, -161, -160, -160, -149,
	-149, -160, -160, -80, -80, -80, -80, -160, -160, 11,
	-143, 11, 96, -143, -63, -92, -147, 94, 55, 60,
	-28, -27, -29, 180, 181, 182, 183, 184, 185, 186,
	187, 188, 189, 190, 191, 62, -80, -160, 168, 168,
	129, 129, 173, -80, 9, 96, 58, 18, 116, 58,
	-125, 24, 25, -126, -237, -55, -93, 40, 63, 66,
	-54, 46, -80, -63, -63, -102, 71, 77, 72, 73,
	-165, 103, -170, -164, -161, -92, -103, -106, -109, 67,
	96, 94, 95, 79, -92, -92, -92, -92, -92, -92,
	-92, -92, -92, -92, -92, -92, -92, -92, -92, -172,
	60, 62, 60, -91, -91, -163, -53, -237, 58, -237,
	-2, -60, -62, -60, -237, -63, -63, -110, 62, -60,
	-110, 62, -60, -60, -60, -53, -111, -112, 81, -110,
	-237, -92, -163, -163, -60, -61, -60, -60, -60, -237,
	-237, -62, -60, -62, -60, -60, -237, -237, -237, -237,
	-53, -53, -60, -60, -60, -53, -60, -60, -53, -60,
	-60, -60, -60, -53, -60, -60, -60, -130, 161, -80,
	29, 58, -76, -78, -77, -79, 45, 49, 51, 46,
	47, 48, 52, -155, 22, -66, -236, -84, 161, -85,
	22, -171, 53, 134, 54, -169, 62, -130, 56, -66,
	-80, -66, -82, -169, 103, -136, -134, 58, 270, 272,
	273, 55, 74, -63, -189, 111, -164, -170, -211, -212,
	-213, -164, 62, 63, -198, -199, -200, -214, 144, -220,
	136, 138, 34, -201, 145, 130, 35, 59, -177, -190,
	251, -184, 57, -184, -184, 227, 219, 222, 220, -184,
	-184, -184, -184, -184, -188, 222, -188, -188, -188, -188,
	220, 57, 57, -184, -184, -184, -192, 57, -192, 214,
	-192, -193, 57, -193, -193, -193, -167, 56, -124, -80,
	-160, 23, -160, -31, 176, 150, -80, -80, -80, 58,
	60, 60, -205, 11, 96, -80, -94, 22, -169, -169,
	-146, 94, 12, -59, 155, 62, -80, 58, 86, -152,
	124, 121, 122, 126, 127, -223, 248, 120, 222, 69,
	28, 15, 289, 161, 336, 60, 162, -80, -80, -80,
	-80, -80, 124, 121, 41, -63, -63, -121, -127, -139,
	19, 11, 37, 37, -60, 71, 72, 73, 116, -236,
	-103, -92, -92, -92, -59, 76, -237, -61, -63, -237,
	58, -237, -237, 58, 56, 22, 11, 11, -237, 11,
	11, -237, -237, -237, -60, -114, -112, 83, -63, -237,
	-237, 58, 58, -237, -237, -237, -237, -122, 297, -122,
	-237, -237, -237, -237, -237, -122, -122, -122, -122, -60,
	-60, -237, -237, -237, -60, -237, -237, -60, -237, -237,
	-237, -237, -60, -237, -237, -237, -90, 29, 37, -2,
	-236, -236, -133, -67, -68, -68, -67, -68, 45, 45,
	45, 50, 45, 50, 45, -77, -169, -237, -236, 33,
	-171, -85, 130, 130, 130, -86, 12, -66, -86, -86,
	116, -137, -138, 274, 271, 277, 60, 62, 116, 58,
	-213, 86, 57, 60, 35, -201, -201, -206, 60, -206,
	35, -194, -186, -187, -195, -196, -185, 71, 77, 28,
	55, 248, 136, 35, 34, 69, -191, 252, 63, -188,
	-188, -184, -184, -184, 227, -184, -188, -189, 29, -189,
	-189, -189, -189, -188, -197, 62, -197, 63, -192, 63,
	55, -163, -2, 22, -32, 8, 9, 10, 133, -160,
	-80, -160, -160, -86, 60, 60, -143, -146, 33, 62,
	-63, -92, -27, -91, -159, -156, -229, -201, -233, -200,
	137, 141, 144, 145, 136, 161, -156, -229, 144, -201,
	145, 137, -153, -201, 133, 22, -156, -156, -207, 86,
	161, -228, 56, 168, 248, 168, 42, -80, -65, 11,
	103, -164, -61, -59, 76, -92, -237, -62, -175, 112,
	219, 154, 217, 210, 237, 224, 250, 215, 251, -172,
	-175, -92, -92, -92, -92, 330, -117, 85, -63, 82,
	-92, -92, -163, -236, -122, -122, -122, -122, -122, -237,
	-237, -123, -122, -123, -123, -237, -123, -123, -237, -123,
	-123, -123, -123, -237, -123, -123, -123, -132, 55, -133,
	-105, -107, -106, -236, -2, -128, -163, -131, -163, -86,
	-71, -70, 55, 56, -72, 55, -70, 45, 45, -131,
	-92, -85, -236, -236, -236, -117, -63, -86, 271, 275,
	276, -212, -213, -216, -215, -163, -220, -206, -206, 57,
	71, -92, 9, 35, 35, 62, 59, -189, -189, -188,
	-184, -189, 60, 112, -189, 59, 58, 59, 58, 59,
	58, -80, -124, -124, 55, -80, -146, -92, 57, -198,
	-159, -206, -150, 60, 60, -159, 60, -163, 35, 60,
	-80, -163, -198, 60, -63, -163, -226, 333, -227, 60,
	-163, -163, -163, -86, -66, -237, -92, -237, -184, -184,
	-184, -193, -184, 204, -184, 204, -237, -237, 19, 19,
	19, 19, -236, -57, 294, -63, 58, 58, -117, 161,
	-123, -123, -123, -123, -123, 27, -132, 58, -237, -237,
	-237, 58, 116, -237, 58, -117, -63, 57, -63, -237,
	-85, -155, -129, -163, -129, -129, -126, 59, 58, -184,
	-129, -96, -189, -188, 62, -188, 63, 63, 57, -2,
	-80, -198, -119, 149, 150, -167, -203, -201, 60, -154,
	133, 22, 133, -119, -198, 26, -225, -224, -164, 57,
	56, -115, 13, -188, 60, -92, -92, -92, -92, -92,
	-237, 62, -92, -92, -237, 16, 35, -107, 37, -2,
	-236, -163, -163, -163, -126, -129, -84, -171, 58, -237,
	-237, -237, -218, -217, 56, 140, 69, -215, -125, 59,
	-189, -189, 59, 59, -216, -124, 19, 59, -159, 60,
	57, -206, 60, -163, -159, -119, -236, 58, 86, -129,
	-80, -116, 14, 16, -237, -237, -237, -237, -56, 96,
	333, -237, -237, -104, 9, -105, -2, 116, 59, -85,
	-163, -217, 60, -207, 62, 147, 59, 174, -159, -216,
	-167, -159, -221, -222, 161, -224, -213, 59, -63, -104,
	-237, 331, 52, 334, -117, -133, -237, -163, 63, -80,
	-219, -218, 175, 59, 57, -237, 58, -163, -228, 42,
	332, 335, -237, 57, -120, 177, 178, -219, -216, -222,
	37, -226, 42, -129, -124, 60, 60, 59, 163, 333,
	59, -11, -17, -10, -7, -8, -9, 194, -219, 164,
	334, -231, -232, 55, -124, -22, -18, -2, -7, -8,
	-9, -10, -19, -20, -21, -17, 80, 135, -236, 335,
	-232, 55, -231, 55, 10, 9, 402, -63, -63, -92,
	160, -230, 148, 143, 146, 29, -230, 85, -18, -23,
	-24, 81, 82, -237, -237, 142, 28, 71, 85, 83,
	-24, -63, -22, 80, -22, 82, 402, 402, -22, 85,
	83, -25, -26, 84, 85, 402, 135, -22, 85, 83,
	-26, -63, 80, 402, 135, -22, 82, 85, 402, -22,
	135, 85, 402, 135,
}
var yyDef = [...]int{

	26, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 726, 0, 441, 441, 441,
	441, 441, 441, 0, -2, 309, 310, 311, 0, 0,
	0, 0, -2, 417, 418, 0, 420, 421, 430, -2,
	1120, 1120, 0, 0, 1120, 0, 0, 38, 39, 777,
	433, 422, 423, 1118, 1, 3, 734, 0, 0, 445,
	448, 443, 0, 777, 777, 0, 0, 71, 72, 0,
	0, 0, 0, 0, 775, 775, 0, 775, 797, 0,
	793, 794, 795, 0, 773, 0, 773, 773, 773, 773,
	0, 365, 523, 804, 805, 934, 935, 936, 937, 938,
	939, 940, 941, 942, 943, 944, 945, 946, 947, 948,
	949, 950, 951, 952, 953, 954, 955, 956, 957, 958,
	959, 960, 961, 962, 963, 964, 965, 966, 967, 968,
	969, 970, 971, 972, 973, 974, 975, 976, 977, 978,
	979, 980, 981, 982, 983, 984, 985, 986, 987, 988,
	989, 990, 991, 992, 993, 994, 995, 996, 997, 998,
	999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008,
	1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018,
	1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028,
	1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038,
	1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048,
	1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058,
	1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068,
	1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078,
	1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088,
	1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098,
	1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108,
	1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 0,
	0, 0, 1121, 0, 1121, 1121, 379, 0, 381, 1121,
	0, 1121, 0, 389, 0, 0, 396, 1121, 267, 268,
	269, 414, 415, 402, 416, 419, 0, 0, 0, 434,
	435, 436, 437, 1120, 1120, 440, 107, 0, 32, 0,
	0, 0, 778, 738, 0, 0, 726, 34, 0, 441,
	446, 447, 451, 449, 450, 442, 0, 460, 469, 0,
	532, 0, 537, 539, -2, -2, 0, 574, 575, 576,
	577, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	602, 603, 604, 605, 606, 607, 711, 712, 713, 714,
	715, 716, 717, 718, 541, 542, 708, 758, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 699,
	0, 670, 670, 670, 670, 670, 670, 670, 670, 670,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 49,
	51, 523, 55, 0, 1095, 759, -2, -2, 0, 0,
	708, 0, -2, 948, -2, 0, 0, 149, 0, 147,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 355,
	0, 0, 0, 0, 800, 801, 0, 0, 0, 0,
	364, 0, 366, 1121, 1121, 369, 1122, 1123, 802, 803,
	808, 809, 810, 811, 812, 813, 814, 815, 816, 817,
	818, 819, 820, 821, 822, 823, 824, 825, 826, 827,
	828, 829, 830, 831, 832, 833, 834, 835, 836, 837,
	838, 839, 840, 841, 842, 843, 844, 845, 846, 847,
	848, 849, 850, 851, 852, 853, 854, 855, 856, 857,
	858, 859, 860, 861, 862, 863, 864, 865, 866, 867,
	868, 869, 870, 871, 872, 873, 874, 875, 876, 877,
	878, 879, 880, 881, 882, 883, 884, 885, 886, 887,
	888, 889, 890, 891, 892, 893, 894, 895, 896, 897,
	898, 899, 900, 901, 902, 903, 904, 905, 906, 907,
	908, 909, 910, 911, 912, 913, 914, 915, 916, 917,
	918, 919, 920, 921, 922, 923, 924, 925, 926, 927,
	928, 929, 930, 931, 932, 933, 775, 775, 1121, 1121,
	0, 0, 0, 377, 378, 0, 286, 287, 382, 1121,
	1121, 384, 0, 405, 405, 403, 404, 399, 400, 0,
	391, 0, 411, 393, 394, 397, 424, -2, 427, 428,
	429, -2, 0, 438, 439, 0, 109, 0, 33, 1119,
	0, 1121, 0, 0, 0, 0, 27, 0, 0, 735,
	0, 727, 728, 731, 734, 32, 448, 0, 454, 452,
	453, 444, 0, 461, 0, 0, 0, 470, 0, 472,
	473, 0, 535, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 559, 560, 561, 562, 563, 564, 565, 538,
	0, 552, 0, 0, 0, 594, 595, 596, 597, 598,
	599, 600, 0, 451, 32, 0, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 451, 0, 700,
	0, 653, 662, 0, 654, 663, 655, 664, 656, 0,
	657, 665, 658, 666, 659, 660, 667, 661, 0, 0,
	0, 456, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 451, 451, 0, 0, 0,
	451, 0, 0, 451, 0, 0, 0, 0, 451, 0,
	0, 0, 53, 0, 522, 0, 476, 478, 479, 480,
	-2, 0, 526, -2, 0, 0, 0, 45, 46, 0,
	0, 0, 0, 56, 1095, 58, 59, 0, 0, 0,
	243, 768, 769, 770, 0, 766, 298, 0, 0, 154,
	231, 162, 163, 164, 224, 166, 224, 224, 0, 224,
	224, 224, 224, 224, 240, 240, 240, 240, 240, 207,
	208, 209, 210, 211, 0, 0, 184, 224, 224, 224,
	188, 214, 215, 216, 217, 218, 219, 220, 221, 167,
	168, 169, 170, 171, 172, 173, 174, 175, 226, 226,
	226, 228, 228, 228, 228, 798, 70, 0, 1121, 0,
	1121, 0, 145, 80, 0, 0, 358, 774, 0, 360,
	47, 361, 362, 363, 524, 806, 807, 367, 368, 0,
	0, 372, 373, 374, 375, 376, 288, 383, 388, 0,
	491, 0, 0, 408, 390, 566, 392, 0, 0, 431,
	108, 111, 0, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 110, 0, 334, 0, 0,
	0, 0, 0, 0, 739, 0, 0, 0, 0, 0,
	730, 732, 733, 738, 35, 451, 0, 719, 0, 0,
	0, 455, 30, 533, 534, 536, 553, 0, 555, 557,
	471, 462, 0, 709, -2, 543, 544, 568, 569, 570,
	0, 0, 0, 0, 566, 548, 0, 579, 580, 581,
	582, 583, 584, 585, 586, 587, 588, 589, 590, 593,
	684, 685, 0, 591, 592, 601, 456, 571, 0, 757,
	32, 0, 458, 0, 640, 0, 0, 576, 711, 0,
	576, 711, 0, 0, 0, 0, 706, 703, 0, 0,
	671, 0, 0, 0, 0, 0, 457, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 521,
	0, 0, 0, 0, 0, 0, 511, 0, 0, 514,
	0, 0, 0, 0, 508, 0, 0, 484, 1035, 486,
	0, 526, 0, 0, 0, 509, 510, 530, 0, 530,
	50, 530, 52, 0, 525, 760, 57, 0, 0, 62,
	63, 761, 762, 763, 764, 0, 709, 0, 146, 299,
	301, 304, 305, 306, 150, 151, 152, 0, 0, 280,
	0, 0, 274, 274, 0, 270, 271, 148, 153, 233,
	232, 165, 0, 240, 240, 224, 224, 224, 224, 193,
	240, 196, 199, 200, 243, 0, 243, 243, 243, 243,
	240, 0, 0, 185, 186, 187, 176, 0, 177, 226,
	179, 180, 0, 181, 182, 183, 0, 0, 0, 0,
	76, 776, 77, 0, 81, 82, 0, 356, 1121, 0,
	1121, 1121, 530, 0, 0, 405, 408, 0, 406, 407,
	387, 0, 0, 398, 0, 412, 395, 0, 0, 1120,
	-2, 343, 790, 343, 343, 327, 260, 779, 780, 781,
	782, 783, 784, 785, 786, 787, 0, 137, 336, 338,
	337, 341, 0, 0, 0, 736, 737, 729, 28, 0,
	771, 772, 720, 721, 474, 554, 556, 558, 0, 456,
	545, 566, 549, 0, 546, 0, 540, 0, 573, -2,
	0, 638, 639, 0, 0, 0, 0, 0, 677, 0,
	0, 678, 0, 649, 726, 0, 704, 0, 0, 652,
	672, 0, 0, 673, 674, 675, 676, 627, 0, 628,
	0, 0, 0, 0, 0, 634, 635, 636, 637, 0,
	0, 467, 467, 467, 0, 467, 467, 0, 467, 467,
	467, 467, 0, 467, 467, 467, 751, 0, 0, -2,
	0, 0, 530, 477, 503, 505, 0, 500, 512, 513,
	515, 0, 517, 0, 519, 520, 481, 483, 0, 0,
	526, 490, 0, 0, 0, 726, 0, 530, 43, 44,
	0, 60, 61, 0, 0, 67, 244, 245, 0, 0,
	302, 0, 0, 0, 262, 274, 274, 265, 275, 266,
	0, 155, 156, 157, 158, 159, 160, 235, 0, 0,
	0, 239, 0, 247, 249, 0, 161, 234, 0, 243,
	243, 240, 191, 192, 224, 197, 243, 201, 0, 202,
	203, 204, 205, 243, 0, 222, 0, 0, 178, 0,
	0, 799, -2, 70, 0, 83, 84, 85, 0, 359,
	48, 370, 371, 380, 289, 290, 408, 386, 0, 409,
	410, 567, 112, 113, 312, 0, 1120, 274, 0, 328,
	344, 345, 346, 347, 348, 349, 0, 1120, 346, 0,
	347, 0, 0, 0, 791, 792, 0, 0, 0, 261,
	0, 140, 0, 0, 0, 0, 740, 29, 530, 0,
	463, 710, 0, 547, 0, 550, 608, 459, 0, 224,
	224, 689, 224, 228, 692, 224, 694, 224, 697, 0,
	0, 0, 0, 0, 0, 0, 701, 651, 707, 0,
	0, 0, 464, 726, 629, 630, 631, 632, 633, 467,
	467, 612, 468, 613, 614, 467, 616, 617, 467, 619,
	620, 621, 622, 467, 624, 625, 626, 36, 0, 751,
	741, 753, 755, 0, 32, 0, 747, 0, 495, 726,
	497, 504, 0, 0, 498, 0, 499, 516, 518, 0,
	-2, 489, 0, 0, 0, 734, 531, 42, 64, 65,
	66, 300, 303, 0, 276, 224, 279, 263, 264, 0,
	236, 237, 0, 246, 248, 250, 225, 189, 190, 243,
	198, 194, 241, 242, 206, 240, 0, 240, 0, 229,
	0, 0, 74, 0, 0, 357, 385, 492, 0, 331,
	315, 798, 272, 308, 316, 317, 322, 323, 0, 0,
	319, 0, 331, 0, 330, 0, 335, 0, 138, 139,
	0, 0, 340, 722, 475, 609, 551, 641, 686, 240,
	690, 691, 693, 695, 696, 698, 643, 642, 0, 0,
	0, 0, 0, 0, 0, 705, 0, 0, 0, 0,
	610, 611, 615, 618, 623, 0, 37, 0, 756, -2,
	0, 0, 0, 54, 0, 734, 501, 0, 506, 526,
	487, 0, 0, 493, 0, 0, 41, 252, 0, 731,
	0, 238, 195, 243, 223, 243, 0, 0, 0, -2,
	0, 0, 1120, 332, 0, 0, 274, 273, 329, 0,
	788, 789, 0, 1120, 331, 0, 141, 142, 0, 0,
	0, 724, 0, 687, 688, 0, 0, 0, 0, 679,
	650, 702, 0, 0, 465, 0, 0, 754, 0, -2,
	0, 749, 748, 496, 40, 0, 485, 526, 0, 527,
	528, 529, 251, 255, 0, 260, 0, 277, 278, 0,
	212, 213, 227, 230, 0, 75, 0, 1120, 314, 333,
	0, 798, 318, 324, 325, 1120, 0, 0, 0, 0,
	342, 31, 0, 0, 644, 646, 645, 647, 0, 0,
	0, 668, 669, 726, 0, 744, 32, 0, 502, 488,
	494, 256, 257, 0, 259, 0, 253, 0, 313, 0,
	0, 326, 0, 351, 0, 143, 144, 137, 725, 723,
	648, 0, 0, 0, 0, 752, -2, 750, 258, 0,
	73, 254, 86, 253, 0, 350, 0, 0, 140, 680,
	0, 683, 466, 0, 70, 0, 0, 320, 0, 352,
	0, 339, 681, 0, 0, 87, 88, 253, 0, 0,
	281, 70, 89, 90, 91, 92, 93, 0, 321, 0,
	0, 282, 283, 0, 78, 0, 126, -2, 129, 130,
	131, 132, 133, 134, 135, 136, 0, 0, 0, 682,
	284, 0, 285, 0, 0, 0, 0, 0, 0, 0,
	0, 291, 293, 294, 0, 0, 292, 94, 127, 0,
	97, 0, 0, 353, 354, 295, 296, 297, 0, 0,
	98, 0, 0, 95, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 0, 99, 100, 0, 0, 0,
	105, 0, 96, 0, 102, 0, 0, 0, 0, 0,
	101, 0, 106, 103,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 78, 3, 3, 3, 106, 98, 3,
	57, 59, 103, 101, 58, 102, 116, 104, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 402,
	87, 86, 88, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 108, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 97, 3, 109,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 79, 80, 81, 82, 83, 84, 85,
	89, 90, 91, 92, 93, 94, 95, 96, 99, 100,
	105, 107, 110, 111, 112, 113, 114, 115, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:368
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:373
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:374
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:378
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 26:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:403
		{
			setParseTree(yylex, nil)
		}
	case 27:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:409
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 28:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:417
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 29:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:421
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 30:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:427
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 31:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:434
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:440
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:444
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:450
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:454
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:461
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].setExprs)
			yyVAL.statement = ins
		}
	case 37:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:473
		{
			cols := make(Columns, 0, len(yyDollar[7].setExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].setExprs))
			for _, updateList := range yyDollar[7].setExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].setExprs)}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:485
		{
			yyVAL.str = InsertStr
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:489
		{
			yyVAL.str = ReplaceStr
		}
	case 40:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:495
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].setExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 41:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:501
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 42:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:505
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:509
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 44:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:513
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:518
		{
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:519
		{
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:523
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName.ToViewName()}
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:527
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName.ToViewName())
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:533
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:537
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:543
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:547
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:552
		{
			yyVAL.partitions = nil
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:556
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:562
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:566
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:570
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 58:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:574
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:580
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:584
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:590
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:594
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:598
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:604
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:608
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:612
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:616
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:622
		{
			yyVAL.str = SessionStr
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:626
		{
			yyVAL.str = GlobalStr
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:631
		{
			yyVAL.int = yyPosition(yylex)
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:637
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			if len(yyDollar[1].ddl.TableSpec.Constraints) > 0 {
				yyDollar[1].ddl.ConstraintAction = AddStr
			}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:645
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 73:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:651
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: yyDollar[4].colIdent, Using: yyDollar[5].colIdent, Type: yyDollar[2].str, Columns: yyDollar[9].indexColumns, Options: yyDollar[11].indexOptions}}
		}
	case 74:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:655
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[3].tableName.ToViewName(), ViewExpr: yyDollar[6].selStmt, SubStatementPositionStart: yyDollar[5].int, SubStatementPositionEnd: yyDollar[7].int - 1}
		}
	case 75:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:659
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[5].tableName.ToViewName(), ViewExpr: yyDollar[8].selStmt, SubStatementPositionStart: yyDollar[7].int, SubStatementPositionEnd: yyDollar[9].int - 1, OrReplace: true}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:663
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 77:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:667
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 78:
		yyDollar = yyS[yypt-15 : yypt+1]
//line sql.y:671
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[8].tableName, TriggerSpec: &TriggerSpec{Name: string(yyDollar[4].bytes), Time: yyDollar[5].str, Event: yyDollar[6].str, Order: yyDollar[12].triggerOrder, Body: yyDollar[14].statement}, SubStatementPositionStart: yyDollar[13].int, SubStatementPositionEnd: yyDollar[15].int - 1}
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:676
		{
			yyVAL.empty = struct{}{}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:680
		{
			yyVAL.empty = struct{}{}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:686
		{
			yyVAL.str = BeforeStr
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:690
		{
			yyVAL.str = AfterStr
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:696
		{
			yyVAL.str = InsertStr
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:700
		{
			yyVAL.str = UpdateStr
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:704
		{
			yyVAL.str = DeleteStr
		}
	case 86:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:709
		{
			yyVAL.triggerOrder = nil
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:713
		{
			yyVAL.triggerOrder = &TriggerOrder{PrecedesOrFollows: FollowsStr, OtherTriggerName: string(yyDollar[2].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:717
		{
			yyVAL.triggerOrder = &TriggerOrder{PrecedesOrFollows: PrecedesStr, OtherTriggerName: string(yyDollar[2].bytes)}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:723
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:733
		{
			yyVAL.statement = &BeginEndBlock{Statements: yyDollar[2].statements}
		}
	case 95:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:739
		{
			yyVAL.statement = &CaseStatement{Expr: yyDollar[2].expr, Cases: yyDollar[3].caseStatementCases}
		}
	case 96:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:743
		{
			yyVAL.statement = &CaseStatement{Expr: yyDollar[2].expr, Cases: yyDollar[3].caseStatementCases, Else: yyDollar[5].statements}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:749
		{
			yyVAL.caseStatementCases = []CaseStatementCase{yyDollar[1].caseStatementCase}
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:753
		{
			yyVAL.caseStatementCases = append(yyVAL.caseStatementCases, yyDollar[2].caseStatementCase)
		}
	case 99:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:759
		{
			yyVAL.caseStatementCase = CaseStatementCase{Case: yyDollar[2].expr, Statements: yyDollar[4].statements}
		}
	case 100:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:765
		{
			conds := []IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}
			yyVAL.statement = &IfStatement{Conditions: conds}
		}
	case 101:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:770
		{
			conds := []IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}
			yyVAL.statement = &IfStatement{Conditions: conds, Else: yyDollar[7].statements}
		}
	case 102:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:775
		{
			conds := yyDollar[6].ifStatementConditions
			conds = append([]IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}, conds...)
			yyVAL.statement = &IfStatement{Conditions: conds}
		}
	case 103:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:781
		{
			conds := yyDollar[6].ifStatementConditions
			conds = append([]IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}, conds...)
			yyVAL.statement = &IfStatement{Conditions: conds, Else: yyDollar[8].statements}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:789
		{
			yyVAL.ifStatementConditions = []IfStatementCondition{yyDollar[1].ifStatementCondition}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:793
		{
			yyVAL.ifStatementConditions = append(yyVAL.ifStatementConditions, yyDollar[2].ifStatementCondition)
		}
	case 106:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:799
		{
			yyVAL.ifStatementCondition = IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:805
		{
			yyVAL.statement = &Signal{SqlStateValue: string(yyDollar[2].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:809
		{
			yyVAL.statement = &Signal{SqlStateValue: string(yyDollar[2].bytes), Info: yyDollar[4].signalInfos}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:815
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:819
		{
			yyVAL.bytes = yyDollar[3].bytes
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:825
		{
			yyVAL.signalInfos = []SignalInfo{yyDollar[1].signalInfo}
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:829
		{
			yyVAL.signalInfos = append(yyVAL.signalInfos, yyDollar[3].signalInfo)
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:835
		{
			yyVAL.signalInfo = SignalInfo{Name: string(yyDollar[1].bytes), Value: yyDollar[3].expr.(*SQLVal)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:841
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:858
		{
			yyVAL.statements = Statements{yyDollar[1].statement}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:862
		{
			yyVAL.statements = append(yyVAL.statements, yyDollar[3].statement)
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:868
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:881
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:885
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:891
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:896
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:901
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:907
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:912
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:918
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 145:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:924
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName, IfNotExists: ne}
			setDDL(yylex, yyVAL.ddl)
		}
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:935
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:942
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:946
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:952
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:957
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:961
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:965
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:971
		{
			if err := yyDollar[2].columnType.merge(yyDollar[3].columnType); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:980
		{
			yyVAL.columnType = ColumnType{}
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:984
		{
			opt := ColumnType{NotNull: yyDollar[2].boolVal, sawnull: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:993
		{
			opt := ColumnType{Default: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1002
		{
			opt := ColumnType{OnUpdate: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1011
		{
			opt := ColumnType{Autoincrement: yyDollar[2].boolVal, sawai: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1020
		{
			opt := ColumnType{KeyOpt: yyDollar[2].colKeyOpt}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1029
		{
			opt := ColumnType{Comment: yyDollar[2].sqlVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1040
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1051
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1056
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1062
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1066
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1070
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1074
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1078
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1082
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1086
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1090
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1094
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1100
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1106
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1112
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1118
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1124
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1130
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1136
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1142
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1150
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1154
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1158
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1162
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1166
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 189:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1172
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 190:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1176
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1180
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1184
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1188
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 194:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1192
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 195:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1196
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1200
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1204
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 198:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1208
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Length: yyDollar[4].sqlVal}
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1212
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1216
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1220
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1224
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1228
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1232
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1236
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 206:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1240
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1244
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1248
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1252
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1256
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1260
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 212:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1264
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 213:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1269
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1275
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1279
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1283
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1287
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1291
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1295
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1299
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1303
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1309
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[1].bytes))
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1314
		{
			yyVAL.strs = append(yyDollar[1].strs, string(yyDollar[3].bytes))
		}
	case 224:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1319
		{
			yyVAL.sqlVal = nil
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1323
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 226:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1328
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 227:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1332
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 228:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1340
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1344
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 230:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1350
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 231:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1358
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1362
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 233:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1367
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1371
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1378
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1382
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1388
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1394
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1400
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 240:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1405
		{
			yyVAL.str = ""
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1409
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1413
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 243:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1418
		{
			yyVAL.str = ""
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1422
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1426
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1432
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1436
		{
			yyVAL.colKeyOpt = colKey
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1440
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1444
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1450
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 251:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1456
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1460
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 253:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1465
		{
			yyVAL.indexOptions = nil
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1469
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1475
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1479
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1485
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1489
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1494
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1500
		{
			yyVAL.str = ""
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1504
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1510
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1514
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1518
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1522
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1526
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1532
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1536
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1540
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1546
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1550
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 272:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1555
		{
			yyVAL.str = ""
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1559
		{
			yyVAL.str = yyDollar[1].str
		}
	case 274:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1564
		{
			yyVAL.str = ""
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1568
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1574
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1578
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1584
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal, Order: yyDollar[3].str}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1590
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1594
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 281:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1601
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 282:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1605
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 283:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1609
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 284:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1613
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 285:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1617
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[12].ReferenceAction, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1623
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1627
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1632
		{
			yyVAL.str = ""
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1636
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1640
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1646
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1652
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1658
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1662
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1666
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1670
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1674
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1679
		{
			yyVAL.str = ""
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1683
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1687
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1695
		{
			yyVAL.str = yyDollar[1].str
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1699
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1703
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1709
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1713
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1717
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1722
		{
			yyVAL.str = ""
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1726
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 312:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1737
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 313:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1741
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			ddl.Column = yyDollar[8].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 314:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1748
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 315:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1755
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 316:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1759
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: DropStr, Column: NewColIdent(string(yyDollar[7].bytes)), Table: yyDollar[4].tableName}
		}
	case 317:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1763
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 318:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1767
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: RenameStr, Table: yyDollar[4].tableName, Column: NewColIdent(string(yyDollar[7].bytes)), ToColumn: NewColIdent(string(yyDollar[9].bytes))}
		}
	case 319:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1771
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 320:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1776
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[7].str), Using: yyDollar[8].colIdent, Columns: yyDollar[10].indexColumns, Options: yyDollar[12].indexOptions}}
		}
	case 321:
		yyDollar = yyS[yypt-14 : yypt+1]
//line sql.y:1780
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[9].str), Type: yyDollar[7].str, Using: yyDollar[10].colIdent, Columns: yyDollar[12].indexColumns, Options: yyDollar[14].indexOptions}}
		}
	case 322:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1784
		{
			yyVAL.statement = &DDL{Action: AlterStr, ConstraintAction: DropStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[7].bytes)}}}}
		}
	case 323:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1789
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[7].colIdent}}
		}
	case 324:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1793
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: RenameStr, FromName: yyDollar[7].colIdent, ToName: yyDollar[9].colIdent}}
		}
	case 325:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1797
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ModifyStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 326:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1804
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ChangeStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, Column: NewColIdent(string(yyDollar[7].bytes)), ColumnOrder: yyDollar[9].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			yyVAL.statement = ddl
		}
	case 327:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1810
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 328:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1814
		{
			ddl := &DDL{Action: AlterStr, ConstraintAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddConstraint(yyDollar[6].constraintDefinition)
			yyVAL.statement = ddl
		}
	case 329:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1820
		{
			yyVAL.statement = &DDL{Action: AlterStr, ConstraintAction: DropStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[8].bytes), Details: &ForeignKeyDefinition{}}}}}
		}
	case 330:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1825
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, AutoIncSpec: &AutoIncSpec{Value: yyDollar[7].expr}}
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1830
		{
			yyVAL.columnOrder = nil
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1834
		{
			yyVAL.columnOrder = &ColumnOrder{First: true}
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1838
		{
			yyVAL.columnOrder = &ColumnOrder{AfterColumn: NewColIdent(string(yyDollar[2].bytes))}
		}
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1844
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 335:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1850
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 336:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1862
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 337:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1872
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 338:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1876
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 339:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1880
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 340:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1893
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 341:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1903
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 342:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1907
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1920
		{
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1922
		{
		}
	case 350:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1933
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1939
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1943
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 353:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1949
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 354:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1953
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1959
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1965
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 357:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1969
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 358:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1977
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 359:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1985
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[3].colIdent}}
		}
	case 360:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1989
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromViews: yyDollar[4].tableNames, IfExists: exists}
		}
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1997
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 362:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2001
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2005
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, TriggerSpec: &TriggerSpec{Name: string(yyDollar[4].bytes)}, IfExists: exists}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2015
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2019
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2024
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 367:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2030
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 368:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2035
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2039
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 370:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2043
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 371:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2047
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 372:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2052
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 373:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2056
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2060
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 375:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2064
		{
			yyVAL.statement = &Show{Type: CreateTriggerStr, Table: yyDollar[4].tableName}
		}
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2068
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2072
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2076
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2080
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 380:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2084
		{
			yyVAL.statement = &Show{Type: IndexStr, Table: yyDollar[4].tableName, Database: yyDollar[5].str, ShowIndexFilterOpt: yyDollar[6].expr}
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2088
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2092
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 383:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2096
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2100
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 385:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2104
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 386:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2109
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[6].showFilter, AsOf: yyDollar[5].expr}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 387:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2119
		{
			yyVAL.statement = &Show{Type: string(yyDollar[3].bytes), ShowTablesOpt: &ShowTablesOpt{DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}}
		}
	case 388:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2123
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2127
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 390:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2131
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2137
		{
			// Cannot dereference $3 directly, or else the parser stackcannot be pooled. See yyParsePooled
			cmp := yyDollar[3].expr.(*ComparisonExpr)
			cmp.Left = &ColName{Name: NewColIdent("collation")}
			var ex Expr = cmp
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &ex}
		}
	case 392:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2145
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2150
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2154
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 395:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2158
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2162
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2176
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2182
		{
			yyVAL.expr = &ComparisonExpr{Operator: LikeStr, Right: yyDollar[2].expr, Escape: yyDollar[3].expr}
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2188
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2192
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 401:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2198
		{
			yyVAL.str = ""
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2202
		{
			yyVAL.str = "full "
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2208
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2212
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 405:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2218
		{
			yyVAL.str = ""
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2222
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2226
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 408:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2232
		{
			yyVAL.showFilter = nil
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2236
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2240
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 411:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2246
		{
			yyVAL.showFilter = nil
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2250
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 413:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2256
		{
			yyVAL.str = ""
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2260
		{
			yyVAL.str = SessionStr
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2264
		{
			yyVAL.str = GlobalStr
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2270
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2274
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2280
		{
			yyVAL.statement = &Begin{}
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2284
		{
			yyVAL.statement = &Begin{}
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2290
		{
			yyVAL.statement = &Commit{}
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2296
		{
			yyVAL.statement = &Rollback{}
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2301
		{
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2302
		{
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2306
		{
			yyVAL.statement = &Explain{ExplainFormat: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2310
		{
			yyVAL.statement = &Explain{Analyze: true, ExplainFormat: TreeStr, Statement: yyDollar[3].selStmt}
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2316
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2324
		{
			yyVAL.str = ""
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2328
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2339
		{
			yyVAL.statement = &Show{Type: "columns", OnTable: yyDollar[2].tableName}
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2343
		{
			yyVAL.statement = &OtherRead{}
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2349
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2353
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2357
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2361
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2367
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 441:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2371
		{
			setAllowComments(yylex, true)
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2375
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 443:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2381
		{
			yyVAL.bytes2 = nil
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2385
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2391
		{
			yyVAL.str = UnionStr
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2395
		{
			yyVAL.str = UnionAllStr
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2399
		{
			yyVAL.str = UnionDistinctStr
		}
	case 448:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2404
		{
			yyVAL.str = ""
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2408
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2412
		{
			yyVAL.str = SQLCacheStr
		}
	case 451:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2417
		{
			yyVAL.str = ""
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2421
		{
			yyVAL.str = ""
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2425
		{
			yyVAL.str = DistinctStr
		}
	case 454:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2430
		{
			yyVAL.str = ""
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2434
		{
			yyVAL.str = StraightJoinHint
		}
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2439
		{
			yyVAL.selectExprs = nil
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2443
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2449
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2453
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2459
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2463
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2467
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 463:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2471
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2478
		{
			yyVAL.over = &Over{WindowName: yyDollar[2].colIdent}
		}
	case 465:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2482
		{
			yyVAL.over = &Over{OrderBy: yyDollar[3].orderBy}
		}
	case 466:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2486
		{
			yyVAL.over = &Over{PartitionBy: yyDollar[5].exprs, OrderBy: yyDollar[6].orderBy}
		}
	case 467:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2491
		{
			yyVAL.over = nil
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2495
		{
			yyVAL.over = yyDollar[1].over
		}
	case 469:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2500
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2504
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2508
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2515
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 474:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2520
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2524
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2530
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2534
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2544
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2548
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2552
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2558
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2564
		{
			yyVAL.aliasedTableName = yyDollar[2].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
		}
	case 485:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2569
		{
			yyVAL.aliasedTableName = yyDollar[6].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
			yyVAL.aliasedTableName.Partitions = yyDollar[4].partitions
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2580
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Hints: yyDollar[1].indexHints}
		}
	case 487:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2584
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, Hints: yyDollar[4].indexHints}
		}
	case 488:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2588
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, As: yyDollar[5].tableIdent, Hints: yyDollar[6].indexHints}
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2592
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2596
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[1].tableIdent, Hints: yyDollar[2].indexHints}
		}
	case 491:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2607
		{
			yyVAL.expr = nil
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2611
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2617
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2621
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2627
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2631
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 497:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2644
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 498:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2648
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 499:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2652
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2656
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2662
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 502:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2664
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 503:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2668
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2670
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 505:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2674
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2676
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 507:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2679
		{
			yyVAL.empty = struct{}{}
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2681
		{
			yyVAL.empty = struct{}{}
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2686
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2692
		{
			yyVAL.str = JoinStr
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2696
		{
			yyVAL.str = JoinStr
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2700
		{
			yyVAL.str = JoinStr
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2706
		{
			yyVAL.str = StraightJoinStr
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2712
		{
			yyVAL.str = LeftJoinStr
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2716
		{
			yyVAL.str = LeftJoinStr
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2720
		{
			yyVAL.str = RightJoinStr
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2724
		{
			yyVAL.str = RightJoinStr
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2730
		{
			yyVAL.str = NaturalJoinStr
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2734
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2744
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2748
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2754
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2758
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2764
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2769
		{
			yyVAL.indexHints = nil
		}
	case 527:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2773
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 528:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2777
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 529:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2781
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 530:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2786
		{
			yyVAL.expr = nil
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2790
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2796
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2800
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2804
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2808
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2812
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2816
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2820
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 539:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2826
		{
			yyVAL.str = ""
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2830
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2836
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2840
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2846
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2850
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 545:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2854
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 546:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2858
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 547:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2862
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2866
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 549:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2870
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 550:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2874
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 551:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2878
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2882
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2888
		{
			yyVAL.str = IsNullStr
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2892
		{
			yyVAL.str = IsNotNullStr
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2896
		{
			yyVAL.str = IsTrueStr
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2900
		{
			yyVAL.str = IsNotTrueStr
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2904
		{
			yyVAL.str = IsFalseStr
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2908
		{
			yyVAL.str = IsNotFalseStr
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2914
		{
			yyVAL.str = EqualStr
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2918
		{
			yyVAL.str = LessThanStr
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2922
		{
			yyVAL.str = GreaterThanStr
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2926
		{
			yyVAL.str = LessEqualStr
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2930
		{
			yyVAL.str = GreaterEqualStr
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2934
		{
			yyVAL.str = NotEqualStr
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2938
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 566:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2943
		{
			yyVAL.expr = nil
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2947
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2953
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2957
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2961
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2967
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2973
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2977
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2983
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2987
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2991
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2995
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2999
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3003
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3007
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3011
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3015
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3019
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3023
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3027
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3031
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3035
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3039
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3043
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3047
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3051
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3055
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3059
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3063
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3067
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3071
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3075
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3083
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3097
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3101
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3105
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 608:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3125
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: yyDollar[3].str == DistinctStr, Exprs: yyDollar[4].selectExprs}
		}
	case 609:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3129
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 610:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3139
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 611:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3143
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 612:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3147
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 613:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3151
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 614:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3155
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 615:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3159
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 616:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3163
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 617:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3167
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 618:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3171
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 619:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3175
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 620:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3179
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 621:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3183
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 622:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3187
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 623:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3191
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 624:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3195
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 625:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3199
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 626:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3203
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 627:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3212
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 628:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3216
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 629:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3220
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: SelectExprs{yyDollar[3].selectExpr}, Over: yyDollar[5].over}
		}
	case 630:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3224
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 631:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3228
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: SelectExprs{yyDollar[3].selectExpr}, Over: yyDollar[5].over}
		}
	case 632:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3232
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 633:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3236
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 634:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3240
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 635:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3244
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 636:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3248
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 637:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3252
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 638:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3262
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 639:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3266
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3270
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema")}
		}
	case 641:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3274
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 642:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3278
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 643:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3282
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 644:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3286
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 645:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3290
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 646:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3294
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 647:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3298
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 648:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3302
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 649:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3306
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("first"), Exprs: yyDollar[3].selectExprs}
		}
	case 650:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3310
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 651:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3314
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 652:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3318
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3328
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 654:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3332
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3336
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 656:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3341
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3346
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 658:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3351
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3357
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3362
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3366
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_user")}
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3371
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3375
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 664:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3379
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3384
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3389
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3394
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 668:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3398
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 669:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3402
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 672:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3412
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 673:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3422
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 674:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3426
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 675:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3430
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 676:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3434
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 677:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3438
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 678:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3442
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 679:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3448
		{
			yyVAL.str = ""
		}
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3452
		{
			yyVAL.str = BooleanModeStr
		}
	case 681:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3456
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 682:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3460
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3464
		{
			yyVAL.str = QueryExpansionStr
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3470
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3474
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 686:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3480
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 687:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3484
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 688:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3488
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3492
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 690:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3496
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 691:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3500
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3506
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 693:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3510
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3514
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 695:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3518
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3522
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3526
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 698:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3530
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 699:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3535
		{
			yyVAL.expr = nil
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3539
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 701:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3544
		{
			yyVAL.str = string("")
		}
	case 702:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3548
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3554
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 704:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3558
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 705:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3564
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 706:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3569
		{
			yyVAL.expr = nil
		}
	case 707:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3573
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3579
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 709:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3583
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 710:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3587
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3593
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3597
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3601
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3605
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3609
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3613
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3617
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3621
		{
			yyVAL.expr = &NullVal{}
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3627
		{
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 720:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3631
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 721:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3635
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 722:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3640
		{
			yyVAL.exprs = nil
		}
	case 723:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3644
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 724:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3649
		{
			yyVAL.expr = nil
		}
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3653
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 726:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3658
		{
			yyVAL.orderBy = nil
		}
	case 727:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3662
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3668
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 729:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3672
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 730:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3678
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 731:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3683
		{
			yyVAL.str = AscScr
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3687
		{
			yyVAL.str = AscScr
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3691
		{
			yyVAL.str = DescScr
		}
	case 734:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3696
		{
			yyVAL.limit = nil
		}
	case 735:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3700
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 736:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3704
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 737:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3708
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 738:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3713
		{
			yyVAL.str = ""
		}
	case 739:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3717
		{
			yyVAL.str = ForUpdateStr
		}
	case 740:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3721
		{
			yyVAL.str = ShareModeStr
		}
	case 741:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3734
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3738
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 743:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3742
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 744:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3747
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 745:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3751
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 746:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3755
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3762
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 748:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3766
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 749:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3770
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 750:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3774
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 751:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3779
		{
			yyVAL.setExprs = nil
		}
	case 752:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3783
		{
			yyVAL.setExprs = yyDollar[5].setExprs
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3789
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 754:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3793
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3799
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 756:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3803
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 757:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3809
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3815
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3825
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 760:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3829
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 761:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3835
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: NewStrVal([]byte("on"))}
		}
	case 762:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3839
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: NewStrVal([]byte("off"))}
		}
	case 763:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3843
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 764:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3847
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 766:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3854
		{
			yyVAL.bytes = []byte("charset")
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3861
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3865
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3869
		{
			yyVAL.expr = &Default{}
		}
	case 773:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3878
		{
			yyVAL.byt = 0
		}
	case 774:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3880
		{
			yyVAL.byt = 1
		}
	case 775:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3883
		{
			yyVAL.byt = 0
		}
	case 776:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3885
		{
			yyVAL.byt = 1
		}
	case 777:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3888
		{
			yyVAL.str = ""
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3890
		{
			yyVAL.str = IgnoreStr
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3894
		{
			yyVAL.empty = struct{}{}
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3896
		{
			yyVAL.empty = struct{}{}
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3898
		{
			yyVAL.empty = struct{}{}
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3900
		{
			yyVAL.empty = struct{}{}
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3902
		{
			yyVAL.empty = struct{}{}
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3904
		{
			yyVAL.empty = struct{}{}
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3906
		{
			yyVAL.empty = struct{}{}
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3908
		{
			yyVAL.empty = struct{}{}
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3910
		{
			yyVAL.empty = struct{}{}
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3914
		{
			yyVAL.empty = struct{}{}
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3916
		{
			yyVAL.empty = struct{}{}
		}
	case 790:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3919
		{
			yyVAL.empty = struct{}{}
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3921
		{
			yyVAL.empty = struct{}{}
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3923
		{
			yyVAL.empty = struct{}{}
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3927
		{
			yyVAL.str = UniqueStr
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3929
		{
			yyVAL.str = FulltextStr
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3931
		{
			yyVAL.str = SpatialStr
		}
	case 796:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3934
		{
			yyVAL.str = ""
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3936
		{
			yyVAL.str = yyDollar[1].str
		}
	case 798:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3939
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 799:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3941
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3945
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3949
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3956
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3962
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3966
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3973
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4310
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4319
		{
			decNesting(yylex)
		}
	case 1120:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4324
		{
			skipToEnd(yylex)
		}
	case 1121:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4329
		{
			skipToEnd(yylex)
		}
	case 1122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4333
		{
			skipToEnd(yylex)
		}
	case 1123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4337
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
