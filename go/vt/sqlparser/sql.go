// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const VALUES = 57376
const LAST_INSERT_ID = 57377
const NEXT = 57378
const VALUE = 57379
const SHARE = 57380
const MODE = 57381
const SQL_NO_CACHE = 57382
const SQL_CACHE = 57383
const JOIN = 57384
const STRAIGHT_JOIN = 57385
const LEFT = 57386
const RIGHT = 57387
const INNER = 57388
const OUTER = 57389
const CROSS = 57390
const NATURAL = 57391
const USE = 57392
const FORCE = 57393
const ON = 57394
const USING = 57395
const ID = 57396
const HEX = 57397
const STRING = 57398
const INTEGRAL = 57399
const FLOAT = 57400
const HEXNUM = 57401
const VALUE_ARG = 57402
const LIST_ARG = 57403
const COMMENT = 57404
const COMMENT_KEYWORD = 57405
const BIT_LITERAL = 57406
const NULL = 57407
const TRUE = 57408
const FALSE = 57409
const OFF = 57410
const OR = 57411
const AND = 57412
const NOT = 57413
const BETWEEN = 57414
const CASE = 57415
const WHEN = 57416
const THEN = 57417
const ELSE = 57418
const END = 57419
const LE = 57420
const GE = 57421
const NE = 57422
const NULL_SAFE_EQUAL = 57423
const IS = 57424
const LIKE = 57425
const REGEXP = 57426
const IN = 57427
const SHIFT_LEFT = 57428
const SHIFT_RIGHT = 57429
const DIV = 57430
const MOD = 57431
const UNARY = 57432
const COLLATE = 57433
const BINARY = 57434
const UNDERSCORE_BINARY = 57435
const UNDERSCORE_UTF8MB4 = 57436
const INTERVAL = 57437
const JSON_EXTRACT_OP = 57438
const JSON_UNQUOTE_EXTRACT_OP = 57439
const CREATE = 57440
const ALTER = 57441
const DROP = 57442
const RENAME = 57443
const ANALYZE = 57444
const ADD = 57445
const FLUSH = 57446
const SCHEMA = 57447
const TABLE = 57448
const INDEX = 57449
const VIEW = 57450
const TO = 57451
const IGNORE = 57452
const IF = 57453
const UNIQUE = 57454
const PRIMARY = 57455
const COLUMN = 57456
const SPATIAL = 57457
const FULLTEXT = 57458
const KEY_BLOCK_SIZE = 57459
const ACTION = 57460
const CASCADE = 57461
const CONSTRAINT = 57462
const FOREIGN = 57463
const NO = 57464
const REFERENCES = 57465
const RESTRICT = 57466
const SHOW = 57467
const DESCRIBE = 57468
const EXPLAIN = 57469
const DATE = 57470
const ESCAPE = 57471
const REPAIR = 57472
const OPTIMIZE = 57473
const TRUNCATE = 57474
const MAXVALUE = 57475
const PARTITION = 57476
const REORGANIZE = 57477
const LESS = 57478
const THAN = 57479
const PROCEDURE = 57480
const TRIGGER = 57481
const VINDEX = 57482
const VINDEXES = 57483
const STATUS = 57484
const VARIABLES = 57485
const WARNINGS = 57486
const BEGIN = 57487
const START = 57488
const TRANSACTION = 57489
const COMMIT = 57490
const ROLLBACK = 57491
const BIT = 57492
const TINYINT = 57493
const SMALLINT = 57494
const MEDIUMINT = 57495
const INT = 57496
const INTEGER = 57497
const BIGINT = 57498
const INTNUM = 57499
const UUID = 57500
const REAL = 57501
const DOUBLE = 57502
const FLOAT_TYPE = 57503
const DECIMAL = 57504
const NUMERIC = 57505
const TIME = 57506
const TIMESTAMP = 57507
const DATETIME = 57508
const YEAR = 57509
const CHAR = 57510
const VARCHAR = 57511
const BOOL = 57512
const CHARACTER = 57513
const VARBINARY = 57514
const NCHAR = 57515
const TEXT = 57516
const TINYTEXT = 57517
const MEDIUMTEXT = 57518
const LONGTEXT = 57519
const BLOB = 57520
const TINYBLOB = 57521
const MEDIUMBLOB = 57522
const LONGBLOB = 57523
const JSON = 57524
const ENUM = 57525
const GEOMETRY = 57526
const POINT = 57527
const LINESTRING = 57528
const POLYGON = 57529
const GEOMETRYCOLLECTION = 57530
const MULTIPOINT = 57531
const MULTILINESTRING = 57532
const MULTIPOLYGON = 57533
const NULLX = 57534
const AUTO_INCREMENT = 57535
const APPROXNUM = 57536
const SIGNED = 57537
const UNSIGNED = 57538
const ZEROFILL = 57539
const COLLATION = 57540
const DATABASES = 57541
const SCHEMAS = 57542
const TABLES = 57543
const VITESS_KEYSPACES = 57544
const VITESS_SHARDS = 57545
const VITESS_TABLETS = 57546
const VSCHEMA = 57547
const VSCHEMA_TABLES = 57548
const VITESS_TARGET = 57549
const FULL = 57550
const PROCESSLIST = 57551
const COLUMNS = 57552
const FIELDS = 57553
const ENGINES = 57554
const PLUGINS = 57555
const NAMES = 57556
const CHARSET = 57557
const GLOBAL = 57558
const SESSION = 57559
const ISOLATION = 57560
const LEVEL = 57561
const READ = 57562
const WRITE = 57563
const ONLY = 57564
const REPEATABLE = 57565
const COMMITTED = 57566
const UNCOMMITTED = 57567
const SERIALIZABLE = 57568
const CURRENT_TIMESTAMP = 57569
const DATABASE = 57570
const CURRENT_DATE = 57571
const CURRENT_TIME = 57572
const LOCALTIME = 57573
const LOCALTIMESTAMP = 57574
const UTC_DATE = 57575
const UTC_TIME = 57576
const UTC_TIMESTAMP = 57577
const REPLACE = 57578
const CONVERT = 57579
const CAST = 57580
const SUBSTR = 57581
const SUBSTRING = 57582
const GROUP_CONCAT = 57583
const SEPARATOR = 57584
const TIMESTAMPADD = 57585
const TIMESTAMPDIFF = 57586
const MATCH = 57587
const AGAINST = 57588
const BOOLEAN = 57589
const LANGUAGE = 57590
const WITH = 57591
const QUERY = 57592
const EXPANSION = 57593
const UNUSED = 57594

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"UUID",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA",
	"VSCHEMA_TABLES",
	"VITESS_TARGET",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 29,
	-2, 4,
	-1, 37,
	159, 305,
	160, 305,
	-2, 295,
	-1, 272,
	112, 647,
	-2, 643,
	-1, 273,
	112, 648,
	-2, 644,
	-1, 338,
	82, 823,
	-2, 62,
	-1, 339,
	82, 779,
	-2, 63,
	-1, 344,
	82, 758,
	-2, 607,
	-1, 346,
	82, 800,
	-2, 609,
	-1, 617,
	1, 358,
	5, 358,
	12, 358,
	13, 358,
	14, 358,
	15, 358,
	17, 358,
	19, 358,
	30, 358,
	31, 358,
	42, 358,
	43, 358,
	44, 358,
	45, 358,
	46, 358,
	48, 358,
	49, 358,
	52, 358,
	53, 358,
	55, 358,
	56, 358,
	270, 358,
	-2, 376,
	-1, 620,
	53, 45,
	55, 45,
	-2, 47,
	-1, 766,
	112, 650,
	-2, 646,
	-1, 935,
	5, 29,
	-2, 67,
	-1, 1002,
	5, 30,
	-2, 442,
	-1, 1032,
	5, 29,
	-2, 581,
	-1, 1234,
	5, 29,
	-2, 68,
	-1, 1281,
	5, 30,
	-2, 582,
	-1, 1335,
	5, 29,
	-2, 584,
	-1, 1406,
	5, 30,
	-2, 585,
}

const yyPrivate = 57344

const yyLast = 12590

var yyAct = [...]int{

	273, 1439, 1429, 1394, 573, 270, 1244, 1129, 1035, 1347,
	1316, 1301, 1181, 1053, 1215, 875, 852, 445, 1182, 967,
	251, 572, 3, 1036, 910, 290, 884, 1178, 874, 303,
	1078, 1059, 81, 930, 1194, 994, 211, 1188, 791, 211,
	57, 1153, 798, 731, 343, 211, 304, 51, 1108, 1098,
	801, 850, 630, 1107, 888, 839, 854, 819, 614, 768,
	505, 916, 241, 511, 613, 926, 277, 211, 81, 337,
	629, 517, 211, 250, 211, 275, 525, 260, 334, 587,
	56, 832, 1432, 1416, 976, 1427, 588, 1404, 1424, 1245,
	1415, 1403, 332, 1170, 1273, 450, 1210, 1211, 51, 866,
	867, 206, 202, 203, 204, 871, 256, 243, 244, 245,
	246, 478, 1066, 249, 264, 1065, 1209, 631, 1067, 632,
	1372, 538, 537, 547, 548, 540, 541, 542, 543, 544,
	545, 546, 539, 61, 865, 549, 499, 248, 315, 950,
	321, 322, 319, 320, 318, 317, 316, 247, 495, 198,
	1089, 200, 909, 949, 323, 324, 496, 493, 494, 63,
	64, 65, 66, 67, 917, 1322, 1264, 1262, 240, 488,
	489, 705, 1132, 1131, 703, 1426, 1423, 480, 1395, 482,
	463, 954, 1128, 833, 1390, 889, 1447, 800, 464, 452,
	948, 1348, 200, 1054, 1056, 1133, 498, 1313, 1443, 211,
	709, 891, 211, 696, 1350, 704, 891, 1204, 211, 479,
	481, 1203, 1202, 448, 211, 1125, 706, 81, 455, 81,
	81, 1127, 81, 81, 205, 81, 213, 81, 201, 961,
	1079, 1379, 960, 561, 562, 1284, 81, 1011, 1140, 1021,
	945, 942, 943, 988, 941, 740, 199, 538, 537, 547,
	548, 540, 541, 542, 543, 544, 545, 546, 539, 529,
	460, 549, 470, 475, 1225, 475, 475, 81, 475, 475,
	1055, 475, 1349, 475, 539, 952, 955, 549, 514, 872,
	737, 549, 475, 524, 70, 1388, 563, 564, 565, 566,
	567, 568, 569, 570, 1373, 513, 917, 890, 732, 477,
	995, 1312, 890, 51, 1441, 446, 1402, 1442, 1008, 1440,
	501, 502, 947, 1362, 969, 1226, 1192, 1126, 558, 1124,
	71, 560, 633, 457, 1121, 458, 1172, 820, 459, 775,
	211, 211, 211, 820, 946, 1018, 81, 1114, 444, 561,
	562, 698, 81, 773, 774, 772, 1154, 266, 1082, 571,
	54, 575, 576, 577, 578, 579, 580, 581, 582, 583,
	771, 586, 589, 589, 589, 595, 589, 589, 595, 589,
	603, 604, 605, 606, 607, 608, 1007, 618, 951, 733,
	476, 451, 612, 1156, 519, 466, 467, 468, 523, 522,
	1408, 515, 968, 953, 824, 1174, 590, 592, 594, 596,
	598, 600, 601, 591, 593, 524, 597, 599, 1307, 602,
	561, 562, 523, 522, 627, 1306, 1006, 1158, 1005, 1162,
	1102, 1157, 1101, 1155, 621, 1090, 523, 522, 1160, 524,
	905, 901, 792, 1113, 793, 523, 522, 1159, 1118, 1115,
	1109, 1116, 1112, 524, 1389, 211, 1110, 1111, 340, 1448,
	1161, 1163, 524, 522, 902, 211, 211, 81, 453, 454,
	1117, 211, 22, 1329, 211, 302, 1304, 211, 907, 524,
	899, 211, 1137, 81, 81, 1386, 900, 891, 81, 81,
	81, 211, 81, 81, 985, 986, 987, 1099, 1449, 81,
	81, 542, 543, 544, 545, 546, 539, 79, 1359, 549,
	197, 1087, 1068, 475, 1069, 446, 446, 758, 760, 761,
	743, 744, 1247, 759, 1240, 719, 1238, 81, 1079, 475,
	475, 211, 255, 1074, 475, 475, 475, 81, 475, 475,
	794, 906, 904, 342, 745, 475, 475, 767, 1353, 1425,
	776, 777, 778, 779, 780, 781, 782, 783, 784, 785,
	786, 787, 788, 789, 790, 717, 710, 1235, 523, 522,
	446, 716, 769, 715, 474, 329, 330, 1411, 504, 1353,
	1398, 81, 699, 890, 766, 524, 1353, 504, 887, 885,
	697, 886, 1353, 1380, 1353, 1352, 883, 889, 739, 1299,
	1298, 1286, 504, 747, 694, 825, 472, 805, 1283, 504,
	508, 512, 624, 762, 81, 81, 465, 51, 1232, 1231,
	504, 211, 903, 1358, 764, 1228, 1229, 530, 1357, 211,
	211, 1356, 575, 211, 211, 738, 1191, 81, 1222, 540,
	541, 542, 543, 544, 545, 546, 539, 795, 796, 549,
	81, 58, 523, 522, 625, 503, 623, 810, 813, 829,
	1228, 1227, 574, 821, 892, 817, 1000, 504, 879, 524,
	803, 585, 836, 504, 1143, 851, 803, 504, 1060, 618,
	640, 639, 1279, 1179, 860, 24, 1191, 912, 913, 914,
	915, 1000, 342, 1060, 342, 342, 1361, 342, 342, 859,
	342, 623, 342, 923, 924, 925, 862, 211, 81, 863,
	81, 342, 858, 1334, 81, 81, 211, 211, 1000, 211,
	211, 836, 835, 211, 24, 24, 340, 935, 836, 918,
	919, 920, 1230, 54, 1434, 1070, 1191, 932, 864, 1024,
	1023, 211, 527, 211, 211, 1000, 211, 836, 965, 1030,
	623, 626, 51, 1031, 475, 741, 475, 708, 54, 293,
	292, 295, 296, 297, 298, 257, 928, 929, 294, 299,
	1417, 1318, 54, 54, 806, 807, 911, 1291, 812, 815,
	816, 841, 844, 845, 846, 842, 504, 843, 847, 991,
	992, 993, 279, 483, 484, 766, 485, 486, 931, 487,
	1220, 490, 1073, 828, 927, 830, 831, 1195, 1196, 1130,
	500, 342, 769, 54, 922, 977, 978, 635, 921, 934,
	1430, 1198, 989, 538, 537, 547, 548, 540, 541, 542,
	543, 544, 545, 546, 539, 1179, 1103, 549, 735, 712,
	1047, 1045, 990, 753, 1201, 1048, 1046, 211, 211, 211,
	211, 211, 1200, 1044, 1049, 734, 845, 846, 1043, 211,
	261, 262, 211, 1421, 1032, 1414, 211, 1139, 973, 518,
	211, 1419, 983, 982, 1094, 506, 638, 473, 1332, 1086,
	755, 756, 1085, 805, 516, 81, 1017, 507, 1081, 1033,
	1034, 1075, 1277, 618, 618, 618, 618, 618, 1314, 938,
	1071, 711, 1062, 1105, 849, 695, 1039, 1040, 851, 1042,
	1057, 1038, 1037, 1050, 1041, 518, 618, 1083, 981, 746,
	765, 1061, 1058, 258, 259, 252, 980, 1063, 1366, 1080,
	253, 58, 342, 574, 1365, 1320, 808, 809, 1060, 497,
	1436, 1435, 60, 1012, 1009, 81, 730, 520, 342, 342,
	984, 1076, 1077, 342, 342, 342, 1436, 342, 342, 1376,
	1084, 736, 62, 622, 342, 342, 55, 1, 1428, 1246,
	1315, 944, 1393, 1346, 1214, 81, 211, 802, 804, 882,
	873, 69, 1100, 443, 1091, 1092, 68, 1387, 881, 880,
	211, 870, 749, 897, 896, 893, 1088, 999, 908, 81,
	895, 1120, 527, 894, 898, 342, 1119, 648, 646, 647,
	645, 1149, 1150, 1106, 644, 1015, 650, 340, 649, 642,
	1136, 475, 643, 225, 1166, 1167, 335, 1168, 1169, 848,
	876, 702, 1093, 634, 1095, 1096, 1097, 1147, 933, 1176,
	1177, 521, 1146, 72, 81, 81, 797, 720, 721, 1180,
	1123, 1311, 722, 723, 724, 1164, 726, 727, 1122, 1165,
	940, 1152, 822, 728, 729, 1185, 1171, 559, 81, 491,
	492, 1183, 227, 557, 979, 1064, 766, 1190, 341, 826,
	827, 81, 1186, 81, 81, 742, 1199, 510, 1184, 1364,
	51, 1319, 1016, 584, 818, 278, 974, 975, 1213, 512,
	757, 291, 342, 1208, 288, 1205, 289, 1037, 748, 1212,
	1206, 1217, 1029, 531, 211, 342, 276, 1218, 1219, 268,
	1221, 616, 609, 617, 840, 838, 837, 713, 1197, 1193,
	615, 765, 1142, 211, 1272, 1236, 1371, 1234, 752, 81,
	26, 59, 81, 81, 211, 263, 841, 844, 845, 846,
	842, 81, 843, 847, 211, 19, 1195, 1196, 18, 17,
	20, 1001, 51, 16, 1255, 15, 1251, 14, 461, 30,
	21, 13, 12, 342, 11, 342, 10, 9, 1019, 956,
	957, 1237, 8, 7, 1252, 6, 5, 4, 254, 1257,
	1258, 23, 1259, 1239, 2, 1261, 1242, 1263, 0, 997,
	618, 0, 1260, 998, 0, 1253, 0, 1223, 1224, 0,
	1002, 1003, 1004, 0, 0, 0, 342, 1010, 1278, 0,
	1013, 1014, 0, 81, 0, 1288, 1020, 1271, 0, 0,
	1022, 81, 0, 1025, 1026, 1027, 1028, 1297, 1071, 0,
	0, 1287, 0, 0, 81, 0, 0, 0, 0, 0,
	0, 1300, 0, 0, 0, 1052, 81, 0, 0, 1293,
	1294, 1295, 0, 1309, 0, 876, 0, 0, 1037, 0,
	0, 0, 937, 0, 939, 0, 0, 0, 0, 0,
	0, 0, 0, 1323, 1324, 1325, 1326, 1327, 0, 0,
	475, 1330, 1331, 0, 81, 81, 0, 81, 0, 1303,
	0, 1305, 81, 0, 81, 81, 81, 211, 1333, 1310,
	81, 822, 0, 1341, 1335, 1342, 1343, 1344, 1340, 1183,
	0, 0, 0, 1345, 1351, 770, 0, 1138, 0, 81,
	1321, 0, 0, 0, 0, 0, 1184, 0, 0, 1336,
	1363, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 0, 0, 0, 0, 0, 1377, 0, 0,
	509, 0, 0, 0, 81, 0, 1385, 0, 1378, 1384,
	0, 1360, 81, 81, 1183, 0, 1173, 0, 0, 1145,
	0, 1400, 1396, 0, 0, 0, 0, 0, 1397, 0,
	81, 1184, 0, 51, 0, 1405, 209, 0, 0, 239,
	0, 211, 0, 0, 1151, 209, 81, 0, 0, 0,
	1104, 617, 1175, 619, 0, 617, 1413, 0, 1207, 1354,
	0, 1355, 0, 0, 267, 1418, 0, 209, 81, 1276,
	1420, 1392, 209, 0, 209, 0, 0, 1270, 0, 1422,
	342, 1433, 0, 0, 0, 0, 0, 1437, 1444, 208,
	0, 0, 0, 1037, 0, 0, 0, 0, 242, 0,
	0, 876, 0, 876, 342, 0, 0, 538, 537, 547,
	548, 540, 541, 542, 543, 544, 545, 546, 539, 0,
	333, 549, 0, 1431, 0, 447, 0, 449, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 342, 0, 0,
	0, 0, 0, 0, 0, 0, 822, 0, 0, 1187,
	1189, 538, 537, 547, 548, 540, 541, 542, 543, 544,
	545, 546, 539, 0, 0, 549, 0, 0, 0, 0,
	0, 1145, 1274, 1189, 0, 0, 0, 0, 0, 1134,
	0, 0, 574, 0, 0, 0, 342, 0, 342, 1216,
	1289, 1254, 0, 1290, 0, 0, 1292, 0, 1256, 209,
	0, 0, 209, 0, 0, 770, 0, 0, 209, 1265,
	1266, 0, 0, 0, 209, 537, 547, 548, 540, 541,
	542, 543, 544, 545, 546, 539, 0, 0, 549, 1280,
	1281, 1282, 0, 1285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 876, 1243, 0, 0, 1248, 1249, 0,
	1296, 0, 456, 0, 0, 462, 342, 1275, 0, 0,
	0, 469, 0, 1269, 0, 0, 0, 471, 0, 617,
	617, 617, 617, 617, 0, 0, 1317, 0, 0, 0,
	0, 0, 0, 0, 617, 0, 0, 0, 0, 0,
	0, 0, 617, 0, 0, 538, 537, 547, 548, 540,
	541, 542, 543, 544, 545, 546, 539, 822, 0, 549,
	0, 0, 0, 0, 0, 0, 0, 1328, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	209, 209, 209, 0, 0, 0, 1302, 538, 537, 547,
	548, 540, 541, 542, 543, 544, 545, 546, 539, 342,
	0, 549, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 342, 0, 1399, 574, 0, 0, 0, 1367, 1368,
	1369, 1370, 0, 0, 0, 1374, 1375, 0, 0, 0,
	0, 0, 0, 611, 0, 620, 0, 1381, 1382, 1383,
	0, 0, 1317, 876, 0, 0, 0, 0, 0, 1337,
	1338, 0, 1339, 0, 0, 0, 0, 1302, 0, 1302,
	1302, 1302, 0, 0, 0, 1216, 1401, 0, 0, 0,
	0, 0, 0, 1406, 547, 548, 540, 541, 542, 543,
	544, 545, 546, 539, 1302, 0, 549, 0, 1410, 0,
	0, 0, 0, 0, 0, 209, 0, 0, 1308, 0,
	0, 0, 0, 0, 0, 209, 209, 0, 0, 0,
	0, 209, 0, 0, 209, 0, 0, 209, 0, 1391,
	0, 718, 0, 0, 0, 0, 0, 342, 342, 1268,
	0, 209, 1445, 1446, 0, 0, 0, 0, 0, 0,
	0, 0, 822, 0, 0, 1407, 0, 0, 641, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 700, 701,
	0, 1412, 0, 0, 707, 1267, 0, 333, 0, 0,
	714, 209, 0, 0, 0, 24, 25, 52, 27, 28,
	718, 0, 0, 1302, 725, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 43, 0, 0, 0, 0, 29,
	48, 49, 0, 538, 537, 547, 548, 540, 541, 542,
	543, 544, 545, 546, 539, 0, 0, 549, 0, 38,
	0, 0, 267, 54, 754, 0, 617, 267, 267, 0,
	0, 267, 267, 267, 0, 0, 0, 823, 0, 538,
	537, 547, 548, 540, 541, 542, 543, 544, 545, 546,
	539, 0, 0, 549, 0, 0, 267, 267, 267, 267,
	0, 209, 0, 0, 0, 0, 0, 0, 0, 209,
	856, 1148, 0, 209, 209, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 31, 32, 34, 33, 36, 0,
	50, 538, 537, 547, 548, 540, 541, 542, 543, 544,
	545, 546, 539, 0, 0, 549, 0, 235, 0, 0,
	0, 37, 44, 45, 834, 0, 46, 47, 35, 0,
	0, 0, 0, 0, 0, 0, 0, 861, 0, 0,
	0, 39, 40, 0, 41, 42, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 209, 209, 214, 209,
	209, 0, 0, 209, 0, 217, 0, 0, 0, 0,
	0, 0, 0, 226, 221, 0, 0, 666, 0, 0,
	0, 209, 0, 970, 971, 0, 209, 0, 0, 0,
	0, 718, 0, 0, 0, 0, 0, 0, 0, 0,
	936, 0, 0, 267, 0, 224, 0, 0, 0, 958,
	959, 234, 962, 963, 0, 0, 964, 0, 0, 0,
	0, 0, 53, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 966, 0, 0, 0, 215, 972,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	267, 0, 0, 0, 0, 654, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 218, 219, 267, 229,
	230, 231, 233, 0, 232, 238, 0, 0, 0, 220,
	223, 0, 216, 237, 236, 0, 823, 209, 209, 209,
	209, 209, 667, 0, 0, 0, 0, 0, 0, 1051,
	0, 0, 209, 0, 0, 0, 856, 0, 0, 0,
	209, 0, 0, 0, 680, 683, 684, 685, 686, 687,
	688, 0, 651, 689, 690, 691, 692, 693, 668, 669,
	670, 671, 652, 653, 681, 0, 655, 0, 656, 657,
	658, 659, 660, 661, 662, 663, 664, 665, 672, 673,
	674, 675, 676, 677, 678, 679, 533, 0, 536, 0,
	0, 0, 0, 0, 550, 551, 552, 553, 554, 555,
	556, 996, 534, 535, 532, 538, 537, 547, 548, 540,
	541, 542, 543, 544, 545, 546, 539, 0, 0, 549,
	0, 538, 537, 547, 548, 540, 541, 542, 543, 544,
	545, 546, 539, 0, 0, 549, 0, 0, 0, 0,
	0, 682, 0, 0, 0, 0, 209, 538, 537, 547,
	548, 540, 541, 542, 543, 544, 545, 546, 539, 0,
	209, 549, 0, 0, 0, 0, 0, 0, 0, 0,
	267, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 267, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1135,
	0, 0, 718, 0, 0, 0, 0, 0, 0, 0,
	0, 823, 0, 1141, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	0, 0, 0, 526, 209, 0, 0, 0, 103, 0,
	0, 0, 0, 0, 120, 0, 122, 0, 0, 160,
	131, 0, 0, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 209, 0, 0, 0, 80, 0,
	528, 0, 0, 0, 209, 0, 0, 96, 0, 0,
	0, 0, 0, 523, 522, 0, 0, 1233, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	524, 0, 0, 0, 0, 0, 1241, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1250, 0, 0,
	0, 0, 823, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 212, 0, 0, 0,
	0, 146, 0, 163, 111, 119, 83, 90, 0, 110,
	137, 151, 155, 0, 0, 0, 99, 0, 153, 141,
	176, 0, 142, 152, 123, 168, 147, 175, 184, 185,
	165, 183, 192, 84, 164, 174, 97, 156, 86, 172,
	162, 129, 115, 116, 85, 0, 180, 150, 102, 107,
	101, 138, 169, 170, 100, 195, 91, 182, 88, 92,
	181, 136, 167, 173, 130, 127, 87, 171, 128, 126,
	118, 105, 112, 144, 125, 145, 113, 133, 132, 134,
	0, 0, 0, 161, 178, 196, 94, 856, 157, 166,
	186, 187, 188, 189, 190, 191, 0, 0, 95, 108,
	104, 143, 135, 93, 114, 158, 117, 124, 149, 194,
	140, 154, 98, 177, 159, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 89, 121, 193, 148, 106,
	179, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 823, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 209, 0, 430, 419, 0, 390, 433, 368, 382,
	442, 383, 384, 412, 354, 398, 139, 380, 0, 371,
	349, 377, 350, 369, 392, 103, 395, 367, 421, 401,
	432, 120, 440, 122, 406, 0, 160, 131, 0, 0,
	394, 423, 396, 417, 389, 413, 359, 405, 434, 381,
	410, 435, 0, 0, 1409, 80, 0, 877, 878, 0,
	0, 0, 0, 0, 96, 0, 408, 429, 379, 409,
	411, 348, 407, 0, 352, 355, 441, 425, 374, 375,
	1072, 0, 0, 0, 0, 0, 0, 393, 397, 414,
	387, 0, 0, 0, 0, 0, 0, 0, 0, 372,
	0, 404, 0, 0, 0, 356, 353, 0, 0, 391,
	0, 0, 0, 358, 0, 373, 415, 0, 347, 109,
	418, 424, 388, 212, 428, 386, 385, 431, 146, 0,
	163, 111, 119, 83, 90, 0, 110, 137, 151, 155,
	422, 370, 378, 99, 376, 153, 141, 176, 403, 142,
	152, 123, 168, 147, 175, 184, 185, 165, 183, 192,
	84, 164, 174, 97, 156, 86, 172, 162, 129, 115,
	116, 85, 0, 439, 150, 102, 107, 101, 138, 169,
	170, 100, 195, 91, 182, 88, 92, 181, 136, 167,
	173, 130, 127, 87, 171, 128, 126, 118, 105, 112,
	144, 125, 145, 113, 133, 132, 134, 0, 351, 0,
	161, 178, 196, 94, 366, 157, 166, 186, 187, 188,
	189, 190, 191, 0, 0, 95, 108, 104, 143, 135,
	93, 114, 158, 117, 124, 149, 194, 140, 154, 98,
	177, 159, 362, 365, 360, 361, 399, 400, 436, 437,
	438, 416, 357, 0, 363, 364, 0, 420, 426, 427,
	402, 82, 89, 121, 193, 148, 106, 179, 430, 419,
	0, 390, 433, 368, 382, 442, 383, 384, 412, 354,
	398, 139, 380, 0, 371, 349, 377, 350, 369, 392,
	103, 395, 367, 421, 401, 432, 120, 440, 122, 406,
	0, 160, 131, 0, 0, 394, 423, 396, 417, 389,
	413, 359, 405, 434, 381, 410, 435, 0, 0, 0,
	80, 0, 877, 878, 0, 0, 0, 0, 0, 96,
	0, 408, 429, 379, 409, 411, 348, 407, 0, 352,
	355, 441, 425, 374, 375, 0, 0, 0, 0, 0,
	0, 0, 393, 397, 414, 387, 0, 0, 0, 0,
	0, 0, 0, 0, 372, 0, 404, 0, 0, 0,
	356, 353, 0, 0, 391, 0, 0, 0, 358, 0,
	373, 415, 0, 347, 109, 418, 424, 388, 212, 428,
	386, 385, 431, 146, 0, 163, 111, 119, 83, 90,
	0, 110, 137, 151, 155, 422, 370, 378, 99, 376,
	153, 141, 176, 403, 142, 152, 123, 168, 147, 175,
	184, 185, 165, 183, 192, 84, 164, 174, 97, 156,
	86, 172, 162, 129, 115, 116, 85, 0, 439, 150,
	102, 107, 101, 138, 169, 170, 100, 195, 91, 182,
	88, 92, 181, 136, 167, 173, 130, 127, 87, 171,
	128, 126, 118, 105, 112, 144, 125, 145, 113, 133,
	132, 134, 0, 351, 0, 161, 178, 196, 94, 366,
	157, 166, 186, 187, 188, 189, 190, 191, 0, 0,
	95, 108, 104, 143, 135, 93, 114, 158, 117, 124,
	149, 194, 140, 154, 98, 177, 159, 362, 365, 360,
	361, 399, 400, 436, 437, 438, 416, 357, 0, 363,
	364, 0, 420, 426, 427, 402, 82, 89, 121, 193,
	148, 106, 179, 430, 419, 0, 390, 433, 368, 382,
	442, 383, 384, 412, 354, 398, 139, 380, 0, 371,
	349, 377, 350, 369, 392, 103, 395, 367, 421, 401,
	432, 120, 440, 122, 406, 0, 160, 131, 0, 0,
	394, 423, 396, 417, 389, 413, 359, 405, 434, 381,
	410, 435, 54, 0, 0, 80, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 408, 429, 379, 409,
	411, 348, 407, 0, 352, 355, 441, 425, 374, 375,
	0, 0, 0, 0, 0, 0, 0, 393, 397, 414,
	387, 0, 0, 0, 0, 0, 0, 0, 0, 372,
	0, 404, 0, 0, 0, 356, 353, 0, 0, 391,
	0, 0, 0, 358, 0, 373, 415, 0, 347, 109,
	418, 424, 388, 212, 428, 386, 385, 431, 146, 0,
	163, 111, 119, 83, 90, 0, 110, 137, 151, 155,
	422, 370, 378, 99, 376, 153, 141, 176, 403, 142,
	152, 123, 168, 147, 175, 184, 185, 165, 183, 192,
	84, 164, 174, 97, 156, 86, 172, 162, 129, 115,
	116, 85, 0, 439, 150, 102, 107, 101, 138, 169,
	170, 100, 195, 91, 182, 88, 92, 181, 136, 167,
	173, 130, 127, 87, 171, 128, 126, 118, 105, 112,
	144, 125, 145, 113, 133, 132, 134, 0, 351, 0,
	161, 178, 196, 94, 366, 157, 166, 186, 187, 188,
	189, 190, 191, 0, 0, 95, 108, 104, 143, 135,
	93, 114, 158, 117, 124, 149, 194, 140, 154, 98,
	177, 159, 362, 365, 360, 361, 399, 400, 436, 437,
	438, 416, 357, 0, 363, 364, 0, 420, 426, 427,
	402, 82, 89, 121, 193, 148, 106, 179, 430, 419,
	0, 390, 433, 368, 382, 442, 383, 384, 412, 354,
	398, 139, 380, 0, 371, 349, 377, 350, 369, 392,
	103, 395, 367, 421, 401, 432, 120, 440, 122, 406,
	0, 160, 131, 0, 0, 394, 423, 396, 417, 389,
	413, 359, 405, 434, 381, 410, 435, 0, 0, 0,
	80, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	0, 408, 429, 379, 409, 411, 348, 407, 0, 352,
	355, 441, 425, 374, 375, 0, 0, 0, 0, 0,
	0, 0, 393, 397, 414, 387, 0, 0, 0, 0,
	0, 0, 1144, 0, 372, 0, 404, 0, 0, 0,
	356, 353, 0, 0, 391, 0, 0, 0, 358, 0,
	373, 415, 0, 347, 109, 418, 424, 388, 212, 428,
	386, 385, 431, 146, 0, 163, 111, 119, 83, 90,
	0, 110, 137, 151, 155, 422, 370, 378, 99, 376,
	153, 141, 176, 403, 142, 152, 123, 168, 147, 175,
	184, 185, 165, 183, 192, 84, 164, 174, 97, 156,
	86, 172, 162, 129, 115, 116, 85, 0, 439, 150,
	102, 107, 101, 138, 169, 170, 100, 195, 91, 182,
	88, 92, 181, 136, 167, 173, 130, 127, 87, 171,
	128, 126, 118, 105, 112, 144, 125, 145, 113, 133,
	132, 134, 0, 351, 0, 161, 178, 196, 94, 366,
	157, 166, 186, 187, 188, 189, 190, 191, 0, 0,
	95, 108, 104, 143, 135, 93, 114, 158, 117, 124,
	149, 194, 140, 154, 98, 177, 159, 362, 365, 360,
	361, 399, 400, 436, 437, 438, 416, 357, 0, 363,
	364, 0, 420, 426, 427, 402, 82, 89, 121, 193,
	148, 106, 179, 430, 419, 0, 390, 433, 368, 382,
	442, 383, 384, 412, 354, 398, 139, 380, 0, 371,
	349, 377, 350, 369, 392, 103, 395, 367, 421, 401,
	432, 120, 440, 122, 406, 0, 160, 131, 0, 0,
	394, 423, 396, 417, 389, 413, 359, 405, 434, 381,
	410, 435, 0, 0, 0, 272, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 408, 429, 379, 409,
	411, 348, 407, 0, 352, 355, 441, 425, 374, 375,
	0, 0, 0, 0, 0, 0, 0, 393, 397, 414,
	387, 0, 0, 0, 0, 0, 0, 763, 0, 372,
	0, 404, 0, 0, 0, 356, 353, 0, 0, 391,
	0, 0, 0, 358, 0, 373, 415, 0, 347, 109,
	418, 424, 388, 212, 428, 386, 385, 431, 146, 0,
	163, 111, 119, 83, 90, 0, 110, 137, 151, 155,
	422, 370, 378, 99, 376, 153, 141, 176, 403, 142,
	152, 123, 168, 147, 175, 184, 185, 165, 183, 192,
	84, 164, 174, 97, 156, 86, 172, 162, 129, 115,
	116, 85, 0, 439, 150, 102, 107, 101, 138, 169,
	170, 100, 195, 91, 182, 88, 92, 181, 136, 167,
	173, 130, 127, 87, 171, 128, 126, 118, 105, 112,
	144, 125, 145, 113, 133, 132, 134, 0, 351, 0,
	161, 178, 196, 94, 366, 157, 166, 186, 187, 188,
	189, 190, 191, 0, 0, 95, 108, 104, 143, 135,
	93, 114, 158, 117, 124, 149, 194, 140, 154, 98,
	177, 159, 362, 365, 360, 361, 399, 400, 436, 437,
	438, 416, 357, 0, 363, 364, 0, 420, 426, 427,
	402, 82, 89, 121, 193, 148, 106, 179, 430, 419,
	0, 390, 433, 368, 382, 442, 383, 384, 412, 354,
	398, 139, 380, 0, 371, 349, 377, 350, 369, 392,
	103, 395, 367, 421, 401, 432, 120, 440, 122, 406,
	0, 160, 131, 0, 0, 394, 423, 396, 417, 389,
	413, 359, 405, 434, 381, 410, 435, 0, 0, 0,
	80, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	0, 408, 429, 379, 409, 411, 348, 407, 0, 352,
	355, 441, 425, 374, 375, 0, 0, 0, 0, 0,
	0, 0, 393, 397, 414, 387, 0, 0, 0, 0,
	0, 0, 0, 0, 372, 0, 404, 0, 0, 0,
	356, 353, 0, 0, 391, 0, 0, 0, 358, 0,
	373, 415, 0, 347, 109, 418, 424, 388, 212, 428,
	386, 385, 431, 146, 0, 163, 111, 119, 83, 90,
	0, 110, 137, 151, 155, 422, 370, 378, 99, 376,
	153, 141, 176, 403, 142, 152, 123, 168, 147, 175,
	184, 185, 165, 183, 192, 84, 164, 174, 97, 156,
	86, 172, 162, 129, 115, 116, 85, 0, 439, 150,
	102, 107, 101, 138, 169, 170, 100, 195, 91, 182,
	88, 92, 181, 136, 167, 173, 130, 127, 87, 171,
	128, 126, 118, 105, 112, 144, 125, 145, 113, 133,
	132, 134, 0, 351, 0, 161, 178, 196, 94, 366,
	157, 166, 186, 187, 188, 189, 190, 191, 0, 0,
	95, 108, 104, 143, 135, 93, 114, 158, 117, 124,
	149, 194, 140, 154, 98, 177, 159, 362, 365, 360,
	361, 399, 400, 436, 437, 438, 416, 357, 0, 363,
	364, 0, 420, 426, 427, 402, 82, 89, 121, 193,
	148, 106, 179, 430, 419, 0, 390, 433, 368, 382,
	442, 383, 384, 412, 354, 398, 139, 380, 0, 371,
	349, 377, 350, 369, 392, 103, 395, 367, 421, 401,
	432, 120, 440, 122, 406, 0, 160, 131, 0, 0,
	394, 423, 396, 417, 389, 413, 359, 405, 434, 381,
	410, 435, 0, 0, 0, 272, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 408, 429, 379, 409,
	411, 348, 407, 0, 352, 355, 441, 425, 374, 375,
	0, 0, 0, 0, 0, 0, 0, 393, 397, 414,
	387, 0, 0, 0, 0, 0, 0, 0, 0, 372,
	0, 404, 0, 0, 0, 356, 353, 0, 0, 391,
	0, 0, 0, 358, 0, 373, 415, 0, 347, 109,
	418, 424, 388, 212, 428, 386, 385, 431, 146, 0,
	163, 111, 119, 83, 90, 0, 110, 137, 151, 155,
	422, 370, 378, 99, 376, 153, 141, 176, 403, 142,
	152, 123, 168, 147, 175, 184, 185, 165, 183, 192,
	84, 164, 174, 97, 156, 86, 172, 162, 129, 115,
	116, 85, 0, 439, 150, 102, 107, 101, 138, 169,
	170, 100, 195, 91, 182, 88, 92, 181, 136, 167,
	173, 130, 127, 87, 171, 128, 126, 118, 105, 112,
	144, 125, 145, 113, 133, 132, 134, 0, 351, 0,
	161, 178, 196, 94, 366, 157, 166, 186, 187, 188,
	189, 190, 191, 0, 0, 95, 108, 104, 143, 135,
	93, 114, 158, 117, 124, 149, 194, 140, 154, 98,
	177, 159, 362, 365, 360, 361, 399, 400, 436, 437,
	438, 416, 357, 0, 363, 364, 0, 420, 426, 427,
	402, 82, 89, 121, 193, 148, 106, 179, 430, 419,
	0, 390, 433, 368, 382, 442, 383, 384, 412, 354,
	398, 139, 380, 0, 371, 349, 377, 350, 369, 392,
	103, 395, 367, 421, 401, 432, 120, 440, 122, 406,
	0, 160, 131, 0, 0, 394, 423, 396, 417, 389,
	413, 359, 405, 434, 381, 410, 435, 0, 0, 0,
	80, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	0, 408, 429, 379, 409, 411, 348, 407, 0, 352,
	355, 441, 425, 374, 375, 0, 0, 0, 0, 0,
	0, 0, 393, 397, 414, 387, 0, 0, 0, 0,
	0, 0, 0, 0, 372, 0, 404, 0, 0, 0,
	356, 353, 0, 0, 391, 0, 0, 0, 358, 0,
	373, 415, 0, 347, 109, 418, 424, 388, 212, 428,
	386, 385, 431, 146, 0, 163, 111, 119, 83, 90,
	0, 110, 137, 151, 155, 422, 370, 378, 99, 376,
	153, 141, 176, 403, 142, 152, 123, 168, 147, 175,
	184, 185, 165, 183, 192, 84, 164, 174, 97, 156,
	86, 172, 162, 129, 115, 116, 85, 0, 439, 150,
	102, 107, 101, 138, 169, 170, 100, 195, 91, 182,
	88, 345, 181, 136, 167, 173, 130, 127, 87, 171,
	128, 126, 118, 105, 112, 144, 125, 145, 113, 133,
	132, 134, 0, 351, 0, 161, 178, 196, 94, 366,
	157, 166, 186, 187, 188, 189, 190, 191, 0, 0,
	95, 108, 104, 143, 346, 344, 114, 158, 117, 124,
	149, 194, 140, 154, 98, 177, 159, 362, 365, 360,
	361, 399, 400, 436, 437, 438, 416, 357, 0, 363,
	364, 0, 420, 426, 427, 402, 82, 89, 121, 193,
	148, 106, 179, 430, 419, 0, 390, 433, 368, 382,
	442, 383, 384, 412, 354, 398, 139, 380, 0, 371,
	349, 377, 350, 369, 392, 103, 395, 367, 421, 401,
	432, 120, 440, 122, 406, 0, 160, 131, 0, 0,
	394, 423, 396, 417, 389, 413, 359, 405, 434, 381,
	410, 435, 0, 0, 0, 210, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 408, 429, 379, 409,
	411, 348, 407, 0, 352, 355, 441, 425, 374, 375,
	0, 0, 0, 0, 0, 0, 0, 393, 397, 414,
	387, 0, 0, 0, 0, 0, 0, 0, 0, 372,
	0, 404, 0, 0, 0, 356, 353, 0, 0, 391,
	0, 0, 0, 358, 0, 373, 415, 0, 347, 109,
	418, 424, 388, 212, 428, 386, 385, 431, 146, 0,
	163, 111, 119, 83, 90, 0, 110, 137, 151, 155,
	422, 370, 378, 99, 376, 153, 141, 176, 403, 142,
	152, 123, 168, 147, 175, 184, 185, 165, 183, 192,
	84, 164, 174, 97, 156, 86, 172, 162, 129, 115,
	116, 85, 0, 439, 150, 102, 107, 101, 138, 169,
	170, 100, 195, 91, 182, 88, 92, 181, 136, 167,
	173, 130, 127, 87, 171, 128, 126, 118, 105, 112,
	144, 125, 145, 113, 133, 132, 134, 0, 351, 0,
	161, 178, 196, 94, 366, 157, 166, 186, 187, 188,
	189, 190, 191, 0, 0, 95, 108, 104, 143, 135,
	93, 114, 158, 117, 124, 149, 194, 140, 154, 98,
	177, 159, 362, 365, 360, 361, 399, 400, 436, 437,
	438, 416, 357, 0, 363, 364, 0, 420, 426, 427,
	402, 82, 89, 121, 193, 148, 106, 179, 430, 419,
	0, 390, 433, 368, 382, 442, 383, 384, 412, 354,
	398, 139, 380, 0, 371, 349, 377, 350, 369, 392,
	103, 395, 367, 421, 401, 432, 120, 440, 122, 406,
	0, 160, 131, 0, 0, 394, 423, 396, 417, 389,
	413, 359, 405, 434, 381, 410, 435, 0, 0, 0,
	80, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	0, 408, 429, 379, 409, 411, 348, 407, 0, 352,
	355, 441, 425, 374, 375, 0, 0, 0, 0, 0,
	0, 0, 393, 397, 414, 387, 0, 0, 0, 0,
	0, 0, 0, 0, 372, 0, 404, 0, 0, 0,
	356, 353, 0, 0, 391, 0, 0, 0, 358, 0,
	373, 415, 0, 347, 109, 418, 424, 388, 212, 428,
	386, 385, 431, 146, 0, 163, 111, 119, 83, 90,
	0, 110, 137, 151, 155, 422, 370, 378, 99, 376,
	153, 141, 176, 403, 142, 152, 123, 168, 147, 175,
	184, 185, 165, 183, 192, 84, 164, 628, 97, 156,
	86, 172, 162, 129, 115, 116, 85, 0, 439, 150,
	102, 107, 101, 138, 169, 170, 100, 195, 91, 182,
	88, 345, 181, 136, 167, 173, 130, 127, 87, 171,
	128, 126, 118, 105, 112, 144, 125, 145, 113, 133,
	132, 134, 0, 351, 0, 161, 178, 196, 94, 366,
	157, 166, 186, 187, 188, 189, 190, 191, 0, 0,
	95, 108, 104, 143, 346, 344, 114, 158, 117, 124,
	149, 194, 140, 154, 98, 177, 159, 362, 365, 360,
	361, 399, 400, 436, 437, 438, 416, 357, 0, 363,
	364, 0, 420, 426, 427, 402, 82, 89, 121, 193,
	148, 106, 179, 430, 419, 0, 390, 433, 368, 382,
	442, 383, 384, 412, 354, 398, 139, 380, 0, 371,
	349, 377, 350, 369, 392, 103, 395, 367, 421, 401,
	432, 120, 440, 122, 406, 0, 160, 131, 0, 0,
	394, 423, 396, 417, 389, 413, 359, 405, 434, 381,
	410, 435, 0, 0, 0, 80, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 408, 429, 379, 409,
	411, 348, 407, 0, 352, 355, 441, 425, 374, 375,
	0, 0, 0, 0, 0, 0, 0, 393, 397, 414,
	387, 0, 0, 0, 0, 0, 0, 0, 0, 372,
	0, 404, 0, 0, 0, 356, 353, 0, 0, 391,
	0, 0, 0, 358, 0, 373, 415, 0, 347, 109,
	418, 424, 388, 212, 428, 386, 385, 431, 146, 0,
	163, 111, 119, 83, 90, 0, 110, 137, 151, 155,
	422, 370, 378, 99, 376, 153, 141, 176, 403, 142,
	152, 123, 168, 147, 175, 184, 185, 165, 183, 192,
	84, 164, 336, 97, 156, 86, 172, 162, 129, 115,
	116, 85, 0, 439, 150, 102, 107, 101, 138, 169,
	170, 100, 195, 91, 182, 88, 345, 181, 136, 167,
	173, 130, 127, 87, 171, 128, 126, 118, 105, 112,
	144, 125, 145, 113, 133, 132, 134, 0, 351, 0,
	161, 178, 196, 94, 366, 157, 166, 186, 187, 188,
	189, 190, 191, 0, 0, 95, 108, 104, 143, 346,
	344, 339, 338, 117, 124, 149, 194, 140, 154, 98,
	177, 159, 362, 365, 360, 361, 399, 400, 436, 437,
	438, 416, 357, 0, 363, 364, 0, 420, 426, 427,
	402, 82, 89, 121, 193, 148, 106, 179, 139, 0,
	0, 0, 0, 274, 0, 0, 0, 103, 0, 271,
	0, 0, 0, 120, 314, 122, 0, 0, 160, 131,
	0, 0, 0, 0, 305, 306, 0, 0, 0, 0,
	0, 0, 868, 0, 54, 0, 0, 272, 293, 292,
	295, 296, 297, 298, 0, 0, 96, 294, 299, 300,
	301, 869, 0, 0, 269, 286, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 284, 0,
	0, 0, 0, 327, 0, 285, 0, 0, 280, 281,
	282, 287, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 212, 0, 0, 325, 0,
	146, 0, 163, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 0, 0, 0, 99, 0, 153, 141, 176,
	0, 142, 152, 123, 168, 147, 175, 184, 185, 165,
	183, 192, 84, 164, 174, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 0, 180, 150, 102, 107, 101,
	138, 169, 170, 100, 195, 91, 182, 88, 92, 181,
	136, 167, 173, 130, 127, 87, 171, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	0, 0, 161, 178, 196, 94, 0, 157, 166, 186,
	187, 188, 189, 190, 191, 0, 0, 95, 108, 104,
	143, 135, 93, 114, 158, 117, 124, 149, 194, 140,
	154, 98, 177, 159, 315, 326, 321, 322, 319, 320,
	318, 317, 316, 328, 307, 308, 309, 310, 312, 0,
	323, 324, 311, 82, 89, 121, 193, 148, 106, 179,
	139, 0, 0, 799, 0, 274, 0, 0, 0, 103,
	0, 271, 0, 0, 0, 120, 314, 122, 0, 0,
	160, 131, 0, 0, 0, 0, 305, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 54, 0, 0, 272,
	293, 292, 295, 296, 297, 298, 0, 0, 96, 294,
	299, 300, 301, 0, 0, 0, 269, 286, 0, 313,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	284, 265, 0, 0, 0, 327, 0, 285, 0, 0,
	280, 281, 282, 287, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 212, 0, 0,
	325, 0, 146, 0, 163, 111, 119, 83, 90, 0,
	110, 137, 151, 155, 0, 0, 0, 99, 0, 153,
	141, 176, 0, 142, 152, 123, 168, 147, 175, 184,
	185, 165, 183, 192, 84, 164, 174, 97, 156, 86,
	172, 162, 129, 115, 116, 85, 0, 180, 150, 102,
	107, 101, 138, 169, 170, 100, 195, 91, 182, 88,
	92, 181, 136, 167, 173, 130, 127, 87, 171, 128,
	126, 118, 105, 112, 144, 125, 145, 113, 133, 132,
	134, 0, 0, 0, 161, 178, 196, 94, 0, 157,
	166, 186, 187, 188, 189, 190, 191, 0, 0, 95,
	108, 104, 143, 135, 93, 114, 158, 117, 124, 149,
	194, 140, 154, 98, 177, 159, 315, 326, 321, 322,
	319, 320, 318, 317, 316, 328, 307, 308, 309, 310,
	312, 0, 323, 324, 311, 82, 89, 121, 193, 148,
	106, 179, 139, 0, 0, 0, 0, 274, 0, 0,
	0, 103, 0, 271, 0, 0, 0, 120, 314, 122,
	0, 0, 160, 131, 0, 0, 0, 0, 305, 306,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	504, 272, 293, 292, 295, 296, 297, 298, 0, 0,
	96, 294, 299, 300, 301, 0, 0, 0, 269, 286,
	0, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 284, 0, 0, 0, 0, 327, 0, 285,
	0, 0, 280, 281, 282, 287, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 212,
	0, 0, 325, 0, 146, 0, 163, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 0, 0, 0, 99,
	0, 153, 141, 176, 0, 142, 152, 123, 168, 147,
	175, 184, 185, 165, 183, 192, 84, 164, 174, 97,
	156, 86, 172, 162, 129, 115, 116, 85, 0, 180,
	150, 102, 107, 101, 138, 169, 170, 100, 195, 91,
	182, 88, 92, 181, 136, 167, 173, 130, 127, 87,
	171, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 0, 0, 161, 178, 196, 94,
	0, 157, 166, 186, 187, 188, 189, 190, 191, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 158, 117,
	124, 149, 194, 140, 154, 98, 177, 159, 315, 326,
	321, 322, 319, 320, 318, 317, 316, 328, 307, 308,
	309, 310, 312, 0, 323, 324, 311, 82, 89, 121,
	193, 148, 106, 179, 139, 0, 0, 0, 0, 274,
	0, 0, 0, 103, 0, 271, 0, 0, 0, 120,
	314, 122, 0, 0, 160, 131, 0, 0, 0, 0,
	305, 306, 0, 0, 0, 0, 0, 0, 0, 0,
	54, 0, 0, 272, 293, 292, 295, 296, 297, 298,
	0, 0, 96, 294, 299, 300, 301, 0, 0, 0,
	269, 286, 0, 313, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 284, 265, 0, 0, 0, 327,
	0, 285, 0, 0, 280, 281, 282, 287, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 212, 0, 0, 325, 0, 146, 0, 163, 111,
	119, 83, 90, 0, 110, 137, 151, 155, 0, 0,
	0, 99, 0, 153, 141, 176, 0, 142, 152, 123,
	168, 147, 175, 184, 185, 165, 183, 192, 84, 164,
	174, 97, 156, 86, 172, 162, 129, 115, 116, 85,
	0, 180, 150, 102, 107, 101, 138, 169, 170, 100,
	195, 91, 182, 88, 92, 181, 136, 167, 173, 130,
	127, 87, 171, 128, 126, 118, 105, 112, 144, 125,
	145, 113, 133, 132, 134, 0, 0, 0, 161, 178,
	196, 94, 0, 157, 166, 186, 187, 188, 189, 190,
	191, 0, 0, 95, 108, 104, 143, 135, 93, 114,
	158, 117, 124, 149, 194, 140, 154, 98, 177, 159,
	315, 326, 321, 322, 319, 320, 318, 317, 316, 328,
	307, 308, 309, 310, 312, 0, 323, 324, 311, 82,
	89, 121, 193, 148, 106, 179, 139, 0, 0, 0,
	0, 274, 0, 0, 0, 103, 0, 271, 0, 0,
	0, 120, 314, 122, 0, 0, 160, 131, 0, 0,
	0, 0, 305, 306, 0, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 0, 272, 293, 814, 295, 296,
	297, 298, 0, 0, 96, 294, 299, 300, 301, 0,
	0, 0, 269, 286, 0, 313, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 284, 265, 0, 0,
	0, 327, 0, 285, 0, 0, 280, 281, 282, 287,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 0, 0, 212, 0, 0, 325, 0, 146, 0,
	163, 111, 119, 83, 90, 0, 110, 137, 151, 155,
	0, 0, 0, 99, 0, 153, 141, 176, 0, 142,
	152, 123, 168, 147, 175, 184, 185, 165, 183, 192,
	84, 164, 174, 97, 156, 86, 172, 162, 129, 115,
	116, 85, 0, 180, 150, 102, 107, 101, 138, 169,
	170, 100, 195, 91, 182, 88, 92, 181, 136, 167,
	173, 130, 127, 87, 171, 128, 126, 118, 105, 112,
	144, 125, 145, 113, 133, 132, 134, 0, 0, 0,
	161, 178, 196, 94, 0, 157, 166, 186, 187, 188,
	189, 190, 191, 0, 0, 95, 108, 104, 143, 135,
	93, 114, 158, 117, 124, 149, 194, 140, 154, 98,
	177, 159, 315, 326, 321, 322, 319, 320, 318, 317,
	316, 328, 307, 308, 309, 310, 312, 0, 323, 324,
	311, 82, 89, 121, 193, 148, 106, 179, 139, 0,
	0, 0, 0, 274, 0, 0, 0, 103, 0, 271,
	0, 0, 0, 120, 314, 122, 0, 0, 160, 131,
	0, 0, 0, 0, 305, 306, 0, 0, 0, 0,
	0, 0, 0, 0, 54, 0, 0, 272, 293, 811,
	295, 296, 297, 298, 0, 0, 96, 294, 299, 300,
	301, 0, 0, 0, 269, 286, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 284, 265,
	0, 0, 0, 327, 0, 285, 0, 0, 280, 281,
	282, 287, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 212, 0, 0, 325, 0,
	146, 0, 163, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 0, 0, 0, 99, 0, 153, 141, 176,
	0, 142, 152, 123, 168, 147, 175, 184, 185, 165,
	183, 192, 84, 164, 174, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 0, 180, 150, 102, 107, 101,
	138, 169, 170, 100, 195, 91, 182, 88, 92, 181,
	136, 167, 173, 130, 127, 87, 171, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	0, 0, 161, 178, 196, 94, 0, 157, 166, 186,
	187, 188, 189, 190, 191, 0, 0, 95, 108, 104,
	143, 135, 93, 114, 158, 117, 124, 149, 194, 140,
	154, 98, 177, 159, 315, 326, 321, 322, 319, 320,
	318, 317, 316, 328, 307, 308, 309, 310, 312, 24,
	323, 324, 311, 82, 89, 121, 193, 148, 106, 179,
	0, 139, 0, 0, 0, 0, 274, 0, 0, 0,
	103, 0, 271, 0, 0, 0, 120, 314, 122, 0,
	0, 160, 131, 0, 0, 0, 0, 305, 306, 0,
	0, 0, 0, 0, 0, 0, 0, 54, 0, 0,
	272, 293, 292, 295, 296, 297, 298, 0, 0, 96,
	294, 299, 300, 301, 0, 0, 0, 269, 286, 0,
	313, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 284, 0, 0, 0, 0, 327, 0, 285, 0,
	0, 280, 281, 282, 287, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 212, 0,
	0, 325, 0, 146, 0, 163, 111, 119, 83, 90,
	0, 110, 137, 151, 155, 0, 0, 0, 99, 0,
	153, 141, 176, 0, 142, 152, 123, 168, 147, 175,
	184, 185, 165, 183, 192, 84, 164, 174, 97, 156,
	86, 172, 162, 129, 115, 116, 85, 0, 180, 150,
	102, 107, 101, 138, 169, 170, 100, 195, 91, 182,
	88, 92, 181, 136, 167, 173, 130, 127, 87, 171,
	128, 126, 118, 105, 112, 144, 125, 145, 113, 133,
	132, 134, 0, 0, 0, 161, 178, 196, 94, 0,
	157, 166, 186, 187, 188, 189, 190, 191, 0, 0,
	95, 108, 104, 143, 135, 93, 114, 158, 117, 124,
	149, 194, 140, 154, 98, 177, 159, 315, 326, 321,
	322, 319, 320, 318, 317, 316, 328, 307, 308, 309,
	310, 312, 0, 323, 324, 311, 82, 89, 121, 193,
	148, 106, 179, 139, 0, 0, 0, 0, 274, 0,
	0, 0, 103, 0, 271, 0, 0, 0, 120, 314,
	122, 0, 0, 160, 131, 0, 0, 0, 0, 305,
	306, 0, 0, 0, 0, 0, 0, 0, 0, 54,
	0, 0, 272, 293, 292, 295, 296, 297, 298, 0,
	0, 96, 294, 299, 300, 301, 0, 0, 0, 269,
	286, 0, 313, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 284, 0, 0, 0, 0, 327, 0,
	285, 0, 0, 280, 281, 282, 287, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	212, 0, 0, 325, 0, 146, 0, 163, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 0, 0, 0,
	99, 0, 153, 141, 176, 0, 142, 152, 123, 168,
	147, 175, 184, 185, 165, 183, 192, 84, 164, 174,
	97, 156, 86, 172, 162, 129, 115, 116, 85, 0,
	180, 150, 102, 107, 101, 138, 169, 170, 100, 195,
	91, 182, 88, 92, 181, 136, 167, 173, 130, 127,
	87, 171, 128, 126, 118, 105, 112, 144, 125, 145,
	113, 133, 132, 134, 0, 0, 0, 161, 178, 196,
	94, 0, 157, 166, 186, 187, 188, 189, 190, 191,
	0, 0, 95, 108, 104, 143, 135, 93, 114, 158,
	117, 124, 149, 194, 140, 154, 98, 177, 159, 315,
	326, 321, 322, 319, 320, 318, 317, 316, 328, 307,
	308, 309, 310, 312, 0, 323, 324, 311, 82, 89,
	121, 193, 148, 106, 179, 139, 0, 0, 0, 0,
	0, 0, 0, 0, 103, 0, 0, 0, 0, 0,
	120, 314, 122, 0, 0, 160, 131, 0, 0, 0,
	0, 305, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 54, 0, 0, 272, 293, 292, 295, 296, 297,
	298, 0, 0, 96, 294, 299, 300, 301, 0, 0,
	0, 0, 286, 0, 313, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 284, 0, 0, 0, 0,
	327, 0, 285, 0, 0, 280, 281, 282, 287, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 212, 0, 0, 325, 0, 146, 0, 163,
	111, 119, 83, 90, 0, 110, 137, 151, 155, 0,
	0, 0, 99, 0, 153, 141, 176, 1438, 142, 152,
	123, 168, 147, 175, 184, 185, 165, 183, 192, 84,
	164, 174, 97, 156, 86, 172, 162, 129, 115, 116,
	85, 0, 180, 150, 102, 107, 101, 138, 169, 170,
	100, 195, 91, 182, 88, 92, 181, 136, 167, 173,
	130, 127, 87, 171, 128, 126, 118, 105, 112, 144,
	125, 145, 113, 133, 132, 134, 0, 0, 0, 161,
	178, 196, 94, 0, 157, 166, 186, 187, 188, 189,
	190, 191, 0, 0, 95, 108, 104, 143, 135, 93,
	114, 158, 117, 124, 149, 194, 140, 154, 98, 177,
	159, 315, 326, 321, 322, 319, 320, 318, 317, 316,
	328, 307, 308, 309, 310, 312, 0, 323, 324, 311,
	82, 89, 121, 193, 148, 106, 179, 139, 0, 0,
	0, 0, 0, 0, 0, 0, 103, 0, 0, 0,
	0, 0, 120, 314, 122, 0, 0, 160, 131, 0,
	0, 0, 0, 305, 306, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 504, 272, 293, 292, 295,
	296, 297, 298, 0, 0, 96, 294, 299, 300, 301,
	0, 0, 0, 0, 286, 0, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 284, 0, 0,
	0, 0, 327, 0, 285, 0, 0, 280, 281, 282,
	287, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 212, 0, 0, 325, 0, 146,
	0, 163, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 0, 0, 0, 99, 0, 153, 141, 176, 0,
	142, 152, 123, 168, 147, 175, 184, 185, 165, 183,
	192, 84, 164, 174, 97, 156, 86, 172, 162, 129,
	115, 116, 85, 0, 180, 150, 102, 107, 101, 138,
	169, 170, 100, 195, 91, 182, 88, 92, 181, 136,
	167, 173, 130, 127, 87, 171, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 0,
	0, 161, 178, 196, 94, 0, 157, 166, 186, 187,
	188, 189, 190, 191, 0, 0, 95, 108, 104, 143,
	135, 93, 114, 158, 117, 124, 149, 194, 140, 154,
	98, 177, 159, 315, 326, 321, 322, 319, 320, 318,
	317, 316, 328, 307, 308, 309, 310, 312, 0, 323,
	324, 311, 82, 89, 121, 193, 148, 106, 179, 139,
	0, 0, 0, 0, 0, 0, 0, 0, 103, 0,
	0, 0, 0, 0, 120, 314, 122, 0, 0, 160,
	131, 0, 0, 0, 0, 305, 306, 0, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 0, 272, 293,
	292, 295, 296, 297, 298, 0, 0, 96, 294, 299,
	300, 301, 0, 0, 0, 0, 286, 0, 313, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 284,
	0, 0, 0, 0, 327, 0, 285, 0, 0, 280,
	281, 282, 287, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 212, 0, 0, 325,
	0, 146, 0, 163, 111, 119, 83, 90, 0, 110,
	137, 151, 155, 0, 0, 0, 99, 0, 153, 141,
	176, 0, 142, 152, 123, 168, 147, 175, 184, 185,
	165, 183, 192, 84, 164, 174, 97, 156, 86, 172,
	162, 129, 115, 116, 85, 0, 180, 150, 102, 107,
	101, 138, 169, 170, 100, 195, 91, 182, 88, 92,
	181, 136, 167, 173, 130, 127, 87, 171, 128, 126,
	118, 105, 112, 144, 125, 145, 113, 133, 132, 134,
	0, 0, 0, 161, 178, 196, 94, 0, 157, 166,
	186, 187, 188, 189, 190, 191, 0, 0, 95, 108,
	104, 143, 135, 93, 114, 158, 117, 124, 149, 194,
	140, 154, 98, 177, 159, 315, 326, 321, 322, 319,
	320, 318, 317, 316, 328, 307, 308, 309, 310, 312,
	0, 323, 324, 311, 82, 89, 121, 193, 148, 106,
	179, 139, 0, 0, 0, 0, 0, 0, 0, 0,
	103, 0, 0, 0, 0, 0, 120, 0, 122, 0,
	0, 160, 131, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	80, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 538, 537, 547, 548,
	540, 541, 542, 543, 544, 545, 546, 539, 0, 0,
	549, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 212, 0,
	0, 0, 0, 146, 0, 163, 111, 119, 83, 90,
	0, 110, 137, 151, 155, 0, 0, 0, 99, 0,
	153, 141, 176, 0, 142, 152, 123, 168, 147, 175,
	184, 185, 165, 183, 192, 84, 164, 174, 97, 156,
	86, 172, 162, 129, 115, 116, 85, 0, 180, 150,
	102, 107, 101, 138, 169, 170, 100, 195, 91, 182,
	88, 92, 181, 136, 167, 173, 130, 127, 87, 171,
	128, 126, 118, 105, 112, 144, 125, 145, 113, 133,
	132, 134, 0, 0, 0, 161, 178, 196, 94, 0,
	157, 166, 186, 187, 188, 189, 190, 191, 0, 0,
	95, 108, 104, 143, 135, 93, 114, 158, 117, 124,
	149, 194, 140, 154, 98, 177, 159, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 0, 82, 89, 121, 193,
	148, 106, 179, 103, 0, 0, 0, 0, 0, 120,
	0, 122, 0, 0, 160, 131, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 80, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 0, 0, 0, 0, 0, 74, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 76, 77,
	0, 73, 0, 0, 0, 78, 146, 0, 163, 111,
	119, 83, 90, 0, 110, 137, 151, 155, 0, 0,
	0, 99, 0, 153, 141, 176, 0, 142, 152, 123,
	168, 147, 175, 184, 185, 165, 183, 192, 84, 164,
	174, 97, 156, 86, 172, 162, 129, 115, 116, 85,
	0, 180, 150, 102, 107, 101, 138, 169, 170, 100,
	195, 91, 182, 88, 92, 181, 136, 167, 173, 130,
	127, 87, 171, 128, 126, 118, 105, 112, 144, 125,
	145, 113, 133, 132, 134, 0, 0, 0, 161, 178,
	196, 94, 0, 157, 166, 186, 187, 188, 189, 190,
	191, 0, 0, 95, 108, 104, 143, 135, 93, 114,
	158, 117, 124, 149, 194, 140, 154, 98, 177, 159,
	0, 75, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	89, 121, 193, 148, 106, 179, 139, 0, 0, 0,
	855, 0, 0, 0, 0, 103, 0, 0, 0, 0,
	0, 120, 0, 122, 0, 0, 160, 131, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 210, 0, 857, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 0, 0, 212, 0, 0, 0, 0, 146, 0,
	163, 111, 119, 83, 90, 0, 110, 137, 151, 155,
	0, 0, 0, 99, 0, 153, 141, 176, 0, 142,
	152, 123, 168, 147, 175, 184, 185, 165, 183, 192,
	84, 164, 174, 97, 156, 86, 172, 162, 129, 115,
	116, 85, 0, 180, 150, 102, 107, 101, 138, 169,
	170, 100, 195, 91, 182, 88, 92, 181, 136, 167,
	173, 130, 127, 87, 171, 128, 126, 118, 105, 112,
	144, 125, 145, 113, 133, 132, 134, 0, 0, 0,
	161, 178, 196, 94, 0, 157, 166, 186, 187, 188,
	189, 190, 191, 0, 0, 95, 108, 104, 143, 135,
	93, 114, 158, 117, 124, 149, 194, 140, 154, 98,
	177, 159, 0, 0, 0, 0, 0, 24, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	0, 82, 89, 121, 193, 148, 106, 179, 103, 0,
	0, 0, 0, 0, 120, 0, 122, 0, 0, 160,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 0, 80, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 212, 0, 0, 0,
	0, 146, 0, 163, 111, 119, 83, 90, 0, 110,
	137, 151, 155, 0, 0, 0, 99, 0, 153, 141,
	176, 0, 142, 152, 123, 168, 147, 175, 184, 185,
	165, 183, 192, 84, 164, 174, 97, 156, 86, 172,
	162, 129, 115, 116, 85, 0, 180, 150, 102, 107,
	101, 138, 169, 170, 100, 195, 91, 182, 88, 92,
	181, 136, 167, 173, 130, 127, 87, 171, 128, 126,
	118, 105, 112, 144, 125, 145, 113, 133, 132, 134,
	0, 0, 0, 161, 178, 196, 94, 0, 157, 166,
	186, 187, 188, 189, 190, 191, 0, 0, 95, 108,
	104, 143, 135, 93, 114, 158, 117, 124, 149, 194,
	140, 154, 98, 177, 159, 0, 0, 0, 0, 0,
	24, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 82, 89, 121, 193, 148, 106,
	179, 103, 0, 0, 0, 0, 0, 120, 0, 122,
	0, 0, 160, 131, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 210, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 212,
	0, 0, 0, 0, 146, 0, 163, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 0, 0, 0, 99,
	0, 153, 141, 176, 0, 142, 152, 123, 168, 147,
	175, 184, 185, 165, 183, 192, 84, 164, 174, 97,
	156, 86, 172, 162, 129, 115, 116, 85, 0, 180,
	150, 102, 107, 101, 138, 169, 170, 100, 195, 91,
	182, 88, 92, 181, 136, 167, 173, 130, 127, 87,
	171, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 0, 0, 161, 178, 196, 94,
	0, 157, 166, 186, 187, 188, 189, 190, 191, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 158, 117,
	124, 149, 194, 140, 154, 98, 177, 159, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 89, 121,
	193, 148, 106, 179, 139, 0, 0, 0, 855, 0,
	0, 0, 0, 103, 0, 0, 0, 0, 0, 120,
	0, 122, 0, 0, 160, 131, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 210, 0, 857, 0, 0, 0, 0,
	0, 0, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 212, 0, 0, 0, 0, 146, 0, 163, 111,
	119, 83, 90, 0, 110, 137, 151, 155, 0, 0,
	0, 99, 0, 153, 141, 176, 0, 853, 152, 123,
	168, 147, 175, 184, 185, 165, 183, 192, 84, 164,
	174, 97, 156, 86, 172, 162, 129, 115, 116, 85,
	0, 180, 150, 102, 107, 101, 138, 169, 170, 100,
	195, 91, 182, 88, 92, 181, 136, 167, 173, 130,
	127, 87, 171, 128, 126, 118, 105, 112, 144, 125,
	145, 113, 133, 132, 134, 0, 0, 0, 161, 178,
	196, 94, 0, 157, 166, 186, 187, 188, 189, 190,
	191, 0, 0, 95, 108, 104, 143, 135, 93, 114,
	158, 117, 124, 149, 194, 140, 154, 98, 177, 159,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 0, 82,
	89, 121, 193, 148, 106, 179, 103, 0, 0, 0,
	0, 0, 120, 0, 122, 0, 0, 160, 131, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 80, 0, 0, 750,
	0, 0, 751, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 212, 0, 0, 0, 0, 146,
	0, 163, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 0, 0, 0, 99, 0, 153, 141, 176, 0,
	142, 152, 123, 168, 147, 175, 184, 185, 165, 183,
	192, 84, 164, 174, 97, 156, 86, 172, 162, 129,
	115, 116, 85, 0, 180, 150, 102, 107, 101, 138,
	169, 170, 100, 195, 91, 182, 88, 92, 181, 136,
	167, 173, 130, 127, 87, 171, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 0,
	0, 161, 178, 196, 94, 0, 157, 166, 186, 187,
	188, 189, 190, 191, 0, 0, 95, 108, 104, 143,
	135, 93, 114, 158, 117, 124, 149, 194, 140, 154,
	98, 177, 159, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 0, 82, 89, 121, 193, 148, 106, 179, 103,
	0, 637, 0, 0, 0, 120, 0, 122, 0, 0,
	160, 131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 80,
	0, 636, 0, 0, 0, 0, 0, 0, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 212, 0, 0,
	0, 0, 146, 0, 163, 111, 119, 83, 90, 0,
	110, 137, 151, 155, 0, 0, 0, 99, 0, 153,
	141, 176, 0, 142, 152, 123, 168, 147, 175, 184,
	185, 165, 183, 192, 84, 164, 174, 97, 156, 86,
	172, 162, 129, 115, 116, 85, 0, 180, 150, 102,
	107, 101, 138, 169, 170, 100, 195, 91, 182, 88,
	92, 181, 136, 167, 173, 130, 127, 87, 171, 128,
	126, 118, 105, 112, 144, 125, 145, 113, 133, 132,
	134, 0, 0, 0, 161, 178, 196, 94, 0, 157,
	166, 186, 187, 188, 189, 190, 191, 0, 0, 95,
	108, 104, 143, 135, 93, 114, 158, 117, 124, 149,
	194, 140, 154, 98, 177, 159, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 82, 89, 121, 193, 148,
	106, 179, 103, 0, 0, 0, 0, 0, 120, 0,
	122, 0, 0, 160, 131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 54,
	0, 0, 210, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	212, 0, 0, 0, 0, 146, 0, 163, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 0, 0, 0,
	99, 0, 153, 141, 176, 0, 142, 152, 123, 168,
	147, 175, 184, 185, 165, 183, 192, 84, 164, 174,
	97, 156, 86, 172, 162, 129, 115, 116, 85, 0,
	180, 150, 102, 107, 101, 138, 169, 170, 100, 195,
	91, 182, 88, 92, 181, 136, 167, 173, 130, 127,
	87, 171, 128, 126, 118, 105, 112, 144, 125, 145,
	113, 133, 132, 134, 0, 0, 0, 161, 178, 196,
	94, 0, 157, 166, 186, 187, 188, 189, 190, 191,
	0, 0, 95, 108, 104, 143, 135, 93, 114, 158,
	117, 124, 149, 194, 140, 154, 98, 177, 159, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 0, 82, 89,
	121, 193, 148, 106, 179, 103, 0, 0, 0, 0,
	0, 120, 0, 122, 0, 0, 160, 131, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 210, 0, 857, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 0, 0, 212, 0, 0, 0, 0, 146, 0,
	163, 111, 119, 83, 90, 0, 110, 137, 151, 155,
	0, 0, 0, 99, 0, 153, 141, 176, 0, 142,
	152, 123, 168, 147, 175, 184, 185, 165, 183, 192,
	84, 164, 174, 97, 156, 86, 172, 162, 129, 115,
	116, 85, 0, 180, 150, 102, 107, 101, 138, 169,
	170, 100, 195, 91, 182, 88, 92, 181, 136, 167,
	173, 130, 127, 87, 171, 128, 126, 118, 105, 112,
	144, 125, 145, 113, 133, 132, 134, 0, 0, 0,
	161, 178, 196, 94, 0, 157, 166, 186, 187, 188,
	189, 190, 191, 0, 0, 95, 108, 104, 143, 135,
	93, 114, 158, 117, 124, 149, 194, 140, 154, 98,
	177, 159, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	0, 82, 89, 121, 193, 148, 106, 179, 103, 0,
	0, 0, 0, 0, 120, 0, 122, 0, 0, 160,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 80, 0,
	528, 0, 0, 0, 0, 0, 0, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 212, 0, 0, 0,
	0, 146, 0, 163, 111, 119, 83, 90, 0, 110,
	137, 151, 155, 0, 0, 0, 99, 0, 153, 141,
	176, 0, 142, 152, 123, 168, 147, 175, 184, 185,
	165, 183, 192, 84, 164, 174, 97, 156, 86, 172,
	162, 129, 115, 116, 85, 0, 180, 150, 102, 107,
	101, 138, 169, 170, 100, 195, 91, 182, 88, 92,
	181, 136, 167, 173, 130, 127, 87, 171, 128, 126,
	118, 105, 112, 144, 125, 145, 113, 133, 132, 134,
	0, 0, 0, 161, 178, 196, 94, 0, 157, 166,
	186, 187, 188, 189, 190, 191, 0, 0, 95, 108,
	104, 143, 135, 93, 114, 158, 117, 124, 149, 194,
	140, 154, 98, 177, 159, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 82, 89, 121, 193, 148, 106,
	179, 610, 103, 0, 0, 0, 0, 0, 120, 0,
	122, 0, 0, 160, 131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 210, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	212, 0, 0, 0, 0, 146, 0, 163, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 0, 0, 0,
	99, 0, 153, 141, 176, 0, 142, 152, 123, 168,
	147, 175, 184, 185, 165, 183, 192, 84, 164, 174,
	97, 156, 86, 172, 162, 129, 115, 116, 85, 0,
	180, 150, 102, 107, 101, 138, 169, 170, 100, 195,
	91, 182, 88, 92, 181, 136, 167, 173, 130, 127,
	87, 171, 128, 126, 118, 105, 112, 144, 125, 145,
	113, 133, 132, 134, 0, 0, 0, 161, 178, 196,
	94, 0, 157, 166, 186, 187, 188, 189, 190, 191,
	0, 0, 95, 108, 104, 143, 135, 93, 114, 158,
	117, 124, 149, 194, 140, 154, 98, 177, 159, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 331,
	0, 0, 0, 0, 0, 0, 139, 0, 82, 89,
	121, 193, 148, 106, 179, 103, 0, 0, 0, 0,
	0, 120, 0, 122, 0, 0, 160, 131, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 210, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 0, 0, 212, 0, 0, 0, 0, 146, 0,
	163, 111, 119, 83, 90, 0, 110, 137, 151, 155,
	0, 0, 0, 99, 0, 153, 141, 176, 0, 142,
	152, 123, 168, 147, 175, 184, 185, 165, 183, 192,
	84, 164, 174, 97, 156, 86, 172, 162, 129, 115,
	116, 85, 0, 180, 150, 102, 107, 101, 138, 169,
	170, 100, 195, 91, 182, 88, 92, 181, 136, 167,
	173, 130, 127, 87, 171, 128, 126, 118, 105, 112,
	144, 125, 145, 113, 133, 132, 134, 0, 0, 0,
	161, 178, 196, 94, 0, 157, 166, 186, 187, 188,
	189, 190, 191, 0, 0, 95, 108, 104, 143, 135,
	93, 114, 158, 117, 124, 149, 194, 140, 154, 98,
	177, 159, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	0, 82, 89, 121, 193, 148, 106, 179, 103, 0,
	0, 0, 0, 0, 120, 0, 122, 0, 0, 160,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 210, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 207, 0, 212, 0, 0, 0,
	0, 146, 0, 163, 111, 119, 83, 90, 0, 110,
	137, 151, 155, 0, 0, 0, 99, 0, 153, 141,
	176, 0, 142, 152, 123, 168, 147, 175, 184, 185,
	165, 183, 192, 84, 164, 174, 97, 156, 86, 172,
	162, 129, 115, 116, 85, 0, 180, 150, 102, 107,
	101, 138, 169, 170, 100, 195, 91, 182, 88, 92,
	181, 136, 167, 173, 130, 127, 87, 171, 128, 126,
	118, 105, 112, 144, 125, 145, 113, 133, 132, 134,
	0, 0, 0, 161, 178, 196, 94, 0, 157, 166,
	186, 187, 188, 189, 190, 191, 0, 0, 95, 108,
	104, 143, 135, 93, 114, 158, 117, 124, 149, 194,
	140, 154, 98, 177, 159, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 82, 89, 121, 193, 148, 106,
	179, 103, 0, 0, 0, 0, 0, 120, 0, 122,
	0, 0, 160, 131, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 80, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 212,
	0, 0, 0, 0, 146, 0, 163, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 0, 0, 0, 99,
	0, 153, 141, 176, 0, 142, 152, 123, 168, 147,
	175, 184, 185, 165, 183, 192, 84, 164, 174, 97,
	156, 86, 172, 162, 129, 115, 116, 85, 0, 180,
	150, 102, 107, 101, 138, 169, 170, 100, 195, 91,
	182, 88, 92, 181, 136, 167, 173, 130, 127, 87,
	171, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 0, 0, 161, 178, 196, 94,
	0, 157, 166, 186, 187, 188, 189, 190, 191, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 158, 117,
	124, 149, 194, 140, 154, 98, 177, 159, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 82, 89, 121,
	193, 148, 106, 179, 103, 0, 0, 0, 0, 0,
	120, 0, 122, 0, 0, 160, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 210, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 212, 0, 0, 0, 0, 146, 0, 163,
	111, 119, 83, 90, 0, 110, 137, 151, 155, 0,
	0, 0, 99, 0, 153, 141, 176, 0, 142, 152,
	123, 168, 147, 175, 184, 185, 165, 183, 192, 84,
	164, 174, 97, 156, 86, 172, 162, 129, 115, 116,
	85, 0, 180, 150, 102, 107, 101, 138, 169, 170,
	100, 195, 91, 182, 88, 92, 181, 136, 167, 173,
	130, 127, 87, 171, 128, 126, 118, 105, 112, 144,
	125, 145, 113, 133, 132, 134, 0, 0, 0, 161,
	178, 196, 94, 0, 157, 166, 186, 187, 188, 189,
	190, 191, 0, 0, 95, 108, 104, 143, 135, 93,
	114, 158, 117, 124, 149, 194, 140, 154, 98, 177,
	159, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
	82, 89, 121, 193, 148, 106, 179, 103, 0, 0,
	0, 0, 0, 120, 0, 122, 0, 0, 160, 131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 272, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 212, 0, 0, 0, 0,
	146, 0, 163, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 0, 0, 0, 99, 0, 153, 141, 176,
	0, 142, 152, 123, 168, 147, 175, 184, 185, 165,
	183, 192, 84, 164, 174, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 0, 180, 150, 102, 107, 101,
	138, 169, 170, 100, 195, 91, 182, 88, 92, 181,
	136, 167, 173, 130, 127, 87, 171, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	0, 0, 161, 178, 196, 94, 0, 157, 166, 186,
	187, 188, 189, 190, 191, 0, 0, 95, 108, 104,
	143, 135, 93, 114, 158, 117, 124, 149, 194, 140,
	154, 98, 177, 159, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 89, 121, 193, 148, 106, 179,
}
var yyPact = [...]int{

	1869, -1000, -190, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 906, 927, -1000, -1000, -1000, -1000, -1000, -1000,
	230, 8656, 24, 105, -21, 11591, 103, 1950, 12077, -1000,
	4, -1000, -1000, -1000, 12077, -1000, -1000, -1000, -71, -81,
	-1000, 708, -1000, -1000, -1000, -1000, -1000, 898, 904, 749,
	893, 810, -1000, 6396, 65, 65, 11348, 5388, -1000, -1000,
	248, 12077, 89, 12077, -158, 61, 61, 61, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 95, 12077, 208,
	-1000, 12077, 60, 549, 60, 60, 60, 12077, -1000, 150,
	-1000, -1000, -1000, 12077, 539, 837, 3268, 54, 3268, 3268,
	-1000, 3268, 3268, -1000, 3268, 10, 3268, -70, 917, -1000,
	-1000, -1000, -1000, -22, -1000, 3268, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	554, 846, 7405, 7405, 906, -1000, 708, -1000, -1000, -1000,
	838, -1000, -1000, 319, 926, -1000, 2431, 147, -1000, 7405,
	2182, 694, -1000, -1000, 694, -1000, -1000, 120, -1000, -1000,
	8161, 8161, 8161, 8161, 8161, 8161, 8161, 8161, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 694, -1000, 7153, 694, 694, 694, 694, 694,
	694, 694, 694, 7405, 694, 694, 694, 694, 694, 694,
	694, 694, 694, 694, 694, 694, 694, 694, 694, 11105,
	10375, 12077, 591, -1000, 686, 5123, -118, -1000, -1000, -1000,
	240, 10132, -1000, -1000, -1000, 836, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 615, 12077, -1000, 2047, -1000, 537, 873,
	78, 523, 267, 515, 12077, 12077, 3268, 17, 48, 93,
	12077, 692, 74, 12077, 868, 777, 12077, 506, 504, -1000,
	4858, -1000, 3268, 3268, -1000, -1000, -1000, 3268, 3268, 3268,
	12077, 3268, 3268, -1000, -1000, -1000, -1000, -1000, 3268, 3268,
	-1000, 925, 287, -1000, -1000, -1000, -1000, 7405, -1000, 776,
	-1000, -1000, -1000, -1000, -1000, -1000, 942, 188, 570, 133,
	690, -1000, 486, 898, 554, 810, 9889, 790, -1000, -1000,
	12077, -1000, 7405, 7405, 439, -1000, 10861, -1000, -1000, 3798,
	194, 8161, 296, 253, 8161, 8161, 8161, 8161, 8161, 8161,
	8161, 8161, 8161, 8161, 8161, 8161, 8161, 8161, 8161, 375,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 473, -1000,
	708, 691, 691, 174, 174, 174, 174, 174, 174, 174,
	8413, 5892, 554, 611, 340, 7153, 6396, 6396, 7405, 7405,
	6900, 6648, 6396, 884, 249, 340, 12320, -1000, -1000, 7909,
	-1000, -1000, -1000, -1000, -1000, 554, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 11834, 11834, 6396, 6396, 6396, 6396, 32,
	12077, -1000, 682, 729, -1000, -1000, -1000, 872, 9394, 9646,
	32, 636, 10375, 12077, -1000, -1000, 4593, 686, -118, 673,
	-1000, -102, -139, 5640, 172, -1000, -1000, -1000, -1000, 3003,
	449, 598, 402, -1000, -61, -1000, -1000, -1000, -1000, 712,
	-1000, -1000, 712, 712, 712, 712, -24, -24, -24, -24,
	-1000, -1000, -1000, -1000, -1000, 754, 750, -1000, 712, 712,
	712, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 740,
	740, 740, 734, 734, 756, 708, 12077, 3268, 866, 3268,
	-1000, 124, -1000, 11834, 11834, 12077, 12077, 112, 12077, 12077,
	685, -1000, 12077, 683, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	12077, 302, 12077, 12077, 340, 12077, -1000, 820, 7405, 7405,
	4328, 7405, -1000, -1000, -1000, 846, -1000, 884, 897, -1000,
	829, 828, 6396, -1000, -1000, 194, 380, -1000, -1000, 416,
	-1000, -1000, -1000, -1000, 131, 694, -1000, 2224, -1000, -1000,
	-1000, -1000, 296, 8161, 8161, 8161, 154, 2224, 2198, 1679,
	1471, 174, 392, 392, 170, 170, 170, 170, 170, 532,
	532, -1000, -1000, -1000, 554, -1000, -1000, -1000, 554, 6396,
	680, -1000, -1000, 7405, -1000, 554, 601, 601, 363, 354,
	297, 923, 601, 226, 922, 601, 601, 6396, 255, -1000,
	7405, 554, -1000, 127, -1000, 720, 675, 674, 601, 554,
	601, 601, 709, 694, -1000, 12320, 10375, 10375, 10375, 10375,
	10375, -1000, 806, 801, -1000, 789, 788, 802, 12077, -1000,
	607, 9394, 143, 694, -1000, 10618, -1000, -1000, 916, 10375,
	656, -1000, -1000, 673, -118, -125, -1000, -1000, -1000, -1000,
	340, -1000, 445, 670, 2738, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 738, 466, -1000, 853, 178, 173, 461, 850,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	280, 8161, 941, -1000, 844, -1000, 841, 442, -64, -1000,
	-1000, 365, -24, -24, -1000, -1000, 172, 834, 172, 172,
	172, 428, 428, -1000, -1000, -1000, -1000, 362, -1000, -1000,
	-1000, 360, -1000, 774, 11834, -1000, 871, -1000, -1000, -1000,
	-1000, 309, 309, 193, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 31, 746, -1000, -1000, -1000,
	16, 15, 69, -1000, 3268, 12077, 287, -1000, 413, 7405,
	-1000, -1000, -1000, 818, 340, 340, 126, -1000, -1000, 12077,
	-1000, -1000, -1000, -1000, 653, -1000, -1000, -1000, 3533, 6396,
	-1000, 154, 2224, 1898, -1000, 8161, 8161, -1000, -1000, 601,
	6396, 340, -1000, -1000, -1000, 238, 375, 238, 8161, 8161,
	-1000, 8161, 8161, -1000, -170, 626, 245, -1000, 7405, 316,
	-1000, 4328, -1000, 8161, 8161, -1000, -1000, -1000, -1000, 773,
	12320, 694, -1000, 9151, 11834, 671, -1000, 234, 729, 745,
	759, 1094, -1000, -1000, -1000, -1000, 800, -1000, 792, -1000,
	-1000, -1000, -1000, -1000, 88, 87, 83, 11834, -1000, 906,
	7405, 656, -1000, -1000, -1000, -121, -145, -1000, -1000, -1000,
	3003, -1000, 3003, 11834, 47, -1000, 461, 461, -1000, -1000,
	-1000, 736, -1000, 2224, -106, -1000, -1000, -1000, -1000, -1000,
	572, 172, 172, -1000, 207, -1000, -1000, -1000, 595, -1000,
	560, 667, 553, 12077, -1000, 708, -1000, 503, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 459,
	-1000, 457, 12077, -1000, -1000, -1000, -1000, -1000, 11834, -177,
	455, 11834, 11834, 12077, -1000, -1000, 302, -1000, 340, -1000,
	4063, -1000, 916, 10375, -1000, -1000, 554, -1000, 8161, 2224,
	2224, -1000, -1000, 554, 712, 712, -1000, 712, 734, -1000,
	712, -5, 712, -6, 554, 554, 1846, 1810, 1594, 1408,
	694, -165, -1000, 340, 7405, -1000, 1552, 1364, -1000, 855,
	621, 617, -1000, -1000, 6144, 554, 543, 123, 536, -1000,
	906, 12320, 7405, -1000, -1000, 7405, 713, -1000, 7405, -1000,
	-1000, -1000, 694, 694, 694, 536, 898, 340, -1000, -1000,
	-1000, -1000, 2738, -1000, 534, -1000, 712, -1000, -1000, -1000,
	11834, -1000, -1000, -1000, -1000, -1000, -1000, -24, 407, -24,
	355, -1000, 348, 3268, -1000, 448, -1000, -1000, -1000, -1000,
	175, -1000, -1000, 862, -1000, 4063, -1000, -1000, 707, -1000,
	-1000, -1000, 912, 663, -1000, 2224, -1000, -1000, 108, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 8161, 8161, 8161,
	8161, 8161, 554, 404, 340, 8161, 8161, 840, -1000, 694,
	-1000, -1000, 669, 11834, 11834, -1000, 11834, 898, -1000, 340,
	340, 11834, 340, 11834, 11834, 11834, 8908, -1000, 138, 11834,
	-1000, 529, -1000, 172, -1000, 172, 565, 562, -1000, 557,
	-1000, 441, -1000, -1000, 694, 631, -1000, 231, 11834, 910,
	902, -1000, -1000, 720, 720, 720, 720, 28, -1000, -1000,
	720, 720, 940, -1000, 694, -1000, 708, 119, -1000, -1000,
	-1000, 527, 521, 521, 521, 143, 138, -1000, 418, 203,
	385, -1000, 44, 11834, -1000, -1000, -1000, -1000, -1000, -1000,
	27, 4063, 3003, 514, -1000, 7405, 7405, -1000, -1000, -1000,
	-1000, 554, 42, -180, -1000, -1000, 12320, 617, 554, 11834,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 330, -1000, -1000,
	12077, -1000, -1000, 512, -1000, 11834, -1000, -1000, 746, 340,
	605, -1000, 816, -175, -185, 571, -1000, -1000, -1000, 706,
	-1000, 27, 827, -177, -1000, 814, -1000, 11834, -1000, 23,
	-1000, -178, 483, 21, -182, 758, 694, -186, 672, -1000,
	921, 7657, -1000, -1000, 937, 168, 168, 720, 554, -1000,
	-1000, -1000, 51, 420, -1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1184, 21, 462, 1181, 1178, 1177, 1176, 1175, 1173,
	1172, 1167, 1166, 1164, 1162, 1161, 1160, 1159, 1158, 1157,
	1155, 1153, 1150, 1149, 1148, 1145, 133, 1135, 1131, 1130,
	71, 1128, 77, 1126, 1124, 35, 187, 42, 50, 347,
	1122, 51, 64, 58, 1120, 34, 1119, 1118, 92, 1117,
	1116, 55, 1115, 1114, 1403, 1112, 1111, 13, 31, 1109,
	1106, 1103, 1102, 75, 5, 1098, 1096, 25, 1094, 1091,
	86, 1090, 59, 4, 12, 29, 18, 1085, 782, 66,
	1084, 57, 1083, 1082, 1081, 1079, 40, 1077, 63, 1075,
	20, 60, 1072, 11, 81, 37, 27, 8, 78, 70,
	1068, 23, 69, 52, 1065, 1064, 500, 53, 1063, 1062,
	43, 1060, 1059, 19, 180, 381, 1050, 1048, 1041, 1040,
	1033, 44, 0, 465, 380, 76, 1031, 1028, 1023, 1350,
	84, 56, 16, 1019, 62, 564, 38, 1016, 1013, 41,
	1012, 1009, 1008, 1006, 1004, 1000, 999, 998, 997, 24,
	994, 993, 990, 61, 105, 988, 986, 65, 33, 985,
	984, 983, 49, 17, 979, 978, 54, 30, 977, 976,
	973, 971, 970, 28, 15, 969, 14, 964, 9, 963,
	26, 962, 3, 961, 10, 960, 6, 959, 7, 48,
	1, 958, 2, 957, 956, 46, 394, 953, 952, 79,
}
var yyR1 = [...]int{

	0, 193, 194, 194, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 6, 3, 4,
	4, 5, 5, 7, 7, 29, 29, 8, 9, 9,
	9, 197, 197, 49, 49, 48, 48, 94, 94, 10,
	10, 10, 10, 99, 99, 103, 103, 103, 104, 104,
	104, 104, 137, 137, 11, 11, 11, 11, 11, 11,
	11, 188, 188, 187, 186, 186, 185, 185, 184, 17,
	169, 171, 171, 170, 170, 170, 170, 163, 141, 141,
	141, 141, 141, 141, 141, 140, 140, 140, 140, 140,
	144, 144, 145, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 143, 143, 143, 143, 143, 146, 146, 146,
	146, 146, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 148, 148, 148,
	148, 148, 148, 148, 148, 162, 162, 149, 149, 157,
	157, 158, 158, 158, 155, 155, 156, 156, 159, 159,
	151, 152, 160, 153, 153, 153, 154, 154, 154, 161,
	161, 161, 161, 150, 164, 164, 179, 179, 178, 178,
	178, 168, 168, 175, 175, 175, 175, 175, 166, 166,
	167, 167, 177, 177, 176, 165, 165, 180, 180, 180,
	180, 191, 192, 190, 190, 190, 190, 190, 172, 172,
	172, 173, 173, 173, 174, 174, 174, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 107, 107, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 183, 181, 181, 182, 182,
	13, 18, 18, 14, 14, 14, 14, 14, 15, 15,
	19, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 111, 111, 109, 109, 112, 112, 110,
	110, 110, 113, 113, 113, 138, 138, 138, 21, 21,
	23, 23, 24, 25, 22, 22, 22, 22, 22, 22,
	22, 22, 16, 198, 26, 27, 27, 28, 28, 28,
	32, 32, 32, 30, 30, 31, 31, 37, 37, 36,
	36, 38, 38, 38, 38, 126, 126, 126, 125, 125,
	40, 40, 41, 41, 42, 42, 43, 43, 43, 43,
	56, 56, 93, 93, 95, 95, 44, 44, 44, 44,
	45, 45, 46, 46, 47, 47, 133, 133, 132, 132,
	132, 131, 131, 50, 50, 50, 52, 51, 51, 51,
	51, 53, 53, 55, 55, 54, 54, 57, 57, 57,
	57, 58, 58, 39, 39, 39, 39, 39, 39, 39,
	108, 108, 60, 60, 59, 59, 59, 59, 59, 59,
	59, 59, 59, 59, 71, 71, 71, 71, 71, 71,
	61, 61, 61, 61, 61, 61, 61, 35, 35, 72,
	72, 72, 78, 73, 73, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 68, 68, 68,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 199,
	199, 70, 69, 69, 69, 69, 69, 69, 33, 33,
	33, 33, 33, 136, 136, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 82, 82,
	34, 34, 80, 80, 81, 83, 83, 79, 79, 79,
	63, 63, 63, 63, 63, 63, 63, 63, 65, 65,
	65, 84, 84, 85, 85, 86, 86, 87, 87, 88,
	89, 89, 89, 90, 90, 90, 90, 91, 91, 91,
	62, 62, 62, 62, 62, 62, 92, 92, 92, 92,
	96, 96, 74, 74, 76, 76, 75, 77, 97, 97,
	101, 98, 98, 102, 102, 102, 102, 100, 100, 100,
	128, 128, 128, 105, 105, 114, 114, 115, 115, 106,
	106, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 118, 118, 117, 117, 117, 119, 119, 120, 120,
	120, 127, 127, 123, 123, 124, 124, 129, 129, 130,
	130, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 195, 196, 134, 135, 135, 135,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 4, 6, 7, 5, 10, 1,
	3, 1, 3, 7, 8, 1, 1, 9, 8, 7,
	6, 1, 1, 1, 3, 1, 3, 0, 4, 3,
	4, 5, 4, 1, 3, 3, 2, 2, 2, 2,
	2, 1, 1, 1, 2, 2, 8, 5, 7, 5,
	5, 0, 2, 1, 0, 2, 1, 3, 3, 4,
	4, 2, 4, 1, 3, 3, 3, 2, 1, 2,
	2, 2, 2, 2, 2, 3, 1, 1, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 2, 2,
	2, 1, 4, 4, 2, 2, 3, 3, 3, 3,
	1, 1, 1, 1, 1, 6, 6, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 3, 0,
	5, 0, 3, 5, 0, 1, 0, 1, 1, 2,
	2, 3, 1, 0, 3, 3, 0, 2, 2, 2,
	1, 2, 1, 2, 5, 4, 1, 2, 2, 3,
	2, 0, 1, 2, 3, 3, 2, 2, 1, 1,
	0, 1, 1, 3, 2, 3, 1, 10, 11, 11,
	12, 3, 3, 1, 1, 2, 2, 2, 0, 1,
	3, 1, 2, 3, 1, 1, 1, 6, 10, 8,
	7, 7, 7, 9, 7, 7, 4, 5, 7, 5,
	5, 5, 12, 7, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 7, 1, 3, 8, 8,
	3, 3, 5, 4, 6, 4, 4, 4, 3, 2,
	3, 4, 4, 3, 4, 4, 4, 4, 4, 4,
	3, 3, 2, 3, 3, 2, 3, 4, 3, 7,
	5, 4, 2, 4, 2, 2, 2, 2, 3, 3,
	5, 2, 3, 1, 1, 0, 1, 1, 1, 0,
	2, 2, 0, 2, 2, 0, 1, 1, 2, 1,
	1, 2, 1, 1, 2, 2, 2, 2, 2, 2,
	3, 3, 2, 0, 2, 0, 2, 1, 2, 2,
	0, 1, 1, 0, 1, 0, 1, 0, 1, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 1,
	0, 2, 1, 3, 1, 1, 1, 3, 1, 3,
	3, 7, 1, 3, 1, 3, 4, 4, 4, 3,
	2, 4, 0, 1, 0, 2, 0, 1, 0, 1,
	2, 1, 1, 1, 2, 2, 1, 2, 3, 2,
	3, 2, 2, 2, 1, 1, 3, 0, 5, 5,
	5, 0, 2, 1, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	2, 2, 3, 1, 1, 1, 1, 4, 5, 6,
	4, 4, 6, 6, 6, 8, 8, 8, 8, 9,
	7, 5, 4, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 8, 8, 0,
	2, 3, 4, 4, 4, 4, 4, 4, 0, 3,
	4, 7, 3, 1, 1, 2, 3, 3, 1, 2,
	2, 1, 2, 1, 2, 2, 1, 2, 0, 1,
	0, 2, 1, 2, 4, 0, 2, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 0, 3, 0, 2, 0, 3, 1, 3, 2,
	0, 1, 1, 0, 2, 4, 4, 0, 2, 4,
	2, 1, 3, 5, 4, 6, 1, 3, 3, 5,
	0, 5, 1, 3, 1, 2, 3, 1, 1, 3,
	3, 1, 3, 3, 3, 3, 3, 1, 2, 1,
	1, 1, 1, 1, 1, 0, 2, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 0, 1,
	1, 0, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -193, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -19, -20, -21, -23, -24, -25,
	-22, -16, -3, -4, 6, 7, -29, 9, 10, 30,
	-17, 115, 116, 118, 117, 149, 119, 142, 50, 162,
	163, 165, 166, 25, 143, 144, 147, 148, 31, 32,
	121, -195, 8, 253, 54, -194, 270, -86, 15, -28,
	5, -26, -198, -26, -26, -26, -26, -26, -169, -171,
	54, 90, -120, 125, 72, 245, 122, 123, 129, -123,
	57, -122, 263, 135, 162, 173, 167, 195, 187, 264,
	136, 185, 188, 232, 215, 227, 66, 165, 241, 145,
	183, 179, 177, 27, 229, 200, 268, 178, 228, 121,
	138, 133, 201, 205, 233, 171, 172, 235, 199, 134,
	33, 265, 35, 153, 236, 203, 198, 194, 197, 170,
	193, 39, 207, 206, 208, 231, 190, 139, 180, 18,
	239, 148, 151, 230, 202, 204, 130, 155, 267, 237,
	176, 140, 152, 147, 240, 141, 166, 217, 234, 243,
	38, 212, 169, 132, 163, 159, 218, 191, 154, 181,
	182, 196, 168, 192, 164, 156, 149, 242, 213, 269,
	175, 189, 186, 160, 157, 158, 219, 220, 221, 222,
	223, 224, 161, 266, 238, 184, 214, -106, 125, 222,
	127, 123, 123, 124, 125, 245, 122, 123, -54, -129,
	57, -122, 125, 123, 108, 188, 232, 115, 216, 217,
	229, 124, 33, 230, 155, -138, 123, -109, 215, 219,
	220, 221, 224, 222, 161, 57, 234, 233, 225, -129,
	164, -134, -54, -134, -134, -134, -134, 218, 218, -134,
	-2, -90, 17, 16, -5, -3, -195, 6, 20, 21,
	-32, 40, 41, -27, -38, 99, -39, -129, -59, 74,
	-64, 29, 57, -122, 23, -63, -60, -79, -77, -78,
	108, 109, 110, 97, 98, 105, 75, 111, -68, -66,
	-67, -69, 59, 58, 67, 60, 61, 62, 63, 68,
	69, 70, -123, -75, -195, 44, 45, 254, 255, 256,
	257, 262, 258, 77, 34, 244, 252, 251, 250, 248,
	249, 246, 247, 260, 261, 128, 245, 103, 253, -106,
	-106, 11, -48, -54, -98, -137, 164, -102, 234, 233,
	-124, -100, -123, -121, 232, 188, 231, 120, 73, 22,
	24, 210, 76, 108, 16, 77, 107, 254, 115, 48,
	246, 247, 244, 256, 257, 245, 216, 29, 10, 25,
	143, 21, 101, 117, 80, 81, 146, 23, 144, 70,
	19, 51, 11, 13, 14, 128, 127, 92, 124, 46,
	8, 111, 26, 89, 42, 28, 44, 90, 17, 248,
	249, 31, 262, 150, 103, 49, 36, 74, 68, 71,
	52, 72, 15, 47, 91, 118, 253, 45, 122, 6,
	259, 30, 142, 43, 123, 79, 260, 261, 126, 69,
	5, 129, 32, 9, 50, 53, 250, 251, 252, 175,
	34, 78, 12, -170, 90, -163, 57, -54, 124, -54,
	253, -115, 128, -115, -115, 123, -54, 115, 117, 120,
	52, -18, -54, -114, 128, 57, -114, -114, -114, -54,
	112, -54, 57, 30, -135, -195, -124, 245, 57, 155,
	123, 156, 125, -135, -135, -135, -135, -135, 159, 160,
	-135, -112, -111, 227, 228, 218, 226, 12, 218, 158,
	-135, -134, -134, -196, 56, -91, 19, 31, -39, -129,
	-87, -88, -39, -86, -2, -26, 36, -30, 21, 65,
	11, -126, 73, 72, 89, -125, 22, -123, 59, 112,
	-39, -61, 92, 74, 90, 91, 76, 94, 93, 104,
	97, 98, 99, 100, 101, 102, 103, 95, 96, 107,
	82, 83, 84, 85, 86, 87, 88, -108, -195, -78,
	-195, 113, 114, -64, -64, -64, -64, -64, -64, -64,
	-64, -195, -2, -73, -39, -195, -195, -195, -195, -195,
	-195, -195, -195, -195, -82, -39, -195, -199, -70, -195,
	-199, -70, -199, -70, -199, -195, -199, -70, -199, -70,
	-199, -199, -70, -195, -195, -195, -195, -195, -195, -55,
	26, -54, -41, -42, -43, -44, -56, -78, -195, -54,
	-54, -48, -197, 55, 11, 53, 55, -98, 164, -99,
	-103, 235, 237, 82, -128, -123, 59, 29, 30, 56,
	55, -54, -141, -140, -144, -145, -147, -146, -148, -142,
	-143, 175, 185, 186, 108, 189, 191, 192, 193, 194,
	195, 196, 197, 198, 199, 200, 30, 145, 181, 182,
	183, 184, 201, 202, 203, 204, 205, 206, 207, 208,
	167, 187, 264, 168, 169, 170, 171, 172, 173, 176,
	177, 178, 179, 180, 57, 22, 125, 57, 74, 57,
	-54, -54, -135, 157, 157, 123, 123, -54, 55, 126,
	-48, 23, 52, -49, -54, 57, 57, -130, -129, -121,
	-135, -135, -135, -135, -135, -54, -135, -135, -135, -135,
	11, -110, 11, 92, -39, 52, 9, 92, 55, 18,
	112, 55, -89, 24, 25, -90, -196, -32, -65, -123,
	60, 63, -31, 43, -54, -39, -39, -71, 68, 74,
	69, 70, -125, 99, -130, -124, -121, -64, -72, -75,
	-78, 64, 92, 90, 91, 76, -64, -64, -64, -64,
	-64, -64, -64, -64, -64, -64, -64, -64, -64, -64,
	-64, -136, 57, 59, 57, -63, -63, -123, -37, 21,
	-36, -38, -196, 55, -196, -2, -36, -36, -39, -39,
	-79, 59, -36, -79, 59, -36, -36, -30, -80, -81,
	78, -79, -123, -129, -196, -64, -123, -123, -36, -37,
	-36, -36, -94, 151, -54, 30, 55, -50, -52, -51,
	-53, 42, 46, 48, 43, 44, 45, 49, -133, 22,
	-41, -195, -132, 151, -131, 22, -129, 59, -94, 53,
	-41, -54, -102, -99, 55, 236, 238, 239, 52, 71,
	-39, -154, 107, -172, -173, -174, -124, 59, 60, -163,
	-164, -165, -175, 137, -180, 130, 132, 129, -166, 138,
	124, 28, 56, -159, -151, -152, -160, -161, -150, 68,
	74, 29, 52, 210, 130, 28, 129, 66, -155, 213,
	-149, 54, -149, -149, -149, -149, -153, 188, -153, -153,
	-153, 54, 54, -149, -149, -149, -157, 54, -157, -157,
	-158, 54, -158, -127, 53, -2, -54, -135, 23, -135,
	-116, 120, 117, 118, -183, 116, 210, 188, 66, 29,
	15, 254, 151, 269, 57, 152, -123, -123, -54, -54,
	120, 117, -54, -54, -54, 55, -54, -113, 90, 12,
	-129, -129, -54, 38, -39, -39, -130, -88, -91, -105,
	19, 11, 34, 34, -36, 68, 69, 70, 112, -195,
	-72, -64, -64, -64, -35, 146, 73, -196, -196, -36,
	55, -39, -196, -196, -196, 55, 53, 22, 11, 11,
	-196, 11, 11, -196, -196, -36, -83, -81, 80, -39,
	-196, 112, -196, 55, 55, -196, -196, -196, -196, -62,
	30, 34, -2, -195, -195, -97, -101, -79, -42, -43,
	-43, -42, -43, 42, 42, 42, 47, 42, 47, 42,
	-51, -129, -196, -57, 50, 127, 51, -195, -131, -58,
	12, -41, -58, -103, -104, 240, 237, 243, 57, 59,
	55, -174, 82, 54, 57, 28, -166, -166, -167, 57,
	-167, 28, 68, -64, 9, 28, 28, 59, -156, 214,
	60, -153, -153, -154, 30, -154, -154, -154, -162, 59,
	-162, 60, 60, 52, -123, 22, -134, -107, -189, 131,
	137, 138, 133, 124, 28, 130, 132, 151, 129, -107,
	-189, 131, -117, -119, 126, 22, 124, 28, 151, -188,
	53, 157, 157, 126, -135, -54, -110, 59, -39, 39,
	112, -54, -40, 11, 99, -124, -37, -35, 73, -64,
	-64, -196, -38, -139, 108, 185, 145, 183, 179, 199,
	190, 212, 181, 213, -136, -139, -64, -64, -64, -64,
	263, -86, 81, -39, 79, -124, -64, -64, -96, 52,
	-97, -74, -76, -75, -195, -2, -92, -123, -95, -123,
	-58, 55, 82, -46, -45, 52, 53, -47, 52, -45,
	42, 42, 124, 124, 124, -95, -86, -39, -58, 237,
	241, 242, -173, -174, -177, -176, -123, -180, -167, -167,
	54, -67, 56, -154, -154, 57, 108, 56, 55, 56,
	55, 56, 55, -54, -2, 54, -163, -134, 57, -134,
	57, -54, -134, -123, -186, 266, -187, 57, -123, -123,
	-54, -113, -58, -41, -196, -64, -196, -149, -149, -149,
	-158, -149, 172, -149, 172, -196, -196, 19, 19, 19,
	19, -195, -34, 259, -39, 55, 55, 27, -96, 55,
	-196, -196, -196, 55, 112, -196, 55, -86, -101, -39,
	-39, 54, -39, -195, -195, -195, -196, -90, 56, 55,
	-149, -93, -123, -153, 59, -153, 60, 60, -135, -163,
	-134, -118, 126, 22, 26, -185, -184, -124, 54, -84,
	13, -153, 57, -64, -64, -64, -64, -64, -196, 59,
	-64, -64, 28, -76, 34, -2, -195, -123, -123, -123,
	-90, -93, -93, -93, -93, -132, -179, -178, 53, 134,
	66, -176, 56, 55, -154, -154, 56, 56, 56, 57,
	-195, 55, 82, -93, -85, 14, 16, -196, -196, -196,
	-196, -33, 92, 266, -196, -196, 9, -74, -2, 112,
	56, -196, -196, -196, -57, -178, 57, -168, 82, 59,
	140, -123, -134, -181, -182, 151, -184, -174, 56, -39,
	-73, -196, 264, 49, 267, -97, -196, -123, 60, -54,
	-196, 55, -123, -188, 39, 265, 268, 54, -182, 34,
	-186, 39, -93, 153, 266, 56, 154, 267, -191, -192,
	52, -195, 268, -192, 52, 10, 9, -64, 150, -190,
	141, 136, 139, 30, -190, -196, -196, 135, 29, 68,
}
var yyDef = [...]int{

	23, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 565, 0, 323, 323, 323, 323, 323, 323,
	0, 638, 619, 0, 0, 0, 0, -2, 309, 310,
	0, 312, 313, 865, 865, 865, 865, 865, 0, 0,
	865, 0, 35, 36, 863, 1, 3, 573, 0, 0,
	327, 330, 325, 0, 619, 619, 0, 0, 64, 65,
	0, 0, 0, 849, 0, 617, 617, 617, 639, 640,
	643, 644, 747, 748, 749, 750, 751, 752, 753, 754,
	755, 756, 757, 758, 759, 760, 761, 762, 763, 764,
	765, 766, 767, 768, 769, 770, 771, 772, 773, 774,
	775, 776, 777, 778, 779, 780, 781, 782, 783, 784,
	785, 786, 787, 788, 789, 790, 791, 792, 793, 794,
	795, 796, 797, 798, 799, 800, 801, 802, 803, 804,
	805, 806, 807, 808, 809, 810, 811, 812, 813, 814,
	815, 816, 817, 818, 819, 820, 821, 822, 823, 824,
	825, 826, 827, 828, 829, 830, 831, 832, 833, 834,
	835, 836, 837, 838, 839, 840, 841, 842, 843, 844,
	845, 846, 847, 848, 850, 851, 852, 853, 854, 855,
	856, 857, 858, 859, 860, 861, 862, 0, 0, 0,
	620, 0, 615, 0, 615, 615, 615, 0, 259, 395,
	647, 648, 849, 0, 0, 0, 866, 0, 866, 866,
	272, 866, 866, 275, 866, 0, 866, 0, 282, 284,
	285, 286, 287, 0, 291, 866, 306, 307, 296, 308,
	311, 314, 315, 316, 317, 318, 319, 865, 865, 322,
	29, 577, 0, 0, 565, 31, 0, 323, 328, 329,
	333, 331, 332, 324, 0, 341, 345, 0, 403, 0,
	408, 410, -2, -2, 0, 445, 446, 447, 448, 449,
	0, 0, 0, 0, 0, 0, 0, 0, 473, 474,
	475, 476, 550, 551, 552, 553, 554, 555, 556, 557,
	412, 413, 547, 597, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 538, 0, 509, 509, 509, 509, 509,
	509, 509, 509, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 45, 49, 0, 839, 601, -2, -2,
	0, 0, 645, 646, -2, 757, -2, 651, 652, 653,
	654, 655, 656, 657, 658, 659, 660, 661, 662, 663,
	664, 665, 666, 667, 668, 669, 670, 671, 672, 673,
	674, 675, 676, 677, 678, 679, 680, 681, 682, 683,
	684, 685, 686, 687, 688, 689, 690, 691, 692, 693,
	694, 695, 696, 697, 698, 699, 700, 701, 702, 703,
	704, 705, 706, 707, 708, 709, 710, 711, 712, 713,
	714, 715, 716, 717, 718, 719, 720, 721, 722, 723,
	724, 725, 726, 727, 728, 729, 730, 731, 732, 733,
	734, 735, 736, 737, 738, 739, 740, 741, 742, 743,
	744, 745, 746, 0, 0, 83, 0, 81, 0, 0,
	0, 0, 0, 0, 0, 0, 866, 0, 0, 0,
	0, 250, 0, 0, 0, 0, 0, 0, 0, 258,
	0, 260, 866, 866, 263, 867, 868, 866, 866, 866,
	0, 866, 866, 270, 271, 273, 274, 276, 866, 866,
	278, 0, 299, 297, 298, 293, 294, 0, 288, 289,
	292, 320, 321, 30, 864, 24, 0, 0, 574, 0,
	566, 567, 570, 573, 29, 330, 0, 335, 334, 326,
	0, 342, 0, 0, 0, 346, 0, 348, 349, 0,
	406, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	430, 431, 432, 433, 434, 435, 436, 409, 0, 423,
	0, 0, 0, 465, 466, 467, 468, 469, 470, 471,
	0, 337, 29, 0, 443, 0, 0, 0, 0, 0,
	0, 0, 0, 333, 0, 539, 0, 493, 501, 0,
	494, 502, 495, 503, 496, 0, 497, 504, 498, 505,
	499, 500, 506, 0, 0, 0, 337, 0, 0, 47,
	0, 394, 0, 352, 354, 355, 356, -2, 0, 378,
	-2, 0, 0, 0, 41, 42, 0, 50, 839, 52,
	53, 0, 0, 0, 166, 610, 611, 612, 608, 208,
	0, 0, 87, 88, 154, 96, 97, 98, 99, 147,
	101, 102, 147, 147, 147, 147, 163, 163, 163, 163,
	130, 131, 132, 133, 134, 0, 0, 117, 147, 147,
	147, 121, 137, 138, 139, 140, 141, 142, 143, 144,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 149,
	149, 149, 151, 151, 641, 0, 0, 866, 0, 866,
	79, 0, 226, 0, 0, 0, 0, 0, 0, 0,
	253, 616, 0, 255, 43, 256, 257, 396, 649, 650,
	261, 262, 264, 265, 266, 267, 268, 269, 277, 281,
	0, 302, 0, 0, 283, 0, 578, 0, 0, 0,
	0, 0, 569, 571, 572, 577, 32, 333, 0, 558,
	0, 0, 0, 336, 27, 404, 405, 407, 424, 0,
	426, 428, 347, 343, 0, 548, -2, 414, 415, 439,
	440, 441, 0, 0, 0, 0, 437, 419, 0, 450,
	451, 452, 453, 454, 455, 456, 457, 458, 459, 460,
	461, 464, 523, 524, 0, 462, 463, 472, 0, 0,
	338, 339, 442, 0, 596, 29, 0, 0, 0, 0,
	447, 550, 0, 447, 550, 0, 0, 0, 545, 542,
	0, 0, 547, 0, 510, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 393, 0, 0, 0, 0, 0,
	0, 383, 0, 0, 386, 0, 0, 0, 0, 377,
	0, 0, 397, 807, 379, 0, 381, 382, 401, 0,
	401, 46, 602, 51, 0, 0, 56, 57, 603, 604,
	605, 606, 0, 80, 209, 211, 214, 215, 216, 84,
	85, 86, 0, 0, 196, 0, 0, 190, 190, 0,
	188, 189, 82, 89, 90, 91, 92, 93, 94, 158,
	0, 0, 0, 162, 0, 170, 172, 0, 156, 155,
	100, 0, 163, 163, 124, 125, 166, 0, 166, 166,
	166, 0, 0, 118, 119, 120, 112, 0, 113, 114,
	115, 0, 116, 0, 0, -2, 0, 69, 618, 70,
	865, 234, 234, 633, 227, 621, 622, 623, 624, 625,
	626, 627, 628, 629, 630, 0, 71, 229, 231, 230,
	0, 0, 0, 251, 866, 0, 299, 280, 0, 0,
	300, 301, 290, 0, 575, 576, 0, 568, 25, 0,
	613, 614, 559, 560, 350, 425, 427, 429, 0, 337,
	416, 437, 420, 0, 417, 0, 0, 411, 477, 0,
	0, 444, -2, 480, 481, 0, 0, 0, 0, 0,
	516, 0, 0, 517, 0, 565, 0, 543, 0, 0,
	492, 0, 511, 0, 0, 512, 513, 514, 515, 590,
	0, 0, -2, 0, 0, 401, 598, 0, 353, 372,
	374, 0, 369, 384, 385, 387, 0, 389, 0, 391,
	392, 357, 359, 360, 0, 0, 0, 0, 380, 565,
	0, 401, 40, 54, 55, 0, 0, 61, 167, 168,
	0, 212, 0, 0, 0, 183, 190, 190, 186, 191,
	187, 0, 159, 160, 0, 169, 171, 173, 95, 157,
	0, 166, 166, 126, 0, 127, 128, 129, 0, 145,
	0, 0, 0, 0, 642, 0, 217, 0, 865, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 0,
	865, 0, 0, 865, 634, 635, 636, 637, 0, 74,
	0, 0, 0, 0, 254, 44, 302, 303, 304, 579,
	0, 26, 401, 0, 344, 549, 0, 418, 0, 438,
	421, 478, 340, 0, 147, 147, 528, 147, 151, 531,
	147, 533, 147, 536, 0, 0, 0, 0, 0, 0,
	0, 540, 491, 546, 0, 548, 0, 0, 33, 0,
	590, 580, 592, 594, 0, 29, 0, 586, 0, 364,
	565, 0, 0, 366, 373, 0, 0, 367, 0, 368,
	388, 390, 0, 0, 0, 0, 573, 402, 39, 58,
	59, 60, 210, 213, 0, 192, 147, 195, 184, 185,
	0, 161, 148, 122, 123, 164, 165, 163, 0, 163,
	0, 152, 0, 866, -2, 0, 865, 220, 221, 222,
	0, 224, 225, 0, 228, 0, 72, 73, 0, 233,
	252, 279, 561, 351, 479, 422, 482, 525, 163, 529,
	530, 532, 534, 535, 537, 484, 483, 0, 0, 0,
	0, 0, 0, 0, 544, 0, 0, 0, 34, 0,
	595, -2, 0, 0, 0, 48, 0, 573, 599, 600,
	370, 0, 375, 0, 0, 0, 378, 38, 175, 0,
	194, 0, 362, 166, 146, 166, 0, 0, 66, 0,
	219, 0, 631, 632, 0, 75, 76, 0, 0, 563,
	0, 526, 527, 0, 0, 0, 0, 518, 490, 541,
	0, 0, 0, 593, 0, -2, 0, 588, 587, 365,
	37, 0, 0, 0, 0, 397, 174, 176, 0, 181,
	0, 193, 0, 0, 135, 136, 150, 153, 865, 223,
	0, 0, 0, 0, 28, 0, 0, 485, 487, 486,
	488, 0, 0, 0, 507, 508, 0, 583, 29, 0,
	371, 398, 399, 400, 361, 177, 178, 0, 182, 180,
	0, 363, 218, 0, 246, 0, 77, 78, 71, 564,
	562, 489, 0, 0, 0, 591, -2, 589, 179, 0,
	245, 0, 0, 74, 519, 0, 522, 0, 247, 0,
	232, 520, 0, 0, 0, 197, 0, 0, 198, 199,
	0, 0, 521, 200, 0, 0, 0, 0, 0, 201,
	203, 204, 0, 0, 202, 248, 249, 205, 206, 207,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 75, 3, 3, 3, 102, 94, 3,
	54, 56, 99, 97, 55, 98, 112, 100, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 270,
	83, 82, 84, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 104, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 93, 3, 105,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	76, 77, 78, 79, 80, 81, 85, 86, 87, 88,
	89, 90, 91, 92, 95, 96, 101, 103, 106, 107,
	108, 109, 110, 111, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:316
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:321
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:322
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:326
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:348
		{
			setParseTree(yylex, nil)
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:354
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:362
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:366
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:372
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 28:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:379
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:385
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:389
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:395
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:399
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:406
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:418
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:430
		{
			yyVAL.str = InsertStr
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:434
		{
			yyVAL.str = ReplaceStr
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:440
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:446
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:450
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:454
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:459
		{
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:460
		{
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:464
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName.ToViewName()}
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:468
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName.ToViewName())
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:474
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:478
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:483
		{
			yyVAL.partitions = nil
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:487
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:493
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:497
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:501
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:505
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:511
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:515
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:521
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:525
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:529
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:535
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:539
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:543
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:547
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:553
		{
			yyVAL.str = SessionStr
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:557
		{
			yyVAL.str = GlobalStr
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:563
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:568
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 66:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:574
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:579
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[3].tableName.ToViewName(), ViewExpr: yyDollar[5].selStmt}
		}
	case 68:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:583
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[5].tableName.ToViewName(), ViewExpr: yyDollar[7].selStmt, OrReplace: true}
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:587
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:591
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:596
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:600
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:606
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:611
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:616
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:622
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:627
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:633
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:639
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName, IfNotExists: ne}
			setDDL(yylex, yyVAL.ddl)
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:650
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:657
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:661
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:667
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:672
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:676
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:680
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:686
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:692
		{
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:697
		{
			if yyDollar[1].columnType.sawnull {
				yylex.Error("cannot include NULL / NOT NULL more than once")
				return 1
			}
			yyDollar[1].columnType.NotNull = yyDollar[2].boolVal
			yyDollar[1].columnType.sawnull = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:707
		{
			if yyDollar[1].columnType.Default != nil {
				yylex.Error("cannot include DEFAULT more than once")
				return 1
			}
			yyDollar[1].columnType.Default = yyDollar[2].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:716
		{
			if yyDollar[1].columnType.OnUpdate != nil {
				yylex.Error("cannot include ON UPDATE more than once")
				return 1
			}
			yyDollar[1].columnType.OnUpdate = yyDollar[2].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:725
		{
			if yyDollar[1].columnType.sawai {
				yylex.Error("cannot include AUTO_INCREMENT more than once")
				return 1
			}
			yyDollar[1].columnType.Autoincrement = yyDollar[2].boolVal
			yyDollar[1].columnType.sawai = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:735
		{
			if yyDollar[1].columnType.KeyOpt != colKeyNone {
				yylex.Error("cannot include more than one key option for a column definition")
				return 1
			}
			yyDollar[1].columnType.KeyOpt = yyDollar[2].colKeyOpt
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:744
		{
			if yyDollar[1].columnType.Comment != nil {
				yylex.Error("cannot include more than one comment for a column definition")
				return 1
			}
			yyDollar[1].columnType.Comment = yyDollar[2].sqlVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:755
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:767
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:772
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:778
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:784
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:788
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:792
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:796
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:800
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:804
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:808
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:812
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:816
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:822
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:828
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:834
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:840
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:846
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:854
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:858
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:862
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:866
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:870
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:876
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:880
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:884
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:888
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:892
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:896
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:900
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:904
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:908
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:912
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:916
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:920
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:924
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:928
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 136:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:933
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:939
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:943
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:947
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:951
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:955
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:959
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:963
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:967
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:973
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:978
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 147:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:983
		{
			yyVAL.sqlVal = nil
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:987
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:992
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 150:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:996
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1004
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1008
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 153:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1014
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1022
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1026
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1031
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1035
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1042
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1046
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1052
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1058
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1064
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1069
		{
			yyVAL.str = ""
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1073
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1077
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1082
		{
			yyVAL.str = ""
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1086
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1090
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1096
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1100
		{
			yyVAL.colKeyOpt = colKey
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1104
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1108
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1114
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 174:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1120
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 175:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1124
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1130
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1134
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1140
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1144
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1149
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1155
		{
			yyVAL.str = ""
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1159
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1165
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1169
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1173
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1177
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1181
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1187
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1191
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1196
		{
			yyVAL.str = ""
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1200
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1206
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1210
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1216
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1222
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1226
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 197:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1233
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 198:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1237
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 199:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1241
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 200:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1245
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1251
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1257
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1263
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1267
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1271
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1275
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1279
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 208:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1284
		{
			yyVAL.str = ""
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1288
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1292
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1300
		{
			yyVAL.str = yyDollar[1].str
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1304
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1308
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1314
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1318
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1322
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 217:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1328
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 218:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1332
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			ddl.Column = yyDollar[8].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 219:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1339
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 220:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1346
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 221:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1350
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: DropStr, Column: NewColIdent(string(yyDollar[7].bytes)), Table: yyDollar[4].tableName}
		}
	case 222:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1354
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 223:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1358
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: RenameStr, Table: yyDollar[4].tableName, Column: NewColIdent(string(yyDollar[7].bytes)), ToColumn: NewColIdent(string(yyDollar[9].bytes))}
		}
	case 224:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1362
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 225:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1367
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 226:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1372
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 227:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1376
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 228:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1380
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[5].colIdent,
				Type:   yyDollar[6].colIdent,
				Params: yyDollar[7].vindexParams,
			}}
		}
	case 229:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1388
		{
			yyVAL.statement = &DDL{Action: DropVindexStr, VindexSpec: &VindexSpec{
				Name: yyDollar[5].colIdent,
			}}
		}
	case 230:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1394
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 231:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1398
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 232:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1402
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 233:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1415
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 234:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1426
		{
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1428
		{
		}
	case 245:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1443
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1449
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1453
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 248:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1459
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 249:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1463
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1469
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1475
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 252:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1479
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1487
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 254:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1495
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1500
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1508
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1512
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1518
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1522
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1527
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1533
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1538
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1542
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1546
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1551
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1555
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1559
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1563
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1567
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1571
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1575
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1579
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1583
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1587
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1591
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1595
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1599
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1603
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1607
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 280:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1612
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1622
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1626
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1630
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1636
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1640
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1644
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1648
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1652
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1656
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1660
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1664
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1674
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1680
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1684
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1690
		{
			yyVAL.str = ""
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1694
		{
			yyVAL.str = "full "
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1700
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1704
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1710
		{
			yyVAL.str = ""
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1714
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1718
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1724
		{
			yyVAL.showFilter = nil
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1728
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1732
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1738
		{
			yyVAL.str = ""
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1742
		{
			yyVAL.str = SessionStr
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1746
		{
			yyVAL.str = GlobalStr
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1752
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1756
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1762
		{
			yyVAL.statement = &Begin{}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1766
		{
			yyVAL.statement = &Begin{}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1772
		{
			yyVAL.statement = &Commit{}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1778
		{
			yyVAL.statement = &Rollback{}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1784
		{
			yyVAL.statement = &OtherRead{}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1789
		{
			yyVAL.statement = &Show{Type: "columns", OnTable: yyDollar[2].tableName}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1793
		{
			yyVAL.statement = &OtherRead{}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1797
		{
			yyVAL.statement = &OtherRead{}
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1801
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1805
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1809
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1813
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1819
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1823
		{
			setAllowComments(yylex, true)
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1827
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1833
		{
			yyVAL.bytes2 = nil
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1837
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1843
		{
			yyVAL.str = UnionStr
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1847
		{
			yyVAL.str = UnionAllStr
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1851
		{
			yyVAL.str = UnionDistinctStr
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1856
		{
			yyVAL.str = ""
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1860
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1864
		{
			yyVAL.str = SQLCacheStr
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1869
		{
			yyVAL.str = ""
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1873
		{
			yyVAL.str = DistinctStr
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1878
		{
			yyVAL.str = ""
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1882
		{
			yyVAL.str = StraightJoinHint
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1887
		{
			yyVAL.selectExprs = nil
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1891
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1897
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1901
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1907
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1911
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1915
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 344:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1919
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 345:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1924
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1928
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1932
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1939
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1944
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1948
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1954
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1958
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1968
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1972
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1976
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1982
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1988
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 361:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1992
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1998
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2002
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2008
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2012
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 366:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2025
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 367:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2029
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 368:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2033
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2037
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2043
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 371:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2045
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 372:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2049
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2051
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 374:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2055
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2057
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2060
		{
			yyVAL.empty = struct{}{}
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2062
		{
			yyVAL.empty = struct{}{}
		}
	case 378:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2065
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2069
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2073
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2080
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2086
		{
			yyVAL.str = JoinStr
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2090
		{
			yyVAL.str = JoinStr
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2094
		{
			yyVAL.str = JoinStr
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2100
		{
			yyVAL.str = StraightJoinStr
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2106
		{
			yyVAL.str = LeftJoinStr
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2110
		{
			yyVAL.str = LeftJoinStr
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2114
		{
			yyVAL.str = RightJoinStr
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2118
		{
			yyVAL.str = RightJoinStr
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2124
		{
			yyVAL.str = NaturalJoinStr
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2128
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2138
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2142
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2148
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2152
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2157
		{
			yyVAL.indexHints = nil
		}
	case 398:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2161
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 399:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2165
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 400:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2169
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 401:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2174
		{
			yyVAL.expr = nil
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2178
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2184
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2188
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2192
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2196
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2200
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2204
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2208
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 410:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2214
		{
			yyVAL.str = ""
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2218
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2224
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2228
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2234
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2238
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 416:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2242
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 417:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2246
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 418:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2250
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2254
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 420:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2258
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 421:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2262
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 422:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2266
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2270
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2276
		{
			yyVAL.str = IsNullStr
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2280
		{
			yyVAL.str = IsNotNullStr
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2284
		{
			yyVAL.str = IsTrueStr
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2288
		{
			yyVAL.str = IsNotTrueStr
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2292
		{
			yyVAL.str = IsFalseStr
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2296
		{
			yyVAL.str = IsNotFalseStr
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2302
		{
			yyVAL.str = EqualStr
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2306
		{
			yyVAL.str = LessThanStr
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2310
		{
			yyVAL.str = GreaterThanStr
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2314
		{
			yyVAL.str = LessEqualStr
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2318
		{
			yyVAL.str = GreaterEqualStr
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2322
		{
			yyVAL.str = NotEqualStr
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2326
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 437:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2331
		{
			yyVAL.expr = nil
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2335
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2341
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2345
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2349
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2355
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2361
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2365
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2371
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2375
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2379
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2383
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2387
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2391
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2395
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2399
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2403
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2407
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2411
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2415
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2419
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2423
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2427
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2431
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2435
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2439
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2443
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2447
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2451
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2455
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2459
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2463
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2471
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2485
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2489
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2493
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 477:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2511
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 478:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2515
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 479:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2519
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 480:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2529
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 481:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2533
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 482:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2537
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 483:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2541
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 484:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2545
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 485:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2549
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 486:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2553
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 487:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2557
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 488:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2561
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 489:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2565
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 490:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2569
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 491:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2573
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 492:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2577
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2587
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2591
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2595
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2600
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2605
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2610
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2616
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2621
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2626
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2630
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2634
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2639
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2644
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2649
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 507:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2653
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 508:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2657
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2667
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 512:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2677
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 513:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2681
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 514:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2685
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 515:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2689
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 516:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2693
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 517:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2697
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 518:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2703
		{
			yyVAL.str = ""
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2707
		{
			yyVAL.str = BooleanModeStr
		}
	case 520:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2711
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 521:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2715
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2719
		{
			yyVAL.str = QueryExpansionStr
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2725
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2729
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2735
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2739
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2743
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2747
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2751
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2755
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2761
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2765
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2769
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2773
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2777
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2781
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2785
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2790
		{
			yyVAL.expr = nil
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2794
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 540:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2799
		{
			yyVAL.str = string("")
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2803
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2809
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2813
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 544:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2819
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 545:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2824
		{
			yyVAL.expr = nil
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2828
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2834
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2838
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 549:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2842
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2848
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2852
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2856
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2860
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2864
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2868
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2872
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2876
		{
			yyVAL.expr = &NullVal{}
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2882
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2891
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2895
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 561:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2900
		{
			yyVAL.exprs = nil
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2904
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 563:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2909
		{
			yyVAL.expr = nil
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2913
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 565:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2918
		{
			yyVAL.orderBy = nil
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2922
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2928
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2932
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2938
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 570:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2943
		{
			yyVAL.str = AscScr
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2947
		{
			yyVAL.str = AscScr
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2951
		{
			yyVAL.str = DescScr
		}
	case 573:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2956
		{
			yyVAL.limit = nil
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2960
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 575:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2964
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2968
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 577:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2973
		{
			yyVAL.str = ""
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2977
		{
			yyVAL.str = ForUpdateStr
		}
	case 579:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2981
		{
			yyVAL.str = ShareModeStr
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2994
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2998
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3002
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 583:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3007
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 584:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3011
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 585:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3015
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3022
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3026
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3030
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 589:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3034
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3039
		{
			yyVAL.updateExprs = nil
		}
	case 591:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3043
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3049
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3053
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3059
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3063
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3069
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3075
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3085
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3089
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3095
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3101
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3105
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3111
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3115
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3119
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3123
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3130
		{
			yyVAL.bytes = []byte("charset")
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3137
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3141
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3145
		{
			yyVAL.expr = &Default{}
		}
	case 615:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3154
		{
			yyVAL.byt = 0
		}
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3156
		{
			yyVAL.byt = 1
		}
	case 617:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3159
		{
			yyVAL.byt = 0
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3161
		{
			yyVAL.byt = 1
		}
	case 619:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3164
		{
			yyVAL.str = ""
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3166
		{
			yyVAL.str = IgnoreStr
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3170
		{
			yyVAL.empty = struct{}{}
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3172
		{
			yyVAL.empty = struct{}{}
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3174
		{
			yyVAL.empty = struct{}{}
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3176
		{
			yyVAL.empty = struct{}{}
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3178
		{
			yyVAL.empty = struct{}{}
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3180
		{
			yyVAL.empty = struct{}{}
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3182
		{
			yyVAL.empty = struct{}{}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3184
		{
			yyVAL.empty = struct{}{}
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3186
		{
			yyVAL.empty = struct{}{}
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3188
		{
			yyVAL.empty = struct{}{}
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3192
		{
			yyVAL.empty = struct{}{}
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3194
		{
			yyVAL.empty = struct{}{}
		}
	case 633:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3197
		{
			yyVAL.empty = struct{}{}
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3199
		{
			yyVAL.empty = struct{}{}
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3201
		{
			yyVAL.empty = struct{}{}
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3205
		{
			yyVAL.empty = struct{}{}
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3207
		{
			yyVAL.empty = struct{}{}
		}
	case 638:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3210
		{
			yyVAL.empty = struct{}{}
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3212
		{
			yyVAL.empty = struct{}{}
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3214
		{
			yyVAL.empty = struct{}{}
		}
	case 641:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3217
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3219
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3223
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3227
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3234
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3240
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3244
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3251
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3489
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3498
		{
			decNesting(yylex)
		}
	case 865:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3503
		{
			skipToEnd(yylex)
		}
	case 866:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3508
		{
			skipToEnd(yylex)
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3512
		{
			skipToEnd(yylex)
		}
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3516
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
