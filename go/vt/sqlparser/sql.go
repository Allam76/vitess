// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func yyPosition(yylex interface{}) int {
	return yylex.(*Tokenizer).Position
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:57
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	int                   int
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	statements            Statements
	partitions            Partitions
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	joinCondition         JoinCondition
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	asOf                  *AsOf
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	sqlVal                *SQLVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	setExprs              SetExprs
	setExpr               *SetExpr
	colIdent              ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	TableSpec             *TableSpec
	columnType            ColumnType
	columnOrder           *ColumnOrder
	triggerOrder          *TriggerOrder
	colKeyOpt             ColumnKeyOption
	optVal                Expr
	LengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexInfo             *IndexInfo
	indexOption           *IndexOption
	indexOptions          []*IndexOption
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	constraintDefinition  *ConstraintDefinition
	constraintInfo        ConstraintInfo
	ReferenceAction       ReferenceAction
	partDefs              []*PartitionDefinition
	partDef               *PartitionDefinition
	partSpec              *PartitionSpec
	vindexParam           VindexParam
	vindexParams          []VindexParam
	showFilter            *ShowFilter
	optLike               *OptLike
	over                  *Over
	caseStatementCases    []CaseStatementCase
	caseStatementCase     CaseStatementCase
	ifStatementConditions []IfStatementCondition
	ifStatementCondition  IfStatementCondition
	signalInfo            SignalInfo
	signalInfos           []SignalInfo
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const UNLOCK = 57373
const KEYS = 57374
const OF = 57375
const UNIQUE = 57376
const KEY = 57377
const SYSTEM_TIME = 57378
const VALUES = 57379
const LAST_INSERT_ID = 57380
const NEXT = 57381
const VALUE = 57382
const SHARE = 57383
const MODE = 57384
const SQL_NO_CACHE = 57385
const SQL_CACHE = 57386
const JOIN = 57387
const STRAIGHT_JOIN = 57388
const LEFT = 57389
const RIGHT = 57390
const INNER = 57391
const OUTER = 57392
const CROSS = 57393
const NATURAL = 57394
const USE = 57395
const FORCE = 57396
const ON = 57397
const USING = 57398
const ID = 57399
const HEX = 57400
const STRING = 57401
const INTEGRAL = 57402
const FLOAT = 57403
const HEXNUM = 57404
const VALUE_ARG = 57405
const LIST_ARG = 57406
const COMMENT = 57407
const COMMENT_KEYWORD = 57408
const BIT_LITERAL = 57409
const NULL = 57410
const TRUE = 57411
const FALSE = 57412
const OFF = 57413
const OR = 57414
const AND = 57415
const NOT = 57416
const BETWEEN = 57417
const CASE = 57418
const WHEN = 57419
const THEN = 57420
const ELSE = 57421
const ELSEIF = 57422
const END = 57423
const LE = 57424
const GE = 57425
const NE = 57426
const NULL_SAFE_EQUAL = 57427
const IS = 57428
const LIKE = 57429
const REGEXP = 57430
const IN = 57431
const SHIFT_LEFT = 57432
const SHIFT_RIGHT = 57433
const DIV = 57434
const MOD = 57435
const UNARY = 57436
const COLLATE = 57437
const BINARY = 57438
const UNDERSCORE_BINARY = 57439
const UNDERSCORE_UTF8MB4 = 57440
const INTERVAL = 57441
const JSON_EXTRACT_OP = 57442
const JSON_UNQUOTE_EXTRACT_OP = 57443
const CREATE = 57444
const ALTER = 57445
const DROP = 57446
const RENAME = 57447
const ANALYZE = 57448
const ADD = 57449
const FLUSH = 57450
const MODIFY = 57451
const CHANGE = 57452
const SCHEMA = 57453
const TABLE = 57454
const INDEX = 57455
const INDEXES = 57456
const VIEW = 57457
const TO = 57458
const IGNORE = 57459
const IF = 57460
const PRIMARY = 57461
const COLUMN = 57462
const SPATIAL = 57463
const FULLTEXT = 57464
const KEY_BLOCK_SIZE = 57465
const CHECK = 57466
const ACTION = 57467
const CASCADE = 57468
const CONSTRAINT = 57469
const FOREIGN = 57470
const NO = 57471
const REFERENCES = 57472
const RESTRICT = 57473
const FIRST = 57474
const AFTER = 57475
const SHOW = 57476
const DESCRIBE = 57477
const EXPLAIN = 57478
const DATE = 57479
const ESCAPE = 57480
const REPAIR = 57481
const OPTIMIZE = 57482
const TRUNCATE = 57483
const FORMAT = 57484
const MAXVALUE = 57485
const PARTITION = 57486
const REORGANIZE = 57487
const LESS = 57488
const THAN = 57489
const PROCEDURE = 57490
const TRIGGER = 57491
const TRIGGERS = 57492
const VINDEX = 57493
const VINDEXES = 57494
const STATUS = 57495
const VARIABLES = 57496
const WARNINGS = 57497
const SEQUENCE = 57498
const EACH = 57499
const ROW = 57500
const BEFORE = 57501
const FOLLOWS = 57502
const PRECEDES = 57503
const DEFINER = 57504
const CLASS_ORIGIN = 57505
const SUBCLASS_ORIGIN = 57506
const MESSAGE_TEXT = 57507
const MYSQL_ERRNO = 57508
const CONSTRAINT_CATALOG = 57509
const CONSTRAINT_SCHEMA = 57510
const CONSTRAINT_NAME = 57511
const CATALOG_NAME = 57512
const SCHEMA_NAME = 57513
const TABLE_NAME = 57514
const COLUMN_NAME = 57515
const CURSOR_NAME = 57516
const SIGNAL = 57517
const SQLSTATE = 57518
const BEGIN = 57519
const START = 57520
const TRANSACTION = 57521
const COMMIT = 57522
const ROLLBACK = 57523
const BIT = 57524
const TINYINT = 57525
const SMALLINT = 57526
const MEDIUMINT = 57527
const INT = 57528
const INTEGER = 57529
const BIGINT = 57530
const INTNUM = 57531
const REAL = 57532
const DOUBLE = 57533
const FLOAT_TYPE = 57534
const DECIMAL = 57535
const NUMERIC = 57536
const DEC = 57537
const FIXED = 57538
const PRECISION = 57539
const TIME = 57540
const TIMESTAMP = 57541
const DATETIME = 57542
const YEAR = 57543
const CHAR = 57544
const VARCHAR = 57545
const BOOL = 57546
const CHARACTER = 57547
const VARBINARY = 57548
const NCHAR = 57549
const NVARCHAR = 57550
const NATIONAL = 57551
const VARYING = 57552
const TEXT = 57553
const TINYTEXT = 57554
const MEDIUMTEXT = 57555
const LONGTEXT = 57556
const LONG = 57557
const BLOB = 57558
const TINYBLOB = 57559
const MEDIUMBLOB = 57560
const LONGBLOB = 57561
const JSON = 57562
const ENUM = 57563
const GEOMETRY = 57564
const POINT = 57565
const LINESTRING = 57566
const POLYGON = 57567
const GEOMETRYCOLLECTION = 57568
const MULTIPOINT = 57569
const MULTILINESTRING = 57570
const MULTIPOLYGON = 57571
const NULLX = 57572
const AUTO_INCREMENT = 57573
const APPROXNUM = 57574
const SIGNED = 57575
const UNSIGNED = 57576
const ZEROFILL = 57577
const COLLATION = 57578
const DATABASES = 57579
const SCHEMAS = 57580
const TABLES = 57581
const VITESS_METADATA = 57582
const VSCHEMA = 57583
const FULL = 57584
const PROCESSLIST = 57585
const COLUMNS = 57586
const FIELDS = 57587
const ENGINES = 57588
const PLUGINS = 57589
const NAMES = 57590
const CHARSET = 57591
const GLOBAL = 57592
const SESSION = 57593
const ISOLATION = 57594
const LEVEL = 57595
const READ = 57596
const WRITE = 57597
const ONLY = 57598
const REPEATABLE = 57599
const COMMITTED = 57600
const UNCOMMITTED = 57601
const SERIALIZABLE = 57602
const CURRENT_TIMESTAMP = 57603
const DATABASE = 57604
const CURRENT_DATE = 57605
const CURRENT_USER = 57606
const CURRENT_TIME = 57607
const LOCALTIME = 57608
const LOCALTIMESTAMP = 57609
const UTC_DATE = 57610
const UTC_TIME = 57611
const UTC_TIMESTAMP = 57612
const REPLACE = 57613
const CONVERT = 57614
const CAST = 57615
const SUBSTR = 57616
const SUBSTRING = 57617
const GROUP_CONCAT = 57618
const SEPARATOR = 57619
const TIMESTAMPADD = 57620
const TIMESTAMPDIFF = 57621
const OVER = 57622
const WINDOW = 57623
const GROUPING = 57624
const GROUPS = 57625
const AVG = 57626
const BIT_AND = 57627
const BIT_OR = 57628
const BIT_XOR = 57629
const COUNT = 57630
const JSON_ARRAYAGG = 57631
const JSON_OBJECTAGG = 57632
const MAX = 57633
const MIN = 57634
const STDDEV_POP = 57635
const STDDEV = 57636
const STD = 57637
const STDDEV_SAMP = 57638
const SUM = 57639
const VAR_POP = 57640
const VARIANCE = 57641
const VAR_SAMP = 57642
const CUME_DIST = 57643
const DENSE_RANK = 57644
const FIRST_VALUE = 57645
const LAG = 57646
const LAST_VALUE = 57647
const LEAD = 57648
const NTH_VALUE = 57649
const NTILE = 57650
const ROW_NUMBER = 57651
const PERCENT_RANK = 57652
const RANK = 57653
const MATCH = 57654
const AGAINST = 57655
const BOOLEAN = 57656
const LANGUAGE = 57657
const WITH = 57658
const QUERY = 57659
const EXPANSION = 57660
const UNUSED = 57661
const ARRAY = 57662
const DESCRIPTION = 57663
const EMPTY = 57664
const EXCEPT = 57665
const JSON_TABLE = 57666
const LATERAL = 57667
const MEMBER = 57668
const RECURSIVE = 57669
const ACTIVE = 57670
const ADMIN = 57671
const BUCKETS = 57672
const CLONE = 57673
const COMPONENT = 57674
const DEFINITION = 57675
const ENFORCED = 57676
const EXCLUDE = 57677
const FOLLOWING = 57678
const GEOMCOLLECTION = 57679
const GET_MASTER_PUBLIC_KEY = 57680
const HISTOGRAM = 57681
const HISTORY = 57682
const INACTIVE = 57683
const INVISIBLE = 57684
const LOCKED = 57685
const MASTER_COMPRESSION_ALGORITHMS = 57686
const MASTER_PUBLIC_KEY_PATH = 57687
const MASTER_TLS_CIPHERSUITES = 57688
const MASTER_ZSTD_COMPRESSION_LEVEL = 57689
const NESTED = 57690
const NETWORK_NAMESPACE = 57691
const NOWAIT = 57692
const NULLS = 57693
const OJ = 57694
const OLD = 57695
const OPTIONAL = 57696
const ORDINALITY = 57697
const ORGANIZATION = 57698
const OTHERS = 57699
const PATH = 57700
const PERSIST = 57701
const PERSIST_ONLY = 57702
const PRECEDING = 57703
const PRIVILEGE_CHECKS_USER = 57704
const PROCESS = 57705
const RANDOM = 57706
const REFERENCE = 57707
const REQUIRE_ROW_FORMAT = 57708
const RESOURCE = 57709
const RESPECT = 57710
const RESTART = 57711
const RETAIN = 57712
const REUSE = 57713
const ROLE = 57714
const SECONDARY = 57715
const SECONDARY_ENGINE = 57716
const SECONDARY_LOAD = 57717
const SECONDARY_UNLOAD = 57718
const SKIP = 57719
const SRID = 57720
const THREAD_PRIORITY = 57721
const TIES = 57722
const UNBOUNDED = 57723
const VCPU = 57724
const VISIBLE = 57725
const SYSTEM = 57726

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"OF",
	"UNIQUE",
	"KEY",
	"SYSTEM_TIME",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"ELSEIF",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"MODIFY",
	"CHANGE",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"INDEXES",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"FIRST",
	"AFTER",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"FORMAT",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TRIGGERS",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"EACH",
	"ROW",
	"BEFORE",
	"FOLLOWS",
	"PRECEDES",
	"DEFINER",
	"CLASS_ORIGIN",
	"SUBCLASS_ORIGIN",
	"MESSAGE_TEXT",
	"MYSQL_ERRNO",
	"CONSTRAINT_CATALOG",
	"CONSTRAINT_SCHEMA",
	"CONSTRAINT_NAME",
	"CATALOG_NAME",
	"SCHEMA_NAME",
	"TABLE_NAME",
	"COLUMN_NAME",
	"CURSOR_NAME",
	"SIGNAL",
	"SQLSTATE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DEC",
	"FIXED",
	"PRECISION",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NATIONAL",
	"VARYING",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"LONG",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"OVER",
	"WINDOW",
	"GROUPING",
	"GROUPS",
	"AVG",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"COUNT",
	"JSON_ARRAYAGG",
	"JSON_OBJECTAGG",
	"MAX",
	"MIN",
	"STDDEV_POP",
	"STDDEV",
	"STD",
	"STDDEV_SAMP",
	"SUM",
	"VAR_POP",
	"VARIANCE",
	"VAR_SAMP",
	"CUME_DIST",
	"DENSE_RANK",
	"FIRST_VALUE",
	"LAG",
	"LAST_VALUE",
	"LEAD",
	"NTH_VALUE",
	"NTILE",
	"ROW_NUMBER",
	"PERCENT_RANK",
	"RANK",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"DESCRIPTION",
	"EMPTY",
	"EXCEPT",
	"JSON_TABLE",
	"LATERAL",
	"MEMBER",
	"RECURSIVE",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"SYSTEM",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 32,
	-2, 4,
	-1, 34,
	166, 79,
	-2, 798,
	-1, 42,
	170, 413,
	171, 413,
	-2, 401,
	-1, 49,
	1, 1150,
	402, 1150,
	-2, 432,
	-1, 354,
	116, 806,
	-2, 802,
	-1, 355,
	116, 807,
	-2, 803,
	-1, 456,
	86, 1074,
	116, 1074,
	-2, 68,
	-1, 457,
	86, 988,
	116, 988,
	-2, 69,
	-1, 462,
	86, 951,
	116, 951,
	-2, 767,
	-1, 464,
	86, 1020,
	116, 1020,
	-2, 769,
	-1, 657,
	5, 32,
	-2, 426,
	-1, 661,
	5, 32,
	-2, 425,
	-1, 850,
	1, 484,
	5, 484,
	12, 484,
	13, 484,
	14, 484,
	15, 484,
	17, 484,
	19, 484,
	29, 484,
	30, 484,
	45, 484,
	46, 484,
	47, 484,
	48, 484,
	49, 484,
	51, 484,
	52, 484,
	55, 484,
	56, 484,
	58, 484,
	59, 484,
	402, 484,
	-2, 509,
	-1, 853,
	56, 49,
	58, 49,
	-2, 53,
	-1, 1035,
	116, 809,
	-2, 805,
	-1, 1271,
	57, 343,
	60, 343,
	-2, 307,
	-1, 1320,
	5, 33,
	-2, 573,
	-1, 1380,
	5, 32,
	-2, 744,
	-1, 1473,
	5, 32,
	-2, 70,
	-1, 1611,
	1, 528,
	5, 528,
	12, 528,
	13, 528,
	14, 528,
	15, 528,
	17, 528,
	19, 528,
	29, 528,
	30, 528,
	45, 528,
	46, 528,
	47, 528,
	48, 528,
	49, 528,
	51, 528,
	52, 528,
	55, 528,
	56, 528,
	58, 528,
	59, 528,
	402, 528,
	-2, 509,
	-1, 1720,
	5, 33,
	-2, 745,
	-1, 1750,
	5, 32,
	-2, 70,
	-1, 1790,
	5, 32,
	-2, 747,
	-1, 1877,
	5, 33,
	-2, 748,
	-1, 1928,
	402, 128,
	-2, 32,
}

const yyPrivate = 57344

const yyLast = 19914

var yyAct = [...]int{

	388, 56, 1961, 1922, 1239, 1983, 1923, 1927, 1936, 1952,
	1864, 1881, 1931, 7, 775, 1677, 1930, 6, 1929, 5,
	1932, 8, 1522, 1804, 359, 1624, 1926, 1519, 1768, 66,
	452, 1150, 1591, 1010, 1181, 387, 372, 1625, 1753, 1237,
	1882, 1592, 1148, 1588, 1144, 1190, 467, 1733, 1152, 88,
	1261, 333, 497, 1146, 1598, 1180, 1602, 56, 320, 1539,
	1096, 1428, 1060, 1073, 981, 1264, 1497, 866, 1187, 338,
	970, 1227, 1232, 495, 1202, 1088, 1496, 1135, 846, 1465,
	1037, 1194, 676, 847, 954, 682, 865, 697, 499, 357,
	455, 450, 342, 473, 1175, 447, 855, 2003, 1999, 1994,
	791, 458, 1406, 1128, 1986, 1978, 1977, 1947, 65, 321,
	322, 70, 1215, 325, 1940, 1892, 1921, 1874, 1910, 1678,
	792, 1891, 1840, 740, 739, 749, 750, 742, 743, 744,
	745, 746, 747, 748, 741, 1556, 346, 751, 1349, 1705,
	72, 73, 74, 75, 76, 472, 688, 98, 94, 95,
	1619, 96, 352, 401, 1169, 407, 409, 408, 405, 406,
	404, 403, 402, 1415, 1620, 1621, 1414, 654, 1873, 1416,
	410, 411, 324, 1091, 27, 323, 57, 30, 31, 475,
	644, 477, 1170, 1171, 1448, 99, 27, 1201, 57, 30,
	31, 867, 27, 868, 57, 30, 31, 32, 330, 1524,
	332, 1203, 57, 30, 31, 1775, 1203, 1216, 27, 32,
	57, 30, 31, 1928, 3, 32, 1207, 1209, 1696, 1208,
	1221, 1694, 1216, 32, 315, 63, 327, 1896, 1897, 1228,
	1246, 1883, 1858, 1001, 652, 1573, 1526, 63, 1282, 639,
	640, 1000, 998, 63, 476, 1920, 1909, 1865, 1937, 1521,
	1129, 1281, 317, 2002, 653, 1195, 1245, 1754, 1755, 63,
	1937, 1856, 1966, 1981, 1984, 1980, 1937, 1501, 1805, 647,
	328, 1998, 2004, 648, 645, 646, 2001, 1002, 1995, 1525,
	999, 1807, 1987, 1286, 1197, 474, 482, 332, 318, 361,
	1763, 1479, 1280, 496, 945, 496, 496, 348, 97, 937,
	496, 1405, 496, 1938, 67, 1404, 1403, 470, 496, 1429,
	670, 289, 93, 1294, 1848, 1938, 1293, 56, 56, 1153,
	1155, 1938, 763, 764, 331, 1723, 1419, 1411, 1176, 658,
	1309, 1008, 874, 660, 861, 659, 731, 1762, 1956, 56,
	491, 751, 1165, 1278, 1272, 1273, 1005, 1271, 741, 1274,
	1275, 751, 1806, 694, 760, 977, 696, 762, 1197, 1841,
	55, 1520, 1918, 1558, 971, 90, 684, 1216, 633, 634,
	696, 1455, 55, 638, 1918, 641, 1206, 1829, 55, 1196,
	1918, 655, 663, 664, 1284, 1287, 1230, 773, 1918, 777,
	778, 779, 780, 781, 782, 783, 784, 785, 786, 787,
	1154, 790, 793, 793, 793, 799, 793, 793, 799, 793,
	799, 808, 809, 810, 811, 812, 813, 814, 815, 816,
	817, 818, 819, 820, 821, 822, 823, 824, 825, 826,
	827, 828, 829, 830, 831, 832, 833, 834, 835, 836,
	837, 838, 839, 840, 841, 1279, 851, 1872, 1761, 972,
	1710, 686, 1954, 1196, 1330, 1955, 58, 1953, 1269, 1643,
	90, 869, 27, 662, 57, 30, 31, 478, 58, 92,
	91, 1277, 1327, 1089, 58, 481, 1044, 27, 458, 57,
	30, 31, 58, 1540, 863, 32, 1993, 1974, 1011, 1012,
	58, 1042, 1043, 1041, 496, 496, 695, 694, 1254, 845,
	32, 83, 668, 794, 796, 798, 800, 802, 804, 805,
	807, 1644, 1283, 63, 696, 765, 766, 767, 768, 769,
	770, 771, 772, 795, 797, 1542, 801, 803, 63, 806,
	657, 661, 628, 1263, 636, 1089, 1937, 1338, 1631, 695,
	694, 1985, 854, 675, 649, 859, 27, 79, 57, 30,
	31, 1937, 685, 468, 85, 87, 1958, 696, 82, 1285,
	763, 764, 939, 1516, 92, 91, 691, 957, 958, 32,
	25, 310, 486, 487, 488, 489, 1197, 946, 763, 764,
	956, 1544, 1197, 1255, 80, 1879, 1548, 466, 1543, 1748,
	1541, 1938, 695, 694, 1325, 1546, 1324, 63, 1962, 307,
	627, 630, 774, 1907, 632, 89, 1938, 672, 1545, 673,
	696, 1967, 674, 695, 694, 1262, 1747, 1470, 1440, 637,
	1937, 1547, 1549, 1468, 1445, 1444, 651, 1193, 1197, 496,
	496, 696, 679, 683, 1990, 1984, 1989, 629, 631, 337,
	496, 496, 1007, 1855, 329, 1441, 761, 1197, 55, 732,
	1918, 290, 1449, 468, 1968, 695, 694, 1782, 293, 1446,
	1745, 1438, 1997, 55, 1636, 1918, 63, 1439, 301, 308,
	309, 1196, 496, 696, 1515, 1938, 1040, 1196, 1512, 1026,
	1028, 1029, 1006, 1505, 1501, 1027, 776, 1572, 1502, 695,
	694, 1509, 1511, 1490, 695, 694, 1976, 789, 1466, 695,
	694, 1963, 961, 962, 299, 84, 667, 696, 1506, 1266,
	995, 306, 696, 967, 968, 973, 1031, 696, 444, 445,
	959, 960, 1061, 1196, 1062, 1417, 1443, 1418, 666, 1191,
	1659, 1192, 55, 468, 1918, 850, 1013, 1189, 1195, 1906,
	1853, 852, 1196, 1823, 58, 997, 1799, 1911, 1505, 1501,
	1962, 626, 1970, 1502, 1969, 1429, 1503, 1504, 1820, 58,
	1326, 291, 1017, 56, 744, 745, 746, 747, 748, 741,
	1038, 468, 751, 1506, 1306, 1307, 1308, 1759, 777, 1015,
	1680, 1674, 101, 1670, 1034, 1018, 1030, 1667, 1019, 1739,
	1908, 319, 303, 294, 295, 1665, 304, 305, 313, 1887,
	669, 669, 296, 298, 975, 292, 312, 311, 1078, 1081,
	1664, 695, 694, 695, 694, 1090, 1033, 449, 1560, 1486,
	1035, 1485, 469, 1424, 471, 1739, 1884, 1818, 58, 696,
	1252, 696, 1799, 1868, 1814, 480, 1739, 1857, 1442, 1799,
	1849, 1813, 490, 1799, 1810, 1799, 669, 1739, 1738, 1725,
	669, 1637, 1147, 1064, 1065, 1251, 851, 1722, 669, 1014,
	851, 983, 984, 985, 986, 987, 988, 989, 990, 991,
	992, 993, 994, 1198, 377, 376, 379, 380, 381, 382,
	1102, 1063, 1104, 378, 383, 979, 1036, 458, 953, 1045,
	1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055,
	1056, 1057, 1058, 1059, 1137, 1140, 1141, 1142, 1138, 1160,
	1139, 1143, 952, 1162, 1603, 1604, 1651, 1650, 1647, 1648,
	1067, 1647, 1646, 1407, 1185, 1321, 669, 1177, 951, 1182,
	1132, 669, 1069, 669, 1086, 943, 941, 940, 938, 496,
	493, 496, 877, 876, 67, 1131, 1092, 974, 1068, 1070,
	956, 1167, 1163, 1166, 1075, 1589, 67, 1158, 862, 1178,
	862, 1204, 1205, 1035, 1210, 1211, 1212, 1213, 1214, 1132,
	1069, 1718, 1111, 1112, 1132, 1828, 774, 1116, 27, 1132,
	1119, 1530, 1224, 1225, 1226, 1124, 1407, 1069, 1100, 1101,
	1649, 1071, 1023, 1024, 1420, 1107, 1108, 1109, 1110, 1321,
	1168, 1229, 1231, 27, 857, 1234, 1235, 1236, 1217, 1218,
	1219, 1220, 1241, 1321, 1243, 742, 743, 744, 745, 746,
	747, 748, 741, 857, 1039, 751, 1378, 27, 1321, 63,
	63, 492, 862, 1343, 1379, 1310, 740, 739, 749, 750,
	742, 743, 744, 745, 746, 747, 748, 741, 1342, 858,
	751, 860, 1268, 1250, 63, 1159, 856, 856, 1789, 339,
	669, 1034, 1009, 944, 1894, 774, 1885, 1821, 858, 1523,
	856, 1770, 671, 1749, 1203, 776, 1728, 1038, 63, 1076,
	1077, 1137, 1140, 1141, 1142, 1138, 1233, 1139, 1143, 1630,
	1603, 1604, 1944, 1178, 1265, 1298, 1299, 1035, 740, 739,
	749, 750, 742, 743, 744, 745, 746, 747, 748, 741,
	63, 1315, 751, 1228, 1423, 1223, 1222, 1238, 1771, 1942,
	1924, 1655, 1311, 1606, 1589, 1471, 978, 948, 1318, 1381,
	1382, 1021, 1708, 851, 851, 851, 851, 851, 1393, 1391,
	1609, 850, 1608, 1394, 1392, 850, 1390, 1389, 1147, 850,
	1399, 1395, 1903, 1141, 1142, 1890, 458, 343, 344, 1527,
	851, 1295, 1383, 1337, 689, 690, 355, 1174, 1901, 1304,
	1303, 740, 739, 749, 750, 742, 743, 744, 745, 746,
	747, 748, 741, 687, 1402, 751, 844, 1787, 853, 1669,
	1431, 1635, 1634, 1425, 1489, 1312, 1313, 1314, 677, 1459,
	1401, 875, 665, 494, 1716, 1011, 1012, 104, 878, 678,
	104, 1384, 1766, 1408, 1387, 1421, 104, 1385, 1386, 942,
	1388, 1396, 1242, 449, 947, 1474, 689, 690, 950, 1258,
	1145, 936, 1817, 1182, 340, 341, 1412, 1317, 334, 1834,
	56, 1786, 104, 1302, 335, 1320, 1322, 104, 1323, 104,
	496, 1301, 496, 496, 1329, 67, 1430, 1332, 1333, 1334,
	104, 1833, 485, 1409, 1340, 1410, 1341, 104, 1773, 1344,
	1345, 1407, 1346, 1347, 1426, 1427, 1351, 1352, 1353, 1354,
	1355, 1452, 1453, 1454, 1456, 1946, 1945, 1362, 1363, 1364,
	1331, 1366, 1367, 1328, 1369, 1370, 1371, 1372, 969, 1374,
	1375, 1376, 1469, 1467, 1296, 1297, 692, 683, 1488, 1945,
	1458, 1946, 1460, 1461, 1462, 1463, 1845, 1450, 1451, 1633,
	1398, 1004, 69, 1480, 1457, 1482, 1483, 1487, 71, 1495,
	48, 1039, 64, 1493, 1464, 1, 1348, 1350, 1499, 1508,
	1500, 1679, 1380, 1356, 1357, 1358, 1359, 1935, 24, 1507,
	1564, 1517, 1518, 1498, 1510, 1514, 1484, 1767, 1276, 1494,
	1863, 1071, 1532, 1188, 1179, 1557, 78, 1319, 1097, 465,
	77, 1533, 963, 964, 965, 1253, 635, 966, 1534, 1757,
	1594, 297, 56, 1186, 1436, 1538, 1551, 1339, 1550, 739,
	749, 750, 742, 743, 744, 745, 746, 747, 748, 741,
	1435, 1432, 751, 458, 1613, 1614, 1615, 1447, 1200, 1590,
	1434, 1433, 996, 1437, 883, 1593, 881, 1003, 1492, 1476,
	1477, 1478, 850, 850, 850, 850, 850, 882, 880, 885,
	884, 1199, 879, 1612, 1022, 300, 1616, 850, 453, 870,
	693, 701, 86, 49, 1607, 1760, 1513, 1270, 81, 850,
	976, 642, 643, 1473, 1610, 302, 104, 1623, 759, 485,
	1707, 485, 485, 1300, 1413, 459, 485, 1596, 485, 1536,
	1627, 1895, 1532, 1182, 485, 1182, 1622, 681, 1653, 1654,
	1552, 1553, 1832, 1554, 1555, 1772, 1600, 1336, 1628, 1629,
	788, 1087, 1537, 1145, 360, 1561, 1562, 104, 1025, 740,
	739, 749, 750, 742, 743, 744, 745, 746, 747, 748,
	741, 1618, 375, 751, 374, 700, 373, 370, 371, 1257,
	1016, 1377, 733, 358, 1153, 1155, 350, 849, 842, 1136,
	1641, 851, 1134, 1133, 1570, 1571, 949, 448, 1657, 1576,
	1605, 1601, 1579, 1660, 848, 1638, 1639, 1584, 1529, 1663,
	650, 316, 1642, 1611, 1704, 1839, 1661, 1703, 1020, 1645,
	1662, 1491, 29, 68, 1673, 1640, 345, 1666, 740, 739,
	749, 750, 742, 743, 744, 745, 746, 747, 748, 741,
	19, 18, 751, 17, 1685, 1130, 656, 1565, 1566, 1567,
	1568, 1569, 20, 1632, 1709, 1595, 21, 22, 1161, 16,
	15, 14, 479, 33, 37, 1154, 36, 35, 10, 1475,
	1244, 104, 104, 104, 326, 1689, 1690, 1692, 1691, 982,
	980, 1693, 1982, 1695, 1960, 1934, 485, 1933, 23, 13,
	1726, 12, 1684, 104, 1717, 11, 1559, 485, 9, 1912,
	4, 336, 1658, 1731, 104, 26, 2, 0, 104, 0,
	0, 0, 0, 104, 0, 56, 1732, 1421, 104, 0,
	485, 485, 1735, 1736, 0, 0, 0, 0, 1737, 0,
	1742, 0, 0, 0, 0, 1182, 0, 0, 1741, 1240,
	0, 0, 0, 0, 0, 0, 1247, 1248, 1687, 0,
	1249, 749, 750, 742, 743, 744, 745, 746, 747, 748,
	741, 1740, 1756, 751, 0, 1617, 1752, 1686, 0, 0,
	1627, 1256, 1764, 1688, 0, 0, 0, 0, 0, 1594,
	1267, 1765, 1791, 0, 1697, 1698, 0, 0, 0, 0,
	0, 1769, 0, 0, 0, 1743, 0, 0, 0, 0,
	1288, 1289, 1290, 1291, 1292, 1758, 0, 0, 0, 0,
	0, 0, 0, 0, 1593, 1816, 0, 0, 0, 1744,
	1788, 1746, 0, 0, 0, 0, 0, 1827, 1719, 1720,
	1721, 0, 1724, 1797, 1809, 1815, 1796, 1808, 1795, 1803,
	0, 1798, 0, 0, 1730, 0, 0, 0, 0, 0,
	1594, 0, 56, 0, 0, 485, 485, 104, 104, 104,
	0, 1844, 104, 1774, 1826, 0, 485, 485, 0, 0,
	0, 0, 1819, 0, 0, 0, 0, 1675, 1830, 1822,
	850, 0, 1846, 1825, 0, 1593, 0, 1852, 0, 0,
	1850, 0, 0, 0, 1854, 0, 0, 104, 485, 1811,
	0, 1812, 104, 0, 0, 0, 0, 1860, 0, 1870,
	0, 0, 1776, 1777, 1778, 1779, 1780, 1866, 1706, 104,
	1783, 1784, 1861, 0, 1867, 700, 0, 0, 1750, 0,
	458, 0, 0, 0, 1875, 0, 1876, 1859, 1781, 0,
	0, 1769, 1182, 1785, 0, 1862, 0, 0, 0, 0,
	0, 1889, 776, 0, 0, 0, 1898, 0, 1900, 0,
	1905, 1727, 0, 0, 1729, 1902, 1852, 1800, 0, 1801,
	1802, 1899, 0, 0, 1913, 0, 0, 1925, 1917, 56,
	1919, 1939, 1916, 0, 1915, 0, 1914, 1943, 0, 1941,
	0, 0, 0, 0, 0, 1790, 0, 0, 0, 485,
	0, 0, 1904, 0, 0, 0, 0, 0, 56, 0,
	1835, 1836, 1837, 1838, 0, 1959, 1957, 1842, 1843, 0,
	0, 0, 0, 1971, 56, 0, 0, 0, 0, 0,
	0, 56, 0, 0, 0, 485, 485, 56, 56, 56,
	0, 0, 56, 0, 0, 1959, 1959, 56, 1991, 1702,
	1973, 56, 1481, 0, 1959, 56, 0, 1975, 56, 0,
	56, 0, 1959, 1979, 56, 1847, 0, 1959, 1988, 0,
	104, 1959, 0, 1871, 0, 0, 0, 1996, 104, 104,
	0, 1877, 104, 104, 2000, 0, 104, 104, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 1886, 0, 0,
	0, 0, 1528, 485, 0, 0, 0, 0, 0, 1893,
	0, 1574, 1575, 0, 1577, 1578, 0, 1580, 1581, 1582,
	1583, 0, 1585, 1586, 1587, 0, 0, 740, 739, 749,
	750, 742, 743, 744, 745, 746, 747, 748, 741, 0,
	0, 751, 0, 0, 776, 0, 0, 0, 0, 0,
	0, 0, 1950, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 485, 0, 485, 0, 0,
	0, 104, 104, 0, 0, 104, 0, 0, 0, 0,
	0, 0, 0, 0, 1964, 1965, 0, 0, 0, 0,
	0, 1869, 776, 0, 0, 0, 104, 0, 104, 104,
	0, 0, 0, 0, 0, 104, 0, 1072, 1074, 0,
	0, 0, 1080, 1083, 1084, 1085, 0, 0, 0, 0,
	0, 0, 0, 0, 1701, 104, 104, 104, 104, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1095,
	0, 1098, 1099, 0, 0, 0, 1103, 0, 1105, 1106,
	0, 0, 0, 0, 0, 0, 1113, 1114, 1115, 0,
	1117, 1118, 0, 1120, 1121, 1122, 1123, 0, 1125, 1126,
	1127, 0, 0, 1652, 0, 27, 28, 57, 30, 31,
	0, 1656, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 62, 1948, 1949, 0, 32, 52,
	53, 0, 740, 739, 749, 750, 742, 743, 744, 745,
	746, 747, 748, 741, 0, 1671, 751, 0, 1711, 1712,
	1972, 0, 43, 0, 1713, 0, 63, 1714, 0, 680,
	0, 0, 1715, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1992, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1700, 0, 0, 0, 0, 0, 104,
	104, 104, 104, 104, 0, 0, 0, 0, 0, 0,
	102, 104, 0, 314, 104, 0, 0, 0, 104, 102,
	0, 0, 0, 0, 0, 0, 104, 0, 34, 59,
	39, 38, 41, 0, 54, 0, 0, 0, 0, 0,
	0, 0, 349, 0, 0, 451, 461, 485, 0, 0,
	102, 0, 102, 0, 0, 0, 0, 0, 0, 0,
	42, 61, 60, 102, 0, 50, 51, 40, 0, 0,
	102, 740, 739, 749, 750, 742, 743, 744, 745, 746,
	747, 748, 741, 0, 0, 751, 0, 0, 0, 1305,
	0, 0, 0, 0, 0, 0, 0, 1751, 0, 0,
	0, 55, 0, 44, 45, 485, 46, 47, 0, 0,
	0, 735, 0, 738, 0, 0, 485, 104, 485, 485,
	752, 753, 754, 755, 756, 757, 758, 0, 736, 737,
	734, 740, 739, 749, 750, 742, 743, 744, 745, 746,
	747, 748, 741, 0, 0, 751, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1335, 0, 0, 1699, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 485, 1535, 0, 0,
	1360, 1361, 0, 0, 0, 1365, 0, 0, 1368, 0,
	0, 0, 0, 1373, 0, 0, 1316, 58, 740, 739,
	749, 750, 742, 743, 744, 745, 746, 747, 748, 741,
	0, 0, 751, 1831, 0, 0, 485, 740, 739, 749,
	750, 742, 743, 744, 745, 746, 747, 748, 741, 0,
	0, 751, 386, 0, 0, 0, 740, 739, 749, 750,
	742, 743, 744, 745, 746, 747, 748, 741, 485, 485,
	751, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	0, 0, 0, 0, 0, 0, 485, 740, 739, 749,
	750, 742, 743, 744, 745, 746, 747, 748, 741, 0,
	0, 751, 0, 0, 0, 0, 485, 485, 0, 485,
	485, 0, 0, 0, 0, 0, 0, 0, 1880, 0,
	102, 0, 0, 0, 0, 0, 0, 0, 0, 460,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 483, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 485, 0, 0,
	104, 485, 0, 0, 0, 0, 0, 0, 485, 0,
	0, 485, 485, 485, 0, 0, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 102, 102, 0, 0, 0,
	0, 0, 0, 461, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 102, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 102, 0, 0,
	0, 102, 0, 0, 0, 0, 102, 0, 0, 0,
	0, 955, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	485, 485, 485, 0, 0, 0, 0, 0, 0, 485,
	0, 0, 0, 0, 0, 0, 0, 485, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 0, 498, 0, 498, 498, 0,
	0, 0, 498, 0, 498, 0, 0, 0, 0, 0,
	498, 0, 0, 0, 0, 485, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 485,
	485, 0, 485, 0, 0, 485, 0, 104, 0, 104,
	102, 102, 102, 0, 0, 102, 485, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 485, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	485, 0, 0, 0, 0, 0, 0, 485, 104, 0,
	102, 0, 0, 0, 0, 102, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 0, 0, 0, 485, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 460, 0, 485, 0,
	0, 0, 871, 0, 0, 485, 485, 0, 0, 0,
	0, 955, 0, 935, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 485, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 0, 498, 498, 0, 0,
	0, 0, 485, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 349, 349,
	0, 0, 485, 349, 349, 349, 349, 0, 0, 0,
	461, 485, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	349, 349, 349, 349, 0, 0, 349, 349, 349, 349,
	349, 0, 0, 0, 0, 0, 0, 349, 349, 349,
	0, 349, 349, 0, 349, 349, 349, 349, 0, 349,
	349, 349, 0, 102, 0, 0, 0, 0, 0, 0,
	0, 102, 1156, 0, 0, 102, 102, 0, 0, 102,
	1164, 955, 461, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 955, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 498, 498, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 498, 498, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 498, 0, 0, 102, 0, 0,
	0, 0, 0, 0, 102, 102, 0, 0, 102, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	0, 1259, 1260, 0, 0, 0, 0, 0, 102, 0,
	0, 0, 905, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 498, 0, 0, 0, 102, 102,
	102, 102, 102, 0, 0, 0, 0, 0, 955, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	349, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1066, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 892, 0, 349, 0, 0,
	0, 1093, 1094, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 349, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 906, 0, 0,
	0, 349, 349, 0, 0, 0, 349, 0, 0, 349,
	0, 0, 0, 0, 349, 460, 0, 0, 0, 0,
	0, 461, 102, 102, 102, 102, 102, 498, 0, 498,
	0, 0, 0, 0, 1397, 0, 0, 102, 0, 0,
	0, 1156, 919, 922, 923, 924, 925, 926, 927, 102,
	928, 929, 930, 931, 932, 933, 934, 0, 907, 908,
	909, 910, 886, 890, 920, 887, 893, 889, 891, 888,
	0, 894, 895, 896, 897, 898, 899, 900, 901, 902,
	903, 904, 911, 912, 913, 914, 915, 916, 917, 918,
	0, 498, 0, 498, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	102, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 498, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 921, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	102, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	349, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 461, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 460, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 498, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 102, 0, 0, 0, 0, 0, 0, 0, 102,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1472, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 498, 102, 498, 498, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	102, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 498, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 460, 0, 0, 1597, 1599, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 102, 0, 0, 0, 0,
	0, 0, 1599, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 498, 498, 0, 498, 1626, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1156, 0, 1156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 102, 0, 1668, 0, 0, 0, 1672, 0, 0,
	0, 0, 0, 0, 1676, 0, 0, 1681, 1682, 1683,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 461, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 102, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1734, 1734, 1734, 0,
	0, 0, 0, 0, 0, 498, 0, 0, 0, 0,
	0, 0, 0, 1734, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 498, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1792, 1793, 0, 1794, 0,
	0, 1734, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1626, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1626, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1824, 0, 0, 0,
	0, 0, 0, 1734, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1851, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1626, 0, 0, 0, 0, 0,
	0, 498, 498, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 460, 0,
	0, 1878, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1888, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1626, 0,
	0, 0, 0, 0, 0, 610, 591, 1734, 552, 613,
	526, 542, 624, 543, 546, 582, 513, 564, 197, 540,
	0, 529, 504, 536, 505, 527, 554, 141, 525, 593,
	567, 612, 166, 578, 611, 560, 0, 619, 169, 575,
	0, 244, 184, 0, 0, 556, 599, 562, 589, 551,
	583, 519, 574, 614, 541, 580, 615, 0, 0, 0,
	484, 0, 1183, 1184, 0, 0, 0, 0, 0, 127,
	0, 577, 609, 538, 579, 581, 502, 576, 0, 508,
	514, 623, 605, 532, 533, 534, 1422, 0, 0, 0,
	0, 0, 0, 555, 563, 586, 549, 0, 0, 0,
	0, 0, 0, 0, 0, 530, 0, 573, 0, 0,
	0, 515, 509, 0, 0, 553, 0, 0, 0, 518,
	0, 531, 587, 0, 500, 149, 0, 0, 590, 604,
	550, 0, 278, 608, 548, 547, 214, 0, 249, 152,
	167, 121, 106, 116, 0, 151, 193, 223, 231, 539,
	501, 594, 528, 537, 135, 535, 225, 201, 269, 0,
	570, 206, 224, 170, 258, 216, 267, 268, 279, 280,
	253, 276, 284, 241, 0, 0, 0, 0, 0, 0,
	122, 254, 183, 188, 131, 133, 132, 117, 236, 256,
	126, 134, 245, 250, 109, 252, 266, 128, 235, 111,
	264, 248, 181, 161, 162, 110, 0, 221, 140, 148,
	137, 196, 0, 0, 0, 261, 262, 136, 287, 118,
	275, 113, 119, 274, 190, 0, 0, 0, 257, 265,
	182, 175, 0, 112, 263, 180, 174, 165, 144, 154,
	211, 172, 212, 155, 186, 185, 187, 0, 506, 0,
	246, 272, 288, 124, 524, 0, 255, 282, 283, 0,
	0, 125, 147, 143, 210, 189, 120, 157, 243, 164,
	171, 220, 286, 200, 226, 129, 271, 242, 522, 523,
	520, 0, 521, 565, 566, 616, 617, 618, 588, 516,
	0, 600, 601, 0, 592, 606, 607, 584, 625, 544,
	545, 507, 510, 511, 512, 517, 557, 558, 569, 572,
	597, 596, 595, 598, 602, 621, 620, 622, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 568,
	105, 114, 168, 285, 218, 146, 273, 503, 139, 0,
	0, 559, 561, 571, 585, 107, 108, 115, 123, 130,
	138, 142, 145, 150, 153, 156, 158, 159, 160, 163,
	173, 176, 177, 178, 179, 191, 192, 194, 195, 198,
	199, 202, 203, 204, 205, 207, 208, 209, 213, 215,
	217, 219, 222, 227, 228, 229, 230, 232, 233, 234,
	237, 238, 239, 240, 247, 251, 259, 260, 270, 277,
	281, 603, 610, 591, 0, 552, 613, 526, 542, 624,
	543, 546, 582, 513, 564, 197, 540, 0, 529, 504,
	536, 505, 527, 554, 141, 525, 593, 567, 612, 166,
	578, 611, 560, 0, 619, 169, 575, 0, 244, 184,
	0, 0, 556, 599, 562, 589, 551, 583, 519, 574,
	614, 541, 580, 615, 0, 0, 0, 484, 0, 1183,
	1184, 0, 0, 0, 0, 0, 127, 0, 577, 609,
	538, 579, 581, 502, 576, 0, 508, 514, 623, 605,
	532, 533, 534, 0, 0, 0, 0, 0, 0, 0,
	555, 563, 586, 549, 0, 0, 0, 0, 0, 0,
	0, 0, 530, 0, 573, 0, 0, 0, 515, 509,
	0, 0, 553, 0, 0, 0, 518, 0, 531, 587,
	0, 500, 149, 0, 0, 590, 604, 550, 0, 278,
	608, 548, 547, 214, 0, 249, 152, 167, 121, 106,
	116, 0, 151, 193, 223, 231, 539, 501, 594, 528,
	537, 135, 535, 225, 201, 269, 0, 570, 206, 224,
	170, 258, 216, 267, 268, 279, 280, 253, 276, 284,
	241, 0, 0, 0, 0, 0, 0, 122, 254, 183,
	188, 131, 133, 132, 117, 236, 256, 126, 134, 245,
	250, 109, 252, 266, 128, 235, 111, 264, 248, 181,
	161, 162, 110, 0, 221, 140, 148, 137, 196, 0,
	0, 0, 261, 262, 136, 287, 118, 275, 113, 119,
	274, 190, 0, 0, 0, 257, 265, 182, 175, 0,
	112, 263, 180, 174, 165, 144, 154, 211, 172, 212,
	155, 186, 185, 187, 0, 506, 0, 246, 272, 288,
	124, 524, 0, 255, 282, 283, 0, 0, 125, 147,
	143, 210, 189, 120, 157, 243, 164, 171, 220, 286,
	200, 226, 129, 271, 242, 522, 523, 520, 0, 521,
	565, 566, 616, 617, 618, 588, 516, 0, 600, 601,
	0, 592, 606, 607, 584, 625, 544, 545, 507, 510,
	511, 512, 517, 557, 558, 569, 572, 597, 596, 595,
	598, 602, 621, 620, 622, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 568, 105, 114, 168,
	285, 218, 146, 273, 503, 139, 0, 0, 559, 561,
	571, 585, 107, 108, 115, 123, 130, 138, 142, 145,
	150, 153, 156, 158, 159, 160, 163, 173, 176, 177,
	178, 179, 191, 192, 194, 195, 198, 199, 202, 203,
	204, 205, 207, 208, 209, 213, 215, 217, 219, 222,
	227, 228, 229, 230, 232, 233, 234, 237, 238, 239,
	240, 247, 251, 259, 260, 270, 277, 281, 603, 610,
	591, 0, 552, 613, 526, 542, 624, 543, 546, 582,
	513, 564, 197, 540, 0, 529, 504, 536, 505, 527,
	554, 141, 525, 593, 567, 612, 166, 578, 611, 560,
	0, 619, 169, 575, 0, 244, 184, 0, 0, 556,
	599, 562, 589, 551, 583, 519, 574, 614, 541, 580,
	615, 0, 0, 0, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 127, 0, 577, 609, 538, 579, 581,
	502, 576, 0, 508, 514, 623, 605, 532, 533, 534,
	0, 0, 0, 0, 0, 0, 0, 555, 563, 586,
	549, 0, 0, 0, 0, 0, 0, 1531, 0, 530,
	0, 573, 0, 0, 0, 515, 509, 0, 0, 553,
	0, 0, 0, 518, 0, 531, 587, 0, 500, 149,
	0, 0, 590, 604, 550, 0, 278, 608, 548, 547,
	214, 0, 249, 152, 167, 121, 106, 116, 0, 151,
	193, 223, 231, 539, 501, 594, 528, 537, 135, 535,
	225, 201, 269, 0, 570, 206, 224, 170, 258, 216,
	267, 268, 279, 280, 253, 276, 284, 241, 0, 0,
	0, 0, 0, 0, 122, 254, 183, 188, 131, 133,
	132, 117, 236, 256, 126, 134, 245, 250, 109, 252,
	266, 128, 235, 111, 264, 248, 181, 161, 162, 110,
	0, 221, 140, 148, 137, 196, 0, 0, 0, 261,
	262, 136, 287, 118, 275, 113, 119, 274, 190, 0,
	0, 0, 257, 265, 182, 175, 0, 112, 263, 180,
	174, 165, 144, 154, 211, 172, 212, 155, 186, 185,
	187, 0, 506, 0, 246, 272, 288, 124, 524, 0,
	255, 282, 283, 0, 0, 125, 147, 143, 210, 189,
	120, 157, 243, 164, 171, 220, 286, 200, 226, 129,
	271, 242, 522, 523, 520, 0, 521, 565, 566, 616,
	617, 618, 588, 516, 0, 600, 601, 0, 592, 606,
	607, 584, 625, 544, 545, 507, 510, 511, 512, 517,
	557, 558, 569, 572, 597, 596, 595, 598, 602, 621,
	620, 622, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 568, 105, 114, 168, 285, 218, 146,
	273, 503, 139, 0, 0, 559, 561, 571, 585, 107,
	108, 115, 123, 130, 138, 142, 145, 150, 153, 156,
	158, 159, 160, 163, 173, 176, 177, 178, 179, 191,
	192, 194, 195, 198, 199, 202, 203, 204, 205, 207,
	208, 209, 213, 215, 217, 219, 222, 227, 228, 229,
	230, 232, 233, 234, 237, 238, 239, 240, 247, 251,
	259, 260, 270, 277, 281, 603, 610, 591, 0, 552,
	613, 526, 542, 624, 543, 546, 582, 513, 564, 197,
	540, 0, 529, 504, 536, 505, 527, 554, 141, 525,
	593, 567, 612, 166, 578, 611, 560, 0, 619, 169,
	575, 0, 244, 184, 0, 0, 556, 599, 562, 589,
	551, 583, 519, 574, 614, 541, 580, 615, 63, 0,
	0, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 0, 577, 609, 538, 579, 581, 502, 576, 0,
	508, 514, 623, 605, 532, 533, 534, 0, 0, 0,
	0, 0, 0, 0, 555, 563, 586, 549, 0, 0,
	0, 0, 0, 0, 0, 0, 530, 0, 573, 0,
	0, 0, 515, 509, 0, 0, 553, 0, 0, 0,
	518, 0, 531, 587, 0, 500, 149, 0, 0, 590,
	604, 550, 0, 278, 608, 548, 547, 214, 0, 249,
	152, 167, 121, 106, 116, 0, 151, 193, 223, 231,
	539, 501, 594, 528, 537, 135, 535, 225, 201, 269,
	0, 570, 206, 224, 170, 258, 216, 267, 268, 279,
	280, 253, 276, 284, 241, 0, 0, 0, 0, 0,
	0, 122, 254, 183, 188, 131, 133, 132, 117, 236,
	256, 126, 134, 245, 250, 109, 252, 266, 128, 235,
	111, 264, 248, 181, 161, 162, 110, 0, 221, 140,
	148, 137, 196, 0, 0, 0, 261, 262, 136, 287,
	118, 275, 113, 119, 274, 190, 0, 0, 0, 257,
	265, 182, 175, 0, 112, 263, 180, 174, 165, 144,
	154, 211, 172, 212, 155, 186, 185, 187, 0, 506,
	0, 246, 272, 288, 124, 524, 0, 255, 282, 283,
	0, 0, 125, 147, 143, 210, 189, 120, 157, 243,
	164, 171, 220, 286, 200, 226, 129, 271, 242, 522,
	523, 520, 0, 521, 565, 566, 616, 617, 618, 588,
	516, 0, 600, 601, 0, 592, 606, 607, 584, 625,
	544, 545, 507, 510, 511, 512, 517, 557, 558, 569,
	572, 597, 596, 595, 598, 602, 621, 620, 622, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	568, 105, 114, 168, 285, 218, 146, 273, 503, 139,
	0, 0, 559, 561, 571, 585, 107, 108, 115, 123,
	130, 138, 142, 145, 150, 153, 156, 158, 159, 160,
	163, 173, 176, 177, 178, 179, 191, 192, 194, 195,
	198, 199, 202, 203, 204, 205, 207, 208, 209, 213,
	215, 217, 219, 222, 227, 228, 229, 230, 232, 233,
	234, 237, 238, 239, 240, 247, 251, 259, 260, 270,
	277, 281, 603, 610, 591, 0, 552, 613, 526, 542,
	624, 543, 546, 582, 513, 564, 197, 540, 0, 529,
	504, 536, 505, 527, 554, 141, 525, 593, 567, 612,
	166, 578, 611, 560, 0, 619, 169, 575, 0, 244,
	184, 0, 0, 556, 599, 562, 589, 551, 583, 519,
	574, 614, 541, 580, 615, 0, 0, 0, 103, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 0, 577,
	609, 538, 579, 581, 502, 576, 0, 508, 514, 623,
	605, 532, 533, 534, 0, 0, 0, 0, 0, 0,
	0, 555, 563, 586, 549, 0, 0, 0, 0, 0,
	0, 1165, 0, 530, 0, 573, 0, 0, 0, 515,
	509, 0, 0, 553, 0, 0, 0, 518, 0, 531,
	587, 0, 500, 149, 0, 0, 590, 604, 550, 0,
	278, 608, 548, 547, 214, 0, 249, 152, 167, 121,
	106, 116, 0, 151, 193, 223, 231, 539, 501, 594,
	528, 537, 135, 535, 225, 201, 269, 0, 570, 206,
	224, 170, 258, 216, 267, 268, 279, 280, 253, 276,
	284, 241, 0, 0, 0, 0, 0, 0, 122, 254,
	183, 188, 131, 133, 132, 117, 236, 256, 126, 134,
	245, 250, 109, 252, 266, 128, 235, 111, 264, 248,
	181, 161, 162, 110, 0, 221, 140, 148, 137, 196,
	0, 0, 0, 261, 262, 136, 287, 118, 275, 113,
	119, 274, 190, 0, 0, 0, 257, 265, 182, 175,
	0, 112, 263, 180, 174, 165, 144, 154, 211, 172,
	212, 155, 186, 185, 187, 0, 506, 0, 246, 272,
	288, 124, 524, 0, 255, 282, 283, 0, 0, 125,
	147, 143, 210, 189, 120, 157, 243, 164, 171, 220,
	286, 200, 226, 129, 271, 242, 522, 523, 520, 0,
	521, 565, 566, 616, 617, 618, 588, 516, 0, 600,
	601, 0, 592, 606, 607, 584, 625, 544, 545, 507,
	510, 511, 512, 517, 557, 558, 569, 572, 597, 596,
	595, 598, 602, 621, 620, 622, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 568, 105, 114,
	168, 285, 218, 146, 273, 503, 139, 0, 0, 559,
	561, 571, 585, 107, 108, 115, 123, 130, 138, 142,
	145, 150, 153, 156, 158, 159, 160, 163, 173, 176,
	177, 178, 179, 191, 192, 194, 195, 198, 199, 202,
	203, 204, 205, 207, 208, 209, 213, 215, 217, 219,
	222, 227, 228, 229, 230, 232, 233, 234, 237, 238,
	239, 240, 247, 251, 259, 260, 270, 277, 281, 603,
	610, 591, 0, 552, 613, 526, 542, 624, 543, 546,
	582, 513, 564, 197, 540, 0, 529, 504, 536, 505,
	527, 554, 141, 525, 593, 567, 612, 166, 578, 611,
	560, 0, 619, 169, 575, 0, 244, 184, 0, 0,
	556, 599, 562, 589, 551, 583, 519, 574, 614, 541,
	580, 615, 0, 0, 0, 354, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 0, 577, 609, 538, 579,
	581, 502, 576, 0, 508, 514, 623, 605, 532, 533,
	534, 0, 0, 0, 0, 0, 0, 0, 555, 563,
	586, 549, 0, 0, 0, 0, 0, 0, 1032, 0,
	530, 0, 573, 0, 0, 0, 515, 509, 0, 0,
	553, 0, 0, 0, 518, 0, 531, 587, 0, 500,
	149, 0, 0, 590, 604, 550, 0, 278, 608, 548,
	547, 214, 0, 249, 152, 167, 121, 106, 116, 0,
	151, 193, 223, 231, 539, 501, 594, 528, 537, 135,
	535, 225, 201, 269, 0, 570, 206, 224, 170, 258,
	216, 267, 268, 279, 280, 253, 276, 284, 241, 0,
	0, 0, 0, 0, 0, 122, 254, 183, 188, 131,
	133, 132, 117, 236, 256, 126, 134, 245, 250, 109,
	252, 266, 128, 235, 111, 264, 248, 181, 161, 162,
	110, 0, 221, 140, 148, 137, 196, 0, 0, 0,
	261, 262, 136, 287, 118, 275, 113, 119, 274, 190,
	0, 0, 0, 257, 265, 182, 175, 0, 112, 263,
	180, 174, 165, 144, 154, 211, 172, 212, 155, 186,
	185, 187, 0, 506, 0, 246, 272, 288, 124, 524,
	0, 255, 282, 283, 0, 0, 125, 147, 143, 210,
	189, 120, 157, 243, 164, 171, 220, 286, 200, 226,
	129, 271, 242, 522, 523, 520, 0, 521, 565, 566,
	616, 617, 618, 588, 516, 0, 600, 601, 0, 592,
	606, 607, 584, 625, 544, 545, 507, 510, 511, 512,
	517, 557, 558, 569, 572, 597, 596, 595, 598, 602,
	621, 620, 622, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 568, 105, 114, 168, 285, 218,
	146, 273, 503, 139, 0, 0, 559, 561, 571, 585,
	107, 108, 115, 123, 130, 138, 142, 145, 150, 153,
	156, 158, 159, 160, 163, 173, 176, 177, 178, 179,
	191, 192, 194, 195, 198, 199, 202, 203, 204, 205,
	207, 208, 209, 213, 215, 217, 219, 222, 227, 228,
	229, 230, 232, 233, 234, 237, 238, 239, 240, 247,
	251, 259, 260, 270, 277, 281, 603, 610, 591, 0,
	552, 613, 526, 542, 624, 543, 546, 582, 513, 564,
	197, 540, 0, 529, 504, 536, 505, 527, 554, 141,
	525, 593, 567, 612, 166, 578, 611, 560, 0, 619,
	169, 575, 0, 244, 184, 0, 0, 556, 599, 562,
	589, 551, 583, 519, 574, 614, 541, 580, 615, 0,
	0, 0, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 0, 577, 609, 538, 579, 581, 502, 576,
	0, 508, 514, 623, 605, 532, 533, 534, 0, 0,
	0, 0, 0, 0, 0, 555, 563, 586, 549, 0,
	0, 0, 0, 0, 0, 0, 0, 530, 0, 573,
	0, 0, 0, 515, 509, 0, 0, 553, 0, 0,
	0, 518, 0, 531, 587, 0, 500, 149, 0, 0,
	590, 604, 550, 0, 278, 608, 548, 547, 214, 0,
	249, 152, 167, 121, 106, 116, 0, 151, 193, 223,
	231, 539, 501, 594, 528, 537, 135, 535, 225, 201,
	269, 0, 570, 206, 224, 170, 258, 216, 267, 268,
	279, 280, 253, 276, 284, 241, 0, 0, 0, 0,
	0, 0, 122, 254, 183, 188, 131, 133, 132, 117,
	236, 256, 126, 134, 245, 250, 109, 252, 266, 128,
	235, 111, 264, 248, 181, 161, 162, 110, 0, 221,
	140, 148, 137, 196, 0, 0, 0, 261, 262, 136,
	287, 118, 275, 113, 119, 274, 190, 0, 0, 0,
	257, 265, 182, 175, 0, 112, 263, 180, 174, 165,
	144, 154, 211, 172, 212, 155, 186, 185, 187, 0,
	506, 0, 246, 272, 288, 124, 524, 0, 255, 282,
	283, 0, 0, 125, 147, 143, 210, 189, 120, 157,
	243, 164, 171, 220, 286, 200, 226, 129, 271, 242,
	522, 523, 520, 0, 521, 565, 566, 616, 617, 618,
	588, 516, 0, 600, 601, 0, 592, 606, 607, 584,
	625, 544, 545, 507, 510, 511, 512, 517, 557, 558,
	569, 572, 597, 596, 595, 598, 602, 621, 620, 622,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 568, 105, 114, 168, 285, 218, 146, 273, 503,
	139, 0, 0, 559, 561, 571, 585, 107, 108, 115,
	123, 130, 138, 142, 145, 150, 153, 156, 158, 159,
	160, 163, 173, 176, 177, 178, 179, 191, 192, 194,
	195, 198, 199, 202, 203, 204, 205, 207, 208, 209,
	213, 215, 217, 219, 222, 227, 228, 229, 230, 232,
	233, 234, 237, 238, 239, 240, 247, 251, 259, 260,
	270, 277, 281, 603, 610, 591, 0, 552, 613, 526,
	542, 624, 543, 546, 582, 513, 564, 197, 540, 0,
	529, 504, 536, 505, 527, 554, 141, 525, 593, 567,
	612, 166, 578, 611, 560, 0, 619, 169, 575, 0,
	244, 184, 0, 0, 556, 599, 562, 589, 551, 583,
	519, 574, 614, 541, 580, 615, 0, 0, 0, 354,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 0,
	577, 609, 538, 579, 581, 502, 576, 0, 508, 514,
	623, 605, 532, 533, 534, 0, 0, 0, 0, 0,
	0, 0, 555, 563, 586, 549, 0, 0, 0, 0,
	0, 0, 0, 0, 530, 0, 573, 0, 0, 0,
	515, 509, 0, 0, 553, 0, 0, 0, 518, 0,
	531, 587, 0, 500, 149, 0, 0, 590, 604, 550,
	0, 278, 608, 548, 547, 214, 0, 249, 152, 167,
	121, 106, 116, 0, 151, 193, 223, 231, 539, 501,
	594, 528, 537, 135, 535, 225, 201, 269, 0, 570,
	206, 224, 170, 258, 216, 267, 268, 279, 280, 253,
	276, 284, 241, 0, 0, 0, 0, 0, 0, 122,
	254, 183, 188, 131, 133, 132, 117, 236, 256, 126,
	134, 245, 250, 109, 252, 266, 128, 235, 111, 264,
	248, 181, 161, 162, 110, 0, 221, 140, 148, 137,
	196, 0, 0, 0, 261, 262, 136, 287, 118, 275,
	113, 119, 274, 190, 0, 0, 0, 257, 265, 182,
	175, 0, 112, 263, 180, 174, 165, 144, 154, 211,
	172, 212, 155, 186, 185, 187, 0, 506, 0, 246,
	272, 288, 124, 524, 0, 255, 282, 283, 0, 0,
	125, 147, 143, 210, 189, 120, 157, 243, 164, 171,
	220, 286, 200, 226, 129, 271, 242, 522, 523, 520,
	0, 521, 565, 566, 616, 617, 618, 588, 516, 0,
	600, 601, 0, 592, 606, 607, 584, 625, 544, 545,
	507, 510, 511, 512, 517, 557, 558, 569, 572, 597,
	596, 595, 598, 602, 621, 620, 622, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 568, 105,
	114, 168, 285, 218, 146, 273, 503, 139, 0, 0,
	559, 561, 571, 585, 107, 108, 115, 123, 130, 138,
	142, 145, 150, 153, 156, 158, 159, 160, 163, 173,
	176, 177, 178, 179, 191, 192, 194, 195, 198, 199,
	202, 203, 204, 205, 207, 208, 209, 213, 215, 217,
	219, 222, 227, 228, 229, 230, 232, 233, 234, 237,
	238, 239, 240, 247, 251, 259, 260, 270, 277, 281,
	603, 610, 591, 0, 552, 613, 526, 542, 624, 543,
	546, 582, 513, 564, 197, 540, 0, 529, 504, 536,
	505, 527, 554, 141, 525, 593, 567, 612, 166, 578,
	611, 560, 0, 619, 169, 575, 0, 244, 184, 0,
	0, 556, 599, 562, 589, 551, 583, 519, 574, 614,
	541, 580, 615, 0, 0, 0, 103, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 0, 577, 609, 538,
	579, 581, 502, 576, 0, 508, 514, 623, 605, 532,
	533, 534, 0, 0, 0, 0, 0, 0, 0, 555,
	563, 586, 549, 0, 0, 0, 0, 0, 0, 0,
	0, 530, 0, 573, 0, 0, 0, 515, 509, 0,
	0, 553, 0, 0, 0, 518, 0, 531, 587, 0,
	500, 149, 0, 0, 590, 604, 550, 0, 278, 608,
	548, 547, 214, 0, 249, 152, 167, 121, 106, 116,
	0, 151, 193, 223, 231, 539, 501, 594, 528, 537,
	135, 535, 225, 201, 269, 0, 570, 206, 224, 170,
	258, 216, 267, 268, 279, 280, 253, 276, 284, 241,
	0, 0, 0, 0, 0, 0, 122, 254, 183, 188,
	131, 133, 132, 117, 236, 256, 126, 134, 245, 250,
	109, 252, 266, 128, 235, 111, 264, 248, 181, 161,
	162, 110, 0, 221, 140, 148, 137, 196, 0, 0,
	0, 261, 262, 136, 287, 118, 275, 113, 119, 274,
	190, 0, 0, 0, 257, 265, 182, 175, 0, 112,
	263, 180, 174, 165, 144, 154, 211, 172, 212, 155,
	186, 185, 187, 0, 506, 0, 246, 272, 288, 124,
	524, 0, 255, 282, 283, 0, 0, 125, 147, 143,
	210, 189, 120, 157, 243, 164, 171, 220, 286, 200,
	226, 129, 271, 242, 522, 523, 520, 0, 521, 565,
	566, 616, 617, 618, 588, 516, 0, 600, 601, 0,
	592, 606, 607, 584, 625, 544, 545, 507, 510, 511,
	512, 517, 557, 558, 569, 572, 597, 596, 595, 598,
	602, 621, 620, 622, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 568, 105, 114, 168, 285,
	218, 146, 273, 503, 139, 0, 0, 559, 561, 571,
	585, 107, 108, 115, 123, 130, 138, 142, 145, 150,
	153, 156, 158, 159, 160, 163, 173, 176, 177, 178,
	179, 191, 192, 194, 195, 198, 199, 202, 203, 204,
	205, 207, 208, 209, 213, 215, 217, 219, 222, 227,
	228, 229, 230, 232, 233, 234, 237, 238, 239, 240,
	247, 251, 259, 260, 270, 277, 281, 603, 197, 0,
	0, 0, 0, 356, 0, 0, 0, 141, 353, 0,
	0, 0, 166, 0, 0, 0, 0, 400, 169, 0,
	0, 244, 184, 0, 0, 0, 0, 389, 390, 0,
	0, 0, 0, 0, 0, 1172, 0, 63, 0, 0,
	354, 377, 376, 379, 380, 381, 382, 0, 0, 127,
	378, 383, 384, 385, 1173, 0, 0, 351, 368, 0,
	399, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 365, 366, 0, 0, 0, 0, 414, 0, 367,
	0, 0, 362, 363, 364, 369, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 149, 0, 0, 391, 0,
	0, 0, 278, 0, 0, 412, 214, 0, 249, 152,
	167, 121, 106, 116, 0, 151, 193, 223, 231, 397,
	0, 0, 0, 0, 135, 0, 225, 201, 269, 0,
	0, 206, 224, 170, 258, 216, 267, 268, 279, 280,
	253, 276, 284, 241, 0, 0, 0, 0, 0, 0,
	122, 254, 183, 188, 131, 133, 132, 117, 236, 256,
	126, 134, 245, 250, 109, 252, 266, 128, 235, 111,
	264, 248, 181, 161, 162, 110, 0, 221, 140, 148,
	137, 196, 0, 0, 0, 261, 262, 136, 287, 118,
	275, 113, 119, 274, 190, 0, 0, 0, 257, 265,
	182, 175, 0, 112, 263, 180, 174, 165, 144, 154,
	211, 172, 212, 155, 186, 185, 187, 0, 0, 0,
	246, 272, 288, 124, 0, 0, 255, 282, 283, 0,
	0, 125, 147, 143, 210, 189, 120, 157, 243, 164,
	171, 220, 286, 200, 226, 129, 271, 242, 401, 413,
	407, 409, 408, 405, 406, 404, 403, 402, 415, 392,
	393, 394, 395, 398, 0, 410, 411, 0, 0, 0,
	0, 428, 429, 430, 431, 432, 433, 434, 427, 435,
	436, 437, 438, 439, 440, 441, 442, 443, 416, 417,
	418, 419, 420, 421, 422, 423, 426, 424, 425, 396,
	105, 114, 168, 285, 218, 146, 273, 0, 139, 0,
	0, 0, 0, 0, 0, 107, 108, 115, 123, 130,
	138, 142, 145, 150, 153, 156, 158, 159, 160, 163,
	173, 176, 177, 178, 179, 191, 192, 194, 195, 198,
	199, 202, 203, 204, 205, 207, 208, 209, 213, 215,
	217, 219, 222, 227, 228, 229, 230, 232, 233, 234,
	237, 238, 239, 240, 247, 251, 259, 260, 270, 277,
	281, 197, 0, 0, 0, 0, 356, 0, 0, 0,
	141, 353, 0, 0, 0, 166, 0, 0, 0, 0,
	400, 169, 0, 0, 244, 184, 0, 0, 0, 0,
	389, 390, 0, 0, 0, 0, 0, 0, 0, 0,
	63, 0, 669, 354, 377, 376, 379, 380, 381, 382,
	0, 0, 127, 378, 383, 384, 385, 0, 0, 0,
	351, 368, 0, 399, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 365, 366, 0, 0, 0, 0,
	414, 0, 367, 0, 0, 362, 363, 364, 369, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 149, 0,
	0, 391, 0, 0, 0, 278, 0, 0, 412, 214,
	0, 249, 152, 167, 121, 106, 116, 0, 151, 193,
	223, 231, 397, 0, 0, 0, 0, 135, 0, 225,
	201, 269, 0, 0, 206, 224, 170, 258, 216, 267,
	268, 279, 280, 253, 276, 284, 241, 0, 0, 0,
	0, 0, 0, 122, 254, 183, 188, 131, 133, 132,
	117, 236, 256, 126, 134, 245, 250, 109, 252, 266,
	128, 235, 111, 264, 248, 181, 161, 162, 110, 0,
	221, 140, 148, 137, 196, 0, 0, 0, 261, 262,
	136, 287, 118, 275, 113, 119, 274, 190, 0, 0,
	0, 257, 265, 182, 175, 0, 112, 263, 180, 174,
	165, 144, 154, 211, 172, 212, 155, 186, 185, 187,
	0, 0, 0, 246, 272, 288, 124, 0, 0, 255,
	282, 283, 0, 0, 125, 147, 143, 210, 189, 120,
	157, 243, 164, 171, 220, 286, 200, 226, 129, 271,
	242, 401, 413, 407, 409, 408, 405, 406, 404, 403,
	402, 415, 392, 393, 394, 395, 398, 0, 410, 411,
	0, 0, 0, 0, 428, 429, 430, 431, 432, 433,
	434, 427, 435, 436, 437, 438, 439, 440, 441, 442,
	443, 416, 417, 418, 419, 420, 421, 422, 423, 426,
	424, 425, 396, 105, 114, 168, 285, 218, 146, 273,
	0, 139, 0, 0, 0, 0, 0, 0, 107, 108,
	115, 123, 130, 138, 142, 145, 150, 153, 156, 158,
	159, 160, 163, 173, 176, 177, 178, 179, 191, 192,
	194, 195, 198, 199, 202, 203, 204, 205, 207, 208,
	209, 213, 215, 217, 219, 222, 227, 228, 229, 230,
	232, 233, 234, 237, 238, 239, 240, 247, 251, 259,
	260, 270, 277, 281, 197, 0, 0, 0, 0, 356,
	0, 0, 0, 141, 353, 0, 0, 0, 166, 0,
	0, 0, 0, 400, 169, 0, 0, 244, 184, 0,
	0, 0, 0, 389, 390, 0, 0, 0, 0, 0,
	0, 0, 0, 63, 0, 0, 354, 377, 376, 379,
	380, 381, 382, 0, 0, 127, 378, 383, 384, 385,
	0, 0, 0, 351, 368, 0, 399, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 365, 366, 347,
	0, 0, 0, 414, 0, 367, 0, 0, 362, 363,
	364, 369, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 149, 0, 0, 391, 0, 0, 0, 278, 0,
	0, 412, 214, 0, 249, 152, 167, 121, 106, 116,
	0, 151, 193, 223, 231, 397, 0, 0, 0, 0,
	135, 0, 225, 201, 269, 0, 0, 206, 224, 170,
	258, 216, 267, 268, 279, 280, 253, 276, 284, 241,
	0, 0, 0, 0, 0, 0, 122, 254, 183, 188,
	131, 133, 132, 117, 236, 256, 126, 134, 245, 250,
	109, 252, 266, 128, 235, 111, 264, 248, 181, 161,
	162, 110, 0, 221, 140, 148, 137, 196, 0, 0,
	0, 261, 262, 136, 287, 118, 275, 113, 119, 274,
	190, 0, 0, 0, 257, 265, 182, 175, 0, 112,
	263, 180, 174, 165, 144, 154, 211, 172, 212, 155,
	186, 185, 187, 0, 0, 0, 246, 272, 288, 124,
	0, 0, 255, 282, 283, 0, 0, 125, 147, 143,
	210, 189, 120, 157, 243, 164, 171, 220, 286, 200,
	226, 129, 271, 242, 401, 413, 407, 409, 408, 405,
	406, 404, 403, 402, 415, 392, 393, 394, 395, 398,
	0, 410, 411, 0, 0, 0, 0, 428, 429, 430,
	431, 432, 433, 434, 427, 435, 436, 437, 438, 439,
	440, 441, 442, 443, 416, 417, 418, 419, 420, 421,
	422, 423, 426, 424, 425, 396, 105, 114, 168, 285,
	218, 146, 273, 0, 139, 0, 0, 0, 0, 0,
	0, 107, 108, 115, 123, 130, 138, 142, 145, 150,
	153, 156, 158, 159, 160, 163, 173, 176, 177, 178,
	179, 191, 192, 194, 195, 198, 199, 202, 203, 204,
	205, 207, 208, 209, 213, 215, 217, 219, 222, 227,
	228, 229, 230, 232, 233, 234, 237, 238, 239, 240,
	247, 251, 259, 260, 270, 277, 281, 197, 0, 0,
	0, 0, 356, 0, 0, 0, 141, 353, 0, 0,
	0, 166, 0, 0, 0, 0, 400, 169, 0, 0,
	244, 184, 0, 0, 0, 0, 389, 390, 0, 0,
	0, 0, 0, 0, 0, 0, 63, 0, 0, 354,
	377, 1082, 379, 380, 381, 382, 0, 0, 127, 378,
	383, 384, 385, 0, 0, 0, 351, 368, 0, 399,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	365, 366, 347, 0, 0, 0, 414, 0, 367, 0,
	0, 362, 363, 364, 369, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 149, 0, 0, 391, 0, 0,
	0, 278, 0, 0, 412, 214, 0, 249, 152, 167,
	121, 106, 116, 0, 151, 193, 223, 231, 397, 0,
	0, 0, 0, 135, 0, 225, 201, 269, 0, 0,
	206, 224, 170, 258, 216, 267, 268, 279, 280, 253,
	276, 284, 241, 0, 0, 0, 0, 0, 0, 122,
	254, 183, 188, 131, 133, 132, 117, 236, 256, 126,
	134, 245, 250, 109, 252, 266, 128, 235, 111, 264,
	248, 181, 161, 162, 110, 0, 221, 140, 148, 137,
	196, 0, 0, 0, 261, 262, 136, 287, 118, 275,
	113, 119, 274, 190, 0, 0, 0, 257, 265, 182,
	175, 0, 112, 263, 180, 174, 165, 144, 154, 211,
	172, 212, 155, 186, 185, 187, 0, 0, 0, 246,
	272, 288, 124, 0, 0, 255, 282, 283, 0, 0,
	125, 147, 143, 210, 189, 120, 157, 243, 164, 171,
	220, 286, 200, 226, 129, 271, 242, 401, 413, 407,
	409, 408, 405, 406, 404, 403, 402, 415, 392, 393,
	394, 395, 398, 0, 410, 411, 0, 0, 0, 0,
	428, 429, 430, 431, 432, 433, 434, 427, 435, 436,
	437, 438, 439, 440, 441, 442, 443, 416, 417, 418,
	419, 420, 421, 422, 423, 426, 424, 425, 396, 105,
	114, 168, 285, 218, 146, 273, 0, 139, 0, 0,
	0, 0, 0, 0, 107, 108, 115, 123, 130, 138,
	142, 145, 150, 153, 156, 158, 159, 160, 163, 173,
	176, 177, 178, 179, 191, 192, 194, 195, 198, 199,
	202, 203, 204, 205, 207, 208, 209, 213, 215, 217,
	219, 222, 227, 228, 229, 230, 232, 233, 234, 237,
	238, 239, 240, 247, 251, 259, 260, 270, 277, 281,
	197, 0, 0, 0, 0, 356, 0, 0, 0, 141,
	353, 0, 0, 0, 166, 0, 0, 0, 0, 400,
	169, 0, 0, 244, 184, 0, 0, 0, 0, 389,
	390, 0, 0, 0, 0, 0, 0, 0, 0, 63,
	0, 0, 354, 377, 1079, 379, 380, 381, 382, 0,
	0, 127, 378, 383, 384, 385, 0, 0, 0, 351,
	368, 0, 399, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 365, 366, 347, 0, 0, 0, 414,
	0, 367, 0, 0, 362, 363, 364, 369, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 149, 0, 0,
	391, 0, 0, 0, 278, 0, 0, 412, 214, 0,
	249, 152, 167, 121, 106, 116, 0, 151, 193, 223,
	231, 397, 0, 0, 0, 0, 135, 0, 225, 201,
	269, 0, 0, 206, 224, 170, 258, 216, 267, 268,
	279, 280, 253, 276, 284, 241, 0, 0, 0, 0,
	0, 0, 122, 254, 183, 188, 131, 133, 132, 117,
	236, 256, 126, 134, 245, 250, 109, 252, 266, 128,
	235, 111, 264, 248, 181, 161, 162, 110, 0, 221,
	140, 148, 137, 196, 0, 0, 0, 261, 262, 136,
	287, 118, 275, 113, 119, 274, 190, 0, 0, 0,
	257, 265, 182, 175, 0, 112, 263, 180, 174, 165,
	144, 154, 211, 172, 212, 155, 186, 185, 187, 0,
	0, 0, 246, 272, 288, 124, 0, 0, 255, 282,
	283, 0, 0, 125, 147, 143, 210, 189, 120, 157,
	243, 164, 171, 220, 286, 200, 226, 129, 271, 242,
	401, 413, 407, 409, 408, 405, 406, 404, 403, 402,
	415, 392, 393, 394, 395, 398, 0, 410, 411, 0,
	0, 0, 0, 428, 429, 430, 431, 432, 433, 434,
	427, 435, 436, 437, 438, 439, 440, 441, 442, 443,
	416, 417, 418, 419, 420, 421, 422, 423, 426, 424,
	425, 396, 105, 114, 168, 285, 218, 146, 273, 0,
	139, 0, 0, 0, 0, 0, 0, 107, 108, 115,
	123, 130, 138, 142, 145, 150, 153, 156, 158, 159,
	160, 163, 173, 176, 177, 178, 179, 191, 192, 194,
	195, 198, 199, 202, 203, 204, 205, 207, 208, 209,
	213, 215, 217, 219, 222, 227, 228, 229, 230, 232,
	233, 234, 237, 238, 239, 240, 247, 251, 259, 260,
	270, 277, 281, 27, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 197, 0, 0, 0, 0,
	356, 0, 0, 0, 141, 353, 0, 0, 0, 166,
	0, 0, 0, 0, 400, 169, 0, 0, 244, 184,
	0, 0, 0, 0, 389, 390, 0, 0, 0, 0,
	0, 0, 0, 0, 63, 0, 0, 354, 377, 376,
	379, 380, 381, 382, 0, 0, 127, 378, 383, 384,
	385, 0, 0, 0, 351, 368, 0, 399, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 365, 366,
	0, 0, 0, 0, 414, 0, 367, 0, 0, 362,
	363, 364, 369, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 149, 0, 0, 391, 0, 0, 0, 278,
	0, 0, 412, 214, 0, 249, 152, 167, 121, 106,
	116, 0, 151, 193, 223, 231, 397, 0, 0, 0,
	0, 135, 0, 225, 201, 269, 0, 0, 206, 224,
	170, 258, 216, 267, 268, 279, 280, 253, 276, 284,
	241, 0, 0, 0, 0, 0, 0, 122, 254, 183,
	188, 131, 133, 132, 117, 236, 256, 126, 134, 245,
	250, 109, 252, 266, 128, 235, 111, 264, 248, 181,
	161, 162, 110, 0, 221, 140, 148, 137, 196, 0,
	0, 0, 261, 262, 136, 287, 118, 275, 113, 119,
	274, 190, 0, 0, 0, 257, 265, 182, 175, 0,
	112, 263, 180, 174, 165, 144, 154, 211, 172, 212,
	155, 186, 185, 187, 0, 0, 0, 246, 272, 288,
	124, 0, 0, 255, 282, 283, 0, 0, 125, 147,
	143, 210, 189, 120, 157, 243, 164, 171, 220, 286,
	200, 226, 129, 271, 242, 401, 413, 407, 409, 408,
	405, 406, 404, 403, 402, 415, 392, 393, 394, 395,
	398, 0, 410, 411, 0, 0, 0, 0, 428, 429,
	430, 431, 432, 433, 434, 427, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 416, 417, 418, 419, 420,
	421, 422, 423, 426, 424, 425, 396, 105, 114, 168,
	285, 218, 146, 273, 0, 139, 0, 0, 0, 0,
	0, 0, 107, 108, 115, 123, 130, 138, 142, 145,
	150, 153, 156, 158, 159, 160, 163, 173, 176, 177,
	178, 179, 191, 192, 194, 195, 198, 199, 202, 203,
	204, 205, 207, 208, 209, 213, 215, 217, 219, 222,
	227, 228, 229, 230, 232, 233, 234, 237, 238, 239,
	240, 247, 251, 259, 260, 270, 277, 281, 197, 0,
	0, 0, 0, 356, 0, 0, 0, 141, 353, 0,
	0, 0, 166, 0, 0, 0, 0, 400, 169, 0,
	0, 244, 184, 0, 0, 0, 0, 389, 390, 0,
	0, 0, 0, 0, 0, 0, 0, 63, 0, 0,
	354, 377, 376, 379, 380, 381, 382, 0, 0, 127,
	378, 383, 384, 385, 0, 0, 0, 351, 368, 0,
	399, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 365, 366, 0, 0, 0, 0, 414, 0, 367,
	0, 0, 362, 363, 364, 369, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 149, 0, 0, 391, 0,
	0, 0, 278, 0, 0, 412, 214, 0, 249, 152,
	167, 121, 106, 116, 0, 151, 193, 223, 231, 397,
	0, 0, 0, 0, 135, 0, 225, 201, 269, 0,
	0, 206, 224, 170, 258, 216, 267, 268, 279, 280,
	253, 276, 284, 241, 0, 0, 0, 0, 0, 0,
	122, 254, 183, 188, 131, 133, 132, 117, 236, 256,
	126, 134, 245, 250, 109, 252, 266, 128, 235, 111,
	264, 248, 181, 161, 162, 110, 0, 221, 140, 148,
	137, 196, 0, 0, 0, 261, 262, 136, 287, 118,
	275, 113, 119, 274, 190, 0, 0, 0, 257, 265,
	182, 175, 0, 112, 263, 180, 174, 165, 144, 154,
	211, 172, 212, 155, 186, 185, 187, 0, 0, 0,
	246, 272, 288, 124, 0, 0, 255, 282, 283, 0,
	0, 125, 147, 143, 210, 189, 120, 157, 243, 164,
	171, 220, 286, 200, 226, 129, 271, 242, 401, 413,
	407, 409, 408, 405, 406, 404, 403, 402, 415, 392,
	393, 394, 395, 398, 0, 410, 411, 0, 0, 0,
	0, 428, 429, 430, 431, 432, 433, 434, 427, 435,
	436, 437, 438, 439, 440, 441, 442, 443, 416, 417,
	418, 419, 420, 421, 422, 423, 426, 424, 425, 396,
	105, 114, 168, 285, 218, 146, 273, 0, 139, 0,
	0, 0, 0, 0, 0, 107, 108, 115, 123, 130,
	138, 142, 145, 150, 153, 156, 158, 159, 160, 163,
	173, 176, 177, 178, 179, 191, 192, 194, 195, 198,
	199, 202, 203, 204, 205, 207, 208, 209, 213, 215,
	217, 219, 222, 227, 228, 229, 230, 232, 233, 234,
	237, 238, 239, 240, 247, 251, 259, 260, 270, 277,
	281, 197, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 0, 0, 0, 0, 166, 0, 0, 0, 0,
	400, 169, 0, 0, 244, 184, 0, 0, 0, 0,
	389, 390, 0, 0, 0, 0, 0, 0, 0, 0,
	63, 0, 0, 354, 377, 376, 379, 380, 381, 382,
	0, 0, 127, 378, 383, 384, 385, 0, 0, 0,
	0, 368, 0, 399, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 365, 366, 0, 0, 0, 0,
	414, 0, 367, 0, 0, 362, 363, 364, 369, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 149, 0,
	0, 391, 0, 0, 0, 278, 0, 0, 412, 214,
	0, 249, 152, 167, 121, 106, 116, 0, 151, 193,
	223, 231, 397, 0, 0, 0, 0, 135, 0, 225,
	201, 269, 0, 1951, 206, 224, 170, 258, 216, 267,
	268, 279, 280, 253, 276, 284, 241, 0, 0, 0,
	0, 0, 0, 122, 254, 183, 188, 131, 133, 132,
	117, 236, 256, 126, 134, 245, 250, 109, 252, 266,
	128, 235, 111, 264, 248, 181, 161, 162, 110, 0,
	221, 140, 148, 137, 196, 0, 0, 0, 261, 262,
	136, 287, 118, 275, 113, 119, 274, 190, 0, 0,
	0, 257, 265, 182, 175, 0, 112, 263, 180, 174,
	165, 144, 154, 211, 172, 212, 155, 186, 185, 187,
	0, 0, 0, 246, 272, 288, 124, 0, 0, 255,
	282, 283, 0, 0, 125, 147, 143, 210, 189, 120,
	157, 243, 164, 171, 220, 286, 200, 226, 129, 271,
	242, 401, 413, 407, 409, 408, 405, 406, 404, 403,
	402, 415, 392, 393, 394, 395, 398, 0, 410, 411,
	0, 0, 0, 0, 428, 429, 430, 431, 432, 433,
	434, 427, 435, 436, 437, 438, 439, 440, 441, 442,
	443, 416, 417, 418, 419, 420, 421, 422, 423, 426,
	424, 425, 396, 105, 114, 168, 285, 218, 146, 273,
	0, 139, 0, 0, 0, 0, 0, 0, 107, 108,
	115, 123, 130, 138, 142, 145, 150, 153, 156, 158,
	159, 160, 163, 173, 176, 177, 178, 179, 191, 192,
	194, 195, 198, 199, 202, 203, 204, 205, 207, 208,
	209, 213, 215, 217, 219, 222, 227, 228, 229, 230,
	232, 233, 234, 237, 238, 239, 240, 247, 251, 259,
	260, 270, 277, 281, 197, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 0, 0, 0, 166, 0,
	0, 0, 0, 400, 169, 0, 0, 244, 184, 0,
	0, 0, 0, 389, 390, 0, 0, 0, 0, 0,
	0, 0, 0, 63, 0, 669, 354, 377, 376, 379,
	380, 381, 382, 0, 0, 127, 378, 383, 384, 385,
	0, 0, 0, 0, 368, 0, 399, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 365, 366, 0,
	0, 0, 0, 414, 0, 367, 0, 0, 362, 363,
	364, 369, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 149, 0, 0, 391, 0, 0, 0, 278, 0,
	0, 412, 214, 0, 249, 152, 167, 121, 106, 116,
	0, 151, 193, 223, 231, 397, 0, 0, 0, 0,
	135, 0, 225, 201, 269, 0, 0, 206, 224, 170,
	258, 216, 267, 268, 279, 280, 253, 276, 284, 241,
	0, 0, 0, 0, 0, 0, 122, 254, 183, 188,
	131, 133, 132, 117, 236, 256, 126, 134, 245, 250,
	109, 252, 266, 128, 235, 111, 264, 248, 181, 161,
	162, 110, 0, 221, 140, 148, 137, 196, 0, 0,
	0, 261, 262, 136, 287, 118, 275, 113, 119, 274,
	190, 0, 0, 0, 257, 265, 182, 175, 0, 112,
	263, 180, 174, 165, 144, 154, 211, 172, 212, 155,
	186, 185, 187, 0, 0, 0, 246, 272, 288, 124,
	0, 0, 255, 282, 283, 0, 0, 125, 147, 143,
	210, 189, 120, 157, 243, 164, 171, 220, 286, 200,
	226, 129, 271, 242, 401, 413, 407, 409, 408, 405,
	406, 404, 403, 402, 415, 392, 393, 394, 395, 398,
	0, 410, 411, 0, 0, 0, 0, 428, 429, 430,
	431, 432, 433, 434, 427, 435, 436, 437, 438, 439,
	440, 441, 442, 443, 416, 417, 418, 419, 420, 421,
	422, 423, 426, 424, 425, 396, 105, 114, 168, 285,
	218, 146, 273, 0, 139, 0, 0, 0, 0, 0,
	0, 107, 108, 115, 123, 130, 138, 142, 145, 150,
	153, 156, 158, 159, 160, 163, 173, 176, 177, 178,
	179, 191, 192, 194, 195, 198, 199, 202, 203, 204,
	205, 207, 208, 209, 213, 215, 217, 219, 222, 227,
	228, 229, 230, 232, 233, 234, 237, 238, 239, 240,
	247, 251, 259, 260, 270, 277, 281, 197, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	0, 166, 0, 0, 0, 0, 400, 169, 0, 0,
	244, 184, 0, 0, 0, 0, 389, 390, 0, 0,
	0, 0, 0, 0, 0, 0, 63, 0, 0, 354,
	377, 376, 379, 380, 381, 382, 0, 0, 127, 378,
	383, 384, 385, 0, 0, 0, 0, 368, 0, 399,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	365, 366, 0, 0, 0, 0, 414, 0, 367, 0,
	0, 362, 363, 364, 369, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 149, 0, 0, 391, 0, 0,
	0, 278, 0, 0, 412, 214, 0, 249, 152, 167,
	121, 106, 116, 0, 151, 193, 223, 231, 397, 0,
	0, 0, 0, 135, 0, 225, 201, 269, 0, 0,
	206, 224, 170, 258, 216, 267, 268, 279, 280, 253,
	276, 284, 241, 0, 0, 0, 0, 0, 0, 122,
	254, 183, 188, 131, 133, 132, 117, 236, 256, 126,
	134, 245, 250, 109, 252, 266, 128, 235, 111, 264,
	248, 181, 161, 162, 110, 0, 221, 140, 148, 137,
	196, 0, 0, 0, 261, 262, 136, 287, 118, 275,
	113, 119, 274, 190, 0, 0, 0, 257, 265, 182,
	175, 0, 112, 263, 180, 174, 165, 144, 154, 211,
	172, 212, 155, 186, 185, 187, 0, 0, 0, 246,
	272, 288, 124, 0, 0, 255, 282, 283, 0, 0,
	125, 147, 143, 210, 189, 120, 157, 243, 164, 171,
	220, 286, 200, 226, 129, 271, 242, 401, 413, 407,
	409, 408, 405, 406, 404, 403, 402, 415, 392, 393,
	394, 395, 398, 0, 410, 411, 0, 0, 0, 0,
	428, 429, 430, 431, 432, 433, 434, 427, 435, 436,
	437, 438, 439, 440, 441, 442, 443, 416, 417, 418,
	419, 420, 421, 422, 423, 426, 424, 425, 396, 105,
	114, 168, 285, 218, 146, 273, 0, 139, 0, 0,
	0, 0, 0, 0, 107, 108, 115, 123, 130, 138,
	142, 145, 150, 153, 156, 158, 159, 160, 163, 173,
	176, 177, 178, 179, 191, 192, 194, 195, 198, 199,
	202, 203, 204, 205, 207, 208, 209, 213, 215, 217,
	219, 222, 227, 228, 229, 230, 232, 233, 234, 237,
	238, 239, 240, 247, 251, 259, 260, 270, 277, 281,
	197, 0, 0, 0, 698, 0, 0, 0, 0, 141,
	0, 0, 0, 0, 166, 0, 0, 0, 0, 0,
	169, 0, 0, 244, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 699, 0, 702, 0, 0, 0, 0, 0,
	0, 127, 0, 0, 0, 0, 0, 695, 694, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 696, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 149, 0, 0,
	0, 0, 0, 0, 278, 0, 0, 0, 214, 0,
	249, 152, 167, 121, 106, 116, 0, 151, 193, 223,
	231, 0, 0, 0, 0, 0, 135, 0, 225, 201,
	269, 0, 0, 206, 224, 170, 258, 216, 267, 268,
	279, 280, 253, 276, 284, 241, 0, 0, 0, 0,
	0, 0, 122, 254, 183, 188, 131, 133, 132, 117,
	236, 256, 126, 134, 245, 250, 109, 252, 266, 128,
	235, 111, 264, 248, 181, 161, 162, 110, 0, 221,
	140, 148, 137, 196, 0, 0, 0, 261, 262, 136,
	287, 118, 275, 113, 119, 274, 190, 0, 0, 0,
	257, 265, 182, 175, 0, 112, 263, 180, 174, 165,
	144, 154, 211, 172, 212, 155, 186, 185, 187, 0,
	0, 0, 246, 272, 288, 124, 0, 0, 255, 282,
	283, 0, 0, 125, 147, 143, 210, 189, 120, 157,
	243, 164, 171, 220, 286, 200, 226, 129, 271, 242,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 703, 704, 705, 706, 707, 711, 712,
	716, 717, 725, 724, 723, 726, 727, 729, 728, 730,
	708, 709, 710, 713, 714, 715, 718, 719, 722, 720,
	721, 0, 105, 114, 168, 285, 218, 146, 273, 0,
	139, 0, 0, 0, 0, 0, 0, 107, 108, 115,
	123, 130, 138, 142, 145, 150, 153, 156, 158, 159,
	160, 163, 173, 176, 177, 178, 179, 191, 192, 194,
	195, 198, 199, 202, 203, 204, 205, 207, 208, 209,
	213, 215, 217, 219, 222, 227, 228, 229, 230, 232,
	233, 234, 237, 238, 239, 240, 247, 251, 259, 260,
	270, 277, 281, 197, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 0, 0, 0, 0, 166, 0, 0,
	0, 0, 0, 169, 0, 0, 244, 184, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 699, 0, 702, 0, 0,
	0, 0, 0, 0, 127, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	149, 0, 0, 0, 0, 0, 0, 278, 0, 0,
	0, 214, 0, 249, 152, 167, 121, 106, 116, 0,
	151, 193, 223, 231, 0, 0, 0, 0, 0, 135,
	0, 225, 201, 269, 0, 0, 206, 224, 170, 258,
	216, 267, 268, 279, 280, 253, 276, 284, 241, 0,
	0, 0, 0, 0, 0, 122, 254, 183, 188, 131,
	133, 132, 117, 236, 256, 126, 134, 245, 250, 109,
	252, 266, 128, 235, 111, 264, 248, 181, 161, 162,
	110, 0, 221, 140, 148, 137, 196, 0, 0, 0,
	261, 262, 136, 287, 118, 275, 113, 119, 274, 190,
	0, 0, 0, 257, 265, 182, 175, 0, 112, 263,
	180, 174, 165, 144, 154, 211, 172, 212, 155, 186,
	185, 187, 0, 0, 0, 246, 272, 288, 124, 0,
	0, 255, 282, 283, 0, 0, 125, 147, 143, 210,
	189, 120, 157, 243, 164, 171, 220, 286, 200, 226,
	129, 271, 242, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 703, 704, 705, 706,
	707, 711, 712, 716, 717, 725, 724, 723, 726, 727,
	729, 728, 730, 708, 709, 710, 713, 714, 715, 718,
	719, 722, 720, 721, 0, 105, 114, 168, 285, 218,
	146, 273, 0, 139, 0, 0, 0, 0, 0, 0,
	107, 108, 115, 123, 130, 138, 142, 145, 150, 153,
	156, 158, 159, 160, 163, 173, 176, 177, 178, 179,
	191, 192, 194, 195, 198, 199, 202, 203, 204, 205,
	207, 208, 209, 213, 215, 217, 219, 222, 227, 228,
	229, 230, 232, 233, 234, 237, 238, 239, 240, 247,
	251, 259, 260, 270, 277, 281, 197, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 0, 0, 0, 0,
	166, 0, 0, 0, 0, 0, 169, 0, 0, 244,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 740, 739, 749, 750, 742,
	743, 744, 745, 746, 747, 748, 741, 0, 0, 751,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 149, 0, 0, 0, 0, 0, 0,
	278, 0, 0, 0, 214, 0, 249, 152, 167, 121,
	106, 116, 0, 151, 193, 223, 231, 0, 0, 0,
	0, 0, 135, 0, 225, 201, 269, 0, 0, 206,
	224, 170, 258, 216, 267, 268, 279, 280, 253, 276,
	284, 241, 0, 0, 0, 0, 0, 0, 122, 254,
	183, 188, 131, 133, 132, 117, 236, 256, 126, 134,
	245, 250, 109, 252, 266, 128, 235, 111, 264, 248,
	181, 161, 162, 110, 0, 221, 140, 148, 137, 196,
	0, 0, 0, 261, 262, 136, 287, 118, 275, 113,
	119, 274, 190, 0, 0, 0, 257, 265, 182, 175,
	0, 112, 263, 180, 174, 165, 144, 154, 211, 172,
	212, 155, 186, 185, 187, 0, 0, 0, 246, 272,
	288, 124, 0, 0, 255, 282, 283, 0, 0, 125,
	147, 143, 210, 189, 120, 157, 243, 164, 171, 220,
	286, 200, 226, 129, 271, 242, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 114,
	168, 285, 218, 146, 273, 0, 139, 0, 0, 0,
	0, 0, 0, 107, 108, 115, 123, 130, 138, 142,
	145, 150, 153, 156, 158, 159, 160, 163, 173, 176,
	177, 178, 179, 191, 192, 194, 195, 198, 199, 202,
	203, 204, 205, 207, 208, 209, 213, 215, 217, 219,
	222, 227, 228, 229, 230, 232, 233, 234, 237, 238,
	239, 240, 247, 251, 259, 260, 270, 277, 281, 197,
	0, 0, 0, 1151, 0, 0, 0, 0, 141, 0,
	0, 0, 0, 166, 0, 0, 0, 0, 0, 169,
	0, 0, 244, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1153, 1155, 0, 0, 0, 0,
	0, 103, 0, 1157, 0, 0, 0, 0, 0, 0,
	127, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 149, 0, 0, 0,
	0, 0, 0, 278, 0, 1154, 0, 214, 0, 249,
	152, 167, 121, 106, 116, 0, 151, 193, 223, 231,
	0, 0, 0, 0, 0, 135, 0, 225, 201, 269,
	0, 0, 206, 224, 170, 258, 216, 267, 268, 279,
	280, 253, 276, 284, 241, 0, 0, 0, 0, 0,
	0, 122, 254, 183, 188, 131, 133, 132, 117, 236,
	256, 126, 134, 245, 250, 109, 252, 266, 128, 235,
	111, 264, 248, 181, 161, 162, 110, 0, 221, 140,
	148, 137, 196, 0, 0, 0, 261, 262, 136, 287,
	118, 275, 113, 119, 274, 190, 0, 0, 0, 257,
	265, 182, 175, 0, 112, 263, 180, 174, 165, 144,
	154, 211, 172, 212, 155, 186, 185, 187, 0, 0,
	0, 246, 272, 288, 124, 0, 0, 255, 282, 283,
	0, 0, 125, 147, 143, 210, 189, 120, 157, 243,
	164, 171, 220, 286, 200, 226, 129, 271, 242, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 114, 168, 285, 218, 146, 273, 0, 139,
	0, 0, 0, 0, 0, 0, 107, 108, 115, 123,
	130, 138, 142, 145, 150, 153, 156, 158, 159, 160,
	163, 173, 176, 177, 178, 179, 191, 192, 194, 195,
	198, 199, 202, 203, 204, 205, 207, 208, 209, 213,
	215, 217, 219, 222, 227, 228, 229, 230, 232, 233,
	234, 237, 238, 239, 240, 247, 251, 259, 260, 270,
	277, 281, 197, 0, 0, 0, 1151, 0, 0, 0,
	0, 141, 0, 0, 0, 0, 166, 0, 0, 0,
	0, 0, 169, 0, 0, 244, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1153, 1155, 0,
	0, 0, 0, 0, 103, 0, 1157, 0, 0, 0,
	0, 0, 0, 127, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 149,
	0, 0, 0, 0, 0, 0, 278, 0, 1154, 0,
	214, 0, 249, 152, 167, 121, 106, 116, 0, 151,
	193, 223, 231, 0, 0, 0, 0, 0, 135, 0,
	225, 201, 269, 0, 0, 1149, 224, 170, 258, 216,
	267, 268, 279, 280, 253, 276, 284, 241, 0, 0,
	0, 0, 0, 0, 122, 254, 183, 188, 131, 133,
	132, 117, 236, 256, 126, 134, 245, 250, 109, 252,
	266, 128, 235, 111, 264, 248, 181, 161, 162, 110,
	0, 221, 140, 148, 137, 196, 0, 0, 0, 261,
	262, 136, 287, 118, 275, 113, 119, 274, 190, 0,
	0, 0, 257, 265, 182, 175, 0, 112, 263, 180,
	174, 165, 144, 154, 211, 172, 212, 155, 186, 185,
	187, 0, 0, 0, 246, 272, 288, 124, 0, 0,
	255, 282, 283, 0, 0, 125, 147, 143, 210, 189,
	120, 157, 243, 164, 171, 220, 286, 200, 226, 129,
	271, 242, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 105, 114, 168, 285, 218, 146,
	273, 0, 139, 0, 0, 0, 0, 0, 0, 107,
	108, 115, 123, 130, 138, 142, 145, 150, 153, 156,
	158, 159, 160, 163, 173, 176, 177, 178, 179, 191,
	192, 194, 195, 198, 199, 202, 203, 204, 205, 207,
	208, 209, 213, 215, 217, 219, 222, 227, 228, 229,
	230, 232, 233, 234, 237, 238, 239, 240, 247, 251,
	259, 260, 270, 277, 281, 27, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 197, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	0, 166, 0, 0, 0, 0, 0, 169, 0, 0,
	244, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 63, 0, 0, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 149, 0, 0, 0, 0, 0,
	0, 278, 0, 0, 0, 214, 0, 249, 152, 167,
	121, 106, 116, 0, 151, 193, 223, 231, 0, 0,
	0, 0, 0, 135, 0, 225, 201, 269, 0, 0,
	206, 224, 170, 258, 216, 267, 268, 279, 280, 253,
	276, 284, 241, 0, 0, 0, 0, 0, 0, 122,
	254, 183, 188, 131, 133, 132, 117, 236, 256, 126,
	134, 245, 250, 109, 252, 266, 128, 235, 111, 264,
	248, 181, 161, 162, 110, 0, 221, 140, 148, 137,
	196, 0, 0, 0, 261, 262, 136, 287, 118, 275,
	113, 119, 274, 190, 0, 0, 0, 257, 265, 182,
	175, 0, 112, 263, 180, 174, 165, 144, 154, 211,
	172, 212, 155, 186, 185, 187, 0, 0, 0, 246,
	272, 288, 124, 0, 0, 255, 282, 283, 0, 0,
	125, 147, 143, 210, 189, 120, 157, 243, 164, 171,
	220, 286, 200, 226, 129, 271, 242, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	114, 168, 285, 218, 146, 273, 0, 139, 0, 0,
	0, 0, 0, 0, 107, 108, 115, 123, 130, 138,
	142, 145, 150, 153, 156, 158, 159, 160, 163, 173,
	176, 177, 178, 179, 191, 192, 194, 195, 198, 199,
	202, 203, 204, 205, 207, 208, 209, 213, 215, 217,
	219, 222, 227, 228, 229, 230, 232, 233, 234, 237,
	238, 239, 240, 247, 251, 259, 260, 270, 277, 281,
	197, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	0, 0, 0, 0, 166, 1400, 0, 0, 0, 0,
	169, 0, 0, 244, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 103, 0, 1157, 0, 0, 0, 0, 0,
	0, 127, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 149, 0, 0,
	0, 0, 0, 0, 278, 0, 0, 0, 214, 0,
	249, 152, 167, 121, 106, 116, 0, 151, 193, 223,
	231, 0, 0, 0, 0, 0, 135, 0, 225, 201,
	269, 0, 0, 206, 224, 170, 258, 216, 267, 268,
	279, 280, 253, 276, 284, 241, 0, 0, 0, 0,
	0, 0, 122, 254, 183, 188, 131, 133, 132, 117,
	236, 256, 126, 134, 245, 250, 109, 252, 266, 128,
	235, 111, 264, 248, 181, 161, 162, 110, 0, 221,
	140, 148, 137, 196, 0, 0, 0, 261, 262, 136,
	287, 118, 275, 113, 119, 274, 190, 0, 0, 0,
	257, 265, 182, 175, 0, 112, 263, 180, 174, 165,
	144, 154, 211, 172, 212, 155, 186, 185, 187, 0,
	0, 0, 246, 272, 288, 124, 0, 0, 255, 282,
	283, 0, 0, 125, 147, 143, 210, 189, 120, 157,
	243, 164, 171, 220, 286, 200, 226, 129, 271, 242,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 105, 114, 168, 285, 218, 146, 273, 0,
	139, 0, 0, 0, 0, 0, 0, 107, 108, 115,
	123, 130, 138, 142, 145, 150, 153, 156, 158, 159,
	160, 163, 173, 176, 177, 178, 179, 191, 192, 194,
	195, 198, 199, 202, 203, 204, 205, 207, 208, 209,
	213, 215, 217, 219, 222, 227, 228, 229, 230, 232,
	233, 234, 237, 238, 239, 240, 247, 251, 259, 260,
	270, 277, 281, 27, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 197, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 0, 0, 0, 0, 166,
	0, 0, 0, 0, 0, 169, 0, 0, 244, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 63, 0, 0, 103, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 149, 0, 0, 0, 0, 0, 0, 278,
	0, 0, 0, 214, 0, 249, 152, 167, 121, 106,
	116, 0, 151, 193, 223, 231, 0, 0, 0, 0,
	0, 135, 0, 225, 201, 269, 0, 0, 206, 224,
	170, 258, 216, 267, 268, 279, 280, 253, 276, 284,
	241, 0, 0, 0, 0, 0, 0, 122, 254, 183,
	188, 131, 133, 132, 117, 236, 256, 126, 134, 245,
	250, 109, 252, 266, 128, 235, 111, 264, 248, 181,
	161, 162, 110, 0, 221, 140, 148, 137, 196, 0,
	0, 0, 261, 262, 136, 287, 118, 275, 113, 119,
	274, 190, 0, 0, 0, 257, 265, 182, 175, 0,
	112, 263, 180, 174, 165, 144, 154, 211, 172, 212,
	155, 186, 185, 187, 0, 0, 0, 246, 272, 288,
	124, 0, 0, 255, 282, 283, 0, 0, 125, 147,
	143, 210, 189, 120, 157, 243, 164, 171, 220, 286,
	200, 226, 129, 271, 242, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 114, 168,
	285, 218, 146, 273, 0, 139, 0, 0, 0, 0,
	0, 0, 107, 108, 115, 123, 130, 138, 142, 145,
	150, 153, 156, 158, 159, 160, 163, 173, 176, 177,
	178, 179, 191, 192, 194, 195, 198, 199, 202, 203,
	204, 205, 207, 208, 209, 213, 215, 217, 219, 222,
	227, 228, 229, 230, 232, 233, 234, 237, 238, 239,
	240, 247, 251, 259, 260, 270, 277, 281, 197, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 873, 0,
	0, 0, 166, 0, 0, 0, 0, 0, 169, 0,
	0, 244, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	484, 0, 872, 0, 0, 0, 0, 0, 0, 127,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 149, 0, 0, 0, 0,
	0, 0, 278, 0, 0, 0, 214, 0, 249, 152,
	167, 121, 106, 116, 0, 151, 193, 223, 231, 0,
	0, 0, 0, 0, 135, 0, 225, 201, 269, 0,
	0, 206, 224, 170, 258, 216, 267, 268, 279, 280,
	253, 276, 284, 241, 0, 0, 0, 0, 0, 0,
	122, 254, 183, 188, 131, 133, 132, 117, 236, 256,
	126, 134, 245, 250, 109, 252, 266, 128, 235, 111,
	264, 248, 181, 161, 162, 110, 0, 221, 140, 148,
	137, 196, 0, 0, 0, 261, 262, 136, 287, 118,
	275, 113, 119, 274, 190, 0, 0, 0, 257, 265,
	182, 175, 0, 112, 263, 180, 174, 165, 144, 154,
	211, 172, 212, 155, 186, 185, 187, 0, 0, 0,
	246, 272, 288, 124, 0, 0, 255, 282, 283, 0,
	0, 125, 147, 143, 210, 189, 120, 157, 243, 164,
	171, 220, 286, 200, 226, 129, 271, 242, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 114, 168, 285, 218, 146, 273, 0, 139, 0,
	0, 0, 0, 0, 0, 107, 108, 115, 123, 130,
	138, 142, 145, 150, 153, 156, 158, 159, 160, 163,
	173, 176, 177, 178, 179, 191, 192, 194, 195, 198,
	199, 202, 203, 204, 205, 207, 208, 209, 213, 215,
	217, 219, 222, 227, 228, 229, 230, 232, 233, 234,
	237, 238, 239, 240, 247, 251, 259, 260, 270, 277,
	281, 197, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 0, 0, 0, 0, 166, 0, 0, 0, 0,
	0, 169, 0, 0, 244, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 0, 1157, 0, 0, 0, 0,
	0, 0, 127, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 149, 0,
	0, 0, 0, 0, 0, 278, 0, 0, 0, 214,
	0, 249, 152, 167, 121, 106, 116, 0, 151, 193,
	223, 231, 0, 0, 0, 0, 0, 135, 0, 225,
	201, 269, 0, 0, 206, 224, 170, 258, 216, 267,
	268, 279, 280, 253, 276, 284, 241, 0, 0, 0,
	0, 0, 0, 122, 254, 183, 188, 131, 133, 132,
	117, 236, 256, 126, 134, 245, 250, 109, 252, 266,
	128, 235, 111, 264, 248, 181, 161, 162, 110, 0,
	221, 140, 148, 137, 196, 0, 0, 0, 261, 262,
	136, 287, 118, 275, 113, 119, 274, 190, 0, 0,
	0, 257, 265, 182, 175, 0, 112, 263, 180, 174,
	165, 144, 154, 211, 172, 212, 155, 186, 185, 187,
	0, 0, 0, 246, 272, 288, 124, 0, 0, 255,
	282, 283, 0, 0, 125, 147, 143, 210, 189, 120,
	157, 243, 164, 171, 220, 286, 200, 226, 129, 271,
	242, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 105, 114, 168, 285, 218, 146, 273,
	0, 139, 0, 0, 0, 0, 0, 0, 107, 108,
	115, 123, 130, 138, 142, 145, 150, 153, 156, 158,
	159, 160, 163, 173, 176, 177, 178, 179, 191, 192,
	194, 195, 198, 199, 202, 203, 204, 205, 207, 208,
	209, 213, 215, 217, 219, 222, 227, 228, 229, 230,
	232, 233, 234, 237, 238, 239, 240, 247, 251, 259,
	260, 270, 277, 281, 197, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 0, 0, 0, 166, 0,
	0, 0, 0, 0, 169, 0, 0, 244, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 63, 0, 0, 103, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 149, 0, 0, 0, 0, 0, 0, 278, 0,
	0, 0, 214, 0, 249, 152, 167, 121, 106, 116,
	0, 151, 193, 223, 231, 0, 0, 0, 0, 0,
	135, 0, 225, 201, 269, 0, 0, 206, 224, 170,
	258, 216, 267, 268, 279, 280, 253, 276, 284, 241,
	0, 0, 0, 0, 0, 0, 122, 254, 183, 188,
	131, 133, 132, 117, 236, 256, 126, 134, 245, 250,
	109, 252, 266, 128, 235, 111, 264, 248, 181, 161,
	162, 110, 0, 221, 140, 148, 137, 196, 0, 0,
	0, 261, 262, 136, 287, 118, 275, 113, 119, 274,
	190, 0, 0, 0, 257, 265, 182, 175, 0, 112,
	263, 180, 174, 165, 144, 154, 211, 172, 212, 155,
	186, 185, 187, 0, 0, 0, 246, 272, 288, 124,
	0, 0, 255, 282, 283, 0, 0, 125, 147, 143,
	210, 189, 120, 157, 243, 164, 171, 220, 286, 200,
	226, 129, 271, 242, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 105, 114, 168, 285,
	218, 146, 273, 0, 139, 0, 0, 0, 0, 0,
	0, 107, 108, 115, 123, 130, 138, 142, 145, 150,
	153, 156, 158, 159, 160, 163, 173, 176, 177, 178,
	179, 191, 192, 194, 195, 198, 199, 202, 203, 204,
	205, 207, 208, 209, 213, 215, 217, 219, 222, 227,
	228, 229, 230, 232, 233, 234, 237, 238, 239, 240,
	247, 251, 259, 260, 270, 277, 281, 197, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	0, 166, 0, 0, 0, 0, 0, 169, 0, 0,
	244, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 63, 0, 0, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 149, 0, 0, 0, 0, 0,
	0, 278, 0, 0, 0, 214, 0, 249, 152, 167,
	121, 106, 116, 0, 151, 193, 223, 231, 0, 0,
	0, 0, 0, 135, 0, 225, 201, 269, 0, 0,
	206, 224, 170, 258, 216, 267, 268, 279, 280, 253,
	276, 284, 241, 0, 0, 0, 0, 0, 0, 122,
	254, 183, 188, 131, 133, 132, 117, 236, 256, 126,
	134, 245, 250, 109, 252, 266, 128, 235, 111, 264,
	248, 181, 161, 162, 110, 0, 221, 140, 148, 137,
	196, 0, 0, 0, 261, 262, 136, 287, 118, 275,
	113, 119, 274, 190, 0, 0, 0, 257, 265, 182,
	175, 0, 112, 263, 180, 174, 165, 144, 154, 211,
	172, 212, 155, 186, 185, 187, 0, 0, 0, 246,
	272, 288, 124, 0, 0, 255, 282, 283, 0, 0,
	125, 147, 143, 210, 189, 120, 157, 243, 164, 171,
	220, 286, 200, 226, 129, 271, 242, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	114, 168, 285, 218, 146, 273, 0, 139, 0, 0,
	0, 0, 0, 0, 107, 108, 115, 123, 130, 138,
	142, 145, 150, 153, 156, 158, 159, 160, 163, 173,
	176, 177, 178, 179, 191, 192, 194, 195, 198, 199,
	202, 203, 204, 205, 207, 208, 209, 213, 215, 217,
	219, 222, 227, 228, 229, 230, 232, 233, 234, 237,
	238, 239, 240, 247, 251, 259, 260, 270, 277, 281,
	197, 0, 0, 0, 0, 0, 0, 0, 843, 141,
	0, 0, 0, 0, 166, 0, 0, 0, 0, 0,
	169, 0, 0, 244, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 103, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 149, 0, 0,
	0, 0, 0, 0, 278, 0, 0, 0, 214, 0,
	249, 152, 167, 121, 106, 116, 0, 151, 193, 223,
	231, 0, 0, 0, 0, 0, 135, 0, 225, 201,
	269, 0, 0, 206, 224, 170, 258, 216, 267, 268,
	279, 280, 253, 276, 284, 241, 0, 0, 0, 0,
	0, 0, 122, 254, 183, 188, 131, 133, 132, 117,
	236, 256, 126, 134, 245, 250, 109, 252, 266, 128,
	235, 111, 264, 248, 181, 161, 162, 110, 0, 221,
	140, 148, 137, 196, 0, 0, 0, 261, 262, 136,
	287, 118, 275, 113, 119, 274, 190, 0, 0, 0,
	257, 265, 182, 175, 0, 112, 263, 180, 174, 165,
	144, 154, 211, 172, 212, 155, 186, 185, 187, 0,
	0, 0, 246, 272, 288, 124, 0, 0, 255, 282,
	283, 0, 0, 125, 147, 143, 210, 189, 120, 157,
	243, 164, 171, 220, 286, 200, 226, 129, 271, 242,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 105, 114, 168, 285, 218, 146, 273, 0,
	139, 0, 0, 0, 0, 0, 0, 107, 108, 115,
	123, 130, 138, 142, 145, 150, 153, 156, 158, 159,
	160, 163, 173, 176, 177, 178, 179, 191, 192, 194,
	195, 198, 199, 202, 203, 204, 205, 207, 208, 209,
	213, 215, 217, 219, 222, 227, 228, 229, 230, 232,
	233, 234, 237, 238, 239, 240, 247, 251, 259, 260,
	270, 277, 281, 446, 0, 0, 0, 0, 0, 0,
	197, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	0, 0, 0, 0, 166, 0, 0, 0, 0, 0,
	169, 0, 0, 244, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 103, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 149, 0, 0,
	0, 0, 0, 0, 278, 0, 0, 0, 214, 0,
	249, 152, 167, 121, 106, 116, 0, 151, 193, 223,
	231, 0, 0, 0, 0, 0, 135, 0, 225, 201,
	269, 0, 0, 206, 224, 170, 258, 216, 267, 268,
	279, 280, 253, 276, 284, 241, 0, 0, 0, 0,
	0, 0, 122, 254, 183, 188, 131, 133, 132, 117,
	236, 256, 126, 134, 245, 250, 109, 252, 266, 128,
	235, 111, 264, 248, 181, 161, 162, 110, 0, 221,
	140, 148, 137, 196, 0, 0, 0, 261, 262, 136,
	287, 118, 275, 113, 119, 274, 190, 0, 0, 0,
	257, 265, 182, 175, 0, 112, 263, 180, 174, 165,
	144, 154, 211, 172, 212, 155, 186, 185, 187, 0,
	0, 0, 246, 272, 288, 124, 0, 0, 255, 282,
	283, 0, 0, 125, 147, 143, 210, 189, 120, 157,
	243, 164, 171, 220, 286, 200, 226, 129, 271, 242,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 105, 114, 168, 285, 218, 146, 273, 0,
	139, 0, 0, 0, 0, 0, 0, 107, 108, 115,
	123, 130, 138, 142, 145, 150, 153, 156, 158, 159,
	160, 163, 173, 176, 177, 178, 179, 191, 192, 194,
	195, 198, 199, 202, 203, 204, 205, 207, 208, 209,
	213, 215, 217, 219, 222, 227, 228, 229, 230, 232,
	233, 234, 237, 238, 239, 240, 247, 251, 259, 260,
	270, 277, 281, 197, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 0, 0, 0, 0, 166, 0, 0,
	0, 0, 0, 169, 0, 0, 244, 184, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 103, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	149, 0, 0, 0, 100, 0, 0, 278, 0, 0,
	0, 214, 0, 249, 152, 167, 121, 106, 116, 0,
	151, 193, 223, 231, 0, 0, 0, 0, 0, 135,
	0, 225, 201, 269, 0, 0, 206, 224, 170, 258,
	216, 267, 268, 279, 280, 253, 276, 284, 241, 0,
	0, 0, 0, 0, 0, 122, 254, 183, 188, 131,
	133, 132, 117, 236, 256, 126, 134, 245, 250, 109,
	252, 266, 128, 235, 111, 264, 248, 181, 161, 162,
	110, 0, 221, 140, 148, 137, 196, 0, 0, 0,
	261, 262, 136, 287, 118, 275, 113, 119, 274, 190,
	0, 0, 0, 257, 265, 182, 175, 0, 112, 263,
	180, 174, 165, 144, 154, 211, 172, 212, 155, 186,
	185, 187, 0, 0, 0, 246, 272, 288, 124, 0,
	0, 255, 282, 283, 0, 0, 125, 147, 143, 210,
	189, 120, 157, 243, 164, 171, 220, 286, 200, 226,
	129, 271, 242, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 114, 168, 285, 218,
	146, 273, 0, 139, 0, 0, 0, 0, 0, 0,
	107, 108, 115, 123, 130, 138, 142, 145, 150, 153,
	156, 158, 159, 160, 163, 173, 176, 177, 178, 179,
	191, 192, 194, 195, 198, 199, 202, 203, 204, 205,
	207, 208, 209, 213, 215, 217, 219, 222, 227, 228,
	229, 230, 232, 233, 234, 237, 238, 239, 240, 247,
	251, 259, 260, 270, 277, 281, 197, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 0, 0, 0, 0,
	166, 0, 0, 0, 0, 0, 169, 0, 0, 244,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 149, 0, 0, 0, 0, 0, 0,
	278, 0, 0, 0, 214, 0, 249, 152, 167, 121,
	106, 116, 0, 151, 193, 223, 231, 0, 0, 0,
	0, 0, 135, 0, 225, 201, 269, 0, 0, 206,
	224, 170, 258, 216, 267, 268, 279, 280, 253, 276,
	284, 241, 0, 0, 0, 0, 0, 0, 122, 254,
	183, 188, 131, 133, 132, 117, 236, 256, 126, 134,
	245, 250, 109, 252, 266, 128, 235, 111, 264, 248,
	181, 161, 162, 110, 0, 221, 140, 148, 137, 196,
	0, 0, 0, 261, 262, 136, 287, 118, 275, 113,
	119, 274, 190, 0, 0, 0, 257, 265, 182, 175,
	0, 112, 263, 180, 174, 165, 144, 154, 211, 172,
	212, 155, 186, 185, 187, 0, 0, 0, 246, 272,
	288, 124, 0, 0, 255, 282, 283, 0, 0, 125,
	147, 143, 210, 189, 120, 157, 243, 164, 171, 220,
	286, 200, 226, 129, 271, 242, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 114,
	168, 285, 218, 146, 273, 0, 139, 0, 0, 0,
	0, 0, 0, 107, 108, 115, 123, 130, 138, 142,
	145, 150, 153, 156, 158, 159, 160, 163, 173, 176,
	177, 178, 179, 191, 192, 194, 195, 198, 199, 202,
	203, 204, 205, 207, 208, 209, 213, 215, 217, 219,
	222, 227, 228, 229, 230, 232, 233, 234, 237, 238,
	239, 240, 247, 251, 259, 260, 270, 277, 281, 197,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	0, 0, 0, 166, 0, 0, 0, 0, 0, 169,
	0, 0, 244, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 149, 0, 0, 0,
	0, 0, 0, 278, 0, 0, 0, 214, 0, 249,
	152, 167, 121, 106, 116, 0, 151, 193, 223, 231,
	0, 0, 0, 0, 0, 135, 0, 225, 201, 269,
	0, 0, 206, 224, 170, 258, 216, 267, 268, 279,
	280, 253, 276, 284, 241, 0, 0, 0, 0, 0,
	0, 122, 254, 183, 188, 131, 133, 132, 117, 236,
	256, 126, 134, 245, 250, 109, 252, 266, 128, 235,
	111, 264, 248, 181, 161, 162, 110, 0, 221, 140,
	148, 137, 196, 0, 0, 0, 261, 262, 136, 287,
	118, 275, 113, 119, 274, 190, 0, 0, 0, 257,
	265, 182, 175, 0, 112, 263, 180, 174, 165, 144,
	154, 211, 172, 212, 155, 186, 185, 187, 0, 0,
	0, 246, 272, 288, 124, 0, 0, 255, 282, 283,
	0, 0, 125, 147, 143, 210, 189, 120, 157, 243,
	164, 171, 220, 286, 200, 226, 129, 271, 242, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 114, 168, 285, 218, 146, 273, 0, 139,
	0, 0, 0, 0, 0, 0, 107, 108, 115, 123,
	130, 138, 142, 145, 150, 153, 156, 158, 159, 160,
	163, 173, 176, 177, 178, 179, 191, 192, 194, 195,
	198, 199, 202, 203, 204, 205, 207, 208, 209, 213,
	215, 217, 219, 222, 227, 228, 229, 230, 232, 233,
	234, 237, 238, 239, 240, 247, 251, 259, 260, 270,
	277, 281, 197, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 0, 0, 0, 166, 0, 0, 0,
	0, 0, 169, 0, 0, 244, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 354, 0, 0, 0, 0, 0,
	0, 0, 0, 127, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 149,
	0, 0, 0, 0, 0, 0, 278, 0, 0, 0,
	214, 0, 249, 152, 167, 121, 106, 116, 0, 151,
	193, 223, 231, 0, 0, 0, 0, 0, 135, 0,
	225, 201, 269, 0, 0, 206, 224, 170, 258, 216,
	267, 268, 279, 280, 253, 276, 284, 241, 0, 0,
	0, 0, 0, 0, 122, 254, 183, 188, 131, 133,
	132, 117, 236, 256, 126, 134, 245, 250, 109, 252,
	266, 128, 235, 111, 264, 248, 181, 161, 162, 110,
	0, 221, 140, 148, 137, 196, 0, 0, 0, 261,
	262, 136, 287, 118, 275, 113, 463, 274, 190, 0,
	0, 0, 257, 265, 182, 175, 0, 112, 263, 180,
	174, 165, 144, 154, 211, 172, 212, 155, 186, 185,
	187, 0, 0, 0, 246, 272, 288, 124, 0, 0,
	255, 282, 283, 0, 0, 125, 147, 143, 210, 464,
	462, 157, 243, 164, 171, 220, 286, 200, 226, 129,
	271, 242, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 105, 114, 168, 285, 218, 146,
	273, 0, 139, 0, 0, 0, 0, 0, 0, 107,
	108, 115, 123, 130, 138, 142, 145, 150, 153, 156,
	158, 159, 160, 163, 173, 176, 177, 178, 179, 191,
	192, 194, 195, 198, 199, 202, 203, 204, 205, 207,
	208, 209, 213, 215, 217, 219, 222, 227, 228, 229,
	230, 232, 233, 234, 237, 238, 239, 240, 247, 251,
	259, 260, 270, 277, 281, 197, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 0, 0, 0, 0, 166,
	0, 0, 0, 0, 0, 169, 0, 0, 244, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 354, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 149, 0, 0, 0, 0, 0, 0, 278,
	0, 0, 0, 214, 0, 249, 152, 167, 121, 106,
	116, 0, 151, 193, 223, 231, 0, 0, 0, 0,
	0, 135, 0, 225, 201, 269, 0, 0, 206, 224,
	170, 258, 216, 267, 268, 279, 280, 253, 276, 284,
	241, 0, 0, 0, 0, 0, 0, 122, 254, 183,
	188, 131, 133, 132, 117, 236, 256, 126, 134, 245,
	250, 109, 252, 266, 128, 235, 111, 264, 248, 181,
	161, 162, 110, 0, 221, 140, 148, 137, 196, 0,
	0, 0, 261, 262, 136, 287, 118, 275, 113, 119,
	274, 190, 0, 0, 0, 257, 265, 182, 175, 0,
	112, 263, 180, 174, 165, 144, 154, 211, 172, 212,
	155, 186, 185, 187, 0, 0, 0, 246, 272, 288,
	124, 0, 0, 255, 282, 283, 0, 0, 125, 147,
	143, 210, 189, 120, 157, 243, 164, 171, 220, 286,
	200, 226, 129, 271, 242, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 114, 168,
	285, 218, 146, 273, 0, 139, 0, 0, 0, 0,
	0, 0, 107, 108, 115, 123, 130, 138, 142, 145,
	150, 153, 156, 158, 159, 160, 163, 173, 176, 177,
	178, 179, 191, 192, 194, 195, 198, 199, 202, 203,
	204, 205, 207, 208, 209, 213, 215, 217, 219, 222,
	227, 228, 229, 230, 232, 233, 234, 237, 238, 239,
	240, 247, 251, 259, 260, 270, 277, 281, 197, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 0, 166, 0, 0, 0, 0, 0, 169, 0,
	0, 244, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	354, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 149, 0, 0, 0, 0,
	0, 0, 278, 0, 0, 0, 214, 0, 249, 152,
	167, 121, 106, 116, 0, 151, 193, 223, 231, 0,
	0, 0, 0, 0, 135, 0, 225, 201, 269, 0,
	0, 206, 224, 170, 258, 216, 267, 268, 279, 280,
	253, 276, 284, 241, 0, 0, 0, 0, 0, 0,
	122, 254, 183, 188, 131, 133, 132, 117, 236, 256,
	126, 134, 245, 250, 109, 252, 864, 128, 235, 111,
	264, 248, 181, 161, 162, 110, 0, 221, 140, 148,
	137, 196, 0, 0, 0, 261, 262, 136, 287, 118,
	275, 113, 463, 274, 190, 0, 0, 0, 257, 265,
	182, 175, 0, 112, 263, 180, 174, 165, 144, 154,
	211, 172, 212, 155, 186, 185, 187, 0, 0, 0,
	246, 272, 288, 124, 0, 0, 255, 282, 283, 0,
	0, 125, 147, 143, 210, 464, 462, 157, 243, 164,
	171, 220, 286, 200, 226, 129, 271, 242, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 114, 168, 285, 218, 146, 273, 0, 139, 0,
	0, 0, 0, 0, 0, 107, 108, 115, 123, 130,
	138, 142, 145, 150, 153, 156, 158, 159, 160, 163,
	173, 176, 177, 178, 179, 191, 192, 194, 195, 198,
	199, 202, 203, 204, 205, 207, 208, 209, 213, 215,
	217, 219, 222, 227, 228, 229, 230, 232, 233, 234,
	237, 238, 239, 240, 247, 251, 259, 260, 270, 277,
	281, 197, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 0, 0, 0, 0, 166, 0, 0, 0, 0,
	0, 169, 0, 0, 244, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 354, 0, 0, 0, 0, 0, 0,
	0, 0, 127, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 149, 0,
	0, 0, 0, 0, 0, 278, 0, 0, 0, 214,
	0, 249, 152, 167, 121, 106, 116, 0, 151, 193,
	223, 231, 0, 0, 0, 0, 0, 135, 0, 225,
	201, 269, 0, 0, 206, 224, 170, 258, 216, 267,
	268, 279, 280, 253, 276, 284, 241, 0, 0, 0,
	0, 0, 0, 122, 254, 183, 188, 131, 133, 132,
	117, 236, 256, 126, 134, 245, 250, 109, 252, 454,
	128, 235, 111, 264, 248, 181, 161, 162, 110, 0,
	221, 140, 148, 137, 196, 0, 0, 0, 261, 262,
	136, 287, 118, 275, 113, 463, 274, 190, 0, 0,
	0, 257, 265, 182, 175, 0, 112, 263, 180, 174,
	165, 144, 154, 211, 172, 212, 155, 186, 185, 187,
	0, 0, 0, 246, 272, 288, 124, 0, 0, 255,
	282, 283, 0, 0, 125, 147, 143, 210, 464, 462,
	457, 456, 164, 171, 220, 286, 200, 226, 129, 271,
	242, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 105, 114, 168, 285, 218, 146, 273,
	0, 139, 0, 0, 0, 0, 0, 0, 107, 108,
	115, 123, 130, 138, 142, 145, 150, 153, 156, 158,
	159, 160, 163, 173, 176, 177, 178, 179, 191, 192,
	194, 195, 198, 199, 202, 203, 204, 205, 207, 208,
	209, 213, 215, 217, 219, 222, 227, 228, 229, 230,
	232, 233, 234, 237, 238, 239, 240, 247, 251, 259,
	260, 270, 277, 281,
}
var yyPact = [...]int{

	2209, -1000, -294, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1240, 1317, -1000, -1000, -1000,
	-1000, -1000, -1000, 490, 426, -1000, -1000, -1000, 183, 19,
	17215, 182, 539, 17981, -1000, 28, -1000, -1000, 129, 17981,
	-1000, -1000, -81, -84, -1000, 33, 972, -1000, -1000, 66,
	-1000, -1000, -1000, -1000, -1000, -1000, 1221, 1228, 1053, 1214,
	1114, -1000, 8746, 153, 153, 16832, 19513, -1000, -1000, 493,
	17981, 177, 17981, -143, 150, 150, 78, 150, -1000, 381,
	-1000, -1000, -1000, 17981, 151, 17598, 151, 151, 151, 151,
	17981, -1000, 224, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 17981,
	880, 1174, 5611, 472, 5611, 5611, -1000, 523, -1000, 5611,
	69, 5611, 13, 532, 63, -2, -1000, 5611, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 202, 972, 377, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1173, 666, 742, 181,
	17981, 488, -1000, 1179, 10290, 10290, 1240, -1000, 972, -1000,
	-1000, -1000, 1144, -1000, -1000, 498, 1295, -1000, 11822, 220,
	-1000, 10290, 2334, 973, -1000, -1000, 973, -1000, -1000, 205,
	-1000, -1000, 11439, 11439, 11439, 11439, 11439, 11439, 11439, 11439,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 973, -1000, 9907, 973,
	973, 973, 973, 973, 973, 973, 973, 973, 973, 10290,
	973, 973, 973, 973, 973, 973, 973, 973, 973, 973,
	973, 973, 973, 973, 973, 973, 973, 973, 973, 973,
	973, 973, 973, 973, 973, 973, 973, 973, 973, 973,
	973, 973, 973, 973, 973, 973, 973, 973, 973, 973,
	973, 973, 973, 973, 16442, 15676, 17981, 1012, 993, -1000,
	-1000, 218, 902, 19130, -78, -1000, -1000, -1000, 375, 14910,
	-1000, 216, -1000, 1172, -1000, 884, 17981, -1000, 3223, -1000,
	17598, 1209, 167, 878, 485, 877, 876, 17981, 875, 1005,
	161, 17981, 1201, 1072, -1000, -1000, 17981, 868, 852, 828,
	-1000, 7596, -1000, 5611, 5611, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 150, 150, 5611, 5611,
	17981, 17981, 17981, -1000, -1000, 17981, -1000, -1000, -1000, 5611,
	5611, -1000, 1287, 353, 353, -1000, -1000, -1000, -1000, 10290,
	-1000, 11439, 261, -1000, 1071, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 825, -1000, -1000, 681, -1000, 648, -1000, -1000,
	17981, 5611, 74, 112, 104, 17981, -1000, 1312, 250, 624,
	215, 1004, -1000, 464, 1221, 742, 1114, 722, 1085, -1000,
	-1000, -1000, 17981, -1000, 10290, 10290, 608, -1000, 12205, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 973, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 6405, 263, 11439, 609, 397, 11439, 11439, 11439, 11439,
	11439, 11439, 11439, 11439, 11439, 11439, 11439, 11439, 11439, 11439,
	11439, 662, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	821, -1000, 972, 813, 813, 230, 230, 230, 230, 230,
	230, 230, 12588, 1206, 742, 874, 421, 9907, 8746, 8746,
	742, 10290, 10290, 9512, 9129, 8746, 8746, 1206, 392, 421,
	18747, -1000, -1000, 11056, -1000, -1000, -1000, -1000, -1000, 742,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 17598, 17598,
	8746, 8746, 8746, 8746, 742, 742, 8746, 8746, 8746, 8746,
	8746, 742, 742, 742, 742, 1206, 1206, 8746, 8746, 8746,
	1206, 8746, 8746, 1206, 8746, 8746, 8746, 8746, 1206, 8746,
	8746, 8746, 89, 17981, -1000, 916, 1036, -1000, -1000, -1000,
	1208, 14527, 13354, 89, 999, 15676, 17981, -1000, -1000, 15676,
	17981, 6008, 18364, 902, -78, 942, -1000, -116, -90, 7980,
	217, -1000, -1000, -1000, 7199, -1000, 4817, 593, 814, -1000,
	-64, -1000, -1000, -1000, 1017, -1000, 1017, 149, -3, 1017,
	1017, 1017, 1017, 1017, -15, -15, -15, -15, 0, -1000,
	-1000, -1000, -1000, -1000, 1059, 1058, -1000, 1017, 1017, 1017,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1056, 172,
	1056, 1029, 1029, 1029, 1029, 1061, -1000, 17981, 5611, 1199,
	5611, 80, -1000, -1000, 17981, 17981, 998, -1000, 17981, 995,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 795,
	770, -1000, -1000, -1000, -1000, -1000, 487, -1000, -1000, 17981,
	1207, 17981, 17981, 521, 421, 939, -1000, 647, 17981, -1000,
	994, -1000, 372, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 223, -1000, 17981, 17981,
	17981, 17981, 17981, 192, -1000, 1120, 10290, 10290, 7199, 10290,
	-1000, -1000, -1000, 1179, -1000, 1206, 1232, -1000, 1133, 1132,
	8746, -1000, -1000, 263, 277, -1000, -1000, 703, -1000, -1000,
	-1000, -1000, -1000, 214, 973, -1000, 2470, -1000, -1000, -1000,
	-1000, 609, 11439, 11439, 11439, 939, 2470, 2420, 1592, 1291,
	230, 661, 661, 240, 240, 240, 240, 240, 914, 914,
	-1000, -1000, -1000, 742, -1000, -1000, -1000, 8746, -1000, 10290,
	-1000, 742, 867, -1000, 867, -1000, 538, 738, 461, 1282,
	867, 443, 1279, 867, 867, 867, 8746, 454, -1000, 10290,
	742, -1000, 1001, 990, 975, 867, 742, 955, 867, 867,
	-159, -159, 742, 867, 742, 867, 867, -159, -159, -159,
	-159, 8746, 8746, 867, 867, 867, 8746, 867, 867, 8746,
	867, 867, 867, 867, 8746, 867, 867, 867, 997, 973,
	-1000, 18364, 15676, 15676, 15676, 15676, 15676, -1000, 1102, 1101,
	-1000, 1094, 1093, 1106, 17981, -1000, 872, 14527, -1000, 973,
	-1000, 14132, 266, 176, 175, 171, -1000, -1000, 1259, 15676,
	911, -1000, 911, -1000, 211, -1000, -1000, 942, -78, -108,
	-1000, -1000, -1000, -1000, 421, -1000, 665, -1000, 210, 936,
	4420, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1057, 763,
	-1000, 1158, 323, 249, 695, 1155, -1000, -1000, -1000, 590,
	-68, -1000, -1000, 589, -15, -15, 1017, 1017, 144, 1017,
	-1000, -15, -1000, -1000, -1000, 217, 1170, 217, 217, 217,
	217, -15, 636, 636, -1000, -1000, -1000, -1000, 560, -1000,
	1056, -1000, -1000, 554, -1000, -1000, -1000, 1070, 17598, 972,
	1203, -1000, -1000, -1000, 1411, -1000, -1000, 158, -1000, 5611,
	17981, 5611, 5611, 1259, 761, 759, 353, 521, 1161, -1000,
	-1000, -1000, 631, 10290, -1000, 11439, -1000, -1000, 681, 813,
	-1000, 612, 547, 541, 130, 130, -1000, 275, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 88, 1013, -1000,
	-1000, -1000, -1000, 31, 68, 1117, 421, 421, -1000, -1000,
	17981, -1000, -1000, -1000, -1000, 970, -1000, -1000, -1000, 5214,
	8746, -1000, 939, 2470, 2401, -1000, 11439, -1000, 742, 421,
	-1000, 8746, -1000, -1000, 371, 662, 371, 11439, 11439, -1000,
	11439, 11439, -1000, -195, -1000, 941, 278, -1000, 10290, 736,
	-1000, -1000, 11439, 11439, -1000, -1000, -1000, -1000, -1000, 16059,
	-1000, -159, -159, -159, -159, -159, -1000, -1000, -1000, -1000,
	867, 867, -159, -159, -159, 867, -159, -159, 867, -159,
	-159, -159, -159, 867, -159, -159, -159, 1069, 18364, 973,
	-1000, 13749, 17598, 974, 1036, 1035, 1068, 859, -1000, -1000,
	-1000, -1000, 1097, -1000, 1095, -1000, -1000, -1000, -1000, 17598,
	11439, 266, -1000, 973, 973, 973, 1240, 10290, 911, -1000,
	-1000, 239, -1000, -1000, -121, -111, -1000, -1000, -1000, 6802,
	4817, -1000, 4817, 17598, 110, -1000, 695, 695, -1000, -1000,
	-1000, 1032, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 467,
	11439, 1310, -1000, 1157, -1000, 1156, 602, -1000, -1000, 792,
	217, 217, -15, -1000, -1000, 1017, -1000, 217, -1000, 399,
	-1000, -1000, -1000, -1000, 217, 863, -1000, 860, 932, -1000,
	858, 17981, -1000, -1000, -1000, 1066, -1000, -1000, -1000, 17981,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 521, -1000, 11439,
	-1000, 421, 2470, -1000, -1000, -1000, 673, -1000, 695, 331,
	-1000, -1000, -1000, 750, 1155, -1000, -1000, 735, -1000, 727,
	17598, 1154, 723, 17981, 17598, -1000, -1000, 711, 721, 10290,
	-1000, 17598, -214, 720, 17598, 17598, 17598, -1000, -1000, 1259,
	15676, -1000, -1000, 742, -1000, 11439, 2470, -1000, -1000, 742,
	1017, 1017, -1000, 1017, 1029, -1000, 1017, 17, 1017, 14,
	742, 742, 2439, 2274, 2145, 1970, 973, -155, -1000, 421,
	10290, 1402, 1074, -1000, 289, -1000, -1000, -1000, -1000, -1000,
	-159, -159, -1000, -1000, -1000, -1000, -159, -1000, -1000, -159,
	-1000, -1000, -1000, -1000, -159, -1000, -1000, -1000, -1000, 1177,
	900, 913, -1000, -1000, 8363, 742, 799, 209, 791, -1000,
	1240, -1000, -1000, 10290, 1019, -1000, 10290, -1000, -1000, -1000,
	791, 1471, -1000, 17598, 17598, 17598, 1221, 421, -1000, -1000,
	-1000, -1000, 4420, -1000, 789, -1000, 1017, -1000, -1000, -1000,
	17598, -1000, 2470, -125, -1000, -1000, -1000, -1000, -1000, -1000,
	217, -1000, -1000, -1000, -1000, -1000, -15, 598, -15, 553,
	-1000, 526, 1016, -1000, 972, 17981, -1000, -1000, 2470, 711,
	108, -1000, 1061, 323, 110, -1000, -1000, -1000, -1000, 717,
	315, -1000, 157, 108, 711, 421, 1186, -1000, 6802, -1000,
	-1000, 1014, 1062, -1000, 1255, 921, -1000, 2470, -1000, -1000,
	145, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 11439,
	11439, 11439, 11439, 11439, 742, 595, 421, 11439, 11439, 742,
	1225, -1000, -1000, -1000, -1000, -1000, 1152, -1000, 973, -1000,
	-1000, 1021, 17598, 17598, -1000, 17598, 1221, 421, 17598, 421,
	12971, -1000, 15293, 787, -1000, 787, 787, -1000, 212, 17598,
	1181, 785, -1000, -1000, 217, -1000, 217, 782, 775, 17598,
	-1000, 1213, 768, -1000, -1000, 698, 1010, 695, -1000, -1000,
	683, -1000, -1000, 17598, -1000, 108, 973, 917, -1000, 291,
	17598, 17981, 1247, 1223, -1000, -1000, 1001, 1001, 1001, 1001,
	26, -1000, -1000, 1001, 1001, -1000, 10290, 1307, -1000, 973,
	-1000, 972, 198, -1000, -1000, -1000, 781, -1000, 266, 17598,
	-1000, -1000, -1000, 212, -1000, 680, 275, 581, -1000, -1000,
	114, -1000, -1000, -1000, -1000, 778, -1000, 58, -1000, -1000,
	-1000, 17598, 1061, -1000, -1000, -1000, -1000, 86, 6802, 4817,
	774, -1000, -1000, 10290, 10290, -1000, -1000, -1000, -1000, 742,
	116, -217, -1000, -1000, 929, 18364, 913, 742, 17598, -1000,
	-1000, -1000, -1000, -1000, 522, -1000, 17981, 212, 56, -1000,
	767, 1009, -1000, 741, -1000, 17598, -1000, -1000, 1013, 421,
	912, -1000, 1113, -211, -220, 742, 902, -1000, -1000, -1000,
	1007, -1000, 212, 50, 212, 17598, -1000, 86, 1131, -214,
	-1000, 1110, -1000, -1000, 17598, -1000, 679, 543, -1000, 731,
	-1000, 83, -1000, -215, 688, 194, -1000, -1000, 212, 81,
	-218, 1065, -1000, -1000, -1000, -1000, -1000, -1000, 540, -1000,
	973, -221, 1064, 1037, 1276, -1000, -295, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 10290, 10290, 10673,
	-1000, -1000, 1302, -1000, 1299, 309, 309, 471, 517, 619,
	1001, 742, -1000, -1000, -1000, 120, 583, -1000, -1000, -1000,
	669, -1000, 10290, 540, -1000, -1000, -1000, -1000, -1000, 407,
	540, -1000, 614, -296, -1000, -297, 540, 180, 456, -298,
	147, 540, 551, -1000, 10290, 406, 540, -1000, -303, 143,
	540, -1000, 580, -1000, 186, -1000, -304, 540, 141, 168,
	-305, -1000, 137, 540, -1000,
}
var yyPgo = [...]int{

	0, 1646, 213, 570, 1645, 1641, 1640, 18, 16, 12,
	20, 1639, 1638, 1635, 1631, 1629, 1628, 8, 7, 1627,
	1625, 1347, 26, 1624, 2, 1622, 5, 64, 1620, 1619,
	1614, 1610, 1609, 1608, 1607, 1606, 1604, 1603, 1602, 1601,
	1600, 1599, 1597, 1596, 1592, 1586, 1583, 1581, 1580, 111,
	1566, 1563, 1562, 146, 1558, 92, 1555, 1554, 1551, 65,
	1368, 60, 63, 297, 1550, 1548, 53, 78, 83, 1544,
	56, 1541, 1540, 95, 1537, 1536, 1533, 77, 1532, 1529,
	741, 1528, 91, 1527, 42, 31, 102, 1526, 1523, 1522,
	1521, 89, 152, 1520, 1519, 1518, 36, 1517, 1516, 120,
	1514, 1512, 1498, 80, 14, 32, 35, 41, 1494, 289,
	24, 1491, 75, 1490, 1487, 1485, 1482, 29, 1477, 38,
	1471, 85, 235, 687, 4, 33, 51, 82, 1467, 47,
	103, 54, 43, 30, 86, 1465, 90, 67, 1464, 1463,
	644, 1458, 1455, 70, 1452, 1451, 50, 1450, 475, 93,
	49, 1448, 1447, 1446, 1445, 44, 76, 1443, 1442, 58,
	73, 88, 1166, 1441, 2532, 52, 87, 1440, 39, 1439,
	2269, 84, 48, 62, 1438, 1435, 59, 1432, 1431, 1430,
	1429, 1428, 1427, 1416, 1414, 74, 1413, 1411, 1410, 112,
	94, 1408, 1407, 71, 72, 1401, 1400, 1384, 79, 46,
	1383, 68, 81, 1381, 1379, 1376, 1375, 61, 27, 1370,
	1369, 1366, 1364, 55, 34, 1363, 37, 25, 23, 40,
	11, 45, 1360, 10, 1358, 28, 1357, 15, 1341, 22,
	66, 9, 3, 6, 1338, 1335, 1332, 0, 173, 96,
	1330, 1328, 100,
}
var yyR1 = [...]int{

	0, 235, 236, 236, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	6, 3, 4, 4, 5, 5, 7, 7, 52, 52,
	8, 9, 9, 9, 9, 239, 239, 75, 75, 73,
	73, 74, 74, 130, 130, 10, 10, 10, 10, 134,
	134, 137, 137, 137, 138, 138, 138, 138, 174, 174,
	124, 12, 12, 12, 12, 12, 12, 12, 12, 158,
	158, 31, 31, 32, 32, 32, 120, 120, 120, 11,
	11, 11, 11, 11, 17, 19, 19, 23, 23, 24,
	20, 20, 20, 20, 25, 25, 26, 21, 21, 30,
	30, 28, 28, 27, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 22, 22, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 229, 229, 228,
	227, 227, 226, 226, 225, 37, 209, 211, 211, 210,
	210, 210, 210, 199, 178, 178, 178, 178, 178, 178,
	178, 177, 177, 177, 177, 181, 181, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 180, 180, 180, 180,
	180, 180, 180, 180, 182, 182, 182, 182, 182, 183,
	183, 183, 183, 183, 183, 183, 183, 183, 183, 183,
	183, 183, 183, 183, 183, 183, 183, 183, 183, 183,
	183, 183, 183, 183, 184, 184, 184, 184, 184, 184,
	184, 184, 198, 198, 185, 185, 193, 193, 194, 194,
	194, 191, 191, 192, 192, 195, 195, 187, 188, 196,
	189, 189, 189, 190, 190, 190, 197, 197, 197, 197,
	186, 200, 200, 220, 220, 219, 219, 218, 218, 218,
	208, 208, 215, 215, 215, 215, 215, 203, 203, 203,
	202, 202, 204, 204, 207, 207, 217, 217, 216, 201,
	201, 221, 221, 221, 221, 221, 205, 205, 206, 206,
	206, 232, 233, 231, 231, 231, 231, 231, 212, 212,
	212, 213, 213, 213, 214, 214, 214, 234, 234, 33,
	33, 33, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 119, 119, 119, 35, 36, 36, 36, 36, 36,
	36, 36, 36, 156, 156, 230, 230, 230, 230, 230,
	224, 222, 222, 223, 223, 13, 38, 38, 14, 14,
	14, 14, 14, 14, 15, 15, 39, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 40, 64, 144,
	144, 142, 142, 145, 145, 143, 143, 143, 146, 146,
	146, 147, 147, 175, 175, 175, 41, 41, 46, 46,
	47, 48, 157, 157, 44, 44, 45, 45, 45, 45,
	58, 58, 240, 240, 43, 43, 42, 42, 42, 42,
	16, 241, 49, 50, 50, 51, 51, 51, 55, 55,
	55, 53, 53, 53, 54, 54, 61, 61, 60, 60,
	62, 62, 62, 62, 122, 122, 122, 123, 123, 167,
	167, 167, 166, 166, 166, 166, 65, 65, 66, 66,
	67, 67, 68, 68, 68, 68, 83, 83, 84, 84,
	84, 84, 84, 94, 94, 129, 129, 131, 131, 69,
	69, 69, 69, 70, 70, 71, 71, 72, 72, 155,
	155, 172, 172, 76, 76, 76, 78, 77, 77, 77,
	77, 79, 79, 81, 81, 80, 80, 82, 85, 85,
	85, 85, 86, 86, 63, 63, 63, 63, 63, 63,
	63, 141, 141, 88, 88, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 102, 102, 102, 102, 102,
	102, 89, 89, 89, 89, 89, 89, 89, 59, 59,
	103, 103, 103, 109, 104, 104, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	97, 97, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 242, 242, 99, 98, 98, 98, 98, 98,
	98, 56, 56, 56, 56, 56, 173, 173, 176, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 113, 113, 57, 57, 111, 111, 112, 114, 114,
	110, 110, 110, 91, 91, 91, 91, 91, 91, 91,
	91, 93, 93, 93, 115, 115, 116, 116, 117, 117,
	118, 118, 121, 125, 125, 125, 126, 126, 126, 126,
	127, 127, 127, 90, 90, 90, 90, 90, 90, 128,
	128, 128, 128, 132, 132, 105, 105, 107, 107, 106,
	108, 133, 133, 136, 136, 136, 136, 135, 135, 135,
	169, 169, 169, 139, 139, 148, 148, 149, 149, 140,
	140, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	154, 154, 153, 153, 153, 150, 150, 150, 151, 151,
	168, 168, 164, 164, 165, 165, 170, 170, 171, 171,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 237, 238,
	159, 160, 160, 160,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 4, 6, 7,
	5, 10, 1, 3, 1, 3, 7, 8, 1, 1,
	9, 8, 7, 6, 6, 1, 1, 1, 3, 1,
	3, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	0, 2, 2, 11, 7, 9, 5, 5, 15, 0,
	3, 1, 1, 1, 1, 1, 0, 2, 2, 1,
	1, 1, 1, 1, 4, 5, 8, 1, 2, 5,
	7, 10, 8, 11, 1, 2, 5, 2, 4, 2,
	3, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	0, 2, 1, 3, 3, 4, 4, 2, 4, 1,
	3, 3, 3, 3, 0, 2, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 3, 2,
	2, 2, 2, 2, 1, 2, 2, 2, 1, 4,
	4, 3, 3, 2, 4, 5, 2, 3, 4, 2,
	2, 3, 3, 3, 3, 3, 4, 1, 1, 1,
	1, 1, 6, 6, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 3, 0, 5, 0, 3,
	5, 0, 1, 0, 1, 1, 2, 2, 3, 1,
	0, 3, 3, 0, 2, 2, 2, 1, 2, 1,
	2, 5, 4, 0, 1, 1, 2, 2, 3, 2,
	0, 1, 2, 3, 3, 2, 2, 1, 1, 1,
	1, 1, 0, 1, 0, 1, 1, 3, 3, 3,
	1, 10, 11, 11, 12, 12, 1, 1, 0, 2,
	2, 3, 3, 1, 1, 2, 2, 2, 0, 1,
	3, 1, 2, 3, 1, 1, 1, 0, 2, 1,
	1, 1, 6, 10, 9, 7, 7, 7, 9, 7,
	12, 14, 7, 7, 9, 9, 10, 5, 6, 8,
	7, 0, 1, 2, 4, 7, 5, 5, 5, 12,
	7, 5, 9, 0, 1, 1, 1, 1, 1, 1,
	7, 1, 3, 8, 8, 3, 3, 5, 4, 6,
	4, 4, 4, 4, 3, 2, 3, 4, 4, 3,
	6, 6, 4, 4, 4, 4, 4, 3, 3, 2,
	6, 2, 3, 4, 3, 7, 6, 5, 4, 2,
	4, 3, 4, 3, 3, 5, 2, 3, 3, 1,
	1, 0, 1, 1, 1, 0, 2, 2, 0, 2,
	2, 0, 2, 0, 1, 1, 2, 1, 1, 2,
	1, 1, 1, 1, 3, 3, 1, 1, 1, 1,
	0, 3, 1, 1, 2, 2, 2, 2, 3, 3,
	2, 0, 2, 0, 2, 1, 2, 2, 0, 1,
	1, 0, 1, 1, 0, 1, 0, 1, 1, 3,
	1, 2, 3, 5, 2, 4, 7, 0, 1, 0,
	1, 2, 1, 1, 1, 1, 0, 2, 1, 3,
	1, 1, 1, 3, 1, 3, 2, 6, 1, 4,
	6, 3, 2, 0, 3, 1, 3, 1, 3, 4,
	4, 4, 3, 2, 4, 0, 1, 0, 2, 0,
	1, 1, 1, 1, 2, 2, 1, 2, 3, 2,
	3, 2, 2, 2, 1, 1, 3, 3, 0, 5,
	5, 5, 0, 2, 1, 3, 3, 2, 3, 1,
	2, 0, 3, 1, 1, 3, 3, 4, 4, 5,
	3, 4, 5, 6, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 2, 2,
	2, 2, 2, 3, 1, 1, 1, 1, 1, 1,
	5, 6, 6, 6, 5, 5, 5, 6, 5, 5,
	6, 5, 5, 5, 5, 6, 5, 5, 5, 4,
	4, 5, 5, 5, 5, 5, 4, 4, 4, 4,
	4, 4, 3, 6, 6, 6, 8, 8, 8, 8,
	9, 4, 7, 5, 4, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	8, 8, 0, 2, 3, 4, 4, 4, 4, 4,
	4, 0, 3, 4, 7, 3, 1, 1, 2, 3,
	3, 1, 2, 2, 1, 2, 1, 2, 2, 1,
	2, 0, 1, 0, 2, 1, 2, 4, 0, 2,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 0, 3, 0, 2, 0, 3,
	1, 3, 2, 0, 1, 1, 0, 2, 4, 4,
	0, 2, 4, 2, 1, 3, 5, 4, 6, 1,
	3, 3, 5, 0, 5, 1, 3, 1, 2, 3,
	1, 1, 3, 3, 3, 3, 3, 1, 2, 1,
	1, 1, 1, 1, 1, 0, 2, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 1, 0, 1,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -235, -1, -2, -6, -7, -8, -9, -10, -12,
	-33, -13, -14, -15, -39, -40, -41, -46, -47, -48,
	-44, -43, -42, -16, -21, -3, -4, 6, 7, -52,
	9, 10, 29, -37, 119, -34, -35, -36, 122, 121,
	158, 123, 151, 53, 194, 195, 197, 198, -240, -157,
	156, 157, 30, 31, 125, 192, -237, 8, 288, 120,
	153, 152, 25, 57, -236, 402, -117, 15, -51, 5,
	-49, -241, -49, -49, -49, -49, -49, -209, -211, 57,
	94, -151, 132, 75, 279, 128, -158, 129, -150, 179,
	34, 139, 138, 129, 129, 130, 132, 279, 128, 166,
	129, -80, -170, 60, -162, 330, 142, 345, 346, 194,
	205, 199, 233, 221, 331, 347, 143, 187, 219, 222,
	266, 141, 180, 348, 253, 261, 190, 69, 197, 275,
	349, 184, 186, 185, 191, 154, 217, 210, 350, 338,
	208, 27, 351, 263, 238, 352, 335, 262, 209, 125,
	353, 145, 139, 354, 239, 243, 355, 267, 356, 357,
	358, 203, 204, 359, 269, 237, 32, 140, 332, 38,
	163, 270, 241, 360, 236, 231, 361, 362, 363, 364,
	235, 202, 230, 182, 42, 245, 244, 246, 183, 265,
	224, 365, 366, 146, 367, 368, 211, 18, 369, 370,
	273, 157, 371, 372, 373, 374, 161, 375, 376, 377,
	264, 240, 242, 378, 136, 379, 165, 380, 334, 381,
	271, 207, 382, 147, 162, 156, 274, 383, 384, 385,
	386, 148, 387, 388, 389, 198, 188, 390, 391, 392,
	393, 173, 277, 268, 41, 192, 250, 394, 201, 138,
	193, 395, 195, 170, 181, 256, 189, 228, 164, 396,
	397, 215, 216, 234, 200, 229, 196, 166, 167, 158,
	398, 276, 251, 336, 223, 220, 171, 399, 132, 168,
	169, 400, 257, 258, 172, 333, 272, 218, 252, 129,
	112, 222, 266, 119, 254, 255, 263, -203, 264, 165,
	-175, 129, -142, 253, 257, 258, 172, 60, 130, 131,
	32, 268, 267, 259, -170, 196, -58, 123, 159, -80,
	-159, -159, -159, 256, 256, -159, -30, 193, -2, -140,
	132, 258, 134, -126, 17, 16, -5, -3, -237, 6,
	20, 21, -55, 43, 44, -50, -62, 103, -63, -170,
	-87, 77, -92, 28, 60, -162, 23, -91, -88, -110,
	-108, -109, 112, 113, 114, 101, 102, 109, 78, 115,
	-97, -95, -96, -98, -100, -101, 62, 61, 70, 63,
	64, 65, 66, 71, 72, 73, -164, -106, -237, 47,
	48, 128, 289, 290, 291, 292, 329, 149, 293, 80,
	37, 278, 287, 286, 285, 283, 284, 280, 282, 281,
	295, 296, 135, 279, 107, 288, 318, 319, 320, 321,
	322, 323, 324, 325, 327, 328, 326, 308, 301, 302,
	303, 304, 305, 306, 307, 309, 310, 311, 312, 313,
	314, 315, 316, 317, -140, -140, 11, -73, -74, -80,
	-82, -170, -133, -174, 196, -136, 268, 267, -110, -135,
	-164, -170, 266, 222, 265, -210, 94, -199, 60, -80,
	130, -80, 288, -149, 135, -149, 166, -149, 86, -38,
	-80, -148, 135, -164, 60, -162, -148, -148, -148, -148,
	-80, 116, -80, 60, 29, -160, -237, -165, -164, -161,
	124, 150, 76, 337, 22, 24, 248, 301, 79, 112,
	302, 303, 304, 16, 80, 111, 289, 305, 119, 51,
	280, 282, 278, 279, 254, 28, 10, 25, 152, 21,
	105, 121, 83, 84, 85, 155, 23, 153, 73, 149,
	19, 54, 11, 13, 299, 300, 14, 135, 134, 96,
	130, 49, 8, 115, 26, 93, 45, 306, 307, 341,
	35, 342, 47, 94, 17, 283, 284, 30, 329, 308,
	160, 343, 309, 107, 52, 39, 77, 71, 33, 74,
	55, 75, 15, 50, 297, 344, 95, 122, 288, 48,
	128, 6, 294, 29, 151, 312, 311, 310, 313, 46,
	291, 292, 314, 401, 129, 82, 295, 296, 133, 72,
	5, 34, 31, 9, 53, 56, 285, 286, 287, 37,
	316, 315, 317, 81, 12, 298, 279, 128, 60, 165,
	129, 166, 132, -160, -160, -205, 11, 96, -160, 170,
	171, -160, -145, -144, 167, 261, 262, 256, 260, 12,
	-64, 94, 171, 256, 169, -160, -45, -2, -9, -7,
	-8, -2, 86, -159, -159, 29, 62, 40, -238, 59,
	129, -80, 119, 121, 124, 55, -127, 19, 30, -63,
	-170, -118, -121, -63, -117, -2, -49, 39, -53, 20,
	21, 68, 11, -167, 76, 75, 93, -166, 22, 60,
	-162, -163, 62, 301, 302, 303, 304, 305, 318, 319,
	320, 306, 307, 321, 322, 323, 308, 309, 324, 325,
	327, 328, 326, 312, 311, 310, 313, 314, 316, 315,
	317, 116, -63, -89, 96, 77, 94, 95, 79, 98,
	97, 108, 101, 102, 103, 104, 105, 106, 107, 99,
	100, 111, 86, 87, 88, 89, 90, 91, 92, -141,
	-237, -109, -237, 117, 118, -92, -92, -92, -92, -92,
	-92, -92, -92, -237, -2, -104, -63, -237, -237, -237,
	-237, -237, -237, -237, -237, -237, -237, -237, -113, -63,
	-237, -242, -99, -237, -242, -99, -242, -99, -242, -237,
	-242, -99, -242, -99, -242, -242, -99, -242, -237, -237,
	-237, -237, -237, -237, -237, -237, -237, -237, -237, -237,
	-237, -237, -237, -237, -237, -237, -237, -237, -237, -237,
	-237, -237, -237, -237, -237, -237, -237, -237, -237, -237,
	-237, -237, -81, 26, -80, -66, -67, -68, -69, -83,
	-109, -237, -80, -80, -73, -239, 58, 11, 56, -239,
	58, 116, 58, -133, 196, -134, -137, 269, 271, 86,
	-169, -164, 62, 28, 116, 29, 59, 58, -80, -177,
	-181, -183, -182, -184, -179, -180, 219, 222, 226, 224,
	220, 225, 112, 223, 228, 229, 230, 231, 232, 233,
	234, 235, 236, 237, 238, 29, 154, 215, 216, 217,
	218, 239, 240, 241, 242, 243, 244, 245, 246, 199,
	221, 331, 200, 201, 202, 203, 204, 205, 207, 208,
	209, 210, 211, 212, 213, -164, 22, 132, 60, 77,
	60, 60, -80, 60, 58, 133, -73, 23, 55, -75,
	-80, 60, 60, 60, -171, -170, -161, -160, -160, -149,
	-149, -160, -160, -80, -80, -80, -80, -160, -160, 11,
	-143, 11, 96, -143, -63, -92, -147, 94, 55, 60,
	-28, -27, -29, 180, 181, 182, 183, 184, 185, 186,
	187, 188, 189, 190, 191, 62, -80, -160, 168, 168,
	129, 129, 173, -80, 9, 96, 58, 18, 116, 58,
	-125, 24, 25, -126, -238, -55, -93, 40, 63, 66,
	-54, 46, -80, -63, -63, -102, 71, 77, 72, 73,
	-166, -237, 103, -171, -165, -161, -92, -103, -106, -109,
	67, 96, 94, 95, 79, -92, -92, -92, -92, -92,
	-92, -92, -92, -92, -92, -92, -92, -92, -92, -92,
	-173, 60, 62, 60, -91, -91, -164, -53, -238, 58,
	-238, -2, -60, -62, -60, -238, -63, -63, -110, 62,
	-60, -110, 62, -60, -60, -60, -53, -111, -112, 81,
	-110, -238, -92, -164, -164, -60, -61, -60, -60, -60,
	-238, -238, -62, -60, -62, -60, -60, -238, -238, -238,
	-238, -53, -53, -60, -60, -60, -53, -60, -60, -53,
	-60, -60, -60, -60, -53, -60, -60, -60, -130, 161,
	-80, 29, 58, -76, -78, -77, -79, 45, 49, 51,
	46, 47, 48, 52, -155, 22, -66, -237, -84, 161,
	-85, 22, -172, 53, 134, 54, -170, 62, -130, 56,
	-66, -80, -66, -82, -170, 103, -136, -134, 58, 270,
	272, 273, 55, 74, -63, -190, 111, -165, -171, -212,
	-213, -214, -165, 62, 63, -199, -200, -201, -215, 144,
	-221, 136, 138, 34, -202, 145, 130, 35, 59, -178,
	-191, 251, -185, 57, -185, -185, 227, 219, 222, 220,
	-185, -185, -185, -185, -185, -189, 222, -189, -189, -189,
	-189, 220, 57, 57, -185, -185, -185, -193, 57, -193,
	214, -193, -194, 57, -194, -194, -194, -168, 56, -124,
	-80, -160, 23, -160, -31, 176, 150, -80, -80, -80,
	58, 60, 60, -206, 11, 96, -80, -94, 22, -170,
	-170, -146, 94, 12, -59, 155, 62, -80, 58, 86,
	-152, 124, 121, 122, 126, 127, -224, 248, 120, 222,
	69, 28, 15, 289, 161, 336, 60, 162, -80, -80,
	-80, -80, -80, 124, 121, 41, -63, -63, -121, -127,
	-139, 19, 11, 37, 37, -60, 71, 72, 73, 116,
	-237, -103, -92, -92, -92, -59, 76, -238, -61, -63,
	-238, 58, -238, -238, 58, 56, 22, 11, 11, -238,
	11, 11, -238, -238, -238, -60, -114, -112, 83, -63,
	-238, -238, 58, 58, -238, -238, -238, -238, -122, 297,
	-122, -238, -238, -238, -238, -238, -122, -122, -122, -122,
	-60, -60, -238, -238, -238, -60, -238, -238, -60, -238,
	-238, -238, -238, -60, -238, -238, -238, -90, 29, 37,
	-2, -237, -237, -133, -67, -68, -68, -67, -68, 45,
	45, 45, 50, 45, 50, 45, -77, -170, -238, -237,
	33, -172, -85, 130, 130, 130, -86, 12, -66, -86,
	-86, 116, -137, -138, 274, 271, 277, 60, 62, 116,
	58, -214, 86, 57, 60, 35, -202, -202, -207, 60,
	-207, 35, -195, -187, -188, -196, -197, -186, 71, 77,
	28, 55, 248, 136, 35, 34, 69, -192, 252, 63,
	-189, -189, -185, -185, -185, 227, -185, -189, -190, 29,
	-190, -190, -190, -190, -189, -198, 62, -198, 63, -193,
	63, 55, -164, -2, 22, -32, 8, 9, 10, 133,
	-160, -80, -160, -160, -86, 60, 60, -143, -146, 33,
	62, -63, -92, -27, -91, -159, -156, -230, -202, -234,
	-201, 137, 141, 144, 145, 136, 161, -156, -230, 144,
	-202, 145, 137, -153, -202, 133, 22, -156, -156, -208,
	86, 161, -229, 56, 168, 248, 168, 42, -80, -65,
	11, 103, -165, -61, -59, 76, -92, -238, -62, -176,
	112, 219, 154, 217, 210, 237, 224, 250, 215, 251,
	-173, -176, -92, -92, -92, -92, 330, -117, 85, -63,
	82, -92, -92, -164, -237, -122, -122, -122, -122, -122,
	-238, -238, -123, -122, -123, -123, -238, -123, -123, -238,
	-123, -123, -123, -123, -238, -123, -123, -123, -132, 55,
	-133, -105, -107, -106, -237, -2, -128, -164, -131, -164,
	-86, -71, -70, 55, 56, -72, 55, -70, 45, 45,
	-131, -92, -85, -237, -237, -237, -117, -63, -86, 271,
	275, 276, -213, -214, -217, -216, -164, -221, -207, -207,
	57, 71, -92, 9, 35, 35, 62, 59, -190, -190,
	-189, -185, -190, 60, 112, -190, 59, 58, 59, 58,
	59, 58, -80, -124, -124, 55, -80, -146, -92, 57,
	-199, -159, -207, -150, 60, 60, -159, 60, -164, 35,
	60, -80, -164, -199, 60, -63, -164, -227, 333, -228,
	60, -164, -164, -164, -86, -66, -238, -92, -238, -185,
	-185, -185, -194, -185, 204, -185, 204, -238, -238, 19,
	19, 19, 19, -237, -57, 294, -63, 58, 58, -117,
	161, -123, -123, -123, -123, -123, 27, -132, 58, -238,
	-238, -238, 58, 116, -238, 58, -117, -63, 57, -63,
	-238, -85, -155, -129, -164, -129, -129, -126, 59, 58,
	-185, -129, -96, -190, -189, 62, -189, 63, 63, 57,
	-2, -80, -199, -119, 149, 150, -168, -204, -202, 60,
	-154, 133, 22, 133, -119, -199, 26, -226, -225, -165,
	57, 56, -115, 13, -189, 60, -92, -92, -92, -92,
	-92, -238, 62, -92, -92, -238, 16, 35, -107, 37,
	-2, -237, -164, -164, -164, -126, -129, -84, -172, 58,
	-238, -238, -238, -219, -218, 56, 140, 69, -216, -125,
	59, -190, -190, 59, 59, -217, -124, 19, 59, -159,
	60, 57, -207, 60, -164, -159, -119, -237, 58, 86,
	-129, -80, -116, 14, 16, -238, -238, -238, -238, -56,
	96, 333, -238, -238, -104, 9, -105, -2, 116, 59,
	-85, -164, -218, 60, -208, 62, 147, 59, 174, -159,
	-217, -168, -159, -222, -223, 161, -225, -214, 59, -63,
	-104, -238, 331, 52, 334, -117, -133, -238, -164, 63,
	-80, -220, -219, 175, 59, 57, -238, 58, -164, -229,
	42, 332, 335, -238, 57, -120, 177, 178, -220, -217,
	-223, 37, -227, 42, -129, -124, 60, 60, 59, 163,
	333, 59, -11, -17, -10, -7, -8, -9, 194, -220,
	164, 334, -232, -233, 55, -124, -22, -18, -2, -7,
	-8, -9, -10, -19, -20, -21, -17, 80, 135, -237,
	335, -233, 55, -232, 55, 10, 9, 402, -63, -63,
	-92, 160, -231, 148, 143, 146, 29, -231, 85, -18,
	-23, -24, 81, 82, -238, -238, 142, 28, 71, 85,
	83, -24, -63, -22, 80, -22, 82, 402, 402, -22,
	85, 83, -25, -26, 84, 85, 402, 135, -22, 85,
	83, -26, -63, 80, 402, 135, -22, 82, 85, 402,
	-22, 135, 85, 402, 135,
}
var yyDef = [...]int{

	26, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 728, 0, 441, 441, 441,
	441, 441, 441, 0, -2, 309, 310, 311, 0, 0,
	0, 0, -2, 417, 418, 0, 420, 421, 430, -2,
	1150, 1150, 0, 0, 1150, 0, 0, 38, 39, 779,
	433, 422, 423, 1148, 1, 3, 736, 0, 0, 445,
	448, 443, 0, 779, 779, 0, 0, 71, 72, 0,
	0, 0, 0, 0, 777, 777, 0, 777, 799, 0,
	795, 796, 797, 0, 775, 0, 775, 775, 775, 775,
	0, 365, 525, 806, 807, 936, 937, 938, 939, 940,
	941, 942, 943, 944, 945, 946, 947, 948, 949, 950,
	951, 952, 953, 954, 955, 956, 957, 958, 959, 960,
	961, 962, 963, 964, 965, 966, 967, 968, 969, 970,
	971, 972, 973, 974, 975, 976, 977, 978, 979, 980,
	981, 982, 983, 984, 985, 986, 987, 988, 989, 990,
	991, 992, 993, 994, 995, 996, 997, 998, 999, 1000,
	1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010,
	1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020,
	1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030,
	1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040,
	1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050,
	1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060,
	1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070,
	1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080,
	1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090,
	1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100,
	1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110,
	1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 0,
	0, 0, 1151, 0, 1151, 1151, 379, 0, 381, 1151,
	0, 1151, 0, 389, 0, 0, 396, 1151, 267, 268,
	269, 414, 415, 402, 416, 419, 0, 0, 0, 434,
	435, 436, 437, 1150, 1150, 440, 107, 0, 32, 0,
	0, 0, 780, 740, 0, 0, 728, 34, 0, 441,
	446, 447, 451, 449, 450, 442, 0, 460, 469, 0,
	534, 0, 539, 541, -2, -2, 0, 576, 577, 578,
	579, 580, 0, 0, 0, 0, 0, 0, 0, 0,
	604, 605, 606, 607, 608, 609, 713, 714, 715, 716,
	717, 718, 719, 720, 543, 544, 710, 760, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 701,
	0, 672, 672, 672, 672, 672, 672, 672, 672, 672,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 49,
	51, 525, 55, 0, 1097, 761, -2, -2, 0, 0,
	710, 0, -2, 950, -2, 0, 0, 149, 0, 147,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 355,
	0, 0, 0, 0, 802, 803, 0, 0, 0, 0,
	364, 0, 366, 1151, 1151, 369, 1152, 1153, 804, 805,
	810, 811, 812, 813, 814, 815, 816, 817, 818, 819,
	820, 821, 822, 823, 824, 825, 826, 827, 828, 829,
	830, 831, 832, 833, 834, 835, 836, 837, 838, 839,
	840, 841, 842, 843, 844, 845, 846, 847, 848, 849,
	850, 851, 852, 853, 854, 855, 856, 857, 858, 859,
	860, 861, 862, 863, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 873, 874, 875, 876, 877, 878, 879,
	880, 881, 882, 883, 884, 885, 886, 887, 888, 889,
	890, 891, 892, 893, 894, 895, 896, 897, 898, 899,
	900, 901, 902, 903, 904, 905, 906, 907, 908, 909,
	910, 911, 912, 913, 914, 915, 916, 917, 918, 919,
	920, 921, 922, 923, 924, 925, 926, 927, 928, 929,
	930, 931, 932, 933, 934, 935, 777, 777, 1151, 1151,
	0, 0, 0, 377, 378, 0, 286, 287, 382, 1151,
	1151, 384, 0, 405, 405, 403, 404, 399, 400, 0,
	391, 0, 411, 393, 394, 397, 424, -2, 427, 428,
	429, -2, 0, 438, 439, 0, 109, 0, 33, 1149,
	0, 1151, 0, 0, 0, 0, 27, 0, 0, 737,
	0, 729, 730, 733, 736, 32, 448, 0, 454, 452,
	453, 444, 0, 461, 0, 0, 0, 470, 0, 472,
	473, 474, 475, 1120, 1121, 1122, 1123, 1124, 1125, 1126,
	1127, 1128, 1129, 1130, 1131, 0, 1133, 1134, 1135, 1136,
	1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146,
	1147, 0, 537, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 561, 562, 563, 564, 565, 566, 567, 540,
	0, 554, 0, 0, 0, 596, 597, 598, 599, 600,
	601, 602, 0, 451, 32, 0, 574, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 451, 0, 702,
	0, 655, 664, 0, 656, 665, 657, 666, 658, 0,
	659, 667, 660, 668, 661, 662, 669, 663, 0, 0,
	0, 456, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 451, 451, 0, 0, 0,
	451, 0, 0, 451, 0, 0, 0, 0, 451, 0,
	0, 0, 53, 0, 524, 0, 478, 480, 481, 482,
	-2, 0, 528, -2, 0, 0, 0, 45, 46, 0,
	0, 0, 0, 56, 1097, 58, 59, 0, 0, 0,
	243, 770, 771, 772, 0, 768, 298, 0, 0, 154,
	231, 162, 163, 164, 224, 166, 224, 224, 0, 224,
	224, 224, 224, 224, 240, 240, 240, 240, 240, 207,
	208, 209, 210, 211, 0, 0, 184, 224, 224, 224,
	188, 214, 215, 216, 217, 218, 219, 220, 221, 167,
	168, 169, 170, 171, 172, 173, 174, 175, 226, 226,
	226, 228, 228, 228, 228, 800, 70, 0, 1151, 0,
	1151, 0, 145, 80, 0, 0, 358, 776, 0, 360,
	47, 361, 362, 363, 526, 808, 809, 367, 368, 0,
	0, 372, 373, 374, 375, 376, 288, 383, 388, 0,
	493, 0, 0, 408, 390, 568, 392, 0, 0, 431,
	108, 111, 0, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 110, 0, 334, 0, 0,
	0, 0, 0, 0, 741, 0, 0, 0, 0, 0,
	732, 734, 735, 740, 35, 451, 0, 721, 0, 0,
	0, 455, 30, 535, 536, 538, 555, 0, 557, 559,
	471, 1132, 462, 0, 711, -2, 545, 546, 570, 571,
	572, 0, 0, 0, 0, 568, 550, 0, 581, 582,
	583, 584, 585, 586, 587, 588, 589, 590, 591, 592,
	595, 686, 687, 0, 593, 594, 603, 456, 573, 0,
	759, 32, 0, 458, 0, 642, 0, 0, 578, 713,
	0, 578, 713, 0, 0, 0, 0, 708, 705, 0,
	0, 673, 0, 0, 0, 0, 0, 457, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	523, 0, 0, 0, 0, 0, 0, 513, 0, 0,
	516, 0, 0, 0, 0, 510, 0, 0, 486, 1037,
	488, 0, 528, 0, 0, 0, 511, 512, 532, 0,
	532, 50, 532, 52, 0, 527, 762, 57, 0, 0,
	62, 63, 763, 764, 765, 766, 0, 711, 0, 146,
	299, 301, 304, 305, 306, 150, 151, 152, 0, 0,
	280, 0, 0, 274, 274, 0, 270, 271, 148, 153,
	233, 232, 165, 0, 240, 240, 224, 224, 224, 224,
	193, 240, 196, 199, 200, 243, 0, 243, 243, 243,
	243, 240, 0, 0, 185, 186, 187, 176, 0, 177,
	226, 179, 180, 0, 181, 182, 183, 0, 0, 0,
	0, 76, 778, 77, 0, 81, 82, 0, 356, 1151,
	0, 1151, 1151, 532, 0, 0, 405, 408, 0, 406,
	407, 387, 0, 0, 398, 0, 412, 395, 0, 0,
	1150, -2, 343, 792, 343, 343, 327, 260, 781, 782,
	783, 784, 785, 786, 787, 788, 789, 0, 137, 336,
	338, 337, 341, 0, 0, 0, 738, 739, 731, 28,
	0, 773, 774, 722, 723, 476, 556, 558, 560, 0,
	456, 547, 568, 551, 0, 548, 0, 542, 0, 575,
	-2, 0, 640, 641, 0, 0, 0, 0, 0, 679,
	0, 0, 680, 0, 651, 728, 0, 706, 0, 0,
	654, 674, 0, 0, 675, 676, 677, 678, 629, 0,
	630, 0, 0, 0, 0, 0, 636, 637, 638, 639,
	0, 0, 467, 467, 467, 0, 467, 467, 0, 467,
	467, 467, 467, 0, 467, 467, 467, 753, 0, 0,
	-2, 0, 0, 532, 479, 505, 507, 0, 502, 514,
	515, 517, 0, 519, 0, 521, 522, 483, 485, 0,
	0, 528, 492, 0, 0, 0, 728, 0, 532, 43,
	44, 0, 60, 61, 0, 0, 67, 244, 245, 0,
	0, 302, 0, 0, 0, 262, 274, 274, 265, 275,
	266, 0, 155, 156, 157, 158, 159, 160, 235, 0,
	0, 0, 239, 0, 247, 249, 0, 161, 234, 0,
	243, 243, 240, 191, 192, 224, 197, 243, 201, 0,
	202, 203, 204, 205, 243, 0, 222, 0, 0, 178,
	0, 0, 801, -2, 70, 0, 83, 84, 85, 0,
	359, 48, 370, 371, 380, 289, 290, 408, 386, 0,
	409, 410, 569, 112, 113, 312, 0, 1150, 274, 0,
	328, 344, 345, 346, 347, 348, 349, 0, 1150, 346,
	0, 347, 0, 0, 0, 793, 794, 0, 0, 0,
	261, 0, 140, 0, 0, 0, 0, 742, 29, 532,
	0, 463, 712, 0, 549, 0, 552, 610, 459, 0,
	224, 224, 691, 224, 228, 694, 224, 696, 224, 699,
	0, 0, 0, 0, 0, 0, 0, 703, 653, 709,
	0, 0, 0, 464, 728, 631, 632, 633, 634, 635,
	467, 467, 614, 468, 615, 616, 467, 618, 619, 467,
	621, 622, 623, 624, 467, 626, 627, 628, 36, 0,
	753, 743, 755, 757, 0, 32, 0, 749, 0, 497,
	728, 499, 506, 0, 0, 500, 0, 501, 518, 520,
	0, -2, 491, 0, 0, 0, 736, 533, 42, 64,
	65, 66, 300, 303, 0, 276, 224, 279, 263, 264,
	0, 236, 237, 0, 246, 248, 250, 225, 189, 190,
	243, 198, 194, 241, 242, 206, 240, 0, 240, 0,
	229, 0, 0, 74, 0, 0, 357, 385, 494, 0,
	331, 315, 800, 272, 308, 316, 317, 322, 323, 0,
	0, 319, 0, 331, 0, 330, 0, 335, 0, 138,
	139, 0, 0, 340, 724, 477, 611, 553, 643, 688,
	240, 692, 693, 695, 697, 698, 700, 645, 644, 0,
	0, 0, 0, 0, 0, 0, 707, 0, 0, 0,
	0, 612, 613, 617, 620, 625, 0, 37, 0, 758,
	-2, 0, 0, 0, 54, 0, 736, 503, 0, 508,
	528, 489, 0, 0, 495, 0, 0, 41, 252, 0,
	733, 0, 238, 195, 243, 223, 243, 0, 0, 0,
	-2, 0, 0, 1150, 332, 0, 0, 274, 273, 329,
	0, 790, 791, 0, 1150, 331, 0, 141, 142, 0,
	0, 0, 726, 0, 689, 690, 0, 0, 0, 0,
	681, 652, 704, 0, 0, 465, 0, 0, 756, 0,
	-2, 0, 751, 750, 498, 40, 0, 487, 528, 0,
	529, 530, 531, 251, 255, 0, 260, 0, 277, 278,
	0, 212, 213, 227, 230, 0, 75, 0, 1150, 314,
	333, 0, 800, 318, 324, 325, 1150, 0, 0, 0,
	0, 342, 31, 0, 0, 646, 648, 647, 649, 0,
	0, 0, 670, 671, 728, 0, 746, 32, 0, 504,
	490, 496, 256, 257, 0, 259, 0, 253, 0, 313,
	0, 0, 326, 0, 351, 0, 143, 144, 137, 727,
	725, 650, 0, 0, 0, 0, 754, -2, 752, 258,
	0, 73, 254, 86, 253, 0, 350, 0, 0, 140,
	682, 0, 685, 466, 0, 70, 0, 0, 320, 0,
	352, 0, 339, 683, 0, 0, 87, 88, 253, 0,
	0, 281, 70, 89, 90, 91, 92, 93, 0, 321,
	0, 0, 282, 283, 0, 78, 0, 126, -2, 129,
	130, 131, 132, 133, 134, 135, 136, 0, 0, 0,
	684, 284, 0, 285, 0, 0, 0, 0, 0, 0,
	0, 0, 291, 293, 294, 0, 0, 292, 94, 127,
	0, 97, 0, 0, 353, 354, 295, 296, 297, 0,
	0, 98, 0, 0, 95, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 0, 99, 100, 0, 0,
	0, 105, 0, 96, 0, 102, 0, 0, 0, 0,
	0, 101, 0, 106, 103,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 78, 3, 3, 3, 106, 98, 3,
	57, 59, 103, 101, 58, 102, 116, 104, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 402,
	87, 86, 88, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 108, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 97, 3, 109,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 79, 80, 81, 82, 83, 84, 85,
	89, 90, 91, 92, 93, 94, 95, 96, 99, 100,
	105, 107, 110, 111, 112, 113, 114, 115, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:368
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:373
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:374
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:378
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 26:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:403
		{
			setParseTree(yylex, nil)
		}
	case 27:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:409
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 28:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:417
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 29:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:421
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 30:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:427
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 31:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:434
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:440
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:444
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:450
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:454
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:461
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].setExprs)
			yyVAL.statement = ins
		}
	case 37:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:473
		{
			cols := make(Columns, 0, len(yyDollar[7].setExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].setExprs))
			for _, updateList := range yyDollar[7].setExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].setExprs)}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:485
		{
			yyVAL.str = InsertStr
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:489
		{
			yyVAL.str = ReplaceStr
		}
	case 40:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:495
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].setExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 41:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:501
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 42:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:505
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:509
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 44:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:513
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:518
		{
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:519
		{
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:523
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName.ToViewName()}
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:527
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName.ToViewName())
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:533
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:537
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:543
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:547
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:552
		{
			yyVAL.partitions = nil
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:556
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:562
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:566
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:570
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 58:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:574
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:580
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:584
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:590
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:594
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:598
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:604
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:608
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:612
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:616
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:622
		{
			yyVAL.str = SessionStr
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:626
		{
			yyVAL.str = GlobalStr
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:631
		{
			yyVAL.int = yyPosition(yylex)
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:637
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			if len(yyDollar[1].ddl.TableSpec.Constraints) > 0 {
				yyDollar[1].ddl.ConstraintAction = AddStr
			}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:645
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 73:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:651
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: yyDollar[4].colIdent, Using: yyDollar[5].colIdent, Type: yyDollar[2].str, Columns: yyDollar[9].indexColumns, Options: yyDollar[11].indexOptions}}
		}
	case 74:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:655
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[3].tableName.ToViewName(), ViewExpr: yyDollar[6].selStmt, SubStatementPositionStart: yyDollar[5].int, SubStatementPositionEnd: yyDollar[7].int - 1}
		}
	case 75:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:659
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[5].tableName.ToViewName(), ViewExpr: yyDollar[8].selStmt, SubStatementPositionStart: yyDollar[7].int, SubStatementPositionEnd: yyDollar[9].int - 1, OrReplace: true}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:663
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 77:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:667
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 78:
		yyDollar = yyS[yypt-15 : yypt+1]
//line sql.y:671
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[8].tableName, TriggerSpec: &TriggerSpec{Name: string(yyDollar[4].bytes), Time: yyDollar[5].str, Event: yyDollar[6].str, Order: yyDollar[12].triggerOrder, Body: yyDollar[14].statement}, SubStatementPositionStart: yyDollar[13].int, SubStatementPositionEnd: yyDollar[15].int - 1}
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:676
		{
			yyVAL.empty = struct{}{}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:680
		{
			yyVAL.empty = struct{}{}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:686
		{
			yyVAL.str = BeforeStr
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:690
		{
			yyVAL.str = AfterStr
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:696
		{
			yyVAL.str = InsertStr
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:700
		{
			yyVAL.str = UpdateStr
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:704
		{
			yyVAL.str = DeleteStr
		}
	case 86:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:709
		{
			yyVAL.triggerOrder = nil
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:713
		{
			yyVAL.triggerOrder = &TriggerOrder{PrecedesOrFollows: FollowsStr, OtherTriggerName: string(yyDollar[2].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:717
		{
			yyVAL.triggerOrder = &TriggerOrder{PrecedesOrFollows: PrecedesStr, OtherTriggerName: string(yyDollar[2].bytes)}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:723
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:733
		{
			yyVAL.statement = &BeginEndBlock{Statements: yyDollar[2].statements}
		}
	case 95:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:739
		{
			yyVAL.statement = &CaseStatement{Expr: yyDollar[2].expr, Cases: yyDollar[3].caseStatementCases}
		}
	case 96:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:743
		{
			yyVAL.statement = &CaseStatement{Expr: yyDollar[2].expr, Cases: yyDollar[3].caseStatementCases, Else: yyDollar[5].statements}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:749
		{
			yyVAL.caseStatementCases = []CaseStatementCase{yyDollar[1].caseStatementCase}
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:753
		{
			yyVAL.caseStatementCases = append(yyVAL.caseStatementCases, yyDollar[2].caseStatementCase)
		}
	case 99:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:759
		{
			yyVAL.caseStatementCase = CaseStatementCase{Case: yyDollar[2].expr, Statements: yyDollar[4].statements}
		}
	case 100:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:765
		{
			conds := []IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}
			yyVAL.statement = &IfStatement{Conditions: conds}
		}
	case 101:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:770
		{
			conds := []IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}
			yyVAL.statement = &IfStatement{Conditions: conds, Else: yyDollar[7].statements}
		}
	case 102:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:775
		{
			conds := yyDollar[6].ifStatementConditions
			conds = append([]IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}, conds...)
			yyVAL.statement = &IfStatement{Conditions: conds}
		}
	case 103:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:781
		{
			conds := yyDollar[6].ifStatementConditions
			conds = append([]IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}, conds...)
			yyVAL.statement = &IfStatement{Conditions: conds, Else: yyDollar[8].statements}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:789
		{
			yyVAL.ifStatementConditions = []IfStatementCondition{yyDollar[1].ifStatementCondition}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:793
		{
			yyVAL.ifStatementConditions = append(yyVAL.ifStatementConditions, yyDollar[2].ifStatementCondition)
		}
	case 106:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:799
		{
			yyVAL.ifStatementCondition = IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:805
		{
			yyVAL.statement = &Signal{SqlStateValue: string(yyDollar[2].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:809
		{
			yyVAL.statement = &Signal{SqlStateValue: string(yyDollar[2].bytes), Info: yyDollar[4].signalInfos}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:815
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:819
		{
			yyVAL.bytes = yyDollar[3].bytes
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:825
		{
			yyVAL.signalInfos = []SignalInfo{yyDollar[1].signalInfo}
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:829
		{
			yyVAL.signalInfos = append(yyVAL.signalInfos, yyDollar[3].signalInfo)
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:835
		{
			yyVAL.signalInfo = SignalInfo{Name: string(yyDollar[1].bytes), Value: yyDollar[3].expr.(*SQLVal)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:841
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:858
		{
			yyVAL.statements = Statements{yyDollar[1].statement}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:862
		{
			yyVAL.statements = append(yyVAL.statements, yyDollar[3].statement)
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:868
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:881
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:885
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:891
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:896
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:901
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:907
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:912
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:918
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 145:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:924
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName, IfNotExists: ne}
			setDDL(yylex, yyVAL.ddl)
		}
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:935
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:942
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:946
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:952
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:957
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:961
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:965
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:971
		{
			if err := yyDollar[2].columnType.merge(yyDollar[3].columnType); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:980
		{
			yyVAL.columnType = ColumnType{}
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:984
		{
			opt := ColumnType{NotNull: yyDollar[2].boolVal, sawnull: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:993
		{
			opt := ColumnType{Default: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1002
		{
			opt := ColumnType{OnUpdate: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1011
		{
			opt := ColumnType{Autoincrement: yyDollar[2].boolVal, sawai: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1020
		{
			opt := ColumnType{KeyOpt: yyDollar[2].colKeyOpt}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1029
		{
			opt := ColumnType{Comment: yyDollar[2].sqlVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1040
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1051
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1056
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1062
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1066
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1070
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1074
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1078
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1082
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1086
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1090
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1094
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1100
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1106
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1112
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1118
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1124
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1130
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1136
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1142
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1150
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1154
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1158
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1162
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1166
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 189:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1172
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 190:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1176
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1180
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1184
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1188
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 194:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1192
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 195:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1196
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1200
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1204
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 198:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1208
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Length: yyDollar[4].sqlVal}
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1212
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1216
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1220
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1224
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1228
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1232
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1236
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 206:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1240
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1244
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1248
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1252
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1256
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1260
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 212:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1264
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 213:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1269
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1275
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1279
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1283
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1287
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1291
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1295
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1299
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1303
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1309
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[1].bytes))
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1314
		{
			yyVAL.strs = append(yyDollar[1].strs, string(yyDollar[3].bytes))
		}
	case 224:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1319
		{
			yyVAL.sqlVal = nil
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1323
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 226:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1328
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 227:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1332
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 228:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1340
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1344
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 230:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1350
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 231:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1358
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1362
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 233:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1367
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1371
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1378
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1382
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1388
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1394
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1400
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 240:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1405
		{
			yyVAL.str = ""
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1409
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1413
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 243:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1418
		{
			yyVAL.str = ""
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1422
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1426
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1432
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1436
		{
			yyVAL.colKeyOpt = colKey
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1440
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1444
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1450
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 251:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1456
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1460
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 253:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1465
		{
			yyVAL.indexOptions = nil
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1469
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1475
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1479
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1485
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1489
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1494
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1500
		{
			yyVAL.str = ""
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1504
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1510
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1514
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1518
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1522
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1526
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1532
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1536
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1540
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1546
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1550
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 272:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1555
		{
			yyVAL.str = ""
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1559
		{
			yyVAL.str = yyDollar[1].str
		}
	case 274:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1564
		{
			yyVAL.str = ""
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1568
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1574
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1578
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1584
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal, Order: yyDollar[3].str}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1590
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1594
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 281:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1601
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 282:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1605
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 283:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1609
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 284:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1613
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 285:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1617
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[12].ReferenceAction, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1623
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1627
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1632
		{
			yyVAL.str = ""
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1636
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1640
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1646
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1652
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1658
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1662
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1666
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1670
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1674
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1679
		{
			yyVAL.str = ""
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1683
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1687
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1695
		{
			yyVAL.str = yyDollar[1].str
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1699
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1703
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1709
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1713
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1717
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1722
		{
			yyVAL.str = ""
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1726
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 312:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1737
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 313:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1741
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			ddl.Column = yyDollar[8].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 314:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1748
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 315:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1755
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 316:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1759
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: DropStr, Column: NewColIdent(string(yyDollar[7].bytes)), Table: yyDollar[4].tableName}
		}
	case 317:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1763
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 318:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1767
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: RenameStr, Table: yyDollar[4].tableName, Column: NewColIdent(string(yyDollar[7].bytes)), ToColumn: NewColIdent(string(yyDollar[9].bytes))}
		}
	case 319:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1771
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 320:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1776
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[7].str), Using: yyDollar[8].colIdent, Columns: yyDollar[10].indexColumns, Options: yyDollar[12].indexOptions}}
		}
	case 321:
		yyDollar = yyS[yypt-14 : yypt+1]
//line sql.y:1780
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[9].str), Type: yyDollar[7].str, Using: yyDollar[10].colIdent, Columns: yyDollar[12].indexColumns, Options: yyDollar[14].indexOptions}}
		}
	case 322:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1784
		{
			yyVAL.statement = &DDL{Action: AlterStr, ConstraintAction: DropStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[7].bytes)}}}}
		}
	case 323:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1789
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[7].colIdent}}
		}
	case 324:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1793
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: RenameStr, FromName: yyDollar[7].colIdent, ToName: yyDollar[9].colIdent}}
		}
	case 325:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1797
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ModifyStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 326:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1804
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ChangeStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, Column: NewColIdent(string(yyDollar[7].bytes)), ColumnOrder: yyDollar[9].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			yyVAL.statement = ddl
		}
	case 327:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1810
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 328:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1814
		{
			ddl := &DDL{Action: AlterStr, ConstraintAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddConstraint(yyDollar[6].constraintDefinition)
			yyVAL.statement = ddl
		}
	case 329:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1820
		{
			yyVAL.statement = &DDL{Action: AlterStr, ConstraintAction: DropStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[8].bytes), Details: &ForeignKeyDefinition{}}}}}
		}
	case 330:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1825
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, AutoIncSpec: &AutoIncSpec{Value: yyDollar[7].expr}}
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1830
		{
			yyVAL.columnOrder = nil
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1834
		{
			yyVAL.columnOrder = &ColumnOrder{First: true}
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1838
		{
			yyVAL.columnOrder = &ColumnOrder{AfterColumn: NewColIdent(string(yyDollar[2].bytes))}
		}
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1844
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 335:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1850
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 336:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1862
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 337:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1872
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 338:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1876
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 339:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1880
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 340:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1893
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 341:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1903
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 342:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1907
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1920
		{
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1922
		{
		}
	case 350:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1933
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1939
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1943
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 353:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1949
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 354:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1953
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1959
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1965
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 357:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1969
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 358:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1977
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 359:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1985
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[3].colIdent}}
		}
	case 360:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1989
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromViews: yyDollar[4].tableNames, IfExists: exists}
		}
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1997
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 362:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2001
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2005
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, TriggerSpec: &TriggerSpec{Name: string(yyDollar[4].bytes)}, IfExists: exists}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2015
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2019
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2024
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 367:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2030
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 368:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2035
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2039
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 370:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2043
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 371:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2047
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 372:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2052
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 373:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2056
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2060
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 375:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2064
		{
			yyVAL.statement = &Show{Type: CreateTriggerStr, Table: yyDollar[4].tableName}
		}
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2068
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2072
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2076
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2080
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 380:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2084
		{
			yyVAL.statement = &Show{Type: IndexStr, Table: yyDollar[4].tableName, Database: yyDollar[5].str, ShowIndexFilterOpt: yyDollar[6].expr}
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2088
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2092
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 383:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2096
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2100
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 385:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2104
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 386:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2109
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[6].showFilter, AsOf: yyDollar[5].expr}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 387:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2119
		{
			yyVAL.statement = &Show{Type: string(yyDollar[3].bytes), ShowTablesOpt: &ShowTablesOpt{DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}}
		}
	case 388:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2123
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2127
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 390:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2131
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2137
		{
			// Cannot dereference $3 directly, or else the parser stackcannot be pooled. See yyParsePooled
			cmp := yyDollar[3].expr.(*ComparisonExpr)
			cmp.Left = &ColName{Name: NewColIdent("collation")}
			var ex Expr = cmp
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &ex}
		}
	case 392:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2145
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2150
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2154
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 395:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2158
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2162
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2176
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2182
		{
			yyVAL.expr = &ComparisonExpr{Operator: LikeStr, Right: yyDollar[2].expr, Escape: yyDollar[3].expr}
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2188
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2192
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 401:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2198
		{
			yyVAL.str = ""
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2202
		{
			yyVAL.str = "full "
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2208
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2212
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 405:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2218
		{
			yyVAL.str = ""
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2222
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2226
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 408:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2232
		{
			yyVAL.showFilter = nil
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2236
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2240
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 411:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2246
		{
			yyVAL.showFilter = nil
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2250
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 413:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2256
		{
			yyVAL.str = ""
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2260
		{
			yyVAL.str = SessionStr
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2264
		{
			yyVAL.str = GlobalStr
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2270
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2274
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2280
		{
			yyVAL.statement = &Begin{}
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2284
		{
			yyVAL.statement = &Begin{}
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2290
		{
			yyVAL.statement = &Commit{}
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2296
		{
			yyVAL.statement = &Rollback{}
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2301
		{
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2302
		{
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2306
		{
			yyVAL.statement = &Explain{ExplainFormat: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2310
		{
			yyVAL.statement = &Explain{Analyze: true, ExplainFormat: TreeStr, Statement: yyDollar[3].selStmt}
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2316
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2324
		{
			yyVAL.str = ""
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2328
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2339
		{
			yyVAL.statement = &Show{Type: "columns", OnTable: yyDollar[2].tableName}
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2343
		{
			yyVAL.statement = &OtherRead{}
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2349
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2353
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2357
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2361
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2367
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 441:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2371
		{
			setAllowComments(yylex, true)
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2375
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 443:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2381
		{
			yyVAL.bytes2 = nil
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2385
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2391
		{
			yyVAL.str = UnionStr
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2395
		{
			yyVAL.str = UnionAllStr
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2399
		{
			yyVAL.str = UnionDistinctStr
		}
	case 448:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2404
		{
			yyVAL.str = ""
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2408
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2412
		{
			yyVAL.str = SQLCacheStr
		}
	case 451:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2417
		{
			yyVAL.str = ""
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2421
		{
			yyVAL.str = ""
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2425
		{
			yyVAL.str = DistinctStr
		}
	case 454:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2430
		{
			yyVAL.str = ""
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2434
		{
			yyVAL.str = StraightJoinHint
		}
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2439
		{
			yyVAL.selectExprs = nil
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2443
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2449
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2453
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2459
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2463
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2467
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 463:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2471
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2478
		{
			yyVAL.over = &Over{WindowName: yyDollar[2].colIdent}
		}
	case 465:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2482
		{
			yyVAL.over = &Over{OrderBy: yyDollar[3].orderBy}
		}
	case 466:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2486
		{
			yyVAL.over = &Over{PartitionBy: yyDollar[5].exprs, OrderBy: yyDollar[6].orderBy}
		}
	case 467:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2491
		{
			yyVAL.over = nil
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2495
		{
			yyVAL.over = yyDollar[1].over
		}
	case 469:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2500
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2504
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2508
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2514
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2518
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2522
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2526
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 476:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2531
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2535
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2541
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2545
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2555
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2559
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2563
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2569
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2575
		{
			yyVAL.aliasedTableName = yyDollar[2].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
		}
	case 487:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2580
		{
			yyVAL.aliasedTableName = yyDollar[6].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
			yyVAL.aliasedTableName.Partitions = yyDollar[4].partitions
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2591
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Hints: yyDollar[1].indexHints}
		}
	case 489:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2595
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, Hints: yyDollar[4].indexHints}
		}
	case 490:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2599
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, As: yyDollar[5].tableIdent, Hints: yyDollar[6].indexHints}
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2603
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2607
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[1].tableIdent, Hints: yyDollar[2].indexHints}
		}
	case 493:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2618
		{
			yyVAL.expr = nil
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2622
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2628
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2632
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2638
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2642
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 499:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2655
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 500:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2659
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 501:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2663
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2667
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2673
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 504:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2675
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 505:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2679
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2681
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 507:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2685
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2687
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 509:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2690
		{
			yyVAL.empty = struct{}{}
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2692
		{
			yyVAL.empty = struct{}{}
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2697
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2703
		{
			yyVAL.str = JoinStr
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2707
		{
			yyVAL.str = JoinStr
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2711
		{
			yyVAL.str = JoinStr
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2717
		{
			yyVAL.str = StraightJoinStr
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2723
		{
			yyVAL.str = LeftJoinStr
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2727
		{
			yyVAL.str = LeftJoinStr
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2731
		{
			yyVAL.str = RightJoinStr
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2735
		{
			yyVAL.str = RightJoinStr
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2741
		{
			yyVAL.str = NaturalJoinStr
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2745
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2755
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2759
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2765
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2769
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2775
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2780
		{
			yyVAL.indexHints = nil
		}
	case 529:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2784
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 530:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2788
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 531:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2792
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 532:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2797
		{
			yyVAL.expr = nil
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2801
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2807
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2811
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2815
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2819
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2823
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2827
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2831
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 541:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2837
		{
			yyVAL.str = ""
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2841
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2847
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2851
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2857
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2861
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 547:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2865
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 548:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2869
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 549:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2873
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2877
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 551:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2881
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 552:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2885
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 553:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2889
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2893
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2899
		{
			yyVAL.str = IsNullStr
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2903
		{
			yyVAL.str = IsNotNullStr
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2907
		{
			yyVAL.str = IsTrueStr
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2911
		{
			yyVAL.str = IsNotTrueStr
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2915
		{
			yyVAL.str = IsFalseStr
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2919
		{
			yyVAL.str = IsNotFalseStr
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2925
		{
			yyVAL.str = EqualStr
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2929
		{
			yyVAL.str = LessThanStr
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2933
		{
			yyVAL.str = GreaterThanStr
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2937
		{
			yyVAL.str = LessEqualStr
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2941
		{
			yyVAL.str = GreaterEqualStr
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2945
		{
			yyVAL.str = NotEqualStr
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2949
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 568:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2954
		{
			yyVAL.expr = nil
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2958
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2964
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2968
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2972
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2978
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2984
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2988
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2994
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2998
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3002
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3006
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3010
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3014
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3018
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3022
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3026
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3030
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3034
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3038
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3042
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3046
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3050
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3054
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3058
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3062
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3066
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3070
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3074
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3078
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3082
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3086
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3094
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3108
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3112
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3116
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 610:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3136
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: yyDollar[3].str == DistinctStr, Exprs: yyDollar[4].selectExprs}
		}
	case 611:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3140
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 612:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3150
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 613:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3154
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 614:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3158
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 615:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3162
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 616:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3166
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 617:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3170
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 618:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3174
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 619:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3178
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 620:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3182
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 621:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3186
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 622:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3190
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 623:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3194
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 624:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3198
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 625:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3202
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 626:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3206
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 627:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3210
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 628:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3214
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 629:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3223
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 630:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3227
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 631:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3231
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: SelectExprs{yyDollar[3].selectExpr}, Over: yyDollar[5].over}
		}
	case 632:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3235
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 633:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3239
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: SelectExprs{yyDollar[3].selectExpr}, Over: yyDollar[5].over}
		}
	case 634:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3243
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 635:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3247
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 636:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3251
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 637:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3255
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 638:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3259
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 639:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3263
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 640:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3273
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 641:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3277
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3281
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema")}
		}
	case 643:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3285
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 644:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3289
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 645:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3293
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 646:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3297
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 647:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3301
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 648:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3305
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 649:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3309
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 650:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3313
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 651:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3317
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("first"), Exprs: yyDollar[3].selectExprs}
		}
	case 652:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3321
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 653:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3325
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 654:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3329
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3339
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 656:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3343
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3347
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 658:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3352
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3357
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3362
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3368
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3373
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3377
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_user")}
		}
	case 664:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3382
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3386
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3390
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3395
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 668:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3400
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3405
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 670:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3409
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 671:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3413
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 674:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3423
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 675:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3433
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 676:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3437
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 677:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3441
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 678:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3445
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 679:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3449
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 680:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3453
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 681:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3459
		{
			yyVAL.str = ""
		}
	case 682:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3463
		{
			yyVAL.str = BooleanModeStr
		}
	case 683:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3467
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 684:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3471
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3475
		{
			yyVAL.str = QueryExpansionStr
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3481
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3485
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3491
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 689:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3495
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 690:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3499
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3503
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 692:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3507
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 693:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3511
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3517
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 695:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3521
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3525
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 697:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3529
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 698:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3533
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3537
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 700:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3541
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 701:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3546
		{
			yyVAL.expr = nil
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3550
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 703:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3555
		{
			yyVAL.str = string("")
		}
	case 704:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3559
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3565
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3569
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 707:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3575
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 708:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3580
		{
			yyVAL.expr = nil
		}
	case 709:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3584
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3590
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 711:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3594
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 712:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3598
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3604
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3608
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3612
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3616
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3620
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3624
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3628
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3632
		{
			yyVAL.expr = &NullVal{}
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3638
		{
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 722:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3642
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 723:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3646
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 724:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3651
		{
			yyVAL.exprs = nil
		}
	case 725:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3655
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 726:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3660
		{
			yyVAL.expr = nil
		}
	case 727:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3664
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 728:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3669
		{
			yyVAL.orderBy = nil
		}
	case 729:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3673
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3679
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 731:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3683
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 732:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3689
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 733:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3694
		{
			yyVAL.str = AscScr
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3698
		{
			yyVAL.str = AscScr
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3702
		{
			yyVAL.str = DescScr
		}
	case 736:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3707
		{
			yyVAL.limit = nil
		}
	case 737:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3711
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 738:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3715
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 739:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3719
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 740:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3724
		{
			yyVAL.str = ""
		}
	case 741:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3728
		{
			yyVAL.str = ForUpdateStr
		}
	case 742:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3732
		{
			yyVAL.str = ShareModeStr
		}
	case 743:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3745
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3749
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 745:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3753
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 746:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3758
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 747:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3762
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 748:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3766
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3773
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 750:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3777
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 751:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3781
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 752:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3785
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 753:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3790
		{
			yyVAL.setExprs = nil
		}
	case 754:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3794
		{
			yyVAL.setExprs = yyDollar[5].setExprs
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3800
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 756:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3804
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3810
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 758:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3814
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 759:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3820
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3826
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3836
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 762:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3840
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 763:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3846
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: NewStrVal([]byte("on"))}
		}
	case 764:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3850
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: NewStrVal([]byte("off"))}
		}
	case 765:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3854
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 766:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3858
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 768:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3865
		{
			yyVAL.bytes = []byte("charset")
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3872
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3876
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3880
		{
			yyVAL.expr = &Default{}
		}
	case 775:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3889
		{
			yyVAL.byt = 0
		}
	case 776:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3891
		{
			yyVAL.byt = 1
		}
	case 777:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3894
		{
			yyVAL.byt = 0
		}
	case 778:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3896
		{
			yyVAL.byt = 1
		}
	case 779:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3899
		{
			yyVAL.str = ""
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3901
		{
			yyVAL.str = IgnoreStr
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3905
		{
			yyVAL.empty = struct{}{}
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3907
		{
			yyVAL.empty = struct{}{}
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3909
		{
			yyVAL.empty = struct{}{}
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3911
		{
			yyVAL.empty = struct{}{}
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3913
		{
			yyVAL.empty = struct{}{}
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3915
		{
			yyVAL.empty = struct{}{}
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3917
		{
			yyVAL.empty = struct{}{}
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3919
		{
			yyVAL.empty = struct{}{}
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3921
		{
			yyVAL.empty = struct{}{}
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3925
		{
			yyVAL.empty = struct{}{}
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3927
		{
			yyVAL.empty = struct{}{}
		}
	case 792:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3930
		{
			yyVAL.empty = struct{}{}
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3932
		{
			yyVAL.empty = struct{}{}
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3934
		{
			yyVAL.empty = struct{}{}
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3938
		{
			yyVAL.str = UniqueStr
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3940
		{
			yyVAL.str = FulltextStr
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3942
		{
			yyVAL.str = SpatialStr
		}
	case 798:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3945
		{
			yyVAL.str = ""
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3947
		{
			yyVAL.str = yyDollar[1].str
		}
	case 800:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3950
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 801:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3952
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3956
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3960
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3967
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3973
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3977
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3984
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4351
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4360
		{
			decNesting(yylex)
		}
	case 1150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4365
		{
			skipToEnd(yylex)
		}
	case 1151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4370
		{
			skipToEnd(yylex)
		}
	case 1152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4374
		{
			skipToEnd(yylex)
		}
	case 1153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4378
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
