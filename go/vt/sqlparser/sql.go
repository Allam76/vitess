//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const UNLOCK = 57373
const KEYS = 57374
const UNIQUE = 57375
const KEY = 57376
const VALUES = 57377
const LAST_INSERT_ID = 57378
const NEXT = 57379
const VALUE = 57380
const SHARE = 57381
const MODE = 57382
const SQL_NO_CACHE = 57383
const SQL_CACHE = 57384
const JOIN = 57385
const STRAIGHT_JOIN = 57386
const LEFT = 57387
const RIGHT = 57388
const INNER = 57389
const OUTER = 57390
const CROSS = 57391
const NATURAL = 57392
const USE = 57393
const FORCE = 57394
const ON = 57395
const USING = 57396
const ID = 57397
const HEX = 57398
const STRING = 57399
const INTEGRAL = 57400
const FLOAT = 57401
const HEXNUM = 57402
const VALUE_ARG = 57403
const LIST_ARG = 57404
const COMMENT = 57405
const COMMENT_KEYWORD = 57406
const BIT_LITERAL = 57407
const NULL = 57408
const TRUE = 57409
const FALSE = 57410
const OFF = 57411
const OR = 57412
const AND = 57413
const NOT = 57414
const BETWEEN = 57415
const CASE = 57416
const WHEN = 57417
const THEN = 57418
const ELSE = 57419
const END = 57420
const LE = 57421
const GE = 57422
const NE = 57423
const NULL_SAFE_EQUAL = 57424
const IS = 57425
const LIKE = 57426
const REGEXP = 57427
const IN = 57428
const SHIFT_LEFT = 57429
const SHIFT_RIGHT = 57430
const DIV = 57431
const MOD = 57432
const UNARY = 57433
const COLLATE = 57434
const BINARY = 57435
const UNDERSCORE_BINARY = 57436
const UNDERSCORE_UTF8MB4 = 57437
const INTERVAL = 57438
const JSON_EXTRACT_OP = 57439
const JSON_UNQUOTE_EXTRACT_OP = 57440
const CREATE = 57441
const ALTER = 57442
const DROP = 57443
const RENAME = 57444
const ANALYZE = 57445
const ADD = 57446
const FLUSH = 57447
const SCHEMA = 57448
const TABLE = 57449
const INDEX = 57450
const VIEW = 57451
const TO = 57452
const IGNORE = 57453
const IF = 57454
const PRIMARY = 57455
const COLUMN = 57456
const SPATIAL = 57457
const FULLTEXT = 57458
const KEY_BLOCK_SIZE = 57459
const CHECK = 57460
const ACTION = 57461
const CASCADE = 57462
const CONSTRAINT = 57463
const FOREIGN = 57464
const NO = 57465
const REFERENCES = 57466
const RESTRICT = 57467
const SHOW = 57468
const DESCRIBE = 57469
const EXPLAIN = 57470
const DATE = 57471
const ESCAPE = 57472
const REPAIR = 57473
const OPTIMIZE = 57474
const TRUNCATE = 57475
const MAXVALUE = 57476
const PARTITION = 57477
const REORGANIZE = 57478
const LESS = 57479
const THAN = 57480
const PROCEDURE = 57481
const TRIGGER = 57482
const VINDEX = 57483
const VINDEXES = 57484
const STATUS = 57485
const VARIABLES = 57486
const WARNINGS = 57487
const SEQUENCE = 57488
const BEGIN = 57489
const START = 57490
const TRANSACTION = 57491
const COMMIT = 57492
const ROLLBACK = 57493
const BIT = 57494
const TINYINT = 57495
const SMALLINT = 57496
const MEDIUMINT = 57497
const INT = 57498
const INTEGER = 57499
const BIGINT = 57500
const INTNUM = 57501
const REAL = 57502
const DOUBLE = 57503
const FLOAT_TYPE = 57504
const DECIMAL = 57505
const NUMERIC = 57506
const TIME = 57507
const TIMESTAMP = 57508
const DATETIME = 57509
const YEAR = 57510
const CHAR = 57511
const VARCHAR = 57512
const BOOL = 57513
const CHARACTER = 57514
const VARBINARY = 57515
const NCHAR = 57516
const TEXT = 57517
const TINYTEXT = 57518
const MEDIUMTEXT = 57519
const LONGTEXT = 57520
const BLOB = 57521
const TINYBLOB = 57522
const MEDIUMBLOB = 57523
const LONGBLOB = 57524
const JSON = 57525
const ENUM = 57526
const GEOMETRY = 57527
const POINT = 57528
const LINESTRING = 57529
const POLYGON = 57530
const GEOMETRYCOLLECTION = 57531
const MULTIPOINT = 57532
const MULTILINESTRING = 57533
const MULTIPOLYGON = 57534
const NULLX = 57535
const AUTO_INCREMENT = 57536
const APPROXNUM = 57537
const SIGNED = 57538
const UNSIGNED = 57539
const ZEROFILL = 57540
const COLLATION = 57541
const DATABASES = 57542
const TABLES = 57543
const VITESS_METADATA = 57544
const VSCHEMA = 57545
const FULL = 57546
const PROCESSLIST = 57547
const COLUMNS = 57548
const FIELDS = 57549
const ENGINES = 57550
const PLUGINS = 57551
const NAMES = 57552
const CHARSET = 57553
const GLOBAL = 57554
const SESSION = 57555
const ISOLATION = 57556
const LEVEL = 57557
const READ = 57558
const WRITE = 57559
const ONLY = 57560
const REPEATABLE = 57561
const COMMITTED = 57562
const UNCOMMITTED = 57563
const SERIALIZABLE = 57564
const CURRENT_TIMESTAMP = 57565
const DATABASE = 57566
const CURRENT_DATE = 57567
const CURRENT_TIME = 57568
const LOCALTIME = 57569
const LOCALTIMESTAMP = 57570
const UTC_DATE = 57571
const UTC_TIME = 57572
const UTC_TIMESTAMP = 57573
const REPLACE = 57574
const CONVERT = 57575
const CAST = 57576
const SUBSTR = 57577
const SUBSTRING = 57578
const GROUP_CONCAT = 57579
const SEPARATOR = 57580
const TIMESTAMPADD = 57581
const TIMESTAMPDIFF = 57582
const MATCH = 57583
const AGAINST = 57584
const BOOLEAN = 57585
const LANGUAGE = 57586
const WITH = 57587
const QUERY = 57588
const EXPANSION = 57589
const UNUSED = 57590
const ARRAY = 57591
const CUME_DIST = 57592
const DESCRIPTION = 57593
const DENSE_RANK = 57594
const EMPTY = 57595
const EXCEPT = 57596
const FIRST_VALUE = 57597
const GROUPING = 57598
const GROUPS = 57599
const JSON_TABLE = 57600
const LAG = 57601
const LAST_VALUE = 57602
const LATERAL = 57603
const LEAD = 57604
const MEMBER = 57605
const NTH_VALUE = 57606
const NTILE = 57607
const OF = 57608
const OVER = 57609
const PERCENT_RANK = 57610
const RANK = 57611
const RECURSIVE = 57612
const ROW_NUMBER = 57613
const SYSTEM = 57614
const WINDOW = 57615
const ACTIVE = 57616
const ADMIN = 57617
const BUCKETS = 57618
const CLONE = 57619
const COMPONENT = 57620
const DEFINITION = 57621
const ENFORCED = 57622
const EXCLUDE = 57623
const FOLLOWING = 57624
const GEOMCOLLECTION = 57625
const GET_MASTER_PUBLIC_KEY = 57626
const HISTOGRAM = 57627
const HISTORY = 57628
const INACTIVE = 57629
const INVISIBLE = 57630
const LOCKED = 57631
const MASTER_COMPRESSION_ALGORITHMS = 57632
const MASTER_PUBLIC_KEY_PATH = 57633
const MASTER_TLS_CIPHERSUITES = 57634
const MASTER_ZSTD_COMPRESSION_LEVEL = 57635
const NESTED = 57636
const NETWORK_NAMESPACE = 57637
const NOWAIT = 57638
const NULLS = 57639
const OJ = 57640
const OLD = 57641
const OPTIONAL = 57642
const ORDINALITY = 57643
const ORGANIZATION = 57644
const OTHERS = 57645
const PATH = 57646
const PERSIST = 57647
const PERSIST_ONLY = 57648
const PRECEDING = 57649
const PRIVILEGE_CHECKS_USER = 57650
const PROCESS = 57651
const RANDOM = 57652
const REFERENCE = 57653
const REQUIRE_ROW_FORMAT = 57654
const RESOURCE = 57655
const RESPECT = 57656
const RESTART = 57657
const RETAIN = 57658
const REUSE = 57659
const ROLE = 57660
const SECONDARY = 57661
const SECONDARY_ENGINE = 57662
const SECONDARY_LOAD = 57663
const SECONDARY_UNLOAD = 57664
const SKIP = 57665
const SRID = 57666
const THREAD_PRIORITY = 57667
const TIES = 57668
const UNBOUNDED = 57669
const VCPU = 57670
const VISIBLE = 57671

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"UNIQUE",
	"KEY",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 29,
	-2, 4,
	-1, 37,
	160, 307,
	161, 307,
	-2, 295,
	-1, 320,
	113, 652,
	-2, 648,
	-1, 321,
	113, 653,
	-2, 649,
	-1, 389,
	83, 900,
	-2, 65,
	-1, 390,
	83, 818,
	-2, 66,
	-1, 395,
	83, 787,
	-2, 611,
	-1, 397,
	83, 848,
	-2, 613,
	-1, 692,
	1, 362,
	5, 362,
	12, 362,
	13, 362,
	14, 362,
	15, 362,
	17, 362,
	19, 362,
	29, 362,
	30, 362,
	43, 362,
	44, 362,
	45, 362,
	46, 362,
	47, 362,
	49, 362,
	50, 362,
	53, 362,
	54, 362,
	56, 362,
	57, 362,
	347, 362,
	-2, 380,
	-1, 695,
	54, 46,
	56, 46,
	-2, 50,
	-1, 844,
	113, 655,
	-2, 651,
	-1, 1002,
	5, 29,
	-2, 70,
	-1, 1069,
	5, 30,
	-2, 447,
	-1, 1100,
	5, 29,
	-2, 585,
	-1, 1320,
	5, 29,
	-2, 71,
	-1, 1368,
	5, 30,
	-2, 586,
	-1, 1424,
	5, 29,
	-2, 588,
	-1, 1496,
	5, 30,
	-2, 589,
}

const yyPrivate = 57344

const yyLast = 16052

var yyAct = [...]int{

	321, 1529, 1330, 1484, 1519, 1209, 648, 1103, 1404, 1388,
	314, 1436, 325, 956, 1262, 1296, 338, 519, 1121, 952,
	291, 997, 929, 927, 58, 1104, 1259, 1035, 299, 1263,
	983, 1148, 955, 1127, 647, 3, 96, 965, 1269, 96,
	1275, 1234, 394, 869, 96, 793, 1063, 1187, 1177, 1186,
	882, 351, 807, 905, 969, 931, 916, 846, 708, 689,
	895, 579, 688, 585, 707, 292, 293, 294, 96, 399,
	297, 388, 591, 96, 383, 96, 323, 308, 909, 600,
	380, 385, 697, 662, 96, 298, 57, 96, 1522, 1506,
	663, 62, 1517, 96, 1017, 1494, 1514, 1331, 1505, 993,
	1493, 1251, 1360, 524, 552, 1291, 1292, 1016, 91, 87,
	88, 89, 947, 948, 79, 312, 1290, 64, 65, 66,
	67, 68, 946, 1462, 613, 612, 622, 623, 615, 616,
	617, 618, 619, 620, 621, 614, 1136, 1021, 624, 1135,
	573, 709, 1137, 710, 296, 363, 1015, 369, 370, 367,
	368, 366, 365, 364, 75, 295, 1168, 976, 83, 1211,
	85, 371, 372, 568, 274, 1411, 984, 569, 566, 567,
	554, 1351, 556, 1349, 289, 561, 562, 781, 1235, 571,
	1213, 778, 1516, 780, 1480, 1513, 1485, 1208, 910, 1533,
	284, 970, 1537, 550, 1122, 1124, 1012, 1009, 1010, 572,
	1008, 538, 553, 555, 77, 78, 526, 74, 1401, 1437,
	85, 1214, 1212, 81, 80, 1237, 782, 779, 972, 785,
	771, 1205, 1439, 972, 1285, 1284, 90, 1283, 522, 529,
	534, 1019, 1022, 1207, 266, 86, 1469, 1029, 1371, 1160,
	1028, 267, 1149, 1221, 1165, 1164, 1132, 1089, 270, 1239,
	1057, 1243, 84, 1238, 818, 1236, 278, 273, 636, 637,
	1241, 1079, 391, 1076, 1161, 703, 604, 96, 1014, 1240,
	399, 1123, 399, 953, 399, 399, 544, 399, 1166, 399,
	1158, 1311, 1242, 1244, 624, 399, 1159, 551, 276, 1438,
	1013, 942, 1463, 531, 283, 532, 984, 1531, 533, 815,
	1532, 614, 1530, 520, 624, 812, 1198, 1194, 808, 971,
	1492, 582, 586, 1400, 971, 399, 575, 576, 968, 972,
	1037, 268, 76, 71, 1206, 599, 1204, 587, 605, 1018,
	1201, 1478, 1312, 1253, 906, 525, 518, 1451, 977, 588,
	853, 1163, 1273, 520, 1020, 711, 896, 350, 280, 271,
	773, 281, 282, 287, 851, 852, 850, 272, 275, 72,
	269, 286, 285, 649, 636, 637, 636, 637, 896, 1302,
	1086, 594, 660, 1498, 1395, 537, 597, 82, 96, 96,
	96, 617, 618, 619, 620, 621, 614, 399, 1394, 624,
	809, 1181, 599, 399, 1075, 1180, 1169, 589, 1193, 1036,
	1479, 1538, 687, 1195, 1188, 1196, 1192, 1418, 1189, 22,
	971, 1190, 1191, 527, 528, 966, 393, 967, 1054, 1055,
	1056, 1392, 1162, 964, 970, 1197, 613, 612, 622, 623,
	615, 616, 617, 618, 619, 620, 621, 614, 1307, 870,
	624, 871, 1539, 377, 378, 598, 597, 55, 665, 667,
	669, 671, 673, 675, 676, 666, 668, 849, 672, 674,
	696, 677, 599, 1476, 701, 540, 541, 542, 705, 1218,
	303, 821, 822, 1178, 1040, 836, 838, 839, 608, 1064,
	611, 837, 1321, 352, 50, 520, 625, 626, 627, 628,
	629, 630, 631, 1448, 609, 610, 607, 613, 612, 622,
	623, 615, 616, 617, 618, 619, 620, 621, 614, 598,
	597, 624, 1138, 1074, 1139, 1073, 1255, 1442, 1515, 96,
	598, 597, 520, 598, 597, 1333, 599, 578, 578, 96,
	96, 399, 598, 597, 50, 96, 1326, 599, 96, 817,
	599, 96, 1501, 578, 304, 96, 1324, 399, 399, 599,
	1442, 1488, 399, 399, 399, 96, 399, 399, 1149, 1357,
	1442, 578, 399, 399, 613, 612, 622, 623, 615, 616,
	617, 618, 619, 620, 621, 614, 1144, 816, 624, 1447,
	391, 810, 918, 921, 922, 923, 919, 795, 920, 924,
	872, 399, 1276, 1277, 598, 597, 96, 1442, 1470, 1442,
	1441, 1446, 399, 1386, 1385, 1373, 578, 1445, 833, 834,
	792, 599, 1370, 578, 1318, 1317, 823, 393, 786, 393,
	791, 393, 393, 774, 393, 772, 393, 1314, 1315, 900,
	1314, 1313, 393, 769, 613, 612, 622, 623, 615, 616,
	617, 618, 619, 620, 621, 614, 399, 844, 624, 546,
	842, 913, 578, 1070, 578, 878, 578, 718, 717, 847,
	539, 649, 602, 1308, 884, 885, 699, 825, 886, 889,
	1260, 59, 699, 1272, 897, 973, 1128, 24, 24, 399,
	399, 840, 1272, 878, 1224, 880, 96, 341, 340, 343,
	344, 345, 346, 1366, 96, 96, 342, 347, 96, 96,
	1098, 1128, 96, 96, 96, 399, 1099, 1423, 936, 700,
	698, 702, 1070, 873, 874, 700, 912, 698, 399, 876,
	913, 937, 951, 1450, 913, 939, 55, 55, 1524, 1070,
	1316, 893, 1140, 945, 393, 24, 960, 327, 1070, 1092,
	713, 1091, 1033, 913, 318, 1272, 795, 698, 704, 819,
	784, 305, 55, 549, 1507, 549, 1406, 549, 549, 978,
	549, 1378, 549, 985, 986, 987, 998, 1301, 549, 1276,
	1277, 944, 96, 399, 935, 399, 943, 940, 1143, 96,
	96, 96, 96, 96, 55, 96, 96, 994, 50, 96,
	999, 989, 988, 1210, 1407, 1229, 1001, 1520, 843, 1279,
	55, 1260, 1182, 633, 813, 1002, 635, 96, 788, 96,
	96, 831, 1282, 1281, 96, 613, 612, 622, 623, 615,
	616, 617, 618, 619, 620, 621, 614, 1043, 1044, 624,
	586, 1112, 1111, 1511, 646, 1504, 650, 651, 652, 653,
	654, 655, 656, 657, 658, 1220, 661, 664, 664, 664,
	670, 664, 664, 670, 664, 678, 679, 680, 681, 682,
	683, 844, 693, 1042, 1045, 995, 996, 612, 622, 623,
	615, 616, 617, 618, 619, 620, 621, 614, 393, 1115,
	624, 1113, 1509, 1046, 1116, 1047, 1114, 1052, 1117, 1068,
	922, 923, 309, 310, 393, 393, 592, 593, 391, 393,
	393, 393, 847, 393, 393, 1051, 1421, 1087, 1059, 393,
	393, 957, 1306, 590, 96, 96, 96, 96, 96, 1305,
	1151, 1145, 1173, 580, 716, 1105, 96, 547, 577, 96,
	1067, 1005, 1364, 96, 581, 1402, 787, 96, 827, 918,
	921, 922, 923, 919, 1100, 920, 924, 1184, 926, 602,
	592, 593, 393, 770, 1050, 1085, 399, 306, 307, 300,
	1129, 1456, 1049, 880, 301, 59, 1455, 1409, 1128, 1141,
	570, 1130, 1080, 1131, 1107, 1108, 1106, 1110, 1077, 1109,
	806, 1118, 1526, 1525, 1526, 595, 881, 883, 1126, 1466,
	888, 891, 892, 875, 1304, 814, 61, 63, 56, 1,
	1518, 1150, 399, 1172, 1133, 1174, 1175, 1176, 1332, 898,
	1170, 1171, 843, 1403, 549, 904, 1011, 907, 908, 1483,
	1435, 1295, 1146, 1147, 963, 954, 902, 903, 1185, 70,
	549, 549, 517, 399, 96, 549, 549, 549, 1179, 549,
	549, 69, 1477, 962, 961, 549, 549, 1156, 1219, 96,
	1155, 1152, 393, 1167, 975, 1154, 1153, 1200, 399, 1199,
	634, 1157, 724, 722, 723, 393, 979, 980, 981, 982,
	721, 726, 725, 638, 639, 640, 641, 642, 643, 644,
	645, 974, 990, 991, 992, 720, 277, 1217, 615, 616,
	617, 618, 619, 620, 621, 614, 386, 1254, 624, 712,
	1000, 596, 399, 399, 43, 925, 1261, 1228, 1252, 1399,
	1202, 1105, 1227, 73, 1203, 1007, 692, 1246, 1245, 50,
	393, 1233, 393, 811, 564, 565, 399, 279, 632, 1048,
	1134, 392, 844, 1267, 650, 1045, 1266, 1271, 820, 1288,
	584, 399, 1454, 399, 399, 1408, 1084, 659, 894, 957,
	1280, 1264, 1287, 326, 835, 339, 1294, 336, 337, 826,
	1097, 606, 324, 1289, 1286, 1053, 393, 316, 691, 684,
	917, 915, 914, 1293, 789, 381, 1278, 928, 1299, 1300,
	1274, 693, 1298, 96, 690, 693, 1223, 1359, 1461, 830,
	1309, 1310, 1363, 622, 623, 615, 616, 617, 618, 619,
	620, 621, 614, 96, 1322, 624, 26, 60, 1323, 399,
	311, 19, 399, 399, 399, 96, 18, 17, 824, 1320,
	20, 1325, 399, 16, 1328, 96, 15, 14, 1083, 535,
	613, 612, 622, 623, 615, 616, 617, 618, 619, 620,
	621, 614, 30, 21, 624, 1338, 13, 12, 1340, 11,
	10, 1226, 9, 8, 50, 7, 549, 1339, 549, 6,
	898, 1347, 5, 4, 302, 23, 1361, 2, 0, 0,
	0, 0, 0, 0, 0, 0, 649, 877, 879, 0,
	0, 0, 0, 1256, 1376, 1105, 0, 1377, 1365, 0,
	1379, 0, 0, 0, 399, 0, 1374, 0, 1375, 0,
	0, 0, 399, 393, 0, 0, 0, 1141, 0, 0,
	0, 0, 0, 0, 0, 548, 1384, 0, 0, 0,
	399, 1390, 0, 0, 0, 0, 0, 1058, 0, 0,
	0, 0, 399, 0, 957, 0, 957, 0, 0, 1397,
	0, 0, 0, 1398, 1391, 848, 1393, 0, 0, 1183,
	0, 845, 0, 0, 854, 855, 856, 857, 858, 859,
	860, 861, 862, 863, 864, 865, 866, 867, 868, 0,
	0, 399, 399, 0, 399, 0, 1410, 0, 0, 399,
	393, 399, 399, 399, 96, 0, 0, 399, 1430, 0,
	1431, 1432, 1433, 1101, 1102, 0, 1422, 693, 693, 693,
	693, 693, 1440, 1429, 1424, 393, 1434, 399, 96, 901,
	0, 1443, 928, 1444, 1125, 1226, 1452, 0, 1264, 0,
	693, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 692, 0, 0, 0, 692, 0, 393, 1467, 692,
	0, 0, 0, 399, 0, 0, 898, 1475, 0, 1268,
	1270, 399, 399, 1474, 0, 0, 0, 0, 0, 1486,
	1468, 0, 0, 1490, 0, 1487, 1489, 649, 1482, 0,
	399, 0, 0, 1270, 1495, 1264, 0, 0, 0, 1105,
	0, 96, 0, 0, 0, 0, 399, 957, 393, 0,
	393, 1297, 0, 0, 1503, 0, 0, 0, 0, 0,
	0, 0, 1066, 1362, 0, 1508, 1510, 0, 399, 0,
	1069, 1071, 0, 1072, 0, 0, 549, 1512, 1078, 0,
	0, 1081, 1082, 1523, 0, 1405, 0, 1088, 1534, 0,
	0, 1090, 0, 0, 1093, 1094, 0, 1095, 1096, 0,
	583, 613, 612, 622, 623, 615, 616, 617, 618, 619,
	620, 621, 614, 0, 0, 624, 1329, 1120, 0, 1334,
	1335, 1336, 0, 0, 0, 0, 0, 0, 0, 393,
	0, 0, 0, 0, 1344, 1345, 94, 1346, 0, 288,
	1348, 0, 1350, 1265, 94, 50, 0, 557, 848, 558,
	559, 0, 560, 0, 563, 0, 1060, 1061, 1062, 0,
	574, 0, 0, 0, 0, 315, 0, 0, 384, 0,
	0, 0, 694, 94, 0, 94, 0, 0, 0, 0,
	898, 0, 0, 0, 94, 0, 0, 94, 0, 0,
	0, 0, 0, 94, 0, 0, 1387, 0, 0, 0,
	0, 393, 0, 0, 1405, 957, 0, 0, 93, 1389,
	0, 692, 692, 692, 692, 692, 290, 0, 0, 0,
	0, 1356, 0, 0, 0, 0, 692, 393, 50, 0,
	0, 0, 0, 0, 692, 0, 0, 0, 0, 393,
	382, 0, 0, 0, 0, 521, 0, 523, 0, 0,
	0, 0, 0, 0, 0, 0, 530, 1232, 0, 536,
	0, 0, 0, 0, 0, 543, 0, 0, 693, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1426, 1427,
	0, 1428, 0, 0, 0, 0, 1389, 0, 1389, 1389,
	1389, 0, 0, 0, 1297, 1358, 613, 612, 622, 623,
	615, 616, 617, 618, 619, 620, 621, 614, 0, 0,
	624, 0, 0, 0, 1389, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1380, 1381, 1382,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 741, 0, 0, 0, 0, 0, 0, 0, 0,
	1481, 0, 0, 0, 0, 0, 0, 0, 393, 393,
	0, 0, 0, 549, 0, 0, 0, 94, 0, 1230,
	1231, 0, 0, 0, 898, 0, 0, 1497, 0, 0,
	0, 1247, 1248, 0, 1249, 1250, 0, 0, 0, 0,
	0, 0, 0, 1502, 0, 0, 1257, 1258, 0, 0,
	0, 0, 0, 0, 0, 0, 777, 0, 0, 0,
	1265, 0, 0, 1425, 0, 1389, 0, 1341, 0, 0,
	0, 729, 796, 797, 1343, 0, 0, 798, 799, 800,
	0, 802, 803, 0, 0, 1352, 1353, 804, 805, 545,
	0, 0, 0, 0, 0, 0, 1449, 0, 0, 0,
	0, 0, 0, 0, 0, 1367, 1368, 1369, 742, 1372,
	0, 0, 1355, 0, 0, 1303, 0, 1265, 0, 50,
	0, 0, 0, 0, 0, 0, 1383, 0, 94, 94,
	94, 755, 758, 759, 760, 761, 762, 763, 0, 764,
	765, 766, 767, 768, 743, 744, 745, 746, 727, 728,
	756, 1354, 730, 0, 731, 732, 733, 734, 735, 736,
	737, 738, 739, 740, 747, 748, 749, 750, 751, 752,
	753, 754, 692, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1342, 0, 0, 613, 612, 622,
	623, 615, 616, 617, 618, 619, 620, 621, 614, 1417,
	686, 624, 695, 0, 0, 0, 0, 0, 0, 0,
	1521, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 757, 0, 0, 0, 613, 612, 622, 623,
	615, 616, 617, 618, 619, 620, 621, 614, 0, 0,
	624, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1457, 1458, 1459, 1460, 0, 0, 0, 1464,
	1465, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	0, 1471, 1472, 1473, 0, 0, 0, 0, 0, 94,
	94, 0, 0, 0, 0, 94, 0, 0, 94, 0,
	0, 94, 0, 0, 0, 794, 0, 0, 1004, 0,
	1006, 1491, 0, 0, 1065, 94, 0, 0, 1496, 1412,
	1413, 1414, 1415, 1416, 0, 0, 0, 1419, 1420, 0,
	0, 0, 0, 1500, 613, 612, 622, 623, 615, 616,
	617, 618, 619, 620, 621, 614, 0, 0, 624, 0,
	0, 719, 0, 0, 0, 0, 94, 0, 0, 0,
	0, 775, 776, 0, 0, 794, 0, 783, 0, 0,
	382, 0, 0, 790, 0, 0, 0, 1535, 1536, 0,
	0, 0, 0, 0, 0, 0, 0, 801, 613, 612,
	622, 623, 615, 616, 617, 618, 619, 620, 621, 614,
	0, 0, 624, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 315, 315, 0, 0, 315, 315, 315, 0,
	0, 0, 899, 0, 0, 0, 0, 0, 832, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 315, 315, 315, 315, 0, 94, 0, 0, 0,
	0, 0, 0, 0, 94, 933, 0, 0, 94, 94,
	0, 0, 94, 941, 794, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1527, 0, 0, 24,
	25, 51, 27, 28, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 0, 29, 47, 48, 0, 0, 0, 911, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 938, 94, 0, 38, 0, 0, 0, 55, 94,
	94, 94, 94, 94, 0, 94, 94, 0, 0, 94,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 1215, 1038,
	1039, 0, 0, 0, 94, 0, 0, 0, 0, 794,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 315, 0, 0, 0, 0, 0, 0, 0, 31,
	32, 34, 33, 36, 1003, 49, 0, 0, 0, 0,
	0, 1023, 1024, 1025, 1026, 1027, 0, 1030, 1031, 0,
	0, 1032, 0, 0, 0, 0, 37, 53, 44, 0,
	0, 45, 46, 35, 0, 0, 0, 315, 0, 1034,
	0, 0, 0, 0, 0, 0, 1041, 39, 40, 0,
	41, 42, 0, 0, 315, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 899, 94, 94, 94, 94, 94, 0,
	0, 0, 0, 0, 0, 0, 1119, 0, 0, 94,
	0, 0, 0, 933, 0, 0, 0, 94, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 52, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 315,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 315, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	794, 0, 0, 0, 0, 1396, 0, 0, 0, 899,
	0, 0, 0, 0, 0, 0, 1216, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1319, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 899, 0, 1327, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1337, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 933, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 899, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1453, 94, 504, 492, 0, 449, 507, 423, 439, 515,
	440, 443, 480, 408, 462, 180, 437, 0, 427, 403,
	433, 404, 425, 451, 126, 422, 494, 465, 506, 152,
	505, 455, 513, 154, 471, 0, 226, 168, 0, 0,
	453, 496, 460, 489, 448, 481, 413, 470, 508, 438,
	478, 509, 0, 0, 0, 398, 0, 958, 959, 0,
	0, 0, 0, 0, 116, 0, 475, 503, 435, 477,
	479, 402, 472, 1499, 406, 409, 514, 499, 430, 431,
	1142, 0, 0, 0, 0, 0, 0, 452, 461, 486,
	446, 0, 0, 0, 0, 0, 0, 0, 0, 428,
	0, 469, 0, 0, 0, 410, 407, 0, 0, 450,
	0, 0, 0, 412, 0, 429, 487, 0, 400, 134,
	491, 498, 447, 255, 502, 445, 444, 199, 0, 230,
	137, 151, 112, 98, 108, 0, 136, 177, 206, 210,
	495, 426, 434, 120, 432, 208, 187, 246, 468, 189,
	207, 155, 236, 200, 245, 256, 257, 233, 253, 261,
	223, 101, 232, 244, 117, 218, 103, 242, 229, 166,
	146, 147, 102, 0, 204, 125, 132, 122, 179, 239,
	240, 121, 264, 109, 252, 105, 110, 251, 173, 235,
	243, 167, 160, 104, 241, 165, 159, 150, 129, 139,
	197, 157, 198, 140, 170, 169, 171, 0, 405, 0,
	227, 249, 265, 114, 421, 234, 259, 260, 0, 0,
	115, 133, 128, 196, 172, 111, 142, 224, 149, 156,
	203, 263, 186, 209, 118, 248, 225, 417, 420, 415,
	416, 463, 464, 510, 511, 512, 488, 411, 0, 418,
	419, 0, 493, 500, 501, 467, 97, 106, 153, 262,
	201, 131, 250, 401, 414, 124, 424, 0, 0, 436,
	441, 442, 454, 456, 457, 458, 459, 466, 473, 474,
	476, 482, 483, 484, 485, 490, 497, 516, 99, 100,
	107, 113, 119, 123, 127, 130, 135, 138, 141, 143,
	144, 145, 148, 158, 161, 162, 163, 164, 174, 175,
	176, 178, 181, 182, 183, 184, 185, 188, 190, 191,
	192, 193, 194, 195, 202, 205, 211, 212, 213, 214,
	215, 216, 217, 219, 220, 221, 222, 228, 231, 237,
	238, 247, 254, 258, 504, 492, 0, 449, 507, 423,
	439, 515, 440, 443, 480, 408, 462, 180, 437, 0,
	427, 403, 433, 404, 425, 451, 126, 422, 494, 465,
	506, 152, 505, 455, 513, 154, 471, 0, 226, 168,
	0, 0, 453, 496, 460, 489, 448, 481, 413, 470,
	508, 438, 478, 509, 0, 0, 0, 398, 0, 958,
	959, 0, 0, 0, 0, 0, 116, 0, 475, 503,
	435, 477, 479, 402, 472, 0, 406, 409, 514, 499,
	430, 431, 0, 0, 0, 0, 0, 0, 0, 452,
	461, 486, 446, 0, 0, 0, 0, 0, 0, 0,
	0, 428, 0, 469, 0, 0, 0, 410, 407, 0,
	0, 450, 0, 0, 0, 412, 0, 429, 487, 0,
	400, 134, 491, 498, 447, 255, 502, 445, 444, 199,
	0, 230, 137, 151, 112, 98, 108, 0, 136, 177,
	206, 210, 495, 426, 434, 120, 432, 208, 187, 246,
	468, 189, 207, 155, 236, 200, 245, 256, 257, 233,
	253, 261, 223, 101, 232, 244, 117, 218, 103, 242,
	229, 166, 146, 147, 102, 0, 204, 125, 132, 122,
	179, 239, 240, 121, 264, 109, 252, 105, 110, 251,
	173, 235, 243, 167, 160, 104, 241, 165, 159, 150,
	129, 139, 197, 157, 198, 140, 170, 169, 171, 0,
	405, 0, 227, 249, 265, 114, 421, 234, 259, 260,
	0, 0, 115, 133, 128, 196, 172, 111, 142, 224,
	149, 156, 203, 263, 186, 209, 118, 248, 225, 417,
	420, 415, 416, 463, 464, 510, 511, 512, 488, 411,
	0, 418, 419, 0, 493, 500, 501, 467, 97, 106,
	153, 262, 201, 131, 250, 401, 414, 124, 424, 0,
	0, 436, 441, 442, 454, 456, 457, 458, 459, 466,
	473, 474, 476, 482, 483, 484, 485, 490, 497, 516,
	99, 100, 107, 113, 119, 123, 127, 130, 135, 138,
	141, 143, 144, 145, 148, 158, 161, 162, 163, 164,
	174, 175, 176, 178, 181, 182, 183, 184, 185, 188,
	190, 191, 192, 193, 194, 195, 202, 205, 211, 212,
	213, 214, 215, 216, 217, 219, 220, 221, 222, 228,
	231, 237, 238, 247, 254, 258, 504, 492, 0, 449,
	507, 423, 439, 515, 440, 443, 480, 408, 462, 180,
	437, 0, 427, 403, 433, 404, 425, 451, 126, 422,
	494, 465, 506, 152, 505, 455, 513, 154, 471, 0,
	226, 168, 0, 0, 453, 496, 460, 489, 448, 481,
	413, 470, 508, 438, 478, 509, 55, 0, 0, 398,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 0,
	475, 503, 435, 477, 479, 402, 472, 0, 406, 409,
	514, 499, 430, 431, 0, 0, 0, 0, 0, 0,
	0, 452, 461, 486, 446, 0, 0, 0, 0, 0,
	0, 0, 0, 428, 0, 469, 0, 0, 0, 410,
	407, 0, 0, 450, 0, 0, 0, 412, 0, 429,
	487, 0, 400, 134, 491, 498, 447, 255, 502, 445,
	444, 199, 0, 230, 137, 151, 112, 98, 108, 0,
	136, 177, 206, 210, 495, 426, 434, 120, 432, 208,
	187, 246, 468, 189, 207, 155, 236, 200, 245, 256,
	257, 233, 253, 261, 223, 101, 232, 244, 117, 218,
	103, 242, 229, 166, 146, 147, 102, 0, 204, 125,
	132, 122, 179, 239, 240, 121, 264, 109, 252, 105,
	110, 251, 173, 235, 243, 167, 160, 104, 241, 165,
	159, 150, 129, 139, 197, 157, 198, 140, 170, 169,
	171, 0, 405, 0, 227, 249, 265, 114, 421, 234,
	259, 260, 0, 0, 115, 133, 128, 196, 172, 111,
	142, 224, 149, 156, 203, 263, 186, 209, 118, 248,
	225, 417, 420, 415, 416, 463, 464, 510, 511, 512,
	488, 411, 0, 418, 419, 0, 493, 500, 501, 467,
	97, 106, 153, 262, 201, 131, 250, 401, 414, 124,
	424, 0, 0, 436, 441, 442, 454, 456, 457, 458,
	459, 466, 473, 474, 476, 482, 483, 484, 485, 490,
	497, 516, 99, 100, 107, 113, 119, 123, 127, 130,
	135, 138, 141, 143, 144, 145, 148, 158, 161, 162,
	163, 164, 174, 175, 176, 178, 181, 182, 183, 184,
	185, 188, 190, 191, 192, 193, 194, 195, 202, 205,
	211, 212, 213, 214, 215, 216, 217, 219, 220, 221,
	222, 228, 231, 237, 238, 247, 254, 258, 504, 492,
	0, 449, 507, 423, 439, 515, 440, 443, 480, 408,
	462, 180, 437, 0, 427, 403, 433, 404, 425, 451,
	126, 422, 494, 465, 506, 152, 505, 455, 513, 154,
	471, 0, 226, 168, 0, 0, 453, 496, 460, 489,
	448, 481, 413, 470, 508, 438, 478, 509, 0, 0,
	0, 398, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 0, 475, 503, 435, 477, 479, 402, 472, 0,
	406, 409, 514, 499, 430, 431, 0, 0, 0, 0,
	0, 0, 0, 452, 461, 486, 446, 0, 0, 0,
	0, 0, 0, 1225, 0, 428, 0, 469, 0, 0,
	0, 410, 407, 0, 0, 450, 0, 0, 0, 412,
	0, 429, 487, 0, 400, 134, 491, 498, 447, 255,
	502, 445, 444, 199, 0, 230, 137, 151, 112, 98,
	108, 0, 136, 177, 206, 210, 495, 426, 434, 120,
	432, 208, 187, 246, 468, 189, 207, 155, 236, 200,
	245, 256, 257, 233, 253, 261, 223, 101, 232, 244,
	117, 218, 103, 242, 229, 166, 146, 147, 102, 0,
	204, 125, 132, 122, 179, 239, 240, 121, 264, 109,
	252, 105, 110, 251, 173, 235, 243, 167, 160, 104,
	241, 165, 159, 150, 129, 139, 197, 157, 198, 140,
	170, 169, 171, 0, 405, 0, 227, 249, 265, 114,
	421, 234, 259, 260, 0, 0, 115, 133, 128, 196,
	172, 111, 142, 224, 149, 156, 203, 263, 186, 209,
	118, 248, 225, 417, 420, 415, 416, 463, 464, 510,
	511, 512, 488, 411, 0, 418, 419, 0, 493, 500,
	501, 467, 97, 106, 153, 262, 201, 131, 250, 401,
	414, 124, 424, 0, 0, 436, 441, 442, 454, 456,
	457, 458, 459, 466, 473, 474, 476, 482, 483, 484,
	485, 490, 497, 516, 99, 100, 107, 113, 119, 123,
	127, 130, 135, 138, 141, 143, 144, 145, 148, 158,
	161, 162, 163, 164, 174, 175, 176, 178, 181, 182,
	183, 184, 185, 188, 190, 191, 192, 193, 194, 195,
	202, 205, 211, 212, 213, 214, 215, 216, 217, 219,
	220, 221, 222, 228, 231, 237, 238, 247, 254, 258,
	504, 492, 0, 449, 507, 423, 439, 515, 440, 443,
	480, 408, 462, 180, 437, 0, 427, 403, 433, 404,
	425, 451, 126, 422, 494, 465, 506, 152, 505, 455,
	513, 154, 471, 0, 226, 168, 0, 0, 453, 496,
	460, 489, 448, 481, 413, 470, 508, 438, 478, 509,
	0, 0, 0, 95, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 0, 475, 503, 435, 477, 479, 402,
	472, 0, 406, 409, 514, 499, 430, 431, 0, 0,
	0, 0, 0, 0, 0, 452, 461, 486, 446, 0,
	0, 0, 0, 0, 0, 942, 0, 428, 0, 469,
	0, 0, 0, 410, 407, 0, 0, 450, 0, 0,
	0, 412, 0, 429, 487, 0, 400, 134, 491, 498,
	447, 255, 502, 445, 444, 199, 0, 230, 137, 151,
	112, 98, 108, 0, 136, 177, 206, 210, 495, 426,
	434, 120, 432, 208, 187, 246, 468, 189, 207, 155,
	236, 200, 245, 256, 257, 233, 253, 261, 223, 101,
	232, 244, 117, 218, 103, 242, 229, 166, 146, 147,
	102, 0, 204, 125, 132, 122, 179, 239, 240, 121,
	264, 109, 252, 105, 110, 251, 173, 235, 243, 167,
	160, 104, 241, 165, 159, 150, 129, 139, 197, 157,
	198, 140, 170, 169, 171, 0, 405, 0, 227, 249,
	265, 114, 421, 234, 259, 260, 0, 0, 115, 133,
	128, 196, 172, 111, 142, 224, 149, 156, 203, 263,
	186, 209, 118, 248, 225, 417, 420, 415, 416, 463,
	464, 510, 511, 512, 488, 411, 0, 418, 419, 0,
	493, 500, 501, 467, 97, 106, 153, 262, 201, 131,
	250, 401, 414, 124, 424, 0, 0, 436, 441, 442,
	454, 456, 457, 458, 459, 466, 473, 474, 476, 482,
	483, 484, 485, 490, 497, 516, 99, 100, 107, 113,
	119, 123, 127, 130, 135, 138, 141, 143, 144, 145,
	148, 158, 161, 162, 163, 164, 174, 175, 176, 178,
	181, 182, 183, 184, 185, 188, 190, 191, 192, 193,
	194, 195, 202, 205, 211, 212, 213, 214, 215, 216,
	217, 219, 220, 221, 222, 228, 231, 237, 238, 247,
	254, 258, 504, 492, 0, 449, 507, 423, 439, 515,
	440, 443, 480, 408, 462, 180, 437, 0, 427, 403,
	433, 404, 425, 451, 126, 422, 494, 465, 506, 152,
	505, 455, 513, 154, 471, 0, 226, 168, 0, 0,
	453, 496, 460, 489, 448, 481, 413, 470, 508, 438,
	478, 509, 0, 0, 0, 320, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 0, 475, 503, 435, 477,
	479, 402, 472, 0, 406, 409, 514, 499, 430, 431,
	0, 0, 0, 0, 0, 0, 0, 452, 461, 486,
	446, 0, 0, 0, 0, 0, 0, 841, 0, 428,
	0, 469, 0, 0, 0, 410, 407, 0, 0, 450,
	0, 0, 0, 412, 0, 429, 487, 0, 400, 134,
	491, 498, 447, 255, 502, 445, 444, 199, 0, 230,
	137, 151, 112, 98, 108, 0, 136, 177, 206, 210,
	495, 426, 434, 120, 432, 208, 187, 246, 468, 189,
	207, 155, 236, 200, 245, 256, 257, 233, 253, 261,
	223, 101, 232, 244, 117, 218, 103, 242, 229, 166,
	146, 147, 102, 0, 204, 125, 132, 122, 179, 239,
	240, 121, 264, 109, 252, 105, 110, 251, 173, 235,
	243, 167, 160, 104, 241, 165, 159, 150, 129, 139,
	197, 157, 198, 140, 170, 169, 171, 0, 405, 0,
	227, 249, 265, 114, 421, 234, 259, 260, 0, 0,
	115, 133, 128, 196, 172, 111, 142, 224, 149, 156,
	203, 263, 186, 209, 118, 248, 225, 417, 420, 415,
	416, 463, 464, 510, 511, 512, 488, 411, 0, 418,
	419, 0, 493, 500, 501, 467, 97, 106, 153, 262,
	201, 131, 250, 401, 414, 124, 424, 0, 0, 436,
	441, 442, 454, 456, 457, 458, 459, 466, 473, 474,
	476, 482, 483, 484, 485, 490, 497, 516, 99, 100,
	107, 113, 119, 123, 127, 130, 135, 138, 141, 143,
	144, 145, 148, 158, 161, 162, 163, 164, 174, 175,
	176, 178, 181, 182, 183, 184, 185, 188, 190, 191,
	192, 193, 194, 195, 202, 205, 211, 212, 213, 214,
	215, 216, 217, 219, 220, 221, 222, 228, 231, 237,
	238, 247, 254, 258, 504, 492, 0, 449, 507, 423,
	439, 515, 440, 443, 480, 408, 462, 180, 437, 0,
	427, 403, 433, 404, 425, 451, 126, 422, 494, 465,
	506, 152, 505, 455, 513, 154, 471, 0, 226, 168,
	0, 0, 453, 496, 460, 489, 448, 481, 413, 470,
	508, 438, 478, 509, 0, 0, 0, 398, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 0, 475, 503,
	435, 477, 479, 402, 472, 0, 406, 409, 514, 499,
	430, 431, 0, 0, 0, 0, 0, 0, 0, 452,
	461, 486, 446, 0, 0, 0, 0, 0, 0, 0,
	0, 428, 0, 469, 0, 0, 0, 410, 407, 0,
	0, 450, 0, 0, 0, 412, 0, 429, 487, 0,
	400, 134, 491, 498, 447, 255, 502, 445, 444, 199,
	0, 230, 137, 151, 112, 98, 108, 0, 136, 177,
	206, 210, 495, 426, 434, 120, 432, 208, 187, 246,
	468, 189, 207, 155, 236, 200, 245, 256, 257, 233,
	253, 261, 223, 101, 232, 244, 117, 218, 103, 242,
	229, 166, 146, 147, 102, 0, 204, 125, 132, 122,
	179, 239, 240, 121, 264, 109, 252, 105, 110, 251,
	173, 235, 243, 167, 160, 104, 241, 165, 159, 150,
	129, 139, 197, 157, 198, 140, 170, 169, 171, 0,
	405, 0, 227, 249, 265, 114, 421, 234, 259, 260,
	0, 0, 115, 133, 128, 196, 172, 111, 142, 224,
	149, 156, 203, 263, 186, 209, 118, 248, 225, 417,
	420, 415, 416, 463, 464, 510, 511, 512, 488, 411,
	0, 418, 419, 0, 493, 500, 501, 467, 97, 106,
	153, 262, 201, 131, 250, 401, 414, 124, 424, 0,
	0, 436, 441, 442, 454, 456, 457, 458, 459, 466,
	473, 474, 476, 482, 483, 484, 485, 490, 497, 516,
	99, 100, 107, 113, 119, 123, 127, 130, 135, 138,
	141, 143, 144, 145, 148, 158, 161, 162, 163, 164,
	174, 175, 176, 178, 181, 182, 183, 184, 185, 188,
	190, 191, 192, 193, 194, 195, 202, 205, 211, 212,
	213, 214, 215, 216, 217, 219, 220, 221, 222, 228,
	231, 237, 238, 247, 254, 258, 504, 492, 0, 449,
	507, 423, 439, 515, 440, 443, 480, 408, 462, 180,
	437, 0, 427, 403, 433, 404, 425, 451, 126, 422,
	494, 465, 506, 152, 505, 455, 513, 154, 471, 0,
	226, 168, 0, 0, 453, 496, 460, 489, 448, 481,
	413, 470, 508, 438, 478, 509, 0, 0, 0, 320,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 0,
	475, 503, 435, 477, 479, 402, 472, 0, 406, 409,
	514, 499, 430, 431, 0, 0, 0, 0, 0, 0,
	0, 452, 461, 486, 446, 0, 0, 0, 0, 0,
	0, 0, 0, 428, 0, 469, 0, 0, 0, 410,
	407, 0, 0, 450, 0, 0, 0, 412, 0, 429,
	487, 0, 400, 134, 491, 498, 447, 255, 502, 445,
	444, 199, 0, 230, 137, 151, 112, 98, 108, 0,
	136, 177, 206, 210, 495, 426, 434, 120, 432, 208,
	187, 246, 468, 189, 207, 155, 236, 200, 245, 256,
	257, 233, 253, 261, 223, 101, 232, 244, 117, 218,
	103, 242, 229, 166, 146, 147, 102, 0, 204, 125,
	132, 122, 179, 239, 240, 121, 264, 109, 252, 105,
	110, 251, 173, 235, 243, 167, 160, 104, 241, 165,
	159, 150, 129, 139, 197, 157, 198, 140, 170, 169,
	171, 0, 405, 0, 227, 249, 265, 114, 421, 234,
	259, 260, 0, 0, 115, 133, 128, 196, 172, 111,
	142, 224, 149, 156, 203, 263, 186, 209, 118, 248,
	225, 417, 420, 415, 416, 463, 464, 510, 511, 512,
	488, 411, 0, 418, 419, 0, 493, 500, 501, 467,
	97, 106, 153, 262, 201, 131, 250, 401, 414, 124,
	424, 0, 0, 436, 441, 442, 454, 456, 457, 458,
	459, 466, 473, 474, 476, 482, 483, 484, 485, 490,
	497, 516, 99, 100, 107, 113, 119, 123, 127, 130,
	135, 138, 141, 143, 144, 145, 148, 158, 161, 162,
	163, 164, 174, 175, 176, 178, 181, 182, 183, 184,
	185, 188, 190, 191, 192, 193, 194, 195, 202, 205,
	211, 212, 213, 214, 215, 216, 217, 219, 220, 221,
	222, 228, 231, 237, 238, 247, 254, 258, 504, 492,
	0, 449, 507, 423, 439, 515, 440, 443, 480, 408,
	462, 180, 437, 0, 427, 403, 433, 404, 425, 451,
	126, 422, 494, 465, 506, 152, 505, 455, 513, 154,
	471, 0, 226, 168, 0, 0, 453, 496, 460, 489,
	448, 481, 413, 470, 508, 438, 478, 509, 0, 0,
	0, 398, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 0, 475, 503, 435, 477, 479, 402, 472, 0,
	406, 409, 514, 499, 430, 431, 0, 0, 0, 0,
	0, 0, 0, 452, 461, 486, 446, 0, 0, 0,
	0, 0, 0, 0, 0, 428, 0, 469, 0, 0,
	0, 410, 407, 0, 0, 450, 0, 0, 0, 412,
	0, 429, 487, 0, 400, 134, 491, 498, 447, 255,
	502, 445, 444, 199, 0, 230, 137, 151, 112, 98,
	108, 0, 136, 177, 206, 210, 495, 426, 434, 120,
	432, 208, 187, 246, 468, 189, 207, 155, 236, 200,
	245, 256, 257, 233, 253, 261, 223, 101, 232, 244,
	117, 218, 103, 242, 229, 166, 146, 147, 102, 0,
	204, 125, 132, 122, 179, 239, 240, 121, 264, 109,
	252, 105, 396, 251, 173, 235, 243, 167, 160, 104,
	241, 165, 159, 150, 129, 139, 197, 157, 198, 140,
	170, 169, 171, 0, 405, 0, 227, 249, 265, 114,
	421, 234, 259, 260, 0, 0, 115, 133, 128, 196,
	397, 395, 142, 224, 149, 156, 203, 263, 186, 209,
	118, 248, 225, 417, 420, 415, 416, 463, 464, 510,
	511, 512, 488, 411, 0, 418, 419, 0, 493, 500,
	501, 467, 97, 106, 153, 262, 201, 131, 250, 401,
	414, 124, 424, 0, 0, 436, 441, 442, 454, 456,
	457, 458, 459, 466, 473, 474, 476, 482, 483, 484,
	485, 490, 497, 516, 99, 100, 107, 113, 119, 123,
	127, 130, 135, 138, 141, 143, 144, 145, 148, 158,
	161, 162, 163, 164, 174, 175, 176, 178, 181, 182,
	183, 184, 185, 188, 190, 191, 192, 193, 194, 195,
	202, 205, 211, 212, 213, 214, 215, 216, 217, 219,
	220, 221, 222, 228, 231, 237, 238, 247, 254, 258,
	504, 492, 0, 449, 507, 423, 439, 515, 440, 443,
	480, 408, 462, 180, 437, 0, 427, 403, 433, 404,
	425, 451, 126, 422, 494, 465, 506, 152, 505, 455,
	513, 154, 471, 0, 226, 168, 0, 0, 453, 496,
	460, 489, 448, 481, 413, 470, 508, 438, 478, 509,
	0, 0, 0, 95, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 0, 475, 503, 435, 477, 479, 402,
	472, 0, 406, 409, 514, 499, 430, 431, 0, 0,
	0, 0, 0, 0, 0, 452, 461, 486, 446, 0,
	0, 0, 0, 0, 0, 0, 0, 428, 0, 469,
	0, 0, 0, 410, 407, 0, 0, 450, 0, 0,
	0, 412, 0, 429, 487, 0, 400, 134, 491, 498,
	447, 255, 502, 445, 444, 199, 0, 230, 137, 151,
	112, 98, 108, 0, 136, 177, 206, 210, 495, 426,
	434, 120, 432, 208, 187, 246, 468, 189, 207, 155,
	236, 200, 245, 256, 257, 233, 253, 261, 223, 101,
	232, 244, 117, 218, 103, 242, 229, 166, 146, 147,
	102, 0, 204, 125, 132, 122, 179, 239, 240, 121,
	264, 109, 252, 105, 110, 251, 173, 235, 243, 167,
	160, 104, 241, 165, 159, 150, 129, 139, 197, 157,
	198, 140, 170, 169, 171, 0, 405, 0, 227, 249,
	265, 114, 421, 234, 259, 260, 0, 0, 115, 133,
	128, 196, 172, 111, 142, 224, 149, 156, 203, 263,
	186, 209, 118, 248, 225, 417, 420, 415, 416, 463,
	464, 510, 511, 512, 488, 411, 0, 418, 419, 0,
	493, 500, 501, 467, 97, 106, 153, 262, 201, 131,
	250, 401, 414, 124, 424, 0, 0, 436, 441, 442,
	454, 456, 457, 458, 459, 466, 473, 474, 476, 482,
	483, 484, 485, 490, 497, 516, 99, 100, 107, 113,
	119, 123, 127, 130, 135, 138, 141, 143, 144, 145,
	148, 158, 161, 162, 163, 164, 174, 175, 176, 178,
	181, 182, 183, 184, 185, 188, 190, 191, 192, 193,
	194, 195, 202, 205, 211, 212, 213, 214, 215, 216,
	217, 219, 220, 221, 222, 228, 231, 237, 238, 247,
	254, 258, 504, 492, 0, 449, 507, 423, 439, 515,
	440, 443, 480, 408, 462, 180, 437, 0, 427, 403,
	433, 404, 425, 451, 126, 422, 494, 465, 506, 152,
	505, 455, 513, 154, 471, 0, 226, 168, 0, 0,
	453, 496, 460, 489, 448, 481, 413, 470, 508, 438,
	478, 509, 0, 0, 0, 398, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 0, 475, 503, 435, 477,
	479, 402, 472, 0, 406, 409, 514, 499, 430, 431,
	0, 0, 0, 0, 0, 0, 0, 452, 461, 486,
	446, 0, 0, 0, 0, 0, 0, 0, 0, 428,
	0, 469, 0, 0, 0, 410, 407, 0, 0, 450,
	0, 0, 0, 412, 0, 429, 487, 0, 400, 134,
	491, 498, 447, 255, 502, 445, 444, 199, 0, 230,
	137, 151, 112, 98, 108, 0, 136, 177, 206, 210,
	495, 426, 434, 120, 432, 208, 187, 246, 468, 189,
	207, 155, 236, 200, 245, 256, 257, 233, 253, 261,
	223, 101, 232, 706, 117, 218, 103, 242, 229, 166,
	146, 147, 102, 0, 204, 125, 132, 122, 179, 239,
	240, 121, 264, 109, 252, 105, 396, 251, 173, 235,
	243, 167, 160, 104, 241, 165, 159, 150, 129, 139,
	197, 157, 198, 140, 170, 169, 171, 0, 405, 0,
	227, 249, 265, 114, 421, 234, 259, 260, 0, 0,
	115, 133, 128, 196, 397, 395, 142, 224, 149, 156,
	203, 263, 186, 209, 118, 248, 225, 417, 420, 415,
	416, 463, 464, 510, 511, 512, 488, 411, 0, 418,
	419, 0, 493, 500, 501, 467, 97, 106, 153, 262,
	201, 131, 250, 401, 414, 124, 424, 0, 0, 436,
	441, 442, 454, 456, 457, 458, 459, 466, 473, 474,
	476, 482, 483, 484, 485, 490, 497, 516, 99, 100,
	107, 113, 119, 123, 127, 130, 135, 138, 141, 143,
	144, 145, 148, 158, 161, 162, 163, 164, 174, 175,
	176, 178, 181, 182, 183, 184, 185, 188, 190, 191,
	192, 193, 194, 195, 202, 205, 211, 212, 213, 214,
	215, 216, 217, 219, 220, 221, 222, 228, 231, 237,
	238, 247, 254, 258, 504, 492, 0, 449, 507, 423,
	439, 515, 440, 443, 480, 408, 462, 180, 437, 0,
	427, 403, 433, 404, 425, 451, 126, 422, 494, 465,
	506, 152, 505, 455, 513, 154, 471, 0, 226, 168,
	0, 0, 453, 496, 460, 489, 448, 481, 413, 470,
	508, 438, 478, 509, 0, 0, 0, 398, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 0, 475, 503,
	435, 477, 479, 402, 472, 0, 406, 409, 514, 499,
	430, 431, 0, 0, 0, 0, 0, 0, 0, 452,
	461, 486, 446, 0, 0, 0, 0, 0, 0, 0,
	0, 428, 0, 469, 0, 0, 0, 410, 407, 0,
	0, 450, 0, 0, 0, 412, 0, 429, 487, 0,
	400, 134, 491, 498, 447, 255, 502, 445, 444, 199,
	0, 230, 137, 151, 112, 98, 108, 0, 136, 177,
	206, 210, 495, 426, 434, 120, 432, 208, 187, 246,
	468, 189, 207, 155, 236, 200, 245, 256, 257, 233,
	253, 261, 223, 101, 232, 387, 117, 218, 103, 242,
	229, 166, 146, 147, 102, 0, 204, 125, 132, 122,
	179, 239, 240, 121, 264, 109, 252, 105, 396, 251,
	173, 235, 243, 167, 160, 104, 241, 165, 159, 150,
	129, 139, 197, 157, 198, 140, 170, 169, 171, 0,
	405, 0, 227, 249, 265, 114, 421, 234, 259, 260,
	0, 0, 115, 133, 128, 196, 397, 395, 390, 389,
	149, 156, 203, 263, 186, 209, 118, 248, 225, 417,
	420, 415, 416, 463, 464, 510, 511, 512, 488, 411,
	0, 418, 419, 0, 493, 500, 501, 467, 97, 106,
	153, 262, 201, 131, 250, 401, 414, 124, 424, 0,
	0, 436, 441, 442, 454, 456, 457, 458, 459, 466,
	473, 474, 476, 482, 483, 484, 485, 490, 497, 516,
	99, 100, 107, 113, 119, 123, 127, 130, 135, 138,
	141, 143, 144, 145, 148, 158, 161, 162, 163, 164,
	174, 175, 176, 178, 181, 182, 183, 184, 185, 188,
	190, 191, 192, 193, 194, 195, 202, 205, 211, 212,
	213, 214, 215, 216, 217, 219, 220, 221, 222, 228,
	231, 237, 238, 247, 254, 258, 180, 0, 0, 0,
	0, 322, 0, 0, 0, 126, 319, 0, 0, 0,
	152, 0, 0, 362, 154, 0, 0, 226, 168, 0,
	0, 0, 0, 353, 354, 0, 0, 0, 0, 0,
	0, 949, 0, 55, 0, 0, 320, 341, 340, 343,
	344, 345, 346, 0, 0, 116, 342, 347, 348, 349,
	950, 0, 0, 317, 334, 0, 361, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 331, 332, 0, 0,
	0, 0, 375, 0, 333, 0, 0, 328, 329, 330,
	335, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	134, 0, 0, 0, 255, 0, 0, 373, 199, 0,
	230, 137, 151, 112, 98, 108, 0, 136, 177, 206,
	210, 0, 0, 0, 120, 0, 208, 187, 246, 0,
	189, 207, 155, 236, 200, 245, 256, 257, 233, 253,
	261, 223, 101, 232, 244, 117, 218, 103, 242, 229,
	166, 146, 147, 102, 0, 204, 125, 132, 122, 179,
	239, 240, 121, 264, 109, 252, 105, 110, 251, 173,
	235, 243, 167, 160, 104, 241, 165, 159, 150, 129,
	139, 197, 157, 198, 140, 170, 169, 171, 0, 0,
	0, 227, 249, 265, 114, 0, 234, 259, 260, 0,
	0, 115, 133, 128, 196, 172, 111, 142, 224, 149,
	156, 203, 263, 186, 209, 118, 248, 225, 363, 374,
	369, 370, 367, 368, 366, 365, 364, 376, 355, 356,
	357, 358, 360, 0, 371, 372, 359, 97, 106, 153,
	262, 201, 131, 250, 0, 0, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	100, 107, 113, 119, 123, 127, 130, 135, 138, 141,
	143, 144, 145, 148, 158, 161, 162, 163, 164, 174,
	175, 176, 178, 181, 182, 183, 184, 185, 188, 190,
	191, 192, 193, 194, 195, 202, 205, 211, 212, 213,
	214, 215, 216, 217, 219, 220, 221, 222, 228, 231,
	237, 238, 247, 254, 258, 180, 0, 0, 0, 0,
	322, 0, 0, 0, 126, 319, 0, 0, 0, 152,
	0, 0, 362, 154, 0, 0, 226, 168, 0, 0,
	0, 0, 353, 354, 0, 0, 0, 0, 0, 0,
	0, 0, 55, 0, 578, 320, 341, 340, 343, 344,
	345, 346, 0, 0, 116, 342, 347, 348, 349, 0,
	0, 0, 317, 334, 0, 361, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 331, 332, 0, 0, 0,
	0, 375, 0, 333, 0, 0, 328, 329, 330, 335,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 134,
	0, 0, 0, 255, 0, 0, 373, 199, 0, 230,
	137, 151, 112, 98, 108, 0, 136, 177, 206, 210,
	0, 0, 0, 120, 0, 208, 187, 246, 0, 189,
	207, 155, 236, 200, 245, 256, 257, 233, 253, 261,
	223, 101, 232, 244, 117, 218, 103, 242, 229, 166,
	146, 147, 102, 0, 204, 125, 132, 122, 179, 239,
	240, 121, 264, 109, 252, 105, 110, 251, 173, 235,
	243, 167, 160, 104, 241, 165, 159, 150, 129, 139,
	197, 157, 198, 140, 170, 169, 171, 0, 0, 0,
	227, 249, 265, 114, 0, 234, 259, 260, 0, 0,
	115, 133, 128, 196, 172, 111, 142, 224, 149, 156,
	203, 263, 186, 209, 118, 248, 225, 363, 374, 369,
	370, 367, 368, 366, 365, 364, 376, 355, 356, 357,
	358, 360, 0, 371, 372, 359, 97, 106, 153, 262,
	201, 131, 250, 0, 0, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 100,
	107, 113, 119, 123, 127, 130, 135, 138, 141, 143,
	144, 145, 148, 158, 161, 162, 163, 164, 174, 175,
	176, 178, 181, 182, 183, 184, 185, 188, 190, 191,
	192, 193, 194, 195, 202, 205, 211, 212, 213, 214,
	215, 216, 217, 219, 220, 221, 222, 228, 231, 237,
	238, 247, 254, 258, 180, 0, 0, 0, 0, 322,
	0, 0, 0, 126, 319, 0, 0, 0, 152, 0,
	0, 362, 154, 0, 0, 226, 168, 0, 0, 0,
	0, 353, 354, 0, 0, 0, 0, 0, 0, 0,
	0, 55, 0, 0, 320, 341, 340, 343, 344, 345,
	346, 0, 0, 116, 342, 347, 348, 349, 0, 0,
	0, 317, 334, 0, 361, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 331, 332, 313, 0, 0, 0,
	375, 0, 333, 0, 0, 328, 329, 330, 335, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 134, 0,
	0, 0, 255, 0, 0, 373, 199, 0, 230, 137,
	151, 112, 98, 108, 0, 136, 177, 206, 210, 0,
	0, 0, 120, 0, 208, 187, 246, 0, 189, 207,
	155, 236, 200, 245, 256, 257, 233, 253, 261, 223,
	101, 232, 244, 117, 218, 103, 242, 229, 166, 146,
	147, 102, 0, 204, 125, 132, 122, 179, 239, 240,
	121, 264, 109, 252, 105, 110, 251, 173, 235, 243,
	167, 160, 104, 241, 165, 159, 150, 129, 139, 197,
	157, 198, 140, 170, 169, 171, 0, 0, 0, 227,
	249, 265, 114, 0, 234, 259, 260, 0, 0, 115,
	133, 128, 196, 172, 111, 142, 224, 149, 156, 203,
	263, 186, 209, 118, 248, 225, 363, 374, 369, 370,
	367, 368, 366, 365, 364, 376, 355, 356, 357, 358,
	360, 0, 371, 372, 359, 97, 106, 153, 262, 201,
	131, 250, 0, 0, 124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 100, 107,
	113, 119, 123, 127, 130, 135, 138, 141, 143, 144,
	145, 148, 158, 161, 162, 163, 164, 174, 175, 176,
	178, 181, 182, 183, 184, 185, 188, 190, 191, 192,
	193, 194, 195, 202, 205, 211, 212, 213, 214, 215,
	216, 217, 219, 220, 221, 222, 228, 231, 237, 238,
	247, 254, 258, 180, 0, 0, 0, 0, 322, 0,
	0, 0, 126, 319, 0, 0, 0, 152, 0, 0,
	362, 154, 0, 0, 226, 168, 0, 0, 0, 0,
	353, 354, 0, 0, 0, 0, 0, 0, 0, 0,
	55, 0, 0, 320, 341, 890, 343, 344, 345, 346,
	0, 0, 116, 342, 347, 348, 349, 0, 0, 0,
	317, 334, 0, 361, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 331, 332, 313, 0, 0, 0, 375,
	0, 333, 0, 0, 328, 329, 330, 335, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 134, 0, 0,
	0, 255, 0, 0, 373, 199, 0, 230, 137, 151,
	112, 98, 108, 0, 136, 177, 206, 210, 0, 0,
	0, 120, 0, 208, 187, 246, 0, 189, 207, 155,
	236, 200, 245, 256, 257, 233, 253, 261, 223, 101,
	232, 244, 117, 218, 103, 242, 229, 166, 146, 147,
	102, 0, 204, 125, 132, 122, 179, 239, 240, 121,
	264, 109, 252, 105, 110, 251, 173, 235, 243, 167,
	160, 104, 241, 165, 159, 150, 129, 139, 197, 157,
	198, 140, 170, 169, 171, 0, 0, 0, 227, 249,
	265, 114, 0, 234, 259, 260, 0, 0, 115, 133,
	128, 196, 172, 111, 142, 224, 149, 156, 203, 263,
	186, 209, 118, 248, 225, 363, 374, 369, 370, 367,
	368, 366, 365, 364, 376, 355, 356, 357, 358, 360,
	0, 371, 372, 359, 97, 106, 153, 262, 201, 131,
	250, 0, 0, 124, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 100, 107, 113,
	119, 123, 127, 130, 135, 138, 141, 143, 144, 145,
	148, 158, 161, 162, 163, 164, 174, 175, 176, 178,
	181, 182, 183, 184, 185, 188, 190, 191, 192, 193,
	194, 195, 202, 205, 211, 212, 213, 214, 215, 216,
	217, 219, 220, 221, 222, 228, 231, 237, 238, 247,
	254, 258, 180, 0, 0, 0, 0, 322, 0, 0,
	0, 126, 319, 0, 0, 0, 152, 0, 0, 362,
	154, 0, 0, 226, 168, 0, 0, 0, 0, 353,
	354, 0, 0, 0, 0, 0, 0, 0, 0, 55,
	0, 0, 320, 341, 887, 343, 344, 345, 346, 0,
	0, 116, 342, 347, 348, 349, 0, 0, 0, 317,
	334, 0, 361, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 331, 332, 313, 0, 0, 0, 375, 0,
	333, 0, 0, 328, 329, 330, 335, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 134, 0, 0, 0,
	255, 0, 0, 373, 199, 0, 230, 137, 151, 112,
	98, 108, 0, 136, 177, 206, 210, 0, 0, 0,
	120, 0, 208, 187, 246, 0, 189, 207, 155, 236,
	200, 245, 256, 257, 233, 253, 261, 223, 101, 232,
	244, 117, 218, 103, 242, 229, 166, 146, 147, 102,
	0, 204, 125, 132, 122, 179, 239, 240, 121, 264,
	109, 252, 105, 110, 251, 173, 235, 243, 167, 160,
	104, 241, 165, 159, 150, 129, 139, 197, 157, 198,
	140, 170, 169, 171, 0, 0, 0, 227, 249, 265,
	114, 0, 234, 259, 260, 0, 0, 115, 133, 128,
	196, 172, 111, 142, 224, 149, 156, 203, 263, 186,
	209, 118, 248, 225, 363, 374, 369, 370, 367, 368,
	366, 365, 364, 376, 355, 356, 357, 358, 360, 0,
	371, 372, 359, 97, 106, 153, 262, 201, 131, 250,
	0, 0, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 100, 107, 113, 119,
	123, 127, 130, 135, 138, 141, 143, 144, 145, 148,
	158, 161, 162, 163, 164, 174, 175, 176, 178, 181,
	182, 183, 184, 185, 188, 190, 191, 192, 193, 194,
	195, 202, 205, 211, 212, 213, 214, 215, 216, 217,
	219, 220, 221, 222, 228, 231, 237, 238, 247, 254,
	258, 24, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 180, 0, 0, 0, 0, 322, 0,
	0, 0, 126, 319, 0, 0, 0, 152, 0, 0,
	362, 154, 0, 0, 226, 168, 0, 0, 0, 0,
	353, 354, 0, 0, 0, 0, 0, 0, 0, 0,
	55, 0, 0, 320, 341, 340, 343, 344, 345, 346,
	0, 0, 116, 342, 347, 348, 349, 0, 0, 0,
	317, 334, 0, 361, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 331, 332, 0, 0, 0, 0, 375,
	0, 333, 0, 0, 328, 329, 330, 335, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 134, 0, 0,
	0, 255, 0, 0, 373, 199, 0, 230, 137, 151,
	112, 98, 108, 0, 136, 177, 206, 210, 0, 0,
	0, 120, 0, 208, 187, 246, 0, 189, 207, 155,
	236, 200, 245, 256, 257, 233, 253, 261, 223, 101,
	232, 244, 117, 218, 103, 242, 229, 166, 146, 147,
	102, 0, 204, 125, 132, 122, 179, 239, 240, 121,
	264, 109, 252, 105, 110, 251, 173, 235, 243, 167,
	160, 104, 241, 165, 159, 150, 129, 139, 197, 157,
	198, 140, 170, 169, 171, 0, 0, 0, 227, 249,
	265, 114, 0, 234, 259, 260, 0, 0, 115, 133,
	128, 196, 172, 111, 142, 224, 149, 156, 203, 263,
	186, 209, 118, 248, 225, 363, 374, 369, 370, 367,
	368, 366, 365, 364, 376, 355, 356, 357, 358, 360,
	0, 371, 372, 359, 97, 106, 153, 262, 201, 131,
	250, 0, 0, 124, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 100, 107, 113,
	119, 123, 127, 130, 135, 138, 141, 143, 144, 145,
	148, 158, 161, 162, 163, 164, 174, 175, 176, 178,
	181, 182, 183, 184, 185, 188, 190, 191, 192, 193,
	194, 195, 202, 205, 211, 212, 213, 214, 215, 216,
	217, 219, 220, 221, 222, 228, 231, 237, 238, 247,
	254, 258, 180, 0, 0, 0, 0, 322, 0, 0,
	0, 126, 319, 0, 0, 0, 152, 0, 0, 362,
	154, 0, 0, 226, 168, 0, 0, 0, 0, 353,
	354, 0, 0, 0, 0, 0, 0, 0, 0, 55,
	0, 0, 320, 341, 340, 343, 344, 345, 346, 0,
	0, 116, 342, 347, 348, 349, 0, 0, 0, 317,
	334, 0, 361, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 331, 332, 0, 0, 0, 0, 375, 0,
	333, 0, 0, 328, 329, 330, 335, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 134, 0, 0, 0,
	255, 0, 0, 373, 199, 0, 230, 137, 151, 112,
	98, 108, 0, 136, 177, 206, 210, 0, 0, 0,
	120, 0, 208, 187, 246, 0, 189, 207, 155, 236,
	200, 245, 256, 257, 233, 253, 261, 223, 101, 232,
	244, 117, 218, 103, 242, 229, 166, 146, 147, 102,
	0, 204, 125, 132, 122, 179, 239, 240, 121, 264,
	109, 252, 105, 110, 251, 173, 235, 243, 167, 160,
	104, 241, 165, 159, 150, 129, 139, 197, 157, 198,
	140, 170, 169, 171, 0, 0, 0, 227, 249, 265,
	114, 0, 234, 259, 260, 0, 0, 115, 133, 128,
	196, 172, 111, 142, 224, 149, 156, 203, 263, 186,
	209, 118, 248, 225, 363, 374, 369, 370, 367, 368,
	366, 365, 364, 376, 355, 356, 357, 358, 360, 0,
	371, 372, 359, 97, 106, 153, 262, 201, 131, 250,
	0, 0, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 100, 107, 113, 119,
	123, 127, 130, 135, 138, 141, 143, 144, 145, 148,
	158, 161, 162, 163, 164, 174, 175, 176, 178, 181,
	182, 183, 184, 185, 188, 190, 191, 192, 193, 194,
	195, 202, 205, 211, 212, 213, 214, 215, 216, 217,
	219, 220, 221, 222, 228, 231, 237, 238, 247, 254,
	258, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 0, 0, 0, 152, 0, 0, 362, 154,
	0, 0, 226, 168, 0, 0, 0, 0, 353, 354,
	0, 0, 0, 0, 0, 0, 0, 0, 55, 0,
	0, 320, 341, 340, 343, 344, 345, 346, 0, 0,
	116, 342, 347, 348, 349, 0, 0, 0, 0, 334,
	0, 361, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 331, 332, 0, 0, 0, 0, 375, 0, 333,
	0, 0, 328, 329, 330, 335, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 134, 0, 0, 0, 255,
	0, 0, 373, 199, 0, 230, 137, 151, 112, 98,
	108, 0, 136, 177, 206, 210, 0, 0, 0, 120,
	0, 208, 187, 246, 1528, 189, 207, 155, 236, 200,
	245, 256, 257, 233, 253, 261, 223, 101, 232, 244,
	117, 218, 103, 242, 229, 166, 146, 147, 102, 0,
	204, 125, 132, 122, 179, 239, 240, 121, 264, 109,
	252, 105, 110, 251, 173, 235, 243, 167, 160, 104,
	241, 165, 159, 150, 129, 139, 197, 157, 198, 140,
	170, 169, 171, 0, 0, 0, 227, 249, 265, 114,
	0, 234, 259, 260, 0, 0, 115, 133, 128, 196,
	172, 111, 142, 224, 149, 156, 203, 263, 186, 209,
	118, 248, 225, 363, 374, 369, 370, 367, 368, 366,
	365, 364, 376, 355, 356, 357, 358, 360, 0, 371,
	372, 359, 97, 106, 153, 262, 201, 131, 250, 0,
	0, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 100, 107, 113, 119, 123,
	127, 130, 135, 138, 141, 143, 144, 145, 148, 158,
	161, 162, 163, 164, 174, 175, 176, 178, 181, 182,
	183, 184, 185, 188, 190, 191, 192, 193, 194, 195,
	202, 205, 211, 212, 213, 214, 215, 216, 217, 219,
	220, 221, 222, 228, 231, 237, 238, 247, 254, 258,
	180, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 0, 0, 0, 152, 0, 0, 362, 154, 0,
	0, 226, 168, 0, 0, 0, 0, 353, 354, 0,
	0, 0, 0, 0, 0, 0, 0, 55, 0, 578,
	320, 341, 340, 343, 344, 345, 346, 0, 0, 116,
	342, 347, 348, 349, 0, 0, 0, 0, 334, 0,
	361, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	331, 332, 0, 0, 0, 0, 375, 0, 333, 0,
	0, 328, 329, 330, 335, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 134, 0, 0, 0, 255, 0,
	0, 373, 199, 0, 230, 137, 151, 112, 98, 108,
	0, 136, 177, 206, 210, 0, 0, 0, 120, 0,
	208, 187, 246, 0, 189, 207, 155, 236, 200, 245,
	256, 257, 233, 253, 261, 223, 101, 232, 244, 117,
	218, 103, 242, 229, 166, 146, 147, 102, 0, 204,
	125, 132, 122, 179, 239, 240, 121, 264, 109, 252,
	105, 110, 251, 173, 235, 243, 167, 160, 104, 241,
	165, 159, 150, 129, 139, 197, 157, 198, 140, 170,
	169, 171, 0, 0, 0, 227, 249, 265, 114, 0,
	234, 259, 260, 0, 0, 115, 133, 128, 196, 172,
	111, 142, 224, 149, 156, 203, 263, 186, 209, 118,
	248, 225, 363, 374, 369, 370, 367, 368, 366, 365,
	364, 376, 355, 356, 357, 358, 360, 0, 371, 372,
	359, 97, 106, 153, 262, 201, 131, 250, 0, 0,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 100, 107, 113, 119, 123, 127,
	130, 135, 138, 141, 143, 144, 145, 148, 158, 161,
	162, 163, 164, 174, 175, 176, 178, 181, 182, 183,
	184, 185, 188, 190, 191, 192, 193, 194, 195, 202,
	205, 211, 212, 213, 214, 215, 216, 217, 219, 220,
	221, 222, 228, 231, 237, 238, 247, 254, 258, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 0, 0, 152, 0, 0, 362, 154, 0, 0,
	226, 168, 0, 0, 0, 0, 353, 354, 0, 0,
	0, 0, 0, 0, 0, 0, 55, 0, 0, 320,
	341, 340, 343, 344, 345, 346, 0, 0, 116, 342,
	347, 348, 349, 0, 0, 0, 0, 334, 0, 361,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 331,
	332, 0, 0, 0, 0, 375, 0, 333, 0, 0,
	328, 329, 330, 335, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 134, 0, 0, 0, 255, 0, 0,
	373, 199, 0, 230, 137, 151, 112, 98, 108, 0,
	136, 177, 206, 210, 0, 0, 0, 120, 0, 208,
	187, 246, 0, 189, 207, 155, 236, 200, 245, 256,
	257, 233, 253, 261, 223, 101, 232, 244, 117, 218,
	103, 242, 229, 166, 146, 147, 102, 0, 204, 125,
	132, 122, 179, 239, 240, 121, 264, 109, 252, 105,
	110, 251, 173, 235, 243, 167, 160, 104, 241, 165,
	159, 150, 129, 139, 197, 157, 198, 140, 170, 169,
	171, 0, 0, 0, 227, 249, 265, 114, 0, 234,
	259, 260, 0, 0, 115, 133, 128, 196, 172, 111,
	142, 224, 149, 156, 203, 263, 186, 209, 118, 248,
	225, 363, 374, 369, 370, 367, 368, 366, 365, 364,
	376, 355, 356, 357, 358, 360, 0, 371, 372, 359,
	97, 106, 153, 262, 201, 131, 250, 0, 0, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 100, 107, 113, 119, 123, 127, 130,
	135, 138, 141, 143, 144, 145, 148, 158, 161, 162,
	163, 164, 174, 175, 176, 178, 181, 182, 183, 184,
	185, 188, 190, 191, 192, 193, 194, 195, 202, 205,
	211, 212, 213, 214, 215, 216, 217, 219, 220, 221,
	222, 228, 231, 237, 238, 247, 254, 258, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 0,
	0, 0, 152, 0, 0, 0, 154, 0, 0, 226,
	168, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 398, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 613, 612, 622, 623, 615, 616,
	617, 618, 619, 620, 621, 614, 0, 0, 624, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 134, 0, 0, 0, 255, 0, 0, 0,
	199, 0, 230, 137, 151, 112, 98, 108, 0, 136,
	177, 206, 210, 0, 0, 0, 120, 0, 208, 187,
	246, 0, 189, 207, 155, 236, 200, 245, 256, 257,
	233, 253, 261, 223, 101, 232, 244, 117, 218, 103,
	242, 229, 166, 146, 147, 102, 0, 204, 125, 132,
	122, 179, 239, 240, 121, 264, 109, 252, 105, 110,
	251, 173, 235, 243, 167, 160, 104, 241, 165, 159,
	150, 129, 139, 197, 157, 198, 140, 170, 169, 171,
	0, 0, 0, 227, 249, 265, 114, 0, 234, 259,
	260, 0, 0, 115, 133, 128, 196, 172, 111, 142,
	224, 149, 156, 203, 263, 186, 209, 118, 248, 225,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	106, 153, 262, 201, 131, 250, 0, 0, 124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 100, 107, 113, 119, 123, 127, 130, 135,
	138, 141, 143, 144, 145, 148, 158, 161, 162, 163,
	164, 174, 175, 176, 178, 181, 182, 183, 184, 185,
	188, 190, 191, 192, 193, 194, 195, 202, 205, 211,
	212, 213, 214, 215, 216, 217, 219, 220, 221, 222,
	228, 231, 237, 238, 247, 254, 258, 180, 0, 0,
	0, 601, 0, 0, 0, 0, 126, 0, 0, 0,
	0, 152, 0, 0, 0, 154, 0, 0, 226, 168,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 398, 0, 603,
	0, 0, 0, 0, 0, 0, 116, 0, 0, 0,
	0, 0, 598, 597, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 599,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 134, 0, 0, 0, 255, 0, 0, 0, 199,
	0, 230, 137, 151, 112, 98, 108, 0, 136, 177,
	206, 210, 0, 0, 0, 120, 0, 208, 187, 246,
	0, 189, 207, 155, 236, 200, 245, 256, 257, 233,
	253, 261, 223, 101, 232, 244, 117, 218, 103, 242,
	229, 166, 146, 147, 102, 0, 204, 125, 132, 122,
	179, 239, 240, 121, 264, 109, 252, 105, 110, 251,
	173, 235, 243, 167, 160, 104, 241, 165, 159, 150,
	129, 139, 197, 157, 198, 140, 170, 169, 171, 0,
	0, 0, 227, 249, 265, 114, 0, 234, 259, 260,
	0, 0, 115, 133, 128, 196, 172, 111, 142, 224,
	149, 156, 203, 263, 186, 209, 118, 248, 225, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 106,
	153, 262, 201, 131, 250, 0, 0, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 100, 107, 113, 119, 123, 127, 130, 135, 138,
	141, 143, 144, 145, 148, 158, 161, 162, 163, 164,
	174, 175, 176, 178, 181, 182, 183, 184, 185, 188,
	190, 191, 192, 193, 194, 195, 202, 205, 211, 212,
	213, 214, 215, 216, 217, 219, 220, 221, 222, 228,
	231, 237, 238, 247, 254, 258, 180, 0, 0, 0,
	932, 0, 0, 0, 0, 126, 0, 0, 0, 0,
	152, 0, 0, 0, 154, 0, 0, 226, 168, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 95, 0, 934, 0,
	0, 0, 0, 0, 0, 116, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	134, 0, 0, 0, 255, 0, 0, 0, 199, 0,
	230, 137, 151, 112, 98, 108, 0, 136, 177, 206,
	210, 0, 0, 0, 120, 0, 208, 187, 246, 0,
	189, 207, 155, 236, 200, 245, 256, 257, 233, 253,
	261, 223, 101, 232, 244, 117, 218, 103, 242, 229,
	166, 146, 147, 102, 0, 204, 125, 132, 122, 179,
	239, 240, 121, 264, 109, 252, 105, 110, 251, 173,
	235, 243, 167, 160, 104, 241, 165, 159, 150, 129,
	139, 197, 157, 198, 140, 170, 169, 171, 0, 0,
	0, 227, 249, 265, 114, 0, 234, 259, 260, 0,
	0, 115, 133, 128, 196, 172, 111, 142, 224, 149,
	156, 203, 263, 186, 209, 118, 248, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 106, 153,
	262, 201, 131, 250, 0, 0, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	100, 107, 113, 119, 123, 127, 130, 135, 138, 141,
	143, 144, 145, 148, 158, 161, 162, 163, 164, 174,
	175, 176, 178, 181, 182, 183, 184, 185, 188, 190,
	191, 192, 193, 194, 195, 202, 205, 211, 212, 213,
	214, 215, 216, 217, 219, 220, 221, 222, 228, 231,
	237, 238, 247, 254, 258, 24, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 180, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 0, 0,
	0, 152, 0, 0, 0, 154, 0, 0, 226, 168,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 55, 0, 0, 398, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 134, 0, 0, 0, 255, 0, 0, 0, 199,
	0, 230, 137, 151, 112, 98, 108, 0, 136, 177,
	206, 210, 0, 0, 0, 120, 0, 208, 187, 246,
	0, 189, 207, 155, 236, 200, 245, 256, 257, 233,
	253, 261, 223, 101, 232, 244, 117, 218, 103, 242,
	229, 166, 146, 147, 102, 0, 204, 125, 132, 122,
	179, 239, 240, 121, 264, 109, 252, 105, 110, 251,
	173, 235, 243, 167, 160, 104, 241, 165, 159, 150,
	129, 139, 197, 157, 198, 140, 170, 169, 171, 0,
	0, 0, 227, 249, 265, 114, 0, 234, 259, 260,
	0, 0, 115, 133, 128, 196, 172, 111, 142, 224,
	149, 156, 203, 263, 186, 209, 118, 248, 225, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 106,
	153, 262, 201, 131, 250, 0, 0, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 100, 107, 113, 119, 123, 127, 130, 135, 138,
	141, 143, 144, 145, 148, 158, 161, 162, 163, 164,
	174, 175, 176, 178, 181, 182, 183, 184, 185, 188,
	190, 191, 192, 193, 194, 195, 202, 205, 211, 212,
	213, 214, 215, 216, 217, 219, 220, 221, 222, 228,
	231, 237, 238, 247, 254, 258, 24, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 0,
	0, 0, 152, 0, 0, 0, 154, 0, 0, 226,
	168, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 55, 0, 0, 95, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 134, 0, 0, 0, 255, 0, 0, 0,
	199, 0, 230, 137, 151, 112, 98, 108, 0, 136,
	177, 206, 210, 0, 0, 0, 120, 0, 208, 187,
	246, 0, 189, 207, 155, 236, 200, 245, 256, 257,
	233, 253, 261, 223, 101, 232, 244, 117, 218, 103,
	242, 229, 166, 146, 147, 102, 0, 204, 125, 132,
	122, 179, 239, 240, 121, 264, 109, 252, 105, 110,
	251, 173, 235, 243, 167, 160, 104, 241, 165, 159,
	150, 129, 139, 197, 157, 198, 140, 170, 169, 171,
	0, 0, 0, 227, 249, 265, 114, 0, 234, 259,
	260, 0, 0, 115, 133, 128, 196, 172, 111, 142,
	224, 149, 156, 203, 263, 186, 209, 118, 248, 225,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	106, 153, 262, 201, 131, 250, 0, 0, 124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 100, 107, 113, 119, 123, 127, 130, 135,
	138, 141, 143, 144, 145, 148, 158, 161, 162, 163,
	164, 174, 175, 176, 178, 181, 182, 183, 184, 185,
	188, 190, 191, 192, 193, 194, 195, 202, 205, 211,
	212, 213, 214, 215, 216, 217, 219, 220, 221, 222,
	228, 231, 237, 238, 247, 254, 258, 180, 0, 0,
	0, 932, 0, 0, 0, 0, 126, 0, 0, 0,
	0, 152, 0, 0, 0, 154, 0, 0, 226, 168,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 95, 0, 934,
	0, 0, 0, 0, 0, 0, 116, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 134, 0, 0, 0, 255, 0, 0, 0, 199,
	0, 230, 137, 151, 112, 98, 108, 0, 136, 177,
	206, 210, 0, 0, 0, 120, 0, 208, 187, 246,
	0, 930, 207, 155, 236, 200, 245, 256, 257, 233,
	253, 261, 223, 101, 232, 244, 117, 218, 103, 242,
	229, 166, 146, 147, 102, 0, 204, 125, 132, 122,
	179, 239, 240, 121, 264, 109, 252, 105, 110, 251,
	173, 235, 243, 167, 160, 104, 241, 165, 159, 150,
	129, 139, 197, 157, 198, 140, 170, 169, 171, 0,
	0, 0, 227, 249, 265, 114, 0, 234, 259, 260,
	0, 0, 115, 133, 128, 196, 172, 111, 142, 224,
	149, 156, 203, 263, 186, 209, 118, 248, 225, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 106,
	153, 262, 201, 131, 250, 0, 0, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 100, 107, 113, 119, 123, 127, 130, 135, 138,
	141, 143, 144, 145, 148, 158, 161, 162, 163, 164,
	174, 175, 176, 178, 181, 182, 183, 184, 185, 188,
	190, 191, 192, 193, 194, 195, 202, 205, 211, 212,
	213, 214, 215, 216, 217, 219, 220, 221, 222, 228,
	231, 237, 238, 247, 254, 258, 180, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 0, 0, 0,
	152, 0, 0, 0, 154, 0, 0, 226, 168, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 398, 0, 0, 828,
	0, 0, 829, 0, 0, 116, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	134, 0, 0, 0, 255, 0, 0, 0, 199, 0,
	230, 137, 151, 112, 98, 108, 0, 136, 177, 206,
	210, 0, 0, 0, 120, 0, 208, 187, 246, 0,
	189, 207, 155, 236, 200, 245, 256, 257, 233, 253,
	261, 223, 101, 232, 244, 117, 218, 103, 242, 229,
	166, 146, 147, 102, 0, 204, 125, 132, 122, 179,
	239, 240, 121, 264, 109, 252, 105, 110, 251, 173,
	235, 243, 167, 160, 104, 241, 165, 159, 150, 129,
	139, 197, 157, 198, 140, 170, 169, 171, 0, 0,
	0, 227, 249, 265, 114, 0, 234, 259, 260, 0,
	0, 115, 133, 128, 196, 172, 111, 142, 224, 149,
	156, 203, 263, 186, 209, 118, 248, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 106, 153,
	262, 201, 131, 250, 0, 0, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	100, 107, 113, 119, 123, 127, 130, 135, 138, 141,
	143, 144, 145, 148, 158, 161, 162, 163, 164, 174,
	175, 176, 178, 181, 182, 183, 184, 185, 188, 190,
	191, 192, 193, 194, 195, 202, 205, 211, 212, 213,
	214, 215, 216, 217, 219, 220, 221, 222, 228, 231,
	237, 238, 247, 254, 258, 180, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 715, 0, 0, 0, 152,
	0, 0, 0, 154, 0, 0, 226, 168, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 398, 0, 714, 0, 0,
	0, 0, 0, 0, 116, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 134,
	0, 0, 0, 255, 0, 0, 0, 199, 0, 230,
	137, 151, 112, 98, 108, 0, 136, 177, 206, 210,
	0, 0, 0, 120, 0, 208, 187, 246, 0, 189,
	207, 155, 236, 200, 245, 256, 257, 233, 253, 261,
	223, 101, 232, 244, 117, 218, 103, 242, 229, 166,
	146, 147, 102, 0, 204, 125, 132, 122, 179, 239,
	240, 121, 264, 109, 252, 105, 110, 251, 173, 235,
	243, 167, 160, 104, 241, 165, 159, 150, 129, 139,
	197, 157, 198, 140, 170, 169, 171, 0, 0, 0,
	227, 249, 265, 114, 0, 234, 259, 260, 0, 0,
	115, 133, 128, 196, 172, 111, 142, 224, 149, 156,
	203, 263, 186, 209, 118, 248, 225, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 106, 153, 262,
	201, 131, 250, 0, 0, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 100,
	107, 113, 119, 123, 127, 130, 135, 138, 141, 143,
	144, 145, 148, 158, 161, 162, 163, 164, 174, 175,
	176, 178, 181, 182, 183, 184, 185, 188, 190, 191,
	192, 193, 194, 195, 202, 205, 211, 212, 213, 214,
	215, 216, 217, 219, 220, 221, 222, 228, 231, 237,
	238, 247, 254, 258, 180, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 0, 0, 0, 152, 0,
	0, 0, 154, 0, 0, 226, 168, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 55, 0, 0, 95, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 134, 0,
	0, 0, 255, 0, 0, 0, 199, 0, 230, 137,
	151, 112, 98, 108, 0, 136, 177, 206, 210, 0,
	0, 0, 120, 0, 208, 187, 246, 0, 189, 207,
	155, 236, 200, 245, 256, 257, 233, 253, 261, 223,
	101, 232, 244, 117, 218, 103, 242, 229, 166, 146,
	147, 102, 0, 204, 125, 132, 122, 179, 239, 240,
	121, 264, 109, 252, 105, 110, 251, 173, 235, 243,
	167, 160, 104, 241, 165, 159, 150, 129, 139, 197,
	157, 198, 140, 170, 169, 171, 0, 0, 0, 227,
	249, 265, 114, 0, 234, 259, 260, 0, 0, 115,
	133, 128, 196, 172, 111, 142, 224, 149, 156, 203,
	263, 186, 209, 118, 248, 225, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 106, 153, 262, 201,
	131, 250, 0, 0, 124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 100, 107,
	113, 119, 123, 127, 130, 135, 138, 141, 143, 144,
	145, 148, 158, 161, 162, 163, 164, 174, 175, 176,
	178, 181, 182, 183, 184, 185, 188, 190, 191, 192,
	193, 194, 195, 202, 205, 211, 212, 213, 214, 215,
	216, 217, 219, 220, 221, 222, 228, 231, 237, 238,
	247, 254, 258, 180, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 0, 0, 0, 152, 0, 0,
	0, 154, 0, 0, 226, 168, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 95, 0, 934, 0, 0, 0, 0,
	0, 0, 116, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 134, 0, 0,
	0, 255, 0, 0, 0, 199, 0, 230, 137, 151,
	112, 98, 108, 0, 136, 177, 206, 210, 0, 0,
	0, 120, 0, 208, 187, 246, 0, 189, 207, 155,
	236, 200, 245, 256, 257, 233, 253, 261, 223, 101,
	232, 244, 117, 218, 103, 242, 229, 166, 146, 147,
	102, 0, 204, 125, 132, 122, 179, 239, 240, 121,
	264, 109, 252, 105, 110, 251, 173, 235, 243, 167,
	160, 104, 241, 165, 159, 150, 129, 139, 197, 157,
	198, 140, 170, 169, 171, 0, 0, 0, 227, 249,
	265, 114, 0, 234, 259, 260, 0, 0, 115, 133,
	128, 196, 172, 111, 142, 224, 149, 156, 203, 263,
	186, 209, 118, 248, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 106, 153, 262, 201, 131,
	250, 0, 0, 124, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 100, 107, 113,
	119, 123, 127, 130, 135, 138, 141, 143, 144, 145,
	148, 158, 161, 162, 163, 164, 174, 175, 176, 178,
	181, 182, 183, 184, 185, 188, 190, 191, 192, 193,
	194, 195, 202, 205, 211, 212, 213, 214, 215, 216,
	217, 219, 220, 221, 222, 228, 231, 237, 238, 247,
	254, 258, 180, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 0, 0, 0, 152, 0, 0, 0,
	154, 0, 0, 226, 168, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 398, 0, 603, 0, 0, 0, 0, 0,
	0, 116, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 134, 0, 0, 0,
	255, 0, 0, 0, 199, 0, 230, 137, 151, 112,
	98, 108, 0, 136, 177, 206, 210, 0, 0, 0,
	120, 0, 208, 187, 246, 0, 189, 207, 155, 236,
	200, 245, 256, 257, 233, 253, 261, 223, 101, 232,
	244, 117, 218, 103, 242, 229, 166, 146, 147, 102,
	0, 204, 125, 132, 122, 179, 239, 240, 121, 264,
	109, 252, 105, 110, 251, 173, 235, 243, 167, 160,
	104, 241, 165, 159, 150, 129, 139, 197, 157, 198,
	140, 170, 169, 171, 0, 0, 0, 227, 249, 265,
	114, 0, 234, 259, 260, 0, 0, 115, 133, 128,
	196, 172, 111, 142, 224, 149, 156, 203, 263, 186,
	209, 118, 248, 225, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 106, 153, 262, 201, 131, 250,
	0, 0, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 100, 107, 113, 119,
	123, 127, 130, 135, 138, 141, 143, 144, 145, 148,
	158, 161, 162, 163, 164, 174, 175, 176, 178, 181,
	182, 183, 184, 185, 188, 190, 191, 192, 193, 194,
	195, 202, 205, 211, 212, 213, 214, 215, 216, 217,
	219, 220, 221, 222, 228, 231, 237, 238, 247, 254,
	258, 180, 0, 0, 0, 0, 0, 0, 0, 685,
	126, 0, 0, 0, 0, 152, 0, 0, 0, 154,
	0, 0, 226, 168, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 95, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 134, 0, 0, 0, 255,
	0, 0, 0, 199, 0, 230, 137, 151, 112, 98,
	108, 0, 136, 177, 206, 210, 0, 0, 0, 120,
	0, 208, 187, 246, 0, 189, 207, 155, 236, 200,
	245, 256, 257, 233, 253, 261, 223, 101, 232, 244,
	117, 218, 103, 242, 229, 166, 146, 147, 102, 0,
	204, 125, 132, 122, 179, 239, 240, 121, 264, 109,
	252, 105, 110, 251, 173, 235, 243, 167, 160, 104,
	241, 165, 159, 150, 129, 139, 197, 157, 198, 140,
	170, 169, 171, 0, 0, 0, 227, 249, 265, 114,
	0, 234, 259, 260, 0, 0, 115, 133, 128, 196,
	172, 111, 142, 224, 149, 156, 203, 263, 186, 209,
	118, 248, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 106, 153, 262, 201, 131, 250, 0,
	0, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 100, 107, 113, 119, 123,
	127, 130, 135, 138, 141, 143, 144, 145, 148, 158,
	161, 162, 163, 164, 174, 175, 176, 178, 181, 182,
	183, 184, 185, 188, 190, 191, 192, 193, 194, 195,
	202, 205, 211, 212, 213, 214, 215, 216, 217, 219,
	220, 221, 222, 228, 231, 237, 238, 247, 254, 258,
	379, 0, 0, 0, 0, 0, 0, 180, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 0, 0,
	0, 152, 0, 0, 0, 154, 0, 0, 226, 168,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 95, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 134, 0, 0, 0, 255, 0, 0, 0, 199,
	0, 230, 137, 151, 112, 98, 108, 0, 136, 177,
	206, 210, 0, 0, 0, 120, 0, 208, 187, 246,
	0, 189, 207, 155, 236, 200, 245, 256, 257, 233,
	253, 261, 223, 101, 232, 244, 117, 218, 103, 242,
	229, 166, 146, 147, 102, 0, 204, 125, 132, 122,
	179, 239, 240, 121, 264, 109, 252, 105, 110, 251,
	173, 235, 243, 167, 160, 104, 241, 165, 159, 150,
	129, 139, 197, 157, 198, 140, 170, 169, 171, 0,
	0, 0, 227, 249, 265, 114, 0, 234, 259, 260,
	0, 0, 115, 133, 128, 196, 172, 111, 142, 224,
	149, 156, 203, 263, 186, 209, 118, 248, 225, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 106,
	153, 262, 201, 131, 250, 0, 0, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 100, 107, 113, 119, 123, 127, 130, 135, 138,
	141, 143, 144, 145, 148, 158, 161, 162, 163, 164,
	174, 175, 176, 178, 181, 182, 183, 184, 185, 188,
	190, 191, 192, 193, 194, 195, 202, 205, 211, 212,
	213, 214, 215, 216, 217, 219, 220, 221, 222, 228,
	231, 237, 238, 247, 254, 258, 180, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 0, 0, 0,
	152, 0, 0, 0, 154, 0, 0, 226, 168, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 95, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	134, 0, 92, 0, 255, 0, 0, 0, 199, 0,
	230, 137, 151, 112, 98, 108, 0, 136, 177, 206,
	210, 0, 0, 0, 120, 0, 208, 187, 246, 0,
	189, 207, 155, 236, 200, 245, 256, 257, 233, 253,
	261, 223, 101, 232, 244, 117, 218, 103, 242, 229,
	166, 146, 147, 102, 0, 204, 125, 132, 122, 179,
	239, 240, 121, 264, 109, 252, 105, 110, 251, 173,
	235, 243, 167, 160, 104, 241, 165, 159, 150, 129,
	139, 197, 157, 198, 140, 170, 169, 171, 0, 0,
	0, 227, 249, 265, 114, 0, 234, 259, 260, 0,
	0, 115, 133, 128, 196, 172, 111, 142, 224, 149,
	156, 203, 263, 186, 209, 118, 248, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 106, 153,
	262, 201, 131, 250, 0, 0, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	100, 107, 113, 119, 123, 127, 130, 135, 138, 141,
	143, 144, 145, 148, 158, 161, 162, 163, 164, 174,
	175, 176, 178, 181, 182, 183, 184, 185, 188, 190,
	191, 192, 193, 194, 195, 202, 205, 211, 212, 213,
	214, 215, 216, 217, 219, 220, 221, 222, 228, 231,
	237, 238, 247, 254, 258, 180, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 0, 0, 0, 0, 152,
	0, 0, 0, 154, 0, 0, 226, 168, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 398, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 134,
	0, 0, 0, 255, 0, 0, 0, 199, 0, 230,
	137, 151, 112, 98, 108, 0, 136, 177, 206, 210,
	0, 0, 0, 120, 0, 208, 187, 246, 0, 189,
	207, 155, 236, 200, 245, 256, 257, 233, 253, 261,
	223, 101, 232, 244, 117, 218, 103, 242, 229, 166,
	146, 147, 102, 0, 204, 125, 132, 122, 179, 239,
	240, 121, 264, 109, 252, 105, 110, 251, 173, 235,
	243, 167, 160, 104, 241, 165, 159, 150, 129, 139,
	197, 157, 198, 140, 170, 169, 171, 0, 0, 0,
	227, 249, 265, 114, 0, 234, 259, 260, 0, 0,
	115, 133, 128, 196, 172, 111, 142, 224, 149, 156,
	203, 263, 186, 209, 118, 248, 225, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 106, 153, 262,
	201, 131, 250, 0, 0, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 100,
	107, 113, 119, 123, 127, 130, 135, 138, 141, 143,
	144, 145, 148, 158, 161, 162, 163, 164, 174, 175,
	176, 178, 181, 182, 183, 184, 185, 188, 190, 191,
	192, 193, 194, 195, 202, 205, 211, 212, 213, 214,
	215, 216, 217, 219, 220, 221, 222, 228, 231, 237,
	238, 247, 254, 258, 180, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 0, 0, 0, 152, 0,
	0, 0, 154, 0, 0, 226, 168, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 95, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 134, 0,
	0, 0, 255, 0, 0, 0, 199, 0, 230, 137,
	151, 112, 98, 108, 0, 136, 177, 206, 210, 0,
	0, 0, 120, 0, 208, 187, 246, 0, 189, 207,
	155, 236, 200, 245, 256, 257, 233, 253, 261, 223,
	101, 232, 244, 117, 218, 103, 242, 229, 166, 146,
	147, 102, 0, 204, 125, 132, 122, 179, 239, 240,
	121, 264, 109, 252, 105, 110, 251, 173, 235, 243,
	167, 160, 104, 241, 165, 159, 150, 129, 139, 197,
	157, 198, 140, 170, 169, 171, 0, 0, 0, 227,
	249, 265, 114, 0, 234, 259, 260, 0, 0, 115,
	133, 128, 196, 172, 111, 142, 224, 149, 156, 203,
	263, 186, 209, 118, 248, 225, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 106, 153, 262, 201,
	131, 250, 0, 0, 124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 100, 107,
	113, 119, 123, 127, 130, 135, 138, 141, 143, 144,
	145, 148, 158, 161, 162, 163, 164, 174, 175, 176,
	178, 181, 182, 183, 184, 185, 188, 190, 191, 192,
	193, 194, 195, 202, 205, 211, 212, 213, 214, 215,
	216, 217, 219, 220, 221, 222, 228, 231, 237, 238,
	247, 254, 258, 180, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 0, 0, 0, 152, 0, 0,
	0, 154, 0, 0, 226, 168, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 320, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 134, 0, 0,
	0, 255, 0, 0, 0, 199, 0, 230, 137, 151,
	112, 98, 108, 0, 136, 177, 206, 210, 0, 0,
	0, 120, 0, 208, 187, 246, 0, 189, 207, 155,
	236, 200, 245, 256, 257, 233, 253, 261, 223, 101,
	232, 244, 117, 218, 103, 242, 229, 166, 146, 147,
	102, 0, 204, 125, 132, 122, 179, 239, 240, 121,
	264, 109, 252, 105, 110, 251, 173, 235, 243, 167,
	160, 104, 241, 165, 159, 150, 129, 139, 197, 157,
	198, 140, 170, 169, 171, 0, 0, 0, 227, 249,
	265, 114, 0, 234, 259, 260, 0, 0, 115, 133,
	128, 196, 172, 111, 142, 224, 149, 156, 203, 263,
	186, 209, 118, 248, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 106, 153, 262, 201, 131,
	250, 0, 0, 124, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 100, 107, 113,
	119, 123, 127, 130, 135, 138, 141, 143, 144, 145,
	148, 158, 161, 162, 163, 164, 174, 175, 176, 178,
	181, 182, 183, 184, 185, 188, 190, 191, 192, 193,
	194, 195, 202, 205, 211, 212, 213, 214, 215, 216,
	217, 219, 220, 221, 222, 228, 231, 237, 238, 247,
	254, 258,
}
var yyPact = [...]int{

	2263, -1000, -261, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 950, 991, -1000, -1000, -1000, -1000, -1000, -1000,
	268, 81, 32, 111, -15, 14718, 110, 132, 15376, -1000,
	8, -1000, -1000, 15376, -1000, -1000, -1000, -63, -74, -1000,
	729, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 942, 948,
	745, 937, 851, -1000, 7766, 82, 82, 14389, 6779, -1000,
	-1000, 245, 15376, 103, 15376, -146, 77, 77, 77, -1000,
	-1000, -1000, 105, 15376, 177, -1000, 15376, 72, 602, 72,
	72, 72, 15376, -1000, 163, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 15376, 591, 898, 3701,
	46, 3701, -1000, 3701, 3701, -1000, 3701, 15, 3701, -55,
	958, 18, -19, -1000, 3701, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 471, 904,
	9094, 9094, 950, -1000, 729, -1000, -1000, -1000, 876, -1000,
	-1000, 305, 974, -1000, 10739, 153, -1000, 9094, 403, 697,
	-1000, -1000, 697, -1000, -1000, 144, -1000, -1000, 10081, 10081,
	10081, 10081, 10081, 10081, 10081, 10081, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	697, -1000, 8765, 697, 697, 697, 697, 697, 697, 697,
	697, 9094, 697, 697, 697, 697, 697, 697, 697, 697,
	697, 697, 697, 697, 697, 697, 697, 14053, 13066, 15376,
	661, 655, -1000, -1000, 152, 692, 6437, -90, -1000, -1000,
	-1000, 262, 12737, -1000, -1000, -1000, 895, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 601, 15376, -1000,
	1752, -1000, 575, 931, 94, 567, 275, 565, 15376, 15376,
	3701, 23, 59, 53, 15376, 694, 92, 15376, 913, 755,
	15376, 562, 552, -1000, 6095, -1000, 3701, 3701, -1000, -1000,
	-1000, 3701, 3701, 3701, 15376, 3701, 3701, -1000, -1000, -1000,
	-1000, 3701, 3701, -1000, 969, 297, -1000, -1000, -1000, -1000,
	9094, 214, -1000, 751, -1000, -1000, -1000, -1000, -1000, -1000,
	986, 206, 521, 141, 693, -1000, 447, 942, 471, 851,
	12408, 767, -1000, -1000, -1000, 15376, -1000, 9094, 9094, 406,
	-1000, 13724, -1000, -1000, 4727, 235, 10081, 392, 263, 10081,
	10081, 10081, 10081, 10081, 10081, 10081, 10081, 10081, 10081, 10081,
	10081, 10081, 10081, 10081, 381, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 532, -1000, 729, 628, 628, 176, 176,
	176, 176, 176, 176, 176, 10410, 930, 471, 599, 450,
	8765, 7766, 7766, 9094, 9094, 8424, 8095, 7766, 930, 267,
	450, 15705, -1000, -1000, 9752, -1000, -1000, -1000, -1000, -1000,
	471, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 15047, 15047,
	7766, 7766, 7766, 7766, 36, 15376, -1000, 687, 896, -1000,
	-1000, -1000, 926, 11750, 12079, 36, 654, 13066, 15376, -1000,
	-1000, 13066, 15376, 4385, 5753, 692, -90, 677, -1000, -110,
	-122, 7108, 165, -1000, -1000, -1000, -1000, 3359, 285, 618,
	-1000, -57, -1000, -1000, -1000, 704, -1000, 704, 704, 704,
	704, -23, -23, -23, -23, -1000, -1000, -1000, -1000, -1000,
	737, 736, -1000, 704, 704, 704, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 732, 732, 732, 711, 711, 742,
	729, 15376, 3701, 908, 3701, -1000, 79, -1000, 15376, 15376,
	15376, 15376, 15376, 119, 15376, 15376, 691, -1000, 15376, 686,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 15376, 308, 15376, 15376,
	450, -1000, 414, 15376, -1000, 824, 9094, 9094, 5411, 9094,
	-1000, -1000, -1000, 904, -1000, 930, 943, -1000, 870, 852,
	7766, -1000, -1000, 235, 302, -1000, -1000, 349, -1000, -1000,
	-1000, -1000, 137, 697, -1000, 2074, -1000, -1000, -1000, -1000,
	392, 10081, 10081, 10081, 332, 2074, 2020, 1097, 772, 176,
	281, 281, 196, 196, 196, 196, 196, 990, 990, -1000,
	-1000, -1000, 471, -1000, -1000, -1000, 7766, -1000, 9094, -1000,
	471, 597, -1000, 597, 459, 372, 252, 967, 597, 250,
	961, 597, 597, 7766, 289, -1000, 9094, 471, -1000, 134,
	-1000, 470, 685, 683, 597, 471, 682, 597, 597, 671,
	697, -1000, 15705, 13066, 13066, 13066, 13066, 13066, -1000, 789,
	788, -1000, 838, 836, 845, 15376, -1000, 595, 11750, 143,
	697, -1000, 13395, -1000, -1000, 956, 13066, 664, -1000, 664,
	-1000, 133, -1000, -1000, 677, -90, -97, -1000, -1000, -1000,
	-1000, 450, -1000, 454, 676, 3017, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 723, 518, -1000, 887, 189, 184, 500,
	886, -1000, -1000, -1000, 211, -59, -1000, -1000, 335, -23,
	-23, -1000, -1000, 165, 893, 165, 165, 165, 413, 413,
	-1000, -1000, -1000, -1000, 334, -1000, -1000, -1000, 330, -1000,
	749, 15047, -1000, 925, -1000, -1000, -1000, -1000, 273, 273,
	199, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 35, 739, -1000, -1000, -1000, -1000, 1, 22,
	84, -1000, 3701, 15376, 297, -1000, 409, 9094, -1000, -1000,
	-1000, -1000, 805, 450, 450, 130, -1000, -1000, 15376, -1000,
	-1000, -1000, -1000, 673, -1000, -1000, -1000, 4043, 7766, -1000,
	332, 2074, 721, -1000, 10081, 10081, -1000, 471, 450, -1000,
	7766, -1000, -1000, 69, 381, 69, 10081, 10081, -1000, 10081,
	10081, -1000, -158, 656, 251, -1000, 9094, 436, -1000, 5411,
	-1000, 10081, 10081, -1000, -1000, -1000, -1000, 748, 15705, 697,
	-1000, 11409, 15047, 689, -1000, 259, 896, 716, 746, 539,
	-1000, -1000, -1000, -1000, 770, -1000, 769, -1000, -1000, -1000,
	-1000, -1000, 102, 100, 99, 15047, -1000, 950, 9094, 664,
	-1000, -1000, 191, -1000, -1000, -117, -132, -1000, -1000, -1000,
	3359, -1000, 3359, 15047, 52, -1000, 500, 500, -1000, -1000,
	-1000, 712, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 300,
	10081, 985, -1000, 885, -1000, 878, 378, -1000, -1000, 606,
	165, 165, -1000, 223, -1000, -1000, -1000, 574, -1000, 571,
	674, 558, 15376, -1000, 729, -1000, 427, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 488,
	-1000, 478, 15376, -1000, -1000, -1000, -1000, -1000, 15047, -165,
	467, 15047, 15047, 15047, 15376, -1000, -1000, 308, -1000, 450,
	-1000, 5069, -1000, 956, 13066, -1000, -1000, 471, -1000, 10081,
	2074, 2074, -1000, -1000, 471, 704, 704, -1000, 704, 711,
	-1000, 704, -1, 704, -3, 471, 471, 1922, 1883, 1642,
	540, 697, -153, -1000, 450, 9094, -1000, 1447, 1136, -1000,
	905, 617, 637, -1000, -1000, 7437, 471, 556, 125, 549,
	-1000, 950, 15705, 9094, -1000, -1000, 9094, 706, -1000, 9094,
	-1000, -1000, -1000, 697, 697, 697, 549, 942, 450, -1000,
	-1000, -1000, -1000, 3017, -1000, 547, -1000, 704, -1000, -1000,
	-1000, 15047, -1000, 2074, -95, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -23, 361, -23, 327, -1000, 313, 3701,
	-1000, 464, -1000, -1000, -1000, -1000, 186, -1000, -1000, 909,
	-1000, 5069, -1000, -1000, 701, 740, -1000, -1000, -1000, 954,
	668, -1000, 2074, -1000, -1000, 107, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 10081, 10081, 10081, 10081, 10081, 471,
	347, 450, 10081, 10081, 872, -1000, 697, -1000, -1000, 672,
	15047, 15047, -1000, 15047, 942, -1000, 450, 450, 15047, 450,
	15047, 15047, 15047, 11068, -1000, 155, 15047, -1000, 543, -1000,
	-1000, 165, -1000, 165, 550, 544, -1000, 522, -1000, 435,
	-1000, -1000, 697, 667, -1000, 254, 15047, 15376, 952, 945,
	-1000, -1000, 470, 470, 470, 470, 30, -1000, -1000, 470,
	470, 980, -1000, 697, -1000, 729, 123, -1000, -1000, -1000,
	541, 504, 504, 504, 143, 155, -1000, 405, 248, 340,
	-1000, 43, 15047, -1000, -1000, -1000, -1000, -1000, -1000, 34,
	5069, 3359, 494, -1000, -1000, 9094, 9094, -1000, -1000, -1000,
	-1000, 471, 50, -168, -1000, -1000, 15705, 637, 471, 15047,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 312, -1000, -1000,
	15376, -1000, -1000, 486, -1000, 15047, -1000, -1000, 739, 450,
	627, -1000, 795, -163, -175, 626, -1000, -1000, -1000, 699,
	-1000, 34, 847, -165, -1000, 793, -1000, 15047, -1000, 31,
	-1000, -166, 461, 27, -171, 744, 697, -176, 675, -1000,
	973, 9423, -1000, -1000, 975, 160, 160, 470, 471, -1000,
	-1000, -1000, 56, 373, -1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1267, 34, 409, 1265, 1264, 1263, 1262, 1259, 1255,
	1253, 1252, 1250, 1249, 1247, 1246, 1243, 1242, 1229, 1227,
	1226, 1223, 1220, 1217, 1216, 1211, 91, 1210, 1207, 1206,
	72, 1189, 77, 1188, 1187, 46, 334, 53, 50, 10,
	1186, 23, 62, 59, 1184, 40, 1180, 1176, 80, 1175,
	1174, 1172, 56, 1171, 1170, 1612, 1169, 74, 1168, 18,
	33, 1167, 1162, 1161, 1160, 76, 744, 1159, 1158, 16,
	1157, 1155, 90, 1154, 57, 6, 14, 51, 29, 1153,
	737, 12, 1148, 60, 1147, 1146, 1145, 1142, 24, 1140,
	63, 1138, 28, 61, 1133, 9, 78, 38, 26, 7,
	81, 64, 1131, 25, 71, 58, 1130, 1129, 377, 1128,
	1127, 52, 1125, 1124, 27, 1123, 375, 335, 1115, 1114,
	1113, 1110, 1109, 1105, 49, 1104, 20, 1315, 42, 0,
	347, 193, 79, 1101, 1100, 1099, 1540, 45, 55, 22,
	43, 1096, 1086, 41, 1085, 1081, 1072, 1071, 1070, 1064,
	1063, 1062, 338, 1061, 1056, 1055, 30, 19, 1054, 1053,
	99, 21, 1051, 1050, 1047, 48, 17, 1044, 1043, 54,
	31, 1042, 1041, 1032, 1029, 1025, 32, 13, 1024, 15,
	1021, 11, 1020, 37, 1019, 3, 1016, 8, 1013, 2,
	1008, 5, 47, 1, 1000, 4, 999, 998, 483, 629,
	82, 997, 83,
}
var yyR1 = [...]int{

	0, 196, 197, 197, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 6, 3, 4,
	4, 5, 5, 7, 7, 29, 29, 8, 9, 9,
	9, 9, 200, 200, 50, 50, 48, 48, 49, 49,
	96, 96, 10, 10, 10, 10, 101, 101, 105, 105,
	105, 106, 106, 106, 106, 141, 141, 11, 11, 11,
	11, 11, 11, 11, 191, 191, 190, 189, 189, 188,
	188, 187, 17, 172, 174, 174, 173, 173, 173, 173,
	166, 145, 145, 145, 145, 145, 145, 145, 144, 144,
	144, 144, 148, 148, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 147, 147, 147, 147, 147, 149, 149,
	149, 149, 149, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 151, 151,
	151, 151, 151, 151, 151, 151, 165, 165, 152, 152,
	160, 160, 161, 161, 161, 158, 158, 159, 159, 162,
	162, 154, 155, 163, 156, 156, 156, 157, 157, 157,
	164, 164, 164, 164, 153, 167, 167, 182, 182, 181,
	181, 181, 171, 171, 178, 178, 178, 178, 178, 169,
	169, 170, 170, 180, 180, 179, 168, 168, 183, 183,
	183, 183, 194, 195, 193, 193, 193, 193, 193, 175,
	175, 175, 176, 176, 176, 177, 177, 177, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 124, 124, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 186,
	184, 184, 185, 185, 13, 18, 18, 14, 14, 14,
	14, 14, 15, 15, 19, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 112, 112, 110, 110, 113, 113, 111,
	111, 111, 114, 114, 114, 115, 115, 142, 142, 142,
	21, 21, 23, 23, 24, 25, 125, 125, 22, 22,
	22, 22, 22, 22, 22, 16, 201, 26, 27, 27,
	28, 28, 28, 32, 32, 32, 30, 30, 30, 31,
	31, 37, 37, 36, 36, 38, 38, 38, 38, 133,
	133, 133, 132, 132, 40, 40, 41, 41, 42, 42,
	43, 43, 43, 43, 58, 58, 95, 95, 97, 97,
	44, 44, 44, 44, 45, 45, 46, 46, 47, 47,
	123, 123, 139, 139, 139, 138, 138, 51, 51, 51,
	53, 52, 52, 52, 52, 54, 54, 56, 56, 55,
	55, 57, 59, 59, 59, 59, 60, 60, 39, 39,
	39, 39, 39, 39, 39, 109, 109, 62, 62, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 73,
	73, 73, 73, 73, 73, 63, 63, 63, 63, 63,
	63, 63, 35, 35, 74, 74, 74, 80, 75, 75,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 70, 70, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 202, 202, 72, 71, 71, 71, 71,
	71, 71, 33, 33, 33, 33, 33, 140, 140, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 84, 84, 34, 34, 82, 82, 83, 85,
	85, 81, 81, 81, 65, 65, 65, 65, 65, 65,
	65, 65, 67, 67, 67, 86, 86, 87, 87, 88,
	88, 89, 89, 90, 91, 91, 91, 92, 92, 92,
	92, 93, 93, 93, 64, 64, 64, 64, 64, 64,
	94, 94, 94, 94, 98, 98, 76, 76, 78, 78,
	77, 79, 99, 99, 103, 100, 100, 104, 104, 104,
	104, 102, 102, 102, 135, 135, 135, 107, 107, 116,
	116, 117, 117, 108, 108, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 122, 122, 121, 121, 121,
	119, 119, 120, 120, 120, 120, 134, 134, 130, 130,
	131, 131, 136, 136, 137, 137, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 198, 199, 126, 127, 127, 127,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 4, 6, 7, 5, 10, 1,
	3, 1, 3, 7, 8, 1, 1, 9, 8, 7,
	6, 6, 1, 1, 1, 3, 1, 3, 1, 3,
	0, 4, 3, 4, 5, 4, 1, 3, 3, 2,
	2, 2, 2, 2, 1, 1, 1, 2, 2, 8,
	5, 7, 5, 5, 0, 2, 1, 0, 2, 1,
	3, 3, 4, 4, 2, 4, 1, 3, 3, 3,
	3, 0, 2, 2, 2, 2, 2, 2, 3, 1,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 2,
	2, 2, 1, 4, 4, 2, 2, 3, 3, 3,
	3, 1, 1, 1, 1, 1, 6, 6, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 3,
	0, 5, 0, 3, 5, 0, 1, 0, 1, 1,
	2, 2, 3, 1, 0, 3, 3, 0, 2, 2,
	2, 1, 2, 1, 2, 5, 4, 1, 2, 2,
	3, 2, 0, 1, 2, 3, 3, 2, 2, 1,
	1, 0, 1, 1, 3, 2, 3, 1, 10, 11,
	11, 12, 3, 3, 1, 1, 2, 2, 2, 0,
	1, 3, 1, 2, 3, 1, 1, 1, 6, 10,
	8, 7, 7, 7, 9, 7, 7, 4, 5, 7,
	5, 5, 5, 12, 7, 5, 9, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 7,
	1, 3, 8, 8, 3, 3, 5, 4, 6, 4,
	4, 4, 3, 2, 3, 4, 4, 3, 4, 4,
	4, 4, 4, 4, 3, 2, 3, 3, 2, 3,
	4, 3, 7, 5, 4, 2, 4, 4, 3, 3,
	5, 2, 3, 1, 1, 0, 1, 1, 1, 0,
	2, 2, 0, 2, 2, 0, 2, 0, 1, 1,
	2, 1, 1, 2, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 3, 3, 2, 0, 2, 0, 2,
	1, 2, 2, 0, 1, 1, 0, 1, 1, 0,
	1, 0, 1, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 1, 0, 2, 1, 3, 1, 1,
	1, 3, 1, 3, 3, 7, 1, 3, 1, 3,
	4, 4, 4, 3, 2, 4, 0, 1, 0, 2,
	0, 1, 0, 1, 2, 1, 1, 1, 2, 2,
	1, 2, 3, 2, 3, 2, 2, 2, 1, 1,
	3, 3, 0, 5, 5, 5, 0, 2, 1, 3,
	3, 2, 3, 1, 2, 0, 3, 1, 1, 3,
	3, 4, 4, 5, 3, 4, 5, 6, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 0, 2, 1, 1, 1, 3, 1, 3,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 2, 2, 2, 2, 2, 3, 1, 1,
	1, 1, 5, 6, 4, 4, 6, 6, 6, 8,
	8, 8, 8, 9, 7, 5, 4, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 8, 8, 0, 2, 3, 4, 4, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 2, 1, 2, 2,
	1, 2, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 0, 3, 0, 2, 0,
	3, 1, 3, 2, 0, 1, 1, 0, 2, 4,
	4, 0, 2, 4, 2, 1, 3, 5, 4, 6,
	1, 3, 3, 5, 0, 5, 1, 3, 1, 2,
	3, 1, 1, 3, 3, 1, 3, 3, 3, 3,
	3, 1, 2, 1, 1, 1, 1, 1, 1, 0,
	2, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 0, 1, 1, 1, 0, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -196, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -19, -20, -21, -23, -24, -25,
	-22, -16, -3, -4, 6, 7, -29, 9, 10, 29,
	-17, 116, 117, 119, 118, 150, 120, 143, 51, 164,
	165, 167, 168, -125, 145, 148, 149, 30, 31, 122,
	-198, 8, 249, 144, 25, 55, -197, 347, -88, 15,
	-28, 5, -26, -201, -26, -26, -26, -26, -26, -172,
	-174, 55, 91, -120, 126, 73, 241, 123, 124, 33,
	133, 132, -108, 126, 220, 128, 124, 124, 125, 126,
	241, 123, 124, -55, -136, 58, -129, 259, 136, 291,
	292, 164, 175, 169, 196, 188, 260, 293, 137, 186,
	189, 228, 135, 294, 216, 223, 67, 167, 237, 295,
	146, 184, 180, 296, 268, 178, 27, 297, 225, 201,
	298, 264, 179, 224, 122, 299, 139, 133, 300, 202,
	206, 301, 229, 302, 303, 304, 173, 174, 305, 231,
	200, 134, 32, 261, 36, 154, 232, 204, 306, 199,
	195, 307, 308, 309, 310, 198, 172, 194, 40, 208,
	207, 209, 227, 191, 311, 312, 313, 140, 314, 181,
	18, 315, 316, 317, 318, 319, 235, 149, 320, 152,
	321, 322, 323, 324, 325, 326, 226, 203, 205, 130,
	156, 263, 327, 233, 177, 328, 141, 153, 148, 236,
	142, 329, 330, 331, 332, 333, 334, 335, 168, 336,
	337, 338, 339, 163, 230, 239, 39, 213, 340, 171,
	132, 341, 165, 160, 218, 192, 155, 342, 343, 182,
	183, 197, 170, 193, 166, 157, 150, 344, 238, 214,
	265, 190, 187, 161, 345, 126, 158, 159, 346, 219,
	220, 162, 262, 234, 185, 215, 124, 109, 189, 228,
	116, 217, 225, 125, 32, 226, 156, -142, 124, -110,
	216, 219, 220, 162, 58, 230, 229, 221, -136, 166,
	-55, -126, -126, -126, -126, 218, 218, -126, -2, -92,
	17, 16, -5, -3, -198, 6, 20, 21, -32, 41,
	42, -27, -38, 100, -39, -136, -61, 75, -66, 28,
	58, -129, 23, -65, -62, -81, -79, -80, 109, 110,
	111, 98, 99, 106, 76, 112, -70, -68, -69, -71,
	60, 59, 68, 61, 62, 63, 64, 69, 70, 71,
	-130, -77, -198, 45, 46, 250, 251, 252, 253, 258,
	254, 78, 35, 240, 248, 247, 246, 244, 245, 242,
	243, 256, 257, 129, 241, 104, 249, -108, -108, 11,
	-48, -49, -55, -57, -136, -100, -141, 166, -104, 230,
	229, -131, -102, -130, -128, 228, 189, 227, 58, -129,
	121, 266, 74, 22, 24, 211, 77, 109, 16, 78,
	108, 250, 116, 49, 267, 242, 243, 240, 252, 253,
	241, 217, 28, 10, 269, 25, 144, 21, 102, 118,
	81, 82, 147, 23, 145, 71, 272, 19, 52, 11,
	13, 273, 274, 14, 129, 128, 93, 125, 47, 8,
	112, 26, 90, 43, 275, 34, 276, 277, 278, 279,
	45, 91, 17, 244, 245, 30, 280, 258, 151, 104,
	50, 37, 75, 281, 282, 69, 283, 72, 53, 73,
	15, 48, 284, 285, 286, 287, 92, 119, 249, 46,
	288, 123, 6, 255, 29, 143, 44, 289, 124, 80,
	256, 257, 127, 70, 5, 33, 31, 9, 51, 54,
	246, 247, 248, 35, 79, 12, 290, -173, 91, -166,
	58, -55, 125, -55, 249, -117, 129, -117, -117, 124,
	-55, 116, 118, 121, 53, -18, -55, -116, 129, 58,
	-116, -116, -116, -55, 113, -55, 58, 29, -127, -198,
	-131, 241, 58, 156, 124, 157, 126, -127, -127, -127,
	-127, 160, 161, -127, -113, -112, 223, 224, 218, 222,
	12, 161, 218, 159, -127, -126, -126, -199, 57, -93,
	19, 30, -39, -136, -89, -90, -39, -88, -2, -26,
	37, -30, 20, 21, 66, 11, -133, 74, 73, 90,
	-132, 22, -130, 60, 113, -39, -63, 93, 75, 91,
	92, 77, 95, 94, 105, 98, 99, 100, 101, 102,
	103, 104, 96, 97, 108, 83, 84, 85, 86, 87,
	88, 89, -109, -198, -80, -198, 114, 115, -66, -66,
	-66, -66, -66, -66, -66, -66, -198, -2, -75, -39,
	-198, -198, -198, -198, -198, -198, -198, -198, -198, -84,
	-39, -198, -202, -72, -198, -202, -72, -202, -72, -202,
	-198, -202, -72, -202, -72, -202, -202, -72, -198, -198,
	-198, -198, -198, -198, -56, 26, -55, -41, -42, -43,
	-44, -58, -80, -198, -55, -55, -48, -200, 56, 11,
	54, -200, 56, 113, 56, -100, 166, -101, -105, 231,
	233, 83, -135, -130, 60, 28, 29, 57, 56, -55,
	-144, -148, -150, -149, -151, -146, -147, 186, 187, 109,
	190, 192, 193, 194, 195, 196, 197, 198, 199, 200,
	201, 29, 146, 182, 183, 184, 185, 202, 203, 204,
	205, 206, 207, 208, 209, 169, 188, 260, 170, 171,
	172, 173, 174, 175, 177, 178, 179, 180, 181, 58,
	22, 126, 58, 75, 58, -55, -55, -127, 158, 158,
	124, 124, 163, -55, 56, 127, -48, 23, 53, -50,
	-55, 58, 58, -137, -136, -128, -127, -127, -127, -127,
	-127, -55, -127, -127, -127, -127, 11, -111, 11, 93,
	-39, -115, 91, 53, 9, 93, 56, 18, 113, 56,
	-91, 24, 25, -92, -199, -32, -67, -130, 61, 64,
	-31, 44, -55, -39, -39, -73, 69, 75, 70, 71,
	-132, 100, -137, -131, -128, -66, -74, -77, -80, 65,
	93, 91, 92, 77, -66, -66, -66, -66, -66, -66,
	-66, -66, -66, -66, -66, -66, -66, -66, -66, -140,
	58, 60, 58, -65, -65, -130, -30, -199, 56, -199,
	-2, -36, -38, -36, -39, -39, -81, 60, -36, -81,
	60, -36, -36, -30, -82, -83, 79, -81, -130, -136,
	-199, -66, -130, -130, -36, -37, -36, -36, -36, -96,
	152, -55, 29, 56, -51, -53, -52, -54, 43, 47,
	49, 44, 45, 46, 50, -123, 22, -41, -198, -139,
	152, -138, 22, -136, 60, -96, 54, -41, -55, -41,
	-57, -136, 100, -104, -101, 56, 232, 234, 235, 53,
	72, -39, -157, 108, -175, -176, -177, -131, 60, 61,
	-166, -167, -168, -178, 138, -183, 130, 132, 33, -169,
	139, 125, 34, 57, -145, -158, 214, -152, 55, -152,
	-152, -152, -152, -156, 189, -156, -156, -156, 55, 55,
	-152, -152, -152, -160, 55, -160, -160, -161, 55, -161,
	-134, 54, -2, -55, -127, 23, -127, -118, 121, 118,
	119, -186, 117, 211, 189, 67, 28, 15, 250, 152,
	265, 58, 153, -55, -55, -55, -55, -55, 121, 118,
	-55, -55, -55, 56, -55, -114, 91, 12, -136, -136,
	60, -55, 39, -39, -39, -137, -90, -93, -107, 19,
	11, 35, 35, -36, 69, 70, 71, 113, -198, -74,
	-66, -66, -66, -35, 147, 74, -199, -37, -39, -199,
	56, -199, -199, 56, 54, 22, 11, 11, -199, 11,
	11, -199, -199, -36, -85, -83, 81, -39, -199, 113,
	-199, 56, 56, -199, -199, -199, -199, -64, 29, 35,
	-2, -198, -198, -99, -103, -81, -42, -43, -43, -42,
	-43, 43, 43, 43, 48, 43, 48, 43, -52, -136,
	-199, -59, 51, 128, 52, -198, -138, -60, 12, -41,
	-60, -60, 113, -105, -106, 236, 233, 239, 58, 60,
	56, -177, 83, 55, 58, 34, -169, -169, -170, 58,
	-170, 34, -162, -154, -155, -163, -164, -153, 69, 75,
	28, 53, 211, 130, 34, 33, 67, -159, 215, 61,
	-156, -156, -157, 29, -157, -157, -157, -165, 60, -165,
	61, 61, 53, -130, 22, -126, -124, -192, 131, 135,
	138, 139, 133, 125, 34, 130, 132, 152, 33, -124,
	-192, 131, -121, -119, 127, 22, 125, 34, 152, -191,
	54, 158, 211, 158, 127, -127, -55, -111, 60, -39,
	40, 113, -55, -40, 11, 100, -131, -37, -35, 74,
	-66, -66, -199, -38, -143, 109, 186, 146, 184, 180,
	200, 191, 213, 182, 214, -140, -143, -66, -66, -66,
	-66, 259, -88, 82, -39, 80, -131, -66, -66, -98,
	53, -99, -76, -78, -77, -198, -2, -94, -130, -97,
	-130, -60, 56, 83, -46, -45, 53, 54, -47, 53,
	-45, 43, 43, 125, 125, 125, -97, -88, -39, -60,
	233, 237, 238, -176, -177, -180, -179, -130, -183, -170,
	-170, 55, 69, -66, 9, 34, 34, 60, 57, -157,
	-157, 58, 109, 57, 56, 57, 56, 57, 56, -55,
	-2, 55, -166, -126, 58, -126, 58, -55, -126, -130,
	-189, 262, -190, 58, -130, -130, -130, -55, -114, -60,
	-41, -199, -66, -199, -152, -152, -152, -161, -152, 174,
	-152, 174, -199, -199, 19, 19, 19, 19, -198, -34,
	255, -39, 56, 56, 27, -98, 56, -199, -199, -199,
	56, 113, -199, 56, -88, -103, -39, -39, 55, -39,
	-198, -198, -198, -199, -92, 57, 56, -152, -95, -130,
	-69, -156, 60, -156, 61, 61, -127, -166, -126, -122,
	127, 22, 26, -188, -187, -131, 55, 54, -86, 13,
	-156, 58, -66, -66, -66, -66, -66, -199, 60, -66,
	-66, 34, -78, 35, -2, -198, -130, -130, -130, -92,
	-95, -95, -95, -95, -139, -182, -181, 54, 134, 67,
	-179, 57, 56, -157, -157, 57, 57, 57, 58, -198,
	56, 83, -95, -55, -87, 14, 16, -199, -199, -199,
	-199, -33, 93, 262, -199, -199, 9, -76, -2, 113,
	57, -199, -199, -199, -59, -181, 58, -171, 83, 60,
	141, -130, -126, -184, -185, 152, -187, -177, 57, -39,
	-75, -199, 260, 50, 263, -99, -199, -130, 61, -55,
	-199, 56, -130, -191, 40, 261, 264, 55, -185, 35,
	-189, 40, -95, 154, 262, 57, 155, 263, -194, -195,
	53, -198, 264, -195, 53, 10, 9, -66, 151, -193,
	142, 137, 140, 29, -193, -199, -199, 136, 28, 69,
}
var yyDef = [...]int{

	23, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 569, 0, 326, 326, 326, 326, 326, 326,
	0, 642, 623, 0, 0, 0, 0, -2, 311, 312,
	0, 314, 315, 944, 944, 944, 944, 0, 0, 944,
	0, 35, 36, 316, 317, 942, 1, 3, 577, 0,
	0, 330, 333, 328, 0, 623, 623, 0, 0, 67,
	68, 0, 0, 0, 0, 0, 621, 621, 621, 643,
	644, 645, 0, 0, 0, 624, 0, 619, 0, 619,
	619, 619, 0, 263, 399, 652, 653, 773, 774, 775,
	776, 777, 778, 779, 780, 781, 782, 783, 784, 785,
	786, 787, 788, 789, 790, 791, 792, 793, 794, 795,
	796, 797, 798, 799, 800, 801, 802, 803, 804, 805,
	806, 807, 808, 809, 810, 811, 812, 813, 814, 815,
	816, 817, 818, 819, 820, 821, 822, 823, 824, 825,
	826, 827, 828, 829, 830, 831, 832, 833, 834, 835,
	836, 837, 838, 839, 840, 841, 842, 843, 844, 845,
	846, 847, 848, 849, 850, 851, 852, 853, 854, 855,
	856, 857, 858, 859, 860, 861, 862, 863, 864, 865,
	866, 867, 868, 869, 870, 871, 872, 873, 874, 875,
	876, 877, 878, 879, 880, 881, 882, 883, 884, 885,
	886, 887, 888, 889, 890, 891, 892, 893, 894, 895,
	896, 897, 898, 899, 900, 901, 902, 903, 904, 905,
	906, 907, 908, 909, 910, 911, 912, 913, 914, 915,
	916, 917, 918, 919, 920, 921, 922, 923, 924, 925,
	926, 927, 928, 929, 930, 931, 932, 933, 934, 935,
	936, 937, 938, 939, 940, 941, 0, 0, 0, 945,
	0, 945, 275, 945, 945, 278, 945, 0, 945, 0,
	285, 0, 0, 291, 945, 308, 309, 296, 310, 313,
	318, 319, 320, 321, 322, 944, 944, 325, 29, 581,
	0, 0, 569, 31, 0, 326, 331, 332, 336, 334,
	335, 327, 0, 345, 349, 0, 408, 0, 413, 415,
	-2, -2, 0, 450, 451, 452, 453, 454, 0, 0,
	0, 0, 0, 0, 0, 0, 478, 479, 480, 481,
	554, 555, 556, 557, 558, 559, 560, 561, 417, 418,
	551, 601, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 542, 0, 513, 513, 513, 513, 513, 513, 513,
	513, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 46, 48, 399, 52, 0, 920, 605, -2,
	-2, 0, 0, 650, 651, -2, 786, -2, 648, 649,
	656, 657, 658, 659, 660, 661, 662, 663, 664, 665,
	666, 667, 668, 669, 670, 671, 672, 673, 674, 675,
	676, 677, 678, 679, 680, 681, 682, 683, 684, 685,
	686, 687, 688, 689, 690, 691, 692, 693, 694, 695,
	696, 697, 698, 699, 700, 701, 702, 703, 704, 705,
	706, 707, 708, 709, 710, 711, 712, 713, 714, 715,
	716, 717, 718, 719, 720, 721, 722, 723, 724, 725,
	726, 727, 728, 729, 730, 731, 732, 733, 734, 735,
	736, 737, 738, 739, 740, 741, 742, 743, 744, 745,
	746, 747, 748, 749, 750, 751, 752, 753, 754, 755,
	756, 757, 758, 759, 760, 761, 762, 763, 764, 765,
	766, 767, 768, 769, 770, 771, 772, 0, 0, 86,
	0, 84, 0, 0, 0, 0, 0, 0, 0, 0,
	945, 0, 0, 0, 0, 254, 0, 0, 0, 0,
	0, 0, 0, 262, 0, 264, 945, 945, 267, 946,
	947, 945, 945, 945, 0, 945, 945, 274, 276, 277,
	279, 945, 945, 281, 0, 299, 297, 298, 293, 294,
	0, 305, 288, 289, 292, 323, 324, 30, 943, 24,
	0, 0, 578, 0, 570, 571, 574, 577, 29, 333,
	0, 339, 337, 338, 329, 0, 346, 0, 0, 0,
	350, 0, 352, 353, 0, 411, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 435, 436, 437, 438, 439,
	440, 441, 414, 0, 428, 0, 0, 0, 470, 471,
	472, 473, 474, 475, 476, 0, 336, 29, 0, 448,
	0, 0, 0, 0, 0, 0, 0, 0, 336, 0,
	543, 0, 497, 505, 0, 498, 506, 499, 507, 500,
	0, 501, 508, 502, 509, 503, 504, 510, 0, 0,
	0, 341, 0, 0, 50, 0, 398, 0, 356, 358,
	359, 360, -2, 0, 382, -2, 0, 0, 0, 42,
	43, 0, 0, 0, 0, 53, 920, 55, 56, 0,
	0, 0, 167, 614, 615, 616, 612, 209, 0, 0,
	91, 155, 99, 100, 101, 148, 103, 148, 148, 148,
	148, 164, 164, 164, 164, 131, 132, 133, 134, 135,
	0, 0, 118, 148, 148, 148, 122, 138, 139, 140,
	141, 142, 143, 144, 145, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 150, 150, 150, 152, 152, 646,
	0, 0, 945, 0, 945, 82, 0, 227, 0, 0,
	0, 0, 0, 0, 0, 0, 257, 620, 0, 259,
	44, 260, 261, 400, 654, 655, 265, 266, 268, 269,
	270, 271, 272, 273, 280, 284, 0, 302, 0, 0,
	286, 287, 0, 0, 582, 0, 0, 0, 0, 0,
	573, 575, 576, 581, 32, 336, 0, 562, 0, 0,
	0, 340, 27, 409, 410, 412, 429, 0, 431, 433,
	351, 347, 0, 552, -2, 419, 420, 444, 445, 446,
	0, 0, 0, 0, 442, 424, 0, 455, 456, 457,
	458, 459, 460, 461, 462, 463, 464, 465, 466, 469,
	527, 528, 0, 467, 468, 477, 341, 447, 0, 600,
	29, 0, 343, 0, 0, 0, 452, 554, 0, 452,
	554, 0, 0, 0, 549, 546, 0, 0, 551, 0,
	514, 0, 0, 0, 0, 0, 342, 0, 0, 0,
	0, 397, 0, 0, 0, 0, 0, 0, 387, 0,
	0, 390, 0, 0, 0, 0, 381, 0, 0, 402,
	865, 383, 0, 385, 386, 406, 0, 406, 47, 406,
	49, 0, 401, 606, 54, 0, 0, 59, 60, 607,
	608, 609, 610, 0, 83, 210, 212, 215, 216, 217,
	87, 88, 89, 0, 0, 197, 0, 0, 191, 191,
	0, 189, 190, 85, 90, 157, 156, 102, 0, 164,
	164, 125, 126, 167, 0, 167, 167, 167, 0, 0,
	119, 120, 121, 113, 0, 114, 115, 116, 0, 117,
	0, 0, -2, 0, 72, 622, 73, 944, 237, 237,
	637, 228, 625, 626, 627, 628, 629, 630, 631, 632,
	633, 634, 0, 74, 230, 232, 231, 235, 0, 0,
	0, 255, 945, 0, 299, 283, 0, 0, 300, 301,
	306, 290, 0, 579, 580, 0, 572, 25, 0, 617,
	618, 563, 564, 354, 430, 432, 434, 0, 341, 421,
	442, 425, 0, 422, 0, 0, 416, 0, 449, -2,
	0, 484, 485, 0, 0, 0, 0, 0, 520, 0,
	0, 521, 0, 569, 0, 547, 0, 0, 496, 0,
	515, 0, 0, 516, 517, 518, 519, 594, 0, 0,
	-2, 0, 0, 406, 602, 0, 357, 376, 378, 0,
	373, 388, 389, 391, 0, 393, 0, 395, 396, 361,
	363, 364, 0, 0, 0, 0, 384, 569, 0, 406,
	40, 41, 0, 57, 58, 0, 0, 64, 168, 169,
	0, 213, 0, 0, 0, 184, 191, 191, 187, 192,
	188, 0, 92, 93, 94, 95, 96, 97, 159, 0,
	0, 0, 163, 0, 171, 173, 0, 98, 158, 0,
	167, 167, 127, 0, 128, 129, 130, 0, 146, 0,
	0, 0, 0, 647, 0, 218, 0, 944, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 0,
	944, 0, 0, 944, 638, 639, 640, 641, 0, 77,
	0, 0, 0, 0, 0, 258, 45, 302, 303, 304,
	583, 0, 26, 406, 0, 348, 553, 0, 423, 0,
	443, 426, 482, 344, 0, 148, 148, 532, 148, 152,
	535, 148, 537, 148, 540, 0, 0, 0, 0, 0,
	0, 0, 544, 495, 550, 0, 552, 0, 0, 33,
	0, 594, 584, 596, 598, 0, 29, 0, 590, 0,
	368, 569, 0, 0, 370, 377, 0, 0, 371, 0,
	372, 392, 394, 0, 0, 0, 0, 577, 407, 39,
	61, 62, 63, 211, 214, 0, 193, 148, 196, 185,
	186, 0, 160, 161, 0, 170, 172, 174, 149, 123,
	124, 165, 166, 164, 0, 164, 0, 153, 0, 945,
	-2, 0, 944, 221, 222, 223, 0, 225, 226, 0,
	229, 0, 75, 76, 0, 0, 234, 256, 282, 565,
	355, 483, 427, 486, 529, 164, 533, 534, 536, 538,
	539, 541, 488, 487, 0, 0, 0, 0, 0, 0,
	0, 548, 0, 0, 0, 34, 0, 599, -2, 0,
	0, 0, 51, 0, 577, 603, 604, 374, 0, 379,
	0, 0, 0, 382, 38, 176, 0, 195, 0, 366,
	162, 167, 147, 167, 0, 0, 69, 0, 220, 0,
	635, 636, 0, 78, 79, 0, 0, 0, 567, 0,
	530, 531, 0, 0, 0, 0, 522, 494, 545, 0,
	0, 0, 597, 0, -2, 0, 592, 591, 369, 37,
	0, 0, 0, 0, 402, 175, 177, 0, 182, 0,
	194, 0, 0, 136, 137, 151, 154, 944, 224, 0,
	0, 0, 0, 236, 28, 0, 0, 489, 491, 490,
	492, 0, 0, 0, 511, 512, 0, 587, 29, 0,
	375, 403, 404, 405, 365, 178, 179, 0, 183, 181,
	0, 367, 219, 0, 250, 0, 80, 81, 74, 568,
	566, 493, 0, 0, 0, 595, -2, 593, 180, 0,
	249, 0, 0, 77, 523, 0, 526, 0, 251, 0,
	233, 524, 0, 0, 0, 198, 0, 0, 199, 200,
	0, 0, 525, 201, 0, 0, 0, 0, 0, 202,
	204, 205, 0, 0, 203, 252, 253, 206, 207, 208,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 76, 3, 3, 3, 103, 95, 3,
	55, 57, 100, 98, 56, 99, 113, 101, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 347,
	84, 83, 85, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 94, 3, 106,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 77, 78, 79, 80, 81, 82, 86, 87, 88,
	89, 90, 91, 92, 93, 96, 97, 102, 104, 107,
	108, 109, 110, 111, 112, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:324
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:329
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:330
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:334
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:356
		{
			setParseTree(yylex, nil)
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:362
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:370
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:374
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:380
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 28:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:387
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:393
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:397
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:403
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:407
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:414
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:426
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:438
		{
			yyVAL.str = InsertStr
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:442
		{
			yyVAL.str = ReplaceStr
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:448
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:454
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:458
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:462
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:466
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:471
		{
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:472
		{
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:476
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName.ToViewName()}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:480
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName.ToViewName())
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:486
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:490
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:496
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:500
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 50:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:505
		{
			yyVAL.partitions = nil
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:509
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:515
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:519
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:523
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:527
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:533
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:537
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:543
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:547
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:551
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:557
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:561
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:565
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:569
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:575
		{
			yyVAL.str = SessionStr
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:579
		{
			yyVAL.str = GlobalStr
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:585
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:590
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 69:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:596
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:601
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[3].tableName.ToViewName(), ViewExpr: yyDollar[5].selStmt}
		}
	case 71:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:605
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[5].tableName.ToViewName(), ViewExpr: yyDollar[7].selStmt, OrReplace: true}
		}
	case 72:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:609
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:613
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:618
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:622
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:628
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:633
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:638
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:644
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:649
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:655
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:661
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName, IfNotExists: ne}
			setDDL(yylex, yyVAL.ddl)
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:672
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:679
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:683
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:689
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:694
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:698
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:702
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:708
		{
			if err := yyDollar[2].columnType.merge(yyDollar[3].columnType); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:717
		{
			yyVAL.columnType = ColumnType{}
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:721
		{
			opt := ColumnType{NotNull: yyDollar[2].boolVal, sawnull: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:730
		{
			opt := ColumnType{Default: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:739
		{
			opt := ColumnType{OnUpdate: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:748
		{
			opt := ColumnType{Autoincrement: yyDollar[2].boolVal, sawai: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:757
		{
			opt := ColumnType{KeyOpt: yyDollar[2].colKeyOpt}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:766
		{
			opt := ColumnType{Comment: yyDollar[2].sqlVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:777
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:788
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:793
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:799
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:803
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:807
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:811
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:815
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:819
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:823
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:827
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:831
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:837
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:843
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:849
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:855
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:861
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:869
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:873
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:877
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:881
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:885
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:891
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:895
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:899
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:903
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:907
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:911
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:915
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:919
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:923
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:927
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:931
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:935
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:939
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:943
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 137:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:948
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:954
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:958
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:962
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:966
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:970
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:974
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:978
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:982
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:988
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:993
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:998
		{
			yyVAL.sqlVal = nil
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1002
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1007
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 151:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1011
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1019
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1023
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 154:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1029
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1037
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1041
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1046
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1050
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1057
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1061
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1067
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1073
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1079
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1084
		{
			yyVAL.str = ""
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1088
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1092
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1097
		{
			yyVAL.str = ""
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1101
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1105
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1111
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1115
		{
			yyVAL.colKeyOpt = colKey
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1119
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1123
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1129
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1135
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1139
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1145
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1149
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1155
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1159
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1164
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1170
		{
			yyVAL.str = ""
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1174
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1180
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1184
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1188
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1192
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1196
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1202
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1206
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1211
		{
			yyVAL.str = ""
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1215
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1221
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1225
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1231
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1237
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1241
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 198:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1248
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 199:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1252
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 200:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1256
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 201:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1260
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1266
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1272
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1278
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1282
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1286
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1290
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1294
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 209:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1299
		{
			yyVAL.str = ""
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1303
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1307
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1315
		{
			yyVAL.str = yyDollar[1].str
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1319
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1323
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1329
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1333
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1337
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 218:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1343
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 219:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1347
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			ddl.Column = yyDollar[8].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 220:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1354
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 221:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1361
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 222:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1365
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: DropStr, Column: NewColIdent(string(yyDollar[7].bytes)), Table: yyDollar[4].tableName}
		}
	case 223:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1369
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 224:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1373
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: RenameStr, Table: yyDollar[4].tableName, Column: NewColIdent(string(yyDollar[7].bytes)), ToColumn: NewColIdent(string(yyDollar[9].bytes))}
		}
	case 225:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1377
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 226:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1382
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 227:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1387
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 228:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1391
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 229:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1395
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 230:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1407
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 231:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1417
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 232:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1421
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 233:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1425
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 234:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1438
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 235:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1448
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 236:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1452
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 237:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1464
		{
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1466
		{
		}
	case 249:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1482
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1488
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1492
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 252:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1498
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 253:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1502
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1508
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1514
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 256:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1518
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1526
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 258:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1534
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1539
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromViews: yyDollar[4].tableNames, IfExists: exists}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1547
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1551
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1557
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1561
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1566
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1572
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1577
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1581
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1585
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1590
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1594
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1598
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1602
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1606
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1610
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1614
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1618
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1622
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1626
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1630
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1634
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1638
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1642
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 283:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1647
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1657
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1661
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1665
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1671
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1676
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1680
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1684
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1688
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1702
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1708
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1712
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1718
		{
			yyVAL.str = ""
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1722
		{
			yyVAL.str = "full "
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1728
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1732
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1738
		{
			yyVAL.str = ""
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1742
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1746
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1752
		{
			yyVAL.showFilter = nil
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1756
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1760
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1766
		{
			yyVAL.showFilter = nil
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1770
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1776
		{
			yyVAL.str = ""
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1780
		{
			yyVAL.str = SessionStr
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1784
		{
			yyVAL.str = GlobalStr
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1790
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1794
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1800
		{
			yyVAL.statement = &Begin{}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1804
		{
			yyVAL.statement = &Begin{}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1810
		{
			yyVAL.statement = &Commit{}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1816
		{
			yyVAL.statement = &Rollback{}
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1821
		{
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1822
		{
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1827
		{
			yyVAL.statement = &Show{Type: "columns", OnTable: yyDollar[2].tableName}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1831
		{
			yyVAL.statement = &OtherRead{}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1835
		{
			yyVAL.statement = &OtherRead{}
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1839
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1843
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1847
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1851
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1857
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1861
		{
			setAllowComments(yylex, true)
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1865
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1871
		{
			yyVAL.bytes2 = nil
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1875
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1881
		{
			yyVAL.str = UnionStr
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1885
		{
			yyVAL.str = UnionAllStr
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1889
		{
			yyVAL.str = UnionDistinctStr
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1894
		{
			yyVAL.str = ""
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1898
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1902
		{
			yyVAL.str = SQLCacheStr
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1907
		{
			yyVAL.str = ""
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1911
		{
			yyVAL.str = ""
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1915
		{
			yyVAL.str = DistinctStr
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1920
		{
			yyVAL.str = ""
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1924
		{
			yyVAL.str = StraightJoinHint
		}
	case 341:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1929
		{
			yyVAL.selectExprs = nil
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1933
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1939
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1943
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1949
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1953
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1957
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 348:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1961
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 349:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1966
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1970
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1974
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1981
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1986
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1990
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1996
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2000
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2010
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2014
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2018
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2024
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2030
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 365:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2034
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2040
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2044
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2050
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2054
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 370:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2067
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 371:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2071
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 372:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2075
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2079
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2085
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 375:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2087
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2091
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2093
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 378:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2097
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2099
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2102
		{
			yyVAL.empty = struct{}{}
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2104
		{
			yyVAL.empty = struct{}{}
		}
	case 382:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2107
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2111
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2115
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2122
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2128
		{
			yyVAL.str = JoinStr
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2132
		{
			yyVAL.str = JoinStr
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2136
		{
			yyVAL.str = JoinStr
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2142
		{
			yyVAL.str = StraightJoinStr
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2148
		{
			yyVAL.str = LeftJoinStr
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2152
		{
			yyVAL.str = LeftJoinStr
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2156
		{
			yyVAL.str = RightJoinStr
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2160
		{
			yyVAL.str = RightJoinStr
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2166
		{
			yyVAL.str = NaturalJoinStr
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2170
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2180
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2184
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2190
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2194
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2200
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2205
		{
			yyVAL.indexHints = nil
		}
	case 403:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2209
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 404:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2213
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 405:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2217
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 406:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2222
		{
			yyVAL.expr = nil
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2226
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2232
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2236
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2240
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2244
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2248
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2252
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2256
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 415:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2262
		{
			yyVAL.str = ""
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2266
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2272
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2276
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2282
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2286
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 421:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2290
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 422:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2294
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 423:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2298
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2302
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 425:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2306
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 426:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2310
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 427:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2314
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2318
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2324
		{
			yyVAL.str = IsNullStr
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2328
		{
			yyVAL.str = IsNotNullStr
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2332
		{
			yyVAL.str = IsTrueStr
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2336
		{
			yyVAL.str = IsNotTrueStr
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2340
		{
			yyVAL.str = IsFalseStr
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2344
		{
			yyVAL.str = IsNotFalseStr
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2350
		{
			yyVAL.str = EqualStr
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2354
		{
			yyVAL.str = LessThanStr
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2358
		{
			yyVAL.str = GreaterThanStr
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2362
		{
			yyVAL.str = LessEqualStr
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2366
		{
			yyVAL.str = GreaterEqualStr
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2370
		{
			yyVAL.str = NotEqualStr
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2374
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 442:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2379
		{
			yyVAL.expr = nil
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2383
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2389
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2393
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2397
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2403
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2409
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2413
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2419
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2423
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2427
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2431
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2435
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2439
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2443
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2447
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2451
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2455
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2459
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2463
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2467
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2471
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2475
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2479
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2483
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2487
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2491
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2495
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2499
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2503
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2507
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2511
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2519
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2533
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2537
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2541
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 482:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2559
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: yyDollar[3].str == DistinctStr, Exprs: yyDollar[4].selectExprs}
		}
	case 483:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2563
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 484:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2573
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 485:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2577
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 486:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2581
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 487:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2585
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 488:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2589
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 489:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2593
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 490:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2597
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 491:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2601
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 492:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2605
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 493:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2609
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 494:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2613
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 495:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2617
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 496:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2621
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2631
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2635
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2639
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2644
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2649
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2654
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2660
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2665
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2670
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2674
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2678
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2683
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2688
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2693
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 511:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2697
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 512:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2701
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2711
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 516:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2721
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 517:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2725
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2729
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 519:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2733
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 520:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2737
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 521:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2741
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 522:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2747
		{
			yyVAL.str = ""
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2751
		{
			yyVAL.str = BooleanModeStr
		}
	case 524:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2755
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 525:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2759
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2763
		{
			yyVAL.str = QueryExpansionStr
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2769
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2773
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2779
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2783
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2787
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2791
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2795
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2799
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2805
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2809
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2813
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2817
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2821
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2825
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2829
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 542:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2834
		{
			yyVAL.expr = nil
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2838
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 544:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2843
		{
			yyVAL.str = string("")
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2847
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2853
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2857
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 548:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2863
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 549:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2868
		{
			yyVAL.expr = nil
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2872
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2878
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2882
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 553:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2886
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2892
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2896
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2900
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2904
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2908
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2912
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2916
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2920
		{
			yyVAL.expr = &NullVal{}
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2926
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2935
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2939
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 565:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2944
		{
			yyVAL.exprs = nil
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2948
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2953
		{
			yyVAL.expr = nil
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2957
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2962
		{
			yyVAL.orderBy = nil
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2966
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2972
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2976
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2982
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 574:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2987
		{
			yyVAL.str = AscScr
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2991
		{
			yyVAL.str = AscScr
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2995
		{
			yyVAL.str = DescScr
		}
	case 577:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3000
		{
			yyVAL.limit = nil
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3004
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 579:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3008
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 580:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3012
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 581:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3017
		{
			yyVAL.str = ""
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3021
		{
			yyVAL.str = ForUpdateStr
		}
	case 583:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3025
		{
			yyVAL.str = ShareModeStr
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3038
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3042
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3046
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 587:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3051
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3055
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 589:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3059
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3066
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3070
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3074
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 593:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3078
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 594:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3083
		{
			yyVAL.updateExprs = nil
		}
	case 595:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3087
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3093
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3097
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3103
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3107
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3113
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3119
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3129
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3133
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3139
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3145
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3149
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3155
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3159
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3163
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3167
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3174
		{
			yyVAL.bytes = []byte("charset")
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3181
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3185
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3189
		{
			yyVAL.expr = &Default{}
		}
	case 619:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3198
		{
			yyVAL.byt = 0
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3200
		{
			yyVAL.byt = 1
		}
	case 621:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3203
		{
			yyVAL.byt = 0
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3205
		{
			yyVAL.byt = 1
		}
	case 623:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3208
		{
			yyVAL.str = ""
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3210
		{
			yyVAL.str = IgnoreStr
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3214
		{
			yyVAL.empty = struct{}{}
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3216
		{
			yyVAL.empty = struct{}{}
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3218
		{
			yyVAL.empty = struct{}{}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3220
		{
			yyVAL.empty = struct{}{}
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3222
		{
			yyVAL.empty = struct{}{}
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3224
		{
			yyVAL.empty = struct{}{}
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3226
		{
			yyVAL.empty = struct{}{}
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3228
		{
			yyVAL.empty = struct{}{}
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3230
		{
			yyVAL.empty = struct{}{}
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3232
		{
			yyVAL.empty = struct{}{}
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3236
		{
			yyVAL.empty = struct{}{}
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3238
		{
			yyVAL.empty = struct{}{}
		}
	case 637:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3241
		{
			yyVAL.empty = struct{}{}
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3243
		{
			yyVAL.empty = struct{}{}
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3245
		{
			yyVAL.empty = struct{}{}
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3249
		{
			yyVAL.empty = struct{}{}
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3251
		{
			yyVAL.empty = struct{}{}
		}
	case 642:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3254
		{
			yyVAL.empty = struct{}{}
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3256
		{
			yyVAL.empty = struct{}{}
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3258
		{
			yyVAL.empty = struct{}{}
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3260
		{
			yyVAL.empty = struct{}{}
		}
	case 646:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3263
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 647:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3265
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3269
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3273
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3280
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3286
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3290
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3297
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3609
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3618
		{
			decNesting(yylex)
		}
	case 944:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3623
		{
			skipToEnd(yylex)
		}
	case 945:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3628
		{
			skipToEnd(yylex)
		}
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3632
		{
			skipToEnd(yylex)
		}
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3636
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
