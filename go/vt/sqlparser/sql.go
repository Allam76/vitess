// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func yyPosition(yylex interface{}) int {
	return yylex.(*Tokenizer).Position
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:57
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	int                   int
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	statements            Statements
	partitions            Partitions
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	joinCondition         JoinCondition
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	asOf                  *AsOf
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	boolean               bool
	sqlVal                *SQLVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	setExprs              SetExprs
	setExpr               *SetExpr
	colIdent              ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	TableSpec             *TableSpec
	columnType            ColumnType
	columnOrder           *ColumnOrder
	triggerOrder          *TriggerOrder
	colKeyOpt             ColumnKeyOption
	optVal                Expr
	LengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexInfo             *IndexInfo
	indexOption           *IndexOption
	indexOptions          []*IndexOption
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	constraintDefinition  *ConstraintDefinition
	constraintInfo        ConstraintInfo
	ReferenceAction       ReferenceAction
	partDefs              []*PartitionDefinition
	partDef               *PartitionDefinition
	partSpec              *PartitionSpec
	vindexParam           VindexParam
	vindexParams          []VindexParam
	showFilter            *ShowFilter
	optLike               *OptLike
	over                  *Over
	caseStatementCases    []CaseStatementCase
	caseStatementCase     CaseStatementCase
	ifStatementConditions []IfStatementCondition
	ifStatementCondition  IfStatementCondition
	signalInfo            SignalInfo
	signalInfos           []SignalInfo
	procedureParam        ProcedureParam
	procedureParams       []ProcedureParam
	characteristic        Characteristic
	characteristics       []Characteristic
	Fields                *Fields
	Lines                 *Lines
	EnclosedBy            *EnclosedBy
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const CALL = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const OF = 57376
const OUTFILE = 57377
const DATA = 57378
const LOAD = 57379
const LINES = 57380
const TERMINATED = 57381
const ESCAPED = 57382
const ENCLOSED = 57383
const OPTIONALLY = 57384
const STARTING = 57385
const UNIQUE = 57386
const KEY = 57387
const SYSTEM_TIME = 57388
const VALUES = 57389
const LAST_INSERT_ID = 57390
const NEXT = 57391
const VALUE = 57392
const SHARE = 57393
const MODE = 57394
const SQL_NO_CACHE = 57395
const SQL_CACHE = 57396
const JOIN = 57397
const STRAIGHT_JOIN = 57398
const LEFT = 57399
const RIGHT = 57400
const INNER = 57401
const OUTER = 57402
const CROSS = 57403
const NATURAL = 57404
const USE = 57405
const FORCE = 57406
const ON = 57407
const USING = 57408
const ID = 57409
const AT_ID = 57410
const AT_AT_ID = 57411
const HEX = 57412
const STRING = 57413
const INTEGRAL = 57414
const FLOAT = 57415
const HEXNUM = 57416
const VALUE_ARG = 57417
const LIST_ARG = 57418
const COMMENT = 57419
const COMMENT_KEYWORD = 57420
const BIT_LITERAL = 57421
const NULL = 57422
const TRUE = 57423
const FALSE = 57424
const OFF = 57425
const OR = 57426
const AND = 57427
const NOT = 57428
const BETWEEN = 57429
const CASE = 57430
const WHEN = 57431
const THEN = 57432
const ELSE = 57433
const ELSEIF = 57434
const END = 57435
const LE = 57436
const GE = 57437
const NE = 57438
const NULL_SAFE_EQUAL = 57439
const IS = 57440
const LIKE = 57441
const REGEXP = 57442
const IN = 57443
const SHIFT_LEFT = 57444
const SHIFT_RIGHT = 57445
const DIV = 57446
const MOD = 57447
const UNARY = 57448
const COLLATE = 57449
const BINARY = 57450
const UNDERSCORE_BINARY = 57451
const UNDERSCORE_UTF8MB4 = 57452
const INTERVAL = 57453
const JSON_EXTRACT_OP = 57454
const JSON_UNQUOTE_EXTRACT_OP = 57455
const CREATE = 57456
const ALTER = 57457
const DROP = 57458
const RENAME = 57459
const ANALYZE = 57460
const ADD = 57461
const FLUSH = 57462
const MODIFY = 57463
const CHANGE = 57464
const SCHEMA = 57465
const TABLE = 57466
const INDEX = 57467
const INDEXES = 57468
const VIEW = 57469
const TO = 57470
const IGNORE = 57471
const IF = 57472
const PRIMARY = 57473
const COLUMN = 57474
const SPATIAL = 57475
const FULLTEXT = 57476
const KEY_BLOCK_SIZE = 57477
const CHECK = 57478
const ACTION = 57479
const CASCADE = 57480
const CONSTRAINT = 57481
const FOREIGN = 57482
const NO = 57483
const REFERENCES = 57484
const RESTRICT = 57485
const FIRST = 57486
const AFTER = 57487
const SHOW = 57488
const DESCRIBE = 57489
const EXPLAIN = 57490
const DATE = 57491
const ESCAPE = 57492
const REPAIR = 57493
const OPTIMIZE = 57494
const TRUNCATE = 57495
const FORMAT = 57496
const MAXVALUE = 57497
const PARTITION = 57498
const REORGANIZE = 57499
const LESS = 57500
const THAN = 57501
const PROCEDURE = 57502
const TRIGGER = 57503
const TRIGGERS = 57504
const FUNCTION = 57505
const VINDEX = 57506
const VINDEXES = 57507
const STATUS = 57508
const VARIABLES = 57509
const WARNINGS = 57510
const SEQUENCE = 57511
const EACH = 57512
const ROW = 57513
const BEFORE = 57514
const FOLLOWS = 57515
const PRECEDES = 57516
const DEFINER = 57517
const INVOKER = 57518
const INOUT = 57519
const OUT = 57520
const DETERMINISTIC = 57521
const CONTAINS = 57522
const READS = 57523
const MODIFIES = 57524
const SQL = 57525
const SECURITY = 57526
const CLASS_ORIGIN = 57527
const SUBCLASS_ORIGIN = 57528
const MESSAGE_TEXT = 57529
const MYSQL_ERRNO = 57530
const CONSTRAINT_CATALOG = 57531
const CONSTRAINT_SCHEMA = 57532
const CONSTRAINT_NAME = 57533
const CATALOG_NAME = 57534
const SCHEMA_NAME = 57535
const TABLE_NAME = 57536
const COLUMN_NAME = 57537
const CURSOR_NAME = 57538
const SIGNAL = 57539
const SQLSTATE = 57540
const BEGIN = 57541
const START = 57542
const TRANSACTION = 57543
const COMMIT = 57544
const ROLLBACK = 57545
const BIT = 57546
const TINYINT = 57547
const SMALLINT = 57548
const MEDIUMINT = 57549
const INT = 57550
const INTEGER = 57551
const BIGINT = 57552
const INTNUM = 57553
const REAL = 57554
const DOUBLE = 57555
const FLOAT_TYPE = 57556
const DECIMAL = 57557
const NUMERIC = 57558
const DEC = 57559
const FIXED = 57560
const PRECISION = 57561
const TIME = 57562
const TIMESTAMP = 57563
const DATETIME = 57564
const YEAR = 57565
const CHAR = 57566
const VARCHAR = 57567
const BOOL = 57568
const CHARACTER = 57569
const VARBINARY = 57570
const NCHAR = 57571
const NVARCHAR = 57572
const NATIONAL = 57573
const VARYING = 57574
const TEXT = 57575
const TINYTEXT = 57576
const MEDIUMTEXT = 57577
const LONGTEXT = 57578
const LONG = 57579
const BLOB = 57580
const TINYBLOB = 57581
const MEDIUMBLOB = 57582
const LONGBLOB = 57583
const JSON = 57584
const ENUM = 57585
const GEOMETRY = 57586
const POINT = 57587
const LINESTRING = 57588
const POLYGON = 57589
const GEOMETRYCOLLECTION = 57590
const MULTIPOINT = 57591
const MULTILINESTRING = 57592
const MULTIPOLYGON = 57593
const NULLX = 57594
const AUTO_INCREMENT = 57595
const APPROXNUM = 57596
const SIGNED = 57597
const UNSIGNED = 57598
const ZEROFILL = 57599
const LOCAL = 57600
const COLLATION = 57601
const DATABASES = 57602
const SCHEMAS = 57603
const TABLES = 57604
const VITESS_METADATA = 57605
const VSCHEMA = 57606
const FULL = 57607
const PROCESSLIST = 57608
const COLUMNS = 57609
const FIELDS = 57610
const ENGINES = 57611
const PLUGINS = 57612
const NAMES = 57613
const CHARSET = 57614
const GLOBAL = 57615
const SESSION = 57616
const ISOLATION = 57617
const LEVEL = 57618
const READ = 57619
const WRITE = 57620
const ONLY = 57621
const REPEATABLE = 57622
const COMMITTED = 57623
const UNCOMMITTED = 57624
const SERIALIZABLE = 57625
const CURRENT_TIMESTAMP = 57626
const DATABASE = 57627
const CURRENT_DATE = 57628
const CURRENT_USER = 57629
const CURRENT_TIME = 57630
const LOCALTIME = 57631
const LOCALTIMESTAMP = 57632
const UTC_DATE = 57633
const UTC_TIME = 57634
const UTC_TIMESTAMP = 57635
const REPLACE = 57636
const CONVERT = 57637
const CAST = 57638
const SUBSTR = 57639
const SUBSTRING = 57640
const GROUP_CONCAT = 57641
const SEPARATOR = 57642
const TIMESTAMPADD = 57643
const TIMESTAMPDIFF = 57644
const OVER = 57645
const WINDOW = 57646
const GROUPING = 57647
const GROUPS = 57648
const AVG = 57649
const BIT_AND = 57650
const BIT_OR = 57651
const BIT_XOR = 57652
const COUNT = 57653
const JSON_ARRAYAGG = 57654
const JSON_OBJECTAGG = 57655
const MAX = 57656
const MIN = 57657
const STDDEV_POP = 57658
const STDDEV = 57659
const STD = 57660
const STDDEV_SAMP = 57661
const SUM = 57662
const VAR_POP = 57663
const VARIANCE = 57664
const VAR_SAMP = 57665
const CUME_DIST = 57666
const DENSE_RANK = 57667
const FIRST_VALUE = 57668
const LAG = 57669
const LAST_VALUE = 57670
const LEAD = 57671
const NTH_VALUE = 57672
const NTILE = 57673
const ROW_NUMBER = 57674
const PERCENT_RANK = 57675
const RANK = 57676
const MATCH = 57677
const AGAINST = 57678
const BOOLEAN = 57679
const LANGUAGE = 57680
const WITH = 57681
const QUERY = 57682
const EXPANSION = 57683
const UNUSED = 57684
const ARRAY = 57685
const DESCRIPTION = 57686
const EMPTY = 57687
const EXCEPT = 57688
const JSON_TABLE = 57689
const LATERAL = 57690
const MEMBER = 57691
const RECURSIVE = 57692
const ACTIVE = 57693
const ADMIN = 57694
const BUCKETS = 57695
const CLONE = 57696
const COMPONENT = 57697
const DEFINITION = 57698
const ENFORCED = 57699
const EXCLUDE = 57700
const FOLLOWING = 57701
const GEOMCOLLECTION = 57702
const GET_MASTER_PUBLIC_KEY = 57703
const HISTOGRAM = 57704
const HISTORY = 57705
const INACTIVE = 57706
const INVISIBLE = 57707
const LOCKED = 57708
const MASTER_COMPRESSION_ALGORITHMS = 57709
const MASTER_PUBLIC_KEY_PATH = 57710
const MASTER_TLS_CIPHERSUITES = 57711
const MASTER_ZSTD_COMPRESSION_LEVEL = 57712
const NESTED = 57713
const NETWORK_NAMESPACE = 57714
const NOWAIT = 57715
const NULLS = 57716
const OJ = 57717
const OLD = 57718
const OPTIONAL = 57719
const ORDINALITY = 57720
const ORGANIZATION = 57721
const OTHERS = 57722
const PATH = 57723
const PERSIST = 57724
const PERSIST_ONLY = 57725
const PRECEDING = 57726
const PRIVILEGE_CHECKS_USER = 57727
const PROCESS = 57728
const RANDOM = 57729
const REFERENCE = 57730
const REQUIRE_ROW_FORMAT = 57731
const RESOURCE = 57732
const RESPECT = 57733
const RESTART = 57734
const RETAIN = 57735
const REUSE = 57736
const ROLE = 57737
const SECONDARY = 57738
const SECONDARY_ENGINE = 57739
const SECONDARY_LOAD = 57740
const SECONDARY_UNLOAD = 57741
const SKIP = 57742
const SRID = 57743
const THREAD_PRIORITY = 57744
const TIES = 57745
const UNBOUNDED = 57746
const VCPU = 57747
const VISIBLE = 57748
const SYSTEM = 57749
const INFILE = 57750

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CALL",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"OF",
	"OUTFILE",
	"DATA",
	"LOAD",
	"LINES",
	"TERMINATED",
	"ESCAPED",
	"ENCLOSED",
	"OPTIONALLY",
	"STARTING",
	"UNIQUE",
	"KEY",
	"SYSTEM_TIME",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"ELSEIF",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"MODIFY",
	"CHANGE",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"INDEXES",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"FIRST",
	"AFTER",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"FORMAT",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TRIGGERS",
	"FUNCTION",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"EACH",
	"ROW",
	"BEFORE",
	"FOLLOWS",
	"PRECEDES",
	"DEFINER",
	"INVOKER",
	"INOUT",
	"OUT",
	"DETERMINISTIC",
	"CONTAINS",
	"READS",
	"MODIFIES",
	"SQL",
	"SECURITY",
	"CLASS_ORIGIN",
	"SUBCLASS_ORIGIN",
	"MESSAGE_TEXT",
	"MYSQL_ERRNO",
	"CONSTRAINT_CATALOG",
	"CONSTRAINT_SCHEMA",
	"CONSTRAINT_NAME",
	"CATALOG_NAME",
	"SCHEMA_NAME",
	"TABLE_NAME",
	"COLUMN_NAME",
	"CURSOR_NAME",
	"SIGNAL",
	"SQLSTATE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DEC",
	"FIXED",
	"PRECISION",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NATIONAL",
	"VARYING",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"LONG",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"LOCAL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"OVER",
	"WINDOW",
	"GROUPING",
	"GROUPS",
	"AVG",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"COUNT",
	"JSON_ARRAYAGG",
	"JSON_OBJECTAGG",
	"MAX",
	"MIN",
	"STDDEV_POP",
	"STDDEV",
	"STD",
	"STDDEV_SAMP",
	"SUM",
	"VAR_POP",
	"VARIANCE",
	"VAR_SAMP",
	"CUME_DIST",
	"DENSE_RANK",
	"FIRST_VALUE",
	"LAG",
	"LAST_VALUE",
	"LEAD",
	"NTH_VALUE",
	"NTILE",
	"ROW_NUMBER",
	"PERCENT_RANK",
	"RANK",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"DESCRIPTION",
	"EMPTY",
	"EXCEPT",
	"JSON_TABLE",
	"LATERAL",
	"MEMBER",
	"RECURSIVE",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"SYSTEM",
	"INFILE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 40,
	-2, 4,
	-1, 36,
	142, 884,
	-2, 135,
	-1, 44,
	183, 485,
	184, 485,
	-2, 473,
	-1, 51,
	1, 1271,
	426, 1271,
	-2, 505,
	-1, 373,
	128, 892,
	-2, 888,
	-1, 374,
	128, 893,
	-2, 889,
	-1, 475,
	98, 1194,
	128, 1194,
	-2, 76,
	-1, 476,
	98, 1102,
	128, 1102,
	-2, 77,
	-1, 481,
	98, 1062,
	128, 1062,
	-2, 851,
	-1, 483,
	98, 1138,
	128, 1138,
	-2, 853,
	-1, 691,
	5, 40,
	-2, 499,
	-1, 695,
	5, 40,
	-2, 498,
	-1, 917,
	1, 557,
	5, 557,
	12, 557,
	13, 557,
	14, 557,
	15, 557,
	17, 557,
	19, 557,
	30, 557,
	31, 557,
	55, 557,
	56, 557,
	57, 557,
	58, 557,
	59, 557,
	61, 557,
	62, 557,
	65, 557,
	66, 557,
	68, 557,
	69, 557,
	426, 557,
	-2, 584,
	-1, 920,
	66, 57,
	68, 57,
	-2, 61,
	-1, 1119,
	128, 895,
	-2, 891,
	-1, 1364,
	67, 412,
	70, 412,
	-2, 376,
	-1, 1413,
	5, 41,
	-2, 650,
	-1, 1473,
	5, 40,
	-2, 828,
	-1, 1568,
	5, 40,
	-2, 78,
	-1, 1713,
	1, 605,
	5, 605,
	12, 605,
	13, 605,
	14, 605,
	15, 605,
	17, 605,
	19, 605,
	30, 605,
	31, 605,
	55, 605,
	56, 605,
	57, 605,
	58, 605,
	59, 605,
	61, 605,
	62, 605,
	65, 605,
	66, 605,
	68, 605,
	69, 605,
	426, 605,
	-2, 584,
	-1, 1833,
	5, 41,
	-2, 829,
	-1, 1864,
	5, 40,
	-2, 78,
	-1, 1922,
	5, 40,
	-2, 831,
	-1, 1962,
	41, 902,
	-2, 900,
	-1, 2006,
	5, 40,
	-2, 110,
	-1, 2066,
	5, 41,
	-2, 832,
	-1, 2129,
	426, 188,
	-2, 40,
}

const yyPrivate = 57344

const yyLast = 21791

var yyAct = [...]int{

	407, 60, 2128, 2194, 2162, 2172, 2070, 2137, 2127, 2163,
	2132, 7, 2135, 1327, 2131, 6, 2057, 2103, 1790, 1936,
	2130, 5, 2133, 8, 1241, 1846, 1962, 71, 1624, 2136,
	24, 2048, 1266, 1325, 406, 2005, 378, 2134, 471, 1900,
	1621, 1726, 1094, 1885, 1693, 1727, 1868, 1234, 842, 2071,
	1232, 1236, 1694, 352, 676, 1276, 336, 1522, 1576, 522,
	391, 60, 1690, 1228, 1230, 486, 1318, 1265, 93, 1700,
	1704, 1641, 1157, 1144, 357, 1353, 1272, 1061, 1599, 1212,
	1559, 1043, 1219, 1050, 913, 1180, 1313, 1280, 1172, 933,
	1121, 714, 1598, 720, 1260, 490, 371, 474, 932, 914,
	376, 487, 764, 469, 496, 361, 466, 922, 2215, 337,
	338, 858, 2211, 341, 2201, 2184, 524, 1029, 477, 1288,
	859, 2174, 2166, 2157, 2106, 70, 1079, 1862, 1674, 2176,
	1869, 2096, 2161, 2063, 1756, 2146, 75, 946, 1871, 1791,
	2095, 1658, 380, 1442, 1818, 495, 1175, 1722, 1723, 755,
	365, 1986, 807, 806, 816, 817, 809, 810, 811, 812,
	813, 814, 815, 808, 1255, 1256, 818, 77, 78, 79,
	80, 81, 2129, 3, 2062, 1508, 1721, 934, 1507, 935,
	1301, 1509, 29, 1254, 61, 32, 33, 678, 1499, 679,
	680, 688, 340, 339, 705, 498, 420, 501, 426, 428,
	427, 424, 425, 423, 422, 421, 1542, 1874, 1287, 348,
	1907, 350, 1626, 429, 430, 1307, 1289, 1302, 1302, 103,
	99, 100, 1314, 101, 1293, 1295, 1809, 1294, 1807, 351,
	343, 1959, 95, 346, 1958, 1957, 1956, 1955, 1953, 2004,
	1954, 2100, 2101, 68, 1375, 1872, 1873, 1875, 1876, 1877,
	2033, 2034, 2072, 1675, 1334, 686, 105, 104, 1374, 29,
	1085, 61, 32, 33, 1577, 672, 29, 671, 61, 32,
	33, 673, 674, 1084, 1628, 88, 1082, 2160, 61, 32,
	33, 1333, 1289, 34, 500, 499, 2145, 681, 687, 2049,
	34, 682, 679, 680, 1623, 1213, 1886, 1887, 2002, 1379,
	34, 1627, 1578, 1281, 333, 1086, 2207, 1937, 1603, 521,
	1373, 521, 521, 1083, 72, 491, 491, 2216, 489, 521,
	68, 2213, 1939, 1895, 2202, 521, 2185, 68, 90, 92,
	497, 506, 87, 60, 60, 2036, 350, 1581, 97, 96,
	334, 1019, 1010, 692, 1498, 2028, 349, 694, 2169, 2173,
	2168, 1497, 2028, 693, 1496, 1894, 493, 2214, 60, 1596,
	708, 1371, 1365, 1366, 2198, 1364, 305, 1367, 1368, 98,
	1994, 1836, 1387, 827, 1283, 1386, 829, 830, 831, 722,
	94, 102, 1423, 751, 1302, 1237, 1239, 1512, 1579, 1580,
	95, 1316, 768, 1938, 1420, 1504, 697, 698, 1549, 1987,
	2029, 1402, 1377, 1380, 1870, 1092, 840, 2029, 844, 845,
	846, 847, 848, 849, 850, 851, 852, 853, 854, 1755,
	857, 860, 860, 860, 866, 860, 860, 866, 860, 866,
	875, 876, 877, 878, 879, 880, 881, 882, 883, 884,
	885, 886, 887, 888, 889, 890, 891, 892, 893, 894,
	895, 896, 897, 898, 899, 900, 901, 902, 903, 904,
	905, 906, 907, 908, 1292, 918, 2061, 57, 1238, 2138,
	941, 1282, 1823, 1372, 57, 928, 2138, 1893, 832, 833,
	834, 835, 836, 837, 838, 839, 2138, 62, 798, 2196,
	89, 516, 2197, 706, 2195, 753, 97, 96, 1261, 1370,
	830, 831, 1283, 1745, 808, 691, 695, 818, 818, 477,
	1250, 930, 830, 831, 1089, 488, 1051, 84, 828, 521,
	521, 660, 1057, 763, 2188, 2173, 2187, 1523, 1343, 912,
	752, 762, 761, 861, 863, 865, 867, 869, 871, 872,
	874, 1376, 862, 864, 1622, 868, 870, 1618, 873, 763,
	29, 485, 61, 32, 33, 713, 85, 1746, 669, 29,
	30, 61, 32, 33, 62, 761, 1975, 1358, 936, 1283,
	1045, 62, 921, 58, 34, 926, 505, 696, 1534, 67,
	841, 62, 763, 34, 54, 55, 502, 1128, 1378, 683,
	59, 659, 663, 1539, 1538, 665, 1279, 1283, 491, 1282,
	1660, 489, 1126, 1127, 1125, 1173, 1173, 917, 1431, 1095,
	1096, 68, 1020, 1052, 1535, 29, 45, 61, 32, 33,
	68, 710, 488, 711, 2200, 1344, 712, 2154, 661, 664,
	1540, 662, 1532, 1031, 1012, 347, 2028, 1733, 1533, 34,
	758, 2210, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070,
	1071, 1072, 1073, 1074, 2104, 670, 2124, 2080, 2123, 762,
	761, 521, 521, 521, 1044, 2104, 1282, 2068, 1102, 1617,
	1861, 762, 761, 1614, 521, 521, 68, 763, 510, 511,
	512, 513, 514, 685, 36, 63, 41, 40, 43, 763,
	56, 2029, 68, 1103, 1282, 1860, 1104, 1537, 1564, 1283,
	1277, 2028, 1278, 2208, 1124, 491, 2191, 1562, 1275, 1281,
	521, 1399, 1400, 1401, 463, 464, 44, 66, 65, 1419,
	1543, 52, 53, 42, 893, 894, 895, 896, 897, 881,
	882, 883, 898, 899, 884, 885, 886, 892, 900, 887,
	888, 889, 890, 891, 903, 902, 901, 904, 905, 907,
	906, 908, 1077, 658, 1046, 1145, 2029, 2209, 57, 1146,
	2138, 2122, 1053, 1034, 1035, 1097, 367, 57, 2143, 46,
	64, 2121, 48, 49, 762, 761, 29, 2142, 61, 32,
	33, 2204, 1055, 762, 761, 29, 2109, 61, 32, 33,
	768, 2086, 763, 1111, 1113, 1114, 1282, 701, 2001, 1112,
	34, 763, 1607, 1603, 1952, 1098, 1914, 1604, 1999, 34,
	1611, 1613, 811, 812, 813, 814, 815, 808, 1858, 1536,
	818, 700, 1418, 57, 1417, 2138, 1738, 1608, 1560, 1510,
	60, 1283, 1642, 1511, 1362, 1355, 1122, 68, 1518, 1005,
	1006, 1345, 1969, 762, 761, 844, 68, 809, 810, 811,
	812, 813, 814, 815, 808, 62, 1075, 818, 1118, 1100,
	1523, 763, 2028, 27, 62, 1966, 1772, 2183, 1115, 488,
	488, 2028, 1931, 2147, 1644, 807, 806, 816, 817, 809,
	810, 811, 812, 813, 814, 815, 808, 1162, 1165, 818,
	1004, 1005, 1006, 1891, 1174, 1852, 2144, 1120, 1793, 1099,
	1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138,
	1139, 1140, 1141, 1142, 1143, 1119, 1117, 2029, 1787, 1231,
	62, 1931, 2141, 918, 2090, 707, 2029, 918, 1282, 1852,
	2087, 1148, 1149, 1354, 1607, 1603, 1783, 356, 1780, 1604,
	1646, 1778, 1605, 1606, 1123, 1650, 1777, 1645, 1766, 1643,
	1931, 2052, 1852, 2003, 1648, 1765, 1186, 1176, 1188, 1608,
	1931, 1995, 707, 374, 1931, 1942, 477, 1647, 807, 806,
	816, 817, 809, 810, 811, 812, 813, 814, 815, 808,
	1649, 1651, 818, 1764, 57, 1588, 2138, 1245, 1152, 1154,
	1151, 1247, 1587, 57, 1159, 2138, 1931, 707, 762, 761,
	1243, 1262, 841, 1267, 1170, 2156, 110, 1852, 1851, 110,
	1270, 1341, 521, 1229, 521, 110, 763, 1155, 1838, 707,
	1835, 707, 1753, 1752, 1749, 1750, 1964, 1251, 1184, 1185,
	1252, 1248, 1749, 1748, 1946, 1191, 1192, 1193, 1194, 1414,
	707, 1945, 1195, 1196, 110, 1031, 1273, 1200, 1340, 110,
	1203, 110, 1147, 1237, 1239, 1208, 1059, 520, 1119, 1263,
	1761, 917, 110, 1028, 509, 917, 1320, 1321, 1322, 917,
	110, 1216, 707, 1290, 1291, 1027, 1296, 1297, 1298, 1299,
	1300, 62, 1026, 1315, 1317, 1153, 1359, 72, 1091, 1025,
	62, 841, 1017, 1565, 1310, 1311, 1312, 1015, 1323, 807,
	806, 816, 817, 809, 810, 811, 812, 813, 814, 815,
	808, 762, 761, 818, 1153, 707, 762, 761, 722, 1403,
	717, 721, 707, 2105, 762, 761, 1014, 1013, 1011, 763,
	518, 1662, 944, 943, 763, 1352, 1238, 799, 1090, 344,
	1153, 929, 763, 1303, 1304, 1305, 1306, 1739, 1284, 2093,
	29, 1821, 1118, 1691, 1831, 72, 929, 762, 761, 1500,
	1122, 1974, 807, 806, 816, 817, 809, 810, 811, 812,
	813, 814, 815, 808, 843, 763, 818, 29, 924, 396,
	395, 398, 399, 400, 401, 856, 1216, 1391, 397, 402,
	1392, 1921, 807, 806, 816, 817, 809, 810, 811, 812,
	813, 814, 815, 808, 924, 1408, 818, 1500, 1414, 1119,
	1263, 68, 29, 1474, 1475, 1216, 1404, 918, 918, 918,
	918, 918, 1632, 1405, 1406, 1407, 1244, 1215, 923, 1762,
	1751, 1513, 1231, 925, 1492, 927, 1471, 1411, 68, 358,
	1221, 1224, 1225, 1226, 1222, 918, 1223, 1227, 1253, 1414,
	1705, 1706, 477, 1472, 1476, 1436, 1435, 1357, 1339, 925,
	1430, 923, 923, 929, 1093, 1216, 1018, 68, 1123, 110,
	2098, 2088, 509, 68, 509, 509, 2079, 1967, 1625, 1414,
	1490, 1902, 509, 1863, 1495, 1289, 1841, 1494, 509, 1221,
	1224, 1225, 1226, 1222, 1410, 1223, 1227, 1319, 1514, 1732,
	68, 1477, 1413, 1415, 1480, 1416, 1705, 1706, 1326, 1501,
	1489, 1422, 110, 1314, 1425, 1426, 1427, 1478, 1479, 1517,
	1481, 1433, 1335, 1434, 1309, 1267, 1437, 1438, 60, 1439,
	1440, 767, 1308, 1444, 1445, 1446, 1447, 1448, 1524, 521,
	1007, 521, 521, 1505, 1455, 1456, 1457, 703, 1459, 1460,
	1903, 1462, 1463, 1464, 1465, 2180, 1467, 1468, 1469, 917,
	917, 917, 917, 917, 2178, 2164, 1520, 1521, 666, 667,
	1760, 1708, 1516, 1691, 917, 1566, 675, 1491, 1058, 1022,
	1106, 1486, 689, 1484, 1711, 1473, 1487, 917, 1485, 1488,
	1561, 1225, 1226, 1710, 1483, 1482, 1552, 2118, 1554, 1555,
	1556, 1557, 2094, 1563, 1155, 362, 363, 1629, 1388, 756,
	757, 1181, 1546, 1547, 1548, 1550, 2115, 1397, 1396, 1919,
	1597, 1782, 1525, 1737, 1736, 1519, 2038, 110, 110, 110,
	1590, 1589, 2041, 2085, 1502, 1593, 1503, 754, 1441, 1443,
	1595, 1602, 509, 1666, 1610, 1449, 1450, 1451, 1452, 110,
	1054, 1592, 1600, 1612, 1616, 2084, 1659, 509, 1609, 1594,
	1619, 1620, 1634, 1963, 2108, 110, 1961, 2032, 2031, 110,
	843, 1544, 1545, 1696, 110, 60, 345, 1591, 1551, 1553,
	110, 1636, 509, 509, 715, 942, 699, 1640, 1558, 1635,
	519, 1653, 1652, 1330, 1829, 1898, 716, 1715, 1716, 1717,
	1568, 1095, 1096, 1021, 1361, 1569, 1638, 1695, 477, 1349,
	1692, 756, 757, 1949, 1229, 1009, 1395, 1654, 1655, 353,
	1656, 1657, 359, 360, 1394, 2111, 2110, 1718, 1108, 1109,
	2082, 1586, 1663, 1664, 2042, 1980, 1918, 354, 72, 1979,
	1905, 1500, 1714, 1571, 1572, 1573, 2182, 2181, 1725, 1424,
	1421, 1709, 1049, 759, 2181, 2182, 1991, 1735, 1639, 1088,
	405, 74, 1712, 2020, 47, 2022, 19, 2021, 18, 2023,
	20, 76, 1634, 1267, 1729, 1267, 1032, 1033, 1730, 1731,
	50, 1724, 1758, 1759, 69, 1676, 1677, 1, 1679, 1680,
	1713, 1682, 1683, 1684, 1685, 2039, 1687, 1688, 1689, 1960,
	1672, 1673, 2024, 21, 1882, 1678, 2019, 15, 1681, 2018,
	14, 843, 1867, 1686, 1866, 1160, 1161, 2012, 10, 2026,
	25, 2017, 13, 1575, 509, 509, 509, 110, 110, 110,
	1574, 1734, 110, 918, 2014, 12, 702, 509, 509, 1740,
	1741, 2083, 479, 2013, 11, 2037, 1744, 1697, 2011, 9,
	1078, 1601, 1792, 1747, 1002, 1003, 1774, 1899, 1775, 1816,
	1369, 507, 2047, 1274, 1773, 1702, 1264, 1779, 83, 1743,
	1776, 1768, 110, 509, 484, 82, 1342, 110, 668, 1889,
	313, 1271, 1530, 2040, 704, 1786, 1529, 1526, 1769, 1541,
	1720, 1286, 1528, 1527, 1822, 2035, 1531, 1798, 1667, 1668,
	1669, 1670, 1671, 1259, 950, 948, 949, 947, 952, 951,
	1285, 317, 472, 1805, 937, 1763, 760, 91, 1036, 1037,
	1038, 51, 1892, 110, 1615, 1363, 86, 1742, 1056, 767,
	1839, 1047, 1048, 677, 1800, 319, 826, 1393, 1506, 478,
	2078, 1698, 1848, 1849, 816, 817, 809, 810, 811, 812,
	813, 814, 815, 808, 2099, 1830, 818, 1514, 1854, 719,
	60, 1844, 1802, 1803, 2053, 1804, 1978, 1081, 1806, 1904,
	1808, 1429, 1850, 855, 1324, 917, 1770, 1845, 1171, 379,
	2056, 1110, 1799, 394, 1267, 393, 392, 389, 1801, 390,
	1348, 1101, 1470, 800, 1754, 377, 1855, 369, 916, 1810,
	1811, 1824, 1825, 509, 909, 1360, 1220, 1826, 1218, 1888,
	1827, 1217, 1346, 1023, 467, 1828, 1707, 1703, 915, 1631,
	1797, 1878, 684, 332, 1817, 1883, 1985, 1105, 31, 73,
	1896, 364, 1696, 1729, 26, 1923, 17, 1856, 1884, 509,
	509, 690, 22, 1832, 1833, 1834, 16, 1837, 1853, 503,
	35, 1901, 39, 1897, 38, 37, 1570, 1389, 1390, 1843,
	721, 1332, 342, 1062, 1890, 1060, 1695, 1928, 2170, 523,
	2102, 523, 523, 2076, 110, 2027, 23, 2148, 1948, 523,
	1950, 4, 110, 110, 1920, 523, 110, 110, 355, 28,
	110, 110, 110, 1927, 1929, 2, 1941, 1930, 1940, 1973,
	0, 1935, 1879, 1880, 1881, 1947, 0, 509, 0, 1908,
	1909, 1910, 1911, 1912, 1951, 0, 0, 1915, 1916, 0,
	1412, 0, 1696, 0, 60, 0, 0, 0, 1976, 1857,
	0, 1859, 1864, 0, 0, 0, 0, 0, 0, 0,
	1432, 1972, 1965, 0, 0, 0, 0, 1968, 0, 0,
	0, 60, 1943, 1971, 1944, 1998, 1695, 0, 0, 0,
	0, 2009, 0, 2016, 1913, 2008, 1992, 1990, 0, 1917,
	0, 2007, 0, 2010, 110, 509, 0, 509, 1996, 2000,
	2025, 0, 110, 110, 1906, 0, 110, 0, 2015, 0,
	0, 0, 0, 1932, 0, 1933, 1934, 0, 0, 0,
	0, 0, 2045, 0, 2055, 2059, 0, 1922, 2051, 2044,
	0, 0, 0, 110, 2050, 110, 110, 0, 2064, 2073,
	0, 2043, 110, 0, 0, 0, 0, 0, 477, 2046,
	2065, 60, 0, 479, 1901, 1267, 0, 0, 0, 938,
	0, 2009, 0, 2016, 0, 2008, 110, 110, 110, 110,
	110, 2007, 0, 2010, 1008, 1981, 1982, 1983, 1984, 0,
	2025, 0, 1988, 1989, 2081, 0, 2077, 0, 2015, 1329,
	0, 1331, 0, 0, 0, 0, 0, 0, 0, 523,
	523, 2092, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1998, 0, 0, 2112, 0, 1993, 0, 0, 0,
	0, 0, 0, 0, 0, 2107, 60, 60, 0, 0,
	2117, 2116, 0, 2120, 0, 0, 0, 2009, 2059, 2016,
	2125, 2008, 2114, 2006, 2119, 60, 0, 2007, 2149, 2010,
	2113, 2153, 2060, 2155, 0, 2152, 2025, 0, 0, 60,
	2066, 2151, 2140, 2150, 2015, 0, 0, 2158, 0, 0,
	0, 2159, 0, 0, 0, 0, 0, 60, 60, 0,
	2171, 2175, 2165, 0, 0, 2167, 0, 60, 2179, 2171,
	60, 0, 2177, 0, 0, 60, 2189, 2171, 2186, 0,
	110, 110, 110, 110, 110, 60, 2199, 2171, 0, 60,
	0, 0, 110, 0, 2089, 110, 0, 2203, 1661, 110,
	1820, 0, 60, 2006, 2171, 60, 0, 0, 110, 0,
	0, 2097, 60, 2212, 2171, 0, 60, 0, 2171, 0,
	0, 523, 523, 523, 0, 0, 0, 0, 0, 509,
	0, 0, 0, 0, 523, 523, 0, 0, 0, 327,
	0, 807, 806, 816, 817, 809, 810, 811, 812, 813,
	814, 815, 808, 0, 0, 818, 0, 1156, 1158, 0,
	0, 0, 1164, 1167, 1168, 1169, 0, 1719, 0, 0,
	523, 0, 2192, 0, 0, 0, 324, 1815, 0, 2006,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1179,
	509, 1182, 1183, 0, 0, 0, 1187, 0, 1189, 1190,
	0, 0, 509, 110, 509, 509, 1197, 1198, 1199, 0,
	1201, 1202, 0, 1204, 1205, 1206, 1207, 0, 1209, 1210,
	1211, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 0, 0, 0, 0, 0, 309, 0, 2205,
	2206, 0, 0, 0, 0, 0, 0, 318, 325, 326,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 523,
	0, 0, 0, 0, 0, 0, 509, 807, 806, 816,
	817, 809, 810, 811, 812, 813, 814, 815, 808, 0,
	0, 818, 0, 315, 0, 0, 316, 0, 1788, 0,
	0, 323, 0, 0, 0, 0, 1582, 0, 1584, 1585,
	1150, 0, 0, 0, 0, 0, 509, 806, 816, 817,
	809, 810, 811, 812, 813, 814, 815, 808, 479, 0,
	818, 0, 0, 0, 0, 0, 0, 0, 0, 1819,
	0, 0, 0, 0, 0, 0, 1177, 1178, 509, 509,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	307, 0, 0, 0, 0, 0, 509, 0, 0, 0,
	0, 0, 0, 843, 0, 0, 0, 0, 0, 0,
	0, 0, 1840, 0, 0, 1842, 509, 509, 0, 509,
	0, 509, 320, 310, 311, 0, 321, 322, 330, 0,
	479, 0, 312, 314, 0, 308, 329, 328, 0, 0,
	0, 0, 523, 0, 523, 0, 0, 0, 0, 29,
	0, 61, 32, 33, 0, 0, 0, 1398, 0, 0,
	0, 0, 0, 58, 0, 0, 0, 0, 0, 67,
	110, 0, 0, 34, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 110, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 919, 0,
	110, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	68, 0, 523, 0, 523, 0, 509, 0, 0, 110,
	509, 0, 1428, 0, 0, 0, 0, 509, 0, 0,
	509, 509, 509, 0, 0, 2028, 110, 0, 0, 0,
	2139, 107, 0, 0, 0, 0, 0, 1453, 1454, 0,
	335, 0, 1458, 0, 0, 1461, 0, 0, 0, 0,
	1466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 36, 63, 41, 40, 43, 468,
	0, 0, 0, 0, 492, 0, 494, 0, 0, 0,
	2029, 0, 0, 523, 0, 0, 0, 504, 0, 0,
	0, 0, 0, 718, 0, 515, 44, 66, 65, 0,
	0, 0, 0, 42, 0, 0, 0, 0, 0, 509,
	509, 509, 0, 0, 0, 843, 0, 0, 509, 0,
	0, 0, 0, 0, 0, 0, 509, 0, 0, 0,
	0, 0, 0, 0, 1637, 0, 108, 0, 0, 331,
	0, 0, 0, 0, 0, 108, 0, 57, 0, 2030,
	64, 0, 48, 49, 110, 807, 806, 816, 817, 809,
	810, 811, 812, 813, 814, 815, 808, 0, 1814, 818,
	0, 368, 0, 0, 470, 480, 2054, 2058, 0, 108,
	0, 108, 0, 0, 0, 509, 0, 0, 0, 0,
	0, 0, 108, 29, 0, 61, 32, 33, 0, 0,
	108, 0, 0, 0, 0, 0, 479, 58, 0, 0,
	0, 0, 1813, 67, 0, 0, 0, 34, 0, 0,
	0, 0, 0, 0, 0, 2074, 2075, 0, 0, 509,
	509, 0, 509, 0, 0, 509, 0, 110, 0, 110,
	0, 0, 0, 0, 62, 0, 509, 0, 0, 0,
	0, 0, 0, 0, 68, 0, 523, 509, 807, 806,
	816, 817, 809, 810, 811, 812, 813, 814, 815, 808,
	0, 0, 818, 0, 0, 0, 0, 0, 0, 2028,
	0, 1812, 0, 0, 0, 0, 0, 0, 0, 509,
	2058, 0, 0, 0, 517, 0, 509, 110, 0, 0,
	0, 2126, 807, 806, 816, 817, 809, 810, 811, 812,
	813, 814, 815, 808, 0, 0, 818, 1567, 36, 63,
	41, 40, 43, 0, 0, 509, 0, 0, 0, 523,
	0, 523, 523, 0, 2029, 0, 0, 709, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	44, 66, 65, 0, 0, 0, 0, 42, 0, 0,
	0, 509, 0, 0, 0, 0, 0, 0, 509, 509,
	2190, 807, 806, 816, 817, 809, 810, 811, 812, 813,
	814, 815, 808, 0, 0, 818, 0, 0, 509, 0,
	0, 0, 0, 523, 0, 0, 110, 0, 0, 108,
	802, 57, 805, 2030, 64, 0, 48, 49, 0, 819,
	820, 821, 822, 823, 824, 825, 0, 803, 804, 801,
	807, 806, 816, 817, 809, 810, 811, 812, 813, 814,
	815, 808, 0, 1665, 818, 0, 0, 0, 0, 0,
	0, 0, 108, 509, 0, 0, 0, 0, 0, 0,
	0, 0, 911, 0, 920, 0, 0, 0, 0, 0,
	0, 0, 479, 0, 0, 1699, 1701, 0, 0, 0,
	0, 0, 0, 509, 945, 0, 0, 0, 0, 0,
	0, 0, 509, 1701, 0, 0, 0, 0, 1409, 0,
	1016, 0, 509, 0, 468, 0, 0, 0, 62, 1024,
	0, 0, 0, 523, 523, 0, 523, 0, 1728, 807,
	806, 816, 817, 809, 810, 811, 812, 813, 814, 815,
	808, 0, 0, 818, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 108, 108, 108,
	0, 0, 0, 0, 0, 0, 480, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 108, 0, 0, 0, 108,
	0, 0, 0, 1781, 108, 0, 0, 1785, 0, 0,
	1030, 0, 0, 0, 1789, 0, 0, 1794, 1795, 1796,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1039, 1040, 1041, 0, 0, 1042, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1080, 0, 0,
	0, 0, 1087, 0, 0, 0, 1847, 1847, 1847, 0,
	0, 0, 0, 0, 0, 523, 0, 0, 0, 0,
	0, 0, 0, 1847, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1107, 0,
	0, 0, 0, 0, 0, 0, 0, 108, 108, 108,
	0, 0, 108, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 523, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 108, 0, 0, 0, 0, 108, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1924, 1925, 0, 1926,
	0, 0, 1847, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1728, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 108, 1728, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1970, 0, 0, 0,
	0, 0, 1030, 1847, 0, 0, 0, 0, 0, 1214,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1997, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 368,
	368, 0, 0, 0, 368, 368, 368, 368, 0, 0,
	0, 480, 0, 0, 0, 0, 0, 0, 1728, 0,
	0, 0, 0, 0, 0, 523, 523, 0, 0, 0,
	0, 368, 368, 368, 368, 0, 0, 368, 368, 368,
	368, 368, 479, 0, 0, 2067, 0, 0, 368, 368,
	368, 0, 368, 368, 0, 368, 368, 368, 368, 1328,
	368, 368, 368, 0, 108, 0, 0, 1336, 1337, 0,
	0, 1338, 108, 1240, 0, 0, 108, 108, 0, 0,
	108, 1249, 1030, 480, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1030, 0, 0, 1347, 0,
	2091, 0, 0, 0, 0, 0, 0, 1356, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1847, 1381, 1382, 1383, 1384, 1385, 0, 0, 0, 1728,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1847,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 108, 0, 0, 0, 0, 0,
	0, 0, 108, 108, 0, 0, 108, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	972, 0, 0, 108, 0, 1350, 1351, 0, 0, 0,
	0, 0, 108, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 108, 108, 108,
	108, 0, 0, 0, 0, 0, 1030, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 368,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 959, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 368, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 368, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 973, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 368,
	368, 0, 0, 0, 368, 0, 0, 368, 0, 0,
	0, 0, 368, 0, 0, 0, 0, 0, 0, 480,
	108, 108, 108, 108, 108, 0, 0, 0, 0, 0,
	0, 0, 1240, 0, 0, 108, 0, 0, 1583, 1240,
	0, 986, 989, 990, 991, 992, 993, 994, 108, 995,
	996, 997, 998, 999, 1000, 1001, 0, 974, 975, 976,
	977, 953, 957, 987, 954, 960, 956, 958, 955, 0,
	961, 962, 963, 964, 965, 966, 967, 968, 969, 970,
	971, 978, 979, 980, 981, 982, 983, 984, 985, 0,
	0, 0, 1630, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 988, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 108, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 368, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 368, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1757, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 480, 0, 0, 0, 0,
	1767, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1771, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1784, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	108, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 108, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	108, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1865,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 108, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1977, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1240, 0, 1240,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2069, 0, 0, 0, 0, 0, 108, 0, 0,
	642, 622, 0, 580, 645, 552, 569, 656, 570, 573,
	611, 538, 592, 210, 567, 539, 0, 556, 529, 563,
	530, 553, 582, 149, 551, 624, 595, 644, 176, 607,
	0, 142, 184, 182, 0, 0, 0, 216, 268, 643,
	588, 0, 651, 179, 604, 0, 259, 197, 0, 0,
	584, 631, 590, 620, 579, 613, 545, 603, 646, 568,
	609, 647, 0, 0, 0, 508, 0, 0, 0, 1268,
	1269, 0, 0, 0, 0, 0, 133, 0, 606, 641,
	565, 608, 610, 527, 605, 480, 533, 540, 655, 637,
	559, 560, 561, 1515, 0, 0, 108, 0, 0, 0,
	583, 591, 617, 576, 0, 0, 0, 0, 0, 0,
	0, 0, 557, 0, 601, 0, 0, 0, 541, 534,
	0, 0, 581, 0, 0, 0, 544, 0, 558, 618,
	0, 525, 157, 0, 0, 621, 636, 578, 0, 294,
	640, 575, 574, 228, 0, 264, 160, 177, 127, 112,
	122, 0, 159, 206, 237, 245, 566, 526, 625, 554,
	564, 143, 562, 239, 214, 285, 0, 598, 220, 238,
	180, 274, 230, 283, 284, 161, 295, 296, 269, 292,
	300, 256, 0, 0, 0, 0, 0, 0, 173, 577,
	612, 555, 140, 615, 602, 630, 255, 128, 270, 196,
	201, 137, 139, 138, 123, 250, 272, 132, 141, 260,
	265, 115, 267, 282, 134, 249, 117, 280, 263, 194,
	170, 171, 116, 0, 235, 148, 156, 145, 209, 0,
	0, 0, 277, 278, 144, 303, 124, 291, 119, 125,
	290, 203, 0, 0, 0, 273, 281, 195, 188, 0,
	118, 279, 193, 187, 175, 152, 163, 225, 183, 226,
	164, 199, 198, 200, 0, 531, 0, 261, 288, 304,
	185, 130, 550, 0, 271, 298, 299, 0, 0, 131,
	155, 151, 224, 202, 126, 166, 258, 174, 181, 234,
	302, 213, 240, 135, 287, 257, 548, 549, 546, 0,
	547, 593, 594, 648, 649, 650, 619, 542, 0, 632,
	633, 0, 623, 638, 639, 614, 657, 571, 572, 532,
	535, 536, 537, 543, 585, 586, 597, 600, 628, 627,
	626, 629, 634, 653, 652, 654, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 596, 111, 120,
	178, 301, 232, 154, 289, 528, 147, 0, 0, 587,
	589, 599, 616, 113, 114, 121, 129, 136, 146, 150,
	153, 158, 162, 165, 167, 168, 169, 172, 186, 189,
	190, 191, 192, 204, 205, 207, 208, 211, 212, 215,
	217, 218, 219, 221, 222, 223, 227, 229, 231, 233,
	236, 241, 242, 243, 244, 246, 247, 248, 251, 252,
	253, 254, 262, 266, 275, 276, 286, 293, 297, 635,
	642, 622, 0, 580, 645, 552, 569, 656, 570, 573,
	611, 538, 592, 210, 567, 539, 0, 556, 529, 563,
	530, 553, 582, 149, 551, 624, 595, 644, 176, 607,
	0, 142, 184, 182, 0, 0, 0, 216, 268, 643,
	588, 0, 651, 179, 604, 0, 259, 197, 0, 0,
	584, 631, 590, 620, 579, 613, 545, 603, 646, 568,
	609, 647, 0, 0, 0, 508, 0, 0, 0, 1268,
	1269, 0, 0, 0, 0, 0, 133, 0, 606, 641,
	565, 608, 610, 527, 605, 0, 533, 540, 655, 637,
	559, 560, 561, 0, 0, 0, 0, 0, 0, 0,
	583, 591, 617, 576, 0, 0, 0, 0, 0, 0,
	0, 0, 557, 0, 601, 0, 0, 0, 541, 534,
	0, 0, 581, 0, 0, 0, 544, 0, 558, 618,
	0, 525, 157, 0, 0, 621, 636, 578, 0, 294,
	640, 575, 574, 228, 0, 264, 160, 177, 127, 112,
	122, 0, 159, 206, 237, 245, 566, 526, 625, 554,
	564, 143, 562, 239, 214, 285, 0, 598, 220, 238,
	180, 274, 230, 283, 284, 161, 295, 296, 269, 292,
	300, 256, 0, 0, 0, 0, 0, 0, 173, 577,
	612, 555, 140, 615, 602, 630, 255, 128, 270, 196,
	201, 137, 139, 138, 123, 250, 272, 132, 141, 260,
	265, 115, 267, 282, 134, 249, 117, 280, 263, 194,
	170, 171, 116, 0, 235, 148, 156, 145, 209, 0,
	0, 0, 277, 278, 144, 303, 124, 291, 119, 125,
	290, 203, 0, 0, 0, 273, 281, 195, 188, 0,
	118, 279, 193, 187, 175, 152, 163, 225, 183, 226,
	164, 199, 198, 200, 0, 531, 0, 261, 288, 304,
	185, 130, 550, 0, 271, 298, 299, 0, 0, 131,
	155, 151, 224, 202, 126, 166, 258, 174, 181, 234,
	302, 213, 240, 135, 287, 257, 548, 549, 546, 0,
	547, 593, 594, 648, 649, 650, 619, 542, 0, 632,
	633, 0, 623, 638, 639, 614, 657, 571, 572, 532,
	535, 536, 537, 543, 585, 586, 597, 600, 628, 627,
	626, 629, 634, 653, 652, 654, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 596, 111, 120,
	178, 301, 232, 154, 289, 528, 147, 0, 0, 587,
	589, 599, 616, 113, 114, 121, 129, 136, 146, 150,
	153, 158, 162, 165, 167, 168, 169, 172, 186, 189,
	190, 191, 192, 204, 205, 207, 208, 211, 212, 215,
	217, 218, 219, 221, 222, 223, 227, 229, 231, 233,
	236, 241, 242, 243, 244, 246, 247, 248, 251, 252,
	253, 254, 262, 266, 275, 276, 286, 293, 297, 635,
	642, 622, 0, 580, 645, 552, 569, 656, 570, 573,
	611, 538, 592, 210, 567, 539, 0, 556, 529, 563,
	530, 553, 582, 149, 551, 624, 595, 644, 176, 607,
	0, 142, 184, 182, 0, 0, 0, 216, 268, 643,
	588, 0, 651, 179, 604, 0, 259, 197, 0, 0,
	584, 631, 590, 620, 579, 613, 545, 603, 646, 568,
	609, 647, 0, 0, 0, 508, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 0, 606, 641,
	565, 608, 610, 527, 605, 0, 533, 540, 655, 637,
	559, 560, 561, 0, 0, 0, 0, 0, 0, 0,
	583, 591, 617, 576, 0, 0, 0, 0, 0, 0,
	1633, 0, 557, 0, 601, 0, 0, 0, 541, 534,
	0, 0, 581, 0, 0, 0, 544, 0, 558, 618,
	0, 525, 157, 0, 0, 621, 636, 578, 0, 294,
	640, 575, 574, 228, 0, 264, 160, 177, 127, 112,
	122, 0, 159, 206, 237, 245, 566, 526, 625, 554,
	564, 143, 562, 239, 214, 285, 0, 598, 220, 238,
	180, 274, 230, 283, 284, 161, 295, 296, 269, 292,
	300, 256, 0, 0, 0, 0, 0, 0, 173, 577,
	612, 555, 140, 615, 602, 630, 255, 128, 270, 196,
	201, 137, 139, 138, 123, 250, 272, 132, 141, 260,
	265, 115, 267, 282, 134, 249, 117, 280, 263, 194,
	170, 171, 116, 0, 235, 148, 156, 145, 209, 0,
	0, 0, 277, 278, 144, 303, 124, 291, 119, 125,
	290, 203, 0, 0, 0, 273, 281, 195, 188, 0,
	118, 279, 193, 187, 175, 152, 163, 225, 183, 226,
	164, 199, 198, 200, 0, 531, 0, 261, 288, 304,
	185, 130, 550, 0, 271, 298, 299, 0, 0, 131,
	155, 151, 224, 202, 126, 166, 258, 174, 181, 234,
	302, 213, 240, 135, 287, 257, 548, 549, 546, 0,
	547, 593, 594, 648, 649, 650, 619, 542, 0, 632,
	633, 0, 623, 638, 639, 614, 657, 571, 572, 532,
	535, 536, 537, 543, 585, 586, 597, 600, 628, 627,
	626, 629, 634, 653, 652, 654, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 596, 111, 120,
	178, 301, 232, 154, 289, 528, 147, 0, 0, 587,
	589, 599, 616, 113, 114, 121, 129, 136, 146, 150,
	153, 158, 162, 165, 167, 168, 169, 172, 186, 189,
	190, 191, 192, 204, 205, 207, 208, 211, 212, 215,
	217, 218, 219, 221, 222, 223, 227, 229, 231, 233,
	236, 241, 242, 243, 244, 246, 247, 248, 251, 252,
	253, 254, 262, 266, 275, 276, 286, 293, 297, 635,
	642, 622, 0, 580, 645, 552, 569, 656, 570, 573,
	611, 538, 592, 210, 567, 539, 0, 556, 529, 563,
	530, 553, 582, 149, 551, 624, 595, 644, 176, 607,
	0, 142, 184, 182, 0, 0, 0, 216, 268, 643,
	588, 0, 651, 179, 604, 0, 259, 197, 0, 0,
	584, 631, 590, 620, 579, 613, 545, 603, 646, 568,
	609, 647, 68, 0, 0, 508, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 0, 606, 641,
	565, 608, 610, 527, 605, 0, 533, 540, 655, 637,
	559, 560, 561, 0, 0, 0, 0, 0, 0, 0,
	583, 591, 617, 576, 0, 0, 0, 0, 0, 0,
	0, 0, 557, 0, 601, 0, 0, 0, 541, 534,
	0, 0, 581, 0, 0, 0, 544, 0, 558, 618,
	0, 525, 157, 0, 0, 621, 636, 578, 0, 294,
	640, 575, 574, 228, 0, 264, 160, 177, 127, 112,
	122, 0, 159, 206, 237, 245, 566, 526, 625, 554,
	564, 143, 562, 239, 214, 285, 0, 598, 220, 238,
	180, 274, 230, 283, 284, 161, 295, 296, 269, 292,
	300, 256, 0, 0, 0, 0, 0, 0, 173, 577,
	612, 555, 140, 615, 602, 630, 255, 128, 270, 196,
	201, 137, 139, 138, 123, 250, 272, 132, 141, 260,
	265, 115, 267, 282, 134, 249, 117, 280, 263, 194,
	170, 171, 116, 0, 235, 148, 156, 145, 209, 0,
	0, 0, 277, 278, 144, 303, 124, 291, 119, 125,
	290, 203, 0, 0, 0, 273, 281, 195, 188, 0,
	118, 279, 193, 187, 175, 152, 163, 225, 183, 226,
	164, 199, 198, 200, 0, 531, 0, 261, 288, 304,
	185, 130, 550, 0, 271, 298, 299, 0, 0, 131,
	155, 151, 224, 202, 126, 166, 258, 174, 181, 234,
	302, 213, 240, 135, 287, 257, 548, 549, 546, 0,
	547, 593, 594, 648, 649, 650, 619, 542, 0, 632,
	633, 0, 623, 638, 639, 614, 657, 571, 572, 532,
	535, 536, 537, 543, 585, 586, 597, 600, 628, 627,
	626, 629, 634, 653, 652, 654, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 596, 111, 120,
	178, 301, 232, 154, 289, 528, 147, 0, 0, 587,
	589, 599, 616, 113, 114, 121, 129, 136, 146, 150,
	153, 158, 162, 165, 167, 168, 169, 172, 186, 189,
	190, 191, 192, 204, 205, 207, 208, 211, 212, 215,
	217, 218, 219, 221, 222, 223, 227, 229, 231, 233,
	236, 241, 242, 243, 244, 246, 247, 248, 251, 252,
	253, 254, 262, 266, 275, 276, 286, 293, 297, 635,
	642, 622, 0, 580, 645, 552, 569, 656, 570, 573,
	611, 538, 592, 210, 567, 539, 0, 556, 529, 563,
	530, 553, 582, 149, 551, 624, 595, 644, 176, 607,
	0, 142, 184, 182, 0, 0, 0, 216, 268, 643,
	588, 0, 651, 179, 604, 0, 259, 197, 0, 0,
	584, 631, 590, 620, 579, 613, 545, 603, 646, 568,
	609, 647, 0, 0, 0, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 0, 606, 641,
	565, 608, 610, 527, 605, 0, 533, 540, 655, 637,
	559, 560, 561, 0, 0, 0, 0, 0, 0, 0,
	583, 591, 617, 576, 0, 0, 0, 0, 0, 0,
	1250, 0, 557, 0, 601, 0, 0, 0, 541, 534,
	0, 0, 581, 0, 0, 0, 544, 0, 558, 618,
	0, 525, 157, 0, 0, 621, 636, 578, 0, 294,
	640, 575, 574, 228, 0, 264, 160, 177, 127, 112,
	122, 0, 159, 206, 237, 245, 566, 526, 625, 554,
	564, 143, 562, 239, 214, 285, 0, 598, 220, 238,
	180, 274, 230, 283, 284, 161, 295, 296, 269, 292,
	300, 256, 0, 0, 0, 0, 0, 0, 173, 577,
	612, 555, 140, 615, 602, 630, 255, 128, 270, 196,
	201, 137, 139, 138, 123, 250, 272, 132, 141, 260,
	265, 115, 267, 282, 134, 249, 117, 280, 263, 194,
	170, 171, 116, 0, 235, 148, 156, 145, 209, 0,
	0, 0, 277, 278, 144, 303, 124, 291, 119, 125,
	290, 203, 0, 0, 0, 273, 281, 195, 188, 0,
	118, 279, 193, 187, 175, 152, 163, 225, 183, 226,
	164, 199, 198, 200, 0, 531, 0, 261, 288, 304,
	185, 130, 550, 0, 271, 298, 299, 0, 0, 131,
	155, 151, 224, 202, 126, 166, 258, 174, 181, 234,
	302, 213, 240, 135, 287, 257, 548, 549, 546, 0,
	547, 593, 594, 648, 649, 650, 619, 542, 0, 632,
	633, 0, 623, 638, 639, 614, 657, 571, 572, 532,
	535, 536, 537, 543, 585, 586, 597, 600, 628, 627,
	626, 629, 634, 653, 652, 654, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 596, 111, 120,
	178, 301, 232, 154, 289, 528, 147, 0, 0, 587,
	589, 599, 616, 113, 114, 121, 129, 136, 146, 150,
	153, 158, 162, 165, 167, 168, 169, 172, 186, 189,
	190, 191, 192, 204, 205, 207, 208, 211, 212, 215,
	217, 218, 219, 221, 222, 223, 227, 229, 231, 233,
	236, 241, 242, 243, 244, 246, 247, 248, 251, 252,
	253, 254, 262, 266, 275, 276, 286, 293, 297, 635,
	642, 622, 0, 580, 645, 552, 569, 656, 570, 573,
	611, 538, 592, 210, 567, 539, 0, 556, 529, 563,
	530, 553, 582, 149, 551, 624, 595, 644, 176, 607,
	0, 142, 184, 182, 0, 0, 0, 216, 268, 643,
	588, 0, 651, 179, 604, 0, 259, 197, 0, 0,
	584, 631, 590, 620, 579, 613, 545, 603, 646, 568,
	609, 647, 0, 0, 0, 373, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 0, 606, 641,
	565, 608, 610, 527, 605, 0, 533, 540, 655, 637,
	559, 560, 561, 0, 0, 0, 0, 0, 0, 0,
	583, 591, 617, 576, 0, 0, 0, 0, 0, 0,
	1116, 0, 557, 0, 601, 0, 0, 0, 541, 534,
	0, 0, 581, 0, 0, 0, 544, 0, 558, 618,
	0, 525, 157, 0, 0, 621, 636, 578, 0, 294,
	640, 575, 574, 228, 0, 264, 160, 177, 127, 112,
	122, 0, 159, 206, 237, 245, 566, 526, 625, 554,
	564, 143, 562, 239, 214, 285, 0, 598, 220, 238,
	180, 274, 230, 283, 284, 161, 295, 296, 269, 292,
	300, 256, 0, 0, 0, 0, 0, 0, 173, 577,
	612, 555, 140, 615, 602, 630, 255, 128, 270, 196,
	201, 137, 139, 138, 123, 250, 272, 132, 141, 260,
	265, 115, 267, 282, 134, 249, 117, 280, 263, 194,
	170, 171, 116, 0, 235, 148, 156, 145, 209, 0,
	0, 0, 277, 278, 144, 303, 124, 291, 119, 125,
	290, 203, 0, 0, 0, 273, 281, 195, 188, 0,
	118, 279, 193, 187, 175, 152, 163, 225, 183, 226,
	164, 199, 198, 200, 0, 531, 0, 261, 288, 304,
	185, 130, 550, 0, 271, 298, 299, 0, 0, 131,
	155, 151, 224, 202, 126, 166, 258, 174, 181, 234,
	302, 213, 240, 135, 287, 257, 548, 549, 546, 0,
	547, 593, 594, 648, 649, 650, 619, 542, 0, 632,
	633, 0, 623, 638, 639, 614, 657, 571, 572, 532,
	535, 536, 537, 543, 585, 586, 597, 600, 628, 627,
	626, 629, 634, 653, 652, 654, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 596, 111, 120,
	178, 301, 232, 154, 289, 528, 147, 0, 0, 587,
	589, 599, 616, 113, 114, 121, 129, 136, 146, 150,
	153, 158, 162, 165, 167, 168, 169, 172, 186, 189,
	190, 191, 192, 204, 205, 207, 208, 211, 212, 215,
	217, 218, 219, 221, 222, 223, 227, 229, 231, 233,
	236, 241, 242, 243, 244, 246, 247, 248, 251, 252,
	253, 254, 262, 266, 275, 276, 286, 293, 297, 635,
	642, 622, 0, 580, 645, 552, 569, 656, 570, 573,
	611, 538, 592, 210, 567, 539, 0, 556, 529, 563,
	530, 553, 582, 149, 551, 624, 595, 644, 176, 607,
	0, 142, 184, 182, 0, 0, 0, 216, 268, 643,
	588, 0, 651, 179, 604, 0, 259, 197, 0, 0,
	584, 631, 590, 620, 579, 613, 545, 603, 646, 568,
	609, 647, 0, 0, 0, 508, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 0, 606, 641,
	565, 608, 610, 527, 605, 0, 533, 540, 655, 637,
	559, 560, 561, 0, 0, 0, 0, 0, 0, 0,
	583, 591, 617, 576, 0, 0, 0, 0, 0, 0,
	0, 0, 557, 0, 601, 0, 0, 0, 541, 534,
	0, 0, 581, 0, 0, 0, 544, 0, 558, 618,
	0, 525, 157, 0, 0, 621, 636, 578, 0, 294,
	640, 575, 574, 228, 0, 264, 160, 177, 127, 112,
	122, 0, 159, 206, 237, 245, 566, 526, 625, 554,
	564, 143, 562, 239, 214, 285, 0, 598, 220, 238,
	180, 274, 230, 283, 284, 161, 295, 296, 269, 292,
	300, 256, 0, 0, 0, 0, 0, 0, 173, 577,
	612, 555, 140, 615, 602, 630, 255, 128, 270, 196,
	201, 137, 139, 138, 123, 250, 272, 132, 141, 260,
	265, 115, 267, 282, 134, 249, 117, 280, 263, 194,
	170, 171, 116, 0, 235, 148, 156, 145, 209, 0,
	0, 0, 277, 278, 144, 303, 124, 291, 119, 125,
	290, 203, 0, 0, 0, 273, 281, 195, 188, 0,
	118, 279, 193, 187, 175, 152, 163, 225, 183, 226,
	164, 199, 198, 200, 0, 531, 0, 261, 288, 304,
	185, 130, 550, 0, 271, 298, 299, 0, 0, 131,
	155, 151, 224, 202, 126, 166, 258, 174, 181, 234,
	302, 213, 240, 135, 287, 257, 548, 549, 546, 0,
	547, 593, 594, 648, 649, 650, 619, 542, 0, 632,
	633, 0, 623, 638, 639, 614, 657, 571, 572, 532,
	535, 536, 537, 543, 585, 586, 597, 600, 628, 627,
	626, 629, 634, 653, 652, 654, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 596, 111, 120,
	178, 301, 232, 154, 289, 528, 147, 0, 0, 587,
	589, 599, 616, 113, 114, 121, 129, 136, 146, 150,
	153, 158, 162, 165, 167, 168, 169, 172, 186, 189,
	190, 191, 192, 204, 205, 207, 208, 211, 212, 215,
	217, 218, 219, 221, 222, 223, 227, 229, 231, 233,
	236, 241, 242, 243, 244, 246, 247, 248, 251, 252,
	253, 254, 262, 266, 275, 276, 286, 293, 297, 635,
	642, 622, 0, 580, 645, 552, 569, 656, 570, 573,
	611, 538, 592, 210, 567, 539, 0, 556, 529, 563,
	530, 553, 582, 149, 551, 624, 595, 644, 176, 607,
	0, 142, 184, 182, 0, 0, 0, 216, 268, 643,
	588, 0, 651, 179, 604, 0, 259, 197, 0, 0,
	584, 631, 590, 620, 579, 613, 545, 603, 646, 568,
	609, 647, 0, 0, 0, 373, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 0, 606, 641,
	565, 608, 610, 527, 605, 0, 533, 540, 655, 637,
	559, 560, 561, 0, 0, 0, 0, 0, 0, 0,
	583, 591, 617, 576, 0, 0, 0, 0, 0, 0,
	0, 0, 557, 0, 601, 0, 0, 0, 541, 534,
	0, 0, 581, 0, 0, 0, 544, 0, 558, 618,
	0, 525, 157, 0, 0, 621, 636, 578, 0, 294,
	640, 575, 574, 228, 0, 264, 160, 177, 127, 112,
	122, 0, 159, 206, 237, 245, 566, 526, 625, 554,
	564, 143, 562, 239, 214, 285, 0, 598, 220, 238,
	180, 274, 230, 283, 284, 161, 295, 296, 269, 292,
	300, 256, 0, 0, 0, 0, 0, 0, 173, 577,
	612, 555, 140, 615, 602, 630, 255, 128, 270, 196,
	201, 137, 139, 138, 123, 250, 272, 132, 141, 260,
	265, 115, 267, 282, 134, 249, 117, 280, 263, 194,
	170, 171, 116, 0, 235, 148, 156, 145, 209, 0,
	0, 0, 277, 278, 144, 303, 124, 291, 119, 125,
	290, 203, 0, 0, 0, 273, 281, 195, 188, 0,
	118, 279, 193, 187, 175, 152, 163, 225, 183, 226,
	164, 199, 198, 200, 0, 531, 0, 261, 288, 304,
	185, 130, 550, 0, 271, 298, 299, 0, 0, 131,
	155, 151, 224, 202, 126, 166, 258, 174, 181, 234,
	302, 213, 240, 135, 287, 257, 548, 549, 546, 0,
	547, 593, 594, 648, 649, 650, 619, 542, 0, 632,
	633, 0, 623, 638, 639, 614, 657, 571, 572, 532,
	535, 536, 537, 543, 585, 586, 597, 600, 628, 627,
	626, 629, 634, 653, 652, 654, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 596, 111, 120,
	178, 301, 232, 154, 289, 528, 147, 0, 0, 587,
	589, 599, 616, 113, 114, 121, 129, 136, 146, 150,
	153, 158, 162, 165, 167, 168, 169, 172, 186, 189,
	190, 191, 192, 204, 205, 207, 208, 211, 212, 215,
	217, 218, 219, 221, 222, 223, 227, 229, 231, 233,
	236, 241, 242, 243, 244, 246, 247, 248, 251, 252,
	253, 254, 262, 266, 275, 276, 286, 293, 297, 635,
	642, 622, 0, 580, 645, 552, 569, 656, 570, 573,
	611, 538, 592, 210, 567, 539, 0, 556, 529, 563,
	530, 553, 582, 149, 551, 624, 595, 644, 176, 607,
	0, 142, 184, 182, 0, 0, 0, 216, 268, 643,
	588, 0, 651, 179, 604, 0, 259, 197, 0, 0,
	584, 631, 590, 620, 579, 613, 545, 603, 646, 568,
	609, 647, 0, 0, 0, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 0, 606, 641,
	565, 608, 610, 527, 605, 0, 533, 540, 655, 637,
	559, 560, 561, 0, 0, 0, 0, 0, 0, 0,
	583, 591, 617, 576, 0, 0, 0, 0, 0, 0,
	0, 0, 557, 0, 601, 0, 0, 0, 541, 534,
	0, 0, 581, 0, 0, 0, 544, 0, 558, 618,
	0, 525, 157, 0, 0, 621, 636, 578, 0, 294,
	640, 575, 574, 228, 0, 264, 160, 177, 127, 112,
	122, 0, 159, 206, 237, 245, 566, 526, 625, 554,
	564, 143, 562, 239, 214, 285, 0, 598, 220, 238,
	180, 274, 230, 283, 284, 161, 295, 296, 269, 292,
	300, 256, 0, 0, 0, 0, 0, 0, 173, 577,
	612, 555, 140, 615, 602, 630, 255, 128, 270, 196,
	201, 137, 139, 138, 123, 250, 272, 132, 141, 260,
	265, 115, 267, 282, 134, 249, 117, 280, 263, 194,
	170, 171, 116, 0, 235, 148, 156, 145, 209, 0,
	0, 0, 277, 278, 144, 303, 124, 291, 119, 125,
	290, 203, 0, 0, 0, 273, 281, 195, 188, 0,
	118, 279, 193, 187, 175, 152, 163, 225, 183, 226,
	164, 199, 198, 200, 0, 531, 0, 261, 288, 304,
	185, 130, 550, 0, 271, 298, 299, 0, 0, 131,
	155, 151, 224, 202, 126, 166, 258, 174, 181, 234,
	302, 213, 240, 135, 287, 257, 548, 549, 546, 0,
	547, 593, 594, 648, 649, 650, 619, 542, 0, 632,
	633, 0, 623, 638, 639, 614, 657, 571, 572, 532,
	535, 536, 537, 543, 585, 586, 597, 600, 628, 627,
	626, 629, 634, 653, 652, 654, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 596, 111, 120,
	178, 301, 232, 154, 289, 528, 147, 0, 0, 587,
	589, 599, 616, 113, 114, 121, 129, 136, 146, 150,
	153, 158, 162, 165, 167, 168, 169, 172, 186, 189,
	190, 191, 192, 204, 205, 207, 208, 211, 212, 215,
	217, 218, 219, 221, 222, 223, 227, 229, 231, 233,
	236, 241, 242, 243, 244, 246, 247, 248, 251, 252,
	253, 254, 262, 266, 275, 276, 286, 293, 297, 635,
	210, 0, 0, 0, 0, 0, 375, 0, 0, 0,
	149, 372, 0, 0, 0, 176, 0, 0, 142, 184,
	182, 0, 0, 0, 216, 268, 0, 0, 0, 419,
	179, 0, 0, 259, 197, 0, 0, 0, 0, 408,
	409, 0, 0, 0, 0, 0, 0, 1257, 0, 68,
	0, 0, 373, 0, 0, 396, 395, 398, 399, 400,
	401, 0, 0, 133, 397, 402, 403, 404, 1258, 0,
	0, 370, 387, 0, 418, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 384, 385, 0, 0, 0,
	0, 433, 0, 386, 0, 0, 381, 382, 383, 388,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 157,
	0, 0, 410, 0, 0, 0, 294, 0, 0, 431,
	228, 0, 264, 160, 177, 127, 112, 122, 0, 159,
	206, 237, 245, 416, 0, 0, 0, 0, 143, 0,
	239, 214, 285, 0, 0, 220, 238, 180, 274, 230,
	283, 284, 161, 295, 296, 269, 292, 300, 256, 0,
	0, 0, 0, 0, 0, 173, 0, 0, 0, 140,
	0, 0, 0, 255, 128, 270, 196, 201, 137, 139,
	138, 123, 250, 272, 132, 141, 260, 265, 115, 267,
	282, 134, 249, 117, 280, 263, 194, 170, 171, 116,
	0, 235, 148, 156, 145, 209, 0, 0, 0, 277,
	278, 144, 303, 124, 291, 119, 125, 290, 203, 0,
	0, 0, 273, 281, 195, 188, 0, 118, 279, 193,
	187, 175, 152, 163, 225, 183, 226, 164, 199, 198,
	200, 0, 0, 0, 261, 288, 304, 185, 130, 0,
	0, 271, 298, 299, 0, 0, 131, 155, 151, 224,
	202, 126, 166, 258, 174, 181, 234, 302, 213, 240,
	135, 287, 257, 420, 432, 426, 428, 427, 424, 425,
	423, 422, 421, 434, 411, 412, 413, 414, 417, 0,
	429, 430, 0, 0, 0, 0, 447, 448, 449, 450,
	451, 452, 453, 446, 454, 455, 456, 457, 458, 459,
	460, 461, 462, 435, 436, 437, 438, 439, 440, 441,
	442, 445, 443, 444, 415, 111, 120, 178, 301, 232,
	154, 289, 0, 147, 0, 0, 0, 0, 0, 0,
	113, 114, 121, 129, 136, 146, 150, 153, 158, 162,
	165, 167, 168, 169, 172, 186, 189, 190, 191, 192,
	204, 205, 207, 208, 211, 212, 215, 217, 218, 219,
	221, 222, 223, 227, 229, 231, 233, 236, 241, 242,
	243, 244, 246, 247, 248, 251, 252, 253, 254, 262,
	266, 275, 276, 286, 293, 297, 210, 0, 0, 0,
	0, 0, 375, 0, 0, 0, 149, 372, 0, 0,
	0, 176, 0, 0, 142, 184, 182, 0, 0, 0,
	216, 268, 0, 0, 0, 419, 179, 0, 0, 259,
	197, 0, 0, 0, 0, 408, 409, 0, 0, 0,
	0, 0, 0, 0, 0, 68, 0, 707, 373, 0,
	0, 396, 395, 398, 399, 400, 401, 0, 0, 133,
	397, 402, 403, 404, 0, 0, 0, 370, 387, 0,
	418, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 384, 385, 0, 0, 0, 0, 433, 0, 386,
	0, 0, 381, 382, 383, 388, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 157, 0, 0, 410, 0,
	0, 0, 294, 0, 0, 431, 228, 0, 264, 160,
	177, 127, 112, 122, 0, 159, 206, 237, 245, 416,
	0, 0, 0, 0, 143, 0, 239, 214, 285, 0,
	0, 220, 238, 180, 274, 230, 283, 284, 161, 295,
	296, 269, 292, 300, 256, 0, 0, 0, 0, 0,
	0, 173, 0, 0, 0, 140, 0, 0, 0, 255,
	128, 270, 196, 201, 137, 139, 138, 123, 250, 272,
	132, 141, 260, 265, 115, 267, 282, 134, 249, 117,
	280, 263, 194, 170, 171, 116, 0, 235, 148, 156,
	145, 209, 0, 0, 0, 277, 278, 144, 303, 124,
	291, 119, 125, 290, 203, 0, 0, 0, 273, 281,
	195, 188, 0, 118, 279, 193, 187, 175, 152, 163,
	225, 183, 226, 164, 199, 198, 200, 0, 0, 0,
	261, 288, 304, 185, 130, 0, 0, 271, 298, 299,
	0, 0, 131, 155, 151, 224, 202, 126, 166, 258,
	174, 181, 234, 302, 213, 240, 135, 287, 257, 420,
	432, 426, 428, 427, 424, 425, 423, 422, 421, 434,
	411, 412, 413, 414, 417, 0, 429, 430, 0, 0,
	0, 0, 447, 448, 449, 450, 451, 452, 453, 446,
	454, 455, 456, 457, 458, 459, 460, 461, 462, 435,
	436, 437, 438, 439, 440, 441, 442, 445, 443, 444,
	415, 111, 120, 178, 301, 232, 154, 289, 0, 147,
	0, 0, 0, 0, 0, 0, 113, 114, 121, 129,
	136, 146, 150, 153, 158, 162, 165, 167, 168, 169,
	172, 186, 189, 190, 191, 192, 204, 205, 207, 208,
	211, 212, 215, 217, 218, 219, 221, 222, 223, 227,
	229, 231, 233, 236, 241, 242, 243, 244, 246, 247,
	248, 251, 252, 253, 254, 262, 266, 275, 276, 286,
	293, 297, 210, 0, 0, 0, 0, 0, 375, 0,
	0, 0, 149, 372, 0, 0, 0, 176, 0, 0,
	142, 184, 182, 0, 0, 0, 216, 268, 0, 0,
	0, 419, 179, 0, 0, 259, 197, 0, 0, 0,
	0, 408, 409, 0, 0, 0, 0, 0, 0, 0,
	0, 68, 0, 0, 373, 0, 0, 396, 395, 398,
	399, 400, 401, 0, 0, 133, 397, 402, 403, 404,
	0, 0, 0, 370, 387, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 384, 385, 366,
	0, 0, 0, 433, 0, 386, 0, 0, 381, 382,
	383, 388, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 157, 0, 0, 410, 0, 0, 0, 294, 0,
	0, 431, 228, 0, 264, 160, 177, 127, 112, 122,
	0, 159, 206, 237, 245, 416, 0, 0, 0, 0,
	143, 0, 239, 214, 285, 0, 0, 220, 238, 180,
	274, 230, 283, 284, 161, 295, 296, 269, 292, 300,
	256, 0, 0, 0, 0, 0, 0, 173, 0, 0,
	0, 140, 0, 0, 0, 255, 128, 270, 196, 201,
	137, 139, 138, 123, 250, 272, 132, 141, 260, 265,
	115, 267, 282, 134, 249, 117, 280, 263, 194, 170,
	171, 116, 0, 235, 148, 156, 145, 209, 0, 0,
	0, 277, 278, 144, 303, 124, 291, 119, 125, 290,
	203, 0, 0, 0, 273, 281, 195, 188, 0, 118,
	279, 193, 187, 175, 152, 163, 225, 183, 226, 164,
	199, 198, 200, 0, 0, 0, 261, 288, 304, 185,
	130, 0, 0, 271, 298, 299, 0, 0, 131, 155,
	151, 224, 202, 126, 166, 258, 174, 181, 234, 302,
	213, 240, 135, 287, 257, 420, 432, 426, 428, 427,
	424, 425, 423, 422, 421, 434, 411, 412, 413, 414,
	417, 0, 429, 430, 0, 0, 0, 0, 447, 448,
	449, 450, 451, 452, 453, 446, 454, 455, 456, 457,
	458, 459, 460, 461, 462, 435, 436, 437, 438, 439,
	440, 441, 442, 445, 443, 444, 415, 111, 120, 178,
	301, 232, 154, 289, 0, 147, 0, 0, 0, 0,
	0, 0, 113, 114, 121, 129, 136, 146, 150, 153,
	158, 162, 165, 167, 168, 169, 172, 186, 189, 190,
	191, 192, 204, 205, 207, 208, 211, 212, 215, 217,
	218, 219, 221, 222, 223, 227, 229, 231, 233, 236,
	241, 242, 243, 244, 246, 247, 248, 251, 252, 253,
	254, 262, 266, 275, 276, 286, 293, 297, 210, 0,
	0, 0, 0, 0, 375, 0, 0, 0, 149, 372,
	0, 0, 0, 176, 0, 0, 142, 184, 182, 0,
	0, 0, 216, 268, 0, 0, 0, 419, 179, 0,
	0, 259, 197, 0, 0, 0, 0, 408, 409, 0,
	0, 0, 0, 0, 0, 0, 0, 68, 0, 0,
	373, 0, 0, 396, 1166, 398, 399, 400, 401, 0,
	0, 133, 397, 402, 403, 404, 0, 0, 0, 370,
	387, 0, 418, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 384, 385, 366, 0, 0, 0, 433,
	0, 386, 0, 0, 381, 382, 383, 388, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 157, 0, 0,
	410, 0, 0, 0, 294, 0, 0, 431, 228, 0,
	264, 160, 177, 127, 112, 122, 0, 159, 206, 237,
	245, 416, 0, 0, 0, 0, 143, 0, 239, 214,
	285, 0, 0, 220, 238, 180, 274, 230, 283, 284,
	161, 295, 296, 269, 292, 300, 256, 0, 0, 0,
	0, 0, 0, 173, 0, 0, 0, 140, 0, 0,
	0, 255, 128, 270, 196, 201, 137, 139, 138, 123,
	250, 272, 132, 141, 260, 265, 115, 267, 282, 134,
	249, 117, 280, 263, 194, 170, 171, 116, 0, 235,
	148, 156, 145, 209, 0, 0, 0, 277, 278, 144,
	303, 124, 291, 119, 125, 290, 203, 0, 0, 0,
	273, 281, 195, 188, 0, 118, 279, 193, 187, 175,
	152, 163, 225, 183, 226, 164, 199, 198, 200, 0,
	0, 0, 261, 288, 304, 185, 130, 0, 0, 271,
	298, 299, 0, 0, 131, 155, 151, 224, 202, 126,
	166, 258, 174, 181, 234, 302, 213, 240, 135, 287,
	257, 420, 432, 426, 428, 427, 424, 425, 423, 422,
	421, 434, 411, 412, 413, 414, 417, 0, 429, 430,
	0, 0, 0, 0, 447, 448, 449, 450, 451, 452,
	453, 446, 454, 455, 456, 457, 458, 459, 460, 461,
	462, 435, 436, 437, 438, 439, 440, 441, 442, 445,
	443, 444, 415, 111, 120, 178, 301, 232, 154, 289,
	0, 147, 0, 0, 0, 0, 0, 0, 113, 114,
	121, 129, 136, 146, 150, 153, 158, 162, 165, 167,
	168, 169, 172, 186, 189, 190, 191, 192, 204, 205,
	207, 208, 211, 212, 215, 217, 218, 219, 221, 222,
	223, 227, 229, 231, 233, 236, 241, 242, 243, 244,
	246, 247, 248, 251, 252, 253, 254, 262, 266, 275,
	276, 286, 293, 297, 210, 0, 0, 0, 0, 0,
	375, 0, 0, 0, 149, 372, 0, 0, 0, 176,
	0, 0, 142, 184, 182, 0, 0, 0, 216, 268,
	0, 0, 0, 419, 179, 0, 0, 259, 197, 0,
	0, 0, 0, 408, 409, 0, 0, 0, 0, 0,
	0, 0, 0, 68, 0, 0, 373, 0, 0, 396,
	1163, 398, 399, 400, 401, 0, 0, 133, 397, 402,
	403, 404, 0, 0, 0, 370, 387, 0, 418, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 384,
	385, 366, 0, 0, 0, 433, 0, 386, 0, 0,
	381, 382, 383, 388, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 157, 0, 0, 410, 0, 0, 0,
	294, 0, 0, 431, 228, 0, 264, 160, 177, 127,
	112, 122, 0, 159, 206, 237, 245, 416, 0, 0,
	0, 0, 143, 0, 239, 214, 285, 0, 0, 220,
	238, 180, 274, 230, 283, 284, 161, 295, 296, 269,
	292, 300, 256, 0, 0, 0, 0, 0, 0, 173,
	0, 0, 0, 140, 0, 0, 0, 255, 128, 270,
	196, 201, 137, 139, 138, 123, 250, 272, 132, 141,
	260, 265, 115, 267, 282, 134, 249, 117, 280, 263,
	194, 170, 171, 116, 0, 235, 148, 156, 145, 209,
	0, 0, 0, 277, 278, 144, 303, 124, 291, 119,
	125, 290, 203, 0, 0, 0, 273, 281, 195, 188,
	0, 118, 279, 193, 187, 175, 152, 163, 225, 183,
	226, 164, 199, 198, 200, 0, 0, 0, 261, 288,
	304, 185, 130, 0, 0, 271, 298, 299, 0, 0,
	131, 155, 151, 224, 202, 126, 166, 258, 174, 181,
	234, 302, 213, 240, 135, 287, 257, 420, 432, 426,
	428, 427, 424, 425, 423, 422, 421, 434, 411, 412,
	413, 414, 417, 0, 429, 430, 0, 0, 0, 0,
	447, 448, 449, 450, 451, 452, 453, 446, 454, 455,
	456, 457, 458, 459, 460, 461, 462, 435, 436, 437,
	438, 439, 440, 441, 442, 445, 443, 444, 415, 111,
	120, 178, 301, 232, 154, 289, 0, 147, 0, 0,
	0, 0, 0, 0, 113, 114, 121, 129, 136, 146,
	150, 153, 158, 162, 165, 167, 168, 169, 172, 186,
	189, 190, 191, 192, 204, 205, 207, 208, 211, 212,
	215, 217, 218, 219, 221, 222, 223, 227, 229, 231,
	233, 236, 241, 242, 243, 244, 246, 247, 248, 251,
	252, 253, 254, 262, 266, 275, 276, 286, 293, 297,
	29, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 210, 0, 0, 0, 0, 0, 375, 0,
	0, 0, 149, 372, 0, 0, 0, 176, 0, 0,
	142, 184, 182, 0, 0, 0, 216, 268, 0, 0,
	0, 419, 179, 0, 0, 259, 197, 0, 0, 0,
	0, 408, 409, 0, 0, 0, 0, 0, 0, 0,
	0, 68, 0, 0, 373, 0, 0, 396, 395, 398,
	399, 400, 401, 0, 0, 133, 397, 402, 403, 404,
	0, 0, 0, 370, 387, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 384, 385, 0,
	0, 0, 0, 433, 0, 386, 0, 0, 381, 382,
	383, 388, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 157, 0, 0, 410, 0, 0, 0, 294, 0,
	0, 431, 228, 0, 264, 160, 177, 127, 112, 122,
	0, 159, 206, 237, 245, 416, 0, 0, 0, 0,
	143, 0, 239, 214, 285, 0, 0, 220, 238, 180,
	274, 230, 283, 284, 161, 295, 296, 269, 292, 300,
	256, 0, 0, 0, 0, 0, 0, 173, 0, 0,
	0, 140, 0, 0, 0, 255, 128, 270, 196, 201,
	137, 139, 138, 123, 250, 272, 132, 141, 260, 265,
	115, 267, 282, 134, 249, 117, 280, 263, 194, 170,
	171, 116, 0, 235, 148, 156, 145, 209, 0, 0,
	0, 277, 278, 144, 303, 124, 291, 119, 125, 290,
	203, 0, 0, 0, 273, 281, 195, 188, 0, 118,
	279, 193, 187, 175, 152, 163, 225, 183, 226, 164,
	199, 198, 200, 0, 0, 0, 261, 288, 304, 185,
	130, 0, 0, 271, 298, 299, 0, 0, 131, 155,
	151, 224, 202, 126, 166, 258, 174, 181, 234, 302,
	213, 240, 135, 287, 257, 420, 432, 426, 428, 427,
	424, 425, 423, 422, 421, 434, 411, 412, 413, 414,
	417, 0, 429, 430, 0, 0, 0, 0, 447, 448,
	449, 450, 451, 452, 453, 446, 454, 455, 456, 457,
	458, 459, 460, 461, 462, 435, 436, 437, 438, 439,
	440, 441, 442, 445, 443, 444, 415, 111, 120, 178,
	301, 232, 154, 289, 0, 147, 0, 0, 0, 0,
	0, 0, 113, 114, 121, 129, 136, 146, 150, 153,
	158, 162, 165, 167, 168, 169, 172, 186, 189, 190,
	191, 192, 204, 205, 207, 208, 211, 212, 215, 217,
	218, 219, 221, 222, 223, 227, 229, 231, 233, 236,
	241, 242, 243, 244, 246, 247, 248, 251, 252, 253,
	254, 262, 266, 275, 276, 286, 293, 297, 210, 0,
	0, 0, 0, 0, 375, 0, 0, 0, 149, 372,
	0, 0, 0, 176, 0, 0, 142, 184, 182, 0,
	0, 0, 216, 268, 0, 0, 0, 419, 179, 0,
	0, 259, 197, 0, 0, 0, 0, 408, 409, 0,
	0, 0, 0, 0, 0, 0, 0, 68, 0, 1076,
	373, 0, 0, 396, 395, 398, 399, 400, 401, 0,
	0, 133, 397, 402, 403, 404, 0, 0, 0, 370,
	387, 0, 418, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 384, 385, 0, 0, 0, 0, 433,
	0, 386, 0, 0, 381, 382, 383, 388, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 157, 0, 0,
	410, 0, 0, 0, 294, 0, 0, 431, 228, 0,
	264, 160, 177, 127, 112, 122, 0, 159, 206, 237,
	245, 416, 0, 0, 0, 0, 143, 0, 239, 214,
	285, 0, 0, 220, 238, 180, 274, 230, 283, 284,
	161, 295, 296, 269, 292, 300, 256, 0, 0, 0,
	0, 0, 0, 173, 0, 0, 0, 140, 0, 0,
	0, 255, 128, 270, 196, 201, 137, 139, 138, 123,
	250, 272, 132, 141, 260, 265, 115, 267, 282, 134,
	249, 117, 280, 263, 194, 170, 171, 116, 0, 235,
	148, 156, 145, 209, 0, 0, 0, 277, 278, 144,
	303, 124, 291, 119, 125, 290, 203, 0, 0, 0,
	273, 281, 195, 188, 0, 118, 279, 193, 187, 175,
	152, 163, 225, 183, 226, 164, 199, 198, 200, 0,
	0, 0, 261, 288, 304, 185, 130, 0, 0, 271,
	298, 299, 0, 0, 131, 155, 151, 224, 202, 126,
	166, 258, 174, 181, 234, 302, 213, 240, 135, 287,
	257, 420, 432, 426, 428, 427, 424, 425, 423, 422,
	421, 434, 411, 412, 413, 414, 417, 0, 429, 430,
	0, 0, 0, 0, 447, 448, 449, 450, 451, 452,
	453, 446, 454, 455, 456, 457, 458, 459, 460, 461,
	462, 435, 436, 437, 438, 439, 440, 441, 442, 445,
	443, 444, 415, 111, 120, 178, 301, 232, 154, 289,
	0, 147, 0, 0, 0, 0, 0, 0, 113, 114,
	121, 129, 136, 146, 150, 153, 158, 162, 165, 167,
	168, 169, 172, 186, 189, 190, 191, 192, 204, 205,
	207, 208, 211, 212, 215, 217, 218, 219, 221, 222,
	223, 227, 229, 231, 233, 236, 241, 242, 243, 244,
	246, 247, 248, 251, 252, 253, 254, 262, 266, 275,
	276, 286, 293, 297, 210, 0, 0, 0, 0, 0,
	375, 0, 0, 0, 149, 372, 0, 0, 0, 176,
	0, 0, 142, 184, 182, 0, 0, 0, 216, 268,
	0, 0, 0, 419, 179, 0, 0, 259, 197, 0,
	0, 0, 0, 408, 409, 0, 0, 0, 0, 0,
	0, 0, 0, 68, 0, 0, 373, 0, 0, 396,
	395, 398, 399, 400, 401, 0, 0, 133, 397, 402,
	403, 404, 0, 0, 0, 370, 387, 0, 418, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 384,
	385, 0, 0, 0, 0, 433, 0, 386, 0, 0,
	381, 382, 383, 388, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 157, 0, 0, 410, 0, 0, 0,
	294, 0, 0, 431, 228, 0, 264, 160, 177, 127,
	112, 122, 0, 159, 206, 237, 245, 416, 0, 0,
	0, 0, 143, 0, 239, 214, 285, 0, 0, 220,
	238, 180, 274, 230, 283, 284, 161, 295, 296, 269,
	292, 300, 256, 0, 0, 0, 0, 0, 0, 173,
	0, 0, 0, 140, 0, 0, 0, 255, 128, 270,
	196, 201, 137, 139, 138, 123, 250, 272, 132, 141,
	260, 265, 115, 267, 282, 134, 249, 117, 280, 263,
	194, 170, 171, 116, 0, 235, 148, 156, 145, 209,
	0, 0, 0, 277, 278, 144, 303, 124, 291, 119,
	125, 290, 203, 0, 0, 0, 273, 281, 195, 188,
	0, 118, 279, 193, 187, 175, 152, 163, 225, 183,
	226, 164, 199, 198, 200, 0, 0, 0, 261, 288,
	304, 185, 130, 0, 0, 271, 298, 299, 0, 0,
	131, 155, 151, 224, 202, 126, 166, 258, 174, 181,
	234, 302, 213, 240, 135, 287, 257, 420, 432, 426,
	428, 427, 424, 425, 423, 422, 421, 434, 411, 412,
	413, 414, 417, 0, 429, 430, 0, 0, 0, 0,
	447, 448, 449, 450, 451, 452, 453, 446, 454, 455,
	456, 457, 458, 459, 460, 461, 462, 435, 436, 437,
	438, 439, 440, 441, 442, 445, 443, 444, 415, 111,
	120, 178, 301, 232, 154, 289, 0, 147, 0, 0,
	0, 0, 0, 0, 113, 114, 121, 129, 136, 146,
	150, 153, 158, 162, 165, 167, 168, 169, 172, 186,
	189, 190, 191, 192, 204, 205, 207, 208, 211, 212,
	215, 217, 218, 219, 221, 222, 223, 227, 229, 231,
	233, 236, 241, 242, 243, 244, 246, 247, 248, 251,
	252, 253, 254, 262, 266, 275, 276, 286, 293, 297,
	210, 0, 0, 0, 0, 0, 375, 0, 0, 0,
	149, 372, 0, 0, 0, 176, 0, 0, 142, 184,
	182, 0, 0, 0, 216, 268, 0, 0, 0, 419,
	179, 0, 0, 259, 197, 0, 0, 0, 0, 408,
	409, 0, 0, 0, 0, 0, 0, 0, 0, 68,
	0, 0, 373, 0, 0, 396, 395, 398, 399, 400,
	401, 0, 0, 133, 397, 402, 403, 404, 0, 0,
	0, 370, 387, 0, 418, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 384, 385, 0, 0, 0,
	0, 433, 0, 386, 0, 0, 381, 382, 383, 388,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 157,
	0, 0, 410, 0, 0, 0, 294, 0, 0, 431,
	228, 0, 264, 160, 177, 127, 112, 122, 0, 159,
	206, 237, 245, 416, 0, 0, 0, 0, 143, 0,
	239, 214, 285, 0, 0, 220, 238, 180, 274, 230,
	283, 284, 161, 295, 296, 269, 292, 300, 256, 0,
	0, 0, 0, 0, 0, 173, 0, 0, 0, 140,
	0, 0, 0, 255, 128, 270, 196, 201, 137, 139,
	138, 123, 250, 272, 132, 141, 260, 265, 115, 267,
	282, 134, 249, 117, 280, 263, 194, 170, 171, 116,
	0, 235, 148, 156, 145, 209, 0, 0, 0, 277,
	278, 144, 303, 124, 291, 119, 125, 290, 203, 0,
	0, 0, 273, 281, 195, 188, 0, 118, 279, 193,
	187, 175, 152, 163, 225, 183, 226, 164, 199, 198,
	200, 0, 0, 0, 261, 288, 304, 185, 130, 0,
	0, 271, 298, 299, 0, 0, 131, 155, 151, 224,
	202, 126, 166, 258, 174, 181, 234, 302, 213, 240,
	135, 287, 257, 420, 432, 426, 428, 427, 424, 425,
	423, 422, 421, 434, 411, 412, 413, 414, 417, 0,
	429, 430, 0, 0, 0, 0, 723, 724, 725, 726,
	727, 731, 732, 736, 737, 745, 744, 743, 746, 747,
	749, 748, 750, 728, 729, 730, 733, 734, 735, 738,
	739, 742, 740, 741, 415, 111, 120, 178, 301, 232,
	154, 289, 0, 147, 0, 0, 0, 0, 0, 0,
	113, 114, 121, 129, 136, 146, 150, 153, 158, 162,
	165, 167, 168, 169, 172, 186, 189, 190, 191, 192,
	204, 205, 207, 208, 211, 212, 215, 217, 218, 219,
	221, 222, 223, 227, 229, 231, 233, 236, 241, 242,
	243, 244, 246, 247, 248, 251, 252, 253, 254, 262,
	266, 275, 276, 286, 293, 297, 210, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 149, 0, 0, 0,
	0, 176, 0, 0, 142, 184, 182, 0, 0, 0,
	216, 268, 0, 0, 0, 419, 179, 0, 0, 259,
	197, 0, 0, 0, 0, 408, 409, 0, 0, 0,
	0, 0, 0, 0, 0, 68, 0, 0, 373, 0,
	0, 396, 395, 398, 399, 400, 401, 0, 0, 133,
	397, 402, 403, 404, 0, 0, 0, 0, 387, 0,
	418, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 384, 385, 0, 0, 0, 0, 433, 0, 386,
	0, 0, 381, 382, 383, 388, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 157, 0, 0, 410, 0,
	0, 0, 294, 0, 0, 431, 228, 0, 264, 160,
	177, 127, 112, 122, 0, 159, 206, 237, 245, 416,
	0, 0, 0, 0, 143, 0, 239, 214, 285, 0,
	2193, 220, 238, 180, 274, 230, 283, 284, 161, 295,
	296, 269, 292, 300, 256, 0, 0, 0, 0, 0,
	0, 173, 0, 0, 0, 140, 0, 0, 0, 255,
	128, 270, 196, 201, 137, 139, 138, 123, 250, 272,
	132, 141, 260, 265, 115, 267, 282, 134, 249, 117,
	280, 263, 194, 170, 171, 116, 0, 235, 148, 156,
	145, 209, 0, 0, 0, 277, 278, 144, 303, 124,
	291, 119, 125, 290, 203, 0, 0, 0, 273, 281,
	195, 188, 0, 118, 279, 193, 187, 175, 152, 163,
	225, 183, 226, 164, 199, 198, 200, 0, 0, 0,
	261, 288, 304, 185, 130, 0, 0, 271, 298, 299,
	0, 0, 131, 155, 151, 224, 202, 126, 166, 258,
	174, 181, 234, 302, 213, 240, 135, 287, 257, 420,
	432, 426, 428, 427, 424, 425, 423, 422, 421, 434,
	411, 412, 413, 414, 417, 0, 429, 430, 0, 0,
	0, 0, 447, 448, 449, 450, 451, 452, 453, 446,
	454, 455, 456, 457, 458, 459, 460, 461, 462, 435,
	436, 437, 438, 439, 440, 441, 442, 445, 443, 444,
	415, 111, 120, 178, 301, 232, 154, 289, 0, 147,
	0, 0, 0, 0, 0, 0, 113, 114, 121, 129,
	136, 146, 150, 153, 158, 162, 165, 167, 168, 169,
	172, 186, 189, 190, 191, 192, 204, 205, 207, 208,
	211, 212, 215, 217, 218, 219, 221, 222, 223, 227,
	229, 231, 233, 236, 241, 242, 243, 244, 246, 247,
	248, 251, 252, 253, 254, 262, 266, 275, 276, 286,
	293, 297, 210, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 149, 0, 0, 0, 0, 176, 0, 0,
	142, 184, 182, 0, 0, 0, 216, 268, 0, 0,
	0, 419, 179, 0, 0, 259, 197, 0, 0, 0,
	0, 408, 409, 0, 0, 0, 0, 0, 0, 0,
	0, 68, 0, 707, 373, 0, 0, 396, 395, 398,
	399, 400, 401, 0, 0, 133, 397, 402, 403, 404,
	0, 0, 0, 0, 387, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 384, 385, 0,
	0, 0, 0, 433, 0, 386, 0, 0, 381, 382,
	383, 388, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 157, 0, 0, 410, 0, 0, 0, 294, 0,
	0, 431, 228, 0, 264, 160, 177, 127, 112, 122,
	0, 159, 206, 237, 245, 416, 0, 0, 0, 0,
	143, 0, 239, 214, 285, 0, 0, 220, 238, 180,
	274, 230, 283, 284, 161, 295, 296, 269, 292, 300,
	256, 0, 0, 0, 0, 0, 0, 173, 0, 0,
	0, 140, 0, 0, 0, 255, 128, 270, 196, 201,
	137, 139, 138, 123, 250, 272, 132, 141, 260, 265,
	115, 267, 282, 134, 249, 117, 280, 263, 194, 170,
	171, 116, 0, 235, 148, 156, 145, 209, 0, 0,
	0, 277, 278, 144, 303, 124, 291, 119, 125, 290,
	203, 0, 0, 0, 273, 281, 195, 188, 0, 118,
	279, 193, 187, 175, 152, 163, 225, 183, 226, 164,
	199, 198, 200, 0, 0, 0, 261, 288, 304, 185,
	130, 0, 0, 271, 298, 299, 0, 0, 131, 155,
	151, 224, 202, 126, 166, 258, 174, 181, 234, 302,
	213, 240, 135, 287, 257, 420, 432, 426, 428, 427,
	424, 425, 423, 422, 421, 434, 411, 412, 413, 414,
	417, 0, 429, 430, 0, 0, 0, 0, 447, 448,
	449, 450, 451, 452, 453, 446, 454, 455, 456, 457,
	458, 459, 460, 461, 462, 435, 436, 437, 438, 439,
	440, 441, 442, 445, 443, 444, 415, 111, 120, 178,
	301, 232, 154, 289, 0, 147, 0, 0, 0, 0,
	0, 0, 113, 114, 121, 129, 136, 146, 150, 153,
	158, 162, 165, 167, 168, 169, 172, 186, 189, 190,
	191, 192, 204, 205, 207, 208, 211, 212, 215, 217,
	218, 219, 221, 222, 223, 227, 229, 231, 233, 236,
	241, 242, 243, 244, 246, 247, 248, 251, 252, 253,
	254, 262, 266, 275, 276, 286, 293, 297, 210, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 149, 0,
	0, 0, 0, 176, 0, 0, 142, 184, 182, 0,
	0, 0, 216, 268, 0, 0, 0, 419, 179, 0,
	0, 259, 197, 0, 0, 0, 0, 408, 409, 0,
	0, 0, 0, 0, 0, 0, 0, 68, 0, 0,
	373, 0, 0, 396, 395, 398, 399, 400, 401, 0,
	0, 133, 397, 402, 403, 404, 0, 0, 0, 0,
	387, 0, 418, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 384, 385, 0, 0, 0, 0, 433,
	0, 386, 0, 0, 381, 382, 383, 388, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 157, 0, 0,
	410, 0, 0, 0, 294, 0, 0, 431, 228, 0,
	264, 160, 177, 127, 112, 122, 0, 159, 206, 237,
	245, 416, 0, 0, 0, 0, 143, 0, 239, 214,
	285, 0, 0, 220, 238, 180, 274, 230, 283, 284,
	161, 295, 296, 269, 292, 300, 256, 0, 0, 0,
	0, 0, 0, 173, 0, 0, 0, 140, 0, 0,
	0, 255, 128, 270, 196, 201, 137, 139, 138, 123,
	250, 272, 132, 141, 260, 265, 115, 267, 282, 134,
	249, 117, 280, 263, 194, 170, 171, 116, 0, 235,
	148, 156, 145, 209, 0, 0, 0, 277, 278, 144,
	303, 124, 291, 119, 125, 290, 203, 0, 0, 0,
	273, 281, 195, 188, 0, 118, 279, 193, 187, 175,
	152, 163, 225, 183, 226, 164, 199, 198, 200, 0,
	0, 0, 261, 288, 304, 185, 130, 0, 0, 271,
	298, 299, 0, 0, 131, 155, 151, 224, 202, 126,
	166, 258, 174, 181, 234, 302, 213, 240, 135, 287,
	257, 420, 432, 426, 428, 427, 424, 425, 423, 422,
	421, 434, 411, 412, 413, 414, 417, 0, 429, 430,
	0, 0, 0, 0, 447, 448, 449, 450, 451, 452,
	453, 446, 454, 455, 456, 457, 458, 459, 460, 461,
	462, 435, 436, 437, 438, 439, 440, 441, 442, 445,
	443, 444, 415, 111, 120, 178, 301, 232, 154, 289,
	0, 147, 0, 0, 0, 0, 0, 0, 113, 114,
	121, 129, 136, 146, 150, 153, 158, 162, 165, 167,
	168, 169, 172, 186, 189, 190, 191, 192, 204, 205,
	207, 208, 211, 212, 215, 217, 218, 219, 221, 222,
	223, 227, 229, 231, 233, 236, 241, 242, 243, 244,
	246, 247, 248, 251, 252, 253, 254, 262, 266, 275,
	276, 286, 293, 297, 210, 0, 0, 0, 0, 1235,
	0, 0, 0, 0, 149, 0, 0, 0, 0, 176,
	0, 0, 142, 184, 182, 0, 0, 0, 216, 268,
	0, 0, 0, 0, 179, 0, 0, 259, 197, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1237,
	1239, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	1242, 0, 0, 0, 0, 0, 0, 133, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 157, 0, 0, 0, 0, 0, 0,
	294, 0, 1238, 0, 228, 0, 264, 160, 177, 127,
	112, 122, 0, 159, 206, 237, 245, 0, 0, 0,
	0, 0, 143, 0, 239, 214, 285, 0, 0, 220,
	238, 180, 274, 230, 283, 284, 161, 295, 296, 269,
	292, 300, 256, 0, 0, 0, 0, 0, 0, 173,
	0, 0, 0, 140, 0, 0, 0, 255, 128, 270,
	196, 201, 137, 139, 138, 123, 250, 272, 132, 141,
	260, 265, 115, 267, 282, 134, 249, 117, 280, 263,
	194, 170, 171, 116, 0, 235, 148, 156, 145, 209,
	0, 0, 0, 277, 278, 144, 303, 124, 291, 119,
	125, 290, 203, 0, 0, 0, 273, 281, 195, 188,
	0, 118, 279, 193, 187, 175, 152, 163, 225, 183,
	226, 164, 199, 198, 200, 0, 0, 0, 261, 288,
	304, 185, 130, 0, 0, 271, 298, 299, 0, 0,
	131, 155, 151, 224, 202, 126, 166, 258, 174, 181,
	234, 302, 213, 240, 135, 287, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	770, 771, 772, 773, 774, 778, 779, 783, 784, 792,
	791, 790, 793, 794, 796, 795, 797, 775, 776, 777,
	780, 781, 782, 785, 786, 789, 787, 788, 0, 111,
	120, 178, 301, 232, 154, 289, 0, 147, 0, 0,
	0, 0, 0, 0, 113, 114, 121, 129, 136, 146,
	150, 153, 158, 162, 165, 167, 168, 169, 172, 186,
	189, 190, 191, 192, 204, 205, 207, 208, 211, 212,
	215, 217, 218, 219, 221, 222, 223, 227, 229, 231,
	233, 236, 241, 242, 243, 244, 246, 247, 248, 251,
	252, 253, 254, 262, 266, 275, 276, 286, 293, 297,
	210, 0, 0, 0, 0, 1235, 0, 0, 0, 0,
	149, 0, 0, 0, 0, 176, 0, 0, 142, 184,
	182, 0, 0, 0, 216, 268, 0, 0, 0, 0,
	179, 0, 0, 259, 197, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1237, 1239, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 1242, 0, 0, 0,
	0, 0, 0, 133, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 157,
	0, 0, 0, 0, 0, 0, 294, 0, 1238, 0,
	228, 0, 264, 160, 177, 127, 112, 122, 0, 159,
	206, 237, 245, 0, 0, 0, 0, 0, 143, 0,
	239, 214, 285, 0, 0, 1233, 238, 180, 274, 230,
	283, 284, 161, 295, 296, 269, 292, 300, 256, 0,
	0, 0, 0, 0, 0, 173, 0, 0, 0, 140,
	0, 0, 0, 255, 128, 270, 196, 201, 137, 139,
	138, 123, 250, 272, 132, 141, 260, 265, 115, 267,
	282, 134, 249, 117, 280, 263, 194, 170, 171, 116,
	0, 235, 148, 156, 145, 209, 0, 0, 0, 277,
	278, 144, 303, 124, 291, 119, 125, 290, 203, 0,
	0, 0, 273, 281, 195, 188, 0, 118, 279, 193,
	187, 175, 152, 163, 225, 183, 226, 164, 199, 198,
	200, 0, 0, 0, 261, 288, 304, 185, 130, 0,
	0, 271, 298, 299, 0, 0, 131, 155, 151, 224,
	202, 126, 166, 258, 174, 181, 234, 302, 213, 240,
	135, 287, 257, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 770, 771, 772, 773,
	774, 778, 779, 783, 784, 792, 791, 790, 793, 794,
	796, 795, 797, 775, 776, 777, 780, 781, 782, 785,
	786, 789, 787, 788, 0, 111, 120, 178, 301, 232,
	154, 289, 0, 147, 0, 0, 0, 0, 0, 0,
	113, 114, 121, 129, 136, 146, 150, 153, 158, 162,
	165, 167, 168, 169, 172, 186, 189, 190, 191, 192,
	204, 205, 207, 208, 211, 212, 215, 217, 218, 219,
	221, 222, 223, 227, 229, 231, 233, 236, 241, 242,
	243, 244, 246, 247, 248, 251, 252, 253, 254, 262,
	266, 275, 276, 286, 293, 297, 210, 0, 0, 0,
	0, 765, 0, 0, 0, 0, 149, 0, 0, 0,
	0, 176, 0, 0, 142, 184, 182, 0, 0, 0,
	216, 268, 0, 0, 0, 0, 179, 0, 0, 259,
	197, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 766, 0,
	0, 0, 769, 0, 0, 0, 0, 0, 0, 133,
	0, 0, 0, 0, 0, 762, 761, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 763, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 157, 0, 0, 0, 0,
	0, 0, 294, 0, 0, 0, 228, 0, 264, 160,
	177, 127, 112, 122, 0, 159, 206, 237, 245, 0,
	0, 0, 0, 0, 143, 0, 239, 214, 285, 0,
	0, 220, 238, 180, 274, 230, 283, 284, 161, 295,
	296, 269, 292, 300, 256, 0, 0, 0, 0, 0,
	0, 173, 0, 0, 0, 140, 0, 0, 0, 255,
	128, 270, 196, 201, 137, 139, 138, 123, 250, 272,
	132, 141, 260, 265, 115, 267, 282, 134, 249, 117,
	280, 263, 194, 170, 171, 116, 0, 235, 148, 156,
	145, 209, 0, 0, 0, 277, 278, 144, 303, 124,
	291, 119, 125, 290, 203, 0, 0, 0, 273, 281,
	195, 188, 0, 118, 279, 193, 187, 175, 152, 163,
	225, 183, 226, 164, 199, 198, 200, 0, 0, 0,
	261, 288, 304, 185, 130, 0, 0, 271, 298, 299,
	0, 0, 131, 155, 151, 224, 202, 126, 166, 258,
	174, 181, 234, 302, 213, 240, 135, 287, 257, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 770, 771, 772, 773, 774, 778, 779, 783,
	784, 792, 791, 790, 793, 794, 796, 795, 797, 775,
	776, 777, 780, 781, 782, 785, 786, 789, 787, 788,
	0, 111, 120, 178, 301, 232, 154, 289, 0, 147,
	0, 0, 0, 0, 0, 0, 113, 114, 121, 129,
	136, 146, 150, 153, 158, 162, 165, 167, 168, 169,
	172, 186, 189, 190, 191, 192, 204, 205, 207, 208,
	211, 212, 215, 217, 218, 219, 221, 222, 223, 227,
	229, 231, 233, 236, 241, 242, 243, 244, 246, 247,
	248, 251, 252, 253, 254, 262, 266, 275, 276, 286,
	293, 297, 210, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 149, 0, 0, 0, 0, 176, 1493, 0,
	142, 184, 182, 0, 0, 0, 216, 268, 0, 0,
	0, 0, 179, 0, 0, 259, 197, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 1242, 0,
	0, 0, 0, 0, 0, 133, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 157, 0, 0, 0, 0, 0, 0, 294, 0,
	0, 0, 228, 0, 264, 160, 177, 127, 112, 122,
	0, 159, 206, 237, 245, 0, 0, 0, 0, 0,
	143, 0, 239, 214, 285, 0, 0, 220, 238, 180,
	274, 230, 283, 284, 161, 295, 296, 269, 292, 300,
	256, 0, 0, 0, 0, 0, 0, 173, 0, 0,
	0, 140, 0, 0, 0, 255, 128, 270, 196, 201,
	137, 139, 138, 123, 250, 272, 132, 141, 260, 265,
	115, 267, 282, 134, 249, 117, 280, 263, 194, 170,
	171, 116, 0, 235, 148, 156, 145, 209, 0, 0,
	0, 277, 278, 144, 303, 124, 291, 119, 125, 290,
	203, 0, 0, 0, 273, 281, 195, 188, 0, 118,
	279, 193, 187, 175, 152, 163, 225, 183, 226, 164,
	199, 198, 200, 0, 0, 0, 261, 288, 304, 185,
	130, 0, 0, 271, 298, 299, 0, 0, 131, 155,
	151, 224, 202, 126, 166, 258, 174, 181, 234, 302,
	213, 240, 135, 287, 257, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 770, 771,
	772, 773, 774, 778, 779, 783, 784, 792, 791, 790,
	793, 794, 796, 795, 797, 775, 776, 777, 780, 781,
	782, 785, 786, 789, 787, 788, 0, 111, 120, 178,
	301, 232, 154, 289, 0, 147, 0, 0, 0, 0,
	0, 0, 113, 114, 121, 129, 136, 146, 150, 153,
	158, 162, 165, 167, 168, 169, 172, 186, 189, 190,
	191, 192, 204, 205, 207, 208, 211, 212, 215, 217,
	218, 219, 221, 222, 223, 227, 229, 231, 233, 236,
	241, 242, 243, 244, 246, 247, 248, 251, 252, 253,
	254, 262, 266, 275, 276, 286, 293, 297, 210, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 149, 0,
	0, 0, 0, 176, 0, 0, 142, 184, 182, 0,
	0, 0, 216, 268, 0, 0, 0, 0, 179, 0,
	0, 259, 197, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 1242, 0, 0, 0, 0, 0,
	0, 133, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 157, 0, 0,
	0, 0, 0, 0, 294, 0, 0, 0, 228, 0,
	264, 160, 177, 127, 112, 122, 0, 159, 206, 237,
	245, 0, 0, 0, 0, 0, 143, 0, 239, 214,
	285, 0, 0, 220, 238, 180, 274, 230, 283, 284,
	161, 295, 296, 269, 292, 300, 256, 0, 0, 0,
	0, 0, 0, 173, 0, 0, 0, 140, 0, 0,
	0, 255, 128, 270, 196, 201, 137, 139, 138, 123,
	250, 272, 132, 141, 260, 265, 115, 267, 282, 134,
	249, 117, 280, 263, 194, 170, 171, 116, 0, 235,
	148, 156, 145, 209, 0, 0, 0, 277, 278, 144,
	303, 124, 291, 119, 125, 290, 203, 0, 0, 0,
	273, 281, 195, 188, 0, 118, 279, 193, 187, 175,
	152, 163, 225, 183, 226, 164, 199, 198, 200, 0,
	0, 0, 261, 288, 304, 185, 130, 0, 0, 271,
	298, 299, 0, 0, 131, 155, 151, 224, 202, 126,
	166, 258, 174, 181, 234, 302, 213, 240, 135, 287,
	257, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 770, 771, 772, 773, 774, 778,
	779, 783, 784, 792, 791, 790, 793, 794, 796, 795,
	797, 775, 776, 777, 780, 781, 782, 785, 786, 789,
	787, 788, 0, 111, 120, 178, 301, 232, 154, 289,
	0, 147, 0, 0, 0, 0, 0, 0, 113, 114,
	121, 129, 136, 146, 150, 153, 158, 162, 165, 167,
	168, 169, 172, 186, 189, 190, 191, 192, 204, 205,
	207, 208, 211, 212, 215, 217, 218, 219, 221, 222,
	223, 227, 229, 231, 233, 236, 241, 242, 243, 244,
	246, 247, 248, 251, 252, 253, 254, 262, 266, 275,
	276, 286, 293, 297, 210, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 149, 0, 0, 0, 0, 176,
	0, 0, 142, 184, 182, 0, 0, 0, 216, 268,
	0, 0, 0, 0, 179, 0, 0, 259, 197, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 766, 0, 0, 0,
	769, 0, 0, 0, 0, 0, 0, 133, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 157, 0, 0, 0, 0, 0, 0,
	294, 0, 0, 0, 228, 0, 264, 160, 177, 127,
	112, 122, 0, 159, 206, 237, 245, 0, 0, 0,
	0, 0, 143, 0, 239, 214, 285, 0, 0, 220,
	238, 180, 274, 230, 283, 284, 161, 295, 296, 269,
	292, 300, 256, 0, 0, 0, 0, 0, 0, 173,
	0, 0, 0, 140, 0, 0, 0, 255, 128, 270,
	196, 201, 137, 139, 138, 123, 250, 272, 132, 141,
	260, 265, 115, 267, 282, 134, 249, 117, 280, 263,
	194, 170, 171, 116, 0, 235, 148, 156, 145, 209,
	0, 0, 0, 277, 278, 144, 303, 124, 291, 119,
	125, 290, 203, 0, 0, 0, 273, 281, 195, 188,
	0, 118, 279, 193, 187, 175, 152, 163, 225, 183,
	226, 164, 199, 198, 200, 0, 0, 0, 261, 288,
	304, 185, 130, 0, 0, 271, 298, 299, 0, 0,
	131, 155, 151, 224, 202, 126, 166, 258, 174, 181,
	234, 302, 213, 240, 135, 287, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	770, 771, 772, 773, 774, 778, 779, 783, 784, 792,
	791, 790, 793, 794, 796, 795, 797, 775, 776, 777,
	780, 781, 782, 785, 786, 789, 787, 788, 0, 111,
	120, 178, 301, 232, 154, 289, 0, 147, 0, 0,
	0, 0, 0, 0, 113, 114, 121, 129, 136, 146,
	150, 153, 158, 162, 165, 167, 168, 169, 172, 186,
	189, 190, 191, 192, 204, 205, 207, 208, 211, 212,
	215, 217, 218, 219, 221, 222, 223, 227, 229, 231,
	233, 236, 241, 242, 243, 244, 246, 247, 248, 251,
	252, 253, 254, 262, 266, 275, 276, 286, 293, 297,
	210, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	149, 0, 0, 0, 0, 176, 0, 0, 142, 184,
	182, 0, 0, 0, 216, 268, 0, 0, 0, 0,
	179, 0, 0, 259, 197, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 508, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 807, 806, 816, 817, 809, 810, 811, 812, 813,
	814, 815, 808, 0, 0, 818, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 157,
	0, 0, 0, 0, 0, 0, 294, 0, 0, 0,
	228, 0, 264, 160, 177, 127, 112, 122, 0, 159,
	206, 237, 245, 0, 0, 0, 0, 0, 143, 0,
	239, 214, 285, 0, 0, 220, 238, 180, 274, 230,
	283, 284, 161, 295, 296, 269, 292, 300, 256, 0,
	0, 0, 0, 0, 0, 173, 0, 0, 0, 140,
	0, 0, 0, 255, 128, 270, 196, 201, 137, 139,
	138, 123, 250, 272, 132, 141, 260, 265, 115, 267,
	282, 134, 249, 117, 280, 263, 194, 170, 171, 116,
	0, 235, 148, 156, 145, 209, 0, 0, 0, 277,
	278, 144, 303, 124, 291, 119, 125, 290, 203, 0,
	0, 0, 273, 281, 195, 188, 0, 118, 279, 193,
	187, 175, 152, 163, 225, 183, 226, 164, 199, 198,
	200, 0, 0, 0, 261, 288, 304, 185, 130, 0,
	0, 271, 298, 299, 0, 0, 131, 155, 151, 224,
	202, 126, 166, 258, 174, 181, 234, 302, 213, 240,
	135, 287, 257, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 120, 178, 301, 232,
	154, 289, 0, 147, 0, 0, 0, 0, 0, 0,
	113, 114, 121, 129, 136, 146, 150, 153, 158, 162,
	165, 167, 168, 169, 172, 186, 189, 190, 191, 192,
	204, 205, 207, 208, 211, 212, 215, 217, 218, 219,
	221, 222, 223, 227, 229, 231, 233, 236, 241, 242,
	243, 244, 246, 247, 248, 251, 252, 253, 254, 262,
	266, 275, 276, 286, 293, 297, 29, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 210, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 149, 0,
	0, 0, 0, 176, 0, 0, 142, 184, 182, 0,
	0, 0, 216, 268, 0, 0, 0, 0, 179, 0,
	0, 259, 197, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 68, 0, 0,
	508, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 133, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 157, 0, 0,
	0, 0, 0, 0, 294, 0, 0, 0, 228, 0,
	264, 160, 177, 127, 112, 122, 0, 159, 206, 237,
	245, 0, 0, 0, 0, 0, 143, 0, 239, 214,
	285, 0, 0, 220, 238, 180, 274, 230, 283, 284,
	161, 295, 296, 269, 292, 300, 256, 0, 0, 0,
	0, 0, 0, 173, 0, 0, 0, 140, 0, 0,
	0, 255, 128, 270, 196, 201, 137, 139, 138, 123,
	250, 272, 132, 141, 260, 265, 115, 267, 282, 134,
	249, 117, 280, 263, 194, 170, 171, 116, 0, 235,
	148, 156, 145, 209, 0, 0, 0, 277, 278, 144,
	303, 124, 291, 119, 125, 290, 203, 0, 0, 0,
	273, 281, 195, 188, 0, 118, 279, 193, 187, 175,
	152, 163, 225, 183, 226, 164, 199, 198, 200, 0,
	0, 0, 261, 288, 304, 185, 130, 0, 0, 271,
	298, 299, 0, 0, 131, 155, 151, 224, 202, 126,
	166, 258, 174, 181, 234, 302, 213, 240, 135, 287,
	257, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 120, 178, 301, 232, 154, 289,
	0, 147, 0, 0, 0, 0, 0, 0, 113, 114,
	121, 129, 136, 146, 150, 153, 158, 162, 165, 167,
	168, 169, 172, 186, 189, 190, 191, 192, 204, 205,
	207, 208, 211, 212, 215, 217, 218, 219, 221, 222,
	223, 227, 229, 231, 233, 236, 241, 242, 243, 244,
	246, 247, 248, 251, 252, 253, 254, 262, 266, 275,
	276, 286, 293, 297, 29, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 210, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 149, 0, 0, 0,
	0, 176, 0, 0, 142, 184, 182, 0, 0, 0,
	216, 268, 0, 0, 0, 0, 179, 0, 0, 259,
	197, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 68, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 133,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 157, 0, 0, 0, 0,
	0, 0, 294, 0, 0, 0, 228, 0, 264, 160,
	177, 127, 112, 122, 0, 159, 206, 237, 245, 0,
	0, 0, 0, 0, 143, 0, 239, 214, 285, 0,
	0, 220, 238, 180, 274, 230, 283, 284, 161, 295,
	296, 269, 292, 300, 256, 0, 0, 0, 0, 0,
	0, 173, 0, 0, 0, 140, 0, 0, 0, 255,
	128, 270, 196, 201, 137, 139, 138, 123, 250, 272,
	132, 141, 260, 265, 115, 267, 282, 134, 249, 117,
	280, 263, 194, 170, 171, 116, 0, 235, 148, 156,
	145, 209, 0, 0, 0, 277, 278, 144, 303, 124,
	291, 119, 125, 290, 203, 0, 0, 0, 273, 281,
	195, 188, 0, 118, 279, 193, 187, 175, 152, 163,
	225, 183, 226, 164, 199, 198, 200, 0, 0, 0,
	261, 288, 304, 185, 130, 0, 0, 271, 298, 299,
	0, 0, 131, 155, 151, 224, 202, 126, 166, 258,
	174, 181, 234, 302, 213, 240, 135, 287, 257, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 120, 178, 301, 232, 154, 289, 0, 147,
	0, 0, 0, 0, 0, 0, 113, 114, 121, 129,
	136, 146, 150, 153, 158, 162, 165, 167, 168, 169,
	172, 186, 189, 190, 191, 192, 204, 205, 207, 208,
	211, 212, 215, 217, 218, 219, 221, 222, 223, 227,
	229, 231, 233, 236, 241, 242, 243, 244, 246, 247,
	248, 251, 252, 253, 254, 262, 266, 275, 276, 286,
	293, 297, 210, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 149, 940, 0, 0, 0, 176, 0, 0,
	142, 184, 182, 0, 0, 0, 216, 268, 0, 0,
	0, 0, 179, 0, 0, 259, 197, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 508, 0, 0, 0, 939, 0,
	0, 0, 0, 0, 0, 133, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 157, 0, 0, 0, 0, 0, 0, 294, 0,
	0, 0, 228, 0, 264, 160, 177, 127, 112, 122,
	0, 159, 206, 237, 245, 0, 0, 0, 0, 0,
	143, 0, 239, 214, 285, 0, 0, 220, 238, 180,
	274, 230, 283, 284, 161, 295, 296, 269, 292, 300,
	256, 0, 0, 0, 0, 0, 0, 173, 0, 0,
	0, 140, 0, 0, 0, 255, 128, 270, 196, 201,
	137, 139, 138, 123, 250, 272, 132, 141, 260, 265,
	115, 267, 282, 134, 249, 117, 280, 263, 194, 170,
	171, 116, 0, 235, 148, 156, 145, 209, 0, 0,
	0, 277, 278, 144, 303, 124, 291, 119, 125, 290,
	203, 0, 0, 0, 273, 281, 195, 188, 0, 118,
	279, 193, 187, 175, 152, 163, 225, 183, 226, 164,
	199, 198, 200, 0, 0, 0, 261, 288, 304, 185,
	130, 0, 0, 271, 298, 299, 0, 0, 131, 155,
	151, 224, 202, 126, 166, 258, 174, 181, 234, 302,
	213, 240, 135, 287, 257, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 120, 178,
	301, 232, 154, 289, 0, 147, 0, 0, 0, 0,
	0, 0, 113, 114, 121, 129, 136, 146, 150, 153,
	158, 162, 165, 167, 168, 169, 172, 186, 189, 190,
	191, 192, 204, 205, 207, 208, 211, 212, 215, 217,
	218, 219, 221, 222, 223, 227, 229, 231, 233, 236,
	241, 242, 243, 244, 246, 247, 248, 251, 252, 253,
	254, 262, 266, 275, 276, 286, 293, 297, 210, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 149, 0,
	0, 0, 0, 176, 0, 0, 142, 184, 182, 0,
	0, 0, 216, 268, 0, 0, 0, 0, 179, 0,
	0, 259, 197, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 68, 0, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 133, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 157, 0, 0,
	0, 0, 0, 0, 294, 0, 0, 0, 228, 0,
	264, 160, 177, 127, 112, 122, 0, 159, 206, 237,
	245, 0, 0, 0, 0, 0, 143, 0, 239, 214,
	285, 0, 0, 220, 238, 180, 274, 230, 283, 284,
	161, 295, 296, 269, 292, 300, 256, 0, 0, 0,
	0, 0, 0, 173, 0, 0, 0, 140, 0, 0,
	0, 255, 128, 270, 196, 201, 137, 139, 138, 123,
	250, 272, 132, 141, 260, 265, 115, 267, 282, 134,
	249, 117, 280, 263, 194, 170, 171, 116, 0, 235,
	148, 156, 145, 209, 0, 0, 0, 277, 278, 144,
	303, 124, 291, 119, 125, 290, 203, 0, 0, 0,
	273, 281, 195, 188, 0, 118, 279, 193, 187, 175,
	152, 163, 225, 183, 226, 164, 199, 198, 200, 0,
	0, 0, 261, 288, 304, 185, 130, 0, 0, 271,
	298, 299, 0, 0, 131, 155, 151, 224, 202, 126,
	166, 258, 174, 181, 234, 302, 213, 240, 135, 287,
	257, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 120, 178, 301, 232, 154, 289,
	0, 147, 0, 0, 0, 0, 0, 0, 113, 114,
	121, 129, 136, 146, 150, 153, 158, 162, 165, 167,
	168, 169, 172, 186, 189, 190, 191, 192, 204, 205,
	207, 208, 211, 212, 215, 217, 218, 219, 221, 222,
	223, 227, 229, 231, 233, 236, 241, 242, 243, 244,
	246, 247, 248, 251, 252, 253, 254, 262, 266, 275,
	276, 286, 293, 297, 210, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 149, 0, 0, 0, 0, 176,
	0, 0, 142, 184, 182, 0, 0, 0, 216, 268,
	0, 0, 0, 0, 179, 0, 0, 259, 197, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 68, 0, 0, 508, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 157, 0, 0, 0, 0, 0, 0,
	294, 0, 0, 0, 228, 0, 264, 160, 177, 127,
	112, 122, 0, 159, 206, 237, 245, 0, 0, 0,
	0, 0, 143, 0, 239, 214, 285, 0, 0, 220,
	238, 180, 274, 230, 283, 284, 161, 295, 296, 269,
	292, 300, 256, 0, 0, 0, 0, 0, 0, 173,
	0, 0, 0, 140, 0, 0, 0, 255, 128, 270,
	196, 201, 137, 139, 138, 123, 250, 272, 132, 141,
	260, 265, 115, 267, 282, 134, 249, 117, 280, 263,
	194, 170, 171, 116, 0, 235, 148, 156, 145, 209,
	0, 0, 0, 277, 278, 144, 303, 124, 291, 119,
	125, 290, 203, 0, 0, 0, 273, 281, 195, 188,
	0, 118, 279, 193, 187, 175, 152, 163, 225, 183,
	226, 164, 199, 198, 200, 0, 0, 0, 261, 288,
	304, 185, 130, 0, 0, 271, 298, 299, 0, 0,
	131, 155, 151, 224, 202, 126, 166, 258, 174, 181,
	234, 302, 213, 240, 135, 287, 257, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	120, 178, 301, 232, 154, 289, 0, 147, 0, 0,
	0, 0, 0, 0, 113, 114, 121, 129, 136, 146,
	150, 153, 158, 162, 165, 167, 168, 169, 172, 186,
	189, 190, 191, 192, 204, 205, 207, 208, 211, 212,
	215, 217, 218, 219, 221, 222, 223, 227, 229, 231,
	233, 236, 241, 242, 243, 244, 246, 247, 248, 251,
	252, 253, 254, 262, 266, 275, 276, 286, 293, 297,
	210, 0, 0, 0, 0, 0, 0, 0, 0, 910,
	149, 0, 0, 0, 0, 176, 0, 0, 142, 184,
	182, 0, 0, 0, 216, 268, 0, 0, 0, 0,
	179, 0, 0, 259, 197, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 157,
	0, 0, 0, 0, 0, 0, 294, 0, 0, 0,
	228, 0, 264, 160, 177, 127, 112, 122, 0, 159,
	206, 237, 245, 0, 0, 0, 0, 0, 143, 0,
	239, 214, 285, 0, 0, 220, 238, 180, 274, 230,
	283, 284, 161, 295, 296, 269, 292, 300, 256, 0,
	0, 0, 0, 0, 0, 173, 0, 0, 0, 140,
	0, 0, 0, 255, 128, 270, 196, 201, 137, 139,
	138, 123, 250, 272, 132, 141, 260, 265, 115, 267,
	282, 134, 249, 117, 280, 263, 194, 170, 171, 116,
	0, 235, 148, 156, 145, 209, 0, 0, 0, 277,
	278, 144, 303, 124, 291, 119, 125, 290, 203, 0,
	0, 0, 273, 281, 195, 188, 0, 118, 279, 193,
	187, 175, 152, 163, 225, 183, 226, 164, 199, 198,
	200, 0, 0, 0, 261, 288, 304, 185, 130, 0,
	0, 271, 298, 299, 0, 0, 131, 155, 151, 224,
	202, 126, 166, 258, 174, 181, 234, 302, 213, 240,
	135, 287, 257, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 120, 178, 301, 232,
	154, 289, 0, 147, 0, 0, 0, 0, 0, 0,
	113, 114, 121, 129, 136, 146, 150, 153, 158, 162,
	165, 167, 168, 169, 172, 186, 189, 190, 191, 192,
	204, 205, 207, 208, 211, 212, 215, 217, 218, 219,
	221, 222, 223, 227, 229, 231, 233, 236, 241, 242,
	243, 244, 246, 247, 248, 251, 252, 253, 254, 262,
	266, 275, 276, 286, 293, 297, 465, 0, 0, 0,
	0, 0, 0, 210, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 149, 0, 0, 0, 0, 176, 0,
	0, 142, 184, 182, 0, 0, 0, 216, 268, 0,
	0, 0, 0, 179, 0, 0, 259, 197, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 157, 0, 0, 0, 0, 0, 0, 294,
	0, 0, 0, 228, 0, 264, 160, 177, 127, 112,
	122, 0, 159, 206, 237, 245, 0, 0, 0, 0,
	0, 143, 0, 239, 214, 285, 0, 0, 220, 238,
	180, 274, 230, 283, 284, 161, 295, 296, 269, 292,
	300, 256, 0, 0, 0, 0, 0, 0, 173, 0,
	0, 0, 140, 0, 0, 0, 255, 128, 270, 196,
	201, 137, 139, 138, 123, 250, 272, 132, 141, 260,
	265, 115, 267, 282, 134, 249, 117, 280, 263, 194,
	170, 171, 116, 0, 235, 148, 156, 145, 209, 0,
	0, 0, 277, 278, 144, 303, 124, 291, 119, 125,
	290, 203, 0, 0, 0, 273, 281, 195, 188, 0,
	118, 279, 193, 187, 175, 152, 163, 225, 183, 226,
	164, 199, 198, 200, 0, 0, 0, 261, 288, 304,
	185, 130, 0, 0, 271, 298, 299, 0, 0, 131,
	155, 151, 224, 202, 126, 166, 258, 174, 181, 234,
	302, 213, 240, 135, 287, 257, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 120,
	178, 301, 232, 154, 289, 0, 147, 0, 0, 0,
	0, 0, 0, 113, 114, 121, 129, 136, 146, 150,
	153, 158, 162, 165, 167, 168, 169, 172, 186, 189,
	190, 191, 192, 204, 205, 207, 208, 211, 212, 215,
	217, 218, 219, 221, 222, 223, 227, 229, 231, 233,
	236, 241, 242, 243, 244, 246, 247, 248, 251, 252,
	253, 254, 262, 266, 275, 276, 286, 293, 297, 210,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 149,
	0, 0, 0, 0, 176, 0, 0, 142, 184, 182,
	0, 0, 0, 216, 268, 0, 0, 0, 0, 179,
	0, 0, 259, 197, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 157, 0,
	0, 0, 106, 0, 0, 294, 0, 0, 0, 228,
	0, 264, 160, 177, 127, 112, 122, 0, 159, 206,
	237, 245, 0, 0, 0, 0, 0, 143, 0, 239,
	214, 285, 0, 0, 220, 238, 180, 274, 230, 283,
	284, 161, 295, 296, 269, 292, 300, 256, 0, 0,
	0, 0, 0, 0, 173, 0, 0, 0, 140, 0,
	0, 0, 255, 128, 270, 196, 201, 137, 139, 138,
	123, 250, 272, 132, 141, 260, 265, 115, 267, 282,
	134, 249, 117, 280, 263, 194, 170, 171, 116, 0,
	235, 148, 156, 145, 209, 0, 0, 0, 277, 278,
	144, 303, 124, 291, 119, 125, 290, 203, 0, 0,
	0, 273, 281, 195, 188, 0, 118, 279, 193, 187,
	175, 152, 163, 225, 183, 226, 164, 199, 198, 200,
	0, 0, 0, 261, 288, 304, 185, 130, 0, 0,
	271, 298, 299, 0, 0, 131, 155, 151, 224, 202,
	126, 166, 258, 174, 181, 234, 302, 213, 240, 135,
	287, 257, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 120, 178, 301, 232, 154,
	289, 0, 147, 0, 0, 0, 0, 0, 0, 113,
	114, 121, 129, 136, 146, 150, 153, 158, 162, 165,
	167, 168, 169, 172, 186, 189, 190, 191, 192, 204,
	205, 207, 208, 211, 212, 215, 217, 218, 219, 221,
	222, 223, 227, 229, 231, 233, 236, 241, 242, 243,
	244, 246, 247, 248, 251, 252, 253, 254, 262, 266,
	275, 276, 286, 293, 297, 210, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 149, 0, 0, 0, 0,
	176, 0, 0, 142, 184, 182, 0, 0, 0, 216,
	268, 0, 0, 0, 0, 179, 0, 0, 259, 197,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 508, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 157, 0, 0, 0, 0, 0,
	0, 294, 0, 0, 0, 228, 0, 264, 160, 177,
	127, 112, 122, 0, 159, 206, 237, 245, 0, 0,
	0, 0, 0, 143, 0, 239, 214, 285, 0, 0,
	220, 238, 180, 274, 230, 283, 284, 161, 295, 296,
	269, 292, 300, 256, 0, 0, 0, 0, 0, 0,
	173, 0, 0, 0, 140, 0, 0, 0, 255, 128,
	270, 196, 201, 137, 139, 138, 123, 250, 272, 132,
	141, 260, 265, 115, 267, 282, 134, 249, 117, 280,
	263, 194, 170, 171, 116, 0, 235, 148, 156, 145,
	209, 0, 0, 0, 277, 278, 144, 303, 124, 291,
	119, 125, 290, 203, 0, 0, 0, 273, 281, 195,
	188, 0, 118, 279, 193, 187, 175, 152, 163, 225,
	183, 226, 164, 199, 198, 200, 0, 0, 0, 261,
	288, 304, 185, 130, 0, 0, 271, 298, 299, 0,
	0, 131, 155, 151, 224, 202, 126, 166, 258, 174,
	181, 234, 302, 213, 240, 135, 287, 257, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 120, 178, 301, 232, 154, 289, 0, 147, 0,
	0, 0, 0, 0, 0, 113, 114, 121, 129, 136,
	146, 150, 153, 158, 162, 165, 167, 168, 169, 172,
	186, 189, 190, 191, 192, 204, 205, 207, 208, 211,
	212, 215, 217, 218, 219, 221, 222, 223, 227, 229,
	231, 233, 236, 241, 242, 243, 244, 246, 247, 248,
	251, 252, 253, 254, 262, 266, 275, 276, 286, 293,
	297, 210, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 149, 0, 0, 0, 0, 176, 0, 0, 142,
	184, 182, 0, 0, 0, 216, 268, 0, 0, 0,
	0, 179, 0, 0, 259, 197, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 133, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	157, 0, 0, 0, 0, 0, 0, 294, 0, 0,
	0, 228, 0, 264, 160, 177, 127, 112, 122, 0,
	159, 206, 237, 245, 0, 0, 0, 0, 0, 143,
	0, 239, 214, 285, 0, 0, 220, 238, 180, 274,
	230, 283, 284, 161, 295, 296, 269, 292, 300, 256,
	0, 0, 0, 0, 0, 0, 173, 0, 0, 0,
	140, 0, 0, 0, 255, 128, 270, 196, 201, 137,
	139, 138, 123, 250, 272, 132, 141, 260, 265, 115,
	267, 282, 134, 249, 117, 280, 263, 194, 170, 171,
	116, 0, 235, 148, 156, 145, 209, 0, 0, 0,
	277, 278, 144, 303, 124, 291, 119, 125, 290, 203,
	0, 0, 0, 273, 281, 195, 188, 0, 118, 279,
	193, 187, 175, 152, 163, 225, 183, 226, 164, 199,
	198, 200, 0, 0, 0, 261, 288, 304, 185, 130,
	0, 0, 271, 298, 299, 0, 0, 131, 155, 151,
	224, 202, 126, 166, 258, 174, 181, 234, 302, 213,
	240, 135, 287, 257, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 120, 178, 301,
	232, 154, 289, 0, 147, 0, 0, 0, 0, 0,
	0, 113, 114, 121, 129, 136, 146, 150, 153, 158,
	162, 165, 167, 168, 169, 172, 186, 189, 190, 191,
	192, 204, 205, 207, 208, 211, 212, 215, 217, 218,
	219, 221, 222, 223, 227, 229, 231, 233, 236, 241,
	242, 243, 244, 246, 247, 248, 251, 252, 253, 254,
	262, 266, 275, 276, 286, 293, 297, 210, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 149, 0, 0,
	0, 0, 176, 0, 0, 142, 184, 182, 0, 0,
	0, 216, 268, 0, 0, 0, 0, 179, 0, 0,
	259, 197, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 373,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 157, 0, 0, 0,
	0, 0, 0, 294, 0, 0, 0, 228, 0, 264,
	160, 177, 127, 112, 122, 0, 159, 206, 237, 245,
	0, 0, 0, 0, 0, 143, 0, 239, 214, 285,
	0, 0, 220, 238, 180, 274, 230, 283, 284, 161,
	295, 296, 269, 292, 300, 256, 0, 0, 0, 0,
	0, 0, 173, 0, 0, 0, 140, 0, 0, 0,
	255, 128, 270, 196, 201, 137, 139, 138, 123, 250,
	272, 132, 141, 260, 265, 115, 267, 282, 134, 249,
	117, 280, 263, 194, 170, 171, 116, 0, 235, 148,
	156, 145, 209, 0, 0, 0, 277, 278, 144, 303,
	124, 291, 119, 482, 290, 203, 0, 0, 0, 273,
	281, 195, 188, 0, 118, 279, 193, 187, 175, 152,
	163, 225, 183, 226, 164, 199, 198, 200, 0, 0,
	0, 261, 288, 304, 185, 130, 0, 0, 271, 298,
	299, 0, 0, 131, 155, 151, 224, 483, 481, 166,
	258, 174, 181, 234, 302, 213, 240, 135, 287, 257,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 120, 178, 301, 232, 154, 289, 0,
	147, 0, 0, 0, 0, 0, 0, 113, 114, 121,
	129, 136, 146, 150, 153, 158, 162, 165, 167, 168,
	169, 172, 186, 189, 190, 191, 192, 204, 205, 207,
	208, 211, 212, 215, 217, 218, 219, 221, 222, 223,
	227, 229, 231, 233, 236, 241, 242, 243, 244, 246,
	247, 248, 251, 252, 253, 254, 262, 266, 275, 276,
	286, 293, 297, 210, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 149, 0, 0, 0, 0, 176, 0,
	0, 142, 184, 182, 0, 0, 0, 216, 268, 0,
	0, 0, 0, 179, 0, 0, 259, 197, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 373, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 157, 0, 0, 0, 0, 0, 0, 294,
	0, 0, 0, 228, 0, 264, 160, 177, 127, 112,
	122, 0, 159, 206, 237, 245, 0, 0, 0, 0,
	0, 143, 0, 239, 214, 285, 0, 0, 220, 238,
	180, 274, 230, 283, 284, 161, 295, 296, 269, 292,
	300, 256, 0, 0, 0, 0, 0, 0, 173, 0,
	0, 0, 140, 0, 0, 0, 255, 128, 270, 196,
	201, 137, 139, 138, 123, 250, 272, 132, 141, 260,
	265, 115, 267, 282, 134, 249, 117, 280, 263, 194,
	170, 171, 116, 0, 235, 148, 156, 145, 209, 0,
	0, 0, 277, 278, 144, 303, 124, 291, 119, 125,
	290, 203, 0, 0, 0, 273, 281, 195, 188, 0,
	118, 279, 193, 187, 175, 152, 163, 225, 183, 226,
	164, 199, 198, 200, 0, 0, 0, 261, 288, 304,
	185, 130, 0, 0, 271, 298, 299, 0, 0, 131,
	155, 151, 224, 202, 126, 166, 258, 174, 181, 234,
	302, 213, 240, 135, 287, 257, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 120,
	178, 301, 232, 154, 289, 0, 147, 0, 0, 0,
	0, 0, 0, 113, 114, 121, 129, 136, 146, 150,
	153, 158, 162, 165, 167, 168, 169, 172, 186, 189,
	190, 191, 192, 204, 205, 207, 208, 211, 212, 215,
	217, 218, 219, 221, 222, 223, 227, 229, 231, 233,
	236, 241, 242, 243, 244, 246, 247, 248, 251, 252,
	253, 254, 262, 266, 275, 276, 286, 293, 297, 210,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 149,
	0, 0, 0, 0, 176, 0, 0, 142, 184, 182,
	0, 0, 0, 216, 268, 0, 0, 0, 0, 179,
	0, 0, 259, 197, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 373, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 157, 0,
	0, 0, 0, 0, 0, 294, 0, 0, 0, 228,
	0, 264, 160, 177, 127, 112, 122, 0, 159, 206,
	237, 245, 0, 0, 0, 0, 0, 143, 0, 239,
	214, 285, 0, 0, 220, 238, 180, 274, 230, 283,
	284, 161, 295, 296, 269, 292, 300, 256, 0, 0,
	0, 0, 0, 0, 173, 0, 0, 0, 140, 0,
	0, 0, 255, 128, 270, 196, 201, 137, 139, 138,
	123, 250, 272, 132, 141, 260, 265, 115, 267, 931,
	134, 249, 117, 280, 263, 194, 170, 171, 116, 0,
	235, 148, 156, 145, 209, 0, 0, 0, 277, 278,
	144, 303, 124, 291, 119, 482, 290, 203, 0, 0,
	0, 273, 281, 195, 188, 0, 118, 279, 193, 187,
	175, 152, 163, 225, 183, 226, 164, 199, 198, 200,
	0, 0, 0, 261, 288, 304, 185, 130, 0, 0,
	271, 298, 299, 0, 0, 131, 155, 151, 224, 483,
	481, 166, 258, 174, 181, 234, 302, 213, 240, 135,
	287, 257, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 120, 178, 301, 232, 154,
	289, 0, 147, 0, 0, 0, 0, 0, 0, 113,
	114, 121, 129, 136, 146, 150, 153, 158, 162, 165,
	167, 168, 169, 172, 186, 189, 190, 191, 192, 204,
	205, 207, 208, 211, 212, 215, 217, 218, 219, 221,
	222, 223, 227, 229, 231, 233, 236, 241, 242, 243,
	244, 246, 247, 248, 251, 252, 253, 254, 262, 266,
	275, 276, 286, 293, 297, 210, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 149, 0, 0, 0, 0,
	176, 0, 0, 142, 184, 182, 0, 0, 0, 216,
	268, 0, 0, 0, 0, 179, 0, 0, 259, 197,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 373, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 157, 0, 0, 0, 0, 0,
	0, 294, 0, 0, 0, 228, 0, 264, 160, 177,
	127, 112, 122, 0, 159, 206, 237, 245, 0, 0,
	0, 0, 0, 143, 0, 239, 214, 285, 0, 0,
	220, 238, 180, 274, 230, 283, 284, 161, 295, 296,
	269, 292, 300, 256, 0, 0, 0, 0, 0, 0,
	173, 0, 0, 0, 140, 0, 0, 0, 255, 128,
	270, 196, 201, 137, 139, 138, 123, 250, 272, 132,
	141, 260, 265, 115, 267, 473, 134, 249, 117, 280,
	263, 194, 170, 171, 116, 0, 235, 148, 156, 145,
	209, 0, 0, 0, 277, 278, 144, 303, 124, 291,
	119, 482, 290, 203, 0, 0, 0, 273, 281, 195,
	188, 0, 118, 279, 193, 187, 175, 152, 163, 225,
	183, 226, 164, 199, 198, 200, 0, 0, 0, 261,
	288, 304, 185, 130, 0, 0, 271, 298, 299, 0,
	0, 131, 155, 151, 224, 483, 481, 476, 475, 174,
	181, 234, 302, 213, 240, 135, 287, 257, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 120, 178, 301, 232, 154, 289, 0, 147, 0,
	0, 0, 0, 0, 0, 113, 114, 121, 129, 136,
	146, 150, 153, 158, 162, 165, 167, 168, 169, 172,
	186, 189, 190, 191, 192, 204, 205, 207, 208, 211,
	212, 215, 217, 218, 219, 221, 222, 223, 227, 229,
	231, 233, 236, 241, 242, 243, 244, 246, 247, 248,
	251, 252, 253, 254, 262, 266, 275, 276, 286, 293,
	297,
}
var yyPact = [...]int{

	553, -1000, -301, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1523, 1556, -1000,
	-1000, -1000, -1000, -1000, -1000, 450, 188, -1000, -1000, -1000,
	228, 79, 18931, 225, 2206, 19743, -1000, -1000, -1000, -1000,
	169, 19743, -1000, -1000, -86, -87, -1000, 15, 1069, 1440,
	1171, -1000, -1000, 65, 11, -1000, -1000, -1000, -1000, -1000,
	-1000, 1502, 1521, 1233, 1501, 1352, -1000, 9144, 190, 190,
	18525, 21367, -1000, -1000, 445, 19743, 214, 19743, -166, 183,
	183, 107, 183, -1000, 488, -1000, -1000, -1000, 19743, 184,
	19337, 184, 184, 184, 184, 184, 19743, -1000, 363, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 19743, 1060, 1460, 5825, 451,
	5825, 5825, -1000, 547, -1000, 84, 82, 88, 5825, 8,
	577, 71, 9, -1000, 5825, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 176, 1171, 479, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1456, 747, 1280, -81, 893, 219, 19743, 490,
	-1000, -1000, 1465, 11186, 11592, 1523, -1000, 1171, -1000, -1000,
	-1000, 1388, -1000, -1000, 560, 1542, -1000, 14028, 360, -1000,
	11186, 2881, 1200, -1000, -1000, 1200, -1000, -1000, 248, -1000,
	-1000, 12810, 12810, 12810, 12810, 12810, 12810, 12810, 12810, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1200, -1000, 10374, 1200, 1200,
	1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 11186, 1200,
	1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
	1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
	1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
	1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
	1200, 1200, 1200, 18112, 17300, 19743, 1193, 1167, -1000, -1000,
	347, 1073, 20961, -115, -1000, -1000, -1000, 470, 16894, -1000,
	342, -1000, 1455, -1000, 1064, 19743, -1000, -1000, 3680, 820,
	-1000, 1273, -1000, 19337, 1492, 198, 1058, 545, 1057, 1056,
	1027, 19743, 1022, 1198, 196, 19743, 1479, 1314, -1000, -1000,
	19743, 1019, 1012, 1005, 993, -1000, 7925, -1000, 5825, 5825,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 183, 183,
	5825, 5825, 5825, 19743, 19743, 19743, -1000, -1000, 19743, -1000,
	-1000, 558, 558, 5825, 5825, -1000, 1541, 505, 505, -1000,
	-1000, -1000, -1000, 11186, -1000, 12810, 416, -1000, 1313, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 986, -1000, -1000, 440,
	-1000, 782, -1000, 10780, -299, -1000, -1000, -1000, 19743, 5825,
	95, 132, 119, 19743, -1000, 1550, 406, 1070, 277, 1196,
	-1000, 584, 1476, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
	1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
	1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
	1200, 1502, 893, 1352, 618, 1324, -1000, -1000, -1000, 19743,
	-1000, 11186, 11186, 710, -1000, 15246, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 6665, 418,
	12810, 625, 496, 12810, 12810, 12810, 12810, 12810, 12810, 12810,
	12810, 12810, 12810, 12810, 12810, 12810, 12810, 12810, 685, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 982, -1000, 1171,
	1106, 1106, 385, 385, 385, 385, 385, 385, 385, 15652,
	1490, 893, 1046, 444, 10374, 9144, 9144, 893, 11186, 11186,
	9956, 9550, 9144, 9144, 1490, 512, 444, 20555, -1000, -1000,
	12404, -1000, -1000, -1000, -1000, -1000, 893, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 19337, 19337, 9144, 9144, 9144,
	9144, 893, 893, 9144, 9144, 9144, 9144, 9144, 893, 893,
	893, 893, 1490, 1490, 9144, 9144, 9144, 1490, 9144, 9144,
	1490, 9144, 9144, 9144, 9144, 1490, 9144, 9144, 9144, 122,
	19743, -1000, 1197, 1234, -1000, -1000, -1000, 1491, 16488, 13622,
	122, 1160, 17300, 19743, -1000, -1000, 17300, 19743, 6245, 20149,
	1073, -115, 1180, -1000, -110, -131, 8332, 375, -1000, -1000,
	-1000, 7505, -1000, 4985, 552, 1079, -1000, -65, -1000, -1000,
	-1000, 1218, -1000, 1218, 215, -17, 1218, 1218, 1218, 1218,
	1218, -26, -26, -26, -26, -27, -1000, -1000, -1000, -1000,
	-1000, 1265, 1257, -1000, 1218, 1218, 1218, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1246, 155, 1246, 1230, 1230,
	1230, 1230, 163, -1000, -1000, -1000, -1000, 11186, 1242, -1000,
	19743, 5825, 1469, 5825, 92, 1255, -1000, -1000, 19743, 19743,
	1194, -1000, 19743, 1190, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 978, 941, -1000, -1000, -1000, -1000,
	-1000, -1000, 517, -1000, 767, 11186, -1000, -1000, -1000, 19743,
	1486, 19743, 19743, 558, 444, 766, -1000, 761, 19743, -1000,
	1189, -1000, 469, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1017, 1477, 760,
	229, -1000, 19743, 19743, 19743, 19743, 19743, 239, -1000, 1357,
	11186, 11186, 7505, 11592, -1000, -1000, -1000, -1000, 1465, -1000,
	1490, 1505, -1000, 1371, 1370, 9144, -1000, -1000, 418, 477,
	-1000, -1000, 628, -1000, -1000, -1000, -1000, 273, 1200, -1000,
	859, -1000, -1000, -1000, -1000, 625, 12810, 12810, 12810, 766,
	859, 2970, 1633, 2297, 385, 697, 697, 384, 384, 384,
	384, 384, 734, 734, -1000, -1000, -1000, 893, -1000, -1000,
	-1000, 9144, -1000, 11186, -1000, 893, 971, -1000, 971, -1000,
	756, 696, 383, 1539, 971, 371, 1538, 971, 971, 971,
	9144, 513, -1000, 11186, 893, -1000, 1053, 1188, 1187, 971,
	893, 1181, 971, 971, -177, -177, 893, 971, 893, 971,
	971, -177, -177, -177, -177, 9144, 9144, 971, 971, 971,
	9144, 971, 971, 9144, 971, 971, 971, 971, 9144, 971,
	971, 971, 1206, 1200, -1000, 20149, 17300, 17300, 17300, 17300,
	17300, -1000, 1340, 1339, -1000, 1328, 1326, 1334, 14840, -1000,
	1003, 16488, -1000, 1200, -1000, 14434, 322, 212, 209, 202,
	-1000, -1000, -1000, 1529, 17300, 1147, -1000, 1147, -1000, 267,
	-1000, -1000, 1180, -115, -119, -1000, -1000, -1000, -1000, 444,
	-1000, 759, -1000, 259, 1163, 4565, -1000, -1000, -1000, -1000,
	162, -1000, -1000, -1000, 1252, 768, -1000, 1380, 329, 457,
	790, 1377, -1000, -1000, -1000, 549, -68, -1000, -1000, 645,
	-26, -26, 1218, 1218, 149, 1218, -1000, -26, -1000, -1000,
	-1000, 375, 1449, 375, 375, 375, 375, -26, 754, 754,
	-1000, -1000, -1000, -1000, 632, -1000, 1246, -1000, -1000, 623,
	-1000, -1000, -1000, -1000, 1024, 1310, 19337, 1171, 1482, -1000,
	-1000, -1000, 1535, -1000, -1000, 194, 192, -1000, 5825, 19743,
	5825, 5825, 1529, 922, 915, -1000, 444, 505, 558, 1443,
	-1000, -1000, -1000, -1000, 12810, -1000, -1000, 440, 1106, -1000,
	122, 218, -1000, -1000, 786, 654, 524, 159, 159, -1000,
	446, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	121, 1212, -1000, -1000, -1000, -1000, 31, 93, 1355, 444,
	444, -1000, -1000, 19743, -1000, -1000, -1000, -1000, 1211, -1000,
	-1000, -1000, 5405, 9144, -1000, 766, 859, 2616, -1000, 12810,
	-1000, 893, 444, -1000, 9144, -1000, -1000, 708, 685, 708,
	12810, 12810, -1000, 12810, 12810, -1000, -212, -1000, 1140, 503,
	-1000, 11186, 1037, -1000, -1000, 12810, 12810, -1000, -1000, -1000,
	-1000, -1000, 17706, -1000, -177, -177, -177, -177, -177, -1000,
	-1000, -1000, -1000, 971, 971, -177, -177, -177, 971, -177,
	-177, 971, -177, -177, -177, -177, 971, -177, -177, -177,
	1308, 20149, 1200, -1000, 16070, 19337, 1195, 1234, 1241, 1306,
	1185, -1000, -1000, -1000, -1000, 1338, -1000, 1329, -1000, -1000,
	-1000, -1000, 19337, 12810, 322, -1000, 1200, 1200, 1200, 1523,
	11186, 1147, -1000, -1000, 395, -1000, -1000, -118, -151, -1000,
	-1000, -1000, 7085, 4985, -1000, 4985, -1000, 19337, 146, -1000,
	790, 790, -1000, -1000, -1000, 1232, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 554, 12810, 1548, -1000, 1379, -1000, 1378,
	752, -1000, -1000, 1078, 375, 375, -26, -1000, -1000, 1218,
	-1000, 375, -1000, 433, -1000, -1000, -1000, -1000, 375, 964,
	-1000, 956, 1162, -1000, 954, 45, 19743, -1000, -1000, -1000,
	1305, -1000, -1000, -1000, 991, 1161, -1000, 3680, 913, 885,
	878, 19743, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 558,
	-1000, 12810, 859, -1000, -1000, -26, 19743, -1000, 799, -1000,
	790, 346, -1000, -1000, -1000, 876, 1377, -1000, -1000, 871,
	-1000, 868, 19337, 1376, 866, 19743, 19337, -1000, -1000, 800,
	848, 11186, -1000, 19337, -217, 828, 19337, 19337, 19337, -1000,
	-1000, 1529, 17300, -1000, -1000, 893, -1000, 12810, 859, -1000,
	-1000, 893, 1218, 1218, -1000, 1218, 1230, -1000, 1218, 2,
	1218, 0, 893, 893, 2832, 2763, 2719, 2258, 1200, -173,
	-1000, 444, 11186, 2132, 1083, -1000, 299, -1000, -1000, -1000,
	-1000, -1000, -177, -177, -1000, -1000, -1000, -1000, -177, -1000,
	-1000, -177, -1000, -1000, -1000, -1000, -177, -1000, -1000, -1000,
	-1000, 1466, 1088, 1086, -1000, -1000, 8738, 893, 952, 243,
	950, -1000, 1523, -1000, -1000, 11186, 1219, -1000, 11186, -1000,
	-1000, -1000, 950, 990, -1000, 19337, 19337, 19337, 1502, 444,
	-1000, -1000, -1000, -1000, 4565, -1000, 939, -1000, 1218, -1000,
	-1000, -1000, 19337, -1000, 859, -105, -1000, -1000, -1000, -1000,
	-1000, -1000, 375, -1000, -1000, -1000, -1000, -1000, -26, 744,
	-26, 620, -1000, 595, -1000, -1000, -247, 1216, -1000, 1171,
	19743, 49, 194, -1000, 3680, 3680, 3680, -1000, -1000, 859,
	-95, -1000, 800, 135, -1000, 1242, 329, 146, -1000, -1000,
	-1000, -1000, 823, 332, -1000, 178, 135, 800, 444, 1468,
	-1000, 7085, -1000, -1000, 1214, 1284, -1000, 1527, 1118, -1000,
	859, -1000, -1000, 140, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 12810, 12810, 12810, 12810, 12810, 893, 732, 444,
	12810, 12810, 893, 1520, -1000, -1000, -1000, -1000, -1000, 1374,
	-1000, 1200, -1000, -1000, 1144, 19337, 19337, -1000, 19337, 1502,
	444, 19337, 444, 13216, -1000, 14840, 928, -1000, 928, 928,
	-1000, 241, 19337, 1476, 896, -1000, -1000, 375, -1000, 375,
	972, 965, -1000, 19337, -1000, 1494, -1000, 49, -1000, 730,
	38, 44, -1000, 37, 36, 35, 34, 30, -1000, -1000,
	-1000, -1000, 1428, 1424, 957, -1000, -1000, 795, 1210, 790,
	-1000, -1000, 772, -1000, -1000, 19337, -1000, 135, 1200, 1093,
	-1000, 468, 19337, 19743, 1525, 1519, -1000, -1000, 1053, 1053,
	1053, 1053, 43, -1000, -1000, 1053, 1053, -1000, 11186, 1547,
	-1000, 1200, -1000, 1171, 242, -1000, -1000, -1000, 892, -1000,
	322, 19337, -1000, -1000, -1000, 241, -1000, 738, 446, 724,
	-1000, -1000, 139, -1000, -1000, -1000, -1000, 884, -1000, 52,
	2757, -1000, -1000, -1000, -1000, -1000, -1000, 1432, 1431, 58,
	189, 1383, 1390, 1518, -1000, -1000, -1000, 19337, 1242, -1000,
	-1000, -1000, -1000, 116, 7085, 4985, 882, -1000, -1000, 11592,
	11592, -1000, -1000, -1000, -1000, 893, 112, -224, -1000, -1000,
	1072, 20149, 1086, 893, 19337, -1000, -1000, -1000, -1000, -1000,
	592, -1000, 19743, 241, 64, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 11186, 11186,
	2757, -1000, -1000, -1000, -1000, 1209, 582, 1424, 1514, 1415,
	1392, -1000, 717, -1000, 861, 1204, -1000, 856, -1000, 19337,
	-1000, -1000, 1212, -1000, 444, -1000, 1081, -1000, 444, -1000,
	-1000, 1350, -215, -227, 893, 1073, -1000, -1000, -1000, 1203,
	-1000, 241, 51, -1000, 572, 1029, -302, -1000, -1000, 19337,
	1426, -1000, 712, -1000, 1510, 1509, -1000, 241, 19337, -1000,
	116, 1369, -217, 11592, -1000, 1345, -1000, -1000, 19337, -1000,
	701, 691, 561, -1000, 11186, 779, 2503, 853, -1000, -1000,
	703, 694, -1000, 827, -1000, 111, -1000, -1000, -221, 804,
	270, -1000, -1000, 535, 779, -1000, 911, -303, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 779, -1000,
	-1000, -1000, -1000, -1000, 241, 101, -225, 1300, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -304, 779, 253, -305, -1000,
	1200, -229, 1299, 1290, 1537, -1000, 770, -311, 179, 779,
	429, -1000, -1000, 11186, 609, 11998, -1000, -1000, 1546, -1000,
	1544, 334, 334, 532, 779, -1000, -312, 177, 779, -1000,
	687, -1000, 1053, 893, -1000, -1000, -1000, 152, 674, -1000,
	-1000, 544, -1000, -314, 779, -1000, -1000, -1000, -1000, -1000,
	174, 260, -318, -1000, 170, 779, -1000,
}
var yyPgo = [...]int{

	0, 1895, 172, 863, 1889, 1888, 1881, 20, 14, 10,
	22, 1877, 1648, 1643, 1634, 1621, 1876, 1619, 7, 2,
	37, 12, 29, 35, 1875, 8, 1873, 1870, 17, 1868,
	5, 77, 1865, 1863, 1862, 1861, 1856, 1617, 1855, 1854,
	1852, 1850, 1849, 1609, 1606, 1846, 1842, 1602, 1569, 1841,
	1836, 1567, 1565, 1563, 1834, 136, 1831, 1829, 1828, 149,
	1827, 105, 1826, 1824, 1823, 75, 1411, 85, 72, 766,
	1822, 16, 1819, 64, 84, 99, 1818, 70, 1817, 1816,
	106, 1814, 1813, 1811, 82, 1808, 1806, 2558, 1805, 1804,
	103, 1798, 50, 47, 188, 1797, 1795, 1794, 1793, 1792,
	100, 96, 1791, 1790, 1789, 60, 1787, 1786, 120, 1785,
	1783, 1781, 90, 48, 1780, 44, 34, 52, 1779, 142,
	36, 1778, 88, 1773, 1771, 1769, 1766, 1764, 27, 1759,
	43, 1754, 93, 253, 128, 13, 42, 53, 91, 1741,
	25, 1740, 79, 69, 62, 38, 98, 1739, 97, 89,
	1738, 1737, 635, 1736, 1735, 83, 1733, 54, 81, 1728,
	576, 104, 68, 1726, 1725, 1724, 1722, 63, 92, 1721,
	1717, 56, 1057, 116, 963, 24, 1560, 59, 102, 1716,
	33, 1714, 2663, 117, 51, 73, 1712, 1711, 71, 137,
	1710, 1709, 1708, 1707, 1706, 1705, 1704, 119, 1696, 1695,
	1693, 1692, 180, 94, 1691, 1689, 86, 66, 1687, 1686,
	1684, 1683, 1682, 80, 65, 1681, 76, 101, 87, 1680,
	1679, 1678, 1676, 57, 40, 1675, 1674, 1668, 1666, 67,
	32, 1663, 45, 41, 19, 49, 6, 55, 95, 1662,
	31, 1660, 39, 1657, 18, 1655, 1654, 1652, 28, 78,
	3, 4, 9, 1651, 1650, 1645, 26, 1641, 1636, 1630,
	1623, 58, 1614, 1612, 46, 1604, 1599, 1595, 1587, 1584,
	0, 146, 107, 1580, 1571, 111,
}
var yyR1 = [...]int{

	0, 268, 269, 269, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 245,
	245, 245, 246, 246, 54, 2, 2, 2, 6, 3,
	4, 4, 5, 5, 7, 7, 58, 58, 8, 9,
	9, 9, 9, 272, 272, 82, 82, 80, 80, 81,
	81, 142, 142, 10, 10, 10, 10, 146, 146, 149,
	149, 149, 150, 150, 150, 150, 186, 186, 135, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 259, 259,
	260, 260, 261, 261, 261, 261, 262, 262, 263, 263,
	264, 264, 264, 264, 264, 264, 264, 264, 264, 264,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 24, 26, 26, 170, 170, 35, 35, 36,
	36, 36, 131, 131, 131, 11, 11, 11, 11, 11,
	18, 20, 20, 27, 27, 28, 21, 21, 21, 21,
	29, 29, 30, 22, 22, 34, 34, 32, 32, 31,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 17, 258, 258, 258, 25, 25, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 248, 248, 247,
	244, 244, 243, 243, 242, 41, 225, 227, 227, 226,
	226, 226, 226, 226, 226, 226, 214, 190, 190, 190,
	190, 190, 190, 190, 189, 189, 189, 189, 193, 193,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 192,
	192, 192, 192, 192, 192, 192, 192, 194, 194, 194,
	194, 194, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 196, 196, 196,
	196, 196, 196, 196, 196, 213, 213, 197, 197, 206,
	206, 207, 207, 207, 204, 204, 205, 205, 208, 208,
	200, 201, 209, 202, 202, 202, 203, 203, 203, 212,
	212, 212, 212, 198, 215, 215, 236, 236, 235, 235,
	234, 234, 234, 224, 224, 231, 231, 231, 231, 231,
	219, 219, 219, 218, 218, 220, 220, 223, 223, 233,
	233, 232, 216, 216, 217, 217, 237, 237, 237, 237,
	237, 238, 221, 221, 222, 222, 222, 251, 252, 250,
	250, 250, 250, 250, 97, 97, 97, 228, 228, 228,
	229, 229, 229, 230, 230, 230, 253, 253, 37, 37,
	37, 38, 38, 38, 38, 38, 38, 38, 38, 38,
	38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
	130, 130, 130, 39, 40, 40, 40, 40, 40, 40,
	40, 40, 168, 168, 249, 249, 249, 249, 249, 241,
	239, 239, 240, 240, 13, 42, 42, 14, 14, 14,
	14, 14, 14, 14, 15, 15, 43, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	70, 156, 156, 154, 154, 157, 157, 155, 155, 155,
	158, 158, 158, 159, 159, 187, 187, 187, 45, 45,
	50, 50, 53, 51, 52, 169, 169, 48, 48, 49,
	49, 49, 49, 64, 64, 273, 273, 47, 47, 46,
	46, 46, 46, 16, 274, 55, 56, 56, 57, 57,
	57, 61, 61, 61, 59, 59, 59, 60, 60, 67,
	67, 66, 66, 68, 68, 68, 68, 133, 133, 133,
	134, 134, 179, 179, 179, 178, 178, 178, 178, 72,
	72, 73, 73, 74, 74, 75, 75, 75, 75, 91,
	91, 92, 92, 92, 92, 92, 103, 103, 141, 141,
	140, 140, 143, 143, 76, 76, 76, 76, 77, 77,
	78, 78, 79, 79, 167, 167, 184, 184, 184, 83,
	83, 83, 85, 84, 84, 84, 84, 86, 86, 88,
	89, 89, 87, 87, 90, 93, 93, 93, 93, 94,
	94, 69, 69, 69, 69, 69, 69, 69, 153, 153,
	96, 96, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 111, 111, 111, 111, 111, 111, 98, 98,
	98, 98, 98, 98, 98, 65, 65, 112, 112, 112,
	119, 113, 113, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 106, 106, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 104, 104, 104,
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
	104, 104, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 275,
	275, 108, 107, 107, 107, 107, 107, 107, 62, 62,
	62, 62, 62, 185, 185, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 123, 123,
	63, 63, 121, 121, 122, 124, 124, 120, 120, 120,
	100, 100, 100, 100, 100, 100, 100, 100, 102, 102,
	102, 125, 125, 114, 114, 71, 71, 126, 126, 127,
	127, 128, 128, 129, 129, 132, 132, 136, 136, 136,
	137, 137, 137, 137, 138, 138, 138, 99, 99, 99,
	99, 99, 99, 139, 139, 139, 139, 144, 144, 115,
	115, 117, 117, 116, 118, 145, 145, 148, 148, 148,
	148, 147, 147, 147, 181, 181, 181, 151, 151, 160,
	160, 161, 161, 152, 152, 199, 199, 164, 164, 164,
	164, 164, 164, 164, 164, 164, 166, 166, 165, 165,
	165, 162, 162, 162, 163, 163, 180, 180, 176, 176,
	177, 177, 182, 182, 183, 183, 254, 254, 210, 210,
	267, 267, 211, 211, 256, 256, 257, 257, 265, 265,
	266, 266, 255, 255, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 270,
	271, 171, 172, 172, 172,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 0, 1, 11, 4, 6, 7, 5, 10,
	1, 3, 1, 3, 7, 8, 1, 1, 9, 8,
	7, 6, 6, 1, 1, 1, 3, 1, 3, 1,
	3, 0, 4, 3, 4, 5, 4, 1, 3, 3,
	2, 2, 2, 2, 2, 1, 1, 1, 0, 2,
	2, 11, 7, 9, 5, 5, 15, 11, 0, 1,
	1, 3, 2, 3, 3, 3, 0, 1, 1, 2,
	2, 2, 2, 1, 2, 2, 3, 3, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 1, 3, 0, 3, 1, 1, 1,
	1, 1, 0, 2, 2, 1, 1, 1, 1, 1,
	4, 5, 8, 1, 2, 5, 7, 10, 8, 11,
	1, 2, 5, 2, 4, 2, 3, 1, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 2, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	0, 2, 1, 3, 3, 4, 4, 2, 4, 1,
	1, 3, 4, 3, 3, 3, 3, 0, 2, 2,
	2, 2, 2, 2, 3, 1, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 3, 2, 2, 2, 2, 2, 1, 2, 2,
	2, 1, 4, 4, 3, 3, 2, 4, 5, 2,
	3, 4, 2, 2, 3, 3, 3, 3, 3, 4,
	1, 1, 1, 1, 1, 6, 6, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 3, 0,
	5, 0, 3, 5, 0, 1, 0, 1, 1, 2,
	2, 3, 1, 0, 3, 3, 0, 2, 2, 2,
	1, 2, 1, 2, 5, 4, 0, 1, 1, 2,
	2, 3, 2, 0, 1, 2, 3, 3, 2, 2,
	1, 1, 1, 1, 1, 0, 1, 0, 1, 1,
	3, 3, 3, 1, 3, 1, 10, 11, 11, 12,
	12, 5, 1, 1, 0, 2, 2, 3, 3, 1,
	1, 2, 2, 2, 0, 1, 2, 0, 1, 3,
	1, 2, 3, 1, 1, 1, 0, 2, 1, 1,
	1, 6, 10, 9, 7, 7, 7, 9, 7, 12,
	14, 7, 7, 9, 9, 10, 5, 6, 8, 7,
	0, 1, 2, 4, 7, 5, 5, 5, 12, 7,
	5, 9, 0, 1, 1, 1, 1, 1, 1, 7,
	1, 3, 8, 8, 3, 3, 5, 4, 6, 4,
	4, 4, 4, 4, 3, 2, 3, 4, 4, 3,
	6, 6, 4, 4, 4, 4, 4, 4, 3, 3,
	2, 6, 2, 4, 4, 4, 3, 7, 6, 5,
	4, 2, 4, 3, 4, 3, 3, 5, 2, 3,
	3, 1, 1, 0, 1, 1, 1, 0, 2, 2,
	0, 2, 2, 0, 2, 0, 1, 1, 2, 1,
	1, 1, 2, 1, 1, 1, 1, 3, 3, 1,
	1, 1, 1, 0, 3, 1, 1, 2, 2, 2,
	2, 3, 3, 2, 0, 2, 0, 2, 1, 2,
	2, 0, 1, 1, 0, 1, 1, 0, 1, 0,
	1, 1, 3, 1, 2, 3, 5, 2, 4, 7,
	0, 1, 0, 1, 2, 1, 1, 1, 1, 0,
	2, 1, 3, 1, 1, 1, 3, 1, 3, 2,
	6, 1, 4, 6, 3, 2, 0, 3, 0, 3,
	1, 3, 1, 3, 4, 4, 4, 3, 2, 4,
	0, 1, 0, 2, 0, 1, 1, 1, 1, 1,
	2, 2, 1, 2, 3, 2, 3, 2, 2, 3,
	2, 1, 1, 3, 3, 0, 5, 5, 5, 0,
	2, 1, 3, 3, 2, 3, 1, 2, 0, 3,
	1, 1, 3, 3, 4, 4, 5, 3, 4, 5,
	6, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 2, 2, 2, 2, 2,
	3, 1, 1, 1, 1, 1, 1, 5, 6, 6,
	6, 5, 5, 5, 6, 5, 5, 6, 5, 5,
	5, 5, 6, 5, 5, 5, 4, 4, 5, 5,
	5, 5, 5, 4, 4, 4, 4, 4, 4, 3,
	6, 6, 6, 8, 8, 8, 8, 9, 4, 7,
	5, 4, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 8, 8, 0,
	2, 3, 4, 4, 4, 4, 4, 4, 0, 3,
	4, 7, 3, 1, 1, 2, 3, 3, 1, 2,
	2, 1, 2, 1, 2, 2, 1, 2, 0, 1,
	0, 2, 1, 2, 4, 0, 2, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 0, 3, 1, 3, 1, 1, 0, 2, 1,
	1, 0, 3, 1, 3, 2, 2, 0, 1, 1,
	0, 2, 4, 4, 0, 2, 4, 2, 1, 3,
	5, 4, 6, 1, 3, 3, 5, 0, 5, 1,
	3, 1, 2, 3, 1, 1, 3, 3, 3, 3,
	3, 1, 2, 1, 1, 1, 1, 1, 1, 0,
	2, 0, 3, 0, 1, 0, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 1, 1, 0, 1, 0, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 0, 1,
	0, 4, 0, 1, 0, 3, 0, 3, 0, 4,
	0, 3, 0, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -268, -1, -2, -6, -7, -8, -9, -10, -12,
	-37, -13, -14, -15, -43, -44, -45, -50, -51, -52,
	-48, -47, -46, -16, -22, -17, -54, -3, -4, 6,
	7, -58, 9, 10, 30, -41, 131, -38, -39, -40,
	134, 133, 170, 135, 163, 63, 216, -53, 219, 220,
	-273, -169, 168, 169, 31, 32, 137, 214, 20, 37,
	-270, 8, 311, 132, 217, 165, 164, 26, 67, -269,
	426, -128, 15, -57, 5, -55, -274, -55, -55, -55,
	-55, -55, -225, -227, 67, 106, -163, 144, 87, 302,
	140, -170, 141, -162, 192, 44, 151, 150, 141, 141,
	142, 144, 302, 140, 178, 177, 141, -87, -182, 70,
	-174, 353, 154, 368, 369, 216, 227, 221, 255, 243,
	354, 370, 155, 209, 241, 244, 289, 153, 202, 371,
	276, 284, 212, 81, 219, 298, 372, 206, 208, 207,
	197, 213, 36, 166, 239, 232, 373, 361, 230, 28,
	374, 286, 260, 375, 358, 285, 231, 137, 376, 157,
	151, 180, 377, 261, 265, 378, 290, 379, 380, 381,
	225, 226, 382, 193, 292, 259, 33, 152, 355, 48,
	175, 293, 38, 263, 37, 275, 383, 258, 253, 384,
	385, 386, 387, 257, 224, 252, 204, 52, 267, 266,
	268, 205, 288, 246, 388, 389, 158, 390, 391, 233,
	18, 392, 393, 296, 169, 394, 42, 395, 396, 397,
	173, 398, 399, 400, 287, 262, 264, 401, 148, 402,
	177, 403, 357, 404, 294, 229, 405, 159, 174, 168,
	297, 406, 407, 408, 409, 160, 410, 411, 412, 220,
	210, 413, 414, 415, 416, 201, 186, 300, 291, 51,
	214, 272, 417, 223, 150, 215, 418, 217, 43, 183,
	203, 279, 211, 250, 176, 419, 420, 237, 238, 256,
	222, 251, 218, 178, 179, 170, 421, 299, 273, 359,
	245, 242, 184, 422, 144, 181, 182, 423, 280, 281,
	185, 356, 295, 240, 274, 141, 124, 244, 289, 131,
	277, 278, 286, -219, 287, 177, 180, -187, 141, -154,
	276, 280, 281, 185, 70, 142, 143, 33, 291, 290,
	282, -182, -64, 135, 171, -87, -171, -171, -171, 279,
	279, -171, -34, 215, 70, 36, -2, -152, 144, 281,
	146, 218, -137, 17, 16, -5, -3, -270, 6, 21,
	22, -61, 53, 54, -56, -68, 115, -69, -182, -95,
	89, -101, 29, 70, -174, 24, -100, -96, -120, -118,
	-119, 124, 125, 126, 113, 114, 121, 90, 127, -106,
	-104, -105, -107, -109, -110, 74, 73, 82, 75, 76,
	77, 78, 83, 84, 85, -176, -116, -270, 57, 58,
	140, 312, 313, 314, 315, 352, 161, 316, 92, 47,
	301, 310, 309, 308, 306, 307, 303, 305, 304, 318,
	319, 147, 302, 119, 311, 341, 342, 343, 344, 345,
	346, 347, 348, 350, 351, 349, 331, 324, 325, 326,
	327, 328, 329, 330, 332, 333, 334, 335, 336, 337,
	338, 339, 340, -152, -152, 11, -80, -81, -87, -90,
	-182, -145, -186, 218, -148, 291, 290, -120, -147, -176,
	-182, 289, 244, 288, -226, 106, -214, -217, 70, 156,
	-238, 153, -87, 142, -87, 311, -161, 147, -161, 178,
	177, -161, 98, -42, -87, -160, 147, -176, 70, -174,
	-160, -160, -160, -160, -160, -87, 128, -87, 70, 30,
	-172, -270, -177, -176, -173, 136, 162, 88, 360, 23,
	25, 270, 324, 91, 124, 325, 326, 327, 16, 20,
	92, 123, 312, 328, 131, 61, 303, 305, 301, 302,
	277, 29, 10, 26, 164, 196, 22, 117, 133, 95,
	96, 97, 167, 24, 165, 85, 161, 19, 64, 11,
	13, 322, 323, 14, 147, 146, 108, 194, 142, 59,
	8, 127, 27, 105, 55, 329, 330, 364, 45, 365,
	57, 106, 17, 306, 307, 31, 352, 331, 172, 366,
	332, 119, 199, 62, 49, 89, 83, 34, 86, 65,
	87, 15, 195, 60, 320, 198, 367, 107, 134, 311,
	58, 140, 6, 317, 30, 163, 335, 334, 333, 336,
	200, 56, 314, 315, 337, 424, 141, 94, 318, 319,
	145, 84, 5, 44, 32, 9, 63, 66, 308, 309,
	310, 47, 339, 338, 340, 93, 12, 321, 302, 140,
	70, 177, 180, 141, 178, 144, -172, -172, -221, 11,
	108, 183, 183, 183, 184, -172, -157, -156, 179, 284,
	285, 279, 283, 12, -70, 106, 184, 279, 182, -172,
	-49, -2, -9, -7, -8, -2, 98, -171, -171, 30,
	74, 50, -258, 67, -210, 275, -271, 69, 141, -87,
	131, 133, 136, 65, -138, 19, 31, -69, -182, -129,
	-132, -69, -175, 324, 325, 326, 327, 328, 341, 342,
	343, 329, 330, 344, 345, 346, 331, 332, 347, 348,
	350, 351, 349, 335, 334, 333, 336, 337, 339, 338,
	340, -128, -2, -55, 49, -59, 21, 22, 80, 11,
	-179, 88, 87, 105, -178, 23, 70, -174, -175, 74,
	324, 325, 326, 327, 328, 341, 342, 343, 329, 330,
	344, 345, 346, 331, 332, 347, 348, 350, 351, 349,
	335, 334, 333, 336, 337, 339, 338, 340, 128, -69,
	-98, 108, 89, 106, 107, 91, 110, 109, 120, 113,
	114, 115, 116, 117, 118, 119, 111, 112, 123, 98,
	99, 100, 101, 102, 103, 104, -153, -270, -119, -270,
	129, 130, -101, -101, -101, -101, -101, -101, -101, -101,
	-270, -2, -113, -69, -270, -270, -270, -270, -270, -270,
	-270, -270, -270, -270, -270, -123, -69, -270, -275, -108,
	-270, -275, -108, -275, -108, -275, -270, -275, -108, -275,
	-108, -275, -275, -108, -275, -270, -270, -270, -270, -270,
	-270, -270, -270, -270, -270, -270, -270, -270, -270, -270,
	-270, -270, -270, -270, -270, -270, -270, -270, -270, -270,
	-270, -270, -270, -270, -270, -270, -270, -270, -270, -89,
	27, -87, -73, -74, -75, -76, -91, -119, -270, -87,
	-87, -80, -272, 68, 11, 66, -272, 68, 128, 68,
	-145, 218, -146, -149, 292, 294, 98, -181, -176, 74,
	29, 128, 30, 69, 68, -87, -189, -193, -195, -194,
	-196, -191, -192, 241, 244, 248, 246, 242, 247, 124,
	245, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 30, 166, 237, 238, 239, 240, 261, 262,
	263, 264, 265, 266, 267, 268, 221, 243, 354, 222,
	223, 224, 225, 226, 227, 229, 230, 231, 232, 233,
	234, 235, -246, -245, 70, 71, 72, 67, -176, 23,
	144, 70, 89, 70, 70, 70, -87, 70, 68, 145,
	-80, 24, 65, -82, -87, 70, 70, 70, 70, -183,
	-182, -173, -172, -172, -161, -161, -172, -172, -172, -87,
	-87, -87, -87, -158, 106, 12, -158, -172, -172, 11,
	-155, 11, 108, -155, -69, -101, -159, 106, 65, 70,
	-32, -31, -33, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 74, 69, -113, -254, 425,
	-87, -172, 181, 181, 141, 141, 186, -87, 9, 108,
	68, 18, 128, 68, -136, 25, 26, -136, -137, -271,
	-61, -102, 50, 75, 78, -60, 56, -87, -69, -69,
	-111, 83, 89, 84, 85, -178, 115, -183, -177, -173,
	-101, -112, -116, -119, 79, 108, 106, 107, 91, -101,
	-101, -101, -101, -101, -101, -101, -101, -101, -101, -101,
	-101, -101, -101, -101, -185, 70, 74, 70, -100, -100,
	-176, -59, -271, 68, -271, -2, -66, -68, -66, -271,
	-69, -69, -120, 74, -66, -120, 74, -66, -66, -66,
	-59, -121, -122, 93, -120, -271, -101, -176, -176, -66,
	-67, -66, -66, -66, -271, -271, -68, -66, -68, -66,
	-66, -271, -271, -271, -271, -59, -59, -66, -66, -66,
	-59, -66, -66, -59, -66, -66, -66, -66, -59, -66,
	-66, -66, -142, 173, -87, 30, 68, -83, -85, -84,
	-86, 55, 59, 61, 56, 57, 58, 62, -167, 23,
	-73, -270, -92, 173, -93, 23, -184, 63, 146, 64,
	-182, -175, 74, -142, 66, -73, -87, -73, -90, -182,
	115, -148, -146, 68, 293, 295, 296, 65, 86, -69,
	-203, 123, -177, -183, -228, -229, -230, -177, 74, 75,
	-214, -215, -216, -217, -231, 156, -237, 148, 150, 44,
	-218, 157, 142, 45, 69, -190, -204, 273, -197, 67,
	-197, -197, 249, 241, 244, 242, -197, -197, -197, -197,
	-197, -202, 244, -202, -202, -202, -202, 242, 67, 67,
	-197, -197, -197, -206, 67, -206, 236, -206, -207, 67,
	-207, -207, -207, -238, -69, -180, 66, -135, -87, -172,
	24, -172, -35, 189, 162, 67, -87, -87, -87, 68,
	70, 70, -222, 11, 108, 74, -69, -87, -103, 23,
	-182, -182, -158, -65, 167, 74, -87, 68, 98, 69,
	-88, 27, 74, -164, 136, 133, 134, 138, 139, -241,
	270, 132, 244, 81, 29, 15, 312, 173, 359, 70,
	174, -87, -87, -87, -87, -87, 136, 133, 51, -69,
	-69, -132, -138, -151, 19, 11, 47, 47, -66, 83,
	84, 85, 128, -270, -112, -101, -101, -101, -65, 88,
	-271, -67, -69, -271, 68, -271, -271, 68, 66, 23,
	11, 11, -271, 11, 11, -271, -271, -271, -66, -124,
	-122, 95, -69, -271, -271, 68, 68, -271, -271, -271,
	-271, -133, 320, -133, -271, -271, -271, -271, -271, -133,
	-133, -133, -133, -66, -66, -271, -271, -271, -66, -271,
	-271, -66, -271, -271, -271, -271, -66, -271, -271, -271,
	-99, 30, 47, -2, -270, -270, -145, -74, -75, -75,
	-74, -75, 55, 55, 55, 60, 55, 60, 55, -84,
	-184, -271, -270, 34, -184, -93, 142, 142, 142, -94,
	12, -73, -94, -94, 128, -149, -150, 297, 294, 300,
	70, 74, 128, 68, -230, 98, -217, 67, 70, 45,
	-218, -218, -223, 70, -223, 45, -208, -200, -201, -209,
	-212, -198, 83, 89, 29, 65, 270, 148, 45, 44,
	81, -205, 274, 75, -202, -202, -197, -197, -197, 249,
	-197, -202, -203, 30, -203, -203, -203, -203, -202, -213,
	74, -213, 75, -206, 75, 69, 65, -176, -2, 23,
	-36, 8, 9, 10, -259, -260, -261, 70, 108, 194,
	195, 145, -172, -87, -172, -172, -94, 70, 70, -155,
	-158, 34, -101, -31, -100, -142, 141, -171, -168, -249,
	-218, -253, -216, 149, 153, 156, 157, 148, 173, -168,
	-249, 156, -218, 157, 149, -165, -218, 145, 23, -168,
	-168, -224, 98, 173, -248, 66, 181, 270, 181, 52,
	-87, -72, 11, 115, -177, -67, -65, 88, -101, -271,
	-68, -188, 124, 241, 166, 239, 232, 259, 246, 272,
	237, 273, -185, -188, -101, -101, -101, -101, 353, -128,
	97, -69, 94, -101, -101, -176, -270, -133, -133, -133,
	-133, -133, -271, -271, -134, -133, -134, -134, -271, -134,
	-134, -271, -134, -134, -134, -134, -271, -134, -134, -134,
	-144, 65, -145, -115, -117, -116, -270, -2, -139, -176,
	-143, -176, -94, -78, -77, 65, 66, -79, 65, -77,
	55, 55, -143, -101, -93, -270, -270, -270, -128, -69,
	-94, 294, 298, 299, -229, -230, -233, -232, -176, -237,
	-223, -223, 67, 83, -101, 9, 45, 45, 74, 69,
	-203, -203, -202, -197, -203, 70, 124, -203, 69, 68,
	69, 68, 69, 68, -97, 374, 89, -87, -135, -135,
	65, 69, 68, -189, 70, 70, 70, -87, -158, -101,
	-202, -87, 67, -214, -171, -223, -162, 70, 70, -171,
	70, -176, 45, 70, -87, -176, -214, 70, -69, -176,
	-244, 356, -247, 70, -176, -176, -176, -94, -73, -271,
	-101, -271, -197, -197, -197, -207, -197, 226, -197, 226,
	-271, -271, 19, 19, 19, 19, -270, -63, 317, -69,
	68, 68, -128, 173, -134, -134, -134, -134, -134, 28,
	-144, 68, -271, -271, -271, 68, 128, -271, 68, -128,
	-69, 67, -69, -271, -93, -167, -140, -176, -140, -140,
	-137, 69, 68, -197, -140, -105, -203, -202, 74, -202,
	75, 75, 374, 67, -2, -87, -262, -263, -264, 81,
	355, 89, 196, 197, 158, 198, 199, 200, -261, -189,
	-189, -189, -265, -157, -214, -130, 161, 162, -180, -220,
	-218, 70, -166, 145, 23, 145, -130, -214, 27, -243,
	-242, -177, 67, 66, -125, 13, -202, 70, -101, -101,
	-101, -101, -101, -271, 74, -101, -101, -271, 16, 45,
	-117, 47, -2, -270, -176, -176, -176, -137, -140, -92,
	-184, 68, -271, -271, -271, -235, -234, 66, 152, 81,
	-232, -136, 69, -203, -203, 69, 69, -233, -135, 19,
	-135, -264, 74, 200, 196, 200, 200, 200, 200, 201,
	-266, 38, -256, 39, 69, -171, 70, 67, -223, 70,
	-176, -171, -130, -270, 68, 98, -140, -87, -126, 14,
	16, -271, -271, -271, -271, -62, 108, 356, -271, -271,
	-113, 9, -115, -2, 128, 69, -93, -176, -234, 70,
	-224, 74, 159, 69, 187, -23, -2, -7, -8, -9,
	-10, -12, -37, -13, -14, -20, -21, -15, -43, -44,
	-53, -51, -52, -48, -47, -22, -17, -24, 92, 147,
	216, 36, 36, 192, 193, -199, 146, -255, 43, -267,
	-211, 42, 16, -171, -233, -180, -171, -239, -240, 173,
	-242, -230, 69, -127, -69, -175, -114, -71, -69, -175,
	-271, 354, 62, 357, -128, -145, -271, -176, 75, -87,
	-236, -235, 188, -135, -69, -69, -26, -23, -141, 67,
	75, -256, 16, -257, 40, 41, 74, 69, 67, -271,
	68, -176, -248, 68, 52, 355, 358, -271, 67, -131,
	190, 191, -27, -28, 93, 94, 426, -140, 38, 74,
	16, 16, -236, -233, -240, 47, -244, -71, 52, -140,
	-135, 70, 70, 97, 95, -28, -69, -25, -19, -2,
	-7, -8, -9, -10, -20, -21, -22, -18, 216, 97,
	-23, 69, 74, 74, 69, 175, 356, 69, -11, -18,
	-10, -7, -8, -9, 92, -25, 94, 426, -25, -236,
	176, 357, -251, -252, 65, -135, 426, -25, 97, 95,
	-29, -19, -30, 96, 426, -270, 358, -252, 65, -251,
	65, 10, 9, 97, 426, 147, -25, 97, 95, -30,
	-69, 97, -101, 172, -250, 160, 155, 158, 30, -250,
	92, 426, 147, -25, 94, -271, -271, 154, 29, 83,
	97, 426, -25, 147, 97, 426, 147,
}
var yyDef = [...]int{

	28, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 811, 0, 514,
	514, 514, 514, 514, 514, 0, -2, 378, 379, 380,
	0, 0, 0, 0, -2, 489, 490, 491, 493, 494,
	503, -2, 1271, 1271, 0, 0, 1271, 0, 0, 0,
	0, 46, 47, 863, 0, 506, 495, 496, 1269, 1,
	3, 820, 0, 0, 518, 521, 516, 0, 863, 863,
	0, 0, 79, 80, 0, 0, 0, 0, 0, 861,
	861, 0, 861, 885, 0, 881, 882, 883, 0, 859,
	0, 859, 859, 859, 859, 859, 0, 435, 602, 892,
	893, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055,
	1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065,
	1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075,
	1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085,
	1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095,
	1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105,
	1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115,
	1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125,
	1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135,
	1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145,
	1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155,
	1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165,
	1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175,
	1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185,
	1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195,
	1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205,
	1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215,
	1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225,
	1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235,
	1236, 1237, 1238, 1239, 1240, 0, 0, 0, 1272, 0,
	1272, 1272, 450, 0, 452, 0, 0, 0, 1272, 0,
	461, 0, 0, 468, 1272, 330, 331, 332, 486, 487,
	474, 488, 0, 0, 0, 507, 508, 509, 510, 1271,
	1271, 513, 163, 0, 183, 898, 40, 0, 0, 0,
	864, 492, 824, 0, 0, 811, 42, 0, 514, 519,
	520, 524, 522, 523, 515, 0, 533, 542, 0, 611,
	0, 616, 618, -2, -2, 0, 653, 654, 655, 656,
	657, 0, 0, 0, 0, 0, 0, 0, 0, 681,
	682, 683, 684, 685, 686, 790, 791, 792, 793, 794,
	795, 796, 797, 620, 621, 787, 844, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 778, 0,
	749, 749, 749, 749, 749, 749, 749, 749, 749, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 57, 59,
	602, 63, 0, 1218, 845, -2, -2, 0, 0, 787,
	0, -2, 1061, -2, 0, 0, 209, 210, 0, 32,
	345, 0, 207, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 424, 0, 0, 0, 0, 888, 889,
	0, 0, 0, 0, 0, 434, 0, 436, 1272, 1272,
	439, 1273, 1274, 890, 891, 914, 915, 916, 917, 918,
	919, 920, 921, 922, 923, 924, 925, 926, 927, 928,
	929, 930, 931, 932, 933, 934, 935, 936, 937, 938,
	939, 940, 941, 942, 943, 944, 945, 946, 947, 948,
	949, 950, 951, 952, 953, 954, 955, 956, 957, 958,
	959, 960, 961, 962, 963, 964, 965, 966, 967, 968,
	969, 970, 971, 972, 973, 974, 975, 976, 977, 978,
	979, 980, 981, 982, 983, 984, 985, 986, 987, 988,
	989, 990, 991, 992, 993, 994, 995, 996, 997, 998,
	999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008,
	1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018,
	1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028,
	1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038,
	1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 861, 861,
	1272, 1272, 1272, 0, 0, 0, 448, 449, 0, 352,
	353, 480, 480, 1272, 1272, 456, 0, 477, 477, 475,
	476, 471, 472, 0, 463, 0, 483, 465, 466, 469,
	497, -2, 500, 501, 502, -2, 0, 511, 512, 0,
	165, 0, 182, 0, 896, 899, 41, 1270, 0, 1272,
	0, 0, 0, 0, 35, 0, 0, 821, 0, 812,
	813, 817, 817, 1241, 1242, 1243, 1244, 1245, 1246, 1247,
	1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257,
	1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267,
	1268, 820, 40, 521, 0, 527, 525, 526, 517, 0,
	534, 0, 0, 0, 543, 0, 545, 546, 547, 548,
	1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250,
	1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260,
	1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 0, 614,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 638,
	639, 640, 641, 642, 643, 644, 617, 0, 631, 0,
	0, 0, 673, 674, 675, 676, 677, 678, 679, 0,
	524, 40, 0, 651, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 524, 0, 779, 0, 732, 741,
	0, 733, 742, 734, 743, 735, 0, 736, 744, 737,
	745, 738, 739, 746, 740, 0, 0, 0, 529, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 524, 524, 0, 0, 0, 524, 0, 0,
	524, 0, 0, 0, 0, 524, 0, 0, 0, 61,
	0, 601, 0, 551, 553, 554, 555, -2, 0, 605,
	-2, 0, 0, 0, 53, 54, 0, 0, 0, 0,
	64, 1218, 66, 67, 0, 0, 0, 306, 854, 855,
	856, 0, 852, 367, 0, 0, 217, 294, 225, 226,
	227, 287, 229, 287, 287, 0, 287, 287, 287, 287,
	287, 303, 303, 303, 303, 303, 270, 271, 272, 273,
	274, 0, 0, 247, 287, 287, 287, 251, 277, 278,
	279, 280, 281, 282, 283, 284, 230, 231, 232, 233,
	234, 235, 236, 237, 238, 289, 289, 289, 291, 291,
	291, 291, 0, 33, 29, 30, 31, 0, 886, 78,
	0, 1272, 0, 1272, 0, 0, 205, 136, 0, 0,
	427, 860, 0, 429, 55, 430, 431, 432, 433, 603,
	894, 895, 437, 438, 0, 0, 442, 443, 444, 445,
	446, 447, 354, 453, 0, 0, 454, 455, 460, 0,
	566, 0, 0, 480, 462, 645, 464, 0, 0, 504,
	164, 167, 0, 170, 171, 172, 173, 174, 175, 176,
	177, 178, 179, 180, 181, 166, 184, 0, 0, 0,
	0, 403, 0, 0, 0, 0, 0, 0, 825, 0,
	0, 0, 0, 0, 815, 818, 819, 816, 824, 43,
	524, 0, 798, 0, 0, 0, 528, 38, 612, 613,
	615, 632, 0, 634, 636, 544, 535, 0, 788, -2,
	622, 623, 647, 648, 649, 0, 0, 0, 0, 645,
	627, 0, 658, 659, 660, 661, 662, 663, 664, 665,
	666, 667, 668, 669, 672, 763, 764, 0, 670, 671,
	680, 529, 650, 0, 843, 40, 0, 531, 0, 719,
	0, 0, 655, 790, 0, 655, 790, 0, 0, 0,
	0, 785, 782, 0, 0, 750, 0, 0, 0, 0,
	0, 530, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 600, 0, 0, 0, 0, 0,
	0, 589, 0, 0, 592, 0, 0, 0, 0, 585,
	0, 0, 559, 1156, 561, 0, 605, 0, 0, 0,
	586, 587, 588, 609, 0, 609, 58, 609, 60, 0,
	604, 846, 65, 0, 0, 70, 71, 847, 848, 849,
	850, 0, 788, 0, 206, 368, 370, 373, 374, 375,
	211, 213, 214, 215, 0, 32, 343, 0, 0, 337,
	337, 0, 333, 334, 208, 216, 296, 295, 228, 0,
	303, 303, 287, 287, 287, 287, 256, 303, 259, 262,
	263, 306, 0, 306, 306, 306, 306, 303, 0, 0,
	248, 249, 250, 239, 0, 240, 289, 242, 243, 0,
	244, 245, 246, 344, 0, 0, 0, 0, 0, 84,
	862, 85, 0, 137, 138, 88, 0, 425, 1272, 0,
	1272, 1272, 609, 0, 0, 481, 482, 477, 480, 0,
	478, 479, 459, 470, 0, 484, 467, 0, 0, 185,
	61, 0, 897, 1271, -2, 412, 878, 412, 412, 396,
	323, 867, 868, 869, 870, 871, 872, 873, 874, 875,
	0, 197, 405, 407, 406, 410, 0, 0, 0, 822,
	823, 814, 36, 0, 857, 858, 799, 800, 549, 633,
	635, 637, 0, 529, 624, 645, 628, 0, 625, 0,
	619, 0, 652, -2, 0, 717, 718, 0, 0, 0,
	0, 0, 756, 0, 0, 757, 0, 728, 811, 0,
	783, 0, 0, 731, 751, 0, 0, 752, 753, 754,
	755, 706, 0, 707, 0, 0, 0, 0, 0, 713,
	714, 715, 716, 0, 0, 540, 540, 540, 0, 540,
	540, 0, 540, 540, 540, 540, 0, 540, 540, 540,
	837, 0, 0, -2, 0, 0, 609, 552, 580, 582,
	0, 577, 590, 591, 593, 0, 595, 0, 597, 598,
	556, 558, 0, 0, 605, 565, 0, 0, 0, 811,
	0, 609, 51, 52, 0, 68, 69, 0, 0, 75,
	307, 308, 0, 0, 371, 0, 212, 0, 29, 325,
	337, 337, 328, 338, 329, 0, 218, 219, 220, 221,
	222, 223, 298, 0, 0, 0, 302, 0, 310, 312,
	0, 224, 297, 0, 306, 306, 303, 254, 255, 287,
	260, 306, 264, 0, 265, 266, 267, 268, 306, 0,
	285, 0, 0, 241, 0, 364, 0, 887, -2, 78,
	0, 139, 140, 141, 0, 89, 90, 0, 0, 0,
	0, 0, 428, 56, 440, 441, 451, 355, 356, 480,
	458, 0, 646, 168, 169, 303, 0, 381, 0, 1271,
	337, 0, 397, 413, 414, 415, 416, 417, 418, 0,
	1271, 415, 0, 416, 0, 0, 0, 879, 880, 0,
	0, 0, 324, 0, 200, 0, 0, 0, 0, 826,
	37, 609, 0, 536, 789, 0, 626, 0, 629, 687,
	532, 0, 287, 287, 768, 287, 291, 771, 287, 773,
	287, 776, 0, 0, 0, 0, 0, 0, 0, 780,
	730, 786, 0, 0, 0, 537, 811, 708, 709, 710,
	711, 712, 540, 540, 691, 541, 692, 693, 540, 695,
	696, 540, 698, 699, 700, 701, 540, 703, 704, 705,
	44, 0, 837, 827, 839, 841, 0, 40, 0, 833,
	0, 572, 811, 574, 581, 0, 0, 575, 0, 576,
	594, 596, 0, -2, 564, 0, 0, 0, 820, 610,
	50, 72, 73, 74, 369, 372, 0, 339, 287, 342,
	326, 327, 0, 299, 300, 0, 309, 311, 313, 288,
	252, 253, 306, 261, 257, 304, 305, 269, 303, 0,
	303, 0, 292, 0, 351, 365, 0, 0, 82, 0,
	0, 96, 0, 92, 0, 0, 0, 426, 457, 567,
	908, 599, 0, 400, 384, 886, 335, 377, 385, 386,
	391, 392, 0, 0, 388, 0, 400, 0, 399, 0,
	404, 0, 198, 199, 0, 0, 409, 801, 550, 688,
	630, 720, 765, 303, 769, 770, 772, 774, 775, 777,
	722, 721, 0, 0, 0, 0, 0, 0, 0, 784,
	0, 0, 0, 0, 689, 690, 694, 697, 702, 0,
	45, 0, 842, -2, 0, 0, 0, 62, 0, 820,
	578, 0, 583, 605, 562, 0, 0, 570, 0, 0,
	49, 315, 0, 817, 0, 301, 258, 306, 286, 306,
	0, 0, 366, 0, -2, 0, 78, 97, 98, 0,
	0, 0, 103, 0, 0, 0, 0, 0, 91, 93,
	94, 95, 910, 904, 0, 1271, 401, 0, 0, 337,
	336, 398, 0, 876, 877, 0, 1271, 400, 0, 201,
	202, 0, 0, 0, 807, 0, 766, 767, 0, 0,
	0, 0, 758, 729, 781, 0, 0, 538, 0, 0,
	840, 0, -2, 0, 835, 834, 573, 48, 0, 560,
	605, 0, 606, 607, 608, 314, 318, 0, 323, 0,
	340, 341, 0, 275, 276, 290, 293, 0, 83, 0,
	0, 99, 100, 101, 102, 104, 105, 0, 0, 0,
	865, 912, -2, 0, 1271, 383, 402, 0, 886, 387,
	393, 394, 1271, 0, 0, 0, 0, 411, 39, 0,
	0, 723, 725, 724, 726, 0, 0, 0, 747, 748,
	811, 0, 830, 40, 0, 579, 563, 571, 319, 320,
	0, 322, 0, 316, 0, 78, -2, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 0, 0,
	0, 106, 107, 108, 109, 568, 0, 904, 0, 906,
	0, 903, 0, 382, 0, 0, 395, 0, 420, 0,
	203, 204, 197, 808, 809, 810, 802, 803, 805, 806,
	727, 0, 0, 0, 0, 838, -2, 836, 321, 0,
	81, 317, 142, 87, 0, 0, 0, 133, 34, 0,
	0, 911, 0, 909, 0, 0, 905, 316, 0, 419,
	0, 0, 200, 0, 759, 0, 762, 539, 0, 78,
	0, 0, 0, 153, 0, 0, 0, 0, 866, 913,
	0, 0, 389, 0, 421, 0, 408, 804, 760, 0,
	0, 143, 144, 0, 0, 154, 0, 0, 186, -2,
	189, 190, 191, 192, 193, 194, 195, 196, 0, 132,
	134, 569, 907, 901, 316, 0, 0, 346, 78, 145,
	146, 147, 148, 149, 151, 0, 0, 0, 0, 390,
	0, 0, 347, 348, 0, 86, 0, 0, 0, 0,
	0, 187, 160, 0, 0, 0, 761, 349, 0, 350,
	0, 0, 0, 0, 155, 156, 0, 0, 0, 161,
	0, 150, 0, 0, 357, 359, 360, 0, 0, 358,
	152, 0, 158, 0, 0, 422, 423, 361, 362, 363,
	0, 0, 0, 157, 0, 162, 159,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 90, 3, 3, 3, 118, 110, 3,
	67, 69, 115, 113, 68, 114, 128, 116, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 426,
	99, 98, 100, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 120, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 109, 3, 121,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 87, 88, 89, 91, 92, 93, 94, 95,
	96, 97, 101, 102, 103, 104, 105, 106, 107, 108,
	111, 112, 117, 119, 122, 123, 124, 125, 126, 127,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:389
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:394
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:395
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:399
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:426
		{
			setParseTree(yylex, nil)
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:432
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:436
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:440
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 32:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:445
		{
			yyVAL.colIdent = NewColIdentWithAt("", NoAt)
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:449
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 34:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:455
		{
			yyVAL.statement = &Load{Local: yyDollar[3].boolVal, Infile: yyDollar[4].str, Table: yyDollar[5].tableName, Partition: yyDollar[6].partitions, Charset: yyDollar[7].str, Fields: yyDollar[8].Fields, Lines: yyDollar[9].Lines, IgnoreNum: yyDollar[10].sqlVal, Columns: yyDollar[11].columns}
		}
	case 35:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:461
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 36:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:469
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:473
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 38:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:479
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 39:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:486
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:492
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:496
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:502
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:506
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 44:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:513
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].setExprs)
			yyVAL.statement = ins
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:525
		{
			cols := make(Columns, 0, len(yyDollar[7].setExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].setExprs))
			for _, updateList := range yyDollar[7].setExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].setExprs)}
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:537
		{
			yyVAL.str = InsertStr
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:541
		{
			yyVAL.str = ReplaceStr
		}
	case 48:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:547
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].setExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 49:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:553
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 50:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:557
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 51:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:561
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 52:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:565
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:570
		{
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:571
		{
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:575
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName.ToViewName()}
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:579
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName.ToViewName())
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:585
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:589
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:595
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:599
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:604
		{
			yyVAL.partitions = nil
		}
	case 62:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:608
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:614
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:618
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:622
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:626
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:632
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:636
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:642
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:646
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:650
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:656
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:660
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:664
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:668
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:674
		{
			yyVAL.str = SessionStr
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:678
		{
			yyVAL.str = GlobalStr
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:683
		{
			yyVAL.int = yyPosition(yylex)
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:689
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			if len(yyDollar[1].ddl.TableSpec.Constraints) > 0 {
				yyDollar[1].ddl.ConstraintAction = AddStr
			}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:697
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 81:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:703
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: yyDollar[4].colIdent, Using: yyDollar[5].colIdent, Type: yyDollar[2].str, Columns: yyDollar[9].indexColumns, Options: yyDollar[11].indexOptions}}
		}
	case 82:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:707
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[3].tableName.ToViewName(), ViewExpr: yyDollar[6].selStmt, SubStatementPositionStart: yyDollar[5].int, SubStatementPositionEnd: yyDollar[7].int - 1}
		}
	case 83:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:711
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[5].tableName.ToViewName(), ViewExpr: yyDollar[8].selStmt, SubStatementPositionStart: yyDollar[7].int, SubStatementPositionEnd: yyDollar[9].int - 1, OrReplace: true}
		}
	case 84:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:715
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes), IfNotExists: ne}
		}
	case 85:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:723
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes), IfNotExists: ne}
		}
	case 86:
		yyDollar = yyS[yypt-15 : yypt+1]
//line sql.y:731
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[8].tableName, TriggerSpec: &TriggerSpec{Name: string(yyDollar[4].bytes), Time: yyDollar[5].str, Event: yyDollar[6].str, Order: yyDollar[12].triggerOrder, Body: yyDollar[14].statement}, SubStatementPositionStart: yyDollar[13].int, SubStatementPositionEnd: yyDollar[15].int - 1}
		}
	case 87:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:735
		{
			yyVAL.statement = &DDL{Action: CreateStr, ProcedureSpec: &ProcedureSpec{Name: string(yyDollar[4].bytes), Definer: yyDollar[2].str, Params: yyDollar[6].procedureParams, Characteristics: yyDollar[8].characteristics, Body: yyDollar[10].statement}, SubStatementPositionStart: yyDollar[9].int, SubStatementPositionEnd: yyDollar[11].int - 1}
		}
	case 88:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:740
		{
			yyVAL.procedureParams = nil
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:744
		{
			yyVAL.procedureParams = yyDollar[1].procedureParams
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:750
		{
			yyVAL.procedureParams = []ProcedureParam{yyDollar[1].procedureParam}
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:754
		{
			yyVAL.procedureParams = append(yyVAL.procedureParams, yyDollar[3].procedureParam)
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:760
		{
			yyVAL.procedureParam = ProcedureParam{Direction: ProcedureParamDirection_In, Name: string(yyDollar[1].bytes), Type: yyDollar[2].columnType}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:764
		{
			yyVAL.procedureParam = ProcedureParam{Direction: ProcedureParamDirection_In, Name: string(yyDollar[2].bytes), Type: yyDollar[3].columnType}
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:768
		{
			yyVAL.procedureParam = ProcedureParam{Direction: ProcedureParamDirection_Inout, Name: string(yyDollar[2].bytes), Type: yyDollar[3].columnType}
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:772
		{
			yyVAL.procedureParam = ProcedureParam{Direction: ProcedureParamDirection_Out, Name: string(yyDollar[2].bytes), Type: yyDollar[3].columnType}
		}
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:777
		{
			yyVAL.characteristics = nil
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:781
		{
			yyVAL.characteristics = yyDollar[1].characteristics
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:787
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:791
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[2].characteristic)
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:797
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_Comment, Comment: string(yyDollar[2].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:801
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_LanguageSql}
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:805
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_NotDeterministic}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:809
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_Deterministic}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:813
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_ContainsSql}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:817
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_NoSql}
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:821
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_ReadsSqlData}
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:825
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_ModifiesSqlData}
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:829
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_SqlSecurityDefiner}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:833
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_SqlSecurityInvoker}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:839
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 132:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:866
		{
			yyVAL.statement = &BeginEndBlock{Statements: yyDollar[2].statements}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:872
		{
			yyVAL.statements = Statements{yyDollar[1].statement}
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:876
		{
			yyVAL.statements = append(yyVAL.statements, yyDollar[3].statement)
		}
	case 135:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:881
		{
			yyVAL.str = ""
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:885
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:891
		{
			yyVAL.str = BeforeStr
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:895
		{
			yyVAL.str = AfterStr
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:901
		{
			yyVAL.str = InsertStr
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:905
		{
			yyVAL.str = UpdateStr
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:909
		{
			yyVAL.str = DeleteStr
		}
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:914
		{
			yyVAL.triggerOrder = nil
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:918
		{
			yyVAL.triggerOrder = &TriggerOrder{PrecedesOrFollows: FollowsStr, OtherTriggerName: string(yyDollar[2].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:922
		{
			yyVAL.triggerOrder = &TriggerOrder{PrecedesOrFollows: PrecedesStr, OtherTriggerName: string(yyDollar[2].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:928
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 150:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:938
		{
			yyVAL.statement = &BeginEndBlock{Statements: yyDollar[2].statements}
		}
	case 151:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:944
		{
			yyVAL.statement = &CaseStatement{Expr: yyDollar[2].expr, Cases: yyDollar[3].caseStatementCases}
		}
	case 152:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:948
		{
			yyVAL.statement = &CaseStatement{Expr: yyDollar[2].expr, Cases: yyDollar[3].caseStatementCases, Else: yyDollar[5].statements}
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:954
		{
			yyVAL.caseStatementCases = []CaseStatementCase{yyDollar[1].caseStatementCase}
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:958
		{
			yyVAL.caseStatementCases = append(yyVAL.caseStatementCases, yyDollar[2].caseStatementCase)
		}
	case 155:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:964
		{
			yyVAL.caseStatementCase = CaseStatementCase{Case: yyDollar[2].expr, Statements: yyDollar[4].statements}
		}
	case 156:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:970
		{
			conds := []IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}
			yyVAL.statement = &IfStatement{Conditions: conds}
		}
	case 157:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:975
		{
			conds := []IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}
			yyVAL.statement = &IfStatement{Conditions: conds, Else: yyDollar[7].statements}
		}
	case 158:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:980
		{
			conds := yyDollar[6].ifStatementConditions
			conds = append([]IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}, conds...)
			yyVAL.statement = &IfStatement{Conditions: conds}
		}
	case 159:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:986
		{
			conds := yyDollar[6].ifStatementConditions
			conds = append([]IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}, conds...)
			yyVAL.statement = &IfStatement{Conditions: conds, Else: yyDollar[8].statements}
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:994
		{
			yyVAL.ifStatementConditions = []IfStatementCondition{yyDollar[1].ifStatementCondition}
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:998
		{
			yyVAL.ifStatementConditions = append(yyVAL.ifStatementConditions, yyDollar[2].ifStatementCondition)
		}
	case 162:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1004
		{
			yyVAL.ifStatementCondition = IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1010
		{
			yyVAL.statement = &Signal{SqlStateValue: string(yyDollar[2].bytes)}
		}
	case 164:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1014
		{
			yyVAL.statement = &Signal{SqlStateValue: string(yyDollar[2].bytes), Info: yyDollar[4].signalInfos}
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1020
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1024
		{
			yyVAL.bytes = yyDollar[3].bytes
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1030
		{
			yyVAL.signalInfos = []SignalInfo{yyDollar[1].signalInfo}
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1034
		{
			yyVAL.signalInfos = append(yyVAL.signalInfos, yyDollar[3].signalInfo)
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1040
		{
			yyVAL.signalInfo = SignalInfo{Name: string(yyDollar[1].bytes), Value: yyDollar[3].expr.(*SQLVal)}
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1046
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1063
		{
			yyVAL.statement = &Call{FuncName: string(yyDollar[2].bytes), Params: yyDollar[3].exprs}
		}
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1068
		{
			yyVAL.exprs = nil
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1072
		{
			yyVAL.exprs = nil
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1076
		{
			yyVAL.exprs = yyDollar[2].exprs
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1082
		{
			yyVAL.statements = Statements{yyDollar[1].statement}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1086
		{
			yyVAL.statements = append(yyVAL.statements, yyDollar[3].statement)
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1092
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 197:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1105
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1109
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1115
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 200:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1120
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1125
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1131
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1136
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1142
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 205:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1148
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName, IfNotExists: ne}
			setDDL(yylex, yyVAL.ddl)
		}
	case 206:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1159
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1166
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 208:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1170
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1176
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1181
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddConstraint(yyDollar[1].constraintDefinition)
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1186
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 212:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1190
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
			yyVAL.TableSpec.AddConstraint(yyDollar[4].constraintDefinition)
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1195
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1199
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1203
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1209
		{
			if err := yyDollar[2].columnType.merge(yyDollar[3].columnType); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 217:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1218
		{
			yyVAL.columnType = ColumnType{}
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1222
		{
			opt := ColumnType{NotNull: yyDollar[2].boolVal, sawnull: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1231
		{
			opt := ColumnType{Default: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1240
		{
			opt := ColumnType{OnUpdate: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1249
		{
			opt := ColumnType{Autoincrement: yyDollar[2].boolVal, sawai: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1258
		{
			opt := ColumnType{KeyOpt: yyDollar[2].colKeyOpt}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1267
		{
			opt := ColumnType{Comment: yyDollar[2].sqlVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1278
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1289
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1294
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1300
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1304
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1308
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1312
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1316
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1320
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1324
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1328
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1332
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1338
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1344
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1350
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1356
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1362
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1368
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1374
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1380
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1388
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1392
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1396
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1400
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1404
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1410
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1414
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1418
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1422
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1426
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1430
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 258:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1434
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1438
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1442
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1446
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Length: yyDollar[4].sqlVal}
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1450
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1454
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1458
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1462
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1466
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1470
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1474
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1478
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1482
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1486
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1490
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1494
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1498
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1502
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 276:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1507
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1513
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1517
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1521
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1525
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1529
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1533
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1537
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1541
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1547
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[1].bytes))
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1552
		{
			yyVAL.strs = append(yyDollar[1].strs, string(yyDollar[3].bytes))
		}
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1557
		{
			yyVAL.sqlVal = nil
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1561
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 289:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1566
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 290:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1570
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1578
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1582
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 293:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1588
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1596
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1600
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1605
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1609
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1616
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1620
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1626
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1632
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1638
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1643
		{
			yyVAL.str = ""
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1647
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1651
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1656
		{
			yyVAL.str = ""
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1660
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1664
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1670
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1674
		{
			yyVAL.colKeyOpt = colKey
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1678
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1682
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1688
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 314:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1694
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 315:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1698
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1703
		{
			yyVAL.indexOptions = nil
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1707
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1713
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1717
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1723
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1727
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1732
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1738
		{
			yyVAL.str = ""
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1742
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1748
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1752
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1756
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1760
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1764
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1770
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1774
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1778
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1784
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1788
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1793
		{
			yyVAL.str = ""
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1797
		{
			yyVAL.str = yyDollar[1].str
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1802
		{
			yyVAL.str = ""
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1806
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1812
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1816
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1822
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal, Order: yyDollar[3].str}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1828
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1832
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1839
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1843
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 346:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1849
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 347:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1853
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 348:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1857
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 349:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1861
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 350:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1865
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[12].ReferenceAction, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 351:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1871
		{
			yyVAL.constraintInfo = &CheckConstraintDefinition{Expr: yyDollar[3].expr, Enforced: yyDollar[5].boolean}
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1877
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1881
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1886
		{
			yyVAL.str = ""
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1890
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1894
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1900
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1906
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1912
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1916
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1920
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1924
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1928
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 364:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1933
		{
			yyVAL.boolean = true
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1937
		{
			yyVAL.boolean = true
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1941
		{
			yyVAL.boolean = false
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1946
		{
			yyVAL.str = ""
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1950
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1954
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1962
		{
			yyVAL.str = yyDollar[1].str
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1966
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1970
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1976
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1980
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1984
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1989
		{
			yyVAL.str = ""
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1993
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 381:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2004
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 382:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:2008
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			ddl.Column = yyDollar[8].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 383:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2015
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 384:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2022
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 385:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2026
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: DropStr, Column: NewColIdent(string(yyDollar[7].bytes)), Table: yyDollar[4].tableName}
		}
	case 386:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2030
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 387:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2034
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: RenameStr, Table: yyDollar[4].tableName, Column: NewColIdent(string(yyDollar[7].bytes)), ToColumn: NewColIdent(string(yyDollar[9].bytes))}
		}
	case 388:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2038
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 389:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:2043
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[7].str), Using: yyDollar[8].colIdent, Columns: yyDollar[10].indexColumns, Options: yyDollar[12].indexOptions}}
		}
	case 390:
		yyDollar = yyS[yypt-14 : yypt+1]
//line sql.y:2047
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[9].str), Type: yyDollar[7].str, Using: yyDollar[10].colIdent, Columns: yyDollar[12].indexColumns, Options: yyDollar[14].indexOptions}}
		}
	case 391:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2051
		{
			yyVAL.statement = &DDL{Action: AlterStr, ConstraintAction: DropStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[7].bytes)}}}}
		}
	case 392:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2056
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[7].colIdent}}
		}
	case 393:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2060
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: RenameStr, FromName: yyDollar[7].colIdent, ToName: yyDollar[9].colIdent}}
		}
	case 394:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2064
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ModifyStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 395:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:2071
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ChangeStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, Column: NewColIdent(string(yyDollar[7].bytes)), ColumnOrder: yyDollar[9].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			yyVAL.statement = ddl
		}
	case 396:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2077
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 397:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2081
		{
			ddl := &DDL{Action: AlterStr, ConstraintAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddConstraint(yyDollar[6].constraintDefinition)
			yyVAL.statement = ddl
		}
	case 398:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2087
		{
			yyVAL.statement = &DDL{Action: AlterStr, ConstraintAction: DropStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[8].bytes), Details: &ForeignKeyDefinition{}}}}}
		}
	case 399:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2092
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, AutoIncSpec: &AutoIncSpec{Value: yyDollar[7].expr}}
		}
	case 400:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2097
		{
			yyVAL.columnOrder = nil
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2101
		{
			yyVAL.columnOrder = &ColumnOrder{First: true}
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2105
		{
			yyVAL.columnOrder = &ColumnOrder{AfterColumn: NewColIdent(string(yyDollar[2].bytes))}
		}
	case 403:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2111
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 404:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2117
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 405:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2129
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 406:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2139
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 407:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2143
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 408:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:2147
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 409:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2160
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 410:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2170
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 411:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2174
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2187
		{
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2189
		{
		}
	case 419:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2200
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2206
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2210
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 422:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2216
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 423:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2220
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2226
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2232
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 426:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2236
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 427:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2244
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 428:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2252
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[3].colIdent}}
		}
	case 429:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2256
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromViews: yyDollar[4].tableNames, IfExists: exists}
		}
	case 430:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2264
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes), IfExists: exists}
		}
	case 431:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2272
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes), IfExists: exists}
		}
	case 432:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2280
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, TriggerSpec: &TriggerSpec{Name: string(yyDollar[4].bytes)}, IfExists: exists}
		}
	case 433:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2288
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, ProcedureSpec: &ProcedureSpec{Name: string(yyDollar[4].bytes)}, IfExists: exists}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2298
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2302
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2307
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 437:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2313
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 438:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2318
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2322
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 440:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2326
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 441:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2330
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 442:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2335
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 443:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2339
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 444:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2343
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 445:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2347
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 446:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2351
		{
			yyVAL.statement = &Show{Type: CreateTriggerStr, Table: yyDollar[4].tableName}
		}
	case 447:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2355
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2359
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2363
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2367
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 451:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2371
		{
			yyVAL.statement = &Show{Type: IndexStr, Table: yyDollar[4].tableName, Database: yyDollar[5].str, ShowIndexFilterOpt: yyDollar[6].expr}
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2375
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 453:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2379
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), ProcFuncFilter: yyDollar[4].showFilter}
		}
	case 454:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2383
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), ProcFuncFilter: yyDollar[4].showFilter}
		}
	case 455:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2387
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2391
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 457:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2395
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 458:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2400
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[6].showFilter, AsOf: yyDollar[5].expr}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 459:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2410
		{
			yyVAL.statement = &Show{Type: string(yyDollar[3].bytes), ShowTablesOpt: &ShowTablesOpt{DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}}
		}
	case 460:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2414
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2418
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 462:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2422
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2428
		{
			// Cannot dereference $3 directly, or else the parser stackcannot be pooled. See yyParsePooled
			cmp := yyDollar[3].expr.(*ComparisonExpr)
			cmp.Left = &ColName{Name: NewColIdent("collation")}
			var ex Expr = cmp
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &ex}
		}
	case 464:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2436
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2441
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2445
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 467:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2449
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2453
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2467
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2473
		{
			yyVAL.expr = &ComparisonExpr{Operator: LikeStr, Right: yyDollar[2].expr, Escape: yyDollar[3].expr}
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2479
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2483
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 473:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2489
		{
			yyVAL.str = ""
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2493
		{
			yyVAL.str = "full "
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2499
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2503
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 477:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2509
		{
			yyVAL.str = ""
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2513
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2517
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 480:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2523
		{
			yyVAL.showFilter = nil
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2527
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2531
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 483:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2537
		{
			yyVAL.showFilter = nil
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2541
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 485:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2547
		{
			yyVAL.str = ""
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2551
		{
			yyVAL.str = SessionStr
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2555
		{
			yyVAL.str = GlobalStr
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2561
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2565
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2571
		{
			yyVAL.statement = &Begin{}
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2575
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2581
		{
			yyVAL.statement = &Begin{}
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2587
		{
			yyVAL.statement = &Commit{}
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2593
		{
			yyVAL.statement = &Rollback{}
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2598
		{
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2599
		{
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2603
		{
			yyVAL.statement = &Explain{ExplainFormat: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2607
		{
			yyVAL.statement = &Explain{Analyze: true, ExplainFormat: TreeStr, Statement: yyDollar[3].selStmt}
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2613
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 503:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2621
		{
			yyVAL.str = ""
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2625
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2636
		{
			yyVAL.statement = &Show{Type: "columns", OnTable: yyDollar[2].tableName}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2640
		{
			yyVAL.statement = &OtherRead{}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2646
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2650
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2654
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2658
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2664
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2668
		{
			setAllowComments(yylex, true)
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2672
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2678
		{
			yyVAL.bytes2 = nil
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2682
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2688
		{
			yyVAL.str = UnionStr
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2692
		{
			yyVAL.str = UnionAllStr
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2696
		{
			yyVAL.str = UnionDistinctStr
		}
	case 521:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2701
		{
			yyVAL.str = ""
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2705
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2709
		{
			yyVAL.str = SQLCacheStr
		}
	case 524:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2714
		{
			yyVAL.str = ""
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2718
		{
			yyVAL.str = ""
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2722
		{
			yyVAL.str = DistinctStr
		}
	case 527:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2727
		{
			yyVAL.str = ""
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2731
		{
			yyVAL.str = StraightJoinHint
		}
	case 529:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2736
		{
			yyVAL.selectExprs = nil
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2740
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2746
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2750
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2756
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2760
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2764
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 536:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2768
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2775
		{
			yyVAL.over = &Over{WindowName: yyDollar[2].colIdent}
		}
	case 538:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2779
		{
			yyVAL.over = &Over{OrderBy: yyDollar[3].orderBy}
		}
	case 539:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2783
		{
			yyVAL.over = &Over{PartitionBy: yyDollar[5].exprs, OrderBy: yyDollar[6].orderBy}
		}
	case 540:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2788
		{
			yyVAL.over = nil
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2792
		{
			yyVAL.over = yyDollar[1].over
		}
	case 542:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2797
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2801
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2805
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2811
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2815
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2819
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2823
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 549:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2828
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2832
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2838
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2842
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2852
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2856
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2860
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2866
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2872
		{
			yyVAL.aliasedTableName = yyDollar[2].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
		}
	case 560:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2877
		{
			yyVAL.aliasedTableName = yyDollar[6].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
			yyVAL.aliasedTableName.Partitions = yyDollar[4].partitions
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2888
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Hints: yyDollar[1].indexHints}
		}
	case 562:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2892
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, Hints: yyDollar[4].indexHints}
		}
	case 563:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2896
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, As: yyDollar[5].tableIdent, Hints: yyDollar[6].indexHints}
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2900
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2904
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[1].tableIdent, Hints: yyDollar[2].indexHints}
		}
	case 566:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2915
		{
			yyVAL.expr = nil
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2919
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 568:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2924
		{
			yyVAL.columns = nil
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2928
		{
			yyVAL.columns = yyDollar[2].columns
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2934
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2938
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2944
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2948
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 574:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2961
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 575:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2965
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2969
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2973
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2979
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 579:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2981
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 580:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2985
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2987
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 582:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2991
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2993
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 584:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2996
		{
			yyVAL.empty = struct{}{}
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2998
		{
			yyVAL.empty = struct{}{}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3003
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3007
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3013
		{
			yyVAL.str = JoinStr
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3017
		{
			yyVAL.str = JoinStr
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3021
		{
			yyVAL.str = JoinStr
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3027
		{
			yyVAL.str = StraightJoinStr
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3033
		{
			yyVAL.str = LeftJoinStr
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3037
		{
			yyVAL.str = LeftJoinStr
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3041
		{
			yyVAL.str = RightJoinStr
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3045
		{
			yyVAL.str = RightJoinStr
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3051
		{
			yyVAL.str = NaturalJoinStr
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3055
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3065
		{
			yyVAL.tableName = yyDollar[3].tableName
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3071
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3075
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3081
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3085
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3091
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 605:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3096
		{
			yyVAL.indexHints = nil
		}
	case 606:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3100
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 607:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3104
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 608:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3108
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 609:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3113
		{
			yyVAL.expr = nil
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3117
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3123
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3127
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3131
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3135
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3139
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3143
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3147
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 618:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3153
		{
			yyVAL.str = ""
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3157
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3163
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3167
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3173
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3177
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 624:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3181
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 625:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3185
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 626:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3189
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3193
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 628:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3197
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 629:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3201
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 630:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3205
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3209
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3215
		{
			yyVAL.str = IsNullStr
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3219
		{
			yyVAL.str = IsNotNullStr
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3223
		{
			yyVAL.str = IsTrueStr
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3227
		{
			yyVAL.str = IsNotTrueStr
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3231
		{
			yyVAL.str = IsFalseStr
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3235
		{
			yyVAL.str = IsNotFalseStr
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3241
		{
			yyVAL.str = EqualStr
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3245
		{
			yyVAL.str = LessThanStr
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3249
		{
			yyVAL.str = GreaterThanStr
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3253
		{
			yyVAL.str = LessEqualStr
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3257
		{
			yyVAL.str = GreaterEqualStr
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3261
		{
			yyVAL.str = NotEqualStr
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3265
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 645:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3270
		{
			yyVAL.expr = nil
		}
	case 646:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3274
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3280
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3284
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3288
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 650:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3294
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3300
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3304
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3310
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3314
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3318
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3322
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3326
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 658:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3330
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3334
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3338
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3342
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 662:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3346
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3350
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 664:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3354
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 665:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3358
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 666:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3362
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 667:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3366
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 668:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3370
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 669:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3374
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 670:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3378
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 671:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3382
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 672:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3386
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 673:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3390
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 674:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3394
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 675:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3398
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 676:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3402
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 677:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3410
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 678:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3424
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 679:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3428
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3432
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 687:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3452
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: yyDollar[3].str == DistinctStr, Exprs: yyDollar[4].selectExprs}
		}
	case 688:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3456
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 689:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3466
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 690:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3470
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 691:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3474
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 692:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3478
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 693:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3482
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 694:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3486
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 695:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3490
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 696:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3494
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 697:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3498
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 698:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3502
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 699:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3506
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 700:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3510
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 701:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3514
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 702:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3518
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 703:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3522
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 704:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3526
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 705:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3530
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 706:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3539
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 707:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3543
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 708:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3547
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: SelectExprs{yyDollar[3].selectExpr}, Over: yyDollar[5].over}
		}
	case 709:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3551
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 710:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3555
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: SelectExprs{yyDollar[3].selectExpr}, Over: yyDollar[5].over}
		}
	case 711:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3559
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 712:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3563
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 713:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3567
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 714:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3571
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 715:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3575
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 716:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3579
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 717:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3589
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 718:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3593
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 719:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3597
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema")}
		}
	case 720:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3601
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 721:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3605
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 722:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3609
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 723:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3613
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 724:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3617
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 725:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3621
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 726:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3625
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 727:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3629
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 728:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3633
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("first"), Exprs: yyDollar[3].selectExprs}
		}
	case 729:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3637
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 730:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3641
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 731:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3645
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 732:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3655
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 733:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3659
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 734:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3663
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 735:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3668
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 736:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3673
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 737:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3678
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 738:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3684
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 739:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3689
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 740:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3693
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_user")}
		}
	case 741:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3698
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 742:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3702
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 743:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3706
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 744:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3711
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 745:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3716
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 746:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3721
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 747:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3725
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 748:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3729
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 751:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3739
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 752:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3749
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 753:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3753
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 754:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3757
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 755:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3761
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 756:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3765
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 757:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3769
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 758:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3775
		{
			yyVAL.str = ""
		}
	case 759:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3779
		{
			yyVAL.str = BooleanModeStr
		}
	case 760:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3783
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 761:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3787
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 762:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3791
		{
			yyVAL.str = QueryExpansionStr
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3797
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3801
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 765:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3807
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 766:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3811
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 767:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3815
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3819
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 769:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3823
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 770:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3827
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3833
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 772:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3837
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3841
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 774:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3845
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 775:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3849
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3853
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 777:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3857
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 778:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3862
		{
			yyVAL.expr = nil
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3866
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 780:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3871
		{
			yyVAL.str = string("")
		}
	case 781:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3875
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3881
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 783:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3885
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 784:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3891
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 785:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3896
		{
			yyVAL.expr = nil
		}
	case 786:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3900
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3906
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 788:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3910
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 789:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3914
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3920
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3924
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3928
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3932
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3936
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3940
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3944
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3948
		{
			yyVAL.expr = &NullVal{}
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3954
		{
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 799:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3958
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 800:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3962
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 801:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3967
		{
			yyVAL.exprs = nil
		}
	case 802:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3971
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3977
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 804:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3981
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3987
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3991
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 807:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3996
		{
			yyVAL.expr = nil
		}
	case 808:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4000
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4006
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4010
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 811:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4015
		{
			yyVAL.orderBy = nil
		}
	case 812:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4019
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4025
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 814:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4029
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 815:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4035
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 816:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4039
		{
			yyVAL.order = &Order{Expr: &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}, Direction: yyDollar[2].str}
		}
	case 817:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4044
		{
			yyVAL.str = AscScr
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4048
		{
			yyVAL.str = AscScr
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4052
		{
			yyVAL.str = DescScr
		}
	case 820:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4057
		{
			yyVAL.limit = nil
		}
	case 821:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4061
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 822:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4065
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 823:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4069
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 824:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4074
		{
			yyVAL.str = ""
		}
	case 825:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4078
		{
			yyVAL.str = ForUpdateStr
		}
	case 826:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4082
		{
			yyVAL.str = ShareModeStr
		}
	case 827:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4095
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4099
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 829:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4103
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 830:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4108
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 831:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4112
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 832:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:4116
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4123
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 834:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4127
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 835:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4131
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 836:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4135
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 837:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4140
		{
			yyVAL.setExprs = nil
		}
	case 838:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4144
		{
			yyVAL.setExprs = yyDollar[5].setExprs
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4150
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 840:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4154
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4160
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 842:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4164
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 843:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4170
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4176
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4186
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 846:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4190
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 847:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4196
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: NewStrVal([]byte("on"))}
		}
	case 848:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4200
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: NewStrVal([]byte("off"))}
		}
	case 849:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4204
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 850:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4208
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 852:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4215
		{
			yyVAL.bytes = []byte("charset")
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4222
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4226
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4230
		{
			yyVAL.expr = &Default{}
		}
	case 859:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4239
		{
			yyVAL.byt = 0
		}
	case 860:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4241
		{
			yyVAL.byt = 1
		}
	case 861:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4244
		{
			yyVAL.byt = 0
		}
	case 862:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4246
		{
			yyVAL.byt = 1
		}
	case 863:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4249
		{
			yyVAL.str = ""
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4251
		{
			yyVAL.str = IgnoreStr
		}
	case 865:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4254
		{
			yyVAL.sqlVal = nil
		}
	case 866:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4256
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4260
		{
			yyVAL.empty = struct{}{}
		}
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4262
		{
			yyVAL.empty = struct{}{}
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4264
		{
			yyVAL.empty = struct{}{}
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4266
		{
			yyVAL.empty = struct{}{}
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4268
		{
			yyVAL.empty = struct{}{}
		}
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4270
		{
			yyVAL.empty = struct{}{}
		}
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4272
		{
			yyVAL.empty = struct{}{}
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4274
		{
			yyVAL.empty = struct{}{}
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4276
		{
			yyVAL.empty = struct{}{}
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4280
		{
			yyVAL.empty = struct{}{}
		}
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4282
		{
			yyVAL.empty = struct{}{}
		}
	case 878:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4285
		{
			yyVAL.empty = struct{}{}
		}
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4287
		{
			yyVAL.empty = struct{}{}
		}
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4289
		{
			yyVAL.empty = struct{}{}
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4293
		{
			yyVAL.str = UniqueStr
		}
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4295
		{
			yyVAL.str = FulltextStr
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4297
		{
			yyVAL.str = SpatialStr
		}
	case 884:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4300
		{
			yyVAL.str = ""
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4302
		{
			yyVAL.str = yyDollar[1].str
		}
	case 886:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4305
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 887:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4307
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4311
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4315
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4322
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4328
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4332
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4339
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 896:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4344
		{
			yyVAL.str = string("")
		}
	case 897:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4346
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 898:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4349
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4351
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 900:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4354
		{
			yyVAL.EnclosedBy = nil
		}
	case 901:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4358
		{
			yyVAL.EnclosedBy = &EnclosedBy{Optionally: yyDollar[1].boolVal, Delim: "'" + string(yyDollar[4].bytes) + "'"}
		}
	case 902:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4363
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4367
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 904:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4372
		{
			yyVAL.str = ""
		}
	case 905:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4376
		{
			yyVAL.str = "'" + string(yyDollar[3].bytes) + "'"
		}
	case 906:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4381
		{
			yyVAL.str = ""
		}
	case 907:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4385
		{
			yyVAL.str = "'" + string(yyDollar[3].bytes) + "'"
		}
	case 908:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4390
		{
			yyVAL.Fields = nil
		}
	case 909:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4394
		{
			yyVAL.Fields = &Fields{TerminatedBy: yyDollar[2].str, EnclosedBy: yyDollar[3].EnclosedBy, EscapedBy: yyDollar[4].str}
		}
	case 910:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4399
		{
			yyVAL.Lines = nil
		}
	case 911:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4403
		{
			yyVAL.Lines = &Lines{StartingBy: yyDollar[2].str, TerminatedBy: yyDollar[3].str}
		}
	case 912:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4408
		{
			yyVAL.str = ""
		}
	case 913:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4412
		{
			yyVAL.str = "'" + string(yyDollar[3].bytes) + "'"
		}
	case 1269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4797
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4806
		{
			decNesting(yylex)
		}
	case 1271:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4811
		{
			skipToEnd(yylex)
		}
	case 1272:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4816
		{
			skipToEnd(yylex)
		}
	case 1273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4820
		{
			skipToEnd(yylex)
		}
	case 1274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4824
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
