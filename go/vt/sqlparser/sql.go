// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func yyPosition(yylex interface{}) int {
	return yylex.(*Tokenizer).Position
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:57
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	int                   int
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	statements            Statements
	partitions            Partitions
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	joinCondition         JoinCondition
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	asOf                  *AsOf
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	sqlVal                *SQLVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	setExprs              SetExprs
	setExpr               *SetExpr
	colIdent              ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	TableSpec             *TableSpec
	columnType            ColumnType
	columnOrder           *ColumnOrder
	triggerOrder          *TriggerOrder
	colKeyOpt             ColumnKeyOption
	optVal                Expr
	LengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexInfo             *IndexInfo
	indexOption           *IndexOption
	indexOptions          []*IndexOption
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	constraintDefinition  *ConstraintDefinition
	constraintInfo        ConstraintInfo
	ReferenceAction       ReferenceAction
	partDefs              []*PartitionDefinition
	partDef               *PartitionDefinition
	partSpec              *PartitionSpec
	vindexParam           VindexParam
	vindexParams          []VindexParam
	showFilter            *ShowFilter
	optLike               *OptLike
	over                  *Over
	caseStatementCases    []CaseStatementCase
	caseStatementCase     CaseStatementCase
	ifStatementConditions []IfStatementCondition
	ifStatementCondition  IfStatementCondition
	signalInfo            SignalInfo
	signalInfos           []SignalInfo
	procedureParam        ProcedureParam
	procedureParams       []ProcedureParam
	characteristic        Characteristic
	characteristics       []Characteristic
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const CALL = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const OF = 57376
const OUTFILE = 57377
const DATA = 57378
const LOAD = 57379
const LINES = 57380
const TERMINATED = 57381
const ESCAPED = 57382
const ENCLOSED = 57383
const UNIQUE = 57384
const KEY = 57385
const SYSTEM_TIME = 57386
const VALUES = 57387
const LAST_INSERT_ID = 57388
const NEXT = 57389
const VALUE = 57390
const SHARE = 57391
const MODE = 57392
const SQL_NO_CACHE = 57393
const SQL_CACHE = 57394
const JOIN = 57395
const STRAIGHT_JOIN = 57396
const LEFT = 57397
const RIGHT = 57398
const INNER = 57399
const OUTER = 57400
const CROSS = 57401
const NATURAL = 57402
const USE = 57403
const FORCE = 57404
const ON = 57405
const USING = 57406
const ID = 57407
const HEX = 57408
const STRING = 57409
const INTEGRAL = 57410
const FLOAT = 57411
const HEXNUM = 57412
const VALUE_ARG = 57413
const LIST_ARG = 57414
const COMMENT = 57415
const COMMENT_KEYWORD = 57416
const BIT_LITERAL = 57417
const NULL = 57418
const TRUE = 57419
const FALSE = 57420
const OFF = 57421
const OR = 57422
const AND = 57423
const NOT = 57424
const BETWEEN = 57425
const CASE = 57426
const WHEN = 57427
const THEN = 57428
const ELSE = 57429
const ELSEIF = 57430
const END = 57431
const LE = 57432
const GE = 57433
const NE = 57434
const NULL_SAFE_EQUAL = 57435
const IS = 57436
const LIKE = 57437
const REGEXP = 57438
const IN = 57439
const SHIFT_LEFT = 57440
const SHIFT_RIGHT = 57441
const DIV = 57442
const MOD = 57443
const UNARY = 57444
const COLLATE = 57445
const BINARY = 57446
const UNDERSCORE_BINARY = 57447
const UNDERSCORE_UTF8MB4 = 57448
const INTERVAL = 57449
const JSON_EXTRACT_OP = 57450
const JSON_UNQUOTE_EXTRACT_OP = 57451
const CREATE = 57452
const ALTER = 57453
const DROP = 57454
const RENAME = 57455
const ANALYZE = 57456
const ADD = 57457
const FLUSH = 57458
const MODIFY = 57459
const CHANGE = 57460
const SCHEMA = 57461
const TABLE = 57462
const INDEX = 57463
const INDEXES = 57464
const VIEW = 57465
const TO = 57466
const IGNORE = 57467
const IF = 57468
const PRIMARY = 57469
const COLUMN = 57470
const SPATIAL = 57471
const FULLTEXT = 57472
const KEY_BLOCK_SIZE = 57473
const CHECK = 57474
const ACTION = 57475
const CASCADE = 57476
const CONSTRAINT = 57477
const FOREIGN = 57478
const NO = 57479
const REFERENCES = 57480
const RESTRICT = 57481
const FIRST = 57482
const AFTER = 57483
const SHOW = 57484
const DESCRIBE = 57485
const EXPLAIN = 57486
const DATE = 57487
const ESCAPE = 57488
const REPAIR = 57489
const OPTIMIZE = 57490
const TRUNCATE = 57491
const FORMAT = 57492
const MAXVALUE = 57493
const PARTITION = 57494
const REORGANIZE = 57495
const LESS = 57496
const THAN = 57497
const PROCEDURE = 57498
const TRIGGER = 57499
const TRIGGERS = 57500
const FUNCTION = 57501
const VINDEX = 57502
const VINDEXES = 57503
const STATUS = 57504
const VARIABLES = 57505
const WARNINGS = 57506
const SEQUENCE = 57507
const EACH = 57508
const ROW = 57509
const BEFORE = 57510
const FOLLOWS = 57511
const PRECEDES = 57512
const DEFINER = 57513
const INVOKER = 57514
const INOUT = 57515
const OUT = 57516
const DETERMINISTIC = 57517
const CONTAINS = 57518
const READS = 57519
const MODIFIES = 57520
const SQL = 57521
const SECURITY = 57522
const CLASS_ORIGIN = 57523
const SUBCLASS_ORIGIN = 57524
const MESSAGE_TEXT = 57525
const MYSQL_ERRNO = 57526
const CONSTRAINT_CATALOG = 57527
const CONSTRAINT_SCHEMA = 57528
const CONSTRAINT_NAME = 57529
const CATALOG_NAME = 57530
const SCHEMA_NAME = 57531
const TABLE_NAME = 57532
const COLUMN_NAME = 57533
const CURSOR_NAME = 57534
const SIGNAL = 57535
const SQLSTATE = 57536
const BEGIN = 57537
const START = 57538
const TRANSACTION = 57539
const COMMIT = 57540
const ROLLBACK = 57541
const BIT = 57542
const TINYINT = 57543
const SMALLINT = 57544
const MEDIUMINT = 57545
const INT = 57546
const INTEGER = 57547
const BIGINT = 57548
const INTNUM = 57549
const REAL = 57550
const DOUBLE = 57551
const FLOAT_TYPE = 57552
const DECIMAL = 57553
const NUMERIC = 57554
const DEC = 57555
const FIXED = 57556
const PRECISION = 57557
const TIME = 57558
const TIMESTAMP = 57559
const DATETIME = 57560
const YEAR = 57561
const CHAR = 57562
const VARCHAR = 57563
const BOOL = 57564
const CHARACTER = 57565
const VARBINARY = 57566
const NCHAR = 57567
const NVARCHAR = 57568
const NATIONAL = 57569
const VARYING = 57570
const TEXT = 57571
const TINYTEXT = 57572
const MEDIUMTEXT = 57573
const LONGTEXT = 57574
const LONG = 57575
const BLOB = 57576
const TINYBLOB = 57577
const MEDIUMBLOB = 57578
const LONGBLOB = 57579
const JSON = 57580
const ENUM = 57581
const GEOMETRY = 57582
const POINT = 57583
const LINESTRING = 57584
const POLYGON = 57585
const GEOMETRYCOLLECTION = 57586
const MULTIPOINT = 57587
const MULTILINESTRING = 57588
const MULTIPOLYGON = 57589
const NULLX = 57590
const AUTO_INCREMENT = 57591
const APPROXNUM = 57592
const SIGNED = 57593
const UNSIGNED = 57594
const ZEROFILL = 57595
const COLLATION = 57596
const DATABASES = 57597
const SCHEMAS = 57598
const TABLES = 57599
const VITESS_METADATA = 57600
const VSCHEMA = 57601
const FULL = 57602
const PROCESSLIST = 57603
const COLUMNS = 57604
const FIELDS = 57605
const ENGINES = 57606
const PLUGINS = 57607
const NAMES = 57608
const CHARSET = 57609
const GLOBAL = 57610
const SESSION = 57611
const ISOLATION = 57612
const LEVEL = 57613
const READ = 57614
const WRITE = 57615
const ONLY = 57616
const REPEATABLE = 57617
const COMMITTED = 57618
const UNCOMMITTED = 57619
const SERIALIZABLE = 57620
const CURRENT_TIMESTAMP = 57621
const DATABASE = 57622
const CURRENT_DATE = 57623
const CURRENT_USER = 57624
const CURRENT_TIME = 57625
const LOCALTIME = 57626
const LOCALTIMESTAMP = 57627
const UTC_DATE = 57628
const UTC_TIME = 57629
const UTC_TIMESTAMP = 57630
const REPLACE = 57631
const CONVERT = 57632
const CAST = 57633
const SUBSTR = 57634
const SUBSTRING = 57635
const GROUP_CONCAT = 57636
const SEPARATOR = 57637
const TIMESTAMPADD = 57638
const TIMESTAMPDIFF = 57639
const OVER = 57640
const WINDOW = 57641
const GROUPING = 57642
const GROUPS = 57643
const AVG = 57644
const BIT_AND = 57645
const BIT_OR = 57646
const BIT_XOR = 57647
const COUNT = 57648
const JSON_ARRAYAGG = 57649
const JSON_OBJECTAGG = 57650
const MAX = 57651
const MIN = 57652
const STDDEV_POP = 57653
const STDDEV = 57654
const STD = 57655
const STDDEV_SAMP = 57656
const SUM = 57657
const VAR_POP = 57658
const VARIANCE = 57659
const VAR_SAMP = 57660
const CUME_DIST = 57661
const DENSE_RANK = 57662
const FIRST_VALUE = 57663
const LAG = 57664
const LAST_VALUE = 57665
const LEAD = 57666
const NTH_VALUE = 57667
const NTILE = 57668
const ROW_NUMBER = 57669
const PERCENT_RANK = 57670
const RANK = 57671
const MATCH = 57672
const AGAINST = 57673
const BOOLEAN = 57674
const LANGUAGE = 57675
const WITH = 57676
const QUERY = 57677
const EXPANSION = 57678
const UNUSED = 57679
const ARRAY = 57680
const DESCRIPTION = 57681
const EMPTY = 57682
const EXCEPT = 57683
const JSON_TABLE = 57684
const LATERAL = 57685
const MEMBER = 57686
const RECURSIVE = 57687
const ACTIVE = 57688
const ADMIN = 57689
const BUCKETS = 57690
const CLONE = 57691
const COMPONENT = 57692
const DEFINITION = 57693
const ENFORCED = 57694
const EXCLUDE = 57695
const FOLLOWING = 57696
const GEOMCOLLECTION = 57697
const GET_MASTER_PUBLIC_KEY = 57698
const HISTOGRAM = 57699
const HISTORY = 57700
const INACTIVE = 57701
const INVISIBLE = 57702
const LOCKED = 57703
const MASTER_COMPRESSION_ALGORITHMS = 57704
const MASTER_PUBLIC_KEY_PATH = 57705
const MASTER_TLS_CIPHERSUITES = 57706
const MASTER_ZSTD_COMPRESSION_LEVEL = 57707
const NESTED = 57708
const NETWORK_NAMESPACE = 57709
const NOWAIT = 57710
const NULLS = 57711
const OJ = 57712
const OLD = 57713
const OPTIONAL = 57714
const ORDINALITY = 57715
const ORGANIZATION = 57716
const OTHERS = 57717
const PATH = 57718
const PERSIST = 57719
const PERSIST_ONLY = 57720
const PRECEDING = 57721
const PRIVILEGE_CHECKS_USER = 57722
const PROCESS = 57723
const RANDOM = 57724
const REFERENCE = 57725
const REQUIRE_ROW_FORMAT = 57726
const RESOURCE = 57727
const RESPECT = 57728
const RESTART = 57729
const RETAIN = 57730
const REUSE = 57731
const ROLE = 57732
const SECONDARY = 57733
const SECONDARY_ENGINE = 57734
const SECONDARY_LOAD = 57735
const SECONDARY_UNLOAD = 57736
const SKIP = 57737
const SRID = 57738
const THREAD_PRIORITY = 57739
const TIES = 57740
const UNBOUNDED = 57741
const VCPU = 57742
const VISIBLE = 57743
const SYSTEM = 57744
const INFILE = 57745

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CALL",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"OF",
	"OUTFILE",
	"DATA",
	"LOAD",
	"LINES",
	"TERMINATED",
	"ESCAPED",
	"ENCLOSED",
	"UNIQUE",
	"KEY",
	"SYSTEM_TIME",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"ELSEIF",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"MODIFY",
	"CHANGE",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"INDEXES",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"FIRST",
	"AFTER",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"FORMAT",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TRIGGERS",
	"FUNCTION",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"EACH",
	"ROW",
	"BEFORE",
	"FOLLOWS",
	"PRECEDES",
	"DEFINER",
	"INVOKER",
	"INOUT",
	"OUT",
	"DETERMINISTIC",
	"CONTAINS",
	"READS",
	"MODIFIES",
	"SQL",
	"SECURITY",
	"CLASS_ORIGIN",
	"SUBCLASS_ORIGIN",
	"MESSAGE_TEXT",
	"MYSQL_ERRNO",
	"CONSTRAINT_CATALOG",
	"CONSTRAINT_SCHEMA",
	"CONSTRAINT_NAME",
	"CATALOG_NAME",
	"SCHEMA_NAME",
	"TABLE_NAME",
	"COLUMN_NAME",
	"CURSOR_NAME",
	"SIGNAL",
	"SQLSTATE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DEC",
	"FIXED",
	"PRECISION",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NATIONAL",
	"VARYING",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"LONG",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"OVER",
	"WINDOW",
	"GROUPING",
	"GROUPS",
	"AVG",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"COUNT",
	"JSON_ARRAYAGG",
	"JSON_OBJECTAGG",
	"MAX",
	"MIN",
	"STDDEV_POP",
	"STDDEV",
	"STD",
	"STDDEV_SAMP",
	"SUM",
	"VAR_POP",
	"VARIANCE",
	"VAR_SAMP",
	"CUME_DIST",
	"DENSE_RANK",
	"FIRST_VALUE",
	"LAG",
	"LAST_VALUE",
	"LEAD",
	"NTH_VALUE",
	"NTILE",
	"ROW_NUMBER",
	"PERCENT_RANK",
	"RANK",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"DESCRIPTION",
	"EMPTY",
	"EXCEPT",
	"JSON_TABLE",
	"LATERAL",
	"MEMBER",
	"RECURSIVE",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"SYSTEM",
	"INFILE",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 35,
	-2, 4,
	-1, 36,
	138, 866,
	-2, 130,
	-1, 44,
	179, 471,
	180, 471,
	-2, 459,
	-1, 51,
	1, 1233,
	421, 1233,
	-2, 491,
	-1, 369,
	124, 874,
	-2, 870,
	-1, 370,
	124, 875,
	-2, 871,
	-1, 471,
	94, 1157,
	124, 1157,
	-2, 71,
	-1, 472,
	94, 1068,
	124, 1068,
	-2, 72,
	-1, 477,
	94, 1028,
	124, 1028,
	-2, 835,
	-1, 479,
	94, 1102,
	124, 1102,
	-2, 837,
	-1, 683,
	5, 35,
	-2, 485,
	-1, 687,
	5, 35,
	-2, 484,
	-1, 909,
	1, 543,
	5, 543,
	12, 543,
	13, 543,
	14, 543,
	15, 543,
	17, 543,
	19, 543,
	30, 543,
	31, 543,
	53, 543,
	54, 543,
	55, 543,
	56, 543,
	57, 543,
	59, 543,
	60, 543,
	63, 543,
	64, 543,
	66, 543,
	67, 543,
	421, 543,
	-2, 568,
	-1, 912,
	64, 52,
	66, 52,
	-2, 56,
	-1, 1105,
	124, 877,
	-2, 873,
	-1, 1345,
	65, 398,
	68, 398,
	-2, 362,
	-1, 1394,
	5, 36,
	-2, 634,
	-1, 1454,
	5, 35,
	-2, 812,
	-1, 1548,
	5, 35,
	-2, 73,
	-1, 1691,
	1, 589,
	5, 589,
	12, 589,
	13, 589,
	14, 589,
	15, 589,
	17, 589,
	19, 589,
	30, 589,
	31, 589,
	53, 589,
	54, 589,
	55, 589,
	56, 589,
	57, 589,
	59, 589,
	60, 589,
	63, 589,
	64, 589,
	66, 589,
	67, 589,
	421, 589,
	-2, 568,
	-1, 1806,
	5, 36,
	-2, 813,
	-1, 1836,
	5, 35,
	-2, 73,
	-1, 1892,
	5, 35,
	-2, 815,
	-1, 1972,
	5, 35,
	-2, 105,
	-1, 2024,
	5, 36,
	-2, 816,
	-1, 2073,
	421, 183,
	-2, 35,
}

const yyPrivate = 57344

const yyLast = 22383

var yyAct = [...]int{
	403, 60, 2113, 2135, 2103, 2072, 2104, 1228, 2071, 2028,
	1971, 2015, 2052, 2006, 2076, 7, 2075, 6, 1763, 2074,
	5, 1906, 2077, 8, 2081, 1602, 1253, 1311, 332, 2080,
	24, 71, 374, 467, 2079, 1704, 2078, 1870, 1309, 1840,
	1599, 402, 1671, 2029, 1855, 1080, 1221, 348, 1705, 834,
	1219, 1672, 938, 1556, 387, 1819, 1247, 1215, 1223, 1652,
	1262, 60, 1668, 1252, 93, 1266, 1304, 1481, 1678, 1503,
	1682, 1217, 1274, 1619, 353, 1337, 1130, 482, 1166, 1577,
	372, 333, 334, 1047, 1158, 337, 1029, 1143, 1259, 1540,
	1036, 925, 1299, 706, 1206, 1576, 516, 905, 1287, 1107,
	1015, 712, 924, 1198, 756, 470, 357, 901, 465, 462,
	914, 488, 2156, 2152, 473, 850, 906, 2142, 2125, 2115,
	2107, 2098, 1161, 2055, 70, 851, 697, 2117, 2045, 2102,
	2021, 2087, 1764, 2044, 1636, 75, 367, 1423, 2073, 3,
	1952, 799, 798, 808, 809, 801, 802, 803, 804, 805,
	806, 807, 800, 1791, 487, 810, 926, 652, 927, 376,
	1700, 1701, 1242, 1243, 512, 361, 77, 78, 79, 80,
	81, 2020, 416, 1699, 422, 424, 423, 420, 421, 419,
	418, 417, 747, 514, 61, 32, 33, 1241, 670, 425,
	426, 344, 680, 346, 29, 336, 61, 32, 33, 342,
	335, 1841, 490, 1523, 493, 1273, 34, 1604, 29, 1843,
	61, 32, 33, 1275, 1275, 1293, 1288, 1288, 34, 103,
	99, 100, 1300, 101, 1490, 651, 655, 1489, 95, 657,
	1491, 1279, 1281, 1782, 1280, 347, 339, 1780, 1929, 1928,
	1927, 1926, 1925, 1877, 1923, 1924, 1999, 2000, 2049, 2050,
	1318, 2030, 1970, 68, 1071, 678, 105, 104, 664, 1653,
	665, 666, 653, 656, 663, 654, 1070, 68, 1557, 88,
	1606, 1068, 492, 491, 2101, 2086, 1994, 1317, 1846, 2110,
	2114, 2109, 2007, 1601, 1199, 1856, 1857, 673, 679, 329,
	1968, 674, 671, 672, 1267, 2148, 1605, 1581, 1907, 1072,
	1480, 996, 2157, 2154, 1558, 513, 1069, 513, 513, 72,
	2143, 1909, 2126, 489, 498, 513, 1844, 1845, 1847, 1848,
	1849, 513, 90, 92, 346, 330, 87, 345, 1865, 60,
	60, 1995, 97, 96, 1561, 1005, 1479, 1478, 1960, 485,
	700, 301, 98, 684, 1809, 686, 1864, 1515, 685, 2139,
	1368, 822, 823, 1367, 60, 1494, 1486, 1383, 714, 1078,
	1520, 1519, 933, 920, 689, 690, 790, 508, 1248, 819,
	810, 760, 821, 95, 94, 800, 1237, 1075, 810, 1031,
	102, 1516, 1908, 743, 1404, 1043, 650, 1953, 2082, 1302,
	1559, 1560, 755, 1530, 1278, 1521, 1269, 1513, 57, 1600,
	2082, 1941, 832, 1514, 836, 837, 838, 839, 840, 841,
	842, 843, 844, 845, 846, 1288, 849, 852, 852, 852,
	858, 852, 852, 858, 852, 858, 867, 868, 869, 870,
	871, 872, 873, 874, 875, 876, 877, 878, 879, 880,
	881, 882, 883, 884, 885, 886, 887, 888, 889, 890,
	891, 892, 893, 894, 895, 896, 897, 898, 899, 900,
	2019, 910, 1518, 1796, 1863, 698, 483, 683, 687, 1030,
	2137, 658, 659, 2138, 1842, 2136, 1596, 97, 96, 667,
	1620, 1342, 62, 89, 928, 681, 675, 1224, 1226, 1401,
	745, 1268, 744, 753, 62, 688, 1269, 494, 822, 823,
	481, 473, 922, 29, 1269, 61, 32, 33, 62, 1114,
	755, 513, 513, 1037, 824, 825, 826, 827, 828, 829,
	830, 831, 1622, 1723, 1112, 1113, 1111, 34, 1638, 1504,
	1327, 820, 904, 853, 855, 857, 859, 861, 863, 864,
	866, 661, 833, 854, 856, 705, 860, 862, 1159, 865,
	1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058,
	1059, 1060, 68, 29, 2141, 61, 32, 33, 1225, 2095,
	998, 913, 1081, 1082, 918, 1724, 677, 29, 1269, 61,
	32, 33, 754, 753, 1517, 1994, 1711, 34, 1624, 2145,
	2155, 1268, 750, 1628, 1595, 1623, 2026, 1621, 1592, 1268,
	755, 34, 1626, 822, 823, 1017, 1038, 1006, 2149, 702,
	1159, 703, 1412, 343, 704, 1625, 1834, 754, 753, 1399,
	909, 1398, 68, 1328, 2097, 754, 753, 27, 1627, 1629,
	754, 753, 2054, 1356, 662, 755, 68, 84, 754, 753,
	1995, 68, 2053, 755, 2068, 1994, 2067, 1355, 755, 1833,
	2151, 1110, 497, 513, 513, 513, 755, 1545, 2150, 1994,
	754, 753, 1543, 1131, 2132, 1132, 513, 513, 1380, 1381,
	1382, 754, 753, 1268, 85, 1018, 1019, 2053, 755, 1585,
	1581, 1524, 1967, 1269, 1582, 1922, 1360, 1589, 1591, 755,
	754, 753, 459, 460, 363, 1354, 1492, 1640, 1493, 1884,
	1995, 352, 513, 1831, 1586, 1716, 1541, 57, 755, 2082,
	2129, 2114, 2128, 1339, 1995, 1329, 885, 886, 887, 888,
	889, 873, 874, 875, 890, 891, 876, 877, 878, 884,
	892, 879, 880, 881, 882, 883, 895, 894, 893, 896,
	897, 899, 898, 900, 693, 1063, 1352, 1346, 1347, 1065,
	1345, 1032, 1348, 1349, 502, 503, 504, 505, 506, 1061,
	1083, 1039, 1020, 1021, 699, 760, 692, 57, 1077, 2082,
	2066, 1745, 2065, 29, 483, 61, 32, 33, 1268, 1901,
	2088, 57, 1088, 2082, 1585, 1581, 1965, 1358, 1361, 1582,
	1935, 1084, 1583, 1584, 1504, 1932, 1400, 34, 1265, 1269,
	1097, 1099, 1100, 62, 1064, 1089, 1098, 483, 1090, 1586,
	1825, 2085, 2039, 699, 1041, 1861, 1076, 1022, 1023, 1024,
	1825, 2036, 60, 1766, 483, 1901, 2010, 1825, 1969, 1930,
	1033, 1034, 68, 754, 753, 1108, 1760, 836, 1756, 803,
	804, 805, 806, 807, 800, 1753, 29, 810, 61, 32,
	33, 755, 1086, 1901, 1961, 1994, 754, 753, 1353, 1751,
	2124, 1750, 1101, 62, 1901, 1912, 1067, 1085, 1901, 699,
	34, 1825, 1824, 1916, 755, 1148, 1151, 62, 1811, 699,
	1808, 699, 1160, 1741, 1351, 1740, 1739, 1105, 1731, 1730,
	1915, 1103, 1727, 1728, 1268, 1727, 1726, 1395, 699, 1736,
	1263, 1568, 1264, 1134, 1135, 68, 1567, 1499, 1261, 1267,
	1995, 1218, 1203, 699, 1717, 910, 1139, 1343, 1270, 910,
	1208, 1211, 1212, 1213, 1209, 1357, 1210, 1214, 1994, 1106,
	1683, 1684, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122,
	1123, 1124, 1125, 1126, 1127, 1128, 1129, 1325, 1324, 29,
	1139, 699, 29, 1109, 473, 1133, 1138, 1140, 1045, 1014,
	833, 1013, 1145, 1172, 1012, 1174, 1011, 1003, 1001, 1000,
	999, 997, 1359, 1452, 1104, 1141, 510, 57, 916, 2082,
	936, 935, 916, 1995, 340, 72, 1232, 72, 1453, 1162,
	1234, 1891, 1669, 921, 1482, 921, 1170, 1171, 513, 1231,
	513, 915, 1610, 1177, 1178, 1179, 1180, 1202, 68, 1482,
	2042, 68, 29, 1804, 1257, 1137, 1230, 1017, 1276, 1277,
	1940, 1282, 1283, 1284, 1285, 1286, 1239, 1238, 1235, 1156,
	1105, 917, 1203, 919, 1250, 917, 1139, 915, 1395, 1296,
	1297, 1298, 1737, 1203, 709, 713, 1729, 354, 1203, 833,
	57, 1495, 2082, 1289, 1290, 1291, 1292, 1395, 1306, 1307,
	1308, 791, 1240, 921, 1395, 1417, 1416, 1181, 1182, 1341,
	909, 68, 1186, 62, 909, 1189, 1323, 915, 909, 1079,
	1194, 1301, 1303, 1004, 68, 2047, 2037, 714, 808, 809,
	801, 802, 803, 804, 805, 806, 807, 800, 835, 1933,
	810, 1872, 1835, 1275, 1814, 1384, 68, 2121, 1305, 848,
	1710, 392, 391, 394, 395, 396, 397, 1249, 1300, 1254,
	393, 398, 1683, 1684, 2119, 1498, 1336, 799, 798, 808,
	809, 801, 802, 803, 804, 805, 806, 807, 800, 1319,
	1295, 810, 1294, 695, 1603, 1310, 62, 1873, 1208, 1211,
	1212, 1213, 1209, 1108, 1210, 1214, 2105, 1735, 1092, 1686,
	1669, 1546, 1313, 1044, 1315, 1008, 801, 802, 803, 804,
	805, 806, 807, 800, 1689, 1105, 810, 1468, 1373, 1250,
	1688, 1372, 1469, 1466, 1470, 1338, 1212, 1213, 1467, 1465,
	1464, 1389, 358, 359, 2062, 2043, 1607, 1369, 2059, 1455,
	1456, 748, 749, 1378, 910, 910, 910, 910, 910, 1377,
	1889, 1385, 1755, 1506, 1715, 1714, 1392, 1500, 1998, 1218,
	1997, 1474, 341, 1571, 1534, 707, 934, 746, 691, 511,
	1802, 1868, 910, 1081, 1082, 473, 1458, 708, 1314, 1007,
	1549, 1333, 1411, 748, 749, 1919, 1216, 995, 1946, 1386,
	1387, 1388, 355, 356, 349, 1376, 1391, 1888, 350, 1875,
	72, 1945, 1104, 1375, 1394, 1396, 1482, 1397, 2123, 2122,
	1477, 1109, 1405, 1403, 1472, 1402, 1406, 1407, 1408, 1496,
	1035, 1476, 751, 1414, 2122, 1415, 2123, 1957, 1418, 1419,
	1713, 1420, 1421, 1074, 74, 1425, 1426, 1427, 1428, 1429,
	1484, 1459, 1485, 1483, 1462, 76, 1436, 1437, 1438, 1471,
	1440, 1441, 60, 1443, 1444, 1445, 1446, 50, 1448, 1449,
	1450, 1460, 1461, 513, 1463, 513, 513, 69, 370, 1167,
	1501, 1502, 1487, 1551, 1552, 1553, 1505, 1454, 1986, 47,
	1473, 1988, 19, 1, 1533, 1839, 1535, 1536, 1537, 1538,
	1838, 1527, 1528, 1529, 1531, 1987, 18, 1141, 699, 1989,
	20, 1990, 21, 909, 909, 909, 909, 909, 1985, 15,
	1040, 110, 1555, 1575, 110, 1525, 1526, 1554, 909, 694,
	110, 696, 1532, 1984, 14, 1542, 1978, 10, 1992, 25,
	835, 909, 1539, 1579, 1566, 1544, 799, 798, 808, 809,
	801, 802, 803, 804, 805, 806, 807, 800, 1765, 110,
	810, 1578, 1590, 1594, 110, 1869, 110, 1983, 13, 1570,
	1980, 12, 1569, 1574, 1644, 1573, 1588, 110, 1350, 501,
	1422, 1424, 1979, 11, 1580, 110, 1254, 1430, 1431, 1432,
	1433, 1637, 1587, 2005, 1597, 1598, 1977, 9, 1094, 1095,
	1548, 1260, 1251, 83, 1674, 480, 60, 82, 1326, 660,
	1859, 309, 1614, 1613, 1258, 1511, 1510, 1507, 1522, 1272,
	1509, 1508, 1512, 942, 1631, 1572, 1630, 940, 941, 1693,
	1694, 1695, 939, 1618, 944, 473, 1670, 1562, 943, 1564,
	1565, 1271, 313, 468, 929, 1673, 752, 1654, 1655, 91,
	1657, 1658, 51, 1660, 1661, 1662, 1663, 1862, 1665, 1666,
	1667, 1593, 1344, 1696, 86, 1617, 1042, 668, 669, 315,
	818, 1374, 1488, 1692, 1703, 474, 1680, 1616, 1676, 2048,
	711, 835, 2011, 1687, 1944, 1146, 1147, 1874, 1632, 1633,
	1410, 1634, 1635, 1690, 847, 1157, 375, 2014, 1096, 390,
	389, 1698, 388, 1641, 1642, 385, 386, 1650, 1651, 1702,
	1707, 1332, 1656, 1087, 1451, 1659, 792, 1612, 373, 365,
	1664, 1708, 1709, 908, 1207, 1205, 1733, 1734, 1204, 1009,
	463, 1685, 1718, 1719, 1681, 907, 1609, 676, 328, 1722,
	1790, 1951, 1091, 31, 1675, 73, 1725, 360, 26, 17,
	682, 22, 16, 1721, 495, 35, 1747, 39, 38, 37,
	1738, 910, 1691, 1550, 1316, 338, 1048, 1752, 1794, 1046,
	2111, 2051, 2034, 1246, 1993, 23, 1720, 2089, 4, 351,
	110, 28, 2, 501, 0, 501, 501, 1789, 0, 0,
	0, 0, 0, 501, 1749, 0, 0, 0, 1748, 501,
	0, 0, 1712, 0, 1746, 0, 1743, 799, 798, 808,
	809, 801, 802, 803, 804, 805, 806, 807, 800, 0,
	0, 810, 0, 110, 0, 1759, 1795, 1770, 1612, 1254,
	0, 1254, 1771, 0, 0, 1645, 1646, 1647, 1648, 1649,
	0, 1778, 759, 1775, 1776, 0, 1777, 0, 0, 1779,
	0, 1781, 0, 0, 0, 0, 0, 0, 1744, 0,
	1797, 1798, 1812, 0, 0, 0, 1799, 0, 0, 1800,
	0, 0, 0, 0, 1801, 0, 1330, 0, 0, 1496,
	0, 0, 0, 1803, 0, 60, 1772, 0, 1817, 0,
	0, 0, 1774, 0, 1823, 0, 0, 0, 0, 1818,
	1821, 1822, 1773, 1783, 1784, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1827, 0, 1828, 0,
	909, 1370, 1371, 0, 713, 0, 0, 1829, 0, 1826,
	0, 0, 0, 0, 0, 0, 0, 1858, 110, 110,
	110, 1850, 1851, 1852, 1853, 0, 0, 1805, 1806, 1807,
	0, 1810, 0, 501, 1866, 1674, 0, 0, 1893, 0,
	110, 1707, 0, 1816, 501, 1860, 0, 0, 0, 0,
	0, 0, 110, 1854, 0, 1830, 110, 1832, 0, 0,
	0, 110, 0, 0, 1393, 0, 0, 110, 1867, 501,
	501, 0, 0, 0, 0, 0, 1673, 0, 0, 0,
	0, 0, 0, 0, 1413, 0, 1890, 1793, 0, 0,
	1897, 0, 0, 0, 1918, 0, 1920, 1899, 1905, 1939,
	1898, 1917, 1911, 1836, 1910, 1876, 0, 1900, 0, 1921,
	0, 0, 0, 0, 1931, 0, 1254, 1913, 0, 1914,
	0, 0, 1674, 0, 60, 1937, 799, 798, 808, 809,
	801, 802, 803, 804, 805, 806, 807, 800, 0, 0,
	810, 0, 1938, 1883, 0, 0, 0, 0, 1887, 0,
	0, 60, 1878, 1879, 1880, 1881, 1882, 1964, 1942, 1934,
	1885, 1886, 0, 1673, 1958, 1975, 0, 1974, 1956, 0,
	1973, 0, 1902, 1976, 1903, 1904, 1892, 1962, 1871, 1966,
	1991, 0, 0, 2013, 2017, 1982, 0, 1981, 0, 2001,
	0, 0, 401, 0, 0, 0, 0, 2004, 2009, 2002,
	0, 0, 0, 2003, 0, 0, 0, 0, 2008, 0,
	0, 501, 501, 501, 110, 110, 110, 0, 2022, 110,
	473, 2023, 0, 0, 501, 501, 0, 60, 0, 2031,
	0, 1947, 1948, 1949, 1950, 0, 0, 2035, 1954, 1955,
	0, 1975, 0, 1974, 0, 0, 1973, 0, 0, 1976,
	0, 0, 0, 0, 0, 110, 1991, 0, 0, 110,
	501, 1982, 1959, 1981, 110, 0, 2041, 0, 0, 0,
	0, 0, 0, 0, 475, 0, 2056, 0, 0, 0,
	2017, 1964, 0, 2058, 2061, 60, 60, 0, 0, 1972,
	2060, 0, 0, 499, 2069, 0, 2084, 0, 0, 60,
	1975, 0, 1974, 2057, 2018, 1973, 2064, 2096, 1976, 2094,
	110, 2093, 2024, 60, 2092, 1991, 759, 2091, 0, 2090,
	1982, 2099, 1981, 1788, 0, 2100, 0, 0, 60, 60,
	0, 0, 2116, 2063, 2112, 0, 2108, 1639, 60, 2120,
	2118, 60, 0, 2112, 2130, 0, 60, 2106, 0, 2127,
	0, 2112, 0, 0, 1871, 1254, 60, 2140, 2038, 0,
	60, 2112, 0, 0, 0, 1972, 0, 0, 2144, 0,
	0, 0, 0, 60, 0, 2046, 60, 0, 2112, 0,
	0, 0, 0, 60, 2153, 0, 0, 60, 2112, 0,
	501, 0, 2112, 0, 0, 0, 0, 1142, 1144, 0,
	0, 0, 1150, 1153, 1154, 1155, 0, 1697, 0, 799,
	798, 808, 809, 801, 802, 803, 804, 805, 806, 807,
	800, 0, 0, 810, 1972, 0, 501, 501, 0, 1165,
	0, 1168, 1169, 0, 0, 0, 1173, 0, 1175, 1176,
	0, 0, 0, 0, 0, 0, 1183, 1184, 1185, 0,
	1187, 1188, 0, 1190, 1191, 1192, 1193, 0, 1195, 1196,
	1197, 110, 0, 0, 0, 0, 0, 0, 0, 110,
	110, 0, 0, 110, 110, 0, 0, 110, 110, 110,
	0, 0, 0, 2133, 0, 0, 2146, 2147, 0, 0,
	0, 0, 0, 1216, 501, 0, 0, 515, 0, 515,
	515, 0, 0, 0, 0, 0, 0, 515, 0, 0,
	0, 0, 0, 515, 0, 29, 30, 61, 32, 33,
	0, 0, 0, 0, 1761, 0, 0, 0, 0, 58,
	0, 1224, 1226, 0, 0, 67, 0, 0, 0, 34,
	54, 55, 0, 0, 0, 0, 59, 0, 0, 0,
	0, 0, 0, 0, 0, 110, 501, 0, 501, 0,
	0, 0, 0, 110, 110, 1792, 0, 110, 0, 0,
	45, 0, 0, 0, 68, 799, 798, 808, 809, 801,
	802, 803, 804, 805, 806, 807, 800, 0, 0, 810,
	0, 0, 0, 1787, 110, 0, 110, 110, 0, 835,
	0, 0, 0, 110, 0, 0, 0, 0, 1813, 0,
	0, 1815, 1225, 798, 808, 809, 801, 802, 803, 804,
	805, 806, 807, 800, 0, 0, 810, 110, 110, 110,
	110, 110, 0, 0, 0, 0, 36, 63, 41, 40,
	43, 0, 56, 1786, 0, 0, 0, 0, 0, 0,
	0, 1379, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 475, 0, 0, 0, 0, 0, 930, 44, 66,
	65, 0, 0, 52, 53, 42, 0, 0, 994, 799,
	798, 808, 809, 801, 802, 803, 804, 805, 806, 807,
	800, 0, 0, 810, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 515, 515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1409, 0, 0, 57,
	0, 46, 64, 0, 48, 49, 0, 0, 0, 799,
	798, 808, 809, 801, 802, 803, 804, 805, 806, 807,
	800, 1434, 1435, 810, 0, 0, 1439, 0, 0, 1442,
	0, 0, 0, 0, 1447, 0, 0, 0, 0, 110,
	0, 0, 110, 110, 110, 110, 110, 0, 0, 0,
	0, 0, 0, 0, 110, 0, 0, 110, 0, 0,
	911, 110, 0, 0, 0, 29, 0, 61, 32, 33,
	110, 0, 0, 0, 0, 0, 0, 0, 0, 58,
	0, 0, 0, 0, 0, 67, 0, 0, 0, 34,
	0, 501, 0, 835, 0, 62, 0, 0, 0, 0,
	0, 0, 0, 107, 0, 0, 0, 0, 0, 0,
	0, 0, 331, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 68, 515, 515, 515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 515, 515,
	0, 464, 0, 0, 323, 0, 484, 1994, 486, 501,
	2012, 2016, 2083, 0, 0, 0, 0, 0, 0, 496,
	0, 501, 110, 501, 501, 0, 0, 507, 0, 0,
	0, 0, 0, 0, 515, 0, 0, 0, 0, 320,
	0, 0, 0, 0, 0, 0, 36, 63, 41, 40,
	43, 0, 0, 0, 0, 0, 0, 0, 0, 2032,
	2033, 0, 1995, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 110, 0, 0, 0, 0, 44, 66,
	65, 0, 501, 0, 0, 42, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 305, 0,
	0, 0, 0, 0, 0, 0, 0, 2016, 314, 321,
	322, 0, 0, 0, 0, 0, 0, 0, 2070, 0,
	0, 0, 501, 515, 0, 0, 0, 0, 0, 57,
	0, 1996, 64, 0, 48, 49, 0, 0, 0, 0,
	1785, 0, 0, 0, 311, 0, 0, 312, 0, 0,
	0, 0, 319, 0, 501, 501, 0, 29, 0, 61,
	32, 33, 0, 0, 1136, 0, 0, 0, 0, 0,
	0, 58, 0, 501, 0, 0, 0, 67, 0, 2131,
	0, 34, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 501, 501, 0, 501, 501, 0, 0,
	1163, 1164, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 303, 0, 0, 0, 0, 68, 0, 0, 0,
	0, 0, 509, 0, 0, 62, 799, 798, 808, 809,
	801, 802, 803, 804, 805, 806, 807, 800, 0, 1994,
	810, 0, 316, 306, 307, 110, 317, 318, 326, 0,
	0, 0, 308, 310, 475, 304, 325, 324, 0, 0,
	110, 0, 0, 0, 0, 701, 515, 0, 515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 36, 63,
	41, 40, 43, 0, 0, 0, 0, 0, 0, 501,
	0, 0, 110, 501, 1995, 0, 0, 0, 0, 0,
	501, 0, 0, 501, 501, 501, 0, 0, 0, 110,
	44, 66, 65, 0, 0, 0, 0, 42, 0, 0,
	0, 0, 0, 0, 794, 0, 797, 0, 0, 0,
	515, 0, 515, 811, 812, 813, 814, 815, 816, 817,
	0, 795, 796, 793, 799, 798, 808, 809, 801, 802,
	803, 804, 805, 806, 807, 800, 0, 0, 810, 0,
	0, 57, 0, 1996, 64, 0, 48, 49, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	903, 0, 912, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 501, 501, 501, 0, 0, 0, 0, 0,
	0, 501, 937, 0, 0, 0, 0, 0, 0, 501,
	0, 515, 0, 0, 1002, 1615, 0, 0, 464, 0,
	0, 0, 0, 1010, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 110, 0, 799, 798, 808, 809,
	801, 802, 803, 804, 805, 806, 807, 800, 1390, 0,
	810, 0, 0, 0, 0, 0, 0, 62, 0, 0,
	0, 0, 0, 501, 0, 0, 0, 0, 0, 799,
	798, 808, 809, 801, 802, 803, 804, 805, 806, 807,
	800, 0, 0, 810, 799, 798, 808, 809, 801, 802,
	803, 804, 805, 806, 807, 800, 0, 0, 810, 0,
	0, 0, 0, 0, 0, 0, 710, 501, 501, 0,
	501, 0, 0, 501, 0, 110, 0, 110, 0, 0,
	0, 0, 0, 0, 501, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 501, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 108,
	0, 0, 327, 0, 0, 0, 0, 0, 108, 0,
	0, 0, 0, 0, 501, 0, 0, 0, 0, 0,
	0, 501, 110, 0, 0, 0, 1025, 1026, 1027, 0,
	0, 1028, 0, 0, 364, 515, 0, 466, 476, 0,
	0, 0, 108, 0, 108, 0, 0, 0, 0, 0,
	501, 0, 0, 0, 0, 108, 0, 0, 0, 0,
	0, 0, 0, 108, 0, 0, 0, 903, 0, 0,
	0, 1066, 0, 0, 0, 0, 1073, 0, 0, 0,
	0, 0, 501, 0, 0, 0, 0, 0, 0, 501,
	501, 0, 0, 1547, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 515, 0, 515, 515, 501,
	0, 0, 0, 0, 0, 964, 0, 110, 0, 0,
	0, 0, 1093, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 501, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 515, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 501, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 501, 0, 0, 0,
	0, 0, 0, 0, 0, 951, 1643, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 475, 0, 0, 1677, 1679,
	0, 0, 0, 0, 0, 0, 0, 965, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1679, 108, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1201, 0, 0, 0, 515, 515, 0,
	515, 1706, 0, 0, 0, 0, 1233, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 978, 981, 982, 983, 984, 985, 986, 0,
	987, 988, 989, 990, 991, 992, 993, 0, 966, 967,
	968, 969, 945, 949, 979, 946, 952, 948, 950, 947,
	0, 953, 954, 955, 956, 957, 958, 959, 960, 961,
	962, 963, 970, 971, 972, 973, 974, 975, 976, 977,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1312, 0, 0,
	0, 0, 0, 1754, 0, 1320, 1321, 1758, 0, 1322,
	0, 0, 0, 0, 1762, 0, 0, 1767, 1768, 1769,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1331, 0, 0, 0,
	0, 0, 0, 0, 0, 1340, 108, 108, 108, 0,
	0, 0, 0, 0, 0, 476, 0, 0, 0, 0,
	0, 0, 0, 0, 980, 0, 0, 0, 108, 1362,
	1363, 1364, 1365, 1366, 0, 0, 0, 0, 0, 0,
	108, 0, 0, 0, 108, 0, 0, 0, 0, 108,
	0, 0, 0, 0, 0, 1016, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1820, 1820, 1820, 0,
	0, 0, 0, 0, 0, 515, 0, 0, 0, 0,
	0, 0, 0, 1820, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1457, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1894, 1895, 0, 1896, 0, 0, 1820, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1706, 0,
	0, 0, 108, 108, 108, 0, 0, 108, 1706, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1936, 0,
	0, 0, 0, 108, 0, 1820, 0, 108, 0, 0,
	0, 0, 108, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1963, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1563, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 108, 0,
	0, 0, 0, 0, 0, 0, 1706, 0, 0, 0,
	0, 0, 0, 515, 515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	475, 0, 0, 2025, 0, 1608, 0, 1016, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2040, 0, 0, 0, 364, 364, 0, 0, 0, 364,
	364, 364, 364, 0, 0, 0, 476, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1706, 0, 0, 0, 0, 0, 364, 364, 364, 364,
	1820, 0, 364, 364, 364, 364, 364, 0, 0, 0,
	0, 0, 0, 364, 364, 364, 0, 364, 364, 0,
	364, 364, 364, 364, 0, 364, 364, 364, 0, 108,
	0, 0, 0, 0, 0, 0, 0, 108, 1227, 0,
	0, 108, 108, 0, 0, 108, 1236, 1016, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1016, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1732, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1742, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 108, 0, 0, 0, 0, 0, 0,
	0, 108, 108, 0, 1757, 108, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 108, 0, 1334, 1335, 0, 0, 0, 0,
	0, 108, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 108, 108, 108, 108, 108,
	0, 0, 0, 0, 0, 1016, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 364, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 364, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1837, 0, 0, 0,
	0, 0, 0, 364, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 364, 364,
	0, 0, 0, 364, 0, 0, 364, 0, 0, 0,
	0, 364, 0, 0, 0, 0, 0, 108, 0, 476,
	108, 108, 108, 108, 108, 0, 0, 0, 0, 0,
	0, 0, 1227, 0, 0, 108, 0, 0, 0, 1227,
	0, 0, 0, 0, 0, 0, 0, 0, 108, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1943, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	108, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 0, 0, 0, 0, 0, 0, 0, 2027,
	0, 364, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 364, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 476,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 108, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	108, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 108, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 108, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1227, 0, 1227, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 634, 614, 0, 572, 637, 544, 561, 648, 562,
	565, 603, 530, 584, 208, 559, 531, 0, 548, 521,
	555, 522, 545, 574, 149, 543, 616, 587, 636, 176,
	599, 0, 142, 183, 0, 0, 0, 0, 635, 580,
	108, 643, 179, 596, 0, 256, 195, 0, 0, 576,
	623, 582, 612, 571, 605, 537, 595, 638, 560, 601,
	639, 0, 0, 0, 500, 0, 1255, 1256, 0, 0,
	0, 0, 0, 133, 0, 598, 633, 557, 600, 602,
	519, 597, 0, 525, 532, 647, 629, 551, 552, 553,
	1497, 0, 0, 0, 0, 0, 0, 575, 583, 609,
	568, 0, 0, 0, 0, 0, 0, 0, 0, 549,
	0, 593, 0, 0, 0, 533, 526, 0, 0, 573,
	0, 0, 0, 536, 476, 550, 610, 0, 517, 157,
	0, 0, 613, 628, 570, 108, 290, 632, 567, 566,
	225, 0, 261, 160, 177, 127, 112, 122, 0, 159,
	204, 234, 242, 558, 518, 617, 546, 556, 143, 554,
	236, 212, 281, 0, 590, 217, 235, 180, 270, 227,
	279, 280, 161, 291, 292, 265, 288, 296, 253, 0,
	0, 0, 0, 0, 0, 173, 569, 604, 547, 140,
	607, 594, 622, 252, 128, 266, 194, 199, 137, 139,
	138, 123, 247, 268, 132, 141, 257, 262, 115, 264,
	278, 134, 246, 117, 276, 260, 192, 170, 171, 116,
	0, 232, 148, 156, 145, 207, 0, 0, 0, 273,
	274, 144, 299, 124, 287, 119, 125, 286, 201, 0,
	0, 0, 269, 277, 193, 186, 0, 118, 275, 191,
	185, 175, 152, 163, 222, 182, 223, 164, 197, 196,
	198, 0, 523, 0, 258, 284, 300, 130, 542, 0,
	267, 294, 295, 0, 0, 131, 155, 151, 221, 200,
	126, 166, 255, 174, 181, 231, 298, 211, 237, 135,
	283, 254, 540, 541, 538, 0, 539, 585, 586, 640,
	641, 642, 611, 534, 0, 624, 625, 0, 615, 630,
	631, 606, 649, 563, 564, 524, 527, 528, 529, 535,
	577, 578, 589, 592, 620, 619, 618, 621, 626, 645,
	644, 646, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 588, 111, 120, 178, 297, 229, 154,
	285, 520, 147, 0, 0, 579, 581, 591, 608, 113,
	114, 121, 129, 136, 146, 150, 153, 158, 162, 165,
	167, 168, 169, 172, 184, 187, 188, 189, 190, 202,
	203, 205, 206, 209, 210, 213, 214, 215, 216, 218,
	219, 220, 224, 226, 228, 230, 233, 238, 239, 240,
	241, 243, 244, 245, 248, 249, 250, 251, 259, 263,
	271, 272, 282, 289, 293, 627, 634, 614, 0, 572,
	637, 544, 561, 648, 562, 565, 603, 530, 584, 208,
	559, 531, 0, 548, 521, 555, 522, 545, 574, 149,
	543, 616, 587, 636, 176, 599, 0, 142, 183, 0,
	0, 0, 0, 635, 580, 0, 643, 179, 596, 0,
	256, 195, 0, 0, 576, 623, 582, 612, 571, 605,
	537, 595, 638, 560, 601, 639, 0, 0, 0, 500,
	0, 1255, 1256, 0, 0, 0, 0, 0, 133, 0,
	598, 633, 557, 600, 602, 519, 597, 0, 525, 532,
	647, 629, 551, 552, 553, 0, 0, 0, 0, 0,
	0, 0, 575, 583, 609, 568, 0, 0, 0, 0,
	0, 0, 0, 0, 549, 0, 593, 0, 0, 0,
	533, 526, 0, 0, 573, 0, 0, 0, 536, 0,
	550, 610, 0, 517, 157, 0, 0, 613, 628, 570,
	0, 290, 632, 567, 566, 225, 0, 261, 160, 177,
	127, 112, 122, 0, 159, 204, 234, 242, 558, 518,
	617, 546, 556, 143, 554, 236, 212, 281, 0, 590,
	217, 235, 180, 270, 227, 279, 280, 161, 291, 292,
	265, 288, 296, 253, 0, 0, 0, 0, 0, 0,
	173, 569, 604, 547, 140, 607, 594, 622, 252, 128,
	266, 194, 199, 137, 139, 138, 123, 247, 268, 132,
	141, 257, 262, 115, 264, 278, 134, 246, 117, 276,
	260, 192, 170, 171, 116, 0, 232, 148, 156, 145,
	207, 0, 0, 0, 273, 274, 144, 299, 124, 287,
	119, 125, 286, 201, 0, 0, 0, 269, 277, 193,
	186, 0, 118, 275, 191, 185, 175, 152, 163, 222,
	182, 223, 164, 197, 196, 198, 0, 523, 0, 258,
	284, 300, 130, 542, 0, 267, 294, 295, 0, 0,
	131, 155, 151, 221, 200, 126, 166, 255, 174, 181,
	231, 298, 211, 237, 135, 283, 254, 540, 541, 538,
	0, 539, 585, 586, 640, 641, 642, 611, 534, 0,
	624, 625, 0, 615, 630, 631, 606, 649, 563, 564,
	524, 527, 528, 529, 535, 577, 578, 589, 592, 620,
	619, 618, 621, 626, 645, 644, 646, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 588, 111,
	120, 178, 297, 229, 154, 285, 520, 147, 0, 0,
	579, 581, 591, 608, 113, 114, 121, 129, 136, 146,
	150, 153, 158, 162, 165, 167, 168, 169, 172, 184,
	187, 188, 189, 190, 202, 203, 205, 206, 209, 210,
	213, 214, 215, 216, 218, 219, 220, 224, 226, 228,
	230, 233, 238, 239, 240, 241, 243, 244, 245, 248,
	249, 250, 251, 259, 263, 271, 272, 282, 289, 293,
	627, 634, 614, 0, 572, 637, 544, 561, 648, 562,
	565, 603, 530, 584, 208, 559, 531, 0, 548, 521,
	555, 522, 545, 574, 149, 543, 616, 587, 636, 176,
	599, 0, 142, 183, 0, 0, 0, 0, 635, 580,
	0, 643, 179, 596, 0, 256, 195, 0, 0, 576,
	623, 582, 612, 571, 605, 537, 595, 638, 560, 601,
	639, 0, 0, 0, 500, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 0, 598, 633, 557, 600, 602,
	519, 597, 0, 525, 532, 647, 629, 551, 552, 553,
	0, 0, 0, 0, 0, 0, 0, 575, 583, 609,
	568, 0, 0, 0, 0, 0, 0, 1611, 0, 549,
	0, 593, 0, 0, 0, 533, 526, 0, 0, 573,
	0, 0, 0, 536, 0, 550, 610, 0, 517, 157,
	0, 0, 613, 628, 570, 0, 290, 632, 567, 566,
	225, 0, 261, 160, 177, 127, 112, 122, 0, 159,
	204, 234, 242, 558, 518, 617, 546, 556, 143, 554,
	236, 212, 281, 0, 590, 217, 235, 180, 270, 227,
	279, 280, 161, 291, 292, 265, 288, 296, 253, 0,
	0, 0, 0, 0, 0, 173, 569, 604, 547, 140,
	607, 594, 622, 252, 128, 266, 194, 199, 137, 139,
	138, 123, 247, 268, 132, 141, 257, 262, 115, 264,
	278, 134, 246, 117, 276, 260, 192, 170, 171, 116,
	0, 232, 148, 156, 145, 207, 0, 0, 0, 273,
	274, 144, 299, 124, 287, 119, 125, 286, 201, 0,
	0, 0, 269, 277, 193, 186, 0, 118, 275, 191,
	185, 175, 152, 163, 222, 182, 223, 164, 197, 196,
	198, 0, 523, 0, 258, 284, 300, 130, 542, 0,
	267, 294, 295, 0, 0, 131, 155, 151, 221, 200,
	126, 166, 255, 174, 181, 231, 298, 211, 237, 135,
	283, 254, 540, 541, 538, 0, 539, 585, 586, 640,
	641, 642, 611, 534, 0, 624, 625, 0, 615, 630,
	631, 606, 649, 563, 564, 524, 527, 528, 529, 535,
	577, 578, 589, 592, 620, 619, 618, 621, 626, 645,
	644, 646, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 588, 111, 120, 178, 297, 229, 154,
	285, 520, 147, 0, 0, 579, 581, 591, 608, 113,
	114, 121, 129, 136, 146, 150, 153, 158, 162, 165,
	167, 168, 169, 172, 184, 187, 188, 189, 190, 202,
	203, 205, 206, 209, 210, 213, 214, 215, 216, 218,
	219, 220, 224, 226, 228, 230, 233, 238, 239, 240,
	241, 243, 244, 245, 248, 249, 250, 251, 259, 263,
	271, 272, 282, 289, 293, 627, 634, 614, 0, 572,
	637, 544, 561, 648, 562, 565, 603, 530, 584, 208,
	559, 531, 0, 548, 521, 555, 522, 545, 574, 149,
	543, 616, 587, 636, 176, 599, 0, 142, 183, 0,
	0, 0, 0, 635, 580, 0, 643, 179, 596, 0,
	256, 195, 0, 0, 576, 623, 582, 612, 571, 605,
	537, 595, 638, 560, 601, 639, 68, 0, 0, 500,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 0,
	598, 633, 557, 600, 602, 519, 597, 0, 525, 532,
	647, 629, 551, 552, 553, 0, 0, 0, 0, 0,
	0, 0, 575, 583, 609, 568, 0, 0, 0, 0,
	0, 0, 0, 0, 549, 0, 593, 0, 0, 0,
	533, 526, 0, 0, 573, 0, 0, 0, 536, 0,
	550, 610, 0, 517, 157, 0, 0, 613, 628, 570,
	0, 290, 632, 567, 566, 225, 0, 261, 160, 177,
	127, 112, 122, 0, 159, 204, 234, 242, 558, 518,
	617, 546, 556, 143, 554, 236, 212, 281, 0, 590,
	217, 235, 180, 270, 227, 279, 280, 161, 291, 292,
	265, 288, 296, 253, 0, 0, 0, 0, 0, 0,
	173, 569, 604, 547, 140, 607, 594, 622, 252, 128,
	266, 194, 199, 137, 139, 138, 123, 247, 268, 132,
	141, 257, 262, 115, 264, 278, 134, 246, 117, 276,
	260, 192, 170, 171, 116, 0, 232, 148, 156, 145,
	207, 0, 0, 0, 273, 274, 144, 299, 124, 287,
	119, 125, 286, 201, 0, 0, 0, 269, 277, 193,
	186, 0, 118, 275, 191, 185, 175, 152, 163, 222,
	182, 223, 164, 197, 196, 198, 0, 523, 0, 258,
	284, 300, 130, 542, 0, 267, 294, 295, 0, 0,
	131, 155, 151, 221, 200, 126, 166, 255, 174, 181,
	231, 298, 211, 237, 135, 283, 254, 540, 541, 538,
	0, 539, 585, 586, 640, 641, 642, 611, 534, 0,
	624, 625, 0, 615, 630, 631, 606, 649, 563, 564,
	524, 527, 528, 529, 535, 577, 578, 589, 592, 620,
	619, 618, 621, 626, 645, 644, 646, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 588, 111,
	120, 178, 297, 229, 154, 285, 520, 147, 0, 0,
	579, 581, 591, 608, 113, 114, 121, 129, 136, 146,
	150, 153, 158, 162, 165, 167, 168, 169, 172, 184,
	187, 188, 189, 190, 202, 203, 205, 206, 209, 210,
	213, 214, 215, 216, 218, 219, 220, 224, 226, 228,
	230, 233, 238, 239, 240, 241, 243, 244, 245, 248,
	249, 250, 251, 259, 263, 271, 272, 282, 289, 293,
	627, 634, 614, 0, 572, 637, 544, 561, 648, 562,
	565, 603, 530, 584, 208, 559, 531, 0, 548, 521,
	555, 522, 545, 574, 149, 543, 616, 587, 636, 176,
	599, 0, 142, 183, 0, 0, 0, 0, 635, 580,
	0, 643, 179, 596, 0, 256, 195, 0, 0, 576,
	623, 582, 612, 571, 605, 537, 595, 638, 560, 601,
	639, 0, 0, 0, 109, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 0, 598, 633, 557, 600, 602,
	519, 597, 0, 525, 532, 647, 629, 551, 552, 553,
	0, 0, 0, 0, 0, 0, 0, 575, 583, 609,
	568, 0, 0, 0, 0, 0, 0, 1237, 0, 549,
	0, 593, 0, 0, 0, 533, 526, 0, 0, 573,
	0, 0, 0, 536, 0, 550, 610, 0, 517, 157,
	0, 0, 613, 628, 570, 0, 290, 632, 567, 566,
	225, 0, 261, 160, 177, 127, 112, 122, 0, 159,
	204, 234, 242, 558, 518, 617, 546, 556, 143, 554,
	236, 212, 281, 0, 590, 217, 235, 180, 270, 227,
	279, 280, 161, 291, 292, 265, 288, 296, 253, 0,
	0, 0, 0, 0, 0, 173, 569, 604, 547, 140,
	607, 594, 622, 252, 128, 266, 194, 199, 137, 139,
	138, 123, 247, 268, 132, 141, 257, 262, 115, 264,
	278, 134, 246, 117, 276, 260, 192, 170, 171, 116,
	0, 232, 148, 156, 145, 207, 0, 0, 0, 273,
	274, 144, 299, 124, 287, 119, 125, 286, 201, 0,
	0, 0, 269, 277, 193, 186, 0, 118, 275, 191,
	185, 175, 152, 163, 222, 182, 223, 164, 197, 196,
	198, 0, 523, 0, 258, 284, 300, 130, 542, 0,
	267, 294, 295, 0, 0, 131, 155, 151, 221, 200,
	126, 166, 255, 174, 181, 231, 298, 211, 237, 135,
	283, 254, 540, 541, 538, 0, 539, 585, 586, 640,
	641, 642, 611, 534, 0, 624, 625, 0, 615, 630,
	631, 606, 649, 563, 564, 524, 527, 528, 529, 535,
	577, 578, 589, 592, 620, 619, 618, 621, 626, 645,
	644, 646, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 588, 111, 120, 178, 297, 229, 154,
	285, 520, 147, 0, 0, 579, 581, 591, 608, 113,
	114, 121, 129, 136, 146, 150, 153, 158, 162, 165,
	167, 168, 169, 172, 184, 187, 188, 189, 190, 202,
	203, 205, 206, 209, 210, 213, 214, 215, 216, 218,
	219, 220, 224, 226, 228, 230, 233, 238, 239, 240,
	241, 243, 244, 245, 248, 249, 250, 251, 259, 263,
	271, 272, 282, 289, 293, 627, 634, 614, 0, 572,
	637, 544, 561, 648, 562, 565, 603, 530, 584, 208,
	559, 531, 0, 548, 521, 555, 522, 545, 574, 149,
	543, 616, 587, 636, 176, 599, 0, 142, 183, 0,
	0, 0, 0, 635, 580, 0, 643, 179, 596, 0,
	256, 195, 0, 0, 576, 623, 582, 612, 571, 605,
	537, 595, 638, 560, 601, 639, 0, 0, 0, 369,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 0,
	598, 633, 557, 600, 602, 519, 597, 0, 525, 532,
	647, 629, 551, 552, 553, 0, 0, 0, 0, 0,
	0, 0, 575, 583, 609, 568, 0, 0, 0, 0,
	0, 0, 1102, 0, 549, 0, 593, 0, 0, 0,
	533, 526, 0, 0, 573, 0, 0, 0, 536, 0,
	550, 610, 0, 517, 157, 0, 0, 613, 628, 570,
	0, 290, 632, 567, 566, 225, 0, 261, 160, 177,
	127, 112, 122, 0, 159, 204, 234, 242, 558, 518,
	617, 546, 556, 143, 554, 236, 212, 281, 0, 590,
	217, 235, 180, 270, 227, 279, 280, 161, 291, 292,
	265, 288, 296, 253, 0, 0, 0, 0, 0, 0,
	173, 569, 604, 547, 140, 607, 594, 622, 252, 128,
	266, 194, 199, 137, 139, 138, 123, 247, 268, 132,
	141, 257, 262, 115, 264, 278, 134, 246, 117, 276,
	260, 192, 170, 171, 116, 0, 232, 148, 156, 145,
	207, 0, 0, 0, 273, 274, 144, 299, 124, 287,
	119, 125, 286, 201, 0, 0, 0, 269, 277, 193,
	186, 0, 118, 275, 191, 185, 175, 152, 163, 222,
	182, 223, 164, 197, 196, 198, 0, 523, 0, 258,
	284, 300, 130, 542, 0, 267, 294, 295, 0, 0,
	131, 155, 151, 221, 200, 126, 166, 255, 174, 181,
	231, 298, 211, 237, 135, 283, 254, 540, 541, 538,
	0, 539, 585, 586, 640, 641, 642, 611, 534, 0,
	624, 625, 0, 615, 630, 631, 606, 649, 563, 564,
	524, 527, 528, 529, 535, 577, 578, 589, 592, 620,
	619, 618, 621, 626, 645, 644, 646, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 588, 111,
	120, 178, 297, 229, 154, 285, 520, 147, 0, 0,
	579, 581, 591, 608, 113, 114, 121, 129, 136, 146,
	150, 153, 158, 162, 165, 167, 168, 169, 172, 184,
	187, 188, 189, 190, 202, 203, 205, 206, 209, 210,
	213, 214, 215, 216, 218, 219, 220, 224, 226, 228,
	230, 233, 238, 239, 240, 241, 243, 244, 245, 248,
	249, 250, 251, 259, 263, 271, 272, 282, 289, 293,
	627, 634, 614, 0, 572, 637, 544, 561, 648, 562,
	565, 603, 530, 584, 208, 559, 531, 0, 548, 521,
	555, 522, 545, 574, 149, 543, 616, 587, 636, 176,
	599, 0, 142, 183, 0, 0, 0, 0, 635, 580,
	0, 643, 179, 596, 0, 256, 195, 0, 0, 576,
	623, 582, 612, 571, 605, 537, 595, 638, 560, 601,
	639, 0, 0, 0, 500, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 0, 598, 633, 557, 600, 602,
	519, 597, 0, 525, 532, 647, 629, 551, 552, 553,
	0, 0, 0, 0, 0, 0, 0, 575, 583, 609,
	568, 0, 0, 0, 0, 0, 0, 0, 0, 549,
	0, 593, 0, 0, 0, 533, 526, 0, 0, 573,
	0, 0, 0, 536, 0, 550, 610, 0, 517, 157,
	0, 0, 613, 628, 570, 0, 290, 632, 567, 566,
	225, 0, 261, 160, 177, 127, 112, 122, 0, 159,
	204, 234, 242, 558, 518, 617, 546, 556, 143, 554,
	236, 212, 281, 0, 590, 217, 235, 180, 270, 227,
	279, 280, 161, 291, 292, 265, 288, 296, 253, 0,
	0, 0, 0, 0, 0, 173, 569, 604, 547, 140,
	607, 594, 622, 252, 128, 266, 194, 199, 137, 139,
	138, 123, 247, 268, 132, 141, 257, 262, 115, 264,
	278, 134, 246, 117, 276, 260, 192, 170, 171, 116,
	0, 232, 148, 156, 145, 207, 0, 0, 0, 273,
	274, 144, 299, 124, 287, 119, 125, 286, 201, 0,
	0, 0, 269, 277, 193, 186, 0, 118, 275, 191,
	185, 175, 152, 163, 222, 182, 223, 164, 197, 196,
	198, 0, 523, 0, 258, 284, 300, 130, 542, 0,
	267, 294, 295, 0, 0, 131, 155, 151, 221, 200,
	126, 166, 255, 174, 181, 231, 298, 211, 237, 135,
	283, 254, 540, 541, 538, 0, 539, 585, 586, 640,
	641, 642, 611, 534, 0, 624, 625, 0, 615, 630,
	631, 606, 649, 563, 564, 524, 527, 528, 529, 535,
	577, 578, 589, 592, 620, 619, 618, 621, 626, 645,
	644, 646, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 588, 111, 120, 178, 297, 229, 154,
	285, 520, 147, 0, 0, 579, 581, 591, 608, 113,
	114, 121, 129, 136, 146, 150, 153, 158, 162, 165,
	167, 168, 169, 172, 184, 187, 188, 189, 190, 202,
	203, 205, 206, 209, 210, 213, 214, 215, 216, 218,
	219, 220, 224, 226, 228, 230, 233, 238, 239, 240,
	241, 243, 244, 245, 248, 249, 250, 251, 259, 263,
	271, 272, 282, 289, 293, 627, 634, 614, 0, 572,
	637, 544, 561, 648, 562, 565, 603, 530, 584, 208,
	559, 531, 0, 548, 521, 555, 522, 545, 574, 149,
	543, 616, 587, 636, 176, 599, 0, 142, 183, 0,
	0, 0, 0, 635, 580, 0, 643, 179, 596, 0,
	256, 195, 0, 0, 576, 623, 582, 612, 571, 605,
	537, 595, 638, 560, 601, 639, 0, 0, 0, 369,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 0,
	598, 633, 557, 600, 602, 519, 597, 0, 525, 532,
	647, 629, 551, 552, 553, 0, 0, 0, 0, 0,
	0, 0, 575, 583, 609, 568, 0, 0, 0, 0,
	0, 0, 0, 0, 549, 0, 593, 0, 0, 0,
	533, 526, 0, 0, 573, 0, 0, 0, 536, 0,
	550, 610, 0, 517, 157, 0, 0, 613, 628, 570,
	0, 290, 632, 567, 566, 225, 0, 261, 160, 177,
	127, 112, 122, 0, 159, 204, 234, 242, 558, 518,
	617, 546, 556, 143, 554, 236, 212, 281, 0, 590,
	217, 235, 180, 270, 227, 279, 280, 161, 291, 292,
	265, 288, 296, 253, 0, 0, 0, 0, 0, 0,
	173, 569, 604, 547, 140, 607, 594, 622, 252, 128,
	266, 194, 199, 137, 139, 138, 123, 247, 268, 132,
	141, 257, 262, 115, 264, 278, 134, 246, 117, 276,
	260, 192, 170, 171, 116, 0, 232, 148, 156, 145,
	207, 0, 0, 0, 273, 274, 144, 299, 124, 287,
	119, 125, 286, 201, 0, 0, 0, 269, 277, 193,
	186, 0, 118, 275, 191, 185, 175, 152, 163, 222,
	182, 223, 164, 197, 196, 198, 0, 523, 0, 258,
	284, 300, 130, 542, 0, 267, 294, 295, 0, 0,
	131, 155, 151, 221, 200, 126, 166, 255, 174, 181,
	231, 298, 211, 237, 135, 283, 254, 540, 541, 538,
	0, 539, 585, 586, 640, 641, 642, 611, 534, 0,
	624, 625, 0, 615, 630, 631, 606, 649, 563, 564,
	524, 527, 528, 529, 535, 577, 578, 589, 592, 620,
	619, 618, 621, 626, 645, 644, 646, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 588, 111,
	120, 178, 297, 229, 154, 285, 520, 147, 0, 0,
	579, 581, 591, 608, 113, 114, 121, 129, 136, 146,
	150, 153, 158, 162, 165, 167, 168, 169, 172, 184,
	187, 188, 189, 190, 202, 203, 205, 206, 209, 210,
	213, 214, 215, 216, 218, 219, 220, 224, 226, 228,
	230, 233, 238, 239, 240, 241, 243, 244, 245, 248,
	249, 250, 251, 259, 263, 271, 272, 282, 289, 293,
	627, 634, 614, 0, 572, 637, 544, 561, 648, 562,
	565, 603, 530, 584, 208, 559, 531, 0, 548, 521,
	555, 522, 545, 574, 149, 543, 616, 587, 636, 176,
	599, 0, 142, 183, 0, 0, 0, 0, 635, 580,
	0, 643, 179, 596, 0, 256, 195, 0, 0, 576,
	623, 582, 612, 571, 605, 537, 595, 638, 560, 601,
	639, 0, 0, 0, 109, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 0, 598, 633, 557, 600, 602,
	519, 597, 0, 525, 532, 647, 629, 551, 552, 553,
	0, 0, 0, 0, 0, 0, 0, 575, 583, 609,
	568, 0, 0, 0, 0, 0, 0, 0, 0, 549,
	0, 593, 0, 0, 0, 533, 526, 0, 0, 573,
	0, 0, 0, 536, 0, 550, 610, 0, 517, 157,
	0, 0, 613, 628, 570, 0, 290, 632, 567, 566,
	225, 0, 261, 160, 177, 127, 112, 122, 0, 159,
	204, 234, 242, 558, 518, 617, 546, 556, 143, 554,
	236, 212, 281, 0, 590, 217, 235, 180, 270, 227,
	279, 280, 161, 291, 292, 265, 288, 296, 253, 0,
	0, 0, 0, 0, 0, 173, 569, 604, 547, 140,
	607, 594, 622, 252, 128, 266, 194, 199, 137, 139,
	138, 123, 247, 268, 132, 141, 257, 262, 115, 264,
	278, 134, 246, 117, 276, 260, 192, 170, 171, 116,
	0, 232, 148, 156, 145, 207, 0, 0, 0, 273,
	274, 144, 299, 124, 287, 119, 125, 286, 201, 0,
	0, 0, 269, 277, 193, 186, 0, 118, 275, 191,
	185, 175, 152, 163, 222, 182, 223, 164, 197, 196,
	198, 0, 523, 0, 258, 284, 300, 130, 542, 0,
	267, 294, 295, 0, 0, 131, 155, 151, 221, 200,
	126, 166, 255, 174, 181, 231, 298, 211, 237, 135,
	283, 254, 540, 541, 538, 0, 539, 585, 586, 640,
	641, 642, 611, 534, 0, 624, 625, 0, 615, 630,
	631, 606, 649, 563, 564, 524, 527, 528, 529, 535,
	577, 578, 589, 592, 620, 619, 618, 621, 626, 645,
	644, 646, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 588, 111, 120, 178, 297, 229, 154,
	285, 520, 147, 0, 0, 579, 581, 591, 608, 113,
	114, 121, 129, 136, 146, 150, 153, 158, 162, 165,
	167, 168, 169, 172, 184, 187, 188, 189, 190, 202,
	203, 205, 206, 209, 210, 213, 214, 215, 216, 218,
	219, 220, 224, 226, 228, 230, 233, 238, 239, 240,
	241, 243, 244, 245, 248, 249, 250, 251, 259, 263,
	271, 272, 282, 289, 293, 627, 208, 0, 0, 0,
	0, 0, 371, 0, 0, 0, 149, 368, 0, 0,
	0, 176, 0, 0, 142, 183, 0, 0, 0, 0,
	0, 0, 0, 415, 179, 0, 0, 256, 195, 0,
	0, 0, 0, 404, 405, 0, 0, 0, 0, 0,
	0, 1244, 0, 68, 0, 0, 369, 392, 391, 394,
	395, 396, 397, 0, 0, 133, 393, 398, 399, 400,
	1245, 0, 0, 366, 383, 0, 414, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 380, 381, 0,
	0, 0, 0, 429, 0, 382, 0, 0, 377, 378,
	379, 384, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 157, 0, 0, 406, 0, 0, 0, 290, 0,
	0, 427, 225, 0, 261, 160, 177, 127, 112, 122,
	0, 159, 204, 234, 242, 412, 0, 0, 0, 0,
	143, 0, 236, 212, 281, 0, 0, 217, 235, 180,
	270, 227, 279, 280, 161, 291, 292, 265, 288, 296,
	253, 0, 0, 0, 0, 0, 0, 173, 0, 0,
	0, 140, 0, 0, 0, 252, 128, 266, 194, 199,
	137, 139, 138, 123, 247, 268, 132, 141, 257, 262,
	115, 264, 278, 134, 246, 117, 276, 260, 192, 170,
	171, 116, 0, 232, 148, 156, 145, 207, 0, 0,
	0, 273, 274, 144, 299, 124, 287, 119, 125, 286,
	201, 0, 0, 0, 269, 277, 193, 186, 0, 118,
	275, 191, 185, 175, 152, 163, 222, 182, 223, 164,
	197, 196, 198, 0, 0, 0, 258, 284, 300, 130,
	0, 0, 267, 294, 295, 0, 0, 131, 155, 151,
	221, 200, 126, 166, 255, 174, 181, 231, 298, 211,
	237, 135, 283, 254, 416, 428, 422, 424, 423, 420,
	421, 419, 418, 417, 430, 407, 408, 409, 410, 413,
	0, 425, 426, 0, 0, 0, 0, 443, 444, 445,
	446, 447, 448, 449, 442, 450, 451, 452, 453, 454,
	455, 456, 457, 458, 431, 432, 433, 434, 435, 436,
	437, 438, 441, 439, 440, 411, 111, 120, 178, 297,
	229, 154, 285, 0, 147, 0, 0, 0, 0, 0,
	0, 113, 114, 121, 129, 136, 146, 150, 153, 158,
	162, 165, 167, 168, 169, 172, 184, 187, 188, 189,
	190, 202, 203, 205, 206, 209, 210, 213, 214, 215,
	216, 218, 219, 220, 224, 226, 228, 230, 233, 238,
	239, 240, 241, 243, 244, 245, 248, 249, 250, 251,
	259, 263, 271, 272, 282, 289, 293, 208, 0, 0,
	0, 0, 0, 371, 0, 0, 0, 149, 368, 0,
	0, 0, 176, 0, 0, 142, 183, 0, 0, 0,
	0, 0, 0, 0, 415, 179, 0, 0, 256, 195,
	0, 0, 0, 0, 404, 405, 0, 0, 0, 0,
	0, 0, 0, 0, 68, 0, 699, 369, 392, 391,
	394, 395, 396, 397, 0, 0, 133, 393, 398, 399,
	400, 0, 0, 0, 366, 383, 0, 414, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 380, 381,
	0, 0, 0, 0, 429, 0, 382, 0, 0, 377,
	378, 379, 384, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 157, 0, 0, 406, 0, 0, 0, 290,
	0, 0, 427, 225, 0, 261, 160, 177, 127, 112,
	122, 0, 159, 204, 234, 242, 412, 0, 0, 0,
	0, 143, 0, 236, 212, 281, 0, 0, 217, 235,
	180, 270, 227, 279, 280, 161, 291, 292, 265, 288,
	296, 253, 0, 0, 0, 0, 0, 0, 173, 0,
	0, 0, 140, 0, 0, 0, 252, 128, 266, 194,
	199, 137, 139, 138, 123, 247, 268, 132, 141, 257,
	262, 115, 264, 278, 134, 246, 117, 276, 260, 192,
	170, 171, 116, 0, 232, 148, 156, 145, 207, 0,
	0, 0, 273, 274, 144, 299, 124, 287, 119, 125,
	286, 201, 0, 0, 0, 269, 277, 193, 186, 0,
	118, 275, 191, 185, 175, 152, 163, 222, 182, 223,
	164, 197, 196, 198, 0, 0, 0, 258, 284, 300,
	130, 0, 0, 267, 294, 295, 0, 0, 131, 155,
	151, 221, 200, 126, 166, 255, 174, 181, 231, 298,
	211, 237, 135, 283, 254, 416, 428, 422, 424, 423,
	420, 421, 419, 418, 417, 430, 407, 408, 409, 410,
	413, 0, 425, 426, 0, 0, 0, 0, 443, 444,
	445, 446, 447, 448, 449, 442, 450, 451, 452, 453,
	454, 455, 456, 457, 458, 431, 432, 433, 434, 435,
	436, 437, 438, 441, 439, 440, 411, 111, 120, 178,
	297, 229, 154, 285, 0, 147, 0, 0, 0, 0,
	0, 0, 113, 114, 121, 129, 136, 146, 150, 153,
	158, 162, 165, 167, 168, 169, 172, 184, 187, 188,
	189, 190, 202, 203, 205, 206, 209, 210, 213, 214,
	215, 216, 218, 219, 220, 224, 226, 228, 230, 233,
	238, 239, 240, 241, 243, 244, 245, 248, 249, 250,
	251, 259, 263, 271, 272, 282, 289, 293, 208, 0,
	0, 0, 0, 0, 371, 0, 0, 0, 149, 368,
	0, 0, 0, 176, 0, 0, 142, 183, 0, 0,
	0, 0, 0, 0, 0, 415, 179, 0, 0, 256,
	195, 0, 0, 0, 0, 404, 405, 0, 0, 0,
	0, 0, 0, 0, 0, 68, 0, 0, 369, 392,
	391, 394, 395, 396, 397, 0, 0, 133, 393, 398,
	399, 400, 0, 0, 0, 366, 383, 0, 414, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 380,
	381, 362, 0, 0, 0, 429, 0, 382, 0, 0,
	377, 378, 379, 384, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 157, 0, 0, 406, 0, 0, 0,
	290, 0, 0, 427, 225, 0, 261, 160, 177, 127,
	112, 122, 0, 159, 204, 234, 242, 412, 0, 0,
	0, 0, 143, 0, 236, 212, 281, 0, 0, 217,
	235, 180, 270, 227, 279, 280, 161, 291, 292, 265,
	288, 296, 253, 0, 0, 0, 0, 0, 0, 173,
	0, 0, 0, 140, 0, 0, 0, 252, 128, 266,
	194, 199, 137, 139, 138, 123, 247, 268, 132, 141,
	257, 262, 115, 264, 278, 134, 246, 117, 276, 260,
	192, 170, 171, 116, 0, 232, 148, 156, 145, 207,
	0, 0, 0, 273, 274, 144, 299, 124, 287, 119,
	125, 286, 201, 0, 0, 0, 269, 277, 193, 186,
	0, 118, 275, 191, 185, 175, 152, 163, 222, 182,
	223, 164, 197, 196, 198, 0, 0, 0, 258, 284,
	300, 130, 0, 0, 267, 294, 295, 0, 0, 131,
	155, 151, 221, 200, 126, 166, 255, 174, 181, 231,
	298, 211, 237, 135, 283, 254, 416, 428, 422, 424,
	423, 420, 421, 419, 418, 417, 430, 407, 408, 409,
	410, 413, 0, 425, 426, 0, 0, 0, 0, 443,
	444, 445, 446, 447, 448, 449, 442, 450, 451, 452,
	453, 454, 455, 456, 457, 458, 431, 432, 433, 434,
	435, 436, 437, 438, 441, 439, 440, 411, 111, 120,
	178, 297, 229, 154, 285, 0, 147, 0, 0, 0,
	0, 0, 0, 113, 114, 121, 129, 136, 146, 150,
	153, 158, 162, 165, 167, 168, 169, 172, 184, 187,
	188, 189, 190, 202, 203, 205, 206, 209, 210, 213,
	214, 215, 216, 218, 219, 220, 224, 226, 228, 230,
	233, 238, 239, 240, 241, 243, 244, 245, 248, 249,
	250, 251, 259, 263, 271, 272, 282, 289, 293, 208,
	0, 0, 0, 0, 0, 371, 0, 0, 0, 149,
	368, 0, 0, 0, 176, 0, 0, 142, 183, 0,
	0, 0, 0, 0, 0, 0, 415, 179, 0, 0,
	256, 195, 0, 0, 0, 0, 404, 405, 0, 0,
	0, 0, 0, 0, 0, 0, 68, 0, 0, 369,
	392, 1152, 394, 395, 396, 397, 0, 0, 133, 393,
	398, 399, 400, 0, 0, 0, 366, 383, 0, 414,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	380, 381, 362, 0, 0, 0, 429, 0, 382, 0,
	0, 377, 378, 379, 384, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 157, 0, 0, 406, 0, 0,
	0, 290, 0, 0, 427, 225, 0, 261, 160, 177,
	127, 112, 122, 0, 159, 204, 234, 242, 412, 0,
	0, 0, 0, 143, 0, 236, 212, 281, 0, 0,
	217, 235, 180, 270, 227, 279, 280, 161, 291, 292,
	265, 288, 296, 253, 0, 0, 0, 0, 0, 0,
	173, 0, 0, 0, 140, 0, 0, 0, 252, 128,
	266, 194, 199, 137, 139, 138, 123, 247, 268, 132,
	141, 257, 262, 115, 264, 278, 134, 246, 117, 276,
	260, 192, 170, 171, 116, 0, 232, 148, 156, 145,
	207, 0, 0, 0, 273, 274, 144, 299, 124, 287,
	119, 125, 286, 201, 0, 0, 0, 269, 277, 193,
	186, 0, 118, 275, 191, 185, 175, 152, 163, 222,
	182, 223, 164, 197, 196, 198, 0, 0, 0, 258,
	284, 300, 130, 0, 0, 267, 294, 295, 0, 0,
	131, 155, 151, 221, 200, 126, 166, 255, 174, 181,
	231, 298, 211, 237, 135, 283, 254, 416, 428, 422,
	424, 423, 420, 421, 419, 418, 417, 430, 407, 408,
	409, 410, 413, 0, 425, 426, 0, 0, 0, 0,
	443, 444, 445, 446, 447, 448, 449, 442, 450, 451,
	452, 453, 454, 455, 456, 457, 458, 431, 432, 433,
	434, 435, 436, 437, 438, 441, 439, 440, 411, 111,
	120, 178, 297, 229, 154, 285, 0, 147, 0, 0,
	0, 0, 0, 0, 113, 114, 121, 129, 136, 146,
	150, 153, 158, 162, 165, 167, 168, 169, 172, 184,
	187, 188, 189, 190, 202, 203, 205, 206, 209, 210,
	213, 214, 215, 216, 218, 219, 220, 224, 226, 228,
	230, 233, 238, 239, 240, 241, 243, 244, 245, 248,
	249, 250, 251, 259, 263, 271, 272, 282, 289, 293,
	208, 0, 0, 0, 0, 0, 371, 0, 0, 0,
	149, 368, 0, 0, 0, 176, 0, 0, 142, 183,
	0, 0, 0, 0, 0, 0, 0, 415, 179, 0,
	0, 256, 195, 0, 0, 0, 0, 404, 405, 0,
	0, 0, 0, 0, 0, 0, 0, 68, 0, 0,
	369, 392, 1149, 394, 395, 396, 397, 0, 0, 133,
	393, 398, 399, 400, 0, 0, 0, 366, 383, 0,
	414, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 380, 381, 362, 0, 0, 0, 429, 0, 382,
	0, 0, 377, 378, 379, 384, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 157, 0, 0, 406, 0,
	0, 0, 290, 0, 0, 427, 225, 0, 261, 160,
	177, 127, 112, 122, 0, 159, 204, 234, 242, 412,
	0, 0, 0, 0, 143, 0, 236, 212, 281, 0,
	0, 217, 235, 180, 270, 227, 279, 280, 161, 291,
	292, 265, 288, 296, 253, 0, 0, 0, 0, 0,
	0, 173, 0, 0, 0, 140, 0, 0, 0, 252,
	128, 266, 194, 199, 137, 139, 138, 123, 247, 268,
	132, 141, 257, 262, 115, 264, 278, 134, 246, 117,
	276, 260, 192, 170, 171, 116, 0, 232, 148, 156,
	145, 207, 0, 0, 0, 273, 274, 144, 299, 124,
	287, 119, 125, 286, 201, 0, 0, 0, 269, 277,
	193, 186, 0, 118, 275, 191, 185, 175, 152, 163,
	222, 182, 223, 164, 197, 196, 198, 0, 0, 0,
	258, 284, 300, 130, 0, 0, 267, 294, 295, 0,
	0, 131, 155, 151, 221, 200, 126, 166, 255, 174,
	181, 231, 298, 211, 237, 135, 283, 254, 416, 428,
	422, 424, 423, 420, 421, 419, 418, 417, 430, 407,
	408, 409, 410, 413, 0, 425, 426, 0, 0, 0,
	0, 443, 444, 445, 446, 447, 448, 449, 442, 450,
	451, 452, 453, 454, 455, 456, 457, 458, 431, 432,
	433, 434, 435, 436, 437, 438, 441, 439, 440, 411,
	111, 120, 178, 297, 229, 154, 285, 0, 147, 0,
	0, 0, 0, 0, 0, 113, 114, 121, 129, 136,
	146, 150, 153, 158, 162, 165, 167, 168, 169, 172,
	184, 187, 188, 189, 190, 202, 203, 205, 206, 209,
	210, 213, 214, 215, 216, 218, 219, 220, 224, 226,
	228, 230, 233, 238, 239, 240, 241, 243, 244, 245,
	248, 249, 250, 251, 259, 263, 271, 272, 282, 289,
	293, 29, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 0, 0, 0, 0, 0, 371,
	0, 0, 0, 149, 368, 0, 0, 0, 176, 0,
	0, 142, 183, 0, 0, 0, 0, 0, 0, 0,
	415, 179, 0, 0, 256, 195, 0, 0, 0, 0,
	404, 405, 0, 0, 0, 0, 0, 0, 0, 0,
	68, 0, 0, 369, 392, 391, 394, 395, 396, 397,
	0, 0, 133, 393, 398, 399, 400, 0, 0, 0,
	366, 383, 0, 414, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 380, 381, 0, 0, 0, 0,
	429, 0, 382, 0, 0, 377, 378, 379, 384, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 157, 0,
	0, 406, 0, 0, 0, 290, 0, 0, 427, 225,
	0, 261, 160, 177, 127, 112, 122, 0, 159, 204,
	234, 242, 412, 0, 0, 0, 0, 143, 0, 236,
	212, 281, 0, 0, 217, 235, 180, 270, 227, 279,
	280, 161, 291, 292, 265, 288, 296, 253, 0, 0,
	0, 0, 0, 0, 173, 0, 0, 0, 140, 0,
	0, 0, 252, 128, 266, 194, 199, 137, 139, 138,
	123, 247, 268, 132, 141, 257, 262, 115, 264, 278,
	134, 246, 117, 276, 260, 192, 170, 171, 116, 0,
	232, 148, 156, 145, 207, 0, 0, 0, 273, 274,
	144, 299, 124, 287, 119, 125, 286, 201, 0, 0,
	0, 269, 277, 193, 186, 0, 118, 275, 191, 185,
	175, 152, 163, 222, 182, 223, 164, 197, 196, 198,
	0, 0, 0, 258, 284, 300, 130, 0, 0, 267,
	294, 295, 0, 0, 131, 155, 151, 221, 200, 126,
	166, 255, 174, 181, 231, 298, 211, 237, 135, 283,
	254, 416, 428, 422, 424, 423, 420, 421, 419, 418,
	417, 430, 407, 408, 409, 410, 413, 0, 425, 426,
	0, 0, 0, 0, 443, 444, 445, 446, 447, 448,
	449, 442, 450, 451, 452, 453, 454, 455, 456, 457,
	458, 431, 432, 433, 434, 435, 436, 437, 438, 441,
	439, 440, 411, 111, 120, 178, 297, 229, 154, 285,
	0, 147, 0, 0, 0, 0, 0, 0, 113, 114,
	121, 129, 136, 146, 150, 153, 158, 162, 165, 167,
	168, 169, 172, 184, 187, 188, 189, 190, 202, 203,
	205, 206, 209, 210, 213, 214, 215, 216, 218, 219,
	220, 224, 226, 228, 230, 233, 238, 239, 240, 241,
	243, 244, 245, 248, 249, 250, 251, 259, 263, 271,
	272, 282, 289, 293, 208, 0, 0, 0, 0, 0,
	371, 0, 0, 0, 149, 368, 0, 0, 0, 176,
	0, 0, 142, 183, 0, 0, 0, 0, 0, 0,
	0, 415, 179, 0, 0, 256, 195, 0, 0, 0,
	0, 404, 405, 0, 0, 0, 0, 0, 0, 0,
	0, 68, 0, 1062, 369, 392, 391, 394, 395, 396,
	397, 0, 0, 133, 393, 398, 399, 400, 0, 0,
	0, 366, 383, 0, 414, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 380, 381, 0, 0, 0,
	0, 429, 0, 382, 0, 0, 377, 378, 379, 384,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 157,
	0, 0, 406, 0, 0, 0, 290, 0, 0, 427,
	225, 0, 261, 160, 177, 127, 112, 122, 0, 159,
	204, 234, 242, 412, 0, 0, 0, 0, 143, 0,
	236, 212, 281, 0, 0, 217, 235, 180, 270, 227,
	279, 280, 161, 291, 292, 265, 288, 296, 253, 0,
	0, 0, 0, 0, 0, 173, 0, 0, 0, 140,
	0, 0, 0, 252, 128, 266, 194, 199, 137, 139,
	138, 123, 247, 268, 132, 141, 257, 262, 115, 264,
	278, 134, 246, 117, 276, 260, 192, 170, 171, 116,
	0, 232, 148, 156, 145, 207, 0, 0, 0, 273,
	274, 144, 299, 124, 287, 119, 125, 286, 201, 0,
	0, 0, 269, 277, 193, 186, 0, 118, 275, 191,
	185, 175, 152, 163, 222, 182, 223, 164, 197, 196,
	198, 0, 0, 0, 258, 284, 300, 130, 0, 0,
	267, 294, 295, 0, 0, 131, 155, 151, 221, 200,
	126, 166, 255, 174, 181, 231, 298, 211, 237, 135,
	283, 254, 416, 428, 422, 424, 423, 420, 421, 419,
	418, 417, 430, 407, 408, 409, 410, 413, 0, 425,
	426, 0, 0, 0, 0, 443, 444, 445, 446, 447,
	448, 449, 442, 450, 451, 452, 453, 454, 455, 456,
	457, 458, 431, 432, 433, 434, 435, 436, 437, 438,
	441, 439, 440, 411, 111, 120, 178, 297, 229, 154,
	285, 0, 147, 0, 0, 0, 0, 0, 0, 113,
	114, 121, 129, 136, 146, 150, 153, 158, 162, 165,
	167, 168, 169, 172, 184, 187, 188, 189, 190, 202,
	203, 205, 206, 209, 210, 213, 214, 215, 216, 218,
	219, 220, 224, 226, 228, 230, 233, 238, 239, 240,
	241, 243, 244, 245, 248, 249, 250, 251, 259, 263,
	271, 272, 282, 289, 293, 208, 0, 0, 0, 0,
	0, 371, 0, 0, 0, 149, 368, 0, 0, 0,
	176, 0, 0, 142, 183, 0, 0, 0, 0, 0,
	0, 0, 415, 179, 0, 0, 256, 195, 0, 0,
	0, 0, 404, 405, 0, 0, 0, 0, 0, 0,
	0, 0, 68, 0, 0, 369, 392, 391, 394, 395,
	396, 397, 0, 0, 133, 393, 398, 399, 400, 0,
	0, 0, 366, 383, 0, 414, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 380, 381, 0, 0,
	0, 0, 429, 0, 382, 0, 0, 377, 378, 379,
	384, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	157, 0, 0, 406, 0, 0, 0, 290, 0, 0,
	427, 225, 0, 261, 160, 177, 127, 112, 122, 0,
	159, 204, 234, 242, 412, 0, 0, 0, 0, 143,
	0, 236, 212, 281, 0, 0, 217, 235, 180, 270,
	227, 279, 280, 161, 291, 292, 265, 288, 296, 253,
	0, 0, 0, 0, 0, 0, 173, 0, 0, 0,
	140, 0, 0, 0, 252, 128, 266, 194, 199, 137,
	139, 138, 123, 247, 268, 132, 141, 257, 262, 115,
	264, 278, 134, 246, 117, 276, 260, 192, 170, 171,
	116, 0, 232, 148, 156, 145, 207, 0, 0, 0,
	273, 274, 144, 299, 124, 287, 119, 125, 286, 201,
	0, 0, 0, 269, 277, 193, 186, 0, 118, 275,
	191, 185, 175, 152, 163, 222, 182, 223, 164, 197,
	196, 198, 0, 0, 0, 258, 284, 300, 130, 0,
	0, 267, 294, 295, 0, 0, 131, 155, 151, 221,
	200, 126, 166, 255, 174, 181, 231, 298, 211, 237,
	135, 283, 254, 416, 428, 422, 424, 423, 420, 421,
	419, 418, 417, 430, 407, 408, 409, 410, 413, 0,
	425, 426, 0, 0, 0, 0, 443, 444, 445, 446,
	447, 448, 449, 442, 450, 451, 452, 453, 454, 455,
	456, 457, 458, 431, 432, 433, 434, 435, 436, 437,
	438, 441, 439, 440, 411, 111, 120, 178, 297, 229,
	154, 285, 0, 147, 0, 0, 0, 0, 0, 0,
	113, 114, 121, 129, 136, 146, 150, 153, 158, 162,
	165, 167, 168, 169, 172, 184, 187, 188, 189, 190,
	202, 203, 205, 206, 209, 210, 213, 214, 215, 216,
	218, 219, 220, 224, 226, 228, 230, 233, 238, 239,
	240, 241, 243, 244, 245, 248, 249, 250, 251, 259,
	263, 271, 272, 282, 289, 293, 208, 0, 0, 0,
	0, 0, 371, 0, 0, 0, 149, 368, 0, 0,
	0, 176, 0, 0, 142, 183, 0, 0, 0, 0,
	0, 0, 0, 415, 179, 0, 0, 256, 195, 0,
	0, 0, 0, 404, 405, 0, 0, 0, 0, 0,
	0, 0, 0, 68, 0, 0, 369, 392, 391, 394,
	395, 396, 397, 0, 0, 133, 393, 398, 399, 400,
	0, 0, 0, 366, 383, 0, 414, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 380, 381, 0,
	0, 0, 0, 429, 0, 382, 0, 0, 377, 378,
	379, 384, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 157, 0, 0, 406, 0, 0, 0, 290, 0,
	0, 427, 225, 0, 261, 160, 177, 127, 112, 122,
	0, 159, 204, 234, 242, 412, 0, 0, 0, 0,
	143, 0, 236, 212, 281, 0, 0, 217, 235, 180,
	270, 227, 279, 280, 161, 291, 292, 265, 288, 296,
	253, 0, 0, 0, 0, 0, 0, 173, 0, 0,
	0, 140, 0, 0, 0, 252, 128, 266, 194, 199,
	137, 139, 138, 123, 247, 268, 132, 141, 257, 262,
	115, 264, 278, 134, 246, 117, 276, 260, 192, 170,
	171, 116, 0, 232, 148, 156, 145, 207, 0, 0,
	0, 273, 274, 144, 299, 124, 287, 119, 125, 286,
	201, 0, 0, 0, 269, 277, 193, 186, 0, 118,
	275, 191, 185, 175, 152, 163, 222, 182, 223, 164,
	197, 196, 198, 0, 0, 0, 258, 284, 300, 130,
	0, 0, 267, 294, 295, 0, 0, 131, 155, 151,
	221, 200, 126, 166, 255, 174, 181, 231, 298, 211,
	237, 135, 283, 254, 416, 428, 422, 424, 423, 420,
	421, 419, 418, 417, 430, 407, 408, 409, 410, 413,
	0, 425, 426, 0, 0, 0, 0, 715, 716, 717,
	718, 719, 723, 724, 728, 729, 737, 736, 735, 738,
	739, 741, 740, 742, 720, 721, 722, 725, 726, 727,
	730, 731, 734, 732, 733, 411, 111, 120, 178, 297,
	229, 154, 285, 0, 147, 0, 0, 0, 0, 0,
	0, 113, 114, 121, 129, 136, 146, 150, 153, 158,
	162, 165, 167, 168, 169, 172, 184, 187, 188, 189,
	190, 202, 203, 205, 206, 209, 210, 213, 214, 215,
	216, 218, 219, 220, 224, 226, 228, 230, 233, 238,
	239, 240, 241, 243, 244, 245, 248, 249, 250, 251,
	259, 263, 271, 272, 282, 289, 293, 208, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 149, 0, 0,
	0, 0, 176, 0, 0, 142, 183, 0, 0, 0,
	0, 0, 0, 0, 415, 179, 0, 0, 256, 195,
	0, 0, 0, 0, 404, 405, 0, 0, 0, 0,
	0, 0, 0, 0, 68, 0, 0, 369, 392, 391,
	394, 395, 396, 397, 0, 0, 133, 393, 398, 399,
	400, 0, 0, 0, 0, 383, 0, 414, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 380, 381,
	0, 0, 0, 0, 429, 0, 382, 0, 0, 377,
	378, 379, 384, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 157, 0, 0, 406, 0, 0, 0, 290,
	0, 0, 427, 225, 0, 261, 160, 177, 127, 112,
	122, 0, 159, 204, 234, 242, 412, 0, 0, 0,
	0, 143, 0, 236, 212, 281, 0, 2134, 217, 235,
	180, 270, 227, 279, 280, 161, 291, 292, 265, 288,
	296, 253, 0, 0, 0, 0, 0, 0, 173, 0,
	0, 0, 140, 0, 0, 0, 252, 128, 266, 194,
	199, 137, 139, 138, 123, 247, 268, 132, 141, 257,
	262, 115, 264, 278, 134, 246, 117, 276, 260, 192,
	170, 171, 116, 0, 232, 148, 156, 145, 207, 0,
	0, 0, 273, 274, 144, 299, 124, 287, 119, 125,
	286, 201, 0, 0, 0, 269, 277, 193, 186, 0,
	118, 275, 191, 185, 175, 152, 163, 222, 182, 223,
	164, 197, 196, 198, 0, 0, 0, 258, 284, 300,
	130, 0, 0, 267, 294, 295, 0, 0, 131, 155,
	151, 221, 200, 126, 166, 255, 174, 181, 231, 298,
	211, 237, 135, 283, 254, 416, 428, 422, 424, 423,
	420, 421, 419, 418, 417, 430, 407, 408, 409, 410,
	413, 0, 425, 426, 0, 0, 0, 0, 443, 444,
	445, 446, 447, 448, 449, 442, 450, 451, 452, 453,
	454, 455, 456, 457, 458, 431, 432, 433, 434, 435,
	436, 437, 438, 441, 439, 440, 411, 111, 120, 178,
	297, 229, 154, 285, 0, 147, 0, 0, 0, 0,
	0, 0, 113, 114, 121, 129, 136, 146, 150, 153,
	158, 162, 165, 167, 168, 169, 172, 184, 187, 188,
	189, 190, 202, 203, 205, 206, 209, 210, 213, 214,
	215, 216, 218, 219, 220, 224, 226, 228, 230, 233,
	238, 239, 240, 241, 243, 244, 245, 248, 249, 250,
	251, 259, 263, 271, 272, 282, 289, 293, 208, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 149, 0,
	0, 0, 0, 176, 0, 0, 142, 183, 0, 0,
	0, 0, 0, 0, 0, 415, 179, 0, 0, 256,
	195, 0, 0, 0, 0, 404, 405, 0, 0, 0,
	0, 0, 0, 0, 0, 68, 0, 699, 369, 392,
	391, 394, 395, 396, 397, 0, 0, 133, 393, 398,
	399, 400, 0, 0, 0, 0, 383, 0, 414, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 380,
	381, 0, 0, 0, 0, 429, 0, 382, 0, 0,
	377, 378, 379, 384, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 157, 0, 0, 406, 0, 0, 0,
	290, 0, 0, 427, 225, 0, 261, 160, 177, 127,
	112, 122, 0, 159, 204, 234, 242, 412, 0, 0,
	0, 0, 143, 0, 236, 212, 281, 0, 0, 217,
	235, 180, 270, 227, 279, 280, 161, 291, 292, 265,
	288, 296, 253, 0, 0, 0, 0, 0, 0, 173,
	0, 0, 0, 140, 0, 0, 0, 252, 128, 266,
	194, 199, 137, 139, 138, 123, 247, 268, 132, 141,
	257, 262, 115, 264, 278, 134, 246, 117, 276, 260,
	192, 170, 171, 116, 0, 232, 148, 156, 145, 207,
	0, 0, 0, 273, 274, 144, 299, 124, 287, 119,
	125, 286, 201, 0, 0, 0, 269, 277, 193, 186,
	0, 118, 275, 191, 185, 175, 152, 163, 222, 182,
	223, 164, 197, 196, 198, 0, 0, 0, 258, 284,
	300, 130, 0, 0, 267, 294, 295, 0, 0, 131,
	155, 151, 221, 200, 126, 166, 255, 174, 181, 231,
	298, 211, 237, 135, 283, 254, 416, 428, 422, 424,
	423, 420, 421, 419, 418, 417, 430, 407, 408, 409,
	410, 413, 0, 425, 426, 0, 0, 0, 0, 443,
	444, 445, 446, 447, 448, 449, 442, 450, 451, 452,
	453, 454, 455, 456, 457, 458, 431, 432, 433, 434,
	435, 436, 437, 438, 441, 439, 440, 411, 111, 120,
	178, 297, 229, 154, 285, 0, 147, 0, 0, 0,
	0, 0, 0, 113, 114, 121, 129, 136, 146, 150,
	153, 158, 162, 165, 167, 168, 169, 172, 184, 187,
	188, 189, 190, 202, 203, 205, 206, 209, 210, 213,
	214, 215, 216, 218, 219, 220, 224, 226, 228, 230,
	233, 238, 239, 240, 241, 243, 244, 245, 248, 249,
	250, 251, 259, 263, 271, 272, 282, 289, 293, 208,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 149,
	0, 0, 0, 0, 176, 0, 0, 142, 183, 0,
	0, 0, 0, 0, 0, 0, 415, 179, 0, 0,
	256, 195, 0, 0, 0, 0, 404, 405, 0, 0,
	0, 0, 0, 0, 0, 0, 68, 0, 0, 369,
	392, 391, 394, 395, 396, 397, 0, 0, 133, 393,
	398, 399, 400, 0, 0, 0, 0, 383, 0, 414,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	380, 381, 0, 0, 0, 0, 429, 0, 382, 0,
	0, 377, 378, 379, 384, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 157, 0, 0, 406, 0, 0,
	0, 290, 0, 0, 427, 225, 0, 261, 160, 177,
	127, 112, 122, 0, 159, 204, 234, 242, 412, 0,
	0, 0, 0, 143, 0, 236, 212, 281, 0, 0,
	217, 235, 180, 270, 227, 279, 280, 161, 291, 292,
	265, 288, 296, 253, 0, 0, 0, 0, 0, 0,
	173, 0, 0, 0, 140, 0, 0, 0, 252, 128,
	266, 194, 199, 137, 139, 138, 123, 247, 268, 132,
	141, 257, 262, 115, 264, 278, 134, 246, 117, 276,
	260, 192, 170, 171, 116, 0, 232, 148, 156, 145,
	207, 0, 0, 0, 273, 274, 144, 299, 124, 287,
	119, 125, 286, 201, 0, 0, 0, 269, 277, 193,
	186, 0, 118, 275, 191, 185, 175, 152, 163, 222,
	182, 223, 164, 197, 196, 198, 0, 0, 0, 258,
	284, 300, 130, 0, 0, 267, 294, 295, 0, 0,
	131, 155, 151, 221, 200, 126, 166, 255, 174, 181,
	231, 298, 211, 237, 135, 283, 254, 416, 428, 422,
	424, 423, 420, 421, 419, 418, 417, 430, 407, 408,
	409, 410, 413, 0, 425, 426, 0, 0, 0, 0,
	443, 444, 445, 446, 447, 448, 449, 442, 450, 451,
	452, 453, 454, 455, 456, 457, 458, 431, 432, 433,
	434, 435, 436, 437, 438, 441, 439, 440, 411, 111,
	120, 178, 297, 229, 154, 285, 0, 147, 0, 0,
	0, 0, 0, 0, 113, 114, 121, 129, 136, 146,
	150, 153, 158, 162, 165, 167, 168, 169, 172, 184,
	187, 188, 189, 190, 202, 203, 205, 206, 209, 210,
	213, 214, 215, 216, 218, 219, 220, 224, 226, 228,
	230, 233, 238, 239, 240, 241, 243, 244, 245, 248,
	249, 250, 251, 259, 263, 271, 272, 282, 289, 293,
	208, 0, 0, 0, 0, 1222, 0, 0, 0, 0,
	149, 0, 0, 0, 0, 176, 0, 0, 142, 183,
	0, 0, 0, 0, 0, 0, 0, 0, 179, 0,
	0, 256, 195, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1224, 1226, 0, 0, 0, 0, 0,
	109, 0, 1229, 0, 0, 0, 0, 0, 0, 133,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 157, 0, 0, 0, 0,
	0, 0, 290, 0, 1225, 0, 225, 0, 261, 160,
	177, 127, 112, 122, 0, 159, 204, 234, 242, 0,
	0, 0, 0, 0, 143, 0, 236, 212, 281, 0,
	0, 217, 235, 180, 270, 227, 279, 280, 161, 291,
	292, 265, 288, 296, 253, 0, 0, 0, 0, 0,
	0, 173, 0, 0, 0, 140, 0, 0, 0, 252,
	128, 266, 194, 199, 137, 139, 138, 123, 247, 268,
	132, 141, 257, 262, 115, 264, 278, 134, 246, 117,
	276, 260, 192, 170, 171, 116, 0, 232, 148, 156,
	145, 207, 0, 0, 0, 273, 274, 144, 299, 124,
	287, 119, 125, 286, 201, 0, 0, 0, 269, 277,
	193, 186, 0, 118, 275, 191, 185, 175, 152, 163,
	222, 182, 223, 164, 197, 196, 198, 0, 0, 0,
	258, 284, 300, 130, 0, 0, 267, 294, 295, 0,
	0, 131, 155, 151, 221, 200, 126, 166, 255, 174,
	181, 231, 298, 211, 237, 135, 283, 254, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 762, 763, 764, 765, 766, 770, 771, 775, 776,
	784, 783, 782, 785, 786, 788, 787, 789, 767, 768,
	769, 772, 773, 774, 777, 778, 781, 779, 780, 0,
	111, 120, 178, 297, 229, 154, 285, 0, 147, 0,
	0, 0, 0, 0, 0, 113, 114, 121, 129, 136,
	146, 150, 153, 158, 162, 165, 167, 168, 169, 172,
	184, 187, 188, 189, 190, 202, 203, 205, 206, 209,
	210, 213, 214, 215, 216, 218, 219, 220, 224, 226,
	228, 230, 233, 238, 239, 240, 241, 243, 244, 245,
	248, 249, 250, 251, 259, 263, 271, 272, 282, 289,
	293, 208, 0, 0, 0, 0, 1222, 0, 0, 0,
	0, 149, 0, 0, 0, 0, 176, 0, 0, 142,
	183, 0, 0, 0, 0, 0, 0, 0, 0, 179,
	0, 0, 256, 195, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1224, 1226, 0, 0, 0, 0,
	0, 109, 0, 1229, 0, 0, 0, 0, 0, 0,
	133, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 157, 0, 0, 0,
	0, 0, 0, 290, 0, 1225, 0, 225, 0, 261,
	160, 177, 127, 112, 122, 0, 159, 204, 234, 242,
	0, 0, 0, 0, 0, 143, 0, 236, 212, 281,
	0, 0, 1220, 235, 180, 270, 227, 279, 280, 161,
	291, 292, 265, 288, 296, 253, 0, 0, 0, 0,
	0, 0, 173, 0, 0, 0, 140, 0, 0, 0,
	252, 128, 266, 194, 199, 137, 139, 138, 123, 247,
	268, 132, 141, 257, 262, 115, 264, 278, 134, 246,
	117, 276, 260, 192, 170, 171, 116, 0, 232, 148,
	156, 145, 207, 0, 0, 0, 273, 274, 144, 299,
	124, 287, 119, 125, 286, 201, 0, 0, 0, 269,
	277, 193, 186, 0, 118, 275, 191, 185, 175, 152,
	163, 222, 182, 223, 164, 197, 196, 198, 0, 0,
	0, 258, 284, 300, 130, 0, 0, 267, 294, 295,
	0, 0, 131, 155, 151, 221, 200, 126, 166, 255,
	174, 181, 231, 298, 211, 237, 135, 283, 254, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 762, 763, 764, 765, 766, 770, 771, 775,
	776, 784, 783, 782, 785, 786, 788, 787, 789, 767,
	768, 769, 772, 773, 774, 777, 778, 781, 779, 780,
	0, 111, 120, 178, 297, 229, 154, 285, 0, 147,
	0, 0, 0, 0, 0, 0, 113, 114, 121, 129,
	136, 146, 150, 153, 158, 162, 165, 167, 168, 169,
	172, 184, 187, 188, 189, 190, 202, 203, 205, 206,
	209, 210, 213, 214, 215, 216, 218, 219, 220, 224,
	226, 228, 230, 233, 238, 239, 240, 241, 243, 244,
	245, 248, 249, 250, 251, 259, 263, 271, 272, 282,
	289, 293, 208, 0, 0, 0, 0, 757, 0, 0,
	0, 0, 149, 0, 0, 0, 0, 176, 0, 0,
	142, 183, 0, 0, 0, 0, 0, 0, 0, 0,
	179, 0, 0, 256, 195, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 758, 0, 761, 0, 0, 0, 0, 0,
	0, 133, 0, 0, 0, 0, 0, 754, 753, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 755, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 157, 0, 0,
	0, 0, 0, 0, 290, 0, 0, 0, 225, 0,
	261, 160, 177, 127, 112, 122, 0, 159, 204, 234,
	242, 0, 0, 0, 0, 0, 143, 0, 236, 212,
	281, 0, 0, 217, 235, 180, 270, 227, 279, 280,
	161, 291, 292, 265, 288, 296, 253, 0, 0, 0,
	0, 0, 0, 173, 0, 0, 0, 140, 0, 0,
	0, 252, 128, 266, 194, 199, 137, 139, 138, 123,
	247, 268, 132, 141, 257, 262, 115, 264, 278, 134,
	246, 117, 276, 260, 192, 170, 171, 116, 0, 232,
	148, 156, 145, 207, 0, 0, 0, 273, 274, 144,
	299, 124, 287, 119, 125, 286, 201, 0, 0, 0,
	269, 277, 193, 186, 0, 118, 275, 191, 185, 175,
	152, 163, 222, 182, 223, 164, 197, 196, 198, 0,
	0, 0, 258, 284, 300, 130, 0, 0, 267, 294,
	295, 0, 0, 131, 155, 151, 221, 200, 126, 166,
	255, 174, 181, 231, 298, 211, 237, 135, 283, 254,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 762, 763, 764, 765, 766, 770, 771,
	775, 776, 784, 783, 782, 785, 786, 788, 787, 789,
	767, 768, 769, 772, 773, 774, 777, 778, 781, 779,
	780, 0, 111, 120, 178, 297, 229, 154, 285, 0,
	147, 0, 0, 0, 0, 0, 0, 113, 114, 121,
	129, 136, 146, 150, 153, 158, 162, 165, 167, 168,
	169, 172, 184, 187, 188, 189, 190, 202, 203, 205,
	206, 209, 210, 213, 214, 215, 216, 218, 219, 220,
	224, 226, 228, 230, 233, 238, 239, 240, 241, 243,
	244, 245, 248, 249, 250, 251, 259, 263, 271, 272,
	282, 289, 293, 208, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 149, 0, 0, 0, 0, 176, 1475,
	0, 142, 183, 0, 0, 0, 0, 0, 0, 0,
	0, 179, 0, 0, 256, 195, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 1229, 0, 0, 0, 0,
	0, 0, 133, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 157, 0,
	0, 0, 0, 0, 0, 290, 0, 0, 0, 225,
	0, 261, 160, 177, 127, 112, 122, 0, 159, 204,
	234, 242, 0, 0, 0, 0, 0, 143, 0, 236,
	212, 281, 0, 0, 217, 235, 180, 270, 227, 279,
	280, 161, 291, 292, 265, 288, 296, 253, 0, 0,
	0, 0, 0, 0, 173, 0, 0, 0, 140, 0,
	0, 0, 252, 128, 266, 194, 199, 137, 139, 138,
	123, 247, 268, 132, 141, 257, 262, 115, 264, 278,
	134, 246, 117, 276, 260, 192, 170, 171, 116, 0,
	232, 148, 156, 145, 207, 0, 0, 0, 273, 274,
	144, 299, 124, 287, 119, 125, 286, 201, 0, 0,
	0, 269, 277, 193, 186, 0, 118, 275, 191, 185,
	175, 152, 163, 222, 182, 223, 164, 197, 196, 198,
	0, 0, 0, 258, 284, 300, 130, 0, 0, 267,
	294, 295, 0, 0, 131, 155, 151, 221, 200, 126,
	166, 255, 174, 181, 231, 298, 211, 237, 135, 283,
	254, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 762, 763, 764, 765, 766, 770,
	771, 775, 776, 784, 783, 782, 785, 786, 788, 787,
	789, 767, 768, 769, 772, 773, 774, 777, 778, 781,
	779, 780, 0, 111, 120, 178, 297, 229, 154, 285,
	0, 147, 0, 0, 0, 0, 0, 0, 113, 114,
	121, 129, 136, 146, 150, 153, 158, 162, 165, 167,
	168, 169, 172, 184, 187, 188, 189, 190, 202, 203,
	205, 206, 209, 210, 213, 214, 215, 216, 218, 219,
	220, 224, 226, 228, 230, 233, 238, 239, 240, 241,
	243, 244, 245, 248, 249, 250, 251, 259, 263, 271,
	272, 282, 289, 293, 208, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 149, 0, 0, 0, 0, 176,
	0, 0, 142, 183, 0, 0, 0, 0, 0, 0,
	0, 0, 179, 0, 0, 256, 195, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 1229, 0, 0, 0,
	0, 0, 0, 133, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 157,
	0, 0, 0, 0, 0, 0, 290, 0, 0, 0,
	225, 0, 261, 160, 177, 127, 112, 122, 0, 159,
	204, 234, 242, 0, 0, 0, 0, 0, 143, 0,
	236, 212, 281, 0, 0, 217, 235, 180, 270, 227,
	279, 280, 161, 291, 292, 265, 288, 296, 253, 0,
	0, 0, 0, 0, 0, 173, 0, 0, 0, 140,
	0, 0, 0, 252, 128, 266, 194, 199, 137, 139,
	138, 123, 247, 268, 132, 141, 257, 262, 115, 264,
	278, 134, 246, 117, 276, 260, 192, 170, 171, 116,
	0, 232, 148, 156, 145, 207, 0, 0, 0, 273,
	274, 144, 299, 124, 287, 119, 125, 286, 201, 0,
	0, 0, 269, 277, 193, 186, 0, 118, 275, 191,
	185, 175, 152, 163, 222, 182, 223, 164, 197, 196,
	198, 0, 0, 0, 258, 284, 300, 130, 0, 0,
	267, 294, 295, 0, 0, 131, 155, 151, 221, 200,
	126, 166, 255, 174, 181, 231, 298, 211, 237, 135,
	283, 254, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 762, 763, 764, 765, 766,
	770, 771, 775, 776, 784, 783, 782, 785, 786, 788,
	787, 789, 767, 768, 769, 772, 773, 774, 777, 778,
	781, 779, 780, 0, 111, 120, 178, 297, 229, 154,
	285, 0, 147, 0, 0, 0, 0, 0, 0, 113,
	114, 121, 129, 136, 146, 150, 153, 158, 162, 165,
	167, 168, 169, 172, 184, 187, 188, 189, 190, 202,
	203, 205, 206, 209, 210, 213, 214, 215, 216, 218,
	219, 220, 224, 226, 228, 230, 233, 238, 239, 240,
	241, 243, 244, 245, 248, 249, 250, 251, 259, 263,
	271, 272, 282, 289, 293, 208, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 149, 0, 0, 0, 0,
	176, 0, 0, 142, 183, 0, 0, 0, 0, 0,
	0, 0, 0, 179, 0, 0, 256, 195, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 758, 0, 761, 0, 0,
	0, 0, 0, 0, 133, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	157, 0, 0, 0, 0, 0, 0, 290, 0, 0,
	0, 225, 0, 261, 160, 177, 127, 112, 122, 0,
	159, 204, 234, 242, 0, 0, 0, 0, 0, 143,
	0, 236, 212, 281, 0, 0, 217, 235, 180, 270,
	227, 279, 280, 161, 291, 292, 265, 288, 296, 253,
	0, 0, 0, 0, 0, 0, 173, 0, 0, 0,
	140, 0, 0, 0, 252, 128, 266, 194, 199, 137,
	139, 138, 123, 247, 268, 132, 141, 257, 262, 115,
	264, 278, 134, 246, 117, 276, 260, 192, 170, 171,
	116, 0, 232, 148, 156, 145, 207, 0, 0, 0,
	273, 274, 144, 299, 124, 287, 119, 125, 286, 201,
	0, 0, 0, 269, 277, 193, 186, 0, 118, 275,
	191, 185, 175, 152, 163, 222, 182, 223, 164, 197,
	196, 198, 0, 0, 0, 258, 284, 300, 130, 0,
	0, 267, 294, 295, 0, 0, 131, 155, 151, 221,
	200, 126, 166, 255, 174, 181, 231, 298, 211, 237,
	135, 283, 254, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 762, 763, 764, 765,
	766, 770, 771, 775, 776, 784, 783, 782, 785, 786,
	788, 787, 789, 767, 768, 769, 772, 773, 774, 777,
	778, 781, 779, 780, 0, 111, 120, 178, 297, 229,
	154, 285, 0, 147, 0, 0, 0, 0, 0, 0,
	113, 114, 121, 129, 136, 146, 150, 153, 158, 162,
	165, 167, 168, 169, 172, 184, 187, 188, 189, 190,
	202, 203, 205, 206, 209, 210, 213, 214, 215, 216,
	218, 219, 220, 224, 226, 228, 230, 233, 238, 239,
	240, 241, 243, 244, 245, 248, 249, 250, 251, 259,
	263, 271, 272, 282, 289, 293, 208, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 149, 0, 0, 0,
	0, 176, 0, 0, 142, 183, 0, 0, 0, 0,
	0, 0, 0, 0, 179, 0, 0, 256, 195, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 500, 0, 0, 0,
	0, 0, 0, 0, 0, 133, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 799, 798, 808, 809, 801, 802, 803,
	804, 805, 806, 807, 800, 0, 0, 810, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 157, 0, 0, 0, 0, 0, 0, 290, 0,
	0, 0, 225, 0, 261, 160, 177, 127, 112, 122,
	0, 159, 204, 234, 242, 0, 0, 0, 0, 0,
	143, 0, 236, 212, 281, 0, 0, 217, 235, 180,
	270, 227, 279, 280, 161, 291, 292, 265, 288, 296,
	253, 0, 0, 0, 0, 0, 0, 173, 0, 0,
	0, 140, 0, 0, 0, 252, 128, 266, 194, 199,
	137, 139, 138, 123, 247, 268, 132, 141, 257, 262,
	115, 264, 278, 134, 246, 117, 276, 260, 192, 170,
	171, 116, 0, 232, 148, 156, 145, 207, 0, 0,
	0, 273, 274, 144, 299, 124, 287, 119, 125, 286,
	201, 0, 0, 0, 269, 277, 193, 186, 0, 118,
	275, 191, 185, 175, 152, 163, 222, 182, 223, 164,
	197, 196, 198, 0, 0, 0, 258, 284, 300, 130,
	0, 0, 267, 294, 295, 0, 0, 131, 155, 151,
	221, 200, 126, 166, 255, 174, 181, 231, 298, 211,
	237, 135, 283, 254, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 120, 178, 297,
	229, 154, 285, 0, 147, 0, 0, 0, 0, 0,
	0, 113, 114, 121, 129, 136, 146, 150, 153, 158,
	162, 165, 167, 168, 169, 172, 184, 187, 188, 189,
	190, 202, 203, 205, 206, 209, 210, 213, 214, 215,
	216, 218, 219, 220, 224, 226, 228, 230, 233, 238,
	239, 240, 241, 243, 244, 245, 248, 249, 250, 251,
	259, 263, 271, 272, 282, 289, 293, 29, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 208,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 149,
	0, 0, 0, 0, 176, 0, 0, 142, 183, 0,
	0, 0, 0, 0, 0, 0, 0, 179, 0, 0,
	256, 195, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 68, 0, 0, 500,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 157, 0, 0, 0, 0, 0,
	0, 290, 0, 0, 0, 225, 0, 261, 160, 177,
	127, 112, 122, 0, 159, 204, 234, 242, 0, 0,
	0, 0, 0, 143, 0, 236, 212, 281, 0, 0,
	217, 235, 180, 270, 227, 279, 280, 161, 291, 292,
	265, 288, 296, 253, 0, 0, 0, 0, 0, 0,
	173, 0, 0, 0, 140, 0, 0, 0, 252, 128,
	266, 194, 199, 137, 139, 138, 123, 247, 268, 132,
	141, 257, 262, 115, 264, 278, 134, 246, 117, 276,
	260, 192, 170, 171, 116, 0, 232, 148, 156, 145,
	207, 0, 0, 0, 273, 274, 144, 299, 124, 287,
	119, 125, 286, 201, 0, 0, 0, 269, 277, 193,
	186, 0, 118, 275, 191, 185, 175, 152, 163, 222,
	182, 223, 164, 197, 196, 198, 0, 0, 0, 258,
	284, 300, 130, 0, 0, 267, 294, 295, 0, 0,
	131, 155, 151, 221, 200, 126, 166, 255, 174, 181,
	231, 298, 211, 237, 135, 283, 254, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	120, 178, 297, 229, 154, 285, 0, 147, 0, 0,
	0, 0, 0, 0, 113, 114, 121, 129, 136, 146,
	150, 153, 158, 162, 165, 167, 168, 169, 172, 184,
	187, 188, 189, 190, 202, 203, 205, 206, 209, 210,
	213, 214, 215, 216, 218, 219, 220, 224, 226, 228,
	230, 233, 238, 239, 240, 241, 243, 244, 245, 248,
	249, 250, 251, 259, 263, 271, 272, 282, 289, 293,
	29, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 208, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 149, 0, 0, 0, 0, 176, 0, 0,
	142, 183, 0, 0, 0, 0, 0, 0, 0, 0,
	179, 0, 0, 256, 195, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
	0, 0, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 133, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 157, 0, 0,
	0, 0, 0, 0, 290, 0, 0, 0, 225, 0,
	261, 160, 177, 127, 112, 122, 0, 159, 204, 234,
	242, 0, 0, 0, 0, 0, 143, 0, 236, 212,
	281, 0, 0, 217, 235, 180, 270, 227, 279, 280,
	161, 291, 292, 265, 288, 296, 253, 0, 0, 0,
	0, 0, 0, 173, 0, 0, 0, 140, 0, 0,
	0, 252, 128, 266, 194, 199, 137, 139, 138, 123,
	247, 268, 132, 141, 257, 262, 115, 264, 278, 134,
	246, 117, 276, 260, 192, 170, 171, 116, 0, 232,
	148, 156, 145, 207, 0, 0, 0, 273, 274, 144,
	299, 124, 287, 119, 125, 286, 201, 0, 0, 0,
	269, 277, 193, 186, 0, 118, 275, 191, 185, 175,
	152, 163, 222, 182, 223, 164, 197, 196, 198, 0,
	0, 0, 258, 284, 300, 130, 0, 0, 267, 294,
	295, 0, 0, 131, 155, 151, 221, 200, 126, 166,
	255, 174, 181, 231, 298, 211, 237, 135, 283, 254,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 120, 178, 297, 229, 154, 285, 0,
	147, 0, 0, 0, 0, 0, 0, 113, 114, 121,
	129, 136, 146, 150, 153, 158, 162, 165, 167, 168,
	169, 172, 184, 187, 188, 189, 190, 202, 203, 205,
	206, 209, 210, 213, 214, 215, 216, 218, 219, 220,
	224, 226, 228, 230, 233, 238, 239, 240, 241, 243,
	244, 245, 248, 249, 250, 251, 259, 263, 271, 272,
	282, 289, 293, 208, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 149, 932, 0, 0, 0, 176, 0,
	0, 142, 183, 0, 0, 0, 0, 0, 0, 0,
	0, 179, 0, 0, 256, 195, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 500, 0, 931, 0, 0, 0, 0,
	0, 0, 133, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 157, 0,
	0, 0, 0, 0, 0, 290, 0, 0, 0, 225,
	0, 261, 160, 177, 127, 112, 122, 0, 159, 204,
	234, 242, 0, 0, 0, 0, 0, 143, 0, 236,
	212, 281, 0, 0, 217, 235, 180, 270, 227, 279,
	280, 161, 291, 292, 265, 288, 296, 253, 0, 0,
	0, 0, 0, 0, 173, 0, 0, 0, 140, 0,
	0, 0, 252, 128, 266, 194, 199, 137, 139, 138,
	123, 247, 268, 132, 141, 257, 262, 115, 264, 278,
	134, 246, 117, 276, 260, 192, 170, 171, 116, 0,
	232, 148, 156, 145, 207, 0, 0, 0, 273, 274,
	144, 299, 124, 287, 119, 125, 286, 201, 0, 0,
	0, 269, 277, 193, 186, 0, 118, 275, 191, 185,
	175, 152, 163, 222, 182, 223, 164, 197, 196, 198,
	0, 0, 0, 258, 284, 300, 130, 0, 0, 267,
	294, 295, 0, 0, 131, 155, 151, 221, 200, 126,
	166, 255, 174, 181, 231, 298, 211, 237, 135, 283,
	254, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 120, 178, 297, 229, 154, 285,
	0, 147, 0, 0, 0, 0, 0, 0, 113, 114,
	121, 129, 136, 146, 150, 153, 158, 162, 165, 167,
	168, 169, 172, 184, 187, 188, 189, 190, 202, 203,
	205, 206, 209, 210, 213, 214, 215, 216, 218, 219,
	220, 224, 226, 228, 230, 233, 238, 239, 240, 241,
	243, 244, 245, 248, 249, 250, 251, 259, 263, 271,
	272, 282, 289, 293, 208, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 149, 0, 0, 0, 0, 176,
	0, 0, 142, 183, 0, 0, 0, 0, 0, 0,
	0, 0, 179, 0, 0, 256, 195, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 68, 0, 0, 109, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 157,
	0, 0, 0, 0, 0, 0, 290, 0, 0, 0,
	225, 0, 261, 160, 177, 127, 112, 122, 0, 159,
	204, 234, 242, 0, 0, 0, 0, 0, 143, 0,
	236, 212, 281, 0, 0, 217, 235, 180, 270, 227,
	279, 280, 161, 291, 292, 265, 288, 296, 253, 0,
	0, 0, 0, 0, 0, 173, 0, 0, 0, 140,
	0, 0, 0, 252, 128, 266, 194, 199, 137, 139,
	138, 123, 247, 268, 132, 141, 257, 262, 115, 264,
	278, 134, 246, 117, 276, 260, 192, 170, 171, 116,
	0, 232, 148, 156, 145, 207, 0, 0, 0, 273,
	274, 144, 299, 124, 287, 119, 125, 286, 201, 0,
	0, 0, 269, 277, 193, 186, 0, 118, 275, 191,
	185, 175, 152, 163, 222, 182, 223, 164, 197, 196,
	198, 0, 0, 0, 258, 284, 300, 130, 0, 0,
	267, 294, 295, 0, 0, 131, 155, 151, 221, 200,
	126, 166, 255, 174, 181, 231, 298, 211, 237, 135,
	283, 254, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 120, 178, 297, 229, 154,
	285, 0, 147, 0, 0, 0, 0, 0, 0, 113,
	114, 121, 129, 136, 146, 150, 153, 158, 162, 165,
	167, 168, 169, 172, 184, 187, 188, 189, 190, 202,
	203, 205, 206, 209, 210, 213, 214, 215, 216, 218,
	219, 220, 224, 226, 228, 230, 233, 238, 239, 240,
	241, 243, 244, 245, 248, 249, 250, 251, 259, 263,
	271, 272, 282, 289, 293, 208, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 149, 0, 0, 0, 0,
	176, 0, 0, 142, 183, 0, 0, 0, 0, 0,
	0, 0, 0, 179, 0, 0, 256, 195, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 68, 0, 0, 500, 0, 0, 0, 0,
	0, 0, 0, 0, 133, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	157, 0, 0, 0, 0, 0, 0, 290, 0, 0,
	0, 225, 0, 261, 160, 177, 127, 112, 122, 0,
	159, 204, 234, 242, 0, 0, 0, 0, 0, 143,
	0, 236, 212, 281, 0, 0, 217, 235, 180, 270,
	227, 279, 280, 161, 291, 292, 265, 288, 296, 253,
	0, 0, 0, 0, 0, 0, 173, 0, 0, 0,
	140, 0, 0, 0, 252, 128, 266, 194, 199, 137,
	139, 138, 123, 247, 268, 132, 141, 257, 262, 115,
	264, 278, 134, 246, 117, 276, 260, 192, 170, 171,
	116, 0, 232, 148, 156, 145, 207, 0, 0, 0,
	273, 274, 144, 299, 124, 287, 119, 125, 286, 201,
	0, 0, 0, 269, 277, 193, 186, 0, 118, 275,
	191, 185, 175, 152, 163, 222, 182, 223, 164, 197,
	196, 198, 0, 0, 0, 258, 284, 300, 130, 0,
	0, 267, 294, 295, 0, 0, 131, 155, 151, 221,
	200, 126, 166, 255, 174, 181, 231, 298, 211, 237,
	135, 283, 254, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 120, 178, 297, 229,
	154, 285, 0, 147, 0, 0, 0, 0, 0, 0,
	113, 114, 121, 129, 136, 146, 150, 153, 158, 162,
	165, 167, 168, 169, 172, 184, 187, 188, 189, 190,
	202, 203, 205, 206, 209, 210, 213, 214, 215, 216,
	218, 219, 220, 224, 226, 228, 230, 233, 238, 239,
	240, 241, 243, 244, 245, 248, 249, 250, 251, 259,
	263, 271, 272, 282, 289, 293, 208, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 149, 0, 0, 0,
	0, 176, 0, 0, 142, 183, 0, 0, 0, 0,
	0, 0, 0, 0, 179, 0, 0, 256, 195, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 133, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 157, 0, 0, 0, 1200, 0, 0, 290, 0,
	0, 0, 225, 0, 261, 160, 177, 127, 112, 122,
	0, 159, 204, 234, 242, 0, 0, 0, 0, 0,
	143, 0, 236, 212, 281, 0, 0, 217, 235, 180,
	270, 227, 279, 280, 161, 291, 292, 265, 288, 296,
	253, 0, 0, 0, 0, 0, 0, 173, 0, 0,
	0, 140, 0, 0, 0, 252, 128, 266, 194, 199,
	137, 139, 138, 123, 247, 268, 132, 141, 257, 262,
	115, 264, 278, 134, 246, 117, 276, 260, 192, 170,
	171, 116, 0, 232, 148, 156, 145, 207, 0, 0,
	0, 273, 274, 144, 299, 124, 287, 119, 125, 286,
	201, 0, 0, 0, 269, 277, 193, 186, 0, 118,
	275, 191, 185, 175, 152, 163, 222, 182, 223, 164,
	197, 196, 198, 0, 0, 0, 258, 284, 300, 130,
	0, 0, 267, 294, 295, 0, 0, 131, 155, 151,
	221, 200, 126, 166, 255, 174, 181, 231, 298, 211,
	237, 135, 283, 254, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 120, 178, 297,
	229, 154, 285, 0, 147, 0, 0, 0, 0, 0,
	0, 113, 114, 121, 129, 136, 146, 150, 153, 158,
	162, 165, 167, 168, 169, 172, 184, 187, 188, 189,
	190, 202, 203, 205, 206, 209, 210, 213, 214, 215,
	216, 218, 219, 220, 224, 226, 228, 230, 233, 238,
	239, 240, 241, 243, 244, 245, 248, 249, 250, 251,
	259, 263, 271, 272, 282, 289, 293, 208, 0, 0,
	0, 0, 0, 0, 0, 0, 902, 149, 0, 0,
	0, 0, 176, 0, 0, 142, 183, 0, 0, 0,
	0, 0, 0, 0, 0, 179, 0, 0, 256, 195,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 157, 0, 0, 0, 0, 0, 0, 290,
	0, 0, 0, 225, 0, 261, 160, 177, 127, 112,
	122, 0, 159, 204, 234, 242, 0, 0, 0, 0,
	0, 143, 0, 236, 212, 281, 0, 0, 217, 235,
	180, 270, 227, 279, 280, 161, 291, 292, 265, 288,
	296, 253, 0, 0, 0, 0, 0, 0, 173, 0,
	0, 0, 140, 0, 0, 0, 252, 128, 266, 194,
	199, 137, 139, 138, 123, 247, 268, 132, 141, 257,
	262, 115, 264, 278, 134, 246, 117, 276, 260, 192,
	170, 171, 116, 0, 232, 148, 156, 145, 207, 0,
	0, 0, 273, 274, 144, 299, 124, 287, 119, 125,
	286, 201, 0, 0, 0, 269, 277, 193, 186, 0,
	118, 275, 191, 185, 175, 152, 163, 222, 182, 223,
	164, 197, 196, 198, 0, 0, 0, 258, 284, 300,
	130, 0, 0, 267, 294, 295, 0, 0, 131, 155,
	151, 221, 200, 126, 166, 255, 174, 181, 231, 298,
	211, 237, 135, 283, 254, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 120, 178,
	297, 229, 154, 285, 0, 147, 0, 0, 0, 0,
	0, 0, 113, 114, 121, 129, 136, 146, 150, 153,
	158, 162, 165, 167, 168, 169, 172, 184, 187, 188,
	189, 190, 202, 203, 205, 206, 209, 210, 213, 214,
	215, 216, 218, 219, 220, 224, 226, 228, 230, 233,
	238, 239, 240, 241, 243, 244, 245, 248, 249, 250,
	251, 259, 263, 271, 272, 282, 289, 293, 461, 0,
	0, 0, 0, 0, 0, 208, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 149, 0, 0, 0, 0,
	176, 0, 0, 142, 183, 0, 0, 0, 0, 0,
	0, 0, 0, 179, 0, 0, 256, 195, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 133, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	157, 0, 0, 0, 0, 0, 0, 290, 0, 0,
	0, 225, 0, 261, 160, 177, 127, 112, 122, 0,
	159, 204, 234, 242, 0, 0, 0, 0, 0, 143,
	0, 236, 212, 281, 0, 0, 217, 235, 180, 270,
	227, 279, 280, 161, 291, 292, 265, 288, 296, 253,
	0, 0, 0, 0, 0, 0, 173, 0, 0, 0,
	140, 0, 0, 0, 252, 128, 266, 194, 199, 137,
	139, 138, 123, 247, 268, 132, 141, 257, 262, 115,
	264, 278, 134, 246, 117, 276, 260, 192, 170, 171,
	116, 0, 232, 148, 156, 145, 207, 0, 0, 0,
	273, 274, 144, 299, 124, 287, 119, 125, 286, 201,
	0, 0, 0, 269, 277, 193, 186, 0, 118, 275,
	191, 185, 175, 152, 163, 222, 182, 223, 164, 197,
	196, 198, 0, 0, 0, 258, 284, 300, 130, 0,
	0, 267, 294, 295, 0, 0, 131, 155, 151, 221,
	200, 126, 166, 255, 174, 181, 231, 298, 211, 237,
	135, 283, 254, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 120, 178, 297, 229,
	154, 285, 0, 147, 0, 0, 0, 0, 0, 0,
	113, 114, 121, 129, 136, 146, 150, 153, 158, 162,
	165, 167, 168, 169, 172, 184, 187, 188, 189, 190,
	202, 203, 205, 206, 209, 210, 213, 214, 215, 216,
	218, 219, 220, 224, 226, 228, 230, 233, 238, 239,
	240, 241, 243, 244, 245, 248, 249, 250, 251, 259,
	263, 271, 272, 282, 289, 293, 208, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 149, 0, 0, 0,
	0, 176, 0, 0, 142, 183, 0, 0, 0, 0,
	0, 0, 0, 0, 179, 0, 0, 256, 195, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 133, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 157, 0, 0, 0, 106, 0, 0, 290, 0,
	0, 0, 225, 0, 261, 160, 177, 127, 112, 122,
	0, 159, 204, 234, 242, 0, 0, 0, 0, 0,
	143, 0, 236, 212, 281, 0, 0, 217, 235, 180,
	270, 227, 279, 280, 161, 291, 292, 265, 288, 296,
	253, 0, 0, 0, 0, 0, 0, 173, 0, 0,
	0, 140, 0, 0, 0, 252, 128, 266, 194, 199,
	137, 139, 138, 123, 247, 268, 132, 141, 257, 262,
	115, 264, 278, 134, 246, 117, 276, 260, 192, 170,
	171, 116, 0, 232, 148, 156, 145, 207, 0, 0,
	0, 273, 274, 144, 299, 124, 287, 119, 125, 286,
	201, 0, 0, 0, 269, 277, 193, 186, 0, 118,
	275, 191, 185, 175, 152, 163, 222, 182, 223, 164,
	197, 196, 198, 0, 0, 0, 258, 284, 300, 130,
	0, 0, 267, 294, 295, 0, 0, 131, 155, 151,
	221, 200, 126, 166, 255, 174, 181, 231, 298, 211,
	237, 135, 283, 254, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 120, 178, 297,
	229, 154, 285, 0, 147, 0, 0, 0, 0, 0,
	0, 113, 114, 121, 129, 136, 146, 150, 153, 158,
	162, 165, 167, 168, 169, 172, 184, 187, 188, 189,
	190, 202, 203, 205, 206, 209, 210, 213, 214, 215,
	216, 218, 219, 220, 224, 226, 228, 230, 233, 238,
	239, 240, 241, 243, 244, 245, 248, 249, 250, 251,
	259, 263, 271, 272, 282, 289, 293, 208, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 149, 0, 0,
	0, 0, 176, 0, 0, 142, 183, 0, 0, 0,
	0, 0, 0, 0, 0, 179, 0, 0, 256, 195,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 500, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 157, 0, 0, 0, 0, 0, 0, 290,
	0, 0, 0, 225, 0, 261, 160, 177, 127, 112,
	122, 0, 159, 204, 234, 242, 0, 0, 0, 0,
	0, 143, 0, 236, 212, 281, 0, 0, 217, 235,
	180, 270, 227, 279, 280, 161, 291, 292, 265, 288,
	296, 253, 0, 0, 0, 0, 0, 0, 173, 0,
	0, 0, 140, 0, 0, 0, 252, 128, 266, 194,
	199, 137, 139, 138, 123, 247, 268, 132, 141, 257,
	262, 115, 264, 278, 134, 246, 117, 276, 260, 192,
	170, 171, 116, 0, 232, 148, 156, 145, 207, 0,
	0, 0, 273, 274, 144, 299, 124, 287, 119, 125,
	286, 201, 0, 0, 0, 269, 277, 193, 186, 0,
	118, 275, 191, 185, 175, 152, 163, 222, 182, 223,
	164, 197, 196, 198, 0, 0, 0, 258, 284, 300,
	130, 0, 0, 267, 294, 295, 0, 0, 131, 155,
	151, 221, 200, 126, 166, 255, 174, 181, 231, 298,
	211, 237, 135, 283, 254, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 120, 178,
	297, 229, 154, 285, 0, 147, 0, 0, 0, 0,
	0, 0, 113, 114, 121, 129, 136, 146, 150, 153,
	158, 162, 165, 167, 168, 169, 172, 184, 187, 188,
	189, 190, 202, 203, 205, 206, 209, 210, 213, 214,
	215, 216, 218, 219, 220, 224, 226, 228, 230, 233,
	238, 239, 240, 241, 243, 244, 245, 248, 249, 250,
	251, 259, 263, 271, 272, 282, 289, 293, 208, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 149, 0,
	0, 0, 0, 176, 0, 0, 142, 183, 0, 0,
	0, 0, 0, 0, 0, 0, 179, 0, 0, 256,
	195, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 157, 0, 0, 0, 0, 0, 0,
	290, 0, 0, 0, 225, 0, 261, 160, 177, 127,
	112, 122, 0, 159, 204, 234, 242, 0, 0, 0,
	0, 0, 143, 0, 236, 212, 281, 0, 0, 217,
	235, 180, 270, 227, 279, 280, 161, 291, 292, 265,
	288, 296, 253, 0, 0, 0, 0, 0, 0, 173,
	0, 0, 0, 140, 0, 0, 0, 252, 128, 266,
	194, 199, 137, 139, 138, 123, 247, 268, 132, 141,
	257, 262, 115, 264, 278, 134, 246, 117, 276, 260,
	192, 170, 171, 116, 0, 232, 148, 156, 145, 207,
	0, 0, 0, 273, 274, 144, 299, 124, 287, 119,
	125, 286, 201, 0, 0, 0, 269, 277, 193, 186,
	0, 118, 275, 191, 185, 175, 152, 163, 222, 182,
	223, 164, 197, 196, 198, 0, 0, 0, 258, 284,
	300, 130, 0, 0, 267, 294, 295, 0, 0, 131,
	155, 151, 221, 200, 126, 166, 255, 174, 181, 231,
	298, 211, 237, 135, 283, 254, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 120,
	178, 297, 229, 154, 285, 0, 147, 0, 0, 0,
	0, 0, 0, 113, 114, 121, 129, 136, 146, 150,
	153, 158, 162, 165, 167, 168, 169, 172, 184, 187,
	188, 189, 190, 202, 203, 205, 206, 209, 210, 213,
	214, 215, 216, 218, 219, 220, 224, 226, 228, 230,
	233, 238, 239, 240, 241, 243, 244, 245, 248, 249,
	250, 251, 259, 263, 271, 272, 282, 289, 293, 208,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 149,
	0, 0, 0, 0, 176, 0, 0, 142, 183, 0,
	0, 0, 0, 0, 0, 0, 0, 179, 0, 0,
	256, 195, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 369,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 157, 0, 0, 0, 0, 0,
	0, 290, 0, 0, 0, 225, 0, 261, 160, 177,
	127, 112, 122, 0, 159, 204, 234, 242, 0, 0,
	0, 0, 0, 143, 0, 236, 212, 281, 0, 0,
	217, 235, 180, 270, 227, 279, 280, 161, 291, 292,
	265, 288, 296, 253, 0, 0, 0, 0, 0, 0,
	173, 0, 0, 0, 140, 0, 0, 0, 252, 128,
	266, 194, 199, 137, 139, 138, 123, 247, 268, 132,
	141, 257, 262, 115, 264, 278, 134, 246, 117, 276,
	260, 192, 170, 171, 116, 0, 232, 148, 156, 145,
	207, 0, 0, 0, 273, 274, 144, 299, 124, 287,
	119, 478, 286, 201, 0, 0, 0, 269, 277, 193,
	186, 0, 118, 275, 191, 185, 175, 152, 163, 222,
	182, 223, 164, 197, 196, 198, 0, 0, 0, 258,
	284, 300, 130, 0, 0, 267, 294, 295, 0, 0,
	131, 155, 151, 221, 479, 477, 166, 255, 174, 181,
	231, 298, 211, 237, 135, 283, 254, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	120, 178, 297, 229, 154, 285, 0, 147, 0, 0,
	0, 0, 0, 0, 113, 114, 121, 129, 136, 146,
	150, 153, 158, 162, 165, 167, 168, 169, 172, 184,
	187, 188, 189, 190, 202, 203, 205, 206, 209, 210,
	213, 214, 215, 216, 218, 219, 220, 224, 226, 228,
	230, 233, 238, 239, 240, 241, 243, 244, 245, 248,
	249, 250, 251, 259, 263, 271, 272, 282, 289, 293,
	208, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	149, 0, 0, 0, 0, 176, 0, 0, 142, 183,
	0, 0, 0, 0, 0, 0, 0, 0, 179, 0,
	0, 256, 195, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	369, 0, 0, 0, 0, 0, 0, 0, 0, 133,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 157, 0, 0, 0, 0,
	0, 0, 290, 0, 0, 0, 225, 0, 261, 160,
	177, 127, 112, 122, 0, 159, 204, 234, 242, 0,
	0, 0, 0, 0, 143, 0, 236, 212, 281, 0,
	0, 217, 235, 180, 270, 227, 279, 280, 161, 291,
	292, 265, 288, 296, 253, 0, 0, 0, 0, 0,
	0, 173, 0, 0, 0, 140, 0, 0, 0, 252,
	128, 266, 194, 199, 137, 139, 138, 123, 247, 268,
	132, 141, 257, 262, 115, 264, 278, 134, 246, 117,
	276, 260, 192, 170, 171, 116, 0, 232, 148, 156,
	145, 207, 0, 0, 0, 273, 274, 144, 299, 124,
	287, 119, 125, 286, 201, 0, 0, 0, 269, 277,
	193, 186, 0, 118, 275, 191, 185, 175, 152, 163,
	222, 182, 223, 164, 197, 196, 198, 0, 0, 0,
	258, 284, 300, 130, 0, 0, 267, 294, 295, 0,
	0, 131, 155, 151, 221, 200, 126, 166, 255, 174,
	181, 231, 298, 211, 237, 135, 283, 254, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 120, 178, 297, 229, 154, 285, 0, 147, 0,
	0, 0, 0, 0, 0, 113, 114, 121, 129, 136,
	146, 150, 153, 158, 162, 165, 167, 168, 169, 172,
	184, 187, 188, 189, 190, 202, 203, 205, 206, 209,
	210, 213, 214, 215, 216, 218, 219, 220, 224, 226,
	228, 230, 233, 238, 239, 240, 241, 243, 244, 245,
	248, 249, 250, 251, 259, 263, 271, 272, 282, 289,
	293, 208, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 149, 0, 0, 0, 0, 176, 0, 0, 142,
	183, 0, 0, 0, 0, 0, 0, 0, 0, 179,
	0, 0, 256, 195, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 369, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 157, 0, 0, 0,
	0, 0, 0, 290, 0, 0, 0, 225, 0, 261,
	160, 177, 127, 112, 122, 0, 159, 204, 234, 242,
	0, 0, 0, 0, 0, 143, 0, 236, 212, 281,
	0, 0, 217, 235, 180, 270, 227, 279, 280, 161,
	291, 292, 265, 288, 296, 253, 0, 0, 0, 0,
	0, 0, 173, 0, 0, 0, 140, 0, 0, 0,
	252, 128, 266, 194, 199, 137, 139, 138, 123, 247,
	268, 132, 141, 257, 262, 115, 264, 923, 134, 246,
	117, 276, 260, 192, 170, 171, 116, 0, 232, 148,
	156, 145, 207, 0, 0, 0, 273, 274, 144, 299,
	124, 287, 119, 478, 286, 201, 0, 0, 0, 269,
	277, 193, 186, 0, 118, 275, 191, 185, 175, 152,
	163, 222, 182, 223, 164, 197, 196, 198, 0, 0,
	0, 258, 284, 300, 130, 0, 0, 267, 294, 295,
	0, 0, 131, 155, 151, 221, 479, 477, 166, 255,
	174, 181, 231, 298, 211, 237, 135, 283, 254, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 120, 178, 297, 229, 154, 285, 0, 147,
	0, 0, 0, 0, 0, 0, 113, 114, 121, 129,
	136, 146, 150, 153, 158, 162, 165, 167, 168, 169,
	172, 184, 187, 188, 189, 190, 202, 203, 205, 206,
	209, 210, 213, 214, 215, 216, 218, 219, 220, 224,
	226, 228, 230, 233, 238, 239, 240, 241, 243, 244,
	245, 248, 249, 250, 251, 259, 263, 271, 272, 282,
	289, 293, 208, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 149, 0, 0, 0, 0, 176, 0, 0,
	142, 183, 0, 0, 0, 0, 0, 0, 0, 0,
	179, 0, 0, 256, 195, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 369, 0, 0, 0, 0, 0, 0, 0,
	0, 133, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 157, 0, 0,
	0, 0, 0, 0, 290, 0, 0, 0, 225, 0,
	261, 160, 177, 127, 112, 122, 0, 159, 204, 234,
	242, 0, 0, 0, 0, 0, 143, 0, 236, 212,
	281, 0, 0, 217, 235, 180, 270, 227, 279, 280,
	161, 291, 292, 265, 288, 296, 253, 0, 0, 0,
	0, 0, 0, 173, 0, 0, 0, 140, 0, 0,
	0, 252, 128, 266, 194, 199, 137, 139, 138, 123,
	247, 268, 132, 141, 257, 262, 115, 264, 469, 134,
	246, 117, 276, 260, 192, 170, 171, 116, 0, 232,
	148, 156, 145, 207, 0, 0, 0, 273, 274, 144,
	299, 124, 287, 119, 478, 286, 201, 0, 0, 0,
	269, 277, 193, 186, 0, 118, 275, 191, 185, 175,
	152, 163, 222, 182, 223, 164, 197, 196, 198, 0,
	0, 0, 258, 284, 300, 130, 0, 0, 267, 294,
	295, 0, 0, 131, 155, 151, 221, 479, 477, 472,
	471, 174, 181, 231, 298, 211, 237, 135, 283, 254,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 120, 178, 297, 229, 154, 285, 0,
	147, 0, 0, 0, 0, 0, 0, 113, 114, 121,
	129, 136, 146, 150, 153, 158, 162, 165, 167, 168,
	169, 172, 184, 187, 188, 189, 190, 202, 203, 205,
	206, 209, 210, 213, 214, 215, 216, 218, 219, 220,
	224, 226, 228, 230, 233, 238, 239, 240, 241, 243,
	244, 245, 248, 249, 250, 251, 259, 263, 271, 272,
	282, 289, 293,
}

var yyPact = [...]int{
	2279, -1000, -297, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1245, 1289, -1000,
	-1000, -1000, -1000, -1000, -1000, 572, 186, -1000, -1000, -1000,
	205, 83, 19558, 204, 2601, 20360, -1000, -1000, -1000, -1000,
	158, 20360, -1000, -1000, -74, -79, -1000, 25, 916, 1186,
	1006, -1000, -1000, 51, 21, -1000, -1000, -1000, -1000, -1000,
	-1000, 1237, 1242, 1041, 1231, 1141, -1000, 9490, 182, 182,
	19157, 21964, -1000, -1000, 398, 20360, 201, 20360, -152, 170,
	170, 99, 170, -1000, 403, -1000, -1000, -1000, 20360, 171,
	19959, 171, 171, 171, 171, 171, 20360, -1000, 243, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 20360, 908, 1199, 6211, 89, 6211, 6211, -1000, 530,
	-1000, 85, 79, 81, 6211, 13, 474, 75, 14, -1000,
	6211, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 202, 1006,
	401, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1198, 696,
	1078, -294, 697, 203, 20360, 482, -1000, -1000, 1206, 11507,
	11908, 1245, -1000, 1006, -1000, -1000, -1000, 1180, -1000, -1000,
	516, 1271, -1000, 14314, 242, -1000, 11507, 2869, 1019, -1000,
	-1000, 1019, -1000, -1000, 226, -1000, -1000, 13111, 13111, 13111,
	13111, 13111, 13111, 13111, 13111, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1019, -1000, 10705, 1019, 1019, 1019, 1019, 1019, 1019,
	1019, 1019, 1019, 1019, 11507, 1019, 1019, 1019, 1019, 1019,
	1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
	1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
	1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
	1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 18749,
	17546, 20360, 971, 967, -1000, -1000, 239, 927, 21563, -131,
	-1000, -1000, -1000, 390, 17145, -1000, 238, -1000, 1196, -1000,
	914, 20360, -1000, 3265, -1000, 19959, 1224, 161, 903, 485,
	902, 901, 900, 20360, 899, 1017, 194, 20360, 1215, 1102,
	-1000, -1000, 20360, 898, 896, 893, 891, -1000, 8286, -1000,
	6211, 6211, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	170, 170, 6211, 6211, 6211, 20360, 20360, 20360, -1000, -1000,
	20360, -1000, -1000, 367, 367, 6211, 6211, -1000, 1269, 502,
	502, -1000, -1000, -1000, -1000, 11507, -1000, 13111, 283, -1000,
	1100, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 890, -1000,
	-1000, 352, -1000, 689, -1000, 11106, 18749, 679, -1000, -1000,
	20360, 6211, 94, 129, 117, 20360, -1000, 1284, 273, 750,
	235, 1013, -1000, 547, 1208, 1019, 1019, 1019, 1019, 1019,
	1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
	1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
	1019, 1019, 1019, 1237, 697, 1141, 734, 1104, -1000, -1000,
	-1000, 20360, -1000, 11507, 11507, 721, -1000, 15517, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	7041, 291, 13111, 576, 422, 13111, 13111, 13111, 13111, 13111,
	13111, 13111, 13111, 13111, 13111, 13111, 13111, 13111, 13111, 13111,
	595, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 887,
	-1000, 1006, 1042, 1042, 251, 251, 251, 251, 251, 251,
	251, 15918, 1222, 697, 884, 577, 10705, 9490, 9490, 697,
	11507, 11507, 10292, 9891, 9490, 9490, 1222, 459, 577, 21162,
	-1000, -1000, 12710, -1000, -1000, -1000, -1000, -1000, 697, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 19959, 19959, 9490,
	9490, 9490, 9490, 697, 697, 9490, 9490, 9490, 9490, 9490,
	697, 697, 697, 697, 1222, 1222, 9490, 9490, 9490, 1222,
	9490, 9490, 1222, 9490, 9490, 9490, 9490, 1222, 9490, 9490,
	9490, 115, 18348, -1000, 977, 1095, -1000, -1000, -1000, 1223,
	16744, 13913, 115, 935, 17546, 20360, -1000, -1000, 17546, 20360,
	6626, 20761, 927, -131, 996, -1000, -101, -128, 8688, 249,
	-1000, -1000, -1000, 7871, -1000, 5381, 756, 851, -1000, -64,
	-1000, -1000, -1000, 1038, -1000, 1038, 149, -6, 1038, 1038,
	1038, 1038, 1038, -24, -24, -24, -24, -23, -1000, -1000,
	-1000, -1000, -1000, 1077, 1075, -1000, 1038, 1038, 1038, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1053, 157, 1053,
	1043, 1043, 1043, 1043, 1081, -1000, 20360, 6211, 1214, 6211,
	92, 1074, -1000, -1000, 20360, 20360, 1011, -1000, 20360, 1010,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	880, 879, -1000, -1000, -1000, -1000, -1000, -1000, 519, -1000,
	645, 11507, -1000, -1000, -1000, 20360, 1218, 20360, 20360, 367,
	577, 1022, -1000, 643, 20360, -1000, 1003, -1000, 387, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 850, -1000, -1000, 618, -1000, 20360, 20360,
	20360, 20360, 20360, 221, -1000, 1148, 11507, 11507, 7871, 11908,
	-1000, -1000, -1000, -1000, 1206, -1000, 1222, 1244, -1000, 1164,
	1158, 9490, -1000, -1000, 291, 409, -1000, -1000, 589, -1000,
	-1000, -1000, -1000, 233, 1019, -1000, 3009, -1000, -1000, -1000,
	-1000, 576, 13111, 13111, 13111, 1022, 3009, 2994, 981, 2277,
	251, 728, 728, 259, 259, 259, 259, 259, 1057, 1057,
	-1000, -1000, -1000, 697, -1000, -1000, -1000, 9490, -1000, 11507,
	-1000, 697, 831, -1000, 831, -1000, 555, 773, 478, 1264,
	831, 373, 1261, 831, 831, 831, 9490, 521, -1000, 11507,
	697, -1000, 1291, 1000, 999, 831, 697, 998, 831, 831,
	-178, -178, 697, 831, 697, 831, 831, -178, -178, -178,
	-178, 9490, 9490, 831, 831, 831, 9490, 831, 831, 9490,
	831, 831, 831, 831, 9490, 831, 831, 831, 943, 1019,
	20360, -1000, 20761, 17546, 17546, 17546, 17546, 17546, -1000, 1137,
	1136, -1000, 1130, 1124, 1131, 15116, -1000, 846, 16744, -1000,
	1019, -1000, 14715, 426, 199, 198, 162, -1000, -1000, -1000,
	1254, 17546, 982, -1000, 982, -1000, 232, -1000, -1000, 996,
	-131, -65, -1000, -1000, -1000, -1000, 577, -1000, 628, -1000,
	231, 985, 4966, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1060, 839, -1000, 1174, 353, 461, 726, 1170, -1000, -1000,
	-1000, 318, -67, -1000, -1000, 610, -24, -24, 1038, 1038,
	148, 1038, -1000, -24, -1000, -1000, -1000, 249, 1194, 249,
	249, 249, 249, -24, 636, 636, -1000, -1000, -1000, -1000,
	591, -1000, 1053, -1000, -1000, 586, -1000, -1000, -1000, 1098,
	19959, 1006, 1217, -1000, -1000, -1000, 1325, -1000, -1000, 200,
	193, -1000, 6211, 20360, 6211, 6211, 1254, 838, 833, -1000,
	577, 502, 367, 1189, -1000, -1000, -1000, -1000, 13111, -1000,
	-1000, 352, 1042, -1000, -1000, 640, 535, 453, 152, 152,
	-1000, 305, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 114, 1080, -1000, -1000, -1000, -1000, 30, 93, 1146,
	577, 577, -1000, -1000, 20360, -1000, -1000, -1000, -1000, 991,
	-1000, -1000, -1000, 5796, 9490, -1000, 1022, 3009, 2961, -1000,
	13111, -1000, 697, 577, -1000, 9490, -1000, -1000, 360, 595,
	360, 13111, 13111, -1000, 13111, 13111, -1000, -214, -1000, 972,
	435, -1000, 11507, 607, -1000, -1000, 13111, 13111, -1000, -1000,
	-1000, -1000, -1000, 17947, -1000, -178, -178, -178, -178, -178,
	-1000, -1000, -1000, -1000, 831, 831, -178, -178, -178, 831,
	-178, -178, 831, -178, -178, -178, -178, 831, -178, -178,
	-178, 1097, 20761, 1019, -1000, 16331, 19959, -1000, 997, 1095,
	1059, 1096, 867, -1000, -1000, -1000, -1000, 1127, -1000, 1121,
	-1000, -1000, -1000, -1000, 19959, 13111, 426, -1000, 1019, 1019,
	1019, 1245, 11507, 982, -1000, -1000, 265, -1000, -1000, -116,
	-133, -1000, -1000, -1000, 7456, 5381, -1000, 5381, 19959, 141,
	-1000, 726, 726, -1000, -1000, -1000, 1045, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 507, 13111, 1281, -1000, 1172, -1000,
	1171, 635, -1000, -1000, 847, 249, 249, -24, -1000, -1000,
	1038, -1000, 249, -1000, 455, -1000, -1000, -1000, -1000, 249,
	829, -1000, 826, 980, -1000, 822, 20360, -1000, -1000, -1000,
	1094, -1000, -1000, -1000, 832, 976, -1000, 3265, 818, 817,
	815, 20360, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 367,
	-1000, 13111, 3009, -1000, -1000, -1000, 706, -1000, 726, 331,
	-1000, -1000, -1000, 793, 1170, -1000, -1000, 791, -1000, 777,
	19959, 1169, 770, 20360, 19959, -1000, -1000, 739, 768, 11507,
	-1000, 19959, -219, 755, 19959, 19959, 19959, -1000, -1000, 1254,
	17546, -1000, -1000, 697, -1000, 13111, 3009, -1000, -1000, 697,
	1038, 1038, -1000, 1038, 1043, -1000, 1038, 15, 1038, 11,
	697, 697, 2751, 2394, 2344, 2074, 1019, -159, -1000, 577,
	11507, 1791, 1552, -1000, 294, -1000, -1000, -1000, -1000, -1000,
	-178, -178, -1000, -1000, -1000, -1000, -178, -1000, -1000, -178,
	-1000, -1000, -1000, -1000, -178, -1000, -1000, -1000, -1000, 1202,
	929, 947, -1000, -1000, 9089, 697, 814, 220, 812, -1000,
	1245, -1000, -1000, 11507, 1039, -1000, 11507, -1000, -1000, -1000,
	812, 2240, -1000, 19959, 19959, 19959, 1237, 577, -1000, -1000,
	-1000, -1000, 4966, -1000, 805, -1000, 1038, -1000, -1000, -1000,
	19959, -1000, 3009, -124, -1000, -1000, -1000, -1000, -1000, -1000,
	249, -1000, -1000, -1000, -1000, -1000, -24, 633, -24, 578,
	-1000, 545, 1037, -1000, 1006, 20360, 124, 200, -1000, 3265,
	3265, 3265, -1000, -1000, 3009, 739, 128, -1000, 1081, 353,
	141, -1000, -1000, -1000, -1000, 747, 323, -1000, 187, 128,
	739, 577, 1204, -1000, 7456, -1000, -1000, 1036, 1083, -1000,
	1246, 966, -1000, 3009, -1000, -1000, 175, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 13111, 13111, 13111, 13111, 13111,
	697, 629, 577, 13111, 13111, 697, 1241, -1000, -1000, -1000,
	-1000, -1000, 1167, -1000, 1019, -1000, -1000, 946, 19959, 19959,
	-1000, 19959, 1237, 577, 19959, 577, 13512, -1000, 15116, 802,
	-1000, 802, 802, -1000, 234, 19959, 1208, 798, -1000, -1000,
	249, -1000, 249, 823, 806, 19959, -1000, 1226, -1000, 124,
	-1000, 615, 48, 53, -1000, 46, 45, 44, 43, 41,
	-1000, -1000, -1000, -1000, 762, -1000, -1000, 727, 1034, 726,
	-1000, -1000, 722, -1000, -1000, 19959, -1000, 128, 1019, 954,
	-1000, 307, 19959, 20360, 1247, 1232, -1000, -1000, 1291, 1291,
	1291, 1291, 36, -1000, -1000, 1291, 1291, -1000, 11507, 1278,
	-1000, 1019, -1000, 1006, 214, -1000, -1000, -1000, 787, -1000,
	426, 19959, -1000, -1000, -1000, 234, -1000, 718, 305, 612,
	-1000, -1000, 135, -1000, -1000, -1000, -1000, 761, -1000, 69,
	2781, -1000, -1000, -1000, -1000, -1000, -1000, 1184, 1182, 58,
	-1000, -1000, -1000, 19959, 1081, -1000, -1000, -1000, -1000, 113,
	7456, 5381, 759, -1000, -1000, 11908, 11908, -1000, -1000, -1000,
	-1000, 697, 111, -222, -1000, -1000, 970, 20761, 947, 697,
	19959, -1000, -1000, -1000, -1000, -1000, 525, -1000, 20360, 234,
	67, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 11507, 11507, 2781, -1000, -1000, -1000,
	-1000, -1000, 754, 1021, -1000, 746, -1000, 19959, -1000, -1000,
	1080, -1000, 577, -1000, 944, -1000, 577, -1000, -1000, 1145,
	-217, -225, 697, 927, -1000, -1000, -1000, 1020, -1000, 234,
	62, -1000, 588, 542, -298, -1000, 234, 19959, -1000, 113,
	1153, -219, 11908, -1000, 1144, -1000, -1000, 19959, -1000, 704,
	702, 553, -1000, 11507, 840, 2549, -1000, 744, -1000, 104,
	-1000, -1000, -220, 713, 176, -1000, -1000, 481, 840, -1000,
	534, -300, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 840, -1000, -1000, 234, 102, -223, 1093, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -301, 840, 188, -302,
	-1000, 1019, -226, 1061, 1044, 1259, -1000, 767, -303, 169,
	840, 619, -1000, -1000, 11507, 571, 12309, -1000, -1000, 1277,
	-1000, 1274, 319, 319, 476, 840, -1000, -304, 167, 840,
	-1000, 499, -1000, 1291, 697, -1000, -1000, -1000, 145, 579,
	-1000, -1000, 557, -1000, -308, 840, -1000, -1000, -1000, -1000,
	-1000, 160, 497, -309, -1000, 159, 840, -1000,
}

var yyPgo = [...]int{
	0, 1632, 138, 627, 1631, 1629, 1628, 19, 16, 14,
	22, 1627, 1446, 1432, 1420, 1417, 1625, 1388, 24, 5,
	36, 34, 29, 10, 1624, 8, 1622, 1621, 12, 1620,
	2, 83, 1619, 1616, 1615, 1614, 1613, 1386, 1609, 1608,
	1607, 1605, 1604, 1383, 1368, 1602, 1601, 1361, 1359, 1600,
	1599, 1355, 1341, 1338, 1598, 135, 1597, 1595, 1593, 182,
	1592, 106, 1591, 1590, 1588, 75, 1329, 78, 87, 694,
	1587, 11, 1586, 71, 97, 116, 1585, 70, 1584, 1581,
	109, 1580, 1579, 1578, 94, 1575, 1574, 2550, 107, 108,
	1573, 50, 46, 67, 1569, 1568, 1566, 1564, 80, 136,
	1563, 1561, 1556, 54, 1555, 1552, 125, 1550, 1549, 1548,
	99, 49, 1547, 42, 41, 51, 1546, 159, 32, 1545,
	84, 1544, 1540, 1537, 1534, 1532, 31, 1530, 44, 1529,
	101, 259, 59, 27, 45, 47, 93, 1528, 55, 103,
	68, 62, 33, 102, 1525, 105, 91, 1522, 1521, 613,
	1520, 1519, 90, 1518, 1517, 86, 1516, 652, 111, 64,
	1514, 1512, 1511, 1507, 57, 95, 1502, 1499, 28, 164,
	96, 1328, 7, 1962, 183, 104, 1496, 38, 1494, 3136,
	100, 58, 76, 1493, 1492, 73, 52, 1491, 1488, 1484,
	1482, 1478, 1477, 1473, 72, 1472, 1471, 1470, 98, 56,
	1469, 1468, 92, 66, 1467, 1466, 1465, 89, 77, 1464,
	88, 65, 1461, 1460, 1459, 1458, 69, 40, 1457, 1455,
	1453, 1452, 63, 26, 1451, 48, 35, 21, 43, 9,
	60, 1443, 13, 1428, 37, 1415, 18, 1408, 25, 79,
	3, 4, 6, 1393, 1381, 1379, 1377, 1372, 53, 1350,
	1345, 39, 1343, 1327, 0, 122, 110, 1317, 1305, 115,
}

var yyR1 = [...]int{
	0, 252, 253, 253, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 54,
	2, 2, 2, 6, 3, 4, 4, 5, 5, 7,
	7, 58, 58, 8, 9, 9, 9, 9, 256, 256,
	82, 82, 80, 80, 81, 81, 139, 139, 10, 10,
	10, 10, 143, 143, 146, 146, 146, 147, 147, 147,
	147, 183, 183, 133, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 246, 246, 247, 247, 248, 248, 248,
	248, 249, 249, 250, 250, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 24, 26, 26,
	167, 167, 35, 35, 36, 36, 36, 129, 129, 129,
	11, 11, 11, 11, 11, 18, 20, 20, 27, 27,
	28, 21, 21, 21, 21, 29, 29, 30, 22, 22,
	34, 34, 32, 32, 31, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 17, 245, 245,
	245, 25, 25, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 238, 238, 237, 236, 236, 235, 235, 234,
	41, 218, 220, 220, 219, 219, 219, 219, 208, 187,
	187, 187, 187, 187, 187, 187, 186, 186, 186, 186,
	190, 190, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 189, 189, 189, 189, 189, 189, 189, 189, 191,
	191, 191, 191, 191, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 193,
	193, 193, 193, 193, 193, 193, 193, 207, 207, 194,
	194, 202, 202, 203, 203, 203, 200, 200, 201, 201,
	204, 204, 196, 197, 205, 198, 198, 198, 199, 199,
	199, 206, 206, 206, 206, 195, 209, 209, 229, 229,
	228, 228, 227, 227, 227, 217, 217, 224, 224, 224,
	224, 224, 212, 212, 212, 211, 211, 213, 213, 216,
	216, 226, 226, 225, 210, 210, 230, 230, 230, 230,
	230, 214, 214, 215, 215, 215, 241, 242, 240, 240,
	240, 240, 240, 221, 221, 221, 222, 222, 222, 223,
	223, 223, 243, 243, 37, 37, 37, 38, 38, 38,
	38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
	38, 38, 38, 38, 38, 38, 128, 128, 128, 39,
	40, 40, 40, 40, 40, 40, 40, 40, 165, 165,
	239, 239, 239, 239, 239, 233, 231, 231, 232, 232,
	13, 42, 42, 14, 14, 14, 14, 14, 14, 14,
	15, 15, 43, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 70, 153, 153, 151,
	151, 154, 154, 152, 152, 152, 155, 155, 155, 156,
	156, 184, 184, 184, 45, 45, 50, 50, 53, 51,
	52, 166, 166, 48, 48, 49, 49, 49, 49, 64,
	64, 257, 257, 47, 47, 46, 46, 46, 46, 16,
	258, 55, 56, 56, 57, 57, 57, 61, 61, 61,
	59, 59, 59, 60, 60, 67, 67, 66, 66, 68,
	68, 68, 68, 131, 131, 131, 132, 132, 176, 176,
	176, 175, 175, 175, 175, 72, 72, 73, 73, 74,
	74, 75, 75, 75, 75, 90, 90, 91, 91, 91,
	91, 91, 101, 101, 138, 138, 140, 140, 76, 76,
	76, 76, 77, 77, 78, 78, 79, 79, 164, 164,
	181, 181, 181, 83, 83, 83, 85, 84, 84, 84,
	84, 86, 86, 88, 88, 88, 87, 87, 89, 92,
	92, 92, 92, 93, 93, 69, 69, 69, 69, 69,
	69, 69, 150, 150, 95, 95, 94, 94, 94, 94,
	94, 94, 94, 94, 94, 94, 109, 109, 109, 109,
	109, 109, 96, 96, 96, 96, 96, 96, 96, 65,
	65, 110, 110, 110, 117, 111, 111, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 104, 104, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 259, 259, 106, 105, 105, 105, 105,
	105, 105, 62, 62, 62, 62, 62, 182, 182, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 121, 121, 63, 63, 119, 119, 120, 122,
	122, 118, 118, 118, 98, 98, 98, 98, 98, 98,
	98, 98, 100, 100, 100, 123, 123, 112, 112, 71,
	71, 124, 124, 125, 125, 126, 126, 127, 127, 130,
	130, 134, 134, 134, 135, 135, 135, 135, 136, 136,
	136, 97, 97, 97, 97, 97, 97, 137, 137, 137,
	137, 141, 141, 113, 113, 115, 115, 114, 116, 142,
	142, 145, 145, 145, 145, 144, 144, 144, 178, 178,
	178, 148, 148, 157, 157, 158, 158, 149, 149, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 163, 163,
	162, 162, 162, 159, 159, 159, 160, 160, 177, 177,
	173, 173, 174, 174, 179, 179, 180, 180, 244, 244,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 254, 255, 168, 169, 169, 169,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 4,
	4, 6, 7, 5, 10, 1, 3, 1, 3, 7,
	8, 1, 1, 9, 8, 7, 6, 6, 1, 1,
	1, 3, 1, 3, 1, 3, 0, 4, 3, 4,
	5, 4, 1, 3, 3, 2, 2, 2, 2, 2,
	1, 1, 1, 0, 2, 2, 11, 7, 9, 5,
	5, 15, 11, 0, 1, 1, 3, 2, 3, 3,
	3, 0, 1, 1, 2, 2, 2, 2, 1, 2,
	2, 3, 3, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 1, 3,
	0, 3, 1, 1, 1, 1, 1, 0, 2, 2,
	1, 1, 1, 1, 1, 4, 5, 8, 1, 2,
	5, 7, 10, 8, 11, 1, 2, 5, 2, 4,
	2, 3, 1, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 2,
	3, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 2, 1, 0, 2, 1, 3, 3,
	4, 4, 2, 4, 1, 3, 3, 3, 3, 0,
	2, 2, 2, 2, 2, 2, 3, 1, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 3, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 1, 4, 4, 3, 3, 2, 4,
	5, 2, 3, 4, 2, 2, 3, 3, 3, 3,
	3, 4, 1, 1, 1, 1, 1, 6, 6, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 1, 0, 1,
	1, 2, 2, 3, 1, 0, 3, 3, 0, 2,
	2, 2, 1, 2, 1, 2, 5, 4, 0, 1,
	1, 2, 2, 3, 2, 0, 1, 2, 3, 3,
	2, 2, 1, 1, 1, 1, 1, 0, 1, 0,
	1, 1, 3, 3, 3, 1, 10, 11, 11, 12,
	12, 1, 1, 0, 2, 2, 3, 3, 1, 1,
	2, 2, 2, 0, 1, 3, 1, 2, 3, 1,
	1, 1, 0, 2, 1, 1, 1, 6, 10, 9,
	7, 7, 7, 9, 7, 12, 14, 7, 7, 9,
	9, 10, 5, 6, 8, 7, 0, 1, 2, 4,
	7, 5, 5, 5, 12, 7, 5, 9, 0, 1,
	1, 1, 1, 1, 1, 7, 1, 3, 8, 8,
	3, 3, 5, 4, 6, 4, 4, 4, 4, 4,
	3, 2, 3, 4, 4, 3, 6, 6, 4, 4,
	4, 4, 4, 4, 3, 3, 2, 6, 2, 4,
	4, 4, 3, 7, 6, 5, 4, 2, 4, 3,
	4, 3, 3, 5, 2, 3, 3, 1, 1, 0,
	1, 1, 1, 0, 2, 2, 0, 2, 2, 0,
	2, 0, 1, 1, 2, 1, 1, 1, 2, 1,
	1, 1, 1, 3, 3, 1, 1, 1, 1, 0,
	3, 1, 1, 2, 2, 2, 2, 3, 3, 2,
	0, 2, 0, 2, 1, 2, 2, 0, 1, 1,
	0, 1, 1, 0, 1, 0, 1, 1, 3, 1,
	2, 3, 5, 2, 4, 7, 0, 1, 0, 1,
	2, 1, 1, 1, 1, 0, 2, 1, 3, 1,
	1, 1, 3, 1, 3, 2, 6, 1, 4, 6,
	3, 2, 0, 3, 1, 3, 1, 3, 4, 4,
	4, 3, 2, 4, 0, 1, 0, 2, 0, 1,
	1, 1, 1, 1, 2, 2, 1, 2, 3, 2,
	3, 2, 2, 3, 2, 1, 1, 3, 3, 0,
	5, 5, 5, 0, 2, 1, 3, 3, 2, 3,
	1, 2, 0, 3, 1, 1, 3, 3, 4, 4,
	5, 3, 4, 5, 6, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 0,
	2, 1, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 2,
	2, 2, 2, 2, 3, 1, 1, 1, 1, 1,
	1, 5, 6, 6, 6, 5, 5, 5, 6, 5,
	5, 6, 5, 5, 5, 5, 6, 5, 5, 5,
	4, 4, 5, 5, 5, 5, 5, 4, 4, 4,
	4, 4, 4, 3, 6, 6, 6, 8, 8, 8,
	8, 9, 4, 7, 5, 4, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 8, 8, 0, 2, 3, 4, 4, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 2, 1, 2, 2,
	1, 2, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 0, 3, 1, 3, 1,
	1, 0, 2, 1, 1, 0, 3, 1, 3, 2,
	2, 0, 1, 1, 0, 2, 4, 4, 0, 2,
	4, 2, 1, 3, 5, 4, 6, 1, 3, 3,
	5, 0, 5, 1, 3, 1, 2, 3, 1, 1,
	3, 3, 3, 3, 3, 1, 2, 1, 1, 1,
	1, 1, 1, 0, 2, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 1, 0, 1, 0, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 0, 1, 1,
}

var yyChk = [...]int{
	-1000, -252, -1, -2, -6, -7, -8, -9, -10, -12,
	-37, -13, -14, -15, -43, -44, -45, -50, -51, -52,
	-48, -47, -46, -16, -22, -17, -54, -3, -4, 6,
	7, -58, 9, 10, 30, -41, 127, -38, -39, -40,
	130, 129, 166, 131, 159, 61, 212, -53, 215, 216,
	-257, -166, 164, 165, 31, 32, 133, 210, 20, 37,
	-254, 8, 306, 128, 213, 161, 160, 26, 65, -253,
	421, -126, 15, -57, 5, -55, -258, -55, -55, -55,
	-55, -55, -218, -220, 65, 102, -160, 140, 83, 297,
	136, -167, 137, -159, 188, 42, 147, 146, 137, 137,
	138, 140, 297, 136, 174, 173, 137, -87, -179, 68,
	-171, 348, 150, 363, 364, 212, 223, 217, 251, 239,
	349, 365, 151, 205, 237, 240, 284, 149, 198, 366,
	271, 279, 208, 77, 215, 293, 367, 202, 204, 203,
	193, 209, 36, 162, 235, 228, 368, 356, 226, 28,
	369, 281, 256, 370, 353, 280, 227, 133, 371, 153,
	147, 176, 372, 257, 261, 373, 285, 374, 375, 376,
	221, 222, 377, 189, 287, 255, 33, 148, 350, 46,
	171, 288, 259, 37, 378, 254, 249, 379, 380, 381,
	382, 253, 220, 248, 200, 50, 263, 262, 264, 201,
	283, 242, 383, 384, 154, 385, 386, 229, 18, 387,
	388, 291, 165, 389, 390, 391, 392, 169, 393, 394,
	395, 282, 258, 260, 396, 144, 397, 173, 398, 352,
	399, 289, 225, 400, 155, 170, 164, 292, 401, 402,
	403, 404, 156, 405, 406, 407, 216, 206, 408, 409,
	410, 411, 197, 182, 295, 286, 49, 210, 268, 412,
	219, 146, 211, 413, 213, 179, 199, 274, 207, 246,
	172, 414, 415, 233, 234, 252, 218, 247, 214, 174,
	175, 166, 416, 294, 269, 354, 241, 238, 180, 417,
	140, 177, 178, 418, 275, 276, 181, 351, 290, 236,
	270, 137, 120, 240, 284, 127, 272, 273, 281, -212,
	282, 173, 176, -184, 137, -151, 271, 275, 276, 181,
	68, 138, 139, 33, 286, 285, 277, -179, -64, 131,
	167, -87, -168, -168, -168, 274, 274, -168, -34, 211,
	68, 36, -2, -149, 140, 276, 142, 214, -135, 17,
	16, -5, -3, -254, 6, 21, 22, -61, 51, 52,
	-56, -68, 111, -69, -179, -94, 85, -99, 29, 68,
	-171, 24, -98, -95, -118, -116, -117, 120, 121, 122,
	109, 110, 117, 86, 123, -104, -102, -103, -105, -107,
	-108, 70, 69, 78, 71, 72, 73, 74, 79, 80,
	81, -173, -114, -254, 55, 56, 136, 307, 308, 309,
	310, 347, 157, 311, 88, 45, 296, 305, 304, 303,
	301, 302, 298, 300, 299, 313, 314, 143, 297, 115,
	306, 336, 337, 338, 339, 340, 341, 342, 343, 345,
	346, 344, 326, 319, 320, 321, 322, 323, 324, 325,
	327, 328, 329, 330, 331, 332, 333, 334, 335, -149,
	-149, 11, -80, -81, -87, -89, -179, -142, -183, 214,
	-145, 286, 285, -118, -144, -173, -179, 284, 240, 283,
	-219, 102, -208, 68, -87, 138, -87, 306, -158, 143,
	-158, 174, 173, -158, 94, -42, -87, -157, 143, -173,
	68, -171, -157, -157, -157, -157, -157, -87, 124, -87,
	68, 30, -169, -254, -174, -173, -170, 132, 158, 84,
	355, 23, 25, 266, 319, 87, 120, 320, 321, 322,
	16, 20, 88, 119, 307, 323, 127, 59, 298, 300,
	296, 297, 272, 29, 10, 26, 160, 192, 22, 113,
	129, 91, 92, 93, 163, 24, 161, 81, 157, 19,
	62, 11, 13, 317, 318, 14, 143, 142, 104, 190,
	138, 57, 8, 123, 27, 101, 53, 324, 325, 359,
	43, 360, 55, 102, 17, 301, 302, 31, 347, 326,
	168, 361, 327, 115, 195, 60, 47, 85, 79, 34,
	82, 63, 83, 15, 191, 58, 315, 194, 362, 103,
	130, 306, 56, 136, 6, 312, 30, 159, 330, 329,
	328, 331, 196, 54, 309, 310, 332, 419, 137, 90,
	313, 314, 141, 80, 5, 42, 32, 9, 61, 64,
	303, 304, 305, 45, 334, 333, 335, 89, 12, 316,
	297, 136, 68, 173, 176, 137, 174, 140, -169, -169,
	-214, 11, 104, 179, 179, 179, 180, -169, -154, -153,
	175, 279, 280, 274, 278, 12, -70, 102, 180, 274,
	178, -169, -49, -2, -9, -7, -8, -2, 94, -168,
	-168, 30, 70, 48, -245, 65, -244, 420, -255, 67,
	137, -87, 127, 129, 132, 63, -136, 19, 31, -69,
	-179, -127, -130, -69, -172, 319, 320, 321, 322, 323,
	336, 337, 338, 324, 325, 339, 340, 341, 326, 327,
	342, 343, 345, 346, 344, 330, 329, 328, 331, 332,
	334, 333, 335, -126, -2, -55, 47, -59, 21, 22,
	76, 11, -176, 84, 83, 101, -175, 23, 68, -171,
	-172, 70, 319, 320, 321, 322, 323, 336, 337, 338,
	324, 325, 339, 340, 341, 326, 327, 342, 343, 345,
	346, 344, 330, 329, 328, 331, 332, 334, 333, 335,
	124, -69, -96, 104, 85, 102, 103, 87, 106, 105,
	116, 109, 110, 111, 112, 113, 114, 115, 107, 108,
	119, 94, 95, 96, 97, 98, 99, 100, -150, -254,
	-117, -254, 125, 126, -99, -99, -99, -99, -99, -99,
	-99, -99, -254, -2, -111, -69, -254, -254, -254, -254,
	-254, -254, -254, -254, -254, -254, -254, -121, -69, -254,
	-259, -106, -254, -259, -106, -259, -106, -259, -254, -259,
	-106, -259, -106, -259, -259, -106, -259, -254, -254, -254,
	-254, -254, -254, -254, -254, -254, -254, -254, -254, -254,
	-254, -254, -254, -254, -254, -254, -254, -254, -254, -254,
	-254, -254, -254, -254, -254, -254, -254, -254, -254, -254,
	-254, -88, 27, -87, -73, -74, -75, -76, -90, -117,
	-254, -87, -87, -80, -256, 66, 11, 64, -256, 66,
	124, 66, -142, 214, -143, -146, 287, 289, 94, -178,
	-173, 70, 29, 124, 30, 67, 66, -87, -186, -190,
	-192, -191, -193, -188, -189, 237, 240, 244, 242, 238,
	243, 120, 241, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 30, 162, 233, 234, 235, 236,
	257, 258, 259, 260, 261, 262, 263, 264, 217, 239,
	349, 218, 219, 220, 221, 222, 223, 225, 226, 227,
	228, 229, 230, 231, -173, 23, 140, 68, 85, 68,
	68, 68, -87, 68, 66, 141, -80, 24, 63, -82,
	-87, 68, 68, 68, 68, -180, -179, -170, -169, -169,
	-158, -158, -169, -169, -169, -87, -87, -87, -87, -155,
	102, 12, -155, -169, -169, 11, -152, 11, 104, -152,
	-69, -99, -156, 102, 63, 68, -32, -31, -33, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 70, 67, -111, -88, 70, -87, -169, 177, 177,
	137, 137, 182, -87, 9, 104, 66, 18, 124, 66,
	-134, 25, 26, -134, -135, -255, -61, -100, 48, 71,
	74, -60, 54, -87, -69, -69, -109, 79, 85, 80,
	81, -175, 111, -180, -174, -170, -99, -110, -114, -117,
	75, 104, 102, 103, 87, -99, -99, -99, -99, -99,
	-99, -99, -99, -99, -99, -99, -99, -99, -99, -99,
	-182, 68, 70, 68, -98, -98, -173, -59, -255, 66,
	-255, -2, -66, -68, -66, -255, -69, -69, -118, 70,
	-66, -118, 70, -66, -66, -66, -59, -119, -120, 89,
	-118, -255, -99, -173, -173, -66, -67, -66, -66, -66,
	-255, -255, -68, -66, -68, -66, -66, -255, -255, -255,
	-255, -59, -59, -66, -66, -66, -59, -66, -66, -59,
	-66, -66, -66, -66, -59, -66, -66, -66, -139, 169,
	137, -87, 30, 66, -83, -85, -84, -86, 53, 57,
	59, 54, 55, 56, 60, -164, 23, -73, -254, -91,
	169, -92, 23, -181, 61, 142, 62, -179, -172, 70,
	-139, 64, -73, -87, -73, -89, -179, 111, -145, -143,
	66, 288, 290, 291, 63, 82, -69, -199, 119, -174,
	-180, -221, -222, -223, -174, 70, 71, -208, -209, -210,
	-224, 152, -230, 144, 146, 42, -211, 153, 138, 43,
	67, -187, -200, 269, -194, 65, -194, -194, 245, 237,
	240, 238, -194, -194, -194, -194, -194, -198, 240, -198,
	-198, -198, -198, 238, 65, 65, -194, -194, -194, -202,
	65, -202, 232, -202, -203, 65, -203, -203, -203, -177,
	64, -133, -87, -169, 24, -169, -35, 185, 158, 65,
	-87, -87, -87, 66, 68, 68, -215, 11, 104, 70,
	-69, -87, -101, 23, -179, -179, -155, -65, 163, 70,
	-87, 66, 94, 67, -161, 132, 129, 130, 134, 135,
	-233, 266, 128, 240, 77, 29, 15, 307, 169, 354,
	68, 170, -87, -87, -87, -87, -87, 132, 129, 49,
	-69, -69, -130, -136, -148, 19, 11, 45, 45, -66,
	79, 80, 81, 124, -254, -110, -99, -99, -99, -65,
	84, -255, -67, -69, -255, 66, -255, -255, 66, 64,
	23, 11, 11, -255, 11, 11, -255, -255, -255, -66,
	-122, -120, 91, -69, -255, -255, 66, 66, -255, -255,
	-255, -255, -131, 315, -131, -255, -255, -255, -255, -255,
	-131, -131, -131, -131, -66, -66, -255, -255, -255, -66,
	-255, -255, -66, -255, -255, -255, -255, -66, -255, -255,
	-255, -97, 30, 45, -2, -254, -254, -87, -142, -74,
	-75, -75, -74, -75, 53, 53, 53, 58, 53, 58,
	53, -84, -181, -255, -254, 34, -181, -92, 138, 138,
	138, -93, 12, -73, -93, -93, 124, -146, -147, 292,
	289, 295, 68, 70, 124, 66, -223, 94, 65, 68,
	43, -211, -211, -216, 68, -216, 43, -204, -196, -197,
	-205, -206, -195, 79, 85, 29, 63, 266, 144, 43,
	42, 77, -201, 270, 71, -198, -198, -194, -194, -194,
	245, -194, -198, -199, 30, -199, -199, -199, -199, -198,
	-207, 70, -207, 71, -202, 71, 63, -173, -2, 23,
	-36, 8, 9, 10, -246, -247, -248, 68, 104, 190,
	191, 141, -169, -87, -169, -169, -93, 68, 68, -152,
	-155, 34, -99, -31, -98, -168, -165, -239, -211, -243,
	-210, 145, 149, 152, 153, 144, 169, -165, -239, 152,
	-211, 153, 145, -162, -211, 141, 23, -165, -165, -217,
	94, 169, -238, 64, 177, 266, 177, 50, -87, -72,
	11, 111, -174, -67, -65, 84, -99, -255, -68, -185,
	120, 237, 162, 235, 228, 255, 242, 268, 233, 269,
	-182, -185, -99, -99, -99, -99, 348, -126, 93, -69,
	90, -99, -99, -173, -254, -131, -131, -131, -131, -131,
	-255, -255, -132, -131, -132, -132, -255, -132, -132, -255,
	-132, -132, -132, -132, -255, -132, -132, -132, -141, 63,
	-142, -113, -115, -114, -254, -2, -137, -173, -140, -173,
	-93, -78, -77, 63, 64, -79, 63, -77, 53, 53,
	-140, -99, -92, -254, -254, -254, -126, -69, -93, 289,
	293, 294, -222, -223, -226, -225, -173, -230, -216, -216,
	65, 79, -99, 9, 43, 43, 70, 67, -199, -199,
	-198, -194, -199, 68, 120, -199, 67, 66, 67, 66,
	67, 66, -87, -133, -133, 63, 67, 66, -186, 68,
	68, 68, -87, -155, -99, 65, -208, -168, -216, -159,
	68, 68, -168, 68, -173, 43, 68, -87, -173, -208,
	68, -69, -173, -236, 351, -237, 68, -173, -173, -173,
	-93, -73, -255, -99, -255, -194, -194, -194, -203, -194,
	222, -194, 222, -255, -255, 19, 19, 19, 19, -254,
	-63, 312, -69, 66, 66, -126, 169, -132, -132, -132,
	-132, -132, 28, -141, 66, -255, -255, -255, 66, 124,
	-255, 66, -126, -69, 65, -69, -255, -92, -164, -138,
	-173, -138, -138, -135, 67, 66, -194, -138, -103, -199,
	-198, 70, -198, 71, 71, 65, -2, -87, -249, -250,
	-251, 77, 350, 85, 192, 193, 154, 194, 195, 196,
	-248, -186, -186, -186, -208, -128, 157, 158, -177, -213,
	-211, 68, -163, 141, 23, 141, -128, -208, 27, -235,
	-234, -174, 65, 64, -123, 13, -198, 68, -99, -99,
	-99, -99, -99, -255, 70, -99, -99, -255, 16, 43,
	-115, 45, -2, -254, -173, -173, -173, -135, -138, -91,
	-181, 66, -255, -255, -255, -228, -227, 64, 148, 77,
	-225, -134, 67, -199, -199, 67, 67, -226, -133, 19,
	-133, -251, 70, 196, 192, 196, 196, 196, 196, 197,
	67, -168, 68, 65, -216, 68, -173, -168, -128, -254,
	66, 94, -138, -87, -124, 14, 16, -255, -255, -255,
	-255, -62, 104, 351, -255, -255, -111, 9, -113, -2,
	124, 67, -92, -173, -227, 68, -217, 70, 155, 67,
	183, -23, -2, -7, -8, -9, -10, -12, -37, -13,
	-14, -20, -21, -15, -43, -44, -53, -51, -52, -48,
	-47, -22, -17, -24, 88, 143, 212, 36, 36, 188,
	189, -168, -226, -177, -168, -231, -232, 169, -234, -223,
	67, -125, -69, -172, -112, -71, -69, -172, -255, 349,
	60, 352, -126, -142, -255, -173, 71, -87, -229, -228,
	184, -133, -69, -69, -26, -23, 67, 65, -255, 66,
	-173, -238, 66, 50, 350, 353, -255, 65, -129, 186,
	187, -27, -28, 89, 90, 421, -229, -226, -232, 45,
	-236, -71, 50, -138, -133, 68, 68, 93, 91, -28,
	-69, -25, -19, -2, -7, -8, -9, -10, -20, -21,
	-22, -18, 212, 93, -23, 67, 171, 351, 67, -11,
	-18, -10, -7, -8, -9, 88, -25, 90, 421, -25,
	-229, 172, 352, -241, -242, 63, -133, 421, -25, 93,
	91, -29, -19, -30, 92, 421, -254, 353, -242, 63,
	-241, 63, 10, 9, 93, 421, 143, -25, 93, 91,
	-30, -69, 93, -99, 168, -240, 156, 151, 154, 30,
	-240, 88, 421, 143, -25, 90, -255, -255, 150, 29,
	79, 93, 421, -25, 143, 93, 421, 143,
}

var yyDef = [...]int{
	28, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 795, 0, 500,
	500, 500, 500, 500, 500, 0, -2, 364, 365, 366,
	0, 0, 0, 0, -2, 475, 476, 477, 479, 480,
	489, -2, 1233, 1233, 0, 0, 1233, 0, 0, 0,
	0, 41, 42, 847, 0, 492, 481, 482, 1231, 1,
	3, 804, 0, 0, 504, 507, 502, 0, 847, 847,
	0, 0, 74, 75, 0, 0, 0, 0, 0, 845,
	845, 0, 845, 867, 0, 863, 864, 865, 0, 843,
	0, 843, 843, 843, 843, 843, 0, 421, 586, 874,
	875, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021,
	1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031,
	1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041,
	1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051,
	1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061,
	1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071,
	1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081,
	1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091,
	1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101,
	1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111,
	1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121,
	1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131,
	1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141,
	1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151,
	1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161,
	1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171,
	1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181,
	1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191,
	1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201,
	1202, 0, 0, 0, 1234, 0, 1234, 1234, 436, 0,
	438, 0, 0, 0, 1234, 0, 447, 0, 0, 454,
	1234, 322, 323, 324, 472, 473, 460, 474, 0, 0,
	0, 493, 494, 495, 496, 1233, 1233, 499, 158, 0,
	178, 878, 35, 0, 0, 0, 848, 478, 808, 0,
	0, 795, 37, 0, 500, 505, 506, 510, 508, 509,
	501, 0, 519, 528, 0, 595, 0, 600, 602, -2,
	-2, 0, 637, 638, 639, 640, 641, 0, 0, 0,
	0, 0, 0, 0, 0, 665, 666, 667, 668, 669,
	670, 774, 775, 776, 777, 778, 779, 780, 781, 604,
	605, 771, 828, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 762, 0, 733, 733, 733, 733,
	733, 733, 733, 733, 733, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 52, 54, 586, 58, 0, 1180,
	829, -2, -2, 0, 0, 771, 0, -2, 1027, -2,
	0, 0, 204, 0, 202, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 410, 0, 0, 0, 0,
	870, 871, 0, 0, 0, 0, 0, 420, 0, 422,
	1234, 1234, 425, 1235, 1236, 872, 873, 880, 881, 882,
	883, 884, 885, 886, 887, 888, 889, 890, 891, 892,
	893, 894, 895, 896, 897, 898, 899, 900, 901, 902,
	903, 904, 905, 906, 907, 908, 909, 910, 911, 912,
	913, 914, 915, 916, 917, 918, 919, 920, 921, 922,
	923, 924, 925, 926, 927, 928, 929, 930, 931, 932,
	933, 934, 935, 936, 937, 938, 939, 940, 941, 942,
	943, 944, 945, 946, 947, 948, 949, 950, 951, 952,
	953, 954, 955, 956, 957, 958, 959, 960, 961, 962,
	963, 964, 965, 966, 967, 968, 969, 970, 971, 972,
	973, 974, 975, 976, 977, 978, 979, 980, 981, 982,
	983, 984, 985, 986, 987, 988, 989, 990, 991, 992,
	993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002,
	1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012,
	845, 845, 1234, 1234, 1234, 0, 0, 0, 434, 435,
	0, 341, 342, 466, 466, 1234, 1234, 442, 0, 463,
	463, 461, 462, 457, 458, 0, 449, 0, 469, 451,
	452, 455, 483, -2, 486, 487, 488, -2, 0, 497,
	498, 0, 160, 0, 177, 0, 0, 0, 36, 1232,
	0, 1234, 0, 0, 0, 0, 30, 0, 0, 805,
	0, 796, 797, 801, 801, 1203, 1204, 1205, 1206, 1207,
	1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217,
	1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227,
	1228, 1229, 1230, 804, 35, 507, 0, 513, 511, 512,
	503, 0, 520, 0, 0, 0, 529, 0, 531, 532,
	533, 534, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210,
	1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220,
	1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230,
	0, 598, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 622, 623, 624, 625, 626, 627, 628, 601, 0,
	615, 0, 0, 0, 657, 658, 659, 660, 661, 662,
	663, 0, 510, 35, 0, 635, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 510, 0, 763, 0,
	716, 725, 0, 717, 726, 718, 727, 719, 0, 720,
	728, 721, 729, 722, 723, 730, 724, 0, 0, 0,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 510, 510, 0, 0, 0, 510,
	0, 0, 510, 0, 0, 0, 0, 510, 0, 0,
	0, 56, 0, 585, 0, 537, 539, 540, 541, -2,
	0, 589, -2, 0, 0, 0, 48, 49, 0, 0,
	0, 0, 59, 1180, 61, 62, 0, 0, 0, 298,
	838, 839, 840, 0, 836, 353, 0, 0, 209, 286,
	217, 218, 219, 279, 221, 279, 279, 0, 279, 279,
	279, 279, 279, 295, 295, 295, 295, 295, 262, 263,
	264, 265, 266, 0, 0, 239, 279, 279, 279, 243,
	269, 270, 271, 272, 273, 274, 275, 276, 222, 223,
	224, 225, 226, 227, 228, 229, 230, 281, 281, 281,
	283, 283, 283, 283, 868, 73, 0, 1234, 0, 1234,
	0, 0, 200, 131, 0, 0, 413, 844, 0, 415,
	50, 416, 417, 418, 419, 587, 876, 877, 423, 424,
	0, 0, 428, 429, 430, 431, 432, 433, 343, 439,
	0, 0, 440, 441, 446, 0, 552, 0, 0, 466,
	448, 629, 450, 0, 0, 490, 159, 162, 0, 165,
	166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
	176, 161, 179, 0, 29, 879, 0, 389, 0, 0,
	0, 0, 0, 0, 809, 0, 0, 0, 0, 0,
	799, 802, 803, 800, 808, 38, 510, 0, 782, 0,
	0, 0, 514, 33, 596, 597, 599, 616, 0, 618,
	620, 530, 521, 0, 772, -2, 606, 607, 631, 632,
	633, 0, 0, 0, 0, 629, 611, 0, 642, 643,
	644, 645, 646, 647, 648, 649, 650, 651, 652, 653,
	656, 747, 748, 0, 654, 655, 664, 515, 634, 0,
	827, 35, 0, 517, 0, 703, 0, 0, 639, 774,
	0, 639, 774, 0, 0, 0, 0, 769, 766, 0,
	0, 734, 0, 0, 0, 0, 0, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 584, 0, 0, 0, 0, 0, 0, 573, 0,
	0, 576, 0, 0, 0, 0, 569, 0, 0, 545,
	1119, 547, 0, 589, 0, 0, 0, 570, 571, 572,
	593, 0, 593, 53, 593, 55, 0, 588, 830, 60,
	0, 0, 65, 66, 831, 832, 833, 834, 0, 772,
	0, 201, 354, 356, 359, 360, 361, 205, 206, 207,
	0, 0, 335, 0, 0, 329, 329, 0, 325, 326,
	203, 208, 288, 287, 220, 0, 295, 295, 279, 279,
	279, 279, 248, 295, 251, 254, 255, 298, 0, 298,
	298, 298, 298, 295, 0, 0, 240, 241, 242, 231,
	0, 232, 281, 234, 235, 0, 236, 237, 238, 0,
	0, 0, 0, 79, 846, 80, 0, 132, 133, 83,
	0, 411, 1234, 0, 1234, 1234, 593, 0, 0, 467,
	468, 463, 466, 0, 464, 465, 445, 456, 0, 470,
	453, 0, 0, 180, 1233, -2, 398, 860, 398, 398,
	382, 315, 849, 850, 851, 852, 853, 854, 855, 856,
	857, 0, 192, 391, 393, 392, 396, 0, 0, 0,
	806, 807, 798, 31, 0, 841, 842, 783, 784, 535,
	617, 619, 621, 0, 515, 608, 629, 612, 0, 609,
	0, 603, 0, 636, -2, 0, 701, 702, 0, 0,
	0, 0, 0, 740, 0, 0, 741, 0, 712, 795,
	0, 767, 0, 0, 715, 735, 0, 0, 736, 737,
	738, 739, 690, 0, 691, 0, 0, 0, 0, 0,
	697, 698, 699, 700, 0, 0, 526, 526, 526, 0,
	526, 526, 0, 526, 526, 526, 526, 0, 526, 526,
	526, 821, 0, 0, -2, 0, 0, 583, 593, 538,
	564, 566, 0, 561, 574, 575, 577, 0, 579, 0,
	581, 582, 542, 544, 0, 0, 589, 551, 0, 0,
	0, 795, 0, 593, 46, 47, 0, 63, 64, 0,
	0, 70, 299, 300, 0, 0, 357, 0, 0, 0,
	317, 329, 329, 320, 330, 321, 0, 210, 211, 212,
	213, 214, 215, 290, 0, 0, 0, 294, 0, 302,
	304, 0, 216, 289, 0, 298, 298, 295, 246, 247,
	279, 252, 298, 256, 0, 257, 258, 259, 260, 298,
	0, 277, 0, 0, 233, 0, 0, 869, -2, 73,
	0, 134, 135, 136, 0, 84, 85, 0, 0, 0,
	0, 0, 414, 51, 426, 427, 437, 344, 345, 466,
	444, 0, 630, 163, 164, 367, 0, 1233, 329, 0,
	383, 399, 400, 401, 402, 403, 404, 0, 1233, 401,
	0, 402, 0, 0, 0, 861, 862, 0, 0, 0,
	316, 0, 195, 0, 0, 0, 0, 810, 32, 593,
	0, 522, 773, 0, 610, 0, 613, 671, 518, 0,
	279, 279, 752, 279, 283, 755, 279, 757, 279, 760,
	0, 0, 0, 0, 0, 0, 0, 764, 714, 770,
	0, 0, 0, 523, 795, 692, 693, 694, 695, 696,
	526, 526, 675, 527, 676, 677, 526, 679, 680, 526,
	682, 683, 684, 685, 526, 687, 688, 689, 39, 0,
	821, 811, 823, 825, 0, 35, 0, 817, 0, 556,
	795, 558, 565, 0, 0, 559, 0, 560, 578, 580,
	0, -2, 550, 0, 0, 0, 804, 594, 45, 67,
	68, 69, 355, 358, 0, 331, 279, 334, 318, 319,
	0, 291, 292, 0, 301, 303, 305, 280, 244, 245,
	298, 253, 249, 296, 297, 261, 295, 0, 295, 0,
	284, 0, 0, 77, 0, 0, 91, 0, 87, 0,
	0, 0, 412, 443, 553, 0, 386, 370, 868, 327,
	363, 371, 372, 377, 378, 0, 0, 374, 0, 386,
	0, 385, 0, 390, 0, 193, 194, 0, 0, 395,
	785, 536, 672, 614, 704, 749, 295, 753, 754, 756,
	758, 759, 761, 706, 705, 0, 0, 0, 0, 0,
	0, 0, 768, 0, 0, 0, 0, 673, 674, 678,
	681, 686, 0, 40, 0, 826, -2, 0, 0, 0,
	57, 0, 804, 562, 0, 567, 589, 548, 0, 0,
	554, 0, 0, 44, 307, 0, 801, 0, 293, 250,
	298, 278, 298, 0, 0, 0, -2, 0, 73, 92,
	93, 0, 0, 0, 98, 0, 0, 0, 0, 0,
	86, 88, 89, 90, 0, 1233, 387, 0, 0, 329,
	328, 384, 0, 858, 859, 0, 1233, 386, 0, 196,
	197, 0, 0, 0, 791, 0, 750, 751, 0, 0,
	0, 0, 742, 713, 765, 0, 0, 524, 0, 0,
	824, 0, -2, 0, 819, 818, 557, 43, 0, 546,
	589, 0, 590, 591, 592, 306, 310, 0, 315, 0,
	332, 333, 0, 267, 268, 282, 285, 0, 78, 0,
	0, 94, 95, 96, 97, 99, 100, 0, 0, 0,
	1233, 369, 388, 0, 868, 373, 379, 380, 1233, 0,
	0, 0, 0, 397, 34, 0, 0, 707, 709, 708,
	710, 0, 0, 0, 731, 732, 795, 0, 814, 35,
	0, 563, 549, 555, 311, 312, 0, 314, 0, 308,
	0, 73, -2, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
	123, 124, 125, 126, 0, 0, 0, 101, 102, 103,
	104, 368, 0, 0, 381, 0, 406, 0, 198, 199,
	192, 792, 793, 794, 786, 787, 789, 790, 711, 0,
	0, 0, 0, 822, -2, 820, 313, 0, 76, 309,
	137, 82, 0, 0, 0, 128, 308, 0, 405, 0,
	0, 195, 0, 743, 0, 746, 525, 0, 73, 0,
	0, 0, 148, 0, 0, 0, 375, 0, 407, 0,
	394, 788, 744, 0, 0, 138, 139, 0, 0, 149,
	0, 0, 181, -2, 184, 185, 186, 187, 188, 189,
	190, 191, 0, 127, 129, 308, 0, 0, 336, 73,
	140, 141, 142, 143, 144, 146, 0, 0, 0, 0,
	376, 0, 0, 337, 338, 0, 81, 0, 0, 0,
	0, 0, 182, 155, 0, 0, 0, 745, 339, 0,
	340, 0, 0, 0, 0, 150, 151, 0, 0, 0,
	156, 0, 145, 0, 0, 346, 348, 349, 0, 0,
	347, 147, 0, 153, 0, 0, 408, 409, 350, 351,
	352, 0, 0, 0, 152, 0, 157, 154,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 86, 3, 3, 3, 114, 106, 3,
	65, 67, 111, 109, 66, 110, 124, 112, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 421,
	95, 94, 96, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 116, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 117,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 87, 88, 89, 90, 91, 92, 93, 97, 98,
	99, 100, 101, 102, 103, 104, 107, 108, 113, 115,
	118, 119, 120, 121, 122, 123, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:381
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:386
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:387
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:391
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:418
		{
			setParseTree(yylex, nil)
		}
	case 29:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:424
		{
			yyVAL.statement = &Load{Infile: yyDollar[3].str, Table: yyDollar[4].tableName}
		}
	case 30:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:430
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:438
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:442
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 33:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:448
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 34:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:455
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:461
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:465
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:471
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:475
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:482
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].setExprs)
			yyVAL.statement = ins
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:494
		{
			cols := make(Columns, 0, len(yyDollar[7].setExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].setExprs))
			for _, updateList := range yyDollar[7].setExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].setExprs)}
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:506
		{
			yyVAL.str = InsertStr
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:510
		{
			yyVAL.str = ReplaceStr
		}
	case 43:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:516
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].setExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 44:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:522
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 45:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:526
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 46:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:530
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:534
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:539
		{
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:540
		{
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:544
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName.ToViewName()}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:548
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName.ToViewName())
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:554
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:558
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:564
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:568
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 56:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:573
		{
			yyVAL.partitions = nil
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:577
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:583
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 59:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:587
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 60:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:591
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 61:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:595
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:601
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:605
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:611
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:615
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:619
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:625
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:629
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:633
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:637
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:643
		{
			yyVAL.str = SessionStr
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:647
		{
			yyVAL.str = GlobalStr
		}
	case 73:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:652
		{
			yyVAL.int = yyPosition(yylex)
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:658
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			if len(yyDollar[1].ddl.TableSpec.Constraints) > 0 {
				yyDollar[1].ddl.ConstraintAction = AddStr
			}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:666
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 76:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:672
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: yyDollar[4].colIdent, Using: yyDollar[5].colIdent, Type: yyDollar[2].str, Columns: yyDollar[9].indexColumns, Options: yyDollar[11].indexOptions}}
		}
	case 77:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:676
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[3].tableName.ToViewName(), ViewExpr: yyDollar[6].selStmt, SubStatementPositionStart: yyDollar[5].int, SubStatementPositionEnd: yyDollar[7].int - 1}
		}
	case 78:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:680
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[5].tableName.ToViewName(), ViewExpr: yyDollar[8].selStmt, SubStatementPositionStart: yyDollar[7].int, SubStatementPositionEnd: yyDollar[9].int - 1, OrReplace: true}
		}
	case 79:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:684
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes), IfNotExists: ne}
		}
	case 80:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:692
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes), IfNotExists: ne}
		}
	case 81:
		yyDollar = yyS[yypt-15 : yypt+1]
//line sql.y:700
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[8].tableName, TriggerSpec: &TriggerSpec{Name: string(yyDollar[4].bytes), Time: yyDollar[5].str, Event: yyDollar[6].str, Order: yyDollar[12].triggerOrder, Body: yyDollar[14].statement}, SubStatementPositionStart: yyDollar[13].int, SubStatementPositionEnd: yyDollar[15].int - 1}
		}
	case 82:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:704
		{
			yyVAL.statement = &DDL{Action: CreateStr, ProcedureSpec: &ProcedureSpec{Name: string(yyDollar[4].bytes), Definer: yyDollar[2].str, Params: yyDollar[6].procedureParams, Characteristics: yyDollar[8].characteristics, Body: yyDollar[10].statement}, SubStatementPositionStart: yyDollar[9].int, SubStatementPositionEnd: yyDollar[11].int - 1}
		}
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:709
		{
			yyVAL.procedureParams = nil
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:713
		{
			yyVAL.procedureParams = yyDollar[1].procedureParams
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:719
		{
			yyVAL.procedureParams = []ProcedureParam{yyDollar[1].procedureParam}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:723
		{
			yyVAL.procedureParams = append(yyVAL.procedureParams, yyDollar[3].procedureParam)
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:729
		{
			yyVAL.procedureParam = ProcedureParam{Direction: ProcedureParamDirection_In, Name: string(yyDollar[1].bytes), Type: yyDollar[2].columnType}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:733
		{
			yyVAL.procedureParam = ProcedureParam{Direction: ProcedureParamDirection_In, Name: string(yyDollar[2].bytes), Type: yyDollar[3].columnType}
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:737
		{
			yyVAL.procedureParam = ProcedureParam{Direction: ProcedureParamDirection_Inout, Name: string(yyDollar[2].bytes), Type: yyDollar[3].columnType}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:741
		{
			yyVAL.procedureParam = ProcedureParam{Direction: ProcedureParamDirection_Out, Name: string(yyDollar[2].bytes), Type: yyDollar[3].columnType}
		}
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:746
		{
			yyVAL.characteristics = nil
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:750
		{
			yyVAL.characteristics = yyDollar[1].characteristics
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:756
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:760
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[2].characteristic)
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:766
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_Comment, Comment: string(yyDollar[2].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:770
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_LanguageSql}
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:774
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_NotDeterministic}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:778
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_Deterministic}
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:782
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_ContainsSql}
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:786
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_NoSql}
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:790
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_ReadsSqlData}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:794
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_ModifiesSqlData}
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:798
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_SqlSecurityDefiner}
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:802
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_SqlSecurityInvoker}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:808
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:835
		{
			yyVAL.statement = &BeginEndBlock{Statements: yyDollar[2].statements}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:841
		{
			yyVAL.statements = Statements{yyDollar[1].statement}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:845
		{
			yyVAL.statements = append(yyVAL.statements, yyDollar[3].statement)
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:850
		{
			yyVAL.str = ""
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:854
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:860
		{
			yyVAL.str = BeforeStr
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:864
		{
			yyVAL.str = AfterStr
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:870
		{
			yyVAL.str = InsertStr
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:874
		{
			yyVAL.str = UpdateStr
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:878
		{
			yyVAL.str = DeleteStr
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:883
		{
			yyVAL.triggerOrder = nil
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:887
		{
			yyVAL.triggerOrder = &TriggerOrder{PrecedesOrFollows: FollowsStr, OtherTriggerName: string(yyDollar[2].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:891
		{
			yyVAL.triggerOrder = &TriggerOrder{PrecedesOrFollows: PrecedesStr, OtherTriggerName: string(yyDollar[2].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:897
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 145:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:907
		{
			yyVAL.statement = &BeginEndBlock{Statements: yyDollar[2].statements}
		}
	case 146:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:913
		{
			yyVAL.statement = &CaseStatement{Expr: yyDollar[2].expr, Cases: yyDollar[3].caseStatementCases}
		}
	case 147:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:917
		{
			yyVAL.statement = &CaseStatement{Expr: yyDollar[2].expr, Cases: yyDollar[3].caseStatementCases, Else: yyDollar[5].statements}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:923
		{
			yyVAL.caseStatementCases = []CaseStatementCase{yyDollar[1].caseStatementCase}
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:927
		{
			yyVAL.caseStatementCases = append(yyVAL.caseStatementCases, yyDollar[2].caseStatementCase)
		}
	case 150:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:933
		{
			yyVAL.caseStatementCase = CaseStatementCase{Case: yyDollar[2].expr, Statements: yyDollar[4].statements}
		}
	case 151:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:939
		{
			conds := []IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}
			yyVAL.statement = &IfStatement{Conditions: conds}
		}
	case 152:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:944
		{
			conds := []IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}
			yyVAL.statement = &IfStatement{Conditions: conds, Else: yyDollar[7].statements}
		}
	case 153:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:949
		{
			conds := yyDollar[6].ifStatementConditions
			conds = append([]IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}, conds...)
			yyVAL.statement = &IfStatement{Conditions: conds}
		}
	case 154:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:955
		{
			conds := yyDollar[6].ifStatementConditions
			conds = append([]IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}, conds...)
			yyVAL.statement = &IfStatement{Conditions: conds, Else: yyDollar[8].statements}
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:963
		{
			yyVAL.ifStatementConditions = []IfStatementCondition{yyDollar[1].ifStatementCondition}
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:967
		{
			yyVAL.ifStatementConditions = append(yyVAL.ifStatementConditions, yyDollar[2].ifStatementCondition)
		}
	case 157:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:973
		{
			yyVAL.ifStatementCondition = IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:979
		{
			yyVAL.statement = &Signal{SqlStateValue: string(yyDollar[2].bytes)}
		}
	case 159:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:983
		{
			yyVAL.statement = &Signal{SqlStateValue: string(yyDollar[2].bytes), Info: yyDollar[4].signalInfos}
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:989
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:993
		{
			yyVAL.bytes = yyDollar[3].bytes
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:999
		{
			yyVAL.signalInfos = []SignalInfo{yyDollar[1].signalInfo}
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1003
		{
			yyVAL.signalInfos = append(yyVAL.signalInfos, yyDollar[3].signalInfo)
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1009
		{
			yyVAL.signalInfo = SignalInfo{Name: string(yyDollar[1].bytes), Value: yyDollar[3].expr.(*SQLVal)}
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1015
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1032
		{
			yyVAL.statement = &Call{FuncName: string(yyDollar[2].bytes), Params: yyDollar[3].exprs}
		}
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1037
		{
			yyVAL.exprs = nil
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1041
		{
			yyVAL.exprs = nil
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1045
		{
			yyVAL.exprs = yyDollar[2].exprs
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1051
		{
			yyVAL.statements = Statements{yyDollar[1].statement}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1055
		{
			yyVAL.statements = append(yyVAL.statements, yyDollar[3].statement)
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1061
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 192:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1074
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1078
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1084
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 195:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1089
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1094
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1100
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1105
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1111
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 200:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1117
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName, IfNotExists: ne}
			setDDL(yylex, yyVAL.ddl)
		}
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1128
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1135
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 203:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1139
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1145
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1150
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1154
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1158
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1164
		{
			if err := yyDollar[2].columnType.merge(yyDollar[3].columnType); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 209:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1173
		{
			yyVAL.columnType = ColumnType{}
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1177
		{
			opt := ColumnType{NotNull: yyDollar[2].boolVal, sawnull: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1186
		{
			opt := ColumnType{Default: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1195
		{
			opt := ColumnType{OnUpdate: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1204
		{
			opt := ColumnType{Autoincrement: yyDollar[2].boolVal, sawai: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1213
		{
			opt := ColumnType{KeyOpt: yyDollar[2].colKeyOpt}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1222
		{
			opt := ColumnType{Comment: yyDollar[2].sqlVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1233
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1244
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1249
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1255
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1259
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1263
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1267
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1271
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1275
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1279
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1283
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1287
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1293
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1299
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1305
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1311
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1317
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1323
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1329
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1335
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1343
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1347
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1351
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1355
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1359
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1365
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1369
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1373
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1377
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1381
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1385
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 250:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1389
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1393
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1397
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1401
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Length: yyDollar[4].sqlVal}
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1405
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1409
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1413
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1417
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1421
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1425
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1429
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1433
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1437
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1441
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1445
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1449
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1453
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1457
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 268:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1462
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1468
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1472
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1476
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1480
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1484
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1488
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1492
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1496
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1502
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[1].bytes))
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1507
		{
			yyVAL.strs = append(yyDollar[1].strs, string(yyDollar[3].bytes))
		}
	case 279:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1512
		{
			yyVAL.sqlVal = nil
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1516
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 281:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1521
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 282:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1525
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 283:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1533
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1537
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 285:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1543
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 286:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1551
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1555
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1560
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1564
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1571
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1575
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1581
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1587
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1593
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1598
		{
			yyVAL.str = ""
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1602
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1606
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1611
		{
			yyVAL.str = ""
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1615
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1619
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1625
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1629
		{
			yyVAL.colKeyOpt = colKey
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1633
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1637
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1643
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 306:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1649
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 307:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1653
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1658
		{
			yyVAL.indexOptions = nil
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1662
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1668
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1672
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1678
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1682
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1687
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1693
		{
			yyVAL.str = ""
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1697
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1703
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1707
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1711
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1715
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1719
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1725
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1729
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1733
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1739
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1743
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1748
		{
			yyVAL.str = ""
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1752
		{
			yyVAL.str = yyDollar[1].str
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1757
		{
			yyVAL.str = ""
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1761
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1767
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1771
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1777
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal, Order: yyDollar[3].str}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1783
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1787
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 336:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1794
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 337:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1798
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 338:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1802
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 339:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1806
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 340:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1810
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[12].ReferenceAction, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1816
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1820
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1825
		{
			yyVAL.str = ""
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1829
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1833
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1839
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1845
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1851
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1855
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1859
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1863
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1867
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 353:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1872
		{
			yyVAL.str = ""
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1876
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1880
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1888
		{
			yyVAL.str = yyDollar[1].str
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1892
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1896
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1902
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1906
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1910
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1915
		{
			yyVAL.str = ""
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1919
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 367:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1930
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 368:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1934
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			ddl.Column = yyDollar[8].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 369:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1941
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 370:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1948
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 371:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1952
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: DropStr, Column: NewColIdent(string(yyDollar[7].bytes)), Table: yyDollar[4].tableName}
		}
	case 372:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1956
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 373:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1960
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: RenameStr, Table: yyDollar[4].tableName, Column: NewColIdent(string(yyDollar[7].bytes)), ToColumn: NewColIdent(string(yyDollar[9].bytes))}
		}
	case 374:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1964
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 375:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1969
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[7].str), Using: yyDollar[8].colIdent, Columns: yyDollar[10].indexColumns, Options: yyDollar[12].indexOptions}}
		}
	case 376:
		yyDollar = yyS[yypt-14 : yypt+1]
//line sql.y:1973
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[9].str), Type: yyDollar[7].str, Using: yyDollar[10].colIdent, Columns: yyDollar[12].indexColumns, Options: yyDollar[14].indexOptions}}
		}
	case 377:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1977
		{
			yyVAL.statement = &DDL{Action: AlterStr, ConstraintAction: DropStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[7].bytes)}}}}
		}
	case 378:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1982
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[7].colIdent}}
		}
	case 379:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1986
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: RenameStr, FromName: yyDollar[7].colIdent, ToName: yyDollar[9].colIdent}}
		}
	case 380:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1990
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ModifyStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 381:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1997
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ChangeStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, Column: NewColIdent(string(yyDollar[7].bytes)), ColumnOrder: yyDollar[9].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			yyVAL.statement = ddl
		}
	case 382:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2003
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 383:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2007
		{
			ddl := &DDL{Action: AlterStr, ConstraintAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddConstraint(yyDollar[6].constraintDefinition)
			yyVAL.statement = ddl
		}
	case 384:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2013
		{
			yyVAL.statement = &DDL{Action: AlterStr, ConstraintAction: DropStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[8].bytes), Details: &ForeignKeyDefinition{}}}}}
		}
	case 385:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2018
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, AutoIncSpec: &AutoIncSpec{Value: yyDollar[7].expr}}
		}
	case 386:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2023
		{
			yyVAL.columnOrder = nil
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2027
		{
			yyVAL.columnOrder = &ColumnOrder{First: true}
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2031
		{
			yyVAL.columnOrder = &ColumnOrder{AfterColumn: NewColIdent(string(yyDollar[2].bytes))}
		}
	case 389:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2037
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 390:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2043
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 391:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2055
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 392:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2065
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 393:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2069
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 394:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:2073
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 395:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2086
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 396:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2096
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 397:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2100
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 398:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2113
		{
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2115
		{
		}
	case 405:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2126
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2132
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2136
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 408:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2142
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 409:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2146
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2152
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2158
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 412:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2162
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 413:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2170
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 414:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2178
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[3].colIdent}}
		}
	case 415:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2182
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromViews: yyDollar[4].tableNames, IfExists: exists}
		}
	case 416:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2190
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes), IfExists: exists}
		}
	case 417:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2198
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes), IfExists: exists}
		}
	case 418:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2206
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, TriggerSpec: &TriggerSpec{Name: string(yyDollar[4].bytes)}, IfExists: exists}
		}
	case 419:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2214
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, ProcedureSpec: &ProcedureSpec{Name: string(yyDollar[4].bytes)}, IfExists: exists}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2224
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2228
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2233
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 423:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2239
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 424:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2244
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2248
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 426:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2252
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 427:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2256
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 428:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2261
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 429:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2265
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 430:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2269
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 431:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2273
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 432:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2277
		{
			yyVAL.statement = &Show{Type: CreateTriggerStr, Table: yyDollar[4].tableName}
		}
	case 433:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2281
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2285
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2289
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2293
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 437:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2297
		{
			yyVAL.statement = &Show{Type: IndexStr, Table: yyDollar[4].tableName, Database: yyDollar[5].str, ShowIndexFilterOpt: yyDollar[6].expr}
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2301
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 439:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2305
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), ProcFuncFilter: yyDollar[4].showFilter}
		}
	case 440:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2309
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), ProcFuncFilter: yyDollar[4].showFilter}
		}
	case 441:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2313
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2317
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 443:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2321
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 444:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2326
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[6].showFilter, AsOf: yyDollar[5].expr}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 445:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2336
		{
			yyVAL.statement = &Show{Type: string(yyDollar[3].bytes), ShowTablesOpt: &ShowTablesOpt{DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}}
		}
	case 446:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2340
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2344
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 448:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2348
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2354
		{
			// Cannot dereference $3 directly, or else the parser stackcannot be pooled. See yyParsePooled
			cmp := yyDollar[3].expr.(*ComparisonExpr)
			cmp.Left = &ColName{Name: NewColIdent("collation")}
			var ex Expr = cmp
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &ex}
		}
	case 450:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2362
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2367
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2371
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 453:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2375
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2379
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2393
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2399
		{
			yyVAL.expr = &ComparisonExpr{Operator: LikeStr, Right: yyDollar[2].expr, Escape: yyDollar[3].expr}
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2405
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2409
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 459:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2415
		{
			yyVAL.str = ""
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2419
		{
			yyVAL.str = "full "
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2425
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2429
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 463:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2435
		{
			yyVAL.str = ""
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2439
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2443
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2449
		{
			yyVAL.showFilter = nil
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2453
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2457
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 469:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2463
		{
			yyVAL.showFilter = nil
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2467
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 471:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2473
		{
			yyVAL.str = ""
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2477
		{
			yyVAL.str = SessionStr
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2481
		{
			yyVAL.str = GlobalStr
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2487
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2491
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2497
		{
			yyVAL.statement = &Begin{}
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2501
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2507
		{
			yyVAL.statement = &Begin{}
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2513
		{
			yyVAL.statement = &Commit{}
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2519
		{
			yyVAL.statement = &Rollback{}
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2524
		{
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2525
		{
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2529
		{
			yyVAL.statement = &Explain{ExplainFormat: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2533
		{
			yyVAL.statement = &Explain{Analyze: true, ExplainFormat: TreeStr, Statement: yyDollar[3].selStmt}
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2539
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 489:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2547
		{
			yyVAL.str = ""
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2551
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2562
		{
			yyVAL.statement = &Show{Type: "columns", OnTable: yyDollar[2].tableName}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2566
		{
			yyVAL.statement = &OtherRead{}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2572
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2576
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2580
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2584
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2590
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 500:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2594
		{
			setAllowComments(yylex, true)
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2598
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 502:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2604
		{
			yyVAL.bytes2 = nil
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2608
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2614
		{
			yyVAL.str = UnionStr
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2618
		{
			yyVAL.str = UnionAllStr
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2622
		{
			yyVAL.str = UnionDistinctStr
		}
	case 507:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2627
		{
			yyVAL.str = ""
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2631
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2635
		{
			yyVAL.str = SQLCacheStr
		}
	case 510:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2640
		{
			yyVAL.str = ""
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2644
		{
			yyVAL.str = ""
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2648
		{
			yyVAL.str = DistinctStr
		}
	case 513:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2653
		{
			yyVAL.str = ""
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2657
		{
			yyVAL.str = StraightJoinHint
		}
	case 515:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2662
		{
			yyVAL.selectExprs = nil
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2666
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2672
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2676
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2682
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2686
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2690
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 522:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2694
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2701
		{
			yyVAL.over = &Over{WindowName: yyDollar[2].colIdent}
		}
	case 524:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2705
		{
			yyVAL.over = &Over{OrderBy: yyDollar[3].orderBy}
		}
	case 525:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2709
		{
			yyVAL.over = &Over{PartitionBy: yyDollar[5].exprs, OrderBy: yyDollar[6].orderBy}
		}
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2714
		{
			yyVAL.over = nil
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2718
		{
			yyVAL.over = yyDollar[1].over
		}
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2723
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2727
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2731
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2737
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2741
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2745
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2749
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 535:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2754
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2758
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2764
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2768
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2778
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2782
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2786
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2792
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2798
		{
			yyVAL.aliasedTableName = yyDollar[2].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
		}
	case 546:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2803
		{
			yyVAL.aliasedTableName = yyDollar[6].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
			yyVAL.aliasedTableName.Partitions = yyDollar[4].partitions
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2814
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Hints: yyDollar[1].indexHints}
		}
	case 548:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2818
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, Hints: yyDollar[4].indexHints}
		}
	case 549:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2822
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, As: yyDollar[5].tableIdent, Hints: yyDollar[6].indexHints}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2826
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2830
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[1].tableIdent, Hints: yyDollar[2].indexHints}
		}
	case 552:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2841
		{
			yyVAL.expr = nil
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2845
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2851
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2855
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2861
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2865
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 558:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2878
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 559:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2882
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 560:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2886
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2890
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2896
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 563:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2898
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2902
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2904
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 566:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2908
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2910
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 568:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2913
		{
			yyVAL.empty = struct{}{}
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2915
		{
			yyVAL.empty = struct{}{}
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2920
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2924
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2930
		{
			yyVAL.str = JoinStr
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2934
		{
			yyVAL.str = JoinStr
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2938
		{
			yyVAL.str = JoinStr
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2944
		{
			yyVAL.str = StraightJoinStr
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2950
		{
			yyVAL.str = LeftJoinStr
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2954
		{
			yyVAL.str = LeftJoinStr
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2958
		{
			yyVAL.str = RightJoinStr
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2962
		{
			yyVAL.str = RightJoinStr
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2968
		{
			yyVAL.str = NaturalJoinStr
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2972
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2982
		{
			yyVAL.tableName = yyDollar[3].tableName
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2986
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2990
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2996
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3000
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3006
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 589:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3011
		{
			yyVAL.indexHints = nil
		}
	case 590:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3015
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 591:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3019
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 592:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3023
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 593:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3028
		{
			yyVAL.expr = nil
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3032
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3038
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3042
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3046
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3050
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3054
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3058
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3062
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 602:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3068
		{
			yyVAL.str = ""
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3072
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3078
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3082
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3088
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3092
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 608:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3096
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 609:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3100
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 610:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3104
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3108
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 612:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3112
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 613:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3116
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 614:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3120
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 615:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3124
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3130
		{
			yyVAL.str = IsNullStr
		}
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3134
		{
			yyVAL.str = IsNotNullStr
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3138
		{
			yyVAL.str = IsTrueStr
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3142
		{
			yyVAL.str = IsNotTrueStr
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3146
		{
			yyVAL.str = IsFalseStr
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3150
		{
			yyVAL.str = IsNotFalseStr
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3156
		{
			yyVAL.str = EqualStr
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3160
		{
			yyVAL.str = LessThanStr
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3164
		{
			yyVAL.str = GreaterThanStr
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3168
		{
			yyVAL.str = LessEqualStr
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3172
		{
			yyVAL.str = GreaterEqualStr
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3176
		{
			yyVAL.str = NotEqualStr
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3180
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 629:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3185
		{
			yyVAL.expr = nil
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3189
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3195
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3199
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3203
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3209
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3215
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3219
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3225
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3229
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3233
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3237
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3241
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3245
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3249
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3253
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3257
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3261
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3265
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3269
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 649:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3273
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 650:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3277
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 651:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3281
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3285
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3289
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3293
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3297
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3301
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3305
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 658:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3309
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3313
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3317
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3325
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3339
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3343
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 664:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3347
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 671:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3367
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: yyDollar[3].str == DistinctStr, Exprs: yyDollar[4].selectExprs}
		}
	case 672:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3371
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 673:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3381
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 674:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3385
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 675:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3389
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 676:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3393
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 677:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3397
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 678:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3401
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 679:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3405
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 680:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3409
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 681:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3413
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 682:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3417
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 683:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3421
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 684:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3425
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 685:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3429
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 686:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3433
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 687:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3437
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 688:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3441
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 689:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3445
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 690:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3454
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 691:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3458
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 692:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3462
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: SelectExprs{yyDollar[3].selectExpr}, Over: yyDollar[5].over}
		}
	case 693:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3466
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 694:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3470
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: SelectExprs{yyDollar[3].selectExpr}, Over: yyDollar[5].over}
		}
	case 695:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3474
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 696:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3478
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 697:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3482
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 698:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3486
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 699:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3490
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 700:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3494
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 701:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3504
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 702:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3508
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 703:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3512
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema")}
		}
	case 704:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3516
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 705:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3520
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 706:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3524
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 707:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3528
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 708:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3532
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 709:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3536
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 710:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3540
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 711:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3544
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 712:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3548
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("first"), Exprs: yyDollar[3].selectExprs}
		}
	case 713:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3552
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 714:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3556
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 715:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3560
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 716:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3570
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 717:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3574
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 718:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3578
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 719:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3583
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 720:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3588
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 721:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3593
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 722:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3599
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 723:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3604
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 724:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3608
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_user")}
		}
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3613
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 726:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3617
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 727:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3621
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 728:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3626
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 729:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3631
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 730:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3636
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 731:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3640
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 732:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3644
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 735:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3654
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 736:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3664
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 737:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3668
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 738:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3672
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 739:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3676
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 740:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3680
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 741:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3684
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 742:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3690
		{
			yyVAL.str = ""
		}
	case 743:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3694
		{
			yyVAL.str = BooleanModeStr
		}
	case 744:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3698
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 745:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3702
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 746:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3706
		{
			yyVAL.str = QueryExpansionStr
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3712
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3716
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 749:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3722
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 750:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3726
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 751:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3730
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3734
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 753:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3738
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 754:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3742
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3748
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 756:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3752
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3756
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 758:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3760
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 759:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3764
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3768
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 761:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3772
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 762:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3777
		{
			yyVAL.expr = nil
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3781
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 764:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3786
		{
			yyVAL.str = string("")
		}
	case 765:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3790
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3796
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 767:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3800
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 768:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3806
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 769:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3811
		{
			yyVAL.expr = nil
		}
	case 770:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3815
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3821
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 772:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3825
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 773:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3829
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3835
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3839
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3843
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3847
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3851
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3855
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3859
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3863
		{
			yyVAL.expr = &NullVal{}
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3869
		{
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 783:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3873
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 784:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3877
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 785:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3882
		{
			yyVAL.exprs = nil
		}
	case 786:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3886
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3892
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 788:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3896
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3902
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3906
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 791:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3911
		{
			yyVAL.expr = nil
		}
	case 792:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3915
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3921
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3925
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 795:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3930
		{
			yyVAL.orderBy = nil
		}
	case 796:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3934
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3940
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 798:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3944
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 799:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3950
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 800:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3954
		{
			yyVAL.order = &Order{Expr: &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}, Direction: yyDollar[2].str}
		}
	case 801:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3959
		{
			yyVAL.str = AscScr
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3963
		{
			yyVAL.str = AscScr
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3967
		{
			yyVAL.str = DescScr
		}
	case 804:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3972
		{
			yyVAL.limit = nil
		}
	case 805:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3976
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 806:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3980
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 807:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3984
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 808:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3989
		{
			yyVAL.str = ""
		}
	case 809:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3993
		{
			yyVAL.str = ForUpdateStr
		}
	case 810:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3997
		{
			yyVAL.str = ShareModeStr
		}
	case 811:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4010
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4014
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 813:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4018
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 814:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4023
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 815:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4027
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 816:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:4031
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4038
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 818:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4042
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 819:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4046
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 820:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4050
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 821:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4055
		{
			yyVAL.setExprs = nil
		}
	case 822:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4059
		{
			yyVAL.setExprs = yyDollar[5].setExprs
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4065
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 824:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4069
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4075
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 826:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4079
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 827:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4085
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4091
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4101
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 830:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4105
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 831:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4111
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: NewStrVal([]byte("on"))}
		}
	case 832:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4115
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: NewStrVal([]byte("off"))}
		}
	case 833:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4119
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 834:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4123
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 836:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4130
		{
			yyVAL.bytes = []byte("charset")
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4137
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4141
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4145
		{
			yyVAL.expr = &Default{}
		}
	case 843:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4154
		{
			yyVAL.byt = 0
		}
	case 844:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4156
		{
			yyVAL.byt = 1
		}
	case 845:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4159
		{
			yyVAL.byt = 0
		}
	case 846:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4161
		{
			yyVAL.byt = 1
		}
	case 847:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4164
		{
			yyVAL.str = ""
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4166
		{
			yyVAL.str = IgnoreStr
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4170
		{
			yyVAL.empty = struct{}{}
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4172
		{
			yyVAL.empty = struct{}{}
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4174
		{
			yyVAL.empty = struct{}{}
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4176
		{
			yyVAL.empty = struct{}{}
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4178
		{
			yyVAL.empty = struct{}{}
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4180
		{
			yyVAL.empty = struct{}{}
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4182
		{
			yyVAL.empty = struct{}{}
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4184
		{
			yyVAL.empty = struct{}{}
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4186
		{
			yyVAL.empty = struct{}{}
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4190
		{
			yyVAL.empty = struct{}{}
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4192
		{
			yyVAL.empty = struct{}{}
		}
	case 860:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4195
		{
			yyVAL.empty = struct{}{}
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4197
		{
			yyVAL.empty = struct{}{}
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4199
		{
			yyVAL.empty = struct{}{}
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4203
		{
			yyVAL.str = UniqueStr
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4205
		{
			yyVAL.str = FulltextStr
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4207
		{
			yyVAL.str = SpatialStr
		}
	case 866:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4210
		{
			yyVAL.str = ""
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4212
		{
			yyVAL.str = yyDollar[1].str
		}
	case 868:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4215
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 869:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4217
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4221
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4225
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4232
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4238
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4242
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4249
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 878:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4254
		{
			yyVAL.str = string("")
		}
	case 879:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4256
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 1231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4635
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4644
		{
			decNesting(yylex)
		}
	case 1233:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4649
		{
			skipToEnd(yylex)
		}
	case 1234:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4654
		{
			skipToEnd(yylex)
		}
	case 1235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4658
		{
			skipToEnd(yylex)
		}
	case 1236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4662
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
