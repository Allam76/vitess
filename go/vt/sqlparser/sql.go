// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func yyPosition(yylex interface{}) int {
	return yylex.(*Tokenizer).Position
}

func yyOldPosition(yylex interface{}) int {
	return yylex.(*Tokenizer).OldPosition
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:61
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	int                   int
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	statements            Statements
	partitions            Partitions
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	joinCondition         JoinCondition
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	asOf                  *AsOf
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	boolean               bool
	sqlVal                *SQLVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	setExprs              SetExprs
	setExpr               *SetExpr
	colIdent              ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	TableSpec             *TableSpec
	columnType            ColumnType
	columnOrder           *ColumnOrder
	triggerOrder          *TriggerOrder
	colKeyOpt             ColumnKeyOption
	optVal                Expr
	LengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexInfo             *IndexInfo
	indexOption           *IndexOption
	indexOptions          []*IndexOption
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	constraintDefinition  *ConstraintDefinition
	constraintInfo        ConstraintInfo
	ReferenceAction       ReferenceAction
	partDefs              []*PartitionDefinition
	partDef               *PartitionDefinition
	partSpec              *PartitionSpec
	showFilter            *ShowFilter
	over                  *Over
	caseStatementCases    []CaseStatementCase
	caseStatementCase     CaseStatementCase
	ifStatementConditions []IfStatementCondition
	ifStatementCondition  IfStatementCondition
	signalInfo            SignalInfo
	signalInfos           []SignalInfo
	procedureParam        ProcedureParam
	procedureParams       []ProcedureParam
	characteristic        Characteristic
	characteristics       []Characteristic
	Fields                *Fields
	Lines                 *Lines
	EnclosedBy            *EnclosedBy
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const CALL = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const OF = 57376
const OUTFILE = 57377
const DATA = 57378
const LOAD = 57379
const LINES = 57380
const TERMINATED = 57381
const ESCAPED = 57382
const ENCLOSED = 57383
const OPTIONALLY = 57384
const STARTING = 57385
const UNIQUE = 57386
const KEY = 57387
const SYSTEM_TIME = 57388
const VALUES = 57389
const LAST_INSERT_ID = 57390
const SQL_CALC_FOUND_ROWS = 57391
const NEXT = 57392
const VALUE = 57393
const SHARE = 57394
const MODE = 57395
const SQL_NO_CACHE = 57396
const SQL_CACHE = 57397
const JOIN = 57398
const STRAIGHT_JOIN = 57399
const LEFT = 57400
const RIGHT = 57401
const INNER = 57402
const OUTER = 57403
const CROSS = 57404
const NATURAL = 57405
const USE = 57406
const FORCE = 57407
const ON = 57408
const USING = 57409
const ID = 57410
const HEX = 57411
const STRING = 57412
const INTEGRAL = 57413
const FLOAT = 57414
const HEXNUM = 57415
const VALUE_ARG = 57416
const LIST_ARG = 57417
const COMMENT = 57418
const COMMENT_KEYWORD = 57419
const BIT_LITERAL = 57420
const NULL = 57421
const TRUE = 57422
const FALSE = 57423
const OFF = 57424
const OR = 57425
const AND = 57426
const NOT = 57427
const BETWEEN = 57428
const CASE = 57429
const WHEN = 57430
const THEN = 57431
const ELSE = 57432
const ELSEIF = 57433
const END = 57434
const LE = 57435
const GE = 57436
const NE = 57437
const NULL_SAFE_EQUAL = 57438
const IS = 57439
const LIKE = 57440
const REGEXP = 57441
const IN = 57442
const SHIFT_LEFT = 57443
const SHIFT_RIGHT = 57444
const DIV = 57445
const MOD = 57446
const UNARY = 57447
const COLLATE = 57448
const BINARY = 57449
const UNDERSCORE_BINARY = 57450
const UNDERSCORE_UTF8MB4 = 57451
const INTERVAL = 57452
const JSON_EXTRACT_OP = 57453
const JSON_UNQUOTE_EXTRACT_OP = 57454
const CREATE = 57455
const ALTER = 57456
const DROP = 57457
const RENAME = 57458
const ANALYZE = 57459
const ADD = 57460
const FLUSH = 57461
const MODIFY = 57462
const CHANGE = 57463
const SCHEMA = 57464
const TABLE = 57465
const INDEX = 57466
const INDEXES = 57467
const VIEW = 57468
const TO = 57469
const IGNORE = 57470
const IF = 57471
const PRIMARY = 57472
const COLUMN = 57473
const SPATIAL = 57474
const FULLTEXT = 57475
const KEY_BLOCK_SIZE = 57476
const CHECK = 57477
const ACTION = 57478
const CASCADE = 57479
const CONSTRAINT = 57480
const FOREIGN = 57481
const NO = 57482
const REFERENCES = 57483
const RESTRICT = 57484
const FIRST = 57485
const AFTER = 57486
const SHOW = 57487
const DESCRIBE = 57488
const EXPLAIN = 57489
const DATE = 57490
const ESCAPE = 57491
const REPAIR = 57492
const OPTIMIZE = 57493
const TRUNCATE = 57494
const FORMAT = 57495
const MAXVALUE = 57496
const PARTITION = 57497
const REORGANIZE = 57498
const LESS = 57499
const THAN = 57500
const PROCEDURE = 57501
const TRIGGER = 57502
const TRIGGERS = 57503
const FUNCTION = 57504
const STATUS = 57505
const VARIABLES = 57506
const WARNINGS = 57507
const SEQUENCE = 57508
const EACH = 57509
const ROW = 57510
const BEFORE = 57511
const FOLLOWS = 57512
const PRECEDES = 57513
const DEFINER = 57514
const INVOKER = 57515
const INOUT = 57516
const OUT = 57517
const DETERMINISTIC = 57518
const CONTAINS = 57519
const READS = 57520
const MODIFIES = 57521
const SQL = 57522
const SECURITY = 57523
const CLASS_ORIGIN = 57524
const SUBCLASS_ORIGIN = 57525
const MESSAGE_TEXT = 57526
const MYSQL_ERRNO = 57527
const CONSTRAINT_CATALOG = 57528
const CONSTRAINT_SCHEMA = 57529
const CONSTRAINT_NAME = 57530
const CATALOG_NAME = 57531
const SCHEMA_NAME = 57532
const TABLE_NAME = 57533
const COLUMN_NAME = 57534
const CURSOR_NAME = 57535
const SIGNAL = 57536
const SQLSTATE = 57537
const BEGIN = 57538
const START = 57539
const TRANSACTION = 57540
const COMMIT = 57541
const ROLLBACK = 57542
const BIT = 57543
const TINYINT = 57544
const SMALLINT = 57545
const MEDIUMINT = 57546
const INT = 57547
const INTEGER = 57548
const BIGINT = 57549
const INTNUM = 57550
const REAL = 57551
const DOUBLE = 57552
const FLOAT_TYPE = 57553
const DECIMAL = 57554
const NUMERIC = 57555
const DEC = 57556
const FIXED = 57557
const PRECISION = 57558
const TIME = 57559
const TIMESTAMP = 57560
const DATETIME = 57561
const YEAR = 57562
const CHAR = 57563
const VARCHAR = 57564
const BOOL = 57565
const CHARACTER = 57566
const VARBINARY = 57567
const NCHAR = 57568
const NVARCHAR = 57569
const NATIONAL = 57570
const VARYING = 57571
const TEXT = 57572
const TINYTEXT = 57573
const MEDIUMTEXT = 57574
const LONGTEXT = 57575
const LONG = 57576
const BLOB = 57577
const TINYBLOB = 57578
const MEDIUMBLOB = 57579
const LONGBLOB = 57580
const JSON = 57581
const ENUM = 57582
const GEOMETRY = 57583
const POINT = 57584
const LINESTRING = 57585
const POLYGON = 57586
const GEOMETRYCOLLECTION = 57587
const MULTIPOINT = 57588
const MULTILINESTRING = 57589
const MULTIPOLYGON = 57590
const NULLX = 57591
const AUTO_INCREMENT = 57592
const APPROXNUM = 57593
const SIGNED = 57594
const UNSIGNED = 57595
const ZEROFILL = 57596
const LOCAL = 57597
const COLLATION = 57598
const DATABASES = 57599
const SCHEMAS = 57600
const TABLES = 57601
const FULL = 57602
const PROCESSLIST = 57603
const COLUMNS = 57604
const FIELDS = 57605
const ENGINES = 57606
const PLUGINS = 57607
const NAMES = 57608
const CHARSET = 57609
const GLOBAL = 57610
const SESSION = 57611
const ISOLATION = 57612
const LEVEL = 57613
const READ = 57614
const WRITE = 57615
const ONLY = 57616
const REPEATABLE = 57617
const COMMITTED = 57618
const UNCOMMITTED = 57619
const SERIALIZABLE = 57620
const CURRENT_TIMESTAMP = 57621
const DATABASE = 57622
const CURRENT_DATE = 57623
const CURRENT_USER = 57624
const CURRENT_TIME = 57625
const LOCALTIME = 57626
const LOCALTIMESTAMP = 57627
const UTC_DATE = 57628
const UTC_TIME = 57629
const UTC_TIMESTAMP = 57630
const REPLACE = 57631
const CONVERT = 57632
const CAST = 57633
const SUBSTR = 57634
const SUBSTRING = 57635
const GROUP_CONCAT = 57636
const SEPARATOR = 57637
const TIMESTAMPADD = 57638
const TIMESTAMPDIFF = 57639
const OVER = 57640
const WINDOW = 57641
const GROUPING = 57642
const GROUPS = 57643
const AVG = 57644
const BIT_AND = 57645
const BIT_OR = 57646
const BIT_XOR = 57647
const COUNT = 57648
const JSON_ARRAYAGG = 57649
const JSON_OBJECTAGG = 57650
const MAX = 57651
const MIN = 57652
const STDDEV_POP = 57653
const STDDEV = 57654
const STD = 57655
const STDDEV_SAMP = 57656
const SUM = 57657
const VAR_POP = 57658
const VARIANCE = 57659
const VAR_SAMP = 57660
const CUME_DIST = 57661
const DENSE_RANK = 57662
const FIRST_VALUE = 57663
const LAG = 57664
const LAST_VALUE = 57665
const LEAD = 57666
const NTH_VALUE = 57667
const NTILE = 57668
const ROW_NUMBER = 57669
const PERCENT_RANK = 57670
const RANK = 57671
const MATCH = 57672
const AGAINST = 57673
const BOOLEAN = 57674
const LANGUAGE = 57675
const WITH = 57676
const QUERY = 57677
const EXPANSION = 57678
const UNUSED = 57679
const ARRAY = 57680
const DESCRIPTION = 57681
const EMPTY = 57682
const EXCEPT = 57683
const JSON_TABLE = 57684
const LATERAL = 57685
const MEMBER = 57686
const RECURSIVE = 57687
const ACTIVE = 57688
const ADMIN = 57689
const BUCKETS = 57690
const CLONE = 57691
const COMPONENT = 57692
const DEFINITION = 57693
const ENFORCED = 57694
const EXCLUDE = 57695
const FOLLOWING = 57696
const GEOMCOLLECTION = 57697
const GET_MASTER_PUBLIC_KEY = 57698
const HISTOGRAM = 57699
const HISTORY = 57700
const INACTIVE = 57701
const INVISIBLE = 57702
const LOCKED = 57703
const MASTER_COMPRESSION_ALGORITHMS = 57704
const MASTER_PUBLIC_KEY_PATH = 57705
const MASTER_TLS_CIPHERSUITES = 57706
const MASTER_ZSTD_COMPRESSION_LEVEL = 57707
const NESTED = 57708
const NETWORK_NAMESPACE = 57709
const NOWAIT = 57710
const NULLS = 57711
const OJ = 57712
const OLD = 57713
const OPTIONAL = 57714
const ORDINALITY = 57715
const ORGANIZATION = 57716
const OTHERS = 57717
const PATH = 57718
const PERSIST = 57719
const PERSIST_ONLY = 57720
const PRECEDING = 57721
const PRIVILEGE_CHECKS_USER = 57722
const PROCESS = 57723
const RANDOM = 57724
const REFERENCE = 57725
const REQUIRE_ROW_FORMAT = 57726
const RESOURCE = 57727
const RESPECT = 57728
const RESTART = 57729
const RETAIN = 57730
const REUSE = 57731
const ROLE = 57732
const SECONDARY = 57733
const SECONDARY_ENGINE = 57734
const SECONDARY_LOAD = 57735
const SECONDARY_UNLOAD = 57736
const SKIP = 57737
const SRID = 57738
const THREAD_PRIORITY = 57739
const TIES = 57740
const UNBOUNDED = 57741
const VCPU = 57742
const VISIBLE = 57743
const SYSTEM = 57744
const INFILE = 57745

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CALL",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"OF",
	"OUTFILE",
	"DATA",
	"LOAD",
	"LINES",
	"TERMINATED",
	"ESCAPED",
	"ENCLOSED",
	"OPTIONALLY",
	"STARTING",
	"UNIQUE",
	"KEY",
	"SYSTEM_TIME",
	"VALUES",
	"LAST_INSERT_ID",
	"SQL_CALC_FOUND_ROWS",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"ELSEIF",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"MODIFY",
	"CHANGE",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"INDEXES",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"FIRST",
	"AFTER",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"FORMAT",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TRIGGERS",
	"FUNCTION",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"EACH",
	"ROW",
	"BEFORE",
	"FOLLOWS",
	"PRECEDES",
	"DEFINER",
	"INVOKER",
	"INOUT",
	"OUT",
	"DETERMINISTIC",
	"CONTAINS",
	"READS",
	"MODIFIES",
	"SQL",
	"SECURITY",
	"CLASS_ORIGIN",
	"SUBCLASS_ORIGIN",
	"MESSAGE_TEXT",
	"MYSQL_ERRNO",
	"CONSTRAINT_CATALOG",
	"CONSTRAINT_SCHEMA",
	"CONSTRAINT_NAME",
	"CATALOG_NAME",
	"SCHEMA_NAME",
	"TABLE_NAME",
	"COLUMN_NAME",
	"CURSOR_NAME",
	"SIGNAL",
	"SQLSTATE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DEC",
	"FIXED",
	"PRECISION",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NATIONAL",
	"VARYING",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"LONG",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"LOCAL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"OVER",
	"WINDOW",
	"GROUPING",
	"GROUPS",
	"AVG",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"COUNT",
	"JSON_ARRAYAGG",
	"JSON_OBJECTAGG",
	"MAX",
	"MIN",
	"STDDEV_POP",
	"STDDEV",
	"STD",
	"STDDEV_SAMP",
	"SUM",
	"VAR_POP",
	"VARIANCE",
	"VAR_SAMP",
	"CUME_DIST",
	"DENSE_RANK",
	"FIRST_VALUE",
	"LAG",
	"LAST_VALUE",
	"LEAD",
	"NTH_VALUE",
	"NTILE",
	"ROW_NUMBER",
	"PERCENT_RANK",
	"RANK",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"DESCRIPTION",
	"EMPTY",
	"EXCEPT",
	"JSON_TABLE",
	"LATERAL",
	"MEMBER",
	"RECURSIVE",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"SYSTEM",
	"INFILE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 42,
	-2, 4,
	-1, 36,
	141, 860,
	-2, 114,
	-1, 43,
	180, 455,
	181, 455,
	-2, 445,
	-1, 50,
	1, 1259,
	421, 1259,
	-2, 475,
	-1, 416,
	127, 868,
	-2, 864,
	-1, 417,
	127, 869,
	-2, 865,
	-1, 518,
	97, 1184,
	127, 1184,
	-2, 78,
	-1, 519,
	97, 1086,
	127, 1086,
	-2, 79,
	-1, 524,
	97, 1042,
	127, 1042,
	-2, 827,
	-1, 526,
	97, 1124,
	127, 1124,
	-2, 829,
	-1, 733,
	5, 42,
	-2, 469,
	-1, 737,
	5, 42,
	-2, 468,
	-1, 931,
	1, 529,
	5, 529,
	12, 529,
	13, 529,
	14, 529,
	15, 529,
	17, 529,
	19, 529,
	30, 529,
	31, 529,
	56, 529,
	57, 529,
	58, 529,
	59, 529,
	60, 529,
	62, 529,
	63, 529,
	66, 529,
	67, 529,
	69, 529,
	70, 529,
	421, 529,
	-2, 556,
	-1, 934,
	67, 59,
	69, 59,
	-2, 63,
	-1, 1129,
	127, 871,
	-2, 867,
	-1, 1289,
	68, 321,
	-2, 1008,
	-1, 1292,
	68, 317,
	71, 317,
	-2, 943,
	-1, 1293,
	68, 318,
	71, 318,
	-2, 953,
	-1, 1371,
	68, 390,
	71, 390,
	-2, 361,
	-1, 1417,
	5, 43,
	-2, 622,
	-1, 1478,
	5, 42,
	-2, 804,
	-1, 1575,
	5, 42,
	-2, 80,
	-1, 1721,
	1, 577,
	5, 577,
	12, 577,
	13, 577,
	14, 577,
	15, 577,
	17, 577,
	19, 577,
	30, 577,
	31, 577,
	56, 577,
	57, 577,
	58, 577,
	59, 577,
	60, 577,
	62, 577,
	63, 577,
	66, 577,
	67, 577,
	69, 577,
	70, 577,
	421, 577,
	-2, 556,
	-1, 1843,
	5, 43,
	-2, 805,
	-1, 1872,
	5, 42,
	-2, 80,
	-1, 1932,
	5, 42,
	-2, 807,
	-1, 1970,
	41, 878,
	-2, 876,
	-1, 2013,
	5, 42,
	-2, 167,
	-1, 2073,
	5, 43,
	-2, 808,
}

const yyPrivate = 57344

const yyLast = 23780

var yyAct = [...]int{

	450, 60, 2190, 2169, 2076, 2159, 2016, 7, 2083, 2160,
	2015, 6, 2014, 5, 1854, 2017, 8, 1336, 2110, 1984,
	2056, 449, 1639, 1734, 1944, 2062, 1970, 365, 421, 1630,
	72, 1702, 1894, 408, 1876, 1910, 514, 1334, 1294, 1529,
	1104, 1504, 1245, 1735, 1703, 2077, 2082, 533, 856, 434,
	1290, 1243, 1286, 395, 1783, 1270, 1583, 1638, 1699, 1247,
	1276, 60, 363, 345, 721, 93, 1275, 1241, 1708, 1401,
	1188, 1326, 1712, 1096, 1154, 400, 1650, 962, 1361, 1042,
	1606, 1193, 1282, 1225, 1566, 1607, 928, 1167, 1072, 927,
	1322, 1232, 1115, 947, 1185, 762, 756, 517, 698, 1131,
	419, 711, 797, 530, 529, 1062, 404, 806, 362, 676,
	873, 520, 509, 936, 2212, 346, 347, 872, 535, 350,
	2208, 946, 512, 2198, 2181, 2179, 2164, 2155, 2113, 71,
	1090, 1870, 2172, 1765, 1994, 821, 820, 830, 831, 823,
	824, 825, 826, 827, 828, 829, 822, 2103, 2158, 832,
	2070, 76, 2143, 1877, 2102, 2069, 1667, 1447, 1828, 675,
	1310, 1879, 1730, 1731, 1729, 29, 29, 29, 948, 401,
	949, 103, 99, 100, 423, 101, 1265, 1266, 1264, 724,
	725, 349, 78, 79, 80, 81, 82, 531, 1513, 1476,
	348, 1512, 747, 1549, 1514, 1296, 1298, 1917, 1298, 1311,
	678, 723, 681, 1323, 1819, 703, 1477, 1931, 105, 104,
	1302, 1304, 1817, 1303, 2013, 3, 29, 360, 61, 32,
	33, 61, 32, 33, 414, 352, 1967, 69, 69, 69,
	1882, 69, 29, 30, 61, 32, 33, 1684, 1316, 1966,
	1311, 1965, 1962, 34, 1964, 1963, 57, 1961, 2040, 2041,
	2107, 2108, 67, 2078, 2011, 1343, 34, 53, 54, 1584,
	718, 719, 720, 58, 717, 716, 1880, 1881, 1883, 1884,
	1885, 680, 679, 702, 706, 356, 95, 708, 69, 463,
	1342, 469, 471, 470, 467, 468, 466, 465, 464, 2157,
	44, 2142, 2057, 73, 69, 1585, 472, 473, 2009, 726,
	342, 727, 724, 725, 1632, 1226, 2194, 1895, 1896, 961,
	704, 707, 960, 705, 1945, 2204, 961, 961, 88, 1612,
	1738, 1788, 710, 710, 1523, 1018, 2213, 1947, 2210, 102,
	1250, 1252, 2199, 2182, 710, 677, 343, 686, 358, 95,
	359, 2043, 60, 60, 359, 1905, 1588, 1032, 734, 1023,
	1527, 1527, 736, 1503, 735, 1502, 36, 63, 40, 39,
	42, 1501, 55, 673, 755, 1603, 1810, 1311, 1325, 751,
	316, 90, 92, 98, 1556, 87, 1301, 1530, 1995, 1586,
	1587, 97, 96, 844, 845, 1803, 1517, 1509, 43, 66,
	65, 1420, 1904, 51, 52, 41, 1406, 1390, 1946, 1102,
	709, 60, 961, 1260, 1428, 961, 961, 955, 942, 812,
	694, 1251, 739, 740, 1764, 822, 841, 805, 832, 843,
	1425, 94, 1271, 1878, 1527, 764, 2151, 749, 1099, 793,
	2192, 701, 832, 2193, 1063, 2191, 1631, 56, 810, 45,
	64, 2068, 47, 48, 97, 96, 1526, 1526, 1364, 854,
	1833, 858, 859, 860, 861, 862, 863, 864, 865, 866,
	867, 868, 950, 871, 874, 874, 874, 880, 874, 874,
	880, 874, 880, 889, 890, 891, 892, 893, 894, 895,
	896, 897, 898, 899, 900, 901, 902, 903, 904, 905,
	906, 907, 908, 909, 910, 911, 912, 913, 914, 915,
	916, 917, 918, 919, 920, 921, 922, 748, 932, 1382,
	68, 68, 68, 1903, 68, 1754, 62, 738, 682, 62,
	1526, 844, 845, 1381, 1651, 1138, 1614, 1612, 1669, 89,
	1064, 1620, 62, 1186, 1619, 1622, 2197, 844, 845, 2152,
	1136, 1137, 1135, 1025, 520, 1352, 714, 803, 1742, 800,
	700, 1615, 944, 795, 804, 803, 733, 737, 685, 926,
	2111, 68, 2086, 2074, 805, 1386, 1653, 1755, 2129, 1186,
	1627, 1436, 805, 1527, 1380, 876, 878, 68, 882, 884,
	1019, 887, 875, 877, 879, 881, 883, 885, 886, 888,
	1869, 85, 1527, 842, 1074, 1075, 1076, 1077, 1078, 1079,
	1080, 1081, 1082, 1083, 1084, 1085, 1572, 823, 824, 825,
	826, 827, 828, 829, 822, 794, 1868, 832, 804, 803,
	1571, 935, 804, 803, 940, 1378, 1372, 1373, 84, 1371,
	1655, 1374, 1375, 959, 1569, 1659, 805, 1654, 69, 1652,
	805, 1353, 715, 699, 1657, 933, 2205, 728, 1134, 846,
	847, 848, 849, 850, 851, 852, 853, 1656, 1550, 743,
	688, 689, 690, 691, 692, 855, 1384, 1387, 1424, 1526,
	1658, 1660, 804, 803, 2139, 1614, 1612, 1105, 1106, 2201,
	961, 742, 931, 1616, 1613, 27, 1169, 107, 1526, 2138,
	805, 1626, 1541, 2116, 2092, 1623, 344, 710, 2008, 2206,
	1615, 2185, 2170, 2184, 710, 710, 710, 1546, 1545, 830,
	831, 823, 824, 825, 826, 827, 828, 829, 822, 710,
	710, 832, 1423, 712, 1422, 1782, 357, 511, 1784, 1542,
	527, 804, 803, 674, 731, 1379, 2128, 1960, 804, 803,
	730, 804, 803, 1547, 684, 1539, 2111, 1924, 2131, 805,
	2130, 1540, 693, 710, 1866, 843, 805, 1747, 1567, 805,
	399, 1377, 1155, 1101, 1156, 410, 907, 908, 909, 910,
	911, 895, 896, 897, 912, 913, 898, 899, 900, 906,
	914, 901, 902, 903, 904, 905, 917, 916, 915, 918,
	919, 921, 920, 922, 1088, 1368, 1046, 1515, 1033, 1516,
	1086, 1383, 1121, 1123, 1124, 1107, 506, 507, 1122, 1047,
	1544, 1049, 1050, 1044, 1100, 1058, 1059, 820, 830, 831,
	823, 824, 825, 826, 827, 828, 829, 822, 1066, 1067,
	832, 804, 803, 2006, 1112, 810, 1979, 1132, 825, 826,
	827, 828, 829, 822, 60, 1530, 832, 1108, 1385, 805,
	1403, 1404, 1405, 1939, 2144, 1091, 1975, 1113, 1784, 858,
	1114, 1901, 1094, 1860, 2141, 1109, 821, 820, 830, 831,
	823, 824, 825, 826, 827, 828, 829, 822, 804, 803,
	832, 804, 803, 804, 803, 2154, 1939, 2137, 2112, 1799,
	1671, 1683, 1127, 1175, 1178, 1795, 805, 2097, 750, 805,
	1187, 805, 1110, 439, 438, 441, 442, 443, 444, 1860,
	2094, 750, 440, 445, 1128, 1125, 1860, 2010, 1939, 2002,
	1939, 1950, 1939, 750, 1362, 1792, 1162, 1164, 1791, 1095,
	1543, 1129, 1172, 1244, 1860, 1859, 1973, 932, 1846, 750,
	1954, 932, 1389, 750, 1953, 1158, 1159, 1805, 1505, 1789,
	1775, 1774, 1773, 1762, 1761, 1069, 1595, 1161, 1758, 1759,
	1758, 1757, 695, 1418, 750, 938, 1197, 1198, 1594, 1229,
	750, 1183, 520, 1204, 1205, 1206, 1207, 1163, 1365, 1505,
	1350, 1349, 1163, 750, 73, 1199, 1157, 1201, 1255, 1070,
	1133, 1041, 1257, 1040, 1039, 1038, 1249, 1030, 1028, 1027,
	1026, 1024, 958, 957, 752, 1806, 696, 1972, 1019, 1208,
	1209, 353, 938, 1700, 1213, 1770, 943, 1216, 1253, 1748,
	1505, 939, 1221, 941, 73, 710, 1254, 710, 937, 943,
	1228, 2099, 1841, 1771, 1760, 1273, 1229, 1518, 1163, 1130,
	1263, 1261, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146,
	1147, 1148, 1149, 1150, 1151, 1152, 1153, 1272, 855, 1277,
	531, 1044, 1283, 1280, 1258, 1806, 1332, 1262, 939, 1229,
	937, 1418, 1441, 1165, 1129, 1440, 1363, 943, 1418, 1348,
	937, 1103, 1031, 759, 763, 1242, 1328, 1329, 1330, 1331,
	754, 753, 69, 2105, 2095, 2085, 1977, 1045, 1871, 1189,
	813, 1298, 1849, 1324, 1051, 1052, 1053, 931, 1327, 1741,
	1323, 931, 1713, 1714, 1335, 931, 1522, 1344, 1318, 1060,
	1061, 1317, 1020, 745, 2176, 2174, 1250, 1252, 1402, 1407,
	2161, 764, 1769, 2125, 1716, 69, 1700, 857, 1573, 1312,
	1313, 1314, 1315, 1035, 1491, 1489, 1719, 855, 870, 1492,
	1490, 1718, 925, 1093, 934, 1488, 1493, 1132, 1238, 1239,
	1487, 1354, 405, 406, 2101, 1636, 1360, 1388, 1391, 1116,
	821, 820, 830, 831, 823, 824, 825, 826, 827, 828,
	829, 822, 1273, 2123, 832, 1234, 1237, 1238, 1239, 1235,
	1400, 1236, 1240, 1399, 1369, 1713, 1714, 2045, 1929, 1394,
	798, 799, 1532, 1794, 1128, 1395, 1746, 1251, 1234, 1237,
	1238, 1239, 1235, 1745, 1236, 1240, 1524, 2048, 1412, 2091,
	2090, 1129, 1971, 2115, 1969, 2039, 1479, 1480, 1414, 796,
	932, 932, 932, 932, 932, 1408, 1417, 1419, 2038, 354,
	1598, 1560, 1421, 1415, 757, 1244, 956, 1497, 1427, 741,
	697, 1430, 1431, 1432, 1839, 932, 758, 520, 1438, 1908,
	1439, 1105, 1106, 1442, 1443, 1481, 1444, 1445, 1367, 1339,
	1449, 1450, 1451, 1452, 1453, 1034, 1633, 1576, 1359, 1435,
	1242, 1460, 1461, 1462, 1022, 1464, 1465, 1957, 1467, 1468,
	1469, 1470, 396, 1472, 1473, 1474, 2118, 1507, 2117, 1508,
	798, 799, 402, 403, 1495, 2088, 1506, 2049, 1398, 1500,
	1133, 1499, 1986, 417, 1496, 1297, 1397, 1483, 1484, 1482,
	1486, 1928, 1485, 397, 73, 1985, 1911, 1029, 1505, 1429,
	1531, 511, 1494, 1019, 1037, 1426, 1519, 60, 1065, 1525,
	1528, 1578, 1579, 1580, 2178, 2177, 2178, 801, 710, 2177,
	710, 710, 1054, 1055, 1056, 110, 1999, 1510, 110, 1057,
	1744, 1409, 1410, 1411, 110, 1098, 1559, 355, 1561, 1562,
	1563, 1564, 75, 2027, 46, 2029, 19, 1277, 2028, 18,
	2030, 20, 110, 77, 1521, 2031, 21, 1048, 2026, 15,
	2025, 14, 49, 1593, 70, 110, 1, 1092, 110, 538,
	2089, 110, 2044, 1568, 931, 931, 931, 931, 931, 2019,
	10, 2046, 110, 1968, 538, 1068, 1570, 2032, 24, 931,
	110, 1890, 1608, 1621, 1625, 1338, 1875, 1340, 1874, 931,
	2033, 25, 857, 1582, 1605, 1446, 1448, 2024, 13, 1581,
	1478, 744, 1454, 1455, 1456, 1457, 1089, 1117, 1675, 1609,
	1602, 1376, 1600, 1617, 1610, 1628, 1629, 1597, 1618, 1165,
	1551, 1552, 1604, 1596, 1668, 1601, 2055, 1558, 2021, 12,
	2020, 11, 2018, 9, 1284, 1611, 1274, 1565, 1705, 528,
	60, 83, 1351, 713, 1899, 324, 1646, 1281, 1643, 1642,
	1118, 1119, 1537, 2047, 746, 1536, 1533, 1548, 1661, 1704,
	1649, 1662, 1723, 1724, 1725, 520, 1647, 1295, 1641, 1535,
	1534, 2042, 1538, 1701, 966, 964, 965, 963, 968, 967,
	328, 515, 1128, 1710, 951, 802, 91, 50, 1902, 1681,
	1682, 1624, 1370, 86, 1687, 1726, 722, 1690, 330, 1129,
	840, 1396, 1695, 1511, 521, 857, 2084, 2106, 1728, 1173,
	1174, 1575, 761, 1707, 2058, 1434, 869, 1184, 1717, 1722,
	422, 2061, 1120, 437, 436, 1739, 1720, 435, 1740, 432,
	1227, 1332, 433, 1358, 1111, 1475, 1737, 814, 1763, 420,
	412, 1733, 930, 1256, 923, 1732, 1366, 1599, 1233, 1231,
	1230, 1036, 510, 1767, 1768, 1715, 1711, 929, 361, 59,
	729, 341, 1827, 1993, 31, 1194, 74, 1749, 1750, 407,
	26, 17, 732, 22, 1753, 16, 683, 35, 38, 1641,
	1277, 1756, 1277, 37, 1577, 1341, 351, 1073, 1071, 2168,
	110, 2109, 2034, 2023, 843, 538, 538, 1269, 1645, 2022,
	2146, 23, 2145, 4, 398, 28, 2, 538, 1786, 0,
	1663, 1664, 0, 1665, 1666, 0, 0, 0, 0, 0,
	0, 0, 1772, 0, 1019, 1672, 1673, 0, 1826, 1337,
	0, 1785, 110, 1807, 1781, 1787, 0, 1345, 1346, 0,
	1804, 1347, 1790, 1798, 0, 0, 0, 1676, 1677, 1678,
	1679, 1680, 0, 0, 1706, 1777, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1832, 1333, 0, 0,
	0, 1357, 0, 1808, 1751, 0, 0, 0, 0, 0,
	0, 1811, 0, 1721, 809, 0, 0, 1815, 0, 0,
	0, 0, 1820, 1821, 0, 0, 0, 0, 0, 1856,
	1857, 1847, 0, 0, 0, 0, 0, 0, 1589, 0,
	1591, 1592, 0, 0, 0, 0, 1862, 448, 0, 0,
	1840, 0, 0, 1779, 0, 0, 1743, 0, 0, 60,
	0, 0, 0, 0, 0, 0, 1842, 1843, 1844, 1845,
	1858, 1852, 0, 0, 0, 1825, 0, 1392, 1393, 1853,
	763, 1851, 0, 1519, 1863, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 932, 1864, 1802, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	110, 110, 110, 1778, 1898, 0, 0, 0, 1886, 1913,
	1914, 1906, 0, 0, 1277, 538, 1332, 1893, 1900, 1892,
	522, 1737, 1705, 534, 1891, 1933, 0, 0, 0, 0,
	1416, 1887, 1888, 1889, 1907, 0, 0, 1912, 687, 0,
	0, 0, 1897, 1704, 1936, 0, 0, 0, 0, 1809,
	0, 0, 0, 1437, 821, 820, 830, 831, 823, 824,
	825, 826, 827, 828, 829, 822, 1930, 0, 832, 0,
	1956, 0, 1958, 0, 1937, 1955, 0, 0, 1923, 0,
	0, 1935, 1949, 1927, 1948, 1943, 0, 0, 0, 1983,
	1959, 0, 1641, 0, 1249, 0, 1938, 0, 1865, 0,
	1867, 1951, 0, 1952, 0, 1940, 0, 1941, 1942, 0,
	0, 0, 1705, 0, 60, 0, 1976, 0, 0, 1978,
	1982, 0, 0, 0, 0, 0, 0, 1988, 0, 0,
	0, 0, 0, 1704, 1987, 0, 0, 0, 1974, 60,
	0, 0, 0, 2000, 0, 0, 0, 2012, 2005, 0,
	1981, 0, 0, 932, 1916, 0, 2007, 1998, 0, 0,
	931, 0, 0, 1872, 0, 0, 0, 538, 0, 1989,
	1990, 1991, 1992, 0, 1590, 110, 1996, 1997, 2003, 110,
	0, 2052, 110, 0, 0, 0, 0, 0, 110, 0,
	538, 2066, 0, 2060, 2064, 0, 2053, 538, 538, 538,
	110, 110, 110, 2065, 2050, 0, 0, 110, 520, 2071,
	2079, 0, 538, 538, 0, 0, 2072, 2051, 60, 0,
	0, 0, 1637, 0, 0, 0, 2054, 1918, 1919, 1920,
	1921, 1922, 0, 0, 0, 1925, 1926, 0, 0, 1932,
	0, 0, 0, 0, 2067, 110, 538, 110, 0, 538,
	0, 2087, 2073, 0, 0, 0, 0, 0, 0, 534,
	534, 0, 0, 0, 0, 2100, 0, 0, 0, 0,
	0, 534, 2093, 0, 0, 0, 0, 0, 0, 2120,
	2114, 0, 2005, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 60, 60, 110, 0, 0, 2122, 2121,
	2126, 809, 2136, 1670, 2127, 2124, 2096, 2064, 2132, 2119,
	0, 0, 60, 0, 2150, 0, 0, 0, 2149, 2140,
	2148, 0, 2104, 2147, 0, 0, 2156, 931, 2001, 0,
	0, 0, 60, 0, 0, 60, 60, 0, 2171, 2134,
	0, 0, 0, 2162, 2136, 60, 2175, 538, 60, 2173,
	0, 0, 2186, 2136, 0, 0, 0, 0, 2153, 0,
	60, 2195, 60, 0, 0, 0, 60, 0, 2136, 0,
	2136, 0, 1727, 0, 0, 0, 0, 0, 2163, 60,
	0, 2165, 60, 538, 538, 0, 0, 2136, 0, 60,
	0, 0, 0, 60, 2183, 0, 0, 2136, 0, 1766,
	0, 2136, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2200, 0, 1776, 0, 0, 0, 110, 0,
	0, 0, 0, 0, 0, 0, 110, 110, 2209, 1780,
	110, 110, 0, 0, 110, 110, 110, 0, 0, 2202,
	2203, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1796, 538, 538, 522, 0, 0, 0, 0, 0, 952,
	0, 0, 0, 0, 0, 1299, 1300, 0, 1305, 1306,
	1307, 1308, 1309, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1319, 1320, 1321, 0,
	0, 0, 0, 0, 0, 0, 0, 1800, 0, 0,
	0, 0, 0, 0, 0, 0, 410, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 110, 538, 0,
	538, 0, 0, 0, 336, 110, 110, 0, 0, 110,
	0, 0, 0, 1685, 1686, 0, 1688, 1689, 1829, 1691,
	1692, 1693, 1694, 0, 1696, 1697, 1698, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 110, 110, 110,
	750, 0, 333, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 857, 0, 0, 0, 2188, 0, 0, 0,
	1848, 0, 0, 1850, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1873, 0, 0, 821, 820,
	830, 831, 823, 824, 825, 826, 827, 828, 829, 822,
	0, 1021, 832, 0, 317, 0, 0, 0, 0, 0,
	0, 320, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 329, 334, 335, 534, 0, 0, 0, 0, 0,
	0, 534, 534, 534, 0, 1166, 1171, 0, 0, 0,
	1177, 1180, 1181, 1182, 0, 0, 534, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	327, 0, 0, 332, 0, 0, 0, 1192, 0, 1195,
	1196, 0, 0, 0, 1200, 0, 1202, 1203, 0, 0,
	534, 0, 0, 1097, 1210, 1211, 1212, 0, 1214, 1215,
	0, 1217, 1218, 1219, 1220, 0, 1222, 1223, 1224, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 110, 110, 110, 110, 110, 0, 0,
	0, 0, 318, 0, 0, 110, 0, 0, 110, 0,
	0, 0, 110, 0, 0, 0, 0, 0, 110, 0,
	534, 0, 0, 1834, 1835, 0, 0, 0, 0, 1836,
	0, 0, 1837, 0, 331, 321, 322, 1838, 339, 538,
	0, 1831, 323, 325, 0, 319, 338, 337, 0, 0,
	410, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1160, 0, 0, 0, 857, 0, 1553, 1554, 1555,
	1557, 0, 0, 0, 0, 0, 0, 0, 0, 522,
	821, 820, 830, 831, 823, 824, 825, 826, 827, 828,
	829, 822, 0, 0, 832, 0, 0, 1190, 1191, 538,
	0, 0, 0, 0, 0, 2075, 0, 0, 0, 0,
	0, 538, 110, 538, 538, 816, 0, 819, 0, 0,
	0, 0, 2059, 2063, 833, 834, 835, 836, 837, 838,
	839, 0, 817, 818, 815, 821, 820, 830, 831, 823,
	824, 825, 826, 827, 828, 829, 822, 0, 1830, 832,
	0, 522, 0, 538, 538, 0, 0, 0, 0, 0,
	110, 0, 0, 534, 0, 534, 534, 0, 0, 0,
	538, 0, 2080, 2081, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 821, 820, 830,
	831, 823, 824, 825, 826, 827, 828, 829, 822, 0,
	29, 832, 61, 32, 33, 0, 0, 0, 0, 0,
	0, 538, 0, 0, 57, 0, 0, 0, 0, 0,
	67, 0, 0, 0, 34, 0, 0, 0, 1644, 0,
	0, 0, 534, 0, 534, 0, 2063, 0, 0, 1433,
	0, 988, 0, 538, 538, 0, 0, 0, 2133, 821,
	820, 830, 831, 823, 824, 825, 826, 827, 828, 829,
	822, 538, 69, 832, 1458, 1459, 0, 0, 0, 1463,
	0, 0, 1466, 0, 0, 0, 0, 1471, 0, 0,
	0, 538, 538, 0, 538, 2035, 538, 0, 2167, 2170,
	2166, 0, 0, 0, 0, 0, 0, 0, 0, 760,
	0, 0, 0, 0, 0, 0, 0, 2187, 0, 0,
	534, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1752, 0, 36, 63, 40, 39, 42, 0,
	0, 0, 0, 0, 975, 0, 0, 110, 0, 0,
	2036, 108, 0, 0, 340, 0, 0, 0, 0, 0,
	108, 0, 110, 0, 0, 0, 43, 66, 65, 0,
	0, 0, 0, 41, 0, 0, 0, 110, 364, 0,
	0, 0, 0, 0, 0, 0, 989, 0, 411, 0,
	0, 513, 523, 0, 108, 538, 0, 108, 110, 538,
	0, 0, 0, 0, 0, 0, 538, 0, 108, 0,
	0, 0, 0, 0, 0, 56, 108, 2037, 64, 0,
	47, 48, 0, 0, 0, 0, 0, 1812, 1813, 1824,
	1814, 0, 0, 1816, 0, 1818, 0, 0, 0, 1002,
	1005, 1006, 1007, 1008, 1009, 1010, 522, 1011, 1012, 1013,
	1014, 1015, 1016, 1017, 0, 990, 991, 992, 993, 969,
	973, 1003, 970, 976, 972, 974, 971, 0, 977, 978,
	979, 980, 981, 982, 983, 984, 985, 986, 987, 994,
	995, 996, 997, 998, 999, 1000, 1001, 0, 0, 0,
	0, 0, 0, 534, 0, 0, 0, 538, 538, 538,
	0, 0, 0, 0, 0, 0, 538, 0, 0, 0,
	62, 0, 1861, 0, 0, 538, 0, 0, 821, 820,
	830, 831, 823, 824, 825, 826, 827, 828, 829, 822,
	0, 0, 832, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 110, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1574, 0, 68, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 534, 0, 534, 534, 0,
	1004, 0, 0, 0, 0, 0, 0, 538, 0, 110,
	0, 0, 0, 0, 538, 0, 0, 0, 0, 0,
	0, 0, 29, 0, 61, 32, 33, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 57, 1634, 1635, 0,
	0, 1823, 67, 0, 0, 0, 34, 0, 0, 0,
	538, 0, 0, 538, 534, 110, 108, 110, 0, 0,
	0, 0, 0, 0, 538, 0, 0, 0, 534, 0,
	0, 0, 0, 0, 0, 538, 0, 0, 0, 0,
	0, 0, 0, 0, 69, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1674, 0, 0, 108, 0,
	0, 0, 0, 0, 0, 0, 0, 2035, 0, 538,
	0, 0, 2211, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 522, 1822, 0, 1097, 1709, 0,
	821, 820, 830, 831, 823, 824, 825, 826, 827, 828,
	829, 822, 0, 538, 832, 1709, 36, 63, 40, 39,
	42, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2036, 0, 0, 534, 534, 0, 534, 0,
	1736, 0, 0, 0, 0, 0, 110, 0, 43, 66,
	65, 538, 0, 0, 0, 41, 0, 29, 0, 61,
	32, 33, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 57, 0, 0, 0, 0, 0, 67, 0, 0,
	0, 34, 0, 110, 821, 820, 830, 831, 823, 824,
	825, 826, 827, 828, 829, 822, 0, 56, 832, 2037,
	64, 0, 47, 48, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 108, 108, 69,
	0, 0, 0, 0, 0, 523, 0, 0, 0, 0,
	0, 538, 0, 0, 0, 0, 0, 0, 0, 1793,
	0, 0, 2035, 1797, 0, 0, 0, 2207, 0, 0,
	1801, 0, 0, 0, 0, 0, 0, 0, 0, 538,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 538,
	0, 0, 0, 0, 0, 0, 0, 1413, 0, 538,
	0, 36, 63, 40, 39, 42, 0, 0, 0, 0,
	0, 0, 62, 0, 0, 0, 0, 2036, 821, 820,
	830, 831, 823, 824, 825, 826, 827, 828, 829, 822,
	0, 0, 832, 43, 66, 65, 0, 0, 0, 0,
	41, 821, 820, 830, 831, 823, 824, 825, 826, 827,
	828, 829, 822, 0, 0, 832, 0, 68, 0, 0,
	0, 1855, 1855, 1855, 0, 0, 0, 0, 0, 0,
	534, 0, 0, 0, 0, 0, 0, 0, 0, 1855,
	0, 0, 56, 0, 2037, 64, 0, 47, 48, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 0, 0, 0, 108, 0, 0, 108, 0,
	0, 0, 0, 0, 1043, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 108, 108, 0,
	0, 1909, 0, 108, 0, 0, 0, 0, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 62, 0, 0,
	0, 108, 0, 364, 1934, 0, 0, 1855, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1736, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1736,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 68, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1043, 1980, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2004, 0, 29,
	0, 61, 32, 33, 0, 0, 0, 0, 0, 1170,
	1170, 0, 0, 57, 1170, 1170, 1170, 1170, 0, 67,
	0, 523, 0, 34, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1736, 0, 0, 0, 0,
	0, 1170, 1170, 1170, 1170, 0, 0, 1170, 1170, 1170,
	1170, 1170, 0, 0, 0, 0, 0, 522, 1170, 1170,
	1170, 69, 1170, 1170, 0, 1170, 1170, 1170, 1170, 0,
	1170, 1170, 1170, 0, 108, 0, 0, 0, 0, 0,
	0, 0, 108, 364, 2035, 0, 108, 108, 0, 2196,
	108, 1259, 1043, 523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1043, 0, 0, 29, 0,
	61, 32, 33, 0, 0, 2098, 0, 0, 0, 0,
	0, 0, 57, 36, 63, 40, 39, 42, 67, 0,
	0, 0, 34, 0, 0, 0, 0, 0, 0, 2036,
	0, 0, 0, 1855, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1736, 0, 43, 66, 65, 0, 0,
	0, 0, 41, 1855, 0, 0, 0, 0, 0, 0,
	69, 0, 0, 108, 0, 0, 0, 0, 0, 0,
	0, 108, 108, 0, 0, 108, 0, 0, 0, 0,
	0, 0, 0, 2035, 0, 0, 0, 0, 2180, 0,
	0, 0, 0, 0, 56, 0, 2037, 64, 0, 47,
	48, 0, 0, 1355, 1356, 108, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 36, 63, 40, 39, 42, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2036, 0,
	0, 0, 1043, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 43, 66, 65, 0, 0, 0,
	0, 41, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 62,
	29, 0, 61, 32, 33, 0, 0, 0, 0, 0,
	0, 1170, 0, 56, 57, 2037, 64, 0, 47, 48,
	67, 0, 0, 0, 34, 0, 0, 0, 0, 0,
	0, 0, 0, 1170, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 68, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1170, 1170,
	0, 0, 69, 1170, 0, 0, 1170, 0, 0, 0,
	0, 1170, 0, 0, 0, 0, 0, 0, 523, 108,
	108, 108, 108, 108, 0, 2035, 0, 0, 0, 0,
	2135, 364, 0, 0, 108, 0, 0, 29, 364, 61,
	32, 33, 0, 0, 108, 0, 0, 0, 62, 0,
	0, 57, 0, 0, 0, 0, 0, 67, 0, 0,
	0, 34, 0, 0, 36, 63, 40, 39, 42, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2036, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 68, 0, 0, 43, 66, 65, 69,
	0, 0, 0, 41, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2035, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 108, 0,
	0, 0, 0, 0, 0, 56, 0, 2037, 64, 0,
	47, 48, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 36, 63, 40, 39, 42, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2036, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 0, 0, 0,
	0, 0, 0, 43, 66, 65, 0, 1170, 0, 0,
	41, 0, 0, 0, 0, 0, 0, 0, 1170, 0,
	1043, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	62, 0, 56, 0, 2037, 64, 0, 47, 48, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 523, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 68, 0, 0, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 1248, 0, 0, 0, 0, 154,
	0, 0, 0, 0, 184, 0, 0, 146, 192, 190,
	0, 0, 0, 226, 281, 0, 0, 0, 0, 187,
	0, 0, 304, 272, 205, 0, 0, 62, 0, 0,
	0, 0, 0, 0, 0, 1250, 1252, 0, 0, 0,
	0, 0, 109, 0, 366, 0, 0, 0, 0, 0,
	0, 136, 0, 108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 108, 0,
	0, 0, 68, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 115, 0, 108, 0, 0, 164, 206, 126,
	0, 0, 0, 177, 310, 0, 1251, 0, 240, 411,
	277, 167, 185, 130, 112, 124, 140, 166, 216, 249,
	257, 0, 0, 0, 0, 0, 147, 0, 251, 224,
	299, 0, 0, 230, 250, 188, 288, 242, 297, 298,
	168, 282, 307, 312, 269, 155, 0, 116, 0, 237,
	150, 181, 0, 0, 0, 144, 0, 0, 0, 268,
	131, 284, 204, 210, 141, 143, 142, 125, 263, 286,
	135, 145, 273, 278, 117, 280, 296, 137, 261, 119,
	294, 276, 202, 178, 179, 118, 0, 247, 153, 163,
	149, 219, 0, 162, 239, 291, 292, 148, 314, 127,
	306, 121, 128, 305, 213, 0, 212, 308, 287, 295,
	203, 196, 0, 120, 293, 201, 195, 183, 158, 170,
	235, 191, 236, 171, 208, 207, 209, 0, 0, 0,
	274, 302, 315, 193, 133, 0, 262, 285, 0, 108,
	134, 161, 157, 234, 211, 129, 173, 271, 182, 189,
	246, 313, 223, 252, 138, 301, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 108, 0, 0, 0, 0,
	367, 368, 369, 370, 371, 375, 376, 380, 381, 389,
	388, 387, 390, 391, 393, 392, 394, 372, 373, 374,
	377, 378, 379, 382, 383, 386, 384, 385, 0, 111,
	122, 186, 0, 244, 160, 303, 0, 152, 0, 0,
	0, 364, 0, 364, 113, 114, 123, 132, 139, 151,
	156, 159, 165, 169, 172, 174, 175, 176, 180, 194,
	197, 198, 199, 200, 214, 215, 217, 218, 221, 222,
	225, 227, 228, 229, 231, 232, 233, 238, 241, 243,
	245, 248, 253, 254, 255, 256, 258, 259, 260, 264,
	265, 266, 267, 275, 279, 289, 290, 300, 309, 311,
	0, 0, 0, 411, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 656, 636, 283, 594,
	659, 566, 583, 670, 584, 587, 625, 552, 606, 220,
	581, 553, 0, 570, 543, 577, 544, 567, 596, 154,
	565, 638, 609, 658, 184, 621, 0, 146, 192, 190,
	0, 0, 108, 226, 281, 657, 602, 0, 665, 187,
	0, 618, 304, 272, 205, 0, 0, 598, 645, 604,
	634, 593, 627, 559, 617, 660, 582, 623, 661, 523,
	0, 0, 537, 0, 1278, 1279, 0, 0, 0, 108,
	0, 136, 0, 620, 655, 579, 622, 624, 541, 619,
	0, 547, 554, 669, 651, 573, 574, 575, 1520, 0,
	0, 0, 0, 0, 0, 597, 605, 631, 590, 0,
	0, 0, 0, 0, 0, 0, 0, 571, 0, 615,
	0, 0, 0, 555, 548, 0, 0, 595, 0, 0,
	0, 558, 115, 572, 632, 0, 539, 164, 206, 126,
	635, 650, 592, 177, 310, 654, 589, 588, 240, 0,
	277, 167, 185, 130, 112, 124, 140, 166, 216, 249,
	257, 580, 540, 639, 568, 578, 147, 576, 251, 224,
	299, 0, 612, 230, 250, 188, 288, 242, 297, 298,
	168, 282, 307, 312, 269, 155, 0, 116, 0, 237,
	150, 181, 591, 626, 569, 144, 629, 616, 644, 268,
	131, 284, 204, 210, 141, 143, 142, 125, 263, 286,
	135, 145, 273, 278, 117, 280, 296, 137, 261, 119,
	294, 276, 202, 178, 179, 118, 0, 247, 153, 163,
	149, 219, 0, 162, 239, 291, 292, 148, 314, 127,
	306, 121, 128, 305, 213, 0, 212, 308, 287, 295,
	203, 196, 0, 120, 293, 201, 195, 183, 158, 170,
	235, 191, 236, 171, 208, 207, 209, 0, 545, 0,
	274, 302, 315, 193, 133, 564, 262, 285, 0, 0,
	134, 161, 157, 234, 211, 129, 173, 271, 182, 189,
	246, 313, 223, 252, 138, 301, 270, 562, 563, 560,
	0, 561, 607, 608, 662, 663, 664, 633, 556, 0,
	646, 647, 0, 637, 652, 653, 628, 671, 585, 586,
	546, 549, 550, 551, 557, 599, 600, 611, 614, 642,
	641, 640, 643, 648, 667, 666, 668, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 610, 111,
	122, 186, 672, 244, 160, 303, 542, 152, 0, 0,
	601, 603, 613, 630, 113, 114, 123, 132, 139, 151,
	156, 159, 165, 169, 172, 174, 175, 176, 180, 194,
	197, 198, 199, 200, 214, 215, 217, 218, 221, 222,
	225, 227, 228, 229, 231, 232, 233, 238, 241, 243,
	245, 248, 253, 254, 255, 256, 258, 259, 260, 264,
	265, 266, 267, 275, 279, 289, 290, 300, 309, 311,
	649, 656, 636, 283, 594, 659, 566, 583, 670, 584,
	587, 625, 552, 606, 220, 581, 553, 0, 570, 543,
	577, 544, 567, 596, 154, 565, 638, 609, 658, 184,
	621, 0, 146, 192, 190, 0, 0, 0, 226, 281,
	657, 602, 0, 665, 187, 0, 618, 304, 272, 205,
	0, 0, 598, 645, 604, 634, 593, 627, 559, 617,
	660, 582, 623, 661, 0, 0, 0, 537, 0, 1278,
	1279, 0, 0, 0, 0, 0, 136, 0, 620, 655,
	579, 622, 624, 541, 619, 0, 547, 554, 669, 651,
	573, 574, 575, 0, 0, 0, 0, 0, 0, 0,
	597, 605, 631, 590, 0, 0, 0, 0, 0, 0,
	0, 0, 571, 0, 615, 0, 0, 0, 555, 548,
	0, 0, 595, 0, 0, 0, 558, 115, 572, 632,
	0, 539, 164, 206, 126, 635, 650, 592, 177, 310,
	654, 589, 588, 240, 0, 277, 167, 185, 130, 112,
	124, 140, 166, 216, 249, 257, 580, 540, 639, 568,
	578, 147, 576, 251, 224, 299, 0, 612, 230, 250,
	188, 288, 242, 297, 298, 168, 282, 307, 312, 269,
	155, 0, 116, 0, 237, 150, 181, 591, 626, 569,
	144, 629, 616, 644, 268, 131, 284, 204, 210, 141,
	143, 142, 125, 263, 286, 135, 145, 273, 278, 117,
	280, 296, 137, 261, 119, 294, 276, 202, 178, 179,
	118, 0, 247, 153, 163, 149, 219, 0, 162, 239,
	291, 292, 148, 314, 127, 306, 121, 128, 305, 213,
	0, 212, 308, 287, 295, 203, 196, 0, 120, 293,
	201, 195, 183, 158, 170, 235, 191, 236, 171, 208,
	207, 209, 0, 545, 0, 274, 302, 315, 193, 133,
	564, 262, 285, 0, 0, 134, 161, 157, 234, 211,
	129, 173, 271, 182, 189, 246, 313, 223, 252, 138,
	301, 270, 562, 563, 560, 0, 561, 607, 608, 662,
	663, 664, 633, 556, 0, 646, 647, 0, 637, 652,
	653, 628, 671, 585, 586, 546, 549, 550, 551, 557,
	599, 600, 611, 614, 642, 641, 640, 643, 648, 667,
	666, 668, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 610, 111, 122, 186, 672, 244, 160,
	303, 542, 152, 0, 0, 601, 603, 613, 630, 113,
	114, 123, 132, 139, 151, 156, 159, 165, 169, 172,
	174, 175, 176, 180, 194, 197, 198, 199, 200, 214,
	215, 217, 218, 221, 222, 225, 227, 228, 229, 231,
	232, 233, 238, 241, 243, 245, 248, 253, 254, 255,
	256, 258, 259, 260, 264, 265, 266, 267, 275, 279,
	289, 290, 300, 309, 311, 649, 656, 636, 283, 594,
	659, 566, 583, 670, 584, 587, 625, 552, 606, 220,
	581, 553, 0, 570, 543, 577, 544, 567, 596, 154,
	565, 638, 609, 658, 184, 621, 0, 146, 192, 190,
	0, 0, 0, 226, 281, 657, 602, 0, 665, 187,
	0, 618, 304, 272, 205, 0, 0, 598, 645, 604,
	634, 593, 627, 559, 617, 660, 582, 623, 661, 0,
	0, 0, 537, 0, 0, 0, 0, 0, 0, 0,
	0, 136, 0, 620, 655, 579, 622, 624, 541, 619,
	0, 547, 554, 669, 651, 573, 574, 575, 0, 0,
	0, 0, 0, 0, 0, 597, 605, 631, 590, 0,
	0, 0, 0, 0, 0, 1915, 0, 571, 0, 615,
	0, 0, 0, 555, 548, 0, 0, 595, 0, 0,
	0, 558, 115, 572, 632, 0, 539, 164, 206, 126,
	635, 650, 592, 177, 310, 654, 589, 588, 240, 0,
	277, 167, 185, 130, 112, 124, 140, 166, 216, 249,
	257, 580, 540, 639, 568, 578, 147, 576, 251, 224,
	299, 0, 612, 230, 250, 188, 288, 242, 297, 298,
	168, 282, 307, 312, 269, 155, 0, 116, 0, 237,
	150, 181, 591, 626, 569, 144, 629, 616, 644, 268,
	131, 284, 204, 210, 141, 143, 142, 125, 263, 286,
	135, 145, 273, 278, 117, 280, 296, 137, 261, 119,
	294, 276, 202, 178, 179, 118, 0, 247, 153, 163,
	149, 219, 0, 162, 239, 291, 292, 148, 314, 127,
	306, 121, 128, 305, 213, 0, 212, 308, 287, 295,
	203, 196, 0, 120, 293, 201, 195, 183, 158, 170,
	235, 191, 236, 171, 208, 207, 209, 0, 545, 0,
	274, 302, 315, 193, 133, 564, 262, 285, 0, 0,
	134, 161, 157, 234, 211, 129, 173, 271, 182, 189,
	246, 313, 223, 252, 138, 301, 270, 562, 563, 560,
	0, 561, 607, 608, 662, 663, 664, 633, 556, 0,
	646, 647, 0, 637, 652, 653, 628, 671, 585, 586,
	546, 549, 550, 551, 557, 599, 600, 611, 614, 642,
	641, 640, 643, 648, 667, 666, 668, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 610, 111,
	122, 186, 672, 244, 160, 303, 542, 152, 0, 0,
	601, 603, 613, 630, 113, 114, 123, 132, 139, 151,
	156, 159, 165, 169, 172, 174, 175, 176, 180, 194,
	197, 198, 199, 200, 214, 215, 217, 218, 221, 222,
	225, 227, 228, 229, 231, 232, 233, 238, 241, 243,
	245, 248, 253, 254, 255, 256, 258, 259, 260, 264,
	265, 266, 267, 275, 279, 289, 290, 300, 309, 311,
	649, 656, 636, 283, 594, 659, 566, 583, 670, 584,
	587, 625, 552, 606, 220, 581, 553, 0, 570, 543,
	577, 544, 567, 596, 154, 565, 638, 609, 658, 184,
	621, 0, 146, 192, 190, 0, 0, 0, 226, 281,
	657, 602, 0, 665, 187, 0, 618, 304, 272, 205,
	0, 0, 598, 645, 604, 634, 593, 627, 559, 617,
	660, 582, 623, 661, 0, 0, 0, 416, 0, 0,
	0, 0, 0, 0, 0, 0, 136, 0, 620, 655,
	579, 622, 624, 541, 619, 0, 547, 554, 669, 651,
	573, 574, 575, 0, 0, 0, 0, 0, 0, 0,
	597, 605, 631, 590, 0, 0, 0, 0, 0, 0,
	1648, 0, 571, 0, 615, 0, 0, 0, 555, 548,
	0, 0, 595, 0, 0, 0, 558, 115, 572, 632,
	0, 539, 164, 206, 126, 635, 650, 592, 177, 310,
	654, 589, 588, 240, 0, 277, 167, 185, 130, 112,
	124, 140, 166, 216, 249, 257, 580, 540, 639, 568,
	578, 147, 576, 251, 224, 299, 0, 612, 230, 250,
	188, 288, 242, 297, 298, 168, 282, 307, 312, 269,
	155, 0, 116, 0, 237, 150, 181, 591, 626, 569,
	144, 629, 616, 644, 268, 131, 284, 204, 210, 141,
	143, 142, 125, 263, 286, 135, 145, 273, 278, 117,
	280, 296, 137, 261, 119, 294, 276, 202, 178, 179,
	118, 0, 247, 153, 163, 149, 219, 0, 162, 239,
	291, 292, 148, 314, 127, 306, 121, 128, 305, 213,
	0, 212, 308, 287, 295, 203, 196, 0, 120, 293,
	201, 195, 183, 158, 170, 235, 191, 236, 171, 208,
	207, 209, 0, 545, 0, 274, 302, 315, 193, 133,
	564, 262, 285, 0, 0, 134, 161, 157, 234, 211,
	129, 173, 271, 182, 189, 246, 313, 223, 252, 138,
	301, 270, 562, 563, 560, 0, 561, 607, 608, 662,
	663, 664, 633, 556, 0, 646, 647, 0, 637, 652,
	653, 628, 671, 585, 586, 546, 549, 550, 551, 557,
	599, 600, 611, 614, 642, 641, 640, 643, 648, 667,
	666, 668, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 610, 111, 122, 186, 672, 244, 160,
	303, 542, 152, 0, 0, 601, 603, 613, 630, 113,
	114, 123, 132, 139, 151, 156, 159, 165, 169, 172,
	174, 175, 176, 180, 194, 197, 198, 199, 200, 214,
	215, 217, 218, 221, 222, 225, 227, 228, 229, 231,
	232, 233, 238, 241, 243, 245, 248, 253, 254, 255,
	256, 258, 259, 260, 264, 265, 266, 267, 275, 279,
	289, 290, 300, 309, 311, 649, 656, 636, 283, 594,
	659, 566, 583, 670, 584, 587, 625, 552, 606, 220,
	581, 553, 0, 570, 543, 577, 544, 567, 596, 154,
	565, 638, 609, 658, 184, 621, 0, 146, 192, 190,
	0, 0, 0, 226, 281, 657, 602, 0, 665, 187,
	0, 618, 304, 272, 205, 0, 0, 598, 645, 604,
	634, 593, 627, 559, 617, 660, 582, 623, 661, 0,
	0, 0, 537, 0, 0, 0, 0, 0, 0, 0,
	0, 136, 0, 620, 655, 579, 622, 624, 541, 619,
	0, 547, 554, 669, 651, 573, 574, 575, 0, 0,
	0, 0, 0, 0, 0, 597, 605, 631, 590, 0,
	0, 0, 0, 0, 0, 1640, 0, 571, 0, 615,
	0, 0, 0, 555, 548, 0, 0, 595, 0, 0,
	0, 558, 115, 572, 632, 0, 539, 164, 206, 126,
	635, 650, 592, 177, 310, 654, 589, 588, 240, 0,
	277, 167, 185, 130, 112, 124, 140, 166, 216, 249,
	257, 580, 540, 639, 568, 578, 147, 576, 251, 224,
	299, 0, 612, 230, 250, 188, 288, 242, 297, 298,
	168, 282, 307, 312, 269, 155, 0, 116, 0, 237,
	150, 181, 591, 626, 569, 144, 629, 616, 644, 268,
	131, 284, 204, 210, 141, 143, 142, 125, 263, 286,
	135, 145, 273, 278, 117, 280, 296, 137, 261, 119,
	294, 276, 202, 178, 179, 118, 0, 247, 153, 163,
	149, 219, 0, 162, 239, 291, 292, 148, 314, 127,
	306, 121, 128, 305, 213, 0, 212, 308, 287, 295,
	203, 196, 0, 120, 293, 201, 195, 183, 158, 170,
	235, 191, 236, 171, 208, 207, 209, 0, 545, 0,
	274, 302, 315, 193, 133, 564, 262, 285, 0, 0,
	134, 161, 157, 234, 211, 129, 173, 271, 182, 189,
	246, 313, 223, 252, 138, 301, 270, 562, 563, 560,
	0, 561, 607, 608, 662, 663, 664, 633, 556, 0,
	646, 647, 0, 637, 652, 653, 628, 671, 585, 586,
	546, 549, 550, 551, 557, 599, 600, 611, 614, 642,
	641, 640, 643, 648, 667, 666, 668, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 610, 111,
	122, 186, 672, 244, 160, 303, 542, 152, 0, 0,
	601, 603, 613, 630, 113, 114, 123, 132, 139, 151,
	156, 159, 165, 169, 172, 174, 175, 176, 180, 194,
	197, 198, 199, 200, 214, 215, 217, 218, 221, 222,
	225, 227, 228, 229, 231, 232, 233, 238, 241, 243,
	245, 248, 253, 254, 255, 256, 258, 259, 260, 264,
	265, 266, 267, 275, 279, 289, 290, 300, 309, 311,
	649, 656, 636, 283, 594, 659, 566, 583, 670, 584,
	587, 625, 552, 606, 220, 581, 553, 0, 570, 543,
	577, 544, 567, 596, 154, 565, 638, 609, 658, 184,
	621, 0, 146, 192, 190, 0, 0, 0, 226, 281,
	657, 602, 0, 665, 187, 0, 618, 304, 272, 205,
	0, 0, 598, 645, 604, 634, 593, 627, 559, 617,
	660, 582, 623, 661, 69, 0, 0, 537, 0, 0,
	0, 0, 0, 0, 0, 0, 136, 0, 620, 655,
	579, 622, 624, 541, 619, 0, 547, 554, 669, 651,
	573, 574, 575, 0, 0, 0, 0, 0, 0, 0,
	597, 605, 631, 590, 0, 0, 0, 0, 0, 0,
	0, 0, 571, 0, 615, 0, 0, 0, 555, 548,
	0, 0, 595, 0, 0, 0, 558, 115, 572, 632,
	0, 539, 164, 206, 126, 635, 650, 592, 177, 310,
	654, 589, 588, 240, 0, 277, 167, 185, 130, 112,
	124, 140, 166, 216, 249, 257, 580, 540, 639, 568,
	578, 147, 576, 251, 224, 299, 0, 612, 230, 250,
	188, 288, 242, 297, 298, 168, 282, 307, 312, 269,
	155, 0, 116, 0, 237, 150, 181, 591, 626, 569,
	144, 629, 616, 644, 268, 131, 284, 204, 210, 141,
	143, 142, 125, 263, 286, 135, 145, 273, 278, 117,
	280, 296, 137, 261, 119, 294, 276, 202, 178, 179,
	118, 0, 247, 153, 163, 149, 219, 0, 162, 239,
	291, 292, 148, 314, 127, 306, 121, 128, 305, 213,
	0, 212, 308, 287, 295, 203, 196, 0, 120, 293,
	201, 195, 183, 158, 170, 235, 191, 236, 171, 208,
	207, 209, 0, 545, 0, 274, 302, 315, 193, 133,
	564, 262, 285, 0, 0, 134, 161, 157, 234, 211,
	129, 173, 271, 182, 189, 246, 313, 223, 252, 138,
	301, 270, 562, 563, 560, 0, 561, 607, 608, 662,
	663, 664, 633, 556, 0, 646, 647, 0, 637, 652,
	653, 628, 671, 585, 586, 546, 549, 550, 551, 557,
	599, 600, 611, 614, 642, 641, 640, 643, 648, 667,
	666, 668, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 610, 111, 122, 186, 672, 244, 160,
	303, 542, 152, 0, 0, 601, 603, 613, 630, 113,
	114, 123, 132, 139, 151, 156, 159, 165, 169, 172,
	174, 175, 176, 180, 194, 197, 198, 199, 200, 214,
	215, 217, 218, 221, 222, 225, 227, 228, 229, 231,
	232, 233, 238, 241, 243, 245, 248, 253, 254, 255,
	256, 258, 259, 260, 264, 265, 266, 267, 275, 279,
	289, 290, 300, 309, 311, 649, 656, 636, 283, 594,
	659, 566, 583, 670, 584, 587, 625, 552, 606, 220,
	581, 553, 0, 570, 543, 577, 544, 567, 596, 154,
	565, 638, 609, 658, 184, 621, 0, 146, 192, 190,
	0, 0, 0, 226, 281, 657, 602, 0, 665, 187,
	0, 618, 304, 272, 205, 0, 0, 598, 645, 604,
	634, 593, 627, 559, 617, 660, 582, 623, 661, 0,
	0, 0, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 136, 0, 620, 655, 579, 622, 624, 541, 619,
	0, 547, 554, 669, 651, 573, 574, 575, 0, 0,
	0, 0, 0, 0, 0, 597, 605, 631, 590, 0,
	0, 0, 0, 0, 0, 1260, 0, 571, 0, 615,
	0, 0, 0, 555, 548, 0, 0, 595, 0, 0,
	0, 558, 115, 572, 632, 0, 539, 164, 206, 126,
	635, 650, 592, 177, 310, 654, 589, 588, 240, 0,
	277, 167, 185, 130, 112, 124, 140, 166, 216, 249,
	257, 580, 540, 639, 568, 578, 147, 576, 251, 224,
	299, 0, 612, 230, 250, 188, 288, 242, 297, 298,
	168, 282, 307, 312, 269, 155, 0, 116, 0, 237,
	150, 181, 591, 626, 569, 144, 629, 616, 644, 268,
	131, 284, 204, 210, 141, 143, 142, 125, 263, 286,
	135, 145, 273, 278, 117, 280, 296, 137, 261, 119,
	294, 276, 202, 178, 179, 118, 0, 247, 153, 163,
	149, 219, 0, 162, 239, 291, 292, 148, 314, 127,
	306, 121, 128, 305, 213, 0, 212, 308, 287, 295,
	203, 196, 0, 120, 293, 201, 195, 183, 158, 170,
	235, 191, 236, 171, 208, 207, 209, 0, 545, 0,
	274, 302, 315, 193, 133, 564, 262, 285, 0, 0,
	134, 161, 157, 234, 211, 129, 173, 271, 182, 189,
	246, 313, 223, 252, 138, 301, 270, 562, 563, 560,
	0, 561, 607, 608, 662, 663, 664, 633, 556, 0,
	646, 647, 0, 637, 652, 653, 628, 671, 585, 586,
	546, 549, 550, 551, 557, 599, 600, 611, 614, 642,
	641, 640, 643, 648, 667, 666, 668, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 610, 111,
	122, 186, 672, 244, 160, 303, 542, 152, 0, 0,
	601, 603, 613, 630, 113, 114, 123, 132, 139, 151,
	156, 159, 165, 169, 172, 174, 175, 176, 180, 194,
	197, 198, 199, 200, 214, 215, 217, 218, 221, 222,
	225, 227, 228, 229, 231, 232, 233, 238, 241, 243,
	245, 248, 253, 254, 255, 256, 258, 259, 260, 264,
	265, 266, 267, 275, 279, 289, 290, 300, 309, 311,
	649, 656, 636, 283, 594, 659, 566, 583, 670, 584,
	587, 625, 552, 606, 220, 581, 553, 0, 570, 543,
	577, 544, 567, 596, 154, 565, 638, 609, 658, 184,
	621, 0, 146, 192, 190, 0, 0, 0, 226, 281,
	657, 602, 0, 665, 187, 0, 618, 304, 272, 205,
	0, 0, 598, 645, 604, 634, 593, 627, 559, 617,
	660, 582, 623, 661, 0, 0, 0, 416, 0, 0,
	0, 0, 0, 0, 0, 0, 136, 0, 620, 655,
	579, 622, 624, 541, 619, 0, 547, 554, 669, 651,
	573, 574, 575, 0, 0, 0, 0, 0, 0, 0,
	597, 605, 631, 590, 0, 0, 0, 0, 0, 0,
	1126, 0, 571, 0, 615, 0, 0, 0, 555, 548,
	0, 0, 595, 0, 0, 0, 558, 115, 572, 632,
	0, 539, 164, 206, 126, 635, 650, 592, 177, 310,
	654, 589, 588, 240, 0, 277, 167, 185, 130, 112,
	124, 140, 166, 216, 249, 257, 580, 540, 639, 568,
	578, 147, 576, 251, 224, 299, 0, 612, 230, 250,
	188, 288, 242, 297, 298, 168, 282, 307, 312, 269,
	155, 0, 116, 0, 237, 150, 181, 591, 626, 569,
	144, 629, 616, 644, 268, 131, 284, 204, 210, 141,
	143, 142, 125, 263, 286, 135, 145, 273, 278, 117,
	280, 296, 137, 261, 119, 294, 276, 202, 178, 179,
	118, 0, 247, 153, 163, 149, 219, 0, 162, 239,
	291, 292, 148, 314, 127, 306, 121, 128, 305, 213,
	0, 212, 308, 287, 295, 203, 196, 0, 120, 293,
	201, 195, 183, 158, 170, 235, 191, 236, 171, 208,
	207, 209, 0, 545, 0, 274, 302, 315, 193, 133,
	564, 262, 285, 0, 0, 134, 161, 157, 234, 211,
	129, 173, 271, 182, 189, 246, 313, 223, 252, 138,
	301, 270, 562, 563, 560, 0, 561, 607, 608, 662,
	663, 664, 633, 556, 0, 646, 647, 0, 637, 652,
	653, 628, 671, 585, 586, 546, 549, 550, 551, 557,
	599, 600, 611, 614, 642, 641, 640, 643, 648, 667,
	666, 668, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 610, 111, 122, 186, 672, 244, 160,
	303, 542, 152, 0, 0, 601, 603, 613, 630, 113,
	114, 123, 132, 139, 151, 156, 159, 165, 169, 172,
	174, 175, 176, 180, 194, 197, 198, 199, 200, 214,
	215, 217, 218, 221, 222, 225, 227, 228, 229, 231,
	232, 233, 238, 241, 243, 245, 248, 253, 254, 255,
	256, 258, 259, 260, 264, 265, 266, 267, 275, 279,
	289, 290, 300, 309, 311, 649, 656, 636, 283, 594,
	659, 566, 583, 670, 584, 587, 625, 552, 606, 220,
	581, 553, 0, 570, 543, 577, 544, 567, 596, 154,
	565, 638, 609, 658, 184, 621, 0, 146, 192, 190,
	0, 0, 0, 226, 281, 657, 602, 0, 665, 187,
	0, 618, 304, 272, 205, 0, 0, 598, 645, 604,
	634, 593, 627, 559, 617, 660, 582, 623, 661, 0,
	0, 0, 537, 0, 0, 0, 0, 0, 0, 0,
	0, 136, 0, 620, 655, 579, 622, 624, 541, 619,
	0, 547, 554, 669, 651, 573, 574, 575, 0, 0,
	0, 0, 0, 0, 0, 597, 605, 631, 590, 0,
	0, 0, 0, 0, 0, 0, 0, 571, 0, 615,
	0, 0, 0, 555, 548, 0, 0, 595, 0, 0,
	0, 558, 115, 572, 632, 0, 539, 164, 206, 126,
	635, 650, 592, 177, 310, 654, 589, 588, 240, 0,
	277, 167, 185, 130, 112, 124, 140, 166, 216, 249,
	257, 580, 540, 639, 568, 578, 147, 576, 251, 224,
	299, 0, 612, 230, 250, 188, 288, 242, 297, 298,
	168, 282, 307, 312, 269, 155, 0, 116, 0, 237,
	150, 181, 591, 626, 569, 144, 629, 616, 644, 268,
	131, 284, 204, 210, 141, 143, 142, 125, 263, 286,
	135, 145, 273, 278, 117, 280, 296, 137, 261, 119,
	294, 276, 202, 178, 179, 118, 0, 247, 153, 163,
	149, 219, 0, 162, 239, 291, 292, 148, 314, 127,
	306, 121, 128, 305, 213, 0, 212, 308, 287, 295,
	203, 196, 0, 120, 293, 201, 195, 183, 158, 170,
	235, 191, 236, 171, 208, 207, 209, 0, 545, 0,
	274, 302, 315, 193, 133, 564, 262, 285, 0, 0,
	134, 161, 157, 234, 211, 129, 173, 271, 182, 189,
	246, 313, 223, 252, 138, 301, 270, 562, 563, 560,
	0, 561, 607, 608, 662, 663, 664, 633, 556, 0,
	646, 647, 0, 637, 652, 653, 628, 671, 585, 586,
	546, 549, 550, 551, 557, 599, 600, 611, 614, 642,
	641, 640, 643, 648, 667, 666, 668, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 610, 111,
	122, 186, 672, 244, 160, 303, 542, 152, 0, 0,
	601, 603, 613, 630, 113, 114, 123, 132, 139, 151,
	156, 159, 165, 169, 172, 174, 175, 176, 180, 194,
	197, 198, 199, 200, 214, 215, 217, 218, 221, 222,
	225, 227, 228, 229, 231, 232, 233, 238, 241, 243,
	245, 248, 253, 254, 255, 256, 258, 259, 260, 264,
	265, 266, 267, 275, 279, 289, 290, 300, 309, 311,
	649, 656, 636, 283, 594, 659, 566, 583, 670, 584,
	587, 625, 552, 606, 220, 581, 553, 0, 570, 543,
	577, 544, 567, 596, 154, 565, 638, 609, 658, 184,
	621, 0, 146, 192, 190, 0, 0, 0, 226, 281,
	657, 602, 0, 665, 187, 0, 618, 304, 272, 205,
	0, 0, 598, 645, 604, 634, 593, 627, 559, 617,
	660, 582, 623, 661, 0, 0, 0, 416, 0, 0,
	0, 0, 0, 0, 0, 0, 136, 0, 620, 655,
	579, 622, 624, 541, 619, 0, 547, 554, 669, 651,
	573, 574, 575, 0, 0, 0, 0, 0, 0, 0,
	597, 605, 631, 590, 0, 0, 0, 0, 0, 0,
	0, 0, 571, 0, 615, 0, 0, 0, 555, 548,
	0, 0, 595, 0, 0, 0, 558, 115, 572, 632,
	0, 539, 164, 206, 126, 635, 650, 592, 177, 310,
	654, 589, 588, 240, 0, 277, 167, 185, 130, 112,
	124, 140, 166, 216, 249, 257, 580, 540, 639, 568,
	578, 147, 576, 251, 224, 299, 0, 612, 230, 250,
	188, 288, 242, 297, 298, 168, 282, 307, 312, 269,
	155, 0, 116, 0, 237, 150, 181, 591, 626, 569,
	144, 629, 616, 644, 268, 131, 284, 204, 210, 141,
	143, 142, 125, 263, 286, 135, 145, 273, 278, 117,
	280, 296, 137, 261, 119, 294, 276, 202, 178, 179,
	118, 0, 247, 153, 163, 149, 219, 0, 162, 239,
	291, 292, 148, 314, 127, 306, 121, 128, 305, 213,
	0, 212, 308, 287, 295, 203, 196, 0, 120, 293,
	201, 195, 183, 158, 170, 235, 191, 236, 171, 208,
	207, 209, 0, 545, 0, 274, 302, 315, 193, 133,
	564, 262, 285, 0, 0, 134, 161, 157, 234, 211,
	129, 173, 271, 182, 189, 246, 313, 223, 252, 138,
	301, 270, 562, 563, 560, 0, 561, 607, 608, 662,
	663, 664, 633, 556, 0, 646, 647, 0, 637, 652,
	653, 628, 671, 585, 586, 546, 549, 550, 551, 557,
	599, 600, 611, 614, 642, 641, 640, 643, 648, 667,
	666, 668, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 610, 111, 122, 186, 672, 244, 160,
	303, 542, 152, 0, 0, 601, 603, 613, 630, 113,
	114, 123, 132, 139, 151, 156, 159, 165, 169, 172,
	174, 175, 176, 180, 194, 197, 198, 199, 200, 214,
	215, 217, 218, 221, 222, 225, 227, 228, 229, 231,
	232, 233, 238, 241, 243, 245, 248, 253, 254, 255,
	256, 258, 259, 260, 264, 265, 266, 267, 275, 279,
	289, 290, 300, 309, 311, 649, 656, 636, 283, 594,
	659, 566, 583, 670, 584, 587, 625, 552, 606, 220,
	581, 553, 0, 570, 543, 577, 544, 567, 596, 154,
	565, 638, 609, 658, 184, 621, 0, 146, 192, 190,
	0, 0, 0, 226, 281, 1289, 1293, 0, 665, 187,
	0, 618, 304, 272, 205, 0, 0, 598, 645, 604,
	634, 593, 627, 559, 617, 660, 582, 623, 661, 0,
	0, 0, 537, 0, 0, 0, 0, 0, 0, 0,
	0, 136, 0, 620, 655, 579, 622, 624, 541, 619,
	0, 547, 554, 669, 651, 573, 574, 575, 0, 0,
	0, 0, 0, 0, 0, 597, 605, 631, 590, 0,
	0, 0, 0, 0, 0, 0, 0, 571, 0, 615,
	0, 0, 0, 555, 548, 0, 0, 595, 0, 0,
	0, 558, 115, 572, 632, 0, 539, 164, 206, 126,
	635, 650, 1292, 177, 310, 654, 589, 588, 1287, 0,
	1288, 167, 185, 536, 112, 124, 1285, 1291, 216, 249,
	257, 580, 540, 639, 568, 578, 147, 576, 251, 224,
	299, 0, 612, 230, 250, 188, 288, 242, 297, 298,
	168, 282, 307, 312, 269, 155, 0, 116, 0, 237,
	150, 181, 591, 626, 569, 144, 629, 616, 644, 268,
	131, 284, 204, 210, 141, 143, 142, 125, 263, 286,
	135, 145, 273, 278, 117, 280, 296, 137, 261, 119,
	294, 276, 202, 178, 179, 118, 0, 247, 153, 163,
	149, 219, 0, 162, 239, 291, 292, 148, 314, 127,
	306, 121, 128, 305, 213, 0, 212, 308, 287, 295,
	203, 196, 0, 120, 293, 201, 195, 183, 158, 170,
	235, 191, 236, 171, 208, 207, 209, 0, 545, 0,
	274, 302, 315, 193, 133, 564, 262, 285, 0, 0,
	134, 161, 157, 234, 211, 129, 173, 271, 182, 189,
	246, 313, 223, 252, 138, 301, 270, 562, 563, 560,
	0, 561, 607, 608, 662, 663, 664, 633, 556, 0,
	646, 647, 0, 637, 652, 653, 628, 671, 585, 586,
	546, 549, 550, 551, 557, 599, 600, 611, 614, 642,
	641, 640, 643, 648, 667, 666, 668, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 610, 111,
	122, 186, 672, 244, 160, 303, 542, 152, 0, 0,
	601, 603, 613, 630, 113, 114, 123, 132, 139, 151,
	156, 159, 165, 169, 172, 174, 175, 176, 180, 194,
	197, 198, 199, 200, 214, 215, 217, 218, 221, 222,
	225, 227, 228, 229, 231, 232, 233, 238, 241, 243,
	245, 248, 253, 254, 255, 256, 258, 259, 260, 264,
	265, 266, 267, 275, 279, 289, 290, 300, 309, 311,
	649, 656, 636, 283, 594, 659, 566, 583, 670, 584,
	587, 625, 552, 606, 220, 581, 553, 0, 570, 543,
	577, 544, 567, 596, 154, 565, 638, 609, 658, 184,
	621, 0, 146, 192, 190, 0, 0, 0, 226, 281,
	657, 602, 0, 665, 187, 0, 618, 304, 272, 205,
	0, 0, 598, 645, 604, 634, 593, 627, 559, 617,
	660, 582, 623, 661, 0, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 136, 0, 620, 655,
	579, 622, 624, 541, 619, 0, 547, 554, 669, 651,
	573, 574, 575, 0, 0, 0, 0, 0, 0, 0,
	597, 605, 631, 590, 0, 0, 0, 0, 0, 0,
	0, 0, 571, 0, 615, 0, 0, 0, 555, 548,
	0, 0, 595, 0, 0, 0, 558, 115, 572, 632,
	0, 539, 164, 206, 126, 635, 650, 592, 177, 310,
	654, 589, 588, 240, 0, 277, 167, 185, 130, 112,
	124, 140, 166, 216, 249, 257, 580, 540, 639, 568,
	578, 147, 576, 251, 224, 299, 0, 612, 230, 250,
	188, 288, 242, 297, 298, 168, 282, 307, 312, 269,
	155, 0, 116, 0, 237, 150, 181, 591, 626, 569,
	144, 629, 616, 644, 268, 131, 284, 204, 210, 141,
	143, 142, 125, 263, 286, 135, 145, 273, 278, 117,
	280, 296, 137, 261, 119, 294, 276, 202, 178, 179,
	118, 0, 247, 153, 163, 149, 219, 0, 162, 239,
	291, 292, 148, 314, 127, 306, 121, 128, 305, 213,
	0, 212, 308, 287, 295, 203, 196, 0, 120, 293,
	201, 195, 183, 158, 170, 235, 191, 236, 171, 208,
	207, 209, 0, 545, 0, 274, 302, 315, 193, 133,
	564, 262, 285, 0, 0, 134, 161, 157, 234, 211,
	129, 173, 271, 182, 189, 246, 313, 223, 252, 138,
	301, 270, 562, 563, 560, 0, 561, 607, 608, 662,
	663, 664, 633, 556, 0, 646, 647, 0, 637, 652,
	653, 628, 671, 585, 586, 546, 549, 550, 551, 557,
	599, 600, 611, 614, 642, 641, 640, 643, 648, 667,
	666, 668, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 610, 111, 122, 186, 672, 244, 160,
	303, 542, 152, 0, 0, 601, 603, 613, 630, 113,
	114, 123, 132, 139, 151, 156, 159, 165, 169, 172,
	174, 175, 176, 180, 194, 197, 198, 199, 200, 214,
	215, 217, 218, 221, 222, 225, 227, 228, 229, 231,
	232, 233, 238, 241, 243, 245, 248, 253, 254, 255,
	256, 258, 259, 260, 264, 265, 266, 267, 275, 279,
	289, 290, 300, 309, 311, 649, 656, 636, 283, 594,
	659, 566, 583, 670, 584, 587, 625, 552, 606, 220,
	581, 553, 0, 570, 543, 577, 544, 567, 596, 154,
	565, 638, 609, 658, 184, 621, 0, 146, 192, 190,
	0, 0, 0, 226, 281, 657, 602, 0, 665, 187,
	0, 618, 304, 272, 205, 0, 0, 598, 645, 604,
	634, 593, 627, 559, 617, 660, 582, 623, 661, 0,
	0, 0, 537, 0, 0, 0, 0, 0, 0, 0,
	0, 136, 0, 620, 655, 579, 622, 624, 541, 619,
	0, 547, 554, 669, 651, 573, 574, 575, 0, 0,
	0, 0, 0, 0, 0, 597, 605, 631, 590, 0,
	0, 0, 0, 0, 0, 0, 0, 571, 0, 615,
	0, 0, 0, 555, 548, 0, 0, 595, 0, 0,
	0, 558, 115, 572, 632, 0, 539, 164, 206, 126,
	635, 650, 592, 177, 310, 654, 589, 588, 240, 0,
	277, 167, 185, 536, 112, 124, 532, 166, 216, 249,
	257, 580, 540, 639, 568, 578, 147, 576, 251, 224,
	299, 0, 612, 230, 250, 188, 288, 242, 297, 298,
	168, 282, 307, 312, 269, 155, 0, 116, 0, 237,
	150, 181, 591, 626, 569, 144, 629, 616, 644, 268,
	131, 284, 204, 210, 141, 143, 142, 125, 263, 286,
	135, 145, 273, 278, 117, 280, 296, 137, 261, 119,
	294, 276, 202, 178, 179, 118, 0, 247, 153, 163,
	149, 219, 0, 162, 239, 291, 292, 148, 314, 127,
	306, 121, 128, 305, 213, 0, 212, 308, 287, 295,
	203, 196, 0, 120, 293, 201, 195, 183, 158, 170,
	235, 191, 236, 171, 208, 207, 209, 0, 545, 0,
	274, 302, 315, 193, 133, 564, 262, 285, 0, 0,
	134, 161, 157, 234, 211, 129, 173, 271, 182, 189,
	246, 313, 223, 252, 138, 301, 270, 562, 563, 560,
	0, 561, 607, 608, 662, 663, 664, 633, 556, 0,
	646, 647, 0, 637, 652, 653, 628, 671, 585, 586,
	546, 549, 550, 551, 557, 599, 600, 611, 614, 642,
	641, 640, 643, 648, 667, 666, 668, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 610, 111,
	122, 186, 672, 244, 160, 303, 542, 152, 0, 0,
	601, 603, 613, 630, 113, 114, 123, 132, 139, 151,
	156, 159, 165, 169, 172, 174, 175, 176, 180, 194,
	197, 198, 199, 200, 214, 215, 217, 218, 221, 222,
	225, 227, 228, 229, 231, 232, 233, 238, 241, 243,
	245, 248, 253, 254, 255, 256, 258, 259, 260, 264,
	265, 266, 267, 275, 279, 289, 290, 300, 309, 311,
	649, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 220, 0, 0, 0, 0, 0, 418, 0,
	0, 0, 154, 415, 0, 0, 0, 184, 0, 0,
	146, 192, 190, 0, 0, 0, 226, 281, 0, 0,
	0, 462, 187, 0, 0, 304, 272, 205, 0, 0,
	0, 0, 451, 452, 0, 0, 0, 0, 0, 0,
	1267, 0, 69, 0, 0, 416, 439, 438, 441, 442,
	443, 444, 0, 0, 136, 440, 445, 446, 447, 1268,
	0, 0, 413, 430, 0, 461, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 427, 428, 0, 0,
	0, 0, 476, 0, 429, 0, 0, 424, 425, 426,
	431, 0, 0, 0, 0, 115, 0, 0, 0, 0,
	164, 206, 126, 453, 0, 0, 177, 310, 0, 0,
	474, 240, 0, 277, 167, 185, 130, 112, 124, 140,
	166, 216, 249, 257, 459, 0, 0, 0, 0, 147,
	0, 251, 224, 299, 0, 0, 230, 250, 188, 288,
	242, 297, 298, 168, 282, 307, 312, 269, 155, 0,
	116, 0, 237, 150, 181, 0, 0, 0, 144, 0,
	0, 0, 268, 131, 284, 204, 210, 141, 143, 142,
	125, 263, 286, 135, 145, 273, 278, 117, 280, 296,
	137, 261, 119, 294, 276, 202, 178, 179, 118, 0,
	247, 153, 163, 149, 219, 0, 162, 239, 291, 292,
	148, 314, 127, 306, 121, 128, 305, 213, 0, 212,
	308, 287, 295, 203, 196, 0, 120, 293, 201, 195,
	183, 158, 170, 235, 191, 236, 171, 208, 207, 209,
	0, 0, 0, 274, 302, 315, 193, 133, 0, 262,
	285, 0, 0, 134, 161, 157, 234, 211, 129, 173,
	271, 182, 189, 246, 313, 223, 252, 138, 301, 270,
	463, 475, 469, 471, 470, 467, 468, 466, 465, 464,
	477, 454, 455, 456, 457, 460, 0, 472, 473, 0,
	0, 0, 0, 490, 491, 492, 493, 494, 495, 496,
	489, 497, 498, 499, 500, 501, 502, 503, 504, 505,
	478, 479, 480, 481, 482, 483, 484, 485, 488, 486,
	487, 458, 111, 122, 186, 0, 244, 160, 303, 0,
	152, 0, 0, 0, 0, 0, 0, 113, 114, 123,
	132, 139, 151, 156, 159, 165, 169, 172, 174, 175,
	176, 180, 194, 197, 198, 199, 200, 214, 215, 217,
	218, 221, 222, 225, 227, 228, 229, 231, 232, 233,
	238, 241, 243, 245, 248, 253, 254, 255, 256, 258,
	259, 260, 264, 265, 266, 267, 275, 279, 289, 290,
	300, 309, 311, 29, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	0, 418, 0, 0, 0, 154, 415, 0, 0, 0,
	184, 0, 0, 146, 192, 190, 0, 0, 0, 226,
	281, 0, 0, 0, 462, 187, 0, 0, 304, 272,
	205, 0, 0, 0, 0, 451, 452, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 0, 0, 416, 439,
	438, 441, 442, 443, 444, 0, 0, 136, 440, 445,
	446, 447, 0, 0, 0, 413, 430, 0, 461, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 427,
	428, 0, 0, 0, 0, 476, 0, 429, 0, 0,
	424, 425, 426, 431, 0, 0, 0, 0, 115, 0,
	0, 0, 0, 164, 206, 126, 453, 0, 0, 177,
	310, 0, 0, 474, 240, 0, 277, 167, 185, 130,
	112, 124, 140, 166, 216, 249, 257, 459, 0, 0,
	0, 0, 147, 0, 251, 224, 299, 0, 0, 230,
	250, 188, 288, 242, 297, 298, 168, 282, 307, 312,
	269, 155, 0, 116, 0, 237, 150, 181, 0, 0,
	0, 144, 0, 0, 0, 268, 131, 284, 204, 210,
	141, 143, 142, 125, 263, 286, 135, 145, 273, 278,
	117, 280, 296, 137, 261, 119, 294, 276, 202, 178,
	179, 118, 0, 247, 153, 163, 149, 219, 0, 162,
	239, 291, 292, 148, 314, 127, 306, 121, 128, 305,
	213, 0, 212, 308, 287, 295, 203, 196, 0, 120,
	293, 201, 195, 183, 158, 170, 235, 191, 236, 171,
	208, 207, 209, 0, 0, 0, 274, 302, 315, 193,
	133, 0, 262, 285, 0, 0, 134, 161, 157, 234,
	211, 129, 173, 271, 182, 189, 246, 313, 223, 252,
	138, 301, 270, 463, 475, 469, 471, 470, 467, 468,
	466, 465, 464, 477, 454, 455, 456, 457, 460, 0,
	472, 473, 0, 0, 0, 0, 490, 491, 492, 493,
	494, 495, 496, 489, 497, 498, 499, 500, 501, 502,
	503, 504, 505, 478, 479, 480, 481, 482, 483, 484,
	485, 488, 486, 487, 458, 111, 122, 186, 68, 244,
	160, 303, 0, 152, 0, 0, 0, 0, 0, 0,
	113, 114, 123, 132, 139, 151, 156, 159, 165, 169,
	172, 174, 175, 176, 180, 194, 197, 198, 199, 200,
	214, 215, 217, 218, 221, 222, 225, 227, 228, 229,
	231, 232, 233, 238, 241, 243, 245, 248, 253, 254,
	255, 256, 258, 259, 260, 264, 265, 266, 267, 275,
	279, 289, 290, 300, 309, 311, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 0, 418, 0, 0, 0, 154, 415, 0,
	0, 0, 184, 0, 0, 146, 192, 190, 0, 0,
	0, 226, 281, 0, 0, 0, 462, 187, 0, 0,
	304, 272, 205, 0, 0, 0, 0, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 69, 0, 0,
	416, 439, 438, 441, 442, 443, 444, 0, 0, 136,
	440, 445, 446, 447, 0, 0, 0, 413, 430, 0,
	461, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 427, 428, 409, 0, 0, 0, 476, 0, 429,
	0, 0, 424, 425, 426, 431, 0, 0, 0, 0,
	115, 0, 0, 0, 0, 164, 206, 126, 453, 0,
	0, 177, 310, 0, 0, 474, 240, 0, 277, 167,
	185, 130, 112, 124, 140, 166, 216, 249, 257, 459,
	0, 0, 0, 0, 147, 0, 251, 224, 299, 0,
	0, 230, 250, 188, 288, 242, 297, 298, 168, 282,
	307, 312, 269, 155, 0, 116, 0, 237, 150, 181,
	0, 0, 0, 144, 0, 0, 0, 268, 131, 284,
	204, 210, 141, 143, 142, 125, 263, 286, 135, 145,
	273, 278, 117, 280, 296, 137, 261, 119, 294, 276,
	202, 178, 179, 118, 0, 247, 153, 163, 149, 219,
	0, 162, 239, 291, 292, 148, 314, 127, 306, 121,
	128, 305, 213, 0, 212, 308, 287, 295, 203, 196,
	0, 120, 293, 201, 195, 183, 158, 170, 235, 191,
	236, 171, 208, 207, 209, 0, 0, 0, 274, 302,
	315, 193, 133, 0, 262, 285, 0, 0, 134, 161,
	157, 234, 211, 129, 173, 271, 182, 189, 246, 313,
	223, 252, 138, 301, 270, 463, 475, 469, 471, 470,
	467, 468, 466, 465, 464, 477, 454, 455, 456, 457,
	460, 0, 472, 473, 0, 0, 0, 0, 490, 491,
	492, 493, 494, 495, 496, 489, 497, 498, 499, 500,
	501, 502, 503, 504, 505, 478, 479, 480, 481, 482,
	483, 484, 485, 488, 486, 487, 458, 111, 122, 186,
	0, 244, 160, 303, 0, 152, 0, 0, 0, 0,
	0, 0, 113, 114, 123, 132, 139, 151, 156, 159,
	165, 169, 172, 174, 175, 176, 180, 194, 197, 198,
	199, 200, 214, 215, 217, 218, 221, 222, 225, 227,
	228, 229, 231, 232, 233, 238, 241, 243, 245, 248,
	253, 254, 255, 256, 258, 259, 260, 264, 265, 266,
	267, 275, 279, 289, 290, 300, 309, 311, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 418, 0, 0, 0, 154,
	415, 0, 0, 0, 184, 0, 0, 146, 192, 190,
	0, 0, 0, 226, 281, 0, 0, 0, 462, 187,
	0, 0, 304, 272, 205, 0, 0, 0, 0, 451,
	452, 0, 0, 0, 0, 0, 0, 0, 0, 69,
	0, 750, 416, 439, 438, 441, 442, 443, 444, 0,
	0, 136, 440, 445, 446, 447, 0, 0, 0, 413,
	430, 0, 461, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 427, 428, 0, 0, 0, 0, 476,
	0, 429, 0, 0, 424, 425, 426, 431, 0, 0,
	0, 0, 115, 0, 0, 0, 0, 164, 206, 126,
	453, 0, 0, 177, 310, 0, 0, 474, 240, 0,
	277, 167, 185, 130, 112, 124, 140, 166, 216, 249,
	257, 459, 0, 0, 0, 0, 147, 0, 251, 224,
	299, 0, 0, 230, 250, 188, 288, 242, 297, 298,
	168, 282, 307, 312, 269, 155, 0, 116, 0, 237,
	150, 181, 0, 0, 0, 144, 0, 0, 0, 268,
	131, 284, 204, 210, 141, 143, 142, 125, 263, 286,
	135, 145, 273, 278, 117, 280, 296, 137, 261, 119,
	294, 276, 202, 178, 179, 118, 0, 247, 153, 163,
	149, 219, 0, 162, 239, 291, 292, 148, 314, 127,
	306, 121, 128, 305, 213, 0, 212, 308, 287, 295,
	203, 196, 0, 120, 293, 201, 195, 183, 158, 170,
	235, 191, 236, 171, 208, 207, 209, 0, 0, 0,
	274, 302, 315, 193, 133, 0, 262, 285, 0, 0,
	134, 161, 157, 234, 211, 129, 173, 271, 182, 189,
	246, 313, 223, 252, 138, 301, 270, 463, 475, 469,
	471, 470, 467, 468, 466, 465, 464, 477, 454, 455,
	456, 457, 460, 0, 472, 473, 0, 0, 0, 0,
	490, 491, 492, 493, 494, 495, 496, 489, 497, 498,
	499, 500, 501, 502, 503, 504, 505, 478, 479, 480,
	481, 482, 483, 484, 485, 488, 486, 487, 458, 111,
	122, 186, 0, 244, 160, 303, 0, 152, 0, 0,
	0, 0, 0, 0, 113, 114, 123, 132, 139, 151,
	156, 159, 165, 169, 172, 174, 175, 176, 180, 194,
	197, 198, 199, 200, 214, 215, 217, 218, 221, 222,
	225, 227, 228, 229, 231, 232, 233, 238, 241, 243,
	245, 248, 253, 254, 255, 256, 258, 259, 260, 264,
	265, 266, 267, 275, 279, 289, 290, 300, 309, 311,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 418, 0, 0,
	0, 154, 415, 0, 0, 0, 184, 0, 0, 146,
	192, 190, 0, 0, 0, 226, 281, 0, 0, 0,
	462, 187, 0, 0, 304, 272, 205, 0, 0, 0,
	0, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 0, 0, 416, 439, 438, 441, 442, 443,
	444, 0, 0, 136, 440, 445, 446, 447, 0, 0,
	0, 413, 430, 0, 461, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 427, 428, 1168, 0, 0,
	0, 476, 0, 429, 0, 0, 424, 425, 426, 431,
	0, 0, 0, 0, 115, 0, 0, 0, 0, 164,
	206, 126, 453, 0, 0, 177, 310, 0, 0, 474,
	240, 0, 277, 167, 185, 130, 112, 124, 140, 166,
	216, 249, 257, 459, 0, 0, 0, 0, 147, 0,
	251, 224, 299, 0, 0, 230, 250, 188, 288, 242,
	297, 298, 168, 282, 307, 312, 269, 155, 0, 116,
	0, 237, 150, 181, 0, 0, 0, 144, 0, 0,
	0, 268, 131, 284, 204, 210, 141, 143, 142, 125,
	263, 286, 135, 145, 273, 278, 117, 280, 296, 137,
	261, 119, 294, 276, 202, 178, 179, 118, 0, 247,
	153, 163, 149, 219, 0, 162, 239, 291, 292, 148,
	314, 127, 306, 121, 128, 305, 213, 0, 212, 308,
	287, 295, 203, 196, 0, 120, 293, 201, 195, 183,
	158, 170, 235, 191, 236, 171, 208, 207, 209, 0,
	0, 0, 274, 302, 315, 193, 133, 0, 262, 285,
	0, 0, 134, 161, 157, 234, 211, 129, 173, 271,
	182, 189, 246, 313, 223, 252, 138, 301, 270, 463,
	475, 469, 471, 470, 467, 468, 466, 465, 464, 477,
	454, 455, 456, 457, 460, 0, 472, 473, 0, 0,
	0, 0, 490, 491, 492, 493, 494, 495, 496, 489,
	497, 498, 499, 500, 501, 502, 503, 504, 505, 478,
	479, 480, 481, 482, 483, 484, 485, 488, 486, 487,
	458, 111, 122, 186, 0, 244, 160, 303, 0, 152,
	0, 0, 0, 0, 0, 0, 113, 114, 123, 132,
	139, 151, 156, 159, 165, 169, 172, 174, 175, 176,
	180, 194, 197, 198, 199, 200, 214, 215, 217, 218,
	221, 222, 225, 227, 228, 229, 231, 232, 233, 238,
	241, 243, 245, 248, 253, 254, 255, 256, 258, 259,
	260, 264, 265, 266, 267, 275, 279, 289, 290, 300,
	309, 311, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 418,
	0, 0, 0, 154, 415, 0, 0, 0, 184, 0,
	0, 146, 192, 190, 0, 0, 0, 226, 281, 0,
	0, 0, 462, 187, 0, 0, 304, 272, 205, 0,
	0, 0, 0, 451, 452, 0, 0, 0, 0, 0,
	0, 0, 0, 69, 0, 0, 416, 439, 1179, 441,
	442, 443, 444, 0, 0, 136, 440, 445, 446, 447,
	0, 0, 0, 413, 430, 0, 461, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 427, 428, 1168,
	0, 0, 0, 476, 0, 429, 0, 0, 424, 425,
	426, 431, 0, 0, 0, 0, 115, 0, 0, 0,
	0, 164, 206, 126, 453, 0, 0, 177, 310, 0,
	0, 474, 240, 0, 277, 167, 185, 130, 112, 124,
	140, 166, 216, 249, 257, 459, 0, 0, 0, 0,
	147, 0, 251, 224, 299, 0, 0, 230, 250, 188,
	288, 242, 297, 298, 168, 282, 307, 312, 269, 155,
	0, 116, 0, 237, 150, 181, 0, 0, 0, 144,
	0, 0, 0, 268, 131, 284, 204, 210, 141, 143,
	142, 125, 263, 286, 135, 145, 273, 278, 117, 280,
	296, 137, 261, 119, 294, 276, 202, 178, 179, 118,
	0, 247, 153, 163, 149, 219, 0, 162, 239, 291,
	292, 148, 314, 127, 306, 121, 128, 305, 213, 0,
	212, 308, 287, 295, 203, 196, 0, 120, 293, 201,
	195, 183, 158, 170, 235, 191, 236, 171, 208, 207,
	209, 0, 0, 0, 274, 302, 315, 193, 133, 0,
	262, 285, 0, 0, 134, 161, 157, 234, 211, 129,
	173, 271, 182, 189, 246, 313, 223, 252, 138, 301,
	270, 463, 475, 469, 471, 470, 467, 468, 466, 465,
	464, 477, 454, 455, 456, 457, 460, 0, 472, 473,
	0, 0, 0, 0, 490, 491, 492, 493, 494, 495,
	496, 489, 497, 498, 499, 500, 501, 502, 503, 504,
	505, 478, 479, 480, 481, 482, 483, 484, 485, 488,
	486, 487, 458, 111, 122, 186, 0, 244, 160, 303,
	0, 152, 0, 0, 0, 0, 0, 0, 113, 114,
	123, 132, 139, 151, 156, 159, 165, 169, 172, 174,
	175, 176, 180, 194, 197, 198, 199, 200, 214, 215,
	217, 218, 221, 222, 225, 227, 228, 229, 231, 232,
	233, 238, 241, 243, 245, 248, 253, 254, 255, 256,
	258, 259, 260, 264, 265, 266, 267, 275, 279, 289,
	290, 300, 309, 311, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	0, 418, 0, 0, 0, 154, 415, 0, 0, 0,
	184, 0, 0, 146, 192, 190, 0, 0, 0, 226,
	281, 0, 0, 0, 462, 187, 0, 0, 304, 272,
	205, 0, 0, 0, 0, 451, 452, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 0, 0, 416, 439,
	1176, 441, 442, 443, 444, 0, 0, 136, 440, 445,
	446, 447, 0, 0, 0, 413, 430, 0, 461, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 427,
	428, 1168, 0, 0, 0, 476, 0, 429, 0, 0,
	424, 425, 426, 431, 0, 0, 0, 0, 115, 0,
	0, 0, 0, 164, 206, 126, 453, 0, 0, 177,
	310, 0, 0, 474, 240, 0, 277, 167, 185, 130,
	112, 124, 140, 166, 216, 249, 257, 459, 0, 0,
	0, 0, 147, 0, 251, 224, 299, 0, 0, 230,
	250, 188, 288, 242, 297, 298, 168, 282, 307, 312,
	269, 155, 0, 116, 0, 237, 150, 181, 0, 0,
	0, 144, 0, 0, 0, 268, 131, 284, 204, 210,
	141, 143, 142, 125, 263, 286, 135, 145, 273, 278,
	117, 280, 296, 137, 261, 119, 294, 276, 202, 178,
	179, 118, 0, 247, 153, 163, 149, 219, 0, 162,
	239, 291, 292, 148, 314, 127, 306, 121, 128, 305,
	213, 0, 212, 308, 287, 295, 203, 196, 0, 120,
	293, 201, 195, 183, 158, 170, 235, 191, 236, 171,
	208, 207, 209, 0, 0, 0, 274, 302, 315, 193,
	133, 0, 262, 285, 0, 0, 134, 161, 157, 234,
	211, 129, 173, 271, 182, 189, 246, 313, 223, 252,
	138, 301, 270, 463, 475, 469, 471, 470, 467, 468,
	466, 465, 464, 477, 454, 455, 456, 457, 460, 0,
	472, 473, 0, 0, 0, 0, 490, 491, 492, 493,
	494, 495, 496, 489, 497, 498, 499, 500, 501, 502,
	503, 504, 505, 478, 479, 480, 481, 482, 483, 484,
	485, 488, 486, 487, 458, 111, 122, 186, 0, 244,
	160, 303, 0, 152, 0, 0, 0, 0, 0, 0,
	113, 114, 123, 132, 139, 151, 156, 159, 165, 169,
	172, 174, 175, 176, 180, 194, 197, 198, 199, 200,
	214, 215, 217, 218, 221, 222, 225, 227, 228, 229,
	231, 232, 233, 238, 241, 243, 245, 248, 253, 254,
	255, 256, 258, 259, 260, 264, 265, 266, 267, 275,
	279, 289, 290, 300, 309, 311, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 0, 418, 0, 0, 0, 154, 415, 0,
	0, 0, 184, 0, 0, 146, 192, 190, 0, 0,
	0, 226, 281, 0, 0, 0, 462, 187, 0, 0,
	304, 272, 205, 0, 0, 0, 0, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 69, 0, 1087,
	416, 439, 438, 441, 442, 443, 444, 0, 0, 136,
	440, 445, 446, 447, 0, 0, 0, 413, 430, 0,
	461, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 427, 428, 0, 0, 0, 0, 476, 0, 429,
	0, 0, 424, 425, 426, 431, 0, 0, 0, 0,
	115, 0, 0, 0, 0, 164, 206, 126, 453, 0,
	0, 177, 310, 0, 0, 474, 240, 0, 277, 167,
	185, 130, 112, 124, 140, 166, 216, 249, 257, 459,
	0, 0, 0, 0, 147, 0, 251, 224, 299, 0,
	0, 230, 250, 188, 288, 242, 297, 298, 168, 282,
	307, 312, 269, 155, 0, 116, 0, 237, 150, 181,
	0, 0, 0, 144, 0, 0, 0, 268, 131, 284,
	204, 210, 141, 143, 142, 125, 263, 286, 135, 145,
	273, 278, 117, 280, 296, 137, 261, 119, 294, 276,
	202, 178, 179, 118, 0, 247, 153, 163, 149, 219,
	0, 162, 239, 291, 292, 148, 314, 127, 306, 121,
	128, 305, 213, 0, 212, 308, 287, 295, 203, 196,
	0, 120, 293, 201, 195, 183, 158, 170, 235, 191,
	236, 171, 208, 207, 209, 0, 0, 0, 274, 302,
	315, 193, 133, 0, 262, 285, 0, 0, 134, 161,
	157, 234, 211, 129, 173, 271, 182, 189, 246, 313,
	223, 252, 138, 301, 270, 463, 475, 469, 471, 470,
	467, 468, 466, 465, 464, 477, 454, 455, 456, 457,
	460, 0, 472, 473, 0, 0, 0, 0, 490, 491,
	492, 493, 494, 495, 496, 489, 497, 498, 499, 500,
	501, 502, 503, 504, 505, 478, 479, 480, 481, 482,
	483, 484, 485, 488, 486, 487, 458, 111, 122, 186,
	0, 244, 160, 303, 0, 152, 0, 0, 0, 0,
	0, 0, 113, 114, 123, 132, 139, 151, 156, 159,
	165, 169, 172, 174, 175, 176, 180, 194, 197, 198,
	199, 200, 214, 215, 217, 218, 221, 222, 225, 227,
	228, 229, 231, 232, 233, 238, 241, 243, 245, 248,
	253, 254, 255, 256, 258, 259, 260, 264, 265, 266,
	267, 275, 279, 289, 290, 300, 309, 311, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 418, 0, 0, 0, 154,
	415, 0, 0, 0, 184, 0, 0, 146, 192, 190,
	0, 0, 0, 226, 281, 0, 0, 0, 462, 187,
	0, 0, 304, 272, 205, 0, 0, 0, 0, 451,
	452, 0, 0, 0, 0, 0, 0, 0, 0, 69,
	0, 0, 416, 439, 438, 441, 442, 443, 444, 0,
	0, 136, 440, 445, 446, 447, 0, 0, 0, 413,
	430, 0, 461, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 427, 428, 0, 0, 0, 0, 476,
	0, 429, 0, 0, 424, 425, 426, 431, 0, 0,
	0, 0, 115, 0, 0, 0, 0, 164, 206, 126,
	453, 0, 0, 177, 310, 0, 0, 474, 240, 0,
	277, 167, 185, 130, 112, 124, 140, 166, 216, 249,
	257, 459, 0, 0, 0, 0, 147, 0, 251, 224,
	299, 0, 0, 230, 250, 188, 288, 242, 297, 298,
	168, 282, 307, 312, 269, 155, 0, 116, 0, 237,
	150, 181, 0, 0, 0, 144, 0, 0, 0, 268,
	131, 284, 204, 210, 141, 143, 142, 125, 263, 286,
	135, 145, 273, 278, 117, 280, 296, 137, 261, 119,
	294, 276, 202, 178, 179, 118, 0, 247, 153, 163,
	149, 219, 0, 162, 239, 291, 292, 148, 314, 127,
	306, 121, 128, 305, 213, 0, 212, 308, 287, 295,
	203, 196, 0, 120, 293, 201, 195, 183, 158, 170,
	235, 191, 236, 171, 208, 207, 209, 0, 0, 0,
	274, 302, 315, 193, 133, 0, 262, 285, 0, 0,
	134, 161, 157, 234, 211, 129, 173, 271, 182, 189,
	246, 313, 223, 252, 138, 301, 270, 463, 475, 469,
	471, 470, 467, 468, 466, 465, 464, 477, 454, 455,
	456, 457, 460, 0, 472, 473, 0, 0, 0, 0,
	490, 491, 492, 493, 494, 495, 496, 489, 497, 498,
	499, 500, 501, 502, 503, 504, 505, 478, 479, 480,
	481, 482, 483, 484, 485, 488, 486, 487, 458, 111,
	122, 186, 0, 244, 160, 303, 0, 152, 0, 0,
	0, 0, 0, 0, 113, 114, 123, 132, 139, 151,
	156, 159, 165, 169, 172, 174, 175, 176, 180, 194,
	197, 198, 199, 200, 214, 215, 217, 218, 221, 222,
	225, 227, 228, 229, 231, 232, 233, 238, 241, 243,
	245, 248, 253, 254, 255, 256, 258, 259, 260, 264,
	265, 266, 267, 275, 279, 289, 290, 300, 309, 311,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 418, 0, 0,
	0, 154, 415, 0, 0, 0, 184, 0, 0, 146,
	192, 190, 0, 0, 0, 226, 281, 0, 0, 0,
	462, 187, 0, 0, 304, 272, 205, 0, 0, 0,
	0, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 0, 0, 416, 439, 438, 441, 442, 443,
	444, 0, 0, 136, 440, 445, 446, 447, 0, 0,
	0, 413, 430, 0, 461, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 427, 428, 0, 0, 0,
	0, 476, 0, 429, 0, 0, 424, 425, 426, 431,
	0, 0, 0, 0, 115, 0, 0, 0, 0, 164,
	206, 126, 453, 0, 0, 177, 310, 0, 0, 474,
	240, 0, 277, 167, 185, 130, 112, 124, 140, 166,
	216, 249, 257, 459, 0, 0, 0, 0, 147, 0,
	251, 224, 299, 0, 0, 230, 250, 188, 288, 242,
	297, 298, 168, 282, 307, 312, 269, 155, 0, 116,
	0, 237, 150, 181, 0, 0, 0, 144, 0, 0,
	0, 268, 131, 284, 204, 210, 141, 143, 142, 125,
	263, 286, 135, 145, 273, 278, 117, 280, 296, 137,
	261, 119, 294, 276, 202, 178, 179, 118, 0, 247,
	153, 163, 149, 219, 0, 162, 239, 291, 292, 148,
	314, 127, 306, 121, 128, 305, 213, 0, 212, 308,
	287, 295, 203, 196, 0, 120, 293, 201, 195, 183,
	158, 170, 235, 191, 236, 171, 208, 207, 209, 0,
	0, 0, 274, 302, 315, 193, 133, 0, 262, 285,
	0, 0, 134, 161, 157, 234, 211, 129, 173, 271,
	182, 189, 246, 313, 223, 252, 138, 301, 270, 463,
	475, 469, 471, 470, 467, 468, 466, 465, 464, 477,
	454, 455, 456, 457, 460, 0, 472, 473, 0, 0,
	0, 0, 765, 766, 767, 768, 769, 773, 774, 778,
	779, 787, 786, 785, 788, 789, 791, 790, 792, 770,
	771, 772, 775, 776, 777, 780, 781, 784, 782, 783,
	458, 111, 122, 186, 0, 244, 160, 303, 0, 152,
	0, 0, 0, 0, 0, 0, 113, 114, 123, 132,
	139, 151, 156, 159, 165, 169, 172, 174, 175, 176,
	180, 194, 197, 198, 199, 200, 214, 215, 217, 218,
	221, 222, 225, 227, 228, 229, 231, 232, 233, 238,
	241, 243, 245, 248, 253, 254, 255, 256, 258, 259,
	260, 264, 265, 266, 267, 275, 279, 289, 290, 300,
	309, 311, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 0, 0, 184, 0,
	0, 146, 192, 190, 0, 0, 0, 226, 281, 0,
	0, 0, 462, 187, 0, 0, 304, 272, 205, 0,
	0, 0, 0, 451, 452, 0, 0, 0, 0, 0,
	0, 0, 0, 69, 0, 0, 416, 439, 438, 441,
	442, 443, 444, 0, 0, 136, 440, 445, 446, 447,
	0, 0, 0, 0, 430, 0, 461, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 427, 428, 0,
	0, 0, 0, 476, 0, 429, 0, 0, 424, 425,
	426, 431, 0, 0, 0, 0, 115, 0, 0, 0,
	0, 164, 206, 126, 453, 0, 0, 177, 310, 0,
	0, 474, 240, 0, 277, 167, 185, 130, 112, 124,
	140, 166, 216, 249, 257, 459, 0, 0, 0, 0,
	147, 0, 251, 224, 299, 0, 2189, 230, 250, 188,
	288, 242, 297, 298, 168, 282, 307, 312, 269, 155,
	0, 116, 0, 237, 150, 181, 0, 0, 0, 144,
	0, 0, 0, 268, 131, 284, 204, 210, 141, 143,
	142, 125, 263, 286, 135, 145, 273, 278, 117, 280,
	296, 137, 261, 119, 294, 276, 202, 178, 179, 118,
	0, 247, 153, 163, 149, 219, 0, 162, 239, 291,
	292, 148, 314, 127, 306, 121, 128, 305, 213, 0,
	212, 308, 287, 295, 203, 196, 0, 120, 293, 201,
	195, 183, 158, 170, 235, 191, 236, 171, 208, 207,
	209, 0, 0, 0, 274, 302, 315, 193, 133, 0,
	262, 285, 0, 0, 134, 161, 157, 234, 211, 129,
	173, 271, 182, 189, 246, 313, 223, 252, 138, 301,
	270, 463, 475, 469, 471, 470, 467, 468, 466, 465,
	464, 477, 454, 455, 456, 457, 460, 0, 472, 473,
	0, 0, 0, 0, 490, 491, 492, 493, 494, 495,
	496, 489, 497, 498, 499, 500, 501, 502, 503, 504,
	505, 478, 479, 480, 481, 482, 483, 484, 485, 488,
	486, 487, 458, 111, 122, 186, 0, 244, 160, 303,
	0, 152, 0, 0, 0, 0, 0, 0, 113, 114,
	123, 132, 139, 151, 156, 159, 165, 169, 172, 174,
	175, 176, 180, 194, 197, 198, 199, 200, 214, 215,
	217, 218, 221, 222, 225, 227, 228, 229, 231, 232,
	233, 238, 241, 243, 245, 248, 253, 254, 255, 256,
	258, 259, 260, 264, 265, 266, 267, 275, 279, 289,
	290, 300, 309, 311, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 154, 0, 0, 0, 0,
	184, 0, 0, 146, 192, 190, 0, 0, 0, 226,
	281, 0, 0, 0, 462, 187, 0, 0, 304, 272,
	205, 0, 0, 0, 0, 451, 452, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 0, 750, 416, 439,
	438, 441, 442, 443, 444, 0, 0, 136, 440, 445,
	446, 447, 0, 0, 0, 0, 430, 0, 461, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 427,
	428, 0, 0, 0, 0, 476, 0, 429, 0, 0,
	424, 425, 426, 431, 0, 0, 0, 0, 115, 0,
	0, 0, 0, 164, 206, 126, 453, 0, 0, 177,
	310, 0, 0, 474, 240, 0, 277, 167, 185, 130,
	112, 124, 140, 166, 216, 249, 257, 459, 0, 0,
	0, 0, 147, 0, 251, 224, 299, 0, 0, 230,
	250, 188, 288, 242, 297, 298, 168, 282, 307, 312,
	269, 155, 0, 116, 0, 237, 150, 181, 0, 0,
	0, 144, 0, 0, 0, 268, 131, 284, 204, 210,
	141, 143, 142, 125, 263, 286, 135, 145, 273, 278,
	117, 280, 296, 137, 261, 119, 294, 276, 202, 178,
	179, 118, 0, 247, 153, 163, 149, 219, 0, 162,
	239, 291, 292, 148, 314, 127, 306, 121, 128, 305,
	213, 0, 212, 308, 287, 295, 203, 196, 0, 120,
	293, 201, 195, 183, 158, 170, 235, 191, 236, 171,
	208, 207, 209, 0, 0, 0, 274, 302, 315, 193,
	133, 0, 262, 285, 0, 0, 134, 161, 157, 234,
	211, 129, 173, 271, 182, 189, 246, 313, 223, 252,
	138, 301, 270, 463, 475, 469, 471, 470, 467, 468,
	466, 465, 464, 477, 454, 455, 456, 457, 460, 0,
	472, 473, 0, 0, 0, 0, 490, 491, 492, 493,
	494, 495, 496, 489, 497, 498, 499, 500, 501, 502,
	503, 504, 505, 478, 479, 480, 481, 482, 483, 484,
	485, 488, 486, 487, 458, 111, 122, 186, 0, 244,
	160, 303, 0, 152, 0, 0, 0, 0, 0, 0,
	113, 114, 123, 132, 139, 151, 156, 159, 165, 169,
	172, 174, 175, 176, 180, 194, 197, 198, 199, 200,
	214, 215, 217, 218, 221, 222, 225, 227, 228, 229,
	231, 232, 233, 238, 241, 243, 245, 248, 253, 254,
	255, 256, 258, 259, 260, 264, 265, 266, 267, 275,
	279, 289, 290, 300, 309, 311, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 154, 0, 0,
	0, 0, 184, 0, 0, 146, 192, 190, 0, 0,
	0, 226, 281, 0, 0, 0, 462, 187, 0, 0,
	304, 272, 205, 0, 0, 0, 0, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 69, 0, 0,
	416, 439, 438, 441, 442, 443, 444, 0, 0, 136,
	440, 445, 446, 447, 0, 0, 0, 0, 430, 0,
	461, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 427, 428, 0, 0, 0, 0, 476, 0, 429,
	0, 0, 424, 425, 426, 431, 0, 0, 0, 0,
	115, 0, 0, 0, 0, 164, 206, 126, 453, 0,
	0, 177, 310, 0, 0, 474, 240, 0, 277, 167,
	185, 130, 112, 124, 140, 166, 216, 249, 257, 459,
	0, 0, 0, 0, 147, 0, 251, 224, 299, 0,
	0, 230, 250, 188, 288, 242, 297, 298, 168, 282,
	307, 312, 269, 155, 0, 116, 0, 237, 150, 181,
	0, 0, 0, 144, 0, 0, 0, 268, 131, 284,
	204, 210, 141, 143, 142, 125, 263, 286, 135, 145,
	273, 278, 117, 280, 296, 137, 261, 119, 294, 276,
	202, 178, 179, 118, 0, 247, 153, 163, 149, 219,
	0, 162, 239, 291, 292, 148, 314, 127, 306, 121,
	128, 305, 213, 0, 212, 308, 287, 295, 203, 196,
	0, 120, 293, 201, 195, 183, 158, 170, 235, 191,
	236, 171, 208, 207, 209, 0, 0, 0, 274, 302,
	315, 193, 133, 0, 262, 285, 0, 0, 134, 161,
	157, 234, 211, 129, 173, 271, 182, 189, 246, 313,
	223, 252, 138, 301, 270, 463, 475, 469, 471, 470,
	467, 468, 466, 465, 464, 477, 454, 455, 456, 457,
	460, 0, 472, 473, 0, 0, 0, 0, 490, 491,
	492, 493, 494, 495, 496, 489, 497, 498, 499, 500,
	501, 502, 503, 504, 505, 478, 479, 480, 481, 482,
	483, 484, 485, 488, 486, 487, 458, 111, 122, 186,
	0, 244, 160, 303, 0, 152, 0, 0, 0, 0,
	0, 0, 113, 114, 123, 132, 139, 151, 156, 159,
	165, 169, 172, 174, 175, 176, 180, 194, 197, 198,
	199, 200, 214, 215, 217, 218, 221, 222, 225, 227,
	228, 229, 231, 232, 233, 238, 241, 243, 245, 248,
	253, 254, 255, 256, 258, 259, 260, 264, 265, 266,
	267, 275, 279, 289, 290, 300, 309, 311, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 1248, 0, 0, 0, 0, 154,
	0, 0, 0, 0, 184, 0, 0, 146, 192, 190,
	0, 0, 0, 226, 281, 0, 0, 0, 0, 187,
	0, 0, 304, 272, 205, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1250, 1252, 0, 0, 0,
	0, 0, 109, 0, 366, 0, 0, 0, 0, 0,
	0, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 115, 0, 0, 0, 0, 164, 206, 126,
	0, 0, 0, 177, 310, 0, 1251, 0, 240, 0,
	277, 167, 185, 130, 112, 124, 140, 166, 216, 249,
	257, 0, 0, 0, 0, 0, 147, 0, 251, 224,
	299, 0, 0, 1246, 250, 188, 288, 242, 297, 298,
	168, 282, 307, 312, 269, 155, 0, 116, 0, 237,
	150, 181, 0, 0, 0, 144, 0, 0, 0, 268,
	131, 284, 204, 210, 141, 143, 142, 125, 263, 286,
	135, 145, 273, 278, 117, 280, 296, 137, 261, 119,
	294, 276, 202, 178, 179, 118, 0, 247, 153, 163,
	149, 219, 0, 162, 239, 291, 292, 148, 314, 127,
	306, 121, 128, 305, 213, 0, 212, 308, 287, 295,
	203, 196, 0, 120, 293, 201, 195, 183, 158, 170,
	235, 191, 236, 171, 208, 207, 209, 0, 0, 0,
	274, 302, 315, 193, 133, 0, 262, 285, 0, 0,
	134, 161, 157, 234, 211, 129, 173, 271, 182, 189,
	246, 313, 223, 252, 138, 301, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	367, 368, 369, 370, 371, 375, 376, 380, 381, 389,
	388, 387, 390, 391, 393, 392, 394, 372, 373, 374,
	377, 378, 379, 382, 383, 386, 384, 385, 0, 111,
	122, 186, 0, 244, 160, 303, 0, 152, 0, 0,
	0, 0, 0, 0, 113, 114, 123, 132, 139, 151,
	156, 159, 165, 169, 172, 174, 175, 176, 180, 194,
	197, 198, 199, 200, 214, 215, 217, 218, 221, 222,
	225, 227, 228, 229, 231, 232, 233, 238, 241, 243,
	245, 248, 253, 254, 255, 256, 258, 259, 260, 264,
	265, 266, 267, 275, 279, 289, 290, 300, 309, 311,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 807, 0, 0, 0,
	0, 154, 0, 0, 0, 0, 184, 0, 0, 146,
	192, 190, 0, 0, 0, 226, 281, 0, 0, 0,
	0, 187, 0, 0, 304, 272, 205, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 808, 0, 811, 0, 0, 0,
	0, 0, 0, 136, 0, 0, 0, 0, 0, 804,
	803, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 805, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 115, 0, 0, 0, 0, 164,
	206, 126, 0, 0, 0, 177, 310, 0, 0, 0,
	240, 0, 277, 167, 185, 130, 112, 124, 140, 166,
	216, 249, 257, 0, 0, 0, 0, 0, 147, 0,
	251, 224, 299, 0, 0, 230, 250, 188, 288, 242,
	297, 298, 168, 282, 307, 312, 269, 155, 0, 116,
	0, 237, 150, 181, 0, 0, 0, 144, 0, 0,
	0, 268, 131, 284, 204, 210, 141, 143, 142, 125,
	263, 286, 135, 145, 273, 278, 117, 280, 296, 137,
	261, 119, 294, 276, 202, 178, 179, 118, 0, 247,
	153, 163, 149, 219, 0, 162, 239, 291, 292, 148,
	314, 127, 306, 121, 128, 305, 213, 0, 212, 308,
	287, 295, 203, 196, 0, 120, 293, 201, 195, 183,
	158, 170, 235, 191, 236, 171, 208, 207, 209, 0,
	0, 0, 274, 302, 315, 193, 133, 0, 262, 285,
	0, 0, 134, 161, 157, 234, 211, 129, 173, 271,
	182, 189, 246, 313, 223, 252, 138, 301, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 367, 368, 369, 370, 371, 375, 376, 380,
	381, 389, 388, 387, 390, 391, 393, 392, 394, 372,
	373, 374, 377, 378, 379, 382, 383, 386, 384, 385,
	0, 111, 122, 186, 0, 244, 160, 303, 0, 152,
	0, 0, 0, 0, 0, 0, 113, 114, 123, 132,
	139, 151, 156, 159, 165, 169, 172, 174, 175, 176,
	180, 194, 197, 198, 199, 200, 214, 215, 217, 218,
	221, 222, 225, 227, 228, 229, 231, 232, 233, 238,
	241, 243, 245, 248, 253, 254, 255, 256, 258, 259,
	260, 264, 265, 266, 267, 275, 279, 289, 290, 300,
	309, 311, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 0, 0, 184, 1498,
	0, 146, 192, 190, 0, 0, 0, 226, 281, 0,
	0, 0, 0, 187, 0, 0, 304, 272, 205, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 366, 0,
	0, 0, 0, 0, 0, 136, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 115, 0, 0, 0,
	0, 164, 206, 126, 0, 0, 0, 177, 310, 0,
	0, 0, 240, 0, 277, 167, 185, 130, 112, 124,
	140, 166, 216, 249, 257, 0, 0, 0, 0, 0,
	147, 0, 251, 224, 299, 0, 0, 230, 250, 188,
	288, 242, 297, 298, 168, 282, 307, 312, 269, 155,
	0, 116, 0, 237, 150, 181, 0, 0, 0, 144,
	0, 0, 0, 268, 131, 284, 204, 210, 141, 143,
	142, 125, 263, 286, 135, 145, 273, 278, 117, 280,
	296, 137, 261, 119, 294, 276, 202, 178, 179, 118,
	0, 247, 153, 163, 149, 219, 0, 162, 239, 291,
	292, 148, 314, 127, 306, 121, 128, 305, 213, 0,
	212, 308, 287, 295, 203, 196, 0, 120, 293, 201,
	195, 183, 158, 170, 235, 191, 236, 171, 208, 207,
	209, 0, 0, 0, 274, 302, 315, 193, 133, 0,
	262, 285, 0, 0, 134, 161, 157, 234, 211, 129,
	173, 271, 182, 189, 246, 313, 223, 252, 138, 301,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 367, 368, 369, 370, 371, 375,
	376, 380, 381, 389, 388, 387, 390, 391, 393, 392,
	394, 372, 373, 374, 377, 378, 379, 382, 383, 386,
	384, 385, 0, 111, 122, 186, 0, 244, 160, 303,
	0, 152, 0, 0, 0, 0, 0, 0, 113, 114,
	123, 132, 139, 151, 156, 159, 165, 169, 172, 174,
	175, 176, 180, 194, 197, 198, 199, 200, 214, 215,
	217, 218, 221, 222, 225, 227, 228, 229, 231, 232,
	233, 238, 241, 243, 245, 248, 253, 254, 255, 256,
	258, 259, 260, 264, 265, 266, 267, 275, 279, 289,
	290, 300, 309, 311, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 154, 0, 0, 0, 0,
	184, 0, 0, 146, 192, 190, 0, 0, 0, 226,
	281, 0, 0, 0, 0, 187, 0, 0, 304, 272,
	205, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	366, 0, 0, 0, 0, 0, 0, 136, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 115, 0,
	0, 0, 0, 164, 206, 126, 0, 0, 0, 177,
	310, 0, 0, 0, 240, 0, 277, 167, 185, 130,
	112, 124, 140, 166, 216, 249, 257, 0, 0, 0,
	0, 0, 147, 0, 251, 224, 299, 0, 0, 230,
	250, 188, 288, 242, 297, 298, 168, 282, 307, 312,
	269, 155, 0, 116, 0, 237, 150, 181, 0, 0,
	0, 144, 0, 0, 0, 268, 131, 284, 204, 210,
	141, 143, 142, 125, 263, 286, 135, 145, 273, 278,
	117, 280, 296, 137, 261, 119, 294, 276, 202, 178,
	179, 118, 0, 247, 153, 163, 149, 219, 0, 162,
	239, 291, 292, 148, 314, 127, 306, 121, 128, 305,
	213, 0, 212, 308, 287, 295, 203, 196, 0, 120,
	293, 201, 195, 183, 158, 170, 235, 191, 236, 171,
	208, 207, 209, 0, 0, 0, 274, 302, 315, 193,
	133, 0, 262, 285, 0, 0, 134, 161, 157, 234,
	211, 129, 173, 271, 182, 189, 246, 313, 223, 252,
	138, 301, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 367, 368, 369, 370,
	371, 375, 376, 380, 381, 389, 388, 387, 390, 391,
	393, 392, 394, 372, 373, 374, 377, 378, 379, 382,
	383, 386, 384, 385, 0, 111, 122, 186, 0, 244,
	160, 303, 0, 152, 0, 0, 0, 0, 0, 0,
	113, 114, 123, 132, 139, 151, 156, 159, 165, 169,
	172, 174, 175, 176, 180, 194, 197, 198, 199, 200,
	214, 215, 217, 218, 221, 222, 225, 227, 228, 229,
	231, 232, 233, 238, 241, 243, 245, 248, 253, 254,
	255, 256, 258, 259, 260, 264, 265, 266, 267, 275,
	279, 289, 290, 300, 309, 311, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 154, 0, 0,
	0, 0, 184, 0, 0, 146, 192, 190, 0, 0,
	0, 226, 281, 0, 0, 0, 0, 187, 0, 0,
	304, 272, 205, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	808, 0, 811, 0, 0, 0, 0, 0, 0, 136,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	115, 0, 0, 0, 0, 164, 206, 126, 0, 0,
	0, 177, 310, 0, 0, 0, 240, 0, 277, 167,
	185, 130, 112, 124, 140, 166, 216, 249, 257, 0,
	0, 0, 0, 0, 147, 0, 251, 224, 299, 0,
	0, 230, 250, 188, 288, 242, 297, 298, 168, 282,
	307, 312, 269, 155, 0, 116, 0, 237, 150, 181,
	0, 0, 0, 144, 0, 0, 0, 268, 131, 284,
	204, 210, 141, 143, 142, 125, 263, 286, 135, 145,
	273, 278, 117, 280, 296, 137, 261, 119, 294, 276,
	202, 178, 179, 118, 0, 247, 153, 163, 149, 219,
	0, 162, 239, 291, 292, 148, 314, 127, 306, 121,
	128, 305, 213, 0, 212, 308, 287, 295, 203, 196,
	0, 120, 293, 201, 195, 183, 158, 170, 235, 191,
	236, 171, 208, 207, 209, 0, 0, 0, 274, 302,
	315, 193, 133, 0, 262, 285, 0, 0, 134, 161,
	157, 234, 211, 129, 173, 271, 182, 189, 246, 313,
	223, 252, 138, 301, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 367, 368,
	369, 370, 371, 375, 376, 380, 381, 389, 388, 387,
	390, 391, 393, 392, 394, 372, 373, 374, 377, 378,
	379, 382, 383, 386, 384, 385, 0, 111, 122, 186,
	0, 244, 160, 303, 0, 152, 0, 0, 0, 0,
	0, 0, 113, 114, 123, 132, 139, 151, 156, 159,
	165, 169, 172, 174, 175, 176, 180, 194, 197, 198,
	199, 200, 214, 215, 217, 218, 221, 222, 225, 227,
	228, 229, 231, 232, 233, 238, 241, 243, 245, 248,
	253, 254, 255, 256, 258, 259, 260, 264, 265, 266,
	267, 275, 279, 289, 290, 300, 309, 311, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
	0, 0, 0, 0, 184, 0, 0, 146, 192, 190,
	0, 0, 0, 226, 281, 0, 0, 0, 0, 187,
	0, 0, 304, 272, 205, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 537, 0, 0, 0, 0, 0, 0, 0,
	0, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 821,
	820, 830, 831, 823, 824, 825, 826, 827, 828, 829,
	822, 0, 0, 832, 0, 0, 0, 0, 0, 0,
	0, 0, 115, 0, 0, 0, 0, 164, 206, 126,
	0, 0, 0, 177, 310, 0, 0, 0, 240, 0,
	277, 167, 185, 130, 112, 124, 140, 166, 216, 249,
	257, 0, 0, 0, 0, 0, 147, 0, 251, 224,
	299, 0, 0, 230, 250, 188, 288, 242, 297, 298,
	168, 282, 307, 312, 269, 155, 0, 116, 0, 237,
	150, 181, 0, 0, 0, 144, 0, 0, 0, 268,
	131, 284, 204, 210, 141, 143, 142, 125, 263, 286,
	135, 145, 273, 278, 117, 280, 296, 137, 261, 119,
	294, 276, 202, 178, 179, 118, 0, 247, 153, 163,
	149, 219, 0, 162, 239, 291, 292, 148, 314, 127,
	306, 121, 128, 305, 213, 0, 212, 308, 287, 295,
	203, 196, 0, 120, 293, 201, 195, 183, 158, 170,
	235, 191, 236, 171, 208, 207, 209, 0, 0, 0,
	274, 302, 315, 193, 133, 0, 262, 285, 0, 0,
	134, 161, 157, 234, 211, 129, 173, 271, 182, 189,
	246, 313, 223, 252, 138, 301, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	122, 186, 0, 244, 160, 303, 0, 152, 0, 0,
	0, 0, 0, 0, 113, 114, 123, 132, 139, 151,
	156, 159, 165, 169, 172, 174, 175, 176, 180, 194,
	197, 198, 199, 200, 214, 215, 217, 218, 221, 222,
	225, 227, 228, 229, 231, 232, 233, 238, 241, 243,
	245, 248, 253, 254, 255, 256, 258, 259, 260, 264,
	265, 266, 267, 275, 279, 289, 290, 300, 309, 311,
	29, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 220, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 154, 0, 0, 0, 0, 184, 0, 0,
	146, 192, 190, 0, 0, 0, 226, 281, 0, 0,
	0, 0, 187, 0, 0, 304, 272, 205, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 69, 0, 0, 537, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 115, 0, 0, 0, 0,
	164, 206, 126, 0, 0, 0, 177, 310, 0, 0,
	0, 240, 0, 277, 167, 185, 130, 112, 124, 140,
	166, 216, 249, 257, 0, 0, 0, 0, 0, 147,
	0, 251, 224, 299, 0, 0, 230, 250, 188, 288,
	242, 297, 298, 168, 282, 307, 312, 269, 155, 0,
	116, 0, 237, 150, 181, 0, 0, 0, 144, 0,
	0, 0, 268, 131, 284, 204, 210, 141, 143, 142,
	125, 263, 286, 135, 145, 273, 278, 117, 280, 296,
	137, 261, 119, 294, 276, 202, 178, 179, 118, 0,
	247, 153, 163, 149, 219, 0, 162, 239, 291, 292,
	148, 314, 127, 306, 121, 128, 305, 213, 0, 212,
	308, 287, 295, 203, 196, 0, 120, 293, 201, 195,
	183, 158, 170, 235, 191, 236, 171, 208, 207, 209,
	0, 0, 0, 274, 302, 315, 193, 133, 0, 262,
	285, 0, 0, 134, 161, 157, 234, 211, 129, 173,
	271, 182, 189, 246, 313, 223, 252, 138, 301, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 122, 186, 68, 244, 160, 303, 0,
	152, 0, 0, 0, 0, 0, 0, 113, 114, 123,
	132, 139, 151, 156, 159, 165, 169, 172, 174, 175,
	176, 180, 194, 197, 198, 199, 200, 214, 215, 217,
	218, 221, 222, 225, 227, 228, 229, 231, 232, 233,
	238, 241, 243, 245, 248, 253, 254, 255, 256, 258,
	259, 260, 264, 265, 266, 267, 275, 279, 289, 290,
	300, 309, 311, 29, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 154, 0, 0, 0, 0,
	184, 0, 0, 146, 192, 190, 0, 0, 0, 226,
	281, 0, 0, 0, 0, 187, 0, 0, 304, 272,
	205, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 136, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 115, 0,
	0, 0, 0, 164, 206, 126, 0, 0, 0, 177,
	310, 0, 0, 0, 240, 0, 277, 167, 185, 130,
	112, 124, 140, 166, 216, 249, 257, 0, 0, 0,
	0, 0, 147, 0, 251, 224, 299, 0, 0, 230,
	250, 188, 288, 242, 297, 298, 168, 282, 307, 312,
	269, 155, 0, 116, 0, 237, 150, 181, 0, 0,
	0, 144, 0, 0, 0, 268, 131, 284, 204, 210,
	141, 143, 142, 125, 263, 286, 135, 145, 273, 278,
	117, 280, 296, 137, 261, 119, 294, 276, 202, 178,
	179, 118, 0, 247, 153, 163, 149, 219, 0, 162,
	239, 291, 292, 148, 314, 127, 306, 121, 128, 305,
	213, 0, 212, 308, 287, 295, 203, 196, 0, 120,
	293, 201, 195, 183, 158, 170, 235, 191, 236, 171,
	208, 207, 209, 0, 0, 0, 274, 302, 315, 193,
	133, 0, 262, 285, 0, 0, 134, 161, 157, 234,
	211, 129, 173, 271, 182, 189, 246, 313, 223, 252,
	138, 301, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 122, 186, 68, 244,
	160, 303, 0, 152, 0, 0, 0, 0, 0, 0,
	113, 114, 123, 132, 139, 151, 156, 159, 165, 169,
	172, 174, 175, 176, 180, 194, 197, 198, 199, 200,
	214, 215, 217, 218, 221, 222, 225, 227, 228, 229,
	231, 232, 233, 238, 241, 243, 245, 248, 253, 254,
	255, 256, 258, 259, 260, 264, 265, 266, 267, 275,
	279, 289, 290, 300, 309, 311, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 154, 954, 0,
	0, 0, 184, 0, 0, 146, 192, 190, 0, 0,
	0, 226, 281, 0, 0, 0, 0, 187, 0, 0,
	304, 272, 205, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	537, 0, 953, 0, 0, 0, 0, 0, 0, 136,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	115, 0, 0, 0, 0, 164, 206, 126, 0, 0,
	0, 177, 310, 0, 0, 0, 240, 0, 277, 167,
	185, 130, 112, 124, 140, 166, 216, 249, 257, 0,
	0, 0, 0, 0, 147, 0, 251, 224, 299, 0,
	0, 230, 250, 188, 288, 242, 297, 298, 168, 282,
	307, 312, 269, 155, 0, 116, 0, 237, 150, 181,
	0, 0, 0, 144, 0, 0, 0, 268, 131, 284,
	204, 210, 141, 143, 142, 125, 263, 286, 135, 145,
	273, 278, 117, 280, 296, 137, 261, 119, 294, 276,
	202, 178, 179, 118, 0, 247, 153, 163, 149, 219,
	0, 162, 239, 291, 292, 148, 314, 127, 306, 121,
	128, 305, 213, 0, 212, 308, 287, 295, 203, 196,
	0, 120, 293, 201, 195, 183, 158, 170, 235, 191,
	236, 171, 208, 207, 209, 0, 0, 0, 274, 302,
	315, 193, 133, 0, 262, 285, 0, 0, 134, 161,
	157, 234, 211, 129, 173, 271, 182, 189, 246, 313,
	223, 252, 138, 301, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 122, 186,
	0, 244, 160, 303, 0, 152, 0, 0, 0, 0,
	0, 0, 113, 114, 123, 132, 139, 151, 156, 159,
	165, 169, 172, 174, 175, 176, 180, 194, 197, 198,
	199, 200, 214, 215, 217, 218, 221, 222, 225, 227,
	228, 229, 231, 232, 233, 238, 241, 243, 245, 248,
	253, 254, 255, 256, 258, 259, 260, 264, 265, 266,
	267, 275, 279, 289, 290, 300, 309, 311, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
	0, 0, 0, 0, 184, 0, 0, 146, 192, 190,
	0, 0, 0, 226, 281, 0, 0, 0, 0, 187,
	0, 0, 304, 272, 205, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 69,
	0, 0, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 115, 0, 0, 0, 0, 164, 206, 126,
	0, 0, 0, 177, 310, 0, 0, 0, 240, 0,
	277, 167, 185, 130, 112, 124, 140, 166, 216, 249,
	257, 0, 0, 0, 0, 0, 147, 0, 251, 224,
	299, 0, 0, 230, 250, 188, 288, 242, 297, 298,
	168, 282, 307, 312, 269, 155, 0, 116, 0, 237,
	150, 181, 0, 0, 0, 144, 0, 0, 0, 268,
	131, 284, 204, 210, 141, 143, 142, 125, 263, 286,
	135, 145, 273, 278, 117, 280, 296, 137, 261, 119,
	294, 276, 202, 178, 179, 118, 0, 247, 153, 163,
	149, 219, 0, 162, 239, 291, 292, 148, 314, 127,
	306, 121, 128, 305, 213, 0, 212, 308, 287, 295,
	203, 196, 0, 120, 293, 201, 195, 183, 158, 170,
	235, 191, 236, 171, 208, 207, 209, 0, 0, 0,
	274, 302, 315, 193, 133, 0, 262, 285, 0, 0,
	134, 161, 157, 234, 211, 129, 173, 271, 182, 189,
	246, 313, 223, 252, 138, 301, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	122, 186, 0, 244, 160, 303, 0, 152, 0, 0,
	0, 0, 0, 0, 113, 114, 123, 132, 139, 151,
	156, 159, 165, 169, 172, 174, 175, 176, 180, 194,
	197, 198, 199, 200, 214, 215, 217, 218, 221, 222,
	225, 227, 228, 229, 231, 232, 233, 238, 241, 243,
	245, 248, 253, 254, 255, 256, 258, 259, 260, 264,
	265, 266, 267, 275, 279, 289, 290, 300, 309, 311,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 0, 0, 0, 0, 184, 0, 0, 146,
	192, 190, 0, 0, 0, 226, 281, 0, 0, 0,
	0, 187, 0, 0, 304, 272, 205, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 0, 0, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 115, 0, 0, 0, 0, 164,
	206, 126, 0, 0, 0, 177, 310, 0, 0, 0,
	240, 0, 277, 167, 185, 130, 112, 124, 140, 166,
	216, 249, 257, 0, 0, 0, 0, 0, 147, 0,
	251, 224, 299, 0, 0, 230, 250, 188, 288, 242,
	297, 298, 168, 282, 307, 312, 269, 155, 0, 116,
	0, 237, 150, 181, 0, 0, 0, 144, 0, 0,
	0, 268, 131, 284, 204, 210, 141, 143, 142, 125,
	263, 286, 135, 145, 273, 278, 117, 280, 296, 137,
	261, 119, 294, 276, 202, 178, 179, 118, 0, 247,
	153, 163, 149, 219, 0, 162, 239, 291, 292, 148,
	314, 127, 306, 121, 128, 305, 213, 0, 212, 308,
	287, 295, 203, 196, 0, 120, 293, 201, 195, 183,
	158, 170, 235, 191, 236, 171, 208, 207, 209, 0,
	0, 0, 274, 302, 315, 193, 133, 0, 262, 285,
	0, 0, 134, 161, 157, 234, 211, 129, 173, 271,
	182, 189, 246, 313, 223, 252, 138, 301, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 122, 186, 0, 244, 160, 303, 0, 152,
	0, 0, 0, 0, 0, 0, 113, 114, 123, 132,
	139, 151, 156, 159, 165, 169, 172, 174, 175, 176,
	180, 194, 197, 198, 199, 200, 214, 215, 217, 218,
	221, 222, 225, 227, 228, 229, 231, 232, 233, 238,
	241, 243, 245, 248, 253, 254, 255, 256, 258, 259,
	260, 264, 265, 266, 267, 275, 279, 289, 290, 300,
	309, 311, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 924, 154, 0, 0, 0, 0, 184, 0,
	0, 146, 192, 190, 0, 0, 0, 226, 281, 0,
	0, 0, 0, 187, 0, 0, 304, 272, 205, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 136, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 115, 0, 0, 0,
	0, 164, 206, 126, 0, 0, 0, 177, 310, 0,
	0, 0, 240, 0, 277, 167, 185, 130, 112, 124,
	140, 166, 216, 249, 257, 0, 0, 0, 0, 0,
	147, 0, 251, 224, 299, 0, 0, 230, 250, 188,
	288, 242, 297, 298, 168, 282, 307, 312, 269, 155,
	0, 116, 0, 237, 150, 181, 0, 0, 0, 144,
	0, 0, 0, 268, 131, 284, 204, 210, 141, 143,
	142, 125, 263, 286, 135, 145, 273, 278, 117, 280,
	296, 137, 261, 119, 294, 276, 202, 178, 179, 118,
	0, 247, 153, 163, 149, 219, 0, 162, 239, 291,
	292, 148, 314, 127, 306, 121, 128, 305, 213, 0,
	212, 308, 287, 295, 203, 196, 0, 120, 293, 201,
	195, 183, 158, 170, 235, 191, 236, 171, 208, 207,
	209, 0, 0, 0, 274, 302, 315, 193, 133, 0,
	262, 285, 0, 0, 134, 161, 157, 234, 211, 129,
	173, 271, 182, 189, 246, 313, 223, 252, 138, 301,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 122, 186, 0, 244, 160, 303,
	0, 152, 0, 0, 0, 0, 0, 0, 113, 114,
	123, 132, 139, 151, 156, 159, 165, 169, 172, 174,
	175, 176, 180, 194, 197, 198, 199, 200, 214, 215,
	217, 218, 221, 222, 225, 227, 228, 229, 231, 232,
	233, 238, 241, 243, 245, 248, 253, 254, 255, 256,
	258, 259, 260, 264, 265, 266, 267, 275, 279, 289,
	290, 300, 309, 311, 283, 0, 0, 0, 508, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 154, 0, 0, 0, 0,
	184, 0, 0, 146, 192, 190, 0, 0, 0, 226,
	281, 0, 0, 0, 0, 187, 0, 0, 304, 272,
	205, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 136, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 115, 0,
	0, 0, 0, 164, 206, 126, 0, 0, 0, 177,
	310, 0, 0, 0, 240, 0, 277, 167, 185, 130,
	112, 124, 140, 166, 216, 249, 257, 0, 0, 0,
	0, 0, 147, 0, 251, 224, 299, 0, 0, 230,
	250, 188, 288, 242, 297, 298, 168, 282, 307, 312,
	269, 155, 0, 116, 0, 237, 150, 181, 0, 0,
	0, 144, 0, 0, 0, 268, 131, 284, 204, 210,
	141, 143, 142, 125, 263, 286, 135, 145, 273, 278,
	117, 280, 296, 137, 261, 119, 294, 276, 202, 178,
	179, 118, 0, 247, 153, 163, 149, 219, 0, 162,
	239, 291, 292, 148, 314, 127, 306, 121, 128, 305,
	213, 0, 212, 308, 287, 295, 203, 196, 0, 120,
	293, 201, 195, 183, 158, 170, 235, 191, 236, 171,
	208, 207, 209, 0, 0, 0, 274, 302, 315, 193,
	133, 0, 262, 285, 0, 0, 134, 161, 157, 234,
	211, 129, 173, 271, 182, 189, 246, 313, 223, 252,
	138, 301, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 122, 186, 0, 244,
	160, 303, 0, 152, 0, 0, 0, 0, 0, 0,
	113, 114, 123, 132, 139, 151, 156, 159, 165, 169,
	172, 174, 175, 176, 180, 194, 197, 198, 199, 200,
	214, 215, 217, 218, 221, 222, 225, 227, 228, 229,
	231, 232, 233, 238, 241, 243, 245, 248, 253, 254,
	255, 256, 258, 259, 260, 264, 265, 266, 267, 275,
	279, 289, 290, 300, 309, 311, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 154, 0, 0,
	0, 0, 184, 0, 0, 146, 192, 190, 0, 0,
	0, 226, 281, 0, 0, 0, 0, 187, 0, 0,
	304, 272, 205, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 136,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	115, 0, 0, 0, 0, 164, 206, 126, 0, 106,
	0, 177, 310, 0, 0, 0, 240, 0, 277, 167,
	185, 130, 112, 124, 140, 166, 216, 249, 257, 0,
	0, 0, 0, 0, 147, 0, 251, 224, 299, 0,
	0, 230, 250, 188, 288, 242, 297, 298, 168, 282,
	307, 312, 269, 155, 0, 116, 0, 237, 150, 181,
	0, 0, 0, 144, 0, 0, 0, 268, 131, 284,
	204, 210, 141, 143, 142, 125, 263, 286, 135, 145,
	273, 278, 117, 280, 296, 137, 261, 119, 294, 276,
	202, 178, 179, 118, 0, 247, 153, 163, 149, 219,
	0, 162, 239, 291, 292, 148, 314, 127, 306, 121,
	128, 305, 213, 0, 212, 308, 287, 295, 203, 196,
	0, 120, 293, 201, 195, 183, 158, 170, 235, 191,
	236, 171, 208, 207, 209, 0, 0, 0, 274, 302,
	315, 193, 133, 0, 262, 285, 0, 0, 134, 161,
	157, 234, 211, 129, 173, 271, 182, 189, 246, 313,
	223, 252, 138, 301, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 122, 186,
	0, 244, 160, 303, 0, 152, 0, 0, 0, 0,
	0, 0, 113, 114, 123, 132, 139, 151, 156, 159,
	165, 169, 172, 174, 175, 176, 180, 194, 197, 198,
	199, 200, 214, 215, 217, 218, 221, 222, 225, 227,
	228, 229, 231, 232, 233, 238, 241, 243, 245, 248,
	253, 254, 255, 256, 258, 259, 260, 264, 265, 266,
	267, 275, 279, 289, 290, 300, 309, 311, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
	0, 0, 0, 0, 184, 0, 0, 146, 192, 190,
	0, 0, 0, 226, 281, 0, 0, 0, 0, 187,
	0, 0, 304, 272, 205, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 537, 0, 0, 0, 0, 0, 0, 0,
	0, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 115, 0, 0, 0, 0, 164, 206, 126,
	0, 0, 0, 177, 310, 0, 0, 0, 240, 0,
	277, 167, 185, 130, 112, 124, 140, 166, 216, 249,
	257, 0, 0, 0, 0, 0, 147, 0, 251, 224,
	299, 0, 0, 230, 250, 188, 288, 242, 297, 298,
	168, 282, 307, 312, 269, 155, 0, 116, 0, 237,
	150, 181, 0, 0, 0, 144, 0, 0, 0, 268,
	131, 284, 204, 210, 141, 143, 142, 125, 263, 286,
	135, 145, 273, 278, 117, 280, 296, 137, 261, 119,
	294, 276, 202, 178, 179, 118, 0, 247, 153, 163,
	149, 219, 0, 162, 239, 291, 292, 148, 314, 127,
	306, 121, 128, 305, 213, 0, 212, 308, 287, 295,
	203, 196, 0, 120, 293, 201, 195, 183, 158, 170,
	235, 191, 236, 171, 208, 207, 209, 0, 0, 0,
	274, 302, 315, 193, 133, 0, 262, 285, 0, 0,
	134, 161, 157, 234, 211, 129, 173, 271, 182, 189,
	246, 313, 223, 252, 138, 301, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	122, 186, 0, 244, 160, 303, 0, 152, 0, 0,
	0, 0, 0, 0, 113, 114, 123, 132, 139, 151,
	156, 159, 165, 169, 172, 174, 175, 176, 180, 194,
	197, 198, 199, 200, 214, 215, 217, 218, 221, 222,
	225, 227, 228, 229, 231, 232, 233, 238, 241, 243,
	245, 248, 253, 254, 255, 256, 258, 259, 260, 264,
	265, 266, 267, 275, 279, 289, 290, 300, 309, 311,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 0, 0, 0, 0, 184, 0, 0, 146,
	192, 190, 0, 0, 0, 226, 281, 0, 0, 0,
	0, 187, 0, 0, 304, 272, 205, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 115, 0, 0, 0, 0, 164,
	206, 126, 0, 0, 0, 177, 310, 0, 0, 0,
	240, 0, 277, 167, 185, 130, 112, 124, 140, 166,
	216, 249, 257, 0, 0, 0, 0, 0, 147, 0,
	251, 224, 299, 0, 0, 230, 250, 188, 288, 242,
	297, 298, 168, 282, 307, 312, 269, 155, 0, 116,
	0, 237, 150, 181, 0, 0, 0, 144, 0, 0,
	0, 268, 131, 284, 204, 210, 141, 143, 142, 125,
	263, 286, 135, 145, 273, 278, 117, 280, 296, 137,
	261, 119, 294, 276, 202, 178, 179, 118, 0, 247,
	153, 163, 149, 219, 0, 162, 239, 291, 292, 148,
	314, 127, 306, 121, 128, 305, 213, 0, 212, 308,
	287, 295, 203, 196, 0, 120, 293, 201, 195, 183,
	158, 170, 235, 191, 236, 171, 208, 207, 209, 0,
	0, 0, 274, 302, 315, 193, 133, 0, 262, 285,
	0, 0, 134, 161, 157, 234, 211, 129, 173, 271,
	182, 189, 246, 313, 223, 252, 138, 301, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 122, 186, 0, 244, 160, 303, 0, 152,
	0, 0, 0, 0, 0, 0, 113, 114, 123, 132,
	139, 151, 156, 159, 165, 169, 172, 174, 175, 176,
	180, 194, 197, 198, 199, 200, 214, 215, 217, 218,
	221, 222, 225, 227, 228, 229, 231, 232, 233, 238,
	241, 243, 245, 248, 253, 254, 255, 256, 258, 259,
	260, 264, 265, 266, 267, 275, 279, 289, 290, 300,
	309, 311, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 0, 0, 184, 0,
	0, 146, 192, 190, 0, 0, 0, 226, 281, 0,
	0, 0, 0, 187, 0, 0, 304, 272, 205, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 416, 0, 0, 0,
	0, 0, 0, 0, 0, 136, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 115, 0, 0, 0,
	0, 164, 206, 126, 0, 0, 0, 177, 310, 0,
	0, 0, 240, 0, 277, 167, 185, 130, 112, 124,
	140, 166, 216, 249, 257, 0, 0, 0, 0, 0,
	147, 0, 251, 224, 299, 0, 0, 230, 250, 188,
	288, 242, 297, 298, 168, 282, 307, 312, 269, 155,
	0, 116, 0, 237, 150, 181, 0, 0, 0, 144,
	0, 0, 0, 268, 131, 284, 204, 210, 141, 143,
	142, 125, 263, 286, 135, 145, 273, 278, 117, 280,
	296, 137, 261, 119, 294, 276, 202, 178, 179, 118,
	0, 247, 153, 163, 149, 219, 0, 162, 239, 291,
	292, 148, 314, 127, 306, 121, 525, 305, 213, 0,
	212, 308, 287, 295, 203, 196, 0, 120, 293, 201,
	195, 183, 158, 170, 235, 191, 236, 171, 208, 207,
	209, 0, 0, 0, 274, 302, 315, 193, 133, 0,
	262, 285, 0, 0, 134, 161, 157, 234, 526, 524,
	173, 271, 182, 189, 246, 313, 223, 252, 138, 301,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 122, 186, 0, 244, 160, 303,
	0, 152, 0, 0, 0, 0, 0, 0, 113, 114,
	123, 132, 139, 151, 156, 159, 165, 169, 172, 174,
	175, 176, 180, 194, 197, 198, 199, 200, 214, 215,
	217, 218, 221, 222, 225, 227, 228, 229, 231, 232,
	233, 238, 241, 243, 245, 248, 253, 254, 255, 256,
	258, 259, 260, 264, 265, 266, 267, 275, 279, 289,
	290, 300, 309, 311, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 154, 0, 0, 0, 0,
	184, 0, 0, 146, 192, 190, 0, 0, 0, 226,
	281, 0, 0, 0, 0, 187, 0, 0, 304, 272,
	205, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 416, 0,
	0, 0, 0, 0, 0, 0, 0, 136, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 115, 0,
	0, 0, 0, 164, 206, 126, 0, 0, 0, 177,
	310, 0, 0, 0, 240, 0, 277, 167, 185, 130,
	112, 124, 140, 166, 216, 249, 257, 0, 0, 0,
	0, 0, 147, 0, 251, 224, 299, 0, 0, 230,
	250, 188, 288, 242, 297, 298, 168, 282, 307, 312,
	269, 155, 0, 116, 0, 237, 150, 181, 0, 0,
	0, 144, 0, 0, 0, 268, 131, 284, 204, 210,
	141, 143, 142, 125, 263, 286, 135, 145, 273, 278,
	117, 280, 296, 137, 261, 119, 294, 276, 202, 178,
	179, 118, 0, 247, 153, 163, 149, 219, 0, 162,
	239, 291, 292, 148, 314, 127, 306, 121, 128, 305,
	213, 0, 212, 308, 287, 295, 203, 196, 0, 120,
	293, 201, 195, 183, 158, 170, 235, 191, 236, 171,
	208, 207, 209, 0, 0, 0, 274, 302, 315, 193,
	133, 0, 262, 285, 0, 0, 134, 161, 157, 234,
	211, 129, 173, 271, 182, 189, 246, 313, 223, 252,
	138, 301, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 122, 186, 0, 244,
	160, 303, 0, 152, 0, 0, 0, 0, 0, 0,
	113, 114, 123, 132, 139, 151, 156, 159, 165, 169,
	172, 174, 175, 176, 180, 194, 197, 198, 199, 200,
	214, 215, 217, 218, 221, 222, 225, 227, 228, 229,
	231, 232, 233, 238, 241, 243, 245, 248, 253, 254,
	255, 256, 258, 259, 260, 264, 265, 266, 267, 275,
	279, 289, 290, 300, 309, 311, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 154, 0, 0,
	0, 0, 184, 0, 0, 146, 192, 190, 0, 0,
	0, 226, 281, 0, 0, 0, 0, 187, 0, 0,
	304, 272, 205, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	416, 0, 0, 0, 0, 0, 0, 0, 0, 136,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	115, 0, 0, 0, 0, 164, 206, 126, 0, 0,
	0, 177, 310, 0, 0, 0, 240, 0, 277, 167,
	185, 130, 112, 124, 140, 166, 216, 249, 257, 0,
	0, 0, 0, 0, 147, 0, 251, 224, 299, 0,
	0, 230, 250, 188, 288, 242, 297, 298, 168, 282,
	307, 312, 269, 155, 0, 116, 0, 237, 150, 181,
	0, 0, 0, 144, 0, 0, 0, 268, 131, 284,
	204, 210, 141, 143, 142, 125, 263, 286, 135, 145,
	273, 278, 117, 280, 945, 137, 261, 119, 294, 276,
	202, 178, 179, 118, 0, 247, 153, 163, 149, 219,
	0, 162, 239, 291, 292, 148, 314, 127, 306, 121,
	525, 305, 213, 0, 212, 308, 287, 295, 203, 196,
	0, 120, 293, 201, 195, 183, 158, 170, 235, 191,
	236, 171, 208, 207, 209, 0, 0, 0, 274, 302,
	315, 193, 133, 0, 262, 285, 0, 0, 134, 161,
	157, 234, 526, 524, 173, 271, 182, 189, 246, 313,
	223, 252, 138, 301, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 122, 186,
	0, 244, 160, 303, 0, 152, 0, 0, 0, 0,
	0, 0, 113, 114, 123, 132, 139, 151, 156, 159,
	165, 169, 172, 174, 175, 176, 180, 194, 197, 198,
	199, 200, 214, 215, 217, 218, 221, 222, 225, 227,
	228, 229, 231, 232, 233, 238, 241, 243, 245, 248,
	253, 254, 255, 256, 258, 259, 260, 264, 265, 266,
	267, 275, 279, 289, 290, 300, 309, 311, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
	0, 0, 0, 0, 184, 0, 0, 146, 192, 190,
	0, 0, 0, 226, 281, 0, 0, 0, 0, 187,
	0, 0, 304, 272, 205, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 416, 0, 0, 0, 0, 0, 0, 0,
	0, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 115, 0, 0, 0, 0, 164, 206, 126,
	0, 0, 0, 177, 310, 0, 0, 0, 240, 0,
	277, 167, 185, 130, 112, 124, 140, 166, 216, 249,
	257, 0, 0, 0, 0, 0, 147, 0, 251, 224,
	299, 0, 0, 230, 250, 188, 288, 242, 297, 298,
	168, 282, 307, 312, 269, 155, 0, 116, 0, 237,
	150, 181, 0, 0, 0, 144, 0, 0, 0, 268,
	131, 284, 204, 210, 141, 143, 142, 125, 263, 286,
	135, 145, 273, 278, 117, 280, 516, 137, 261, 119,
	294, 276, 202, 178, 179, 118, 0, 247, 153, 163,
	149, 219, 0, 162, 239, 291, 292, 148, 314, 127,
	306, 121, 525, 305, 213, 0, 212, 308, 287, 295,
	203, 196, 0, 120, 293, 201, 195, 183, 158, 170,
	235, 191, 236, 171, 208, 207, 209, 0, 0, 0,
	274, 302, 315, 193, 133, 0, 262, 285, 0, 0,
	134, 161, 157, 234, 526, 524, 519, 518, 182, 189,
	246, 313, 223, 252, 138, 301, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	122, 186, 0, 244, 160, 303, 0, 152, 0, 0,
	0, 0, 0, 0, 113, 114, 123, 132, 139, 151,
	156, 159, 165, 169, 172, 174, 175, 176, 180, 194,
	197, 198, 199, 200, 214, 215, 217, 218, 221, 222,
	225, 227, 228, 229, 231, 232, 233, 238, 241, 243,
	245, 248, 253, 254, 255, 256, 258, 259, 260, 264,
	265, 266, 267, 275, 279, 289, 290, 300, 309, 311,
}
var yyPact = [...]int{

	226, -1000, -292, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1309, 1367, -1000,
	-1000, -1000, -1000, -1000, -1000, 523, 232, -1000, -1000, 233,
	32, 20889, 230, 2311, 21713, -1000, -1000, -1000, -1000, 166,
	21713, -1000, -1000, -86, -95, -1000, 13, 940, 1203, 1361,
	161, -1000, -1000, 195, 2, -1000, -1000, -1000, 16767, -1000,
	-1000, -1000, 1275, 1307, 163, 1281, 1108, -1000, 10999, 199,
	199, 20477, 23361, -1000, 21713, 9761, 222, 21713, -147, 189,
	189, 95, 189, -1000, 421, -1000, -1000, -1000, 21713, 191,
	21301, 191, 191, 191, 191, 191, 21713, -1000, 283, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 21713, 935, 1220, 538,
	134, 6856, 6856, -1000, 535, -1000, 85, 84, 80, 82,
	23, 635, -1000, 6856, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 210, 161, 420, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1219, 608, 1055, -80, -1000, 841, 229, 21713, -1000,
	-1000, 1022, -1000, 1067, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1225, 13471, 13883, 1309, -1000,
	161, -1000, -1000, -1000, 1179, -1000, -1000, 470, 1336, -1000,
	15943, 282, -1000, 13471, 2577, 1024, -1000, -1000, 1024, -1000,
	-1000, 255, -1000, -1000, 15119, 15119, 15119, 15119, 15119, 15119,
	15119, 15119, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1024, -1000,
	10587, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
	1024, 13471, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
	1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
	1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
	1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
	1024, 1024, 1024, 1024, 1024, 1024, 20065, 19241, 21713, 1001,
	954, -1000, -1000, 281, 960, 22949, -119, -1000, -1000, -1000,
	365, 18829, -1000, 280, -1000, 1216, -1000, -1000, 933, 157,
	-1000, 2761, 254, -1000, -1000, -1000, 1054, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 21301, 1261, 206, 930, 455, 929, 928,
	927, 21713, 926, 1013, 203, 21713, 1251, 1077, 21713, 924,
	923, 922, 920, -1000, 9346, -1000, 6856, 538, -1000, 736,
	13471, 189, 189, 6856, 6856, 6856, 21713, 21713, 21713, -1000,
	-1000, -1000, -1000, 21713, -1000, -1000, 538, 538, 6856, 6856,
	423, 1327, 423, 423, -1000, -1000, -1000, -1000, 13471, -1000,
	15119, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 918, -1000,
	-1000, 395, -1000, 727, -1000, 13059, -290, -1000, 1108, -1000,
	-1000, 21713, 6856, 16767, 1024, 21301, -1000, 1356, 321, 745,
	272, 1012, -1000, 652, 1236, 1024, 1024, 1024, 1024, 1024,
	1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
	1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
	1024, 1024, 1024, 1275, 841, 1108, 783, 1120, -1000, -1000,
	-1000, 21713, -1000, 13471, 13471, 720, -1000, 17179, -1000, -1000,
	-1000, -1000, 7686, 313, 15119, 570, 435, 15119, 15119, 15119,
	15119, 15119, 15119, 15119, 15119, 15119, 15119, 15119, 15119, 15119,
	15119, 15119, 691, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 915, -1000, 161, 831, 831, 310, 310, 310, 310,
	310, 310, 310, 17591, 1279, 841, 913, 532, 10587, 11823,
	11823, 841, 13471, 13471, 12647, 12235, 11823, 11823, 1279, 441,
	532, 22537, -1000, -1000, 14707, -1000, -1000, -1000, -1000, -1000,
	841, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 21301,
	21301, 11823, 11823, 11823, 11823, 841, 841, 11823, 11823, 11823,
	11823, 11823, 841, 841, 841, 841, 1279, 1279, 11823, 11823,
	11823, 1279, 11823, 11823, 1279, 11823, 11823, 11823, 11823, 1279,
	11823, 11823, 11823, 133, 21713, -1000, 1000, 1152, -1000, -1000,
	-1000, 1257, 18417, 15531, 133, 959, 19241, 21713, -1000, -1000,
	19241, 21713, 7271, 22125, 960, -119, 971, -1000, -110, -114,
	10174, 300, -1000, -1000, -1000, 8516, -1000, 5196, 8931, -1000,
	254, 1054, -1000, -75, -1000, -1000, -1000, 1033, -1000, 1033,
	130, -28, 1033, 1033, 1033, 1033, 1033, -42, -42, -42,
	-42, -1, -1000, -1000, -1000, -1000, -1000, 1053, 1050, -1000,
	1033, 1033, 1033, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1042, 135, 1040, 1040, 1040, 1040, 1040, 165, -1000,
	13471, 1047, -1000, 21713, 6856, 1245, 6856, 94, 1049, -1000,
	-1000, 21713, 21713, 1011, -1000, 21713, 1010, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 532, 910,
	909, -1000, -1000, -1000, -1000, -1000, -1000, 534, -1000, -1000,
	-1000, -1000, 538, 21713, 21713, 21713, 1255, 538, 532, 758,
	-1000, 1007, -1000, 351, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 908, 1241,
	722, 1279, 494, -1000, -1000, -1000, 873, 270, -1000, 1116,
	13471, 13471, 8516, 13883, -1000, -1000, -1000, -1000, 1225, -1000,
	1279, 1297, -1000, 1146, 1143, 1071, -1000, -1000, 313, 460,
	-1000, -1000, 768, -1000, -1000, -1000, -1000, 269, 1024, -1000,
	3353, -1000, -1000, -1000, -1000, 570, 15119, 15119, 15119, 758,
	3353, 3330, 599, 708, 310, 724, 724, 296, 296, 296,
	296, 296, 495, 495, -1000, -1000, -1000, 841, -1000, -1000,
	-1000, 11823, -1000, 13471, -1000, 841, 894, -1000, -1000, 532,
	264, 894, -1000, 655, 645, 409, 1324, 894, 393, 1318,
	894, 894, 894, 11823, 477, -1000, 13471, 841, -1000, 2310,
	1006, 1003, 894, 841, 1002, 894, 894, -158, -158, 841,
	894, 841, 894, 894, -158, -158, -158, -158, 11823, 11823,
	894, 894, 894, 11823, 894, 894, 11823, 894, 894, 894,
	894, 11823, 894, 894, 894, 159, 1024, -1000, 22125, 19241,
	19241, 19241, 19241, 19241, -1000, 1104, 1099, -1000, 1089, 1088,
	1100, 16767, -1000, 900, 18417, -1000, 1024, -1000, 16355, 266,
	220, 214, 212, 1316, 19241, 967, -1000, 967, -1000, 260,
	-1000, -1000, 971, -119, -101, -1000, -1000, -1000, -1000, 532,
	-1000, 726, -1000, 259, 968, 4781, -1000, -1000, -1000, -1000,
	157, -1000, -1000, -1000, 1048, 253, -1000, 1171, 305, 306,
	774, 1157, -1000, -1000, 663, -78, -1000, -1000, 584, -42,
	-42, 1033, 1033, 128, 1033, -1000, -42, -1000, -1000, -1000,
	300, 1211, 300, 300, 300, 300, -42, 685, 685, -1000,
	-1000, -1000, -1000, 560, -1000, 1042, -1000, 546, -1000, -1000,
	-1000, -1000, -1000, 536, 1072, 21301, 161, 1254, -1000, -1000,
	-1000, 1333, -1000, -1000, 188, 202, -1000, 6856, 21713, 6856,
	6856, 1316, 897, 885, -1000, -1000, -1000, 423, 538, 1206,
	-1000, -1000, 15119, 395, 831, -1000, 133, 225, -1000, 1120,
	-1000, 528, 379, 547, 171, 171, -1000, 339, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 132, 1253, 21301,
	21301, 1112, 532, 532, -1000, -1000, 21713, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 6441, 11823, -1000, 758,
	3353, 2691, -1000, 15119, -1000, 841, 532, -1000, 11823, -1000,
	6026, -1000, 401, 691, 401, 15119, 15119, -1000, 15119, 15119,
	-1000, -192, -1000, 1009, 432, -1000, 13471, 797, -1000, -1000,
	15119, 15119, -1000, -1000, -1000, -1000, -1000, 19653, -1000, -158,
	-158, -158, -158, -158, -1000, -1000, -1000, -1000, 894, 894,
	-158, -158, -158, 894, -158, -158, 894, -158, -158, -158,
	-158, 894, -158, -158, -158, 1070, 22125, 1024, -1000, 18004,
	21301, 1008, 1152, 1046, 1068, 1129, -1000, -1000, -1000, -1000,
	1095, -1000, 1090, -1000, -1000, -1000, -1000, 21301, 15119, 266,
	-1000, 1024, 1024, 1024, 1309, 13471, 967, -1000, -1000, 289,
	-1000, -1000, -125, -131, -1000, -1000, -1000, 8101, 5196, -1000,
	5196, -1000, 21301, 164, -1000, 774, -1000, -1000, 774, -1000,
	-1000, -1000, 1041, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	466, 15119, 1351, -1000, 1168, -1000, 1161, 684, -1000, -1000,
	949, 300, 300, -42, -1000, -1000, 1033, -1000, 300, -1000,
	444, -1000, -1000, -1000, -1000, 300, 891, -1000, 889, 965,
	-1000, 884, 45, 21713, -1000, -1000, -1000, 1066, -1000, -1000,
	-1000, 945, 964, -1000, 2761, 881, 880, 879, 21713, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 538, -1000, 15119, 3353,
	-1000, -1000, -42, 21713, 1071, -1000, 657, -1000, 774, 295,
	-1000, -1000, -1000, 1157, -1000, -1000, 250, 878, -1000, 857,
	854, 21301, 1158, 824, 21713, 21301, -1000, -1000, 787, 818,
	13471, -1000, 21301, 1024, 258, -1000, -1000, -1000, 936, 10999,
	-1000, -1000, 841, -1000, 15119, 3353, -1000, -1000, -1000, 239,
	841, 1033, 1033, -1000, 1033, 1040, -1000, 1033, -11, 1033,
	-19, 841, 841, 3216, 3132, 2950, 1766, 1024, -154, -1000,
	532, 13471, 2629, 2522, -1000, 278, -1000, -1000, -1000, -1000,
	-1000, -158, -158, -1000, -1000, -1000, -1000, -158, -1000, -1000,
	-158, -1000, -1000, -1000, -1000, -158, -1000, -1000, -1000, -1000,
	1226, 947, 963, -1000, -1000, 11411, 841, 873, 869, -1000,
	1309, -1000, -1000, 13471, 1034, -1000, 13471, -1000, -1000, -1000,
	869, 1062, -1000, 21301, 21301, 21301, 1275, 532, -1000, -1000,
	-1000, -1000, 4781, -1000, 865, -1000, 1033, -1000, 1157, -1000,
	-1000, 21301, -1000, 3353, -17, -1000, -1000, -1000, -1000, -1000,
	-1000, 300, -1000, -1000, -1000, -1000, -1000, -42, 681, -42,
	542, -1000, 516, -1000, -1000, -238, 1030, -1000, 161, 21713,
	73, 188, -1000, 2761, 2761, 2761, -1000, -1000, 3353, -100,
	-1000, -1000, 787, 147, 2761, -1000, 1047, 305, 164, -1000,
	-1000, -1000, -1000, -1000, 790, 369, -1000, 201, 147, 787,
	532, 1232, -1000, 21301, 1313, 19241, -1000, -1000, -1000, 3353,
	5611, -1000, -1000, 126, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 15119, 15119, 15119, 15119, 15119, 841, 674, 532,
	15119, 15119, 841, 1305, -1000, -1000, -1000, -1000, -1000, 1153,
	-1000, 1024, -1000, -1000, 160, -1000, 21301, 1275, 532, 21301,
	532, 4341, -1000, 16767, 853, -1000, 853, 853, -1000, 247,
	21301, 1236, 851, -1000, -1000, 300, -1000, 300, 874, 870,
	-1000, 21301, -1000, 1268, -1000, 73, -1000, 664, 50, 49,
	-1000, 48, 47, 44, 42, 28, -1000, -1000, -1000, -1000,
	1186, 1183, 996, 866, -1000, -1000, 785, -1000, 1028, 774,
	-1000, -1000, 765, -1000, -1000, 21301, -1000, 147, 1024, -1000,
	1311, 1296, 967, 10999, -1000, -1000, -1000, -1000, 2310, 2310,
	2310, 2310, 27, -1000, -1000, 2310, 2310, -1000, 13471, 1347,
	-1000, 1024, -1000, 161, -1000, -1000, 849, -1000, 266, 21301,
	-1000, -1000, -1000, 247, -1000, 762, 339, 625, -1000, -1000,
	140, -1000, -1000, -1000, -1000, 847, -1000, 70, 4091, -1000,
	-1000, -1000, -1000, -1000, -1000, 1202, 1189, 59, 196, 1154,
	1175, 1291, 19241, -1000, -1000, -1000, 663, 21301, 1047, -1000,
	-1000, -1000, -1000, 120, -1000, 13883, 13883, 1313, -1000, -1000,
	-1000, -1000, -1000, 841, 92, -202, -1000, -1000, 969, 22125,
	963, 841, -1000, -1000, -1000, -1000, -1000, 489, -1000, 21713,
	247, 68, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 13471, 13471, 4091, -1000, -1000,
	-1000, -1000, 1027, 488, 1183, 1289, 1180, 1178, -1000, 621,
	967, -1000, 840, 1026, -1000, 828, -1000, 21301, -1000, 532,
	-1000, 962, -1000, 532, -1000, 1311, -1000, -1000, 1111, -196,
	-206, 841, 960, -1000, -1000, 1025, -1000, 247, 63, -1000,
	468, 795, -293, -1000, -1000, 21301, 1185, -1000, 620, -1000,
	1282, 1280, -1000, 1313, 247, 21301, -1000, 120, 1136, 13883,
	-1000, -1000, 1080, -1000, -1000, 21301, -1000, 665, 497, 654,
	-1000, 13471, 4091, 3994, 817, -1000, -1000, 616, 601, 1311,
	-1000, 794, -1000, 117, -1000, -199, 784, 213, -1000, -1000,
	448, 4091, -1000, 792, -294, -1000, -1000, -1000, -1000, -1000,
	-1000, 247, 114, -204, 1064, -1000, -1000, -1000, -1000, -1000,
	-1000, 4091, -1000, -295, 4091, 2744, -1000, 1024, -221, 1059,
	1058, 1335, -1000, -296, 3802, -297, 187, 4091, 607, -1000,
	13471, 14295, -1000, -1000, 1337, -1000, 1339, 276, 276, 3693,
	445, 4091, -1000, -298, 186, 4091, -1000, 586, 2310, 841,
	-1000, -1000, -1000, 162, 617, -1000, -1000, -1000, 3291, -1000,
	-301, 4091, -1000, -1000, -1000, -1000, -1000, 182, 3126, -307,
	-1000, 180, 4091, -1000,
}
var yyPgo = [...]int{

	0, 1646, 214, 685, 1645, 1644, 1643, 12, 10, 6,
	15, 1642, 1472, 1470, 1468, 1437, 1641, 1430, 1640, 8,
	1639, 1633, 1417, 1632, 46, 1631, 18, 1629, 3, 88,
	1628, 1627, 1626, 1625, 1624, 1409, 1623, 1618, 1617, 1616,
	1390, 1388, 1615, 1613, 1385, 1380, 1612, 1611, 1378, 1375,
	1373, 1610, 151, 1609, 1606, 1604, 102, 69, 106, 1603,
	1602, 1601, 78, 57, 1605, 81, 33, 87, 686, 1600,
	25, 51, 1599, 1598, 89, 86, 1597, 108, 72, 1596,
	1595, 112, 1592, 1591, 1590, 91, 1589, 1588, 645, 1586,
	1584, 122, 1582, 42, 59, 41, 1580, 1579, 1578, 1577,
	1575, 100, 224, 1574, 1573, 1572, 49, 1569, 1567, 110,
	1564, 1563, 1562, 99, 48, 1561, 31, 21, 44, 1560,
	174, 28, 1557, 94, 1556, 1555, 35, 19, 1554, 30,
	1552, 32, 1547, 95, 237, 891, 17, 22, 40, 53,
	96, 73, 14, 1546, 83, 68, 58, 36, 121, 1544,
	97, 93, 1543, 1541, 726, 1540, 1538, 105, 1536, 64,
	98, 558, 109, 92, 65, 1533, 1532, 1531, 1528, 67,
	80, 1527, 1526, 63, 400, 118, 1313, 27, 1757, 101,
	107, 1525, 37, 1524, 2849, 79, 62, 74, 1521, 1520,
	76, 77, 38, 1519, 1518, 1517, 1516, 1515, 1514, 1315,
	1512, 1511, 1510, 1509, 160, 55, 1507, 1497, 90, 71,
	1496, 1495, 1494, 1493, 1492, 84, 54, 104, 1487, 82,
	103, 50, 1485, 1484, 1483, 1482, 39, 29, 1481, 1479,
	1476, 66, 60, 1474, 43, 23, 24, 45, 4, 52,
	47, 1466, 20, 1451, 85, 2, 5, 9, 1449, 1446,
	1441, 1439, 1433, 56, 1428, 1426, 34, 1421, 1413, 1411,
	26, 1402, 1400, 1396, 1394, 0, 70, 113, 1392, 1383,
	117,
}
var yyR1 = [...]int{

	0, 263, 264, 264, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 51,
	2, 2, 2, 6, 3, 3, 3, 72, 73, 73,
	77, 77, 4, 4, 5, 5, 7, 7, 55, 55,
	8, 9, 9, 9, 9, 267, 267, 83, 83, 81,
	81, 82, 82, 144, 144, 10, 10, 10, 10, 148,
	148, 151, 151, 151, 152, 152, 152, 152, 188, 188,
	136, 137, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 251, 251, 252, 252, 253, 253, 253, 253, 254,
	254, 255, 255, 256, 256, 256, 256, 256, 256, 256,
	256, 256, 256, 23, 172, 172, 33, 33, 34, 34,
	34, 132, 132, 132, 11, 11, 11, 11, 11, 18,
	20, 20, 25, 25, 26, 21, 21, 21, 21, 27,
	27, 28, 22, 22, 32, 32, 30, 30, 29, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 17, 250, 250, 250, 24, 24, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 38,
	228, 229, 229, 229, 229, 229, 229, 229, 229, 216,
	217, 192, 192, 192, 192, 192, 192, 192, 191, 191,
	191, 191, 195, 195, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 194, 194, 194, 194, 194, 194, 194,
	194, 196, 196, 196, 196, 196, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 198, 198, 198, 198, 198, 198, 198, 198, 215,
	215, 199, 199, 208, 208, 209, 209, 209, 206, 206,
	207, 207, 210, 210, 202, 203, 211, 204, 204, 204,
	205, 205, 205, 214, 214, 214, 214, 200, 218, 218,
	238, 238, 237, 237, 236, 236, 236, 227, 227, 233,
	233, 233, 233, 233, 222, 222, 222, 221, 221, 223,
	223, 226, 226, 235, 235, 234, 219, 219, 239, 239,
	239, 239, 239, 220, 220, 220, 240, 224, 224, 225,
	225, 225, 246, 247, 245, 245, 245, 245, 245, 98,
	98, 98, 230, 230, 230, 231, 231, 231, 232, 232,
	232, 248, 248, 35, 35, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 36, 131, 131, 131, 37,
	170, 170, 244, 244, 244, 243, 241, 241, 242, 242,
	13, 39, 39, 14, 14, 14, 14, 14, 14, 14,
	15, 15, 40, 41, 41, 41, 41, 41, 41, 41,
	41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
	41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
	41, 41, 69, 158, 158, 156, 156, 159, 159, 157,
	157, 157, 160, 160, 160, 189, 189, 189, 42, 42,
	47, 47, 50, 48, 49, 171, 171, 45, 45, 46,
	46, 46, 46, 61, 61, 268, 268, 44, 44, 43,
	43, 43, 43, 16, 269, 52, 53, 53, 54, 54,
	54, 163, 163, 58, 58, 58, 56, 56, 56, 57,
	57, 63, 63, 67, 67, 67, 67, 66, 66, 66,
	66, 134, 134, 134, 135, 135, 181, 181, 181, 180,
	180, 180, 180, 71, 71, 74, 74, 75, 75, 75,
	75, 92, 92, 93, 93, 93, 93, 93, 104, 104,
	143, 143, 142, 142, 145, 145, 76, 76, 76, 76,
	78, 78, 79, 79, 80, 80, 169, 169, 186, 186,
	186, 84, 84, 84, 86, 85, 85, 85, 85, 87,
	87, 89, 90, 90, 88, 88, 91, 94, 94, 94,
	94, 95, 95, 68, 68, 68, 68, 68, 68, 68,
	155, 155, 97, 97, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 112, 112, 112, 112, 112, 112,
	99, 99, 99, 99, 99, 99, 99, 62, 62, 113,
	113, 113, 120, 65, 65, 64, 64, 114, 114, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 107, 107, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 270, 270, 109, 108, 108,
	108, 108, 108, 108, 59, 59, 59, 59, 59, 187,
	187, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 124, 124, 60, 60, 122, 122,
	123, 125, 125, 121, 121, 121, 101, 101, 101, 101,
	101, 101, 101, 101, 103, 103, 103, 126, 126, 115,
	115, 70, 70, 127, 127, 128, 128, 129, 129, 130,
	130, 133, 133, 138, 138, 138, 139, 139, 139, 139,
	140, 140, 140, 100, 100, 100, 100, 100, 100, 141,
	141, 141, 141, 146, 146, 116, 116, 118, 118, 117,
	119, 147, 147, 150, 150, 150, 150, 149, 149, 149,
	183, 183, 183, 153, 153, 161, 161, 162, 162, 154,
	154, 201, 201, 166, 166, 166, 166, 166, 166, 166,
	166, 166, 168, 168, 167, 167, 167, 164, 164, 164,
	165, 165, 182, 182, 178, 178, 179, 179, 184, 184,
	185, 185, 249, 249, 212, 212, 259, 259, 213, 213,
	260, 260, 262, 262, 257, 257, 258, 258, 261, 261,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 265, 266, 173,
	174, 174, 174,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 11,
	4, 6, 7, 5, 10, 12, 13, 2, 1, 3,
	3, 6, 1, 3, 1, 3, 7, 8, 1, 1,
	9, 8, 7, 6, 6, 1, 1, 1, 3, 1,
	3, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	0, 0, 2, 3, 11, 7, 9, 5, 5, 15,
	11, 0, 1, 1, 3, 2, 3, 3, 3, 0,
	1, 1, 2, 2, 2, 2, 1, 2, 2, 3,
	3, 3, 3, 4, 0, 3, 1, 1, 1, 1,
	1, 0, 2, 2, 1, 1, 1, 1, 1, 4,
	5, 8, 1, 2, 5, 7, 10, 8, 11, 1,
	2, 5, 2, 4, 2, 3, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 2, 3, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	4, 1, 1, 2, 3, 4, 3, 3, 3, 3,
	3, 0, 2, 2, 2, 2, 2, 2, 3, 1,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 3, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 1, 4, 4, 3, 3,
	2, 4, 5, 2, 3, 4, 2, 2, 3, 3,
	3, 3, 3, 4, 1, 1, 1, 1, 1, 6,
	6, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 1,
	0, 1, 1, 2, 2, 3, 1, 0, 3, 3,
	0, 2, 2, 2, 1, 2, 1, 2, 5, 4,
	0, 1, 1, 2, 2, 3, 2, 0, 1, 2,
	3, 3, 2, 2, 1, 1, 1, 1, 1, 0,
	1, 0, 1, 1, 3, 3, 3, 1, 10, 11,
	11, 12, 12, 3, 2, 1, 5, 1, 1, 0,
	2, 2, 3, 3, 1, 1, 2, 2, 2, 0,
	1, 2, 0, 1, 3, 1, 2, 3, 1, 1,
	1, 0, 2, 1, 1, 6, 10, 9, 7, 7,
	7, 9, 7, 12, 14, 7, 7, 7, 9, 9,
	10, 5, 6, 6, 8, 7, 0, 1, 2, 4,
	0, 1, 1, 1, 1, 7, 1, 3, 8, 8,
	3, 3, 5, 4, 6, 4, 4, 4, 4, 4,
	3, 2, 3, 4, 4, 3, 6, 6, 4, 4,
	4, 4, 4, 4, 3, 3, 2, 6, 2, 4,
	4, 4, 5, 7, 6, 5, 4, 2, 4, 3,
	2, 3, 3, 1, 1, 0, 1, 1, 1, 0,
	2, 2, 0, 2, 2, 0, 1, 1, 2, 1,
	1, 1, 2, 1, 1, 1, 1, 3, 3, 1,
	1, 1, 1, 0, 3, 1, 1, 2, 2, 2,
	2, 3, 3, 2, 0, 2, 0, 2, 1, 2,
	2, 0, 1, 0, 1, 1, 0, 1, 1, 0,
	1, 3, 5, 1, 1, 3, 5, 1, 2, 3,
	5, 2, 4, 7, 0, 1, 0, 1, 2, 1,
	1, 1, 1, 1, 3, 1, 1, 1, 3, 1,
	3, 2, 6, 1, 4, 6, 3, 2, 0, 3,
	0, 3, 1, 3, 1, 3, 4, 4, 4, 3,
	2, 4, 0, 1, 0, 2, 0, 1, 1, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 3, 2, 1, 1, 3, 3, 0, 5, 5,
	5, 0, 2, 1, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 0, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 2, 2, 2, 2, 3, 1, 1, 1,
	1, 1, 1, 5, 6, 6, 6, 5, 5, 5,
	6, 5, 5, 6, 5, 5, 5, 5, 6, 5,
	5, 5, 4, 4, 5, 5, 5, 5, 5, 4,
	4, 4, 4, 4, 4, 3, 6, 6, 6, 8,
	8, 8, 8, 9, 4, 7, 5, 4, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 8, 8, 0, 2, 3, 4, 4,
	4, 4, 4, 4, 0, 3, 4, 7, 3, 1,
	1, 2, 3, 3, 1, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 0, 3, 1,
	3, 1, 1, 0, 2, 1, 1, 0, 3, 1,
	3, 2, 2, 0, 1, 1, 0, 2, 4, 4,
	0, 2, 4, 2, 1, 3, 5, 4, 6, 1,
	3, 3, 5, 0, 5, 1, 3, 1, 2, 3,
	1, 1, 3, 3, 3, 3, 3, 1, 2, 1,
	1, 1, 1, 1, 1, 0, 2, 0, 3, 0,
	1, 0, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
	0, 1, 0, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 2, 0, 1, 0, 4, 0, 1,
	0, 3, 0, 3, 0, 4, 0, 3, 0, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 1, 1,
}
var yyChk = [...]int{

	-1000, -263, -1, -2, -6, -7, -8, -9, -10, -12,
	-35, -13, -14, -15, -40, -41, -42, -47, -48, -49,
	-45, -44, -43, -16, -22, -17, -51, -3, -4, 6,
	7, -55, 9, 10, 30, -38, 130, -36, -37, 133,
	132, 169, 134, 162, 64, 213, -50, 216, 217, -268,
	-171, 167, 168, 31, 32, 136, 211, 20, 37, -72,
	-265, 8, 306, 131, 214, 164, 163, 26, 351, 68,
	-264, 421, -129, 15, -54, 5, -52, -269, -52, -52,
	-52, -52, -52, -228, 105, 68, -165, 143, 86, 297,
	139, -172, 140, -164, 189, 44, 150, 149, 140, 140,
	141, 143, 297, 139, 177, 176, 140, -88, -184, 71,
	-176, 348, 153, 363, 364, 131, 186, 213, 224, 218,
	252, 240, 349, 365, 154, 206, 138, 238, 241, 284,
	152, 199, 366, 273, 279, 209, 80, 216, 293, 367,
	155, 203, 205, 204, 194, 210, 36, 165, 236, 229,
	189, 368, 356, 227, 28, 184, 369, 281, 257, 370,
	353, 280, 232, 228, 136, 371, 156, 150, 179, 372,
	258, 262, 373, 285, 374, 375, 376, 142, 222, 223,
	377, 190, 287, 256, 33, 151, 350, 48, 174, 288,
	38, 260, 37, 272, 378, 255, 250, 379, 380, 381,
	382, 254, 221, 249, 201, 53, 137, 264, 263, 265,
	202, 283, 245, 243, 383, 384, 157, 385, 386, 230,
	18, 387, 388, 291, 168, 389, 42, 390, 391, 392,
	172, 393, 394, 395, 282, 259, 261, 188, 396, 233,
	147, 397, 176, 398, 352, 399, 289, 226, 400, 158,
	173, 167, 292, 401, 402, 403, 404, 159, 405, 406,
	407, 217, 275, 207, 408, 409, 410, 411, 198, 183,
	295, 286, 52, 211, 269, 412, 220, 149, 212, 413,
	214, 43, 180, 7, 200, 276, 208, 247, 175, 414,
	415, 234, 235, 253, 219, 248, 215, 177, 178, 169,
	416, 294, 270, 354, 51, 242, 239, 181, 246, 417,
	143, 418, 182, 290, 237, 271, 140, 123, 241, 284,
	130, 274, 275, 281, -222, 282, 176, 179, -189, 140,
	-156, 273, 182, 71, 141, 142, 33, 286, 285, 277,
	-184, -61, 134, 170, -88, -173, -173, -173, 276, 276,
	-173, -32, 212, 71, 36, 6, -2, -154, 143, 145,
	215, -73, -77, -186, -184, -177, 73, 319, 320, 321,
	322, 323, 336, 337, 338, 324, 325, 339, 340, 341,
	326, 327, 342, 343, 345, 346, 344, 330, 329, 328,
	331, 332, 334, 333, 335, -139, 17, 16, -5, -3,
	-265, 6, 21, 22, -58, 54, 55, -53, -66, 114,
	-68, -184, -96, 88, -102, 29, 71, -176, 24, -101,
	-97, -121, -119, -120, 123, 124, 125, 112, 113, 120,
	89, 126, -107, -105, -106, -108, -110, -111, 73, 72,
	81, 74, 75, 76, 77, 82, 83, 84, -178, -117,
	-265, 58, 59, 139, 307, 308, 309, 310, 347, 160,
	311, 91, 47, 296, 305, 304, 303, 301, 302, 298,
	300, 299, 313, 314, 146, 297, 118, 306, 336, 337,
	338, 339, 340, 341, 342, 343, 345, 346, 344, 326,
	319, 320, 321, 322, 323, 324, 325, 327, 328, 329,
	330, 331, 332, 333, 334, 335, -154, -154, 11, -81,
	-82, -88, -91, -184, -147, -188, 215, -150, 286, 285,
	-121, -149, -178, -184, 284, 241, 283, -88, -229, -217,
	-220, -179, 155, -240, -178, -175, 152, 71, -176, 135,
	161, 87, 355, 23, 25, 267, 319, 90, 123, 320,
	321, 322, 16, 20, 91, 122, 307, 323, 130, 62,
	298, 300, 296, 297, 274, 29, 10, 26, 163, 193,
	22, 116, 132, 94, 95, 96, 166, 24, 164, 84,
	160, 19, 65, 11, 13, 317, 318, 14, 146, 145,
	107, 191, 141, 60, 8, 126, 27, 104, 56, 324,
	325, 359, 45, 360, 58, 105, 17, 301, 302, 31,
	347, 326, 171, 361, 327, 118, 196, 63, 50, 88,
	82, 34, 85, 66, 86, 15, 192, 61, 315, 195,
	362, 106, 133, 306, 59, 139, 6, 312, 30, 162,
	330, 329, 328, 331, 197, 57, 309, 310, 332, 419,
	140, 93, 313, 314, 144, 83, 5, 44, 32, 9,
	64, 67, 303, 304, 305, 47, 334, 333, 335, 92,
	12, 316, 351, 141, -88, 306, -162, 146, -162, 177,
	176, -162, 97, -39, -88, -161, 146, -178, -161, -161,
	-161, -161, -161, -88, 127, -88, 71, 30, -160, 105,
	12, 297, 139, 71, 176, 179, 140, 177, 143, -174,
	-265, -179, -174, -224, 11, 107, 180, 180, 180, 181,
	180, -159, -158, 178, 279, 280, 276, 278, 12, -69,
	105, -174, -46, -2, -9, -7, -8, -2, 97, -173,
	-173, 30, 73, 51, -250, 68, -212, 272, -52, -266,
	70, 140, -88, 69, 23, -265, -140, 19, 31, -68,
	-184, -130, -133, -68, -177, 319, 320, 321, 322, 323,
	336, 337, 338, 324, 325, 339, 340, 341, 326, 327,
	342, 343, 345, 346, 344, 330, 329, 328, 331, 332,
	334, 333, 335, -129, -2, -52, 50, -56, 21, 22,
	79, 11, -181, 87, 86, 104, -180, 23, 71, -176,
	-177, 73, 127, -68, -99, 107, 88, 105, 106, 90,
	109, 108, 119, 112, 113, 114, 115, 116, 117, 118,
	110, 111, 122, 97, 98, 99, 100, 101, 102, 103,
	-155, -265, -120, -265, 128, 129, -102, -102, -102, -102,
	-102, -102, -102, -102, -265, -2, -114, -68, -265, -265,
	-265, -265, -265, -265, -265, -265, -265, -265, -265, -124,
	-68, -265, -270, -109, -265, -270, -109, -270, -109, -270,
	-265, -270, -109, -270, -109, -270, -270, -109, -270, -265,
	-265, -265, -265, -265, -265, -265, -265, -265, -265, -265,
	-265, -265, -265, -265, -265, -265, -265, -265, -265, -265,
	-265, -265, -265, -265, -265, -265, -265, -265, -265, -265,
	-265, -265, -265, -90, 27, -88, -71, -74, -75, -76,
	-92, -120, -265, -88, -88, -81, -267, 69, 11, 67,
	-267, 69, 127, 69, -147, 215, -148, -151, 287, 289,
	97, -183, -178, 73, 29, 127, 30, 70, 69, -220,
	155, 152, -191, -195, -197, -196, -198, -193, -194, 238,
	241, 245, 243, 239, 244, 123, 242, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 256, 257, 30, 165,
	234, 235, 236, 237, 258, 259, 260, 261, 262, 263,
	264, 265, 218, 240, 349, 219, 220, 221, 222, 223,
	224, 226, 227, 228, 229, 230, 231, 232, 71, -240,
	68, -178, 23, 143, 71, 88, 71, 71, 71, -88,
	71, 69, 144, -81, 24, 66, -83, -88, 71, 71,
	71, 71, -185, -184, -175, -174, -160, 73, -68, -162,
	-162, -174, -174, -174, -88, -88, -88, -88, -160, -160,
	-174, -174, -157, 11, 107, 11, -157, -157, -68, -102,
	71, -30, -29, -31, 199, 200, 201, 202, 203, 204,
	205, 206, 207, 208, 209, 210, 73, 70, -114, -249,
	420, -58, -88, -174, -77, -120, -141, -178, 9, 107,
	69, 18, 127, 69, -138, 25, 26, -138, -139, -266,
	-58, -103, 51, 74, 77, -163, 49, -88, -68, -68,
	-112, 82, 88, 83, 84, -180, 114, -185, -179, -175,
	-102, -113, -117, -120, 78, 107, 105, 106, 90, -102,
	-102, -102, -102, -102, -102, -102, -102, -102, -102, -102,
	-102, -102, -102, -102, -187, 71, 73, 71, -101, -101,
	-178, -56, -266, 69, -266, -2, -64, -67, 114, -68,
	-184, -64, -266, -68, -68, -121, 73, -64, -121, 73,
	-64, -64, -64, -56, -122, -123, 92, -121, -266, -102,
	-178, -178, -64, -65, -64, -64, -64, -266, -266, -67,
	-64, -67, -64, -64, -266, -266, -266, -266, -56, -56,
	-64, -64, -64, -56, -64, -64, -56, -64, -64, -64,
	-64, -56, -64, -64, -64, -144, 172, -88, 30, 69,
	-84, -86, -85, -87, 56, 60, 62, 57, 58, 59,
	63, -169, 23, -71, -265, -93, 172, -94, 23, -186,
	64, 145, 65, -144, 67, -71, -88, -71, -91, -184,
	114, -150, -148, 69, 288, 290, 291, 66, 85, -68,
	-205, 122, -179, -185, -230, -231, -232, -179, 73, 74,
	-217, -218, -219, -220, -233, 155, -239, 147, 149, 44,
	-221, 156, 141, 45, -192, -206, 270, -199, 68, -199,
	-199, 246, 238, 241, 239, -199, -199, -199, -199, -199,
	-204, 241, -204, -204, -204, -204, 239, 68, 68, -199,
	-199, -199, -208, 68, -208, 233, -209, 68, -209, -209,
	-209, -209, -240, -68, -182, 67, -136, -88, -174, 24,
	-174, -33, 186, 161, 68, -88, -88, -88, 69, 71,
	71, -225, 11, 107, -160, -184, -184, -88, -104, 23,
	-160, -62, 166, 69, 97, 70, -89, 27, 73, -56,
	-166, 135, 132, 133, 137, 138, -243, 267, 131, 241,
	80, 29, 15, 307, 172, 354, 71, 173, -266, 69,
	127, 52, -68, -68, -133, -140, -153, 19, 11, 47,
	47, -57, 57, 82, 83, 84, 127, -265, -113, -102,
	-102, -102, -62, 87, -266, -65, -68, -266, 69, -266,
	127, -266, 69, 67, 23, 11, 11, -266, 11, 11,
	-266, -266, -266, -64, -125, -123, 94, -68, -266, -266,
	69, 69, -266, -266, -266, -266, -134, 315, -134, -266,
	-266, -266, -266, -266, -134, -134, -134, -134, -64, -64,
	-266, -266, -266, -64, -266, -266, -64, -266, -266, -266,
	-266, -64, -266, -266, -266, -100, 30, 47, -2, -265,
	-265, -147, -74, -75, -75, -74, -75, 56, 56, 56,
	61, 56, 61, 56, -85, -186, -266, -265, 34, -186,
	-94, 141, 141, 141, -95, 12, -71, -95, -95, 127,
	-151, -152, 292, 289, 295, 71, 73, 127, 69, -232,
	97, -220, 68, 71, 45, -221, 141, 45, -221, -226,
	71, -226, 45, -210, -202, -203, -211, -214, -200, 82,
	88, 29, 66, 267, 147, 45, 44, 80, -207, 271,
	74, -204, -204, -199, -199, -199, 246, -199, -204, -205,
	30, -205, -205, -205, -205, -204, -215, 73, -215, 74,
	-208, 74, 70, 66, -178, -2, 23, -34, 8, 9,
	10, -251, -252, -253, 71, 107, 191, 192, 144, -174,
	-88, -174, -174, -95, 71, 71, -157, -160, 34, -102,
	-29, -101, -144, 140, -163, -173, -170, -244, -221, -248,
	-219, -220, 148, 156, 147, 172, 155, -170, -244, 155,
	152, -221, 156, 148, -167, -221, 144, 23, -170, -170,
	-227, 97, 172, 23, -178, -178, 53, -88, -63, -137,
	114, -179, -65, -62, 87, -102, -266, -67, 114, -185,
	-190, 123, 238, 165, 236, 229, 256, 243, 269, 234,
	270, -187, -190, -102, -102, -102, -102, 348, -129, 96,
	-68, 93, -102, -102, -178, -265, -134, -134, -134, -134,
	-134, -266, -266, -135, -134, -135, -135, -266, -135, -135,
	-266, -135, -135, -135, -135, -266, -135, -135, -135, -146,
	66, -147, -116, -118, -117, -265, -2, -141, -145, -178,
	-95, -79, -78, 66, 67, -80, 66, -78, 56, 56,
	-145, -102, -94, -265, -265, -265, -129, -68, -95, 289,
	293, 294, -231, -232, -235, -234, -178, -239, 156, -226,
	-226, 68, 82, -102, 9, 45, 45, 73, 70, -205,
	-205, -204, -199, -205, 71, 123, -205, 70, 69, 70,
	69, 70, 69, -98, 369, 88, -88, -136, -136, 66,
	70, 69, -191, 71, 71, 71, -88, -160, -102, -204,
	-88, -57, 68, -216, 71, -173, -226, -164, 71, 71,
	-173, 71, 71, -178, 45, 71, -88, -178, -216, 71,
	-68, -178, -120, 127, -95, 11, 69, -66, -266, -102,
	127, -266, -199, -199, -199, -209, -199, 223, -199, 223,
	-266, -266, 19, 19, 19, 19, -265, -60, 312, -68,
	69, 69, -129, 172, -135, -135, -135, -135, -135, 28,
	-146, 69, -266, -266, -266, -266, 69, -129, -68, 68,
	-68, -266, -94, -169, -142, -178, -142, -142, -139, 70,
	69, -199, -142, -106, -205, -204, 73, -204, 74, 74,
	369, 68, -2, -88, -254, -255, -256, 80, 350, 88,
	193, 194, 157, 195, 196, 197, -253, -191, -191, -191,
	-257, -159, -63, -216, -131, 160, 161, -191, -182, -223,
	-221, 71, -168, 144, 23, 144, -131, -216, 27, -178,
	-126, 13, -71, -137, -137, 114, -204, 71, -102, -102,
	-102, -102, -102, -266, 73, -102, -102, -266, 16, 45,
	-118, 47, -2, -265, -178, -139, -142, -93, -186, 69,
	-266, -266, -266, -237, -236, 67, 151, 80, -234, -138,
	70, -205, -205, 70, 70, -235, -136, 19, -136, -256,
	73, 197, 193, 197, 197, 197, 197, 198, -258, 38,
	-260, 39, 11, 70, -173, 71, -192, 68, -226, 71,
	-178, -173, -131, -265, -127, 14, 16, -95, -66, -266,
	-266, -266, -266, -59, 107, 351, -266, -266, -114, 9,
	-116, -2, 70, -94, -178, -236, 71, -227, 73, 158,
	70, 184, -19, -2, -7, -8, -9, -10, -12, -35,
	-13, -14, -20, -21, -15, -40, -41, -50, -48, -49,
	-45, -44, -22, -17, -23, 91, 146, 213, 36, 36,
	189, 190, -201, 145, -261, 43, -259, -213, 42, 16,
	-71, -173, -235, -182, -173, -241, -242, 172, -128, -68,
	-177, -115, -70, -68, -177, -126, -137, -266, 349, 63,
	352, -129, -147, -266, 74, -88, -238, -237, 185, -136,
	-68, -68, -24, -19, -143, 68, 74, -260, 16, -262,
	40, 41, 73, -95, 70, 68, -266, 69, -178, 69,
	-127, 53, 350, 353, -266, 68, -132, 187, 188, -25,
	-26, 92, 93, 421, -142, 38, 73, 16, 16, -126,
	-238, -235, -242, 47, -70, 53, -142, -136, 71, 71,
	96, 94, -26, -68, -24, 96, -19, 70, 73, 73,
	-127, 70, 174, 351, 70, -11, -18, -10, -7, -8,
	-9, 213, 91, -24, 93, 421, -238, 175, 352, -246,
	-247, 66, -136, -24, 421, -24, 96, 94, -27, -28,
	95, -265, 353, -247, 66, -246, 66, 10, 9, 421,
	96, 421, 146, -24, 96, 94, -28, -68, -102, 171,
	-245, 159, 154, 157, 30, -245, 96, 91, 421, 146,
	-24, 93, -266, -266, 153, 29, 82, 96, 421, -24,
	146, 96, 421, 146,
}
var yyDef = [...]int{

	28, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 787, 0, 484,
	484, 484, 484, 484, 484, 0, -2, 363, 364, 0,
	0, 0, 0, -2, 459, 460, 461, 463, 464, 473,
	-2, 1259, 1259, 0, 0, 1259, 0, 0, 0, 0,
	0, 48, 49, 839, 0, 476, 465, 466, 0, 1257,
	1, 3, 796, 0, 0, 488, 493, 486, 0, 839,
	839, 0, 0, 82, 0, 0, 0, 0, 0, 837,
	837, 0, 837, 861, 0, 857, 858, 859, 0, 835,
	0, 835, 835, 835, 835, 835, 0, 411, 574, 868,
	869, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032,
	1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042,
	1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052,
	1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062,
	1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072,
	1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082,
	1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092,
	1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102,
	1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112,
	1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122,
	1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132,
	1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142,
	1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152,
	1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162,
	1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172,
	1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182,
	1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192,
	1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202,
	1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212,
	1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222,
	1223, 1224, 1225, 1226, 1227, 1228, 0, 0, 0, 452,
	0, 1260, 1260, 426, 0, 428, 0, 0, 0, 0,
	0, 437, 440, 1260, 314, 315, 316, 456, 457, 446,
	458, 0, 0, 0, 477, 478, 479, 480, 1259, 1259,
	483, 142, 0, 162, 874, 484, 42, 0, 0, 840,
	462, 37, 38, 0, 558, 559, 560, 1229, 1230, 1231,
	1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241,
	1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251,
	1252, 1253, 1254, 1255, 1256, 800, 0, 0, 787, 44,
	0, 484, 489, 490, 496, 494, 495, 485, 0, 507,
	516, 0, 583, 0, 588, 590, -2, -2, 0, 629,
	630, 631, 632, 633, 0, 0, 0, 0, 0, 0,
	0, 0, 657, 658, 659, 660, 661, 662, 766, 767,
	768, 769, 770, 771, 772, 773, 592, 593, 763, 820,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 754, 0, 725, 725, 725, 725, 725, 725, 725,
	725, 725, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 59, 61, 574, 65, 0, 1209, 821, -2, -2,
	0, 0, 763, 0, -2, 1041, -2, 83, 0, 191,
	192, 0, 1053, 335, 866, 867, 1043, 864, 865, 890,
	891, 892, 893, 894, 895, 896, 897, 898, 899, 900,
	901, 902, 903, 904, 905, 906, 907, 908, 909, 910,
	911, 912, 913, 914, 915, 916, 917, 918, 919, 920,
	921, 922, 923, 924, 925, 926, 927, 928, 929, 930,
	931, 932, 933, 934, 935, 936, 937, 938, 939, 940,
	941, 942, 943, 944, 945, 946, 947, 948, 949, 950,
	951, 952, 953, 954, 955, 956, 957, 958, 959, 960,
	961, 962, 963, 964, 965, 966, 967, 968, 969, 970,
	971, 972, 973, 974, 975, 976, 977, 978, 979, 980,
	981, 982, 983, 984, 985, 986, 987, 988, 989, 990,
	991, 992, 993, 994, 995, 996, 997, 998, 999, 1000,
	1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010,
	1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020,
	1021, 1022, 1023, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 400, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 410, 0, 412, 1260, 452, 415, 0,
	0, 837, 837, 1260, 1260, 1260, 0, 0, 0, 424,
	1261, 1262, 425, 0, 337, 338, 452, 452, 1260, 1260,
	449, 0, 449, 449, 447, 448, 443, 444, 0, 439,
	0, 441, 467, -2, 470, 471, 472, -2, 0, 481,
	482, 0, 144, 0, 161, 0, 872, 875, 493, 43,
	1258, 0, 1260, 0, 0, 0, 30, 0, 0, 797,
	0, 788, 789, 793, 793, 1229, 1230, 1231, 1232, 1233,
	1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243,
	1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253,
	1254, 1255, 1256, 796, 42, 493, 0, 491, 497, 498,
	487, 0, 508, 0, 0, 0, 517, 0, 519, 520,
	521, 522, 0, 586, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 610, 611, 612, 613, 614, 615, 616,
	589, 0, 603, 0, 0, 0, 649, 650, 651, 652,
	653, 654, 655, 0, 496, 42, 0, 627, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 496, 0,
	755, 0, 708, 717, 0, 709, 718, 710, 719, 711,
	0, 712, 720, 713, 721, 714, 715, 722, 716, 0,
	0, 0, 623, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 496, 496, 0, 0,
	0, 496, 0, 0, 496, 0, 0, 0, 0, 496,
	0, 0, 0, 63, 0, 573, 0, 523, 525, 526,
	527, -2, 0, 577, -2, 0, 0, 0, 55, 56,
	0, 0, 0, 0, 66, 1209, 68, 69, 0, 0,
	0, 290, 830, 831, 832, 0, 828, 352, 0, 193,
	0, 0, 201, 278, 209, 210, 211, 271, 213, 271,
	271, 0, 271, 271, 271, 271, 271, 287, 287, 287,
	287, 287, 254, 255, 256, 257, 258, 0, 0, 231,
	271, 271, 271, 235, 261, 262, 263, 264, 265, 266,
	267, 268, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 273, 273, 275, 275, 275, 275, 275, 0, 334,
	0, 862, 80, 0, 1260, 0, 1260, 0, 0, 189,
	115, 0, 0, 403, 836, 0, 405, 57, 406, 407,
	408, 409, 575, 870, 871, 413, 414, 453, 454, 0,
	0, 418, 419, 420, 421, 422, 423, 339, 429, 430,
	431, 436, 452, 0, 0, 0, 538, 452, 438, 617,
	474, 143, 146, 0, 149, 150, 151, 152, 153, 154,
	155, 156, 157, 158, 159, 160, 145, 163, 0, 0,
	0, 496, 0, 389, 39, 40, 0, 809, 801, 0,
	0, 0, 0, 0, 791, 794, 795, 792, 800, 45,
	496, 0, 774, 0, 0, 499, 492, 33, 584, 585,
	587, 604, 0, 606, 608, 518, 509, 0, 764, -2,
	594, 595, 619, 620, 621, 0, 0, 0, 0, 617,
	599, 0, 634, 635, 636, 637, 638, 639, 640, 641,
	642, 643, 644, 645, 648, 739, 740, 0, 646, 647,
	656, 623, 622, 0, 819, 42, 0, 625, 503, 504,
	0, 0, 695, 0, 0, 631, 766, 0, 631, 766,
	0, 0, 0, 0, 761, 758, 0, 0, 726, 0,
	0, 0, 0, 0, 624, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 572, 0, 0,
	0, 0, 0, 0, 561, 0, 0, 564, 0, 0,
	0, 0, 557, 0, 0, 531, 1143, 533, 0, 577,
	0, 0, 0, 581, 0, 581, 60, 581, 62, 0,
	576, 822, 67, 0, 0, 72, 73, 823, 824, 825,
	826, 0, 764, 0, 190, 353, 355, 358, 359, 360,
	194, 196, 197, 198, 0, 1053, 327, 1153, 1190, -2,
	321, 1079, -2, -2, 200, 280, 279, 212, 0, 287,
	287, 271, 271, 271, 271, 240, 287, 243, 246, 247,
	290, 0, 290, 290, 290, 290, 287, 0, 0, 232,
	233, 234, 223, 0, 224, 273, 226, 0, 227, 228,
	229, 230, 333, 0, 0, 0, 0, 0, 87, 838,
	88, 0, 116, 117, 91, 0, 401, 1260, 0, 1260,
	1260, 581, 0, 0, 432, 450, 451, 449, 452, 0,
	435, 442, 0, 0, 0, 164, 63, 0, 873, 491,
	1259, -2, 390, 854, 390, 390, 381, 307, 843, 844,
	845, 846, 847, 848, 849, 850, 851, 0, 0, 0,
	0, 0, 798, 799, 790, 31, 0, 833, 834, 775,
	776, 81, 500, 605, 607, 609, 0, 623, 596, 617,
	600, 0, 597, 0, 591, 0, 628, -2, 0, 693,
	0, 694, 0, 0, 0, 0, 0, 732, 0, 0,
	733, 0, 704, 787, 0, 759, 0, 0, 707, 727,
	0, 0, 728, 729, 730, 731, 682, 0, 683, 0,
	0, 0, 0, 0, 689, 690, 691, 692, 0, 0,
	514, 514, 514, 0, 514, 514, 0, 514, 514, 514,
	514, 0, 514, 514, 514, 813, 0, 0, -2, 0,
	0, 581, 524, 552, 554, 0, 549, 562, 563, 565,
	0, 567, 0, 569, 570, 528, 530, 0, 0, 577,
	537, 0, 0, 0, 787, 0, 581, 53, 54, 0,
	70, 71, 0, 0, 77, 291, 292, 0, 0, 356,
	0, 195, 0, 0, 309, 321, 317, 318, 321, 312,
	322, 313, 0, 202, 203, 204, 205, 206, 207, 282,
	0, 0, 0, 286, 0, 294, 296, 0, 208, 281,
	0, 290, 290, 287, 238, 239, 271, 244, 290, 248,
	0, 249, 250, 251, 252, 290, 0, 269, 0, 0,
	225, 0, 349, 0, 863, -2, 80, 0, 118, 119,
	120, 0, 92, 93, 0, 0, 0, 0, 0, 404,
	58, 416, 417, 427, 340, 341, 452, 434, 0, 618,
	147, 148, 287, 0, 499, 365, 0, 1259, 321, 0,
	382, 383, 391, 392, 393, 394, 0, 0, 1259, 0,
	0, 0, 392, 0, 0, 0, 855, 856, 0, 0,
	0, 308, 0, 0, 811, 810, 802, 32, 581, 0,
	510, 765, 0, 598, 0, 601, 663, 626, 505, 0,
	0, 271, 271, 744, 271, 275, 747, 271, 749, 271,
	752, 0, 0, 0, 0, 0, 0, 0, 756, 706,
	762, 0, 0, 0, 511, 787, 684, 685, 686, 687,
	688, 514, 514, 667, 515, 668, 669, 514, 671, 672,
	514, 674, 675, 676, 677, 514, 679, 680, 681, 46,
	0, 813, 803, 815, 817, 0, 42, 0, 0, 544,
	787, 546, 553, 0, 0, 547, 0, 548, 566, 568,
	0, -2, 536, 0, 0, 0, 796, 582, 52, 74,
	75, 76, 354, 357, 0, 323, 271, 326, 0, 310,
	311, 0, 283, 284, 0, 293, 295, 297, 272, 236,
	237, 290, 245, 241, 288, 289, 253, 287, 0, 287,
	0, 276, 0, 336, 350, 0, 0, 85, 0, 0,
	99, 0, 95, 0, 0, 0, 402, 433, 539, 884,
	571, 81, 0, 386, 0, 368, 862, 319, 362, 369,
	370, 375, 376, 377, 0, 0, 372, 0, 386, 0,
	385, 0, 41, 0, 777, 0, 81, 81, 664, 602,
	0, 696, 741, 287, 745, 746, 748, 750, 751, 753,
	698, 697, 0, 0, 0, 0, 0, 0, 0, 760,
	0, 0, 0, 0, 665, 666, 670, 673, 678, 0,
	47, 0, 818, -2, 0, 64, 0, 796, 550, 0,
	555, 577, 534, 0, 0, 542, 0, 0, 51, 299,
	0, 793, 0, 285, 242, 290, 270, 290, 0, 0,
	351, 0, -2, 0, 80, 100, 101, 0, 0, 0,
	106, 0, 0, 0, 0, 0, 94, 96, 97, 98,
	886, 880, 0, 0, 1259, 387, 0, 201, 0, 321,
	320, 384, 0, 852, 853, 0, 1259, 386, 0, 812,
	783, 0, 581, 0, 501, 506, 742, 743, 0, 0,
	0, 0, 734, 705, 757, 0, 0, 512, 0, 0,
	816, 0, -2, 0, 545, 50, 0, 532, 577, 0,
	578, 579, 580, 298, 302, 0, 307, 0, 324, 325,
	0, 259, 260, 274, 277, 0, 86, 0, 0, 102,
	103, 104, 105, 107, 108, 0, 0, 0, 841, 888,
	-2, 0, 0, 1259, 367, 388, 199, 0, 862, 371,
	378, 379, 1259, 0, 34, 0, 0, 777, 81, 699,
	701, 700, 702, 0, 0, 0, 723, 724, 787, 0,
	806, 42, 551, 535, 543, 303, 304, 0, 306, 0,
	300, 0, 80, -2, 168, 169, 170, 171, 172, 173,
	174, 175, 176, 177, 178, 179, 180, 181, 182, 183,
	184, 185, 186, 187, 188, 0, 0, 0, 109, 110,
	111, 112, 540, 0, 880, 0, 882, 0, 879, 0,
	581, 366, 0, 0, 380, 0, 396, 0, 784, 785,
	786, 778, 779, 781, 782, 783, 502, 703, 0, 0,
	0, 0, 814, -2, 305, 0, 84, 301, 121, 90,
	0, 0, 0, 165, 29, 0, 0, 887, 0, 885,
	0, 0, 881, 777, 300, 0, 395, 0, 0, 0,
	35, 735, 0, 738, 513, 0, 80, 0, 0, 0,
	132, 0, 0, 0, 0, 842, 889, 0, 0, 783,
	373, 0, 397, 0, 780, 736, 0, 0, 122, 123,
	0, 0, 133, 0, 0, 113, 166, 541, 883, 877,
	36, 300, 0, 0, 328, 80, 124, 125, 126, 127,
	128, 0, 130, 0, 0, 0, 374, 0, 0, 329,
	330, 0, 89, 0, 0, 0, 0, 0, 0, 139,
	0, 0, 737, 331, 0, 332, 0, 0, 0, 0,
	0, 134, 135, 0, 0, 0, 140, 0, 0, 0,
	342, 344, 345, 0, 0, 343, 129, 131, 0, 137,
	0, 0, 398, 399, 346, 347, 348, 0, 0, 0,
	136, 0, 141, 138,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 89, 3, 3, 3, 117, 109, 3,
	68, 70, 114, 112, 69, 113, 127, 115, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 421,
	98, 97, 99, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 119, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 108, 3, 120,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 87, 88, 90, 91, 92, 93, 94, 95,
	96, 100, 101, 102, 103, 104, 105, 106, 107, 110,
	111, 116, 118, 121, 122, 123, 124, 125, 126, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:386
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:391
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:392
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:396
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:423
		{
			setParseTree(yylex, nil)
		}
	case 29:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:429
		{
			yyVAL.statement = &Load{Local: yyDollar[3].boolVal, Infile: yyDollar[4].str, Table: yyDollar[5].tableName, Partition: yyDollar[6].partitions, Charset: yyDollar[7].str, Fields: yyDollar[8].Fields, Lines: yyDollar[9].Lines, IgnoreNum: yyDollar[10].sqlVal, Columns: yyDollar[11].columns}
		}
	case 30:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:435
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:443
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:447
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 33:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:453
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 34:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:460
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[6].str, SelectExprs: yyDollar[7].selectExprs, From: TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
			if yyDollar[5].byt == 1 {
				yyVAL.selStmt.(*Select).CalcFoundRows = true
			}
		}
	case 35:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:467
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[6].str, SelectExprs: yyDollar[7].selectExprs, From: yyDollar[9].tableExprs, Where: NewWhere(WhereStr, yyDollar[10].expr), GroupBy: GroupBy(yyDollar[11].exprs), Having: NewWhere(HavingStr, yyDollar[12].expr)}
			if yyDollar[5].byt == 1 {
				yyVAL.selStmt.(*Select).CalcFoundRows = true
			}
		}
	case 36:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sql.y:474
		{
			yyVAL.selStmt = &Select{CommonTableExprs: yyDollar[1].tableExprs, Comments: Comments(yyDollar[3].bytes2), Cache: yyDollar[4].str, Distinct: yyDollar[5].str, Hints: yyDollar[7].str, SelectExprs: yyDollar[8].selectExprs, From: yyDollar[10].tableExprs, Where: NewWhere(WhereStr, yyDollar[11].expr), GroupBy: GroupBy(yyDollar[12].exprs), Having: NewWhere(HavingStr, yyDollar[13].expr)}
			if yyDollar[6].byt == 1 {
				yyVAL.selStmt.(*Select).CalcFoundRows = true
			}
		}
	case 37:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:483
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:489
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:493
		{
			yyVAL.tableExprs = append(yyDollar[1].tableExprs, yyDollar[3].tableExpr)
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:499
		{
			yyVAL.tableExpr = &CommonTableExpr{&AliasedTableExpr{Expr: yyDollar[3].subquery, As: yyDollar[1].tableIdent}, nil}
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:503
		{
			yyVAL.tableExpr = &CommonTableExpr{&AliasedTableExpr{Expr: yyDollar[6].subquery, As: yyDollar[1].tableIdent}, yyDollar[3].columns}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:509
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:513
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:519
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:523
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 46:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:530
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].setExprs)
			yyVAL.statement = ins
		}
	case 47:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:542
		{
			cols := make(Columns, 0, len(yyDollar[7].setExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].setExprs))
			for _, updateList := range yyDollar[7].setExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].setExprs)}
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:554
		{
			yyVAL.str = InsertStr
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:558
		{
			yyVAL.str = ReplaceStr
		}
	case 50:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:564
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].setExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 51:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:570
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 52:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:574
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 53:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:578
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 54:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:582
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:587
		{
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:588
		{
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:592
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName.ToViewName()}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:596
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName.ToViewName())
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:602
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:606
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:612
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:616
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:621
		{
			yyVAL.partitions = nil
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:625
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:631
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:635
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:639
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:643
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:649
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:653
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:659
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:663
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:667
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:673
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:677
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:681
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:685
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:691
		{
			yyVAL.str = SessionStr
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:695
		{
			yyVAL.str = GlobalStr
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:700
		{
			yyVAL.int = yyPosition(yylex)
		}
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:705
		{
			yyVAL.int = yyOldPosition(yylex)
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:711
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			if len(yyDollar[1].ddl.TableSpec.Constraints) > 0 {
				yyDollar[1].ddl.ConstraintAction = AddStr
			}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:719
		{
			yyDollar[1].ddl.OptLike = &OptLike{LikeTable: yyDollar[3].tableName}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 84:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:724
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: yyDollar[4].colIdent, Using: yyDollar[5].colIdent, Type: yyDollar[2].str, Columns: yyDollar[9].indexColumns, Options: yyDollar[11].indexOptions}}
		}
	case 85:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:728
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[3].tableName.ToViewName(), ViewExpr: yyDollar[6].selStmt, SubStatementPositionStart: yyDollar[5].int, SubStatementPositionEnd: yyDollar[7].int - 1}
		}
	case 86:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:732
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[5].tableName.ToViewName(), ViewExpr: yyDollar[8].selStmt, SubStatementPositionStart: yyDollar[7].int, SubStatementPositionEnd: yyDollar[9].int - 1, OrReplace: true}
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:736
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes), IfNotExists: ne}
		}
	case 88:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:744
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes), IfNotExists: ne}
		}
	case 89:
		yyDollar = yyS[yypt-15 : yypt+1]
//line sql.y:752
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[8].tableName, TriggerSpec: &TriggerSpec{Name: string(yyDollar[4].bytes), Time: yyDollar[5].str, Event: yyDollar[6].str, Order: yyDollar[12].triggerOrder, Body: yyDollar[14].statement}, SubStatementPositionStart: yyDollar[13].int, SubStatementPositionEnd: yyDollar[15].int - 1}
		}
	case 90:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:756
		{
			yyVAL.statement = &DDL{Action: CreateStr, ProcedureSpec: &ProcedureSpec{Name: string(yyDollar[4].bytes), Definer: yyDollar[2].str, Params: yyDollar[6].procedureParams, Characteristics: yyDollar[8].characteristics, Body: yyDollar[10].statement}, SubStatementPositionStart: yyDollar[9].int, SubStatementPositionEnd: yyDollar[11].int - 1}
		}
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:761
		{
			yyVAL.procedureParams = nil
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:765
		{
			yyVAL.procedureParams = yyDollar[1].procedureParams
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:771
		{
			yyVAL.procedureParams = []ProcedureParam{yyDollar[1].procedureParam}
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:775
		{
			yyVAL.procedureParams = append(yyVAL.procedureParams, yyDollar[3].procedureParam)
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:781
		{
			yyVAL.procedureParam = ProcedureParam{Direction: ProcedureParamDirection_In, Name: string(yyDollar[1].bytes), Type: yyDollar[2].columnType}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:785
		{
			yyVAL.procedureParam = ProcedureParam{Direction: ProcedureParamDirection_In, Name: string(yyDollar[2].bytes), Type: yyDollar[3].columnType}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:789
		{
			yyVAL.procedureParam = ProcedureParam{Direction: ProcedureParamDirection_Inout, Name: string(yyDollar[2].bytes), Type: yyDollar[3].columnType}
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:793
		{
			yyVAL.procedureParam = ProcedureParam{Direction: ProcedureParamDirection_Out, Name: string(yyDollar[2].bytes), Type: yyDollar[3].columnType}
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:798
		{
			yyVAL.characteristics = nil
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:802
		{
			yyVAL.characteristics = yyDollar[1].characteristics
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:808
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:812
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[2].characteristic)
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:818
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_Comment, Comment: string(yyDollar[2].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:822
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_LanguageSql}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:826
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_NotDeterministic}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:830
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_Deterministic}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:834
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_ContainsSql}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:838
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_NoSql}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:842
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_ReadsSqlData}
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:846
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_ModifiesSqlData}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:850
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_SqlSecurityDefiner}
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:854
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_SqlSecurityInvoker}
		}
	case 113:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:860
		{
			yyVAL.statement = &BeginEndBlock{Statements: yyDollar[2].statements}
		}
	case 114:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:865
		{
			yyVAL.str = ""
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:869
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:875
		{
			yyVAL.str = BeforeStr
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:879
		{
			yyVAL.str = AfterStr
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:885
		{
			yyVAL.str = InsertStr
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:889
		{
			yyVAL.str = UpdateStr
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:893
		{
			yyVAL.str = DeleteStr
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:898
		{
			yyVAL.triggerOrder = nil
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:902
		{
			yyVAL.triggerOrder = &TriggerOrder{PrecedesOrFollows: FollowsStr, OtherTriggerName: string(yyDollar[2].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:906
		{
			yyVAL.triggerOrder = &TriggerOrder{PrecedesOrFollows: PrecedesStr, OtherTriggerName: string(yyDollar[2].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:912
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 129:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:922
		{
			yyVAL.statement = &BeginEndBlock{Statements: yyDollar[2].statements}
		}
	case 130:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:928
		{
			yyVAL.statement = &CaseStatement{Expr: yyDollar[2].expr, Cases: yyDollar[3].caseStatementCases}
		}
	case 131:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:932
		{
			yyVAL.statement = &CaseStatement{Expr: yyDollar[2].expr, Cases: yyDollar[3].caseStatementCases, Else: yyDollar[5].statements}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:938
		{
			yyVAL.caseStatementCases = []CaseStatementCase{yyDollar[1].caseStatementCase}
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:942
		{
			yyVAL.caseStatementCases = append(yyVAL.caseStatementCases, yyDollar[2].caseStatementCase)
		}
	case 134:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:948
		{
			yyVAL.caseStatementCase = CaseStatementCase{Case: yyDollar[2].expr, Statements: yyDollar[4].statements}
		}
	case 135:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:954
		{
			conds := []IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}
			yyVAL.statement = &IfStatement{Conditions: conds}
		}
	case 136:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:959
		{
			conds := []IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}
			yyVAL.statement = &IfStatement{Conditions: conds, Else: yyDollar[7].statements}
		}
	case 137:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:964
		{
			conds := yyDollar[6].ifStatementConditions
			conds = append([]IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}, conds...)
			yyVAL.statement = &IfStatement{Conditions: conds}
		}
	case 138:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:970
		{
			conds := yyDollar[6].ifStatementConditions
			conds = append([]IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}, conds...)
			yyVAL.statement = &IfStatement{Conditions: conds, Else: yyDollar[8].statements}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:978
		{
			yyVAL.ifStatementConditions = []IfStatementCondition{yyDollar[1].ifStatementCondition}
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:982
		{
			yyVAL.ifStatementConditions = append(yyVAL.ifStatementConditions, yyDollar[2].ifStatementCondition)
		}
	case 141:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:988
		{
			yyVAL.ifStatementCondition = IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:994
		{
			yyVAL.statement = &Signal{SqlStateValue: string(yyDollar[2].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:998
		{
			yyVAL.statement = &Signal{SqlStateValue: string(yyDollar[2].bytes), Info: yyDollar[4].signalInfos}
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1004
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1008
		{
			yyVAL.bytes = yyDollar[3].bytes
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1014
		{
			yyVAL.signalInfos = []SignalInfo{yyDollar[1].signalInfo}
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1018
		{
			yyVAL.signalInfos = append(yyVAL.signalInfos, yyDollar[3].signalInfo)
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1024
		{
			yyVAL.signalInfo = SignalInfo{Name: string(yyDollar[1].bytes), Value: yyDollar[3].expr.(*SQLVal)}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1030
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1047
		{
			yyVAL.statement = &Call{FuncName: string(yyDollar[2].bytes), Params: yyDollar[3].exprs}
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1052
		{
			yyVAL.exprs = nil
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1056
		{
			yyVAL.exprs = nil
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1060
		{
			yyVAL.exprs = yyDollar[2].exprs
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1066
		{
			yyVAL.statements = Statements{yyDollar[1].statement}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1070
		{
			yyVAL.statements = append(yyVAL.statements, yyDollar[3].statement)
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1076
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 189:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1103
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName, IfNotExists: ne}
			setDDL(yylex, yyVAL.ddl)
		}
	case 190:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1114
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1121
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1126
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddConstraint(yyDollar[1].constraintDefinition)
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1131
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
			yyVAL.TableSpec.AddConstraint(yyDollar[2].constraintDefinition)
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1137
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 195:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1141
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
			yyVAL.TableSpec.AddConstraint(yyDollar[4].constraintDefinition)
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1146
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1150
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1154
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1160
		{
			if err := yyDollar[2].columnType.merge(yyDollar[3].columnType); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1170
		{
			if err := yyDollar[2].columnType.merge(yyDollar[3].columnType); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 201:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1179
		{
			yyVAL.columnType = ColumnType{}
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1183
		{
			opt := ColumnType{NotNull: yyDollar[2].boolVal, sawnull: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1192
		{
			opt := ColumnType{Default: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1201
		{
			opt := ColumnType{OnUpdate: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1210
		{
			opt := ColumnType{Autoincrement: yyDollar[2].boolVal, sawai: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1219
		{
			opt := ColumnType{KeyOpt: yyDollar[2].colKeyOpt}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1228
		{
			opt := ColumnType{Comment: yyDollar[2].sqlVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1239
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1250
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1255
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1261
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1265
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1269
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1273
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1277
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1281
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1285
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1289
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1293
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1299
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1305
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1311
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1317
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1323
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1329
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1335
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1341
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1349
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1353
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1357
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1361
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1365
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1371
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1375
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1379
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1383
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1387
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1391
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 242:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1395
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1399
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1403
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1407
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Length: yyDollar[4].sqlVal}
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1411
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1415
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1419
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1423
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1427
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1431
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1435
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1439
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1443
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1447
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1451
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1455
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1459
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1463
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 260:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1468
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1474
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1478
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1482
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1486
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1490
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1494
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1498
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1502
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1508
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[1].bytes))
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1513
		{
			yyVAL.strs = append(yyDollar[1].strs, string(yyDollar[3].bytes))
		}
	case 271:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1518
		{
			yyVAL.sqlVal = nil
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1522
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 273:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1527
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 274:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1531
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 275:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1539
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1543
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 277:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1549
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 278:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1557
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1561
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 280:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1566
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1570
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1577
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1581
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1587
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1593
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1599
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1604
		{
			yyVAL.str = ""
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1608
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1612
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 290:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1617
		{
			yyVAL.str = ""
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1621
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1625
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1631
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1635
		{
			yyVAL.colKeyOpt = colKey
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1639
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1643
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1649
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 298:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1655
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1659
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1664
		{
			yyVAL.indexOptions = nil
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1668
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1674
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1678
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1684
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1688
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1693
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1699
		{
			yyVAL.str = ""
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1703
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1709
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1713
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1717
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1721
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1725
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1731
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1735
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1739
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1745
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1749
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1754
		{
			yyVAL.str = ""
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1758
		{
			yyVAL.str = yyDollar[1].str
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1763
		{
			yyVAL.str = ""
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1767
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1773
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1777
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1783
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal, Order: yyDollar[3].str}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1789
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1793
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 328:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1799
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 329:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1803
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 330:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1807
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 331:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1811
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 332:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1815
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[12].ReferenceAction, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1821
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1825
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[2].constraintInfo}
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1829
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 336:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1835
		{
			yyVAL.constraintInfo = &CheckConstraintDefinition{Expr: yyDollar[3].expr, Enforced: yyDollar[5].boolean}
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1841
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1845
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1850
		{
			yyVAL.str = ""
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1854
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1858
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1864
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1870
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1876
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1880
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1884
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1888
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1892
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 349:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1897
		{
			yyVAL.boolean = true
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1901
		{
			yyVAL.boolean = true
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1905
		{
			yyVAL.boolean = false
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1910
		{
			yyVAL.str = ""
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1914
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1918
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1926
		{
			yyVAL.str = yyDollar[1].str
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1930
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1934
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1940
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1944
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1948
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 361:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1953
		{
			yyVAL.str = ""
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1957
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 365:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1967
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 366:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1971
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			ddl.Column = yyDollar[8].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 367:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1978
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 368:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1985
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 369:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1989
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: DropStr, Column: NewColIdent(string(yyDollar[7].bytes)), Table: yyDollar[4].tableName}
		}
	case 370:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1993
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 371:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1997
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: RenameStr, Table: yyDollar[4].tableName, Column: NewColIdent(string(yyDollar[7].bytes)), ToColumn: NewColIdent(string(yyDollar[9].bytes))}
		}
	case 372:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2001
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 373:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:2006
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[7].str), Using: yyDollar[8].colIdent, Columns: yyDollar[10].indexColumns, Options: yyDollar[12].indexOptions}}
		}
	case 374:
		yyDollar = yyS[yypt-14 : yypt+1]
//line sql.y:2010
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[9].str), Type: yyDollar[7].str, Using: yyDollar[10].colIdent, Columns: yyDollar[12].indexColumns, Options: yyDollar[14].indexOptions}}
		}
	case 375:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2014
		{
			yyVAL.statement = &DDL{Action: AlterStr, ConstraintAction: DropStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[7].bytes)}}}}
		}
	case 376:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2019
		{
			yyVAL.statement = &DDL{Action: AlterStr, ConstraintAction: DropStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[7].bytes), Details: &CheckConstraintDefinition{}}}}}
		}
	case 377:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2024
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[7].colIdent}}
		}
	case 378:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2028
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: RenameStr, FromName: yyDollar[7].colIdent, ToName: yyDollar[9].colIdent}}
		}
	case 379:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2032
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ModifyStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 380:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:2039
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ChangeStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, Column: NewColIdent(string(yyDollar[7].bytes)), ColumnOrder: yyDollar[9].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			yyVAL.statement = ddl
		}
	case 381:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2045
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 382:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2049
		{
			ddl := &DDL{Action: AlterStr, ConstraintAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddConstraint(yyDollar[6].constraintDefinition)
			yyVAL.statement = ddl
		}
	case 383:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2055
		{
			ddl := &DDL{Action: AlterStr, ConstraintAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddConstraint(yyDollar[6].constraintDefinition)
			yyVAL.statement = ddl
		}
	case 384:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2061
		{
			yyVAL.statement = &DDL{Action: AlterStr, ConstraintAction: DropStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[8].bytes), Details: &ForeignKeyDefinition{}}}}}
		}
	case 385:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2066
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, AutoIncSpec: &AutoIncSpec{Value: yyDollar[7].expr}}
		}
	case 386:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2071
		{
			yyVAL.columnOrder = nil
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2075
		{
			yyVAL.columnOrder = &ColumnOrder{First: true}
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2079
		{
			yyVAL.columnOrder = &ColumnOrder{AfterColumn: NewColIdent(string(yyDollar[2].bytes))}
		}
	case 389:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2085
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 390:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2091
		{
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2093
		{
		}
	case 395:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2102
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2108
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2112
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 398:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2118
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 399:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2122
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2128
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2134
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 402:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2138
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 403:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2146
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 404:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2154
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[3].colIdent}}
		}
	case 405:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2158
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromViews: yyDollar[4].tableNames, IfExists: exists}
		}
	case 406:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2166
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes), IfExists: exists}
		}
	case 407:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2174
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes), IfExists: exists}
		}
	case 408:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2182
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, TriggerSpec: &TriggerSpec{Name: string(yyDollar[4].bytes)}, IfExists: exists}
		}
	case 409:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2190
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, ProcedureSpec: &ProcedureSpec{Name: string(yyDollar[4].bytes)}, IfExists: exists}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2200
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2204
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2209
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 413:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2215
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 414:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2220
		{
			yyVAL.statement = &Show{Type: CharsetStr, Filter: yyDollar[4].showFilter}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2224
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Filter: yyDollar[3].showFilter}
		}
	case 416:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2228
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 417:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2232
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 418:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2237
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 419:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2241
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 420:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2245
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 421:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2249
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 422:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2253
		{
			yyVAL.statement = &Show{Type: CreateTriggerStr, Table: yyDollar[4].tableName}
		}
	case 423:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2257
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2261
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2265
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2269
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 427:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2273
		{
			yyVAL.statement = &Show{Type: IndexStr, Table: yyDollar[4].tableName, Database: yyDollar[5].str, ShowIndexFilterOpt: yyDollar[6].expr}
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2277
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 429:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2281
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Filter: yyDollar[4].showFilter}
		}
	case 430:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2285
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Filter: yyDollar[4].showFilter}
		}
	case 431:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2289
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 432:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2293
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Database: yyDollar[4].str, Filter: yyDollar[5].showFilter}
		}
	case 433:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2297
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 434:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2302
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[6].showFilter, AsOf: yyDollar[5].expr}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 435:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2312
		{
			yyVAL.statement = &Show{Type: string(yyDollar[3].bytes), ShowTablesOpt: &ShowTablesOpt{DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}}
		}
	case 436:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2316
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2320
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 438:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2324
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2330
		{
			// Cannot dereference $3 directly, or else the parser stackcannot be pooled. See yyParsePooled
			cmp := yyDollar[3].expr.(*ComparisonExpr)
			cmp.Left = &ColName{Name: NewColIdent("collation")}
			var ex Expr = cmp
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &ex}
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2338
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2348
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2354
		{
			yyVAL.expr = &ComparisonExpr{Operator: LikeStr, Right: yyDollar[2].expr, Escape: yyDollar[3].expr}
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2360
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2364
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 445:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2370
		{
			yyVAL.str = ""
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2374
		{
			yyVAL.str = "full "
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2380
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2384
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2390
		{
			yyVAL.str = ""
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2394
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2398
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 452:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2404
		{
			yyVAL.showFilter = nil
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2408
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2412
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 455:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2418
		{
			yyVAL.str = ""
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2422
		{
			yyVAL.str = SessionStr
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2426
		{
			yyVAL.str = GlobalStr
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2432
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2436
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2442
		{
			yyVAL.statement = &Begin{}
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2446
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2452
		{
			yyVAL.statement = &Begin{}
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2458
		{
			yyVAL.statement = &Commit{}
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2464
		{
			yyVAL.statement = &Rollback{}
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2469
		{
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2470
		{
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2474
		{
			yyVAL.statement = &Explain{ExplainFormat: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2478
		{
			yyVAL.statement = &Explain{Analyze: true, ExplainFormat: TreeStr, Statement: yyDollar[3].selStmt}
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2484
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 473:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2492
		{
			yyVAL.str = ""
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2496
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2507
		{
			yyVAL.statement = &Show{Type: "columns", OnTable: yyDollar[2].tableName}
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2511
		{
			yyVAL.statement = &OtherRead{}
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2517
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2521
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2525
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2529
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2535
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 484:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2539
		{
			setAllowComments(yylex, true)
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2543
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 486:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2549
		{
			yyVAL.bytes2 = nil
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2553
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2559
		{
			yyVAL.str = UnionStr
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2563
		{
			yyVAL.str = UnionAllStr
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2567
		{
			yyVAL.str = UnionDistinctStr
		}
	case 491:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2572
		{
			yyVAL.byt = 0
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2576
		{
			yyVAL.byt = 1
		}
	case 493:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2581
		{
			yyVAL.str = ""
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2585
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2589
		{
			yyVAL.str = SQLCacheStr
		}
	case 496:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2594
		{
			yyVAL.str = ""
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2598
		{
			yyVAL.str = ""
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2602
		{
			yyVAL.str = DistinctStr
		}
	case 499:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2607
		{
			yyVAL.str = ""
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2611
		{
			yyVAL.str = StraightJoinHint
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2617
		{
			if ae, ok := yyDollar[2].selectExpr.(*AliasedExpr); ok {
				ae.StartParsePos = yyDollar[1].int
				ae.EndParsePos = yyDollar[3].int - 1
			}
			yyVAL.selectExprs = SelectExprs{yyDollar[2].selectExpr}
		}
	case 502:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2625
		{
			if ae, ok := yyDollar[4].selectExpr.(*AliasedExpr); ok {
				ae.StartParsePos = yyDollar[3].int
				ae.EndParsePos = yyDollar[5].int - 1
			}
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[4].selectExpr)
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2636
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2640
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr}
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2644
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 506:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2648
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2654
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2658
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2662
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 510:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2666
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2673
		{
			yyVAL.over = &Over{WindowName: yyDollar[2].colIdent}
		}
	case 512:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2677
		{
			yyVAL.over = &Over{OrderBy: yyDollar[3].orderBy}
		}
	case 513:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2681
		{
			yyVAL.over = &Over{PartitionBy: yyDollar[5].exprs, OrderBy: yyDollar[6].orderBy}
		}
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2686
		{
			yyVAL.over = nil
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2690
		{
			yyVAL.over = yyDollar[1].over
		}
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2695
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2699
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2703
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2709
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2713
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2717
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2721
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2727
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2731
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2741
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2745
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2749
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2755
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2761
		{
			yyVAL.aliasedTableName = yyDollar[2].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
		}
	case 532:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2766
		{
			yyVAL.aliasedTableName = yyDollar[6].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
			yyVAL.aliasedTableName.Partitions = yyDollar[4].partitions
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2777
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Hints: yyDollar[1].indexHints}
		}
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2781
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, Hints: yyDollar[4].indexHints}
		}
	case 535:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2785
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, As: yyDollar[5].tableIdent, Hints: yyDollar[6].indexHints}
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2789
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2793
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[1].tableIdent, Hints: yyDollar[2].indexHints}
		}
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2804
		{
			yyVAL.expr = nil
		}
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2808
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 540:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2813
		{
			yyVAL.columns = nil
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2817
		{
			yyVAL.columns = yyDollar[2].columns
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2823
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2827
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2833
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2837
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 546:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2850
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 547:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2854
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 548:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2858
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2862
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2868
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 551:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2870
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 552:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2874
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2876
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 554:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2880
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2882
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 556:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2885
		{
			yyVAL.empty = struct{}{}
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2887
		{
			yyVAL.empty = struct{}{}
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2892
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2896
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2902
		{
			yyVAL.str = JoinStr
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2906
		{
			yyVAL.str = JoinStr
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2910
		{
			yyVAL.str = JoinStr
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2916
		{
			yyVAL.str = StraightJoinStr
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2922
		{
			yyVAL.str = LeftJoinStr
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2926
		{
			yyVAL.str = LeftJoinStr
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2930
		{
			yyVAL.str = RightJoinStr
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2934
		{
			yyVAL.str = RightJoinStr
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2940
		{
			yyVAL.str = NaturalJoinStr
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2944
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2954
		{
			yyVAL.tableName = yyDollar[3].tableName
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2960
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2964
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2970
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2974
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2980
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 577:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2985
		{
			yyVAL.indexHints = nil
		}
	case 578:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2989
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 579:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2993
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 580:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2997
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 581:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3002
		{
			yyVAL.expr = nil
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3006
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3012
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3016
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3020
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3024
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3028
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3032
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3036
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3042
		{
			yyVAL.str = ""
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3046
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3052
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3056
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3062
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3066
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 596:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3070
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 597:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3074
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 598:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3078
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3082
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 600:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3086
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 601:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3090
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 602:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3094
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3098
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3104
		{
			yyVAL.str = IsNullStr
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3108
		{
			yyVAL.str = IsNotNullStr
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3112
		{
			yyVAL.str = IsTrueStr
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3116
		{
			yyVAL.str = IsNotTrueStr
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3120
		{
			yyVAL.str = IsFalseStr
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3124
		{
			yyVAL.str = IsNotFalseStr
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3130
		{
			yyVAL.str = EqualStr
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3134
		{
			yyVAL.str = LessThanStr
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3138
		{
			yyVAL.str = GreaterThanStr
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3142
		{
			yyVAL.str = LessEqualStr
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3146
		{
			yyVAL.str = GreaterEqualStr
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3150
		{
			yyVAL.str = NotEqualStr
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3154
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 617:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3159
		{
			yyVAL.expr = nil
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3163
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3169
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3173
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3177
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3183
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 623:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3188
		{
			yyVAL.selectExprs = nil
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3195
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3199
		{
			yyVAL.selectExprs = append(yyDollar[1].selectExprs, yyDollar[3].selectExpr)
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3205
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3209
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3215
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3219
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3223
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3227
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3231
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3235
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3239
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3243
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3247
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3251
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3255
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3259
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3263
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3267
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3271
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3275
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3279
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3283
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3287
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3291
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3295
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 650:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3299
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3303
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3307
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3315
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 654:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3329
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3333
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3337
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 663:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3357
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: yyDollar[3].str == DistinctStr, Exprs: yyDollar[4].selectExprs}
		}
	case 664:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3361
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 665:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3371
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 666:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3375
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 667:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3379
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 668:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3383
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 669:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3387
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 670:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3391
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 671:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3395
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 672:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3399
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 673:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3403
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 674:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3407
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 675:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3411
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 676:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3415
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 677:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3419
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 678:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3423
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 679:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3427
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 680:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3431
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 681:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3435
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 682:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3444
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 683:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3448
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 684:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3452
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: SelectExprs{yyDollar[3].selectExpr}, Over: yyDollar[5].over}
		}
	case 685:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3456
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 686:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3460
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: SelectExprs{yyDollar[3].selectExpr}, Over: yyDollar[5].over}
		}
	case 687:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3464
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 688:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3468
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 689:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3472
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 690:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3476
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 691:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3480
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 692:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3484
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 693:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3495
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 694:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3499
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3503
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 696:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3507
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 697:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3511
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 698:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3515
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 699:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3519
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 700:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3523
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 701:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3527
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 702:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3531
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 703:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3535
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 704:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3539
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 705:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3543
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 706:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3547
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 707:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3551
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 708:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3561
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 709:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3565
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 710:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3569
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 711:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3574
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 712:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3579
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 713:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3584
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 714:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3590
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 715:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3595
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 716:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3599
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 717:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3604
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Fsp: yyDollar[2].expr}
		}
	case 718:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3608
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Fsp: yyDollar[2].expr}
		}
	case 719:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3612
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Fsp: yyDollar[2].expr}
		}
	case 720:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3617
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Fsp: yyDollar[2].expr}
		}
	case 721:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3622
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Fsp: yyDollar[2].expr}
		}
	case 722:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3627
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Fsp: yyDollar[2].expr}
		}
	case 723:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3631
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 724:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3635
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 727:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3646
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 728:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3656
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 729:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3660
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 730:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3664
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 731:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3668
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 732:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3672
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 733:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3676
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 734:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3682
		{
			yyVAL.str = ""
		}
	case 735:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3686
		{
			yyVAL.str = BooleanModeStr
		}
	case 736:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3690
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 737:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3694
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 738:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3698
		{
			yyVAL.str = QueryExpansionStr
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3704
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3708
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 741:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3714
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 742:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3718
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 743:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3722
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3726
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 745:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3730
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 746:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3734
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3740
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 748:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3744
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3748
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 750:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3752
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 751:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3756
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3760
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 753:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3764
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 754:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3769
		{
			yyVAL.expr = nil
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3773
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 756:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3778
		{
			yyVAL.str = string("")
		}
	case 757:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3782
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3788
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 759:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3792
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 760:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3798
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 761:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3803
		{
			yyVAL.expr = nil
		}
	case 762:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3807
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3813
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 764:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3817
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 765:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3821
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3827
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3831
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3835
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3839
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3843
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3847
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3851
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3855
		{
			yyVAL.expr = &NullVal{}
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3861
		{
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 775:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3865
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 776:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3869
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 777:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3874
		{
			yyVAL.exprs = nil
		}
	case 778:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3878
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3884
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 780:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3888
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3894
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3898
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 783:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3903
		{
			yyVAL.expr = nil
		}
	case 784:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3907
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3913
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3917
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 787:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3922
		{
			yyVAL.orderBy = nil
		}
	case 788:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3926
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3932
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 790:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3936
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 791:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3942
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 792:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3946
		{
			yyVAL.order = &Order{Expr: &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}, Direction: yyDollar[2].str}
		}
	case 793:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3951
		{
			yyVAL.str = AscScr
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3955
		{
			yyVAL.str = AscScr
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3959
		{
			yyVAL.str = DescScr
		}
	case 796:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3964
		{
			yyVAL.limit = nil
		}
	case 797:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3968
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 798:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3972
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 799:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3976
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 800:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3981
		{
			yyVAL.str = ""
		}
	case 801:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3985
		{
			yyVAL.str = ForUpdateStr
		}
	case 802:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3989
		{
			yyVAL.str = ShareModeStr
		}
	case 803:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4002
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4006
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 805:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4010
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 806:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4015
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 807:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4019
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 808:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:4023
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4030
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 810:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4034
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 811:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4038
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 812:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4042
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 813:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4047
		{
			yyVAL.setExprs = nil
		}
	case 814:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4051
		{
			yyVAL.setExprs = yyDollar[5].setExprs
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4057
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 816:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4061
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4067
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 818:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4071
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 819:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4077
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4083
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4093
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 822:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4097
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 823:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4103
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: NewStrVal([]byte("on"))}
		}
	case 824:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4107
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: NewStrVal([]byte("off"))}
		}
	case 825:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4111
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 826:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4115
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 828:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4122
		{
			yyVAL.bytes = []byte("charset")
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4129
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4133
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4137
		{
			yyVAL.expr = &Default{}
		}
	case 835:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4146
		{
			yyVAL.byt = 0
		}
	case 836:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4148
		{
			yyVAL.byt = 1
		}
	case 837:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4151
		{
			yyVAL.byt = 0
		}
	case 838:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4153
		{
			yyVAL.byt = 1
		}
	case 839:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4156
		{
			yyVAL.str = ""
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4158
		{
			yyVAL.str = IgnoreStr
		}
	case 841:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4161
		{
			yyVAL.sqlVal = nil
		}
	case 842:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4163
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4167
		{
			yyVAL.empty = struct{}{}
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4169
		{
			yyVAL.empty = struct{}{}
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4171
		{
			yyVAL.empty = struct{}{}
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4173
		{
			yyVAL.empty = struct{}{}
		}
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4175
		{
			yyVAL.empty = struct{}{}
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4177
		{
			yyVAL.empty = struct{}{}
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4179
		{
			yyVAL.empty = struct{}{}
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4181
		{
			yyVAL.empty = struct{}{}
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4183
		{
			yyVAL.empty = struct{}{}
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4187
		{
			yyVAL.empty = struct{}{}
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4189
		{
			yyVAL.empty = struct{}{}
		}
	case 854:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4192
		{
			yyVAL.empty = struct{}{}
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4194
		{
			yyVAL.empty = struct{}{}
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4196
		{
			yyVAL.empty = struct{}{}
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4200
		{
			yyVAL.str = UniqueStr
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4202
		{
			yyVAL.str = FulltextStr
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4204
		{
			yyVAL.str = SpatialStr
		}
	case 860:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4207
		{
			yyVAL.str = ""
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4209
		{
			yyVAL.str = yyDollar[1].str
		}
	case 862:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4212
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 863:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4214
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4218
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4222
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4229
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4235
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4239
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4246
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 872:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4251
		{
			yyVAL.str = string("")
		}
	case 873:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4253
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 874:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4256
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4258
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 876:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4261
		{
			yyVAL.EnclosedBy = nil
		}
	case 877:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4265
		{
			yyVAL.EnclosedBy = &EnclosedBy{Optionally: yyDollar[1].boolVal, Delim: NewStrVal(yyDollar[4].bytes)}
		}
	case 878:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4270
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4274
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 880:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4279
		{
			yyVAL.sqlVal = nil
		}
	case 881:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4283
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[3].bytes)
		}
	case 882:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4288
		{
			yyVAL.sqlVal = nil
		}
	case 883:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4292
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[3].bytes)
		}
	case 884:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4297
		{
			yyVAL.Fields = nil
		}
	case 885:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4301
		{
			yyVAL.Fields = &Fields{TerminatedBy: yyDollar[2].sqlVal, EnclosedBy: yyDollar[3].EnclosedBy, EscapedBy: yyDollar[4].sqlVal}
		}
	case 886:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4306
		{
			yyVAL.Lines = nil
		}
	case 887:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4310
		{
			yyVAL.Lines = &Lines{StartingBy: yyDollar[2].sqlVal, TerminatedBy: yyDollar[3].sqlVal}
		}
	case 888:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4315
		{
			yyVAL.sqlVal = nil
		}
	case 889:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4319
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[3].bytes)
		}
	case 1257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4716
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4725
		{
			decNesting(yylex)
		}
	case 1259:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4730
		{
			skipToEnd(yylex)
		}
	case 1260:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4735
		{
			skipToEnd(yylex)
		}
	case 1261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4739
		{
			skipToEnd(yylex)
		}
	case 1262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4743
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
