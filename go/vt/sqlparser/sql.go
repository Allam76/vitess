// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func yyPosition(yylex interface{}) int {
	return yylex.(*Tokenizer).Position
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:57
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	int                  int
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	statements           Statements
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	asOf                 *AsOf
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	setExprs             SetExprs
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	columnOrder          *ColumnOrder
	triggerOrder         *TriggerOrder
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
	caseStatementCases   []CaseStatementCase
	caseStatementCase    CaseStatementCase
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const UNLOCK = 57373
const KEYS = 57374
const UNIQUE = 57375
const KEY = 57376
const SYSTEM_TIME = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const INTEGRAL = 57401
const FLOAT = 57402
const HEXNUM = 57403
const VALUE_ARG = 57404
const LIST_ARG = 57405
const COMMENT = 57406
const COMMENT_KEYWORD = 57407
const BIT_LITERAL = 57408
const NULL = 57409
const TRUE = 57410
const FALSE = 57411
const OFF = 57412
const OR = 57413
const AND = 57414
const NOT = 57415
const BETWEEN = 57416
const CASE = 57417
const WHEN = 57418
const THEN = 57419
const ELSE = 57420
const END = 57421
const LE = 57422
const GE = 57423
const NE = 57424
const NULL_SAFE_EQUAL = 57425
const IS = 57426
const LIKE = 57427
const REGEXP = 57428
const IN = 57429
const SHIFT_LEFT = 57430
const SHIFT_RIGHT = 57431
const DIV = 57432
const MOD = 57433
const UNARY = 57434
const COLLATE = 57435
const BINARY = 57436
const UNDERSCORE_BINARY = 57437
const UNDERSCORE_UTF8MB4 = 57438
const INTERVAL = 57439
const JSON_EXTRACT_OP = 57440
const JSON_UNQUOTE_EXTRACT_OP = 57441
const CREATE = 57442
const ALTER = 57443
const DROP = 57444
const RENAME = 57445
const ANALYZE = 57446
const ADD = 57447
const FLUSH = 57448
const MODIFY = 57449
const CHANGE = 57450
const SCHEMA = 57451
const TABLE = 57452
const INDEX = 57453
const INDEXES = 57454
const VIEW = 57455
const TO = 57456
const IGNORE = 57457
const IF = 57458
const PRIMARY = 57459
const COLUMN = 57460
const SPATIAL = 57461
const FULLTEXT = 57462
const KEY_BLOCK_SIZE = 57463
const CHECK = 57464
const ACTION = 57465
const CASCADE = 57466
const CONSTRAINT = 57467
const FOREIGN = 57468
const NO = 57469
const REFERENCES = 57470
const RESTRICT = 57471
const FIRST = 57472
const AFTER = 57473
const SHOW = 57474
const DESCRIBE = 57475
const EXPLAIN = 57476
const DATE = 57477
const ESCAPE = 57478
const REPAIR = 57479
const OPTIMIZE = 57480
const TRUNCATE = 57481
const FORMAT = 57482
const MAXVALUE = 57483
const PARTITION = 57484
const REORGANIZE = 57485
const LESS = 57486
const THAN = 57487
const PROCEDURE = 57488
const TRIGGER = 57489
const VINDEX = 57490
const VINDEXES = 57491
const STATUS = 57492
const VARIABLES = 57493
const WARNINGS = 57494
const SEQUENCE = 57495
const EACH = 57496
const ROW = 57497
const BEFORE = 57498
const FOLLOWS = 57499
const PRECEDES = 57500
const DEFINER = 57501
const BEGIN = 57502
const START = 57503
const TRANSACTION = 57504
const COMMIT = 57505
const ROLLBACK = 57506
const BIT = 57507
const TINYINT = 57508
const SMALLINT = 57509
const MEDIUMINT = 57510
const INT = 57511
const INTEGER = 57512
const BIGINT = 57513
const INTNUM = 57514
const REAL = 57515
const DOUBLE = 57516
const FLOAT_TYPE = 57517
const DECIMAL = 57518
const NUMERIC = 57519
const DEC = 57520
const FIXED = 57521
const PRECISION = 57522
const TIME = 57523
const TIMESTAMP = 57524
const DATETIME = 57525
const YEAR = 57526
const CHAR = 57527
const VARCHAR = 57528
const BOOL = 57529
const CHARACTER = 57530
const VARBINARY = 57531
const NCHAR = 57532
const NVARCHAR = 57533
const NATIONAL = 57534
const VARYING = 57535
const TEXT = 57536
const TINYTEXT = 57537
const MEDIUMTEXT = 57538
const LONGTEXT = 57539
const LONG = 57540
const BLOB = 57541
const TINYBLOB = 57542
const MEDIUMBLOB = 57543
const LONGBLOB = 57544
const JSON = 57545
const ENUM = 57546
const GEOMETRY = 57547
const POINT = 57548
const LINESTRING = 57549
const POLYGON = 57550
const GEOMETRYCOLLECTION = 57551
const MULTIPOINT = 57552
const MULTILINESTRING = 57553
const MULTIPOLYGON = 57554
const NULLX = 57555
const AUTO_INCREMENT = 57556
const APPROXNUM = 57557
const SIGNED = 57558
const UNSIGNED = 57559
const ZEROFILL = 57560
const COLLATION = 57561
const DATABASES = 57562
const SCHEMAS = 57563
const TABLES = 57564
const VITESS_METADATA = 57565
const VSCHEMA = 57566
const FULL = 57567
const PROCESSLIST = 57568
const COLUMNS = 57569
const FIELDS = 57570
const ENGINES = 57571
const PLUGINS = 57572
const NAMES = 57573
const CHARSET = 57574
const GLOBAL = 57575
const SESSION = 57576
const ISOLATION = 57577
const LEVEL = 57578
const READ = 57579
const WRITE = 57580
const ONLY = 57581
const REPEATABLE = 57582
const COMMITTED = 57583
const UNCOMMITTED = 57584
const SERIALIZABLE = 57585
const CURRENT_TIMESTAMP = 57586
const DATABASE = 57587
const CURRENT_DATE = 57588
const CURRENT_TIME = 57589
const LOCALTIME = 57590
const LOCALTIMESTAMP = 57591
const UTC_DATE = 57592
const UTC_TIME = 57593
const UTC_TIMESTAMP = 57594
const REPLACE = 57595
const CONVERT = 57596
const CAST = 57597
const SUBSTR = 57598
const SUBSTRING = 57599
const GROUP_CONCAT = 57600
const SEPARATOR = 57601
const TIMESTAMPADD = 57602
const TIMESTAMPDIFF = 57603
const MATCH = 57604
const AGAINST = 57605
const BOOLEAN = 57606
const LANGUAGE = 57607
const WITH = 57608
const QUERY = 57609
const EXPANSION = 57610
const UNUSED = 57611
const ARRAY = 57612
const CUME_DIST = 57613
const DESCRIPTION = 57614
const DENSE_RANK = 57615
const EMPTY = 57616
const EXCEPT = 57617
const FIRST_VALUE = 57618
const GROUPING = 57619
const GROUPS = 57620
const JSON_TABLE = 57621
const LAG = 57622
const LAST_VALUE = 57623
const LATERAL = 57624
const LEAD = 57625
const MEMBER = 57626
const NTH_VALUE = 57627
const NTILE = 57628
const OF = 57629
const OVER = 57630
const PERCENT_RANK = 57631
const RANK = 57632
const RECURSIVE = 57633
const ROW_NUMBER = 57634
const SYSTEM = 57635
const WINDOW = 57636
const ACTIVE = 57637
const ADMIN = 57638
const BUCKETS = 57639
const CLONE = 57640
const COMPONENT = 57641
const DEFINITION = 57642
const ENFORCED = 57643
const EXCLUDE = 57644
const FOLLOWING = 57645
const GEOMCOLLECTION = 57646
const GET_MASTER_PUBLIC_KEY = 57647
const HISTOGRAM = 57648
const HISTORY = 57649
const INACTIVE = 57650
const INVISIBLE = 57651
const LOCKED = 57652
const MASTER_COMPRESSION_ALGORITHMS = 57653
const MASTER_PUBLIC_KEY_PATH = 57654
const MASTER_TLS_CIPHERSUITES = 57655
const MASTER_ZSTD_COMPRESSION_LEVEL = 57656
const NESTED = 57657
const NETWORK_NAMESPACE = 57658
const NOWAIT = 57659
const NULLS = 57660
const OJ = 57661
const OLD = 57662
const OPTIONAL = 57663
const ORDINALITY = 57664
const ORGANIZATION = 57665
const OTHERS = 57666
const PATH = 57667
const PERSIST = 57668
const PERSIST_ONLY = 57669
const PRECEDING = 57670
const PRIVILEGE_CHECKS_USER = 57671
const PROCESS = 57672
const RANDOM = 57673
const REFERENCE = 57674
const REQUIRE_ROW_FORMAT = 57675
const RESOURCE = 57676
const RESPECT = 57677
const RESTART = 57678
const RETAIN = 57679
const REUSE = 57680
const ROLE = 57681
const SECONDARY = 57682
const SECONDARY_ENGINE = 57683
const SECONDARY_LOAD = 57684
const SECONDARY_UNLOAD = 57685
const SKIP = 57686
const SRID = 57687
const THREAD_PRIORITY = 57688
const TIES = 57689
const UNBOUNDED = 57690
const VCPU = 57691
const VISIBLE = 57692

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"UNIQUE",
	"KEY",
	"SYSTEM_TIME",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"MODIFY",
	"CHANGE",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"INDEXES",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"FIRST",
	"AFTER",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"FORMAT",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"EACH",
	"ROW",
	"BEFORE",
	"FOLLOWS",
	"PRECEDES",
	"DEFINER",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DEC",
	"FIXED",
	"PRECISION",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NATIONAL",
	"VARYING",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"LONG",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 31,
	-2, 4,
	-1, 33,
	164, 78,
	-2, 729,
	-1, 41,
	167, 381,
	168, 381,
	-2, 369,
	-1, 48,
	1, 1031,
	368, 1031,
	-2, 400,
	-1, 334,
	114, 737,
	-2, 733,
	-1, 335,
	114, 738,
	-2, 734,
	-1, 405,
	84, 987,
	114, 987,
	-2, 67,
	-1, 406,
	84, 905,
	114, 905,
	-2, 68,
	-1, 411,
	84, 874,
	114, 874,
	-2, 697,
	-1, 413,
	84, 935,
	114, 935,
	-2, 699,
	-1, 597,
	5, 31,
	-2, 394,
	-1, 601,
	5, 31,
	-2, 393,
	-1, 728,
	1, 445,
	5, 445,
	12, 445,
	13, 445,
	14, 445,
	15, 445,
	17, 445,
	19, 445,
	29, 445,
	30, 445,
	44, 445,
	45, 445,
	46, 445,
	47, 445,
	48, 445,
	50, 445,
	51, 445,
	54, 445,
	55, 445,
	57, 445,
	58, 445,
	368, 445,
	-2, 470,
	-1, 731,
	55, 48,
	57, 48,
	-2, 52,
	-1, 894,
	114, 740,
	-2, 736,
	-1, 1097,
	56, 313,
	59, 313,
	-2, 278,
	-1, 1146,
	5, 32,
	-2, 534,
	-1, 1177,
	5, 31,
	-2, 674,
	-1, 1270,
	5, 31,
	-2, 69,
	-1, 1379,
	1, 489,
	5, 489,
	12, 489,
	13, 489,
	14, 489,
	15, 489,
	17, 489,
	19, 489,
	29, 489,
	30, 489,
	44, 489,
	45, 489,
	46, 489,
	47, 489,
	48, 489,
	50, 489,
	51, 489,
	54, 489,
	55, 489,
	57, 489,
	58, 489,
	368, 489,
	-2, 470,
	-1, 1482,
	5, 32,
	-2, 675,
	-1, 1512,
	5, 31,
	-2, 69,
	-1, 1550,
	5, 31,
	-2, 677,
	-1, 1636,
	5, 32,
	-2, 678,
	-1, 1686,
	368, 101,
	-2, 31,
}

const yyPrivate = 57344

const yyLast = 17510

var yyAct = [...]int{

	366, 54, 1685, 1715, 1706, 1680, 1446, 1684, 1681, 1640,
	1070, 1690, 8, 1624, 1689, 7, 1688, 6, 1392, 1315,
	335, 682, 1687, 5, 1692, 1530, 981, 1359, 1515, 339,
	1564, 401, 1068, 1012, 870, 1641, 365, 1495, 1225, 1393,
	445, 979, 313, 983, 1360, 416, 975, 86, 1021, 352,
	1356, 1025, 1366, 1063, 1370, 54, 1046, 1011, 1285, 1332,
	101, 1203, 932, 101, 919, 847, 977, 318, 1058, 101,
	1262, 955, 744, 1291, 1292, 966, 947, 896, 613, 619,
	743, 404, 399, 959, 1092, 950, 64, 1018, 634, 447,
	337, 322, 956, 725, 101, 625, 396, 733, 724, 101,
	422, 101, 1732, 1729, 407, 1702, 63, 328, 1288, 1695,
	68, 1651, 101, 1679, 434, 698, 1634, 1668, 101, 1447,
	1650, 1633, 1349, 1474, 421, 1388, 1389, 1001, 1002, 1387,
	1000, 1006, 831, 326, 306, 745, 699, 746, 70, 71,
	72, 73, 74, 1600, 647, 646, 656, 657, 649, 650,
	651, 652, 653, 654, 655, 648, 569, 594, 658, 305,
	1245, 379, 1108, 385, 386, 383, 384, 382, 381, 380,
	1032, 1034, 96, 92, 93, 1107, 94, 387, 388, 55,
	29, 30, 1317, 302, 424, 26, 426, 55, 29, 30,
	310, 26, 312, 55, 29, 30, 1212, 1537, 1047, 1211,
	31, 26, 1213, 55, 29, 30, 1112, 587, 31, 1034,
	1465, 588, 585, 586, 31, 1106, 1038, 1040, 1052, 1039,
	1047, 1463, 297, 568, 571, 1059, 1618, 573, 1654, 1655,
	593, 1077, 443, 303, 304, 61, 1642, 307, 861, 580,
	581, 61, 592, 1319, 858, 860, 425, 1678, 1318, 1667,
	1625, 61, 1314, 960, 1616, 299, 1076, 1026, 1693, 1719,
	570, 572, 1731, 1565, 1693, 1103, 1098, 1099, 1712, 1097,
	1296, 1100, 1101, 1516, 1517, 444, 1567, 444, 444, 423,
	312, 862, 444, 859, 444, 431, 1525, 1276, 823, 1710,
	444, 300, 101, 1524, 815, 434, 1202, 434, 434, 54,
	54, 311, 434, 1201, 434, 88, 1110, 1113, 95, 1200,
	434, 1311, 419, 598, 607, 600, 1028, 984, 986, 54,
	271, 599, 1156, 1028, 91, 1252, 1120, 1028, 1607, 1119,
	1485, 101, 1601, 1216, 667, 670, 671, 669, 1208, 1135,
	1153, 1226, 868, 1047, 752, 739, 1566, 638, 1676, 434,
	439, 1632, 1105, 1007, 648, 658, 1676, 658, 996, 567,
	1411, 865, 1676, 1037, 633, 680, 1061, 684, 685, 686,
	687, 688, 689, 690, 691, 692, 693, 694, 1104, 697,
	700, 700, 700, 706, 700, 700, 706, 700, 714, 715,
	716, 717, 718, 719, 605, 729, 26, 985, 55, 29,
	30, 1708, 1523, 621, 1709, 612, 1707, 853, 90, 89,
	1027, 1412, 1614, 1351, 101, 101, 101, 1027, 1109, 31,
	1310, 1027, 616, 620, 1307, 848, 670, 671, 1085, 434,
	623, 77, 407, 1111, 741, 1287, 101, 88, 903, 639,
	434, 56, 444, 444, 670, 671, 61, 101, 589, 56,
	1028, 101, 901, 902, 900, 56, 101, 1151, 417, 1150,
	101, 723, 434, 434, 1333, 56, 577, 78, 609, 1693,
	610, 1589, 747, 611, 683, 602, 632, 631, 81, 651,
	652, 653, 654, 655, 648, 696, 948, 658, 430, 603,
	604, 415, 732, 633, 427, 737, 701, 703, 705, 707,
	709, 711, 712, 631, 1399, 948, 1335, 1164, 849, 574,
	575, 1086, 1733, 332, 579, 1286, 582, 702, 704, 633,
	708, 710, 595, 713, 1726, 817, 1028, 824, 591, 833,
	83, 85, 61, 1033, 80, 628, 1638, 1024, 1028, 24,
	90, 89, 899, 1510, 1027, 871, 872, 1337, 1509, 578,
	1300, 1296, 1341, 1267, 1336, 1297, 1334, 1265, 1304, 1306,
	1246, 1339, 1716, 417, 1723, 1722, 1720, 1676, 867, 1615,
	444, 444, 1544, 444, 1338, 1301, 1132, 1133, 1134, 1507,
	87, 444, 444, 435, 436, 437, 1426, 1340, 1342, 1404,
	434, 434, 101, 434, 101, 632, 631, 101, 632, 631,
	1263, 434, 434, 1686, 3, 1728, 317, 866, 1721, 444,
	1094, 309, 633, 1237, 920, 633, 921, 1665, 1242, 1241,
	1027, 1214, 1664, 1215, 632, 631, 1300, 1296, 101, 434,
	1612, 1297, 1027, 101, 1298, 1299, 1559, 1669, 1022, 1238,
	1023, 633, 632, 631, 606, 434, 1020, 1026, 1716, 1152,
	101, 1301, 1583, 1243, 1429, 1235, 434, 417, 308, 633,
	56, 1236, 1501, 1666, 873, 1226, 82, 1580, 836, 837,
	54, 886, 888, 889, 834, 835, 417, 887, 897, 893,
	1521, 632, 631, 393, 394, 684, 646, 656, 657, 649,
	650, 651, 652, 653, 654, 655, 648, 850, 633, 658,
	434, 632, 631, 1646, 606, 632, 631, 1449, 874, 1501,
	1643, 1578, 1353, 1559, 1628, 875, 1501, 1617, 633, 1240,
	937, 940, 633, 1444, 890, 1559, 1608, 949, 894, 1440,
	978, 1559, 1570, 1574, 729, 434, 434, 1437, 729, 883,
	884, 1435, 101, 355, 354, 357, 358, 359, 360, 1434,
	101, 101, 356, 361, 101, 101, 1559, 606, 101, 101,
	101, 923, 924, 1501, 1500, 1487, 606, 927, 929, 1283,
	407, 892, 1282, 934, 1221, 434, 926, 1083, 931, 933,
	1484, 606, 1573, 939, 942, 943, 944, 1419, 1418, 1405,
	945, 1082, 683, 1008, 922, 1013, 935, 936, 1415, 1416,
	991, 1016, 838, 839, 993, 841, 1415, 1414, 735, 954,
	855, 957, 958, 844, 845, 989, 1239, 444, 830, 444,
	829, 994, 997, 998, 963, 606, 1147, 606, 735, 833,
	1048, 1049, 1050, 1051, 928, 606, 101, 434, 821, 434,
	819, 857, 894, 101, 101, 818, 1029, 101, 26, 816,
	755, 754, 736, 441, 738, 1005, 672, 673, 674, 675,
	676, 677, 678, 679, 1065, 1066, 1067, 101, 740, 101,
	101, 1175, 736, 928, 734, 101, 1060, 1062, 1176, 101,
	101, 101, 101, 101, 1480, 1009, 649, 650, 651, 652,
	653, 654, 655, 648, 1136, 1588, 658, 1357, 61, 990,
	740, 734, 597, 601, 963, 1417, 26, 26, 1323, 893,
	1204, 656, 657, 649, 650, 651, 652, 653, 654, 655,
	648, 65, 622, 658, 647, 646, 656, 657, 649, 650,
	651, 652, 653, 654, 655, 648, 1549, 897, 658, 1217,
	968, 971, 972, 973, 969, 1204, 970, 974, 962, 1124,
	1371, 1372, 1125, 1699, 1147, 963, 61, 61, 894, 999,
	1178, 1179, 1147, 1147, 729, 729, 729, 729, 729, 1169,
	681, 1168, 1081, 1131, 1122, 1123, 963, 620, 1137, 978,
	734, 1196, 1093, 869, 101, 101, 101, 101, 101, 1141,
	740, 729, 407, 822, 1180, 61, 101, 319, 1144, 101,
	1652, 1009, 1644, 101, 1581, 1532, 1511, 1034, 1143, 1490,
	1199, 101, 1064, 1398, 1371, 1372, 1146, 1148, 1059, 1149,
	1220, 1054, 1053, 1163, 1316, 1155, 1198, 1069, 1158, 1159,
	1160, 1533, 434, 1697, 1682, 1166, 1145, 1167, 1161, 1423,
	1170, 1171, 1374, 1172, 1173, 1218, 1357, 61, 1268, 1072,
	1193, 1074, 1013, 1206, 854, 1207, 1165, 1205, 1182, 1183,
	826, 1185, 1181, 1195, 1227, 1184, 881, 1377, 1376, 1190,
	1187, 54, 1209, 606, 1191, 1223, 1224, 1188, 1186, 323,
	324, 444, 1189, 444, 444, 1192, 1661, 972, 973, 1649,
	434, 1320, 1247, 1248, 1121, 1659, 1477, 341, 1130, 1254,
	1129, 434, 101, 434, 434, 851, 1547, 1439, 1228, 1261,
	647, 646, 656, 657, 649, 650, 651, 652, 653, 654,
	655, 648, 1403, 1402, 658, 1264, 1222, 1256, 753, 442,
	1266, 1478, 871, 872, 647, 646, 656, 657, 649, 650,
	651, 652, 653, 654, 655, 648, 1281, 101, 658, 1293,
	1305, 1309, 1528, 1284, 895, 1073, 434, 904, 905, 906,
	907, 908, 909, 910, 911, 912, 913, 914, 915, 916,
	917, 918, 1302, 1303, 1312, 1313, 1325, 1362, 1255, 54,
	1257, 1258, 1259, 1260, 614, 1295, 968, 971, 972, 973,
	969, 825, 970, 974, 1271, 615, 1089, 626, 627, 434,
	434, 1381, 1382, 1383, 976, 407, 814, 1358, 1326, 1577,
	1331, 314, 1344, 1361, 951, 624, 1343, 434, 626, 627,
	320, 321, 1594, 1327, 1128, 1380, 315, 65, 1593, 1535,
	1330, 1204, 1127, 1273, 1274, 1275, 1700, 434, 434, 1375,
	434, 434, 1368, 1701, 1700, 69, 1157, 1154, 1350, 1378,
	846, 629, 1701, 1391, 1604, 1401, 864, 1325, 1013, 67,
	1013, 47, 1396, 1397, 62, 1, 1294, 1386, 1448, 1529,
	1395, 1102, 1352, 681, 1623, 1390, 1019, 1010, 76, 414,
	1290, 1421, 1422, 75, 1613, 1084, 576, 976, 930, 101,
	1384, 1519, 279, 1017, 1233, 1232, 1229, 101, 1035, 1036,
	1244, 1041, 1042, 1043, 1044, 1045, 1408, 1031, 1231, 1230,
	1234, 761, 1385, 1277, 364, 1279, 1280, 984, 986, 1055,
	1056, 1057, 759, 760, 729, 758, 434, 763, 762, 101,
	434, 1030, 1432, 681, 757, 434, 282, 1430, 434, 434,
	434, 402, 1433, 1425, 101, 748, 630, 84, 48, 1522,
	1472, 1308, 1096, 79, 852, 583, 584, 284, 1443, 666,
	647, 646, 656, 657, 649, 650, 651, 652, 653, 654,
	655, 648, 1126, 1210, 658, 408, 1364, 1653, 618, 1406,
	1407, 1592, 1534, 1162, 1453, 695, 1410, 946, 340, 409,
	1454, 1461, 885, 1413, 353, 1427, 350, 985, 351, 1088,
	876, 1174, 434, 434, 434, 640, 1493, 338, 432, 1479,
	330, 434, 1455, 727, 720, 1138, 1139, 1140, 1457, 434,
	1497, 1498, 967, 54, 1218, 965, 1494, 1499, 964, 1466,
	1467, 1013, 827, 397, 668, 1373, 1503, 1369, 726, 1322,
	590, 298, 1473, 1599, 101, 880, 28, 66, 1481, 1482,
	1483, 1504, 1486, 325, 19, 1488, 18, 17, 596, 20,
	21, 1475, 22, 16, 1492, 1518, 15, 14, 434, 428,
	683, 1506, 1526, 1508, 32, 1514, 1431, 36, 35, 1489,
	34, 1362, 1491, 1395, 1551, 1520, 10, 1436, 1531, 1272,
	1527, 1075, 728, 647, 646, 656, 657, 649, 650, 651,
	652, 653, 654, 655, 648, 434, 434, 658, 434, 1714,
	1691, 434, 23, 101, 13, 101, 1536, 1361, 12, 11,
	9, 1670, 434, 1576, 4, 1548, 316, 25, 1556, 1587,
	1575, 1555, 434, 2, 1557, 0, 1563, 1569, 1558, 0,
	1505, 1568, 0, 0, 0, 0, 434, 0, 0, 0,
	1362, 0, 54, 434, 101, 0, 1586, 0, 1582, 1543,
	0, 0, 0, 1177, 0, 0, 0, 0, 0, 0,
	1590, 1249, 1250, 1251, 1253, 0, 0, 1605, 0, 0,
	434, 1560, 930, 1561, 1562, 1609, 1361, 0, 0, 446,
	0, 446, 446, 0, 1611, 0, 446, 0, 446, 0,
	1620, 0, 434, 0, 446, 0, 0, 1289, 0, 434,
	434, 0, 0, 0, 1626, 1621, 1630, 0, 0, 0,
	0, 0, 0, 1627, 1595, 1596, 1597, 1598, 434, 1531,
	1013, 1602, 1603, 0, 407, 0, 1635, 101, 1571, 0,
	1572, 0, 0, 636, 0, 0, 434, 0, 1648, 0,
	0, 0, 0, 1656, 0, 1660, 1329, 0, 0, 0,
	1658, 0, 0, 1657, 1663, 434, 0, 1345, 1346, 0,
	1347, 1348, 1611, 434, 1270, 1672, 1677, 54, 1675, 1694,
	1674, 1683, 1354, 1355, 0, 1631, 1673, 1698, 1671, 1696,
	1662, 0, 1636, 0, 0, 0, 0, 0, 0, 1579,
	0, 1629, 683, 54, 0, 1713, 1711, 0, 0, 1645,
	1585, 1379, 0, 0, 0, 0, 0, 409, 1724, 0,
	0, 0, 0, 749, 54, 617, 0, 0, 0, 54,
	54, 1727, 1713, 54, 813, 1713, 1730, 0, 0, 898,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1400, 0, 0, 0, 0, 446, 446, 0, 0,
	0, 0, 1619, 0, 0, 99, 0, 0, 296, 0,
	1622, 0, 0, 0, 99, 0, 0, 0, 0, 0,
	0, 0, 1363, 0, 0, 0, 1409, 0, 0, 0,
	1717, 1718, 0, 0, 0, 0, 329, 0, 0, 400,
	410, 1703, 1428, 0, 99, 0, 99, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 0, 0,
	0, 0, 0, 99, 1725, 0, 0, 728, 0, 0,
	0, 728, 0, 0, 0, 728, 642, 0, 645, 0,
	0, 0, 1456, 0, 659, 660, 661, 662, 663, 664,
	665, 0, 643, 644, 641, 647, 646, 656, 657, 649,
	650, 651, 652, 653, 654, 655, 648, 1458, 1459, 658,
	1460, 0, 1476, 1462, 0, 1464, 292, 0, 0, 0,
	0, 0, 0, 0, 446, 446, 0, 446, 0, 0,
	0, 0, 0, 0, 0, 446, 446, 0, 0, 0,
	0, 0, 0, 289, 0, 0, 0, 0, 0, 0,
	647, 646, 656, 657, 649, 650, 651, 652, 653, 654,
	655, 648, 0, 446, 658, 730, 0, 0, 1502, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 877,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	636, 0, 0, 446, 272, 0, 0, 0, 0, 0,
	0, 275, 0, 0, 0, 98, 0, 0, 0, 0,
	0, 283, 290, 291, 301, 0, 0, 0, 0, 0,
	0, 0, 1538, 1539, 1540, 1541, 1542, 0, 0, 0,
	1545, 1546, 0, 0, 925, 0, 0, 99, 898, 398,
	0, 0, 0, 0, 418, 0, 420, 281, 0, 0,
	0, 0, 409, 288, 0, 0, 0, 429, 0, 0,
	1471, 0, 0, 438, 0, 0, 1512, 0, 0, 952,
	953, 0, 0, 0, 0, 0, 99, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 273,
	0, 0, 0, 0, 0, 409, 0, 0, 0, 0,
	0, 728, 728, 728, 728, 728, 0, 446, 783, 446,
	0, 0, 0, 0, 0, 0, 728, 0, 0, 0,
	285, 276, 277, 0, 286, 287, 295, 1550, 728, 0,
	278, 280, 1470, 274, 294, 293, 647, 646, 656, 657,
	649, 650, 651, 652, 653, 654, 655, 648, 0, 0,
	658, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	99, 99, 0, 0, 0, 0, 0, 0, 410, 0,
	0, 446, 0, 446, 0, 0, 0, 0, 0, 0,
	0, 99, 0, 0, 0, 0, 0, 0, 0, 770,
	0, 0, 99, 0, 0, 1606, 99, 0, 0, 0,
	0, 99, 0, 0, 0, 832, 0, 0, 647, 646,
	656, 657, 649, 650, 651, 652, 653, 654, 655, 648,
	0, 0, 658, 446, 0, 0, 0, 0, 0, 0,
	0, 784, 0, 0, 0, 0, 0, 440, 0, 0,
	0, 0, 1469, 0, 0, 0, 0, 0, 1704, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 797, 800, 801, 802, 803, 804, 805, 1468, 806,
	807, 808, 809, 810, 811, 812, 608, 785, 786, 787,
	788, 764, 768, 798, 765, 771, 767, 769, 766, 0,
	772, 773, 774, 775, 776, 777, 778, 779, 780, 781,
	782, 789, 790, 791, 792, 793, 794, 795, 796, 0,
	0, 0, 0, 0, 0, 0, 0, 409, 647, 646,
	656, 657, 649, 650, 651, 652, 653, 654, 655, 648,
	0, 0, 658, 0, 0, 0, 0, 99, 0, 99,
	0, 0, 99, 0, 647, 646, 656, 657, 649, 650,
	651, 652, 653, 654, 655, 648, 0, 0, 658, 722,
	799, 731, 0, 0, 0, 0, 446, 0, 0, 0,
	0, 0, 0, 99, 0, 0, 0, 0, 99, 0,
	0, 756, 0, 0, 0, 1328, 0, 0, 0, 0,
	0, 0, 820, 0, 0, 99, 398, 0, 0, 0,
	0, 828, 0, 0, 832, 647, 646, 656, 657, 649,
	650, 651, 652, 653, 654, 655, 648, 0, 0, 658,
	0, 0, 0, 0, 1269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 446, 0, 446, 446, 0,
	0, 0, 0, 0, 1142, 0, 0, 0, 0, 0,
	0, 329, 329, 0, 0, 0, 329, 329, 329, 329,
	0, 728, 0, 410, 647, 646, 656, 657, 649, 650,
	651, 652, 653, 654, 655, 648, 0, 0, 658, 0,
	0, 0, 329, 329, 329, 329, 0, 99, 0, 0,
	446, 0, 0, 0, 0, 99, 987, 0, 0, 99,
	99, 0, 0, 99, 995, 832, 410, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 832, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	409, 0, 0, 1365, 1367, 0, 0, 840, 0, 842,
	0, 0, 843, 0, 0, 0, 0, 0, 0, 0,
	0, 1367, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 446, 446, 856, 446, 1394, 0, 0, 863, 0,
	0, 99, 0, 0, 0, 0, 0, 0, 99, 99,
	0, 0, 99, 0, 0, 882, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 0, 1090, 1091, 0, 0, 0, 0,
	99, 0, 0, 0, 99, 99, 99, 99, 99, 0,
	0, 0, 0, 0, 832, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1438, 0, 0, 0, 1442, 0, 0, 0, 0, 1445,
	0, 0, 1450, 1451, 1452, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 961, 0, 0,
	0, 0, 329, 0, 0, 0, 0, 0, 0, 0,
	992, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 410, 99,
	99, 99, 99, 99, 0, 0, 1496, 1496, 1496, 0,
	0, 1194, 0, 0, 99, 446, 0, 0, 987, 0,
	0, 0, 0, 1496, 0, 0, 99, 0, 0, 0,
	26, 27, 55, 29, 30, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 60,
	0, 1071, 0, 31, 51, 52, 0, 0, 1078, 1079,
	0, 0, 1080, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 446, 0, 0, 0, 42, 0, 0, 0,
	61, 0, 1087, 0, 0, 0, 0, 0, 0, 0,
	1095, 0, 0, 0, 1114, 1115, 1116, 1117, 1118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1552,
	1553, 0, 1554, 0, 0, 1496, 0, 99, 0, 0,
	0, 0, 0, 0, 0, 0, 1394, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1394, 0, 0, 0,
	0, 33, 57, 38, 37, 40, 0, 53, 0, 0,
	1584, 0, 0, 0, 0, 0, 0, 1496, 0, 0,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 41, 59, 58, 0, 0, 49, 50,
	39, 0, 0, 329, 1610, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 43, 44, 0, 45, 46, 1394, 0, 0, 0,
	0, 410, 0, 446, 446, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 409,
	0, 0, 1637, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1647, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1394,
	0, 0, 0, 0, 0, 0, 0, 1496, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 56, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 0, 0, 0, 0, 0,
	0, 0, 99, 0, 0, 0, 0, 1278, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	0, 0, 1321, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1420, 0, 0, 0, 0, 0,
	0, 0, 1424, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 987, 0,
	987, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1441, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	410, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 1513,
	554, 542, 0, 499, 557, 472, 489, 565, 490, 493,
	530, 457, 512, 185, 487, 0, 476, 452, 482, 453,
	474, 501, 131, 471, 544, 515, 556, 157, 555, 505,
	0, 563, 159, 521, 0, 231, 173, 0, 0, 503,
	546, 510, 539, 498, 531, 462, 520, 558, 488, 528,
	559, 0, 0, 0, 433, 0, 1014, 1015, 0, 0,
	0, 0, 0, 121, 0, 525, 553, 484, 527, 529,
	451, 522, 0, 455, 458, 564, 549, 479, 480, 1219,
	0, 0, 0, 0, 0, 0, 502, 511, 536, 496,
	0, 0, 0, 0, 0, 0, 0, 0, 477, 0,
	519, 0, 0, 0, 459, 456, 0, 0, 500, 1591,
	0, 0, 461, 0, 478, 537, 0, 448, 139, 0,
	0, 541, 548, 497, 0, 260, 552, 495, 494, 204,
	0, 235, 142, 156, 117, 103, 113, 0, 141, 182,
	211, 215, 485, 449, 545, 475, 483, 125, 481, 213,
	192, 251, 0, 518, 194, 212, 160, 241, 205, 250,
	261, 262, 238, 258, 266, 228, 0, 0, 0, 0,
	0, 0, 106, 237, 249, 122, 223, 108, 247, 234,
	171, 151, 152, 107, 0, 209, 130, 137, 127, 184,
	0, 0, 1639, 244, 245, 126, 269, 114, 257, 110,
	115, 256, 178, 0, 0, 0, 240, 248, 172, 165,
	0, 109, 246, 170, 164, 155, 134, 144, 202, 162,
	203, 145, 175, 174, 176, 0, 454, 0, 232, 254,
	270, 119, 470, 0, 239, 264, 265, 0, 0, 120,
	138, 133, 201, 177, 116, 147, 229, 154, 161, 208,
	268, 191, 214, 123, 253, 230, 466, 469, 464, 465,
	513, 514, 560, 561, 562, 538, 460, 0, 467, 468,
	0, 543, 550, 551, 517, 102, 111, 158, 267, 206,
	136, 255, 450, 463, 129, 473, 0, 0, 486, 491,
	492, 504, 506, 507, 508, 509, 516, 523, 524, 526,
	532, 533, 534, 535, 540, 547, 566, 104, 105, 112,
	118, 124, 128, 132, 135, 140, 143, 146, 148, 149,
	150, 153, 163, 166, 167, 168, 169, 179, 180, 181,
	183, 186, 187, 188, 189, 190, 193, 195, 196, 197,
	198, 199, 200, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	252, 259, 263, 554, 542, 0, 499, 557, 472, 489,
	565, 490, 493, 530, 457, 512, 185, 487, 0, 476,
	452, 482, 453, 474, 501, 131, 471, 544, 515, 556,
	157, 555, 505, 0, 563, 159, 521, 0, 231, 173,
	0, 0, 503, 546, 510, 539, 498, 531, 462, 520,
	558, 488, 528, 559, 0, 0, 0, 433, 0, 1014,
	1015, 0, 0, 0, 0, 0, 121, 0, 525, 553,
	484, 527, 529, 451, 522, 0, 455, 458, 564, 549,
	479, 480, 0, 0, 0, 0, 0, 0, 0, 502,
	511, 536, 496, 0, 0, 0, 0, 0, 0, 0,
	0, 477, 0, 519, 0, 0, 0, 459, 456, 0,
	0, 500, 0, 0, 0, 461, 0, 478, 537, 0,
	448, 139, 0, 0, 541, 548, 497, 0, 260, 552,
	495, 494, 204, 0, 235, 142, 156, 117, 103, 113,
	0, 141, 182, 211, 215, 485, 449, 545, 475, 483,
	125, 481, 213, 192, 251, 0, 518, 194, 212, 160,
	241, 205, 250, 261, 262, 238, 258, 266, 228, 0,
	0, 0, 0, 0, 0, 106, 237, 249, 122, 223,
	108, 247, 234, 171, 151, 152, 107, 0, 209, 130,
	137, 127, 184, 0, 0, 0, 244, 245, 126, 269,
	114, 257, 110, 115, 256, 178, 0, 0, 0, 240,
	248, 172, 165, 0, 109, 246, 170, 164, 155, 134,
	144, 202, 162, 203, 145, 175, 174, 176, 0, 454,
	0, 232, 254, 270, 119, 470, 0, 239, 264, 265,
	0, 0, 120, 138, 133, 201, 177, 116, 147, 229,
	154, 161, 208, 268, 191, 214, 123, 253, 230, 466,
	469, 464, 465, 513, 514, 560, 561, 562, 538, 460,
	0, 467, 468, 0, 543, 550, 551, 517, 102, 111,
	158, 267, 206, 136, 255, 450, 463, 129, 473, 0,
	0, 486, 491, 492, 504, 506, 507, 508, 509, 516,
	523, 524, 526, 532, 533, 534, 535, 540, 547, 566,
	104, 105, 112, 118, 124, 128, 132, 135, 140, 143,
	146, 148, 149, 150, 153, 163, 166, 167, 168, 169,
	179, 180, 181, 183, 186, 187, 188, 189, 190, 193,
	195, 196, 197, 198, 199, 200, 207, 210, 216, 217,
	218, 219, 220, 221, 222, 224, 225, 226, 227, 233,
	236, 242, 243, 252, 259, 263, 554, 542, 0, 499,
	557, 472, 489, 565, 490, 493, 530, 457, 512, 185,
	487, 0, 476, 452, 482, 453, 474, 501, 131, 471,
	544, 515, 556, 157, 555, 505, 0, 563, 159, 521,
	0, 231, 173, 0, 0, 503, 546, 510, 539, 498,
	531, 462, 520, 558, 488, 528, 559, 0, 0, 0,
	433, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	0, 525, 553, 484, 527, 529, 451, 522, 0, 455,
	458, 564, 549, 479, 480, 0, 0, 0, 0, 0,
	0, 0, 502, 511, 536, 496, 0, 0, 0, 0,
	0, 0, 1324, 0, 477, 0, 519, 0, 0, 0,
	459, 456, 0, 0, 500, 0, 0, 0, 461, 0,
	478, 537, 0, 448, 139, 0, 0, 541, 548, 497,
	0, 260, 552, 495, 494, 204, 0, 235, 142, 156,
	117, 103, 113, 0, 141, 182, 211, 215, 485, 449,
	545, 475, 483, 125, 481, 213, 192, 251, 0, 518,
	194, 212, 160, 241, 205, 250, 261, 262, 238, 258,
	266, 228, 0, 0, 0, 0, 0, 0, 106, 237,
	249, 122, 223, 108, 247, 234, 171, 151, 152, 107,
	0, 209, 130, 137, 127, 184, 0, 0, 0, 244,
	245, 126, 269, 114, 257, 110, 115, 256, 178, 0,
	0, 0, 240, 248, 172, 165, 0, 109, 246, 170,
	164, 155, 134, 144, 202, 162, 203, 145, 175, 174,
	176, 0, 454, 0, 232, 254, 270, 119, 470, 0,
	239, 264, 265, 0, 0, 120, 138, 133, 201, 177,
	116, 147, 229, 154, 161, 208, 268, 191, 214, 123,
	253, 230, 466, 469, 464, 465, 513, 514, 560, 561,
	562, 538, 460, 0, 467, 468, 0, 543, 550, 551,
	517, 102, 111, 158, 267, 206, 136, 255, 450, 463,
	129, 473, 0, 0, 486, 491, 492, 504, 506, 507,
	508, 509, 516, 523, 524, 526, 532, 533, 534, 535,
	540, 547, 566, 104, 105, 112, 118, 124, 128, 132,
	135, 140, 143, 146, 148, 149, 150, 153, 163, 166,
	167, 168, 169, 179, 180, 181, 183, 186, 187, 188,
	189, 190, 193, 195, 196, 197, 198, 199, 200, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 252, 259, 263, 554,
	542, 0, 499, 557, 472, 489, 565, 490, 493, 530,
	457, 512, 185, 487, 0, 476, 452, 482, 453, 474,
	501, 131, 471, 544, 515, 556, 157, 555, 505, 0,
	563, 159, 521, 0, 231, 173, 0, 0, 503, 546,
	510, 539, 498, 531, 462, 520, 558, 488, 528, 559,
	61, 0, 0, 433, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 525, 553, 484, 527, 529, 451,
	522, 0, 455, 458, 564, 549, 479, 480, 0, 0,
	0, 0, 0, 0, 0, 502, 511, 536, 496, 0,
	0, 0, 0, 0, 0, 0, 0, 477, 0, 519,
	0, 0, 0, 459, 456, 0, 0, 500, 0, 0,
	0, 461, 0, 478, 537, 0, 448, 139, 0, 0,
	541, 548, 497, 0, 260, 552, 495, 494, 204, 0,
	235, 142, 156, 117, 103, 113, 0, 141, 182, 211,
	215, 485, 449, 545, 475, 483, 125, 481, 213, 192,
	251, 0, 518, 194, 212, 160, 241, 205, 250, 261,
	262, 238, 258, 266, 228, 0, 0, 0, 0, 0,
	0, 106, 237, 249, 122, 223, 108, 247, 234, 171,
	151, 152, 107, 0, 209, 130, 137, 127, 184, 0,
	0, 0, 244, 245, 126, 269, 114, 257, 110, 115,
	256, 178, 0, 0, 0, 240, 248, 172, 165, 0,
	109, 246, 170, 164, 155, 134, 144, 202, 162, 203,
	145, 175, 174, 176, 0, 454, 0, 232, 254, 270,
	119, 470, 0, 239, 264, 265, 0, 0, 120, 138,
	133, 201, 177, 116, 147, 229, 154, 161, 208, 268,
	191, 214, 123, 253, 230, 466, 469, 464, 465, 513,
	514, 560, 561, 562, 538, 460, 0, 467, 468, 0,
	543, 550, 551, 517, 102, 111, 158, 267, 206, 136,
	255, 450, 463, 129, 473, 0, 0, 486, 491, 492,
	504, 506, 507, 508, 509, 516, 523, 524, 526, 532,
	533, 534, 535, 540, 547, 566, 104, 105, 112, 118,
	124, 128, 132, 135, 140, 143, 146, 148, 149, 150,
	153, 163, 166, 167, 168, 169, 179, 180, 181, 183,
	186, 187, 188, 189, 190, 193, 195, 196, 197, 198,
	199, 200, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 224, 225, 226, 227, 233, 236, 242, 243, 252,
	259, 263, 554, 542, 0, 499, 557, 472, 489, 565,
	490, 493, 530, 457, 512, 185, 487, 0, 476, 452,
	482, 453, 474, 501, 131, 471, 544, 515, 556, 157,
	555, 505, 0, 563, 159, 521, 0, 231, 173, 0,
	0, 503, 546, 510, 539, 498, 531, 462, 520, 558,
	488, 528, 559, 0, 0, 0, 100, 0, 0, 0,
	0, 0, 0, 0, 0, 121, 0, 525, 553, 484,
	527, 529, 451, 522, 0, 455, 458, 564, 549, 479,
	480, 0, 0, 0, 0, 0, 0, 0, 502, 511,
	536, 496, 0, 0, 0, 0, 0, 0, 996, 0,
	477, 0, 519, 0, 0, 0, 459, 456, 0, 0,
	500, 0, 0, 0, 461, 0, 478, 537, 0, 448,
	139, 0, 0, 541, 548, 497, 0, 260, 552, 495,
	494, 204, 0, 235, 142, 156, 117, 103, 113, 0,
	141, 182, 211, 215, 485, 449, 545, 475, 483, 125,
	481, 213, 192, 251, 0, 518, 194, 212, 160, 241,
	205, 250, 261, 262, 238, 258, 266, 228, 0, 0,
	0, 0, 0, 0, 106, 237, 249, 122, 223, 108,
	247, 234, 171, 151, 152, 107, 0, 209, 130, 137,
	127, 184, 0, 0, 0, 244, 245, 126, 269, 114,
	257, 110, 115, 256, 178, 0, 0, 0, 240, 248,
	172, 165, 0, 109, 246, 170, 164, 155, 134, 144,
	202, 162, 203, 145, 175, 174, 176, 0, 454, 0,
	232, 254, 270, 119, 470, 0, 239, 264, 265, 0,
	0, 120, 138, 133, 201, 177, 116, 147, 229, 154,
	161, 208, 268, 191, 214, 123, 253, 230, 466, 469,
	464, 465, 513, 514, 560, 561, 562, 538, 460, 0,
	467, 468, 0, 543, 550, 551, 517, 102, 111, 158,
	267, 206, 136, 255, 450, 463, 129, 473, 0, 0,
	486, 491, 492, 504, 506, 507, 508, 509, 516, 523,
	524, 526, 532, 533, 534, 535, 540, 547, 566, 104,
	105, 112, 118, 124, 128, 132, 135, 140, 143, 146,
	148, 149, 150, 153, 163, 166, 167, 168, 169, 179,
	180, 181, 183, 186, 187, 188, 189, 190, 193, 195,
	196, 197, 198, 199, 200, 207, 210, 216, 217, 218,
	219, 220, 221, 222, 224, 225, 226, 227, 233, 236,
	242, 243, 252, 259, 263, 554, 542, 0, 499, 557,
	472, 489, 565, 490, 493, 530, 457, 512, 185, 487,
	0, 476, 452, 482, 453, 474, 501, 131, 471, 544,
	515, 556, 157, 555, 505, 0, 563, 159, 521, 0,
	231, 173, 0, 0, 503, 546, 510, 539, 498, 531,
	462, 520, 558, 488, 528, 559, 0, 0, 0, 334,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 0,
	525, 553, 484, 527, 529, 451, 522, 0, 455, 458,
	564, 549, 479, 480, 0, 0, 0, 0, 0, 0,
	0, 502, 511, 536, 496, 0, 0, 0, 0, 0,
	0, 891, 0, 477, 0, 519, 0, 0, 0, 459,
	456, 0, 0, 500, 0, 0, 0, 461, 0, 478,
	537, 0, 448, 139, 0, 0, 541, 548, 497, 0,
	260, 552, 495, 494, 204, 0, 235, 142, 156, 117,
	103, 113, 0, 141, 182, 211, 215, 485, 449, 545,
	475, 483, 125, 481, 213, 192, 251, 0, 518, 194,
	212, 160, 241, 205, 250, 261, 262, 238, 258, 266,
	228, 0, 0, 0, 0, 0, 0, 106, 237, 249,
	122, 223, 108, 247, 234, 171, 151, 152, 107, 0,
	209, 130, 137, 127, 184, 0, 0, 0, 244, 245,
	126, 269, 114, 257, 110, 115, 256, 178, 0, 0,
	0, 240, 248, 172, 165, 0, 109, 246, 170, 164,
	155, 134, 144, 202, 162, 203, 145, 175, 174, 176,
	0, 454, 0, 232, 254, 270, 119, 470, 0, 239,
	264, 265, 0, 0, 120, 138, 133, 201, 177, 116,
	147, 229, 154, 161, 208, 268, 191, 214, 123, 253,
	230, 466, 469, 464, 465, 513, 514, 560, 561, 562,
	538, 460, 0, 467, 468, 0, 543, 550, 551, 517,
	102, 111, 158, 267, 206, 136, 255, 450, 463, 129,
	473, 0, 0, 486, 491, 492, 504, 506, 507, 508,
	509, 516, 523, 524, 526, 532, 533, 534, 535, 540,
	547, 566, 104, 105, 112, 118, 124, 128, 132, 135,
	140, 143, 146, 148, 149, 150, 153, 163, 166, 167,
	168, 169, 179, 180, 181, 183, 186, 187, 188, 189,
	190, 193, 195, 196, 197, 198, 199, 200, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 224, 225, 226,
	227, 233, 236, 242, 243, 252, 259, 263, 554, 542,
	0, 499, 557, 472, 489, 565, 490, 493, 530, 457,
	512, 185, 487, 0, 476, 452, 482, 453, 474, 501,
	131, 471, 544, 515, 556, 157, 555, 505, 0, 563,
	159, 521, 0, 231, 173, 0, 0, 503, 546, 510,
	539, 498, 531, 462, 520, 558, 488, 528, 559, 0,
	0, 0, 433, 0, 0, 0, 0, 0, 0, 0,
	0, 121, 0, 525, 553, 484, 527, 529, 451, 522,
	0, 455, 458, 564, 549, 479, 480, 0, 0, 0,
	0, 0, 0, 0, 502, 511, 536, 496, 0, 0,
	0, 0, 0, 0, 0, 0, 477, 0, 519, 0,
	0, 0, 459, 456, 0, 0, 500, 0, 0, 0,
	461, 0, 478, 537, 0, 448, 139, 0, 0, 541,
	548, 497, 0, 260, 552, 495, 494, 204, 0, 235,
	142, 156, 117, 103, 113, 0, 141, 182, 211, 215,
	485, 449, 545, 475, 483, 125, 481, 213, 192, 251,
	0, 518, 194, 212, 160, 241, 205, 250, 261, 262,
	238, 258, 266, 228, 0, 0, 0, 0, 0, 0,
	106, 237, 249, 122, 223, 108, 247, 234, 171, 151,
	152, 107, 0, 209, 130, 137, 127, 184, 0, 0,
	0, 244, 245, 126, 269, 114, 257, 110, 115, 256,
	178, 0, 0, 0, 240, 248, 172, 165, 0, 109,
	246, 170, 164, 155, 134, 144, 202, 162, 203, 145,
	175, 174, 176, 0, 454, 0, 232, 254, 270, 119,
	470, 0, 239, 264, 265, 0, 0, 120, 138, 133,
	201, 177, 116, 147, 229, 154, 161, 208, 268, 191,
	214, 123, 253, 230, 466, 469, 464, 465, 513, 514,
	560, 561, 562, 538, 460, 0, 467, 468, 0, 543,
	550, 551, 517, 102, 111, 158, 267, 206, 136, 255,
	450, 463, 129, 473, 0, 0, 486, 491, 492, 504,
	506, 507, 508, 509, 516, 523, 524, 526, 532, 533,
	534, 535, 540, 547, 566, 104, 105, 112, 118, 124,
	128, 132, 135, 140, 143, 146, 148, 149, 150, 153,
	163, 166, 167, 168, 169, 179, 180, 181, 183, 186,
	187, 188, 189, 190, 193, 195, 196, 197, 198, 199,
	200, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	224, 225, 226, 227, 233, 236, 242, 243, 252, 259,
	263, 554, 542, 0, 499, 557, 472, 489, 565, 490,
	493, 530, 457, 512, 185, 487, 0, 476, 452, 482,
	453, 474, 501, 131, 471, 544, 515, 556, 157, 555,
	505, 0, 563, 159, 521, 0, 231, 173, 0, 0,
	503, 546, 510, 539, 498, 531, 462, 520, 558, 488,
	528, 559, 0, 0, 0, 334, 0, 0, 0, 0,
	0, 0, 0, 0, 121, 0, 525, 553, 484, 527,
	529, 451, 522, 0, 455, 458, 564, 549, 479, 480,
	0, 0, 0, 0, 0, 0, 0, 502, 511, 536,
	496, 0, 0, 0, 0, 0, 0, 0, 0, 477,
	0, 519, 0, 0, 0, 459, 456, 0, 0, 500,
	0, 0, 0, 461, 0, 478, 537, 0, 448, 139,
	0, 0, 541, 548, 497, 0, 260, 552, 495, 494,
	204, 0, 235, 142, 156, 117, 103, 113, 0, 141,
	182, 211, 215, 485, 449, 545, 475, 483, 125, 481,
	213, 192, 251, 0, 518, 194, 212, 160, 241, 205,
	250, 261, 262, 238, 258, 266, 228, 0, 0, 0,
	0, 0, 0, 106, 237, 249, 122, 223, 108, 247,
	234, 171, 151, 152, 107, 0, 209, 130, 137, 127,
	184, 0, 0, 0, 244, 245, 126, 269, 114, 257,
	110, 115, 256, 178, 0, 0, 0, 240, 248, 172,
	165, 0, 109, 246, 170, 164, 155, 134, 144, 202,
	162, 203, 145, 175, 174, 176, 0, 454, 0, 232,
	254, 270, 119, 470, 0, 239, 264, 265, 0, 0,
	120, 138, 133, 201, 177, 116, 147, 229, 154, 161,
	208, 268, 191, 214, 123, 253, 230, 466, 469, 464,
	465, 513, 514, 560, 561, 562, 538, 460, 0, 467,
	468, 0, 543, 550, 551, 517, 102, 111, 158, 267,
	206, 136, 255, 450, 463, 129, 473, 0, 0, 486,
	491, 492, 504, 506, 507, 508, 509, 516, 523, 524,
	526, 532, 533, 534, 535, 540, 547, 566, 104, 105,
	112, 118, 124, 128, 132, 135, 140, 143, 146, 148,
	149, 150, 153, 163, 166, 167, 168, 169, 179, 180,
	181, 183, 186, 187, 188, 189, 190, 193, 195, 196,
	197, 198, 199, 200, 207, 210, 216, 217, 218, 219,
	220, 221, 222, 224, 225, 226, 227, 233, 236, 242,
	243, 252, 259, 263, 554, 542, 0, 499, 557, 472,
	489, 565, 490, 493, 530, 457, 512, 185, 487, 0,
	476, 452, 482, 453, 474, 501, 131, 471, 544, 515,
	556, 157, 555, 505, 0, 563, 159, 521, 0, 231,
	173, 0, 0, 503, 546, 510, 539, 498, 531, 462,
	520, 558, 488, 528, 559, 0, 0, 0, 100, 0,
	0, 0, 0, 0, 0, 0, 0, 121, 0, 525,
	553, 484, 527, 529, 451, 522, 0, 455, 458, 564,
	549, 479, 480, 0, 0, 0, 0, 0, 0, 0,
	502, 511, 536, 496, 0, 0, 0, 0, 0, 0,
	0, 0, 477, 0, 519, 0, 0, 0, 459, 456,
	0, 0, 500, 0, 0, 0, 461, 0, 478, 537,
	0, 448, 139, 0, 0, 541, 548, 497, 0, 260,
	552, 495, 494, 204, 0, 235, 142, 156, 117, 103,
	113, 0, 141, 182, 211, 215, 485, 449, 545, 475,
	483, 125, 481, 213, 192, 251, 0, 518, 194, 212,
	160, 241, 205, 250, 261, 262, 238, 258, 266, 228,
	0, 0, 0, 0, 0, 0, 106, 237, 249, 122,
	223, 108, 247, 234, 171, 151, 152, 107, 0, 209,
	130, 137, 127, 184, 0, 0, 0, 244, 245, 126,
	269, 114, 257, 110, 115, 256, 178, 0, 0, 0,
	240, 248, 172, 165, 0, 109, 246, 170, 164, 155,
	134, 144, 202, 162, 203, 145, 175, 174, 176, 0,
	454, 0, 232, 254, 270, 119, 470, 0, 239, 264,
	265, 0, 0, 120, 138, 133, 201, 177, 116, 147,
	229, 154, 161, 208, 268, 191, 214, 123, 253, 230,
	466, 469, 464, 465, 513, 514, 560, 561, 562, 538,
	460, 0, 467, 468, 0, 543, 550, 551, 517, 102,
	111, 158, 267, 206, 136, 255, 450, 463, 129, 473,
	0, 0, 486, 491, 492, 504, 506, 507, 508, 509,
	516, 523, 524, 526, 532, 533, 534, 535, 540, 547,
	566, 104, 105, 112, 118, 124, 128, 132, 135, 140,
	143, 146, 148, 149, 150, 153, 163, 166, 167, 168,
	169, 179, 180, 181, 183, 186, 187, 188, 189, 190,
	193, 195, 196, 197, 198, 199, 200, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 224, 225, 226, 227,
	233, 236, 242, 243, 252, 259, 263, 185, 0, 0,
	0, 0, 336, 0, 0, 0, 131, 333, 0, 0,
	0, 157, 0, 0, 0, 378, 159, 0, 0, 231,
	173, 0, 0, 0, 0, 367, 368, 0, 0, 0,
	0, 0, 0, 1003, 0, 61, 0, 0, 334, 355,
	354, 357, 358, 359, 360, 0, 0, 121, 356, 361,
	362, 363, 1004, 0, 0, 331, 348, 0, 377, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 345, 346,
	0, 0, 0, 0, 391, 0, 347, 0, 0, 342,
	343, 344, 349, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 0, 369, 0, 0, 0, 260,
	0, 0, 389, 204, 0, 235, 142, 156, 117, 103,
	113, 0, 141, 182, 211, 215, 375, 0, 0, 0,
	0, 125, 0, 213, 192, 251, 0, 0, 194, 212,
	160, 241, 205, 250, 261, 262, 238, 258, 266, 228,
	0, 0, 0, 0, 0, 0, 106, 237, 249, 122,
	223, 108, 247, 234, 171, 151, 152, 107, 0, 209,
	130, 137, 127, 184, 0, 0, 0, 244, 245, 126,
	269, 114, 257, 110, 115, 256, 178, 0, 0, 0,
	240, 248, 172, 165, 0, 109, 246, 170, 164, 155,
	134, 144, 202, 162, 203, 145, 175, 174, 176, 0,
	0, 0, 232, 254, 270, 119, 0, 0, 239, 264,
	265, 0, 0, 120, 138, 133, 201, 177, 116, 147,
	229, 154, 161, 208, 268, 191, 214, 123, 253, 230,
	379, 390, 385, 386, 383, 384, 382, 381, 380, 392,
	370, 371, 372, 373, 376, 0, 387, 388, 374, 102,
	111, 158, 267, 206, 136, 255, 0, 0, 129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 105, 112, 118, 124, 128, 132, 135, 140,
	143, 146, 148, 149, 150, 153, 163, 166, 167, 168,
	169, 179, 180, 181, 183, 186, 187, 188, 189, 190,
	193, 195, 196, 197, 198, 199, 200, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 224, 225, 226, 227,
	233, 236, 242, 243, 252, 259, 263, 185, 0, 0,
	0, 0, 336, 0, 0, 0, 131, 333, 0, 0,
	0, 157, 0, 0, 0, 378, 159, 0, 0, 231,
	173, 0, 0, 0, 0, 367, 368, 0, 0, 0,
	0, 0, 0, 0, 0, 61, 0, 606, 334, 355,
	354, 357, 358, 359, 360, 0, 0, 121, 356, 361,
	362, 363, 0, 0, 0, 331, 348, 0, 377, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 345, 346,
	0, 0, 0, 0, 391, 0, 347, 0, 0, 342,
	343, 344, 349, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 0, 369, 0, 0, 0, 260,
	0, 0, 389, 204, 0, 235, 142, 156, 117, 103,
	113, 0, 141, 182, 211, 215, 375, 0, 0, 0,
	0, 125, 0, 213, 192, 251, 0, 0, 194, 212,
	160, 241, 205, 250, 261, 262, 238, 258, 266, 228,
	0, 0, 0, 0, 0, 0, 106, 237, 249, 122,
	223, 108, 247, 234, 171, 151, 152, 107, 0, 209,
	130, 137, 127, 184, 0, 0, 0, 244, 245, 126,
	269, 114, 257, 110, 115, 256, 178, 0, 0, 0,
	240, 248, 172, 165, 0, 109, 246, 170, 164, 155,
	134, 144, 202, 162, 203, 145, 175, 174, 176, 0,
	0, 0, 232, 254, 270, 119, 0, 0, 239, 264,
	265, 0, 0, 120, 138, 133, 201, 177, 116, 147,
	229, 154, 161, 208, 268, 191, 214, 123, 253, 230,
	379, 390, 385, 386, 383, 384, 382, 381, 380, 392,
	370, 371, 372, 373, 376, 0, 387, 388, 374, 102,
	111, 158, 267, 206, 136, 255, 0, 0, 129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 105, 112, 118, 124, 128, 132, 135, 140,
	143, 146, 148, 149, 150, 153, 163, 166, 167, 168,
	169, 179, 180, 181, 183, 186, 187, 188, 189, 190,
	193, 195, 196, 197, 198, 199, 200, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 224, 225, 226, 227,
	233, 236, 242, 243, 252, 259, 263, 185, 0, 0,
	0, 0, 336, 0, 0, 0, 131, 333, 0, 0,
	0, 157, 0, 0, 0, 378, 159, 0, 0, 231,
	173, 0, 0, 0, 0, 367, 368, 0, 0, 0,
	0, 0, 0, 0, 0, 61, 0, 0, 334, 355,
	354, 357, 358, 359, 360, 0, 0, 121, 356, 361,
	362, 363, 0, 0, 0, 331, 348, 0, 377, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 345, 346,
	327, 0, 0, 0, 391, 0, 347, 0, 0, 342,
	343, 344, 349, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 0, 369, 0, 0, 0, 260,
	0, 0, 389, 204, 0, 235, 142, 156, 117, 103,
	113, 0, 141, 182, 211, 215, 375, 0, 0, 0,
	0, 125, 0, 213, 192, 251, 0, 0, 194, 212,
	160, 241, 205, 250, 261, 262, 238, 258, 266, 228,
	0, 0, 0, 0, 0, 0, 106, 237, 249, 122,
	223, 108, 247, 234, 171, 151, 152, 107, 0, 209,
	130, 137, 127, 184, 0, 0, 0, 244, 245, 126,
	269, 114, 257, 110, 115, 256, 178, 0, 0, 0,
	240, 248, 172, 165, 0, 109, 246, 170, 164, 155,
	134, 144, 202, 162, 203, 145, 175, 174, 176, 0,
	0, 0, 232, 254, 270, 119, 0, 0, 239, 264,
	265, 0, 0, 120, 138, 133, 201, 177, 116, 147,
	229, 154, 161, 208, 268, 191, 214, 123, 253, 230,
	379, 390, 385, 386, 383, 384, 382, 381, 380, 392,
	370, 371, 372, 373, 376, 0, 387, 388, 374, 102,
	111, 158, 267, 206, 136, 255, 0, 0, 129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 105, 112, 118, 124, 128, 132, 135, 140,
	143, 146, 148, 149, 150, 153, 163, 166, 167, 168,
	169, 179, 180, 181, 183, 186, 187, 188, 189, 190,
	193, 195, 196, 197, 198, 199, 200, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 224, 225, 226, 227,
	233, 236, 242, 243, 252, 259, 263, 185, 0, 0,
	0, 0, 336, 0, 0, 0, 131, 333, 0, 0,
	0, 157, 0, 0, 0, 378, 159, 0, 0, 231,
	173, 0, 0, 0, 0, 367, 368, 0, 0, 0,
	0, 0, 0, 0, 0, 61, 0, 0, 334, 355,
	941, 357, 358, 359, 360, 0, 0, 121, 356, 361,
	362, 363, 0, 0, 0, 331, 348, 0, 377, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 345, 346,
	327, 0, 0, 0, 391, 0, 347, 0, 0, 342,
	343, 344, 349, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 0, 369, 0, 0, 0, 260,
	0, 0, 389, 204, 0, 235, 142, 156, 117, 103,
	113, 0, 141, 182, 211, 215, 375, 0, 0, 0,
	0, 125, 0, 213, 192, 251, 0, 0, 194, 212,
	160, 241, 205, 250, 261, 262, 238, 258, 266, 228,
	0, 0, 0, 0, 0, 0, 106, 237, 249, 122,
	223, 108, 247, 234, 171, 151, 152, 107, 0, 209,
	130, 137, 127, 184, 0, 0, 0, 244, 245, 126,
	269, 114, 257, 110, 115, 256, 178, 0, 0, 0,
	240, 248, 172, 165, 0, 109, 246, 170, 164, 155,
	134, 144, 202, 162, 203, 145, 175, 174, 176, 0,
	0, 0, 232, 254, 270, 119, 0, 0, 239, 264,
	265, 0, 0, 120, 138, 133, 201, 177, 116, 147,
	229, 154, 161, 208, 268, 191, 214, 123, 253, 230,
	379, 390, 385, 386, 383, 384, 382, 381, 380, 392,
	370, 371, 372, 373, 376, 0, 387, 388, 374, 102,
	111, 158, 267, 206, 136, 255, 0, 0, 129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 105, 112, 118, 124, 128, 132, 135, 140,
	143, 146, 148, 149, 150, 153, 163, 166, 167, 168,
	169, 179, 180, 181, 183, 186, 187, 188, 189, 190,
	193, 195, 196, 197, 198, 199, 200, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 224, 225, 226, 227,
	233, 236, 242, 243, 252, 259, 263, 185, 0, 0,
	0, 0, 336, 0, 0, 0, 131, 333, 0, 0,
	0, 157, 0, 0, 0, 378, 159, 0, 0, 231,
	173, 0, 0, 0, 0, 367, 368, 0, 0, 0,
	0, 0, 0, 0, 0, 61, 0, 0, 334, 355,
	938, 357, 358, 359, 360, 0, 0, 121, 356, 361,
	362, 363, 0, 0, 0, 331, 348, 0, 377, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 345, 346,
	327, 0, 0, 0, 391, 0, 347, 0, 0, 342,
	343, 344, 349, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 0, 369, 0, 0, 0, 260,
	0, 0, 389, 204, 0, 235, 142, 156, 117, 103,
	113, 0, 141, 182, 211, 215, 375, 0, 0, 0,
	0, 125, 0, 213, 192, 251, 0, 0, 194, 212,
	160, 241, 205, 250, 261, 262, 238, 258, 266, 228,
	0, 0, 0, 0, 0, 0, 106, 237, 249, 122,
	223, 108, 247, 234, 171, 151, 152, 107, 0, 209,
	130, 137, 127, 184, 0, 0, 0, 244, 245, 126,
	269, 114, 257, 110, 115, 256, 178, 0, 0, 0,
	240, 248, 172, 165, 0, 109, 246, 170, 164, 155,
	134, 144, 202, 162, 203, 145, 175, 174, 176, 0,
	0, 0, 232, 254, 270, 119, 0, 0, 239, 264,
	265, 0, 0, 120, 138, 133, 201, 177, 116, 147,
	229, 154, 161, 208, 268, 191, 214, 123, 253, 230,
	379, 390, 385, 386, 383, 384, 382, 381, 380, 392,
	370, 371, 372, 373, 376, 0, 387, 388, 374, 102,
	111, 158, 267, 206, 136, 255, 0, 0, 129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 105, 112, 118, 124, 128, 132, 135, 140,
	143, 146, 148, 149, 150, 153, 163, 166, 167, 168,
	169, 179, 180, 181, 183, 186, 187, 188, 189, 190,
	193, 195, 196, 197, 198, 199, 200, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 224, 225, 226, 227,
	233, 236, 242, 243, 252, 259, 263, 26, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	0, 0, 0, 0, 336, 0, 0, 0, 131, 333,
	0, 0, 0, 157, 0, 0, 0, 378, 159, 0,
	0, 231, 173, 0, 0, 0, 0, 367, 368, 0,
	0, 0, 0, 0, 0, 0, 0, 61, 0, 0,
	334, 355, 354, 357, 358, 359, 360, 0, 0, 121,
	356, 361, 362, 363, 0, 0, 0, 331, 348, 0,
	377, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	345, 346, 0, 0, 0, 0, 391, 0, 347, 0,
	0, 342, 343, 344, 349, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 0, 0, 369, 0, 0,
	0, 260, 0, 0, 389, 204, 0, 235, 142, 156,
	117, 103, 113, 0, 141, 182, 211, 215, 375, 0,
	0, 0, 0, 125, 0, 213, 192, 251, 0, 0,
	194, 212, 160, 241, 205, 250, 261, 262, 238, 258,
	266, 228, 0, 0, 0, 0, 0, 0, 106, 237,
	249, 122, 223, 108, 247, 234, 171, 151, 152, 107,
	0, 209, 130, 137, 127, 184, 0, 0, 0, 244,
	245, 126, 269, 114, 257, 110, 115, 256, 178, 0,
	0, 0, 240, 248, 172, 165, 0, 109, 246, 170,
	164, 155, 134, 144, 202, 162, 203, 145, 175, 174,
	176, 0, 0, 0, 232, 254, 270, 119, 0, 0,
	239, 264, 265, 0, 0, 120, 138, 133, 201, 177,
	116, 147, 229, 154, 161, 208, 268, 191, 214, 123,
	253, 230, 379, 390, 385, 386, 383, 384, 382, 381,
	380, 392, 370, 371, 372, 373, 376, 0, 387, 388,
	374, 102, 111, 158, 267, 206, 136, 255, 0, 0,
	129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 105, 112, 118, 124, 128, 132,
	135, 140, 143, 146, 148, 149, 150, 153, 163, 166,
	167, 168, 169, 179, 180, 181, 183, 186, 187, 188,
	189, 190, 193, 195, 196, 197, 198, 199, 200, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 252, 259, 263, 185,
	0, 0, 0, 0, 336, 0, 0, 0, 131, 333,
	0, 0, 0, 157, 0, 0, 0, 378, 159, 0,
	0, 231, 173, 0, 0, 0, 0, 367, 368, 0,
	0, 0, 0, 0, 0, 0, 0, 61, 0, 0,
	334, 355, 354, 357, 358, 359, 360, 0, 0, 121,
	356, 361, 362, 363, 0, 0, 0, 331, 348, 0,
	377, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	345, 346, 0, 0, 0, 0, 391, 0, 347, 0,
	0, 342, 343, 344, 349, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 0, 0, 369, 0, 0,
	0, 260, 0, 0, 389, 204, 0, 235, 142, 156,
	117, 103, 113, 0, 141, 182, 211, 215, 375, 0,
	0, 0, 0, 125, 0, 213, 192, 251, 0, 0,
	194, 212, 160, 241, 205, 250, 261, 262, 238, 258,
	266, 228, 0, 0, 0, 0, 0, 0, 106, 237,
	249, 122, 223, 108, 247, 234, 171, 151, 152, 107,
	0, 209, 130, 137, 127, 184, 0, 0, 0, 244,
	245, 126, 269, 114, 257, 110, 115, 256, 178, 0,
	0, 0, 240, 248, 172, 165, 0, 109, 246, 170,
	164, 155, 134, 144, 202, 162, 203, 145, 175, 174,
	176, 0, 0, 0, 232, 254, 270, 119, 0, 0,
	239, 264, 265, 0, 0, 120, 138, 133, 201, 177,
	116, 147, 229, 154, 161, 208, 268, 191, 214, 123,
	253, 230, 379, 390, 385, 386, 383, 384, 382, 381,
	380, 392, 370, 371, 372, 373, 376, 0, 387, 388,
	374, 102, 111, 158, 267, 206, 136, 255, 0, 0,
	129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 105, 112, 118, 124, 128, 132,
	135, 140, 143, 146, 148, 149, 150, 153, 163, 166,
	167, 168, 169, 179, 180, 181, 183, 186, 187, 188,
	189, 190, 193, 195, 196, 197, 198, 199, 200, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 252, 259, 263, 185,
	0, 0, 0, 0, 0, 0, 0, 0, 131, 0,
	0, 0, 0, 157, 0, 0, 0, 378, 159, 0,
	0, 231, 173, 0, 0, 0, 0, 367, 368, 0,
	0, 0, 0, 0, 0, 0, 0, 61, 0, 0,
	334, 355, 354, 357, 358, 359, 360, 0, 0, 121,
	356, 361, 362, 363, 0, 0, 0, 0, 348, 0,
	377, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	345, 346, 0, 0, 0, 0, 391, 0, 347, 0,
	0, 342, 343, 344, 349, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 0, 0, 369, 0, 0,
	0, 260, 0, 0, 389, 204, 0, 235, 142, 156,
	117, 103, 113, 0, 141, 182, 211, 215, 375, 0,
	0, 0, 0, 125, 0, 213, 192, 251, 0, 1705,
	194, 212, 160, 241, 205, 250, 261, 262, 238, 258,
	266, 228, 0, 0, 0, 0, 0, 0, 106, 237,
	249, 122, 223, 108, 247, 234, 171, 151, 152, 107,
	0, 209, 130, 137, 127, 184, 0, 0, 0, 244,
	245, 126, 269, 114, 257, 110, 115, 256, 178, 0,
	0, 0, 240, 248, 172, 165, 0, 109, 246, 170,
	164, 155, 134, 144, 202, 162, 203, 145, 175, 174,
	176, 0, 0, 0, 232, 254, 270, 119, 0, 0,
	239, 264, 265, 0, 0, 120, 138, 133, 201, 177,
	116, 147, 229, 154, 161, 208, 268, 191, 214, 123,
	253, 230, 379, 390, 385, 386, 383, 384, 382, 381,
	380, 392, 370, 371, 372, 373, 376, 0, 387, 388,
	374, 102, 111, 158, 267, 206, 136, 255, 0, 0,
	129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 105, 112, 118, 124, 128, 132,
	135, 140, 143, 146, 148, 149, 150, 153, 163, 166,
	167, 168, 169, 179, 180, 181, 183, 186, 187, 188,
	189, 190, 193, 195, 196, 197, 198, 199, 200, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 252, 259, 263, 185,
	0, 0, 0, 0, 0, 0, 0, 0, 131, 0,
	0, 0, 0, 157, 0, 0, 0, 378, 159, 0,
	0, 231, 173, 0, 0, 0, 0, 367, 368, 0,
	0, 0, 0, 0, 0, 0, 0, 61, 0, 606,
	334, 355, 354, 357, 358, 359, 360, 0, 0, 121,
	356, 361, 362, 363, 0, 0, 0, 0, 348, 0,
	377, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	345, 346, 0, 0, 0, 0, 391, 0, 347, 0,
	0, 342, 343, 344, 349, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 0, 0, 369, 0, 0,
	0, 260, 0, 0, 389, 204, 0, 235, 142, 156,
	117, 103, 113, 0, 141, 182, 211, 215, 375, 0,
	0, 0, 0, 125, 0, 213, 192, 251, 0, 0,
	194, 212, 160, 241, 205, 250, 261, 262, 238, 258,
	266, 228, 0, 0, 0, 0, 0, 0, 106, 237,
	249, 122, 223, 108, 247, 234, 171, 151, 152, 107,
	0, 209, 130, 137, 127, 184, 0, 0, 0, 244,
	245, 126, 269, 114, 257, 110, 115, 256, 178, 0,
	0, 0, 240, 248, 172, 165, 0, 109, 246, 170,
	164, 155, 134, 144, 202, 162, 203, 145, 175, 174,
	176, 0, 0, 0, 232, 254, 270, 119, 0, 0,
	239, 264, 265, 0, 0, 120, 138, 133, 201, 177,
	116, 147, 229, 154, 161, 208, 268, 191, 214, 123,
	253, 230, 379, 390, 385, 386, 383, 384, 382, 381,
	380, 392, 370, 371, 372, 373, 376, 0, 387, 388,
	374, 102, 111, 158, 267, 206, 136, 255, 0, 0,
	129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 105, 112, 118, 124, 128, 132,
	135, 140, 143, 146, 148, 149, 150, 153, 163, 166,
	167, 168, 169, 179, 180, 181, 183, 186, 187, 188,
	189, 190, 193, 195, 196, 197, 198, 199, 200, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 252, 259, 263, 185,
	0, 0, 0, 0, 0, 0, 0, 0, 131, 0,
	0, 0, 0, 157, 0, 0, 0, 378, 159, 0,
	0, 231, 173, 0, 0, 0, 0, 367, 368, 0,
	0, 0, 0, 0, 0, 0, 0, 61, 0, 0,
	334, 355, 354, 357, 358, 359, 360, 0, 0, 121,
	356, 361, 362, 363, 0, 0, 0, 0, 348, 0,
	377, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	345, 346, 0, 0, 0, 0, 391, 0, 347, 0,
	0, 342, 343, 344, 349, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 0, 0, 369, 0, 0,
	0, 260, 0, 0, 389, 204, 0, 235, 142, 156,
	117, 103, 113, 0, 141, 182, 211, 215, 375, 0,
	0, 0, 0, 125, 0, 213, 192, 251, 0, 0,
	194, 212, 160, 241, 205, 250, 261, 262, 238, 258,
	266, 228, 0, 0, 0, 0, 0, 0, 106, 237,
	249, 122, 223, 108, 247, 234, 171, 151, 152, 107,
	0, 209, 130, 137, 127, 184, 0, 0, 0, 244,
	245, 126, 269, 114, 257, 110, 115, 256, 178, 0,
	0, 0, 240, 248, 172, 165, 0, 109, 246, 170,
	164, 155, 134, 144, 202, 162, 203, 145, 175, 174,
	176, 0, 0, 0, 232, 254, 270, 119, 0, 0,
	239, 264, 265, 0, 0, 120, 138, 133, 201, 177,
	116, 147, 229, 154, 161, 208, 268, 191, 214, 123,
	253, 230, 379, 390, 385, 386, 383, 384, 382, 381,
	380, 392, 370, 371, 372, 373, 376, 0, 387, 388,
	374, 102, 111, 158, 267, 206, 136, 255, 0, 0,
	129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 105, 112, 118, 124, 128, 132,
	135, 140, 143, 146, 148, 149, 150, 153, 163, 166,
	167, 168, 169, 179, 180, 181, 183, 186, 187, 188,
	189, 190, 193, 195, 196, 197, 198, 199, 200, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 252, 259, 263, 185,
	0, 0, 0, 0, 0, 0, 0, 0, 131, 0,
	0, 0, 0, 157, 0, 0, 0, 0, 159, 0,
	0, 231, 173, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	433, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 647, 646, 656, 657,
	649, 650, 651, 652, 653, 654, 655, 648, 0, 0,
	658, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 0, 0, 0, 0, 0,
	0, 260, 0, 0, 0, 204, 0, 235, 142, 156,
	117, 103, 113, 0, 141, 182, 211, 215, 0, 0,
	0, 0, 0, 125, 0, 213, 192, 251, 0, 0,
	194, 212, 160, 241, 205, 250, 261, 262, 238, 258,
	266, 228, 0, 0, 0, 0, 0, 0, 106, 237,
	249, 122, 223, 108, 247, 234, 171, 151, 152, 107,
	0, 209, 130, 137, 127, 184, 0, 0, 0, 244,
	245, 126, 269, 114, 257, 110, 115, 256, 178, 0,
	0, 0, 240, 248, 172, 165, 0, 109, 246, 170,
	164, 155, 134, 144, 202, 162, 203, 145, 175, 174,
	176, 0, 0, 0, 232, 254, 270, 119, 0, 0,
	239, 264, 265, 0, 0, 120, 138, 133, 201, 177,
	116, 147, 229, 154, 161, 208, 268, 191, 214, 123,
	253, 230, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 102, 111, 158, 267, 206, 136, 255, 0, 0,
	129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 105, 112, 118, 124, 128, 132,
	135, 140, 143, 146, 148, 149, 150, 153, 163, 166,
	167, 168, 169, 179, 180, 181, 183, 186, 187, 188,
	189, 190, 193, 195, 196, 197, 198, 199, 200, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 252, 259, 263, 185,
	0, 0, 0, 982, 0, 0, 0, 0, 131, 0,
	0, 0, 0, 157, 0, 0, 0, 0, 159, 0,
	0, 231, 173, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 984, 986, 0, 0, 0, 0, 0,
	100, 0, 988, 0, 0, 0, 0, 0, 0, 121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 0, 0, 0, 0, 0,
	0, 260, 0, 985, 0, 204, 0, 235, 142, 156,
	117, 103, 113, 0, 141, 182, 211, 215, 0, 0,
	0, 0, 0, 125, 0, 213, 192, 251, 0, 0,
	194, 212, 160, 241, 205, 250, 261, 262, 238, 258,
	266, 228, 0, 0, 0, 0, 0, 0, 106, 237,
	249, 122, 223, 108, 247, 234, 171, 151, 152, 107,
	0, 209, 130, 137, 127, 184, 0, 0, 0, 244,
	245, 126, 269, 114, 257, 110, 115, 256, 178, 0,
	0, 0, 240, 248, 172, 165, 0, 109, 246, 170,
	164, 155, 134, 144, 202, 162, 203, 145, 175, 174,
	176, 0, 0, 0, 232, 254, 270, 119, 0, 0,
	239, 264, 265, 0, 0, 120, 138, 133, 201, 177,
	116, 147, 229, 154, 161, 208, 268, 191, 214, 123,
	253, 230, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 102, 111, 158, 267, 206, 136, 255, 0, 0,
	129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 105, 112, 118, 124, 128, 132,
	135, 140, 143, 146, 148, 149, 150, 153, 163, 166,
	167, 168, 169, 179, 180, 181, 183, 186, 187, 188,
	189, 190, 193, 195, 196, 197, 198, 199, 200, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 252, 259, 263, 185,
	0, 0, 0, 982, 0, 0, 0, 0, 131, 0,
	0, 0, 0, 157, 0, 0, 0, 0, 159, 0,
	0, 231, 173, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 984, 986, 0, 0, 0, 0, 0,
	100, 0, 988, 0, 0, 0, 0, 0, 0, 121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 0, 0, 0, 0, 0,
	0, 260, 0, 985, 0, 204, 0, 235, 142, 156,
	117, 103, 113, 0, 141, 182, 211, 215, 0, 0,
	0, 0, 0, 125, 0, 213, 192, 251, 0, 0,
	980, 212, 160, 241, 205, 250, 261, 262, 238, 258,
	266, 228, 0, 0, 0, 0, 0, 0, 106, 237,
	249, 122, 223, 108, 247, 234, 171, 151, 152, 107,
	0, 209, 130, 137, 127, 184, 0, 0, 0, 244,
	245, 126, 269, 114, 257, 110, 115, 256, 178, 0,
	0, 0, 240, 248, 172, 165, 0, 109, 246, 170,
	164, 155, 134, 144, 202, 162, 203, 145, 175, 174,
	176, 0, 0, 0, 232, 254, 270, 119, 0, 0,
	239, 264, 265, 0, 0, 120, 138, 133, 201, 177,
	116, 147, 229, 154, 161, 208, 268, 191, 214, 123,
	253, 230, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 102, 111, 158, 267, 206, 136, 255, 0, 0,
	129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 105, 112, 118, 124, 128, 132,
	135, 140, 143, 146, 148, 149, 150, 153, 163, 166,
	167, 168, 169, 179, 180, 181, 183, 186, 187, 188,
	189, 190, 193, 195, 196, 197, 198, 199, 200, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 252, 259, 263, 185,
	0, 0, 0, 635, 0, 0, 0, 0, 131, 0,
	0, 0, 0, 157, 0, 0, 0, 0, 159, 0,
	0, 231, 173, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	433, 0, 637, 0, 0, 0, 0, 0, 0, 121,
	0, 0, 0, 0, 0, 632, 631, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 633, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 0, 0, 0, 0, 0,
	0, 260, 0, 0, 0, 204, 0, 235, 142, 156,
	117, 103, 113, 0, 141, 182, 211, 215, 0, 0,
	0, 0, 0, 125, 0, 213, 192, 251, 0, 0,
	194, 212, 160, 241, 205, 250, 261, 262, 238, 258,
	266, 228, 0, 0, 0, 0, 0, 0, 106, 237,
	249, 122, 223, 108, 247, 234, 171, 151, 152, 107,
	0, 209, 130, 137, 127, 184, 0, 0, 0, 244,
	245, 126, 269, 114, 257, 110, 115, 256, 178, 0,
	0, 0, 240, 248, 172, 165, 0, 109, 246, 170,
	164, 155, 134, 144, 202, 162, 203, 145, 175, 174,
	176, 0, 0, 0, 232, 254, 270, 119, 0, 0,
	239, 264, 265, 0, 0, 120, 138, 133, 201, 177,
	116, 147, 229, 154, 161, 208, 268, 191, 214, 123,
	253, 230, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 102, 111, 158, 267, 206, 136, 255, 0, 0,
	129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 105, 112, 118, 124, 128, 132,
	135, 140, 143, 146, 148, 149, 150, 153, 163, 166,
	167, 168, 169, 179, 180, 181, 183, 186, 187, 188,
	189, 190, 193, 195, 196, 197, 198, 199, 200, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 252, 259, 263, 26,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 0, 0, 0, 0, 0, 0, 0, 0,
	131, 0, 0, 0, 0, 157, 0, 0, 0, 0,
	159, 0, 0, 231, 173, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 61,
	0, 0, 433, 0, 0, 0, 0, 0, 0, 0,
	0, 121, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 0, 0, 0,
	0, 0, 0, 260, 0, 0, 0, 204, 0, 235,
	142, 156, 117, 103, 113, 0, 141, 182, 211, 215,
	0, 0, 0, 0, 0, 125, 0, 213, 192, 251,
	0, 0, 194, 212, 160, 241, 205, 250, 261, 262,
	238, 258, 266, 228, 0, 0, 0, 0, 0, 0,
	106, 237, 249, 122, 223, 108, 247, 234, 171, 151,
	152, 107, 0, 209, 130, 137, 127, 184, 0, 0,
	0, 244, 245, 126, 269, 114, 257, 110, 115, 256,
	178, 0, 0, 0, 240, 248, 172, 165, 0, 109,
	246, 170, 164, 155, 134, 144, 202, 162, 203, 145,
	175, 174, 176, 0, 0, 0, 232, 254, 270, 119,
	0, 0, 239, 264, 265, 0, 0, 120, 138, 133,
	201, 177, 116, 147, 229, 154, 161, 208, 268, 191,
	214, 123, 253, 230, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 102, 111, 158, 267, 206, 136, 255,
	0, 0, 129, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 105, 112, 118, 124,
	128, 132, 135, 140, 143, 146, 148, 149, 150, 153,
	163, 166, 167, 168, 169, 179, 180, 181, 183, 186,
	187, 188, 189, 190, 193, 195, 196, 197, 198, 199,
	200, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	224, 225, 226, 227, 233, 236, 242, 243, 252, 259,
	263, 185, 0, 0, 0, 0, 0, 0, 0, 0,
	131, 0, 0, 0, 0, 157, 0, 0, 0, 0,
	159, 0, 0, 231, 173, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 100, 0, 988, 0, 0, 0, 0, 0,
	0, 121, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 0, 0, 0,
	0, 0, 0, 260, 0, 0, 0, 204, 0, 235,
	142, 156, 117, 103, 113, 0, 141, 182, 211, 215,
	0, 0, 0, 0, 0, 125, 0, 213, 192, 251,
	0, 0, 194, 212, 160, 241, 205, 250, 261, 262,
	238, 258, 266, 228, 0, 0, 0, 0, 0, 0,
	106, 237, 249, 122, 223, 108, 247, 234, 171, 151,
	152, 107, 0, 209, 130, 137, 127, 184, 0, 0,
	0, 244, 245, 126, 269, 114, 257, 110, 115, 256,
	178, 0, 0, 0, 240, 248, 172, 165, 0, 109,
	246, 170, 164, 155, 134, 144, 202, 162, 203, 145,
	175, 174, 176, 0, 0, 0, 232, 254, 270, 119,
	0, 0, 239, 264, 265, 0, 0, 120, 138, 133,
	201, 177, 116, 147, 229, 154, 161, 208, 268, 191,
	214, 123, 253, 230, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 102, 111, 158, 267, 206, 136, 255,
	0, 0, 129, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1197, 0, 0,
	0, 0, 0, 0, 0, 104, 105, 112, 118, 124,
	128, 132, 135, 140, 143, 146, 148, 149, 150, 153,
	163, 166, 167, 168, 169, 179, 180, 181, 183, 186,
	187, 188, 189, 190, 193, 195, 196, 197, 198, 199,
	200, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	224, 225, 226, 227, 233, 236, 242, 243, 252, 259,
	263, 26, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 0, 0, 0, 0, 0, 0,
	0, 0, 131, 0, 0, 0, 0, 157, 0, 0,
	0, 0, 159, 0, 0, 231, 173, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 61, 0, 0, 100, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
	0, 0, 0, 0, 0, 260, 0, 0, 0, 204,
	0, 235, 142, 156, 117, 103, 113, 0, 141, 182,
	211, 215, 0, 0, 0, 0, 0, 125, 0, 213,
	192, 251, 0, 0, 194, 212, 160, 241, 205, 250,
	261, 262, 238, 258, 266, 228, 0, 0, 0, 0,
	0, 0, 106, 237, 249, 122, 223, 108, 247, 234,
	171, 151, 152, 107, 0, 209, 130, 137, 127, 184,
	0, 0, 0, 244, 245, 126, 269, 114, 257, 110,
	115, 256, 178, 0, 0, 0, 240, 248, 172, 165,
	0, 109, 246, 170, 164, 155, 134, 144, 202, 162,
	203, 145, 175, 174, 176, 0, 0, 0, 232, 254,
	270, 119, 0, 0, 239, 264, 265, 0, 0, 120,
	138, 133, 201, 177, 116, 147, 229, 154, 161, 208,
	268, 191, 214, 123, 253, 230, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 102, 111, 158, 267, 206,
	136, 255, 0, 0, 129, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 105, 112,
	118, 124, 128, 132, 135, 140, 143, 146, 148, 149,
	150, 153, 163, 166, 167, 168, 169, 179, 180, 181,
	183, 186, 187, 188, 189, 190, 193, 195, 196, 197,
	198, 199, 200, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	252, 259, 263, 185, 0, 0, 0, 0, 0, 0,
	0, 0, 131, 0, 0, 0, 0, 157, 0, 0,
	0, 0, 159, 0, 0, 231, 173, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 433, 0, 0, 878, 0, 0,
	879, 0, 0, 121, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
	0, 0, 0, 0, 0, 260, 0, 0, 0, 204,
	0, 235, 142, 156, 117, 103, 113, 0, 141, 182,
	211, 215, 0, 0, 0, 0, 0, 125, 0, 213,
	192, 251, 0, 0, 194, 212, 160, 241, 205, 250,
	261, 262, 238, 258, 266, 228, 0, 0, 0, 0,
	0, 0, 106, 237, 249, 122, 223, 108, 247, 234,
	171, 151, 152, 107, 0, 209, 130, 137, 127, 184,
	0, 0, 0, 244, 245, 126, 269, 114, 257, 110,
	115, 256, 178, 0, 0, 0, 240, 248, 172, 165,
	0, 109, 246, 170, 164, 155, 134, 144, 202, 162,
	203, 145, 175, 174, 176, 0, 0, 0, 232, 254,
	270, 119, 0, 0, 239, 264, 265, 0, 0, 120,
	138, 133, 201, 177, 116, 147, 229, 154, 161, 208,
	268, 191, 214, 123, 253, 230, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 102, 111, 158, 267, 206,
	136, 255, 0, 0, 129, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 105, 112,
	118, 124, 128, 132, 135, 140, 143, 146, 148, 149,
	150, 153, 163, 166, 167, 168, 169, 179, 180, 181,
	183, 186, 187, 188, 189, 190, 193, 195, 196, 197,
	198, 199, 200, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	252, 259, 263, 185, 0, 0, 0, 0, 0, 0,
	0, 0, 131, 751, 0, 0, 0, 157, 0, 0,
	0, 0, 159, 0, 0, 231, 173, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 433, 0, 750, 0, 0, 0,
	0, 0, 0, 121, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
	0, 0, 0, 0, 0, 260, 0, 0, 0, 204,
	0, 235, 142, 156, 117, 103, 113, 0, 141, 182,
	211, 215, 0, 0, 0, 0, 0, 125, 0, 213,
	192, 251, 0, 0, 194, 212, 160, 241, 205, 250,
	261, 262, 238, 258, 266, 228, 0, 0, 0, 0,
	0, 0, 106, 237, 249, 122, 223, 108, 247, 234,
	171, 151, 152, 107, 0, 209, 130, 137, 127, 184,
	0, 0, 0, 244, 245, 126, 269, 114, 257, 110,
	115, 256, 178, 0, 0, 0, 240, 248, 172, 165,
	0, 109, 246, 170, 164, 155, 134, 144, 202, 162,
	203, 145, 175, 174, 176, 0, 0, 0, 232, 254,
	270, 119, 0, 0, 239, 264, 265, 0, 0, 120,
	138, 133, 201, 177, 116, 147, 229, 154, 161, 208,
	268, 191, 214, 123, 253, 230, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 102, 111, 158, 267, 206,
	136, 255, 0, 0, 129, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 105, 112,
	118, 124, 128, 132, 135, 140, 143, 146, 148, 149,
	150, 153, 163, 166, 167, 168, 169, 179, 180, 181,
	183, 186, 187, 188, 189, 190, 193, 195, 196, 197,
	198, 199, 200, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	252, 259, 263, 185, 0, 0, 0, 0, 0, 0,
	0, 0, 131, 0, 0, 0, 0, 157, 0, 0,
	0, 0, 159, 0, 0, 231, 173, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 100, 0, 988, 0, 0, 0,
	0, 0, 0, 121, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
	0, 0, 0, 0, 0, 260, 0, 0, 0, 204,
	0, 235, 142, 156, 117, 103, 113, 0, 141, 182,
	211, 215, 0, 0, 0, 0, 0, 125, 0, 213,
	192, 251, 0, 0, 194, 212, 160, 241, 205, 250,
	261, 262, 238, 258, 266, 228, 0, 0, 0, 0,
	0, 0, 106, 237, 249, 122, 223, 108, 247, 234,
	171, 151, 152, 107, 0, 209, 130, 137, 127, 184,
	0, 0, 0, 244, 245, 126, 269, 114, 257, 110,
	115, 256, 178, 0, 0, 0, 240, 248, 172, 165,
	0, 109, 246, 170, 164, 155, 134, 144, 202, 162,
	203, 145, 175, 174, 176, 0, 0, 0, 232, 254,
	270, 119, 0, 0, 239, 264, 265, 0, 0, 120,
	138, 133, 201, 177, 116, 147, 229, 154, 161, 208,
	268, 191, 214, 123, 253, 230, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 102, 111, 158, 267, 206,
	136, 255, 0, 0, 129, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 105, 112,
	118, 124, 128, 132, 135, 140, 143, 146, 148, 149,
	150, 153, 163, 166, 167, 168, 169, 179, 180, 181,
	183, 186, 187, 188, 189, 190, 193, 195, 196, 197,
	198, 199, 200, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	252, 259, 263, 185, 0, 0, 0, 0, 0, 0,
	0, 0, 131, 0, 0, 0, 0, 157, 0, 0,
	0, 0, 159, 0, 0, 231, 173, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 61, 0, 0, 100, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
	0, 0, 0, 0, 0, 260, 0, 0, 0, 204,
	0, 235, 142, 156, 117, 103, 113, 0, 141, 182,
	211, 215, 0, 0, 0, 0, 0, 125, 0, 213,
	192, 251, 0, 0, 194, 212, 160, 241, 205, 250,
	261, 262, 238, 258, 266, 228, 0, 0, 0, 0,
	0, 0, 106, 237, 249, 122, 223, 108, 247, 234,
	171, 151, 152, 107, 0, 209, 130, 137, 127, 184,
	0, 0, 0, 244, 245, 126, 269, 114, 257, 110,
	115, 256, 178, 0, 0, 0, 240, 248, 172, 165,
	0, 109, 246, 170, 164, 155, 134, 144, 202, 162,
	203, 145, 175, 174, 176, 0, 0, 0, 232, 254,
	270, 119, 0, 0, 239, 264, 265, 0, 0, 120,
	138, 133, 201, 177, 116, 147, 229, 154, 161, 208,
	268, 191, 214, 123, 253, 230, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 102, 111, 158, 267, 206,
	136, 255, 0, 0, 129, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 105, 112,
	118, 124, 128, 132, 135, 140, 143, 146, 148, 149,
	150, 153, 163, 166, 167, 168, 169, 179, 180, 181,
	183, 186, 187, 188, 189, 190, 193, 195, 196, 197,
	198, 199, 200, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	252, 259, 263, 185, 0, 0, 0, 0, 0, 0,
	0, 0, 131, 0, 0, 0, 0, 157, 0, 0,
	0, 0, 159, 0, 0, 231, 173, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 433, 0, 637, 0, 0, 0,
	0, 0, 0, 121, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
	0, 0, 0, 0, 0, 260, 0, 0, 0, 204,
	0, 235, 142, 156, 117, 103, 113, 0, 141, 182,
	211, 215, 0, 0, 0, 0, 0, 125, 0, 213,
	192, 251, 0, 0, 194, 212, 160, 241, 205, 250,
	261, 262, 238, 258, 266, 228, 0, 0, 0, 0,
	0, 0, 106, 237, 249, 122, 223, 108, 247, 234,
	171, 151, 152, 107, 0, 209, 130, 137, 127, 184,
	0, 0, 0, 244, 245, 126, 269, 114, 257, 110,
	115, 256, 178, 0, 0, 0, 240, 248, 172, 165,
	0, 109, 246, 170, 164, 155, 134, 144, 202, 162,
	203, 145, 175, 174, 176, 0, 0, 0, 232, 254,
	270, 119, 0, 0, 239, 264, 265, 0, 0, 120,
	138, 133, 201, 177, 116, 147, 229, 154, 161, 208,
	268, 191, 214, 123, 253, 230, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 102, 111, 158, 267, 206,
	136, 255, 0, 0, 129, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 105, 112,
	118, 124, 128, 132, 135, 140, 143, 146, 148, 149,
	150, 153, 163, 166, 167, 168, 169, 179, 180, 181,
	183, 186, 187, 188, 189, 190, 193, 195, 196, 197,
	198, 199, 200, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	252, 259, 263, 185, 0, 0, 0, 0, 0, 0,
	0, 721, 131, 0, 0, 0, 0, 157, 0, 0,
	0, 0, 159, 0, 0, 231, 173, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 100, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
	0, 0, 0, 0, 0, 260, 0, 0, 0, 204,
	0, 235, 142, 156, 117, 103, 113, 0, 141, 182,
	211, 215, 0, 0, 0, 0, 0, 125, 0, 213,
	192, 251, 0, 0, 194, 212, 160, 241, 205, 250,
	261, 262, 238, 258, 266, 228, 0, 0, 0, 0,
	0, 0, 106, 237, 249, 122, 223, 108, 247, 234,
	171, 151, 152, 107, 0, 209, 130, 137, 127, 184,
	0, 0, 0, 244, 245, 126, 269, 114, 257, 110,
	115, 256, 178, 0, 0, 0, 240, 248, 172, 165,
	0, 109, 246, 170, 164, 155, 134, 144, 202, 162,
	203, 145, 175, 174, 176, 0, 0, 0, 232, 254,
	270, 119, 0, 0, 239, 264, 265, 0, 0, 120,
	138, 133, 201, 177, 116, 147, 229, 154, 161, 208,
	268, 191, 214, 123, 253, 230, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 102, 111, 158, 267, 206,
	136, 255, 0, 0, 129, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 105, 112,
	118, 124, 128, 132, 135, 140, 143, 146, 148, 149,
	150, 153, 163, 166, 167, 168, 169, 179, 180, 181,
	183, 186, 187, 188, 189, 190, 193, 195, 196, 197,
	198, 199, 200, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	252, 259, 263, 395, 0, 0, 0, 0, 0, 0,
	185, 0, 0, 0, 0, 0, 0, 0, 0, 131,
	0, 0, 0, 0, 157, 0, 0, 0, 0, 159,
	0, 0, 231, 173, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 100, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 0, 0, 0,
	0, 0, 260, 0, 0, 0, 204, 0, 235, 142,
	156, 117, 103, 113, 0, 141, 182, 211, 215, 0,
	0, 0, 0, 0, 125, 0, 213, 192, 251, 0,
	0, 194, 212, 160, 241, 205, 250, 261, 262, 238,
	258, 266, 228, 0, 0, 0, 0, 0, 0, 106,
	237, 249, 122, 223, 108, 247, 234, 171, 151, 152,
	107, 0, 209, 130, 137, 127, 184, 0, 0, 0,
	244, 245, 126, 269, 114, 257, 110, 115, 256, 178,
	0, 0, 0, 240, 248, 172, 165, 0, 109, 246,
	170, 164, 155, 134, 144, 202, 162, 203, 145, 175,
	174, 176, 0, 0, 0, 232, 254, 270, 119, 0,
	0, 239, 264, 265, 0, 0, 120, 138, 133, 201,
	177, 116, 147, 229, 154, 161, 208, 268, 191, 214,
	123, 253, 230, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 111, 158, 267, 206, 136, 255, 0,
	0, 129, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 105, 112, 118, 124, 128,
	132, 135, 140, 143, 146, 148, 149, 150, 153, 163,
	166, 167, 168, 169, 179, 180, 181, 183, 186, 187,
	188, 189, 190, 193, 195, 196, 197, 198, 199, 200,
	207, 210, 216, 217, 218, 219, 220, 221, 222, 224,
	225, 226, 227, 233, 236, 242, 243, 252, 259, 263,
	185, 0, 0, 0, 0, 0, 0, 0, 0, 131,
	0, 0, 0, 0, 157, 0, 0, 0, 0, 159,
	0, 0, 231, 173, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 100, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 0, 0, 97,
	0, 0, 260, 0, 0, 0, 204, 0, 235, 142,
	156, 117, 103, 113, 0, 141, 182, 211, 215, 0,
	0, 0, 0, 0, 125, 0, 213, 192, 251, 0,
	0, 194, 212, 160, 241, 205, 250, 261, 262, 238,
	258, 266, 228, 0, 0, 0, 0, 0, 0, 106,
	237, 249, 122, 223, 108, 247, 234, 171, 151, 152,
	107, 0, 209, 130, 137, 127, 184, 0, 0, 0,
	244, 245, 126, 269, 114, 257, 110, 115, 256, 178,
	0, 0, 0, 240, 248, 172, 165, 0, 109, 246,
	170, 164, 155, 134, 144, 202, 162, 203, 145, 175,
	174, 176, 0, 0, 0, 232, 254, 270, 119, 0,
	0, 239, 264, 265, 0, 0, 120, 138, 133, 201,
	177, 116, 147, 229, 154, 161, 208, 268, 191, 214,
	123, 253, 230, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 111, 158, 267, 206, 136, 255, 0,
	0, 129, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 105, 112, 118, 124, 128,
	132, 135, 140, 143, 146, 148, 149, 150, 153, 163,
	166, 167, 168, 169, 179, 180, 181, 183, 186, 187,
	188, 189, 190, 193, 195, 196, 197, 198, 199, 200,
	207, 210, 216, 217, 218, 219, 220, 221, 222, 224,
	225, 226, 227, 233, 236, 242, 243, 252, 259, 263,
	185, 0, 0, 0, 0, 0, 0, 0, 0, 131,
	0, 0, 0, 0, 157, 0, 0, 0, 0, 159,
	0, 0, 231, 173, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 433, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 0, 0, 0,
	0, 0, 260, 0, 0, 0, 204, 0, 235, 142,
	156, 117, 103, 113, 0, 141, 182, 211, 215, 0,
	0, 0, 0, 0, 125, 0, 213, 192, 251, 0,
	0, 194, 212, 160, 241, 205, 250, 261, 262, 238,
	258, 266, 228, 0, 0, 0, 0, 0, 0, 106,
	237, 249, 122, 223, 108, 247, 234, 171, 151, 152,
	107, 0, 209, 130, 137, 127, 184, 0, 0, 0,
	244, 245, 126, 269, 114, 257, 110, 115, 256, 178,
	0, 0, 0, 240, 248, 172, 165, 0, 109, 246,
	170, 164, 155, 134, 144, 202, 162, 203, 145, 175,
	174, 176, 0, 0, 0, 232, 254, 270, 119, 0,
	0, 239, 264, 265, 0, 0, 120, 138, 133, 201,
	177, 116, 147, 229, 154, 161, 208, 268, 191, 214,
	123, 253, 230, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 111, 158, 267, 206, 136, 255, 0,
	0, 129, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 105, 112, 118, 124, 128,
	132, 135, 140, 143, 146, 148, 149, 150, 153, 163,
	166, 167, 168, 169, 179, 180, 181, 183, 186, 187,
	188, 189, 190, 193, 195, 196, 197, 198, 199, 200,
	207, 210, 216, 217, 218, 219, 220, 221, 222, 224,
	225, 226, 227, 233, 236, 242, 243, 252, 259, 263,
	185, 0, 0, 0, 0, 0, 0, 0, 0, 131,
	0, 0, 0, 0, 157, 0, 0, 0, 0, 159,
	0, 0, 231, 173, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 100, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 0, 0, 0,
	0, 0, 260, 0, 0, 0, 204, 0, 235, 142,
	156, 117, 103, 113, 0, 141, 182, 211, 215, 0,
	0, 0, 0, 0, 125, 0, 213, 192, 251, 0,
	0, 194, 212, 160, 241, 205, 250, 261, 262, 238,
	258, 266, 228, 0, 0, 0, 0, 0, 0, 106,
	237, 249, 122, 223, 108, 247, 234, 171, 151, 152,
	107, 0, 209, 130, 137, 127, 184, 0, 0, 0,
	244, 245, 126, 269, 114, 257, 110, 115, 256, 178,
	0, 0, 0, 240, 248, 172, 165, 0, 109, 246,
	170, 164, 155, 134, 144, 202, 162, 203, 145, 175,
	174, 176, 0, 0, 0, 232, 254, 270, 119, 0,
	0, 239, 264, 265, 0, 0, 120, 138, 133, 201,
	177, 116, 147, 229, 154, 161, 208, 268, 191, 214,
	123, 253, 230, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 111, 158, 267, 206, 136, 255, 0,
	0, 129, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 105, 112, 118, 124, 128,
	132, 135, 140, 143, 146, 148, 149, 150, 153, 163,
	166, 167, 168, 169, 179, 180, 181, 183, 186, 187,
	188, 189, 190, 193, 195, 196, 197, 198, 199, 200,
	207, 210, 216, 217, 218, 219, 220, 221, 222, 224,
	225, 226, 227, 233, 236, 242, 243, 252, 259, 263,
	185, 0, 0, 0, 0, 0, 0, 0, 0, 131,
	0, 0, 0, 0, 157, 0, 0, 0, 0, 159,
	0, 0, 231, 173, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 334, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 0, 0, 0,
	0, 0, 260, 0, 0, 0, 204, 0, 235, 142,
	156, 117, 103, 113, 0, 141, 182, 211, 215, 0,
	0, 0, 0, 0, 125, 0, 213, 192, 251, 0,
	0, 194, 212, 160, 241, 205, 250, 261, 262, 238,
	258, 266, 228, 0, 0, 0, 0, 0, 0, 106,
	237, 249, 122, 223, 108, 247, 234, 171, 151, 152,
	107, 0, 209, 130, 137, 127, 184, 0, 0, 0,
	244, 245, 126, 269, 114, 257, 110, 412, 256, 178,
	0, 0, 0, 240, 248, 172, 165, 0, 109, 246,
	170, 164, 155, 134, 144, 202, 162, 203, 145, 175,
	174, 176, 0, 0, 0, 232, 254, 270, 119, 0,
	0, 239, 264, 265, 0, 0, 120, 138, 133, 201,
	413, 411, 147, 229, 154, 161, 208, 268, 191, 214,
	123, 253, 230, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 111, 158, 267, 206, 136, 255, 0,
	0, 129, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 105, 112, 118, 124, 128,
	132, 135, 140, 143, 146, 148, 149, 150, 153, 163,
	166, 167, 168, 169, 179, 180, 181, 183, 186, 187,
	188, 189, 190, 193, 195, 196, 197, 198, 199, 200,
	207, 210, 216, 217, 218, 219, 220, 221, 222, 224,
	225, 226, 227, 233, 236, 242, 243, 252, 259, 263,
	185, 0, 0, 0, 0, 0, 0, 0, 0, 131,
	0, 0, 0, 0, 157, 0, 0, 0, 0, 159,
	0, 0, 231, 173, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 334, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 0, 0, 0,
	0, 0, 260, 0, 0, 0, 204, 0, 235, 142,
	156, 117, 103, 113, 0, 141, 182, 211, 215, 0,
	0, 0, 0, 0, 125, 0, 213, 192, 251, 0,
	0, 194, 212, 160, 241, 205, 250, 261, 262, 238,
	258, 266, 228, 0, 0, 0, 0, 0, 0, 106,
	237, 249, 122, 223, 108, 247, 234, 171, 151, 152,
	107, 0, 209, 130, 137, 127, 184, 0, 0, 0,
	244, 245, 126, 269, 114, 257, 110, 115, 256, 178,
	0, 0, 0, 240, 248, 172, 165, 0, 109, 246,
	170, 164, 155, 134, 144, 202, 162, 203, 145, 175,
	174, 176, 0, 0, 0, 232, 254, 270, 119, 0,
	0, 239, 264, 265, 0, 0, 120, 138, 133, 201,
	177, 116, 147, 229, 154, 161, 208, 268, 191, 214,
	123, 253, 230, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 111, 158, 267, 206, 136, 255, 0,
	0, 129, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 105, 112, 118, 124, 128,
	132, 135, 140, 143, 146, 148, 149, 150, 153, 163,
	166, 167, 168, 169, 179, 180, 181, 183, 186, 187,
	188, 189, 190, 193, 195, 196, 197, 198, 199, 200,
	207, 210, 216, 217, 218, 219, 220, 221, 222, 224,
	225, 226, 227, 233, 236, 242, 243, 252, 259, 263,
	185, 0, 0, 0, 0, 0, 0, 0, 0, 131,
	0, 0, 0, 0, 157, 0, 0, 0, 0, 159,
	0, 0, 231, 173, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 334, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 0, 0, 0,
	0, 0, 260, 0, 0, 0, 204, 0, 235, 142,
	156, 117, 103, 113, 0, 141, 182, 211, 215, 0,
	0, 0, 0, 0, 125, 0, 213, 192, 251, 0,
	0, 194, 212, 160, 241, 205, 250, 261, 262, 238,
	258, 266, 228, 0, 0, 0, 0, 0, 0, 106,
	237, 742, 122, 223, 108, 247, 234, 171, 151, 152,
	107, 0, 209, 130, 137, 127, 184, 0, 0, 0,
	244, 245, 126, 269, 114, 257, 110, 412, 256, 178,
	0, 0, 0, 240, 248, 172, 165, 0, 109, 246,
	170, 164, 155, 134, 144, 202, 162, 203, 145, 175,
	174, 176, 0, 0, 0, 232, 254, 270, 119, 0,
	0, 239, 264, 265, 0, 0, 120, 138, 133, 201,
	413, 411, 147, 229, 154, 161, 208, 268, 191, 214,
	123, 253, 230, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 111, 158, 267, 206, 136, 255, 0,
	0, 129, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 105, 112, 118, 124, 128,
	132, 135, 140, 143, 146, 148, 149, 150, 153, 163,
	166, 167, 168, 169, 179, 180, 181, 183, 186, 187,
	188, 189, 190, 193, 195, 196, 197, 198, 199, 200,
	207, 210, 216, 217, 218, 219, 220, 221, 222, 224,
	225, 226, 227, 233, 236, 242, 243, 252, 259, 263,
	185, 0, 0, 0, 0, 0, 0, 0, 0, 131,
	0, 0, 0, 0, 157, 0, 0, 0, 0, 159,
	0, 0, 231, 173, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 334, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 0, 0, 0,
	0, 0, 260, 0, 0, 0, 204, 0, 235, 142,
	156, 117, 103, 113, 0, 141, 182, 211, 215, 0,
	0, 0, 0, 0, 125, 0, 213, 192, 251, 0,
	0, 194, 212, 160, 241, 205, 250, 261, 262, 238,
	258, 266, 228, 0, 0, 0, 0, 0, 0, 106,
	237, 403, 122, 223, 108, 247, 234, 171, 151, 152,
	107, 0, 209, 130, 137, 127, 184, 0, 0, 0,
	244, 245, 126, 269, 114, 257, 110, 412, 256, 178,
	0, 0, 0, 240, 248, 172, 165, 0, 109, 246,
	170, 164, 155, 134, 144, 202, 162, 203, 145, 175,
	174, 176, 0, 0, 0, 232, 254, 270, 119, 0,
	0, 239, 264, 265, 0, 0, 120, 138, 133, 201,
	413, 411, 406, 405, 154, 161, 208, 268, 191, 214,
	123, 253, 230, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 111, 158, 267, 206, 136, 255, 0,
	0, 129, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 105, 112, 118, 124, 128,
	132, 135, 140, 143, 146, 148, 149, 150, 153, 163,
	166, 167, 168, 169, 179, 180, 181, 183, 186, 187,
	188, 189, 190, 193, 195, 196, 197, 198, 199, 200,
	207, 210, 216, 217, 218, 219, 220, 221, 222, 224,
	225, 226, 227, 233, 236, 242, 243, 252, 259, 263,
}
var yyPact = [...]int{

	2714, -1000, -262, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1212, 1254, -1000, -1000, -1000, -1000,
	-1000, -1000, 375, 404, -1000, -1000, -1000, 197, 46, 15042,
	193, 1844, 15742, -1000, 43, -1000, -1000, 134, 15742, -1000,
	-1000, -80, -105, -1000, 901, -1000, -1000, 60, -1000, -1000,
	-1000, -1000, -1000, -1000, 1194, 1210, 991, 1200, 1037, -1000,
	7299, 148, 148, 14692, 17142, -1000, -1000, 399, 15742, 184,
	15742, -146, 146, 146, 82, 146, -1000, 410, -1000, -1000,
	-1000, 15742, 152, 15392, 152, 152, 152, 15742, -1000, 236,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 15742, 794, 1100, 4434, 97, 4434, 4434, -1000, 455,
	-1000, 4434, 72, 4434, -32, 436, 74, -9, -1000, 4434,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 195, 901,
	391, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 586, 187,
	15742, 351, -1000, 1165, 8711, 8711, 1212, -1000, 901, -1000,
	-1000, -1000, 1177, -1000, -1000, 468, 1240, -1000, 11161, 233,
	-1000, 8711, 1760, 939, -1000, -1000, 939, -1000, -1000, 220,
	-1000, -1000, 9761, 9761, 9761, 9761, 9761, 9761, 9761, 9761,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 939, -1000, 8361, 939, 939, 939,
	939, 939, 939, 939, 939, 939, 939, 8711, 939, 939,
	939, 939, 939, 939, 939, 939, 939, 939, 939, 939,
	939, 939, 939, 14335, 13635, 15742, 817, 797, -1000, -1000,
	231, 811, 16792, -117, -1000, -1000, -1000, 388, 12935, -1000,
	230, -1000, 1099, -1000, 793, 15742, -1000, 2039, -1000, 15392,
	1184, 164, 790, 449, 786, 781, 15742, 779, 936, 157,
	15742, 1168, 1006, -1000, -1000, 15742, 761, 759, -1000, 6249,
	-1000, 4434, 4434, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 146, 146, 4434,
	4434, 15742, 4434, 15742, -1000, -1000, 15742, -1000, -1000, -1000,
	4434, 4434, -1000, 1239, 414, -1000, -1000, -1000, -1000, 8711,
	-1000, 9761, 315, -1000, 1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 751, -1000, -1000, -1000, -1000, 15742, 4434, 79,
	118, 111, 15742, -1000, 1247, 267, 550, 228, 926, -1000,
	521, 1194, 586, 1037, 12585, 1021, -1000, -1000, -1000, 15742,
	-1000, 8711, 8711, 601, -1000, 13985, -1000, -1000, 5160, 273,
	9761, 476, 360, 9761, 9761, 9761, 9761, 9761, 9761, 9761,
	9761, 9761, 9761, 9761, 9761, 9761, 9761, 9761, 555, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 735, -1000, 901,
	683, 683, 246, 246, 246, 246, 246, 246, 246, 10111,
	1198, 586, 777, 607, 8361, 7299, 7299, 586, 8711, 8711,
	7999, 7649, 7299, 7299, 1198, 406, 607, 16442, -1000, -1000,
	9411, -1000, -1000, -1000, -1000, -1000, 586, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 15392, 15392, 7299, 7299, 7299, 7299,
	94, 15742, -1000, 919, 1142, -1000, -1000, -1000, 1182, 12235,
	10811, 94, 844, 13635, 15742, -1000, -1000, 13635, 15742, 4797,
	16092, 811, -117, 902, -1000, -123, -128, 6599, 244, -1000,
	-1000, -1000, 5886, -1000, 3708, 504, 788, -1000, -64, -1000,
	-1000, -1000, 951, -1000, 951, 153, 14, 951, 951, 951,
	951, 951, -7, -7, -7, -7, 15, -1000, -1000, -1000,
	-1000, -1000, 966, 965, -1000, 951, 951, 951, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 962, 169, 962, 956,
	956, 956, 956, 972, -1000, 15742, 4434, 1132, 4434, 83,
	-1000, -1000, 15742, 15742, 923, -1000, 15742, 915, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 732, 718, -1000, -1000,
	-1000, -1000, -1000, 417, -1000, -1000, 15742, 1174, 15742, 15742,
	607, 829, -1000, 549, 15742, -1000, 147, -1000, 15742, 15742,
	15742, 15742, 15742, 207, -1000, 1054, 8711, 8711, 5886, 8711,
	-1000, -1000, -1000, 1165, -1000, 1198, 1213, -1000, 1064, 1062,
	7299, -1000, -1000, 273, 428, -1000, -1000, 506, -1000, -1000,
	-1000, -1000, 225, 939, -1000, 1398, -1000, -1000, -1000, -1000,
	476, 9761, 9761, 9761, 829, 1398, 2329, 814, 590, 246,
	378, 378, 248, 248, 248, 248, 248, 787, 787, -1000,
	-1000, -1000, 586, -1000, -1000, -1000, 7299, -1000, 8711, -1000,
	586, 769, -1000, 769, -1000, 402, 627, 329, 1236, 769,
	311, 1235, 769, 769, 769, 7299, 425, -1000, 8711, 586,
	-1000, 1015, 914, 912, 769, 586, 905, 769, 769, 842,
	939, -1000, 16092, 13635, 13635, 13635, 13635, 13635, -1000, 1034,
	1026, -1000, 1033, 1025, 1041, 15742, -1000, 767, 12235, -1000,
	939, -1000, 11873, 265, 181, 175, 168, -1000, -1000, 1219,
	13635, 898, -1000, 898, -1000, 224, -1000, -1000, 902, -117,
	-58, -1000, -1000, -1000, -1000, 607, -1000, 562, -1000, 219,
	882, 3345, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 964,
	715, -1000, 1092, 293, 282, 606, 1074, -1000, -1000, -1000,
	585, -75, -1000, -1000, 498, -7, -7, 951, 951, 115,
	951, -1000, -7, -1000, -1000, -1000, 244, 1098, 244, 244,
	244, 244, -7, 539, 539, -1000, -1000, -1000, -1000, 495,
	-1000, 962, -1000, -1000, 491, -1000, -1000, -1000, 994, 15392,
	901, 1172, -1000, -1000, -1000, 1225, -1000, -1000, 156, -1000,
	4434, 15742, 4434, 4434, 1219, 713, 710, 414, 423, -196,
	-1000, -1000, -1000, 9761, -1000, -1000, -1000, 492, 416, 289,
	135, 135, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 93, 969, -1000, -1000, -1000, -1000, 17,
	78, 1050, 607, 607, -1000, -1000, 15742, -1000, -1000, -1000,
	-1000, 897, -1000, -1000, -1000, 4071, 7299, -1000, 829, 1398,
	2270, -1000, 9761, -1000, 586, 607, -1000, 7299, -1000, -1000,
	354, 555, 354, 9761, 9761, -1000, 9761, 9761, -1000, -158,
	-1000, 906, 330, -1000, 8711, 631, -1000, -1000, 9761, 9761,
	-1000, -1000, -1000, -1000, 992, 16092, 939, -1000, 11523, 15392,
	933, 1142, 960, 988, 896, -1000, -1000, -1000, -1000, 1024,
	-1000, 1023, -1000, -1000, -1000, -1000, 15392, 9761, 265, -1000,
	939, 939, 939, 1212, 8711, 898, -1000, -1000, 257, -1000,
	-1000, -125, -133, -1000, -1000, -1000, 5523, 3708, -1000, 3708,
	15392, 114, -1000, 606, 606, -1000, -1000, -1000, 957, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 434, 9761, 1246, -1000,
	1089, -1000, 1088, 528, -1000, -1000, 731, 244, 244, -7,
	-1000, -1000, 951, -1000, 244, -1000, 301, -1000, -1000, -1000,
	-1000, 244, 749, -1000, 741, 848, -1000, 730, 15742, -1000,
	-1000, -1000, 985, -1000, -1000, -1000, 15742, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 423, -1000, 525, 8711, 9761, 1398,
	-1000, 598, -1000, 606, 272, -1000, -1000, -1000, 690, 1074,
	-1000, -1000, 682, -1000, 678, 15392, 1073, 670, 15742, 15392,
	-1000, -1000, 617, 664, 15392, -164, 648, 15392, 15392, 15392,
	-1000, -1000, 1219, 13635, -1000, -1000, 586, -1000, 9761, 1398,
	-1000, -1000, 586, 951, 951, -1000, 951, 956, -1000, 951,
	34, 951, 23, 586, 586, 2209, 2183, 2073, 2001, 939,
	-153, -1000, 607, 8711, 1815, 1039, -1000, 1104, 843, 827,
	-1000, -1000, 6949, 586, 723, 216, 708, -1000, 1212, -1000,
	-1000, 8711, 953, -1000, 8711, -1000, -1000, -1000, 708, 1265,
	-1000, 15392, 15392, 15392, 1194, 607, -1000, -1000, -1000, -1000,
	3345, -1000, 706, -1000, 951, -1000, -1000, -1000, 15392, -1000,
	1398, -100, -1000, -1000, -1000, -1000, -1000, -1000, 244, -1000,
	-1000, -1000, -1000, -1000, -7, 518, -7, 486, -1000, 481,
	950, -1000, 901, 15742, -1000, -1000, -1000, 607, 1398, 617,
	126, -1000, 972, 293, 114, -1000, -1000, -1000, -1000, 621,
	271, -1000, 155, 126, 617, 1126, -1000, 5523, -1000, -1000,
	949, 976, -1000, 1216, 847, -1000, 1398, -1000, -1000, 138,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 9761, 9761,
	9761, 9761, 9761, 586, 511, 607, 9761, 9761, 1072, -1000,
	939, -1000, -1000, 900, 15392, 15392, -1000, 15392, 1194, 607,
	15392, 607, 10461, -1000, 13285, 699, -1000, 699, 699, -1000,
	208, 15392, 1108, 674, -1000, -1000, 244, -1000, 244, 724,
	675, 15392, -1000, 1190, 653, -1000, -1000, 608, 948, 606,
	-1000, -1000, 593, -1000, -1000, 15392, -1000, 126, 939, 838,
	-1000, 387, 15392, 15742, 1214, 1206, -1000, -1000, 1015, 1015,
	1015, 1015, 49, -1000, -1000, 1015, 1015, 1245, -1000, 939,
	-1000, 901, 214, -1000, -1000, -1000, 668, -1000, 265, 15392,
	-1000, -1000, -1000, 208, -1000, 571, 328, 508, -1000, -1000,
	109, -1000, -1000, -1000, -1000, 659, -1000, 55, -1000, -1000,
	-1000, 15392, 972, -1000, -1000, -1000, -1000, 91, 5523, 3708,
	656, -1000, -1000, 8711, 8711, -1000, -1000, -1000, -1000, 586,
	70, -168, -1000, -1000, 16092, 827, 586, 15392, -1000, -1000,
	-1000, -1000, -1000, 474, -1000, -1000, 15742, 208, 64, -1000,
	652, 946, -1000, 646, -1000, 15392, -1000, -1000, 969, 607,
	816, -1000, 1048, -162, -174, 811, -1000, -1000, -1000, 944,
	-1000, 208, 54, 208, 15392, -1000, 91, 1059, -164, -1000,
	1045, -1000, 15392, -1000, 563, 558, -1000, 605, -1000, 88,
	-1000, -166, 579, 171, -1000, -1000, 208, 85, -171, 980,
	-1000, -1000, -1000, -1000, -1000, -1000, 390, -1000, 939, -176,
	979, 899, 1234, -1000, -263, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 8711, 9061, -1000, -1000, 1243, -1000, 1226,
	260, 260, 185, 568, 1015, 586, -1000, -1000, -1000, 119,
	538, -1000, -1000, -1000, 482, -1000, 8711, -1000, -1000, -1000,
	-1000, -1000, 445, 390, -1000, 524, -1000, -265, 390, 179,
	-266, 433, 390, -1000,
}
var yyPgo = [...]int{

	0, 1533, 603, 539, 1527, 1526, 1524, 22, 16, 14,
	11, 1521, 1520, 1519, 1518, 1514, 1512, 24, 2, 1510,
	7, 1509, 3, 1491, 1489, 1486, 1480, 1478, 1477, 1474,
	1469, 1467, 1466, 1463, 1462, 1460, 1459, 1458, 1457, 1456,
	1454, 110, 1453, 1447, 1446, 95, 1445, 91, 1443, 1442,
	1441, 84, 92, 71, 62, 107, 1440, 1439, 66, 98,
	93, 1438, 54, 1437, 1435, 96, 1433, 1432, 1428, 75,
	1425, 1422, 1925, 1414, 82, 1413, 41, 26, 61, 1410,
	1407, 1405, 1401, 90, 513, 1400, 1399, 1398, 49, 1396,
	1394, 136, 1392, 77, 21, 27, 36, 44, 1388, 1097,
	29, 1387, 76, 1385, 1383, 1382, 1381, 86, 1378, 28,
	1377, 79, 10, 34, 42, 78, 1376, 37, 83, 52,
	50, 31, 80, 1375, 81, 72, 1373, 1372, 611, 1359,
	1357, 65, 1356, 1355, 58, 1354, 488, 100, 47, 1353,
	1352, 1351, 1349, 46, 73, 1348, 1347, 183, 232, 89,
	20, 1314, 40, 88, 1346, 32, 1345, 1725, 132, 43,
	64, 1341, 1336, 59, 1334, 1331, 1328, 1327, 1325, 1323,
	1322, 1311, 533, 1310, 1309, 1308, 56, 131, 1307, 1300,
	68, 53, 1296, 1295, 1294, 70, 45, 1293, 87, 51,
	1292, 1291, 1286, 1285, 38, 1284, 1283, 1279, 1278, 1277,
	57, 33, 1276, 39, 18, 30, 35, 9, 48, 1274,
	13, 1271, 25, 1269, 6, 1268, 19, 74, 4, 5,
	8, 1266, 1265, 1264, 0, 85, 97, 1261, 1245, 115,
}
var yyR1 = [...]int{

	0, 222, 223, 223, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 6,
	3, 4, 4, 5, 5, 7, 7, 44, 44, 8,
	9, 9, 9, 9, 226, 226, 67, 67, 65, 65,
	66, 66, 118, 118, 10, 10, 10, 10, 122, 122,
	125, 125, 125, 126, 126, 126, 126, 161, 161, 112,
	12, 12, 12, 12, 12, 12, 12, 12, 146, 146,
	23, 23, 24, 24, 24, 110, 110, 110, 11, 11,
	11, 11, 11, 17, 19, 19, 21, 21, 22, 20,
	20, 18, 18, 18, 18, 18, 18, 18, 216, 216,
	215, 214, 214, 213, 213, 212, 29, 196, 198, 198,
	197, 197, 197, 197, 186, 165, 165, 165, 165, 165,
	165, 165, 164, 164, 164, 164, 168, 168, 166, 166,
	166, 166, 166, 166, 166, 166, 166, 167, 167, 167,
	167, 167, 167, 167, 167, 169, 169, 169, 169, 169,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 171, 171, 171, 171, 171,
	171, 171, 171, 185, 185, 172, 172, 180, 180, 181,
	181, 181, 178, 178, 179, 179, 182, 182, 174, 175,
	183, 176, 176, 176, 177, 177, 177, 184, 184, 184,
	184, 173, 187, 187, 207, 207, 206, 206, 205, 205,
	205, 195, 195, 202, 202, 202, 202, 202, 190, 190,
	190, 189, 189, 191, 191, 194, 194, 204, 204, 203,
	188, 188, 208, 208, 208, 208, 208, 192, 192, 193,
	193, 193, 219, 220, 218, 218, 218, 218, 218, 199,
	199, 199, 200, 200, 200, 201, 201, 201, 221, 221,
	25, 25, 25, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 109, 109, 109, 27, 28, 28, 28, 28, 28,
	28, 28, 28, 144, 144, 217, 217, 217, 217, 217,
	211, 209, 209, 210, 210, 13, 30, 30, 14, 14,
	14, 14, 14, 15, 15, 31, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 56, 132, 132, 130,
	130, 133, 133, 131, 131, 131, 134, 134, 134, 135,
	135, 162, 162, 162, 33, 33, 38, 38, 39, 40,
	145, 145, 36, 36, 37, 37, 37, 37, 50, 50,
	227, 227, 35, 35, 34, 34, 34, 34, 16, 228,
	41, 42, 42, 43, 43, 43, 47, 47, 47, 45,
	45, 45, 46, 46, 53, 53, 52, 52, 54, 54,
	54, 54, 154, 154, 154, 153, 153, 57, 57, 58,
	58, 59, 59, 60, 60, 60, 60, 75, 75, 76,
	76, 76, 76, 76, 86, 86, 117, 117, 119, 119,
	61, 61, 61, 61, 62, 62, 63, 63, 64, 64,
	143, 143, 159, 159, 68, 68, 68, 70, 69, 69,
	69, 69, 71, 71, 73, 73, 72, 72, 74, 77,
	77, 77, 77, 78, 78, 55, 55, 55, 55, 55,
	55, 55, 129, 129, 80, 80, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 92, 92, 92, 92,
	92, 92, 81, 81, 81, 81, 81, 81, 81, 51,
	51, 93, 93, 93, 99, 94, 94, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 89,
	89, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 88, 88, 88, 88,
	88, 88, 88, 88, 88, 88, 88, 88, 88, 88,
	88, 88, 229, 229, 91, 90, 90, 90, 90, 90,
	90, 48, 48, 48, 48, 48, 160, 160, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 103, 103, 49, 49, 101, 101, 102, 104, 104,
	100, 100, 100, 83, 83, 83, 83, 83, 83, 83,
	83, 85, 85, 85, 105, 105, 106, 106, 107, 107,
	108, 108, 111, 113, 113, 113, 114, 114, 114, 114,
	115, 115, 115, 82, 82, 82, 82, 82, 82, 116,
	116, 116, 116, 120, 120, 95, 95, 97, 97, 96,
	98, 121, 121, 124, 124, 124, 124, 123, 123, 123,
	156, 156, 156, 127, 127, 136, 136, 137, 137, 128,
	128, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 142, 142, 141, 141, 141, 138, 138, 138, 139,
	139, 155, 155, 151, 151, 152, 152, 157, 157, 158,
	158, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 224,
	225, 147, 148, 148, 148,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 4, 6, 7, 5,
	10, 1, 3, 1, 3, 7, 8, 1, 1, 9,
	8, 7, 6, 6, 1, 1, 1, 3, 1, 3,
	1, 3, 0, 4, 3, 4, 5, 4, 1, 3,
	3, 2, 2, 2, 2, 2, 1, 1, 1, 0,
	2, 2, 11, 7, 9, 5, 5, 15, 0, 3,
	1, 1, 1, 1, 1, 0, 2, 2, 1, 1,
	1, 1, 1, 4, 5, 8, 1, 2, 5, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 0, 2, 1, 3, 3, 4, 4, 2, 4,
	1, 3, 3, 3, 3, 0, 2, 2, 2, 2,
	2, 2, 3, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 3,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 1,
	4, 4, 3, 3, 2, 4, 5, 2, 3, 4,
	2, 2, 3, 3, 3, 3, 3, 4, 1, 1,
	1, 1, 1, 6, 6, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 3, 0, 5, 0,
	3, 5, 0, 1, 0, 1, 1, 2, 2, 3,
	1, 0, 3, 3, 0, 2, 2, 2, 1, 2,
	1, 2, 5, 4, 0, 1, 1, 2, 2, 3,
	2, 0, 1, 2, 3, 3, 2, 2, 1, 1,
	1, 1, 1, 0, 1, 0, 1, 1, 3, 3,
	3, 1, 10, 11, 11, 12, 12, 1, 1, 0,
	2, 2, 3, 3, 1, 1, 2, 2, 2, 0,
	1, 3, 1, 2, 3, 1, 1, 1, 0, 2,
	1, 1, 1, 6, 10, 9, 7, 7, 7, 9,
	7, 12, 14, 7, 7, 9, 9, 10, 5, 6,
	8, 0, 1, 2, 4, 7, 5, 5, 5, 12,
	7, 5, 9, 0, 1, 1, 1, 1, 1, 1,
	7, 1, 3, 8, 8, 3, 3, 5, 4, 6,
	4, 4, 4, 3, 2, 3, 4, 4, 3, 6,
	6, 4, 4, 4, 4, 4, 3, 3, 2, 6,
	2, 3, 4, 3, 7, 6, 4, 2, 4, 3,
	4, 3, 3, 5, 2, 3, 3, 1, 1, 0,
	1, 1, 1, 0, 2, 2, 0, 2, 2, 0,
	2, 0, 1, 1, 2, 1, 1, 2, 1, 1,
	1, 1, 3, 3, 1, 1, 1, 1, 0, 3,
	1, 1, 2, 2, 2, 2, 3, 3, 2, 0,
	2, 0, 2, 1, 2, 2, 0, 1, 1, 0,
	1, 1, 0, 1, 0, 1, 1, 3, 1, 2,
	3, 5, 0, 1, 2, 1, 1, 0, 2, 1,
	3, 1, 1, 1, 3, 1, 3, 2, 6, 1,
	4, 6, 3, 2, 0, 3, 1, 3, 1, 3,
	4, 4, 4, 3, 2, 4, 0, 1, 0, 2,
	0, 1, 1, 1, 1, 2, 2, 1, 2, 3,
	2, 3, 2, 2, 2, 1, 1, 3, 3, 0,
	5, 5, 5, 0, 2, 1, 3, 3, 2, 3,
	1, 2, 0, 3, 1, 1, 3, 3, 4, 4,
	5, 3, 4, 5, 6, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 0,
	2, 1, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 2,
	2, 2, 2, 2, 3, 1, 1, 1, 1, 5,
	6, 4, 4, 3, 6, 6, 6, 8, 8, 8,
	8, 9, 4, 7, 5, 4, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	8, 8, 0, 2, 3, 4, 4, 4, 4, 4,
	4, 0, 3, 4, 7, 3, 1, 1, 2, 3,
	3, 1, 2, 2, 1, 2, 1, 2, 2, 1,
	2, 0, 1, 0, 2, 1, 2, 4, 0, 2,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 0, 3, 0, 2, 0, 3,
	1, 3, 2, 0, 1, 1, 0, 2, 4, 4,
	0, 2, 4, 2, 1, 3, 5, 4, 6, 1,
	3, 3, 5, 0, 5, 1, 3, 1, 2, 3,
	1, 1, 3, 3, 3, 3, 3, 1, 2, 1,
	1, 1, 1, 1, 1, 0, 2, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 0,
	1, 0, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -222, -1, -2, -6, -7, -8, -9, -10, -12,
	-25, -13, -14, -15, -31, -32, -33, -38, -39, -40,
	-36, -35, -34, -16, -3, -4, 6, 7, -44, 9,
	10, 29, -29, 117, -26, -27, -28, 120, 119, 156,
	121, 149, 52, 177, 178, 180, 181, -227, -145, 154,
	155, 30, 31, 123, -224, 8, 270, 118, 151, 150,
	25, 56, -223, 368, -107, 15, -43, 5, -41, -228,
	-41, -41, -41, -41, -41, -196, -198, 56, 92, -139,
	130, 74, 262, 126, -146, 127, -138, 176, 33, 137,
	136, 127, 127, 128, 130, 262, 126, 127, -72, -157,
	59, -150, 280, 140, 312, 313, 177, 188, 182, 216,
	204, 281, 314, 141, 202, 205, 249, 139, 315, 236,
	244, 68, 180, 258, 316, 152, 200, 193, 317, 289,
	191, 27, 318, 246, 221, 319, 285, 192, 245, 123,
	320, 143, 137, 321, 222, 226, 322, 250, 323, 324,
	325, 186, 187, 326, 252, 220, 138, 32, 282, 37,
	161, 253, 224, 327, 219, 214, 328, 329, 330, 331,
	218, 185, 213, 41, 228, 227, 229, 248, 207, 332,
	333, 334, 144, 335, 194, 18, 336, 337, 338, 339,
	340, 256, 155, 341, 159, 342, 343, 344, 345, 346,
	347, 247, 223, 225, 134, 163, 284, 348, 254, 190,
	349, 145, 160, 154, 257, 146, 350, 351, 352, 353,
	354, 355, 356, 181, 357, 358, 359, 360, 170, 251,
	260, 40, 233, 361, 184, 136, 362, 178, 167, 239,
	211, 162, 363, 364, 198, 199, 217, 183, 212, 179,
	164, 156, 365, 259, 234, 286, 206, 203, 168, 366,
	130, 165, 166, 367, 240, 241, 169, 283, 255, 201,
	235, 127, 110, 205, 249, 117, 237, 238, 246, -190,
	247, 163, -162, 127, -130, 236, 240, 241, 169, 59,
	128, 129, 32, 251, 250, 242, -157, 179, -50, 121,
	157, -72, -147, -147, -147, 239, 239, -147, -2, -128,
	130, 241, 132, -114, 17, 16, -5, -3, -224, 6,
	20, 21, -47, 42, 43, -42, -54, 101, -55, -157,
	-79, 76, -84, 28, 59, -150, 23, -83, -80, -100,
	-98, -99, 110, 111, 112, 99, 100, 107, 77, 113,
	-89, -87, -88, -90, 61, 60, 69, 62, 63, 64,
	65, 70, 71, 72, -151, -96, -224, 46, 47, 126,
	271, 272, 273, 274, 279, 147, 275, 79, 36, 261,
	269, 268, 267, 265, 266, 263, 264, 277, 278, 133,
	262, 105, 270, -128, -128, 11, -65, -66, -72, -74,
	-157, -121, -161, 179, -124, 251, 250, -100, -123, -151,
	-157, 249, 205, 248, -197, 92, -186, 59, -72, 128,
	-72, 270, -137, 133, -137, 164, -137, 84, -30, -72,
	-136, 133, -151, 59, -150, -136, -136, -136, -72, 114,
	-72, 59, 29, -148, -224, -152, -151, -149, 122, 148,
	287, 75, 22, 24, 231, 78, 110, 16, 79, 109,
	271, 117, 50, 288, 263, 264, 261, 273, 274, 262,
	237, 28, 10, 290, 25, 150, 21, 103, 119, 82,
	83, 153, 23, 151, 72, 147, 293, 19, 53, 11,
	13, 294, 295, 14, 133, 132, 94, 128, 48, 8,
	113, 26, 91, 44, 296, 34, 297, 298, 299, 300,
	46, 92, 17, 265, 266, 30, 301, 279, 158, 105,
	51, 38, 76, 302, 303, 70, 304, 73, 54, 74,
	15, 49, 305, 306, 307, 308, 93, 120, 270, 47,
	309, 126, 6, 276, 29, 149, 45, 310, 127, 81,
	277, 278, 131, 71, 5, 33, 31, 9, 52, 55,
	267, 268, 269, 36, 80, 12, 311, 262, 126, 59,
	163, 127, 164, 130, -148, -148, -192, 11, 94, -148,
	167, 168, -148, -133, -132, 244, 245, 239, 243, 12,
	-56, 92, 168, 239, 166, -148, -37, -2, -9, -7,
	-8, -2, 84, -147, -147, -225, 58, 127, -72, 117,
	119, 122, 54, -115, 19, 30, -55, -157, -108, -111,
	-55, -107, -2, -41, 38, -45, 20, 21, 67, 11,
	-154, 75, 74, 91, -153, 22, -151, 61, 114, -55,
	-81, 94, 76, 92, 93, 78, 96, 95, 106, 99,
	100, 101, 102, 103, 104, 105, 97, 98, 109, 84,
	85, 86, 87, 88, 89, 90, -129, -224, -99, -224,
	115, 116, -84, -84, -84, -84, -84, -84, -84, -84,
	-224, -2, -94, -55, -224, -224, -224, -224, -224, -224,
	-224, -224, -224, -224, -224, -103, -55, -224, -229, -91,
	-224, -229, -91, -229, -91, -229, -224, -229, -91, -229,
	-91, -229, -229, -91, -224, -224, -224, -224, -224, -224,
	-73, 26, -72, -58, -59, -60, -61, -75, -99, -224,
	-72, -72, -65, -226, 57, 11, 55, -226, 57, 114,
	57, -121, 179, -122, -125, 252, 254, 84, -156, -151,
	61, 28, 114, 29, 58, 57, -72, -164, -168, -170,
	-169, -171, -166, -167, 202, 205, 209, 207, 203, 208,
	110, 206, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 29, 152, 198, 199, 200, 201, 222,
	223, 224, 225, 226, 227, 228, 229, 182, 204, 281,
	183, 184, 185, 186, 187, 188, 190, 191, 192, 193,
	194, 195, 196, -151, 22, 130, 59, 76, 59, 59,
	-72, 59, 57, 131, -65, 23, 54, -67, -72, 59,
	59, -158, -157, -149, -148, -148, -137, -137, -148, -148,
	-72, -148, -72, -72, -148, -148, 11, -131, 11, 94,
	-55, -84, -135, 92, 54, 59, -72, -148, 165, 165,
	127, 127, 170, -72, 9, 94, 57, 18, 114, 57,
	-113, 24, 25, -114, -225, -47, -85, -151, 62, 65,
	-46, 45, -72, -55, -55, -92, 70, 76, 71, 72,
	-153, 101, -158, -152, -149, -84, -93, -96, -99, 66,
	94, 92, 93, 78, -84, -84, -84, -84, -84, -84,
	-84, -84, -84, -84, -84, -84, -84, -84, -84, -160,
	59, 61, 59, -83, -83, -151, -45, -225, 57, -225,
	-2, -52, -54, -52, -225, -55, -55, -100, 61, -52,
	-100, 61, -52, -52, -52, -45, -101, -102, 80, -100,
	-225, -84, -151, -151, -52, -53, -52, -52, -52, -118,
	159, -72, 29, 57, -68, -70, -69, -71, 44, 48,
	50, 45, 46, 47, 51, -143, 22, -58, -224, -76,
	159, -77, 22, -159, 52, 132, 53, -157, 61, -118,
	55, -58, -72, -58, -74, -157, 101, -124, -122, 57,
	253, 255, 256, 54, 73, -55, -177, 109, -152, -158,
	-199, -200, -201, -152, 61, 62, -186, -187, -188, -202,
	142, -208, 134, 136, 33, -189, 143, 128, 34, 58,
	-165, -178, 234, -172, 56, -172, -172, 210, 202, 205,
	203, -172, -172, -172, -172, -172, -176, 205, -176, -176,
	-176, -176, 203, 56, 56, -172, -172, -172, -180, 56,
	-180, 197, -180, -181, 56, -181, -181, -181, -155, 55,
	-112, -72, -148, 23, -148, -23, 173, 148, -72, -72,
	-72, 57, 59, 59, -193, 11, 94, -72, -86, 22,
	-157, -157, -51, 153, 61, -72, -140, 122, 119, 120,
	124, 125, -211, 118, 231, 205, 68, 28, 15, 271,
	159, 286, 59, 160, -72, -72, -72, -72, -72, 122,
	119, 40, -55, -55, -111, -115, -127, 19, 11, 36,
	36, -52, 70, 71, 72, 114, -224, -93, -84, -84,
	-84, -51, 75, -225, -53, -55, -225, 57, -225, -225,
	57, 55, 22, 11, 11, -225, 11, 11, -225, -225,
	-225, -52, -104, -102, 82, -55, -225, -225, 57, 57,
	-225, -225, -225, -225, -82, 29, 36, -2, -224, -224,
	-121, -59, -60, -60, -59, -60, 44, 44, 44, 49,
	44, 49, 44, -69, -157, -225, -224, 304, -159, -77,
	128, 128, 128, -78, 12, -58, -78, -78, 114, -125,
	-126, 257, 254, 260, 59, 61, 114, 57, -201, 84,
	56, 59, 34, -189, -189, -194, 59, -194, 34, -182,
	-174, -175, -183, -184, -173, 70, 76, 28, 54, 231,
	134, 34, 33, 68, -179, 235, 62, -176, -176, -172,
	-172, -172, 210, -172, -176, -177, 29, -177, -177, -177,
	-177, -176, -185, 61, -185, 62, -180, 62, 54, -151,
	-2, 22, -24, 8, 9, 10, 131, -148, -72, -148,
	-148, -78, 59, 59, -131, -134, 92, 12, 304, -84,
	-147, -144, -217, -189, -221, -188, 135, 139, 142, 143,
	134, 159, -144, -217, 142, -189, 143, 135, -141, -189,
	131, 22, -144, -144, 159, -216, 55, 165, 231, 165,
	41, -72, -57, 11, 101, -152, -53, -51, 75, -84,
	-225, -54, -163, 110, 202, 152, 200, 193, 220, 207,
	233, 198, 234, -160, -163, -84, -84, -84, -84, 280,
	-107, 83, -55, 81, -84, -84, -120, 54, -121, -95,
	-97, -96, -224, -2, -116, -151, -119, -151, -78, -63,
	-62, 54, 55, -64, 54, -62, 44, 44, -119, -84,
	-77, -224, -224, -224, -107, -55, -78, 254, 258, 259,
	-200, -201, -204, -203, -151, -208, -194, -194, 56, 70,
	-84, 9, 34, 34, 61, 58, -177, -177, -176, -172,
	-177, 59, 110, -177, 58, 57, 58, 57, 58, 57,
	-72, -112, -112, 54, -72, -134, 61, -55, -84, 56,
	-186, -147, -194, -138, 59, 59, -147, 59, -151, 34,
	59, -72, -151, -186, 59, -151, -214, 283, -215, 59,
	-151, -151, -151, -78, -58, -225, -84, -225, -172, -172,
	-172, -181, -172, 187, -172, 187, -225, -225, 19, 19,
	19, 19, -224, -49, 276, -55, 57, 57, 27, -120,
	57, -225, -225, -225, 57, 114, -225, 57, -107, -55,
	56, -55, -225, -77, -143, -117, -151, -117, -117, -114,
	58, 57, -172, -117, -88, -177, -176, 61, -176, 62,
	62, 56, -2, -72, -186, -109, 147, 148, -155, -191,
	-189, 59, -142, 131, 22, 131, -109, -186, 26, -213,
	-212, -152, 56, 55, -105, 13, -176, 59, -84, -84,
	-84, -84, -84, -225, 61, -84, -84, 34, -97, 36,
	-2, -224, -151, -151, -151, -114, -117, -76, -159, 57,
	-225, -225, -225, -206, -205, 55, 138, 68, -203, -113,
	58, -177, -177, 58, 58, -204, -112, 19, 58, -147,
	59, 56, -194, 59, -151, -147, -109, -224, 57, 84,
	-117, -72, -106, 14, 16, -225, -225, -225, -225, -48,
	94, 283, -225, -225, 9, -95, -2, 114, 58, -77,
	-151, -205, 59, -195, 84, 61, 145, 58, 171, -147,
	-204, -155, -147, -209, -210, 159, -212, -201, 58, -55,
	-94, -225, 281, 51, 284, -121, -225, -151, 62, -72,
	-207, -206, 172, 58, 56, -225, 57, -151, -216, 41,
	282, 285, 56, -110, 174, 175, -207, -204, -210, 36,
	-214, 41, -117, -112, 59, 59, 58, 161, 283, 58,
	-11, -17, -10, -7, -8, -9, 177, -207, 162, 284,
	-219, -220, 54, -112, -20, -18, -2, -7, -8, -9,
	-10, -19, -17, 79, -224, 285, -220, 54, -219, 54,
	10, 9, 368, -55, -84, 158, -218, 146, 141, 144,
	29, -218, 83, -18, -21, -22, 80, -225, -225, 140,
	28, 70, 83, 82, -22, -55, 79, -20, 81, 368,
	-20, 83, 368, 79,
}
var yyDef = [...]int{

	25, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 658, 0, 409, 409, 409, 409,
	409, 409, 0, -2, 280, 281, 282, 0, 0, 0,
	0, -2, 385, 386, 0, 388, 389, 398, -2, 1031,
	1031, 0, 0, 1031, 0, 37, 38, 709, 401, 390,
	391, 1029, 1, 3, 666, 0, 0, 413, 416, 411,
	0, 709, 709, 0, 0, 70, 71, 0, 0, 0,
	0, 0, 707, 707, 0, 707, 730, 0, 726, 727,
	728, 0, 705, 0, 705, 705, 705, 0, 334, 486,
	737, 738, 860, 861, 862, 863, 864, 865, 866, 867,
	868, 869, 870, 871, 872, 873, 874, 875, 876, 877,
	878, 879, 880, 881, 882, 883, 884, 885, 886, 887,
	888, 889, 890, 891, 892, 893, 894, 895, 896, 897,
	898, 899, 900, 901, 902, 903, 904, 905, 906, 907,
	908, 909, 910, 911, 912, 913, 914, 915, 916, 917,
	918, 919, 920, 921, 922, 923, 924, 925, 926, 927,
	928, 929, 930, 931, 932, 933, 934, 935, 936, 937,
	938, 939, 940, 941, 942, 943, 944, 945, 946, 947,
	948, 949, 950, 951, 952, 953, 954, 955, 956, 957,
	958, 959, 960, 961, 962, 963, 964, 965, 966, 967,
	968, 969, 970, 971, 972, 973, 974, 975, 976, 977,
	978, 979, 980, 981, 982, 983, 984, 985, 986, 987,
	988, 989, 990, 991, 992, 993, 994, 995, 996, 997,
	998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007,
	1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017,
	1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027,
	1028, 0, 0, 0, 1032, 0, 1032, 1032, 348, 0,
	350, 1032, 0, 1032, 0, 357, 0, 0, 364, 1032,
	238, 239, 240, 382, 383, 370, 384, 387, 0, 0,
	0, 402, 403, 404, 405, 1031, 1031, 408, 31, 0,
	0, 0, 710, 670, 0, 0, 658, 33, 0, 409,
	414, 415, 419, 417, 418, 410, 0, 428, 432, 0,
	495, 0, 500, 502, -2, -2, 0, 537, 538, 539,
	540, 541, 0, 0, 0, 0, 0, 0, 0, 0,
	565, 566, 567, 568, 643, 644, 645, 646, 647, 648,
	649, 650, 504, 505, 640, 690, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 631, 0, 602,
	602, 602, 602, 602, 602, 602, 602, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 48, 50,
	486, 54, 0, 1007, 691, -2, -2, 0, 0, 640,
	0, -2, 873, -2, 0, 0, 120, 0, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 325, 0,
	0, 0, 0, 733, 734, 0, 0, 0, 333, 0,
	335, 1032, 1032, 338, 1033, 1034, 735, 736, 741, 742,
	743, 744, 745, 746, 747, 748, 749, 750, 751, 752,
	753, 754, 755, 756, 757, 758, 759, 760, 761, 762,
	763, 764, 765, 766, 767, 768, 769, 770, 771, 772,
	773, 774, 775, 776, 777, 778, 779, 780, 781, 782,
	783, 784, 785, 786, 787, 788, 789, 790, 791, 792,
	793, 794, 795, 796, 797, 798, 799, 800, 801, 802,
	803, 804, 805, 806, 807, 808, 809, 810, 811, 812,
	813, 814, 815, 816, 817, 818, 819, 820, 821, 822,
	823, 824, 825, 826, 827, 828, 829, 830, 831, 832,
	833, 834, 835, 836, 837, 838, 839, 840, 841, 842,
	843, 844, 845, 846, 847, 848, 849, 850, 851, 852,
	853, 854, 855, 856, 857, 858, 859, 707, 707, 1032,
	1032, 0, 1032, 0, 346, 347, 0, 257, 258, 351,
	1032, 1032, 353, 0, 373, 371, 372, 367, 368, 0,
	359, 0, 379, 361, 362, 365, 392, -2, 395, 396,
	397, -2, 0, 406, 407, 32, 1030, 0, 1032, 0,
	0, 0, 0, 26, 0, 0, 667, 0, 659, 660,
	663, 666, 31, 416, 0, 422, 420, 421, 412, 0,
	429, 0, 0, 0, 433, 0, 435, 436, 0, 498,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 522,
	523, 524, 525, 526, 527, 528, 501, 0, 515, 0,
	0, 0, 557, 558, 559, 560, 561, 562, 563, 0,
	419, 31, 0, 535, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 419, 0, 632, 0, 586, 594,
	0, 587, 595, 588, 596, 589, 0, 590, 597, 591,
	598, 592, 593, 599, 0, 0, 0, 424, 0, 0,
	52, 0, 485, 0, 439, 441, 442, 443, -2, 0,
	489, -2, 0, 0, 0, 44, 45, 0, 0, 0,
	0, 55, 1007, 57, 58, 0, 0, 0, 214, 700,
	701, 702, 0, 698, 269, 0, 0, 125, 202, 133,
	134, 135, 195, 137, 195, 195, 0, 195, 195, 195,
	195, 195, 211, 211, 211, 211, 211, 178, 179, 180,
	181, 182, 0, 0, 155, 195, 195, 195, 159, 185,
	186, 187, 188, 189, 190, 191, 192, 138, 139, 140,
	141, 142, 143, 144, 145, 146, 197, 197, 197, 199,
	199, 199, 199, 731, 69, 0, 1032, 0, 1032, 0,
	116, 79, 0, 0, 328, 706, 0, 330, 46, 331,
	332, 487, 739, 740, 336, 337, 0, 0, 341, 342,
	343, 344, 345, 259, 352, 356, 0, 454, 0, 0,
	358, 529, 360, 0, 0, 399, 0, 304, 0, 0,
	0, 0, 0, 0, 671, 0, 0, 0, 0, 0,
	662, 664, 665, 670, 34, 419, 0, 651, 0, 0,
	0, 423, 29, 496, 497, 499, 516, 0, 518, 520,
	434, 430, 0, 641, -2, 506, 507, 531, 532, 533,
	0, 0, 0, 0, 529, 511, 0, 542, 543, 544,
	545, 546, 547, 548, 549, 550, 551, 552, 553, 556,
	616, 617, 0, 554, 555, 564, 424, 534, 0, 689,
	31, 0, 426, 0, 573, 0, 0, 539, 643, 0,
	539, 643, 0, 0, 0, 0, 638, 635, 0, 0,
	603, 0, 0, 0, 0, 0, 425, 0, 0, 0,
	0, 484, 0, 0, 0, 0, 0, 0, 474, 0,
	0, 477, 0, 0, 0, 0, 471, 0, 0, 447,
	952, 449, 0, 489, 0, 0, 0, 472, 473, 493,
	0, 493, 49, 493, 51, 0, 488, 692, 56, 0,
	0, 61, 62, 693, 694, 695, 696, 0, 641, 0,
	117, 270, 272, 275, 276, 277, 121, 122, 123, 0,
	0, 251, 0, 0, 245, 245, 0, 241, 242, 119,
	124, 204, 203, 136, 0, 211, 211, 195, 195, 195,
	195, 164, 211, 167, 170, 171, 214, 0, 214, 214,
	214, 214, 211, 0, 0, 156, 157, 158, 147, 0,
	148, 197, 150, 151, 0, 152, 153, 154, 0, 0,
	0, 0, 75, 708, 76, 0, 80, 81, 0, 326,
	1032, 0, 1032, 1032, 493, 0, 0, 373, 376, 0,
	374, 375, 366, 0, 380, 363, 1031, -2, 313, 723,
	313, 313, 298, 711, 712, 713, 714, 715, 716, 717,
	718, 719, 720, 0, 108, 306, 308, 307, 311, 0,
	0, 0, 668, 669, 661, 27, 0, 703, 704, 652,
	653, 437, 517, 519, 521, 0, 424, 508, 529, 512,
	0, 509, 0, 503, 0, 536, -2, 0, 571, 572,
	0, 0, 0, 0, 0, 609, 0, 0, 610, 0,
	582, 658, 0, 636, 0, 0, 585, 604, 0, 0,
	605, 606, 607, 608, 683, 0, 0, -2, 0, 0,
	493, 440, 466, 468, 0, 463, 475, 476, 478, 0,
	480, 0, 482, 483, 444, 446, 0, 0, 489, 453,
	0, 0, 0, 658, 0, 493, 42, 43, 0, 59,
	60, 0, 0, 66, 215, 216, 0, 0, 273, 0,
	0, 0, 233, 245, 245, 236, 246, 237, 0, 126,
	127, 128, 129, 130, 131, 206, 0, 0, 0, 210,
	0, 218, 220, 0, 132, 205, 0, 214, 214, 211,
	162, 163, 195, 168, 214, 172, 0, 173, 174, 175,
	176, 214, 0, 193, 0, 0, 149, 0, 0, 732,
	-2, 69, 0, 82, 83, 84, 0, 329, 47, 339,
	340, 349, 260, 261, 376, 355, 0, 0, 0, 530,
	283, 0, 1031, 245, 0, 299, 314, 315, 316, 317,
	318, 319, 0, 1031, 316, 0, 317, 0, 0, 0,
	724, 725, 0, 0, 0, 111, 0, 0, 0, 0,
	672, 28, 493, 0, 431, 642, 0, 510, 0, 513,
	569, 427, 0, 195, 195, 621, 195, 199, 624, 195,
	626, 195, 629, 0, 0, 0, 0, 0, 0, 0,
	633, 584, 639, 0, 0, 0, 35, 0, 683, 673,
	685, 687, 0, 31, 0, 679, 0, 458, 658, 460,
	467, 0, 0, 461, 0, 462, 479, 481, 0, -2,
	452, 0, 0, 0, 666, 494, 41, 63, 64, 65,
	271, 274, 0, 247, 195, 250, 234, 235, 0, 207,
	208, 0, 217, 219, 221, 196, 160, 161, 214, 169,
	165, 212, 213, 177, 211, 0, 211, 0, 200, 0,
	0, 73, 0, 0, 327, 354, 377, 378, 455, 0,
	301, 286, 731, 243, 279, 287, 288, 293, 294, 0,
	0, 290, 0, 301, 0, 0, 305, 0, 109, 110,
	0, 0, 310, 654, 438, 570, 514, 574, 618, 211,
	622, 623, 625, 627, 628, 630, 576, 575, 0, 0,
	0, 0, 0, 0, 0, 637, 0, 0, 0, 36,
	0, 688, -2, 0, 0, 0, 53, 0, 666, 464,
	0, 469, 489, 450, 0, 0, 456, 0, 0, 40,
	223, 0, 663, 0, 209, 166, 214, 194, 214, 0,
	0, 0, -2, 0, 0, 1031, 302, 0, 0, 245,
	244, 300, 0, 721, 722, 0, 1031, 301, 0, 112,
	113, 0, 0, 0, 656, 0, 619, 620, 0, 0,
	0, 0, 611, 583, 634, 0, 0, 0, 686, 0,
	-2, 0, 681, 680, 459, 39, 0, 448, 489, 0,
	490, 491, 492, 222, 226, 0, 231, 0, 248, 249,
	0, 183, 184, 198, 201, 0, 74, 0, 1031, 285,
	303, 0, 731, 289, 295, 296, 1031, 0, 0, 0,
	0, 312, 30, 0, 0, 577, 579, 578, 580, 0,
	0, 0, 600, 601, 0, 676, 31, 0, 465, 451,
	457, 227, 228, 0, 232, 230, 0, 224, 0, 284,
	0, 0, 297, 0, 321, 0, 114, 115, 108, 657,
	655, 581, 0, 0, 0, 684, -2, 682, 229, 0,
	72, 225, 85, 224, 0, 320, 0, 0, 111, 612,
	0, 615, 0, 69, 0, 0, 291, 0, 322, 0,
	309, 613, 0, 0, 86, 87, 224, 0, 0, 252,
	69, 88, 89, 90, 91, 92, 0, 292, 0, 0,
	253, 254, 0, 77, 0, 99, -2, 102, 103, 104,
	105, 106, 107, 0, 0, 614, 255, 0, 256, 0,
	0, 0, 0, 0, 0, 0, 262, 264, 265, 0,
	0, 263, 93, 100, 0, 96, 0, 323, 324, 266,
	267, 268, 0, 0, 97, 0, 94, 0, 0, 0,
	0, 0, 98, 95,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 77, 3, 3, 3, 104, 96, 3,
	56, 58, 101, 99, 57, 100, 114, 102, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 368,
	85, 84, 86, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 106, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 95, 3, 107,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 78, 79, 80, 81, 82, 83, 87, 88,
	89, 90, 91, 92, 93, 94, 97, 98, 103, 105,
	108, 109, 110, 111, 112, 113, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:347
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:352
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:353
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:357
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:381
		{
			setParseTree(yylex, nil)
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:387
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 27:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:395
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 28:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:399
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 29:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:405
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 30:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:412
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:418
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:422
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:428
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:432
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 35:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:439
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].setExprs)
			yyVAL.statement = ins
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:451
		{
			cols := make(Columns, 0, len(yyDollar[7].setExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].setExprs))
			for _, updateList := range yyDollar[7].setExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].setExprs)}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:463
		{
			yyVAL.str = InsertStr
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:467
		{
			yyVAL.str = ReplaceStr
		}
	case 39:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:473
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].setExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:479
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:483
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:487
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:491
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:496
		{
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:497
		{
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:501
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName.ToViewName()}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:505
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName.ToViewName())
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:511
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:515
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:521
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:525
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:530
		{
			yyVAL.partitions = nil
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:534
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:540
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:544
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:548
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:552
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:558
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:562
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:568
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:572
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:576
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:582
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:586
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:590
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:594
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:600
		{
			yyVAL.str = SessionStr
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:604
		{
			yyVAL.str = GlobalStr
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:609
		{
			yyVAL.int = yyPosition(yylex)
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:615
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			if len(yyDollar[1].ddl.TableSpec.Constraints) > 0 {
				yyDollar[1].ddl.ConstraintAction = AddStr
			}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:623
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 72:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:629
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: yyDollar[4].colIdent, Using: yyDollar[5].colIdent, Type: yyDollar[2].str, Columns: yyDollar[9].indexColumns, Options: yyDollar[11].indexOptions}}
		}
	case 73:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:633
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[3].tableName.ToViewName(), ViewExpr: yyDollar[6].selStmt, SubStatementPositionStart: yyDollar[5].int, SubStatementPositionEnd: yyDollar[7].int - 1}
		}
	case 74:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:637
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[5].tableName.ToViewName(), ViewExpr: yyDollar[8].selStmt, SubStatementPositionStart: yyDollar[7].int, SubStatementPositionEnd: yyDollar[9].int - 1, OrReplace: true}
		}
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:641
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:645
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 77:
		yyDollar = yyS[yypt-15 : yypt+1]
//line sql.y:649
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[8].tableName, TriggerSpec: &TriggerSpec{Name: string(yyDollar[4].bytes), Time: yyDollar[5].str, Event: yyDollar[6].str, Order: yyDollar[12].triggerOrder, Body: yyDollar[14].statement}}
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:654
		{
			yyVAL.empty = struct{}{}
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:658
		{
			yyVAL.empty = struct{}{}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:664
		{
			yyVAL.str = BeforeStr
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:668
		{
			yyVAL.str = AfterStr
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:674
		{
			yyVAL.str = InsertStr
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:678
		{
			yyVAL.str = UpdateStr
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:682
		{
			yyVAL.str = DeleteStr
		}
	case 85:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:687
		{
			yyVAL.triggerOrder = nil
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:691
		{
			yyVAL.triggerOrder = &TriggerOrder{PrecedesOrFollows: FollowsStr, OtherTriggerName: string(yyDollar[2].bytes)}
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:695
		{
			yyVAL.triggerOrder = &TriggerOrder{PrecedesOrFollows: PrecedesStr, OtherTriggerName: string(yyDollar[2].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:701
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:711
		{
			yyVAL.statement = &BeginEndBlock{Statements: yyDollar[2].statements}
		}
	case 94:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:717
		{
			yyVAL.statement = &CaseStatement{Expr: yyDollar[2].expr, Cases: yyDollar[3].caseStatementCases}
		}
	case 95:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:721
		{
			yyVAL.statement = &CaseStatement{Expr: yyDollar[2].expr, Cases: yyDollar[3].caseStatementCases, Else: yyDollar[5].statements}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:727
		{
			yyVAL.caseStatementCases = []CaseStatementCase{yyDollar[1].caseStatementCase}
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:731
		{
			yyVAL.caseStatementCases = append(yyVAL.caseStatementCases, yyDollar[2].caseStatementCase)
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:737
		{
			yyVAL.caseStatementCase = CaseStatementCase{Case: yyDollar[2].expr, Statements: yyDollar[4].statements}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:743
		{
			yyVAL.statements = Statements{yyDollar[1].statement}
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:747
		{
			yyVAL.statements = append(yyVAL.statements, yyDollar[3].statement)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:753
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:764
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:768
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:774
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 111:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:779
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:784
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:790
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:795
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:801
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:807
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName, IfNotExists: ne}
			setDDL(yylex, yyVAL.ddl)
		}
	case 117:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:818
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:825
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:829
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:835
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:840
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:844
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:848
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:854
		{
			if err := yyDollar[2].columnType.merge(yyDollar[3].columnType); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 125:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:863
		{
			yyVAL.columnType = ColumnType{}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:867
		{
			opt := ColumnType{NotNull: yyDollar[2].boolVal, sawnull: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:876
		{
			opt := ColumnType{Default: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:885
		{
			opt := ColumnType{OnUpdate: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:894
		{
			opt := ColumnType{Autoincrement: yyDollar[2].boolVal, sawai: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:903
		{
			opt := ColumnType{KeyOpt: yyDollar[2].colKeyOpt}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:912
		{
			opt := ColumnType{Comment: yyDollar[2].sqlVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:923
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:934
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:939
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:945
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:949
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:953
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:957
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:961
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:965
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:969
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:973
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:977
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:983
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:989
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:995
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1001
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1007
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1013
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1019
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1025
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1033
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1037
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1041
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1045
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1049
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 160:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1055
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 161:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1059
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1063
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1067
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1071
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 165:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1075
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 166:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1079
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1083
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1087
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1091
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Length: yyDollar[4].sqlVal}
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1095
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1099
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1103
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1107
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1111
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1115
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1119
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 177:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1123
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1127
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1131
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1135
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1139
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1143
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 183:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1147
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 184:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1152
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1158
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1162
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1166
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1170
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1174
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1178
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1182
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1186
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1192
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[1].bytes))
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1197
		{
			yyVAL.strs = append(yyDollar[1].strs, string(yyDollar[3].bytes))
		}
	case 195:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1202
		{
			yyVAL.sqlVal = nil
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1206
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 197:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1211
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 198:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1215
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 199:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1223
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1227
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 201:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1233
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 202:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1241
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1245
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 204:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1250
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1254
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1261
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1265
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1271
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1277
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1283
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 211:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1288
		{
			yyVAL.str = ""
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1292
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1296
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 214:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1301
		{
			yyVAL.str = ""
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1305
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1309
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1315
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1319
		{
			yyVAL.colKeyOpt = colKey
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1323
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1327
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1333
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 222:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1339
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1343
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 224:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1348
		{
			yyVAL.indexOptions = nil
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1352
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1358
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1362
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1368
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1372
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1377
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1383
		{
			yyVAL.str = ""
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1387
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1393
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1397
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1401
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1405
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1409
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1415
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1419
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1423
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1429
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1433
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 243:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1438
		{
			yyVAL.str = ""
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1442
		{
			yyVAL.str = yyDollar[1].str
		}
	case 245:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1447
		{
			yyVAL.str = ""
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1451
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1457
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1461
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1467
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal, Order: yyDollar[3].str}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1473
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1477
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 252:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1484
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 253:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1488
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 254:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1492
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 255:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1496
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 256:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1500
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[12].ReferenceAction, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1506
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1510
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 259:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1515
		{
			yyVAL.str = ""
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1519
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1523
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1529
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1535
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1541
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1545
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1549
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1553
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1557
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 269:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1562
		{
			yyVAL.str = ""
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1566
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1570
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1578
		{
			yyVAL.str = yyDollar[1].str
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1582
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1586
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1592
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1596
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1600
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 278:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1605
		{
			yyVAL.str = ""
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1609
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 283:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1620
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 284:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1624
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			ddl.Column = yyDollar[8].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 285:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1631
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 286:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1638
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 287:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1642
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: DropStr, Column: NewColIdent(string(yyDollar[7].bytes)), Table: yyDollar[4].tableName}
		}
	case 288:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1646
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 289:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1650
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: RenameStr, Table: yyDollar[4].tableName, Column: NewColIdent(string(yyDollar[7].bytes)), ToColumn: NewColIdent(string(yyDollar[9].bytes))}
		}
	case 290:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1654
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 291:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1659
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[7].str), Using: yyDollar[8].colIdent, Columns: yyDollar[10].indexColumns, Options: yyDollar[12].indexOptions}}
		}
	case 292:
		yyDollar = yyS[yypt-14 : yypt+1]
//line sql.y:1663
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[9].str), Type: yyDollar[7].str, Using: yyDollar[10].colIdent, Columns: yyDollar[12].indexColumns, Options: yyDollar[14].indexOptions}}
		}
	case 293:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1667
		{
			yyVAL.statement = &DDL{Action: AlterStr, ConstraintAction: DropStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{{Name: string(yyDollar[7].bytes)}}}}
		}
	case 294:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1672
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[7].colIdent}}
		}
	case 295:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1676
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: RenameStr, FromName: yyDollar[7].colIdent, ToName: yyDollar[9].colIdent}}
		}
	case 296:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1680
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ModifyStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 297:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1687
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ChangeStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, Column: NewColIdent(string(yyDollar[7].bytes)), ColumnOrder: yyDollar[9].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			yyVAL.statement = ddl
		}
	case 298:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1693
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 299:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1697
		{
			ddl := &DDL{Action: AlterStr, ConstraintAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddConstraint(yyDollar[6].constraintDefinition)
			yyVAL.statement = ddl
		}
	case 300:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1703
		{
			yyVAL.statement = &DDL{Action: AlterStr, ConstraintAction: DropStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{{Name: string(yyDollar[8].bytes), Details: &ForeignKeyDefinition{}}}}}
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1709
		{
			yyVAL.columnOrder = nil
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1713
		{
			yyVAL.columnOrder = &ColumnOrder{First: true}
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1717
		{
			yyVAL.columnOrder = &ColumnOrder{AfterColumn: NewColIdent(string(yyDollar[2].bytes))}
		}
	case 304:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1723
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 305:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1729
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 306:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1741
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 307:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1751
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 308:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1755
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 309:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1759
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 310:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1772
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 311:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1782
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 312:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1786
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1799
		{
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1801
		{
		}
	case 320:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1812
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1818
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1822
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 323:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1828
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 324:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1832
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1838
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1844
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 327:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1848
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1856
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 329:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1864
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[3].colIdent}}
		}
	case 330:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1868
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromViews: yyDollar[4].tableNames, IfExists: exists}
		}
	case 331:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1876
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1880
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1886
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1890
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1895
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 336:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1901
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 337:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1906
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1910
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 339:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1914
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 340:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1918
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 341:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1923
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 342:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1927
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1931
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 344:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1935
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 345:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1939
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1943
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1947
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1951
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 349:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1955
		{
			yyVAL.statement = &Show{Type: IndexStr, Table: yyDollar[4].tableName, Database: yyDollar[5].str, ShowIndexFilterOpt: yyDollar[6].expr}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1959
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1963
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 352:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1967
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1971
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 354:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1975
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 355:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1980
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[6].showFilter, AsOf: yyDollar[5].expr}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 356:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1990
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1994
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 358:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1998
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2004
		{
			// Cannot dereference $3 directly, or else the parser stackcannot be pooled. See yyParsePooled
			cmp := yyDollar[3].expr.(*ComparisonExpr)
			cmp.Left = &ColName{Name: NewColIdent("collation")}
			var ex Expr = cmp
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &ex}
		}
	case 360:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2012
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2017
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2021
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 363:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2025
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2029
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2043
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2049
		{
			yyVAL.expr = &ComparisonExpr{Operator: LikeStr, Right: yyDollar[2].expr, Escape: yyDollar[3].expr}
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2055
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2059
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 369:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2065
		{
			yyVAL.str = ""
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2069
		{
			yyVAL.str = "full "
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2075
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2079
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 373:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2085
		{
			yyVAL.str = ""
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2089
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2093
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2099
		{
			yyVAL.showFilter = nil
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2103
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2107
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2113
		{
			yyVAL.showFilter = nil
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2117
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2123
		{
			yyVAL.str = ""
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2127
		{
			yyVAL.str = SessionStr
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2131
		{
			yyVAL.str = GlobalStr
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2137
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2141
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2147
		{
			yyVAL.statement = &Begin{}
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2151
		{
			yyVAL.statement = &Begin{}
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2157
		{
			yyVAL.statement = &Commit{}
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2163
		{
			yyVAL.statement = &Rollback{}
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2168
		{
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2169
		{
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2173
		{
			yyVAL.statement = &Explain{ExplainFormat: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2177
		{
			yyVAL.statement = &Explain{Analyze: true, ExplainFormat: TreeStr, Statement: yyDollar[3].selStmt}
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2183
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 398:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2191
		{
			yyVAL.str = ""
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2195
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2206
		{
			yyVAL.statement = &Show{Type: "columns", OnTable: yyDollar[2].tableName}
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2210
		{
			yyVAL.statement = &OtherRead{}
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2216
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2220
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2224
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2228
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2234
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 409:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2238
		{
			setAllowComments(yylex, true)
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2242
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 411:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2248
		{
			yyVAL.bytes2 = nil
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2252
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2258
		{
			yyVAL.str = UnionStr
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2262
		{
			yyVAL.str = UnionAllStr
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2266
		{
			yyVAL.str = UnionDistinctStr
		}
	case 416:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2271
		{
			yyVAL.str = ""
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2275
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2279
		{
			yyVAL.str = SQLCacheStr
		}
	case 419:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2284
		{
			yyVAL.str = ""
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2288
		{
			yyVAL.str = ""
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2292
		{
			yyVAL.str = DistinctStr
		}
	case 422:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2297
		{
			yyVAL.str = ""
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2301
		{
			yyVAL.str = StraightJoinHint
		}
	case 424:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2306
		{
			yyVAL.selectExprs = nil
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2310
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2316
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2320
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2326
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2330
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2334
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 431:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2338
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 432:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2343
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2347
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2351
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2358
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 437:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2363
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2367
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2373
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2377
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2387
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2391
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2395
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2401
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2407
		{
			yyVAL.aliasedTableName = yyDollar[2].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
		}
	case 448:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2412
		{
			yyVAL.aliasedTableName = yyDollar[6].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
			yyVAL.aliasedTableName.Partitions = yyDollar[4].partitions
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2423
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Hints: yyDollar[1].indexHints}
		}
	case 450:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2427
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, Hints: yyDollar[4].indexHints}
		}
	case 451:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2431
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, As: yyDollar[5].tableIdent, Hints: yyDollar[6].indexHints}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2435
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2439
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[1].tableIdent, Hints: yyDollar[2].indexHints}
		}
	case 454:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2450
		{
			yyVAL.expr = nil
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2454
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2460
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2464
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2470
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2474
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 460:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2487
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2491
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 462:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2495
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2499
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2505
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 465:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2507
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2511
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2513
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 468:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2517
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2519
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 470:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2522
		{
			yyVAL.empty = struct{}{}
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2524
		{
			yyVAL.empty = struct{}{}
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2529
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2535
		{
			yyVAL.str = JoinStr
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2539
		{
			yyVAL.str = JoinStr
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2543
		{
			yyVAL.str = JoinStr
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2549
		{
			yyVAL.str = StraightJoinStr
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2555
		{
			yyVAL.str = LeftJoinStr
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2559
		{
			yyVAL.str = LeftJoinStr
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2563
		{
			yyVAL.str = RightJoinStr
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2567
		{
			yyVAL.str = RightJoinStr
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2573
		{
			yyVAL.str = NaturalJoinStr
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2577
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2587
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2591
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2597
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2601
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2607
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 489:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2612
		{
			yyVAL.indexHints = nil
		}
	case 490:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2616
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 491:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2620
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 492:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2624
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 493:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2629
		{
			yyVAL.expr = nil
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2633
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2639
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2643
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2647
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2651
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2655
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2659
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2663
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 502:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2669
		{
			yyVAL.str = ""
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2673
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2679
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2683
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2689
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2693
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 508:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2697
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 509:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2701
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 510:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2705
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2709
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 512:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2713
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 513:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2717
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 514:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2721
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2725
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2731
		{
			yyVAL.str = IsNullStr
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2735
		{
			yyVAL.str = IsNotNullStr
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2739
		{
			yyVAL.str = IsTrueStr
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2743
		{
			yyVAL.str = IsNotTrueStr
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2747
		{
			yyVAL.str = IsFalseStr
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2751
		{
			yyVAL.str = IsNotFalseStr
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2757
		{
			yyVAL.str = EqualStr
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2761
		{
			yyVAL.str = LessThanStr
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2765
		{
			yyVAL.str = GreaterThanStr
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2769
		{
			yyVAL.str = LessEqualStr
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2773
		{
			yyVAL.str = GreaterEqualStr
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2777
		{
			yyVAL.str = NotEqualStr
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2781
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 529:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2786
		{
			yyVAL.expr = nil
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2790
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2796
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2800
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2804
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2810
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2816
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2820
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2826
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2830
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2834
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2838
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2842
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2846
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2850
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2854
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2858
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2862
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2866
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2870
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2874
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2878
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2882
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2886
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2890
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2894
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2898
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2902
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2906
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2910
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2914
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2918
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2926
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2940
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2944
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2948
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 569:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2966
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: yyDollar[3].str == DistinctStr, Exprs: yyDollar[4].selectExprs}
		}
	case 570:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2970
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 571:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2980
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 572:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2984
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2988
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema")}
		}
	case 574:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2992
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 575:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2996
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 576:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3000
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 577:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3004
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 578:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3008
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 579:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3012
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 580:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3016
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 581:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3020
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 582:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3024
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("first"), Exprs: yyDollar[3].selectExprs}
		}
	case 583:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3028
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 584:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3032
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3036
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3046
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3050
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3054
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3059
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3064
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3069
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3075
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3080
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3085
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3089
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3093
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3098
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3103
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3108
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 600:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3112
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 601:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3116
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3126
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 605:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3136
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 606:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3140
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 607:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3144
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 608:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3148
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 609:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3152
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 610:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3156
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 611:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3162
		{
			yyVAL.str = ""
		}
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3166
		{
			yyVAL.str = BooleanModeStr
		}
	case 613:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3170
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 614:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3174
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3178
		{
			yyVAL.str = QueryExpansionStr
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3184
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3188
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3194
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3198
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3202
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3206
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3210
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3214
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3220
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3224
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3228
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 627:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3232
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3236
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3240
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3244
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 631:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3249
		{
			yyVAL.expr = nil
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3253
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 633:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3258
		{
			yyVAL.str = string("")
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3262
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3268
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3272
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 637:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3278
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 638:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3283
		{
			yyVAL.expr = nil
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3287
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3293
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3297
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 642:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3301
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3307
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3311
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3315
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3319
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3323
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3327
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3331
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3335
		{
			yyVAL.expr = &NullVal{}
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3341
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3350
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3354
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 654:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3359
		{
			yyVAL.exprs = nil
		}
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3363
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 656:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3368
		{
			yyVAL.expr = nil
		}
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3372
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 658:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3377
		{
			yyVAL.orderBy = nil
		}
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3381
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3387
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3391
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3397
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 663:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3402
		{
			yyVAL.str = AscScr
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3406
		{
			yyVAL.str = AscScr
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3410
		{
			yyVAL.str = DescScr
		}
	case 666:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3415
		{
			yyVAL.limit = nil
		}
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3419
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 668:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3423
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 669:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3427
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 670:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3432
		{
			yyVAL.str = ""
		}
	case 671:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3436
		{
			yyVAL.str = ForUpdateStr
		}
	case 672:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3440
		{
			yyVAL.str = ShareModeStr
		}
	case 673:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3453
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3457
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 675:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3461
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 676:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3466
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 677:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3470
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 678:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3474
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3481
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3485
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3489
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 682:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3493
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 683:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3498
		{
			yyVAL.setExprs = nil
		}
	case 684:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3502
		{
			yyVAL.setExprs = yyDollar[5].setExprs
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3508
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3512
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3518
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3522
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 689:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3528
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3534
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3544
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 692:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3548
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 693:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3554
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: NewStrVal([]byte("on"))}
		}
	case 694:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3558
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: NewStrVal([]byte("off"))}
		}
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3562
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 696:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3566
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 698:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3573
		{
			yyVAL.bytes = []byte("charset")
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3580
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3584
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3588
		{
			yyVAL.expr = &Default{}
		}
	case 705:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3597
		{
			yyVAL.byt = 0
		}
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3599
		{
			yyVAL.byt = 1
		}
	case 707:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3602
		{
			yyVAL.byt = 0
		}
	case 708:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3604
		{
			yyVAL.byt = 1
		}
	case 709:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3607
		{
			yyVAL.str = ""
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3609
		{
			yyVAL.str = IgnoreStr
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3613
		{
			yyVAL.empty = struct{}{}
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3615
		{
			yyVAL.empty = struct{}{}
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3617
		{
			yyVAL.empty = struct{}{}
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3619
		{
			yyVAL.empty = struct{}{}
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3621
		{
			yyVAL.empty = struct{}{}
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3623
		{
			yyVAL.empty = struct{}{}
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3625
		{
			yyVAL.empty = struct{}{}
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3627
		{
			yyVAL.empty = struct{}{}
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3629
		{
			yyVAL.empty = struct{}{}
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3631
		{
			yyVAL.empty = struct{}{}
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3635
		{
			yyVAL.empty = struct{}{}
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3637
		{
			yyVAL.empty = struct{}{}
		}
	case 723:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3640
		{
			yyVAL.empty = struct{}{}
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3642
		{
			yyVAL.empty = struct{}{}
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3644
		{
			yyVAL.empty = struct{}{}
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3648
		{
			yyVAL.str = UniqueStr
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3650
		{
			yyVAL.str = FulltextStr
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3652
		{
			yyVAL.str = SpatialStr
		}
	case 729:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3655
		{
			yyVAL.str = ""
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3657
		{
			yyVAL.str = yyDollar[1].str
		}
	case 731:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3660
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 732:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3662
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3666
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3670
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3677
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3683
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3687
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3694
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4008
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4017
		{
			decNesting(yylex)
		}
	case 1031:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4022
		{
			skipToEnd(yylex)
		}
	case 1032:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4027
		{
			skipToEnd(yylex)
		}
	case 1033:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4031
		{
			skipToEnd(yylex)
		}
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4035
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
