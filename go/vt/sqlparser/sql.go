// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func yyPosition(yylex interface{}) int {
	return yylex.(*Tokenizer).Position
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:57
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	int                  int
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const VALUES = 57376
const LAST_INSERT_ID = 57377
const NEXT = 57378
const VALUE = 57379
const SHARE = 57380
const MODE = 57381
const SQL_NO_CACHE = 57382
const SQL_CACHE = 57383
const JOIN = 57384
const STRAIGHT_JOIN = 57385
const LEFT = 57386
const RIGHT = 57387
const INNER = 57388
const OUTER = 57389
const CROSS = 57390
const NATURAL = 57391
const USE = 57392
const FORCE = 57393
const ON = 57394
const USING = 57395
const ID = 57396
const HEX = 57397
const STRING = 57398
const INTEGRAL = 57399
const FLOAT = 57400
const HEXNUM = 57401
const VALUE_ARG = 57402
const LIST_ARG = 57403
const COMMENT = 57404
const COMMENT_KEYWORD = 57405
const BIT_LITERAL = 57406
const NULL = 57407
const TRUE = 57408
const FALSE = 57409
const OFF = 57410
const OR = 57411
const AND = 57412
const NOT = 57413
const BETWEEN = 57414
const CASE = 57415
const WHEN = 57416
const THEN = 57417
const ELSE = 57418
const END = 57419
const LE = 57420
const GE = 57421
const NE = 57422
const NULL_SAFE_EQUAL = 57423
const IS = 57424
const LIKE = 57425
const REGEXP = 57426
const IN = 57427
const SHIFT_LEFT = 57428
const SHIFT_RIGHT = 57429
const DIV = 57430
const MOD = 57431
const UNARY = 57432
const COLLATE = 57433
const BINARY = 57434
const UNDERSCORE_BINARY = 57435
const UNDERSCORE_UTF8MB4 = 57436
const INTERVAL = 57437
const JSON_EXTRACT_OP = 57438
const JSON_UNQUOTE_EXTRACT_OP = 57439
const CREATE = 57440
const ALTER = 57441
const DROP = 57442
const RENAME = 57443
const ANALYZE = 57444
const ADD = 57445
const FLUSH = 57446
const SCHEMA = 57447
const TABLE = 57448
const INDEX = 57449
const VIEW = 57450
const TO = 57451
const IGNORE = 57452
const IF = 57453
const UNIQUE = 57454
const PRIMARY = 57455
const COLUMN = 57456
const SPATIAL = 57457
const FULLTEXT = 57458
const KEY_BLOCK_SIZE = 57459
const ACTION = 57460
const CASCADE = 57461
const CONSTRAINT = 57462
const FOREIGN = 57463
const NO = 57464
const REFERENCES = 57465
const RESTRICT = 57466
const SHOW = 57467
const DESCRIBE = 57468
const EXPLAIN = 57469
const DATE = 57470
const ESCAPE = 57471
const REPAIR = 57472
const OPTIMIZE = 57473
const TRUNCATE = 57474
const MAXVALUE = 57475
const PARTITION = 57476
const REORGANIZE = 57477
const LESS = 57478
const THAN = 57479
const PROCEDURE = 57480
const TRIGGER = 57481
const VINDEX = 57482
const VINDEXES = 57483
const STATUS = 57484
const VARIABLES = 57485
const WARNINGS = 57486
const BEGIN = 57487
const START = 57488
const TRANSACTION = 57489
const COMMIT = 57490
const ROLLBACK = 57491
const BIT = 57492
const TINYINT = 57493
const SMALLINT = 57494
const MEDIUMINT = 57495
const INT = 57496
const INTEGER = 57497
const BIGINT = 57498
const INTNUM = 57499
const UUID = 57500
const REAL = 57501
const DOUBLE = 57502
const FLOAT_TYPE = 57503
const DECIMAL = 57504
const NUMERIC = 57505
const TIME = 57506
const TIMESTAMP = 57507
const DATETIME = 57508
const YEAR = 57509
const CHAR = 57510
const VARCHAR = 57511
const BOOL = 57512
const CHARACTER = 57513
const VARBINARY = 57514
const NCHAR = 57515
const TEXT = 57516
const TINYTEXT = 57517
const MEDIUMTEXT = 57518
const LONGTEXT = 57519
const BLOB = 57520
const TINYBLOB = 57521
const MEDIUMBLOB = 57522
const LONGBLOB = 57523
const JSON = 57524
const ENUM = 57525
const GEOMETRY = 57526
const POINT = 57527
const LINESTRING = 57528
const POLYGON = 57529
const GEOMETRYCOLLECTION = 57530
const MULTIPOINT = 57531
const MULTILINESTRING = 57532
const MULTIPOLYGON = 57533
const NULLX = 57534
const AUTO_INCREMENT = 57535
const APPROXNUM = 57536
const SIGNED = 57537
const UNSIGNED = 57538
const ZEROFILL = 57539
const COLLATION = 57540
const DATABASES = 57541
const SCHEMAS = 57542
const TABLES = 57543
const VITESS_KEYSPACES = 57544
const VITESS_SHARDS = 57545
const VITESS_TABLETS = 57546
const VSCHEMA = 57547
const VSCHEMA_TABLES = 57548
const VITESS_TARGET = 57549
const FULL = 57550
const PROCESSLIST = 57551
const COLUMNS = 57552
const FIELDS = 57553
const ENGINES = 57554
const PLUGINS = 57555
const NAMES = 57556
const CHARSET = 57557
const GLOBAL = 57558
const SESSION = 57559
const ISOLATION = 57560
const LEVEL = 57561
const READ = 57562
const WRITE = 57563
const ONLY = 57564
const REPEATABLE = 57565
const COMMITTED = 57566
const UNCOMMITTED = 57567
const SERIALIZABLE = 57568
const CURRENT_TIMESTAMP = 57569
const DATABASE = 57570
const CURRENT_DATE = 57571
const CURRENT_TIME = 57572
const LOCALTIME = 57573
const LOCALTIMESTAMP = 57574
const UTC_DATE = 57575
const UTC_TIME = 57576
const UTC_TIMESTAMP = 57577
const REPLACE = 57578
const CONVERT = 57579
const CAST = 57580
const SUBSTR = 57581
const SUBSTRING = 57582
const GROUP_CONCAT = 57583
const SEPARATOR = 57584
const TIMESTAMPADD = 57585
const TIMESTAMPDIFF = 57586
const MATCH = 57587
const AGAINST = 57588
const BOOLEAN = 57589
const LANGUAGE = 57590
const WITH = 57591
const QUERY = 57592
const EXPANSION = 57593
const UNUSED = 57594

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"UUID",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA",
	"VSCHEMA_TABLES",
	"VITESS_TARGET",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 29,
	-2, 4,
	-1, 31,
	125, 64,
	-2, 640,
	-1, 37,
	159, 307,
	160, 307,
	-2, 297,
	-1, 271,
	112, 650,
	-2, 646,
	-1, 272,
	112, 651,
	-2, 647,
	-1, 337,
	82, 826,
	-2, 62,
	-1, 338,
	82, 782,
	-2, 63,
	-1, 343,
	82, 761,
	-2, 609,
	-1, 345,
	82, 803,
	-2, 611,
	-1, 619,
	1, 361,
	5, 361,
	12, 361,
	13, 361,
	14, 361,
	15, 361,
	17, 361,
	19, 361,
	30, 361,
	31, 361,
	42, 361,
	43, 361,
	44, 361,
	45, 361,
	46, 361,
	48, 361,
	49, 361,
	52, 361,
	53, 361,
	55, 361,
	56, 361,
	270, 361,
	-2, 379,
	-1, 622,
	53, 45,
	55, 45,
	-2, 47,
	-1, 767,
	112, 653,
	-2, 649,
	-1, 999,
	5, 30,
	-2, 445,
	-1, 1030,
	5, 29,
	-2, 583,
	-1, 1232,
	5, 29,
	-2, 66,
	-1, 1279,
	5, 30,
	-2, 584,
	-1, 1334,
	5, 29,
	-2, 586,
	-1, 1405,
	5, 30,
	-2, 587,
}

const yyPrivate = 57344

const yyLast = 12415

var yyAct = [...]int{

	272, 1438, 1428, 1242, 1393, 575, 1127, 1299, 1315, 1033,
	1346, 302, 875, 1051, 1179, 1213, 852, 446, 1180, 871,
	1034, 574, 3, 1176, 1103, 276, 250, 930, 57, 289,
	916, 966, 1076, 1057, 874, 1186, 95, 1192, 884, 95,
	792, 888, 342, 1151, 993, 95, 1096, 805, 828, 732,
	818, 1106, 303, 51, 1105, 850, 769, 632, 278, 839,
	854, 829, 616, 506, 512, 926, 631, 95, 347, 336,
	832, 615, 95, 249, 240, 518, 475, 259, 333, 331,
	975, 527, 589, 95, 56, 1431, 95, 274, 1415, 1426,
	1403, 1423, 95, 1243, 1414, 590, 1168, 1402, 1271, 455,
	90, 86, 87, 88, 51, 1208, 1209, 866, 867, 1207,
	80, 263, 255, 633, 247, 634, 479, 865, 246, 242,
	243, 244, 245, 500, 1087, 248, 909, 1371, 540, 539,
	549, 550, 542, 543, 544, 545, 546, 547, 548, 541,
	917, 314, 551, 320, 321, 318, 319, 317, 316, 315,
	61, 1262, 949, 1064, 496, 1321, 1063, 322, 323, 1065,
	75, 76, 497, 494, 495, 1260, 948, 77, 239, 1130,
	79, 78, 82, 706, 84, 1129, 63, 64, 65, 66,
	67, 704, 481, 499, 483, 489, 490, 1425, 1394, 1422,
	265, 1126, 833, 1389, 953, 889, 1446, 465, 1347, 452,
	84, 1312, 1131, 947, 1442, 905, 901, 705, 1052, 1054,
	710, 1349, 450, 95, 480, 482, 347, 1202, 347, 347,
	891, 347, 347, 89, 347, 1201, 347, 1200, 891, 902,
	449, 707, 456, 212, 1123, 347, 85, 1009, 960, 1378,
	1125, 959, 1006, 907, 1282, 899, 563, 564, 1138, 1077,
	1019, 900, 987, 944, 941, 942, 741, 940, 531, 544,
	545, 546, 547, 548, 541, 471, 347, 551, 476, 83,
	476, 476, 541, 476, 476, 551, 476, 515, 476, 1348,
	872, 738, 514, 74, 733, 1053, 917, 476, 951, 954,
	551, 1223, 525, 524, 484, 485, 526, 486, 487, 1172,
	488, 1372, 491, 776, 478, 1311, 906, 904, 51, 526,
	1440, 501, 1401, 1441, 968, 1439, 890, 774, 775, 773,
	1387, 502, 503, 560, 890, 946, 562, 910, 1361, 95,
	95, 95, 561, 525, 524, 347, 1124, 1190, 1122, 563,
	564, 347, 1224, 1119, 563, 564, 464, 945, 823, 1152,
	526, 447, 635, 461, 573, 1170, 577, 578, 579, 580,
	581, 582, 583, 584, 585, 734, 588, 591, 591, 591,
	597, 591, 591, 597, 591, 605, 606, 607, 608, 609,
	610, 524, 620, 1005, 445, 614, 1154, 903, 619, 819,
	699, 950, 967, 740, 451, 1080, 1112, 526, 592, 594,
	596, 598, 600, 602, 603, 477, 952, 516, 521, 54,
	623, 593, 595, 629, 599, 601, 458, 604, 459, 772,
	1156, 460, 1160, 1407, 1155, 1004, 1153, 1003, 744, 745,
	739, 1158, 1388, 525, 524, 467, 468, 469, 1305, 1447,
	1157, 1304, 509, 513, 525, 524, 95, 525, 524, 70,
	526, 95, 1100, 1159, 1161, 95, 81, 95, 347, 532,
	1099, 526, 95, 1088, 526, 95, 1328, 819, 95, 1016,
	453, 454, 95, 339, 347, 347, 525, 524, 1448, 347,
	347, 347, 95, 347, 347, 71, 984, 985, 986, 22,
	347, 347, 1111, 526, 576, 1302, 1135, 1116, 1113, 1107,
	1114, 1110, 793, 587, 794, 1108, 1109, 759, 761, 762,
	476, 1097, 1085, 760, 720, 1066, 1385, 1067, 347, 1115,
	1358, 328, 329, 95, 1352, 1424, 476, 476, 301, 347,
	447, 476, 476, 476, 703, 476, 476, 1233, 1245, 1189,
	447, 746, 476, 476, 711, 1238, 770, 1410, 505, 254,
	721, 722, 718, 1352, 1397, 723, 724, 725, 1236, 727,
	728, 1352, 505, 1352, 1379, 505, 729, 730, 1352, 1351,
	1297, 1296, 1357, 347, 767, 540, 539, 549, 550, 542,
	543, 544, 545, 546, 547, 548, 541, 1284, 505, 551,
	1281, 505, 1356, 771, 748, 1077, 341, 1072, 504, 803,
	1230, 1229, 1226, 1227, 1226, 1225, 347, 347, 809, 812,
	763, 24, 765, 95, 820, 51, 836, 505, 1000, 505,
	1355, 95, 95, 801, 505, 95, 95, 795, 994, 347,
	577, 717, 716, 700, 698, 1028, 696, 642, 641, 1029,
	804, 806, 347, 626, 811, 814, 815, 473, 466, 799,
	1220, 796, 797, 292, 291, 294, 295, 296, 297, 54,
	879, 816, 293, 298, 1177, 892, 1058, 1189, 1141, 827,
	1058, 830, 831, 851, 24, 835, 801, 620, 58, 619,
	860, 1277, 859, 619, 625, 627, 1360, 625, 24, 735,
	918, 919, 920, 858, 836, 891, 1228, 863, 862, 347,
	836, 347, 1333, 1068, 864, 347, 347, 95, 95, 836,
	95, 95, 1000, 1189, 95, 756, 757, 1000, 1000, 1022,
	1021, 964, 54, 932, 447, 625, 628, 742, 709, 54,
	256, 1416, 95, 1317, 95, 95, 54, 95, 911, 1289,
	339, 931, 1218, 1071, 341, 927, 341, 341, 922, 341,
	341, 476, 341, 476, 341, 1193, 1194, 1128, 928, 929,
	921, 934, 1433, 341, 1429, 1196, 1177, 1101, 576, 736,
	713, 807, 808, 754, 1045, 936, 1043, 938, 54, 1046,
	1047, 1044, 845, 846, 767, 770, 841, 844, 845, 846,
	842, 890, 843, 847, 529, 1199, 887, 885, 1198, 886,
	1042, 1041, 260, 261, 883, 889, 1420, 976, 1413, 1137,
	977, 972, 519, 520, 1418, 983, 982, 981, 1092, 988,
	640, 507, 1331, 474, 1084, 1083, 870, 1079, 517, 1073,
	989, 1275, 771, 508, 1313, 937, 712, 95, 95, 95,
	95, 95, 519, 520, 251, 935, 849, 980, 997, 95,
	257, 258, 95, 1365, 1030, 979, 95, 252, 58, 1364,
	95, 1035, 1319, 341, 747, 1435, 1058, 498, 1015, 637,
	1435, 1434, 60, 803, 1010, 347, 1007, 731, 1013, 522,
	1375, 1082, 62, 737, 624, 1031, 1032, 1069, 55, 620,
	620, 620, 620, 620, 1060, 619, 619, 619, 619, 619,
	1037, 1038, 1, 1040, 851, 269, 1055, 1048, 1036, 505,
	619, 1039, 620, 1427, 1244, 1059, 1056, 1314, 619, 943,
	1392, 1078, 1061, 800, 802, 1345, 1212, 882, 1074, 1075,
	973, 974, 873, 513, 69, 347, 1091, 766, 1093, 1094,
	1095, 444, 68, 1089, 1090, 1386, 540, 539, 549, 550,
	542, 543, 544, 545, 546, 547, 548, 541, 881, 880,
	551, 897, 73, 896, 347, 95, 893, 1086, 908, 1098,
	542, 543, 544, 545, 546, 547, 548, 541, 895, 95,
	551, 894, 912, 913, 914, 915, 341, 898, 347, 650,
	648, 649, 998, 1118, 647, 646, 1117, 652, 923, 924,
	925, 651, 341, 341, 644, 645, 224, 341, 341, 341,
	1017, 341, 341, 334, 1104, 1134, 476, 848, 341, 341,
	841, 844, 845, 846, 842, 636, 843, 847, 933, 523,
	1193, 1194, 347, 347, 339, 1145, 72, 1144, 1178, 1121,
	1132, 1181, 1169, 1310, 1120, 1162, 750, 876, 1150, 1163,
	939, 492, 493, 1183, 1035, 226, 347, 529, 559, 978,
	341, 1062, 767, 340, 1184, 743, 511, 1188, 1363, 347,
	1318, 347, 347, 1014, 586, 817, 277, 1197, 758, 290,
	287, 288, 1182, 1211, 51, 749, 1204, 1027, 533, 275,
	267, 1203, 618, 1206, 611, 840, 838, 837, 714, 1195,
	1191, 798, 95, 1210, 617, 1140, 1270, 1216, 1217, 1221,
	1222, 1215, 1219, 1370, 753, 26, 59, 821, 262, 19,
	18, 95, 17, 1234, 20, 1232, 16, 347, 15, 14,
	347, 347, 95, 462, 825, 826, 30, 21, 13, 347,
	12, 11, 95, 10, 996, 9, 8, 766, 7, 6,
	5, 4, 999, 1001, 253, 1002, 51, 341, 23, 1136,
	1008, 2, 0, 1011, 1012, 0, 1249, 0, 0, 1018,
	341, 0, 0, 1020, 1250, 0, 1023, 1024, 0, 1025,
	1026, 1235, 0, 0, 1258, 565, 566, 567, 568, 569,
	570, 571, 572, 1237, 620, 0, 1240, 1251, 0, 1050,
	619, 0, 1276, 0, 0, 0, 0, 1171, 0, 0,
	1286, 347, 0, 0, 0, 1035, 0, 1285, 0, 347,
	0, 1269, 0, 1069, 0, 0, 0, 341, 0, 341,
	0, 1295, 347, 955, 956, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 347, 0, 0, 0, 0, 1205,
	0, 1308, 0, 1291, 1292, 1293, 1301, 1307, 1303, 539,
	549, 550, 542, 543, 544, 545, 546, 547, 548, 541,
	341, 0, 551, 0, 0, 0, 0, 0, 0, 0,
	876, 0, 347, 347, 476, 347, 0, 1320, 0, 1181,
	347, 0, 347, 347, 347, 95, 1332, 1340, 347, 1341,
	1342, 1343, 1334, 0, 0, 0, 0, 0, 1306, 1309,
	0, 1344, 1339, 1350, 0, 0, 0, 0, 347, 0,
	0, 1353, 0, 1354, 0, 1362, 0, 0, 0, 0,
	1182, 0, 0, 1335, 0, 549, 550, 542, 543, 544,
	545, 546, 547, 548, 541, 1181, 1149, 551, 1376, 0,
	0, 0, 0, 347, 0, 0, 1384, 1377, 1383, 0,
	0, 347, 347, 1272, 821, 0, 1359, 0, 0, 1395,
	0, 1399, 0, 576, 1396, 0, 0, 0, 0, 347,
	0, 1287, 0, 0, 1288, 1404, 1182, 1290, 51, 0,
	95, 0, 0, 1143, 0, 347, 0, 0, 0, 0,
	0, 1035, 0, 341, 1412, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1417, 1419, 347, 0, 0,
	0, 0, 0, 510, 1421, 1173, 0, 0, 0, 0,
	1432, 0, 1391, 0, 0, 0, 0, 1443, 0, 768,
	0, 0, 777, 778, 779, 780, 781, 782, 783, 784,
	785, 786, 787, 788, 789, 790, 791, 0, 0, 93,
	0, 0, 238, 1102, 0, 0, 0, 0, 93, 0,
	0, 0, 0, 0, 876, 0, 876, 0, 1430, 0,
	1255, 1256, 0, 1257, 0, 0, 1259, 266, 1261, 0,
	93, 0, 341, 1252, 0, 93, 0, 824, 0, 0,
	1254, 0, 621, 0, 0, 0, 93, 0, 0, 93,
	0, 1263, 1264, 0, 0, 93, 341, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1278, 1279, 1280, 0, 1283, 0, 0, 92, 0,
	0, 0, 1298, 0, 1143, 0, 0, 241, 341, 0,
	0, 0, 1294, 0, 0, 1398, 576, 821, 0, 0,
	1185, 1187, 0, 1274, 0, 0, 0, 0, 0, 332,
	0, 0, 0, 0, 448, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1187, 457, 0, 0, 463, 0,
	0, 0, 0, 0, 470, 0, 0, 341, 0, 341,
	1214, 540, 539, 549, 550, 542, 543, 544, 545, 546,
	547, 548, 541, 0, 0, 551, 876, 0, 0, 1327,
	24, 25, 52, 27, 28, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 0, 0, 43,
	0, 0, 0, 0, 29, 48, 49, 0, 0, 1316,
	0, 0, 0, 0, 0, 1241, 1273, 0, 1246, 1247,
	0, 0, 0, 0, 38, 0, 0, 341, 54, 0,
	0, 1366, 1367, 1368, 1369, 0, 0, 0, 1373, 1374,
	990, 991, 992, 0, 0, 0, 0, 0, 0, 0,
	1380, 1381, 1382, 0, 540, 539, 549, 550, 542, 543,
	544, 545, 546, 547, 548, 541, 0, 0, 551, 0,
	0, 0, 0, 1268, 0, 472, 0, 0, 821, 1400,
	0, 0, 0, 0, 0, 0, 1405, 0, 0, 31,
	32, 34, 33, 36, 0, 50, 0, 0, 0, 341,
	0, 1409, 0, 0, 0, 0, 0, 1300, 0, 0,
	0, 0, 93, 93, 93, 0, 37, 44, 45, 0,
	341, 46, 47, 35, 0, 0, 1316, 876, 0, 0,
	0, 0, 341, 1267, 0, 0, 39, 40, 0, 41,
	42, 0, 0, 0, 0, 1444, 1445, 540, 539, 549,
	550, 542, 543, 544, 545, 546, 547, 548, 541, 0,
	0, 551, 0, 0, 0, 0, 0, 1081, 0, 0,
	1336, 1337, 0, 1338, 0, 0, 0, 0, 1300, 0,
	1300, 1300, 1300, 0, 0, 0, 1214, 0, 0, 0,
	0, 613, 0, 622, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1300, 540, 539, 549,
	550, 542, 543, 544, 545, 546, 547, 548, 541, 1266,
	0, 551, 0, 0, 0, 0, 0, 53, 0, 93,
	0, 0, 0, 0, 93, 0, 0, 0, 93, 0,
	93, 1390, 0, 0, 0, 93, 0, 0, 93, 341,
	341, 93, 0, 0, 0, 719, 0, 1265, 0, 0,
	1147, 1148, 0, 0, 821, 93, 0, 1406, 0, 0,
	0, 0, 1164, 1165, 0, 1166, 1167, 0, 0, 0,
	668, 0, 0, 1411, 0, 0, 0, 1174, 1175, 0,
	0, 0, 0, 540, 539, 549, 550, 542, 543, 544,
	545, 546, 547, 548, 541, 1300, 93, 551, 643, 0,
	0, 0, 0, 697, 0, 719, 0, 701, 0, 702,
	0, 0, 0, 0, 708, 0, 1146, 332, 0, 0,
	715, 540, 539, 549, 550, 542, 543, 544, 545, 546,
	547, 548, 541, 0, 726, 551, 540, 539, 549, 550,
	542, 543, 544, 545, 546, 547, 548, 541, 656, 0,
	551, 0, 266, 266, 0, 0, 266, 266, 266, 0,
	0, 0, 822, 540, 539, 549, 550, 542, 543, 544,
	545, 546, 547, 548, 541, 755, 0, 551, 0, 0,
	0, 266, 266, 266, 266, 669, 93, 0, 0, 0,
	0, 0, 0, 0, 93, 856, 0, 0, 93, 93,
	0, 0, 1253, 0, 0, 0, 0, 682, 685, 686,
	687, 688, 689, 690, 0, 653, 691, 692, 693, 694,
	695, 670, 671, 672, 673, 654, 655, 683, 0, 657,
	0, 658, 659, 660, 661, 662, 663, 664, 665, 666,
	667, 674, 675, 676, 677, 678, 679, 680, 681, 0,
	0, 0, 0, 221, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 834, 0, 0, 995, 0,
	0, 0, 0, 0, 0, 0, 0, 234, 861, 0,
	93, 93, 0, 93, 93, 0, 0, 93, 540, 539,
	549, 550, 542, 543, 544, 545, 546, 547, 548, 541,
	0, 0, 551, 0, 684, 93, 0, 969, 970, 0,
	93, 0, 0, 0, 0, 719, 0, 0, 0, 0,
	0, 1322, 1323, 1324, 1325, 1326, 0, 266, 213, 1329,
	1330, 0, 0, 0, 0, 216, 0, 0, 0, 0,
	0, 0, 0, 225, 220, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 957,
	958, 0, 961, 962, 0, 0, 963, 0, 0, 0,
	0, 0, 0, 266, 0, 223, 0, 0, 0, 0,
	0, 233, 0, 0, 965, 0, 0, 0, 0, 971,
	266, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 214, 822,
	93, 93, 93, 93, 93, 0, 0, 0, 0, 0,
	0, 0, 1049, 0, 0, 93, 0, 0, 0, 856,
	0, 0, 0, 93, 0, 227, 217, 218, 0, 228,
	229, 230, 232, 0, 231, 237, 0, 0, 0, 219,
	222, 0, 215, 236, 235, 535, 0, 538, 0, 0,
	0, 0, 0, 552, 553, 554, 555, 556, 557, 558,
	0, 536, 537, 534, 540, 539, 549, 550, 542, 543,
	544, 545, 546, 547, 548, 541, 1436, 0, 551, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 266, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 266, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 719, 0, 0, 0, 0, 0, 0,
	0, 0, 822, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1133, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1139, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1231, 0, 0, 0, 0, 0,
	0, 0, 0, 822, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1239, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 856, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 822,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 431, 420, 93, 391, 434, 369, 383, 443, 384,
	385, 413, 355, 399, 153, 381, 0, 372, 350, 378,
	351, 370, 393, 117, 396, 368, 422, 402, 433, 134,
	441, 136, 407, 0, 174, 145, 0, 0, 395, 424,
	397, 418, 390, 414, 360, 406, 435, 382, 411, 436,
	0, 0, 0, 346, 0, 877, 878, 0, 0, 0,
	0, 0, 110, 0, 409, 430, 380, 410, 412, 349,
	408, 0, 353, 356, 442, 426, 375, 376, 1070, 0,
	0, 0, 1408, 0, 0, 394, 398, 415, 388, 0,
	0, 0, 0, 0, 0, 0, 0, 373, 0, 405,
	0, 0, 0, 357, 354, 0, 0, 392, 0, 0,
	0, 359, 0, 374, 416, 0, 348, 123, 419, 425,
	389, 198, 429, 387, 386, 432, 160, 0, 177, 125,
	133, 97, 104, 0, 124, 151, 165, 169, 423, 371,
	379, 113, 377, 167, 155, 190, 404, 156, 166, 137,
	182, 161, 189, 199, 200, 179, 197, 207, 98, 178,
	188, 111, 170, 100, 186, 176, 143, 129, 130, 99,
	0, 440, 164, 116, 121, 115, 152, 183, 184, 114,
	210, 105, 196, 102, 106, 195, 150, 181, 187, 144,
	141, 101, 185, 142, 140, 132, 119, 126, 158, 139,
	159, 127, 147, 146, 148, 0, 352, 0, 175, 192,
	211, 108, 367, 171, 180, 201, 202, 203, 204, 205,
	206, 0, 0, 109, 122, 118, 157, 149, 107, 128,
	172, 131, 138, 163, 209, 154, 168, 112, 191, 173,
	363, 366, 361, 362, 400, 401, 437, 438, 439, 417,
	358, 0, 364, 365, 0, 421, 427, 428, 403, 96,
	103, 135, 208, 162, 120, 193, 431, 420, 0, 391,
	434, 369, 383, 443, 384, 385, 413, 355, 399, 153,
	381, 0, 372, 350, 378, 351, 370, 393, 117, 396,
	368, 422, 402, 433, 134, 441, 136, 407, 0, 174,
	145, 0, 0, 395, 424, 397, 418, 390, 414, 360,
	406, 435, 382, 411, 436, 0, 0, 0, 346, 0,
	877, 878, 0, 0, 0, 0, 0, 110, 0, 409,
	430, 380, 410, 412, 349, 408, 0, 353, 356, 442,
	426, 375, 376, 0, 0, 0, 0, 0, 0, 0,
	394, 398, 415, 388, 0, 0, 0, 0, 0, 0,
	0, 0, 373, 0, 405, 0, 0, 0, 357, 354,
	0, 0, 392, 0, 0, 0, 359, 0, 374, 416,
	0, 348, 123, 419, 425, 389, 198, 429, 387, 386,
	432, 160, 0, 177, 125, 133, 97, 104, 0, 124,
	151, 165, 169, 423, 371, 379, 113, 377, 167, 155,
	190, 404, 156, 166, 137, 182, 161, 189, 199, 200,
	179, 197, 207, 98, 178, 188, 111, 170, 100, 186,
	176, 143, 129, 130, 99, 0, 440, 164, 116, 121,
	115, 152, 183, 184, 114, 210, 105, 196, 102, 106,
	195, 150, 181, 187, 144, 141, 101, 185, 142, 140,
	132, 119, 126, 158, 139, 159, 127, 147, 146, 148,
	0, 352, 0, 175, 192, 211, 108, 367, 171, 180,
	201, 202, 203, 204, 205, 206, 0, 0, 109, 122,
	118, 157, 149, 107, 128, 172, 131, 138, 163, 209,
	154, 168, 112, 191, 173, 363, 366, 361, 362, 400,
	401, 437, 438, 439, 417, 358, 0, 364, 365, 0,
	421, 427, 428, 403, 96, 103, 135, 208, 162, 120,
	193, 431, 420, 0, 391, 434, 369, 383, 443, 384,
	385, 413, 355, 399, 153, 381, 0, 372, 350, 378,
	351, 370, 393, 117, 396, 368, 422, 402, 433, 134,
	441, 136, 407, 0, 174, 145, 0, 0, 395, 424,
	397, 418, 390, 414, 360, 406, 435, 382, 411, 436,
	54, 0, 0, 346, 0, 0, 0, 0, 0, 0,
	0, 0, 110, 0, 409, 430, 380, 410, 412, 349,
	408, 0, 353, 356, 442, 426, 375, 376, 0, 0,
	0, 0, 0, 0, 0, 394, 398, 415, 388, 0,
	0, 0, 0, 0, 0, 0, 0, 373, 0, 405,
	0, 0, 0, 357, 354, 0, 0, 392, 0, 0,
	0, 359, 0, 374, 416, 0, 348, 123, 419, 425,
	389, 198, 429, 387, 386, 432, 160, 0, 177, 125,
	133, 97, 104, 0, 124, 151, 165, 169, 423, 371,
	379, 113, 377, 167, 155, 190, 404, 156, 166, 137,
	182, 161, 189, 199, 200, 179, 197, 207, 98, 178,
	188, 111, 170, 100, 186, 176, 143, 129, 130, 99,
	0, 440, 164, 116, 121, 115, 152, 183, 184, 114,
	210, 105, 196, 102, 106, 195, 150, 181, 187, 144,
	141, 101, 185, 142, 140, 132, 119, 126, 158, 139,
	159, 127, 147, 146, 148, 0, 352, 0, 175, 192,
	211, 108, 367, 171, 180, 201, 202, 203, 204, 205,
	206, 0, 0, 109, 122, 118, 157, 149, 107, 128,
	172, 131, 138, 163, 209, 154, 168, 112, 191, 173,
	363, 366, 361, 362, 400, 401, 437, 438, 439, 417,
	358, 0, 364, 365, 0, 421, 427, 428, 403, 96,
	103, 135, 208, 162, 120, 193, 431, 420, 0, 391,
	434, 369, 383, 443, 384, 385, 413, 355, 399, 153,
	381, 0, 372, 350, 378, 351, 370, 393, 117, 396,
	368, 422, 402, 433, 134, 441, 136, 407, 0, 174,
	145, 0, 0, 395, 424, 397, 418, 390, 414, 360,
	406, 435, 382, 411, 436, 0, 0, 0, 346, 0,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 409,
	430, 380, 410, 412, 349, 408, 0, 353, 356, 442,
	426, 375, 376, 0, 0, 0, 0, 0, 0, 0,
	394, 398, 415, 388, 0, 0, 0, 0, 0, 0,
	1142, 0, 373, 0, 405, 0, 0, 0, 357, 354,
	0, 0, 392, 0, 0, 0, 359, 0, 374, 416,
	0, 348, 123, 419, 425, 389, 198, 429, 387, 386,
	432, 160, 0, 177, 125, 133, 97, 104, 0, 124,
	151, 165, 169, 423, 371, 379, 113, 377, 167, 155,
	190, 404, 156, 166, 137, 182, 161, 189, 199, 200,
	179, 197, 207, 98, 178, 188, 111, 170, 100, 186,
	176, 143, 129, 130, 99, 0, 440, 164, 116, 121,
	115, 152, 183, 184, 114, 210, 105, 196, 102, 106,
	195, 150, 181, 187, 144, 141, 101, 185, 142, 140,
	132, 119, 126, 158, 139, 159, 127, 147, 146, 148,
	0, 352, 0, 175, 192, 211, 108, 367, 171, 180,
	201, 202, 203, 204, 205, 206, 0, 0, 109, 122,
	118, 157, 149, 107, 128, 172, 131, 138, 163, 209,
	154, 168, 112, 191, 173, 363, 366, 361, 362, 400,
	401, 437, 438, 439, 417, 358, 0, 364, 365, 0,
	421, 427, 428, 403, 96, 103, 135, 208, 162, 120,
	193, 431, 420, 0, 391, 434, 369, 383, 443, 384,
	385, 413, 355, 399, 153, 381, 0, 372, 350, 378,
	351, 370, 393, 117, 396, 368, 422, 402, 433, 134,
	441, 136, 407, 0, 174, 145, 0, 0, 395, 424,
	397, 418, 390, 414, 360, 406, 435, 382, 411, 436,
	0, 0, 0, 271, 0, 0, 0, 0, 0, 0,
	0, 0, 110, 0, 409, 430, 380, 410, 412, 349,
	408, 0, 353, 356, 442, 426, 375, 376, 0, 0,
	0, 0, 0, 0, 0, 394, 398, 415, 388, 0,
	0, 0, 0, 0, 0, 764, 0, 373, 0, 405,
	0, 0, 0, 357, 354, 0, 0, 392, 0, 0,
	0, 359, 0, 374, 416, 0, 348, 123, 419, 425,
	389, 198, 429, 387, 386, 432, 160, 0, 177, 125,
	133, 97, 104, 0, 124, 151, 165, 169, 423, 371,
	379, 113, 377, 167, 155, 190, 404, 156, 166, 137,
	182, 161, 189, 199, 200, 179, 197, 207, 98, 178,
	188, 111, 170, 100, 186, 176, 143, 129, 130, 99,
	0, 440, 164, 116, 121, 115, 152, 183, 184, 114,
	210, 105, 196, 102, 106, 195, 150, 181, 187, 144,
	141, 101, 185, 142, 140, 132, 119, 126, 158, 139,
	159, 127, 147, 146, 148, 0, 352, 0, 175, 192,
	211, 108, 367, 171, 180, 201, 202, 203, 204, 205,
	206, 0, 0, 109, 122, 118, 157, 149, 107, 128,
	172, 131, 138, 163, 209, 154, 168, 112, 191, 173,
	363, 366, 361, 362, 400, 401, 437, 438, 439, 417,
	358, 0, 364, 365, 0, 421, 427, 428, 403, 96,
	103, 135, 208, 162, 120, 193, 431, 420, 0, 391,
	434, 369, 383, 443, 384, 385, 413, 355, 399, 153,
	381, 0, 372, 350, 378, 351, 370, 393, 117, 396,
	368, 422, 402, 433, 134, 441, 136, 407, 0, 174,
	145, 0, 0, 395, 424, 397, 418, 390, 414, 360,
	406, 435, 382, 411, 436, 0, 0, 0, 346, 0,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 409,
	430, 380, 410, 412, 349, 408, 0, 353, 356, 442,
	426, 375, 376, 0, 0, 0, 0, 0, 0, 0,
	394, 398, 415, 388, 0, 0, 0, 0, 0, 0,
	0, 0, 373, 0, 405, 0, 0, 0, 357, 354,
	0, 0, 392, 0, 0, 0, 359, 0, 374, 416,
	0, 348, 123, 419, 425, 389, 198, 429, 387, 386,
	432, 160, 0, 177, 125, 133, 97, 104, 0, 124,
	151, 165, 169, 423, 371, 379, 113, 377, 167, 155,
	190, 404, 156, 166, 137, 182, 161, 189, 199, 200,
	179, 197, 207, 98, 178, 188, 111, 170, 100, 186,
	176, 143, 129, 130, 99, 0, 440, 164, 116, 121,
	115, 152, 183, 184, 114, 210, 105, 196, 102, 106,
	195, 150, 181, 187, 144, 141, 101, 185, 142, 140,
	132, 119, 126, 158, 139, 159, 127, 147, 146, 148,
	0, 352, 0, 175, 192, 211, 108, 367, 171, 180,
	201, 202, 203, 204, 205, 206, 0, 0, 109, 122,
	118, 157, 149, 107, 128, 172, 131, 138, 163, 209,
	154, 168, 112, 191, 173, 363, 366, 361, 362, 400,
	401, 437, 438, 439, 417, 358, 0, 364, 365, 0,
	421, 427, 428, 403, 96, 103, 135, 208, 162, 120,
	193, 431, 420, 0, 391, 434, 369, 383, 443, 384,
	385, 413, 355, 399, 153, 381, 0, 372, 350, 378,
	351, 370, 393, 117, 396, 368, 422, 402, 433, 134,
	441, 136, 407, 0, 174, 145, 0, 0, 395, 424,
	397, 418, 390, 414, 360, 406, 435, 382, 411, 436,
	0, 0, 0, 271, 0, 0, 0, 0, 0, 0,
	0, 0, 110, 0, 409, 430, 380, 410, 412, 349,
	408, 0, 353, 356, 442, 426, 375, 376, 0, 0,
	0, 0, 0, 0, 0, 394, 398, 415, 388, 0,
	0, 0, 0, 0, 0, 0, 0, 373, 0, 405,
	0, 0, 0, 357, 354, 0, 0, 392, 0, 0,
	0, 359, 0, 374, 416, 0, 348, 123, 419, 425,
	389, 198, 429, 387, 386, 432, 160, 0, 177, 125,
	133, 97, 104, 0, 124, 151, 165, 169, 423, 371,
	379, 113, 377, 167, 155, 190, 404, 156, 166, 137,
	182, 161, 189, 199, 200, 179, 197, 207, 98, 178,
	188, 111, 170, 100, 186, 176, 143, 129, 130, 99,
	0, 440, 164, 116, 121, 115, 152, 183, 184, 114,
	210, 105, 196, 102, 106, 195, 150, 181, 187, 144,
	141, 101, 185, 142, 140, 132, 119, 126, 158, 139,
	159, 127, 147, 146, 148, 0, 352, 0, 175, 192,
	211, 108, 367, 171, 180, 201, 202, 203, 204, 205,
	206, 0, 0, 109, 122, 118, 157, 149, 107, 128,
	172, 131, 138, 163, 209, 154, 168, 112, 191, 173,
	363, 366, 361, 362, 400, 401, 437, 438, 439, 417,
	358, 0, 364, 365, 0, 421, 427, 428, 403, 96,
	103, 135, 208, 162, 120, 193, 431, 420, 0, 391,
	434, 369, 383, 443, 384, 385, 413, 355, 399, 153,
	381, 0, 372, 350, 378, 351, 370, 393, 117, 396,
	368, 422, 402, 433, 134, 441, 136, 407, 0, 174,
	145, 0, 0, 395, 424, 397, 418, 390, 414, 360,
	406, 435, 382, 411, 436, 0, 0, 0, 346, 0,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 409,
	430, 380, 410, 412, 349, 408, 0, 353, 356, 442,
	426, 375, 376, 0, 0, 0, 0, 0, 0, 0,
	394, 398, 415, 388, 0, 0, 0, 0, 0, 0,
	0, 0, 373, 0, 405, 0, 0, 0, 357, 354,
	0, 0, 392, 0, 0, 0, 359, 0, 374, 416,
	0, 348, 123, 419, 425, 389, 198, 429, 387, 386,
	432, 160, 0, 177, 125, 133, 97, 104, 0, 124,
	151, 165, 169, 423, 371, 379, 113, 377, 167, 155,
	190, 404, 156, 166, 137, 182, 161, 189, 199, 200,
	179, 197, 207, 98, 178, 188, 111, 170, 100, 186,
	176, 143, 129, 130, 99, 0, 440, 164, 116, 121,
	115, 152, 183, 184, 114, 210, 105, 196, 102, 344,
	195, 150, 181, 187, 144, 141, 101, 185, 142, 140,
	132, 119, 126, 158, 139, 159, 127, 147, 146, 148,
	0, 352, 0, 175, 192, 211, 108, 367, 171, 180,
	201, 202, 203, 204, 205, 206, 0, 0, 109, 122,
	118, 157, 345, 343, 128, 172, 131, 138, 163, 209,
	154, 168, 112, 191, 173, 363, 366, 361, 362, 400,
	401, 437, 438, 439, 417, 358, 0, 364, 365, 0,
	421, 427, 428, 403, 96, 103, 135, 208, 162, 120,
	193, 431, 420, 0, 391, 434, 369, 383, 443, 384,
	385, 413, 355, 399, 153, 381, 0, 372, 350, 378,
	351, 370, 393, 117, 396, 368, 422, 402, 433, 134,
	441, 136, 407, 0, 174, 145, 0, 0, 395, 424,
	397, 418, 390, 414, 360, 406, 435, 382, 411, 436,
	0, 0, 0, 94, 0, 0, 0, 0, 0, 0,
	0, 0, 110, 0, 409, 430, 380, 410, 412, 349,
	408, 0, 353, 356, 442, 426, 375, 376, 0, 0,
	0, 0, 0, 0, 0, 394, 398, 415, 388, 0,
	0, 0, 0, 0, 0, 0, 0, 373, 0, 405,
	0, 0, 0, 357, 354, 0, 0, 392, 0, 0,
	0, 359, 0, 374, 416, 0, 348, 123, 419, 425,
	389, 198, 429, 387, 386, 432, 160, 0, 177, 125,
	133, 97, 104, 0, 124, 151, 165, 169, 423, 371,
	379, 113, 377, 167, 155, 190, 404, 156, 166, 137,
	182, 161, 189, 199, 200, 179, 197, 207, 98, 178,
	188, 111, 170, 100, 186, 176, 143, 129, 130, 99,
	0, 440, 164, 116, 121, 115, 152, 183, 184, 114,
	210, 105, 196, 102, 106, 195, 150, 181, 187, 144,
	141, 101, 185, 142, 140, 132, 119, 126, 158, 139,
	159, 127, 147, 146, 148, 0, 352, 0, 175, 192,
	211, 108, 367, 171, 180, 201, 202, 203, 204, 205,
	206, 0, 0, 109, 122, 118, 157, 149, 107, 128,
	172, 131, 138, 163, 209, 154, 168, 112, 191, 173,
	363, 366, 361, 362, 400, 401, 437, 438, 439, 417,
	358, 0, 364, 365, 0, 421, 427, 428, 403, 96,
	103, 135, 208, 162, 120, 193, 431, 420, 0, 391,
	434, 369, 383, 443, 384, 385, 413, 355, 399, 153,
	381, 0, 372, 350, 378, 351, 370, 393, 117, 396,
	368, 422, 402, 433, 134, 441, 136, 407, 0, 174,
	145, 0, 0, 395, 424, 397, 418, 390, 414, 360,
	406, 435, 382, 411, 436, 0, 0, 0, 346, 0,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 409,
	430, 380, 410, 412, 349, 408, 0, 353, 356, 442,
	426, 375, 376, 0, 0, 0, 0, 0, 0, 0,
	394, 398, 415, 388, 0, 0, 0, 0, 0, 0,
	0, 0, 373, 0, 405, 0, 0, 0, 357, 354,
	0, 0, 392, 0, 0, 0, 359, 0, 374, 416,
	0, 348, 123, 419, 425, 389, 198, 429, 387, 386,
	432, 160, 0, 177, 125, 133, 97, 104, 0, 124,
	151, 165, 169, 423, 371, 379, 113, 377, 167, 155,
	190, 404, 156, 166, 137, 182, 161, 189, 199, 200,
	179, 197, 207, 98, 178, 630, 111, 170, 100, 186,
	176, 143, 129, 130, 99, 0, 440, 164, 116, 121,
	115, 152, 183, 184, 114, 210, 105, 196, 102, 344,
	195, 150, 181, 187, 144, 141, 101, 185, 142, 140,
	132, 119, 126, 158, 139, 159, 127, 147, 146, 148,
	0, 352, 0, 175, 192, 211, 108, 367, 171, 180,
	201, 202, 203, 204, 205, 206, 0, 0, 109, 122,
	118, 157, 345, 343, 128, 172, 131, 138, 163, 209,
	154, 168, 112, 191, 173, 363, 366, 361, 362, 400,
	401, 437, 438, 439, 417, 358, 0, 364, 365, 0,
	421, 427, 428, 403, 96, 103, 135, 208, 162, 120,
	193, 431, 420, 0, 391, 434, 369, 383, 443, 384,
	385, 413, 355, 399, 153, 381, 0, 372, 350, 378,
	351, 370, 393, 117, 396, 368, 422, 402, 433, 134,
	441, 136, 407, 0, 174, 145, 0, 0, 395, 424,
	397, 418, 390, 414, 360, 406, 435, 382, 411, 436,
	0, 0, 0, 346, 0, 0, 0, 0, 0, 0,
	0, 0, 110, 0, 409, 430, 380, 410, 412, 349,
	408, 0, 353, 356, 442, 426, 375, 376, 0, 0,
	0, 0, 0, 0, 0, 394, 398, 415, 388, 0,
	0, 0, 0, 0, 0, 0, 0, 373, 0, 405,
	0, 0, 0, 357, 354, 0, 0, 392, 0, 0,
	0, 359, 0, 374, 416, 0, 348, 123, 419, 425,
	389, 198, 429, 387, 386, 432, 160, 0, 177, 125,
	133, 97, 104, 0, 124, 151, 165, 169, 423, 371,
	379, 113, 377, 167, 155, 190, 404, 156, 166, 137,
	182, 161, 189, 199, 200, 179, 197, 207, 98, 178,
	335, 111, 170, 100, 186, 176, 143, 129, 130, 99,
	0, 440, 164, 116, 121, 115, 152, 183, 184, 114,
	210, 105, 196, 102, 344, 195, 150, 181, 187, 144,
	141, 101, 185, 142, 140, 132, 119, 126, 158, 139,
	159, 127, 147, 146, 148, 0, 352, 0, 175, 192,
	211, 108, 367, 171, 180, 201, 202, 203, 204, 205,
	206, 0, 0, 109, 122, 118, 157, 345, 343, 338,
	337, 131, 138, 163, 209, 154, 168, 112, 191, 173,
	363, 366, 361, 362, 400, 401, 437, 438, 439, 417,
	358, 0, 364, 365, 0, 421, 427, 428, 403, 96,
	103, 135, 208, 162, 120, 193, 153, 0, 0, 0,
	0, 273, 0, 0, 0, 117, 0, 270, 0, 0,
	0, 134, 313, 136, 0, 0, 174, 145, 0, 0,
	0, 0, 304, 305, 0, 0, 0, 0, 0, 0,
	868, 0, 54, 0, 0, 271, 292, 291, 294, 295,
	296, 297, 0, 0, 110, 293, 298, 299, 300, 869,
	0, 0, 268, 285, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 0, 0, 0,
	0, 326, 0, 284, 0, 0, 279, 280, 281, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 198, 0, 0, 324, 0, 160, 0,
	177, 125, 133, 97, 104, 0, 124, 151, 165, 169,
	0, 0, 0, 113, 0, 167, 155, 190, 0, 156,
	166, 137, 182, 161, 189, 199, 200, 179, 197, 207,
	98, 178, 188, 111, 170, 100, 186, 176, 143, 129,
	130, 99, 0, 194, 164, 116, 121, 115, 152, 183,
	184, 114, 210, 105, 196, 102, 106, 195, 150, 181,
	187, 144, 141, 101, 185, 142, 140, 132, 119, 126,
	158, 139, 159, 127, 147, 146, 148, 0, 0, 0,
	175, 192, 211, 108, 0, 171, 180, 201, 202, 203,
	204, 205, 206, 0, 0, 109, 122, 118, 157, 149,
	107, 128, 172, 131, 138, 163, 209, 154, 168, 112,
	191, 173, 314, 325, 320, 321, 318, 319, 317, 316,
	315, 327, 306, 307, 308, 309, 311, 0, 322, 323,
	310, 96, 103, 135, 208, 162, 120, 193, 153, 0,
	0, 0, 0, 273, 0, 0, 0, 117, 0, 270,
	0, 0, 0, 134, 313, 136, 0, 0, 174, 145,
	0, 0, 0, 0, 304, 305, 0, 0, 0, 0,
	0, 0, 0, 0, 54, 0, 505, 271, 292, 291,
	294, 295, 296, 297, 0, 0, 110, 293, 298, 299,
	300, 0, 0, 0, 268, 285, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 282, 283, 0,
	0, 0, 0, 326, 0, 284, 0, 0, 279, 280,
	281, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 0, 0, 198, 0, 0, 324, 0,
	160, 0, 177, 125, 133, 97, 104, 0, 124, 151,
	165, 169, 0, 0, 0, 113, 0, 167, 155, 190,
	0, 156, 166, 137, 182, 161, 189, 199, 200, 179,
	197, 207, 98, 178, 188, 111, 170, 100, 186, 176,
	143, 129, 130, 99, 0, 194, 164, 116, 121, 115,
	152, 183, 184, 114, 210, 105, 196, 102, 106, 195,
	150, 181, 187, 144, 141, 101, 185, 142, 140, 132,
	119, 126, 158, 139, 159, 127, 147, 146, 148, 0,
	0, 0, 175, 192, 211, 108, 0, 171, 180, 201,
	202, 203, 204, 205, 206, 0, 0, 109, 122, 118,
	157, 149, 107, 128, 172, 131, 138, 163, 209, 154,
	168, 112, 191, 173, 314, 325, 320, 321, 318, 319,
	317, 316, 315, 327, 306, 307, 308, 309, 311, 0,
	322, 323, 310, 96, 103, 135, 208, 162, 120, 193,
	153, 0, 0, 0, 0, 273, 0, 0, 0, 117,
	0, 270, 0, 0, 0, 134, 313, 136, 0, 0,
	174, 145, 0, 0, 0, 0, 304, 305, 0, 0,
	0, 0, 0, 0, 0, 0, 54, 0, 0, 271,
	292, 291, 294, 295, 296, 297, 0, 0, 110, 293,
	298, 299, 300, 0, 0, 0, 268, 285, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 282,
	283, 264, 0, 0, 0, 326, 0, 284, 0, 0,
	279, 280, 281, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 198, 0, 0,
	324, 0, 160, 0, 177, 125, 133, 97, 104, 0,
	124, 151, 165, 169, 0, 0, 0, 113, 0, 167,
	155, 190, 0, 156, 166, 137, 182, 161, 189, 199,
	200, 179, 197, 207, 98, 178, 188, 111, 170, 100,
	186, 176, 143, 129, 130, 99, 0, 194, 164, 116,
	121, 115, 152, 183, 184, 114, 210, 105, 196, 102,
	106, 195, 150, 181, 187, 144, 141, 101, 185, 142,
	140, 132, 119, 126, 158, 139, 159, 127, 147, 146,
	148, 0, 0, 0, 175, 192, 211, 108, 0, 171,
	180, 201, 202, 203, 204, 205, 206, 0, 0, 109,
	122, 118, 157, 149, 107, 128, 172, 131, 138, 163,
	209, 154, 168, 112, 191, 173, 314, 325, 320, 321,
	318, 319, 317, 316, 315, 327, 306, 307, 308, 309,
	311, 0, 322, 323, 310, 96, 103, 135, 208, 162,
	120, 193, 153, 0, 0, 0, 0, 273, 0, 0,
	0, 117, 0, 270, 0, 0, 0, 134, 313, 136,
	0, 0, 174, 145, 0, 0, 0, 0, 304, 305,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 271, 292, 813, 294, 295, 296, 297, 0, 0,
	110, 293, 298, 299, 300, 0, 0, 0, 268, 285,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 282, 283, 264, 0, 0, 0, 326, 0, 284,
	0, 0, 279, 280, 281, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 123, 0, 0, 0, 198,
	0, 0, 324, 0, 160, 0, 177, 125, 133, 97,
	104, 0, 124, 151, 165, 169, 0, 0, 0, 113,
	0, 167, 155, 190, 0, 156, 166, 137, 182, 161,
	189, 199, 200, 179, 197, 207, 98, 178, 188, 111,
	170, 100, 186, 176, 143, 129, 130, 99, 0, 194,
	164, 116, 121, 115, 152, 183, 184, 114, 210, 105,
	196, 102, 106, 195, 150, 181, 187, 144, 141, 101,
	185, 142, 140, 132, 119, 126, 158, 139, 159, 127,
	147, 146, 148, 0, 0, 0, 175, 192, 211, 108,
	0, 171, 180, 201, 202, 203, 204, 205, 206, 0,
	0, 109, 122, 118, 157, 149, 107, 128, 172, 131,
	138, 163, 209, 154, 168, 112, 191, 173, 314, 325,
	320, 321, 318, 319, 317, 316, 315, 327, 306, 307,
	308, 309, 311, 0, 322, 323, 310, 96, 103, 135,
	208, 162, 120, 193, 153, 0, 0, 0, 0, 273,
	0, 0, 0, 117, 0, 270, 0, 0, 0, 134,
	313, 136, 0, 0, 174, 145, 0, 0, 0, 0,
	304, 305, 0, 0, 0, 0, 0, 0, 0, 0,
	54, 0, 0, 271, 292, 810, 294, 295, 296, 297,
	0, 0, 110, 293, 298, 299, 300, 0, 0, 0,
	268, 285, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 282, 283, 264, 0, 0, 0, 326,
	0, 284, 0, 0, 279, 280, 281, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 0, 0,
	0, 198, 0, 0, 324, 0, 160, 0, 177, 125,
	133, 97, 104, 0, 124, 151, 165, 169, 0, 0,
	0, 113, 0, 167, 155, 190, 0, 156, 166, 137,
	182, 161, 189, 199, 200, 179, 197, 207, 98, 178,
	188, 111, 170, 100, 186, 176, 143, 129, 130, 99,
	0, 194, 164, 116, 121, 115, 152, 183, 184, 114,
	210, 105, 196, 102, 106, 195, 150, 181, 187, 144,
	141, 101, 185, 142, 140, 132, 119, 126, 158, 139,
	159, 127, 147, 146, 148, 0, 0, 0, 175, 192,
	211, 108, 0, 171, 180, 201, 202, 203, 204, 205,
	206, 0, 0, 109, 122, 118, 157, 149, 107, 128,
	172, 131, 138, 163, 209, 154, 168, 112, 191, 173,
	314, 325, 320, 321, 318, 319, 317, 316, 315, 327,
	306, 307, 308, 309, 311, 24, 322, 323, 310, 96,
	103, 135, 208, 162, 120, 193, 0, 153, 0, 0,
	0, 0, 273, 0, 0, 0, 117, 0, 270, 0,
	0, 0, 134, 313, 136, 0, 0, 174, 145, 0,
	0, 0, 0, 304, 305, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 0, 271, 292, 291, 294,
	295, 296, 297, 0, 0, 110, 293, 298, 299, 300,
	0, 0, 0, 268, 285, 0, 312, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 282, 283, 0, 0,
	0, 0, 326, 0, 284, 0, 0, 279, 280, 281,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 0, 198, 0, 0, 324, 0, 160,
	0, 177, 125, 133, 97, 104, 0, 124, 151, 165,
	169, 0, 0, 0, 113, 0, 167, 155, 190, 0,
	156, 166, 137, 182, 161, 189, 199, 200, 179, 197,
	207, 98, 178, 188, 111, 170, 100, 186, 176, 143,
	129, 130, 99, 0, 194, 164, 116, 121, 115, 152,
	183, 184, 114, 210, 105, 196, 102, 106, 195, 150,
	181, 187, 144, 141, 101, 185, 142, 140, 132, 119,
	126, 158, 139, 159, 127, 147, 146, 148, 0, 0,
	0, 175, 192, 211, 108, 0, 171, 180, 201, 202,
	203, 204, 205, 206, 0, 0, 109, 122, 118, 157,
	149, 107, 128, 172, 131, 138, 163, 209, 154, 168,
	112, 191, 173, 314, 325, 320, 321, 318, 319, 317,
	316, 315, 327, 306, 307, 308, 309, 311, 0, 322,
	323, 310, 96, 103, 135, 208, 162, 120, 193, 153,
	0, 0, 0, 0, 273, 0, 0, 0, 117, 0,
	270, 0, 0, 0, 134, 313, 136, 0, 0, 174,
	145, 0, 0, 0, 0, 304, 305, 0, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 0, 271, 292,
	291, 294, 295, 296, 297, 0, 0, 110, 293, 298,
	299, 300, 0, 0, 0, 268, 285, 0, 312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 282, 283,
	0, 0, 0, 0, 326, 0, 284, 0, 0, 279,
	280, 281, 286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 0, 0, 0, 198, 0, 0, 324,
	0, 160, 0, 177, 125, 133, 97, 104, 0, 124,
	151, 165, 169, 0, 0, 0, 113, 0, 167, 155,
	190, 0, 156, 166, 137, 182, 161, 189, 199, 200,
	179, 197, 207, 98, 178, 188, 111, 170, 100, 186,
	176, 143, 129, 130, 99, 0, 194, 164, 116, 121,
	115, 152, 183, 184, 114, 210, 105, 196, 102, 106,
	195, 150, 181, 187, 144, 141, 101, 185, 142, 140,
	132, 119, 126, 158, 139, 159, 127, 147, 146, 148,
	0, 0, 0, 175, 192, 211, 108, 0, 171, 180,
	201, 202, 203, 204, 205, 206, 0, 0, 109, 122,
	118, 157, 149, 107, 128, 172, 131, 138, 163, 209,
	154, 168, 112, 191, 173, 314, 325, 320, 321, 318,
	319, 317, 316, 315, 327, 306, 307, 308, 309, 311,
	0, 322, 323, 310, 96, 103, 135, 208, 162, 120,
	193, 153, 0, 0, 0, 0, 0, 0, 0, 0,
	117, 0, 0, 0, 0, 0, 134, 313, 136, 0,
	0, 174, 145, 0, 0, 0, 0, 304, 305, 0,
	0, 0, 0, 0, 0, 0, 0, 54, 0, 0,
	271, 292, 291, 294, 295, 296, 297, 0, 0, 110,
	293, 298, 299, 300, 0, 0, 0, 0, 285, 0,
	312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	282, 283, 0, 0, 0, 0, 326, 0, 284, 0,
	0, 279, 280, 281, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 0, 198, 0,
	0, 324, 0, 160, 0, 177, 125, 133, 97, 104,
	0, 124, 151, 165, 169, 0, 0, 0, 113, 0,
	167, 155, 190, 1437, 156, 166, 137, 182, 161, 189,
	199, 200, 179, 197, 207, 98, 178, 188, 111, 170,
	100, 186, 176, 143, 129, 130, 99, 0, 194, 164,
	116, 121, 115, 152, 183, 184, 114, 210, 105, 196,
	102, 106, 195, 150, 181, 187, 144, 141, 101, 185,
	142, 140, 132, 119, 126, 158, 139, 159, 127, 147,
	146, 148, 0, 0, 0, 175, 192, 211, 108, 0,
	171, 180, 201, 202, 203, 204, 205, 206, 0, 0,
	109, 122, 118, 157, 149, 107, 128, 172, 131, 138,
	163, 209, 154, 168, 112, 191, 173, 314, 325, 320,
	321, 318, 319, 317, 316, 315, 327, 306, 307, 308,
	309, 311, 0, 322, 323, 310, 96, 103, 135, 208,
	162, 120, 193, 153, 0, 0, 0, 0, 0, 0,
	0, 0, 117, 0, 0, 0, 0, 0, 134, 313,
	136, 0, 0, 174, 145, 0, 0, 0, 0, 304,
	305, 0, 0, 0, 0, 0, 0, 0, 0, 54,
	0, 505, 271, 292, 291, 294, 295, 296, 297, 0,
	0, 110, 293, 298, 299, 300, 0, 0, 0, 0,
	285, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 282, 283, 0, 0, 0, 0, 326, 0,
	284, 0, 0, 279, 280, 281, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 0,
	198, 0, 0, 324, 0, 160, 0, 177, 125, 133,
	97, 104, 0, 124, 151, 165, 169, 0, 0, 0,
	113, 0, 167, 155, 190, 0, 156, 166, 137, 182,
	161, 189, 199, 200, 179, 197, 207, 98, 178, 188,
	111, 170, 100, 186, 176, 143, 129, 130, 99, 0,
	194, 164, 116, 121, 115, 152, 183, 184, 114, 210,
	105, 196, 102, 106, 195, 150, 181, 187, 144, 141,
	101, 185, 142, 140, 132, 119, 126, 158, 139, 159,
	127, 147, 146, 148, 0, 0, 0, 175, 192, 211,
	108, 0, 171, 180, 201, 202, 203, 204, 205, 206,
	0, 0, 109, 122, 118, 157, 149, 107, 128, 172,
	131, 138, 163, 209, 154, 168, 112, 191, 173, 314,
	325, 320, 321, 318, 319, 317, 316, 315, 327, 306,
	307, 308, 309, 311, 0, 322, 323, 310, 96, 103,
	135, 208, 162, 120, 193, 153, 0, 0, 0, 0,
	0, 0, 0, 0, 117, 0, 0, 0, 0, 0,
	134, 313, 136, 0, 0, 174, 145, 0, 0, 0,
	0, 304, 305, 0, 0, 0, 0, 0, 0, 0,
	0, 54, 0, 0, 271, 292, 291, 294, 295, 296,
	297, 0, 0, 110, 293, 298, 299, 300, 0, 0,
	0, 0, 285, 0, 312, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 282, 283, 0, 0, 0, 0,
	326, 0, 284, 0, 0, 279, 280, 281, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 0,
	0, 0, 198, 0, 0, 324, 0, 160, 0, 177,
	125, 133, 97, 104, 0, 124, 151, 165, 169, 0,
	0, 0, 113, 0, 167, 155, 190, 0, 156, 166,
	137, 182, 161, 189, 199, 200, 179, 197, 207, 98,
	178, 188, 111, 170, 100, 186, 176, 143, 129, 130,
	99, 0, 194, 164, 116, 121, 115, 152, 183, 184,
	114, 210, 105, 196, 102, 106, 195, 150, 181, 187,
	144, 141, 101, 185, 142, 140, 132, 119, 126, 158,
	139, 159, 127, 147, 146, 148, 0, 0, 0, 175,
	192, 211, 108, 0, 171, 180, 201, 202, 203, 204,
	205, 206, 0, 0, 109, 122, 118, 157, 149, 107,
	128, 172, 131, 138, 163, 209, 154, 168, 112, 191,
	173, 314, 325, 320, 321, 318, 319, 317, 316, 315,
	327, 306, 307, 308, 309, 311, 0, 322, 323, 310,
	96, 103, 135, 208, 162, 120, 193, 153, 0, 0,
	0, 0, 0, 0, 0, 0, 117, 0, 0, 0,
	0, 0, 134, 0, 136, 0, 0, 174, 145, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 346, 0, 0, 0,
	0, 0, 0, 0, 0, 110, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 540, 539, 549, 550, 542, 543, 544, 545,
	546, 547, 548, 541, 0, 0, 551, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 0, 198, 0, 0, 0, 0, 160,
	0, 177, 125, 133, 97, 104, 0, 124, 151, 165,
	169, 0, 0, 0, 113, 0, 167, 155, 190, 0,
	156, 166, 137, 182, 161, 189, 199, 200, 179, 197,
	207, 98, 178, 188, 111, 170, 100, 186, 176, 143,
	129, 130, 99, 0, 194, 164, 116, 121, 115, 152,
	183, 184, 114, 210, 105, 196, 102, 106, 195, 150,
	181, 187, 144, 141, 101, 185, 142, 140, 132, 119,
	126, 158, 139, 159, 127, 147, 146, 148, 0, 0,
	0, 175, 192, 211, 108, 0, 171, 180, 201, 202,
	203, 204, 205, 206, 0, 0, 109, 122, 118, 157,
	149, 107, 128, 172, 131, 138, 163, 209, 154, 168,
	112, 191, 173, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 103, 135, 208, 162, 120, 193, 153,
	0, 0, 0, 528, 0, 0, 0, 0, 117, 0,
	0, 0, 0, 0, 134, 0, 136, 0, 0, 174,
	145, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 346, 0,
	530, 0, 0, 0, 0, 0, 0, 110, 0, 0,
	0, 0, 0, 525, 524, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	526, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 0, 0, 0, 198, 0, 0, 0,
	0, 160, 0, 177, 125, 133, 97, 104, 0, 124,
	151, 165, 169, 0, 0, 0, 113, 0, 167, 155,
	190, 0, 156, 166, 137, 182, 161, 189, 199, 200,
	179, 197, 207, 98, 178, 188, 111, 170, 100, 186,
	176, 143, 129, 130, 99, 0, 194, 164, 116, 121,
	115, 152, 183, 184, 114, 210, 105, 196, 102, 106,
	195, 150, 181, 187, 144, 141, 101, 185, 142, 140,
	132, 119, 126, 158, 139, 159, 127, 147, 146, 148,
	0, 0, 0, 175, 192, 211, 108, 0, 171, 180,
	201, 202, 203, 204, 205, 206, 0, 0, 109, 122,
	118, 157, 149, 107, 128, 172, 131, 138, 163, 209,
	154, 168, 112, 191, 173, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 103, 135, 208, 162, 120,
	193, 153, 0, 0, 0, 855, 0, 0, 0, 0,
	117, 0, 0, 0, 0, 0, 134, 0, 136, 0,
	0, 174, 145, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 0, 857, 0, 0, 0, 0, 0, 0, 110,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 0, 198, 0,
	0, 0, 0, 160, 0, 177, 125, 133, 97, 104,
	0, 124, 151, 165, 169, 0, 0, 0, 113, 0,
	167, 155, 190, 0, 156, 166, 137, 182, 161, 189,
	199, 200, 179, 197, 207, 98, 178, 188, 111, 170,
	100, 186, 176, 143, 129, 130, 99, 0, 194, 164,
	116, 121, 115, 152, 183, 184, 114, 210, 105, 196,
	102, 106, 195, 150, 181, 187, 144, 141, 101, 185,
	142, 140, 132, 119, 126, 158, 139, 159, 127, 147,
	146, 148, 0, 0, 0, 175, 192, 211, 108, 0,
	171, 180, 201, 202, 203, 204, 205, 206, 0, 0,
	109, 122, 118, 157, 149, 107, 128, 172, 131, 138,
	163, 209, 154, 168, 112, 191, 173, 0, 0, 0,
	0, 0, 24, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 153, 0, 96, 103, 135, 208,
	162, 120, 193, 117, 0, 0, 0, 0, 0, 134,
	0, 136, 0, 0, 174, 145, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	54, 0, 0, 346, 0, 0, 0, 0, 0, 0,
	0, 0, 110, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 0, 0,
	0, 198, 0, 0, 0, 0, 160, 0, 177, 125,
	133, 97, 104, 0, 124, 151, 165, 169, 0, 0,
	0, 113, 0, 167, 155, 190, 0, 156, 166, 137,
	182, 161, 189, 199, 200, 179, 197, 207, 98, 178,
	188, 111, 170, 100, 186, 176, 143, 129, 130, 99,
	0, 194, 164, 116, 121, 115, 152, 183, 184, 114,
	210, 105, 196, 102, 106, 195, 150, 181, 187, 144,
	141, 101, 185, 142, 140, 132, 119, 126, 158, 139,
	159, 127, 147, 146, 148, 0, 0, 0, 175, 192,
	211, 108, 0, 171, 180, 201, 202, 203, 204, 205,
	206, 0, 0, 109, 122, 118, 157, 149, 107, 128,
	172, 131, 138, 163, 209, 154, 168, 112, 191, 173,
	0, 0, 0, 0, 0, 24, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 153, 0, 96,
	103, 135, 208, 162, 120, 193, 117, 0, 0, 0,
	0, 0, 134, 0, 136, 0, 0, 174, 145, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 0, 94, 0, 0, 0,
	0, 0, 0, 0, 0, 110, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 0, 198, 0, 0, 0, 0, 160,
	0, 177, 125, 133, 97, 104, 0, 124, 151, 165,
	169, 0, 0, 0, 113, 0, 167, 155, 190, 0,
	156, 166, 137, 182, 161, 189, 199, 200, 179, 197,
	207, 98, 178, 188, 111, 170, 100, 186, 176, 143,
	129, 130, 99, 0, 194, 164, 116, 121, 115, 152,
	183, 184, 114, 210, 105, 196, 102, 106, 195, 150,
	181, 187, 144, 141, 101, 185, 142, 140, 132, 119,
	126, 158, 139, 159, 127, 147, 146, 148, 0, 0,
	0, 175, 192, 211, 108, 0, 171, 180, 201, 202,
	203, 204, 205, 206, 0, 0, 109, 122, 118, 157,
	149, 107, 128, 172, 131, 138, 163, 209, 154, 168,
	112, 191, 173, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 103, 135, 208, 162, 120, 193, 153,
	0, 0, 0, 855, 0, 0, 0, 0, 117, 0,
	0, 0, 0, 0, 134, 0, 136, 0, 0, 174,
	145, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 0,
	857, 0, 0, 0, 0, 0, 0, 110, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 0, 0, 0, 198, 0, 0, 0,
	0, 160, 0, 177, 125, 133, 97, 104, 0, 124,
	151, 165, 169, 0, 0, 0, 113, 0, 167, 155,
	190, 0, 853, 166, 137, 182, 161, 189, 199, 200,
	179, 197, 207, 98, 178, 188, 111, 170, 100, 186,
	176, 143, 129, 130, 99, 0, 194, 164, 116, 121,
	115, 152, 183, 184, 114, 210, 105, 196, 102, 106,
	195, 150, 181, 187, 144, 141, 101, 185, 142, 140,
	132, 119, 126, 158, 139, 159, 127, 147, 146, 148,
	0, 0, 0, 175, 192, 211, 108, 0, 171, 180,
	201, 202, 203, 204, 205, 206, 0, 0, 109, 122,
	118, 157, 149, 107, 128, 172, 131, 138, 163, 209,
	154, 168, 112, 191, 173, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 153, 0, 96, 103, 135, 208, 162, 120,
	193, 117, 0, 0, 0, 0, 0, 134, 0, 136,
	0, 0, 174, 145, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 346, 0, 0, 751, 0, 0, 752, 0, 0,
	110, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 123, 0, 0, 0, 198,
	0, 0, 0, 0, 160, 0, 177, 125, 133, 97,
	104, 0, 124, 151, 165, 169, 0, 0, 0, 113,
	0, 167, 155, 190, 0, 156, 166, 137, 182, 161,
	189, 199, 200, 179, 197, 207, 98, 178, 188, 111,
	170, 100, 186, 176, 143, 129, 130, 99, 0, 194,
	164, 116, 121, 115, 152, 183, 184, 114, 210, 105,
	196, 102, 106, 195, 150, 181, 187, 144, 141, 101,
	185, 142, 140, 132, 119, 126, 158, 139, 159, 127,
	147, 146, 148, 0, 0, 0, 175, 192, 211, 108,
	0, 171, 180, 201, 202, 203, 204, 205, 206, 0,
	0, 109, 122, 118, 157, 149, 107, 128, 172, 131,
	138, 163, 209, 154, 168, 112, 191, 173, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 153, 0, 96, 103, 135,
	208, 162, 120, 193, 117, 0, 639, 0, 0, 0,
	134, 0, 136, 0, 0, 174, 145, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 638, 0, 0, 0,
	0, 0, 0, 110, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 0,
	0, 0, 198, 0, 0, 0, 0, 160, 0, 177,
	125, 133, 97, 104, 0, 124, 151, 165, 169, 0,
	0, 0, 113, 0, 167, 155, 190, 0, 156, 166,
	137, 182, 161, 189, 199, 200, 179, 197, 207, 98,
	178, 188, 111, 170, 100, 186, 176, 143, 129, 130,
	99, 0, 194, 164, 116, 121, 115, 152, 183, 184,
	114, 210, 105, 196, 102, 106, 195, 150, 181, 187,
	144, 141, 101, 185, 142, 140, 132, 119, 126, 158,
	139, 159, 127, 147, 146, 148, 0, 0, 0, 175,
	192, 211, 108, 0, 171, 180, 201, 202, 203, 204,
	205, 206, 0, 0, 109, 122, 118, 157, 149, 107,
	128, 172, 131, 138, 163, 209, 154, 168, 112, 191,
	173, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 153, 0,
	96, 103, 135, 208, 162, 120, 193, 117, 0, 0,
	0, 0, 0, 134, 0, 136, 0, 0, 174, 145,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 54, 0, 0, 94, 0, 0,
	0, 0, 0, 0, 0, 0, 110, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 0, 0, 198, 0, 0, 0, 0,
	160, 0, 177, 125, 133, 97, 104, 0, 124, 151,
	165, 169, 0, 0, 0, 113, 0, 167, 155, 190,
	0, 156, 166, 137, 182, 161, 189, 199, 200, 179,
	197, 207, 98, 178, 188, 111, 170, 100, 186, 176,
	143, 129, 130, 99, 0, 194, 164, 116, 121, 115,
	152, 183, 184, 114, 210, 105, 196, 102, 106, 195,
	150, 181, 187, 144, 141, 101, 185, 142, 140, 132,
	119, 126, 158, 139, 159, 127, 147, 146, 148, 0,
	0, 0, 175, 192, 211, 108, 0, 171, 180, 201,
	202, 203, 204, 205, 206, 0, 0, 109, 122, 118,
	157, 149, 107, 128, 172, 131, 138, 163, 209, 154,
	168, 112, 191, 173, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 153, 0, 96, 103, 135, 208, 162, 120, 193,
	117, 0, 0, 0, 0, 0, 134, 0, 136, 0,
	0, 174, 145, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 0, 857, 0, 0, 0, 0, 0, 0, 110,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 0, 198, 0,
	0, 0, 0, 160, 0, 177, 125, 133, 97, 104,
	0, 124, 151, 165, 169, 0, 0, 0, 113, 0,
	167, 155, 190, 0, 156, 166, 137, 182, 161, 189,
	199, 200, 179, 197, 207, 98, 178, 188, 111, 170,
	100, 186, 176, 143, 129, 130, 99, 0, 194, 164,
	116, 121, 115, 152, 183, 184, 114, 210, 105, 196,
	102, 106, 195, 150, 181, 187, 144, 141, 101, 185,
	142, 140, 132, 119, 126, 158, 139, 159, 127, 147,
	146, 148, 0, 0, 0, 175, 192, 211, 108, 0,
	171, 180, 201, 202, 203, 204, 205, 206, 0, 0,
	109, 122, 118, 157, 149, 107, 128, 172, 131, 138,
	163, 209, 154, 168, 112, 191, 173, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 153, 0, 96, 103, 135, 208,
	162, 120, 193, 117, 0, 0, 0, 0, 0, 134,
	0, 136, 0, 0, 174, 145, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 346, 0, 530, 0, 0, 0, 0,
	0, 0, 110, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 0, 0,
	0, 198, 0, 0, 0, 0, 160, 0, 177, 125,
	133, 97, 104, 0, 124, 151, 165, 169, 0, 0,
	0, 113, 0, 167, 155, 190, 0, 156, 166, 137,
	182, 161, 189, 199, 200, 179, 197, 207, 98, 178,
	188, 111, 170, 100, 186, 176, 143, 129, 130, 99,
	0, 194, 164, 116, 121, 115, 152, 183, 184, 114,
	210, 105, 196, 102, 106, 195, 150, 181, 187, 144,
	141, 101, 185, 142, 140, 132, 119, 126, 158, 139,
	159, 127, 147, 146, 148, 0, 0, 0, 175, 192,
	211, 108, 0, 171, 180, 201, 202, 203, 204, 205,
	206, 0, 0, 109, 122, 118, 157, 149, 107, 128,
	172, 131, 138, 163, 209, 154, 168, 112, 191, 173,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 153, 96,
	103, 135, 208, 162, 120, 193, 612, 117, 0, 0,
	0, 0, 0, 134, 0, 136, 0, 0, 174, 145,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 0, 0,
	0, 0, 0, 0, 0, 0, 110, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 0, 0, 198, 0, 0, 0, 0,
	160, 0, 177, 125, 133, 97, 104, 0, 124, 151,
	165, 169, 0, 0, 0, 113, 0, 167, 155, 190,
	0, 156, 166, 137, 182, 161, 189, 199, 200, 179,
	197, 207, 98, 178, 188, 111, 170, 100, 186, 176,
	143, 129, 130, 99, 0, 194, 164, 116, 121, 115,
	152, 183, 184, 114, 210, 105, 196, 102, 106, 195,
	150, 181, 187, 144, 141, 101, 185, 142, 140, 132,
	119, 126, 158, 139, 159, 127, 147, 146, 148, 0,
	0, 0, 175, 192, 211, 108, 0, 171, 180, 201,
	202, 203, 204, 205, 206, 0, 0, 109, 122, 118,
	157, 149, 107, 128, 172, 131, 138, 163, 209, 154,
	168, 112, 191, 173, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 330, 0, 0, 0, 0, 0,
	0, 153, 0, 96, 103, 135, 208, 162, 120, 193,
	117, 0, 0, 0, 0, 0, 134, 0, 136, 0,
	0, 174, 145, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 0, 0, 0, 0, 0, 0, 0, 0, 110,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 0, 198, 0,
	0, 0, 0, 160, 0, 177, 125, 133, 97, 104,
	0, 124, 151, 165, 169, 0, 0, 0, 113, 0,
	167, 155, 190, 0, 156, 166, 137, 182, 161, 189,
	199, 200, 179, 197, 207, 98, 178, 188, 111, 170,
	100, 186, 176, 143, 129, 130, 99, 0, 194, 164,
	116, 121, 115, 152, 183, 184, 114, 210, 105, 196,
	102, 106, 195, 150, 181, 187, 144, 141, 101, 185,
	142, 140, 132, 119, 126, 158, 139, 159, 127, 147,
	146, 148, 0, 0, 0, 175, 192, 211, 108, 0,
	171, 180, 201, 202, 203, 204, 205, 206, 0, 0,
	109, 122, 118, 157, 149, 107, 128, 172, 131, 138,
	163, 209, 154, 168, 112, 191, 173, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 153, 0, 96, 103, 135, 208,
	162, 120, 193, 117, 0, 0, 0, 0, 0, 134,
	0, 136, 0, 0, 174, 145, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 0, 0, 0, 0, 0, 0,
	0, 0, 110, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 0, 91,
	0, 198, 0, 0, 0, 0, 160, 0, 177, 125,
	133, 97, 104, 0, 124, 151, 165, 169, 0, 0,
	0, 113, 0, 167, 155, 190, 0, 156, 166, 137,
	182, 161, 189, 199, 200, 179, 197, 207, 98, 178,
	188, 111, 170, 100, 186, 176, 143, 129, 130, 99,
	0, 194, 164, 116, 121, 115, 152, 183, 184, 114,
	210, 105, 196, 102, 106, 195, 150, 181, 187, 144,
	141, 101, 185, 142, 140, 132, 119, 126, 158, 139,
	159, 127, 147, 146, 148, 0, 0, 0, 175, 192,
	211, 108, 0, 171, 180, 201, 202, 203, 204, 205,
	206, 0, 0, 109, 122, 118, 157, 149, 107, 128,
	172, 131, 138, 163, 209, 154, 168, 112, 191, 173,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 153, 0, 96,
	103, 135, 208, 162, 120, 193, 117, 0, 0, 0,
	0, 0, 134, 0, 136, 0, 0, 174, 145, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 346, 0, 0, 0,
	0, 0, 0, 0, 0, 110, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 0, 198, 0, 0, 0, 0, 160,
	0, 177, 125, 133, 97, 104, 0, 124, 151, 165,
	169, 0, 0, 0, 113, 0, 167, 155, 190, 0,
	156, 166, 137, 182, 161, 189, 199, 200, 179, 197,
	207, 98, 178, 188, 111, 170, 100, 186, 176, 143,
	129, 130, 99, 0, 194, 164, 116, 121, 115, 152,
	183, 184, 114, 210, 105, 196, 102, 106, 195, 150,
	181, 187, 144, 141, 101, 185, 142, 140, 132, 119,
	126, 158, 139, 159, 127, 147, 146, 148, 0, 0,
	0, 175, 192, 211, 108, 0, 171, 180, 201, 202,
	203, 204, 205, 206, 0, 0, 109, 122, 118, 157,
	149, 107, 128, 172, 131, 138, 163, 209, 154, 168,
	112, 191, 173, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	153, 0, 96, 103, 135, 208, 162, 120, 193, 117,
	0, 0, 0, 0, 0, 134, 0, 136, 0, 0,
	174, 145, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	0, 0, 0, 0, 0, 0, 0, 0, 110, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 198, 0, 0,
	0, 0, 160, 0, 177, 125, 133, 97, 104, 0,
	124, 151, 165, 169, 0, 0, 0, 113, 0, 167,
	155, 190, 0, 156, 166, 137, 182, 161, 189, 199,
	200, 179, 197, 207, 98, 178, 188, 111, 170, 100,
	186, 176, 143, 129, 130, 99, 0, 194, 164, 116,
	121, 115, 152, 183, 184, 114, 210, 105, 196, 102,
	106, 195, 150, 181, 187, 144, 141, 101, 185, 142,
	140, 132, 119, 126, 158, 139, 159, 127, 147, 146,
	148, 0, 0, 0, 175, 192, 211, 108, 0, 171,
	180, 201, 202, 203, 204, 205, 206, 0, 0, 109,
	122, 118, 157, 149, 107, 128, 172, 131, 138, 163,
	209, 154, 168, 112, 191, 173, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 153, 0, 96, 103, 135, 208, 162,
	120, 193, 117, 0, 0, 0, 0, 0, 134, 0,
	136, 0, 0, 174, 145, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 271, 0, 0, 0, 0, 0, 0, 0,
	0, 110, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 0,
	198, 0, 0, 0, 0, 160, 0, 177, 125, 133,
	97, 104, 0, 124, 151, 165, 169, 0, 0, 0,
	113, 0, 167, 155, 190, 0, 156, 166, 137, 182,
	161, 189, 199, 200, 179, 197, 207, 98, 178, 188,
	111, 170, 100, 186, 176, 143, 129, 130, 99, 0,
	194, 164, 116, 121, 115, 152, 183, 184, 114, 210,
	105, 196, 102, 106, 195, 150, 181, 187, 144, 141,
	101, 185, 142, 140, 132, 119, 126, 158, 139, 159,
	127, 147, 146, 148, 0, 0, 0, 175, 192, 211,
	108, 0, 171, 180, 201, 202, 203, 204, 205, 206,
	0, 0, 109, 122, 118, 157, 149, 107, 128, 172,
	131, 138, 163, 209, 154, 168, 112, 191, 173, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 103,
	135, 208, 162, 120, 193,
}
var yyPact = [...]int{

	1614, -1000, -186, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 843, 867, -1000, -1000, -1000, -1000, -1000, -1000,
	395, 38, 47, 113, -22, 11416, 110, 2070, 11902, -1000,
	4, -1000, -1000, -1000, 11902, -1000, -1000, -1000, -100, -104,
	-1000, 682, -1000, -1000, -1000, -1000, -1000, 827, 841, 724,
	830, 762, -1000, 6212, 73, 73, 11173, 5456, -1000, -1000,
	294, 11902, 106, 87, 71, 71, 71, -1000, -1000, -1000,
	-154, 109, 11902, 301, -1000, 11902, 69, 591, 69, 69,
	69, 11902, -1000, 153, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 11902, 590, 793, 3336, 59, 3336, 3336, -1000,
	3336, 3336, -1000, 3336, 26, 3336, -64, 855, -1000, -1000,
	-1000, -1000, -35, -1000, 3336, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 509,
	802, 7221, 7221, 843, -1000, 682, -1000, -1000, -1000, 792,
	-1000, -1000, 343, 868, -1000, 8481, 146, -1000, 7221, 2231,
	675, -1000, -1000, 675, -1000, -1000, 133, -1000, -1000, 7977,
	7977, 7977, 7977, 7977, 7977, 7977, 7977, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 675, -1000, 6969, 675, 675, 675, 675, 675, 675,
	675, 675, 7221, 675, 675, 675, 675, 675, 675, 675,
	675, 675, 675, 675, 675, 675, 675, 675, 10930, 10200,
	11902, 632, -1000, 671, 5191, -122, -1000, -1000, -1000, 270,
	9957, -1000, -1000, -1000, 790, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 582, 11902, -1000, 1890, -1000, 579,
	11902, 577, 316, 576, 11902, -1000, 11902, 3336, 24, 50,
	108, 11902, 673, 84, 11902, 813, 718, 11902, 575, 574,
	-1000, 4926, -1000, 3336, 3336, -1000, -1000, -1000, 3336, 3336,
	3336, 11902, 3336, 3336, -1000, -1000, -1000, -1000, -1000, 3336,
	3336, -1000, 866, 273, -1000, -1000, -1000, -1000, 7221, -1000,
	717, -1000, -1000, -1000, -1000, -1000, -1000, 874, 189, 375,
	144, 672, -1000, 404, 827, 509, 762, 9714, 730, -1000,
	-1000, -1000, 11902, -1000, 7221, 7221, 439, -1000, 10686, -1000,
	-1000, 3866, 207, 7977, 355, 227, 7977, 7977, 7977, 7977,
	7977, 7977, 7977, 7977, 7977, 7977, 7977, 7977, 7977, 7977,
	7977, 445, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	570, -1000, 682, 595, 595, 183, 183, 183, 183, 183,
	183, 183, 8229, 822, 509, 568, 261, 6969, 6212, 6212,
	7221, 7221, 6716, 6464, 6212, 822, 311, 261, 12145, -1000,
	-1000, 7725, -1000, -1000, -1000, -1000, -1000, 509, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 11659, 11659, 6212, 6212, 6212,
	6212, 41, 11902, -1000, 645, 744, -1000, -1000, -1000, 824,
	9219, 9471, 41, 629, 10200, 11902, -1000, -1000, 4661, 671,
	-122, 649, -1000, -119, -131, 5708, 173, -1000, -1000, -1000,
	-1000, 3071, 667, 609, 177, -1000, -87, -1000, -1000, -1000,
	-1000, 684, -1000, -1000, 684, 684, 684, 684, -48, -48,
	-48, -48, -1000, -1000, -1000, -1000, -1000, 706, 694, -1000,
	684, 684, 684, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 691, 691, 691, 687, 687, 708, 823, 3336, 812,
	3336, -1000, 137, -1000, 11659, 11659, 11902, 11902, 121, 11902,
	11902, 670, -1000, 11902, 666, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 11902, 302, 11902, 11902, 261, 11902, -1000, 773, 7221,
	7221, 4396, 7221, -1000, -1000, -1000, 802, -1000, 822, 836,
	-1000, 783, 782, 6212, -1000, -1000, 207, 308, -1000, -1000,
	418, -1000, -1000, -1000, -1000, 140, 675, -1000, 1920, -1000,
	-1000, -1000, -1000, 355, 7977, 7977, 7977, 482, 1920, 2045,
	1240, 1165, 183, 160, 160, 168, 168, 168, 168, 168,
	873, 873, -1000, -1000, -1000, 509, -1000, -1000, -1000, 6212,
	-1000, 7221, -1000, 509, 563, -1000, 563, 372, 361, 231,
	865, 563, 226, 863, 563, 563, 6212, 389, -1000, 7221,
	509, -1000, 138, -1000, 853, 665, 664, 563, 509, 662,
	563, 563, 605, 675, -1000, 12145, 10200, 10200, 10200, 10200,
	10200, -1000, 759, 758, -1000, 734, 732, 738, 11902, -1000,
	561, 9219, 158, 675, -1000, 10443, -1000, -1000, 854, 10200,
	654, -1000, -1000, 649, -122, -84, -1000, -1000, -1000, -1000,
	261, -1000, 458, 648, 2806, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 689, 540, -1000, 801, 200, 192, 538, 799,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	327, 7977, 872, -1000, 797, -1000, 796, 453, -90, -1000,
	-1000, 403, -48, -48, -1000, -1000, 173, 788, 173, 173,
	173, 452, 452, -1000, -1000, -1000, -1000, 400, -1000, -1000,
	-1000, 392, -1000, 715, 11659, -1000, -1000, -1000, -1000, -1000,
	368, 368, 212, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 40, 704, -1000, -1000, -1000, 18,
	12, 76, -1000, 3336, 11902, 273, -1000, 437, 7221, -1000,
	-1000, -1000, 770, 261, 261, 136, -1000, -1000, 11902, -1000,
	-1000, -1000, -1000, 657, -1000, -1000, -1000, 3601, 6212, -1000,
	482, 1920, 1893, -1000, 7977, 7977, -1000, 509, 261, -1000,
	6212, -1000, -1000, 241, 445, 241, 7977, 7977, -1000, 7977,
	7977, -1000, -167, 663, 274, -1000, 7221, 220, -1000, 4396,
	-1000, 7977, 7977, -1000, -1000, -1000, -1000, 714, 12145, 675,
	-1000, 8976, 11659, 658, -1000, 255, 744, 703, 713, 978,
	-1000, -1000, -1000, -1000, 756, -1000, 753, -1000, -1000, -1000,
	-1000, -1000, 103, 101, 93, 11659, -1000, 843, 7221, 654,
	-1000, -1000, -1000, -128, -136, -1000, -1000, -1000, 3071, -1000,
	3071, 11659, 57, -1000, 538, 538, -1000, -1000, -1000, 688,
	-1000, 1920, -103, -1000, -1000, -1000, -1000, -1000, 594, 173,
	173, -1000, 234, -1000, -1000, -1000, 549, -1000, 547, 641,
	545, 11902, -1000, 682, -1000, 483, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 501, -1000, 488,
	11902, -1000, -1000, -1000, -1000, -1000, 11659, -173, 481, 11659,
	11659, 11902, -1000, -1000, 302, -1000, 261, -1000, 4131, -1000,
	854, 10200, -1000, -1000, 509, -1000, 7977, 1920, 1920, -1000,
	-1000, 509, 684, 684, -1000, 684, 687, -1000, 684, -7,
	684, -21, 509, 509, 1878, 1840, 1754, 1694, 675, -161,
	-1000, 261, 7221, -1000, 1601, 1508, -1000, 804, 612, 626,
	-1000, -1000, 5960, 509, 535, 132, 532, -1000, 843, 12145,
	7221, -1000, -1000, 7221, 685, -1000, 7221, -1000, -1000, -1000,
	675, 675, 675, 532, 827, 261, -1000, -1000, -1000, -1000,
	2806, -1000, 515, -1000, 684, -1000, -1000, -1000, 11659, -1000,
	-1000, -1000, -1000, -1000, -1000, -48, 436, -48, 381, -1000,
	378, 3336, -1000, 473, -1000, -1000, -1000, -1000, 179, -1000,
	-1000, 808, -1000, 4131, -1000, -1000, 679, -1000, -1000, -1000,
	849, 639, -1000, 1920, -1000, -1000, 98, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 7977, 7977, 7977, 7977, 7977,
	509, 407, 261, 7977, 7977, 794, -1000, 675, -1000, -1000,
	668, 11659, 11659, -1000, 11659, 827, -1000, 261, 261, 11659,
	261, 11659, 11659, 11659, 8733, -1000, 145, 11659, -1000, 513,
	-1000, 173, -1000, 173, 564, 536, -1000, -1000, 516, -1000,
	463, -1000, -1000, 675, 631, -1000, 246, 11659, 845, 837,
	-1000, -1000, 853, 853, 853, 853, 35, -1000, -1000, 853,
	853, 871, -1000, 675, -1000, 682, 127, -1000, -1000, -1000,
	508, 506, 506, 506, 158, 145, -1000, 459, 238, 373,
	-1000, 53, 11659, -1000, -1000, -1000, -1000, -1000, -1000, 37,
	4131, 3071, 498, -1000, 7221, 7221, -1000, -1000, -1000, -1000,
	509, 48, -177, -1000, -1000, 12145, 626, 509, 11659, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 363, -1000, -1000, 11902,
	-1000, -1000, 492, -1000, 11659, -1000, -1000, 704, 261, 621,
	-1000, 769, -171, -180, 484, -1000, -1000, -1000, 677, -1000,
	37, 780, -173, -1000, 767, -1000, 11659, -1000, 36, -1000,
	-175, 469, 33, -178, 712, 675, -183, 710, -1000, 861,
	7473, -1000, -1000, 856, 174, 174, 853, 509, -1000, -1000,
	-1000, 61, 410, -1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1161, 21, 489, 1158, 1154, 1151, 1150, 1149, 1148,
	1146, 1145, 1143, 1141, 1140, 1138, 1137, 1136, 1133, 1129,
	1128, 1126, 1124, 1122, 1120, 1119, 150, 1118, 1116, 1115,
	75, 1114, 77, 1113, 1106, 44, 61, 48, 47, 190,
	1105, 55, 71, 62, 1104, 37, 1100, 1099, 79, 1098,
	1097, 59, 1096, 1095, 1502, 1094, 1092, 13, 33, 1090,
	1089, 1088, 1087, 87, 905, 1085, 1081, 29, 1080, 1079,
	95, 1078, 56, 5, 14, 11, 18, 1076, 58, 25,
	1075, 50, 1074, 1073, 1070, 1068, 28, 1066, 64, 24,
	1065, 26, 63, 1064, 7, 70, 35, 23, 9, 78,
	66, 1063, 20, 69, 57, 1061, 1059, 456, 54, 1058,
	1055, 49, 1052, 1051, 31, 346, 394, 1050, 1044, 1043,
	1039, 1036, 42, 0, 528, 405, 81, 1029, 1028, 1025,
	1423, 80, 60, 16, 1017, 74, 76, 40, 1013, 1006,
	43, 1005, 1004, 1001, 997, 995, 994, 991, 990, 989,
	327, 987, 981, 978, 30, 19, 968, 967, 65, 27,
	966, 963, 962, 961, 46, 17, 959, 958, 41, 32,
	945, 942, 941, 934, 932, 34, 12, 927, 15, 926,
	10, 925, 38, 920, 4, 919, 8, 917, 3, 914,
	6, 51, 1, 913, 2, 902, 888, 52, 348, 884,
	882, 82,
}
var yyR1 = [...]int{

	0, 195, 196, 196, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 6, 3, 4,
	4, 5, 5, 7, 7, 29, 29, 8, 9, 9,
	9, 199, 199, 49, 49, 48, 48, 95, 95, 10,
	10, 10, 10, 100, 100, 104, 104, 104, 105, 105,
	105, 105, 138, 138, 162, 162, 89, 11, 11, 11,
	11, 11, 11, 190, 190, 189, 188, 188, 187, 187,
	186, 17, 171, 173, 173, 172, 172, 172, 172, 165,
	142, 142, 142, 142, 142, 142, 142, 141, 141, 141,
	141, 141, 145, 145, 146, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 144, 144, 144, 144, 144, 147,
	147, 147, 147, 147, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 149,
	149, 149, 149, 149, 149, 149, 149, 164, 164, 150,
	150, 158, 158, 159, 159, 159, 156, 156, 157, 157,
	160, 160, 152, 153, 161, 154, 154, 154, 155, 155,
	155, 163, 163, 163, 163, 151, 166, 166, 181, 181,
	180, 180, 180, 170, 170, 177, 177, 177, 177, 177,
	168, 168, 169, 169, 179, 179, 178, 167, 167, 182,
	182, 182, 182, 193, 194, 192, 192, 192, 192, 192,
	174, 174, 174, 175, 175, 175, 176, 176, 176, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 108, 108, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 185, 183, 183,
	184, 184, 13, 18, 18, 14, 14, 14, 14, 14,
	15, 15, 19, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 112, 112, 110, 110, 113,
	113, 111, 111, 111, 114, 114, 114, 139, 139, 139,
	21, 21, 23, 23, 24, 25, 22, 22, 22, 22,
	22, 22, 22, 22, 16, 200, 26, 27, 27, 28,
	28, 28, 32, 32, 32, 30, 30, 30, 31, 31,
	37, 37, 36, 36, 38, 38, 38, 38, 127, 127,
	127, 126, 126, 40, 40, 41, 41, 42, 42, 43,
	43, 43, 43, 56, 56, 94, 94, 96, 96, 44,
	44, 44, 44, 45, 45, 46, 46, 47, 47, 134,
	134, 133, 133, 133, 132, 132, 50, 50, 50, 52,
	51, 51, 51, 51, 53, 53, 55, 55, 54, 54,
	57, 57, 57, 57, 58, 58, 39, 39, 39, 39,
	39, 39, 39, 109, 109, 60, 60, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 71, 71, 71,
	71, 71, 71, 61, 61, 61, 61, 61, 61, 61,
	35, 35, 72, 72, 72, 78, 73, 73, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	68, 68, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 201, 201, 70, 69, 69, 69, 69, 69, 69,
	33, 33, 33, 33, 33, 137, 137, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	82, 82, 34, 34, 80, 80, 81, 83, 83, 79,
	79, 79, 63, 63, 63, 63, 63, 63, 63, 63,
	65, 65, 65, 84, 84, 85, 85, 86, 86, 87,
	87, 88, 90, 90, 90, 91, 91, 91, 91, 92,
	92, 92, 62, 62, 62, 62, 62, 62, 93, 93,
	93, 93, 97, 97, 74, 74, 76, 76, 75, 77,
	98, 98, 102, 99, 99, 103, 103, 103, 103, 101,
	101, 101, 129, 129, 129, 106, 106, 115, 115, 116,
	116, 107, 107, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 119, 119, 118, 118, 118, 120, 120,
	121, 121, 121, 121, 128, 128, 124, 124, 125, 125,
	130, 130, 131, 131, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 197, 198, 135, 136,
	136, 136,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 4, 6, 7, 5, 10, 1,
	3, 1, 3, 7, 8, 1, 1, 9, 8, 7,
	6, 1, 1, 1, 3, 1, 3, 0, 4, 3,
	4, 5, 4, 1, 3, 3, 2, 2, 2, 2,
	2, 1, 1, 1, 0, 2, 0, 2, 2, 8,
	8, 5, 5, 0, 2, 1, 0, 2, 1, 3,
	3, 4, 4, 2, 4, 1, 3, 3, 3, 2,
	1, 2, 2, 2, 2, 2, 2, 3, 1, 1,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 1, 4, 4, 2, 2, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 6, 6, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 1, 0, 1,
	1, 2, 2, 3, 1, 0, 3, 3, 0, 2,
	2, 2, 1, 2, 1, 2, 5, 4, 1, 2,
	2, 3, 2, 0, 1, 2, 3, 3, 2, 2,
	1, 1, 0, 1, 1, 3, 2, 3, 1, 10,
	11, 11, 12, 3, 3, 1, 1, 2, 2, 2,
	0, 1, 3, 1, 2, 3, 1, 1, 1, 6,
	10, 8, 7, 7, 7, 9, 7, 7, 4, 5,
	7, 5, 5, 5, 12, 7, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 7, 1, 3,
	8, 8, 3, 3, 5, 4, 6, 4, 4, 4,
	3, 2, 3, 4, 4, 3, 4, 4, 4, 4,
	4, 4, 3, 3, 2, 3, 3, 2, 3, 4,
	3, 7, 5, 4, 2, 4, 2, 2, 2, 2,
	3, 3, 5, 2, 3, 1, 1, 0, 1, 1,
	1, 0, 2, 2, 0, 2, 2, 0, 1, 1,
	2, 1, 1, 2, 1, 1, 2, 2, 2, 2,
	2, 2, 3, 3, 2, 0, 2, 0, 2, 1,
	2, 2, 0, 1, 1, 0, 1, 1, 0, 1,
	0, 1, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 1, 0, 2, 1, 3, 1, 1, 1,
	3, 1, 3, 3, 7, 1, 3, 1, 3, 4,
	4, 4, 3, 2, 4, 0, 1, 0, 2, 0,
	1, 0, 1, 2, 1, 1, 1, 2, 2, 1,
	2, 3, 2, 3, 2, 2, 2, 1, 1, 3,
	0, 5, 5, 5, 0, 2, 1, 3, 3, 2,
	3, 1, 2, 0, 3, 1, 1, 3, 3, 4,
	4, 5, 3, 4, 5, 6, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	2, 2, 2, 2, 2, 3, 1, 1, 1, 1,
	5, 6, 4, 4, 6, 6, 6, 8, 8, 8,
	8, 9, 7, 5, 4, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 8,
	8, 0, 2, 3, 4, 4, 4, 4, 4, 4,
	0, 3, 4, 7, 3, 1, 1, 2, 3, 3,
	1, 2, 2, 1, 2, 1, 2, 2, 1, 2,
	0, 1, 0, 2, 1, 2, 4, 0, 2, 1,
	3, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 0, 3, 0, 2, 0, 3, 1,
	3, 2, 0, 1, 1, 0, 2, 4, 4, 0,
	2, 4, 2, 1, 3, 5, 4, 6, 1, 3,
	3, 5, 0, 5, 1, 3, 1, 2, 3, 1,
	1, 3, 3, 1, 3, 3, 3, 3, 3, 1,
	2, 1, 1, 1, 1, 1, 1, 0, 2, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	0, 1, 1, 1, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
	1, 1,
}
var yyChk = [...]int{

	-1000, -195, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -19, -20, -21, -23, -24, -25,
	-22, -16, -3, -4, 6, 7, -29, 9, 10, 30,
	-17, 115, 116, 118, 117, 149, 119, 142, 50, 162,
	163, 165, 166, 25, 143, 144, 147, 148, 31, 32,
	121, -197, 8, 253, 54, -196, 270, -86, 15, -28,
	5, -26, -200, -26, -26, -26, -26, -26, -171, -173,
	54, 90, -121, -162, 245, 122, 123, 129, 133, 132,
	72, -107, 125, 222, 127, 123, 123, 124, 125, 245,
	122, 123, -54, -130, 57, -123, 263, 135, 162, 173,
	167, 195, 187, 264, 136, 185, 188, 232, 215, 227,
	66, 165, 241, 145, 183, 179, 177, 27, 229, 200,
	268, 178, 228, 121, 138, 133, 201, 205, 233, 171,
	172, 235, 199, 134, 33, 265, 35, 153, 236, 203,
	198, 194, 197, 170, 193, 39, 207, 206, 208, 231,
	190, 139, 180, 18, 239, 148, 151, 230, 202, 204,
	130, 155, 267, 237, 176, 140, 152, 147, 240, 141,
	166, 217, 234, 243, 38, 212, 169, 132, 163, 159,
	218, 191, 154, 181, 182, 196, 168, 192, 164, 156,
	149, 242, 213, 269, 175, 189, 186, 160, 125, 157,
	158, 219, 220, 221, 222, 223, 224, 161, 266, 238,
	184, 214, 123, 108, 188, 232, 115, 216, 217, 229,
	124, 33, 230, 155, -139, 123, -110, 215, 219, 220,
	221, 224, 222, 161, 57, 234, 233, 225, -130, 164,
	-135, -54, -135, -135, -135, -135, 218, 218, -135, -2,
	-91, 17, 16, -5, -3, -197, 6, 20, 21, -32,
	40, 41, -27, -38, 99, -39, -130, -59, 74, -64,
	29, 57, -123, 23, -63, -60, -79, -77, -78, 108,
	109, 110, 97, 98, 105, 75, 111, -68, -66, -67,
	-69, 59, 58, 67, 60, 61, 62, 63, 68, 69,
	70, -124, -75, -197, 44, 45, 254, 255, 256, 257,
	262, 258, 77, 34, 244, 252, 251, 250, 248, 249,
	246, 247, 260, 261, 128, 245, 103, 253, -107, -107,
	11, -48, -54, -99, -138, 164, -103, 234, 233, -125,
	-101, -124, -122, 232, 188, 231, 57, -123, 120, 73,
	22, 24, 210, 76, 108, 16, 77, 107, 254, 115,
	48, 246, 247, 244, 256, 257, 245, 216, 29, 10,
	25, 143, 21, 101, 117, 80, 81, 146, 23, 144,
	70, 19, 51, 11, 13, 14, 128, 127, 92, 124,
	46, 8, 111, 26, 89, 42, 28, 44, 90, 17,
	248, 249, 31, 262, 150, 103, 49, 36, 74, 68,
	71, 52, 72, 15, 47, 91, 118, 253, 45, 122,
	6, 259, 30, 142, 43, 123, 79, 260, 261, 126,
	69, 5, 129, 32, 9, 50, 53, 250, 251, 252,
	175, 34, 78, 12, -172, 90, -165, 57, -54, 124,
	125, -116, 128, -116, -116, 253, 123, -54, 115, 117,
	120, 52, -18, -54, -115, 128, 57, -115, -115, -115,
	-54, 112, -54, 57, 30, -136, -197, -125, 245, 57,
	155, 123, 156, 125, -136, -136, -136, -136, -136, 159,
	160, -136, -113, -112, 227, 228, 218, 226, 12, 218,
	158, -136, -135, -135, -198, 56, -92, 19, 31, -39,
	-130, -87, -88, -39, -86, -2, -26, 36, -30, 20,
	21, 65, 11, -127, 73, 72, 89, -126, 22, -124,
	59, 112, -39, -61, 92, 74, 90, 91, 76, 94,
	93, 104, 97, 98, 99, 100, 101, 102, 103, 95,
	96, 107, 82, 83, 84, 85, 86, 87, 88, -109,
	-197, -78, -197, 113, 114, -64, -64, -64, -64, -64,
	-64, -64, -64, -197, -2, -73, -39, -197, -197, -197,
	-197, -197, -197, -197, -197, -197, -82, -39, -197, -201,
	-70, -197, -201, -70, -201, -70, -201, -197, -201, -70,
	-201, -70, -201, -201, -70, -197, -197, -197, -197, -197,
	-197, -55, 26, -54, -41, -42, -43, -44, -56, -78,
	-197, -54, -54, -48, -199, 55, 11, 53, 55, -99,
	164, -100, -104, 235, 237, 82, -129, -124, 59, 29,
	30, 56, 55, -54, -142, -141, -145, -146, -148, -147,
	-149, -143, -144, 175, 185, 186, 108, 189, 191, 192,
	193, 194, 195, 196, 197, 198, 199, 200, 30, 145,
	181, 182, 183, 184, 201, 202, 203, 204, 205, 206,
	207, 208, 167, 187, 264, 168, 169, 170, 171, 172,
	173, 176, 177, 178, 179, 180, 57, -54, 57, 74,
	57, -54, -54, -136, 157, 157, 123, 123, -54, 55,
	126, -48, 23, 52, -49, -54, 57, 57, -131, -130,
	-122, -136, -136, -136, -136, -136, -54, -136, -136, -136,
	-136, 11, -111, 11, 92, -39, 52, 9, 92, 55,
	18, 112, 55, -90, 24, 25, -91, -198, -32, -65,
	-124, 60, 63, -31, 43, -54, -39, -39, -71, 68,
	74, 69, 70, -126, 99, -131, -125, -122, -64, -72,
	-75, -78, 64, 92, 90, 91, 76, -64, -64, -64,
	-64, -64, -64, -64, -64, -64, -64, -64, -64, -64,
	-64, -64, -137, 57, 59, 57, -63, -63, -124, -30,
	-198, 55, -198, -2, -36, -38, -36, -39, -39, -79,
	59, -36, -79, 59, -36, -36, -30, -80, -81, 78,
	-79, -124, -130, -198, -64, -124, -124, -36, -37, -36,
	-36, -36, -95, 151, -54, 30, 55, -50, -52, -51,
	-53, 42, 46, 48, 43, 44, 45, 49, -134, 22,
	-41, -197, -133, 151, -132, 22, -130, 59, -95, 53,
	-41, -54, -103, -100, 55, 236, 238, 239, 52, 71,
	-39, -155, 107, -174, -175, -176, -125, 59, 60, -165,
	-166, -167, -177, 137, -182, 130, 132, 129, -168, 138,
	124, 28, 56, -160, -152, -153, -161, -163, -151, 68,
	74, 29, 52, 210, 130, 28, 129, 66, -156, 213,
	-150, 54, -150, -150, -150, -150, -154, 188, -154, -154,
	-154, 54, 54, -150, -150, -150, -158, 54, -158, -158,
	-159, 54, -159, -128, 53, 22, -136, 23, -136, -117,
	120, 117, 118, -185, 116, 210, 188, 66, 29, 15,
	254, 151, 269, 57, 152, -124, -124, -54, -54, 120,
	117, -54, -54, -54, 55, -54, -114, 90, 12, -130,
	-130, -54, 38, -39, -39, -131, -88, -92, -106, 19,
	11, 34, 34, -36, 68, 69, 70, 112, -197, -72,
	-64, -64, -64, -35, 146, 73, -198, -37, -39, -198,
	55, -198, -198, 55, 53, 22, 11, 11, -198, 11,
	11, -198, -198, -36, -83, -81, 80, -39, -198, 112,
	-198, 55, 55, -198, -198, -198, -198, -62, 30, 34,
	-2, -197, -197, -98, -102, -79, -42, -43, -43, -42,
	-43, 42, 42, 42, 47, 42, 47, 42, -51, -130,
	-198, -57, 50, 127, 51, -197, -132, -58, 12, -41,
	-58, -104, -105, 240, 237, 243, 57, 59, 55, -176,
	82, 54, 57, 28, -168, -168, -169, 57, -169, 28,
	68, -64, 9, 28, 28, 59, -157, 214, 60, -154,
	-154, -155, 30, -155, -155, -155, -164, 59, -164, 60,
	60, 52, -124, -89, -135, -108, -191, 131, 137, 138,
	133, 124, 28, 130, 132, 151, 129, -108, -191, 131,
	-118, -120, 126, 22, 124, 28, 151, -190, 53, 157,
	157, 126, -136, -54, -111, 59, -39, 39, 112, -54,
	-40, 11, 99, -125, -37, -35, 73, -64, -64, -198,
	-38, -140, 108, 185, 145, 183, 179, 199, 190, 212,
	181, 213, -137, -140, -64, -64, -64, -64, 263, -86,
	81, -39, 79, -125, -64, -64, -97, 52, -98, -74,
	-76, -75, -197, -2, -93, -124, -96, -124, -58, 55,
	82, -46, -45, 52, 53, -47, 52, -45, 42, 42,
	124, 124, 124, -96, -86, -39, -58, 237, 241, 242,
	-175, -176, -179, -178, -124, -182, -169, -169, 54, -67,
	56, -155, -155, 57, 108, 56, 55, 56, 55, 56,
	55, -54, -2, 54, -165, -135, 57, -135, 57, -54,
	-135, -124, -188, 266, -189, 57, -124, -124, -54, -114,
	-58, -41, -198, -64, -198, -150, -150, -150, -159, -150,
	172, -150, 172, -198, -198, 19, 19, 19, 19, -197,
	-34, 259, -39, 55, 55, 27, -97, 55, -198, -198,
	-198, 55, 112, -198, 55, -86, -102, -39, -39, 54,
	-39, -197, -197, -197, -198, -91, 56, 55, -150, -94,
	-124, -154, 59, -154, 60, 60, -136, -89, -165, -135,
	-119, 126, 22, 26, -187, -186, -125, 54, -84, 13,
	-154, 57, -64, -64, -64, -64, -64, -198, 59, -64,
	-64, 28, -76, 34, -2, -197, -124, -124, -124, -91,
	-94, -94, -94, -94, -133, -181, -180, 53, 134, 66,
	-178, 56, 55, -155, -155, 56, 56, 56, 57, -197,
	55, 82, -94, -85, 14, 16, -198, -198, -198, -198,
	-33, 92, 266, -198, -198, 9, -74, -2, 112, 56,
	-198, -198, -198, -57, -180, 57, -170, 82, 59, 140,
	-124, -135, -183, -184, 151, -186, -176, 56, -39, -73,
	-198, 264, 49, 267, -98, -198, -124, 60, -54, -198,
	55, -124, -190, 39, 265, 268, 54, -184, 34, -188,
	39, -94, 153, 266, 56, 154, 267, -193, -194, 52,
	-197, 268, -194, 52, 10, 9, -64, 150, -192, 141,
	136, 139, 30, -192, -198, -198, 135, 29, 68,
}
var yyDef = [...]int{

	23, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 567, 0, 325, 325, 325, 325, 325, 325,
	0, -2, 621, 0, 0, 0, 0, -2, 311, 312,
	0, 314, 315, 868, 868, 868, 868, 868, 0, 0,
	868, 0, 35, 36, 866, 1, 3, 575, 0, 0,
	329, 332, 327, 0, 621, 621, 0, 0, 67, 68,
	0, 0, 0, 0, 619, 619, 619, 641, 642, 643,
	0, 0, 0, 0, 622, 0, 617, 0, 617, 617,
	617, 0, 261, 398, 650, 651, 750, 751, 752, 753,
	754, 755, 756, 757, 758, 759, 760, 761, 762, 763,
	764, 765, 766, 767, 768, 769, 770, 771, 772, 773,
	774, 775, 776, 777, 778, 779, 780, 781, 782, 783,
	784, 785, 786, 787, 788, 789, 790, 791, 792, 793,
	794, 795, 796, 797, 798, 799, 800, 801, 802, 803,
	804, 805, 806, 807, 808, 809, 810, 811, 812, 813,
	814, 815, 816, 817, 818, 819, 820, 821, 822, 823,
	824, 825, 826, 827, 828, 829, 830, 831, 832, 833,
	834, 835, 836, 837, 838, 839, 840, 841, 842, 843,
	844, 845, 846, 847, 848, 849, 850, 851, 852, 853,
	854, 855, 856, 857, 858, 859, 860, 861, 862, 863,
	864, 865, 0, 0, 0, 869, 0, 869, 869, 274,
	869, 869, 277, 869, 0, 869, 0, 284, 286, 287,
	288, 289, 0, 293, 869, 308, 309, 298, 310, 313,
	316, 317, 318, 319, 320, 321, 868, 868, 324, 29,
	579, 0, 0, 567, 31, 0, 325, 330, 331, 335,
	333, 334, 326, 0, 344, 348, 0, 406, 0, 411,
	413, -2, -2, 0, 448, 449, 450, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 476, 477, 478,
	479, 552, 553, 554, 555, 556, 557, 558, 559, 415,
	416, 549, 599, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 540, 0, 511, 511, 511, 511, 511, 511,
	511, 511, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 45, 49, 0, 842, 603, -2, -2, 0,
	0, 648, 649, -2, 760, -2, 646, 647, 654, 655,
	656, 657, 658, 659, 660, 661, 662, 663, 664, 665,
	666, 667, 668, 669, 670, 671, 672, 673, 674, 675,
	676, 677, 678, 679, 680, 681, 682, 683, 684, 685,
	686, 687, 688, 689, 690, 691, 692, 693, 694, 695,
	696, 697, 698, 699, 700, 701, 702, 703, 704, 705,
	706, 707, 708, 709, 710, 711, 712, 713, 714, 715,
	716, 717, 718, 719, 720, 721, 722, 723, 724, 725,
	726, 727, 728, 729, 730, 731, 732, 733, 734, 735,
	736, 737, 738, 739, 740, 741, 742, 743, 744, 745,
	746, 747, 748, 749, 0, 0, 85, 0, 83, 0,
	0, 0, 0, 0, 0, 65, 0, 869, 0, 0,
	0, 0, 252, 0, 0, 0, 0, 0, 0, 0,
	260, 0, 262, 869, 869, 265, 870, 871, 869, 869,
	869, 0, 869, 869, 272, 273, 275, 276, 278, 869,
	869, 280, 0, 301, 299, 300, 295, 296, 0, 290,
	291, 294, 322, 323, 30, 867, 24, 0, 0, 576,
	0, 568, 569, 572, 575, 29, 332, 0, 338, 336,
	337, 328, 0, 345, 0, 0, 0, 349, 0, 351,
	352, 0, 409, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 433, 434, 435, 436, 437, 438, 439, 412,
	0, 426, 0, 0, 0, 468, 469, 470, 471, 472,
	473, 474, 0, 335, 29, 0, 446, 0, 0, 0,
	0, 0, 0, 0, 0, 335, 0, 541, 0, 495,
	503, 0, 496, 504, 497, 505, 498, 0, 499, 506,
	500, 507, 501, 502, 508, 0, 0, 0, 340, 0,
	0, 47, 0, 397, 0, 355, 357, 358, 359, -2,
	0, 381, -2, 0, 0, 0, 41, 42, 0, 50,
	842, 52, 53, 0, 0, 0, 168, 612, 613, 614,
	610, 210, 0, 0, 89, 90, 156, 98, 99, 100,
	101, 149, 103, 104, 149, 149, 149, 149, 165, 165,
	165, 165, 132, 133, 134, 135, 136, 0, 0, 119,
	149, 149, 149, 123, 139, 140, 141, 142, 143, 144,
	145, 146, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 151, 151, 151, 153, 153, 644, 0, 869, 0,
	869, 81, 0, 228, 0, 0, 0, 0, 0, 0,
	0, 255, 618, 0, 257, 43, 258, 259, 399, 652,
	653, 263, 264, 266, 267, 268, 269, 270, 271, 279,
	283, 0, 304, 0, 0, 285, 0, 580, 0, 0,
	0, 0, 0, 571, 573, 574, 579, 32, 335, 0,
	560, 0, 0, 0, 339, 27, 407, 408, 410, 427,
	0, 429, 431, 350, 346, 0, 550, -2, 417, 418,
	442, 443, 444, 0, 0, 0, 0, 440, 422, 0,
	453, 454, 455, 456, 457, 458, 459, 460, 461, 462,
	463, 464, 467, 525, 526, 0, 465, 466, 475, 340,
	445, 0, 598, 29, 0, 342, 0, 0, 0, 450,
	552, 0, 450, 552, 0, 0, 0, 547, 544, 0,
	0, 549, 0, 512, 0, 0, 0, 0, 0, 341,
	0, 0, 0, 0, 396, 0, 0, 0, 0, 0,
	0, 386, 0, 0, 389, 0, 0, 0, 0, 380,
	0, 0, 400, 810, 382, 0, 384, 385, 404, 0,
	404, 46, 604, 51, 0, 0, 56, 57, 605, 606,
	607, 608, 0, 82, 211, 213, 216, 217, 218, 86,
	87, 88, 0, 0, 198, 0, 0, 192, 192, 0,
	190, 191, 84, 91, 92, 93, 94, 95, 96, 160,
	0, 0, 0, 164, 0, 172, 174, 0, 158, 157,
	102, 0, 165, 165, 126, 127, 168, 0, 168, 168,
	168, 0, 0, 120, 121, 122, 114, 0, 115, 116,
	117, 0, 118, 0, 0, 66, 71, 620, 72, 868,
	236, 236, 635, 229, 623, 624, 625, 626, 627, 628,
	629, 630, 631, 632, 0, 73, 231, 233, 232, 0,
	0, 0, 253, 869, 0, 301, 282, 0, 0, 302,
	303, 292, 0, 577, 578, 0, 570, 25, 0, 615,
	616, 561, 562, 353, 428, 430, 432, 0, 340, 419,
	440, 423, 0, 420, 0, 0, 414, 0, 447, -2,
	0, 482, 483, 0, 0, 0, 0, 0, 518, 0,
	0, 519, 0, 567, 0, 545, 0, 0, 494, 0,
	513, 0, 0, 514, 515, 516, 517, 592, 0, 0,
	-2, 0, 0, 404, 600, 0, 356, 375, 377, 0,
	372, 387, 388, 390, 0, 392, 0, 394, 395, 360,
	362, 363, 0, 0, 0, 0, 383, 567, 0, 404,
	40, 54, 55, 0, 0, 61, 169, 170, 0, 214,
	0, 0, 0, 185, 192, 192, 188, 193, 189, 0,
	161, 162, 0, 171, 173, 175, 97, 159, 0, 168,
	168, 128, 0, 129, 130, 131, 0, 147, 0, 0,
	0, 0, 645, 0, 219, 0, 868, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 0, 868, 0,
	0, 868, 636, 637, 638, 639, 0, 76, 0, 0,
	0, 0, 256, 44, 304, 305, 306, 581, 0, 26,
	404, 0, 347, 551, 0, 421, 0, 441, 424, 480,
	343, 0, 149, 149, 530, 149, 153, 533, 149, 535,
	149, 538, 0, 0, 0, 0, 0, 0, 0, 542,
	493, 548, 0, 550, 0, 0, 33, 0, 592, 582,
	594, 596, 0, 29, 0, 588, 0, 367, 567, 0,
	0, 369, 376, 0, 0, 370, 0, 371, 391, 393,
	0, 0, 0, 0, 575, 405, 39, 58, 59, 60,
	212, 215, 0, 194, 149, 197, 186, 187, 0, 163,
	150, 124, 125, 166, 167, 165, 0, 165, 0, 154,
	0, 869, -2, 0, 868, 222, 223, 224, 0, 226,
	227, 0, 230, 0, 74, 75, 0, 235, 254, 281,
	563, 354, 481, 425, 484, 527, 165, 531, 532, 534,
	536, 537, 539, 486, 485, 0, 0, 0, 0, 0,
	0, 0, 546, 0, 0, 0, 34, 0, 597, -2,
	0, 0, 0, 48, 0, 575, 601, 602, 373, 0,
	378, 0, 0, 0, 381, 38, 177, 0, 196, 0,
	365, 168, 148, 168, 0, 0, 69, 70, 0, 221,
	0, 633, 634, 0, 77, 78, 0, 0, 565, 0,
	528, 529, 0, 0, 0, 0, 520, 492, 543, 0,
	0, 0, 595, 0, -2, 0, 590, 589, 368, 37,
	0, 0, 0, 0, 400, 176, 178, 0, 183, 0,
	195, 0, 0, 137, 138, 152, 155, 868, 225, 0,
	0, 0, 0, 28, 0, 0, 487, 489, 488, 490,
	0, 0, 0, 509, 510, 0, 585, 29, 0, 374,
	401, 402, 403, 364, 179, 180, 0, 184, 182, 0,
	366, 220, 0, 248, 0, 79, 80, 73, 566, 564,
	491, 0, 0, 0, 593, -2, 591, 181, 0, 247,
	0, 0, 76, 521, 0, 524, 0, 249, 0, 234,
	522, 0, 0, 0, 199, 0, 0, 200, 201, 0,
	0, 523, 202, 0, 0, 0, 0, 0, 203, 205,
	206, 0, 0, 204, 250, 251, 207, 208, 209,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 75, 3, 3, 3, 102, 94, 3,
	54, 56, 99, 97, 55, 98, 112, 100, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 270,
	83, 82, 84, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 104, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 93, 3, 105,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	76, 77, 78, 79, 80, 81, 85, 86, 87, 88,
	89, 90, 91, 92, 95, 96, 101, 103, 106, 107,
	108, 109, 110, 111, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:323
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:328
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:329
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:333
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:355
		{
			setParseTree(yylex, nil)
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:361
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:369
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:373
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:379
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 28:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:386
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:392
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:396
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:402
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:406
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:413
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:425
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:437
		{
			yyVAL.str = InsertStr
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:441
		{
			yyVAL.str = ReplaceStr
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:447
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:453
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:457
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:461
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:466
		{
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:467
		{
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:471
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName.ToViewName()}
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:475
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName.ToViewName())
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:481
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:485
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:490
		{
			yyVAL.partitions = nil
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:494
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:500
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:504
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:508
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:512
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:518
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:522
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:528
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:532
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:536
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:542
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:546
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:550
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:554
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:560
		{
			yyVAL.str = SessionStr
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:564
		{
			yyVAL.str = GlobalStr
		}
	case 64:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:569
		{
			yyVAL.byt = 0
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:573
		{
			yyVAL.byt = 1
		}
	case 66:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:578
		{
			yyVAL.int = yyPosition(yylex)
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:584
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:589
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 69:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:595
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 70:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:600
		{
			var orreplace bool = false
			if yyDollar[2].byt == 1 {
				orreplace = true
			}
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[4].tableName.ToViewName(), ViewExpr: yyDollar[7].selStmt, SelectPositionStart: yyDollar[6].int, SelectPositionEnd: yyDollar[8].int, OrReplace: orreplace}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:608
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 72:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:612
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 73:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:617
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:621
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:627
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:632
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:637
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:643
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:648
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:654
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:660
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName, IfNotExists: ne}
			setDDL(yylex, yyVAL.ddl)
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:671
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:678
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:682
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:688
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:693
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:697
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:701
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:707
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:713
		{
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:718
		{
			if yyDollar[1].columnType.sawnull {
				yylex.Error("cannot include NULL / NOT NULL more than once")
				return 1
			}
			yyDollar[1].columnType.NotNull = yyDollar[2].boolVal
			yyDollar[1].columnType.sawnull = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:728
		{
			if yyDollar[1].columnType.Default != nil {
				yylex.Error("cannot include DEFAULT more than once")
				return 1
			}
			yyDollar[1].columnType.Default = yyDollar[2].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:737
		{
			if yyDollar[1].columnType.OnUpdate != nil {
				yylex.Error("cannot include ON UPDATE more than once")
				return 1
			}
			yyDollar[1].columnType.OnUpdate = yyDollar[2].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:746
		{
			if yyDollar[1].columnType.sawai {
				yylex.Error("cannot include AUTO_INCREMENT more than once")
				return 1
			}
			yyDollar[1].columnType.Autoincrement = yyDollar[2].boolVal
			yyDollar[1].columnType.sawai = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:756
		{
			if yyDollar[1].columnType.KeyOpt != colKeyNone {
				yylex.Error("cannot include more than one key option for a column definition")
				return 1
			}
			yyDollar[1].columnType.KeyOpt = yyDollar[2].colKeyOpt
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:765
		{
			if yyDollar[1].columnType.Comment != nil {
				yylex.Error("cannot include more than one comment for a column definition")
				return 1
			}
			yyDollar[1].columnType.Comment = yyDollar[2].sqlVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:776
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:788
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:793
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:799
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:805
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:809
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:813
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:817
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:821
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:825
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:829
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:833
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:837
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:843
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:849
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:855
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:861
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:867
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:875
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:879
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:883
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:887
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:891
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:897
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:901
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:905
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:909
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:913
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:917
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:921
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:925
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:929
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:933
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:937
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:941
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:945
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:949
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 138:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:954
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:960
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:964
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:968
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:972
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:976
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:980
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:984
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:988
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:994
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:999
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1004
		{
			yyVAL.sqlVal = nil
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1008
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1013
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 152:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1017
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1025
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1029
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 155:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1035
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1043
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1047
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1052
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1056
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1063
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1067
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1073
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1079
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1085
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1090
		{
			yyVAL.str = ""
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1094
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1098
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1103
		{
			yyVAL.str = ""
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1107
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1111
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1117
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1121
		{
			yyVAL.colKeyOpt = colKey
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1125
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1129
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1135
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1141
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 177:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1145
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1151
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1155
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1161
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1165
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1170
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1176
		{
			yyVAL.str = ""
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1180
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1186
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1190
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1194
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1198
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1202
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1208
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1212
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1217
		{
			yyVAL.str = ""
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1221
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1227
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1231
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1237
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1243
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1247
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 199:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1254
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 200:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1258
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 201:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1262
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 202:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1266
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1272
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1278
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1284
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1288
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1292
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1296
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1300
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 210:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1305
		{
			yyVAL.str = ""
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1309
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1313
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1321
		{
			yyVAL.str = yyDollar[1].str
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1325
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1329
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1335
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1339
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1343
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 219:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1349
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 220:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1353
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			ddl.Column = yyDollar[8].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 221:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1360
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 222:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1367
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 223:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1371
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: DropStr, Column: NewColIdent(string(yyDollar[7].bytes)), Table: yyDollar[4].tableName}
		}
	case 224:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1375
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1379
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: RenameStr, Table: yyDollar[4].tableName, Column: NewColIdent(string(yyDollar[7].bytes)), ToColumn: NewColIdent(string(yyDollar[9].bytes))}
		}
	case 226:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1383
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1388
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 228:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1393
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 229:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1397
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 230:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1401
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[5].colIdent,
				Type:   yyDollar[6].colIdent,
				Params: yyDollar[7].vindexParams,
			}}
		}
	case 231:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1409
		{
			yyVAL.statement = &DDL{Action: DropVindexStr, VindexSpec: &VindexSpec{
				Name: yyDollar[5].colIdent,
			}}
		}
	case 232:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1415
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 233:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1419
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 234:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1423
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 235:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1436
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 236:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1447
		{
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1449
		{
		}
	case 247:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1464
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1470
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1474
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 250:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1480
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 251:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1484
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1490
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1496
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 254:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1500
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1508
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 256:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1516
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1521
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromViews: yyDollar[4].tableNames, IfExists: exists}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1529
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1533
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1539
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1543
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1548
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1554
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1559
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1563
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1567
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1572
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1576
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1580
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1584
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1588
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1592
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1596
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1600
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1604
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1608
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1612
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1616
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1620
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1624
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1628
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 282:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1633
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1643
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1647
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1651
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1657
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1661
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1665
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1669
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1673
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1677
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1681
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1685
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1695
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1701
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1705
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1711
		{
			yyVAL.str = ""
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1715
		{
			yyVAL.str = "full "
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1721
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1725
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1731
		{
			yyVAL.str = ""
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1735
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1739
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1745
		{
			yyVAL.showFilter = nil
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1749
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1753
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1759
		{
			yyVAL.str = ""
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1763
		{
			yyVAL.str = SessionStr
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1767
		{
			yyVAL.str = GlobalStr
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1773
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1777
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1783
		{
			yyVAL.statement = &Begin{}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1787
		{
			yyVAL.statement = &Begin{}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1793
		{
			yyVAL.statement = &Commit{}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1799
		{
			yyVAL.statement = &Rollback{}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1805
		{
			yyVAL.statement = &OtherRead{}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1810
		{
			yyVAL.statement = &Show{Type: "columns", OnTable: yyDollar[2].tableName}
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1814
		{
			yyVAL.statement = &OtherRead{}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1818
		{
			yyVAL.statement = &OtherRead{}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1822
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1826
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1830
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1834
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1840
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1844
		{
			setAllowComments(yylex, true)
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1848
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1854
		{
			yyVAL.bytes2 = nil
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1858
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1864
		{
			yyVAL.str = UnionStr
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1868
		{
			yyVAL.str = UnionAllStr
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1872
		{
			yyVAL.str = UnionDistinctStr
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1877
		{
			yyVAL.str = ""
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1881
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1885
		{
			yyVAL.str = SQLCacheStr
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1890
		{
			yyVAL.str = ""
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1894
		{
			yyVAL.str = ""
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1898
		{
			yyVAL.str = DistinctStr
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1903
		{
			yyVAL.str = ""
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1907
		{
			yyVAL.str = StraightJoinHint
		}
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1912
		{
			yyVAL.selectExprs = nil
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1916
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1922
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1926
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1932
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1936
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1940
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 347:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1944
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1949
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1953
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1957
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1964
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 353:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1969
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1973
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1979
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1983
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1993
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1997
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2001
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2007
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2013
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 364:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2017
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2023
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2027
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2033
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2037
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 369:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2050
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 370:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2054
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 371:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2058
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2062
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2068
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2070
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2074
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2076
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 377:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2080
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2082
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2085
		{
			yyVAL.empty = struct{}{}
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2087
		{
			yyVAL.empty = struct{}{}
		}
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2090
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2094
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2098
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2105
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2111
		{
			yyVAL.str = JoinStr
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2115
		{
			yyVAL.str = JoinStr
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2119
		{
			yyVAL.str = JoinStr
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2125
		{
			yyVAL.str = StraightJoinStr
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2131
		{
			yyVAL.str = LeftJoinStr
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2135
		{
			yyVAL.str = LeftJoinStr
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2139
		{
			yyVAL.str = RightJoinStr
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2143
		{
			yyVAL.str = RightJoinStr
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2149
		{
			yyVAL.str = NaturalJoinStr
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2153
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2163
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2167
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2173
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2177
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 400:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2182
		{
			yyVAL.indexHints = nil
		}
	case 401:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2186
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 402:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2190
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 403:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2194
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2199
		{
			yyVAL.expr = nil
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2203
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2209
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2213
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2217
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2221
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2225
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2229
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2233
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 413:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2239
		{
			yyVAL.str = ""
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2243
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2249
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2253
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2259
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2263
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 419:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2267
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 420:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2271
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 421:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2275
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2279
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 423:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2283
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 424:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2287
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 425:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2291
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2295
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2301
		{
			yyVAL.str = IsNullStr
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2305
		{
			yyVAL.str = IsNotNullStr
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2309
		{
			yyVAL.str = IsTrueStr
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2313
		{
			yyVAL.str = IsNotTrueStr
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2317
		{
			yyVAL.str = IsFalseStr
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2321
		{
			yyVAL.str = IsNotFalseStr
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2327
		{
			yyVAL.str = EqualStr
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2331
		{
			yyVAL.str = LessThanStr
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2335
		{
			yyVAL.str = GreaterThanStr
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2339
		{
			yyVAL.str = LessEqualStr
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2343
		{
			yyVAL.str = GreaterEqualStr
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2347
		{
			yyVAL.str = NotEqualStr
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2351
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 440:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2356
		{
			yyVAL.expr = nil
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2360
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2366
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2370
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2374
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2380
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2386
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2390
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2396
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2400
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2404
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2408
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2412
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2416
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2420
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2424
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2428
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2432
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2436
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2440
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2444
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2448
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2452
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2456
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2460
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2464
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2468
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2472
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2476
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2480
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2484
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2488
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2496
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2510
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2514
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2518
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 480:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2536
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: yyDollar[3].str == DistinctStr, Exprs: yyDollar[4].selectExprs}
		}
	case 481:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2540
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 482:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2550
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 483:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2554
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 484:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2558
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 485:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2562
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 486:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2566
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 487:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2570
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 488:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2574
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 489:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2578
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 490:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2582
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 491:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2586
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 492:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2590
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 493:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2594
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 494:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2598
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2608
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2612
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2616
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2621
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2626
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2631
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2637
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2642
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2647
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2651
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2655
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2660
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2665
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2670
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 509:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2674
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 510:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2678
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2688
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 514:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2698
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 515:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2702
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 516:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2706
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 517:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2710
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2714
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 519:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2718
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 520:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2724
		{
			yyVAL.str = ""
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2728
		{
			yyVAL.str = BooleanModeStr
		}
	case 522:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2732
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 523:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2736
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2740
		{
			yyVAL.str = QueryExpansionStr
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2746
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2750
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2756
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2760
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2764
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2768
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2772
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2776
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2782
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2786
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2790
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2794
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2798
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2802
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2806
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 540:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2811
		{
			yyVAL.expr = nil
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2815
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 542:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2820
		{
			yyVAL.str = string("")
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2824
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2830
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2834
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 546:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2840
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 547:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2845
		{
			yyVAL.expr = nil
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2849
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2855
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2859
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 551:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2863
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2869
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2873
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2877
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2881
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2885
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2889
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2893
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2897
		{
			yyVAL.expr = &NullVal{}
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2903
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2912
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2916
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 563:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2921
		{
			yyVAL.exprs = nil
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2925
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 565:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2930
		{
			yyVAL.expr = nil
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2934
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2939
		{
			yyVAL.orderBy = nil
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2943
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2949
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2953
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2959
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 572:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2964
		{
			yyVAL.str = AscScr
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2968
		{
			yyVAL.str = AscScr
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2972
		{
			yyVAL.str = DescScr
		}
	case 575:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2977
		{
			yyVAL.limit = nil
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2981
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 577:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2985
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 578:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2989
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 579:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2994
		{
			yyVAL.str = ""
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2998
		{
			yyVAL.str = ForUpdateStr
		}
	case 581:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3002
		{
			yyVAL.str = ShareModeStr
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3015
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3019
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3023
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 585:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3028
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 586:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3032
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 587:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3036
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3043
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3047
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3051
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 591:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3055
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3060
		{
			yyVAL.updateExprs = nil
		}
	case 593:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3064
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3070
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3074
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3080
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3084
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3090
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3096
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3106
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3110
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3116
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3122
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3126
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3132
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3136
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3140
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3144
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3151
		{
			yyVAL.bytes = []byte("charset")
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3158
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3162
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3166
		{
			yyVAL.expr = &Default{}
		}
	case 617:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3175
		{
			yyVAL.byt = 0
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3177
		{
			yyVAL.byt = 1
		}
	case 619:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3180
		{
			yyVAL.byt = 0
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3182
		{
			yyVAL.byt = 1
		}
	case 621:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3185
		{
			yyVAL.str = ""
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3187
		{
			yyVAL.str = IgnoreStr
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3191
		{
			yyVAL.empty = struct{}{}
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3193
		{
			yyVAL.empty = struct{}{}
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3195
		{
			yyVAL.empty = struct{}{}
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3197
		{
			yyVAL.empty = struct{}{}
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3199
		{
			yyVAL.empty = struct{}{}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3201
		{
			yyVAL.empty = struct{}{}
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3203
		{
			yyVAL.empty = struct{}{}
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3205
		{
			yyVAL.empty = struct{}{}
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3207
		{
			yyVAL.empty = struct{}{}
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3209
		{
			yyVAL.empty = struct{}{}
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3213
		{
			yyVAL.empty = struct{}{}
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3215
		{
			yyVAL.empty = struct{}{}
		}
	case 635:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3218
		{
			yyVAL.empty = struct{}{}
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3220
		{
			yyVAL.empty = struct{}{}
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3222
		{
			yyVAL.empty = struct{}{}
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3226
		{
			yyVAL.empty = struct{}{}
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3228
		{
			yyVAL.empty = struct{}{}
		}
	case 640:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3231
		{
			yyVAL.empty = struct{}{}
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3233
		{
			yyVAL.empty = struct{}{}
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3235
		{
			yyVAL.empty = struct{}{}
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3237
		{
			yyVAL.empty = struct{}{}
		}
	case 644:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3240
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 645:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3242
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3246
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3250
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3257
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3263
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3267
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3274
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3512
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3521
		{
			decNesting(yylex)
		}
	case 868:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3526
		{
			skipToEnd(yylex)
		}
	case 869:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3531
		{
			skipToEnd(yylex)
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3535
		{
			skipToEnd(yylex)
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3539
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
