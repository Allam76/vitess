// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

import "fmt"

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func yyPosition(yylex interface{}) int {
	return yylex.(*Tokenizer).Position
}

func yyOldPosition(yylex interface{}) int {
	return yylex.(*Tokenizer).OldPosition
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:63
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ddls                     []*DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	int                      int
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	statements               Statements
	partitions               Partitions
	colName                  *ColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	subquery                 *Subquery
	simpleTableExpr          SimpleTableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	asOf                     *AsOf
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolean                  bool
	sqlVal                   *SQLVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	assignExprs              AssignmentExprs
	assignExpr               *AssignmentExpr
	setVarExprs              SetVarExprs
	setVarExpr               *SetVarExpr
	setScope                 SetScope
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	columnOrder              *ColumnOrder
	triggerOrder             *TriggerOrder
	colKeyOpt                ColumnKeyOption
	optVal                   Expr
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexColumn              *IndexColumn
	indexColumns             []*IndexColumn
	constraintDefinition     *ConstraintDefinition
	constraintInfo           ConstraintInfo
	ReferenceAction          ReferenceAction
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	over                     *Over
	caseStatementCases       []CaseStatementCase
	caseStatementCase        CaseStatementCase
	ifStatementConditions    []IfStatementCondition
	ifStatementCondition     IfStatementCondition
	signalInfo               SignalInfo
	signalInfos              []SignalInfo
	signalConditionItemName  SignalConditionItemName
	declareHandlerAction     DeclareHandlerAction
	declareHandlerCondition  DeclareHandlerCondition
	declareHandlerConditions []DeclareHandlerCondition
	procedureParam           ProcedureParam
	procedureParams          []ProcedureParam
	characteristic           Characteristic
	characteristics          []Characteristic
	Fields                   *Fields
	Lines                    *Lines
	EnclosedBy               *EnclosedBy
	tableAndLockType         *TableAndLockType
	tableAndLockTypes        TableAndLockTypes
	lockType                 LockType
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const CALL = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const OF = 57376
const OUTFILE = 57377
const DATA = 57378
const LOAD = 57379
const LINES = 57380
const TERMINATED = 57381
const ESCAPED = 57382
const ENCLOSED = 57383
const OPTIONALLY = 57384
const STARTING = 57385
const UNIQUE = 57386
const KEY = 57387
const SYSTEM_TIME = 57388
const VALUES = 57389
const LAST_INSERT_ID = 57390
const SQL_CALC_FOUND_ROWS = 57391
const NEXT = 57392
const VALUE = 57393
const SHARE = 57394
const MODE = 57395
const SQL_NO_CACHE = 57396
const SQL_CACHE = 57397
const JOIN = 57398
const STRAIGHT_JOIN = 57399
const LEFT = 57400
const RIGHT = 57401
const INNER = 57402
const OUTER = 57403
const CROSS = 57404
const NATURAL = 57405
const USE = 57406
const FORCE = 57407
const ON = 57408
const USING = 57409
const ID = 57410
const HEX = 57411
const STRING = 57412
const INTEGRAL = 57413
const FLOAT = 57414
const HEXNUM = 57415
const VALUE_ARG = 57416
const LIST_ARG = 57417
const COMMENT = 57418
const COMMENT_KEYWORD = 57419
const BIT_LITERAL = 57420
const NULL = 57421
const TRUE = 57422
const FALSE = 57423
const OFF = 57424
const OR = 57425
const AND = 57426
const NOT = 57427
const BETWEEN = 57428
const CASE = 57429
const WHEN = 57430
const THEN = 57431
const ELSE = 57432
const ELSEIF = 57433
const END = 57434
const LE = 57435
const GE = 57436
const NE = 57437
const NULL_SAFE_EQUAL = 57438
const IS = 57439
const LIKE = 57440
const REGEXP = 57441
const IN = 57442
const SHIFT_LEFT = 57443
const SHIFT_RIGHT = 57444
const DIV = 57445
const MOD = 57446
const UNARY = 57447
const COLLATE = 57448
const BINARY = 57449
const UNDERSCORE_BINARY = 57450
const UNDERSCORE_UTF8MB4 = 57451
const INTERVAL = 57452
const JSON_EXTRACT_OP = 57453
const JSON_UNQUOTE_EXTRACT_OP = 57454
const CREATE = 57455
const ALTER = 57456
const DROP = 57457
const RENAME = 57458
const ANALYZE = 57459
const ADD = 57460
const FLUSH = 57461
const MODIFY = 57462
const CHANGE = 57463
const SCHEMA = 57464
const TABLE = 57465
const INDEX = 57466
const INDEXES = 57467
const VIEW = 57468
const TO = 57469
const IGNORE = 57470
const IF = 57471
const PRIMARY = 57472
const COLUMN = 57473
const SPATIAL = 57474
const FULLTEXT = 57475
const KEY_BLOCK_SIZE = 57476
const CHECK = 57477
const ACTION = 57478
const CASCADE = 57479
const CONSTRAINT = 57480
const FOREIGN = 57481
const NO = 57482
const REFERENCES = 57483
const RESTRICT = 57484
const FIRST = 57485
const AFTER = 57486
const SHOW = 57487
const DESCRIBE = 57488
const EXPLAIN = 57489
const DATE = 57490
const ESCAPE = 57491
const REPAIR = 57492
const OPTIMIZE = 57493
const TRUNCATE = 57494
const FORMAT = 57495
const MAXVALUE = 57496
const PARTITION = 57497
const REORGANIZE = 57498
const LESS = 57499
const THAN = 57500
const PROCEDURE = 57501
const TRIGGER = 57502
const TRIGGERS = 57503
const FUNCTION = 57504
const STATUS = 57505
const VARIABLES = 57506
const WARNINGS = 57507
const SEQUENCE = 57508
const EACH = 57509
const ROW = 57510
const BEFORE = 57511
const FOLLOWS = 57512
const PRECEDES = 57513
const DEFINER = 57514
const INVOKER = 57515
const INOUT = 57516
const OUT = 57517
const DETERMINISTIC = 57518
const CONTAINS = 57519
const READS = 57520
const MODIFIES = 57521
const SQL = 57522
const SECURITY = 57523
const TEMPORARY = 57524
const CLASS_ORIGIN = 57525
const SUBCLASS_ORIGIN = 57526
const MESSAGE_TEXT = 57527
const MYSQL_ERRNO = 57528
const CONSTRAINT_CATALOG = 57529
const CONSTRAINT_SCHEMA = 57530
const CONSTRAINT_NAME = 57531
const CATALOG_NAME = 57532
const SCHEMA_NAME = 57533
const TABLE_NAME = 57534
const COLUMN_NAME = 57535
const CURSOR_NAME = 57536
const SIGNAL = 57537
const RESIGNAL = 57538
const SQLSTATE = 57539
const DECLARE = 57540
const CONDITION = 57541
const CURSOR = 57542
const CONTINUE = 57543
const EXIT = 57544
const UNDO = 57545
const HANDLER = 57546
const FOUND = 57547
const SQLWARNING = 57548
const SQLEXCEPTION = 57549
const BEGIN = 57550
const START = 57551
const TRANSACTION = 57552
const COMMIT = 57553
const ROLLBACK = 57554
const SAVEPOINT = 57555
const WORK = 57556
const RELEASE = 57557
const BIT = 57558
const TINYINT = 57559
const SMALLINT = 57560
const MEDIUMINT = 57561
const INT = 57562
const INTEGER = 57563
const BIGINT = 57564
const INTNUM = 57565
const REAL = 57566
const DOUBLE = 57567
const FLOAT_TYPE = 57568
const DECIMAL = 57569
const NUMERIC = 57570
const DEC = 57571
const FIXED = 57572
const PRECISION = 57573
const TIME = 57574
const TIMESTAMP = 57575
const DATETIME = 57576
const YEAR = 57577
const CHAR = 57578
const VARCHAR = 57579
const BOOL = 57580
const CHARACTER = 57581
const VARBINARY = 57582
const NCHAR = 57583
const NVARCHAR = 57584
const NATIONAL = 57585
const VARYING = 57586
const TEXT = 57587
const TINYTEXT = 57588
const MEDIUMTEXT = 57589
const LONGTEXT = 57590
const LONG = 57591
const BLOB = 57592
const TINYBLOB = 57593
const MEDIUMBLOB = 57594
const LONGBLOB = 57595
const JSON = 57596
const ENUM = 57597
const GEOMETRY = 57598
const POINT = 57599
const LINESTRING = 57600
const POLYGON = 57601
const GEOMETRYCOLLECTION = 57602
const MULTIPOINT = 57603
const MULTILINESTRING = 57604
const MULTIPOLYGON = 57605
const LOCAL = 57606
const LOW_PRIORITY = 57607
const NULLX = 57608
const AUTO_INCREMENT = 57609
const APPROXNUM = 57610
const SIGNED = 57611
const UNSIGNED = 57612
const ZEROFILL = 57613
const COLLATION = 57614
const DATABASES = 57615
const SCHEMAS = 57616
const TABLES = 57617
const FULL = 57618
const PROCESSLIST = 57619
const COLUMNS = 57620
const FIELDS = 57621
const ENGINES = 57622
const PLUGINS = 57623
const NAMES = 57624
const CHARSET = 57625
const GLOBAL = 57626
const SESSION = 57627
const ISOLATION = 57628
const LEVEL = 57629
const READ = 57630
const WRITE = 57631
const ONLY = 57632
const REPEATABLE = 57633
const COMMITTED = 57634
const UNCOMMITTED = 57635
const SERIALIZABLE = 57636
const CURRENT_TIMESTAMP = 57637
const DATABASE = 57638
const CURRENT_DATE = 57639
const CURRENT_USER = 57640
const CURRENT_TIME = 57641
const LOCALTIME = 57642
const LOCALTIMESTAMP = 57643
const UTC_DATE = 57644
const UTC_TIME = 57645
const UTC_TIMESTAMP = 57646
const REPLACE = 57647
const CONVERT = 57648
const CAST = 57649
const SUBSTR = 57650
const SUBSTRING = 57651
const GROUP_CONCAT = 57652
const SEPARATOR = 57653
const TIMESTAMPADD = 57654
const TIMESTAMPDIFF = 57655
const OVER = 57656
const WINDOW = 57657
const GROUPING = 57658
const GROUPS = 57659
const AVG = 57660
const BIT_AND = 57661
const BIT_OR = 57662
const BIT_XOR = 57663
const COUNT = 57664
const JSON_ARRAYAGG = 57665
const JSON_OBJECTAGG = 57666
const MAX = 57667
const MIN = 57668
const STDDEV_POP = 57669
const STDDEV = 57670
const STD = 57671
const STDDEV_SAMP = 57672
const SUM = 57673
const VAR_POP = 57674
const VARIANCE = 57675
const VAR_SAMP = 57676
const CUME_DIST = 57677
const DENSE_RANK = 57678
const FIRST_VALUE = 57679
const LAG = 57680
const LAST_VALUE = 57681
const LEAD = 57682
const NTH_VALUE = 57683
const NTILE = 57684
const ROW_NUMBER = 57685
const PERCENT_RANK = 57686
const RANK = 57687
const MATCH = 57688
const AGAINST = 57689
const BOOLEAN = 57690
const LANGUAGE = 57691
const WITH = 57692
const QUERY = 57693
const EXPANSION = 57694
const UNUSED = 57695
const ARRAY = 57696
const DESCRIPTION = 57697
const EMPTY = 57698
const EXCEPT = 57699
const JSON_TABLE = 57700
const LATERAL = 57701
const MEMBER = 57702
const RECURSIVE = 57703
const ACTIVE = 57704
const ADMIN = 57705
const BUCKETS = 57706
const CLONE = 57707
const COMPONENT = 57708
const DEFINITION = 57709
const ENFORCED = 57710
const EXCLUDE = 57711
const FOLLOWING = 57712
const GEOMCOLLECTION = 57713
const GET_MASTER_PUBLIC_KEY = 57714
const HISTOGRAM = 57715
const HISTORY = 57716
const INACTIVE = 57717
const INVISIBLE = 57718
const LOCKED = 57719
const MASTER_COMPRESSION_ALGORITHMS = 57720
const MASTER_PUBLIC_KEY_PATH = 57721
const MASTER_TLS_CIPHERSUITES = 57722
const MASTER_ZSTD_COMPRESSION_LEVEL = 57723
const NESTED = 57724
const NETWORK_NAMESPACE = 57725
const NOWAIT = 57726
const NULLS = 57727
const OJ = 57728
const OLD = 57729
const OPTIONAL = 57730
const ORDINALITY = 57731
const ORGANIZATION = 57732
const OTHERS = 57733
const PATH = 57734
const PERSIST = 57735
const PERSIST_ONLY = 57736
const PRECEDING = 57737
const PRIVILEGE_CHECKS_USER = 57738
const PROCESS = 57739
const RANDOM = 57740
const REFERENCE = 57741
const REQUIRE_ROW_FORMAT = 57742
const RESOURCE = 57743
const RESPECT = 57744
const RESTART = 57745
const RETAIN = 57746
const REUSE = 57747
const ROLE = 57748
const SECONDARY = 57749
const SECONDARY_ENGINE = 57750
const SECONDARY_LOAD = 57751
const SECONDARY_UNLOAD = 57752
const SKIP = 57753
const SRID = 57754
const THREAD_PRIORITY = 57755
const TIES = 57756
const UNBOUNDED = 57757
const VCPU = 57758
const VISIBLE = 57759
const SYSTEM = 57760
const INFILE = 57761

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CALL",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"OF",
	"OUTFILE",
	"DATA",
	"LOAD",
	"LINES",
	"TERMINATED",
	"ESCAPED",
	"ENCLOSED",
	"OPTIONALLY",
	"STARTING",
	"UNIQUE",
	"KEY",
	"SYSTEM_TIME",
	"VALUES",
	"LAST_INSERT_ID",
	"SQL_CALC_FOUND_ROWS",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"ELSEIF",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"MODIFY",
	"CHANGE",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"INDEXES",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"FIRST",
	"AFTER",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"FORMAT",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TRIGGERS",
	"FUNCTION",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"EACH",
	"ROW",
	"BEFORE",
	"FOLLOWS",
	"PRECEDES",
	"DEFINER",
	"INVOKER",
	"INOUT",
	"OUT",
	"DETERMINISTIC",
	"CONTAINS",
	"READS",
	"MODIFIES",
	"SQL",
	"SECURITY",
	"TEMPORARY",
	"CLASS_ORIGIN",
	"SUBCLASS_ORIGIN",
	"MESSAGE_TEXT",
	"MYSQL_ERRNO",
	"CONSTRAINT_CATALOG",
	"CONSTRAINT_SCHEMA",
	"CONSTRAINT_NAME",
	"CATALOG_NAME",
	"SCHEMA_NAME",
	"TABLE_NAME",
	"COLUMN_NAME",
	"CURSOR_NAME",
	"SIGNAL",
	"RESIGNAL",
	"SQLSTATE",
	"DECLARE",
	"CONDITION",
	"CURSOR",
	"CONTINUE",
	"EXIT",
	"UNDO",
	"HANDLER",
	"FOUND",
	"SQLWARNING",
	"SQLEXCEPTION",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"WORK",
	"RELEASE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DEC",
	"FIXED",
	"PRECISION",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NATIONAL",
	"VARYING",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"LONG",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"LOCAL",
	"LOW_PRIORITY",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"OVER",
	"WINDOW",
	"GROUPING",
	"GROUPS",
	"AVG",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"COUNT",
	"JSON_ARRAYAGG",
	"JSON_OBJECTAGG",
	"MAX",
	"MIN",
	"STDDEV_POP",
	"STDDEV",
	"STD",
	"STDDEV_SAMP",
	"SUM",
	"VAR_POP",
	"VARIANCE",
	"VAR_SAMP",
	"CUME_DIST",
	"DENSE_RANK",
	"FIRST_VALUE",
	"LAG",
	"LAST_VALUE",
	"LEAD",
	"NTH_VALUE",
	"NTILE",
	"ROW_NUMBER",
	"PERCENT_RANK",
	"RANK",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"DESCRIPTION",
	"EMPTY",
	"EXCEPT",
	"JSON_TABLE",
	"LATERAL",
	"MEMBER",
	"RECURSIVE",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"SYSTEM",
	"INFILE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 33,
	5, 49,
	-2, 846,
	-1, 41,
	140, 906,
	141, 932,
	-2, 120,
	-1, 48,
	180, 506,
	181, 506,
	-2, 496,
	-1, 55,
	1, 1352,
	437, 1352,
	-2, 532,
	-1, 438,
	127, 942,
	-2, 936,
	-1, 439,
	127, 943,
	-2, 937,
	-1, 541,
	97, 1173,
	127, 1173,
	-2, 890,
	-1, 542,
	97, 1275,
	127, 1275,
	-2, 891,
	-1, 547,
	97, 1193,
	127, 1193,
	-2, 892,
	-1, 548,
	97, 1233,
	127, 1233,
	-2, 893,
	-1, 549,
	97, 1234,
	127, 1234,
	-2, 894,
	-1, 550,
	97, 1128,
	127, 1128,
	-2, 898,
	-1, 552,
	97, 1212,
	127, 1212,
	-2, 900,
	-1, 962,
	1, 584,
	5, 584,
	12, 584,
	13, 584,
	14, 584,
	15, 584,
	17, 584,
	19, 584,
	30, 584,
	31, 584,
	56, 584,
	57, 584,
	58, 584,
	59, 584,
	60, 584,
	62, 584,
	63, 584,
	66, 584,
	67, 584,
	69, 584,
	70, 584,
	437, 584,
	-2, 614,
	-1, 966,
	67, 66,
	69, 66,
	-2, 70,
	-1, 1163,
	127, 945,
	-2, 941,
	-1, 1327,
	68, 359,
	-2, 1092,
	-1, 1330,
	68, 355,
	71, 355,
	-2, 1027,
	-1, 1331,
	68, 356,
	71, 356,
	-2, 1037,
	-1, 1419,
	44, 402,
	147, 404,
	149, 402,
	150, 402,
	-2, 442,
	-1, 1495,
	5, 50,
	-2, 680,
	-1, 1764,
	69, 1071,
	70, 1071,
	127, 1071,
	-2, 539,
	-1, 1786,
	1, 635,
	5, 635,
	12, 635,
	13, 635,
	14, 635,
	15, 635,
	17, 635,
	19, 635,
	30, 635,
	31, 635,
	56, 635,
	57, 635,
	58, 635,
	59, 635,
	60, 635,
	62, 635,
	63, 635,
	66, 635,
	67, 635,
	69, 635,
	70, 635,
	437, 635,
	-2, 614,
	-1, 1859,
	147, 405,
	-2, 403,
	-1, 1918,
	5, 50,
	-2, 865,
	-1, 2058,
	41, 952,
	-2, 950,
	-1, 2167,
	5, 50,
	-2, 868,
}

const yyPrivate = 57344

const yyLast = 25729

var yyAct = [...]int{

	501, 78, 2316, 2270, 2282, 2291, 2281, 1375, 2184, 2170,
	2183, 2272, 2106, 7, 2074, 2105, 6, 2157, 2104, 5,
	2107, 8, 1995, 2211, 1780, 2031, 2152, 2058, 1528, 82,
	1928, 1799, 997, 1695, 1685, 1373, 1282, 1758, 1556, 915,
	1957, 1332, 1276, 2171, 430, 1141, 1975, 1280, 2103, 3,
	1800, 423, 500, 1759, 1852, 1328, 754, 457, 1324, 1637,
	1694, 92, 1529, 1303, 1755, 1314, 1583, 388, 962, 1417,
	103, 367, 370, 564, 1448, 363, 1313, 1766, 1772, 78,
	1364, 1348, 1731, 1134, 1661, 1188, 561, 1705, 731, 1320,
	1122, 1078, 566, 744, 1660, 1149, 1401, 1098, 444, 1259,
	1360, 543, 1197, 1620, 977, 1266, 1255, 1247, 958, 820,
	742, 817, 824, 1165, 441, 1250, 781, 802, 560, 426,
	976, 959, 837, 539, 540, 387, 436, 422, 535, 780,
	709, 532, 364, 365, 366, 968, 931, 2338, 2334, 2324,
	2306, 2304, 2286, 2265, 2219, 81, 1120, 1833, 1951, 2297,
	2205, 932, 67, 2280, 84, 442, 2165, 2253, 1430, 2085,
	852, 851, 861, 862, 854, 855, 856, 857, 858, 859,
	860, 853, 1429, 2204, 863, 34, 34, 1748, 1958, 1470,
	1910, 708, 34, 978, 34, 979, 1960, 1413, 562, 546,
	86, 87, 88, 89, 90, 1565, 2164, 1794, 1564, 1523,
	1299, 1566, 378, 514, 377, 520, 522, 521, 518, 519,
	517, 516, 515, 1334, 1434, 736, 1524, 2016, 756, 1704,
	523, 524, 1603, 1428, 446, 1278, 34, 1412, 70, 37,
	38, 711, 799, 390, 1795, 1796, 1336, 79, 79, 34,
	35, 70, 37, 38, 79, 556, 79, 1300, 1301, 1336,
	70, 37, 38, 61, 2004, 1963, 828, 757, 758, 76,
	1354, 1349, 1349, 39, 65, 66, 1340, 1342, 1901, 1341,
	62, 1361, 39, 1899, 1426, 1420, 1421, 1107, 1419, 1126,
	1422, 1423, 385, 735, 739, 106, 357, 741, 79, 1123,
	376, 1961, 1962, 1964, 1965, 1966, 765, 49, 2295, 2216,
	368, 79, 1124, 1125, 2214, 2215, 2055, 2054, 2053, 2052,
	2267, 2051, 2049, 2050, 2101, 1432, 1435, 371, 2136, 2137,
	737, 740, 1382, 738, 2208, 2209, 2172, 98, 751, 752,
	1930, 1548, 759, 753, 760, 757, 758, 750, 743, 743,
	749, 713, 712, 360, 2153, 1688, 2279, 1381, 2252, 1260,
	743, 1976, 1977, 2099, 996, 1667, 996, 995, 372, 1858,
	78, 78, 2339, 41, 72, 45, 44, 47, 2330, 58,
	996, 2139, 770, 358, 1805, 772, 2336, 2325, 771, 361,
	100, 807, 83, 2307, 97, 710, 719, 1059, 384, 814,
	108, 107, 383, 1555, 384, 48, 75, 74, 1803, 1427,
	56, 57, 46, 996, 1988, 1642, 1068, 1805, 769, 773,
	114, 110, 111, 767, 112, 2032, 1554, 2276, 1553, 2086,
	2271, 706, 1655, 1987, 810, 714, 332, 1425, 2034, 1610,
	104, 109, 1638, 1991, 2274, 106, 1108, 1886, 872, 1349,
	105, 874, 1339, 369, 1832, 59, 60, 116, 115, 745,
	369, 1363, 1878, 1581, 1569, 766, 1561, 734, 50, 73,
	764, 52, 53, 63, 1959, 64, 1431, 2261, 1639, 1465,
	885, 886, 887, 888, 889, 890, 891, 892, 893, 894,
	895, 896, 897, 898, 899, 900, 901, 902, 903, 904,
	905, 906, 907, 908, 909, 910, 911, 912, 2163, 2033,
	913, 369, 917, 918, 919, 920, 921, 922, 923, 924,
	925, 926, 927, 1433, 930, 933, 933, 933, 939, 933,
	933, 939, 933, 939, 948, 949, 950, 951, 952, 953,
	1295, 963, 1581, 806, 804, 1992, 77, 77, 815, 1889,
	108, 107, 71, 77, 1986, 77, 1285, 1287, 1126, 1580,
	914, 1732, 1640, 1641, 99, 71, 1023, 1453, 1584, 1438,
	369, 875, 876, 1144, 71, 1504, 989, 1595, 974, 2273,
	2275, 1124, 1125, 957, 877, 878, 879, 880, 881, 882,
	883, 884, 1600, 1599, 113, 843, 990, 77, 841, 1501,
	727, 1581, 1822, 1734, 853, 2218, 1304, 863, 863, 1099,
	77, 1392, 1137, 733, 1596, 783, 784, 785, 786, 787,
	788, 789, 790, 791, 792, 793, 794, 1581, 1601, 2320,
	1593, 747, 836, 1199, 1686, 1770, 1594, 1286, 1580, 1682,
	1115, 856, 857, 858, 859, 860, 853, 1055, 546, 863,
	761, 981, 987, 546, 1823, 1172, 982, 994, 774, 1010,
	715, 1581, 934, 936, 938, 940, 942, 944, 945, 947,
	1170, 1171, 1169, 967, 1750, 873, 1248, 935, 937, 972,
	941, 943, 1736, 946, 2323, 2262, 95, 1740, 1248, 1735,
	1512, 1733, 875, 876, 1061, 1598, 1738, 1580, 2310, 2292,
	2309, 1024, 1626, 1677, 1667, 1100, 732, 1393, 1674, 1737,
	1810, 1673, 1676, 1499, 831, 1498, 875, 876, 835, 834,
	432, 2186, 991, 1580, 1739, 1741, 2168, 748, 1669, 1054,
	1667, 94, 835, 834, 996, 834, 836, 1670, 1668, 1950,
	743, 835, 834, 763, 1450, 1451, 1452, 743, 743, 743,
	836, 79, 836, 2318, 1669, 1949, 2319, 1580, 2317, 836,
	1681, 1168, 743, 743, 1678, 965, 1142, 1143, 93, 1037,
	1040, 1041, 1042, 1043, 1044, 1045, 1625, 1046, 1047, 1048,
	1049, 1050, 1051, 1052, 1623, 1025, 1026, 1027, 1028, 1004,
	1008, 1038, 1005, 1011, 1007, 1009, 1006, 718, 1012, 1013,
	1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1029,
	1030, 1031, 1032, 1033, 1034, 1035, 1036, 2212, 78, 2237,
	821, 2236, 743, 822, 1133, 1604, 2249, 835, 834, 1082,
	1080, 778, 1597, 851, 861, 862, 854, 855, 856, 857,
	858, 859, 860, 853, 1146, 836, 863, 1118, 1094, 1095,
	1081, 2331, 1189, 777, 1190, 1065, 2248, 1087, 1088, 1089,
	1069, 1500, 2221, 1102, 1103, 2192, 1128, 1147, 835, 834,
	1148, 2098, 1096, 1097, 2212, 1085, 1086, 854, 855, 856,
	857, 858, 859, 860, 853, 78, 836, 863, 835, 834,
	835, 834, 1132, 2048, 1567, 2327, 1568, 2264, 2011, 1947,
	1105, 1039, 1815, 1621, 2332, 1409, 836, 816, 836, 1166,
	721, 722, 723, 724, 725, 1110, 1111, 1112, 1135, 1113,
	835, 834, 835, 834, 835, 834, 382, 2213, 917, 1752,
	1083, 2235, 1130, 914, 1127, 1116, 2023, 2254, 836, 2234,
	836, 2096, 836, 1939, 2251, 1161, 1163, 1162, 1131, 852,
	851, 861, 862, 854, 855, 856, 857, 858, 859, 860,
	853, 2198, 816, 863, 1155, 1157, 1158, 1939, 2196, 2061,
	1156, 1159, 1939, 2194, 1279, 2068, 1231, 1584, 390, 963,
	1939, 2100, 1164, 963, 2062, 1173, 1174, 1175, 1176, 1177,
	1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187,
	1192, 1193, 2023, 2092, 841, 1206, 1984, 1402, 1873, 1210,
	2023, 2038, 2023, 816, 529, 530, 1204, 1205, 2023, 2022,
	2042, 1290, 914, 1939, 1938, 1292, 1869, 1215, 1216, 1217,
	1218, 1860, 1237, 1240, 1275, 1921, 816, 1437, 816, 1249,
	1228, 1230, 1284, 1880, 1557, 1843, 1234, 1842, 965, 1841,
	1649, 1648, 1310, 462, 461, 464, 465, 466, 467, 825,
	1830, 1829, 463, 468, 1826, 1827, 1826, 1825, 2041, 844,
	1251, 743, 1403, 743, 1463, 816, 1288, 1080, 1390, 1055,
	1389, 1167, 1263, 816, 546, 1229, 1406, 1229, 816, 970,
	1321, 1309, 1163, 1308, 1191, 1109, 1315, 562, 1106, 1077,
	1076, 1881, 1075, 1557, 1074, 1350, 1351, 1352, 1353, 1297,
	1296, 1302, 1293, 1268, 1271, 1272, 1273, 1269, 1066, 1270,
	1274, 1311, 1318, 1773, 1774, 1064, 1063, 1062, 95, 1060,
	390, 993, 992, 970, 800, 916, 729, 1370, 1371, 375,
	1366, 1367, 1368, 1369, 78, 971, 929, 973, 373, 1838,
	83, 2060, 1195, 1816, 1756, 1557, 1203, 1769, 1362, 1139,
	1263, 1054, 1289, 1769, 969, 1212, 1213, 1262, 2200, 1285,
	1287, 83, 1916, 1454, 557, 1839, 1223, 1335, 1828, 1782,
	1227, 1377, 1658, 1379, 1571, 1298, 1463, 1517, 1516, 971,
	1114, 969, 914, 1388, 1245, 969, 1140, 1394, 965, 1121,
	1067, 1411, 1400, 965, 1229, 975, 1263, 965, 813, 1881,
	1138, 812, 1769, 852, 851, 861, 862, 854, 855, 856,
	857, 858, 859, 860, 853, 1463, 79, 863, 2206, 2195,
	1781, 2067, 1166, 2065, 1952, 1336, 79, 1926, 1365, 1809,
	1405, 1404, 1773, 1774, 2301, 1361, 1309, 1163, 1162, 1410,
	1286, 1575, 1383, 79, 1415, 1356, 1355, 1056, 1440, 1441,
	1436, 797, 1374, 1442, 2299, 2283, 1837, 1776, 1756, 1627,
	1526, 1527, 1071, 1449, 963, 963, 963, 963, 963, 1779,
	1459, 1268, 1271, 1272, 1273, 1269, 1540, 1270, 1274, 390,
	1279, 1541, 1549, 1455, 1538, 1542, 1778, 1272, 1273, 1539,
	963, 1537, 1469, 1471, 1536, 427, 428, 1456, 1457, 1458,
	2231, 2203, 1692, 1481, 1482, 1483, 1484, 1461, 1525, 1439,
	829, 830, 1464, 1150, 2229, 1447, 1446, 1466, 1467, 2014,
	1983, 1552, 1472, 1473, 1474, 1475, 1476, 1477, 1231, 1559,
	1480, 1560, 1558, 1586, 1493, 1485, 1486, 1487, 1488, 827,
	1490, 1491, 1492, 1544, 1942, 1868, 1867, 1495, 1496, 1497,
	1814, 1551, 1813, 1578, 1511, 1503, 2141, 1084, 1506, 1507,
	1508, 1530, 2144, 2191, 2190, 1514, 2059, 1515, 2220, 2057,
	1518, 1519, 1531, 1520, 1521, 1534, 78, 2135, 2134, 1572,
	1543, 374, 1579, 1582, 1414, 1104, 1532, 1533, 743, 1535,
	743, 743, 1545, 1546, 1167, 1585, 546, 1055, 1652, 981,
	1614, 818, 816, 1562, 988, 1574, 795, 1315, 779, 776,
	775, 730, 1613, 819, 1615, 1616, 1617, 1618, 439, 1605,
	1606, 916, 1570, 2244, 1629, 2072, 1612, 2071, 1914, 1993,
	1647, 390, 1142, 1143, 1378, 1408, 1619, 1070, 1689, 390,
	852, 851, 861, 862, 854, 855, 856, 857, 858, 859,
	860, 853, 1630, 1399, 863, 829, 830, 424, 1152, 1153,
	1622, 95, 1058, 2243, 1624, 121, 808, 809, 121, 2242,
	1445, 1712, 2241, 2045, 121, 1662, 1675, 1680, 1444, 1577,
	2223, 2222, 2188, 2145, 2076, 2002, 425, 1651, 965, 965,
	965, 965, 965, 83, 1659, 1650, 121, 2075, 1643, 1996,
	1645, 1646, 1656, 1557, 965, 1672, 1665, 1654, 121, 1664,
	1657, 1505, 121, 569, 965, 1671, 121, 1683, 1684, 2303,
	2302, 1687, 1632, 1633, 1634, 1761, 1502, 78, 121, 1653,
	569, 1690, 1691, 1101, 832, 2302, 121, 2303, 2089, 1749,
	1812, 916, 1136, 557, 379, 1235, 1236, 1697, 381, 1784,
	2117, 51, 1757, 1699, 1788, 1789, 1790, 1707, 1163, 1162,
	1713, 1698, 85, 1716, 1717, 1718, 1703, 1768, 1721, 2119,
	19, 2118, 18, 2120, 20, 1762, 54, 1760, 1702, 2121,
	21, 2116, 15, 1743, 1710, 1742, 1791, 1701, 1787, 2115,
	14, 2109, 10, 80, 1719, 1720, 1, 1793, 2128, 30,
	801, 1783, 2127, 29, 2189, 1726, 2126, 28, 2140, 1730,
	1763, 1307, 2142, 1777, 2124, 25, 2123, 24, 2125, 26,
	1135, 2056, 1530, 2114, 13, 2111, 12, 1785, 1744, 1745,
	1971, 1746, 1747, 2110, 11, 1804, 1806, 1835, 1836, 1798,
	2108, 9, 1956, 1753, 1754, 1955, 1807, 1636, 1797, 1808,
	1370, 1371, 861, 862, 854, 855, 856, 857, 858, 859,
	860, 853, 1635, 1697, 863, 1315, 796, 1315, 1119, 1817,
	1818, 1840, 1663, 1666, 1424, 2151, 1821, 1786, 1322, 1312,
	1372, 559, 91, 1824, 1391, 746, 1708, 1709, 1981, 1819,
	1133, 340, 1319, 1714, 1715, 1591, 2143, 798, 1590, 1587,
	1602, 1333, 1589, 1588, 2138, 1722, 1723, 1724, 1725, 1592,
	1727, 1728, 1729, 1001, 999, 1000, 998, 1003, 1002, 344,
	983, 2178, 1811, 833, 101, 55, 1985, 1679, 1850, 1856,
	1418, 1802, 1849, 1879, 1857, 96, 1847, 1855, 1872, 1845,
	1882, 102, 1888, 755, 1055, 346, 871, 1443, 1861, 1908,
	1563, 121, 544, 545, 537, 2207, 569, 569, 1877, 823,
	2154, 1510, 928, 847, 825, 850, 1246, 445, 569, 1547,
	2156, 1154, 864, 865, 866, 867, 868, 869, 870, 1846,
	848, 849, 846, 852, 851, 861, 862, 854, 855, 856,
	857, 858, 859, 860, 853, 460, 121, 863, 1922, 459,
	458, 455, 121, 456, 1398, 1145, 1522, 845, 1831, 443,
	434, 961, 954, 1407, 1883, 1267, 1854, 1897, 1265, 1934,
	1935, 1936, 1915, 1932, 1264, 1072, 1577, 1884, 533, 1863,
	1865, 1775, 1923, 1771, 1277, 960, 386, 78, 68, 1854,
	1943, 762, 359, 1937, 1909, 2084, 36, 1893, 1933, 380,
	429, 840, 27, 1494, 17, 768, 22, 16, 1902, 1903,
	1416, 716, 40, 1572, 1256, 43, 42, 1631, 1530, 1380,
	1944, 2177, 1513, 2269, 1968, 1969, 1970, 1917, 1918, 1919,
	782, 963, 1920, 1945, 2290, 1953, 1978, 1979, 2210, 32,
	31, 1315, 1980, 2122, 2129, 2113, 2112, 499, 2256, 1967,
	23, 1931, 2255, 4, 1972, 805, 1974, 1946, 69, 1948,
	1973, 33, 555, 1982, 965, 1998, 1999, 1761, 1804, 1989,
	2018, 390, 1885, 1997, 2, 0, 0, 0, 1990, 0,
	1887, 1784, 0, 1370, 0, 0, 0, 0, 0, 1890,
	1891, 0, 0, 0, 0, 0, 1892, 0, 121, 121,
	121, 0, 0, 0, 0, 0, 0, 2021, 0, 0,
	0, 2044, 0, 2046, 569, 0, 0, 0, 2017, 1760,
	2015, 0, 1994, 0, 2020, 0, 0, 2003, 0, 2025,
	1697, 1907, 2030, 2024, 2043, 0, 2036, 2037, 553, 0,
	2035, 0, 565, 0, 2073, 0, 0, 2047, 0, 1284,
	0, 2026, 0, 0, 2001, 0, 0, 1854, 0, 720,
	2039, 0, 2040, 0, 0, 0, 0, 1761, 0, 78,
	2063, 2064, 0, 0, 0, 2010, 0, 0, 0, 1854,
	0, 2005, 2006, 2007, 2008, 2009, 2077, 2070, 0, 2012,
	2013, 0, 2079, 2078, 0, 0, 0, 78, 2066, 0,
	2027, 2028, 2029, 0, 2090, 2102, 2095, 0, 0, 0,
	0, 963, 0, 2094, 0, 0, 0, 2091, 2097, 1760,
	852, 851, 861, 862, 854, 855, 856, 857, 858, 859,
	860, 853, 0, 0, 863, 0, 0, 390, 0, 390,
	0, 0, 0, 0, 0, 1802, 0, 2147, 0, 2149,
	2159, 0, 2148, 2146, 0, 965, 0, 0, 1802, 2161,
	2173, 0, 2160, 0, 0, 0, 0, 0, 2166, 0,
	0, 2080, 2081, 2082, 2083, 569, 0, 0, 2087, 2088,
	0, 0, 0, 0, 78, 0, 1751, 121, 0, 0,
	121, 0, 0, 0, 0, 0, 121, 0, 569, 0,
	0, 0, 0, 0, 0, 569, 569, 569, 121, 121,
	121, 0, 0, 2185, 0, 121, 0, 0, 2187, 0,
	569, 569, 1337, 1338, 2201, 1343, 1344, 1345, 1346, 1347,
	0, 1792, 0, 0, 0, 2193, 0, 0, 1530, 0,
	0, 0, 0, 1357, 1358, 1359, 0, 2095, 2150, 0,
	2162, 0, 0, 0, 2225, 0, 2227, 2167, 0, 0,
	0, 2217, 0, 0, 78, 2233, 2224, 0, 2230, 0,
	78, 1802, 0, 1802, 2240, 2228, 2182, 2226, 2247, 121,
	569, 121, 0, 569, 2238, 565, 565, 2232, 78, 2250,
	0, 0, 0, 78, 0, 0, 2260, 565, 2263, 2259,
	0, 121, 2258, 2266, 2257, 0, 0, 840, 0, 0,
	0, 2278, 78, 2284, 0, 78, 78, 2197, 0, 0,
	78, 0, 2285, 0, 2247, 2287, 0, 2202, 2293, 0,
	2296, 0, 0, 0, 0, 965, 2298, 78, 0, 2300,
	78, 2268, 0, 0, 0, 2247, 2311, 0, 2313, 0,
	2308, 0, 0, 569, 0, 78, 2321, 78, 0, 1874,
	0, 78, 2245, 2247, 0, 2247, 1913, 0, 0, 432,
	0, 2326, 0, 0, 0, 78, 0, 0, 78, 0,
	0, 0, 0, 2247, 0, 78, 0, 0, 2335, 78,
	0, 0, 0, 2247, 0, 0, 0, 2247, 0, 0,
	0, 1802, 0, 0, 0, 852, 851, 861, 862, 854,
	855, 856, 857, 858, 859, 860, 853, 569, 569, 863,
	0, 2277, 0, 0, 121, 0, 1911, 0, 0, 0,
	0, 0, 121, 121, 0, 916, 0, 121, 121, 0,
	0, 121, 121, 121, 1924, 0, 0, 1925, 0, 0,
	1927, 0, 0, 0, 0, 0, 0, 0, 916, 0,
	0, 569, 569, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2314, 0, 0, 0, 0, 0, 0,
	2328, 2329, 0, 0, 0, 0, 0, 553, 0, 0,
	0, 0, 553, 984, 0, 0, 0, 964, 0, 0,
	0, 0, 0, 34, 0, 70, 37, 38, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 61, 0, 0,
	0, 0, 0, 76, 0, 0, 0, 39, 121, 569,
	0, 569, 1912, 0, 121, 0, 121, 121, 0, 0,
	121, 0, 0, 0, 118, 0, 0, 0, 0, 0,
	0, 0, 0, 362, 0, 0, 0, 1607, 1608, 1609,
	1611, 0, 0, 0, 0, 79, 0, 0, 121, 121,
	121, 852, 851, 861, 862, 854, 855, 856, 857, 858,
	859, 860, 853, 0, 0, 863, 0, 534, 2130, 0,
	121, 558, 121, 2337, 0, 707, 0, 0, 1906, 0,
	0, 0, 0, 0, 0, 0, 0, 717, 0, 0,
	0, 0, 0, 0, 0, 726, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 41, 72, 45,
	44, 47, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2131, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1057, 0, 0, 0, 0, 48,
	75, 74, 0, 0, 0, 0, 46, 0, 0, 0,
	0, 0, 432, 0, 1905, 0, 916, 565, 0, 0,
	0, 0, 0, 0, 565, 565, 565, 852, 851, 861,
	862, 854, 855, 856, 857, 858, 859, 860, 853, 565,
	565, 863, 0, 0, 0, 0, 0, 0, 0, 59,
	60, 0, 2132, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2133, 73, 0, 52, 53, 63, 0, 64,
	0, 0, 121, 121, 121, 121, 121, 0, 0, 0,
	0, 0, 0, 0, 121, 0, 0, 0, 121, 2155,
	2158, 0, 121, 0, 0, 0, 0, 0, 121, 565,
	0, 0, 565, 852, 851, 861, 862, 854, 855, 856,
	857, 858, 859, 860, 853, 0, 0, 863, 0, 0,
	418, 0, 569, 0, 0, 0, 0, 0, 0, 0,
	0, 565, 0, 0, 0, 0, 0, 1851, 0, 0,
	1853, 1196, 1201, 1202, 2174, 2175, 0, 0, 1207, 1208,
	1209, 0, 1211, 0, 0, 1214, 0, 0, 0, 71,
	1219, 1220, 1221, 1222, 0, 1224, 1225, 1226, 1820, 0,
	728, 0, 1194, 1232, 1233, 1904, 0, 0, 1239, 1242,
	1243, 1244, 0, 569, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 569, 121, 569, 569,
	0, 0, 0, 0, 77, 1254, 0, 1257, 1258, 0,
	0, 0, 0, 0, 2158, 803, 0, 0, 553, 0,
	0, 811, 0, 0, 0, 0, 2239, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1252, 1253, 0, 0,
	0, 0, 0, 0, 0, 0, 569, 569, 0, 412,
	0, 0, 121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 569, 553, 852, 851, 861, 862, 854, 855,
	856, 857, 858, 859, 860, 853, 0, 565, 863, 569,
	565, 565, 0, 0, 0, 0, 0, 0, 0, 0,
	1894, 1895, 0, 1896, 0, 0, 1898, 0, 1900, 0,
	0, 0, 0, 0, 0, 0, 2312, 0, 0, 0,
	0, 0, 0, 34, 0, 70, 37, 38, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 61, 0, 0,
	0, 0, 0, 76, 0, 569, 569, 39, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 565, 0,
	565, 0, 0, 0, 0, 0, 0, 0, 569, 1940,
	1941, 0, 0, 0, 1700, 0, 0, 956, 0, 966,
	0, 0, 0, 0, 0, 79, 0, 0, 569, 0,
	569, 0, 569, 0, 569, 852, 851, 861, 862, 854,
	855, 856, 857, 858, 859, 860, 853, 0, 2130, 863,
	0, 2289, 2292, 2288, 392, 393, 394, 395, 396, 400,
	401, 405, 406, 415, 414, 413, 416, 417, 420, 419,
	421, 397, 398, 399, 402, 403, 404, 407, 408, 411,
	409, 410, 565, 0, 0, 0, 121, 41, 72, 45,
	44, 47, 0, 0, 0, 0, 0, 0, 0, 0,
	1462, 121, 0, 2131, 0, 0, 0, 0, 1468, 0,
	0, 0, 0, 0, 121, 0, 0, 1478, 1479, 48,
	75, 74, 0, 0, 0, 0, 46, 0, 1489, 0,
	0, 0, 1460, 0, 569, 0, 0, 0, 121, 569,
	0, 0, 0, 0, 0, 0, 569, 569, 0, 0,
	1509, 0, 826, 852, 851, 861, 862, 854, 855, 856,
	857, 858, 859, 860, 853, 0, 0, 863, 0, 59,
	60, 0, 2132, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2133, 73, 0, 52, 53, 63, 0, 64,
	34, 0, 70, 37, 38, 0, 0, 0, 0, 119,
	553, 0, 356, 0, 61, 0, 534, 0, 119, 1073,
	76, 0, 0, 0, 39, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 121, 0, 0, 1090, 1091, 1092,
	389, 0, 0, 0, 1093, 553, 0, 0, 0, 433,
	569, 0, 536, 554, 0, 0, 119, 569, 569, 569,
	119, 565, 79, 0, 0, 0, 569, 0, 0, 0,
	0, 0, 119, 0, 0, 0, 0, 0, 569, 0,
	119, 0, 0, 0, 0, 2130, 0, 0, 0, 71,
	2333, 852, 851, 861, 862, 854, 855, 856, 857, 858,
	859, 860, 853, 0, 0, 863, 121, 0, 1129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1628, 0, 41, 72, 45, 44, 47, 0,
	1151, 0, 0, 0, 77, 565, 0, 565, 565, 0,
	2131, 0, 0, 0, 0, 0, 0, 569, 0, 121,
	0, 0, 0, 0, 0, 569, 48, 75, 74, 0,
	0, 0, 0, 46, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 34, 0, 70, 37, 38, 0,
	0, 0, 0, 0, 0, 565, 565, 0, 61, 0,
	569, 0, 0, 0, 76, 569, 0, 0, 39, 0,
	121, 565, 121, 0, 0, 0, 59, 60, 569, 2132,
	0, 0, 0, 565, 0, 0, 0, 0, 1711, 2133,
	73, 569, 52, 53, 63, 0, 64, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 79, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1261, 0, 0, 0, 569, 0, 2130,
	0, 0, 0, 0, 2322, 0, 0, 1291, 0, 0,
	0, 553, 0, 0, 565, 1767, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 569, 0, 0, 119, 0, 1767, 41, 72,
	45, 44, 47, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2131, 0, 71, 565, 0, 565,
	0, 565, 0, 1801, 0, 0, 0, 0, 0, 121,
	48, 75, 74, 0, 569, 0, 569, 46, 0, 0,
	119, 0, 0, 0, 0, 0, 119, 1023, 0, 0,
	0, 418, 0, 0, 0, 0, 0, 1376, 0, 0,
	0, 77, 0, 1384, 0, 1385, 1386, 0, 121, 1387,
	0, 1859, 0, 0, 0, 0, 0, 0, 0, 0,
	59, 60, 0, 2132, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2133, 73, 0, 52, 53, 63, 1397,
	64, 569, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 803,
	0, 0, 569, 1866, 0, 0, 0, 0, 1871, 0,
	0, 0, 0, 0, 0, 1875, 1876, 0, 0, 0,
	1010, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 996, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 569, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 569, 0, 0, 0, 0,
	412, 0, 1024, 0, 0, 0, 0, 569, 0, 0,
	71, 0, 119, 119, 119, 0, 0, 0, 0, 0,
	0, 0, 554, 0, 0, 0, 0, 554, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 553, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1929,
	0, 0, 0, 0, 0, 77, 1929, 1929, 1929, 0,
	0, 0, 0, 0, 0, 565, 0, 0, 0, 0,
	1037, 1040, 1041, 1042, 1043, 1044, 1045, 1929, 1046, 1047,
	1048, 1049, 1050, 1051, 1052, 0, 1025, 1026, 1027, 1028,
	1004, 1008, 1038, 1005, 1011, 1007, 1009, 1006, 0, 1012,
	1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022,
	1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 0, 0,
	0, 0, 0, 34, 0, 70, 37, 38, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 61, 0, 0,
	0, 0, 0, 76, 0, 0, 565, 39, 0, 0,
	0, 0, 0, 0, 565, 392, 393, 394, 395, 396,
	400, 401, 405, 406, 415, 414, 413, 416, 417, 420,
	419, 421, 397, 398, 399, 402, 403, 404, 407, 408,
	411, 409, 410, 0, 0, 79, 0, 0, 0, 2019,
	0, 0, 0, 0, 1929, 0, 0, 0, 0, 0,
	0, 119, 1039, 0, 119, 0, 1644, 1801, 2130, 0,
	1079, 0, 0, 2305, 0, 0, 0, 0, 0, 0,
	1801, 0, 119, 119, 119, 0, 0, 0, 0, 119,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 41, 72, 45,
	44, 47, 0, 0, 0, 0, 2069, 0, 0, 0,
	0, 1693, 0, 2131, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 48,
	75, 74, 0, 0, 0, 0, 46, 0, 0, 0,
	0, 2093, 0, 119, 0, 389, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 119, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1079, 0, 0, 59,
	60, 0, 2132, 1801, 352, 1801, 0, 0, 0, 0,
	0, 0, 2133, 73, 0, 52, 53, 63, 0, 64,
	0, 0, 0, 0, 0, 0, 0, 553, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1200,
	1200, 1200, 349, 0, 0, 1200, 1200, 1200, 1200, 1200,
	1200, 0, 0, 1200, 0, 0, 0, 0, 1200, 1200,
	1200, 1200, 0, 1200, 1200, 1200, 0, 0, 0, 0,
	565, 1200, 1200, 0, 0, 0, 1200, 1200, 1200, 1200,
	0, 0, 0, 554, 0, 0, 0, 0, 0, 0,
	0, 2199, 0, 0, 333, 0, 0, 0, 0, 0,
	0, 336, 0, 1200, 1200, 1200, 1200, 0, 119, 71,
	0, 345, 350, 351, 0, 1834, 119, 389, 0, 0,
	0, 119, 119, 0, 0, 119, 1294, 1079, 554, 0,
	1844, 0, 0, 1801, 0, 0, 0, 0, 0, 0,
	0, 0, 1079, 1848, 1929, 0, 0, 342, 0, 0,
	343, 0, 0, 348, 77, 0, 565, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 34, 1870, 70, 37,
	38, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	61, 0, 0, 0, 0, 0, 76, 0, 0, 0,
	39, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 119, 0, 0, 0, 0, 0, 119, 0,
	119, 119, 0, 0, 119, 0, 0, 334, 79, 2294,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2130, 1395, 1396, 119, 0, 0, 0, 0, 0,
	347, 337, 338, 0, 355, 0, 0, 0, 339, 341,
	0, 335, 354, 353, 119, 0, 389, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	41, 72, 45, 44, 47, 0, 0, 1079, 0, 0,
	0, 0, 0, 0, 0, 0, 2131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 48, 75, 74, 1954, 0, 0, 0, 46,
	0, 0, 0, 0, 0, 0, 0, 34, 0, 70,
	37, 38, 0, 0, 0, 0, 0, 0, 1200, 0,
	0, 61, 0, 0, 0, 0, 1200, 76, 0, 0,
	0, 39, 0, 0, 0, 1200, 1200, 0, 0, 0,
	0, 0, 59, 60, 0, 2132, 1200, 0, 0, 0,
	1200, 0, 0, 0, 0, 2133, 73, 0, 52, 53,
	63, 0, 64, 0, 0, 0, 0, 0, 1200, 79,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 554, 119, 119, 119, 119,
	119, 418, 2130, 0, 0, 0, 0, 2246, 389, 0,
	0, 0, 119, 0, 0, 0, 389, 0, 0, 0,
	0, 1576, 119, 0, 0, 0, 0, 0, 0, 0,
	554, 418, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 41, 72, 45, 44, 47, 34, 0, 70, 37,
	38, 1053, 0, 0, 0, 0, 0, 2131, 0, 0,
	61, 0, 71, 0, 0, 0, 76, 0, 0, 0,
	39, 0, 0, 48, 75, 74, 0, 0, 0, 0,
	46, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 996, 0, 0, 0, 0, 77, 79, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 119, 0, 59, 60, 0, 2132, 0, 0, 0,
	412, 2130, 996, 0, 0, 0, 2133, 73, 0, 52,
	53, 63, 0, 64, 0, 418, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	412, 0, 0, 0, 0, 1853, 0, 2169, 0, 0,
	41, 72, 45, 44, 47, 0, 119, 0, 0, 0,
	0, 0, 0, 0, 0, 418, 2131, 1200, 0, 0,
	0, 0, 0, 0, 0, 0, 1200, 0, 1079, 0,
	0, 0, 48, 75, 74, 1864, 0, 0, 0, 46,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 418,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 71, 0, 0, 0, 0, 0, 1862,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 59, 60, 0, 2132, 554, 0, 0, 0,
	0, 0, 0, 0, 0, 2133, 73, 0, 52, 53,
	63, 0, 64, 0, 412, 0, 0, 0, 77, 0,
	0, 0, 0, 0, 0, 392, 393, 394, 395, 396,
	400, 401, 405, 406, 415, 414, 413, 416, 417, 420,
	419, 421, 397, 398, 399, 402, 403, 404, 407, 408,
	411, 409, 410, 0, 412, 392, 393, 394, 395, 396,
	400, 401, 405, 406, 415, 414, 413, 416, 417, 420,
	419, 421, 397, 398, 399, 402, 403, 404, 407, 408,
	411, 409, 410, 0, 0, 0, 0, 0, 412, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	119, 0, 71, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 119, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 119, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 77, 0, 0,
	0, 0, 119, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 433, 392,
	393, 394, 395, 396, 400, 401, 405, 406, 415, 414,
	413, 416, 417, 420, 419, 421, 397, 398, 399, 402,
	403, 404, 407, 408, 411, 409, 410, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 392,
	393, 394, 395, 396, 400, 401, 405, 406, 415, 414,
	413, 416, 417, 420, 419, 421, 397, 398, 399, 402,
	403, 404, 407, 408, 411, 409, 410, 0, 389, 0,
	0, 0, 554, 392, 393, 394, 395, 396, 400, 401,
	405, 406, 415, 414, 413, 416, 417, 420, 419, 421,
	397, 398, 399, 402, 403, 404, 407, 408, 411, 409,
	410, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	119, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 119, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 389, 0, 389, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 433, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 687, 667,
	298, 625, 690, 597, 614, 702, 615, 618, 656, 583,
	637, 233, 612, 584, 0, 601, 574, 608, 575, 598,
	627, 166, 596, 669, 640, 689, 196, 652, 0, 157,
	204, 202, 0, 119, 0, 239, 297, 688, 633, 0,
	696, 199, 0, 649, 697, 288, 218, 0, 0, 629,
	676, 635, 665, 624, 658, 590, 648, 691, 613, 654,
	692, 0, 554, 0, 2176, 0, 0, 0, 0, 0,
	0, 0, 119, 147, 0, 651, 686, 610, 653, 655,
	572, 650, 0, 578, 585, 701, 682, 604, 605, 606,
	0, 0, 0, 0, 0, 0, 0, 628, 636, 662,
	621, 0, 0, 0, 0, 0, 0, 0, 0, 602,
	0, 646, 0, 0, 0, 586, 579, 0, 0, 626,
	0, 0, 0, 589, 126, 603, 663, 0, 570, 176,
	219, 137, 666, 681, 623, 189, 325, 685, 620, 619,
	253, 0, 293, 179, 197, 141, 123, 135, 151, 178,
	229, 262, 272, 611, 571, 670, 599, 609, 158, 607,
	265, 237, 315, 0, 643, 243, 264, 200, 304, 255,
	313, 314, 180, 705, 322, 327, 285, 167, 0, 127,
	0, 250, 162, 193, 622, 657, 600, 155, 660, 647,
	675, 284, 302, 142, 299, 217, 223, 152, 154, 153,
	136, 279, 301, 146, 156, 289, 268, 294, 161, 0,
	0, 2179, 2180, 2181, 0, 0, 0, 0, 128, 296,
	312, 148, 276, 277, 328, 263, 130, 310, 292, 215,
	190, 191, 129, 0, 260, 165, 175, 160, 232, 0,
	174, 252, 307, 308, 159, 330, 138, 321, 132, 139,
	320, 226, 0, 225, 323, 303, 311, 216, 208, 0,
	131, 309, 214, 207, 195, 170, 182, 248, 203, 249,
	183, 221, 220, 222, 205, 209, 0, 576, 0, 290,
	318, 331, 144, 595, 278, 300, 0, 0, 145, 173,
	169, 247, 224, 140, 185, 287, 194, 201, 259, 329,
	236, 266, 149, 317, 286, 593, 594, 591, 0, 592,
	638, 639, 693, 694, 695, 664, 587, 0, 677, 678,
	0, 668, 683, 684, 659, 703, 616, 617, 577, 580,
	581, 582, 588, 630, 631, 642, 645, 673, 672, 671,
	674, 679, 699, 698, 700, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 641, 122, 133, 198,
	704, 257, 172, 319, 573, 164, 0, 0, 632, 634,
	644, 661, 124, 125, 134, 143, 150, 163, 168, 171,
	177, 181, 184, 186, 187, 188, 192, 206, 210, 211,
	212, 213, 227, 228, 230, 231, 234, 235, 238, 240,
	241, 242, 244, 245, 246, 251, 254, 256, 258, 261,
	267, 269, 270, 271, 273, 274, 275, 280, 281, 282,
	283, 291, 295, 305, 306, 316, 324, 326, 680, 687,
	667, 298, 625, 690, 597, 614, 702, 615, 618, 656,
	583, 637, 233, 612, 584, 0, 601, 574, 608, 575,
	598, 627, 166, 596, 669, 640, 689, 196, 652, 0,
	157, 204, 202, 0, 0, 0, 239, 297, 688, 633,
	0, 696, 199, 0, 649, 697, 288, 218, 0, 0,
	629, 676, 635, 665, 624, 658, 590, 648, 691, 613,
	654, 692, 0, 0, 0, 568, 0, 1316, 1317, 0,
	0, 0, 0, 0, 147, 0, 651, 686, 610, 653,
	655, 572, 650, 0, 578, 585, 701, 682, 604, 605,
	606, 1573, 0, 0, 0, 0, 0, 0, 628, 636,
	662, 621, 0, 0, 0, 0, 0, 0, 0, 0,
	602, 0, 646, 0, 0, 0, 586, 579, 0, 0,
	626, 0, 0, 0, 589, 126, 603, 663, 0, 570,
	176, 219, 137, 666, 681, 623, 189, 325, 685, 620,
	619, 253, 0, 293, 179, 197, 141, 123, 135, 151,
	178, 229, 262, 272, 611, 571, 670, 599, 609, 158,
	607, 265, 237, 315, 0, 643, 243, 264, 200, 304,
	255, 313, 314, 180, 705, 322, 327, 285, 167, 0,
	127, 0, 250, 162, 193, 622, 657, 600, 155, 660,
	647, 675, 284, 302, 142, 299, 217, 223, 152, 154,
	153, 136, 279, 301, 146, 156, 289, 268, 294, 161,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 128,
	296, 312, 148, 276, 277, 328, 263, 130, 310, 292,
	215, 190, 191, 129, 0, 260, 165, 175, 160, 232,
	0, 174, 252, 307, 308, 159, 330, 138, 321, 132,
	139, 320, 226, 0, 225, 323, 303, 311, 216, 208,
	0, 131, 309, 214, 207, 195, 170, 182, 248, 203,
	249, 183, 221, 220, 222, 205, 209, 0, 576, 0,
	290, 318, 331, 144, 595, 278, 300, 0, 0, 145,
	173, 169, 247, 224, 140, 185, 287, 194, 201, 259,
	329, 236, 266, 149, 317, 286, 593, 594, 591, 0,
	592, 638, 639, 693, 694, 695, 664, 587, 0, 677,
	678, 0, 668, 683, 684, 659, 703, 616, 617, 577,
	580, 581, 582, 588, 630, 631, 642, 645, 673, 672,
	671, 674, 679, 699, 698, 700, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 641, 122, 133,
	198, 704, 257, 172, 319, 573, 164, 0, 0, 632,
	634, 644, 661, 124, 125, 134, 143, 150, 163, 168,
	171, 177, 181, 184, 186, 187, 188, 192, 206, 210,
	211, 212, 213, 227, 228, 230, 231, 234, 235, 238,
	240, 241, 242, 244, 245, 246, 251, 254, 256, 258,
	261, 267, 269, 270, 271, 273, 274, 275, 280, 281,
	282, 283, 291, 295, 305, 306, 316, 324, 326, 680,
	687, 667, 298, 625, 690, 597, 614, 702, 615, 618,
	656, 583, 637, 233, 612, 584, 0, 601, 574, 608,
	575, 598, 627, 166, 596, 669, 640, 689, 196, 652,
	0, 157, 204, 202, 0, 0, 0, 239, 297, 688,
	633, 0, 696, 199, 0, 649, 697, 288, 218, 0,
	0, 629, 676, 635, 665, 624, 658, 590, 648, 691,
	613, 654, 692, 0, 0, 0, 568, 0, 1316, 1317,
	0, 0, 0, 0, 0, 147, 0, 651, 686, 610,
	653, 655, 572, 650, 0, 578, 585, 701, 682, 604,
	605, 606, 0, 0, 0, 0, 0, 0, 0, 628,
	636, 662, 621, 0, 0, 0, 0, 0, 0, 0,
	0, 602, 0, 646, 0, 0, 0, 586, 579, 0,
	0, 626, 0, 0, 0, 589, 126, 603, 663, 0,
	570, 176, 219, 137, 666, 681, 623, 189, 325, 685,
	620, 619, 253, 0, 293, 179, 197, 141, 123, 135,
	151, 178, 229, 262, 272, 611, 571, 670, 599, 609,
	158, 607, 265, 237, 315, 0, 643, 243, 264, 200,
	304, 255, 313, 314, 180, 705, 322, 327, 285, 167,
	0, 127, 0, 250, 162, 193, 622, 657, 600, 155,
	660, 647, 675, 284, 302, 142, 299, 217, 223, 152,
	154, 153, 136, 279, 301, 146, 156, 289, 268, 294,
	161, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	128, 296, 312, 148, 276, 277, 328, 263, 130, 310,
	292, 215, 190, 191, 129, 0, 260, 165, 175, 160,
	232, 0, 174, 252, 307, 308, 159, 330, 138, 321,
	132, 139, 320, 226, 0, 225, 323, 303, 311, 216,
	208, 0, 131, 309, 214, 207, 195, 170, 182, 248,
	203, 249, 183, 221, 220, 222, 205, 209, 0, 576,
	0, 290, 318, 331, 144, 595, 278, 300, 0, 0,
	145, 173, 169, 247, 224, 140, 185, 287, 194, 201,
	259, 329, 236, 266, 149, 317, 286, 593, 594, 591,
	0, 592, 638, 639, 693, 694, 695, 664, 587, 0,
	677, 678, 0, 668, 683, 684, 659, 703, 616, 617,
	577, 580, 581, 582, 588, 630, 631, 642, 645, 673,
	672, 671, 674, 679, 699, 698, 700, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 641, 122,
	133, 198, 704, 257, 172, 319, 573, 164, 0, 0,
	632, 634, 644, 661, 124, 125, 134, 143, 150, 163,
	168, 171, 177, 181, 184, 186, 187, 188, 192, 206,
	210, 211, 212, 213, 227, 228, 230, 231, 234, 235,
	238, 240, 241, 242, 244, 245, 246, 251, 254, 256,
	258, 261, 267, 269, 270, 271, 273, 274, 275, 280,
	281, 282, 283, 291, 295, 305, 306, 316, 324, 326,
	680, 687, 667, 298, 625, 690, 597, 614, 702, 615,
	618, 656, 583, 637, 233, 612, 584, 0, 601, 574,
	608, 575, 598, 627, 166, 596, 669, 640, 689, 196,
	652, 0, 157, 204, 202, 0, 0, 0, 239, 297,
	688, 633, 0, 696, 199, 0, 649, 697, 288, 218,
	0, 0, 629, 676, 635, 665, 624, 658, 590, 648,
	691, 613, 654, 692, 0, 0, 0, 568, 0, 0,
	0, 0, 0, 0, 0, 0, 147, 0, 651, 686,
	610, 653, 655, 572, 650, 0, 578, 585, 701, 682,
	604, 605, 606, 0, 0, 0, 0, 0, 0, 0,
	628, 636, 662, 621, 0, 0, 0, 0, 0, 0,
	2000, 0, 602, 0, 646, 0, 0, 0, 586, 579,
	0, 0, 626, 0, 0, 0, 589, 126, 603, 663,
	0, 570, 176, 219, 137, 666, 681, 623, 189, 325,
	685, 620, 619, 253, 0, 293, 179, 197, 141, 123,
	135, 151, 178, 229, 262, 272, 611, 571, 670, 599,
	609, 158, 607, 265, 237, 315, 0, 643, 243, 264,
	200, 304, 255, 313, 314, 180, 705, 322, 327, 285,
	167, 0, 127, 0, 250, 162, 193, 622, 657, 600,
	155, 660, 647, 675, 284, 302, 142, 299, 217, 223,
	152, 154, 153, 136, 279, 301, 146, 156, 289, 268,
	294, 161, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 128, 296, 312, 148, 276, 277, 328, 263, 130,
	310, 292, 215, 190, 191, 129, 0, 260, 165, 175,
	160, 232, 0, 174, 252, 307, 308, 159, 330, 138,
	321, 132, 139, 320, 226, 0, 225, 323, 303, 311,
	216, 208, 0, 131, 309, 214, 207, 195, 170, 182,
	248, 203, 249, 183, 221, 220, 222, 205, 209, 0,
	576, 0, 290, 318, 331, 144, 595, 278, 300, 0,
	0, 145, 173, 169, 247, 224, 140, 185, 287, 194,
	201, 259, 329, 236, 266, 149, 317, 286, 593, 594,
	591, 0, 592, 638, 639, 693, 694, 695, 664, 587,
	0, 677, 678, 0, 668, 683, 684, 659, 703, 616,
	617, 577, 580, 581, 582, 588, 630, 631, 642, 645,
	673, 672, 671, 674, 679, 699, 698, 700, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 641,
	122, 133, 198, 704, 257, 172, 319, 573, 164, 0,
	0, 632, 634, 644, 661, 124, 125, 134, 143, 150,
	163, 168, 171, 177, 181, 184, 186, 187, 188, 192,
	206, 210, 211, 212, 213, 227, 228, 230, 231, 234,
	235, 238, 240, 241, 242, 244, 245, 246, 251, 254,
	256, 258, 261, 267, 269, 270, 271, 273, 274, 275,
	280, 281, 282, 283, 291, 295, 305, 306, 316, 324,
	326, 680, 687, 1764, 298, 625, 690, 597, 614, 702,
	615, 618, 656, 583, 637, 233, 612, 584, 0, 601,
	574, 608, 575, 598, 627, 166, 596, 669, 640, 689,
	196, 652, 0, 157, 204, 202, 0, 0, 0, 239,
	297, 688, 633, 0, 696, 199, 0, 649, 697, 288,
	218, 0, 0, 629, 676, 635, 665, 624, 658, 590,
	648, 691, 613, 654, 692, 79, 0, 0, 568, 0,
	0, 0, 0, 0, 0, 0, 0, 147, 0, 651,
	686, 610, 653, 655, 572, 650, 0, 578, 585, 701,
	682, 604, 605, 606, 0, 0, 0, 0, 0, 0,
	0, 628, 636, 662, 621, 0, 0, 0, 0, 0,
	0, 0, 0, 602, 0, 646, 0, 0, 0, 586,
	579, 0, 0, 626, 0, 0, 0, 589, 126, 603,
	663, 0, 570, 176, 219, 137, 666, 681, 623, 189,
	325, 685, 620, 619, 253, 0, 293, 179, 197, 141,
	123, 135, 151, 178, 229, 262, 272, 611, 571, 670,
	599, 609, 158, 607, 265, 237, 315, 0, 643, 243,
	264, 200, 304, 255, 313, 314, 180, 705, 322, 327,
	285, 167, 0, 127, 0, 250, 162, 193, 622, 657,
	600, 155, 660, 647, 675, 284, 302, 142, 299, 217,
	223, 152, 154, 153, 136, 279, 301, 146, 156, 289,
	268, 294, 161, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 128, 296, 312, 148, 276, 277, 328, 263,
	130, 310, 292, 215, 190, 191, 129, 0, 260, 165,
	175, 160, 232, 0, 174, 252, 307, 308, 159, 330,
	138, 321, 132, 139, 320, 226, 0, 225, 323, 303,
	311, 216, 208, 0, 131, 309, 214, 207, 195, 170,
	182, 248, 203, 249, 183, 221, 220, 222, 205, 209,
	0, 576, 0, 290, 318, 331, 144, 595, 278, 300,
	0, 0, 145, 173, 169, 247, 224, 140, 185, 287,
	194, 201, 259, 329, 236, 266, 149, 317, 286, 593,
	594, 591, 0, 592, 638, 639, 693, 694, 695, 664,
	587, 0, 677, 678, 0, 668, 683, 684, 659, 703,
	616, 617, 577, 580, 581, 582, 588, 630, 631, 642,
	645, 673, 672, 671, 674, 679, 699, 698, 700, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	641, 122, 133, 198, 1765, 257, 172, 319, 573, 164,
	0, 0, 632, 634, 644, 661, 124, 125, 134, 143,
	150, 163, 168, 171, 177, 181, 184, 186, 187, 188,
	192, 206, 210, 211, 212, 213, 227, 228, 230, 231,
	234, 235, 238, 240, 241, 242, 244, 245, 246, 251,
	254, 256, 258, 261, 267, 269, 270, 271, 273, 274,
	275, 280, 281, 282, 283, 291, 295, 305, 306, 316,
	324, 326, 680, 687, 667, 298, 625, 690, 597, 614,
	702, 615, 618, 656, 583, 637, 233, 612, 584, 0,
	601, 574, 608, 575, 598, 627, 166, 596, 669, 640,
	689, 196, 652, 0, 157, 204, 202, 0, 0, 0,
	239, 297, 688, 633, 0, 696, 199, 0, 649, 697,
	288, 218, 0, 0, 629, 676, 635, 665, 624, 658,
	590, 648, 691, 613, 654, 692, 0, 0, 0, 438,
	0, 0, 0, 0, 0, 0, 0, 0, 147, 0,
	651, 686, 610, 653, 655, 572, 650, 0, 578, 585,
	701, 682, 604, 605, 606, 0, 0, 0, 0, 0,
	0, 0, 628, 636, 662, 621, 0, 0, 0, 0,
	0, 0, 1706, 0, 602, 0, 646, 0, 0, 0,
	586, 579, 0, 0, 626, 0, 0, 0, 589, 126,
	603, 663, 0, 570, 176, 219, 137, 666, 681, 623,
	189, 325, 685, 620, 619, 253, 0, 293, 179, 197,
	141, 123, 135, 151, 178, 229, 262, 272, 611, 571,
	670, 599, 609, 158, 607, 265, 237, 315, 0, 643,
	243, 264, 200, 304, 255, 313, 314, 180, 705, 322,
	327, 285, 167, 0, 127, 0, 250, 162, 193, 622,
	657, 600, 155, 660, 647, 675, 284, 302, 142, 299,
	217, 223, 152, 154, 153, 136, 279, 301, 146, 156,
	289, 268, 294, 161, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 296, 312, 148, 276, 277, 328,
	263, 130, 310, 292, 215, 190, 191, 129, 0, 260,
	165, 175, 160, 232, 0, 174, 252, 307, 308, 159,
	330, 138, 321, 132, 139, 320, 226, 0, 225, 323,
	303, 311, 216, 208, 0, 131, 309, 214, 207, 195,
	170, 182, 248, 203, 249, 183, 221, 220, 222, 205,
	209, 0, 576, 0, 290, 318, 331, 144, 595, 278,
	300, 0, 0, 145, 173, 169, 247, 224, 140, 185,
	287, 194, 201, 259, 329, 236, 266, 149, 317, 286,
	593, 594, 591, 0, 592, 638, 639, 693, 694, 695,
	664, 587, 0, 677, 678, 0, 668, 683, 684, 659,
	703, 616, 617, 577, 580, 581, 582, 588, 630, 631,
	642, 645, 673, 672, 671, 674, 679, 699, 698, 700,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 641, 122, 133, 198, 704, 257, 172, 319, 573,
	164, 0, 0, 632, 634, 644, 661, 124, 125, 134,
	143, 150, 163, 168, 171, 177, 181, 184, 186, 187,
	188, 192, 206, 210, 211, 212, 213, 227, 228, 230,
	231, 234, 235, 238, 240, 241, 242, 244, 245, 246,
	251, 254, 256, 258, 261, 267, 269, 270, 271, 273,
	274, 275, 280, 281, 282, 283, 291, 295, 305, 306,
	316, 324, 326, 680, 687, 667, 298, 625, 690, 597,
	614, 702, 615, 618, 656, 583, 637, 233, 612, 584,
	0, 601, 574, 608, 575, 598, 627, 166, 596, 669,
	640, 689, 196, 652, 0, 157, 204, 202, 0, 0,
	0, 239, 297, 688, 633, 0, 696, 199, 0, 649,
	697, 288, 218, 0, 0, 629, 676, 635, 665, 624,
	658, 590, 648, 691, 613, 654, 692, 0, 0, 0,
	568, 0, 0, 0, 0, 0, 0, 0, 0, 147,
	0, 651, 686, 610, 653, 655, 572, 650, 0, 578,
	585, 701, 682, 604, 605, 606, 0, 0, 0, 0,
	0, 0, 0, 628, 636, 662, 621, 0, 0, 0,
	0, 0, 0, 1696, 0, 602, 0, 646, 0, 0,
	0, 586, 579, 0, 0, 626, 0, 0, 0, 589,
	126, 603, 663, 0, 570, 176, 219, 137, 666, 681,
	623, 189, 325, 685, 620, 619, 253, 0, 293, 179,
	197, 141, 123, 135, 151, 178, 229, 262, 272, 611,
	571, 670, 599, 609, 158, 607, 265, 237, 315, 0,
	643, 243, 264, 200, 304, 255, 313, 314, 180, 705,
	322, 327, 285, 167, 0, 127, 0, 250, 162, 193,
	622, 657, 600, 155, 660, 647, 675, 284, 302, 142,
	299, 217, 223, 152, 154, 153, 136, 279, 301, 146,
	156, 289, 268, 294, 161, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 296, 312, 148, 276, 277,
	328, 263, 130, 310, 292, 215, 190, 191, 129, 0,
	260, 165, 175, 160, 232, 0, 174, 252, 307, 308,
	159, 330, 138, 321, 132, 139, 320, 226, 0, 225,
	323, 303, 311, 216, 208, 0, 131, 309, 214, 207,
	195, 170, 182, 248, 203, 249, 183, 221, 220, 222,
	205, 209, 0, 576, 0, 290, 318, 331, 144, 595,
	278, 300, 0, 0, 145, 173, 169, 247, 224, 140,
	185, 287, 194, 201, 259, 329, 236, 266, 149, 317,
	286, 593, 594, 591, 0, 592, 638, 639, 693, 694,
	695, 664, 587, 0, 677, 678, 0, 668, 683, 684,
	659, 703, 616, 617, 577, 580, 581, 582, 588, 630,
	631, 642, 645, 673, 672, 671, 674, 679, 699, 698,
	700, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 641, 122, 133, 198, 704, 257, 172, 319,
	573, 164, 0, 0, 632, 634, 644, 661, 124, 125,
	134, 143, 150, 163, 168, 171, 177, 181, 184, 186,
	187, 188, 192, 206, 210, 211, 212, 213, 227, 228,
	230, 231, 234, 235, 238, 240, 241, 242, 244, 245,
	246, 251, 254, 256, 258, 261, 267, 269, 270, 271,
	273, 274, 275, 280, 281, 282, 283, 291, 295, 305,
	306, 316, 324, 326, 680, 687, 667, 298, 625, 690,
	597, 614, 702, 615, 618, 656, 583, 637, 233, 612,
	584, 0, 601, 574, 608, 575, 598, 627, 166, 596,
	669, 640, 689, 196, 652, 0, 157, 204, 202, 0,
	0, 0, 239, 297, 688, 633, 0, 696, 199, 0,
	649, 697, 288, 218, 0, 0, 629, 676, 635, 665,
	624, 658, 590, 648, 691, 613, 654, 692, 79, 0,
	0, 568, 0, 0, 0, 0, 0, 0, 0, 0,
	147, 0, 651, 686, 610, 653, 655, 572, 650, 0,
	578, 585, 701, 682, 604, 605, 606, 0, 0, 0,
	0, 0, 0, 0, 628, 636, 662, 621, 0, 0,
	0, 0, 0, 0, 0, 0, 602, 0, 646, 0,
	0, 0, 586, 579, 0, 0, 626, 0, 0, 0,
	589, 126, 603, 663, 0, 570, 176, 219, 137, 666,
	681, 623, 189, 325, 685, 620, 619, 253, 0, 293,
	179, 197, 141, 123, 135, 151, 178, 229, 262, 272,
	611, 571, 670, 599, 609, 158, 607, 265, 237, 315,
	0, 643, 243, 264, 200, 304, 255, 313, 314, 180,
	705, 322, 327, 285, 167, 0, 127, 0, 250, 162,
	193, 622, 657, 600, 155, 660, 647, 675, 284, 302,
	142, 299, 217, 223, 152, 154, 153, 136, 279, 301,
	146, 156, 289, 268, 294, 161, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 296, 312, 148, 276,
	277, 328, 263, 130, 310, 292, 215, 190, 191, 129,
	0, 260, 165, 175, 160, 232, 0, 174, 252, 307,
	308, 159, 330, 138, 321, 132, 139, 320, 226, 0,
	225, 323, 303, 311, 216, 208, 0, 131, 309, 214,
	207, 195, 170, 182, 248, 203, 249, 183, 221, 220,
	222, 205, 209, 0, 576, 0, 290, 318, 331, 144,
	595, 278, 300, 0, 0, 145, 173, 169, 247, 224,
	140, 185, 287, 194, 201, 259, 329, 236, 266, 149,
	317, 286, 593, 594, 591, 0, 592, 638, 639, 693,
	694, 695, 664, 587, 0, 677, 678, 0, 668, 683,
	684, 659, 703, 616, 617, 577, 580, 581, 582, 588,
	630, 631, 642, 645, 673, 672, 671, 674, 679, 699,
	698, 700, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 641, 122, 133, 198, 704, 257, 172,
	319, 573, 164, 0, 0, 632, 634, 644, 661, 124,
	125, 134, 143, 150, 163, 168, 171, 177, 181, 184,
	186, 187, 188, 192, 206, 210, 211, 212, 213, 227,
	228, 230, 231, 234, 235, 238, 240, 241, 242, 244,
	245, 246, 251, 254, 256, 258, 261, 267, 269, 270,
	271, 273, 274, 275, 280, 281, 282, 283, 291, 295,
	305, 306, 316, 324, 326, 680, 687, 667, 298, 625,
	690, 597, 614, 702, 615, 618, 656, 583, 637, 233,
	612, 584, 0, 601, 574, 608, 575, 598, 627, 166,
	596, 669, 640, 689, 196, 652, 0, 157, 204, 202,
	0, 0, 0, 239, 297, 688, 633, 0, 696, 199,
	0, 649, 697, 288, 218, 0, 0, 629, 676, 635,
	665, 624, 658, 590, 648, 691, 613, 654, 692, 0,
	0, 0, 120, 0, 0, 0, 0, 0, 0, 0,
	0, 147, 0, 651, 686, 610, 653, 655, 572, 650,
	0, 578, 585, 701, 682, 604, 605, 606, 0, 0,
	0, 0, 0, 0, 0, 628, 636, 662, 621, 0,
	0, 0, 0, 0, 0, 1295, 0, 602, 0, 646,
	0, 0, 0, 586, 579, 0, 0, 626, 0, 0,
	0, 589, 126, 603, 663, 0, 570, 176, 219, 137,
	666, 681, 623, 189, 325, 685, 620, 619, 253, 0,
	293, 179, 197, 141, 123, 135, 151, 178, 229, 262,
	272, 611, 571, 670, 599, 609, 158, 607, 265, 237,
	315, 0, 643, 243, 264, 200, 304, 255, 313, 314,
	180, 705, 322, 327, 285, 167, 0, 127, 0, 250,
	162, 193, 622, 657, 600, 155, 660, 647, 675, 284,
	302, 142, 299, 217, 223, 152, 154, 153, 136, 279,
	301, 146, 156, 289, 268, 294, 161, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 296, 312, 148,
	276, 277, 328, 263, 130, 310, 292, 215, 190, 191,
	129, 0, 260, 165, 175, 160, 232, 0, 174, 252,
	307, 308, 159, 330, 138, 321, 132, 139, 320, 226,
	0, 225, 323, 303, 311, 216, 208, 0, 131, 309,
	214, 207, 195, 170, 182, 248, 203, 249, 183, 221,
	220, 222, 205, 209, 0, 576, 0, 290, 318, 331,
	144, 595, 278, 300, 0, 0, 145, 173, 169, 247,
	224, 140, 185, 287, 194, 201, 259, 329, 236, 266,
	149, 317, 286, 593, 594, 591, 0, 592, 638, 639,
	693, 694, 695, 664, 587, 0, 677, 678, 0, 668,
	683, 684, 659, 703, 616, 617, 577, 580, 581, 582,
	588, 630, 631, 642, 645, 673, 672, 671, 674, 679,
	699, 698, 700, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 641, 122, 133, 198, 704, 257,
	172, 319, 573, 164, 0, 0, 632, 634, 644, 661,
	124, 125, 134, 143, 150, 163, 168, 171, 177, 181,
	184, 186, 187, 188, 192, 206, 210, 211, 212, 213,
	227, 228, 230, 231, 234, 235, 238, 240, 241, 242,
	244, 245, 246, 251, 254, 256, 258, 261, 267, 269,
	270, 271, 273, 274, 275, 280, 281, 282, 283, 291,
	295, 305, 306, 316, 324, 326, 680, 687, 667, 298,
	625, 690, 597, 614, 702, 615, 618, 656, 583, 637,
	233, 612, 584, 0, 601, 574, 608, 575, 598, 627,
	166, 596, 669, 640, 689, 196, 652, 0, 157, 204,
	202, 0, 0, 0, 239, 297, 688, 633, 0, 696,
	199, 0, 649, 697, 288, 218, 0, 0, 629, 676,
	635, 665, 624, 658, 590, 648, 691, 613, 654, 692,
	0, 0, 0, 438, 0, 0, 0, 0, 0, 0,
	0, 0, 147, 0, 651, 686, 610, 653, 655, 572,
	650, 0, 578, 585, 701, 682, 604, 605, 606, 0,
	0, 0, 0, 0, 0, 0, 628, 636, 662, 621,
	0, 0, 0, 0, 0, 0, 1160, 0, 602, 0,
	646, 0, 0, 0, 586, 579, 0, 0, 626, 0,
	0, 0, 589, 126, 603, 663, 0, 570, 176, 219,
	137, 666, 681, 623, 189, 325, 685, 620, 619, 253,
	0, 293, 179, 197, 141, 123, 135, 151, 178, 229,
	262, 272, 611, 571, 670, 599, 609, 158, 607, 265,
	237, 315, 0, 643, 243, 264, 200, 304, 255, 313,
	314, 180, 705, 322, 327, 285, 167, 0, 127, 0,
	250, 162, 193, 622, 657, 600, 155, 660, 647, 675,
	284, 302, 142, 299, 217, 223, 152, 154, 153, 136,
	279, 301, 146, 156, 289, 268, 294, 161, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 296, 312,
	148, 276, 277, 328, 263, 130, 310, 292, 215, 190,
	191, 129, 0, 260, 165, 175, 160, 232, 0, 174,
	252, 307, 308, 159, 330, 138, 321, 132, 139, 320,
	226, 0, 225, 323, 303, 311, 216, 208, 0, 131,
	309, 214, 207, 195, 170, 182, 248, 203, 249, 183,
	221, 220, 222, 205, 209, 0, 576, 0, 290, 318,
	331, 144, 595, 278, 300, 0, 0, 145, 173, 169,
	247, 224, 140, 185, 287, 194, 201, 259, 329, 236,
	266, 149, 317, 286, 593, 594, 591, 0, 592, 638,
	639, 693, 694, 695, 664, 587, 0, 677, 678, 0,
	668, 683, 684, 659, 703, 616, 617, 577, 580, 581,
	582, 588, 630, 631, 642, 645, 673, 672, 671, 674,
	679, 699, 698, 700, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 641, 122, 133, 198, 704,
	257, 172, 319, 573, 164, 0, 0, 632, 634, 644,
	661, 124, 125, 134, 143, 150, 163, 168, 171, 177,
	181, 184, 186, 187, 188, 192, 206, 210, 211, 212,
	213, 227, 228, 230, 231, 234, 235, 238, 240, 241,
	242, 244, 245, 246, 251, 254, 256, 258, 261, 267,
	269, 270, 271, 273, 274, 275, 280, 281, 282, 283,
	291, 295, 305, 306, 316, 324, 326, 680, 687, 667,
	298, 625, 690, 597, 614, 702, 615, 618, 656, 583,
	637, 233, 612, 584, 0, 601, 574, 608, 575, 598,
	627, 166, 596, 669, 640, 689, 196, 652, 0, 157,
	204, 202, 0, 0, 0, 239, 297, 688, 633, 0,
	696, 199, 0, 649, 697, 288, 218, 0, 0, 629,
	676, 635, 665, 624, 658, 590, 648, 691, 613, 654,
	692, 0, 0, 0, 568, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 0, 651, 686, 610, 653, 655,
	572, 650, 0, 578, 585, 701, 682, 604, 605, 606,
	0, 0, 0, 0, 0, 0, 0, 628, 636, 662,
	621, 0, 0, 0, 0, 0, 0, 0, 0, 602,
	0, 646, 0, 0, 0, 586, 579, 0, 0, 626,
	0, 0, 0, 589, 126, 603, 663, 0, 570, 176,
	219, 137, 666, 681, 623, 189, 325, 685, 620, 619,
	253, 0, 293, 179, 197, 141, 123, 135, 151, 178,
	229, 262, 272, 611, 571, 670, 599, 609, 158, 607,
	265, 237, 315, 0, 643, 243, 264, 200, 304, 255,
	313, 314, 180, 705, 322, 327, 285, 167, 0, 127,
	0, 250, 162, 193, 622, 657, 600, 155, 660, 647,
	675, 284, 302, 142, 299, 217, 223, 152, 154, 153,
	136, 279, 301, 146, 156, 289, 268, 294, 161, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 128, 296,
	312, 148, 276, 277, 328, 263, 130, 310, 292, 215,
	190, 191, 129, 0, 260, 165, 175, 160, 232, 0,
	174, 252, 307, 308, 159, 330, 138, 321, 132, 139,
	320, 226, 0, 225, 323, 303, 311, 216, 208, 0,
	131, 309, 214, 207, 195, 170, 182, 248, 203, 249,
	183, 221, 220, 222, 205, 209, 0, 576, 0, 290,
	318, 331, 144, 595, 278, 300, 0, 0, 145, 173,
	169, 247, 224, 140, 185, 287, 194, 201, 259, 329,
	236, 266, 149, 317, 286, 593, 594, 591, 0, 592,
	638, 639, 693, 694, 695, 664, 587, 0, 677, 678,
	0, 668, 683, 684, 659, 703, 616, 617, 577, 580,
	581, 582, 588, 630, 631, 642, 645, 673, 672, 671,
	674, 679, 699, 698, 700, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 641, 122, 133, 198,
	704, 257, 172, 319, 573, 164, 0, 0, 632, 634,
	644, 661, 124, 125, 134, 143, 150, 163, 168, 171,
	177, 181, 184, 186, 187, 188, 192, 206, 210, 211,
	212, 213, 227, 228, 230, 231, 234, 235, 238, 240,
	241, 242, 244, 245, 246, 251, 254, 256, 258, 261,
	267, 269, 270, 271, 273, 274, 275, 280, 281, 282,
	283, 291, 295, 305, 306, 316, 324, 326, 680, 687,
	667, 298, 625, 690, 597, 614, 702, 615, 618, 656,
	583, 637, 233, 612, 584, 0, 601, 574, 608, 575,
	598, 627, 166, 596, 669, 640, 689, 196, 652, 0,
	157, 204, 202, 0, 0, 0, 239, 297, 688, 633,
	0, 696, 199, 0, 649, 697, 288, 218, 0, 0,
	629, 676, 635, 665, 624, 658, 590, 648, 691, 613,
	654, 692, 0, 0, 0, 438, 0, 0, 0, 0,
	0, 0, 0, 0, 147, 0, 651, 686, 610, 653,
	655, 572, 650, 0, 578, 585, 701, 682, 604, 605,
	606, 0, 0, 0, 0, 0, 0, 0, 628, 636,
	662, 621, 0, 0, 0, 0, 0, 0, 0, 0,
	602, 0, 646, 0, 0, 0, 586, 579, 0, 0,
	626, 0, 0, 0, 589, 126, 603, 663, 0, 570,
	176, 219, 137, 666, 681, 623, 189, 325, 685, 620,
	619, 253, 0, 293, 179, 197, 141, 123, 135, 151,
	178, 229, 262, 272, 611, 571, 670, 599, 609, 158,
	607, 265, 237, 315, 0, 643, 243, 264, 200, 304,
	255, 313, 314, 180, 705, 322, 327, 285, 167, 0,
	127, 0, 250, 162, 193, 622, 657, 600, 155, 660,
	647, 675, 284, 302, 142, 299, 217, 223, 152, 154,
	153, 136, 279, 301, 146, 156, 289, 268, 294, 161,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 128,
	296, 312, 148, 276, 277, 328, 263, 130, 310, 292,
	215, 190, 191, 129, 0, 260, 165, 175, 160, 232,
	0, 174, 252, 307, 308, 159, 330, 138, 321, 132,
	139, 320, 226, 0, 225, 323, 303, 311, 216, 208,
	0, 131, 309, 214, 207, 195, 170, 182, 248, 203,
	249, 183, 221, 220, 222, 205, 209, 0, 576, 0,
	290, 318, 331, 144, 595, 278, 300, 0, 0, 145,
	173, 169, 247, 224, 140, 185, 287, 194, 201, 259,
	329, 236, 266, 149, 317, 286, 593, 594, 591, 0,
	592, 638, 639, 693, 694, 695, 664, 587, 0, 677,
	678, 0, 668, 683, 684, 659, 703, 616, 617, 577,
	580, 581, 582, 588, 630, 631, 642, 645, 673, 672,
	671, 674, 679, 699, 698, 700, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 641, 122, 133,
	198, 704, 257, 172, 319, 573, 164, 0, 0, 632,
	634, 644, 661, 124, 125, 134, 143, 150, 163, 168,
	171, 177, 181, 184, 186, 187, 188, 192, 206, 210,
	211, 212, 213, 227, 228, 230, 231, 234, 235, 238,
	240, 241, 242, 244, 245, 246, 251, 254, 256, 258,
	261, 267, 269, 270, 271, 273, 274, 275, 280, 281,
	282, 283, 291, 295, 305, 306, 316, 324, 326, 680,
	687, 667, 298, 625, 690, 597, 614, 702, 615, 618,
	656, 583, 637, 233, 612, 584, 0, 601, 574, 608,
	575, 598, 627, 166, 596, 669, 640, 689, 196, 652,
	0, 157, 204, 202, 0, 0, 0, 239, 297, 1327,
	1331, 0, 696, 199, 0, 649, 697, 288, 218, 0,
	0, 629, 676, 635, 665, 624, 658, 590, 648, 691,
	613, 654, 692, 0, 0, 0, 568, 0, 0, 0,
	0, 0, 0, 0, 0, 147, 0, 651, 686, 610,
	653, 655, 572, 650, 0, 578, 585, 701, 682, 604,
	605, 606, 0, 0, 0, 0, 0, 0, 0, 628,
	636, 662, 621, 0, 0, 0, 0, 0, 0, 0,
	0, 602, 0, 646, 0, 0, 0, 586, 579, 0,
	0, 626, 0, 0, 0, 589, 126, 603, 663, 0,
	570, 176, 219, 137, 666, 681, 1330, 189, 325, 685,
	620, 619, 1325, 0, 1326, 179, 197, 567, 123, 135,
	1323, 1329, 229, 262, 272, 611, 571, 670, 599, 609,
	158, 607, 265, 237, 315, 0, 643, 243, 264, 200,
	304, 255, 313, 314, 180, 705, 322, 327, 285, 167,
	0, 127, 0, 250, 162, 193, 622, 657, 600, 155,
	660, 647, 675, 284, 302, 142, 299, 217, 223, 152,
	154, 153, 136, 279, 301, 146, 156, 289, 268, 294,
	161, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	128, 296, 312, 148, 276, 277, 328, 263, 130, 310,
	292, 215, 190, 191, 129, 0, 260, 165, 175, 160,
	232, 0, 174, 252, 307, 308, 159, 330, 138, 321,
	132, 139, 320, 226, 0, 225, 323, 303, 311, 216,
	208, 0, 131, 309, 214, 207, 195, 170, 182, 248,
	203, 249, 183, 221, 220, 222, 205, 209, 0, 576,
	0, 290, 318, 331, 144, 595, 278, 300, 0, 0,
	145, 173, 169, 247, 224, 140, 185, 287, 194, 201,
	259, 329, 236, 266, 149, 317, 286, 593, 594, 591,
	0, 592, 638, 639, 693, 694, 695, 664, 587, 0,
	677, 678, 0, 668, 683, 684, 659, 703, 616, 617,
	577, 580, 581, 582, 588, 630, 631, 642, 645, 673,
	672, 671, 674, 679, 699, 698, 700, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 641, 122,
	133, 198, 704, 257, 172, 319, 573, 164, 0, 0,
	632, 634, 644, 661, 124, 125, 134, 143, 150, 163,
	168, 171, 177, 181, 184, 186, 187, 188, 192, 206,
	210, 211, 212, 213, 227, 228, 230, 231, 234, 235,
	238, 240, 241, 242, 244, 245, 246, 251, 254, 256,
	258, 261, 267, 269, 270, 271, 273, 274, 275, 280,
	281, 282, 283, 291, 295, 305, 306, 316, 324, 326,
	680, 687, 667, 298, 625, 690, 597, 614, 702, 615,
	618, 656, 583, 637, 233, 612, 584, 0, 601, 574,
	608, 575, 598, 627, 166, 596, 669, 640, 689, 196,
	652, 0, 157, 204, 202, 0, 0, 0, 239, 297,
	688, 633, 0, 696, 199, 0, 649, 697, 288, 218,
	0, 0, 629, 676, 635, 665, 624, 658, 590, 648,
	691, 613, 654, 692, 0, 0, 0, 120, 0, 0,
	0, 0, 0, 0, 0, 0, 147, 0, 651, 686,
	610, 653, 655, 572, 650, 0, 578, 585, 701, 682,
	604, 605, 606, 0, 0, 0, 0, 0, 0, 0,
	628, 636, 662, 621, 0, 0, 0, 0, 0, 0,
	0, 0, 602, 0, 646, 0, 0, 0, 586, 579,
	0, 0, 626, 0, 0, 0, 589, 126, 603, 663,
	0, 570, 176, 219, 137, 666, 681, 623, 189, 325,
	685, 620, 619, 253, 0, 293, 179, 197, 141, 123,
	135, 151, 178, 229, 262, 272, 611, 571, 670, 599,
	609, 158, 607, 265, 237, 315, 0, 643, 243, 264,
	200, 304, 255, 313, 314, 180, 705, 322, 327, 285,
	167, 0, 127, 0, 250, 162, 193, 622, 657, 600,
	155, 660, 647, 675, 284, 302, 142, 299, 217, 223,
	152, 154, 153, 136, 279, 301, 146, 156, 289, 268,
	294, 161, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 128, 296, 312, 148, 276, 277, 328, 263, 130,
	310, 292, 215, 190, 191, 129, 0, 260, 165, 175,
	160, 232, 0, 174, 252, 307, 308, 159, 330, 138,
	321, 132, 139, 320, 226, 0, 225, 323, 303, 311,
	216, 208, 0, 131, 309, 214, 207, 195, 170, 182,
	248, 203, 249, 183, 221, 220, 222, 205, 209, 0,
	576, 0, 290, 318, 331, 144, 595, 278, 300, 0,
	0, 145, 173, 169, 247, 224, 140, 185, 287, 194,
	201, 259, 329, 236, 266, 149, 317, 286, 593, 594,
	591, 0, 592, 638, 639, 693, 694, 695, 664, 587,
	0, 677, 678, 0, 668, 683, 684, 659, 703, 616,
	617, 577, 580, 581, 582, 588, 630, 631, 642, 645,
	673, 672, 671, 674, 679, 699, 698, 700, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 641,
	122, 133, 198, 704, 257, 172, 319, 573, 164, 0,
	0, 632, 634, 644, 661, 124, 125, 134, 143, 150,
	163, 168, 171, 177, 181, 184, 186, 187, 188, 192,
	206, 210, 211, 212, 213, 227, 228, 230, 231, 234,
	235, 238, 240, 241, 242, 244, 245, 246, 251, 254,
	256, 258, 261, 267, 269, 270, 271, 273, 274, 275,
	280, 281, 282, 283, 291, 295, 305, 306, 316, 324,
	326, 680, 687, 667, 298, 625, 690, 597, 614, 702,
	615, 618, 656, 583, 637, 233, 612, 584, 0, 601,
	574, 608, 575, 598, 627, 166, 596, 669, 640, 689,
	196, 652, 0, 157, 204, 202, 0, 0, 0, 239,
	297, 688, 633, 0, 696, 199, 0, 649, 697, 288,
	218, 0, 0, 629, 676, 635, 665, 624, 658, 590,
	648, 691, 613, 654, 692, 0, 0, 0, 568, 0,
	0, 0, 0, 0, 0, 0, 0, 147, 0, 651,
	686, 610, 653, 655, 572, 650, 0, 578, 585, 701,
	682, 604, 605, 606, 0, 0, 0, 0, 0, 0,
	0, 628, 636, 662, 621, 0, 0, 0, 0, 0,
	0, 0, 0, 602, 0, 646, 0, 0, 0, 586,
	579, 0, 0, 626, 0, 0, 0, 589, 126, 603,
	663, 0, 570, 176, 219, 137, 666, 681, 623, 189,
	325, 685, 620, 619, 253, 0, 293, 179, 197, 567,
	123, 135, 563, 178, 229, 262, 272, 611, 571, 670,
	599, 609, 158, 607, 265, 237, 315, 0, 643, 243,
	264, 200, 304, 255, 313, 314, 180, 705, 322, 327,
	285, 167, 0, 127, 0, 250, 162, 193, 622, 657,
	600, 155, 660, 647, 675, 284, 302, 142, 299, 217,
	223, 152, 154, 153, 136, 279, 301, 146, 156, 289,
	268, 294, 161, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 128, 296, 312, 148, 276, 277, 328, 263,
	130, 310, 292, 215, 190, 191, 129, 0, 260, 165,
	175, 160, 232, 0, 174, 252, 307, 308, 159, 330,
	138, 321, 132, 139, 320, 226, 0, 225, 323, 303,
	311, 216, 208, 0, 131, 309, 214, 207, 195, 170,
	182, 248, 203, 249, 183, 221, 220, 222, 205, 209,
	0, 576, 0, 290, 318, 331, 144, 595, 278, 300,
	0, 0, 145, 173, 169, 247, 224, 140, 185, 287,
	194, 201, 259, 329, 236, 266, 149, 317, 286, 593,
	594, 591, 0, 592, 638, 639, 693, 694, 695, 664,
	587, 0, 677, 678, 0, 668, 683, 684, 659, 703,
	616, 617, 577, 580, 581, 582, 588, 630, 631, 642,
	645, 673, 672, 671, 674, 679, 699, 698, 700, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	641, 122, 133, 198, 704, 257, 172, 319, 573, 164,
	0, 0, 632, 634, 644, 661, 124, 125, 134, 143,
	150, 163, 168, 171, 177, 181, 184, 186, 187, 188,
	192, 206, 210, 211, 212, 213, 227, 228, 230, 231,
	234, 235, 238, 240, 241, 242, 244, 245, 246, 251,
	254, 256, 258, 261, 267, 269, 270, 271, 273, 274,
	275, 280, 281, 282, 283, 291, 295, 305, 306, 316,
	324, 326, 680, 298, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 233, 0, 0, 0, 0, 0,
	440, 0, 0, 0, 166, 437, 0, 0, 0, 196,
	0, 0, 157, 204, 202, 0, 0, 0, 239, 297,
	0, 0, 0, 513, 199, 0, 0, 418, 288, 218,
	0, 0, 0, 0, 502, 503, 0, 0, 0, 0,
	0, 0, 1305, 0, 79, 0, 0, 438, 462, 461,
	464, 465, 466, 467, 0, 0, 147, 463, 468, 497,
	498, 1306, 0, 0, 435, 453, 0, 512, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 450, 451,
	0, 0, 0, 0, 527, 0, 452, 0, 0, 447,
	448, 449, 454, 0, 0, 0, 0, 126, 0, 0,
	0, 0, 176, 219, 137, 504, 0, 0, 189, 325,
	0, 0, 525, 253, 0, 293, 179, 197, 141, 123,
	135, 151, 178, 229, 262, 272, 510, 0, 0, 0,
	0, 158, 0, 265, 237, 315, 0, 0, 243, 264,
	200, 304, 255, 313, 314, 180, 412, 322, 327, 285,
	167, 0, 127, 0, 250, 162, 193, 0, 0, 0,
	155, 0, 0, 0, 284, 302, 142, 299, 217, 223,
	152, 154, 153, 136, 279, 301, 146, 156, 289, 268,
	294, 161, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 128, 296, 312, 148, 276, 277, 328, 263, 130,
	310, 292, 215, 190, 191, 129, 0, 260, 165, 175,
	160, 232, 0, 174, 252, 307, 308, 159, 330, 138,
	321, 132, 139, 320, 226, 0, 225, 323, 303, 311,
	216, 208, 0, 131, 309, 214, 207, 195, 170, 182,
	248, 203, 249, 183, 221, 220, 222, 205, 209, 0,
	0, 0, 290, 318, 331, 144, 0, 278, 300, 0,
	0, 145, 173, 169, 247, 224, 140, 185, 287, 194,
	201, 259, 329, 236, 266, 149, 317, 286, 514, 526,
	520, 522, 521, 518, 519, 517, 516, 515, 528, 505,
	506, 507, 508, 511, 0, 523, 524, 0, 0, 0,
	0, 469, 470, 471, 472, 473, 477, 478, 482, 483,
	491, 490, 489, 492, 493, 495, 494, 496, 474, 475,
	476, 479, 480, 481, 484, 485, 488, 486, 487, 509,
	122, 133, 198, 0, 257, 172, 319, 0, 164, 0,
	0, 0, 0, 0, 0, 124, 125, 134, 143, 150,
	163, 168, 171, 177, 181, 184, 186, 187, 188, 192,
	206, 210, 211, 212, 213, 227, 228, 230, 231, 234,
	235, 238, 240, 241, 242, 244, 245, 246, 251, 254,
	256, 258, 261, 267, 269, 270, 271, 273, 274, 275,
	280, 281, 282, 283, 291, 295, 305, 306, 316, 324,
	326, 34, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 233, 0, 0, 0, 0, 0, 440,
	0, 0, 0, 166, 437, 0, 0, 0, 196, 0,
	0, 157, 204, 202, 0, 0, 0, 239, 297, 0,
	0, 0, 513, 199, 0, 0, 418, 288, 218, 0,
	0, 0, 0, 502, 503, 0, 0, 0, 0, 0,
	0, 0, 0, 79, 0, 0, 438, 462, 461, 464,
	465, 466, 467, 0, 0, 147, 463, 468, 497, 498,
	0, 0, 0, 435, 453, 0, 512, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 450, 451, 0,
	0, 0, 0, 527, 0, 452, 0, 0, 447, 448,
	449, 454, 0, 0, 0, 0, 126, 0, 0, 0,
	0, 176, 219, 137, 504, 0, 0, 189, 325, 0,
	0, 525, 253, 0, 293, 179, 197, 141, 123, 135,
	151, 178, 229, 262, 272, 510, 0, 0, 0, 0,
	158, 0, 265, 237, 315, 0, 0, 243, 264, 200,
	304, 255, 313, 314, 180, 412, 322, 327, 285, 167,
	0, 127, 0, 250, 162, 193, 0, 0, 0, 155,
	0, 0, 0, 284, 302, 142, 299, 217, 223, 152,
	154, 153, 136, 279, 301, 146, 156, 289, 268, 294,
	161, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	128, 296, 312, 148, 276, 277, 328, 263, 130, 310,
	292, 215, 190, 191, 129, 0, 260, 165, 175, 160,
	232, 0, 174, 252, 307, 308, 159, 330, 138, 321,
	132, 139, 320, 226, 0, 225, 323, 303, 311, 216,
	208, 0, 131, 309, 214, 207, 195, 170, 182, 248,
	203, 249, 183, 221, 220, 222, 205, 209, 0, 0,
	0, 290, 318, 331, 144, 0, 278, 300, 0, 0,
	145, 173, 169, 247, 224, 140, 185, 287, 194, 201,
	259, 329, 236, 266, 149, 317, 286, 514, 526, 520,
	522, 521, 518, 519, 517, 516, 515, 528, 505, 506,
	507, 508, 511, 0, 523, 524, 0, 0, 0, 0,
	469, 470, 471, 472, 473, 477, 478, 482, 483, 491,
	490, 489, 492, 493, 495, 494, 496, 474, 475, 476,
	479, 480, 481, 484, 485, 488, 486, 487, 509, 122,
	133, 198, 77, 257, 172, 319, 0, 164, 0, 0,
	0, 0, 0, 0, 124, 125, 134, 143, 150, 163,
	168, 171, 177, 181, 184, 186, 187, 188, 192, 206,
	210, 211, 212, 213, 227, 228, 230, 231, 234, 235,
	238, 240, 241, 242, 244, 245, 246, 251, 254, 256,
	258, 261, 267, 269, 270, 271, 273, 274, 275, 280,
	281, 282, 283, 291, 295, 305, 306, 316, 324, 326,
	298, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 0, 0, 0, 0, 440, 0, 0,
	0, 166, 437, 0, 0, 0, 196, 0, 0, 157,
	204, 202, 0, 0, 0, 239, 297, 0, 0, 0,
	513, 199, 0, 0, 418, 288, 218, 0, 0, 0,
	0, 502, 503, 0, 0, 0, 0, 0, 0, 0,
	0, 79, 0, 0, 438, 462, 461, 464, 465, 466,
	467, 0, 0, 147, 463, 468, 497, 498, 0, 0,
	0, 435, 453, 0, 512, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 450, 451, 431, 0, 0,
	0, 527, 0, 452, 0, 0, 447, 448, 449, 454,
	0, 0, 0, 0, 126, 0, 0, 0, 0, 176,
	219, 137, 504, 0, 0, 189, 325, 0, 0, 525,
	253, 0, 293, 179, 197, 141, 123, 135, 151, 178,
	229, 262, 272, 510, 0, 0, 0, 0, 158, 0,
	265, 237, 315, 0, 0, 243, 264, 200, 304, 255,
	313, 314, 180, 412, 322, 327, 285, 167, 0, 127,
	0, 250, 162, 193, 0, 0, 0, 155, 0, 0,
	0, 284, 302, 142, 299, 217, 223, 152, 154, 153,
	136, 279, 301, 146, 156, 289, 268, 294, 161, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 128, 296,
	312, 148, 276, 277, 328, 263, 130, 310, 292, 215,
	190, 191, 129, 0, 260, 165, 175, 160, 232, 0,
	174, 252, 307, 308, 159, 330, 138, 321, 132, 139,
	320, 226, 0, 225, 323, 303, 311, 216, 208, 0,
	131, 309, 214, 207, 195, 170, 182, 248, 203, 249,
	183, 221, 220, 222, 205, 209, 0, 0, 0, 290,
	318, 331, 144, 0, 278, 300, 0, 0, 145, 173,
	169, 247, 224, 140, 185, 287, 194, 201, 259, 329,
	236, 266, 149, 317, 286, 514, 526, 520, 522, 521,
	518, 519, 517, 516, 515, 528, 505, 506, 507, 508,
	511, 0, 523, 524, 0, 0, 0, 0, 469, 470,
	471, 472, 473, 477, 478, 482, 483, 491, 490, 489,
	492, 493, 495, 494, 496, 474, 475, 476, 479, 480,
	481, 484, 485, 488, 486, 487, 509, 122, 133, 198,
	0, 257, 172, 319, 0, 164, 0, 0, 0, 0,
	0, 0, 124, 125, 134, 143, 150, 163, 168, 171,
	177, 181, 184, 186, 187, 188, 192, 206, 210, 211,
	212, 213, 227, 228, 230, 231, 234, 235, 238, 240,
	241, 242, 244, 245, 246, 251, 254, 256, 258, 261,
	267, 269, 270, 271, 273, 274, 275, 280, 281, 282,
	283, 291, 295, 305, 306, 316, 324, 326, 298, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 233,
	0, 0, 0, 0, 0, 440, 0, 0, 0, 166,
	437, 0, 0, 0, 196, 0, 0, 157, 204, 202,
	0, 0, 0, 239, 297, 0, 0, 0, 513, 199,
	0, 0, 418, 288, 218, 0, 0, 0, 0, 502,
	503, 0, 0, 0, 0, 0, 0, 0, 0, 79,
	0, 816, 438, 462, 461, 464, 465, 466, 467, 0,
	0, 147, 463, 468, 497, 498, 0, 0, 0, 435,
	453, 0, 512, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 450, 451, 0, 0, 0, 0, 527,
	0, 452, 0, 0, 447, 448, 449, 454, 0, 0,
	0, 0, 126, 0, 0, 0, 0, 176, 219, 137,
	504, 0, 0, 189, 325, 0, 0, 525, 253, 0,
	293, 179, 197, 141, 123, 135, 151, 178, 229, 262,
	272, 510, 0, 0, 0, 0, 158, 0, 265, 237,
	315, 0, 0, 243, 264, 200, 304, 255, 313, 314,
	180, 412, 322, 327, 285, 167, 0, 127, 0, 250,
	162, 193, 0, 0, 0, 155, 0, 0, 0, 284,
	302, 142, 299, 217, 223, 152, 154, 153, 136, 279,
	301, 146, 156, 289, 268, 294, 161, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 296, 312, 148,
	276, 277, 328, 263, 130, 310, 292, 215, 190, 191,
	129, 0, 260, 165, 175, 160, 232, 0, 174, 252,
	307, 308, 159, 330, 138, 321, 132, 139, 320, 226,
	0, 225, 323, 303, 311, 216, 208, 0, 131, 309,
	214, 207, 195, 170, 182, 248, 203, 249, 183, 221,
	220, 222, 205, 209, 0, 0, 0, 290, 318, 331,
	144, 0, 278, 300, 0, 0, 145, 173, 169, 247,
	224, 140, 185, 287, 194, 201, 259, 329, 236, 266,
	149, 317, 286, 514, 526, 520, 522, 521, 518, 519,
	517, 516, 515, 528, 505, 506, 507, 508, 511, 0,
	523, 524, 0, 0, 0, 0, 469, 470, 471, 472,
	473, 477, 478, 482, 483, 491, 490, 489, 492, 493,
	495, 494, 496, 474, 475, 476, 479, 480, 481, 484,
	485, 488, 486, 487, 509, 122, 133, 198, 0, 257,
	172, 319, 0, 164, 0, 0, 0, 0, 0, 0,
	124, 125, 134, 143, 150, 163, 168, 171, 177, 181,
	184, 186, 187, 188, 192, 206, 210, 211, 212, 213,
	227, 228, 230, 231, 234, 235, 238, 240, 241, 242,
	244, 245, 246, 251, 254, 256, 258, 261, 267, 269,
	270, 271, 273, 274, 275, 280, 281, 282, 283, 291,
	295, 305, 306, 316, 324, 326, 298, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 233, 0, 0,
	0, 0, 0, 440, 0, 0, 0, 166, 437, 0,
	0, 0, 196, 0, 0, 157, 204, 202, 0, 0,
	0, 239, 297, 0, 0, 0, 513, 199, 0, 0,
	418, 288, 218, 0, 0, 0, 0, 502, 503, 0,
	0, 0, 0, 0, 0, 0, 0, 79, 0, 0,
	438, 462, 461, 464, 465, 466, 467, 0, 0, 147,
	463, 468, 497, 498, 0, 0, 0, 435, 453, 0,
	512, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 450, 451, 1198, 0, 0, 0, 527, 0, 452,
	0, 0, 447, 448, 449, 454, 0, 0, 0, 0,
	126, 0, 0, 0, 0, 176, 219, 137, 504, 0,
	0, 189, 325, 0, 0, 525, 253, 0, 293, 179,
	197, 141, 123, 135, 151, 178, 229, 262, 272, 510,
	0, 0, 0, 0, 158, 0, 265, 237, 315, 0,
	0, 243, 264, 200, 304, 255, 313, 314, 180, 412,
	322, 327, 285, 167, 0, 127, 0, 250, 162, 193,
	0, 0, 0, 155, 0, 0, 0, 284, 302, 142,
	299, 217, 223, 152, 154, 153, 136, 279, 301, 146,
	156, 289, 268, 294, 161, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 296, 312, 148, 276, 277,
	328, 263, 130, 310, 292, 215, 190, 191, 129, 0,
	260, 165, 175, 160, 232, 0, 174, 252, 307, 308,
	159, 330, 138, 321, 132, 139, 320, 226, 0, 225,
	323, 303, 311, 216, 208, 0, 131, 309, 214, 207,
	195, 170, 182, 248, 203, 249, 183, 221, 220, 222,
	205, 209, 0, 0, 0, 290, 318, 331, 144, 0,
	278, 300, 0, 0, 145, 173, 169, 247, 224, 140,
	185, 287, 194, 201, 259, 329, 236, 266, 149, 317,
	286, 514, 526, 520, 522, 521, 518, 519, 517, 516,
	515, 528, 505, 506, 507, 508, 511, 0, 523, 524,
	0, 0, 0, 0, 469, 470, 471, 472, 473, 477,
	478, 482, 483, 491, 490, 489, 492, 493, 495, 494,
	496, 474, 475, 476, 479, 480, 481, 484, 485, 488,
	486, 487, 509, 122, 133, 198, 0, 257, 172, 319,
	0, 164, 0, 0, 0, 0, 0, 0, 124, 125,
	134, 143, 150, 163, 168, 171, 177, 181, 184, 186,
	187, 188, 192, 206, 210, 211, 212, 213, 227, 228,
	230, 231, 234, 235, 238, 240, 241, 242, 244, 245,
	246, 251, 254, 256, 258, 261, 267, 269, 270, 271,
	273, 274, 275, 280, 281, 282, 283, 291, 295, 305,
	306, 316, 324, 326, 298, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 233, 0, 0, 0, 0,
	0, 440, 0, 0, 0, 166, 437, 0, 0, 0,
	196, 0, 0, 157, 204, 202, 0, 0, 0, 239,
	297, 0, 0, 0, 513, 199, 0, 0, 418, 288,
	218, 0, 0, 0, 0, 502, 503, 0, 0, 0,
	0, 0, 0, 0, 0, 79, 0, 0, 438, 462,
	1241, 464, 465, 466, 467, 0, 0, 147, 463, 468,
	497, 498, 0, 0, 0, 435, 453, 0, 512, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 450,
	451, 1198, 0, 0, 0, 527, 0, 452, 0, 0,
	447, 448, 449, 454, 0, 0, 0, 0, 126, 0,
	0, 0, 0, 176, 219, 137, 504, 0, 0, 189,
	325, 0, 0, 525, 253, 0, 293, 179, 197, 141,
	123, 135, 151, 178, 229, 262, 272, 510, 0, 0,
	0, 0, 158, 0, 265, 237, 315, 0, 0, 243,
	264, 200, 304, 255, 313, 314, 180, 412, 322, 327,
	285, 167, 0, 127, 0, 250, 162, 193, 0, 0,
	0, 155, 0, 0, 0, 284, 302, 142, 299, 217,
	223, 152, 154, 153, 136, 279, 301, 146, 156, 289,
	268, 294, 161, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 128, 296, 312, 148, 276, 277, 328, 263,
	130, 310, 292, 215, 190, 191, 129, 0, 260, 165,
	175, 160, 232, 0, 174, 252, 307, 308, 159, 330,
	138, 321, 132, 139, 320, 226, 0, 225, 323, 303,
	311, 216, 208, 0, 131, 309, 214, 207, 195, 170,
	182, 248, 203, 249, 183, 221, 220, 222, 205, 209,
	0, 0, 0, 290, 318, 331, 144, 0, 278, 300,
	0, 0, 145, 173, 169, 247, 224, 140, 185, 287,
	194, 201, 259, 329, 236, 266, 149, 317, 286, 514,
	526, 520, 522, 521, 518, 519, 517, 516, 515, 528,
	505, 506, 507, 508, 511, 0, 523, 524, 0, 0,
	0, 0, 469, 470, 471, 472, 473, 477, 478, 482,
	483, 491, 490, 489, 492, 493, 495, 494, 496, 474,
	475, 476, 479, 480, 481, 484, 485, 488, 486, 487,
	509, 122, 133, 198, 0, 257, 172, 319, 0, 164,
	0, 0, 0, 0, 0, 0, 124, 125, 134, 143,
	150, 163, 168, 171, 177, 181, 184, 186, 187, 188,
	192, 206, 210, 211, 212, 213, 227, 228, 230, 231,
	234, 235, 238, 240, 241, 242, 244, 245, 246, 251,
	254, 256, 258, 261, 267, 269, 270, 271, 273, 274,
	275, 280, 281, 282, 283, 291, 295, 305, 306, 316,
	324, 326, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 233, 0, 0, 0, 0, 0, 440,
	0, 0, 0, 166, 437, 0, 0, 0, 196, 0,
	0, 157, 204, 202, 0, 0, 0, 239, 297, 0,
	0, 0, 513, 199, 0, 0, 418, 288, 218, 0,
	0, 0, 0, 502, 503, 0, 0, 0, 0, 0,
	0, 0, 0, 79, 0, 0, 438, 462, 1238, 464,
	465, 466, 467, 0, 0, 147, 463, 468, 497, 498,
	0, 0, 0, 435, 453, 0, 512, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 450, 451, 1198,
	0, 0, 0, 527, 0, 452, 0, 0, 447, 448,
	449, 454, 0, 0, 0, 0, 126, 0, 0, 0,
	0, 176, 219, 137, 504, 0, 0, 189, 325, 0,
	0, 525, 253, 0, 293, 179, 197, 141, 123, 135,
	151, 178, 229, 262, 272, 510, 0, 0, 0, 0,
	158, 0, 265, 237, 315, 0, 0, 243, 264, 200,
	304, 255, 313, 314, 180, 412, 322, 327, 285, 167,
	0, 127, 0, 250, 162, 193, 0, 0, 0, 155,
	0, 0, 0, 284, 302, 142, 299, 217, 223, 152,
	154, 153, 136, 279, 301, 146, 156, 289, 268, 294,
	161, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	128, 296, 312, 148, 276, 277, 328, 263, 130, 310,
	292, 215, 190, 191, 129, 0, 260, 165, 175, 160,
	232, 0, 174, 252, 307, 308, 159, 330, 138, 321,
	132, 139, 320, 226, 0, 225, 323, 303, 311, 216,
	208, 0, 131, 309, 214, 207, 195, 170, 182, 248,
	203, 249, 183, 221, 220, 222, 205, 209, 0, 0,
	0, 290, 318, 331, 144, 0, 278, 300, 0, 0,
	145, 173, 169, 247, 224, 140, 185, 287, 194, 201,
	259, 329, 236, 266, 149, 317, 286, 514, 526, 520,
	522, 521, 518, 519, 517, 516, 515, 528, 505, 506,
	507, 508, 511, 0, 523, 524, 0, 0, 0, 0,
	469, 470, 471, 472, 473, 477, 478, 482, 483, 491,
	490, 489, 492, 493, 495, 494, 496, 474, 475, 476,
	479, 480, 481, 484, 485, 488, 486, 487, 509, 122,
	133, 198, 0, 257, 172, 319, 0, 164, 0, 0,
	0, 0, 0, 0, 124, 125, 134, 143, 150, 163,
	168, 171, 177, 181, 184, 186, 187, 188, 192, 206,
	210, 211, 212, 213, 227, 228, 230, 231, 234, 235,
	238, 240, 241, 242, 244, 245, 246, 251, 254, 256,
	258, 261, 267, 269, 270, 271, 273, 274, 275, 280,
	281, 282, 283, 291, 295, 305, 306, 316, 324, 326,
	298, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 0, 0, 0, 0, 440, 0, 0,
	0, 166, 437, 0, 0, 0, 196, 0, 0, 157,
	204, 202, 0, 0, 0, 239, 297, 0, 0, 0,
	513, 199, 0, 0, 418, 288, 218, 0, 0, 0,
	0, 502, 503, 0, 0, 0, 0, 0, 0, 0,
	0, 79, 0, 1117, 438, 462, 461, 464, 465, 466,
	467, 0, 0, 147, 463, 468, 497, 498, 0, 0,
	0, 435, 453, 0, 512, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 450, 451, 0, 0, 0,
	0, 527, 0, 452, 0, 0, 447, 448, 449, 454,
	0, 0, 0, 0, 126, 0, 0, 0, 0, 176,
	219, 137, 504, 0, 0, 189, 325, 0, 0, 525,
	253, 0, 293, 179, 197, 141, 123, 135, 151, 178,
	229, 262, 272, 510, 0, 0, 0, 0, 158, 0,
	265, 237, 315, 0, 0, 243, 264, 200, 304, 255,
	313, 314, 180, 412, 322, 327, 285, 167, 0, 127,
	0, 250, 162, 193, 0, 0, 0, 155, 0, 0,
	0, 284, 302, 142, 299, 217, 223, 152, 154, 153,
	136, 279, 301, 146, 156, 289, 268, 294, 161, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 128, 296,
	312, 148, 276, 277, 328, 263, 130, 310, 292, 215,
	190, 191, 129, 0, 260, 165, 175, 160, 232, 0,
	174, 252, 307, 308, 159, 330, 138, 321, 132, 139,
	320, 226, 0, 225, 323, 303, 311, 216, 208, 0,
	131, 309, 214, 207, 195, 170, 182, 248, 203, 249,
	183, 221, 220, 222, 205, 209, 0, 0, 0, 290,
	318, 331, 144, 0, 278, 300, 0, 0, 145, 173,
	169, 247, 224, 140, 185, 287, 194, 201, 259, 329,
	236, 266, 149, 317, 286, 514, 526, 520, 522, 521,
	518, 519, 517, 516, 515, 528, 505, 506, 507, 508,
	511, 0, 523, 524, 0, 0, 0, 0, 469, 470,
	471, 472, 473, 477, 478, 482, 483, 491, 490, 489,
	492, 493, 495, 494, 496, 474, 475, 476, 479, 480,
	481, 484, 485, 488, 486, 487, 509, 122, 133, 198,
	0, 257, 172, 319, 0, 164, 0, 0, 0, 0,
	0, 0, 124, 125, 134, 143, 150, 163, 168, 171,
	177, 181, 184, 186, 187, 188, 192, 206, 210, 211,
	212, 213, 227, 228, 230, 231, 234, 235, 238, 240,
	241, 242, 244, 245, 246, 251, 254, 256, 258, 261,
	267, 269, 270, 271, 273, 274, 275, 280, 281, 282,
	283, 291, 295, 305, 306, 316, 324, 326, 298, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 233,
	0, 0, 0, 0, 0, 440, 0, 0, 0, 166,
	437, 0, 0, 0, 196, 0, 0, 157, 204, 202,
	0, 0, 0, 239, 297, 0, 0, 0, 513, 199,
	0, 0, 418, 288, 218, 0, 0, 0, 0, 502,
	503, 0, 0, 0, 0, 0, 0, 0, 0, 79,
	0, 0, 438, 462, 461, 464, 465, 466, 467, 0,
	0, 147, 463, 468, 497, 498, 0, 0, 0, 435,
	453, 0, 512, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 450, 451, 0, 0, 0, 0, 527,
	0, 452, 0, 0, 447, 448, 449, 454, 0, 0,
	0, 0, 126, 0, 0, 0, 0, 176, 219, 137,
	504, 0, 0, 189, 325, 0, 0, 525, 253, 0,
	293, 179, 197, 141, 123, 135, 151, 178, 229, 262,
	272, 510, 0, 0, 0, 0, 158, 0, 265, 237,
	315, 0, 0, 243, 264, 200, 304, 255, 313, 314,
	180, 412, 322, 327, 285, 167, 0, 127, 0, 250,
	162, 193, 0, 0, 0, 155, 0, 0, 0, 284,
	302, 142, 299, 217, 223, 152, 154, 153, 136, 279,
	301, 146, 156, 289, 268, 294, 161, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 296, 312, 148,
	276, 277, 328, 263, 130, 310, 292, 215, 190, 191,
	129, 0, 260, 165, 175, 160, 232, 0, 174, 252,
	307, 308, 159, 330, 138, 321, 132, 139, 320, 226,
	0, 225, 323, 303, 311, 216, 208, 0, 131, 309,
	214, 207, 195, 170, 182, 248, 203, 249, 183, 221,
	220, 222, 205, 209, 0, 0, 0, 290, 318, 331,
	144, 0, 278, 300, 0, 0, 145, 173, 169, 247,
	224, 140, 185, 287, 194, 201, 259, 329, 236, 266,
	149, 317, 286, 514, 526, 520, 522, 521, 518, 519,
	517, 516, 515, 528, 505, 506, 507, 508, 511, 0,
	523, 524, 0, 0, 0, 0, 469, 470, 471, 472,
	473, 477, 478, 482, 483, 491, 490, 489, 492, 493,
	495, 494, 496, 474, 475, 476, 479, 480, 481, 484,
	485, 488, 486, 487, 509, 122, 133, 198, 0, 257,
	172, 319, 0, 164, 0, 0, 0, 0, 0, 0,
	124, 125, 134, 143, 150, 163, 168, 171, 177, 181,
	184, 186, 187, 188, 192, 206, 210, 211, 212, 213,
	227, 228, 230, 231, 234, 235, 238, 240, 241, 242,
	244, 245, 246, 251, 254, 256, 258, 261, 267, 269,
	270, 271, 273, 274, 275, 280, 281, 282, 283, 291,
	295, 305, 306, 316, 324, 326, 298, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 233, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 166, 0, 0,
	0, 0, 196, 0, 0, 157, 204, 202, 0, 0,
	0, 239, 297, 0, 0, 0, 513, 199, 0, 0,
	418, 288, 218, 0, 0, 0, 0, 502, 503, 0,
	0, 0, 0, 0, 0, 0, 0, 79, 0, 0,
	438, 462, 461, 464, 465, 466, 467, 0, 0, 147,
	463, 468, 497, 498, 0, 0, 0, 0, 453, 0,
	512, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 450, 451, 0, 0, 0, 0, 527, 0, 452,
	0, 0, 447, 448, 449, 454, 0, 0, 0, 0,
	126, 0, 0, 0, 0, 176, 219, 137, 504, 0,
	0, 189, 325, 0, 0, 525, 253, 0, 293, 179,
	197, 141, 123, 135, 151, 178, 229, 262, 272, 510,
	0, 0, 0, 0, 158, 0, 265, 237, 315, 0,
	2315, 243, 264, 200, 304, 255, 313, 314, 180, 412,
	322, 327, 285, 167, 0, 127, 0, 250, 162, 193,
	0, 0, 0, 155, 0, 0, 0, 284, 302, 142,
	299, 217, 223, 152, 154, 153, 136, 279, 301, 146,
	156, 289, 268, 294, 161, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 296, 312, 148, 276, 277,
	328, 263, 130, 310, 292, 215, 190, 191, 129, 0,
	260, 165, 175, 160, 232, 0, 174, 252, 307, 308,
	159, 330, 138, 321, 132, 139, 320, 226, 0, 225,
	323, 303, 311, 216, 208, 0, 131, 309, 214, 207,
	195, 170, 182, 248, 203, 249, 183, 221, 220, 222,
	205, 209, 0, 0, 0, 290, 318, 331, 144, 0,
	278, 300, 0, 0, 145, 173, 169, 247, 224, 140,
	185, 287, 194, 201, 259, 329, 236, 266, 149, 317,
	286, 514, 526, 520, 522, 521, 518, 519, 517, 516,
	515, 528, 505, 506, 507, 508, 511, 0, 523, 524,
	0, 0, 0, 0, 469, 470, 471, 472, 473, 477,
	478, 482, 483, 491, 490, 489, 492, 493, 495, 494,
	496, 474, 475, 476, 479, 480, 481, 484, 485, 488,
	486, 487, 509, 122, 133, 198, 0, 257, 172, 319,
	0, 164, 0, 0, 0, 0, 0, 0, 124, 125,
	134, 143, 150, 163, 168, 171, 177, 181, 184, 186,
	187, 188, 192, 206, 210, 211, 212, 213, 227, 228,
	230, 231, 234, 235, 238, 240, 241, 242, 244, 245,
	246, 251, 254, 256, 258, 261, 267, 269, 270, 271,
	273, 274, 275, 280, 281, 282, 283, 291, 295, 305,
	306, 316, 324, 326, 298, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 233, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 166, 0, 0, 0, 0,
	196, 0, 0, 157, 204, 202, 0, 0, 0, 239,
	297, 0, 0, 0, 513, 199, 0, 0, 418, 288,
	218, 0, 0, 0, 0, 502, 503, 0, 0, 0,
	0, 0, 0, 0, 0, 79, 0, 816, 438, 462,
	461, 464, 465, 466, 467, 0, 0, 147, 463, 468,
	497, 498, 0, 0, 0, 0, 453, 0, 512, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 450,
	451, 0, 0, 0, 0, 527, 0, 452, 0, 0,
	447, 448, 449, 454, 0, 0, 0, 0, 126, 0,
	0, 0, 0, 176, 219, 137, 504, 0, 0, 189,
	325, 0, 0, 525, 253, 0, 293, 179, 197, 141,
	123, 135, 151, 178, 229, 262, 272, 510, 0, 0,
	0, 0, 158, 0, 265, 237, 315, 0, 0, 243,
	264, 200, 304, 255, 313, 314, 180, 412, 322, 327,
	285, 167, 0, 127, 0, 250, 162, 193, 0, 0,
	0, 155, 0, 0, 0, 284, 302, 142, 299, 217,
	223, 152, 154, 153, 136, 279, 301, 146, 156, 289,
	268, 294, 161, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 128, 296, 312, 148, 276, 277, 328, 263,
	130, 310, 292, 215, 190, 191, 129, 0, 260, 165,
	175, 160, 232, 0, 174, 252, 307, 308, 159, 330,
	138, 321, 132, 139, 320, 226, 0, 225, 323, 303,
	311, 216, 208, 0, 131, 309, 214, 207, 195, 170,
	182, 248, 203, 249, 183, 221, 220, 222, 205, 209,
	0, 0, 0, 290, 318, 331, 144, 0, 278, 300,
	0, 0, 145, 173, 169, 247, 224, 140, 185, 287,
	194, 201, 259, 329, 236, 266, 149, 317, 286, 514,
	526, 520, 522, 521, 518, 519, 517, 516, 515, 528,
	505, 506, 507, 508, 511, 0, 523, 524, 0, 0,
	0, 0, 469, 470, 471, 472, 473, 477, 478, 482,
	483, 491, 490, 489, 492, 493, 495, 494, 496, 474,
	475, 476, 479, 480, 481, 484, 485, 488, 486, 487,
	509, 122, 133, 198, 0, 257, 172, 319, 0, 164,
	0, 0, 0, 0, 0, 0, 124, 125, 134, 143,
	150, 163, 168, 171, 177, 181, 184, 186, 187, 188,
	192, 206, 210, 211, 212, 213, 227, 228, 230, 231,
	234, 235, 238, 240, 241, 242, 244, 245, 246, 251,
	254, 256, 258, 261, 267, 269, 270, 271, 273, 274,
	275, 280, 281, 282, 283, 291, 295, 305, 306, 316,
	324, 326, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 233, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 166, 0, 0, 0, 0, 196, 0,
	0, 157, 204, 202, 0, 0, 0, 239, 297, 0,
	0, 0, 513, 199, 0, 0, 418, 288, 218, 0,
	0, 0, 0, 502, 503, 0, 0, 0, 0, 0,
	0, 0, 0, 79, 0, 0, 438, 462, 461, 464,
	465, 466, 467, 0, 0, 147, 463, 468, 497, 498,
	0, 0, 0, 0, 453, 0, 512, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 450, 451, 0,
	0, 0, 0, 527, 0, 452, 0, 0, 447, 448,
	449, 454, 0, 0, 0, 0, 126, 0, 0, 0,
	0, 176, 219, 137, 504, 0, 0, 189, 325, 0,
	0, 525, 253, 0, 293, 179, 197, 141, 123, 135,
	151, 178, 229, 262, 272, 510, 0, 0, 0, 0,
	158, 0, 265, 237, 315, 0, 0, 243, 264, 200,
	304, 255, 313, 314, 180, 412, 322, 327, 285, 167,
	0, 127, 0, 250, 162, 193, 0, 0, 0, 155,
	0, 0, 0, 284, 302, 142, 299, 217, 223, 152,
	154, 153, 136, 279, 301, 146, 156, 289, 268, 294,
	161, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	128, 296, 312, 148, 276, 277, 328, 263, 130, 310,
	292, 215, 190, 191, 129, 0, 260, 165, 175, 160,
	232, 0, 174, 252, 307, 308, 159, 330, 138, 321,
	132, 139, 320, 226, 0, 225, 323, 303, 311, 216,
	208, 0, 131, 309, 214, 207, 195, 170, 182, 248,
	203, 249, 183, 221, 220, 222, 205, 209, 0, 0,
	0, 290, 318, 331, 144, 0, 278, 300, 0, 0,
	145, 173, 169, 247, 224, 140, 185, 287, 194, 201,
	259, 329, 236, 266, 149, 317, 286, 514, 526, 520,
	522, 521, 518, 519, 517, 516, 515, 528, 505, 506,
	507, 508, 511, 0, 523, 524, 0, 0, 0, 0,
	469, 470, 471, 472, 473, 477, 478, 482, 483, 491,
	490, 489, 492, 493, 495, 494, 496, 474, 475, 476,
	479, 480, 481, 484, 485, 488, 486, 487, 509, 122,
	133, 198, 0, 257, 172, 319, 0, 164, 0, 0,
	0, 0, 0, 0, 124, 125, 134, 143, 150, 163,
	168, 171, 177, 181, 184, 186, 187, 188, 192, 206,
	210, 211, 212, 213, 227, 228, 230, 231, 234, 235,
	238, 240, 241, 242, 244, 245, 246, 251, 254, 256,
	258, 261, 267, 269, 270, 271, 273, 274, 275, 280,
	281, 282, 283, 291, 295, 305, 306, 316, 324, 326,
	298, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 0, 0, 0, 1283, 0, 0, 0,
	0, 166, 0, 0, 0, 0, 196, 0, 0, 157,
	204, 202, 0, 0, 0, 239, 297, 0, 0, 0,
	0, 199, 0, 0, 418, 288, 218, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1285, 1287, 0,
	0, 0, 0, 0, 120, 0, 391, 0, 0, 0,
	0, 0, 0, 147, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 0, 0, 0, 0, 176,
	219, 137, 0, 0, 0, 189, 325, 0, 1286, 0,
	253, 0, 293, 179, 197, 141, 123, 135, 151, 178,
	229, 262, 272, 0, 0, 0, 0, 0, 158, 0,
	265, 237, 315, 0, 0, 243, 264, 200, 304, 255,
	313, 314, 180, 412, 322, 327, 285, 167, 0, 127,
	0, 250, 162, 193, 0, 0, 0, 155, 0, 0,
	0, 284, 302, 142, 299, 217, 223, 152, 154, 153,
	136, 279, 301, 146, 156, 289, 268, 294, 161, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 128, 296,
	312, 148, 276, 277, 328, 263, 130, 310, 292, 215,
	190, 191, 129, 0, 260, 165, 175, 160, 232, 0,
	174, 252, 307, 308, 159, 330, 138, 321, 132, 139,
	320, 226, 0, 225, 323, 303, 311, 216, 208, 0,
	131, 309, 214, 207, 195, 170, 182, 248, 203, 249,
	183, 221, 220, 222, 205, 209, 0, 0, 0, 290,
	318, 331, 144, 0, 278, 300, 0, 0, 145, 173,
	169, 247, 224, 140, 185, 287, 194, 201, 259, 329,
	236, 266, 149, 317, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 392, 393,
	394, 395, 396, 400, 401, 405, 406, 415, 414, 413,
	416, 417, 420, 419, 421, 397, 398, 399, 402, 403,
	404, 407, 408, 411, 409, 410, 0, 122, 133, 198,
	0, 257, 172, 319, 0, 164, 0, 0, 0, 0,
	0, 0, 124, 125, 134, 143, 150, 163, 168, 171,
	177, 181, 184, 186, 187, 188, 192, 206, 210, 211,
	212, 213, 227, 228, 230, 231, 234, 235, 238, 240,
	241, 242, 244, 245, 246, 251, 254, 256, 258, 261,
	267, 269, 270, 271, 273, 274, 275, 280, 281, 282,
	283, 291, 295, 305, 306, 316, 324, 326, 298, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 233,
	0, 0, 0, 0, 1283, 0, 0, 0, 0, 166,
	0, 0, 0, 0, 196, 0, 0, 157, 204, 202,
	0, 0, 0, 239, 297, 0, 0, 0, 0, 199,
	0, 0, 418, 288, 218, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1285, 1287, 0, 0, 0,
	0, 0, 120, 0, 391, 0, 0, 0, 0, 0,
	0, 147, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 0, 0, 0, 176, 219, 137,
	0, 0, 0, 189, 325, 0, 1286, 0, 253, 0,
	293, 179, 197, 141, 123, 135, 151, 178, 229, 262,
	272, 0, 0, 0, 0, 0, 158, 0, 265, 237,
	315, 0, 0, 1281, 264, 200, 304, 255, 313, 314,
	180, 412, 322, 327, 285, 167, 0, 127, 0, 250,
	162, 193, 0, 0, 0, 155, 0, 0, 0, 284,
	302, 142, 299, 217, 223, 152, 154, 153, 136, 279,
	301, 146, 156, 289, 268, 294, 161, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 296, 312, 148,
	276, 277, 328, 263, 130, 310, 292, 215, 190, 191,
	129, 0, 260, 165, 175, 160, 232, 0, 174, 252,
	307, 308, 159, 330, 138, 321, 132, 139, 320, 226,
	0, 225, 323, 303, 311, 216, 208, 0, 131, 309,
	214, 207, 195, 170, 182, 248, 203, 249, 183, 221,
	220, 222, 205, 209, 0, 0, 0, 290, 318, 331,
	144, 0, 278, 300, 0, 0, 145, 173, 169, 247,
	224, 140, 185, 287, 194, 201, 259, 329, 236, 266,
	149, 317, 286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 392, 393, 394, 395,
	396, 400, 401, 405, 406, 415, 414, 413, 416, 417,
	420, 419, 421, 397, 398, 399, 402, 403, 404, 407,
	408, 411, 409, 410, 0, 122, 133, 198, 0, 257,
	172, 319, 0, 164, 0, 0, 0, 0, 0, 0,
	124, 125, 134, 143, 150, 163, 168, 171, 177, 181,
	184, 186, 187, 188, 192, 206, 210, 211, 212, 213,
	227, 228, 230, 231, 234, 235, 238, 240, 241, 242,
	244, 245, 246, 251, 254, 256, 258, 261, 267, 269,
	270, 271, 273, 274, 275, 280, 281, 282, 283, 291,
	295, 305, 306, 316, 324, 326, 298, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 233, 0, 0,
	0, 0, 838, 0, 0, 0, 0, 166, 0, 0,
	0, 0, 196, 0, 0, 157, 204, 202, 0, 0,
	0, 239, 297, 0, 0, 0, 0, 199, 0, 0,
	418, 288, 218, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	839, 0, 842, 0, 0, 0, 0, 0, 0, 147,
	0, 0, 0, 0, 0, 835, 834, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 836, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 0, 0, 0, 176, 219, 137, 0, 0,
	0, 189, 325, 0, 0, 0, 253, 0, 293, 179,
	197, 141, 123, 135, 151, 178, 229, 262, 272, 0,
	0, 0, 0, 0, 158, 0, 265, 237, 315, 0,
	0, 243, 264, 200, 304, 255, 313, 314, 180, 412,
	322, 327, 285, 167, 0, 127, 0, 250, 162, 193,
	0, 0, 0, 155, 0, 0, 0, 284, 302, 142,
	299, 217, 223, 152, 154, 153, 136, 279, 301, 146,
	156, 289, 268, 294, 161, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 296, 312, 148, 276, 277,
	328, 263, 130, 310, 292, 215, 190, 191, 129, 0,
	260, 165, 175, 160, 232, 0, 174, 252, 307, 308,
	159, 330, 138, 321, 132, 139, 320, 226, 0, 225,
	323, 303, 311, 216, 208, 0, 131, 309, 214, 207,
	195, 170, 182, 248, 203, 249, 183, 221, 220, 222,
	205, 209, 0, 0, 0, 290, 318, 331, 144, 0,
	278, 300, 0, 0, 145, 173, 169, 247, 224, 140,
	185, 287, 194, 201, 259, 329, 236, 266, 149, 317,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 392, 393, 394, 395, 396, 400,
	401, 405, 406, 415, 414, 413, 416, 417, 420, 419,
	421, 397, 398, 399, 402, 403, 404, 407, 408, 411,
	409, 410, 0, 122, 133, 198, 0, 257, 172, 319,
	0, 164, 0, 0, 0, 0, 0, 0, 124, 125,
	134, 143, 150, 163, 168, 171, 177, 181, 184, 186,
	187, 188, 192, 206, 210, 211, 212, 213, 227, 228,
	230, 231, 234, 235, 238, 240, 241, 242, 244, 245,
	246, 251, 254, 256, 258, 261, 267, 269, 270, 271,
	273, 274, 275, 280, 281, 282, 283, 291, 295, 305,
	306, 316, 324, 326, 298, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 233, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 166, 0, 0, 0, 0,
	196, 1550, 0, 157, 204, 202, 0, 0, 0, 239,
	297, 0, 0, 0, 0, 199, 0, 0, 418, 288,
	218, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 120, 0,
	391, 0, 0, 0, 0, 0, 0, 147, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 0, 0, 176, 219, 137, 0, 0, 0, 189,
	325, 0, 0, 0, 253, 0, 293, 179, 197, 141,
	123, 135, 151, 178, 229, 262, 272, 0, 0, 0,
	0, 0, 158, 0, 265, 237, 315, 0, 0, 243,
	264, 200, 304, 255, 313, 314, 180, 412, 322, 327,
	285, 167, 0, 127, 0, 250, 162, 193, 0, 0,
	0, 155, 0, 0, 0, 284, 302, 142, 299, 217,
	223, 152, 154, 153, 136, 279, 301, 146, 156, 289,
	268, 294, 161, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 128, 296, 312, 148, 276, 277, 328, 263,
	130, 310, 292, 215, 190, 191, 129, 0, 260, 165,
	175, 160, 232, 0, 174, 252, 307, 308, 159, 330,
	138, 321, 132, 139, 320, 226, 0, 225, 323, 303,
	311, 216, 208, 0, 131, 309, 214, 207, 195, 170,
	182, 248, 203, 249, 183, 221, 220, 222, 205, 209,
	0, 0, 0, 290, 318, 331, 144, 0, 278, 300,
	0, 0, 145, 173, 169, 247, 224, 140, 185, 287,
	194, 201, 259, 329, 236, 266, 149, 317, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 392, 393, 394, 395, 396, 400, 401, 405,
	406, 415, 414, 413, 416, 417, 420, 419, 421, 397,
	398, 399, 402, 403, 404, 407, 408, 411, 409, 410,
	0, 122, 133, 198, 0, 257, 172, 319, 0, 164,
	0, 0, 0, 0, 0, 0, 124, 125, 134, 143,
	150, 163, 168, 171, 177, 181, 184, 186, 187, 188,
	192, 206, 210, 211, 212, 213, 227, 228, 230, 231,
	234, 235, 238, 240, 241, 242, 244, 245, 246, 251,
	254, 256, 258, 261, 267, 269, 270, 271, 273, 274,
	275, 280, 281, 282, 283, 291, 295, 305, 306, 316,
	324, 326, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 233, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 166, 0, 0, 0, 0, 196, 0,
	0, 157, 204, 202, 0, 0, 0, 239, 297, 0,
	0, 0, 0, 199, 0, 0, 418, 288, 218, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 120, 0, 391, 0,
	0, 0, 0, 0, 0, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 0, 0,
	0, 176, 219, 137, 0, 0, 0, 189, 325, 0,
	0, 0, 253, 0, 293, 179, 197, 141, 123, 135,
	151, 178, 229, 262, 272, 0, 0, 0, 0, 0,
	158, 0, 265, 237, 315, 0, 0, 243, 264, 200,
	304, 255, 313, 314, 180, 412, 322, 327, 285, 167,
	0, 127, 0, 250, 162, 193, 0, 0, 0, 155,
	0, 0, 0, 284, 302, 142, 299, 217, 223, 152,
	154, 153, 136, 279, 301, 146, 156, 289, 268, 294,
	161, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	128, 296, 312, 148, 276, 277, 328, 263, 130, 310,
	292, 215, 190, 191, 129, 0, 260, 165, 175, 160,
	232, 0, 174, 252, 307, 308, 159, 330, 138, 321,
	132, 139, 320, 226, 0, 225, 323, 303, 311, 216,
	208, 0, 131, 309, 214, 207, 195, 170, 182, 248,
	203, 249, 183, 221, 220, 222, 205, 209, 0, 0,
	0, 290, 318, 331, 144, 0, 278, 300, 0, 0,
	145, 173, 169, 247, 224, 140, 185, 287, 194, 201,
	259, 329, 236, 266, 149, 317, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	392, 393, 394, 395, 396, 400, 401, 405, 406, 415,
	414, 413, 416, 417, 420, 419, 421, 397, 398, 399,
	402, 403, 404, 407, 408, 411, 409, 410, 0, 122,
	133, 198, 0, 257, 172, 319, 0, 164, 0, 0,
	0, 0, 0, 0, 124, 125, 134, 143, 150, 163,
	168, 171, 177, 181, 184, 186, 187, 188, 192, 206,
	210, 211, 212, 213, 227, 228, 230, 231, 234, 235,
	238, 240, 241, 242, 244, 245, 246, 251, 254, 256,
	258, 261, 267, 269, 270, 271, 273, 274, 275, 280,
	281, 282, 283, 291, 295, 305, 306, 316, 324, 326,
	298, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 233, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 166, 0, 0, 0, 0, 196, 0, 0, 157,
	204, 202, 0, 0, 0, 239, 297, 0, 0, 0,
	0, 199, 0, 0, 418, 288, 218, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 839, 0, 842, 0, 0, 0,
	0, 0, 0, 147, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 0, 0, 0, 0, 176,
	219, 137, 0, 0, 0, 189, 325, 0, 0, 0,
	253, 0, 293, 179, 197, 141, 123, 135, 151, 178,
	229, 262, 272, 0, 0, 0, 0, 0, 158, 0,
	265, 237, 315, 0, 0, 243, 264, 200, 304, 255,
	313, 314, 180, 412, 322, 327, 285, 167, 0, 127,
	0, 250, 162, 193, 0, 0, 0, 155, 0, 0,
	0, 284, 302, 142, 299, 217, 223, 152, 154, 153,
	136, 279, 301, 146, 156, 289, 268, 294, 161, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 128, 296,
	312, 148, 276, 277, 328, 263, 130, 310, 292, 215,
	190, 191, 129, 0, 260, 165, 175, 160, 232, 0,
	174, 252, 307, 308, 159, 330, 138, 321, 132, 139,
	320, 226, 0, 225, 323, 303, 311, 216, 208, 0,
	131, 309, 214, 207, 195, 170, 182, 248, 203, 249,
	183, 221, 220, 222, 205, 209, 0, 0, 0, 290,
	318, 331, 144, 0, 278, 300, 0, 0, 145, 173,
	169, 247, 224, 140, 185, 287, 194, 201, 259, 329,
	236, 266, 149, 317, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 392, 393,
	394, 395, 396, 400, 401, 405, 406, 415, 414, 413,
	416, 417, 420, 419, 421, 397, 398, 399, 402, 403,
	404, 407, 408, 411, 409, 410, 0, 122, 133, 198,
	0, 257, 172, 319, 0, 164, 0, 0, 0, 0,
	0, 0, 124, 125, 134, 143, 150, 163, 168, 171,
	177, 181, 184, 186, 187, 188, 192, 206, 210, 211,
	212, 213, 227, 228, 230, 231, 234, 235, 238, 240,
	241, 242, 244, 245, 246, 251, 254, 256, 258, 261,
	267, 269, 270, 271, 273, 274, 275, 280, 281, 282,
	283, 291, 295, 305, 306, 316, 324, 326, 298, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 233,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 166,
	0, 0, 0, 0, 196, 0, 0, 157, 204, 202,
	0, 0, 0, 239, 297, 0, 0, 0, 0, 199,
	0, 0, 418, 288, 218, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 568, 0, 0, 0, 0, 0, 0, 0,
	0, 147, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 0, 0, 0, 176, 219, 137,
	0, 0, 0, 189, 325, 0, 0, 0, 253, 0,
	293, 179, 197, 141, 123, 135, 151, 178, 229, 262,
	272, 0, 0, 0, 0, 0, 158, 0, 265, 237,
	315, 0, 0, 243, 264, 200, 304, 255, 313, 314,
	180, 412, 322, 327, 285, 167, 0, 127, 0, 250,
	162, 193, 0, 0, 0, 155, 0, 0, 0, 284,
	302, 142, 299, 217, 223, 152, 154, 153, 136, 279,
	301, 146, 156, 289, 268, 294, 161, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 296, 312, 148,
	276, 277, 328, 263, 130, 310, 292, 215, 190, 191,
	129, 0, 260, 165, 175, 160, 232, 0, 174, 252,
	307, 308, 159, 330, 138, 321, 132, 139, 320, 226,
	0, 225, 323, 303, 311, 216, 208, 0, 131, 309,
	214, 207, 195, 170, 182, 248, 203, 249, 183, 221,
	220, 222, 205, 209, 0, 0, 0, 290, 318, 331,
	144, 0, 278, 300, 0, 0, 145, 173, 169, 247,
	224, 140, 185, 287, 194, 201, 259, 329, 236, 266,
	149, 317, 286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 392, 393, 394, 395,
	396, 400, 401, 405, 406, 415, 414, 413, 416, 417,
	420, 419, 421, 397, 398, 399, 402, 403, 404, 407,
	408, 411, 409, 410, 0, 122, 133, 198, 0, 257,
	172, 319, 0, 164, 0, 0, 0, 0, 0, 0,
	124, 125, 134, 143, 150, 163, 168, 171, 177, 181,
	184, 186, 187, 188, 192, 206, 210, 211, 212, 213,
	227, 228, 230, 231, 234, 235, 238, 240, 241, 242,
	244, 245, 246, 251, 254, 256, 258, 261, 267, 269,
	270, 271, 273, 274, 275, 280, 281, 282, 283, 291,
	295, 305, 306, 316, 324, 326, 298, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 233, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 166, 0, 0,
	0, 0, 196, 0, 0, 157, 204, 202, 0, 0,
	0, 239, 297, 0, 0, 0, 0, 199, 0, 0,
	0, 288, 218, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	568, 0, 0, 0, 0, 0, 0, 0, 0, 147,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 852, 851, 861,
	862, 854, 855, 856, 857, 858, 859, 860, 853, 0,
	0, 863, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 0, 0, 0, 176, 219, 137, 0, 0,
	0, 189, 325, 0, 0, 0, 253, 0, 293, 179,
	197, 141, 123, 135, 151, 178, 229, 262, 272, 0,
	0, 0, 0, 0, 158, 0, 265, 237, 315, 0,
	0, 243, 264, 200, 304, 255, 313, 314, 180, 0,
	322, 327, 285, 167, 0, 127, 0, 250, 162, 193,
	0, 0, 0, 155, 0, 0, 0, 284, 302, 142,
	299, 217, 223, 152, 154, 153, 136, 279, 301, 146,
	156, 289, 268, 294, 161, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 296, 312, 148, 276, 277,
	328, 263, 130, 310, 292, 215, 190, 191, 129, 0,
	260, 165, 175, 160, 232, 0, 174, 252, 307, 308,
	159, 330, 138, 321, 132, 139, 320, 226, 0, 225,
	323, 303, 311, 216, 208, 0, 131, 309, 214, 207,
	195, 170, 182, 248, 203, 249, 183, 221, 220, 222,
	205, 209, 0, 0, 0, 290, 318, 331, 144, 0,
	278, 300, 0, 0, 145, 173, 169, 247, 224, 140,
	185, 287, 194, 201, 259, 329, 236, 266, 149, 317,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 122, 133, 198, 0, 257, 172, 319,
	0, 164, 0, 0, 0, 0, 0, 0, 124, 125,
	134, 143, 150, 163, 168, 171, 177, 181, 184, 186,
	187, 188, 192, 206, 210, 211, 212, 213, 227, 228,
	230, 231, 234, 235, 238, 240, 241, 242, 244, 245,
	246, 251, 254, 256, 258, 261, 267, 269, 270, 271,
	273, 274, 275, 280, 281, 282, 283, 291, 295, 305,
	306, 316, 324, 326, 34, 298, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 166, 0, 0, 0,
	0, 196, 0, 0, 157, 204, 202, 0, 0, 0,
	239, 297, 0, 0, 0, 1278, 199, 0, 0, 0,
	288, 218, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 79, 0, 0, 120,
	0, 0, 0, 0, 0, 0, 0, 0, 147, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 0, 0, 0, 176, 219, 137, 0, 0, 0,
	189, 325, 0, 0, 0, 253, 0, 293, 179, 197,
	141, 123, 135, 151, 178, 229, 262, 272, 0, 0,
	0, 0, 0, 158, 0, 265, 237, 315, 0, 0,
	243, 264, 200, 304, 255, 313, 314, 180, 0, 322,
	327, 285, 167, 0, 127, 0, 250, 162, 193, 0,
	0, 0, 155, 0, 0, 0, 284, 302, 142, 299,
	217, 223, 152, 154, 153, 136, 279, 301, 146, 156,
	289, 268, 294, 161, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 296, 312, 148, 276, 277, 328,
	263, 130, 310, 292, 215, 190, 191, 129, 0, 260,
	165, 175, 160, 232, 0, 174, 252, 307, 308, 159,
	330, 138, 321, 132, 139, 320, 226, 0, 225, 323,
	303, 311, 216, 208, 0, 131, 309, 214, 207, 195,
	170, 182, 248, 203, 249, 183, 221, 220, 222, 205,
	209, 0, 0, 0, 290, 318, 331, 144, 0, 278,
	300, 0, 0, 145, 173, 169, 247, 224, 140, 185,
	287, 194, 201, 259, 329, 236, 266, 149, 317, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 122, 133, 198, 77, 257, 172, 319, 0,
	164, 0, 0, 0, 0, 0, 0, 124, 125, 134,
	143, 150, 163, 168, 171, 177, 181, 184, 186, 187,
	188, 192, 206, 210, 211, 212, 213, 227, 228, 230,
	231, 234, 235, 238, 240, 241, 242, 244, 245, 246,
	251, 254, 256, 258, 261, 267, 269, 270, 271, 273,
	274, 275, 280, 281, 282, 283, 291, 295, 305, 306,
	316, 324, 326, 298, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 233, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 166, 986, 0, 0, 0, 196,
	0, 0, 157, 204, 202, 0, 0, 0, 239, 297,
	0, 0, 0, 0, 199, 0, 0, 0, 288, 218,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 568, 0, 985,
	0, 0, 0, 0, 0, 0, 147, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 0,
	0, 0, 176, 219, 137, 0, 0, 0, 189, 325,
	0, 0, 0, 253, 0, 293, 179, 197, 141, 123,
	135, 151, 178, 229, 262, 272, 0, 0, 0, 0,
	0, 158, 0, 265, 237, 315, 0, 0, 243, 264,
	200, 304, 255, 313, 314, 180, 0, 322, 327, 285,
	167, 0, 127, 0, 250, 162, 193, 0, 0, 0,
	155, 0, 0, 0, 284, 302, 142, 299, 217, 223,
	152, 154, 153, 136, 279, 301, 146, 156, 289, 268,
	294, 161, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 128, 296, 312, 148, 276, 277, 328, 263, 130,
	310, 292, 215, 190, 191, 129, 0, 260, 165, 175,
	160, 232, 0, 174, 252, 307, 308, 159, 330, 138,
	321, 132, 139, 320, 226, 0, 225, 323, 303, 311,
	216, 208, 0, 131, 309, 214, 207, 195, 170, 182,
	248, 203, 249, 183, 221, 220, 222, 205, 209, 0,
	0, 0, 290, 318, 331, 144, 0, 278, 300, 0,
	0, 145, 173, 169, 247, 224, 140, 185, 287, 194,
	201, 259, 329, 236, 266, 149, 317, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	122, 133, 198, 0, 257, 172, 319, 0, 164, 0,
	0, 0, 0, 0, 0, 124, 125, 134, 143, 150,
	163, 168, 171, 177, 181, 184, 186, 187, 188, 192,
	206, 210, 211, 212, 213, 227, 228, 230, 231, 234,
	235, 238, 240, 241, 242, 244, 245, 246, 251, 254,
	256, 258, 261, 267, 269, 270, 271, 273, 274, 275,
	280, 281, 282, 283, 291, 295, 305, 306, 316, 324,
	326, 298, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 233, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 166, 0, 0, 0, 0, 196, 0, 0,
	157, 204, 202, 0, 0, 0, 239, 297, 0, 0,
	0, 0, 199, 0, 0, 0, 288, 218, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 79, 0, 0, 120, 0, 0, 0, 0,
	0, 0, 0, 0, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 0, 0, 0,
	176, 219, 137, 0, 0, 0, 189, 325, 0, 0,
	0, 253, 0, 293, 179, 197, 141, 123, 135, 151,
	178, 229, 262, 272, 0, 0, 0, 0, 0, 158,
	0, 265, 237, 315, 0, 0, 243, 264, 200, 304,
	255, 313, 314, 180, 0, 322, 327, 285, 167, 0,
	127, 0, 250, 162, 193, 0, 0, 0, 155, 0,
	0, 0, 284, 302, 142, 299, 217, 223, 152, 154,
	153, 136, 279, 301, 146, 156, 289, 268, 294, 161,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 128,
	296, 312, 148, 276, 277, 328, 263, 130, 310, 292,
	215, 190, 191, 129, 0, 260, 165, 175, 160, 232,
	0, 174, 252, 307, 308, 159, 330, 138, 321, 132,
	139, 320, 226, 0, 225, 323, 303, 311, 216, 208,
	0, 131, 309, 214, 207, 195, 170, 182, 248, 203,
	249, 183, 221, 220, 222, 205, 209, 0, 0, 0,
	290, 318, 331, 144, 0, 278, 300, 0, 0, 145,
	173, 169, 247, 224, 140, 185, 287, 194, 201, 259,
	329, 236, 266, 149, 317, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 122, 133,
	198, 0, 257, 172, 319, 0, 164, 0, 0, 0,
	0, 0, 0, 124, 125, 134, 143, 150, 163, 168,
	171, 177, 181, 184, 186, 187, 188, 192, 206, 210,
	211, 212, 213, 227, 228, 230, 231, 234, 235, 238,
	240, 241, 242, 244, 245, 246, 251, 254, 256, 258,
	261, 267, 269, 270, 271, 273, 274, 275, 280, 281,
	282, 283, 291, 295, 305, 306, 316, 324, 326, 298,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	233, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	166, 0, 0, 0, 0, 196, 0, 0, 157, 204,
	202, 0, 0, 0, 239, 297, 0, 0, 0, 0,
	199, 0, 0, 0, 288, 218, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	79, 0, 0, 568, 0, 0, 0, 0, 0, 0,
	0, 0, 147, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 0, 0, 0, 176, 219,
	137, 0, 0, 0, 189, 325, 0, 0, 0, 253,
	0, 293, 179, 197, 141, 123, 135, 151, 178, 229,
	262, 272, 0, 0, 0, 0, 0, 158, 0, 265,
	237, 315, 0, 0, 243, 264, 200, 304, 255, 313,
	314, 180, 0, 322, 327, 285, 167, 0, 127, 0,
	250, 162, 193, 0, 0, 0, 155, 0, 0, 0,
	284, 302, 142, 299, 217, 223, 152, 154, 153, 136,
	279, 301, 146, 156, 289, 268, 294, 161, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 296, 312,
	148, 276, 277, 328, 263, 130, 310, 292, 215, 190,
	191, 129, 0, 260, 165, 175, 160, 232, 0, 174,
	252, 307, 308, 159, 330, 138, 321, 132, 139, 320,
	226, 0, 225, 323, 303, 311, 216, 208, 0, 131,
	309, 214, 207, 195, 170, 182, 248, 203, 249, 183,
	221, 220, 222, 205, 209, 0, 0, 0, 290, 318,
	331, 144, 0, 278, 300, 0, 0, 145, 173, 169,
	247, 224, 140, 185, 287, 194, 201, 259, 329, 236,
	266, 149, 317, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 122, 133, 198, 0,
	257, 172, 319, 0, 164, 0, 0, 0, 0, 0,
	0, 124, 125, 134, 143, 150, 163, 168, 171, 177,
	181, 184, 186, 187, 188, 192, 206, 210, 211, 212,
	213, 227, 228, 230, 231, 234, 235, 238, 240, 241,
	242, 244, 245, 246, 251, 254, 256, 258, 261, 267,
	269, 270, 271, 273, 274, 275, 280, 281, 282, 283,
	291, 295, 305, 306, 316, 324, 326, 298, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 233, 0,
	0, 0, 0, 0, 0, 0, 0, 955, 166, 0,
	0, 0, 0, 196, 0, 0, 157, 204, 202, 0,
	0, 0, 239, 297, 0, 0, 0, 0, 199, 0,
	0, 0, 288, 218, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 120, 0, 0, 0, 0, 0, 0, 0, 0,
	147, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 0, 0, 0, 176, 219, 137, 0,
	0, 0, 189, 325, 0, 0, 0, 253, 0, 293,
	179, 197, 141, 123, 135, 151, 178, 229, 262, 272,
	0, 0, 0, 0, 0, 158, 0, 265, 237, 315,
	0, 0, 243, 264, 200, 304, 255, 313, 314, 180,
	0, 322, 327, 285, 167, 0, 127, 0, 250, 162,
	193, 0, 0, 0, 155, 0, 0, 0, 284, 302,
	142, 299, 217, 223, 152, 154, 153, 136, 279, 301,
	146, 156, 289, 268, 294, 161, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 296, 312, 148, 276,
	277, 328, 263, 130, 310, 292, 215, 190, 191, 129,
	0, 260, 165, 175, 160, 232, 0, 174, 252, 307,
	308, 159, 330, 138, 321, 132, 139, 320, 226, 0,
	225, 323, 303, 311, 216, 208, 0, 131, 309, 214,
	207, 195, 170, 182, 248, 203, 249, 183, 221, 220,
	222, 205, 209, 0, 0, 0, 290, 318, 331, 144,
	0, 278, 300, 0, 0, 145, 173, 169, 247, 224,
	140, 185, 287, 194, 201, 259, 329, 236, 266, 149,
	317, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 122, 133, 198, 0, 257, 172,
	319, 0, 164, 0, 0, 0, 0, 0, 0, 124,
	125, 134, 143, 150, 163, 168, 171, 177, 181, 184,
	186, 187, 188, 192, 206, 210, 211, 212, 213, 227,
	228, 230, 231, 234, 235, 238, 240, 241, 242, 244,
	245, 246, 251, 254, 256, 258, 261, 267, 269, 270,
	271, 273, 274, 275, 280, 281, 282, 283, 291, 295,
	305, 306, 316, 324, 326, 298, 0, 0, 0, 531,
	0, 0, 0, 0, 0, 0, 233, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 166, 0, 0, 0,
	0, 196, 0, 0, 157, 204, 202, 0, 0, 0,
	239, 297, 0, 0, 0, 0, 199, 0, 0, 0,
	288, 218, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 120,
	0, 0, 0, 0, 0, 0, 0, 0, 147, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 0, 0, 0, 176, 219, 137, 0, 0, 0,
	189, 325, 0, 0, 0, 253, 0, 293, 179, 197,
	141, 123, 135, 151, 178, 229, 262, 272, 0, 0,
	0, 0, 0, 158, 0, 265, 237, 315, 0, 0,
	243, 264, 200, 304, 255, 313, 314, 180, 0, 322,
	327, 285, 167, 0, 127, 0, 250, 162, 193, 0,
	0, 0, 155, 0, 0, 0, 284, 302, 142, 299,
	217, 223, 152, 154, 153, 136, 279, 301, 146, 156,
	289, 268, 294, 161, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 296, 312, 148, 276, 277, 328,
	263, 130, 310, 292, 215, 190, 191, 129, 0, 260,
	165, 175, 160, 232, 0, 174, 252, 307, 308, 159,
	330, 138, 321, 132, 139, 320, 226, 0, 225, 323,
	303, 311, 216, 208, 0, 131, 309, 214, 207, 195,
	170, 182, 248, 203, 249, 183, 221, 220, 222, 205,
	209, 0, 0, 0, 290, 318, 331, 144, 0, 278,
	300, 0, 0, 145, 173, 169, 247, 224, 140, 185,
	287, 194, 201, 259, 329, 236, 266, 149, 317, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 122, 133, 198, 0, 257, 172, 319, 0,
	164, 0, 0, 0, 0, 0, 0, 124, 125, 134,
	143, 150, 163, 168, 171, 177, 181, 184, 186, 187,
	188, 192, 206, 210, 211, 212, 213, 227, 228, 230,
	231, 234, 235, 238, 240, 241, 242, 244, 245, 246,
	251, 254, 256, 258, 261, 267, 269, 270, 271, 273,
	274, 275, 280, 281, 282, 283, 291, 295, 305, 306,
	316, 324, 326, 298, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 233, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 166, 0, 0, 0, 0, 196,
	0, 0, 157, 204, 202, 0, 0, 0, 239, 297,
	0, 0, 0, 0, 199, 0, 0, 0, 288, 218,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 120, 0, 0,
	0, 0, 0, 0, 0, 0, 147, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 0,
	0, 0, 176, 219, 137, 0, 117, 0, 189, 325,
	0, 0, 0, 253, 0, 293, 179, 197, 141, 123,
	135, 151, 178, 229, 262, 272, 0, 0, 0, 0,
	0, 158, 0, 265, 237, 315, 0, 0, 243, 264,
	200, 304, 255, 313, 314, 180, 0, 322, 327, 285,
	167, 0, 127, 0, 250, 162, 193, 0, 0, 0,
	155, 0, 0, 0, 284, 302, 142, 299, 217, 223,
	152, 154, 153, 136, 279, 301, 146, 156, 289, 268,
	294, 161, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 128, 296, 312, 148, 276, 277, 328, 263, 130,
	310, 292, 215, 190, 191, 129, 0, 260, 165, 175,
	160, 232, 0, 174, 252, 307, 308, 159, 330, 138,
	321, 132, 139, 320, 226, 0, 225, 323, 303, 311,
	216, 208, 0, 131, 309, 214, 207, 195, 170, 182,
	248, 203, 249, 183, 221, 220, 222, 205, 209, 0,
	0, 0, 290, 318, 331, 144, 0, 278, 300, 0,
	0, 145, 173, 169, 247, 224, 140, 185, 287, 194,
	201, 259, 329, 236, 266, 149, 317, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	122, 133, 198, 0, 257, 172, 319, 0, 164, 0,
	0, 0, 0, 0, 0, 124, 125, 134, 143, 150,
	163, 168, 171, 177, 181, 184, 186, 187, 188, 192,
	206, 210, 211, 212, 213, 227, 228, 230, 231, 234,
	235, 238, 240, 241, 242, 244, 245, 246, 251, 254,
	256, 258, 261, 267, 269, 270, 271, 273, 274, 275,
	280, 281, 282, 283, 291, 295, 305, 306, 316, 324,
	326, 298, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 233, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 166, 0, 0, 0, 0, 196, 0, 0,
	157, 204, 202, 0, 0, 0, 239, 297, 0, 0,
	0, 0, 199, 0, 0, 0, 288, 218, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 568, 0, 0, 0, 0,
	0, 0, 0, 0, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 0, 0, 0,
	176, 219, 137, 0, 0, 0, 189, 325, 0, 0,
	0, 253, 0, 293, 179, 197, 141, 123, 135, 151,
	178, 229, 262, 272, 0, 0, 0, 0, 0, 158,
	0, 265, 237, 315, 0, 0, 243, 264, 200, 304,
	255, 313, 314, 180, 0, 322, 327, 285, 167, 0,
	127, 0, 250, 162, 193, 0, 0, 0, 155, 0,
	0, 0, 284, 302, 142, 299, 217, 223, 152, 154,
	153, 136, 279, 301, 146, 156, 289, 268, 294, 161,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 128,
	296, 312, 148, 276, 277, 328, 263, 130, 310, 292,
	215, 190, 191, 129, 0, 260, 165, 175, 160, 232,
	0, 174, 252, 307, 308, 159, 330, 138, 321, 132,
	139, 320, 226, 0, 225, 323, 303, 311, 216, 208,
	0, 131, 309, 214, 207, 195, 170, 182, 248, 203,
	249, 183, 221, 220, 222, 205, 209, 0, 0, 0,
	290, 318, 331, 144, 0, 278, 300, 0, 0, 145,
	173, 169, 247, 224, 140, 185, 287, 194, 201, 259,
	329, 236, 266, 149, 317, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 122, 133,
	198, 0, 257, 172, 319, 0, 164, 0, 0, 0,
	0, 0, 0, 124, 125, 134, 143, 150, 163, 168,
	171, 177, 181, 184, 186, 187, 188, 192, 206, 210,
	211, 212, 213, 227, 228, 230, 231, 234, 235, 238,
	240, 241, 242, 244, 245, 246, 251, 254, 256, 258,
	261, 267, 269, 270, 271, 273, 274, 275, 280, 281,
	282, 283, 291, 295, 305, 306, 316, 324, 326, 298,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	233, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	166, 0, 0, 0, 0, 196, 0, 0, 157, 204,
	202, 0, 0, 0, 239, 297, 0, 0, 0, 0,
	199, 0, 0, 0, 288, 218, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 120, 0, 0, 0, 0, 0, 0,
	0, 0, 147, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 0, 0, 0, 176, 219,
	137, 0, 0, 0, 189, 325, 0, 0, 0, 253,
	0, 293, 179, 197, 141, 123, 135, 151, 178, 229,
	262, 272, 0, 0, 0, 0, 0, 158, 0, 265,
	237, 315, 0, 0, 243, 264, 200, 304, 255, 313,
	314, 180, 0, 322, 327, 285, 167, 0, 127, 0,
	250, 162, 193, 0, 0, 0, 155, 0, 0, 0,
	284, 302, 142, 299, 217, 223, 152, 154, 153, 136,
	279, 301, 146, 156, 289, 268, 294, 161, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 296, 312,
	148, 276, 277, 328, 263, 130, 310, 292, 215, 190,
	191, 129, 0, 260, 165, 175, 160, 232, 0, 174,
	252, 307, 308, 159, 330, 138, 321, 132, 139, 320,
	226, 0, 225, 323, 303, 311, 216, 208, 0, 131,
	309, 214, 207, 195, 170, 182, 248, 203, 249, 183,
	221, 220, 222, 205, 209, 0, 0, 0, 290, 318,
	331, 144, 0, 278, 300, 0, 0, 145, 173, 169,
	247, 224, 140, 185, 287, 194, 201, 259, 329, 236,
	266, 149, 317, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 122, 133, 198, 0,
	257, 172, 319, 0, 164, 0, 0, 0, 0, 0,
	0, 124, 125, 134, 143, 150, 163, 168, 171, 177,
	181, 184, 186, 187, 188, 192, 206, 210, 211, 212,
	213, 227, 228, 230, 231, 234, 235, 238, 240, 241,
	242, 244, 245, 246, 251, 254, 256, 258, 261, 267,
	269, 270, 271, 273, 274, 275, 280, 281, 282, 283,
	291, 295, 305, 306, 316, 324, 326, 298, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 233, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 166, 0,
	0, 0, 0, 196, 0, 0, 157, 204, 202, 0,
	0, 0, 239, 297, 0, 0, 0, 0, 199, 0,
	0, 0, 288, 218, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 438, 0, 0, 0, 0, 0, 0, 0, 0,
	147, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 0, 0, 0, 176, 219, 137, 0,
	0, 0, 189, 325, 0, 0, 0, 253, 0, 293,
	179, 197, 141, 123, 135, 151, 178, 229, 262, 272,
	0, 0, 0, 0, 0, 158, 0, 265, 237, 315,
	0, 0, 243, 264, 200, 304, 255, 313, 314, 180,
	0, 322, 327, 285, 167, 0, 127, 0, 250, 162,
	193, 0, 0, 0, 155, 0, 0, 0, 284, 302,
	142, 299, 217, 223, 152, 154, 153, 136, 279, 301,
	146, 156, 289, 268, 294, 161, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 296, 312, 148, 276,
	277, 328, 263, 130, 310, 292, 215, 190, 191, 129,
	0, 260, 165, 175, 160, 232, 0, 174, 252, 307,
	308, 159, 330, 138, 321, 132, 139, 320, 226, 0,
	225, 323, 303, 311, 216, 208, 0, 131, 309, 214,
	207, 195, 170, 182, 248, 203, 249, 183, 221, 220,
	222, 205, 209, 0, 0, 0, 290, 318, 331, 144,
	0, 278, 300, 0, 0, 145, 173, 169, 247, 224,
	140, 185, 287, 194, 201, 259, 329, 236, 266, 149,
	317, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 122, 133, 198, 0, 257, 172,
	319, 0, 164, 0, 0, 0, 0, 0, 0, 124,
	125, 134, 143, 150, 163, 168, 171, 177, 181, 184,
	186, 187, 188, 192, 206, 210, 211, 212, 213, 227,
	228, 230, 231, 234, 235, 238, 240, 241, 242, 244,
	245, 246, 251, 254, 256, 258, 261, 267, 269, 270,
	271, 273, 274, 275, 280, 281, 282, 283, 291, 295,
	305, 306, 316, 324, 326, 298, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 166, 0, 0, 0,
	0, 196, 0, 0, 157, 204, 202, 0, 0, 0,
	239, 297, 0, 0, 0, 0, 199, 0, 0, 0,
	288, 218, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 438,
	0, 0, 0, 0, 0, 0, 0, 0, 147, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 0, 0, 0, 176, 219, 137, 0, 0, 0,
	189, 325, 0, 0, 0, 253, 0, 293, 179, 197,
	141, 123, 135, 151, 178, 229, 262, 272, 0, 0,
	0, 0, 0, 158, 0, 265, 237, 315, 0, 0,
	243, 264, 200, 304, 255, 313, 314, 180, 0, 322,
	327, 285, 167, 0, 127, 0, 250, 162, 193, 0,
	0, 0, 155, 0, 0, 0, 284, 302, 142, 299,
	217, 223, 152, 154, 153, 136, 279, 301, 146, 156,
	289, 268, 294, 161, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 296, 312, 148, 276, 277, 328,
	263, 130, 310, 292, 215, 190, 191, 129, 0, 260,
	165, 175, 160, 232, 0, 174, 252, 307, 308, 159,
	330, 138, 321, 132, 551, 320, 226, 0, 225, 323,
	303, 311, 216, 208, 0, 131, 309, 214, 207, 195,
	170, 182, 248, 203, 249, 183, 221, 220, 222, 547,
	209, 0, 0, 0, 290, 318, 331, 144, 0, 278,
	300, 0, 0, 145, 173, 169, 247, 552, 550, 541,
	542, 194, 201, 259, 329, 236, 266, 149, 317, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 122, 133, 198, 0, 257, 172, 319, 0,
	164, 0, 0, 0, 0, 0, 0, 124, 125, 134,
	143, 150, 163, 168, 171, 177, 181, 184, 186, 187,
	188, 192, 206, 210, 211, 212, 213, 227, 228, 230,
	231, 234, 235, 238, 240, 241, 242, 244, 548, 549,
	251, 254, 256, 258, 261, 267, 269, 270, 271, 273,
	274, 275, 280, 281, 282, 283, 291, 295, 305, 306,
	316, 324, 326, 298, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 233, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 166, 0, 0, 0, 0, 196,
	0, 0, 157, 204, 202, 0, 0, 0, 239, 297,
	0, 0, 0, 0, 199, 0, 0, 0, 288, 218,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 438, 0, 0,
	0, 0, 0, 0, 0, 0, 147, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 0,
	0, 0, 176, 219, 137, 0, 0, 0, 189, 325,
	0, 0, 0, 253, 0, 293, 179, 197, 141, 123,
	135, 151, 178, 229, 262, 272, 0, 0, 0, 0,
	0, 158, 0, 265, 237, 315, 0, 0, 243, 264,
	200, 304, 255, 313, 314, 180, 0, 322, 327, 285,
	167, 0, 127, 0, 250, 162, 193, 0, 0, 0,
	155, 0, 0, 0, 284, 302, 142, 299, 217, 223,
	152, 154, 153, 136, 279, 301, 146, 156, 289, 268,
	294, 161, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 128, 296, 980, 148, 276, 277, 328, 263, 130,
	310, 292, 215, 190, 191, 129, 0, 260, 165, 175,
	160, 232, 0, 174, 252, 307, 308, 159, 330, 138,
	321, 132, 139, 320, 226, 0, 225, 323, 303, 311,
	216, 208, 0, 131, 309, 214, 207, 195, 170, 182,
	248, 203, 249, 183, 221, 220, 222, 205, 209, 0,
	0, 0, 290, 318, 331, 144, 0, 278, 300, 0,
	0, 145, 173, 169, 247, 224, 140, 185, 287, 194,
	201, 259, 329, 236, 266, 149, 317, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	122, 133, 198, 0, 257, 172, 319, 0, 164, 0,
	0, 0, 0, 0, 0, 124, 125, 134, 143, 150,
	163, 168, 171, 177, 181, 184, 186, 187, 188, 192,
	206, 210, 211, 212, 213, 227, 228, 230, 231, 234,
	235, 238, 240, 241, 242, 244, 245, 246, 251, 254,
	256, 258, 261, 267, 269, 270, 271, 273, 274, 275,
	280, 281, 282, 283, 291, 295, 305, 306, 316, 324,
	326, 298, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 233, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 166, 0, 0, 0, 0, 196, 0, 0,
	157, 204, 202, 0, 0, 0, 239, 297, 0, 0,
	0, 0, 199, 0, 0, 0, 288, 218, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 438, 0, 0, 0, 0,
	0, 0, 0, 0, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 0, 0, 0,
	176, 219, 137, 0, 0, 0, 189, 325, 0, 0,
	0, 253, 0, 293, 179, 197, 141, 123, 135, 151,
	178, 229, 262, 272, 0, 0, 0, 0, 0, 158,
	0, 265, 237, 315, 0, 0, 243, 264, 200, 304,
	255, 313, 314, 180, 0, 322, 327, 285, 167, 0,
	127, 0, 250, 162, 193, 0, 0, 0, 155, 0,
	0, 0, 284, 302, 142, 299, 217, 223, 152, 154,
	153, 136, 279, 301, 146, 156, 289, 268, 294, 161,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 128,
	296, 538, 148, 276, 277, 328, 263, 130, 310, 292,
	215, 190, 191, 129, 0, 260, 165, 175, 160, 232,
	0, 174, 252, 307, 308, 159, 330, 138, 321, 132,
	551, 320, 226, 0, 225, 323, 303, 311, 216, 208,
	0, 131, 309, 214, 207, 195, 170, 182, 248, 203,
	249, 183, 221, 220, 222, 547, 209, 0, 0, 0,
	290, 318, 331, 144, 0, 278, 300, 0, 0, 145,
	173, 169, 247, 552, 550, 541, 542, 194, 201, 259,
	329, 236, 266, 149, 317, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 122, 133,
	198, 0, 257, 172, 319, 0, 164, 0, 0, 0,
	0, 0, 0, 124, 125, 134, 143, 150, 163, 168,
	171, 177, 181, 184, 186, 187, 188, 192, 206, 210,
	211, 212, 213, 227, 228, 230, 231, 234, 235, 238,
	240, 241, 242, 244, 548, 549, 251, 254, 256, 258,
	261, 267, 269, 270, 271, 273, 274, 275, 280, 281,
	282, 283, 291, 295, 305, 306, 316, 324, 326,
}
var yyPact = [...]int{

	233, -1000, -292, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1478, -1000, -1000, -1000, -1000, -1000, -1000,
	653, 241, -1000, -1000, 291, 271, 22726, 286, 3931, 23582,
	-1000, -1000, -1000, 142, 209, 23582, -1000, -1000, -1000, 229,
	287, 1067, 1345, 1058, 60, -88, -90, -1000, 1538, 1543,
	-1000, -1000, 249, 55, -1000, -1000, -1000, 18445, 176, -1000,
	-1000, -1000, 1440, 1470, 1241, -1000, 12453, 243, 243, 22298,
	25294, -1000, 1537, 23582, 11167, -1000, 280, 23582, -141, 239,
	239, 165, 285, -1000, 553, -1000, -1000, -1000, -1000, 23582,
	240, 23154, 240, 240, 240, 240, 240, 23582, -1000, 463,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 23582, 1055, 1381, 591, 144, 8150, 8150, -1000,
	610, -1000, 160, 157, 148, 153, 40, 628, -1000, 8150,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 225, 269, 220,
	176, 551, -1000, -1000, -1000, -1000, -1000, 1380, 1379, 770,
	1378, 405, 1376, 1183, -49, -1000, 1053, 23582, -1000, -1000,
	1158, 1445, 284, 23582, -1000, -1000, 1132, -1000, 1175, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 827, 1382, 736, 15021, 1289, -1000, -1000, 625,
	1523, -1000, 17589, 458, -1000, 15021, 1675, 1148, -1000, -1000,
	1148, -1000, -1000, -1000, 433, -1000, -1000, 16305, 16305, 16305,
	16305, 16305, 16305, 16305, 16305, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1148,
	1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
	1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
	1148, 1148, 1148, 1148, 1148, 1148, 1148, -1000, -1000, 1148,
	-1000, 12025, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
	1148, 1148, 15021, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
	1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 21870,
	21014, 23582, 1112, 1068, -1000, -1000, 441, 1126, -120, 24866,
	-1000, -1000, -1000, -1000, 24010, 20586, 545, -1000, -1000, -1000,
	-1000, 1374, -1000, -1000, 439, -1000, 1478, -1000, -1000, 1052,
	202, -1000, 3467, 4360, -1000, -1000, -1000, 1179, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 23154, 1439, 244, 1048,
	596, 1046, 1045, 1044, 239, 1037, 1121, 262, 23582, 1413,
	1196, 23582, 1023, 1021, 1019, 1018, -1000, 10736, -1000, 8150,
	591, -1000, 847, 15021, 239, 239, 8150, 8150, 8150, 23582,
	23582, 23582, -1000, -1000, -1000, -1000, 23582, -1000, -1000, 591,
	591, 8150, 8150, 588, 1522, 588, 588, -1000, -1000, -1000,
	-1000, 15021, -1000, 16305, -1000, -1000, 1017, 206, -1000, -1000,
	-1000, -1000, -1000, -1000, 1014, 405, 405, -1000, 834, 405,
	1111, -1000, 533, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 405, -1000, 14593, -290, -1000,
	-1000, 1120, -1000, 266, 1241, -1000, -1000, 176, -1000, -1000,
	23582, 8150, 18445, 1148, 9443, -1000, -1000, -1000, 1533, 495,
	1131, -1000, -1000, 1117, -1000, 731, 436, 783, 1264, -1000,
	-1000, -1000, 23582, -1000, 15021, 15021, 872, -1000, 18873, -1000,
	-1000, -1000, -1000, 9012, 518, 16305, 673, 555, 16305, 16305,
	16305, 16305, 16305, 16305, 16305, 16305, 16305, 16305, 16305, 16305,
	16305, 16305, 16305, 771, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1013, -1000, 176, 971, 971, 476, 476, 476,
	476, 476, 476, 476, 19729, 1434, 13309, 13309, 13309, 1434,
	827, 827, 13309, 13309, 13309, 13309, 13309, 13309, 1434, 1434,
	13309, 827, 827, 827, 827, 13309, 13309, 13309, 13309, 1434,
	13309, 13309, 13309, 1434, 827, 1008, 645, 12025, 13309, 13309,
	827, 15021, 15021, 14165, 13737, 13309, 13309, 1434, 574, 645,
	24010, -1000, -1000, 15877, -1000, -1000, -1000, -1000, -1000, 827,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 23154, 23154,
	13309, 13309, 13309, 13309, 177, 23582, -1000, 1127, 1215, -1000,
	-1000, -1000, 1438, 20158, 17161, -1000, 177, 1085, 21014, 23582,
	-1000, -1000, 21014, 23582, 8581, 24438, 1106, -1000, -104, -59,
	-120, -1000, -1000, 474, -1000, -1000, -1000, 11596, -1000, 9874,
	1440, 1241, 5995, 10305, -1000, 4360, 1179, -1000, -74, -1000,
	-1000, -1000, 1157, -1000, 1157, 181, 13, 1157, 1157, 1157,
	1157, 1157, 5, 5, 5, 5, 6, -1000, -1000, -1000,
	-1000, -1000, 1178, 1177, -1000, 1157, 1157, 1157, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1167, 203, 1160, 1160,
	1160, 1160, 1160, 204, 204, -1000, 15021, 1185, -1000, 23582,
	8150, 1410, 8150, 161, 1174, 23582, -1000, 23582, 23582, 1116,
	-1000, 23582, 1114, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 645, 999, 997, -1000, -1000, -1000,
	-1000, -1000, -1000, 590, -1000, -1000, -1000, -1000, 591, 23582,
	23582, 23582, 1430, 591, 645, 831, -1000, -1000, 991, -1000,
	1111, 1111, -1000, 1111, 405, 971, 1111, -1000, 1006, 1408,
	822, 23582, -1000, 18445, -54, -1000, -119, 1434, 827, 143,
	-1000, -1000, -1000, 178, 958, 432, -1000, 1257, 736, 736,
	15021, -1000, -1000, -1000, 9874, 1459, -1000, 1269, 1268, 1206,
	-1000, -1000, 518, 638, -1000, -1000, 652, -1000, -1000, -1000,
	-1000, 430, 1148, -1000, 3133, -1000, -1000, -1000, -1000, 673,
	16305, 16305, 16305, 831, 3133, 3005, 1542, 714, 476, 517,
	517, 475, 475, 475, 475, 475, 755, 755, -1000, -1000,
	-1000, 827, -1000, -1000, -1000, 13309, 995, -1000, -1000, 645,
	342, 995, 995, 13309, -152, -152, 827, 995, 995, 995,
	827, 995, 13309, 13309, 995, -152, -152, -152, -152, 995,
	995, 995, 995, 13309, 995, 995, 995, 13309, -1000, 15021,
	-1000, 827, 995, 995, -1000, 636, 828, 578, 1515, 995,
	554, 1500, 995, 995, 995, 13309, 586, -1000, 15021, 827,
	-1000, 1332, 1109, 1108, 995, 827, 1107, 995, 995, 169,
	1148, -1000, 24010, 21014, 21014, 21014, 21014, 21014, -1000, 1238,
	1235, -1000, 1228, 1220, 1229, 18445, 1003, 827, 146, 20158,
	-1000, 1148, -1000, 18017, 482, 277, 275, 252, 1491, 21014,
	1081, -1000, 1081, -1000, 329, -1000, -1000, 24010, -120, -110,
	-1000, -1000, 1106, -1000, 813, -1000, -1000, 645, -1000, 327,
	1382, 1434, 1105, 5564, -1000, -1000, -1000, -1000, 202, -1000,
	-1000, -1000, 1173, 4330, -1000, 1308, 408, 487, 896, 1288,
	-1000, -1000, 538, -66, -1000, -1000, 741, 5, 5, 1157,
	1157, 168, 1157, -1000, 5, -1000, -1000, -1000, 474, 1370,
	474, 474, 474, 474, 5, 820, 820, -1000, -1000, -1000,
	-1000, 700, -1000, 1167, -1000, 692, -1000, -1000, -1000, -1000,
	-1000, -1000, 622, 1193, 23154, 176, 1429, -1000, -1000, -1000,
	1514, -1000, -1000, 361, -1000, 261, -1000, 8150, 23582, 8150,
	8150, 1491, 970, 969, -1000, -1000, -1000, 588, 591, 1364,
	-1000, -1000, 16305, -1000, -1000, -1000, -1000, 177, 282, -1000,
	-1000, -3, -1000, -1000, 1264, -1000, 1103, -1000, -1000, 572,
	546, 606, 207, 207, -1000, 527, 207, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 173, 1415, 9443, 9443, 1249,
	-1000, -1000, -1000, 23582, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 7719, 13309, -1000, 831, 3133, 2887, -1000,
	16305, -1000, 995, 13309, -152, 7288, -152, -152, 995, -1000,
	21442, -1000, -152, -152, -152, -152, -152, -152, 995, 995,
	-152, -1000, -1000, -1000, -1000, -152, -152, -152, -152, 995,
	-152, -152, -152, 827, 645, -1000, -1000, -1000, 428, 771,
	428, 16305, 16305, -1000, 16305, 16305, -1000, -187, -1000, 1146,
	568, -1000, 15021, 826, -1000, -1000, 16305, 16305, -1000, -1000,
	-1000, -1000, 1192, 24010, 1148, -1000, 6857, 23154, 1133, -1000,
	528, 1215, 1166, 1191, 1047, -1000, -1000, -1000, -1000, 1230,
	-1000, 1213, -1000, -1000, 1152, -1000, -1000, 1100, 1148, 23154,
	16305, 482, -1000, 1148, 1148, 1148, 1478, 15021, 1081, -1000,
	-1000, 416, -1000, -1000, -108, -75, -1000, -1000, -1000, 9443,
	-1000, 5995, -1000, 5995, -1000, 19301, 251, 218, -1000, 896,
	-1000, -1000, 896, -1000, -1000, -1000, 1161, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 618, 16305, 1531, -1000, 1307, -1000,
	1305, 819, -1000, -1000, 1073, 474, 474, 5, -1000, -1000,
	1157, -1000, 474, -1000, 521, -1000, -1000, -1000, -1000, 474,
	987, -1000, 985, 1099, -1000, 981, 59, 23582, -1000, -1000,
	-1000, 1190, -1000, -1000, -1000, 1069, 1096, -1000, 3467, 968,
	966, 964, 23582, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	591, -1000, 16305, 3133, 5, 23582, -1000, 1206, 143, -1000,
	2679, -1000, 896, 391, -1000, -1000, 212, -1000, 1288, -1000,
	3450, 950, -1000, 4548, 4514, 23154, 1301, 1300, 945, 23582,
	23154, -1000, -1000, 4474, 927, 15021, -1000, 23154, 23154, 1148,
	325, -1000, -1000, -1000, 1022, 12453, -1000, -1000, 827, -1000,
	16305, 3133, -152, -1000, -1000, -1000, -1000, 310, -1000, -1000,
	-152, -1000, 367, -1000, -1000, -1000, -1000, -1000, -1000, -152,
	-152, -1000, -1000, -1000, -1000, -1000, -152, -1000, -1000, -1000,
	-1000, 827, 1157, 1157, -1000, 1157, 1160, -1000, 1157, 35,
	1157, 30, 827, 827, 2766, 2605, 2529, 1962, 1148, -148,
	-1000, 645, 15021, 2413, 2247, -1000, 1400, 1078, 1093, -1000,
	-1000, 12881, 827, 958, -1000, 18445, 956, -1000, 1478, 24010,
	15021, -1000, -1000, 15021, 1159, -1000, 15021, -1000, -1000, -1000,
	-1000, 23154, 145, -1000, 15021, 956, 1095, -1000, 23154, 23154,
	23154, 1440, 645, -1000, -1000, -1000, -1000, 5564, -1000, 944,
	-1000, 1157, 1157, 1299, -1000, 1288, -1000, -1000, -1000, 23154,
	-1000, 3133, -109, -1000, -1000, -1000, -1000, -1000, -1000, 474,
	-1000, -1000, -1000, -1000, -1000, 5, 816, 5, 671, -1000,
	655, -1000, -1000, -237, 1156, -1000, 176, 23582, 98, 361,
	-1000, 3467, 3467, 3467, -1000, -1000, 3133, -38, -1000, -1000,
	-1000, 4474, 191, 3467, 3467, -1000, 1185, 408, 1275, 218,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 925, -1000, 400,
	-1000, 260, 191, 4474, 645, 403, 1402, -1000, 9443, 1486,
	21014, -1000, -1000, -1000, 3133, -1000, 6426, -1000, 827, 1469,
	-1000, -1000, -1000, -1000, -1000, 183, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 16305, 16305, 16305, 16305, 16305, 827,
	815, 645, 16305, 16305, 1274, -1000, 1148, -1000, -1000, 170,
	-1000, 23154, 1440, -1000, 645, 645, 23154, 645, 939, -1000,
	1148, 16733, -1000, 18445, 933, 933, 933, -1000, 348, 19301,
	1407, 1407, -1000, 931, -1000, -1000, 474, -1000, 474, 988,
	940, -1000, 19301, -1000, 1454, -1000, 98, -1000, 810, 115,
	120, -1000, 114, 112, 111, 110, 108, -1000, -1000, -1000,
	-1000, 1331, 1327, 1130, 889, -1000, -1000, 903, -1000, -1000,
	1155, 896, -1000, 1153, -1000, 894, -1000, -1000, 23154, -1000,
	191, 1398, 1396, 1148, -1000, 1483, 1468, 1081, 12453, -1000,
	-1000, -1000, 15021, -1000, -1000, 1332, 1332, 1332, 1332, 52,
	-1000, -1000, 1332, 1332, 1529, -1000, 1148, -1000, 176, -1000,
	-1000, 923, -1000, 23154, -1000, -1000, 482, -1000, -1000, -1000,
	348, -1000, 860, 527, 788, -1000, -1000, -1000, 195, -1000,
	-1000, -1000, -1000, 901, -1000, 130, 4420, -1000, -1000, -1000,
	-1000, -1000, -1000, 1342, 1341, 129, 226, 1313, 1320, 1467,
	21014, -1000, -1000, 538, 538, 19301, 1185, 19301, -1000, -1000,
	-1000, 16305, -1000, 172, -1000, 15021, 15021, 1486, -1000, 1125,
	-1000, -1000, -1000, -1000, 827, 133, -212, -1000, -1000, 24010,
	1093, 827, -1000, -1000, -1000, -1000, -1000, 642, -1000, 23582,
	348, 141, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	15021, 15021, 5133, 4420, -1000, -1000, -1000, -1000, 1152, 637,
	1327, 1466, 1324, 1322, -1000, 782, 1081, 893, 1151, 888,
	3133, 882, -1000, 23154, -1000, 645, 1089, -1000, 645, 1483,
	-1000, 827, -1000, 1248, -193, -219, 1084, -1000, -1000, 1150,
	-1000, 348, 137, -1000, 772, 824, 88, 78, 526, -1000,
	-1000, -1000, -1000, -293, -1000, -1000, 1330, -1000, 779, -1000,
	1465, 1464, -1000, 1486, 348, 19301, 348, -1000, 172, 1267,
	15021, -1000, -1000, -1000, 1247, -1000, 23154, -1000, 858, 850,
	715, -1000, 15021, 4420, 1453, 1450, 1444, 1394, 9443, 4291,
	-1000, -1000, 773, 743, 1483, -1000, 864, -1000, -1000, 174,
	-1000, -210, 857, 242, -1000, -1000, 584, 4420, -1000, 794,
	-294, 236, 176, 346, 16305, -1000, -1000, -1000, -1000, -1000,
	-1000, 348, 171, -215, 1189, -1000, -1000, -1000, -1000, -1000,
	-1000, 4420, -1000, -295, 4420, 2917, -1000, -1000, -1000, 4120,
	-1000, -1000, -1000, -1000, 76, -1000, -1000, 3133, -1000, 1148,
	-220, 1188, 1168, 1510, -1000, -296, 3747, -297, 237, 4420,
	594, -1000, 15021, -1000, 346, -1000, 15449, -1000, -1000, 1528,
	-1000, 1525, 589, 589, 3318, 583, 4420, -1000, -298, 231,
	4420, -1000, 792, -1000, 1332, 827, -1000, -1000, -1000, 215,
	812, -1000, -1000, -1000, 3144, -1000, -299, 4420, -1000, -1000,
	-1000, -1000, -1000, 230, 2447, -300, -1000, 216, 4420, -1000,
}
var yyPgo = [...]int{

	0, 1924, 1912, 48, 1911, 152, 1908, 1905, 1903, 18,
	15, 12, 20, 1902, 1640, 1633, 1625, 1623, 1900, 1618,
	1898, 8, 1896, 1895, 1616, 1894, 1893, 1614, 1606, 1602,
	1598, 1890, 1889, 10, 1888, 23, 1884, 5, 116, 129,
	1880, 3, 1873, 1871, 11, 1869, 1867, 1591, 1866, 1865,
	1862, 1861, 69, 1860, 1589, 1581, 1857, 1856, 1579, 1573,
	1855, 1854, 1571, 1569, 1550, 1852, 154, 1850, 1849, 1846,
	256, 74, 119, 1845, 1844, 1842, 96, 60, 1864, 106,
	44, 102, 623, 1841, 17, 42, 1838, 1836, 108, 121,
	1835, 125, 1834, 68, 224, 78, 1833, 1831, 131, 1828,
	1825, 1824, 105, 1818, 1815, 2447, 1813, 1812, 128, 1811,
	47, 36, 38, 1810, 1809, 1808, 1807, 1806, 114, 126,
	1805, 1804, 109, 1803, 57, 1801, 1800, 151, 1799, 1795,
	1771, 113, 39, 1770, 37, 1769, 52, 53, 1767, 98,
	1766, 107, 1762, 1761, 22, 14, 1760, 29, 1759, 46,
	1755, 112, 87, 219, 7, 33, 45, 51, 111, 83,
	30, 24, 99, 77, 64, 28, 1754, 120, 1753, 62,
	124, 101, 104, 123, 1752, 1750, 1747, 916, 1746, 1745,
	97, 1743, 56, 88, 787, 130, 95, 1741, 70, 1735,
	1730, 1727, 1726, 61, 94, 1725, 1724, 75, 110, 92,
	1418, 155, 1897, 93, 122, 1723, 35, 1721, 1720, 3112,
	91, 67, 85, 1719, 82, 32, 41, 1718, 1717, 1716,
	1715, 1714, 1713, 1167, 1709, 1704, 1703, 1702, 81, 63,
	1701, 1700, 100, 80, 1699, 1698, 1697, 1696, 1695, 103,
	54, 118, 1692, 89, 86, 55, 1691, 1688, 1685, 1684,
	66, 34, 1682, 1681, 1679, 76, 65, 1678, 50, 31,
	25, 43, 9, 58, 73, 1675, 26, 1674, 84, 2,
	6, 4, 1673, 1672, 1668, 1666, 1662, 1647, 59, 1645,
	1642, 40, 1630, 1621, 1612, 27, 1608, 1604, 1600, 117,
	90, 1596, 1593, 0, 115, 135, 1576, 1562, 136,
}
var yyR1 = [...]int{

	0, 291, 292, 292, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 65, 3, 3, 8, 4,
	4, 4, 5, 5, 86, 87, 87, 91, 91, 6,
	6, 7, 7, 9, 9, 69, 69, 10, 11, 11,
	11, 11, 295, 295, 100, 100, 98, 98, 99, 99,
	162, 162, 12, 12, 12, 167, 167, 172, 172, 172,
	175, 175, 175, 175, 154, 155, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 2, 276, 276, 277,
	277, 278, 278, 278, 278, 279, 279, 280, 280, 281,
	281, 281, 281, 281, 281, 281, 281, 281, 281, 25,
	196, 196, 45, 45, 46, 46, 46, 150, 150, 150,
	13, 13, 13, 13, 13, 20, 22, 22, 34, 34,
	35, 23, 23, 23, 23, 36, 36, 37, 26, 26,
	26, 26, 26, 26, 43, 43, 43, 42, 42, 41,
	41, 41, 41, 41, 41, 24, 24, 24, 24, 44,
	44, 39, 39, 38, 40, 40, 40, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 27, 27, 27, 27,
	27, 27, 19, 275, 275, 275, 33, 33, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 50, 252, 253, 253, 253,
	253, 253, 253, 253, 253, 240, 240, 241, 216, 216,
	216, 216, 216, 216, 216, 215, 215, 215, 215, 219,
	219, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	218, 218, 218, 218, 218, 218, 218, 218, 220, 220,
	220, 220, 220, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 222, 222,
	222, 222, 222, 222, 222, 222, 239, 239, 223, 223,
	232, 232, 233, 233, 233, 230, 230, 231, 231, 234,
	234, 226, 227, 235, 228, 228, 228, 229, 229, 229,
	238, 238, 238, 238, 224, 242, 242, 262, 262, 261,
	261, 260, 260, 260, 251, 251, 257, 257, 257, 257,
	257, 257, 246, 246, 246, 245, 245, 247, 247, 250,
	250, 259, 259, 258, 258, 243, 243, 243, 263, 263,
	263, 263, 263, 244, 244, 244, 244, 264, 248, 248,
	249, 249, 249, 270, 271, 269, 269, 269, 269, 269,
	115, 115, 115, 254, 254, 254, 255, 255, 255, 256,
	256, 256, 273, 273, 272, 272, 47, 47, 48, 53,
	53, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 149, 149,
	149, 49, 194, 194, 268, 268, 267, 265, 265, 266,
	266, 15, 51, 51, 16, 16, 16, 16, 16, 16,
	16, 17, 17, 54, 55, 55, 55, 55, 55, 55,
	55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
	55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
	55, 55, 55, 83, 181, 181, 179, 179, 182, 182,
	180, 180, 180, 183, 183, 183, 213, 213, 213, 56,
	56, 61, 61, 64, 62, 63, 28, 29, 29, 29,
	29, 30, 195, 195, 59, 59, 60, 60, 60, 60,
	75, 75, 296, 296, 58, 58, 57, 57, 18, 297,
	66, 67, 67, 68, 68, 68, 186, 186, 72, 72,
	72, 70, 70, 70, 71, 71, 77, 77, 81, 81,
	81, 81, 80, 80, 80, 80, 152, 152, 152, 153,
	153, 205, 205, 205, 204, 204, 204, 204, 85, 85,
	88, 88, 89, 89, 89, 89, 92, 135, 135, 109,
	109, 110, 110, 110, 110, 110, 121, 121, 161, 161,
	160, 160, 163, 163, 90, 90, 90, 90, 95, 95,
	96, 96, 97, 97, 193, 193, 211, 211, 211, 101,
	101, 101, 103, 102, 102, 102, 102, 104, 104, 106,
	107, 107, 105, 105, 108, 111, 111, 111, 111, 112,
	112, 82, 82, 82, 82, 82, 82, 82, 178, 178,
	114, 114, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 130, 130, 130, 130, 130, 130, 116, 116,
	116, 116, 116, 116, 116, 76, 76, 131, 131, 131,
	94, 93, 93, 79, 79, 78, 78, 132, 132, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 125, 125, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 298, 298, 127, 126,
	126, 126, 126, 126, 126, 73, 73, 73, 73, 73,
	212, 212, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 142, 142, 74, 74, 140,
	140, 141, 143, 143, 139, 139, 139, 118, 118, 118,
	118, 118, 118, 118, 118, 120, 120, 120, 144, 144,
	133, 133, 84, 145, 145, 146, 147, 147, 148, 148,
	151, 156, 156, 156, 157, 157, 157, 157, 122, 122,
	158, 158, 158, 117, 117, 117, 117, 117, 117, 159,
	159, 159, 159, 164, 164, 134, 134, 137, 137, 136,
	138, 165, 165, 169, 166, 166, 170, 170, 170, 170,
	173, 173, 174, 174, 174, 171, 171, 171, 168, 168,
	168, 208, 208, 208, 176, 176, 187, 187, 184, 184,
	185, 185, 177, 177, 225, 225, 190, 190, 190, 190,
	190, 190, 190, 190, 192, 192, 191, 191, 191, 188,
	188, 188, 189, 189, 206, 206, 202, 202, 207, 207,
	203, 203, 209, 209, 210, 210, 274, 274, 236, 236,
	284, 284, 237, 237, 285, 285, 287, 287, 282, 282,
	283, 283, 286, 286, 31, 288, 288, 289, 289, 290,
	290, 290, 290, 32, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	293, 294, 197, 198, 198, 198,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 11, 4, 7, 5, 1,
	13, 3, 10, 12, 2, 1, 3, 3, 6, 1,
	3, 1, 3, 7, 8, 1, 1, 9, 8, 7,
	6, 6, 1, 1, 1, 3, 1, 3, 1, 3,
	0, 4, 3, 4, 5, 1, 3, 3, 2, 2,
	2, 2, 2, 1, 0, 0, 2, 3, 3, 11,
	7, 9, 5, 5, 15, 11, 4, 0, 1, 1,
	3, 2, 3, 3, 3, 0, 1, 1, 2, 2,
	2, 2, 1, 2, 2, 3, 3, 3, 3, 4,
	0, 3, 1, 1, 1, 1, 1, 0, 2, 2,
	1, 1, 1, 1, 1, 4, 5, 8, 1, 2,
	5, 7, 10, 8, 11, 1, 2, 5, 5, 5,
	5, 6, 3, 5, 1, 1, 1, 1, 3, 1,
	1, 1, 2, 1, 1, 2, 4, 2, 4, 2,
	3, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 4, 3,
	2, 4, 3, 0, 2, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 5, 4, 1, 1, 2,
	3, 4, 3, 3, 3, 3, 3, 3, 0, 2,
	2, 2, 2, 2, 2, 3, 1, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 3, 2, 2, 2, 2, 2, 1, 2,
	2, 2, 1, 4, 4, 3, 3, 2, 4, 5,
	2, 3, 4, 2, 2, 3, 3, 3, 3, 3,
	4, 1, 1, 1, 1, 1, 6, 6, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 3,
	0, 5, 0, 3, 5, 0, 1, 0, 1, 1,
	2, 2, 3, 1, 0, 3, 3, 0, 2, 2,
	2, 1, 2, 1, 2, 5, 4, 0, 1, 1,
	2, 2, 3, 2, 0, 1, 2, 4, 3, 3,
	2, 2, 1, 1, 1, 1, 1, 0, 1, 0,
	1, 1, 3, 3, 3, 3, 3, 1, 10, 11,
	11, 12, 12, 3, 3, 2, 1, 5, 1, 1,
	0, 2, 2, 3, 3, 1, 1, 2, 2, 2,
	0, 1, 2, 0, 1, 3, 1, 2, 3, 1,
	1, 1, 0, 2, 0, 2, 1, 1, 5, 1,
	3, 2, 5, 4, 3, 3, 3, 5, 3, 8,
	10, 3, 3, 3, 3, 3, 5, 4, 5, 1,
	2, 2, 4, 3, 6, 5, 3, 8, 0, 1,
	2, 4, 0, 1, 1, 1, 7, 1, 3, 8,
	8, 3, 3, 5, 4, 6, 4, 4, 4, 4,
	4, 3, 2, 3, 4, 4, 3, 6, 6, 4,
	4, 4, 4, 4, 4, 3, 3, 2, 6, 2,
	4, 4, 4, 5, 7, 6, 5, 4, 2, 4,
	3, 2, 3, 3, 1, 1, 0, 1, 1, 1,
	0, 2, 2, 0, 2, 2, 0, 1, 1, 2,
	1, 1, 1, 2, 1, 1, 2, 3, 4, 4,
	5, 3, 1, 1, 3, 3, 1, 1, 1, 1,
	0, 3, 1, 1, 2, 2, 2, 2, 2, 0,
	2, 0, 2, 1, 2, 2, 0, 1, 0, 1,
	1, 0, 1, 1, 0, 1, 3, 5, 1, 1,
	3, 5, 1, 2, 3, 5, 2, 4, 7, 0,
	1, 0, 1, 2, 1, 1, 1, 1, 1, 3,
	1, 1, 1, 4, 1, 3, 2, 2, 4, 2,
	6, 1, 4, 6, 3, 2, 0, 3, 0, 3,
	1, 3, 1, 3, 4, 4, 4, 3, 2, 4,
	0, 1, 0, 2, 0, 1, 1, 1, 1, 1,
	2, 2, 1, 2, 3, 2, 3, 2, 2, 3,
	2, 1, 1, 3, 3, 0, 5, 5, 5, 0,
	2, 1, 3, 3, 2, 3, 1, 2, 0, 3,
	1, 1, 3, 3, 4, 4, 5, 3, 4, 5,
	6, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	3, 1, 3, 0, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 2, 2, 2, 2, 2, 3, 1, 1,
	1, 1, 1, 1, 5, 6, 6, 6, 5, 5,
	5, 6, 5, 5, 6, 5, 5, 5, 5, 6,
	5, 5, 5, 4, 4, 5, 5, 5, 5, 5,
	4, 4, 4, 4, 4, 4, 3, 6, 6, 6,
	8, 8, 8, 8, 9, 4, 7, 5, 4, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 8, 8, 0, 2, 3, 4,
	4, 4, 4, 4, 4, 0, 3, 4, 7, 3,
	1, 1, 2, 3, 3, 1, 2, 2, 1, 2,
	1, 2, 2, 1, 2, 0, 1, 0, 2, 1,
	2, 4, 0, 2, 1, 3, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 0, 3,
	1, 3, 1, 0, 2, 1, 0, 3, 1, 3,
	2, 0, 1, 1, 0, 2, 4, 4, 1, 1,
	0, 2, 4, 2, 1, 3, 5, 4, 6, 1,
	3, 3, 5, 0, 5, 1, 3, 1, 2, 3,
	1, 1, 3, 3, 1, 3, 1, 2, 2, 3,
	1, 1, 1, 1, 1, 3, 3, 3, 1, 2,
	1, 1, 1, 1, 1, 1, 0, 1, 0, 2,
	0, 3, 0, 1, 0, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 1, 0, 1, 0, 2, 1, 1, 1, 3,
	1, 1, 1, 1, 1, 1, 0, 2, 0, 1,
	0, 4, 0, 1, 0, 3, 0, 3, 0, 4,
	0, 3, 0, 3, 3, 1, 3, 2, 4, 1,
	2, 1, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -291, -1, -3, -8, -9, -10, -11, -12, -14,
	-47, -15, -16, -17, -54, -55, -56, -61, -62, -63,
	-59, -58, -57, -18, -24, -27, -19, -65, -28, -29,
	-30, -31, -32, -4, 6, 7, -69, 9, 10, 30,
	-50, 130, -48, -49, 133, 132, 169, 134, 162, 64,
	225, -64, 228, 229, -296, -195, 167, 168, 136, 212,
	213, 20, 37, 230, 232, 31, 32, -5, -86, -6,
	8, 322, 131, 226, 164, 163, 26, 367, -293, 68,
	-292, 437, -147, 15, -66, -297, -66, -66, -66, -66,
	-66, -252, -193, 105, 68, 23, -189, 143, 86, 313,
	139, -196, -187, -188, 189, 199, 44, 150, 149, 140,
	140, 141, 143, 313, 139, 177, 176, 140, -105, -209,
	71, -200, 364, 153, 379, 380, 131, 186, 225, 239,
	233, 267, 255, 365, 381, 154, 207, 138, 253, 256,
	300, 152, 200, 382, 289, 295, 210, 80, 228, 309,
	383, 155, 204, 206, 205, 194, 211, 36, 165, 251,
	244, 215, 189, 384, 372, 242, 28, 184, 385, 297,
	272, 386, 369, 296, 247, 243, 136, 387, 156, 150,
	179, 388, 273, 277, 389, 301, 390, 391, 392, 142,
	237, 238, 393, 190, 303, 271, 33, 151, 366, 48,
	174, 304, 38, 275, 37, 281, 394, 270, 265, 282,
	395, 396, 397, 398, 269, 236, 264, 202, 53, 137,
	279, 278, 280, 203, 299, 260, 258, 399, 400, 157,
	401, 402, 245, 18, 403, 404, 307, 168, 405, 42,
	406, 407, 408, 172, 409, 410, 411, 298, 274, 276,
	188, 412, 248, 147, 413, 176, 414, 368, 415, 305,
	241, 416, 158, 232, 173, 167, 308, 417, 213, 418,
	419, 420, 159, 421, 422, 423, 229, 230, 291, 208,
	424, 425, 426, 427, 198, 183, 311, 302, 52, 212,
	286, 428, 235, 149, 214, 429, 226, 43, 7, 201,
	292, 209, 199, 262, 175, 430, 431, 249, 250, 268,
	234, 263, 227, 177, 178, 169, 432, 310, 287, 370,
	257, 254, 181, 261, 433, 143, 434, 182, 231, 306,
	252, 288, 140, 123, 256, 300, 130, 290, 291, 297,
	-246, 298, 176, 179, -213, 140, -179, 289, 182, 71,
	141, 142, 33, 302, 301, 293, -209, 144, 231, -75,
	134, 170, -105, -197, -197, -197, -197, -44, 71, 214,
	-44, 30, 71, 71, 36, 71, 230, 292, 292, 6,
	-68, 5, -177, 143, 145, 227, -87, -91, -211, -209,
	-201, 73, 335, 336, 337, 338, 339, 352, 353, 354,
	340, 341, 355, 356, 357, 342, 343, 358, 359, 361,
	362, 360, 180, 346, 345, 344, 347, 348, 51, 350,
	349, 351, -3, -157, 17, 16, -72, 54, 55, -67,
	-80, 114, -82, -209, -113, 88, -119, 29, 71, -200,
	24, -118, -201, -114, -139, -138, -94, 123, 124, 125,
	112, 113, 120, 89, 126, -125, -123, -124, -126, -128,
	-129, 73, 72, 81, 74, 75, 76, 77, 82, 335,
	336, 337, 338, 339, 352, 353, 354, 340, 341, 355,
	356, 357, 342, 343, 358, 359, 361, 362, 360, 346,
	345, 344, 347, 348, 350, 349, 351, 83, 84, -202,
	-136, -293, 58, 59, 139, 323, 324, 325, 326, 363,
	160, 327, 91, 47, 312, 321, 320, 319, 317, 318,
	314, 316, 315, 329, 330, 146, 313, 118, 322, -177,
	-177, 11, -98, -99, -105, -108, -209, -166, 227, -173,
	-170, 301, 302, -171, -174, -168, -139, 281, 410, 411,
	300, 256, 299, -202, -209, -2, -5, 6, -105, -253,
	-241, -244, -203, 155, -264, -202, -199, 152, 71, -200,
	135, 161, 87, 371, 23, 25, 284, 335, 90, 123,
	336, 337, 338, 16, 20, 91, 122, 323, 339, 130,
	62, 314, 316, 312, 313, 290, 29, 10, 26, 163,
	193, 22, 116, 132, 94, 95, 96, 166, 24, 164,
	84, 160, 19, 65, 11, 13, 333, 334, 14, 146,
	145, 107, 191, 141, 60, 8, 126, 27, 104, 56,
	340, 341, 375, 45, 376, 58, 105, 17, 317, 318,
	31, 363, 342, 171, 377, 343, 118, 196, 63, 50,
	88, 82, 34, 85, 66, 86, 15, 192, 61, 331,
	195, 378, 106, 133, 322, 59, 139, 6, 328, 30,
	162, 346, 345, 344, 347, 197, 57, 325, 326, 348,
	435, 140, 93, 329, 330, 144, 83, 5, 44, 32,
	9, 64, 67, 319, 320, 321, 47, 51, 350, 349,
	351, 92, 12, 332, 367, 180, 141, -105, 322, -185,
	146, -185, 177, 176, 140, 97, -51, -105, -184, 146,
	-202, -184, -184, -184, -184, -184, -105, 127, -105, 71,
	30, -183, 105, 12, 313, 139, 71, 176, 179, 140,
	177, 143, -198, -293, -203, -198, -248, 11, 107, 180,
	180, 180, 181, 180, -182, -181, 178, 295, 296, 292,
	294, 12, -83, 105, -198, 71, 230, 144, -60, -3,
	-11, -9, -10, -3, 97, 30, 30, 73, 51, 30,
	-39, -38, -40, 200, 201, 202, 203, 204, 205, 206,
	207, 208, 209, 210, 211, 30, -275, 68, -236, 281,
	71, -288, -289, -105, -66, -7, -5, -293, 21, 22,
	140, -105, 69, 23, -293, -294, 70, -158, 19, 31,
	-122, 74, 77, -148, -151, -82, -209, 50, -70, 21,
	22, 79, 11, -205, 87, 86, 104, -204, 23, 71,
	-200, -201, 73, 127, -82, -116, 107, 88, 105, 106,
	90, 109, 108, 119, 112, 113, 114, 115, 116, 117,
	118, 110, 111, 122, 97, 98, 99, 100, 101, 102,
	103, -178, -293, -94, -293, 128, 129, -119, -119, -119,
	-119, -119, -119, -119, -119, -293, -293, -293, -293, -293,
	-293, -293, -293, -293, -293, -293, -293, -293, -293, -293,
	-293, -293, -293, -293, -293, -293, -293, -293, -293, -293,
	-293, -293, -293, -293, -3, -132, -82, -293, -293, -293,
	-293, -293, -293, -293, -293, -293, -293, -293, -142, -82,
	-293, -298, -127, -293, -298, -127, -298, -127, -298, -293,
	-298, -127, -298, -127, -298, -298, -127, -298, -293, -293,
	-293, -293, -293, -293, -107, 27, -105, -85, -88, -89,
	-90, -109, -93, -293, -105, -94, -105, -98, -295, 69,
	11, 67, -295, 69, 127, 69, -167, -172, 303, 305,
	227, -171, -171, -208, -202, 73, 29, 97, 30, 127,
	-147, -66, 70, 69, -244, 155, 152, -215, -219, -221,
	-220, -222, -217, -218, 253, 256, 260, 258, 254, 259,
	123, 257, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 272, 30, 165, 249, 250, 251, 252, 273,
	274, 275, 276, 277, 278, 279, 280, 233, 255, 365,
	234, 235, 236, 237, 238, 239, 241, 242, 243, 244,
	245, 246, 247, 71, -201, -264, 68, -202, 23, 143,
	71, 88, 71, 71, 71, -185, 71, 69, 144, -98,
	24, 66, -100, -105, 71, 71, 71, 71, -210, -209,
	-199, -198, -183, 73, -82, -185, -185, -198, -198, -198,
	-105, -105, -105, -105, -183, -183, -198, -198, -180, 11,
	107, 11, -180, -180, -82, -119, 71, 71, 230, 71,
	-39, -39, 73, -39, 69, 97, -39, 70, -132, -274,
	436, 69, -290, 23, 305, 306, 282, -72, -3, -105,
	-198, -91, -93, -293, -159, -203, 9, 107, 69, 18,
	69, -156, 25, 26, 127, -120, 51, 74, 77, -186,
	49, -105, -82, -82, -130, 82, 88, 83, 84, -204,
	114, -210, -203, -199, -119, -131, -136, -94, 78, 107,
	105, 106, 90, -119, -119, -119, -119, -119, -119, -119,
	-119, -119, -119, -119, -119, -119, -119, -119, -212, 71,
	73, 71, -118, -118, -202, -70, -78, -81, 114, -82,
	-209, -78, -78, -70, -294, -294, -81, -78, -78, -78,
	-81, -78, -70, -70, -78, -294, -294, -294, -294, -78,
	-78, -78, -78, -70, -78, -78, -78, -70, -294, 69,
	-294, -3, -78, -78, -294, -82, -82, -139, 73, -78,
	-139, 73, -78, -78, -78, -70, -140, -141, 92, -139,
	-294, -119, -202, -202, -78, -79, -78, -78, -78, -162,
	172, -105, 30, 69, -101, -103, -102, -104, 56, 60,
	62, 57, 58, 59, 63, -193, -85, -92, 47, -293,
	-110, 172, -111, 23, -211, 64, 145, 65, -162, 67,
	-85, -105, -85, -108, -209, 114, -170, -173, 69, 304,
	306, 307, -167, -229, 122, 66, 85, -82, -203, -210,
	-157, -72, -254, -255, -256, -203, 73, 74, -241, -242,
	-243, -244, -257, 155, -263, 147, 149, 44, -245, 156,
	141, 45, -216, -230, 287, -223, 68, -223, -223, 261,
	253, 256, 254, -223, -223, -223, -223, -223, -228, 256,
	-228, -228, -228, -228, 254, 68, 68, -223, -223, -223,
	-232, 68, -232, 248, -233, 68, -233, -233, -233, -233,
	-264, -264, -82, -206, 67, -154, -105, -198, 24, -198,
	-45, 186, 161, 68, -105, -105, -105, -105, 69, 71,
	71, -249, 11, 107, -183, -209, -209, -105, -121, 23,
	-183, -76, 166, 71, -38, -118, 70, -106, 27, 73,
	-289, -211, 281, 306, -70, -294, -53, -52, -190, 135,
	132, 133, 137, 138, -267, 284, 131, 256, 80, 29,
	15, 323, 172, 370, 71, 173, -294, 69, 127, 52,
	-122, -122, -151, -176, 19, 11, 47, 47, -71, 57,
	82, 83, 84, 127, -293, -131, -119, -119, -119, -76,
	87, -294, -78, 69, -294, 127, -294, -294, -78, -152,
	331, -152, -294, -294, -294, -294, -294, -294, -78, -78,
	-294, -152, -152, -152, -152, -294, -294, -294, -294, -78,
	-294, -294, -294, -79, -82, -294, -294, -294, 69, 67,
	23, 11, 11, -294, 11, 11, -294, -294, -294, -78,
	-143, -141, 94, -82, -294, -294, 69, 69, -294, -294,
	-294, -294, -117, 30, 47, -3, -293, -293, -165, -169,
	-139, -88, -89, -89, -88, -89, 56, 56, 56, 61,
	56, 61, 56, -102, -211, -294, -294, -135, 185, -293,
	34, -211, -111, 141, 141, 141, -112, 12, -85, -112,
	-112, 127, -172, -175, 308, 305, 311, 71, 73, 127,
	-158, 69, -256, 97, -244, 68, 71, -201, 45, -245,
	141, 45, -245, -250, 71, -250, 45, -234, -226, -227,
	-235, -238, -224, 82, 88, 29, 66, 284, 147, 45,
	44, 80, -231, 288, 74, -228, -228, -223, -223, -223,
	261, -223, -228, -229, 30, -229, -229, -229, -229, -228,
	-239, 73, -239, 74, -232, 74, 70, 66, -202, -3,
	23, -46, 8, 9, 10, -276, -277, -278, 71, 107,
	191, 192, 144, -198, -105, -198, -198, -112, 71, 71,
	-180, -183, 34, -119, -162, 140, -290, -186, 69, -197,
	-194, -268, -245, -273, -243, -244, -272, 148, 156, 172,
	155, -194, -268, 155, 152, -245, 156, 147, 148, -191,
	-245, 144, 23, -194, -194, -251, 97, -194, 172, 23,
	-203, -203, 53, -105, -77, -155, 114, -203, -79, -76,
	87, -119, -294, -81, -153, -152, 114, -210, -153, -153,
	-294, -202, -293, -152, -153, -153, -152, -152, -152, -294,
	-294, -152, -153, -153, -153, -153, -294, -153, -153, -153,
	-294, -214, 123, 253, 165, 251, 244, 271, 258, 286,
	249, 287, -212, -214, -119, -119, -119, -119, 364, -147,
	96, -82, 93, -119, -119, -164, 66, -165, -134, -137,
	-136, -293, -3, -159, 6, 367, -163, -202, -112, 69,
	97, -96, -95, 66, 67, -97, 66, -95, 56, 56,
	-161, 68, 69, -136, -293, -163, -119, -111, -293, -293,
	-293, -147, -82, -112, 305, 309, 310, -255, -256, -259,
	-258, -202, -201, 147, -263, 156, -263, -250, -250, 68,
	82, -119, 9, 45, 45, 73, 70, -229, -229, -228,
	-223, -229, 71, 123, -229, 70, 69, 70, 69, 70,
	69, -115, 385, 88, -105, -154, -154, 66, 70, 69,
	-215, 71, 71, 71, -105, -183, -119, -228, -105, -71,
	-52, 68, -240, 71, -201, -197, -250, -188, 147, 71,
	71, -197, 71, -201, 71, -201, -202, 45, 45, 71,
	-105, -202, -240, 71, -82, -202, -202, -93, 127, -112,
	11, 69, -80, -294, -119, -153, 127, -153, -147, 172,
	-153, -153, -153, -294, -223, -223, -223, -233, -223, 238,
	-223, 238, -294, -294, 19, 19, 19, 19, -293, -74,
	328, -82, 69, 69, 28, -164, 69, -294, -294, -294,
	-294, 69, -147, -169, -82, -82, 68, -82, -160, -202,
	185, -294, -111, -193, -160, -160, -160, -157, 70, 69,
	-223, -223, 45, -160, -124, -229, -228, 73, -228, 74,
	74, 385, 68, -3, -105, -279, -280, -281, 80, 366,
	88, 193, 194, 157, 195, 196, 197, -278, -215, -215,
	-215, -282, -182, -77, -240, -149, 160, 161, -215, -215,
	-206, -247, -245, 45, 71, -192, 144, 23, 144, -149,
	-240, 30, 132, 27, -203, -144, 13, -85, -155, -155,
	114, -294, 16, -228, 71, -119, -119, -119, -119, -119,
	-294, 73, -119, -119, 45, -137, 47, -3, -293, -202,
	-157, -160, 70, 69, -136, -110, -211, -294, -294, -294,
	-261, -260, 67, 151, 80, -258, -156, -156, 70, -229,
	-229, 70, 70, -259, -154, 19, -154, -281, 73, 197,
	193, 197, 197, 197, 197, 198, -283, 38, -285, 39,
	11, 70, 71, -216, -216, 68, -250, 68, 71, -202,
	-149, 29, 29, -293, -145, 14, 16, -112, -80, -132,
	-294, -294, -294, -294, -73, 107, 367, -294, -294, 9,
	-134, -3, 70, -202, -111, -260, 71, -251, 73, 158,
	70, 184, -21, -3, -9, -10, -11, -12, -14, -47,
	-15, -16, -22, -23, -17, -54, -55, -64, -62, -63,
	-59, -58, -26, -24, -27, -19, -28, -29, -30, -25,
	91, 146, 215, 225, 36, 36, 189, 190, -225, 145,
	-286, 43, -284, -237, 42, 16, -85, -259, -206, -259,
	-119, -265, -266, 172, -146, -82, -133, -84, -82, -144,
	-155, -147, -294, 365, 63, 368, -165, -294, 74, -105,
	-262, -261, 185, -154, -82, -82, 71, -43, -207, 218,
	219, 220, -203, -33, -21, -161, 74, -285, 16, -287,
	40, 41, 73, -112, 70, 68, 70, -294, 69, -202,
	69, -145, -294, 53, 366, 369, 68, -150, 187, 188,
	-34, -35, 92, 93, 216, 217, 221, -215, 69, 437,
	38, 73, 16, 16, -144, -262, -259, -262, -266, 47,
	-84, 53, -160, -154, 71, 71, 96, 94, -35, -82,
	-33, 19, 19, 19, 29, -203, 96, -21, 73, 73,
	-145, 70, 174, 367, 70, -13, -20, -12, -9, -10,
	-11, 225, 91, -33, 93, 437, -44, 74, -3, -42,
	-41, 74, -44, 223, 88, 224, 71, -119, -262, 175,
	368, -270, -271, 66, -154, -33, 437, -33, 96, 94,
	-36, -37, 95, -21, 69, 222, -293, 369, -271, 66,
	-270, 66, 10, 9, 437, 96, 437, 146, -33, 96,
	94, -37, -82, -41, -119, 171, -269, 159, 154, 157,
	30, -269, 96, 91, 437, 146, -33, 93, -294, -294,
	153, 29, 82, 96, 437, -33, 146, 96, 437, 146,
}
var yyDef = [...]int{

	34, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 32, 33, -2, 539, 539, 539, 539, 539, 539,
	614, -2, 406, 407, 0, 0, 0, 0, -2, 510,
	511, 512, 514, 515, 530, -2, 1352, 1352, 1352, 0,
	186, 0, 0, 0, 0, 0, 0, 39, 0, 0,
	55, 56, 912, 0, 533, 522, 523, 0, 0, 1350,
	1, 3, 854, 0, 548, 541, 0, 912, 912, 0,
	0, 86, 0, 0, 0, 615, 0, 0, 0, 910,
	910, 0, 0, 933, 0, 907, 929, 930, 931, 0,
	908, 0, 908, 908, 908, 908, 908, 0, 462, 632,
	942, 943, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117,
	1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127,
	1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137,
	1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147,
	1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157,
	1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167,
	1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177,
	1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187,
	1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197,
	1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207,
	1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217,
	1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227,
	1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237,
	1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247,
	1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257,
	1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267,
	1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277,
	1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287,
	1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297,
	1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307,
	1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317,
	1318, 1319, 0, 0, 0, 503, 0, 1353, 1353, 477,
	0, 479, 0, 0, 0, 0, 0, 488, 491, 1353,
	352, 353, 354, 507, 508, 497, 509, 0, 0, 0,
	0, 0, 534, 535, 536, 537, 538, 165, 167, 0,
	187, 0, 190, 193, 948, 516, 0, 0, 973, 539,
	0, 543, 0, 0, 913, 513, 44, 45, 0, 616,
	617, 618, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327,
	1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337,
	1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347,
	1348, 1349, 0, 860, 0, 0, 551, 549, 550, 540,
	0, 562, 571, 0, 641, 0, 646, 648, -2, -2,
	0, 689, 690, 691, 692, 693, 694, 0, 0, 0,
	0, 0, 0, 0, 0, 718, 719, 720, 721, 722,
	723, 827, 828, 829, 830, 831, 832, 833, 834, 1320,
	1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330,
	1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1341,
	1342, 1343, 1344, 1345, 1347, 1348, 1349, 650, 651, 824,
	880, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 815, 0, 786, 786, 786, 786, 786, 786,
	786, 786, 786, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 66, 68, 632, 72, 1300, 0,
	884, -2, -2, 886, 0, 0, 0, -2, -2, -2,
	-2, 1127, -2, 824, 0, 87, 846, 539, 88, 0,
	227, 228, 0, 1139, 376, 940, 941, 1129, 936, 937,
	974, 975, 976, 977, 978, 979, 980, 981, 982, 983,
	984, 985, 986, 987, 988, 989, 990, 991, 992, 993,
	994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003,
	1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013,
	1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023,
	1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033,
	1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043,
	1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053,
	1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063,
	1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073,
	1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083,
	1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093,
	1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103,
	1104, 1105, 1106, 1107, 1108, 1109, 0, 0, 0, 0,
	0, 0, 0, 0, 910, 0, 451, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 461, 0, 463, 1353,
	503, 466, 0, 0, 910, 910, 1353, 1353, 1353, 0,
	0, 0, 475, 1354, 1355, 476, 0, 378, 379, 503,
	503, 1353, 1353, 500, 0, 500, 500, 498, 499, 494,
	495, 0, 490, 0, 492, 517, 0, 0, 524, 526,
	527, 528, 529, 525, 0, 0, 0, 169, 0, 0,
	189, 171, 0, 174, 175, 176, 177, 178, 179, 180,
	181, 182, 183, 184, 185, 0, 192, 0, 946, 949,
	521, 964, 965, 0, 548, 41, 51, 0, 544, 545,
	0, 1353, 0, 0, 0, 50, 1351, 36, 0, 0,
	855, 858, 859, 847, 848, 851, 0, 0, 546, 552,
	553, 542, 0, 563, 0, 0, 0, 572, 0, 574,
	575, 576, 577, 0, 644, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 668, 669, 670, 671, 672, 673,
	674, 647, 0, 661, 0, 0, 0, 710, 711, 712,
	713, 714, 715, 716, 0, 551, 0, 0, 0, 551,
	0, 0, 0, 0, 0, 0, 0, 0, 551, 551,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 551,
	0, 0, 0, 551, 0, 0, 687, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 551, 0, 816,
	0, 769, 778, 0, 770, 779, 771, 780, 772, 0,
	773, 781, 774, 782, 775, 776, 783, 777, 0, 0,
	0, 683, 0, 0, 70, 0, 631, 0, 578, 580,
	581, 582, -2, 0, 635, 681, -2, 0, 0, 0,
	62, 63, 0, 0, 0, 0, 73, 75, 0, 0,
	1300, 887, 888, 327, 901, 902, 903, 0, 899, 0,
	854, 548, 393, 0, 229, 0, 0, 238, 315, 246,
	247, 248, 308, 250, 308, 308, 0, 308, 308, 308,
	308, 308, 324, 324, 324, 324, 324, 291, 292, 293,
	294, 295, 0, 0, 268, 308, 308, 308, 272, 298,
	299, 300, 301, 302, 303, 304, 305, 251, 252, 253,
	254, 255, 256, 257, 258, 259, 310, 310, 312, 312,
	312, 312, 312, 0, 0, 375, 0, 934, 84, 0,
	1353, 0, 1353, 0, 0, 0, 121, 0, 0, 454,
	909, 0, 456, 64, 457, 458, 459, 460, 633, 944,
	945, 464, 465, 504, 505, 0, 0, 469, 470, 471,
	472, 473, 474, 380, 480, 481, 482, 487, 503, 0,
	0, 0, 596, 503, 489, 675, 519, 518, 0, 531,
	166, 168, 170, 188, 0, 0, 191, 194, 0, 0,
	0, 0, 967, 0, 969, 971, 0, 551, 0, 0,
	441, 46, 47, 0, 0, 869, 861, 0, 0, 0,
	0, 850, 852, 853, 0, 0, 835, 0, 0, 554,
	547, 38, 642, 643, 645, 662, 0, 664, 666, 573,
	564, 0, 825, -2, 652, 653, 677, 678, 679, 0,
	0, 0, 0, 675, 657, 0, 695, 696, 697, 698,
	699, 700, 701, 702, 703, 704, 705, 706, 709, 800,
	801, 0, 707, 708, 717, 0, 0, 685, 558, 559,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 683, 680, 0,
	879, 0, 0, 0, 756, 0, 0, 692, 827, 0,
	692, 827, 0, 0, 0, 0, 822, 819, 0, 0,
	787, 0, 0, 0, 0, 0, 684, 0, 0, 0,
	0, 630, 0, 0, 0, 0, 0, 0, 619, 0,
	0, 622, 0, 0, 0, 0, 0, 0, 0, 0,
	589, 1231, 591, 0, 635, 0, 0, 0, 639, 0,
	639, 67, 639, 69, 0, 634, 885, 0, 0, 0,
	78, 79, 74, 889, 0, 895, 896, 897, 825, 0,
	860, 551, 226, 394, 396, 399, 400, 401, 230, 232,
	233, 234, 0, 1139, 367, 1241, 1281, -2, 359, 1166,
	-2, -2, 237, 317, 316, 249, 0, 324, 324, 308,
	308, 308, 308, 277, 324, 280, 283, 284, 327, 0,
	327, 327, 327, 327, 324, 0, 0, 269, 270, 271,
	260, 0, 261, 310, 263, 0, 264, 265, 266, 267,
	373, 374, 0, 0, 0, 0, 0, 92, 911, 93,
	0, 122, 123, 97, 225, 0, 452, 1353, 0, 1353,
	1353, 639, 0, 0, 483, 501, 502, 500, 503, 0,
	486, 493, 0, 520, 172, 173, 195, 70, 0, 947,
	966, 0, 970, 972, 546, 52, 408, 409, 1352, -2,
	442, 926, 442, 442, 429, 344, 442, 916, 917, 918,
	919, 920, 921, 922, 923, 0, 0, 0, 0, 0,
	856, 857, 849, 0, 904, 905, 836, 837, 85, 555,
	663, 665, 667, 0, 683, 654, 675, 658, 0, 655,
	0, 649, 0, 0, 569, 0, 569, 569, 0, 743,
	0, 744, 0, 569, 569, 0, 0, 0, 0, 0,
	0, 750, 751, 752, 753, 569, 569, 569, 569, 0,
	569, 569, 569, 0, 688, -2, 754, 755, 0, 0,
	0, 0, 0, 793, 0, 0, 794, 0, 765, 846,
	0, 820, 0, 0, 768, 788, 0, 0, 789, 790,
	791, 792, 873, 0, 0, 864, 0, 0, 639, 881,
	0, 579, 610, 612, 0, 607, 620, 621, 623, 0,
	625, 0, 627, 628, 598, 585, 682, 586, 0, 0,
	0, 635, 595, 0, 0, 0, 846, 0, 639, 60,
	61, 0, 76, 77, 0, 0, 83, 328, 329, 0,
	96, 0, 397, 0, 231, 0, 0, 0, 346, 359,
	355, 356, 359, 350, 360, 351, 0, 239, 240, 241,
	242, 243, 244, 319, 0, 0, 0, 323, 0, 331,
	333, 0, 245, 318, 0, 327, 327, 324, 275, 276,
	308, 281, 327, 285, 0, 286, 287, 288, 289, 327,
	0, 306, 0, 0, 262, 0, 390, 0, 935, 84,
	84, 0, 124, 125, 126, 0, 98, 99, 0, 0,
	0, 0, 0, 455, 65, 467, 468, 478, 381, 382,
	503, 485, 0, 676, 324, 0, 968, 554, 0, 411,
	0, 1352, 359, 0, 430, 431, 0, 443, 444, 445,
	0, 0, 1352, 0, 0, 0, 444, 0, 0, 0,
	0, 927, 928, 0, 0, 0, 345, 0, 0, 0,
	871, 870, 862, 37, 639, 0, 565, 826, 0, 656,
	0, 659, 569, 686, 728, 570, 560, 0, 729, 730,
	569, 566, 846, 745, 732, 733, 746, 747, 748, 569,
	569, 749, 737, 736, 735, 738, 569, 741, 740, 742,
	724, 0, 308, 308, 805, 308, 312, 808, 308, 810,
	308, 813, 0, 0, 0, 0, 0, 0, 0, 817,
	767, 823, 0, 0, 0, 53, 0, 873, 863, 875,
	877, 0, 0, 0, -2, 1108, 0, 602, 846, 0,
	0, 604, 611, 0, 0, 605, 0, 606, 624, 626,
	583, 0, 0, 587, 0, 0, -2, 594, 0, 0,
	0, 854, 640, 59, 80, 81, 82, 395, 398, 0,
	361, 308, 308, 0, 365, 0, 366, 348, 349, 0,
	320, 321, 0, 330, 332, 334, 309, 273, 274, 327,
	282, 278, 325, 326, 290, 324, 0, 324, 0, 313,
	0, 377, 391, 0, 0, 90, 0, 0, 105, 0,
	101, 0, 0, 0, 453, 484, 597, 958, 629, 85,
	410, 0, 438, 0, 0, 414, 934, 357, 0, -2,
	415, 416, 421, 422, 423, 424, 425, 0, 436, 0,
	418, 0, 438, 0, 433, 0, 0, 48, 0, 838,
	0, 85, 85, 725, 660, 727, 0, 731, 0, 0,
	726, 734, 739, 757, 802, 324, 806, 807, 809, 811,
	812, 814, 759, 758, 0, 0, 0, 0, 0, 0,
	0, 821, 0, 0, 0, 54, 0, 878, -2, 0,
	71, 0, 854, 882, 883, 608, 0, 613, 0, 600,
	0, 635, 592, 0, 0, 0, 0, 58, 336, 0,
	851, 851, 347, 0, 322, 279, 327, 307, 327, 0,
	0, 392, 0, 84, 0, 84, 106, 107, 0, 0,
	0, 112, 0, 0, 0, 0, 0, 100, 102, 103,
	104, 960, 954, 0, 0, 413, 439, 0, 238, 238,
	0, 359, 358, 0, 432, 0, 924, 925, 0, 427,
	438, 0, 0, 0, 872, 843, 0, 639, 0, 556,
	561, 567, 0, 803, 804, 0, 0, 0, 0, 795,
	766, 818, 0, 0, 0, 876, 0, 867, 0, 603,
	57, 0, 599, 0, 588, 590, 635, 636, 637, 638,
	335, 339, 0, 344, 0, 362, 363, 364, 0, 296,
	297, 311, 314, 0, 91, 0, 0, 108, 109, 110,
	111, 113, 114, 0, 0, 0, 914, 962, -2, 0,
	0, 412, 440, 235, 236, 0, 934, 0, 417, 426,
	428, 0, 435, 0, 42, 0, 0, 838, 85, 846,
	760, 762, 761, 763, 0, 0, 0, 784, 785, 0,
	866, 0, 609, 601, 593, 340, 341, 0, 343, 0,
	337, 0, 84, 198, 199, 200, 201, 202, 203, 204,
	205, 206, 207, 208, 209, 210, 211, 212, 213, 214,
	215, 216, 217, 218, 219, 220, 221, 222, 223, 224,
	0, 0, 0, 0, 115, 116, 117, 118, 598, 0,
	954, 0, 956, 0, 953, 0, 639, 0, 0, 0,
	434, 0, 447, 0, 844, 845, 839, 840, 842, 843,
	557, 0, 764, 0, 0, 0, 874, -2, 342, 0,
	89, 338, 127, 95, 0, 0, 936, 0, 0, 154,
	155, 156, 938, 0, 196, 35, 0, 961, 0, 959,
	0, 0, 955, 838, 337, 0, 337, 446, 0, 0,
	0, 43, 568, 796, 0, 799, 0, 84, 0, 0,
	0, 138, 0, 0, 0, 0, 0, 152, 0, 0,
	915, 963, 0, 0, 843, 419, 0, 437, 448, 0,
	841, 797, 0, 0, 128, 129, 0, 0, 139, 0,
	0, 0, 0, 0, 0, 939, 119, 197, 957, 951,
	40, 337, 0, 0, 368, 84, 130, 131, 132, 133,
	134, 0, 136, 0, 0, 0, 148, 149, 150, 0,
	157, 159, 160, 161, 0, 163, 164, 153, 420, 0,
	0, 369, 370, 0, 94, 0, 0, 0, 0, 0,
	0, 145, 0, 151, 0, 162, 0, 798, 371, 0,
	372, 0, 0, 0, 0, 0, 140, 141, 0, 0,
	0, 146, 0, 158, 0, 0, 383, 385, 386, 0,
	0, 384, 135, 137, 0, 143, 0, 0, 449, 450,
	387, 388, 389, 0, 0, 0, 142, 0, 147, 144,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 89, 3, 3, 3, 117, 109, 3,
	68, 70, 114, 112, 69, 113, 127, 115, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 437,
	98, 97, 99, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 119, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 108, 3, 120,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 87, 88, 90, 91, 92, 93, 94, 95,
	96, 100, 101, 102, 103, 104, 105, 106, 107, 110,
	111, 116, 118, 121, 122, 123, 124, 125, 126, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:421
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:426
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:427
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:431
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 34:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:464
		{
			setParseTree(yylex, nil)
		}
	case 35:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:470
		{
			yyVAL.statement = &Load{Local: yyDollar[3].boolVal, Infile: yyDollar[4].str, Table: yyDollar[5].tableName, Partition: yyDollar[6].partitions, Charset: yyDollar[7].str, Fields: yyDollar[8].Fields, Lines: yyDollar[9].Lines, IgnoreNum: yyDollar[10].sqlVal, Columns: yyDollar[11].columns}
		}
	case 36:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:476
		{
			yyDollar[1].selStmt.SetOrderBy(yyDollar[2].orderBy)
			yyDollar[1].selStmt.SetLimit(yyDollar[3].limit)
			yyDollar[1].selStmt.SetLock(yyDollar[4].str)
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:483
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 38:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:489
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:496
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 40:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sql.y:500
		{
			yyVAL.selStmt = &Select{CommonTableExprs: yyDollar[1].tableExprs, Comments: Comments(yyDollar[3].bytes2), Cache: yyDollar[4].str, Distinct: yyDollar[5].str, Hints: yyDollar[7].str, SelectExprs: yyDollar[8].selectExprs, From: yyDollar[10].tableExprs, Where: NewWhere(WhereStr, yyDollar[11].expr), GroupBy: GroupBy(yyDollar[12].exprs), Having: NewWhere(HavingStr, yyDollar[13].expr)}
			if yyDollar[6].byt == 1 {
				yyVAL.selStmt.(*Select).CalcFoundRows = true
			}
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:507
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt}
		}
	case 42:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:513
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[6].str, SelectExprs: yyDollar[7].selectExprs, From: TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
			if yyDollar[5].byt == 1 {
				yyVAL.selStmt.(*Select).CalcFoundRows = true
			}
		}
	case 43:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:520
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[6].str, SelectExprs: yyDollar[7].selectExprs, From: yyDollar[9].tableExprs, Where: NewWhere(WhereStr, yyDollar[10].expr), GroupBy: GroupBy(yyDollar[11].exprs), Having: NewWhere(HavingStr, yyDollar[12].expr)}
			if yyDollar[5].byt == 1 {
				yyVAL.selStmt.(*Select).CalcFoundRows = true
			}
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:529
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:535
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:539
		{
			yyVAL.tableExprs = append(yyDollar[1].tableExprs, yyDollar[3].tableExpr)
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:545
		{
			yyVAL.tableExpr = &CommonTableExpr{&AliasedTableExpr{Expr: yyDollar[3].simpleTableExpr, As: yyDollar[1].tableIdent}, nil}
		}
	case 48:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:549
		{
			yyVAL.tableExpr = &CommonTableExpr{&AliasedTableExpr{Expr: yyDollar[6].simpleTableExpr, As: yyDollar[1].tableIdent}, yyDollar[3].columns}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:555
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:559
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:565
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:569
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 53:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:575
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].assignExprs)
			yyVAL.statement = ins
		}
	case 54:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:587
		{
			cols := make(Columns, 0, len(yyDollar[7].assignExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].assignExprs))
			for _, updateList := range yyDollar[7].assignExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].assignExprs)}
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:599
		{
			yyVAL.str = InsertStr
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:603
		{
			yyVAL.str = ReplaceStr
		}
	case 57:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:609
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].assignExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 58:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:615
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 59:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:619
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 60:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:623
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 61:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:627
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:632
		{
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:633
		{
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:637
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName.ToViewName()}
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:641
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName.ToViewName())
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:647
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:651
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:657
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:661
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:666
		{
			yyVAL.partitions = nil
		}
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:670
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:676
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setVarExprs}
		}
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:680
		{
			for i := 0; i < len(yyDollar[4].setVarExprs); i++ {
				yyDollar[4].setVarExprs[i].Scope = SetScope_None
			}
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setVarExprs}
		}
	case 74:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:687
		{
			for i := 0; i < len(yyDollar[5].setVarExprs); i++ {
				yyDollar[5].setVarExprs[i].Scope = yyDollar[3].setScope
			}
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[5].setVarExprs}
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:696
		{
			yyVAL.setVarExprs = SetVarExprs{yyDollar[1].setVarExpr}
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:700
		{
			yyVAL.setVarExprs = append(yyVAL.setVarExprs, yyDollar[3].setVarExpr)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:706
		{
			yyVAL.setVarExpr = &SetVarExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:710
		{
			yyVAL.setVarExpr = &SetVarExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:714
		{
			yyVAL.setVarExpr = &SetVarExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:720
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:724
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:728
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:732
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:737
		{
			yyVAL.int = yyPosition(yylex)
		}
	case 85:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:742
		{
			yyVAL.int = yyOldPosition(yylex)
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:748
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			if len(yyDollar[1].ddl.TableSpec.Constraints) > 0 {
				yyDollar[1].ddl.ConstraintAction = AddStr
			}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:757
		{
			yyDollar[1].ddl.OptSelect = &OptSelect{Select: yyDollar[3].selStmt}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:762
		{
			yyDollar[1].ddl.OptLike = &OptLike{LikeTable: yyDollar[3].tableName}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 89:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:767
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: yyDollar[4].colIdent, Using: yyDollar[5].colIdent, Type: yyDollar[2].str, Columns: yyDollar[9].indexColumns, Options: yyDollar[11].indexOptions}}
		}
	case 90:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:771
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[3].tableName.ToViewName(), ViewExpr: yyDollar[6].selStmt, SubStatementPositionStart: yyDollar[5].int, SubStatementPositionEnd: yyDollar[7].int - 1}
		}
	case 91:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:775
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[5].tableName.ToViewName(), ViewExpr: yyDollar[8].selStmt, SubStatementPositionStart: yyDollar[7].int, SubStatementPositionEnd: yyDollar[9].int - 1, OrReplace: true}
		}
	case 92:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:779
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes), IfNotExists: ne}
		}
	case 93:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:787
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes), IfNotExists: ne}
		}
	case 94:
		yyDollar = yyS[yypt-15 : yypt+1]
//line sql.y:795
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[8].tableName, TriggerSpec: &TriggerSpec{Name: string(yyDollar[4].bytes), Time: yyDollar[5].str, Event: yyDollar[6].str, Order: yyDollar[12].triggerOrder, Body: yyDollar[14].statement}, SubStatementPositionStart: yyDollar[13].int, SubStatementPositionEnd: yyDollar[15].int - 1}
		}
	case 95:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:799
		{
			yyVAL.statement = &DDL{Action: CreateStr, ProcedureSpec: &ProcedureSpec{Name: string(yyDollar[4].bytes), Definer: yyDollar[2].str, Params: yyDollar[6].procedureParams, Characteristics: yyDollar[8].characteristics, Body: yyDollar[10].statement}, SubStatementPositionStart: yyDollar[9].int, SubStatementPositionEnd: yyDollar[11].int - 1}
		}
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:806
		{
			yyDollar[1].selStmt.SetOrderBy(yyDollar[2].orderBy)
			yyDollar[1].selStmt.SetLimit(yyDollar[3].limit)
			yyDollar[1].selStmt.SetLock(yyDollar[4].str)
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:814
		{
			yyVAL.procedureParams = nil
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:818
		{
			yyVAL.procedureParams = yyDollar[1].procedureParams
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:824
		{
			yyVAL.procedureParams = []ProcedureParam{yyDollar[1].procedureParam}
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:828
		{
			yyVAL.procedureParams = append(yyVAL.procedureParams, yyDollar[3].procedureParam)
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:834
		{
			yyVAL.procedureParam = ProcedureParam{Direction: ProcedureParamDirection_In, Name: string(yyDollar[1].bytes), Type: yyDollar[2].columnType}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:838
		{
			yyVAL.procedureParam = ProcedureParam{Direction: ProcedureParamDirection_In, Name: string(yyDollar[2].bytes), Type: yyDollar[3].columnType}
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:842
		{
			yyVAL.procedureParam = ProcedureParam{Direction: ProcedureParamDirection_Inout, Name: string(yyDollar[2].bytes), Type: yyDollar[3].columnType}
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:846
		{
			yyVAL.procedureParam = ProcedureParam{Direction: ProcedureParamDirection_Out, Name: string(yyDollar[2].bytes), Type: yyDollar[3].columnType}
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:851
		{
			yyVAL.characteristics = nil
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:855
		{
			yyVAL.characteristics = yyDollar[1].characteristics
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:861
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:865
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[2].characteristic)
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:871
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_Comment, Comment: string(yyDollar[2].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:875
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_LanguageSql}
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:879
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_NotDeterministic}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:883
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_Deterministic}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:887
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_ContainsSql}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:891
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_NoSql}
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:895
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_ReadsSqlData}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:899
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_ModifiesSqlData}
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:903
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_SqlSecurityDefiner}
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:907
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_SqlSecurityInvoker}
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:913
		{
			yyVAL.statement = &BeginEndBlock{Statements: yyDollar[2].statements}
		}
	case 120:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:918
		{
			yyVAL.str = ""
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:922
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:928
		{
			yyVAL.str = BeforeStr
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:932
		{
			yyVAL.str = AfterStr
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:938
		{
			yyVAL.str = InsertStr
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:942
		{
			yyVAL.str = UpdateStr
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:946
		{
			yyVAL.str = DeleteStr
		}
	case 127:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:951
		{
			yyVAL.triggerOrder = nil
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:955
		{
			yyVAL.triggerOrder = &TriggerOrder{PrecedesOrFollows: FollowsStr, OtherTriggerName: string(yyDollar[2].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:959
		{
			yyVAL.triggerOrder = &TriggerOrder{PrecedesOrFollows: PrecedesStr, OtherTriggerName: string(yyDollar[2].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:965
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 135:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:975
		{
			yyVAL.statement = &BeginEndBlock{Statements: yyDollar[2].statements}
		}
	case 136:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:981
		{
			yyVAL.statement = &CaseStatement{Expr: yyDollar[2].expr, Cases: yyDollar[3].caseStatementCases}
		}
	case 137:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:985
		{
			yyVAL.statement = &CaseStatement{Expr: yyDollar[2].expr, Cases: yyDollar[3].caseStatementCases, Else: yyDollar[5].statements}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:991
		{
			yyVAL.caseStatementCases = []CaseStatementCase{yyDollar[1].caseStatementCase}
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:995
		{
			yyVAL.caseStatementCases = append(yyVAL.caseStatementCases, yyDollar[2].caseStatementCase)
		}
	case 140:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1001
		{
			yyVAL.caseStatementCase = CaseStatementCase{Case: yyDollar[2].expr, Statements: yyDollar[4].statements}
		}
	case 141:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1007
		{
			conds := []IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}
			yyVAL.statement = &IfStatement{Conditions: conds}
		}
	case 142:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1012
		{
			conds := []IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}
			yyVAL.statement = &IfStatement{Conditions: conds, Else: yyDollar[7].statements}
		}
	case 143:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1017
		{
			conds := yyDollar[6].ifStatementConditions
			conds = append([]IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}, conds...)
			yyVAL.statement = &IfStatement{Conditions: conds}
		}
	case 144:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1023
		{
			conds := yyDollar[6].ifStatementConditions
			conds = append([]IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}, conds...)
			yyVAL.statement = &IfStatement{Conditions: conds, Else: yyDollar[8].statements}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1031
		{
			yyVAL.ifStatementConditions = []IfStatementCondition{yyDollar[1].ifStatementCondition}
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1035
		{
			yyVAL.ifStatementConditions = append(yyVAL.ifStatementConditions, yyDollar[2].ifStatementCondition)
		}
	case 147:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1041
		{
			yyVAL.ifStatementCondition = IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}
		}
	case 148:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1047
		{
			yyVAL.statement = &Declare{Condition: &DeclareCondition{Name: string(yyDollar[2].bytes), SqlStateValue: string(yyDollar[5].bytes)}}
		}
	case 149:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1051
		{
			yyVAL.statement = &Declare{Condition: &DeclareCondition{Name: string(yyDollar[2].bytes), MysqlErrorCode: NewIntVal(yyDollar[5].bytes)}}
		}
	case 150:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1055
		{
			yyVAL.statement = &Declare{Cursor: &DeclareCursor{Name: string(yyDollar[2].bytes), SelectStmt: yyDollar[5].selStmt}}
		}
	case 151:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1059
		{
			yyVAL.statement = &Declare{Handler: &DeclareHandler{Action: yyDollar[2].declareHandlerAction, ConditionValues: yyDollar[5].declareHandlerConditions, Statement: yyDollar[6].statement}}
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1063
		{
			yyVAL.statement = &Declare{Variables: &DeclareVariables{Names: yyDollar[2].colIdents, VarType: yyDollar[3].columnType}}
		}
	case 153:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1067
		{
			yyDollar[3].columnType.Default = yyDollar[5].expr
			yyVAL.statement = &Declare{Variables: &DeclareVariables{Names: yyDollar[2].colIdents, VarType: yyDollar[3].columnType}}
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1074
		{
			yyVAL.declareHandlerAction = DeclareHandlerAction_Continue
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1078
		{
			yyVAL.declareHandlerAction = DeclareHandlerAction_Exit
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1082
		{
			yyVAL.declareHandlerAction = DeclareHandlerAction_Undo
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1088
		{
			yyVAL.declareHandlerConditions = []DeclareHandlerCondition{yyDollar[1].declareHandlerCondition}
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1092
		{
			yyVAL.declareHandlerConditions = append(yyVAL.declareHandlerConditions, yyDollar[3].declareHandlerCondition)
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1098
		{
			yyVAL.declareHandlerCondition = DeclareHandlerCondition{ValueType: DeclareHandlerCondition_MysqlErrorCode, MysqlErrorCode: NewIntVal(yyDollar[1].bytes)}
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1102
		{
			yyVAL.declareHandlerCondition = DeclareHandlerCondition{ValueType: DeclareHandlerCondition_SqlState, String: string(yyDollar[1].bytes)}
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1106
		{
			yyVAL.declareHandlerCondition = DeclareHandlerCondition{ValueType: DeclareHandlerCondition_SqlWarning}
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1110
		{
			yyVAL.declareHandlerCondition = DeclareHandlerCondition{ValueType: DeclareHandlerCondition_NotFound}
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1114
		{
			yyVAL.declareHandlerCondition = DeclareHandlerCondition{ValueType: DeclareHandlerCondition_SqlException}
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1118
		{
			yyVAL.declareHandlerCondition = DeclareHandlerCondition{ValueType: DeclareHandlerCondition_ConditionName, String: string(yyDollar[1].bytes)}
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1124
		{
			yyVAL.statement = &Signal{SqlStateValue: string(yyDollar[2].bytes)}
		}
	case 166:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1128
		{
			yyVAL.statement = &Signal{SqlStateValue: string(yyDollar[2].bytes), Info: yyDollar[4].signalInfos}
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1132
		{
			yyVAL.statement = &Signal{ConditionName: string(yyDollar[2].bytes)}
		}
	case 168:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1136
		{
			yyVAL.statement = &Signal{ConditionName: string(yyDollar[2].bytes), Info: yyDollar[4].signalInfos}
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1142
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1146
		{
			yyVAL.bytes = yyDollar[3].bytes
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1152
		{
			yyVAL.signalInfos = []SignalInfo{yyDollar[1].signalInfo}
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1156
		{
			yyVAL.signalInfos = append(yyVAL.signalInfos, yyDollar[3].signalInfo)
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1162
		{
			yyVAL.signalInfo = SignalInfo{ConditionItemName: yyDollar[1].signalConditionItemName, Value: yyDollar[3].expr.(*SQLVal)}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1168
		{
			yyVAL.signalConditionItemName = SignalConditionItemName_ClassOrigin
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1172
		{
			yyVAL.signalConditionItemName = SignalConditionItemName_SubclassOrigin
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1176
		{
			yyVAL.signalConditionItemName = SignalConditionItemName_MessageText
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1180
		{
			yyVAL.signalConditionItemName = SignalConditionItemName_MysqlErrno
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1184
		{
			yyVAL.signalConditionItemName = SignalConditionItemName_ConstraintCatalog
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1188
		{
			yyVAL.signalConditionItemName = SignalConditionItemName_ConstraintSchema
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1192
		{
			yyVAL.signalConditionItemName = SignalConditionItemName_ConstraintName
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1196
		{
			yyVAL.signalConditionItemName = SignalConditionItemName_CatalogName
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1200
		{
			yyVAL.signalConditionItemName = SignalConditionItemName_SchemaName
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1204
		{
			yyVAL.signalConditionItemName = SignalConditionItemName_TableName
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1208
		{
			yyVAL.signalConditionItemName = SignalConditionItemName_ColumnName
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1212
		{
			yyVAL.signalConditionItemName = SignalConditionItemName_CursorName
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1218
		{
			yyVAL.statement = &Resignal{}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1222
		{
			yyVAL.statement = &Resignal{Signal{SqlStateValue: string(yyDollar[2].bytes)}}
		}
	case 188:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1226
		{
			yyVAL.statement = &Resignal{Signal{SqlStateValue: string(yyDollar[2].bytes), Info: yyDollar[4].signalInfos}}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1230
		{
			yyVAL.statement = &Resignal{Signal{Info: yyDollar[3].signalInfos}}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1234
		{
			yyVAL.statement = &Resignal{Signal{ConditionName: string(yyDollar[2].bytes)}}
		}
	case 191:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1238
		{
			yyVAL.statement = &Resignal{Signal{ConditionName: string(yyDollar[2].bytes), Info: yyDollar[4].signalInfos}}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1244
		{
			yyVAL.statement = &Call{FuncName: string(yyDollar[2].bytes), Params: yyDollar[3].exprs}
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1249
		{
			yyVAL.exprs = nil
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1253
		{
			yyVAL.exprs = nil
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1257
		{
			yyVAL.exprs = yyDollar[2].exprs
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1263
		{
			yyVAL.statements = Statements{yyDollar[1].statement}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1267
		{
			yyVAL.statements = append(yyVAL.statements, yyDollar[3].statement)
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1273
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 225:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1305
		{
			var ne bool
			if yyDollar[4].byt != 0 {
				ne = true
			}

			var neTemp bool
			if yyDollar[2].byt != 0 {
				neTemp = true
			}

			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[5].tableName, IfNotExists: ne, Temporary: neTemp}
			setDDL(yylex, yyVAL.ddl)
		}
	case 226:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1322
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1329
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1334
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddConstraint(yyDollar[1].constraintDefinition)
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1339
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
			yyVAL.TableSpec.AddConstraint(yyDollar[2].constraintDefinition)
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1345
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1349
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
			yyVAL.TableSpec.AddConstraint(yyDollar[4].constraintDefinition)
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1354
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1358
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1362
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1368
		{
			if err := yyDollar[2].columnType.merge(yyDollar[3].columnType); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1376
		{
			if err := yyDollar[2].columnType.merge(yyDollar[3].columnType); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1386
		{
			if err := yyDollar[2].columnType.merge(yyDollar[3].columnType); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 238:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1395
		{
			yyVAL.columnType = ColumnType{}
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1399
		{
			opt := ColumnType{NotNull: yyDollar[2].boolVal, sawnull: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1408
		{
			opt := ColumnType{Default: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1417
		{
			opt := ColumnType{OnUpdate: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1426
		{
			opt := ColumnType{Autoincrement: yyDollar[2].boolVal, sawai: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1435
		{
			opt := ColumnType{KeyOpt: yyDollar[2].colKeyOpt}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1444
		{
			opt := ColumnType{Comment: yyDollar[2].sqlVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1455
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1466
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1471
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1477
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1481
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1485
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1489
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1493
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1497
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1501
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1505
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1509
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1515
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1521
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1527
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1533
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1539
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1545
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1551
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1557
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1565
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1569
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1573
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1577
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1581
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1587
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1591
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1595
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1599
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1603
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1607
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 279:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1611
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1615
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1619
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1623
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Length: yyDollar[4].sqlVal}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1627
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1631
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1635
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1639
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1643
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1647
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1651
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1655
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1659
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1663
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1667
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1671
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1675
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1679
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 297:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1684
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1690
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1694
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1698
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1702
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1706
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1710
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1714
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1718
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1724
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[1].bytes))
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1729
		{
			yyVAL.strs = append(yyDollar[1].strs, string(yyDollar[3].bytes))
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1734
		{
			yyVAL.sqlVal = nil
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1738
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1743
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 311:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1747
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1755
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1759
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 314:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1765
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1773
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1777
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1782
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1786
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1793
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1797
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1803
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1809
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1815
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1820
		{
			yyVAL.str = ""
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1824
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1828
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1833
		{
			yyVAL.str = ""
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1837
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1841
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1847
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1851
		{
			yyVAL.colKeyOpt = colKey
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1855
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1859
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1865
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 335:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1871
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 336:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1875
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1880
		{
			yyVAL.indexOptions = nil
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1884
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1890
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1894
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1900
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1904
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1909
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1915
		{
			yyVAL.str = ""
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1919
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1925
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 347:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1929
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Primary: true, Unique: true}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1933
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1937
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1941
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1945
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1951
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1955
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1959
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1965
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1969
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 357:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1974
		{
			yyVAL.str = ""
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1978
		{
			yyVAL.str = yyDollar[1].str
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1983
		{
			yyVAL.str = ""
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1987
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1993
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1997
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2003
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal, Order: yyDollar[3].str}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2007
		{
			yyVAL.indexColumn = &IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].sqlVal, Order: yyDollar[3].str}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2013
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2017
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2021
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 368:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:2027
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 369:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:2031
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 370:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:2035
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 371:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:2039
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 372:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:2043
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[12].ReferenceAction, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2049
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2053
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2057
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[2].constraintInfo}
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2061
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 377:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2067
		{
			yyVAL.constraintInfo = &CheckConstraintDefinition{Expr: yyDollar[3].expr, Enforced: yyDollar[5].boolean}
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2073
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2077
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2082
		{
			yyVAL.str = ""
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2086
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2090
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2096
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2102
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2108
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2112
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2116
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2120
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2124
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 390:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2129
		{
			yyVAL.boolean = true
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2133
		{
			yyVAL.boolean = true
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2137
		{
			yyVAL.boolean = false
		}
	case 393:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2142
		{
			yyVAL.str = ""
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2146
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2150
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2158
		{
			yyVAL.str = yyDollar[1].str
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2162
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2166
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2172
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2176
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2180
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2185
		{
			yyVAL.str = ""
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2189
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2194
		{
			yyVAL.str = string("")
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2198
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 408:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2208
		{
			for i := 0; i < len(yyDollar[5].ddls); i++ {
				if yyDollar[5].ddls[i].Action == RenameStr {
					yyDollar[5].ddls[i].FromTables = append(TableNames{yyDollar[4].tableName}, yyDollar[5].ddls[i].FromTables...)
				} else {
					yyDollar[5].ddls[i].Table = yyDollar[4].tableName
				}
			}
			yyVAL.statement = &MultiAlterDDL{Table: yyDollar[4].tableName, Statements: yyDollar[5].ddls}
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2221
		{
			yyVAL.ddls = []*DDL{yyDollar[1].ddl}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2225
		{
			yyVAL.ddls = append(yyVAL.ddls, yyDollar[3].ddl)
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2231
		{
			yyVAL.ddl = &DDL{Action: AlterStr}
		}
	case 412:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2235
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddColumn(yyDollar[4].columnDefinition)
			ddl.Column = yyDollar[4].columnDefinition.Name
			yyVAL.ddl = ddl
		}
	case 413:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2242
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[4].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[3].columnDefinition)
			ddl.Column = yyDollar[3].columnDefinition.Name
			yyVAL.ddl = ddl
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2249
		{
			yyVAL.ddl = &DDL{Action: AlterStr}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2253
		{
			yyVAL.ddl = &DDL{Action: AlterStr, ColumnAction: DropStr, Column: NewColIdent(string(yyDollar[3].bytes))}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2257
		{
			yyVAL.ddl = &DDL{Action: AlterStr}
		}
	case 417:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2261
		{
			yyVAL.ddl = &DDL{Action: AlterStr, ColumnAction: RenameStr, Column: NewColIdent(string(yyDollar[3].bytes)), ToColumn: NewColIdent(string(yyDollar[5].bytes))}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2265
		{
			// Change this to a rename statement
			yyVAL.ddl = &DDL{Action: RenameStr, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 419:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2270
		{
			yyVAL.ddl = &DDL{Action: AlterStr, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[3].str), Using: yyDollar[4].colIdent, Columns: yyDollar[6].indexColumns, Options: yyDollar[8].indexOptions}}
		}
	case 420:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:2274
		{
			yyVAL.ddl = &DDL{Action: AlterStr, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[5].str), Type: yyDollar[3].str, Using: yyDollar[6].colIdent, Columns: yyDollar[8].indexColumns, Options: yyDollar[10].indexOptions}}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2278
		{
			yyVAL.ddl = &DDL{Action: AlterStr, ConstraintAction: DropStr, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[3].bytes)}}}}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2283
		{
			yyVAL.ddl = &DDL{Action: AlterStr, ConstraintAction: DropStr, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[3].bytes)}}}}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2288
		{
			yyVAL.ddl = &DDL{Action: AlterStr, ConstraintAction: DropStr, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[3].bytes), Details: &CheckConstraintDefinition{}}}}}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2293
		{
			yyVAL.ddl = &DDL{Action: AlterStr, ConstraintAction: DropStr, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[3].bytes), Details: &CheckConstraintDefinition{}}}}}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2298
		{
			yyVAL.ddl = &DDL{Action: AlterStr, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[3].colIdent}}
		}
	case 426:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2302
		{
			yyVAL.ddl = &DDL{Action: AlterStr, IndexSpec: &IndexSpec{Action: RenameStr, FromName: yyDollar[3].colIdent, ToName: yyDollar[5].colIdent}}
		}
	case 427:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2306
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ModifyStr, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[4].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[3].columnDefinition)
			ddl.Column = yyDollar[3].columnDefinition.Name
			yyVAL.ddl = ddl
		}
	case 428:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2313
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ChangeStr, TableSpec: &TableSpec{}, Column: NewColIdent(string(yyDollar[3].bytes)), ColumnOrder: yyDollar[5].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[4].columnDefinition)
			yyVAL.ddl = ddl
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2319
		{
			yyVAL.ddl = &DDL{Action: AlterStr, PartitionSpec: yyDollar[1].partSpec}
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2323
		{
			ddl := &DDL{Action: AlterStr, ConstraintAction: AddStr, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddConstraint(yyDollar[2].constraintDefinition)
			yyVAL.ddl = ddl
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2329
		{
			ddl := &DDL{Action: AlterStr, ConstraintAction: AddStr, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddConstraint(yyDollar[2].constraintDefinition)
			yyVAL.ddl = ddl
		}
	case 432:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2335
		{
			yyVAL.ddl = &DDL{Action: AlterStr, ConstraintAction: DropStr, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[4].bytes), Details: &ForeignKeyDefinition{}}}}}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2340
		{
			yyVAL.ddl = &DDL{Action: AlterStr, AutoIncSpec: &AutoIncSpec{Value: yyDollar[3].expr}}
		}
	case 434:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2344
		{
			yyVAL.ddl = &DDL{Action: AlterStr, DefaultSpec: &DefaultSpec{Action: SetStr, Column: yyDollar[3].colIdent, Value: yyDollar[6].expr}}
		}
	case 435:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2348
		{
			yyVAL.ddl = &DDL{Action: AlterStr, DefaultSpec: &DefaultSpec{Action: DropStr, Column: yyDollar[3].colIdent}}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2352
		{
			yyVAL.ddl = &DDL{Action: AlterStr, IndexSpec: &IndexSpec{Action: DropStr, Type: PrimaryStr}}
		}
	case 437:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2356
		{
			ddl := &DDL{Action: AlterStr, IndexSpec: &IndexSpec{Action: CreateStr}}
			ddl.IndexSpec = &IndexSpec{Action: CreateStr, Using: NewColIdent(""), ToName: NewColIdent(yyDollar[2].str), Type: PrimaryStr, Columns: yyDollar[6].indexColumns, Options: yyDollar[8].indexOptions}
			yyVAL.ddl = ddl
		}
	case 438:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2363
		{
			yyVAL.columnOrder = nil
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2367
		{
			yyVAL.columnOrder = &ColumnOrder{First: true}
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2371
		{
			yyVAL.columnOrder = &ColumnOrder{AfterColumn: NewColIdent(string(yyDollar[2].bytes))}
		}
	case 441:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2377
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 442:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2383
		{
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2385
		{
		}
	case 446:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2393
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2399
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2403
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 449:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2409
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 450:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2413
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2419
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2425
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 453:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2429
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 454:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2437
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 455:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2445
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[3].colIdent}}
		}
	case 456:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2449
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromViews: yyDollar[4].tableNames, IfExists: exists}
		}
	case 457:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2457
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes), IfExists: exists}
		}
	case 458:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2465
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes), IfExists: exists}
		}
	case 459:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2473
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, TriggerSpec: &TriggerSpec{Name: string(yyDollar[4].bytes)}, IfExists: exists}
		}
	case 460:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2481
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, ProcedureSpec: &ProcedureSpec{Name: string(yyDollar[4].bytes)}, IfExists: exists}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2491
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2495
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2500
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 464:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2506
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 465:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2511
		{
			yyVAL.statement = &Show{Type: CharsetStr, Filter: yyDollar[4].showFilter}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2515
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Filter: yyDollar[3].showFilter}
		}
	case 467:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2519
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 468:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2523
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2528
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2532
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 471:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2536
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2540
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 473:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2544
		{
			yyVAL.statement = &Show{Type: CreateTriggerStr, Table: yyDollar[4].tableName}
		}
	case 474:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2548
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2552
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2556
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2560
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 478:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2564
		{
			yyVAL.statement = &Show{Type: IndexStr, Table: yyDollar[4].tableName, Database: yyDollar[5].str, ShowIndexFilterOpt: yyDollar[6].expr}
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2568
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 480:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2572
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Filter: yyDollar[4].showFilter}
		}
	case 481:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2576
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Filter: yyDollar[4].showFilter}
		}
	case 482:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2580
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 483:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2584
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Database: yyDollar[4].str, Filter: yyDollar[5].showFilter}
		}
	case 484:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2588
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 485:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2593
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[6].showFilter, AsOf: yyDollar[5].expr}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 486:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2603
		{
			yyVAL.statement = &Show{Type: string(yyDollar[3].bytes), ShowTablesOpt: &ShowTablesOpt{DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}}
		}
	case 487:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2607
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2611
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 489:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2615
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2621
		{
			// Cannot dereference $3 directly, or else the parser stackcannot be pooled. See yyParsePooled
			cmp := yyDollar[3].expr.(*ComparisonExpr)
			cmp.Left = &ColName{Name: NewColIdent("collation")}
			var ex Expr = cmp
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &ex}
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2629
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2639
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2645
		{
			yyVAL.expr = &ComparisonExpr{Operator: LikeStr, Right: yyDollar[2].expr, Escape: yyDollar[3].expr}
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2651
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2655
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 496:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2661
		{
			yyVAL.str = ""
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2665
		{
			yyVAL.str = "full "
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2671
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2675
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 500:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2681
		{
			yyVAL.str = ""
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2685
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2689
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 503:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2695
		{
			yyVAL.showFilter = nil
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2699
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2703
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 506:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2709
		{
			yyVAL.str = ""
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2713
		{
			yyVAL.str = SessionStr
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2717
		{
			yyVAL.str = GlobalStr
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2723
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2727
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2733
		{
			yyVAL.statement = &Begin{}
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2737
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2743
		{
			yyVAL.statement = &Begin{}
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2749
		{
			yyVAL.statement = &Commit{}
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2755
		{
			yyVAL.statement = &Rollback{}
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2761
		{
			yyVAL.statement = &Savepoint{Identifier: string(yyDollar[2].bytes)}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2767
		{
			yyVAL.statement = &RollbackSavepoint{Identifier: string(yyDollar[3].bytes)}
		}
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2771
		{
			yyVAL.statement = &RollbackSavepoint{Identifier: string(yyDollar[4].bytes)}
		}
	case 519:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2775
		{
			yyVAL.statement = &RollbackSavepoint{Identifier: string(yyDollar[4].bytes)}
		}
	case 520:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2779
		{
			yyVAL.statement = &RollbackSavepoint{Identifier: string(yyDollar[5].bytes)}
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2785
		{
			yyVAL.statement = &ReleaseSavepoint{Identifier: string(yyDollar[3].bytes)}
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2790
		{
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2791
		{
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2795
		{
			yyVAL.statement = &Explain{ExplainFormat: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2799
		{
			yyVAL.statement = &Explain{Analyze: true, ExplainFormat: TreeStr, Statement: yyDollar[3].selStmt}
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2805
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 530:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2813
		{
			yyVAL.str = ""
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2817
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2828
		{
			yyVAL.statement = &Show{Type: "columns", OnTable: yyDollar[2].tableName}
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2832
		{
			yyVAL.statement = &OtherRead{}
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2838
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2842
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2848
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 539:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2852
		{
			setAllowComments(yylex, true)
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2856
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 541:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2862
		{
			yyVAL.bytes2 = nil
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2866
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2872
		{
			yyVAL.str = UnionStr
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2876
		{
			yyVAL.str = UnionAllStr
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2880
		{
			yyVAL.str = UnionDistinctStr
		}
	case 546:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2885
		{
			yyVAL.byt = 0
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2889
		{
			yyVAL.byt = 1
		}
	case 548:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2894
		{
			yyVAL.str = ""
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2898
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2902
		{
			yyVAL.str = SQLCacheStr
		}
	case 551:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2907
		{
			yyVAL.str = ""
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2911
		{
			yyVAL.str = ""
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2915
		{
			yyVAL.str = DistinctStr
		}
	case 554:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2920
		{
			yyVAL.str = ""
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2924
		{
			yyVAL.str = StraightJoinHint
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2930
		{
			if ae, ok := yyDollar[2].selectExpr.(*AliasedExpr); ok {
				ae.StartParsePos = yyDollar[1].int
				ae.EndParsePos = yyDollar[3].int - 1
			}
			yyVAL.selectExprs = SelectExprs{yyDollar[2].selectExpr}
		}
	case 557:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2938
		{
			if ae, ok := yyDollar[4].selectExpr.(*AliasedExpr); ok {
				ae.StartParsePos = yyDollar[3].int
				ae.EndParsePos = yyDollar[5].int - 1
			}
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[4].selectExpr)
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2949
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2953
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr}
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2957
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 561:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2961
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2967
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2971
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2975
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 565:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2979
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2986
		{
			yyVAL.over = &Over{WindowName: yyDollar[2].colIdent}
		}
	case 567:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2990
		{
			yyVAL.over = &Over{OrderBy: yyDollar[3].orderBy}
		}
	case 568:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2994
		{
			yyVAL.over = &Over{PartitionBy: yyDollar[5].exprs, OrderBy: yyDollar[6].orderBy}
		}
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2999
		{
			yyVAL.over = nil
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3003
		{
			yyVAL.over = yyDollar[1].over
		}
	case 571:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3008
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3012
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3016
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3022
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3026
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3030
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3034
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3040
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3044
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3054
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 583:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3058
		{
			switch n := yyDollar[1].simpleTableExpr.(type) {
			case *Subquery:
				n.Columns = yyDollar[4].columns
			case *ValuesStatement:
				n.Columns = yyDollar[4].columns
			}
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].simpleTableExpr, As: yyDollar[3].tableIdent}
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3068
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3074
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3080
		{
			yyVAL.simpleTableExpr = &ValuesStatement{Rows: yyDollar[2].values}
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3086
		{
			yyVAL.values = Values{yyDollar[2].valTuple}
		}
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3090
		{
			yyVAL.values = append(yyVAL.values, yyDollar[4].valTuple)
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3096
		{
			yyVAL.aliasedTableName = yyDollar[2].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
		}
	case 590:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3101
		{
			yyVAL.aliasedTableName = yyDollar[6].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
			yyVAL.aliasedTableName.Partitions = yyDollar[4].partitions
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3112
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Hints: yyDollar[1].indexHints}
		}
	case 592:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3116
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, Hints: yyDollar[4].indexHints}
		}
	case 593:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3120
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, As: yyDollar[5].tableIdent, Hints: yyDollar[6].indexHints}
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3124
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3128
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[1].tableIdent, Hints: yyDollar[2].indexHints}
		}
	case 596:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3139
		{
			yyVAL.expr = nil
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3143
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 598:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3148
		{
			yyVAL.columns = nil
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3152
		{
			yyVAL.columns = yyDollar[2].columns
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3158
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3162
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3168
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3172
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 604:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3185
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 605:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3189
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 606:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3193
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3197
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3203
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 609:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3205
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 610:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3209
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3211
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 612:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3215
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3217
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 614:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3220
		{
			yyVAL.empty = struct{}{}
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3222
		{
			yyVAL.empty = struct{}{}
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3227
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3231
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3237
		{
			yyVAL.str = JoinStr
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3241
		{
			yyVAL.str = JoinStr
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3245
		{
			yyVAL.str = JoinStr
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3251
		{
			yyVAL.str = StraightJoinStr
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3257
		{
			yyVAL.str = LeftJoinStr
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3261
		{
			yyVAL.str = LeftJoinStr
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3265
		{
			yyVAL.str = RightJoinStr
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3269
		{
			yyVAL.str = RightJoinStr
		}
	case 627:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3275
		{
			yyVAL.str = NaturalJoinStr
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3279
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3289
		{
			yyVAL.tableName = yyDollar[3].tableName
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3295
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3299
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3305
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3309
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3315
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 635:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3320
		{
			yyVAL.indexHints = nil
		}
	case 636:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3324
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 637:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3328
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 638:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3332
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 639:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3337
		{
			yyVAL.expr = nil
		}
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3341
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3347
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3351
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3355
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3359
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3363
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3367
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3371
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 648:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3377
		{
			yyVAL.str = ""
		}
	case 649:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3381
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3387
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3391
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3397
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3401
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 654:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3405
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 655:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3409
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 656:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3413
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3417
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 658:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3421
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 659:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3425
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 660:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3429
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3433
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3439
		{
			yyVAL.str = IsNullStr
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3443
		{
			yyVAL.str = IsNotNullStr
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3447
		{
			yyVAL.str = IsTrueStr
		}
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3451
		{
			yyVAL.str = IsNotTrueStr
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3455
		{
			yyVAL.str = IsFalseStr
		}
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3459
		{
			yyVAL.str = IsNotFalseStr
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3465
		{
			yyVAL.str = EqualStr
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3469
		{
			yyVAL.str = LessThanStr
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3473
		{
			yyVAL.str = GreaterThanStr
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3477
		{
			yyVAL.str = LessEqualStr
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3481
		{
			yyVAL.str = GreaterEqualStr
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3485
		{
			yyVAL.str = NotEqualStr
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3489
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 675:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3494
		{
			yyVAL.expr = nil
		}
	case 676:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3498
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3504
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3508
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3512
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3518
		{
			yyVAL.subquery = &Subquery{Select: yyDollar[2].selStmt}
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3524
		{
			yyVAL.simpleTableExpr = yyDollar[1].subquery
		}
	case 682:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3528
		{
			yyVAL.simpleTableExpr = yyDollar[2].simpleTableExpr
		}
	case 683:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3534
		{
			yyVAL.selectExprs = nil
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3541
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3545
		{
			yyVAL.selectExprs = append(yyDollar[1].selectExprs, yyDollar[3].selectExpr)
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3551
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 688:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3555
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3561
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3565
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3569
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3573
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3577
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3581
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3585
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 696:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3589
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 697:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3593
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 698:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3597
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 699:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3601
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 700:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3605
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 701:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3609
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 702:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3613
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 703:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3617
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 704:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3621
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 705:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3625
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 706:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3629
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 707:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3633
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 708:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3637
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 709:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3641
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 710:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3645
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 711:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3649
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 712:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3653
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 713:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3657
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 714:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3665
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 715:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3679
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 716:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3683
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 717:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3687
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 724:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3707
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: yyDollar[3].str == DistinctStr, Exprs: yyDollar[4].selectExprs}
		}
	case 725:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3711
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 726:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3721
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 727:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3725
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 728:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3729
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 729:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3733
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 730:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3737
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 731:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3741
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 732:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3745
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 733:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3749
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 734:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3753
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 735:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3757
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 736:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3761
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 737:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3765
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 738:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3769
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 739:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3773
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 740:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3777
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 741:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3781
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 742:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3785
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 743:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3794
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 744:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3798
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 745:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3802
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: SelectExprs{yyDollar[3].selectExpr}, Over: yyDollar[5].over}
		}
	case 746:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3806
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 747:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3810
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: SelectExprs{yyDollar[3].selectExpr}, Over: yyDollar[5].over}
		}
	case 748:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3814
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 749:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3818
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 750:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3822
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 751:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3826
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 752:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3830
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 753:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3834
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 754:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3845
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 755:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3849
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 756:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3853
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 757:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3857
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 758:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3861
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 759:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3865
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 760:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3869
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 761:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3873
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 762:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3877
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 763:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3881
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 764:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3885
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 765:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3889
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 766:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3893
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 767:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3897
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 768:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3901
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 769:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3911
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 770:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3915
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 771:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3919
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 772:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3924
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 773:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3929
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 774:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3934
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 775:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3940
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 776:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3945
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 777:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3949
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 778:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3954
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Fsp: yyDollar[2].expr}
		}
	case 779:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3958
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Fsp: yyDollar[2].expr}
		}
	case 780:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3962
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Fsp: yyDollar[2].expr}
		}
	case 781:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3967
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Fsp: yyDollar[2].expr}
		}
	case 782:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3972
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Fsp: yyDollar[2].expr}
		}
	case 783:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3977
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Fsp: yyDollar[2].expr}
		}
	case 784:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3981
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 785:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3985
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 788:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3996
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 789:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4006
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 790:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4010
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 791:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4014
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 792:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4018
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 793:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4022
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 794:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4026
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 795:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4032
		{
			yyVAL.str = ""
		}
	case 796:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4036
		{
			yyVAL.str = BooleanModeStr
		}
	case 797:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4040
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 798:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:4044
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 799:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4048
		{
			yyVAL.str = QueryExpansionStr
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4054
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4058
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 802:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4064
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 803:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4068
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 804:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4072
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4076
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 806:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4080
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 807:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4084
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4090
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 809:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4094
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4098
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 811:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4102
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 812:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4106
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4110
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 814:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4114
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 815:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4119
		{
			yyVAL.expr = nil
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4123
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 817:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4128
		{
			yyVAL.str = string("")
		}
	case 818:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4132
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4138
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 820:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4142
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 821:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4148
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 822:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4153
		{
			yyVAL.expr = nil
		}
	case 823:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4157
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4163
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 825:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4167
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 826:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4171
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4177
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4181
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4185
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4189
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4193
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4197
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4201
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4205
		{
			yyVAL.expr = &NullVal{}
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4211
		{
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 836:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4215
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 837:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4219
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 838:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4224
		{
			yyVAL.exprs = nil
		}
	case 839:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4228
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4234
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 841:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4238
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4244
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 843:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4249
		{
			yyVAL.expr = nil
		}
	case 844:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4253
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4259
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 846:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4264
		{
			yyVAL.orderBy = nil
		}
	case 847:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4268
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4274
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 849:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4278
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 850:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4284
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 851:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4289
		{
			yyVAL.str = AscScr
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4293
		{
			yyVAL.str = AscScr
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4297
		{
			yyVAL.str = DescScr
		}
	case 854:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4302
		{
			yyVAL.limit = nil
		}
	case 855:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4306
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 856:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4310
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 857:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4314
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4320
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4324
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 860:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4329
		{
			yyVAL.str = ""
		}
	case 861:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4333
		{
			yyVAL.str = ForUpdateStr
		}
	case 862:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4337
		{
			yyVAL.str = ShareModeStr
		}
	case 863:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4350
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4354
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 865:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4358
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 866:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4363
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 867:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4367
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 868:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:4371
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4378
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 870:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4382
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 871:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4386
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 872:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4390
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 873:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4395
		{
			yyVAL.assignExprs = nil
		}
	case 874:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4399
		{
			yyVAL.assignExprs = yyDollar[5].assignExprs
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4405
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 876:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4409
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4415
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 878:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4419
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 879:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4425
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4431
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4441
		{
			yyVAL.assignExprs = AssignmentExprs{yyDollar[1].assignExpr}
		}
	case 882:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4445
		{
			yyVAL.assignExprs = append(yyDollar[1].assignExprs, yyDollar[3].assignExpr)
		}
	case 883:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4451
		{
			yyVAL.assignExpr = &AssignmentExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4457
		{
			yyVAL.setVarExprs = SetVarExprs{yyDollar[1].setVarExpr}
		}
	case 885:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4461
		{
			yyVAL.setVarExprs = append(yyDollar[1].setVarExprs, yyDollar[3].setVarExpr)
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4467
		{
			colName, scope, err := VarScopeForColName(yyDollar[1].setVarExpr.Name)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyDollar[1].setVarExpr.Name = colName
			yyDollar[1].setVarExpr.Scope = scope
			yyVAL.setVarExpr = yyDollar[1].setVarExpr
		}
	case 887:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4478
		{
			_, scope, err := VarScopeForColName(yyDollar[2].setVarExpr.Name)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			} else if scope != SetScope_None {
				yylex.Error(fmt.Sprintf("invalid system variable name `%s`", yyDollar[2].setVarExpr.Name.Name.val))
				return 1
			}
			yyDollar[2].setVarExpr.Scope = yyDollar[1].setScope
			yyVAL.setVarExpr = yyDollar[2].setVarExpr
		}
	case 888:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4491
		{
			_, scope, err := VarScopeForColName(yyDollar[2].setVarExpr.Name)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			} else if scope != SetScope_None {
				yylex.Error(fmt.Sprintf("invalid system variable name `%s`", yyDollar[2].setVarExpr.Name.Name.val))
				return 1
			}
			yyDollar[2].setVarExpr.Scope = yyDollar[1].setScope
			yyVAL.setVarExpr = yyDollar[2].setVarExpr
		}
	case 889:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4504
		{
			yyVAL.setVarExpr = &SetVarExpr{Name: NewColName(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr, Scope: SetScope_Session}
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4510
		{
			yyVAL.setScope = SetScope_Global
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4514
		{
			yyVAL.setScope = SetScope_Session
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4520
		{
			yyVAL.setScope = SetScope_Session
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4524
		{
			yyVAL.setScope = SetScope_Persist
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4528
		{
			yyVAL.setScope = SetScope_PersistOnly
		}
	case 895:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4534
		{
			yyVAL.setVarExpr = &SetVarExpr{Name: yyDollar[1].colName, Expr: NewStrVal(yyDollar[3].bytes), Scope: SetScope_None}
		}
	case 896:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4538
		{
			yyVAL.setVarExpr = &SetVarExpr{Name: yyDollar[1].colName, Expr: NewStrVal(yyDollar[3].bytes), Scope: SetScope_None}
		}
	case 897:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4542
		{
			yyVAL.setVarExpr = &SetVarExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr, Scope: SetScope_None}
		}
	case 899:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4549
		{
			yyVAL.bytes = []byte("charset")
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4556
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4560
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4564
		{
			yyVAL.expr = &Default{}
		}
	case 906:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4573
		{
			yyVAL.byt = 0
		}
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4575
		{
			yyVAL.byt = 1
		}
	case 908:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4578
		{
			yyVAL.byt = 0
		}
	case 909:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4580
		{
			yyVAL.byt = 1
		}
	case 910:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4583
		{
			yyVAL.byt = 0
		}
	case 911:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4585
		{
			yyVAL.byt = 1
		}
	case 912:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4588
		{
			yyVAL.str = ""
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4590
		{
			yyVAL.str = IgnoreStr
		}
	case 914:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4593
		{
			yyVAL.sqlVal = nil
		}
	case 915:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4595
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4599
		{
			yyVAL.empty = struct{}{}
		}
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4601
		{
			yyVAL.empty = struct{}{}
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4603
		{
			yyVAL.empty = struct{}{}
		}
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4605
		{
			yyVAL.empty = struct{}{}
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4607
		{
			yyVAL.empty = struct{}{}
		}
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4609
		{
			yyVAL.empty = struct{}{}
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4611
		{
			yyVAL.empty = struct{}{}
		}
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4613
		{
			yyVAL.empty = struct{}{}
		}
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4617
		{
			yyVAL.empty = struct{}{}
		}
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4619
		{
			yyVAL.empty = struct{}{}
		}
	case 926:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4622
		{
			yyVAL.empty = struct{}{}
		}
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4624
		{
			yyVAL.empty = struct{}{}
		}
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4626
		{
			yyVAL.empty = struct{}{}
		}
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4630
		{
			yyVAL.str = UniqueStr
		}
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4632
		{
			yyVAL.str = FulltextStr
		}
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4634
		{
			yyVAL.str = SpatialStr
		}
	case 932:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4637
		{
			yyVAL.str = ""
		}
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4639
		{
			yyVAL.str = yyDollar[1].str
		}
	case 934:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4642
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 935:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4644
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4648
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4652
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4658
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 939:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4662
		{
			yyVAL.colIdents = append(yyVAL.colIdents, yyDollar[3].colIdent)
		}
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4669
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4675
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4679
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4686
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 946:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4691
		{
			yyVAL.str = string("")
		}
	case 947:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4693
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 948:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4696
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4698
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 950:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4701
		{
			yyVAL.EnclosedBy = nil
		}
	case 951:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4705
		{
			yyVAL.EnclosedBy = &EnclosedBy{Optionally: yyDollar[1].boolVal, Delim: NewStrVal(yyDollar[4].bytes)}
		}
	case 952:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4710
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4714
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 954:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4719
		{
			yyVAL.sqlVal = nil
		}
	case 955:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4723
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[3].bytes)
		}
	case 956:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4728
		{
			yyVAL.sqlVal = nil
		}
	case 957:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4732
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[3].bytes)
		}
	case 958:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4737
		{
			yyVAL.Fields = nil
		}
	case 959:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4741
		{
			yyVAL.Fields = &Fields{TerminatedBy: yyDollar[2].sqlVal, EnclosedBy: yyDollar[3].EnclosedBy, EscapedBy: yyDollar[4].sqlVal}
		}
	case 960:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4746
		{
			yyVAL.Lines = nil
		}
	case 961:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4750
		{
			yyVAL.Lines = &Lines{StartingBy: yyDollar[2].sqlVal, TerminatedBy: yyDollar[3].sqlVal}
		}
	case 962:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4755
		{
			yyVAL.sqlVal = nil
		}
	case 963:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4759
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[3].bytes)
		}
	case 964:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4765
		{
			yyVAL.statement = &LockTables{Tables: yyDollar[3].tableAndLockTypes}
		}
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4771
		{
			yyVAL.tableAndLockTypes = TableAndLockTypes{yyDollar[1].tableAndLockType}
		}
	case 966:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4775
		{
			yyVAL.tableAndLockTypes = append(yyDollar[1].tableAndLockTypes, yyDollar[3].tableAndLockType)
		}
	case 967:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4781
		{
			yyVAL.tableAndLockType = &TableAndLockType{Table: &AliasedTableExpr{Expr: yyDollar[1].tableName}, Lock: yyDollar[2].lockType}
		}
	case 968:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4785
		{
			yyVAL.tableAndLockType = &TableAndLockType{Table: &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[3].tableIdent}, Lock: yyDollar[4].lockType}
		}
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4791
		{
			yyVAL.lockType = LockRead
		}
	case 970:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4795
		{
			yyVAL.lockType = LockReadLocal
		}
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4799
		{
			yyVAL.lockType = LockWrite
		}
	case 972:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4803
		{
			yyVAL.lockType = LockLowPriorityWrite
		}
	case 973:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4809
		{
			yyVAL.statement = &UnlockTables{}
		}
	case 1350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:5215
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:5224
		{
			decNesting(yylex)
		}
	case 1352:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:5229
		{
			skipToEnd(yylex)
		}
	case 1353:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:5234
		{
			skipToEnd(yylex)
		}
	case 1354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:5238
		{
			skipToEnd(yylex)
		}
	case 1355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:5242
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
