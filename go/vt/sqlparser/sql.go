//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func yyPosition(yylex interface{}) int {
	return yylex.(*Tokenizer).Position
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:57
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	int                  int
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	columnOrder          *ColumnOrder
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const UNLOCK = 57373
const KEYS = 57374
const UNIQUE = 57375
const KEY = 57376
const VALUES = 57377
const LAST_INSERT_ID = 57378
const NEXT = 57379
const VALUE = 57380
const SHARE = 57381
const MODE = 57382
const SQL_NO_CACHE = 57383
const SQL_CACHE = 57384
const JOIN = 57385
const STRAIGHT_JOIN = 57386
const LEFT = 57387
const RIGHT = 57388
const INNER = 57389
const OUTER = 57390
const CROSS = 57391
const NATURAL = 57392
const USE = 57393
const FORCE = 57394
const ON = 57395
const USING = 57396
const ID = 57397
const HEX = 57398
const STRING = 57399
const INTEGRAL = 57400
const FLOAT = 57401
const HEXNUM = 57402
const VALUE_ARG = 57403
const LIST_ARG = 57404
const COMMENT = 57405
const COMMENT_KEYWORD = 57406
const BIT_LITERAL = 57407
const NULL = 57408
const TRUE = 57409
const FALSE = 57410
const OFF = 57411
const OR = 57412
const AND = 57413
const NOT = 57414
const BETWEEN = 57415
const CASE = 57416
const WHEN = 57417
const THEN = 57418
const ELSE = 57419
const END = 57420
const LE = 57421
const GE = 57422
const NE = 57423
const NULL_SAFE_EQUAL = 57424
const IS = 57425
const LIKE = 57426
const REGEXP = 57427
const IN = 57428
const SHIFT_LEFT = 57429
const SHIFT_RIGHT = 57430
const DIV = 57431
const MOD = 57432
const UNARY = 57433
const COLLATE = 57434
const BINARY = 57435
const UNDERSCORE_BINARY = 57436
const UNDERSCORE_UTF8MB4 = 57437
const INTERVAL = 57438
const JSON_EXTRACT_OP = 57439
const JSON_UNQUOTE_EXTRACT_OP = 57440
const CREATE = 57441
const ALTER = 57442
const DROP = 57443
const RENAME = 57444
const ANALYZE = 57445
const ADD = 57446
const FLUSH = 57447
const MODIFY = 57448
const CHANGE = 57449
const SCHEMA = 57450
const TABLE = 57451
const INDEX = 57452
const VIEW = 57453
const TO = 57454
const IGNORE = 57455
const IF = 57456
const PRIMARY = 57457
const COLUMN = 57458
const SPATIAL = 57459
const FULLTEXT = 57460
const KEY_BLOCK_SIZE = 57461
const CHECK = 57462
const ACTION = 57463
const CASCADE = 57464
const CONSTRAINT = 57465
const FOREIGN = 57466
const NO = 57467
const REFERENCES = 57468
const RESTRICT = 57469
const FIRST = 57470
const AFTER = 57471
const SHOW = 57472
const DESCRIBE = 57473
const EXPLAIN = 57474
const DATE = 57475
const ESCAPE = 57476
const REPAIR = 57477
const OPTIMIZE = 57478
const TRUNCATE = 57479
const FORMAT = 57480
const MAXVALUE = 57481
const PARTITION = 57482
const REORGANIZE = 57483
const LESS = 57484
const THAN = 57485
const PROCEDURE = 57486
const TRIGGER = 57487
const VINDEX = 57488
const VINDEXES = 57489
const STATUS = 57490
const VARIABLES = 57491
const WARNINGS = 57492
const SEQUENCE = 57493
const BEGIN = 57494
const START = 57495
const TRANSACTION = 57496
const COMMIT = 57497
const ROLLBACK = 57498
const BIT = 57499
const TINYINT = 57500
const SMALLINT = 57501
const MEDIUMINT = 57502
const INT = 57503
const INTEGER = 57504
const BIGINT = 57505
const INTNUM = 57506
const REAL = 57507
const DOUBLE = 57508
const FLOAT_TYPE = 57509
const DECIMAL = 57510
const NUMERIC = 57511
const TIME = 57512
const TIMESTAMP = 57513
const DATETIME = 57514
const YEAR = 57515
const CHAR = 57516
const VARCHAR = 57517
const BOOL = 57518
const CHARACTER = 57519
const VARBINARY = 57520
const NCHAR = 57521
const TEXT = 57522
const TINYTEXT = 57523
const MEDIUMTEXT = 57524
const LONGTEXT = 57525
const BLOB = 57526
const TINYBLOB = 57527
const MEDIUMBLOB = 57528
const LONGBLOB = 57529
const JSON = 57530
const ENUM = 57531
const GEOMETRY = 57532
const POINT = 57533
const LINESTRING = 57534
const POLYGON = 57535
const GEOMETRYCOLLECTION = 57536
const MULTIPOINT = 57537
const MULTILINESTRING = 57538
const MULTIPOLYGON = 57539
const NULLX = 57540
const AUTO_INCREMENT = 57541
const APPROXNUM = 57542
const SIGNED = 57543
const UNSIGNED = 57544
const ZEROFILL = 57545
const COLLATION = 57546
const DATABASES = 57547
const SCHEMAS = 57548
const TABLES = 57549
const VITESS_METADATA = 57550
const VSCHEMA = 57551
const FULL = 57552
const PROCESSLIST = 57553
const COLUMNS = 57554
const FIELDS = 57555
const ENGINES = 57556
const PLUGINS = 57557
const NAMES = 57558
const CHARSET = 57559
const GLOBAL = 57560
const SESSION = 57561
const ISOLATION = 57562
const LEVEL = 57563
const READ = 57564
const WRITE = 57565
const ONLY = 57566
const REPEATABLE = 57567
const COMMITTED = 57568
const UNCOMMITTED = 57569
const SERIALIZABLE = 57570
const CURRENT_TIMESTAMP = 57571
const DATABASE = 57572
const CURRENT_DATE = 57573
const CURRENT_TIME = 57574
const LOCALTIME = 57575
const LOCALTIMESTAMP = 57576
const UTC_DATE = 57577
const UTC_TIME = 57578
const UTC_TIMESTAMP = 57579
const REPLACE = 57580
const CONVERT = 57581
const CAST = 57582
const SUBSTR = 57583
const SUBSTRING = 57584
const GROUP_CONCAT = 57585
const SEPARATOR = 57586
const TIMESTAMPADD = 57587
const TIMESTAMPDIFF = 57588
const MATCH = 57589
const AGAINST = 57590
const BOOLEAN = 57591
const LANGUAGE = 57592
const WITH = 57593
const QUERY = 57594
const EXPANSION = 57595
const UNUSED = 57596
const ARRAY = 57597
const CUME_DIST = 57598
const DESCRIPTION = 57599
const DENSE_RANK = 57600
const EMPTY = 57601
const EXCEPT = 57602
const FIRST_VALUE = 57603
const GROUPING = 57604
const GROUPS = 57605
const JSON_TABLE = 57606
const LAG = 57607
const LAST_VALUE = 57608
const LATERAL = 57609
const LEAD = 57610
const MEMBER = 57611
const NTH_VALUE = 57612
const NTILE = 57613
const OF = 57614
const OVER = 57615
const PERCENT_RANK = 57616
const RANK = 57617
const RECURSIVE = 57618
const ROW_NUMBER = 57619
const SYSTEM = 57620
const WINDOW = 57621
const ACTIVE = 57622
const ADMIN = 57623
const BUCKETS = 57624
const CLONE = 57625
const COMPONENT = 57626
const DEFINITION = 57627
const ENFORCED = 57628
const EXCLUDE = 57629
const FOLLOWING = 57630
const GEOMCOLLECTION = 57631
const GET_MASTER_PUBLIC_KEY = 57632
const HISTOGRAM = 57633
const HISTORY = 57634
const INACTIVE = 57635
const INVISIBLE = 57636
const LOCKED = 57637
const MASTER_COMPRESSION_ALGORITHMS = 57638
const MASTER_PUBLIC_KEY_PATH = 57639
const MASTER_TLS_CIPHERSUITES = 57640
const MASTER_ZSTD_COMPRESSION_LEVEL = 57641
const NESTED = 57642
const NETWORK_NAMESPACE = 57643
const NOWAIT = 57644
const NULLS = 57645
const OJ = 57646
const OLD = 57647
const OPTIONAL = 57648
const ORDINALITY = 57649
const ORGANIZATION = 57650
const OTHERS = 57651
const PATH = 57652
const PERSIST = 57653
const PERSIST_ONLY = 57654
const PRECEDING = 57655
const PRIVILEGE_CHECKS_USER = 57656
const PROCESS = 57657
const RANDOM = 57658
const REFERENCE = 57659
const REQUIRE_ROW_FORMAT = 57660
const RESOURCE = 57661
const RESPECT = 57662
const RESTART = 57663
const RETAIN = 57664
const REUSE = 57665
const ROLE = 57666
const SECONDARY = 57667
const SECONDARY_ENGINE = 57668
const SECONDARY_LOAD = 57669
const SECONDARY_UNLOAD = 57670
const SKIP = 57671
const SRID = 57672
const THREAD_PRIORITY = 57673
const TIES = 57674
const UNBOUNDED = 57675
const VCPU = 57676
const VISIBLE = 57677

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"UNIQUE",
	"KEY",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"MODIFY",
	"CHANGE",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"FIRST",
	"AFTER",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"FORMAT",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 31,
	-2, 4,
	-1, 41,
	165, 319,
	166, 319,
	-2, 307,
	-1, 48,
	1, 968,
	353, 968,
	-2, 338,
	-1, 329,
	113, 674,
	-2, 670,
	-1, 330,
	113, 675,
	-2, 671,
	-1, 399,
	83, 924,
	-2, 67,
	-1, 400,
	83, 842,
	-2, 68,
	-1, 405,
	83, 811,
	-2, 633,
	-1, 407,
	83, 872,
	-2, 635,
	-1, 583,
	5, 31,
	-2, 332,
	-1, 587,
	5, 31,
	-2, 331,
	-1, 713,
	1, 383,
	5, 383,
	12, 383,
	13, 383,
	14, 383,
	15, 383,
	17, 383,
	19, 383,
	29, 383,
	30, 383,
	43, 383,
	44, 383,
	45, 383,
	46, 383,
	47, 383,
	49, 383,
	50, 383,
	53, 383,
	54, 383,
	56, 383,
	57, 383,
	353, 383,
	-2, 401,
	-1, 716,
	54, 48,
	56, 48,
	-2, 52,
	-1, 866,
	113, 677,
	-2, 673,
	-1, 1094,
	5, 32,
	-2, 468,
	-1, 1126,
	5, 31,
	-2, 607,
	-1, 1210,
	5, 31,
	-2, 69,
	-1, 1400,
	5, 32,
	-2, 608,
	-1, 1429,
	5, 31,
	-2, 69,
	-1, 1461,
	5, 31,
	-2, 610,
	-1, 1539,
	5, 32,
	-2, 611,
}

const yyPrivate = 57344

const yyLast = 16551

var yyAct = [...]int{

	330, 1572, 1364, 1562, 1244, 1527, 334, 1420, 1129, 556,
	668, 979, 1147, 1473, 1441, 1291, 1431, 1025, 360, 1325,
	952, 347, 667, 3, 308, 531, 1130, 1292, 975, 1288,
	1035, 988, 64, 978, 1020, 1304, 1263, 1174, 1298, 404,
	98, 891, 806, 98, 904, 1220, 1088, 820, 1219, 98,
	1006, 928, 992, 729, 868, 929, 599, 950, 1203, 918,
	728, 1016, 393, 954, 398, 1153, 932, 317, 297, 611,
	605, 395, 939, 620, 98, 409, 683, 303, 63, 98,
	390, 98, 718, 332, 401, 7, 6, 5, 1565, 98,
	1549, 1054, 709, 1560, 1537, 98, 1557, 1365, 1548, 1536,
	684, 68, 1280, 1000, 1053, 1392, 536, 1319, 710, 93,
	89, 90, 91, 558, 1162, 321, 969, 1161, 298, 299,
	1163, 1194, 302, 26, 301, 55, 29, 30, 336, 70,
	71, 72, 73, 74, 1058, 1320, 1321, 970, 971, 730,
	305, 731, 307, 1052, 1504, 633, 632, 642, 643, 635,
	636, 637, 638, 639, 640, 641, 634, 300, 373, 644,
	379, 380, 377, 378, 376, 375, 374, 580, 1448, 999,
	1246, 1007, 61, 575, 381, 382, 1383, 576, 573, 574,
	1264, 560, 292, 562, 554, 1381, 578, 26, 27, 55,
	29, 30, 832, 1049, 1044, 1045, 1248, 1043, 833, 1046,
	1047, 568, 569, 1186, 830, 1559, 60, 1556, 1191, 1190,
	31, 51, 52, 1528, 1243, 933, 559, 561, 294, 85,
	1522, 1266, 993, 1247, 1432, 1433, 1580, 579, 1187, 831,
	1576, 92, 42, 1056, 1059, 1221, 61, 544, 306, 538,
	834, 1474, 1192, 307, 1184, 1436, 1148, 1150, 1212, 798,
	1185, 792, 1314, 295, 1476, 995, 1268, 1313, 1272, 81,
	1267, 1312, 1265, 995, 534, 593, 268, 1270, 88, 98,
	1051, 1238, 409, 1511, 409, 409, 1269, 409, 409, 1175,
	409, 1066, 409, 1240, 1065, 656, 657, 1403, 409, 1271,
	1273, 1250, 1050, 991, 995, 1104, 1158, 33, 57, 38,
	37, 40, 557, 53, 1007, 1101, 98, 1189, 965, 1115,
	1082, 83, 84, 840, 80, 1535, 583, 587, 532, 1505,
	87, 86, 724, 1475, 409, 1149, 624, 550, 41, 59,
	58, 821, 1055, 49, 50, 39, 608, 837, 976, 598,
	1574, 1231, 1227, 1575, 607, 1573, 634, 1057, 994, 644,
	43, 44, 1435, 45, 46, 923, 994, 633, 632, 642,
	643, 635, 636, 637, 638, 639, 640, 641, 634, 589,
	590, 644, 56, 644, 825, 619, 1239, 1282, 1237, 584,
	586, 585, 1234, 592, 1037, 532, 1340, 994, 98, 98,
	98, 1188, 989, 543, 990, 1520, 875, 409, 656, 657,
	987, 993, 595, 409, 596, 1493, 401, 597, 656, 657,
	873, 874, 872, 822, 1089, 1302, 609, 732, 530, 588,
	633, 632, 642, 643, 635, 636, 637, 638, 639, 640,
	641, 634, 919, 82, 644, 1226, 56, 1341, 794, 1331,
	1228, 1221, 1229, 1225, 614, 1222, 708, 77, 1223, 1224,
	1541, 686, 688, 690, 692, 694, 696, 697, 563, 564,
	654, 565, 566, 1036, 567, 1230, 570, 919, 726, 1112,
	717, 537, 581, 24, 722, 687, 689, 1427, 693, 695,
	628, 698, 631, 78, 1426, 546, 547, 548, 645, 646,
	647, 648, 649, 650, 651, 617, 629, 630, 627, 633,
	632, 642, 643, 635, 636, 637, 638, 639, 640, 641,
	634, 619, 1207, 644, 304, 1206, 1581, 713, 633, 632,
	642, 643, 635, 636, 637, 638, 639, 640, 641, 634,
	1195, 98, 644, 1395, 637, 638, 639, 640, 641, 634,
	312, 98, 644, 1521, 98, 1100, 1455, 98, 1099, 1424,
	1098, 98, 1336, 409, 409, 539, 540, 1582, 409, 409,
	409, 98, 409, 409, 1216, 843, 844, 618, 617, 409,
	409, 633, 632, 642, 643, 635, 636, 637, 638, 639,
	640, 641, 634, 61, 619, 644, 387, 388, 839, 1204,
	808, 618, 617, 871, 98, 409, 618, 617, 1284, 98,
	635, 636, 637, 638, 639, 640, 641, 634, 619, 1394,
	644, 409, 1040, 619, 618, 617, 98, 1353, 618, 617,
	532, 892, 409, 893, 799, 592, 838, 1479, 1558, 361,
	54, 619, 845, 1518, 865, 619, 858, 860, 861, 1164,
	1488, 1165, 859, 618, 617, 1487, 869, 633, 632, 642,
	643, 635, 636, 637, 638, 639, 640, 641, 634, 591,
	619, 644, 1544, 592, 866, 532, 409, 864, 1485, 350,
	349, 352, 353, 354, 355, 1479, 1531, 847, 351, 356,
	1479, 592, 908, 911, 54, 1079, 1080, 1081, 1367, 920,
	1479, 1512, 1483, 902, 1362, 862, 313, 1479, 1478, 1482,
	409, 409, 941, 944, 945, 946, 942, 98, 943, 947,
	1418, 1417, 1305, 1306, 1358, 98, 98, 1405, 592, 98,
	98, 1402, 592, 98, 98, 98, 409, 903, 905, 1356,
	1175, 910, 913, 914, 915, 401, 898, 809, 810, 409,
	895, 896, 811, 812, 813, 1170, 815, 816, 980, 916,
	1347, 1346, 1337, 817, 818, 894, 870, 927, 827, 930,
	931, 1343, 1344, 996, 808, 983, 642, 643, 635, 636,
	637, 638, 639, 640, 641, 634, 960, 805, 644, 829,
	962, 1343, 1342, 958, 936, 592, 963, 1258, 967, 804,
	966, 1095, 592, 98, 409, 795, 409, 793, 98, 98,
	900, 592, 98, 790, 1008, 1009, 1010, 633, 632, 642,
	643, 635, 636, 637, 638, 639, 640, 641, 634, 720,
	98, 644, 98, 98, 1022, 739, 738, 98, 720, 552,
	545, 98, 98, 98, 98, 98, 26, 26, 359, 1289,
	1154, 65, 1301, 713, 1154, 1253, 1301, 713, 1018, 1019,
	865, 713, 1002, 1003, 1004, 1005, 959, 900, 719, 1124,
	1398, 26, 721, 1492, 723, 1125, 1460, 935, 1013, 1014,
	1015, 721, 936, 719, 1345, 1166, 968, 1095, 1118, 1117,
	866, 1033, 1095, 1070, 936, 61, 61, 314, 1301, 719,
	1095, 869, 725, 841, 936, 797, 61, 1550, 1443, 1001,
	1410, 555, 1072, 555, 555, 1021, 555, 555, 1078, 555,
	61, 555, 1071, 403, 1330, 1305, 1306, 555, 1169, 1017,
	1012, 1011, 1245, 54, 54, 1444, 1024, 1084, 941, 944,
	945, 946, 942, 1567, 943, 947, 61, 98, 98, 98,
	98, 98, 1131, 54, 1563, 1308, 1289, 1208, 826, 98,
	1092, 801, 98, 853, 1141, 1126, 98, 1139, 653, 1142,
	98, 655, 1140, 1143, 846, 945, 946, 1311, 1310, 1138,
	1137, 1554, 1109, 1547, 902, 318, 319, 1111, 1027, 409,
	1029, 1249, 1067, 1552, 1077, 1076, 1458, 1335, 980, 666,
	1167, 670, 671, 672, 673, 674, 675, 676, 677, 678,
	679, 870, 682, 685, 685, 685, 691, 685, 685, 691,
	685, 699, 700, 701, 702, 703, 704, 1155, 714, 1152,
	1144, 1334, 1159, 899, 901, 409, 1156, 1177, 1157, 1132,
	1176, 1171, 1135, 409, 98, 1198, 1199, 1200, 1201, 1202,
	612, 613, 737, 1172, 1173, 600, 1133, 1134, 1210, 1136,
	553, 1396, 1211, 1196, 1197, 1439, 601, 610, 1028, 800,
	612, 613, 1075, 949, 791, 713, 713, 713, 713, 713,
	1074, 1205, 315, 316, 98, 309, 1498, 310, 65, 1497,
	713, 1446, 1215, 409, 1154, 577, 1569, 1568, 713, 1105,
	1233, 1102, 1255, 1232, 819, 1241, 1242, 615, 1569, 1508,
	1333, 836, 67, 69, 47, 62, 1, 1561, 1366, 1440,
	403, 1218, 403, 403, 1048, 403, 403, 1526, 403, 1472,
	403, 1324, 986, 977, 76, 1285, 403, 529, 409, 409,
	75, 1131, 1257, 1290, 1519, 1256, 985, 1275, 984, 1182,
	1262, 1274, 1281, 1181, 1293, 1178, 1193, 998, 1180, 1179,
	1295, 1183, 409, 745, 743, 866, 744, 742, 1070, 747,
	746, 997, 622, 741, 280, 396, 733, 409, 1023, 409,
	409, 1309, 616, 48, 948, 1434, 980, 1235, 980, 79,
	1323, 1236, 555, 555, 1042, 824, 1316, 555, 555, 555,
	1315, 555, 555, 571, 572, 1300, 282, 652, 555, 555,
	1322, 1073, 1327, 327, 1160, 402, 1296, 842, 604, 98,
	1328, 1329, 1496, 98, 1445, 1110, 680, 1213, 917, 335,
	857, 1318, 348, 345, 555, 1338, 1339, 346, 1349, 1350,
	848, 1123, 626, 333, 325, 403, 98, 712, 705, 940,
	938, 734, 937, 802, 409, 1354, 1352, 409, 409, 409,
	1091, 409, 391, 1307, 98, 1303, 711, 1252, 1094, 1096,
	1255, 1097, 293, 1391, 1503, 852, 1103, 1361, 28, 1106,
	1107, 1108, 66, 320, 19, 18, 1114, 17, 582, 20,
	1116, 21, 22, 1119, 1120, 54, 1121, 1122, 16, 1355,
	15, 14, 541, 32, 36, 35, 34, 10, 23, 13,
	670, 12, 1357, 1379, 11, 1360, 1146, 9, 1131, 8,
	4, 1372, 311, 25, 2, 0, 0, 0, 1371, 0,
	1397, 0, 0, 409, 0, 0, 0, 0, 1407, 0,
	0, 409, 980, 1406, 1167, 0, 0, 0, 0, 0,
	0, 1416, 0, 0, 951, 0, 0, 0, 714, 409,
	0, 0, 714, 0, 0, 1422, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 409, 0, 1376, 1377,
	0, 1378, 0, 1429, 1380, 1442, 1382, 0, 1437, 1430,
	0, 0, 713, 0, 0, 0, 0, 0, 1438, 1389,
	0, 403, 403, 1423, 0, 1425, 403, 403, 403, 0,
	403, 403, 0, 409, 409, 0, 409, 403, 403, 0,
	0, 409, 0, 409, 409, 409, 98, 1293, 1467, 409,
	1468, 1469, 1470, 555, 1461, 555, 1459, 0, 1447, 0,
	1419, 1466, 0, 403, 0, 0, 1471, 0, 1477, 0,
	0, 0, 0, 0, 409, 98, 0, 1484, 1261, 849,
	0, 1494, 1480, 0, 1481, 1490, 0, 323, 0, 0,
	622, 0, 0, 403, 633, 632, 642, 643, 635, 636,
	637, 638, 639, 640, 641, 634, 1509, 0, 644, 1293,
	409, 0, 0, 0, 1516, 1510, 1517, 0, 0, 0,
	0, 0, 0, 409, 409, 1083, 0, 0, 0, 0,
	1486, 0, 1442, 980, 897, 1530, 1489, 1529, 0, 1533,
	0, 0, 409, 0, 0, 1131, 1388, 1538, 0, 0,
	0, 921, 0, 98, 0, 0, 0, 0, 0, 409,
	0, 0, 0, 1428, 0, 0, 1546, 0, 925, 926,
	0, 658, 659, 660, 661, 662, 663, 664, 665, 1553,
	1551, 409, 0, 0, 1524, 0, 0, 0, 1555, 1525,
	0, 762, 1127, 1128, 403, 1566, 714, 714, 714, 714,
	714, 1577, 0, 0, 0, 0, 0, 403, 0, 0,
	0, 951, 0, 1151, 0, 0, 0, 0, 0, 714,
	0, 633, 632, 642, 643, 635, 636, 637, 638, 639,
	640, 641, 634, 0, 0, 644, 0, 715, 0, 0,
	0, 0, 1373, 0, 0, 0, 0, 0, 0, 1375,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1384, 1385, 403, 0, 403, 0, 0, 0, 0, 0,
	0, 750, 0, 0, 0, 0, 0, 95, 0, 0,
	1399, 1400, 1401, 0, 1404, 54, 296, 0, 0, 0,
	0, 0, 555, 0, 0, 0, 0, 0, 0, 0,
	0, 1415, 0, 0, 0, 0, 0, 0, 0, 403,
	0, 392, 763, 0, 0, 0, 533, 0, 535, 0,
	0, 0, 0, 0, 0, 0, 542, 0, 0, 0,
	0, 0, 549, 0, 0, 0, 776, 779, 780, 781,
	782, 783, 784, 0, 785, 786, 787, 788, 789, 764,
	765, 766, 767, 748, 749, 777, 0, 751, 0, 752,
	753, 754, 755, 756, 757, 758, 759, 760, 761, 768,
	769, 770, 771, 772, 773, 774, 775, 1454, 0, 0,
	0, 0, 0, 0, 0, 1294, 0, 54, 0, 0,
	0, 0, 0, 0, 0, 1090, 0, 602, 606, 0,
	0, 0, 0, 0, 921, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 625, 633, 632, 642, 643, 635,
	636, 637, 638, 639, 640, 641, 634, 0, 778, 644,
	0, 0, 0, 0, 0, 1499, 1500, 1501, 1502, 0,
	0, 0, 1506, 1507, 0, 0, 0, 403, 0, 669,
	0, 0, 0, 0, 1513, 1514, 1515, 0, 0, 681,
	867, 0, 0, 876, 877, 878, 879, 880, 881, 882,
	883, 884, 885, 886, 887, 888, 889, 890, 0, 0,
	0, 0, 0, 277, 0, 0, 0, 603, 0, 1534,
	0, 0, 0, 1209, 0, 0, 1539, 0, 0, 0,
	0, 403, 0, 0, 0, 0, 551, 0, 0, 287,
	0, 0, 1543, 714, 0, 0, 0, 0, 0, 924,
	0, 0, 0, 0, 0, 0, 0, 96, 0, 0,
	291, 0, 0, 0, 0, 0, 96, 0, 0, 0,
	1390, 0, 0, 594, 0, 0, 0, 0, 0, 0,
	0, 403, 0, 0, 0, 0, 1578, 1579, 324, 0,
	269, 394, 0, 0, 0, 0, 96, 272, 96, 0,
	0, 1387, 1412, 1413, 1414, 0, 96, 281, 276, 0,
	0, 0, 96, 0, 403, 0, 0, 0, 0, 0,
	0, 0, 0, 921, 0, 0, 1297, 1299, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 555, 0,
	54, 0, 279, 0, 0, 0, 0, 0, 286, 0,
	1299, 0, 0, 0, 0, 707, 0, 716, 0, 0,
	0, 0, 0, 0, 0, 403, 0, 403, 1326, 0,
	0, 0, 0, 0, 0, 270, 633, 632, 642, 643,
	635, 636, 637, 638, 639, 640, 641, 634, 1294, 1386,
	644, 1462, 0, 0, 0, 823, 0, 0, 0, 0,
	0, 0, 283, 273, 274, 0, 284, 285, 290, 0,
	0, 0, 275, 278, 0, 271, 289, 288, 632, 642,
	643, 635, 636, 637, 638, 639, 640, 641, 634, 1491,
	0, 644, 0, 0, 0, 855, 856, 1085, 1086, 1087,
	0, 0, 1363, 0, 0, 1368, 1369, 1370, 0, 403,
	1294, 0, 54, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 633, 632, 642, 643, 635, 636,
	637, 638, 639, 640, 641, 634, 0, 0, 644, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 669, 0,
	0, 906, 907, 0, 0, 0, 0, 0, 740, 0,
	921, 0, 0, 0, 0, 0, 0, 0, 796, 0,
	0, 392, 0, 0, 803, 0, 0, 0, 0, 0,
	0, 403, 0, 96, 0, 0, 0, 0, 814, 1421,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 403, 0, 1564,
	974, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 828, 0, 0, 403, 0, 835, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 854, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1463, 1464, 0, 1465, 96, 96, 96, 0, 1421,
	0, 1421, 1421, 1421, 0, 0, 0, 1326, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1421, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1259, 1260, 0, 1068, 1069, 0, 606,
	0, 0, 0, 0, 0, 1276, 1277, 0, 1278, 1279,
	0, 0, 0, 0, 934, 0, 0, 0, 1523, 0,
	0, 1286, 1287, 0, 0, 0, 0, 961, 0, 0,
	0, 403, 403, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 921, 0, 0,
	1540, 0, 0, 0, 0, 0, 0, 0, 1093, 0,
	0, 0, 0, 0, 0, 0, 0, 1545, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1113, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 1421,
	1332, 0, 0, 0, 0, 0, 0, 0, 96, 0,
	1026, 96, 0, 0, 96, 1030, 1031, 0, 807, 1032,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 1034, 0, 0,
	0, 0, 0, 0, 1041, 0, 0, 0, 1060, 1061,
	1062, 1063, 1064, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 0, 96, 0, 0, 0,
	0, 0, 1374, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 807, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1217, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 324,
	324, 0, 0, 324, 324, 324, 324, 0, 0, 0,
	922, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 324,
	324, 324, 324, 0, 96, 0, 0, 0, 0, 0,
	1283, 0, 96, 956, 0, 0, 96, 96, 0, 0,
	96, 964, 807, 0, 0, 0, 0, 0, 0, 0,
	1449, 1450, 1451, 1452, 1453, 0, 0, 0, 1456, 1457,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1317, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1214, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 0, 0, 0, 0, 96, 96, 0, 0, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 0, 1038,
	1039, 1251, 0, 0, 96, 0, 0, 0, 96, 96,
	96, 96, 96, 0, 0, 0, 0, 0, 807, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	324, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1393, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 669, 0, 0, 0, 324, 0, 0, 0,
	1408, 0, 0, 1409, 0, 0, 1411, 0, 1570, 0,
	0, 0, 0, 0, 324, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 922, 96, 96, 96, 96, 96, 0,
	0, 0, 0, 0, 0, 0, 1145, 0, 0, 96,
	0, 0, 0, 956, 0, 0, 1348, 96, 0, 0,
	1351, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1359, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 324, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 324, 0, 1532, 669, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 807, 0, 0, 0, 0, 0, 0,
	0, 0, 922, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1495, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1542, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 922,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 956, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 516, 504, 0,
	461, 519, 434, 451, 527, 452, 455, 492, 419, 474,
	182, 449, 96, 438, 414, 444, 415, 436, 463, 128,
	433, 506, 477, 518, 154, 517, 467, 525, 156, 483,
	0, 228, 170, 0, 0, 465, 508, 472, 501, 460,
	493, 424, 482, 520, 450, 490, 521, 0, 0, 0,
	408, 0, 981, 982, 0, 0, 0, 0, 0, 118,
	0, 487, 515, 446, 489, 491, 413, 484, 0, 417,
	420, 526, 511, 441, 442, 1168, 922, 0, 0, 0,
	0, 0, 464, 473, 498, 458, 0, 0, 0, 0,
	96, 0, 0, 0, 439, 0, 481, 0, 0, 0,
	421, 418, 0, 0, 462, 0, 0, 0, 423, 0,
	440, 499, 0, 410, 136, 0, 0, 503, 510, 459,
	257, 514, 457, 456, 201, 0, 232, 139, 153, 114,
	100, 110, 0, 138, 179, 208, 212, 447, 411, 507,
	437, 445, 122, 443, 210, 189, 248, 0, 480, 191,
	209, 157, 238, 202, 247, 258, 259, 235, 255, 263,
	225, 103, 234, 246, 119, 220, 105, 244, 231, 168,
	148, 149, 104, 0, 206, 127, 134, 124, 181, 241,
	242, 123, 266, 111, 254, 107, 112, 253, 175, 237,
	245, 169, 162, 106, 243, 167, 161, 152, 131, 141,
	199, 159, 200, 142, 172, 171, 173, 0, 416, 0,
	229, 251, 267, 116, 432, 0, 236, 261, 262, 0,
	0, 117, 135, 130, 198, 174, 113, 144, 226, 151,
	158, 205, 265, 188, 211, 120, 250, 227, 428, 431,
	426, 427, 475, 476, 522, 523, 524, 500, 422, 0,
	429, 430, 0, 505, 512, 513, 479, 99, 108, 155,
	264, 203, 133, 252, 412, 425, 126, 435, 0, 0,
	448, 453, 454, 466, 468, 469, 470, 471, 478, 485,
	486, 488, 494, 495, 496, 497, 502, 509, 528, 101,
	102, 109, 115, 121, 125, 129, 132, 137, 140, 143,
	145, 146, 147, 150, 160, 163, 164, 165, 166, 176,
	177, 178, 180, 183, 184, 185, 186, 187, 190, 192,
	193, 194, 195, 196, 197, 204, 207, 213, 214, 215,
	216, 217, 218, 219, 221, 222, 223, 224, 230, 233,
	239, 240, 249, 256, 260, 516, 504, 0, 461, 519,
	434, 451, 527, 452, 455, 492, 419, 474, 182, 449,
	0, 438, 414, 444, 415, 436, 463, 128, 433, 506,
	477, 518, 154, 517, 467, 525, 156, 483, 0, 228,
	170, 0, 0, 465, 508, 472, 501, 460, 493, 424,
	482, 520, 450, 490, 521, 0, 0, 0, 408, 0,
	981, 982, 0, 0, 0, 0, 0, 118, 0, 487,
	515, 446, 489, 491, 413, 484, 0, 417, 420, 526,
	511, 441, 442, 0, 0, 0, 0, 0, 0, 0,
	464, 473, 498, 458, 0, 0, 0, 0, 0, 0,
	0, 0, 439, 0, 481, 0, 0, 0, 421, 418,
	0, 0, 462, 0, 0, 0, 423, 0, 440, 499,
	0, 410, 136, 0, 0, 503, 510, 459, 257, 514,
	457, 456, 201, 0, 232, 139, 153, 114, 100, 110,
	0, 138, 179, 208, 212, 447, 411, 507, 437, 445,
	122, 443, 210, 189, 248, 0, 480, 191, 209, 157,
	238, 202, 247, 258, 259, 235, 255, 263, 225, 103,
	234, 246, 119, 220, 105, 244, 231, 168, 148, 149,
	104, 0, 206, 127, 134, 124, 181, 241, 242, 123,
	266, 111, 254, 107, 112, 253, 175, 237, 245, 169,
	162, 106, 243, 167, 161, 152, 131, 141, 199, 159,
	200, 142, 172, 171, 173, 0, 416, 0, 229, 251,
	267, 116, 432, 0, 236, 261, 262, 0, 0, 117,
	135, 130, 198, 174, 113, 144, 226, 151, 158, 205,
	265, 188, 211, 120, 250, 227, 428, 431, 426, 427,
	475, 476, 522, 523, 524, 500, 422, 0, 429, 430,
	0, 505, 512, 513, 479, 99, 108, 155, 264, 203,
	133, 252, 412, 425, 126, 435, 0, 0, 448, 453,
	454, 466, 468, 469, 470, 471, 478, 485, 486, 488,
	494, 495, 496, 497, 502, 509, 528, 101, 102, 109,
	115, 121, 125, 129, 132, 137, 140, 143, 145, 146,
	147, 150, 160, 163, 164, 165, 166, 176, 177, 178,
	180, 183, 184, 185, 186, 187, 190, 192, 193, 194,
	195, 196, 197, 204, 207, 213, 214, 215, 216, 217,
	218, 219, 221, 222, 223, 224, 230, 233, 239, 240,
	249, 256, 260, 516, 504, 0, 461, 519, 434, 451,
	527, 452, 455, 492, 419, 474, 182, 449, 0, 438,
	414, 444, 415, 436, 463, 128, 433, 506, 477, 518,
	154, 517, 467, 525, 156, 483, 0, 228, 170, 0,
	0, 465, 508, 472, 501, 460, 493, 424, 482, 520,
	450, 490, 521, 61, 0, 0, 408, 0, 0, 0,
	0, 0, 0, 0, 0, 118, 0, 487, 515, 446,
	489, 491, 413, 484, 0, 417, 420, 526, 511, 441,
	442, 0, 0, 0, 0, 0, 0, 0, 464, 473,
	498, 458, 0, 0, 0, 0, 0, 0, 0, 0,
	439, 0, 481, 0, 0, 0, 421, 418, 0, 0,
	462, 0, 0, 0, 423, 0, 440, 499, 0, 410,
	136, 0, 0, 503, 510, 459, 257, 514, 457, 456,
	201, 0, 232, 139, 153, 114, 100, 110, 0, 138,
	179, 208, 212, 447, 411, 507, 437, 445, 122, 443,
	210, 189, 248, 0, 480, 191, 209, 157, 238, 202,
	247, 258, 259, 235, 255, 263, 225, 103, 234, 246,
	119, 220, 105, 244, 231, 168, 148, 149, 104, 0,
	206, 127, 134, 124, 181, 241, 242, 123, 266, 111,
	254, 107, 112, 253, 175, 237, 245, 169, 162, 106,
	243, 167, 161, 152, 131, 141, 199, 159, 200, 142,
	172, 171, 173, 0, 416, 0, 229, 251, 267, 116,
	432, 0, 236, 261, 262, 0, 0, 117, 135, 130,
	198, 174, 113, 144, 226, 151, 158, 205, 265, 188,
	211, 120, 250, 227, 428, 431, 426, 427, 475, 476,
	522, 523, 524, 500, 422, 0, 429, 430, 0, 505,
	512, 513, 479, 99, 108, 155, 264, 203, 133, 252,
	412, 425, 126, 435, 0, 0, 448, 453, 454, 466,
	468, 469, 470, 471, 478, 485, 486, 488, 494, 495,
	496, 497, 502, 509, 528, 101, 102, 109, 115, 121,
	125, 129, 132, 137, 140, 143, 145, 146, 147, 150,
	160, 163, 164, 165, 166, 176, 177, 178, 180, 183,
	184, 185, 186, 187, 190, 192, 193, 194, 195, 196,
	197, 204, 207, 213, 214, 215, 216, 217, 218, 219,
	221, 222, 223, 224, 230, 233, 239, 240, 249, 256,
	260, 516, 504, 0, 461, 519, 434, 451, 527, 452,
	455, 492, 419, 474, 182, 449, 0, 438, 414, 444,
	415, 436, 463, 128, 433, 506, 477, 518, 154, 517,
	467, 525, 156, 483, 0, 228, 170, 0, 0, 465,
	508, 472, 501, 460, 493, 424, 482, 520, 450, 490,
	521, 0, 0, 0, 408, 0, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 487, 515, 446, 489, 491,
	413, 484, 0, 417, 420, 526, 511, 441, 442, 0,
	0, 0, 0, 0, 0, 0, 464, 473, 498, 458,
	0, 0, 0, 0, 0, 0, 1254, 0, 439, 0,
	481, 0, 0, 0, 421, 418, 0, 0, 462, 0,
	0, 0, 423, 0, 440, 499, 0, 410, 136, 0,
	0, 503, 510, 459, 257, 514, 457, 456, 201, 0,
	232, 139, 153, 114, 100, 110, 0, 138, 179, 208,
	212, 447, 411, 507, 437, 445, 122, 443, 210, 189,
	248, 0, 480, 191, 209, 157, 238, 202, 247, 258,
	259, 235, 255, 263, 225, 103, 234, 246, 119, 220,
	105, 244, 231, 168, 148, 149, 104, 0, 206, 127,
	134, 124, 181, 241, 242, 123, 266, 111, 254, 107,
	112, 253, 175, 237, 245, 169, 162, 106, 243, 167,
	161, 152, 131, 141, 199, 159, 200, 142, 172, 171,
	173, 0, 416, 0, 229, 251, 267, 116, 432, 0,
	236, 261, 262, 0, 0, 117, 135, 130, 198, 174,
	113, 144, 226, 151, 158, 205, 265, 188, 211, 120,
	250, 227, 428, 431, 426, 427, 475, 476, 522, 523,
	524, 500, 422, 0, 429, 430, 0, 505, 512, 513,
	479, 99, 108, 155, 264, 203, 133, 252, 412, 425,
	126, 435, 0, 0, 448, 453, 454, 466, 468, 469,
	470, 471, 478, 485, 486, 488, 494, 495, 496, 497,
	502, 509, 528, 101, 102, 109, 115, 121, 125, 129,
	132, 137, 140, 143, 145, 146, 147, 150, 160, 163,
	164, 165, 166, 176, 177, 178, 180, 183, 184, 185,
	186, 187, 190, 192, 193, 194, 195, 196, 197, 204,
	207, 213, 214, 215, 216, 217, 218, 219, 221, 222,
	223, 224, 230, 233, 239, 240, 249, 256, 260, 516,
	504, 0, 461, 519, 434, 451, 527, 452, 455, 492,
	419, 474, 182, 449, 0, 438, 414, 444, 415, 436,
	463, 128, 433, 506, 477, 518, 154, 517, 467, 525,
	156, 483, 0, 228, 170, 0, 0, 465, 508, 472,
	501, 460, 493, 424, 482, 520, 450, 490, 521, 0,
	0, 0, 97, 0, 0, 0, 0, 0, 0, 0,
	0, 118, 0, 487, 515, 446, 489, 491, 413, 484,
	0, 417, 420, 526, 511, 441, 442, 0, 0, 0,
	0, 0, 0, 0, 464, 473, 498, 458, 0, 0,
	0, 0, 0, 0, 965, 0, 439, 0, 481, 0,
	0, 0, 421, 418, 0, 0, 462, 0, 0, 0,
	423, 0, 440, 499, 0, 410, 136, 0, 0, 503,
	510, 459, 257, 514, 457, 456, 201, 0, 232, 139,
	153, 114, 100, 110, 0, 138, 179, 208, 212, 447,
	411, 507, 437, 445, 122, 443, 210, 189, 248, 0,
	480, 191, 209, 157, 238, 202, 247, 258, 259, 235,
	255, 263, 225, 103, 234, 246, 119, 220, 105, 244,
	231, 168, 148, 149, 104, 0, 206, 127, 134, 124,
	181, 241, 242, 123, 266, 111, 254, 107, 112, 253,
	175, 237, 245, 169, 162, 106, 243, 167, 161, 152,
	131, 141, 199, 159, 200, 142, 172, 171, 173, 0,
	416, 0, 229, 251, 267, 116, 432, 0, 236, 261,
	262, 0, 0, 117, 135, 130, 198, 174, 113, 144,
	226, 151, 158, 205, 265, 188, 211, 120, 250, 227,
	428, 431, 426, 427, 475, 476, 522, 523, 524, 500,
	422, 0, 429, 430, 0, 505, 512, 513, 479, 99,
	108, 155, 264, 203, 133, 252, 412, 425, 126, 435,
	0, 0, 448, 453, 454, 466, 468, 469, 470, 471,
	478, 485, 486, 488, 494, 495, 496, 497, 502, 509,
	528, 101, 102, 109, 115, 121, 125, 129, 132, 137,
	140, 143, 145, 146, 147, 150, 160, 163, 164, 165,
	166, 176, 177, 178, 180, 183, 184, 185, 186, 187,
	190, 192, 193, 194, 195, 196, 197, 204, 207, 213,
	214, 215, 216, 217, 218, 219, 221, 222, 223, 224,
	230, 233, 239, 240, 249, 256, 260, 516, 504, 0,
	461, 519, 434, 451, 527, 452, 455, 492, 419, 474,
	182, 449, 0, 438, 414, 444, 415, 436, 463, 128,
	433, 506, 477, 518, 154, 517, 467, 525, 156, 483,
	0, 228, 170, 0, 0, 465, 508, 472, 501, 460,
	493, 424, 482, 520, 450, 490, 521, 0, 0, 0,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 118,
	0, 487, 515, 446, 489, 491, 413, 484, 0, 417,
	420, 526, 511, 441, 442, 0, 0, 0, 0, 0,
	0, 0, 464, 473, 498, 458, 0, 0, 0, 0,
	0, 0, 863, 0, 439, 0, 481, 0, 0, 0,
	421, 418, 0, 0, 462, 0, 0, 0, 423, 0,
	440, 499, 0, 410, 136, 0, 0, 503, 510, 459,
	257, 514, 457, 456, 201, 0, 232, 139, 153, 114,
	100, 110, 0, 138, 179, 208, 212, 447, 411, 507,
	437, 445, 122, 443, 210, 189, 248, 0, 480, 191,
	209, 157, 238, 202, 247, 258, 259, 235, 255, 263,
	225, 103, 234, 246, 119, 220, 105, 244, 231, 168,
	148, 149, 104, 0, 206, 127, 134, 124, 181, 241,
	242, 123, 266, 111, 254, 107, 112, 253, 175, 237,
	245, 169, 162, 106, 243, 167, 161, 152, 131, 141,
	199, 159, 200, 142, 172, 171, 173, 0, 416, 0,
	229, 251, 267, 116, 432, 0, 236, 261, 262, 0,
	0, 117, 135, 130, 198, 174, 113, 144, 226, 151,
	158, 205, 265, 188, 211, 120, 250, 227, 428, 431,
	426, 427, 475, 476, 522, 523, 524, 500, 422, 0,
	429, 430, 0, 505, 512, 513, 479, 99, 108, 155,
	264, 203, 133, 252, 412, 425, 126, 435, 0, 0,
	448, 453, 454, 466, 468, 469, 470, 471, 478, 485,
	486, 488, 494, 495, 496, 497, 502, 509, 528, 101,
	102, 109, 115, 121, 125, 129, 132, 137, 140, 143,
	145, 146, 147, 150, 160, 163, 164, 165, 166, 176,
	177, 178, 180, 183, 184, 185, 186, 187, 190, 192,
	193, 194, 195, 196, 197, 204, 207, 213, 214, 215,
	216, 217, 218, 219, 221, 222, 223, 224, 230, 233,
	239, 240, 249, 256, 260, 516, 504, 0, 461, 519,
	434, 451, 527, 452, 455, 492, 419, 474, 182, 449,
	0, 438, 414, 444, 415, 436, 463, 128, 433, 506,
	477, 518, 154, 517, 467, 525, 156, 483, 0, 228,
	170, 0, 0, 465, 508, 472, 501, 460, 493, 424,
	482, 520, 450, 490, 521, 0, 0, 0, 408, 0,
	0, 0, 0, 0, 0, 0, 0, 118, 0, 487,
	515, 446, 489, 491, 413, 484, 0, 417, 420, 526,
	511, 441, 442, 0, 0, 0, 0, 0, 0, 0,
	464, 473, 498, 458, 0, 0, 0, 0, 0, 0,
	0, 0, 439, 0, 481, 0, 0, 0, 421, 418,
	0, 0, 462, 0, 0, 0, 423, 0, 440, 499,
	0, 410, 136, 0, 0, 503, 510, 459, 257, 514,
	457, 456, 201, 0, 232, 139, 153, 114, 100, 110,
	0, 138, 179, 208, 212, 447, 411, 507, 437, 445,
	122, 443, 210, 189, 248, 0, 480, 191, 209, 157,
	238, 202, 247, 258, 259, 235, 255, 263, 225, 103,
	234, 246, 119, 220, 105, 244, 231, 168, 148, 149,
	104, 0, 206, 127, 134, 124, 181, 241, 242, 123,
	266, 111, 254, 107, 112, 253, 175, 237, 245, 169,
	162, 106, 243, 167, 161, 152, 131, 141, 199, 159,
	200, 142, 172, 171, 173, 0, 416, 0, 229, 251,
	267, 116, 432, 0, 236, 261, 262, 0, 0, 117,
	135, 130, 198, 174, 113, 144, 226, 151, 158, 205,
	265, 188, 211, 120, 250, 227, 428, 431, 426, 427,
	475, 476, 522, 523, 524, 500, 422, 0, 429, 430,
	0, 505, 512, 513, 479, 99, 108, 155, 264, 203,
	133, 252, 412, 425, 126, 435, 0, 0, 448, 453,
	454, 466, 468, 469, 470, 471, 478, 485, 486, 488,
	494, 495, 496, 497, 502, 509, 528, 101, 102, 109,
	115, 121, 125, 129, 132, 137, 140, 143, 145, 146,
	147, 150, 160, 163, 164, 165, 166, 176, 177, 178,
	180, 183, 184, 185, 186, 187, 190, 192, 193, 194,
	195, 196, 197, 204, 207, 213, 214, 215, 216, 217,
	218, 219, 221, 222, 223, 224, 230, 233, 239, 240,
	249, 256, 260, 516, 504, 0, 461, 519, 434, 451,
	527, 452, 455, 492, 419, 474, 182, 449, 0, 438,
	414, 444, 415, 436, 463, 128, 433, 506, 477, 518,
	154, 517, 467, 525, 156, 483, 0, 228, 170, 0,
	0, 465, 508, 472, 501, 460, 493, 424, 482, 520,
	450, 490, 521, 0, 0, 0, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 118, 0, 487, 515, 446,
	489, 491, 413, 484, 0, 417, 420, 526, 511, 441,
	442, 0, 0, 0, 0, 0, 0, 0, 464, 473,
	498, 458, 0, 0, 0, 0, 0, 0, 0, 0,
	439, 0, 481, 0, 0, 0, 421, 418, 0, 0,
	462, 0, 0, 0, 423, 0, 440, 499, 0, 410,
	136, 0, 0, 503, 510, 459, 257, 514, 457, 456,
	201, 0, 232, 139, 153, 114, 100, 110, 0, 138,
	179, 208, 212, 447, 411, 507, 437, 445, 122, 443,
	210, 189, 248, 0, 480, 191, 209, 157, 238, 202,
	247, 258, 259, 235, 255, 263, 225, 103, 234, 246,
	119, 220, 105, 244, 231, 168, 148, 149, 104, 0,
	206, 127, 134, 124, 181, 241, 242, 123, 266, 111,
	254, 107, 112, 253, 175, 237, 245, 169, 162, 106,
	243, 167, 161, 152, 131, 141, 199, 159, 200, 142,
	172, 171, 173, 0, 416, 0, 229, 251, 267, 116,
	432, 0, 236, 261, 262, 0, 0, 117, 135, 130,
	198, 174, 113, 144, 226, 151, 158, 205, 265, 188,
	211, 120, 250, 227, 428, 431, 426, 427, 475, 476,
	522, 523, 524, 500, 422, 0, 429, 430, 0, 505,
	512, 513, 479, 99, 108, 155, 264, 203, 133, 252,
	412, 425, 126, 435, 0, 0, 448, 453, 454, 466,
	468, 469, 470, 471, 478, 485, 486, 488, 494, 495,
	496, 497, 502, 509, 528, 101, 102, 109, 115, 121,
	125, 129, 132, 137, 140, 143, 145, 146, 147, 150,
	160, 163, 164, 165, 166, 176, 177, 178, 180, 183,
	184, 185, 186, 187, 190, 192, 193, 194, 195, 196,
	197, 204, 207, 213, 214, 215, 216, 217, 218, 219,
	221, 222, 223, 224, 230, 233, 239, 240, 249, 256,
	260, 516, 504, 0, 461, 519, 434, 451, 527, 452,
	455, 492, 419, 474, 182, 449, 0, 438, 414, 444,
	415, 436, 463, 128, 433, 506, 477, 518, 154, 517,
	467, 525, 156, 483, 0, 228, 170, 0, 0, 465,
	508, 472, 501, 460, 493, 424, 482, 520, 450, 490,
	521, 0, 0, 0, 408, 0, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 487, 515, 446, 489, 491,
	413, 484, 0, 417, 420, 526, 511, 441, 442, 0,
	0, 0, 0, 0, 0, 0, 464, 473, 498, 458,
	0, 0, 0, 0, 0, 0, 0, 0, 439, 0,
	481, 0, 0, 0, 421, 418, 0, 0, 462, 0,
	0, 0, 423, 0, 440, 499, 0, 410, 136, 0,
	0, 503, 510, 459, 257, 514, 457, 456, 201, 0,
	232, 139, 153, 114, 100, 110, 0, 138, 179, 208,
	212, 447, 411, 507, 437, 445, 122, 443, 210, 189,
	248, 0, 480, 191, 209, 157, 238, 202, 247, 258,
	259, 235, 255, 263, 225, 103, 234, 246, 119, 220,
	105, 244, 231, 168, 148, 149, 104, 0, 206, 127,
	134, 124, 181, 241, 242, 123, 266, 111, 254, 107,
	406, 253, 175, 237, 245, 169, 162, 106, 243, 167,
	161, 152, 131, 141, 199, 159, 200, 142, 172, 171,
	173, 0, 416, 0, 229, 251, 267, 116, 432, 0,
	236, 261, 262, 0, 0, 117, 135, 130, 198, 407,
	405, 144, 226, 151, 158, 205, 265, 188, 211, 120,
	250, 227, 428, 431, 426, 427, 475, 476, 522, 523,
	524, 500, 422, 0, 429, 430, 0, 505, 512, 513,
	479, 99, 108, 155, 264, 203, 133, 252, 412, 425,
	126, 435, 0, 0, 448, 453, 454, 466, 468, 469,
	470, 471, 478, 485, 486, 488, 494, 495, 496, 497,
	502, 509, 528, 101, 102, 109, 115, 121, 125, 129,
	132, 137, 140, 143, 145, 146, 147, 150, 160, 163,
	164, 165, 166, 176, 177, 178, 180, 183, 184, 185,
	186, 187, 190, 192, 193, 194, 195, 196, 197, 204,
	207, 213, 214, 215, 216, 217, 218, 219, 221, 222,
	223, 224, 230, 233, 239, 240, 249, 256, 260, 516,
	504, 0, 461, 519, 434, 451, 527, 452, 455, 492,
	419, 474, 182, 449, 0, 438, 414, 444, 415, 436,
	463, 128, 433, 506, 477, 518, 154, 517, 467, 525,
	156, 483, 0, 228, 170, 0, 0, 465, 508, 472,
	501, 460, 493, 424, 482, 520, 450, 490, 521, 0,
	0, 0, 97, 0, 0, 0, 0, 0, 0, 0,
	0, 118, 0, 487, 515, 446, 489, 491, 413, 484,
	0, 417, 420, 526, 511, 441, 442, 0, 0, 0,
	0, 0, 0, 0, 464, 473, 498, 458, 0, 0,
	0, 0, 0, 0, 0, 0, 439, 0, 481, 0,
	0, 0, 421, 418, 0, 0, 462, 0, 0, 0,
	423, 0, 440, 499, 0, 410, 136, 0, 0, 503,
	510, 459, 257, 514, 457, 456, 201, 0, 232, 139,
	153, 114, 100, 110, 0, 138, 179, 208, 212, 447,
	411, 507, 437, 445, 122, 443, 210, 189, 248, 0,
	480, 191, 209, 157, 238, 202, 247, 258, 259, 235,
	255, 263, 225, 103, 234, 246, 119, 220, 105, 244,
	231, 168, 148, 149, 104, 0, 206, 127, 134, 124,
	181, 241, 242, 123, 266, 111, 254, 107, 112, 253,
	175, 237, 245, 169, 162, 106, 243, 167, 161, 152,
	131, 141, 199, 159, 200, 142, 172, 171, 173, 0,
	416, 0, 229, 251, 267, 116, 432, 0, 236, 261,
	262, 0, 0, 117, 135, 130, 198, 174, 113, 144,
	226, 151, 158, 205, 265, 188, 211, 120, 250, 227,
	428, 431, 426, 427, 475, 476, 522, 523, 524, 500,
	422, 0, 429, 430, 0, 505, 512, 513, 479, 99,
	108, 155, 264, 203, 133, 252, 412, 425, 126, 435,
	0, 0, 448, 453, 454, 466, 468, 469, 470, 471,
	478, 485, 486, 488, 494, 495, 496, 497, 502, 509,
	528, 101, 102, 109, 115, 121, 125, 129, 132, 137,
	140, 143, 145, 146, 147, 150, 160, 163, 164, 165,
	166, 176, 177, 178, 180, 183, 184, 185, 186, 187,
	190, 192, 193, 194, 195, 196, 197, 204, 207, 213,
	214, 215, 216, 217, 218, 219, 221, 222, 223, 224,
	230, 233, 239, 240, 249, 256, 260, 516, 504, 0,
	461, 519, 434, 451, 527, 452, 455, 492, 419, 474,
	182, 449, 0, 438, 414, 444, 415, 436, 463, 128,
	433, 506, 477, 518, 154, 517, 467, 525, 156, 483,
	0, 228, 170, 0, 0, 465, 508, 472, 501, 460,
	493, 424, 482, 520, 450, 490, 521, 0, 0, 0,
	408, 0, 0, 0, 0, 0, 0, 0, 0, 118,
	0, 487, 515, 446, 489, 491, 413, 484, 0, 417,
	420, 526, 511, 441, 442, 0, 0, 0, 0, 0,
	0, 0, 464, 473, 498, 458, 0, 0, 0, 0,
	0, 0, 0, 0, 439, 0, 481, 0, 0, 0,
	421, 418, 0, 0, 462, 0, 0, 0, 423, 0,
	440, 499, 0, 410, 136, 0, 0, 503, 510, 459,
	257, 514, 457, 456, 201, 0, 232, 139, 153, 114,
	100, 110, 0, 138, 179, 208, 212, 447, 411, 507,
	437, 445, 122, 443, 210, 189, 248, 0, 480, 191,
	209, 157, 238, 202, 247, 258, 259, 235, 255, 263,
	225, 103, 234, 727, 119, 220, 105, 244, 231, 168,
	148, 149, 104, 0, 206, 127, 134, 124, 181, 241,
	242, 123, 266, 111, 254, 107, 406, 253, 175, 237,
	245, 169, 162, 106, 243, 167, 161, 152, 131, 141,
	199, 159, 200, 142, 172, 171, 173, 0, 416, 0,
	229, 251, 267, 116, 432, 0, 236, 261, 262, 0,
	0, 117, 135, 130, 198, 407, 405, 144, 226, 151,
	158, 205, 265, 188, 211, 120, 250, 227, 428, 431,
	426, 427, 475, 476, 522, 523, 524, 500, 422, 0,
	429, 430, 0, 505, 512, 513, 479, 99, 108, 155,
	264, 203, 133, 252, 412, 425, 126, 435, 0, 0,
	448, 453, 454, 466, 468, 469, 470, 471, 478, 485,
	486, 488, 494, 495, 496, 497, 502, 509, 528, 101,
	102, 109, 115, 121, 125, 129, 132, 137, 140, 143,
	145, 146, 147, 150, 160, 163, 164, 165, 166, 176,
	177, 178, 180, 183, 184, 185, 186, 187, 190, 192,
	193, 194, 195, 196, 197, 204, 207, 213, 214, 215,
	216, 217, 218, 219, 221, 222, 223, 224, 230, 233,
	239, 240, 249, 256, 260, 516, 504, 0, 461, 519,
	434, 451, 527, 452, 455, 492, 419, 474, 182, 449,
	0, 438, 414, 444, 415, 436, 463, 128, 433, 506,
	477, 518, 154, 517, 467, 525, 156, 483, 0, 228,
	170, 0, 0, 465, 508, 472, 501, 460, 493, 424,
	482, 520, 450, 490, 521, 0, 0, 0, 408, 0,
	0, 0, 0, 0, 0, 0, 0, 118, 0, 487,
	515, 446, 489, 491, 413, 484, 0, 417, 420, 526,
	511, 441, 442, 0, 0, 0, 0, 0, 0, 0,
	464, 473, 498, 458, 0, 0, 0, 0, 0, 0,
	0, 0, 439, 0, 481, 0, 0, 0, 421, 418,
	0, 0, 462, 0, 0, 0, 423, 0, 440, 499,
	0, 410, 136, 0, 0, 503, 510, 459, 257, 514,
	457, 456, 201, 0, 232, 139, 153, 114, 100, 110,
	0, 138, 179, 208, 212, 447, 411, 507, 437, 445,
	122, 443, 210, 189, 248, 0, 480, 191, 209, 157,
	238, 202, 247, 258, 259, 235, 255, 263, 225, 103,
	234, 397, 119, 220, 105, 244, 231, 168, 148, 149,
	104, 0, 206, 127, 134, 124, 181, 241, 242, 123,
	266, 111, 254, 107, 406, 253, 175, 237, 245, 169,
	162, 106, 243, 167, 161, 152, 131, 141, 199, 159,
	200, 142, 172, 171, 173, 0, 416, 0, 229, 251,
	267, 116, 432, 0, 236, 261, 262, 0, 0, 117,
	135, 130, 198, 407, 405, 400, 399, 151, 158, 205,
	265, 188, 211, 120, 250, 227, 428, 431, 426, 427,
	475, 476, 522, 523, 524, 500, 422, 0, 429, 430,
	0, 505, 512, 513, 479, 99, 108, 155, 264, 203,
	133, 252, 412, 425, 126, 435, 0, 0, 448, 453,
	454, 466, 468, 469, 470, 471, 478, 485, 486, 488,
	494, 495, 496, 497, 502, 509, 528, 101, 102, 109,
	115, 121, 125, 129, 132, 137, 140, 143, 145, 146,
	147, 150, 160, 163, 164, 165, 166, 176, 177, 178,
	180, 183, 184, 185, 186, 187, 190, 192, 193, 194,
	195, 196, 197, 204, 207, 213, 214, 215, 216, 217,
	218, 219, 221, 222, 223, 224, 230, 233, 239, 240,
	249, 256, 260, 182, 0, 0, 0, 0, 331, 0,
	0, 0, 128, 328, 0, 0, 0, 154, 0, 0,
	372, 156, 0, 0, 228, 170, 0, 0, 0, 0,
	362, 363, 0, 0, 0, 0, 0, 0, 972, 0,
	61, 0, 0, 329, 350, 349, 352, 353, 354, 355,
	0, 0, 118, 351, 356, 357, 358, 973, 0, 0,
	326, 343, 0, 371, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 340, 341, 0, 0, 0, 0, 385,
	0, 342, 0, 0, 337, 338, 339, 344, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 136, 0, 0,
	0, 0, 0, 257, 0, 0, 383, 201, 0, 232,
	139, 153, 114, 100, 110, 0, 138, 179, 208, 212,
	369, 0, 0, 0, 0, 122, 0, 210, 189, 248,
	0, 0, 191, 209, 157, 238, 202, 247, 258, 259,
	235, 255, 263, 225, 103, 234, 246, 119, 220, 105,
	244, 231, 168, 148, 149, 104, 0, 206, 127, 134,
	124, 181, 241, 242, 123, 266, 111, 254, 107, 112,
	253, 175, 237, 245, 169, 162, 106, 243, 167, 161,
	152, 131, 141, 199, 159, 200, 142, 172, 171, 173,
	0, 0, 0, 229, 251, 267, 116, 0, 0, 236,
	261, 262, 0, 0, 117, 135, 130, 198, 174, 113,
	144, 226, 151, 158, 205, 265, 188, 211, 120, 250,
	227, 373, 384, 379, 380, 377, 378, 376, 375, 374,
	386, 364, 365, 366, 367, 370, 0, 381, 382, 368,
	99, 108, 155, 264, 203, 133, 252, 0, 0, 126,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 102, 109, 115, 121, 125, 129, 132,
	137, 140, 143, 145, 146, 147, 150, 160, 163, 164,
	165, 166, 176, 177, 178, 180, 183, 184, 185, 186,
	187, 190, 192, 193, 194, 195, 196, 197, 204, 207,
	213, 214, 215, 216, 217, 218, 219, 221, 222, 223,
	224, 230, 233, 239, 240, 249, 256, 260, 182, 0,
	0, 0, 0, 331, 0, 0, 0, 128, 328, 0,
	0, 0, 154, 0, 0, 372, 156, 0, 0, 228,
	170, 0, 0, 0, 0, 362, 363, 0, 0, 0,
	0, 0, 0, 0, 0, 61, 0, 592, 329, 350,
	349, 352, 353, 354, 355, 0, 0, 118, 351, 356,
	357, 358, 0, 0, 0, 326, 343, 0, 371, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 340, 341,
	0, 0, 0, 0, 385, 0, 342, 0, 0, 337,
	338, 339, 344, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 136, 0, 0, 0, 0, 0, 257, 0,
	0, 383, 201, 0, 232, 139, 153, 114, 100, 110,
	0, 138, 179, 208, 212, 369, 0, 0, 0, 0,
	122, 0, 210, 189, 248, 0, 0, 191, 209, 157,
	238, 202, 247, 258, 259, 235, 255, 263, 225, 103,
	234, 246, 119, 220, 105, 244, 231, 168, 148, 149,
	104, 0, 206, 127, 134, 124, 181, 241, 242, 123,
	266, 111, 254, 107, 112, 253, 175, 237, 245, 169,
	162, 106, 243, 167, 161, 152, 131, 141, 199, 159,
	200, 142, 172, 171, 173, 0, 0, 0, 229, 251,
	267, 116, 0, 0, 236, 261, 262, 0, 0, 117,
	135, 130, 198, 174, 113, 144, 226, 151, 158, 205,
	265, 188, 211, 120, 250, 227, 373, 384, 379, 380,
	377, 378, 376, 375, 374, 386, 364, 365, 366, 367,
	370, 0, 381, 382, 368, 99, 108, 155, 264, 203,
	133, 252, 0, 0, 126, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 102, 109,
	115, 121, 125, 129, 132, 137, 140, 143, 145, 146,
	147, 150, 160, 163, 164, 165, 166, 176, 177, 178,
	180, 183, 184, 185, 186, 187, 190, 192, 193, 194,
	195, 196, 197, 204, 207, 213, 214, 215, 216, 217,
	218, 219, 221, 222, 223, 224, 230, 233, 239, 240,
	249, 256, 260, 182, 0, 0, 0, 0, 331, 0,
	0, 0, 128, 328, 0, 0, 0, 154, 0, 0,
	372, 156, 0, 0, 228, 170, 0, 0, 0, 0,
	362, 363, 0, 0, 0, 0, 0, 0, 0, 0,
	61, 0, 0, 329, 350, 349, 352, 353, 354, 355,
	0, 0, 118, 351, 356, 357, 358, 0, 0, 0,
	326, 343, 0, 371, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 340, 341, 322, 0, 0, 0, 385,
	0, 342, 0, 0, 337, 338, 339, 344, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 136, 0, 0,
	0, 0, 0, 257, 0, 0, 383, 201, 0, 232,
	139, 153, 114, 100, 110, 0, 138, 179, 208, 212,
	369, 0, 0, 0, 0, 122, 0, 210, 189, 248,
	0, 0, 191, 209, 157, 238, 202, 247, 258, 259,
	235, 255, 263, 225, 103, 234, 246, 119, 220, 105,
	244, 231, 168, 148, 149, 104, 0, 206, 127, 134,
	124, 181, 241, 242, 123, 266, 111, 254, 107, 112,
	253, 175, 237, 245, 169, 162, 106, 243, 167, 161,
	152, 131, 141, 199, 159, 200, 142, 172, 171, 173,
	0, 0, 0, 229, 251, 267, 116, 0, 0, 236,
	261, 262, 0, 0, 117, 135, 130, 198, 174, 113,
	144, 226, 151, 158, 205, 265, 188, 211, 120, 250,
	227, 373, 384, 379, 380, 377, 378, 376, 375, 374,
	386, 364, 365, 366, 367, 370, 0, 381, 382, 368,
	99, 108, 155, 264, 203, 133, 252, 0, 0, 126,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 102, 109, 115, 121, 125, 129, 132,
	137, 140, 143, 145, 146, 147, 150, 160, 163, 164,
	165, 166, 176, 177, 178, 180, 183, 184, 185, 186,
	187, 190, 192, 193, 194, 195, 196, 197, 204, 207,
	213, 214, 215, 216, 217, 218, 219, 221, 222, 223,
	224, 230, 233, 239, 240, 249, 256, 260, 182, 0,
	0, 0, 0, 331, 0, 0, 0, 128, 328, 0,
	0, 0, 154, 0, 0, 372, 156, 0, 0, 228,
	170, 0, 0, 0, 0, 362, 363, 0, 0, 0,
	0, 0, 0, 0, 0, 61, 0, 0, 329, 350,
	912, 352, 353, 354, 355, 0, 0, 118, 351, 356,
	357, 358, 0, 0, 0, 326, 343, 0, 371, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 340, 341,
	322, 0, 0, 0, 385, 0, 342, 0, 0, 337,
	338, 339, 344, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 136, 0, 0, 0, 0, 0, 257, 0,
	0, 383, 201, 0, 232, 139, 153, 114, 100, 110,
	0, 138, 179, 208, 212, 369, 0, 0, 0, 0,
	122, 0, 210, 189, 248, 0, 0, 191, 209, 157,
	238, 202, 247, 258, 259, 235, 255, 263, 225, 103,
	234, 246, 119, 220, 105, 244, 231, 168, 148, 149,
	104, 0, 206, 127, 134, 124, 181, 241, 242, 123,
	266, 111, 254, 107, 112, 253, 175, 237, 245, 169,
	162, 106, 243, 167, 161, 152, 131, 141, 199, 159,
	200, 142, 172, 171, 173, 0, 0, 0, 229, 251,
	267, 116, 0, 0, 236, 261, 262, 0, 0, 117,
	135, 130, 198, 174, 113, 144, 226, 151, 158, 205,
	265, 188, 211, 120, 250, 227, 373, 384, 379, 380,
	377, 378, 376, 375, 374, 386, 364, 365, 366, 367,
	370, 0, 381, 382, 368, 99, 108, 155, 264, 203,
	133, 252, 0, 0, 126, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 102, 109,
	115, 121, 125, 129, 132, 137, 140, 143, 145, 146,
	147, 150, 160, 163, 164, 165, 166, 176, 177, 178,
	180, 183, 184, 185, 186, 187, 190, 192, 193, 194,
	195, 196, 197, 204, 207, 213, 214, 215, 216, 217,
	218, 219, 221, 222, 223, 224, 230, 233, 239, 240,
	249, 256, 260, 182, 0, 0, 0, 0, 331, 0,
	0, 0, 128, 328, 0, 0, 0, 154, 0, 0,
	372, 156, 0, 0, 228, 170, 0, 0, 0, 0,
	362, 363, 0, 0, 0, 0, 0, 0, 0, 0,
	61, 0, 0, 329, 350, 909, 352, 353, 354, 355,
	0, 0, 118, 351, 356, 357, 358, 0, 0, 0,
	326, 343, 0, 371, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 340, 341, 322, 0, 0, 0, 385,
	0, 342, 0, 0, 337, 338, 339, 344, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 136, 0, 0,
	0, 0, 0, 257, 0, 0, 383, 201, 0, 232,
	139, 153, 114, 100, 110, 0, 138, 179, 208, 212,
	369, 0, 0, 0, 0, 122, 0, 210, 189, 248,
	0, 0, 191, 209, 157, 238, 202, 247, 258, 259,
	235, 255, 263, 225, 103, 234, 246, 119, 220, 105,
	244, 231, 168, 148, 149, 104, 0, 206, 127, 134,
	124, 181, 241, 242, 123, 266, 111, 254, 107, 112,
	253, 175, 237, 245, 169, 162, 106, 243, 167, 161,
	152, 131, 141, 199, 159, 200, 142, 172, 171, 173,
	0, 0, 0, 229, 251, 267, 116, 0, 0, 236,
	261, 262, 0, 0, 117, 135, 130, 198, 174, 113,
	144, 226, 151, 158, 205, 265, 188, 211, 120, 250,
	227, 373, 384, 379, 380, 377, 378, 376, 375, 374,
	386, 364, 365, 366, 367, 370, 0, 381, 382, 368,
	99, 108, 155, 264, 203, 133, 252, 0, 0, 126,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 102, 109, 115, 121, 125, 129, 132,
	137, 140, 143, 145, 146, 147, 150, 160, 163, 164,
	165, 166, 176, 177, 178, 180, 183, 184, 185, 186,
	187, 190, 192, 193, 194, 195, 196, 197, 204, 207,
	213, 214, 215, 216, 217, 218, 219, 221, 222, 223,
	224, 230, 233, 239, 240, 249, 256, 260, 26, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 0, 0, 0, 0, 331, 0, 0, 0, 128,
	328, 0, 0, 0, 154, 0, 0, 372, 156, 0,
	0, 228, 170, 0, 0, 0, 0, 362, 363, 0,
	0, 0, 0, 0, 0, 0, 0, 61, 0, 0,
	329, 350, 349, 352, 353, 354, 355, 0, 0, 118,
	351, 356, 357, 358, 0, 0, 0, 326, 343, 0,
	371, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	340, 341, 0, 0, 0, 0, 385, 0, 342, 0,
	0, 337, 338, 339, 344, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 0, 0, 0, 0, 0,
	257, 0, 0, 383, 201, 0, 232, 139, 153, 114,
	100, 110, 0, 138, 179, 208, 212, 369, 0, 0,
	0, 0, 122, 0, 210, 189, 248, 0, 0, 191,
	209, 157, 238, 202, 247, 258, 259, 235, 255, 263,
	225, 103, 234, 246, 119, 220, 105, 244, 231, 168,
	148, 149, 104, 0, 206, 127, 134, 124, 181, 241,
	242, 123, 266, 111, 254, 107, 112, 253, 175, 237,
	245, 169, 162, 106, 243, 167, 161, 152, 131, 141,
	199, 159, 200, 142, 172, 171, 173, 0, 0, 0,
	229, 251, 267, 116, 0, 0, 236, 261, 262, 0,
	0, 117, 135, 130, 198, 174, 113, 144, 226, 151,
	158, 205, 265, 188, 211, 120, 250, 227, 373, 384,
	379, 380, 377, 378, 376, 375, 374, 386, 364, 365,
	366, 367, 370, 0, 381, 382, 368, 99, 108, 155,
	264, 203, 133, 252, 0, 0, 126, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	102, 109, 115, 121, 125, 129, 132, 137, 140, 143,
	145, 146, 147, 150, 160, 163, 164, 165, 166, 176,
	177, 178, 180, 183, 184, 185, 186, 187, 190, 192,
	193, 194, 195, 196, 197, 204, 207, 213, 214, 215,
	216, 217, 218, 219, 221, 222, 223, 224, 230, 233,
	239, 240, 249, 256, 260, 182, 0, 0, 0, 0,
	331, 0, 0, 0, 128, 328, 0, 0, 0, 154,
	0, 0, 372, 156, 0, 0, 228, 170, 0, 0,
	0, 0, 362, 363, 0, 0, 0, 0, 0, 0,
	0, 0, 61, 0, 0, 329, 350, 349, 352, 353,
	354, 355, 0, 0, 118, 351, 356, 357, 358, 0,
	0, 0, 326, 343, 0, 371, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 340, 341, 0, 0, 0,
	0, 385, 0, 342, 0, 0, 337, 338, 339, 344,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 136,
	0, 0, 0, 0, 0, 257, 0, 0, 383, 201,
	0, 232, 139, 153, 114, 100, 110, 0, 138, 179,
	208, 212, 369, 0, 0, 0, 0, 122, 0, 210,
	189, 248, 0, 0, 191, 209, 157, 238, 202, 247,
	258, 259, 235, 255, 263, 225, 103, 234, 246, 119,
	220, 105, 244, 231, 168, 148, 149, 104, 0, 206,
	127, 134, 124, 181, 241, 242, 123, 266, 111, 254,
	107, 112, 253, 175, 237, 245, 169, 162, 106, 243,
	167, 161, 152, 131, 141, 199, 159, 200, 142, 172,
	171, 173, 0, 0, 0, 229, 251, 267, 116, 0,
	0, 236, 261, 262, 0, 0, 117, 135, 130, 198,
	174, 113, 144, 226, 151, 158, 205, 265, 188, 211,
	120, 250, 227, 373, 384, 379, 380, 377, 378, 376,
	375, 374, 386, 364, 365, 366, 367, 370, 0, 381,
	382, 368, 99, 108, 155, 264, 203, 133, 252, 0,
	0, 126, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 102, 109, 115, 121, 125,
	129, 132, 137, 140, 143, 145, 146, 147, 150, 160,
	163, 164, 165, 166, 176, 177, 178, 180, 183, 184,
	185, 186, 187, 190, 192, 193, 194, 195, 196, 197,
	204, 207, 213, 214, 215, 216, 217, 218, 219, 221,
	222, 223, 224, 230, 233, 239, 240, 249, 256, 260,
	182, 0, 0, 0, 0, 0, 0, 0, 0, 128,
	0, 0, 0, 0, 154, 0, 0, 372, 156, 0,
	0, 228, 170, 0, 0, 0, 0, 362, 363, 0,
	0, 0, 0, 0, 0, 0, 0, 61, 0, 0,
	329, 350, 349, 352, 353, 354, 355, 0, 0, 118,
	351, 356, 357, 358, 0, 0, 0, 0, 343, 0,
	371, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	340, 341, 0, 0, 0, 0, 385, 0, 342, 0,
	0, 337, 338, 339, 344, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 0, 0, 0, 0, 0,
	257, 0, 0, 383, 201, 0, 232, 139, 153, 114,
	100, 110, 0, 138, 179, 208, 212, 369, 0, 0,
	0, 0, 122, 0, 210, 189, 248, 0, 1571, 191,
	209, 157, 238, 202, 247, 258, 259, 235, 255, 263,
	225, 103, 234, 246, 119, 220, 105, 244, 231, 168,
	148, 149, 104, 0, 206, 127, 134, 124, 181, 241,
	242, 123, 266, 111, 254, 107, 112, 253, 175, 237,
	245, 169, 162, 106, 243, 167, 161, 152, 131, 141,
	199, 159, 200, 142, 172, 171, 173, 0, 0, 0,
	229, 251, 267, 116, 0, 0, 236, 261, 262, 0,
	0, 117, 135, 130, 198, 174, 113, 144, 226, 151,
	158, 205, 265, 188, 211, 120, 250, 227, 373, 384,
	379, 380, 377, 378, 376, 375, 374, 386, 364, 365,
	366, 367, 370, 0, 381, 382, 368, 99, 108, 155,
	264, 203, 133, 252, 0, 0, 126, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	102, 109, 115, 121, 125, 129, 132, 137, 140, 143,
	145, 146, 147, 150, 160, 163, 164, 165, 166, 176,
	177, 178, 180, 183, 184, 185, 186, 187, 190, 192,
	193, 194, 195, 196, 197, 204, 207, 213, 214, 215,
	216, 217, 218, 219, 221, 222, 223, 224, 230, 233,
	239, 240, 249, 256, 260, 182, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 0, 0, 0, 0, 154,
	0, 0, 372, 156, 0, 0, 228, 170, 0, 0,
	0, 0, 362, 363, 0, 0, 0, 0, 0, 0,
	0, 0, 61, 0, 592, 329, 350, 349, 352, 353,
	354, 355, 0, 0, 118, 351, 356, 357, 358, 0,
	0, 0, 0, 343, 0, 371, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 340, 341, 0, 0, 0,
	0, 385, 0, 342, 0, 0, 337, 338, 339, 344,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 136,
	0, 0, 0, 0, 0, 257, 0, 0, 383, 201,
	0, 232, 139, 153, 114, 100, 110, 0, 138, 179,
	208, 212, 369, 0, 0, 0, 0, 122, 0, 210,
	189, 248, 0, 0, 191, 209, 157, 238, 202, 247,
	258, 259, 235, 255, 263, 225, 103, 234, 246, 119,
	220, 105, 244, 231, 168, 148, 149, 104, 0, 206,
	127, 134, 124, 181, 241, 242, 123, 266, 111, 254,
	107, 112, 253, 175, 237, 245, 169, 162, 106, 243,
	167, 161, 152, 131, 141, 199, 159, 200, 142, 172,
	171, 173, 0, 0, 0, 229, 251, 267, 116, 0,
	0, 236, 261, 262, 0, 0, 117, 135, 130, 198,
	174, 113, 144, 226, 151, 158, 205, 265, 188, 211,
	120, 250, 227, 373, 384, 379, 380, 377, 378, 376,
	375, 374, 386, 364, 365, 366, 367, 370, 0, 381,
	382, 368, 99, 108, 155, 264, 203, 133, 252, 0,
	0, 126, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 102, 109, 115, 121, 125,
	129, 132, 137, 140, 143, 145, 146, 147, 150, 160,
	163, 164, 165, 166, 176, 177, 178, 180, 183, 184,
	185, 186, 187, 190, 192, 193, 194, 195, 196, 197,
	204, 207, 213, 214, 215, 216, 217, 218, 219, 221,
	222, 223, 224, 230, 233, 239, 240, 249, 256, 260,
	182, 0, 0, 0, 0, 0, 0, 0, 0, 128,
	0, 0, 0, 0, 154, 0, 0, 372, 156, 0,
	0, 228, 170, 0, 0, 0, 0, 362, 363, 0,
	0, 0, 0, 0, 0, 0, 0, 61, 0, 0,
	329, 350, 349, 352, 353, 354, 355, 0, 0, 118,
	351, 356, 357, 358, 0, 0, 0, 0, 343, 0,
	371, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	340, 341, 0, 0, 0, 0, 385, 0, 342, 0,
	0, 337, 338, 339, 344, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 0, 0, 0, 0, 0,
	257, 0, 0, 383, 201, 0, 232, 139, 153, 114,
	100, 110, 0, 138, 179, 208, 212, 369, 0, 0,
	0, 0, 122, 0, 210, 189, 248, 0, 0, 191,
	209, 157, 238, 202, 247, 258, 259, 235, 255, 263,
	225, 103, 234, 246, 119, 220, 105, 244, 231, 168,
	148, 149, 104, 0, 206, 127, 134, 124, 181, 241,
	242, 123, 266, 111, 254, 107, 112, 253, 175, 237,
	245, 169, 162, 106, 243, 167, 161, 152, 131, 141,
	199, 159, 200, 142, 172, 171, 173, 0, 0, 0,
	229, 251, 267, 116, 0, 0, 236, 261, 262, 0,
	0, 117, 135, 130, 198, 174, 113, 144, 226, 151,
	158, 205, 265, 188, 211, 120, 250, 227, 373, 384,
	379, 380, 377, 378, 376, 375, 374, 386, 364, 365,
	366, 367, 370, 0, 381, 382, 368, 99, 108, 155,
	264, 203, 133, 252, 0, 0, 126, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	102, 109, 115, 121, 125, 129, 132, 137, 140, 143,
	145, 146, 147, 150, 160, 163, 164, 165, 166, 176,
	177, 178, 180, 183, 184, 185, 186, 187, 190, 192,
	193, 194, 195, 196, 197, 204, 207, 213, 214, 215,
	216, 217, 218, 219, 221, 222, 223, 224, 230, 233,
	239, 240, 249, 256, 260, 182, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 0, 0, 0, 0, 154,
	0, 0, 0, 156, 0, 0, 228, 170, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 408, 0, 0, 0, 0,
	0, 0, 0, 0, 118, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 633, 632, 642, 643, 635, 636, 637, 638, 639,
	640, 641, 634, 0, 0, 644, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 136,
	0, 0, 0, 0, 0, 257, 0, 0, 0, 201,
	0, 232, 139, 153, 114, 100, 110, 0, 138, 179,
	208, 212, 0, 0, 0, 0, 0, 122, 0, 210,
	189, 248, 0, 0, 191, 209, 157, 238, 202, 247,
	258, 259, 235, 255, 263, 225, 103, 234, 246, 119,
	220, 105, 244, 231, 168, 148, 149, 104, 0, 206,
	127, 134, 124, 181, 241, 242, 123, 266, 111, 254,
	107, 112, 253, 175, 237, 245, 169, 162, 106, 243,
	167, 161, 152, 131, 141, 199, 159, 200, 142, 172,
	171, 173, 0, 0, 0, 229, 251, 267, 116, 0,
	0, 236, 261, 262, 0, 0, 117, 135, 130, 198,
	174, 113, 144, 226, 151, 158, 205, 265, 188, 211,
	120, 250, 227, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 108, 155, 264, 203, 133, 252, 0,
	0, 126, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 102, 109, 115, 121, 125,
	129, 132, 137, 140, 143, 145, 146, 147, 150, 160,
	163, 164, 165, 166, 176, 177, 178, 180, 183, 184,
	185, 186, 187, 190, 192, 193, 194, 195, 196, 197,
	204, 207, 213, 214, 215, 216, 217, 218, 219, 221,
	222, 223, 224, 230, 233, 239, 240, 249, 256, 260,
	182, 0, 0, 0, 621, 0, 0, 0, 0, 128,
	0, 0, 0, 0, 154, 0, 0, 0, 156, 0,
	0, 228, 170, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	408, 0, 623, 0, 0, 0, 0, 0, 0, 118,
	0, 0, 0, 0, 0, 618, 617, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 619, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 0, 0, 0, 0, 0,
	257, 0, 0, 0, 201, 0, 232, 139, 153, 114,
	100, 110, 0, 138, 179, 208, 212, 0, 0, 0,
	0, 0, 122, 0, 210, 189, 248, 0, 0, 191,
	209, 157, 238, 202, 247, 258, 259, 235, 255, 263,
	225, 103, 234, 246, 119, 220, 105, 244, 231, 168,
	148, 149, 104, 0, 206, 127, 134, 124, 181, 241,
	242, 123, 266, 111, 254, 107, 112, 253, 175, 237,
	245, 169, 162, 106, 243, 167, 161, 152, 131, 141,
	199, 159, 200, 142, 172, 171, 173, 0, 0, 0,
	229, 251, 267, 116, 0, 0, 236, 261, 262, 0,
	0, 117, 135, 130, 198, 174, 113, 144, 226, 151,
	158, 205, 265, 188, 211, 120, 250, 227, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 108, 155,
	264, 203, 133, 252, 0, 0, 126, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	102, 109, 115, 121, 125, 129, 132, 137, 140, 143,
	145, 146, 147, 150, 160, 163, 164, 165, 166, 176,
	177, 178, 180, 183, 184, 185, 186, 187, 190, 192,
	193, 194, 195, 196, 197, 204, 207, 213, 214, 215,
	216, 217, 218, 219, 221, 222, 223, 224, 230, 233,
	239, 240, 249, 256, 260, 182, 0, 0, 0, 955,
	0, 0, 0, 0, 128, 0, 0, 0, 0, 154,
	0, 0, 0, 156, 0, 0, 228, 170, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 0, 957, 0, 0,
	0, 0, 0, 0, 118, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 136,
	0, 0, 0, 0, 0, 257, 0, 0, 0, 201,
	0, 232, 139, 153, 114, 100, 110, 0, 138, 179,
	208, 212, 0, 0, 0, 0, 0, 122, 0, 210,
	189, 248, 0, 0, 191, 209, 157, 238, 202, 247,
	258, 259, 235, 255, 263, 225, 103, 234, 246, 119,
	220, 105, 244, 231, 168, 148, 149, 104, 0, 206,
	127, 134, 124, 181, 241, 242, 123, 266, 111, 254,
	107, 112, 253, 175, 237, 245, 169, 162, 106, 243,
	167, 161, 152, 131, 141, 199, 159, 200, 142, 172,
	171, 173, 0, 0, 0, 229, 251, 267, 116, 0,
	0, 236, 261, 262, 0, 0, 117, 135, 130, 198,
	174, 113, 144, 226, 151, 158, 205, 265, 188, 211,
	120, 250, 227, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 108, 155, 264, 203, 133, 252, 0,
	0, 126, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 102, 109, 115, 121, 125,
	129, 132, 137, 140, 143, 145, 146, 147, 150, 160,
	163, 164, 165, 166, 176, 177, 178, 180, 183, 184,
	185, 186, 187, 190, 192, 193, 194, 195, 196, 197,
	204, 207, 213, 214, 215, 216, 217, 218, 219, 221,
	222, 223, 224, 230, 233, 239, 240, 249, 256, 260,
	26, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 182, 0, 0, 0, 0, 0, 0, 0,
	0, 128, 0, 0, 0, 0, 154, 0, 0, 0,
	156, 0, 0, 228, 170, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 61,
	0, 0, 408, 0, 0, 0, 0, 0, 0, 0,
	0, 118, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 136, 0, 0, 0,
	0, 0, 257, 0, 0, 0, 201, 0, 232, 139,
	153, 114, 100, 110, 0, 138, 179, 208, 212, 0,
	0, 0, 0, 0, 122, 0, 210, 189, 248, 0,
	0, 191, 209, 157, 238, 202, 247, 258, 259, 235,
	255, 263, 225, 103, 234, 246, 119, 220, 105, 244,
	231, 168, 148, 149, 104, 0, 206, 127, 134, 124,
	181, 241, 242, 123, 266, 111, 254, 107, 112, 253,
	175, 237, 245, 169, 162, 106, 243, 167, 161, 152,
	131, 141, 199, 159, 200, 142, 172, 171, 173, 0,
	0, 0, 229, 251, 267, 116, 0, 0, 236, 261,
	262, 0, 0, 117, 135, 130, 198, 174, 113, 144,
	226, 151, 158, 205, 265, 188, 211, 120, 250, 227,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	108, 155, 264, 203, 133, 252, 0, 0, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 102, 109, 115, 121, 125, 129, 132, 137,
	140, 143, 145, 146, 147, 150, 160, 163, 164, 165,
	166, 176, 177, 178, 180, 183, 184, 185, 186, 187,
	190, 192, 193, 194, 195, 196, 197, 204, 207, 213,
	214, 215, 216, 217, 218, 219, 221, 222, 223, 224,
	230, 233, 239, 240, 249, 256, 260, 26, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 182,
	0, 0, 0, 0, 0, 0, 0, 0, 128, 0,
	0, 0, 0, 154, 0, 0, 0, 156, 0, 0,
	228, 170, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 61, 0, 0, 97,
	0, 0, 0, 0, 0, 0, 0, 0, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 0, 0, 0, 0, 0, 257,
	0, 0, 0, 201, 0, 232, 139, 153, 114, 100,
	110, 0, 138, 179, 208, 212, 0, 0, 0, 0,
	0, 122, 0, 210, 189, 248, 0, 0, 191, 209,
	157, 238, 202, 247, 258, 259, 235, 255, 263, 225,
	103, 234, 246, 119, 220, 105, 244, 231, 168, 148,
	149, 104, 0, 206, 127, 134, 124, 181, 241, 242,
	123, 266, 111, 254, 107, 112, 253, 175, 237, 245,
	169, 162, 106, 243, 167, 161, 152, 131, 141, 199,
	159, 200, 142, 172, 171, 173, 0, 0, 0, 229,
	251, 267, 116, 0, 0, 236, 261, 262, 0, 0,
	117, 135, 130, 198, 174, 113, 144, 226, 151, 158,
	205, 265, 188, 211, 120, 250, 227, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 108, 155, 264,
	203, 133, 252, 0, 0, 126, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 102,
	109, 115, 121, 125, 129, 132, 137, 140, 143, 145,
	146, 147, 150, 160, 163, 164, 165, 166, 176, 177,
	178, 180, 183, 184, 185, 186, 187, 190, 192, 193,
	194, 195, 196, 197, 204, 207, 213, 214, 215, 216,
	217, 218, 219, 221, 222, 223, 224, 230, 233, 239,
	240, 249, 256, 260, 182, 0, 0, 0, 955, 0,
	0, 0, 0, 128, 0, 0, 0, 0, 154, 0,
	0, 0, 156, 0, 0, 228, 170, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 0, 957, 0, 0, 0,
	0, 0, 0, 118, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 0,
	0, 0, 0, 0, 257, 0, 0, 0, 201, 0,
	232, 139, 153, 114, 100, 110, 0, 138, 179, 208,
	212, 0, 0, 0, 0, 0, 122, 0, 210, 189,
	248, 0, 0, 953, 209, 157, 238, 202, 247, 258,
	259, 235, 255, 263, 225, 103, 234, 246, 119, 220,
	105, 244, 231, 168, 148, 149, 104, 0, 206, 127,
	134, 124, 181, 241, 242, 123, 266, 111, 254, 107,
	112, 253, 175, 237, 245, 169, 162, 106, 243, 167,
	161, 152, 131, 141, 199, 159, 200, 142, 172, 171,
	173, 0, 0, 0, 229, 251, 267, 116, 0, 0,
	236, 261, 262, 0, 0, 117, 135, 130, 198, 174,
	113, 144, 226, 151, 158, 205, 265, 188, 211, 120,
	250, 227, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 108, 155, 264, 203, 133, 252, 0, 0,
	126, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 102, 109, 115, 121, 125, 129,
	132, 137, 140, 143, 145, 146, 147, 150, 160, 163,
	164, 165, 166, 176, 177, 178, 180, 183, 184, 185,
	186, 187, 190, 192, 193, 194, 195, 196, 197, 204,
	207, 213, 214, 215, 216, 217, 218, 219, 221, 222,
	223, 224, 230, 233, 239, 240, 249, 256, 260, 182,
	0, 0, 0, 0, 0, 0, 0, 0, 128, 0,
	0, 0, 0, 154, 0, 0, 0, 156, 0, 0,
	228, 170, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 408,
	0, 0, 850, 0, 0, 851, 0, 0, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 0, 0, 0, 0, 0, 257,
	0, 0, 0, 201, 0, 232, 139, 153, 114, 100,
	110, 0, 138, 179, 208, 212, 0, 0, 0, 0,
	0, 122, 0, 210, 189, 248, 0, 0, 191, 209,
	157, 238, 202, 247, 258, 259, 235, 255, 263, 225,
	103, 234, 246, 119, 220, 105, 244, 231, 168, 148,
	149, 104, 0, 206, 127, 134, 124, 181, 241, 242,
	123, 266, 111, 254, 107, 112, 253, 175, 237, 245,
	169, 162, 106, 243, 167, 161, 152, 131, 141, 199,
	159, 200, 142, 172, 171, 173, 0, 0, 0, 229,
	251, 267, 116, 0, 0, 236, 261, 262, 0, 0,
	117, 135, 130, 198, 174, 113, 144, 226, 151, 158,
	205, 265, 188, 211, 120, 250, 227, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 108, 155, 264,
	203, 133, 252, 0, 0, 126, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 102,
	109, 115, 121, 125, 129, 132, 137, 140, 143, 145,
	146, 147, 150, 160, 163, 164, 165, 166, 176, 177,
	178, 180, 183, 184, 185, 186, 187, 190, 192, 193,
	194, 195, 196, 197, 204, 207, 213, 214, 215, 216,
	217, 218, 219, 221, 222, 223, 224, 230, 233, 239,
	240, 249, 256, 260, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 736, 0, 0, 0, 154, 0,
	0, 0, 156, 0, 0, 228, 170, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 408, 0, 735, 0, 0, 0,
	0, 0, 0, 118, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 0,
	0, 0, 0, 0, 257, 0, 0, 0, 201, 0,
	232, 139, 153, 114, 100, 110, 0, 138, 179, 208,
	212, 0, 0, 0, 0, 0, 122, 0, 210, 189,
	248, 0, 0, 191, 209, 157, 238, 202, 247, 258,
	259, 235, 255, 263, 225, 103, 234, 246, 119, 220,
	105, 244, 231, 168, 148, 149, 104, 0, 206, 127,
	134, 124, 181, 241, 242, 123, 266, 111, 254, 107,
	112, 253, 175, 237, 245, 169, 162, 106, 243, 167,
	161, 152, 131, 141, 199, 159, 200, 142, 172, 171,
	173, 0, 0, 0, 229, 251, 267, 116, 0, 0,
	236, 261, 262, 0, 0, 117, 135, 130, 198, 174,
	113, 144, 226, 151, 158, 205, 265, 188, 211, 120,
	250, 227, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 108, 155, 264, 203, 133, 252, 0, 0,
	126, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 102, 109, 115, 121, 125, 129,
	132, 137, 140, 143, 145, 146, 147, 150, 160, 163,
	164, 165, 166, 176, 177, 178, 180, 183, 184, 185,
	186, 187, 190, 192, 193, 194, 195, 196, 197, 204,
	207, 213, 214, 215, 216, 217, 218, 219, 221, 222,
	223, 224, 230, 233, 239, 240, 249, 256, 260, 182,
	0, 0, 0, 0, 0, 0, 0, 0, 128, 0,
	0, 0, 0, 154, 0, 0, 0, 156, 0, 0,
	228, 170, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 61, 0, 0, 97,
	0, 0, 0, 0, 0, 0, 0, 0, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 0, 0, 0, 0, 0, 257,
	0, 0, 0, 201, 0, 232, 139, 153, 114, 100,
	110, 0, 138, 179, 208, 212, 0, 0, 0, 0,
	0, 122, 0, 210, 189, 248, 0, 0, 191, 209,
	157, 238, 202, 247, 258, 259, 235, 255, 263, 225,
	103, 234, 246, 119, 220, 105, 244, 231, 168, 148,
	149, 104, 0, 206, 127, 134, 124, 181, 241, 242,
	123, 266, 111, 254, 107, 112, 253, 175, 237, 245,
	169, 162, 106, 243, 167, 161, 152, 131, 141, 199,
	159, 200, 142, 172, 171, 173, 0, 0, 0, 229,
	251, 267, 116, 0, 0, 236, 261, 262, 0, 0,
	117, 135, 130, 198, 174, 113, 144, 226, 151, 158,
	205, 265, 188, 211, 120, 250, 227, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 108, 155, 264,
	203, 133, 252, 0, 0, 126, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 102,
	109, 115, 121, 125, 129, 132, 137, 140, 143, 145,
	146, 147, 150, 160, 163, 164, 165, 166, 176, 177,
	178, 180, 183, 184, 185, 186, 187, 190, 192, 193,
	194, 195, 196, 197, 204, 207, 213, 214, 215, 216,
	217, 218, 219, 221, 222, 223, 224, 230, 233, 239,
	240, 249, 256, 260, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 0, 0, 0, 0, 154, 0,
	0, 0, 156, 0, 0, 228, 170, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 0, 957, 0, 0, 0,
	0, 0, 0, 118, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 0,
	0, 0, 0, 0, 257, 0, 0, 0, 201, 0,
	232, 139, 153, 114, 100, 110, 0, 138, 179, 208,
	212, 0, 0, 0, 0, 0, 122, 0, 210, 189,
	248, 0, 0, 191, 209, 157, 238, 202, 247, 258,
	259, 235, 255, 263, 225, 103, 234, 246, 119, 220,
	105, 244, 231, 168, 148, 149, 104, 0, 206, 127,
	134, 124, 181, 241, 242, 123, 266, 111, 254, 107,
	112, 253, 175, 237, 245, 169, 162, 106, 243, 167,
	161, 152, 131, 141, 199, 159, 200, 142, 172, 171,
	173, 0, 0, 0, 229, 251, 267, 116, 0, 0,
	236, 261, 262, 0, 0, 117, 135, 130, 198, 174,
	113, 144, 226, 151, 158, 205, 265, 188, 211, 120,
	250, 227, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 108, 155, 264, 203, 133, 252, 0, 0,
	126, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 102, 109, 115, 121, 125, 129,
	132, 137, 140, 143, 145, 146, 147, 150, 160, 163,
	164, 165, 166, 176, 177, 178, 180, 183, 184, 185,
	186, 187, 190, 192, 193, 194, 195, 196, 197, 204,
	207, 213, 214, 215, 216, 217, 218, 219, 221, 222,
	223, 224, 230, 233, 239, 240, 249, 256, 260, 182,
	0, 0, 0, 0, 0, 0, 0, 0, 128, 0,
	0, 0, 0, 154, 0, 0, 0, 156, 0, 0,
	228, 170, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 408,
	0, 623, 0, 0, 0, 0, 0, 0, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 0, 0, 0, 0, 0, 257,
	0, 0, 0, 201, 0, 232, 139, 153, 114, 100,
	110, 0, 138, 179, 208, 212, 0, 0, 0, 0,
	0, 122, 0, 210, 189, 248, 0, 0, 191, 209,
	157, 238, 202, 247, 258, 259, 235, 255, 263, 225,
	103, 234, 246, 119, 220, 105, 244, 231, 168, 148,
	149, 104, 0, 206, 127, 134, 124, 181, 241, 242,
	123, 266, 111, 254, 107, 112, 253, 175, 237, 245,
	169, 162, 106, 243, 167, 161, 152, 131, 141, 199,
	159, 200, 142, 172, 171, 173, 0, 0, 0, 229,
	251, 267, 116, 0, 0, 236, 261, 262, 0, 0,
	117, 135, 130, 198, 174, 113, 144, 226, 151, 158,
	205, 265, 188, 211, 120, 250, 227, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 108, 155, 264,
	203, 133, 252, 0, 0, 126, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 102,
	109, 115, 121, 125, 129, 132, 137, 140, 143, 145,
	146, 147, 150, 160, 163, 164, 165, 166, 176, 177,
	178, 180, 183, 184, 185, 186, 187, 190, 192, 193,
	194, 195, 196, 197, 204, 207, 213, 214, 215, 216,
	217, 218, 219, 221, 222, 223, 224, 230, 233, 239,
	240, 249, 256, 260, 182, 0, 0, 0, 0, 0,
	0, 0, 706, 128, 0, 0, 0, 0, 154, 0,
	0, 0, 156, 0, 0, 228, 170, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 0, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 0,
	0, 0, 0, 0, 257, 0, 0, 0, 201, 0,
	232, 139, 153, 114, 100, 110, 0, 138, 179, 208,
	212, 0, 0, 0, 0, 0, 122, 0, 210, 189,
	248, 0, 0, 191, 209, 157, 238, 202, 247, 258,
	259, 235, 255, 263, 225, 103, 234, 246, 119, 220,
	105, 244, 231, 168, 148, 149, 104, 0, 206, 127,
	134, 124, 181, 241, 242, 123, 266, 111, 254, 107,
	112, 253, 175, 237, 245, 169, 162, 106, 243, 167,
	161, 152, 131, 141, 199, 159, 200, 142, 172, 171,
	173, 0, 0, 0, 229, 251, 267, 116, 0, 0,
	236, 261, 262, 0, 0, 117, 135, 130, 198, 174,
	113, 144, 226, 151, 158, 205, 265, 188, 211, 120,
	250, 227, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 108, 155, 264, 203, 133, 252, 0, 0,
	126, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 102, 109, 115, 121, 125, 129,
	132, 137, 140, 143, 145, 146, 147, 150, 160, 163,
	164, 165, 166, 176, 177, 178, 180, 183, 184, 185,
	186, 187, 190, 192, 193, 194, 195, 196, 197, 204,
	207, 213, 214, 215, 216, 217, 218, 219, 221, 222,
	223, 224, 230, 233, 239, 240, 249, 256, 260, 389,
	0, 0, 0, 0, 0, 0, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 0, 0, 0, 0,
	154, 0, 0, 0, 156, 0, 0, 228, 170, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 0, 0, 0,
	0, 0, 0, 0, 0, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	136, 0, 0, 0, 0, 0, 257, 0, 0, 0,
	201, 0, 232, 139, 153, 114, 100, 110, 0, 138,
	179, 208, 212, 0, 0, 0, 0, 0, 122, 0,
	210, 189, 248, 0, 0, 191, 209, 157, 238, 202,
	247, 258, 259, 235, 255, 263, 225, 103, 234, 246,
	119, 220, 105, 244, 231, 168, 148, 149, 104, 0,
	206, 127, 134, 124, 181, 241, 242, 123, 266, 111,
	254, 107, 112, 253, 175, 237, 245, 169, 162, 106,
	243, 167, 161, 152, 131, 141, 199, 159, 200, 142,
	172, 171, 173, 0, 0, 0, 229, 251, 267, 116,
	0, 0, 236, 261, 262, 0, 0, 117, 135, 130,
	198, 174, 113, 144, 226, 151, 158, 205, 265, 188,
	211, 120, 250, 227, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 108, 155, 264, 203, 133, 252,
	0, 0, 126, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 102, 109, 115, 121,
	125, 129, 132, 137, 140, 143, 145, 146, 147, 150,
	160, 163, 164, 165, 166, 176, 177, 178, 180, 183,
	184, 185, 186, 187, 190, 192, 193, 194, 195, 196,
	197, 204, 207, 213, 214, 215, 216, 217, 218, 219,
	221, 222, 223, 224, 230, 233, 239, 240, 249, 256,
	260, 182, 0, 0, 0, 0, 0, 0, 0, 0,
	128, 0, 0, 0, 0, 154, 0, 0, 0, 156,
	0, 0, 228, 170, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 0, 0, 0, 0, 0, 0, 0, 0,
	118, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 136, 0, 0, 0, 94,
	0, 257, 0, 0, 0, 201, 0, 232, 139, 153,
	114, 100, 110, 0, 138, 179, 208, 212, 0, 0,
	0, 0, 0, 122, 0, 210, 189, 248, 0, 0,
	191, 209, 157, 238, 202, 247, 258, 259, 235, 255,
	263, 225, 103, 234, 246, 119, 220, 105, 244, 231,
	168, 148, 149, 104, 0, 206, 127, 134, 124, 181,
	241, 242, 123, 266, 111, 254, 107, 112, 253, 175,
	237, 245, 169, 162, 106, 243, 167, 161, 152, 131,
	141, 199, 159, 200, 142, 172, 171, 173, 0, 0,
	0, 229, 251, 267, 116, 0, 0, 236, 261, 262,
	0, 0, 117, 135, 130, 198, 174, 113, 144, 226,
	151, 158, 205, 265, 188, 211, 120, 250, 227, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 108,
	155, 264, 203, 133, 252, 0, 0, 126, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 102, 109, 115, 121, 125, 129, 132, 137, 140,
	143, 145, 146, 147, 150, 160, 163, 164, 165, 166,
	176, 177, 178, 180, 183, 184, 185, 186, 187, 190,
	192, 193, 194, 195, 196, 197, 204, 207, 213, 214,
	215, 216, 217, 218, 219, 221, 222, 223, 224, 230,
	233, 239, 240, 249, 256, 260, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 0, 0, 0, 0,
	154, 0, 0, 0, 156, 0, 0, 228, 170, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 408, 0, 0, 0,
	0, 0, 0, 0, 0, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	136, 0, 0, 0, 0, 0, 257, 0, 0, 0,
	201, 0, 232, 139, 153, 114, 100, 110, 0, 138,
	179, 208, 212, 0, 0, 0, 0, 0, 122, 0,
	210, 189, 248, 0, 0, 191, 209, 157, 238, 202,
	247, 258, 259, 235, 255, 263, 225, 103, 234, 246,
	119, 220, 105, 244, 231, 168, 148, 149, 104, 0,
	206, 127, 134, 124, 181, 241, 242, 123, 266, 111,
	254, 107, 112, 253, 175, 237, 245, 169, 162, 106,
	243, 167, 161, 152, 131, 141, 199, 159, 200, 142,
	172, 171, 173, 0, 0, 0, 229, 251, 267, 116,
	0, 0, 236, 261, 262, 0, 0, 117, 135, 130,
	198, 174, 113, 144, 226, 151, 158, 205, 265, 188,
	211, 120, 250, 227, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 108, 155, 264, 203, 133, 252,
	0, 0, 126, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 102, 109, 115, 121,
	125, 129, 132, 137, 140, 143, 145, 146, 147, 150,
	160, 163, 164, 165, 166, 176, 177, 178, 180, 183,
	184, 185, 186, 187, 190, 192, 193, 194, 195, 196,
	197, 204, 207, 213, 214, 215, 216, 217, 218, 219,
	221, 222, 223, 224, 230, 233, 239, 240, 249, 256,
	260, 182, 0, 0, 0, 0, 0, 0, 0, 0,
	128, 0, 0, 0, 0, 154, 0, 0, 0, 156,
	0, 0, 228, 170, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 0, 0, 0, 0, 0, 0, 0, 0,
	118, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 136, 0, 0, 0, 0,
	0, 257, 0, 0, 0, 201, 0, 232, 139, 153,
	114, 100, 110, 0, 138, 179, 208, 212, 0, 0,
	0, 0, 0, 122, 0, 210, 189, 248, 0, 0,
	191, 209, 157, 238, 202, 247, 258, 259, 235, 255,
	263, 225, 103, 234, 246, 119, 220, 105, 244, 231,
	168, 148, 149, 104, 0, 206, 127, 134, 124, 181,
	241, 242, 123, 266, 111, 254, 107, 112, 253, 175,
	237, 245, 169, 162, 106, 243, 167, 161, 152, 131,
	141, 199, 159, 200, 142, 172, 171, 173, 0, 0,
	0, 229, 251, 267, 116, 0, 0, 236, 261, 262,
	0, 0, 117, 135, 130, 198, 174, 113, 144, 226,
	151, 158, 205, 265, 188, 211, 120, 250, 227, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 108,
	155, 264, 203, 133, 252, 0, 0, 126, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 102, 109, 115, 121, 125, 129, 132, 137, 140,
	143, 145, 146, 147, 150, 160, 163, 164, 165, 166,
	176, 177, 178, 180, 183, 184, 185, 186, 187, 190,
	192, 193, 194, 195, 196, 197, 204, 207, 213, 214,
	215, 216, 217, 218, 219, 221, 222, 223, 224, 230,
	233, 239, 240, 249, 256, 260, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 0, 0, 0, 0,
	154, 0, 0, 0, 156, 0, 0, 228, 170, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	136, 0, 0, 0, 0, 0, 257, 0, 0, 0,
	201, 0, 232, 139, 153, 114, 100, 110, 0, 138,
	179, 208, 212, 0, 0, 0, 0, 0, 122, 0,
	210, 189, 248, 0, 0, 191, 209, 157, 238, 202,
	247, 258, 259, 235, 255, 263, 225, 103, 234, 246,
	119, 220, 105, 244, 231, 168, 148, 149, 104, 0,
	206, 127, 134, 124, 181, 241, 242, 123, 266, 111,
	254, 107, 112, 253, 175, 237, 245, 169, 162, 106,
	243, 167, 161, 152, 131, 141, 199, 159, 200, 142,
	172, 171, 173, 0, 0, 0, 229, 251, 267, 116,
	0, 0, 236, 261, 262, 0, 0, 117, 135, 130,
	198, 174, 113, 144, 226, 151, 158, 205, 265, 188,
	211, 120, 250, 227, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 108, 155, 264, 203, 133, 252,
	0, 0, 126, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 102, 109, 115, 121,
	125, 129, 132, 137, 140, 143, 145, 146, 147, 150,
	160, 163, 164, 165, 166, 176, 177, 178, 180, 183,
	184, 185, 186, 187, 190, 192, 193, 194, 195, 196,
	197, 204, 207, 213, 214, 215, 216, 217, 218, 219,
	221, 222, 223, 224, 230, 233, 239, 240, 249, 256,
	260,
}
var yyPact = [...]int{

	181, -1000, -275, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1063, 1097, -1000, -1000, -1000, -1000,
	-1000, -1000, 392, 186, -1000, -1000, -1000, 142, -16, 15193,
	140, 1821, 15863, -1000, 11, -1000, -1000, 98, 15863, -1000,
	-1000, -67, -100, -1000, 855, -1000, -1000, 12, -1000, -1000,
	-1000, -1000, -1000, -1000, 1058, 1061, 881, 1052, 934, -1000,
	8115, 113, 113, 14858, 7110, -1000, -1000, 327, 15863, 137,
	15863, -149, 108, 108, 108, -1000, -1000, -1000, 15863, 106,
	772, 106, 106, 106, 15863, -1000, 214, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 15863, 771,
	1021, 3978, 55, 3978, 3978, -1000, 3978, 3978, -1000, 3978,
	36, 3978, -51, 1073, 20, 3, -1000, 3978, -1000, -1000,
	-1000, -1000, -1000, 117, 855, 336, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 568, 139, 15863, 286, -1000, 1026, 9467,
	9467, 1063, -1000, 855, -1000, -1000, -1000, 1020, -1000, -1000,
	378, 1086, -1000, 11142, 213, -1000, 9467, 405, 841, -1000,
	-1000, 841, -1000, -1000, 171, -1000, -1000, 10472, 10472, 10472,
	10472, 10472, 10472, 10472, 10472, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 841,
	-1000, 9132, 841, 841, 841, 841, 841, 841, 841, 841,
	841, 9467, 841, 841, 841, 841, 841, 841, 841, 841,
	841, 841, 841, 841, 841, 841, 841, 14516, 13511, 15863,
	817, 808, -1000, -1000, 209, 836, 6762, -98, -1000, -1000,
	-1000, 334, 13176, -1000, -1000, -1000, 1013, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 769,
	15863, -1000, 1532, -1000, 745, 1042, 123, 739, 363, 737,
	15863, 839, 120, 15863, 1036, 898, 15863, 731, 719, -1000,
	6414, -1000, 3978, 3978, -1000, -1000, -1000, 3978, 3978, 3978,
	15863, 3978, 3978, -1000, -1000, -1000, -1000, -1000, 3978, 3978,
	-1000, 1083, 320, -1000, -1000, -1000, -1000, 9467, 283, -1000,
	895, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 700, -1000,
	-1000, -1000, -1000, 15863, 3978, 41, 66, 72, 15863, -1000,
	1092, 244, 570, 200, 837, -1000, 541, 1058, 568, 934,
	12841, 909, -1000, -1000, -1000, 15863, -1000, 9467, 9467, 567,
	-1000, 14181, -1000, -1000, 5022, 285, 10472, 528, 319, 10472,
	10472, 10472, 10472, 10472, 10472, 10472, 10472, 10472, 10472, 10472,
	10472, 10472, 10472, 10472, 563, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 697, -1000, 855, 610, 610, 265, 265,
	265, 265, 265, 265, 265, 10807, 1040, 568, 744, 545,
	9132, 8115, 8115, 9467, 9467, 8785, 8450, 8115, 8115, 1040,
	353, 545, 16198, -1000, -1000, 10137, -1000, -1000, -1000, -1000,
	-1000, 568, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 15528,
	15528, 8115, 8115, 8115, 8115, 58, 15863, -1000, 838, 885,
	-1000, -1000, -1000, 1041, 12171, 12506, 58, 802, 13511, 15863,
	-1000, -1000, 13511, 15863, 4674, 6066, 836, -98, 820, -1000,
	-122, -103, 7445, 230, -1000, -1000, -1000, -1000, 3630, 260,
	706, -1000, -50, -1000, -1000, -1000, 844, -1000, 844, 844,
	844, 844, -23, -23, -23, -23, -1000, -1000, -1000, -1000,
	-1000, 866, 865, -1000, 844, 844, 844, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 864, 864, 864, 850, 850,
	872, -1000, 15863, 3978, 1035, 3978, -1000, 15863, 15863, 833,
	-1000, 15863, 825, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 15863,
	372, 15863, 15863, 545, -1000, 552, 15863, -1000, 76, -1000,
	15863, 15863, 15863, 15863, 15863, 163, -1000, 943, 9467, 9467,
	5718, 9467, -1000, -1000, -1000, 1026, -1000, 1040, 1051, -1000,
	950, 949, 8115, -1000, -1000, 285, 421, -1000, -1000, 616,
	-1000, -1000, -1000, -1000, 197, 841, -1000, 424, -1000, -1000,
	-1000, -1000, 528, 10472, 10472, 10472, 263, 424, 1691, 670,
	1963, 265, 434, 434, 241, 241, 241, 241, 241, 502,
	502, -1000, -1000, -1000, 568, -1000, -1000, -1000, 8115, -1000,
	9467, -1000, 568, 735, -1000, 735, 494, 523, 294, 1080,
	735, 284, 1078, 735, 735, 735, 8115, 388, -1000, 9467,
	568, -1000, 196, -1000, 326, 823, 822, 735, 568, 821,
	735, 735, 830, 841, -1000, 16198, 13511, 13511, 13511, 13511,
	13511, -1000, 927, 926, -1000, 914, 911, 920, 15863, -1000,
	728, 12171, 195, 841, -1000, 13846, -1000, -1000, 1072, 13511,
	828, -1000, 828, -1000, 183, -1000, -1000, 820, -98, -125,
	-1000, -1000, -1000, -1000, 545, -1000, 581, 819, 3282, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 863, 687, -1000, 997,
	229, 221, 672, 993, -1000, -1000, -1000, 175, -99, -1000,
	-1000, 469, -23, -23, -1000, -1000, 230, 1007, 230, 230,
	230, 529, 529, -1000, -1000, -1000, -1000, 454, -1000, -1000,
	-1000, 451, -1000, 894, 15528, 855, 1030, -1000, -1000, -1000,
	119, -1000, 3978, 15863, 320, -1000, 504, 9467, -1000, -1000,
	-1000, -1000, -1000, 308, 308, 249, 102, 102, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 57,
	868, -1000, -1000, -1000, -1000, 7, 33, 941, 545, 545,
	178, -1000, -1000, 15863, -1000, -1000, -1000, -1000, 834, -1000,
	-1000, -1000, 4326, 8115, -1000, 263, 424, 713, -1000, 10472,
	10472, -1000, 568, 545, -1000, 8115, -1000, -1000, 71, 563,
	71, 10472, 10472, -1000, 10472, 10472, -1000, -163, -1000, 826,
	295, -1000, 9467, 518, -1000, 5718, -1000, 10472, 10472, -1000,
	-1000, -1000, -1000, 893, 16198, 841, -1000, 11824, 15528, 832,
	-1000, 332, 885, 862, 892, 659, -1000, -1000, -1000, -1000,
	925, -1000, 924, -1000, -1000, -1000, -1000, -1000, 134, 130,
	125, 15528, -1000, 1063, 9467, 828, -1000, -1000, 208, -1000,
	-1000, -132, -108, -1000, -1000, -1000, 3630, -1000, 3630, 15528,
	81, -1000, 672, 672, -1000, -1000, -1000, 859, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 370, 10472, 1091, -1000, 987,
	-1000, 953, 492, -1000, -1000, 695, 230, 230, -1000, 328,
	-1000, -1000, -1000, 725, -1000, 705, 818, 694, 15863, -1000,
	-1000, -1000, 15863, -1000, -1000, 372, -1000, 545, -1000, 562,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 671, -1000, 656, 15863, -1000, -1000, -1000, -1000,
	-1000, 607, 636, 15528, -171, 630, 15528, 15528, 15528, -1000,
	5370, -1000, 1072, 13511, -1000, -1000, 568, -1000, 10472, 424,
	424, -1000, -1000, 568, 844, 844, -1000, 844, 850, -1000,
	844, 6, 844, -3, 568, 568, 2010, 1922, 1497, 1370,
	841, -156, -1000, 545, 9467, -1000, 553, 477, -1000, 1024,
	786, 804, -1000, -1000, 7780, 568, 665, 174, 661, -1000,
	1063, 16198, 9467, -1000, -1000, 9467, 845, -1000, 9467, -1000,
	-1000, -1000, 841, 841, 841, 661, 1058, 545, -1000, -1000,
	-1000, -1000, 3282, -1000, 654, -1000, 844, -1000, -1000, -1000,
	15528, -1000, 424, -88, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -23, 489, -23, 423, -1000, 416, 3978, -1000,
	855, -1000, -1000, 607, 79, -1000, -1000, -1000, 223, -1000,
	-1000, 79, 607, 1029, -1000, 5370, -1000, -1000, 843, 871,
	-1000, 1068, 816, -1000, 424, -1000, -1000, 110, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 10472, 10472, 10472, 10472,
	10472, 568, 486, 545, 10472, 10472, 952, -1000, 841, -1000,
	-1000, 831, 15528, 15528, -1000, 15528, 1058, -1000, 545, 545,
	15528, 545, 15528, 15528, 15528, 11477, -1000, 187, 15528, -1000,
	641, -1000, -1000, 230, -1000, 230, 642, 635, -1000, -1000,
	611, -1000, -1000, 587, 582, -1000, -1000, -1000, 79, 841,
	807, -1000, 322, 15528, 15863, 1065, 1060, -1000, -1000, 326,
	326, 326, 326, 51, -1000, -1000, 326, 326, 1090, -1000,
	841, -1000, 855, 160, -1000, -1000, -1000, 634, 624, 624,
	624, 195, 187, -1000, 575, 312, 483, -1000, 77, 15528,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 56, 5370, 3630, 619, -1000, -1000, 9467, 9467, -1000,
	-1000, -1000, -1000, 568, 49, -175, -1000, -1000, 16198, 804,
	568, 15528, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 389,
	-1000, -1000, 15863, -1000, -1000, -1000, 606, -1000, 15528, -1000,
	-1000, 868, 545, 801, -1000, 933, -169, -180, 790, -1000,
	-1000, -1000, 842, -1000, 56, 948, -171, -1000, 931, -1000,
	15528, -1000, 48, -1000, -172, 571, 45, -176, 891, 841,
	-182, 880, -1000, 1077, 9802, -1000, -1000, 1089, 201, 201,
	326, 568, -1000, -1000, -1000, 88, 488, -1000, -1000, -1000,
	-1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1314, 22, 473, 1313, 1312, 1310, 87, 86, 85,
	1309, 1307, 1304, 1301, 1299, 1298, 1297, 1296, 1295, 1294,
	1293, 1292, 1291, 1290, 1288, 1282, 1281, 1279, 1278, 1277,
	1275, 1274, 101, 1273, 1272, 1268, 69, 1265, 67, 1264,
	1263, 1262, 46, 55, 51, 44, 1457, 1257, 57, 92,
	108, 1256, 35, 1255, 1253, 80, 1252, 1243, 1242, 72,
	1240, 1239, 1607, 1238, 62, 1237, 12, 65, 1234, 1233,
	1232, 1231, 83, 1203, 1230, 1227, 21, 1223, 1222, 100,
	1220, 54, 10, 15, 18, 27, 1219, 128, 6, 1218,
	59, 1216, 1215, 1214, 1212, 32, 1208, 16, 70, 17,
	1207, 24, 56, 1206, 7, 66, 38, 29, 8, 71,
	60, 1205, 26, 64, 53, 1204, 1201, 514, 1197, 1196,
	47, 1194, 1193, 30, 1185, 393, 471, 1184, 1181, 1179,
	1177, 1175, 1174, 48, 1173, 68, 184, 39, 0, 838,
	9, 73, 1172, 1168, 1166, 1857, 42, 63, 20, 41,
	1165, 1164, 36, 1163, 1161, 1160, 1159, 1157, 1156, 1154,
	1153, 103, 1151, 1149, 1148, 50, 28, 1147, 1146, 61,
	34, 1145, 1143, 1139, 58, 25, 1138, 1136, 52, 37,
	1134, 1130, 1127, 1124, 1123, 33, 11, 1122, 19, 1121,
	13, 1119, 31, 1117, 5, 1114, 14, 1109, 2, 1108,
	4, 45, 1, 1107, 3, 1106, 1105, 629, 355, 82,
	1104, 1103, 76,
}
var yyR1 = [...]int{

	0, 205, 206, 206, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 6,
	3, 4, 4, 5, 5, 7, 7, 35, 35, 8,
	9, 9, 9, 9, 209, 209, 57, 57, 55, 55,
	56, 56, 105, 105, 10, 10, 10, 10, 110, 110,
	114, 114, 114, 115, 115, 115, 115, 150, 150, 99,
	11, 11, 11, 11, 11, 11, 11, 200, 200, 199,
	198, 198, 197, 197, 196, 20, 181, 183, 183, 182,
	182, 182, 182, 175, 154, 154, 154, 154, 154, 154,
	154, 153, 153, 153, 153, 157, 157, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 156, 156, 156, 156,
	156, 158, 158, 158, 158, 158, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 160, 160, 160, 160, 160, 160, 160, 160, 174,
	174, 161, 161, 169, 169, 170, 170, 170, 167, 167,
	168, 168, 171, 171, 163, 164, 172, 165, 165, 165,
	166, 166, 166, 173, 173, 173, 173, 162, 176, 176,
	191, 191, 190, 190, 190, 180, 180, 187, 187, 187,
	187, 187, 178, 178, 179, 179, 189, 189, 188, 177,
	177, 192, 192, 192, 192, 203, 204, 202, 202, 202,
	202, 202, 184, 184, 184, 185, 185, 185, 186, 186,
	186, 16, 16, 16, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 97, 97, 97, 18,
	19, 19, 19, 19, 19, 19, 19, 19, 133, 133,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	195, 193, 193, 194, 194, 12, 21, 21, 13, 13,
	13, 13, 13, 14, 14, 22, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 121, 121, 119, 119, 122,
	122, 120, 120, 120, 123, 123, 123, 124, 124, 151,
	151, 151, 24, 24, 29, 29, 30, 31, 134, 134,
	27, 27, 28, 28, 28, 28, 41, 41, 210, 210,
	26, 26, 25, 25, 25, 25, 15, 211, 32, 33,
	33, 34, 34, 34, 38, 38, 38, 36, 36, 36,
	37, 37, 44, 44, 43, 43, 45, 45, 45, 45,
	142, 142, 142, 141, 141, 47, 47, 48, 48, 49,
	49, 50, 50, 50, 50, 65, 65, 104, 104, 106,
	106, 51, 51, 51, 51, 52, 52, 53, 53, 54,
	54, 132, 132, 148, 148, 148, 147, 147, 58, 58,
	58, 60, 59, 59, 59, 59, 61, 61, 63, 63,
	62, 62, 64, 66, 66, 66, 66, 67, 67, 46,
	46, 46, 46, 46, 46, 46, 118, 118, 69, 69,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	80, 80, 80, 80, 80, 80, 70, 70, 70, 70,
	70, 70, 70, 42, 42, 81, 81, 81, 87, 82,
	82, 73, 73, 73, 73, 73, 73, 73, 73, 73,
	73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
	73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
	73, 73, 73, 77, 77, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 76, 212, 212, 79, 78, 78,
	78, 78, 78, 78, 39, 39, 39, 39, 39, 149,
	149, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 91, 91, 40, 40, 89, 89,
	90, 92, 92, 88, 88, 88, 72, 72, 72, 72,
	72, 72, 72, 72, 74, 74, 74, 93, 93, 94,
	94, 95, 95, 96, 96, 98, 100, 100, 100, 101,
	101, 101, 101, 102, 102, 102, 71, 71, 71, 71,
	71, 71, 103, 103, 103, 103, 107, 107, 83, 83,
	85, 85, 84, 86, 108, 108, 112, 109, 109, 113,
	113, 113, 113, 111, 111, 111, 144, 144, 144, 116,
	116, 125, 125, 126, 126, 117, 117, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 131, 131, 130,
	130, 130, 128, 128, 129, 129, 129, 129, 143, 143,
	139, 139, 140, 140, 145, 145, 146, 146, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 207, 208, 135, 136,
	136, 136,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 4, 6, 7, 5,
	10, 1, 3, 1, 3, 7, 8, 1, 1, 9,
	8, 7, 6, 6, 1, 1, 1, 3, 1, 3,
	1, 3, 0, 4, 3, 4, 5, 4, 1, 3,
	3, 2, 2, 2, 2, 2, 1, 1, 1, 0,
	2, 2, 8, 7, 9, 5, 5, 0, 2, 1,
	0, 2, 1, 3, 3, 4, 4, 2, 4, 1,
	3, 3, 3, 3, 0, 2, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 1, 4, 4, 2, 2,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 6,
	6, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 1,
	0, 1, 1, 2, 2, 3, 1, 0, 3, 3,
	0, 2, 2, 2, 1, 2, 1, 2, 5, 4,
	1, 2, 2, 3, 2, 0, 1, 2, 3, 3,
	2, 2, 1, 1, 0, 1, 1, 3, 2, 3,
	1, 10, 11, 11, 12, 3, 3, 1, 1, 2,
	2, 2, 0, 1, 3, 1, 2, 3, 1, 1,
	1, 1, 1, 1, 6, 10, 9, 7, 7, 7,
	9, 7, 7, 9, 10, 5, 0, 1, 2, 4,
	7, 5, 5, 5, 12, 7, 5, 9, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	7, 1, 3, 8, 8, 3, 3, 5, 4, 6,
	4, 4, 4, 3, 2, 3, 4, 4, 3, 4,
	4, 4, 4, 4, 4, 3, 3, 2, 3, 3,
	2, 3, 4, 3, 7, 5, 4, 2, 4, 4,
	3, 3, 5, 2, 3, 1, 1, 0, 1, 1,
	1, 0, 2, 2, 0, 2, 2, 0, 2, 0,
	1, 1, 2, 1, 1, 2, 1, 1, 1, 1,
	3, 3, 1, 1, 1, 1, 0, 3, 1, 1,
	2, 2, 2, 2, 3, 3, 2, 0, 2, 0,
	2, 1, 2, 2, 0, 1, 1, 0, 1, 1,
	0, 1, 0, 1, 1, 3, 1, 2, 3, 5,
	0, 1, 2, 1, 1, 0, 2, 1, 3, 1,
	1, 1, 3, 1, 3, 3, 7, 1, 3, 1,
	3, 4, 4, 4, 3, 2, 4, 0, 1, 0,
	2, 0, 1, 0, 1, 2, 1, 1, 1, 2,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 1,
	1, 3, 3, 0, 5, 5, 5, 0, 2, 1,
	3, 3, 2, 3, 1, 2, 0, 3, 1, 1,
	3, 3, 4, 4, 5, 3, 4, 5, 6, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 0, 2, 1, 1, 1, 3, 1,
	3, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 2, 2, 2, 2, 2, 3, 1,
	1, 1, 1, 5, 6, 4, 4, 6, 6, 6,
	8, 8, 8, 8, 9, 4, 7, 5, 4, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 8, 8, 0, 2, 3, 4, 4,
	4, 4, 4, 4, 0, 3, 4, 7, 3, 1,
	1, 2, 3, 3, 1, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 0, 3, 0,
	2, 0, 3, 1, 3, 2, 0, 1, 1, 0,
	2, 4, 4, 0, 2, 4, 2, 1, 3, 5,
	4, 6, 1, 3, 3, 5, 0, 5, 1, 3,
	1, 2, 3, 1, 1, 3, 3, 1, 3, 3,
	3, 3, 3, 1, 2, 1, 1, 1, 1, 1,
	1, 0, 2, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 0, 1, 1, 1, 0, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
	1, 1,
}
var yyChk = [...]int{

	-1000, -205, -1, -2, -6, -7, -8, -9, -10, -11,
	-16, -12, -13, -14, -22, -23, -24, -29, -30, -31,
	-27, -26, -25, -15, -3, -4, 6, 7, -35, 9,
	10, 29, -20, 116, -17, -18, -19, 119, 118, 154,
	120, 147, 51, 169, 170, 172, 173, -210, -134, 152,
	153, 30, 31, 122, -207, 8, 255, 117, 149, 148,
	25, 55, -206, 353, -95, 15, -34, 5, -32, -211,
	-32, -32, -32, -32, -32, -181, -183, 55, 91, -129,
	128, 73, 247, 125, 126, 33, 135, 134, 126, 126,
	127, 128, 247, 125, 126, -62, -145, 58, -138, 265,
	138, 297, 298, 169, 180, 174, 201, 193, 266, 299,
	139, 191, 194, 234, 137, 300, 221, 229, 67, 172,
	243, 301, 150, 189, 185, 302, 274, 183, 27, 303,
	231, 206, 304, 270, 184, 230, 122, 305, 141, 135,
	306, 207, 211, 307, 235, 308, 309, 310, 178, 179,
	311, 237, 205, 136, 32, 267, 36, 159, 238, 209,
	312, 204, 200, 313, 314, 315, 316, 203, 177, 199,
	40, 213, 212, 214, 233, 196, 317, 318, 319, 142,
	320, 186, 18, 321, 322, 323, 324, 325, 241, 153,
	326, 157, 327, 328, 329, 330, 331, 332, 232, 208,
	210, 132, 161, 269, 333, 239, 182, 334, 143, 158,
	152, 242, 144, 335, 336, 337, 338, 339, 340, 341,
	173, 342, 343, 344, 345, 168, 236, 245, 39, 218,
	346, 176, 134, 347, 170, 165, 224, 197, 160, 348,
	349, 187, 188, 202, 175, 198, 171, 162, 154, 350,
	244, 219, 271, 195, 192, 166, 351, 128, 163, 164,
	352, 225, 226, 167, 268, 240, 190, 220, 126, 109,
	194, 234, 116, 222, 223, 231, 127, 32, 232, 161,
	-151, 126, -119, 221, 225, 226, 167, 58, 236, 235,
	227, -145, 171, -41, 120, 155, -62, -135, -135, -135,
	224, 224, -135, -2, -117, 128, 226, 130, -101, 17,
	16, -5, -3, -207, 6, 20, 21, -38, 41, 42,
	-33, -45, 100, -46, -145, -68, 75, -73, 28, 58,
	-138, 23, -72, -69, -88, -86, -87, 109, 110, 111,
	98, 99, 106, 76, 112, -77, -75, -76, -78, 60,
	59, 68, 61, 62, 63, 64, 69, 70, 71, -139,
	-84, -207, 45, 46, 256, 257, 258, 259, 264, 145,
	260, 78, 35, 246, 254, 253, 252, 250, 251, 248,
	249, 262, 263, 131, 247, 104, 255, -117, -117, 11,
	-55, -56, -62, -64, -145, -109, -150, 171, -113, 236,
	235, -140, -111, -139, -137, 234, 194, 233, 58, -138,
	121, 146, 272, 74, 22, 24, 216, 77, 109, 16,
	78, 108, 256, 116, 49, 273, 248, 249, 246, 258,
	259, 247, 222, 28, 10, 275, 25, 148, 21, 102,
	118, 81, 82, 151, 23, 149, 71, 145, 278, 19,
	52, 11, 13, 279, 280, 14, 131, 130, 93, 127,
	47, 8, 112, 26, 90, 43, 281, 34, 282, 283,
	284, 285, 45, 91, 17, 250, 251, 30, 286, 264,
	156, 104, 50, 37, 75, 287, 288, 69, 289, 72,
	53, 73, 15, 48, 290, 291, 292, 293, 92, 119,
	255, 46, 294, 125, 6, 261, 29, 147, 44, 295,
	126, 80, 262, 263, 129, 70, 5, 33, 31, 9,
	51, 54, 252, 253, 254, 35, 79, 12, 296, -182,
	91, -175, 58, -62, 127, -62, 255, -126, 131, -126,
	-126, -21, -62, -125, 131, 58, -125, -125, -125, -62,
	113, -62, 58, 29, -136, -207, -140, 247, 58, 161,
	126, 162, 128, -136, -136, -136, -136, -136, 165, 166,
	-136, -122, -121, 229, 230, 224, 228, 12, 166, 224,
	164, -136, -28, -2, -9, -7, -8, -2, 83, -135,
	-135, -208, 57, 126, -62, 116, 118, 121, 53, -102,
	19, 30, -46, -145, -96, -98, -46, -95, -2, -32,
	37, -36, 20, 21, 66, 11, -142, 74, 73, 90,
	-141, 22, -139, 60, 113, -46, -70, 93, 75, 91,
	92, 77, 95, 94, 105, 98, 99, 100, 101, 102,
	103, 104, 96, 97, 108, 83, 84, 85, 86, 87,
	88, 89, -118, -207, -87, -207, 114, 115, -73, -73,
	-73, -73, -73, -73, -73, -73, -207, -2, -82, -46,
	-207, -207, -207, -207, -207, -207, -207, -207, -207, -207,
	-91, -46, -207, -212, -79, -207, -212, -79, -212, -79,
	-212, -207, -212, -79, -212, -79, -212, -212, -79, -207,
	-207, -207, -207, -207, -207, -63, 26, -62, -48, -49,
	-50, -51, -65, -87, -207, -62, -62, -55, -209, 56,
	11, 54, -209, 56, 113, 56, -109, 171, -110, -114,
	237, 239, 83, -144, -139, 60, 28, 29, 57, 56,
	-62, -153, -157, -159, -158, -160, -155, -156, 191, 192,
	109, 195, 197, 198, 199, 200, 201, 202, 203, 204,
	205, 206, 29, 150, 187, 188, 189, 190, 207, 208,
	209, 210, 211, 212, 213, 214, 174, 193, 266, 175,
	176, 177, 178, 179, 180, 182, 183, 184, 185, 186,
	58, 22, 128, 58, 75, 58, -62, 56, 129, -55,
	23, 53, -57, -62, 58, 58, -146, -145, -137, -136,
	-136, -136, -136, -136, -62, -136, -136, -136, -136, 11,
	-120, 11, 93, -46, -124, 91, 53, 58, -62, -136,
	163, 163, 126, 126, 168, -62, 9, 93, 56, 18,
	113, 56, -100, 24, 25, -101, -208, -38, -74, -139,
	61, 64, -37, 44, -62, -46, -46, -80, 69, 75,
	70, 71, -141, 100, -146, -140, -137, -73, -81, -84,
	-87, 65, 93, 91, 92, 77, -73, -73, -73, -73,
	-73, -73, -73, -73, -73, -73, -73, -73, -73, -73,
	-73, -149, 58, 60, 58, -72, -72, -139, -36, -208,
	56, -208, -2, -43, -45, -43, -46, -46, -88, 60,
	-43, -88, 60, -43, -43, -43, -36, -89, -90, 79,
	-88, -139, -145, -208, -73, -139, -139, -43, -44, -43,
	-43, -43, -105, 157, -62, 29, 56, -58, -60, -59,
	-61, 43, 47, 49, 44, 45, 46, 50, -132, 22,
	-48, -207, -148, 157, -147, 22, -145, 60, -105, 54,
	-48, -62, -48, -64, -145, 100, -113, -110, 56, 238,
	240, 241, 53, 72, -46, -166, 108, -184, -185, -186,
	-140, 60, 61, -175, -176, -177, -187, 140, -192, 132,
	134, 33, -178, 141, 127, 34, 57, -154, -167, 219,
	-161, 55, -161, -161, -161, -161, -165, 194, -165, -165,
	-165, 55, 55, -161, -161, -161, -169, 55, -169, -169,
	-170, 55, -170, -143, 54, -99, -62, -136, 23, -136,
	-62, -62, -62, 56, -62, -123, 91, 12, -145, -145,
	60, -62, -127, 121, 118, 119, 123, 124, -195, 117,
	216, 194, 67, 28, 15, 256, 157, 271, 58, 158,
	-62, -62, -62, -62, -62, 121, 118, 39, -46, -46,
	-146, -98, -102, -116, 19, 11, 35, 35, -43, 69,
	70, 71, 113, -207, -81, -73, -73, -73, -42, 151,
	74, -208, -44, -46, -208, 56, -208, -208, 56, 54,
	22, 11, 11, -208, 11, 11, -208, -208, -208, -43,
	-92, -90, 81, -46, -208, 113, -208, 56, 56, -208,
	-208, -208, -208, -71, 29, 35, -2, -207, -207, -108,
	-112, -88, -49, -50, -50, -49, -50, 43, 43, 43,
	48, 43, 48, 43, -59, -145, -208, -66, 51, 130,
	52, -207, -147, -67, 12, -48, -67, -67, 113, -114,
	-115, 242, 239, 245, 58, 60, 56, -186, 83, 55,
	58, 34, -178, -178, -179, 58, -179, 34, -171, -163,
	-164, -172, -173, -162, 69, 75, 28, 53, 216, 132,
	34, 33, 67, -168, 220, 61, -165, -165, -166, 29,
	-166, -166, -166, -174, 60, -174, 61, 61, 53, -139,
	-2, 22, 129, -136, -62, -120, 60, -46, -135, -133,
	-201, 133, 137, 140, 141, 135, 127, 34, 132, 134,
	157, 33, -133, -201, 133, -130, -128, 129, 22, 127,
	34, -133, -133, 157, -200, 54, 163, 216, 163, 40,
	113, -62, -47, 11, 100, -140, -44, -42, 74, -73,
	-73, -208, -45, -152, 109, 191, 150, 189, 185, 205,
	196, 218, 187, 219, -149, -152, -73, -73, -73, -73,
	265, -95, 82, -46, 80, -140, -73, -73, -107, 53,
	-108, -83, -85, -84, -207, -2, -103, -139, -106, -139,
	-67, 56, 83, -53, -52, 53, 54, -54, 53, -52,
	43, 43, 127, 127, 127, -106, -95, -46, -67, 239,
	243, 244, -185, -186, -189, -188, -139, -192, -179, -179,
	55, 69, -73, 9, 34, 34, 60, 57, -166, -166,
	58, 109, 57, 56, 57, 56, 57, 56, -62, -99,
	-99, -62, -123, 55, -175, -135, 58, -135, 58, -62,
	-135, -175, 58, -139, -198, 268, -199, 58, -139, -139,
	-139, -67, -48, -208, -73, -208, -161, -161, -161, -170,
	-161, 179, -161, 179, -208, -208, 19, 19, 19, 19,
	-207, -40, 261, -46, 56, 56, 27, -107, 56, -208,
	-208, -208, 56, 113, -208, 56, -95, -112, -46, -46,
	55, -46, -207, -207, -207, -208, -101, 57, 56, -161,
	-104, -139, -76, -165, 60, -165, 61, 61, -136, -2,
	-175, -97, 145, 146, -131, 129, 22, -97, -175, 26,
	-197, -196, -140, 55, 54, -93, 13, -165, 58, -73,
	-73, -73, -73, -73, -208, 60, -73, -73, 34, -85,
	35, -2, -207, -139, -139, -139, -101, -104, -104, -104,
	-104, -148, -191, -190, 54, 136, 67, -188, 57, 56,
	-166, -166, 57, 57, -99, 57, -135, 58, 58, -135,
	-97, -207, 56, 83, -104, -62, -94, 14, 16, -208,
	-208, -208, -208, -39, 93, 268, -208, -208, 9, -83,
	-2, 113, 57, -208, -208, -208, -66, -190, 58, -180,
	83, 60, 143, -139, -135, -135, -193, -194, 157, -196,
	-186, 57, -46, -82, -208, 266, 50, 269, -108, -208,
	-139, 61, -62, -208, 56, -139, -200, 40, 267, 270,
	55, -194, 35, -198, 40, -104, 159, 268, 57, 160,
	269, -203, -204, 53, -207, 270, -204, 53, 10, 9,
	-73, 156, -202, 144, 139, 142, 29, -202, -208, -208,
	138, 28, 69,
}
var yyDef = [...]int{

	25, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 591, 0, 347, 347, 347, 347,
	347, 347, 0, 664, 221, 222, 223, 0, 0, 0,
	0, -2, 323, 324, 0, 326, 327, 336, -2, 968,
	968, 0, 0, 968, 0, 37, 38, 645, 339, 328,
	329, 966, 1, 3, 599, 0, 0, 351, 354, 349,
	0, 645, 645, 0, 0, 70, 71, 0, 0, 0,
	0, 0, 643, 643, 643, 665, 666, 667, 0, 641,
	0, 641, 641, 641, 0, 274, 420, 674, 675, 797,
	798, 799, 800, 801, 802, 803, 804, 805, 806, 807,
	808, 809, 810, 811, 812, 813, 814, 815, 816, 817,
	818, 819, 820, 821, 822, 823, 824, 825, 826, 827,
	828, 829, 830, 831, 832, 833, 834, 835, 836, 837,
	838, 839, 840, 841, 842, 843, 844, 845, 846, 847,
	848, 849, 850, 851, 852, 853, 854, 855, 856, 857,
	858, 859, 860, 861, 862, 863, 864, 865, 866, 867,
	868, 869, 870, 871, 872, 873, 874, 875, 876, 877,
	878, 879, 880, 881, 882, 883, 884, 885, 886, 887,
	888, 889, 890, 891, 892, 893, 894, 895, 896, 897,
	898, 899, 900, 901, 902, 903, 904, 905, 906, 907,
	908, 909, 910, 911, 912, 913, 914, 915, 916, 917,
	918, 919, 920, 921, 922, 923, 924, 925, 926, 927,
	928, 929, 930, 931, 932, 933, 934, 935, 936, 937,
	938, 939, 940, 941, 942, 943, 944, 945, 946, 947,
	948, 949, 950, 951, 952, 953, 954, 955, 956, 957,
	958, 959, 960, 961, 962, 963, 964, 965, 0, 0,
	0, 969, 0, 969, 969, 287, 969, 969, 290, 969,
	0, 969, 0, 297, 0, 0, 303, 969, 320, 321,
	308, 322, 325, 0, 0, 0, 340, 341, 342, 343,
	968, 968, 346, 31, 0, 0, 0, 646, 603, 0,
	0, 591, 33, 0, 347, 352, 353, 357, 355, 356,
	348, 0, 366, 370, 0, 429, 0, 434, 436, -2,
	-2, 0, 471, 472, 473, 474, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 499, 500, 501, 502, 576,
	577, 578, 579, 580, 581, 582, 583, 438, 439, 573,
	623, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 564, 0, 535, 535, 535, 535, 535, 535, 535,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 48, 50, 420, 54, 0, 944, 627, -2,
	-2, 0, 0, 672, 673, -2, 810, -2, 670, 671,
	678, 679, 680, 681, 682, 683, 684, 685, 686, 687,
	688, 689, 690, 691, 692, 693, 694, 695, 696, 697,
	698, 699, 700, 701, 702, 703, 704, 705, 706, 707,
	708, 709, 710, 711, 712, 713, 714, 715, 716, 717,
	718, 719, 720, 721, 722, 723, 724, 725, 726, 727,
	728, 729, 730, 731, 732, 733, 734, 735, 736, 737,
	738, 739, 740, 741, 742, 743, 744, 745, 746, 747,
	748, 749, 750, 751, 752, 753, 754, 755, 756, 757,
	758, 759, 760, 761, 762, 763, 764, 765, 766, 767,
	768, 769, 770, 771, 772, 773, 774, 775, 776, 777,
	778, 779, 780, 781, 782, 783, 784, 785, 786, 787,
	788, 789, 790, 791, 792, 793, 794, 795, 796, 0,
	0, 89, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 265, 0, 0, 0, 0, 0, 0, 0, 273,
	0, 275, 969, 969, 278, 970, 971, 969, 969, 969,
	0, 969, 969, 285, 286, 288, 289, 291, 969, 969,
	293, 0, 311, 309, 310, 305, 306, 0, 317, 300,
	301, 304, 330, -2, 333, 334, 335, -2, 0, 344,
	345, 32, 967, 0, 969, 0, 0, 0, 0, 26,
	0, 0, 600, 0, 592, 593, 596, 599, 31, 354,
	0, 360, 358, 359, 350, 0, 367, 0, 0, 0,
	371, 0, 373, 374, 0, 432, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 456, 457, 458, 459, 460,
	461, 462, 435, 0, 449, 0, 0, 0, 491, 492,
	493, 494, 495, 496, 497, 0, 357, 31, 0, 469,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 357,
	0, 565, 0, 519, 527, 0, 520, 528, 521, 529,
	522, 0, 523, 530, 524, 531, 525, 526, 532, 0,
	0, 0, 362, 0, 0, 52, 0, 419, 0, 377,
	379, 380, 381, -2, 0, 403, -2, 0, 0, 0,
	44, 45, 0, 0, 0, 0, 55, 944, 57, 58,
	0, 0, 0, 170, 636, 637, 638, 634, 212, 0,
	0, 94, 158, 102, 103, 104, 151, 106, 151, 151,
	151, 151, 167, 167, 167, 167, 134, 135, 136, 137,
	138, 0, 0, 121, 151, 151, 151, 125, 141, 142,
	143, 144, 145, 146, 147, 148, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 153, 153, 153, 155, 155,
	668, 69, 0, 969, 0, 969, 85, 0, 0, 268,
	642, 0, 270, 46, 271, 272, 421, 676, 677, 276,
	277, 279, 280, 281, 282, 283, 284, 292, 296, 0,
	314, 0, 0, 298, 299, 0, 0, 337, 0, 239,
	0, 0, 0, 0, 0, 0, 604, 0, 0, 0,
	0, 0, 595, 597, 598, 603, 34, 357, 0, 584,
	0, 0, 0, 361, 29, 430, 431, 433, 450, 0,
	452, 454, 372, 368, 0, 574, -2, 440, 441, 465,
	466, 467, 0, 0, 0, 0, 463, 445, 0, 476,
	477, 478, 479, 480, 481, 482, 483, 484, 485, 486,
	487, 490, 549, 550, 0, 488, 489, 498, 362, 468,
	0, 622, 31, 0, 364, 0, 0, 0, 473, 576,
	0, 473, 576, 0, 0, 0, 0, 571, 568, 0,
	0, 573, 0, 536, 0, 0, 0, 0, 0, 363,
	0, 0, 0, 0, 418, 0, 0, 0, 0, 0,
	0, 408, 0, 0, 411, 0, 0, 0, 0, 402,
	0, 0, 423, 889, 404, 0, 406, 407, 427, 0,
	427, 49, 427, 51, 0, 422, 628, 56, 0, 0,
	61, 62, 629, 630, 631, 632, 0, 86, 213, 215,
	218, 219, 220, 90, 91, 92, 0, 0, 200, 0,
	0, 194, 194, 0, 192, 193, 88, 93, 160, 159,
	105, 0, 167, 167, 128, 129, 170, 0, 170, 170,
	170, 0, 0, 122, 123, 124, 116, 0, 117, 118,
	119, 0, 120, 0, 0, 0, 0, 75, 644, 76,
	0, 266, 969, 0, 311, 295, 0, 0, 312, 313,
	318, 302, 968, 248, 248, 659, 248, 248, 235, 647,
	648, 649, 650, 651, 652, 653, 654, 655, 656, 0,
	77, 241, 243, 242, 246, 0, 0, 0, 601, 602,
	0, 594, 27, 0, 639, 640, 585, 586, 375, 451,
	453, 455, 0, 362, 442, 463, 446, 0, 443, 0,
	0, 437, 0, 470, -2, 0, 505, 506, 0, 0,
	0, 0, 0, 542, 0, 0, 543, 0, 515, 591,
	0, 569, 0, 0, 518, 0, 537, 0, 0, 538,
	539, 540, 541, 616, 0, 0, -2, 0, 0, 427,
	624, 0, 378, 397, 399, 0, 394, 409, 410, 412,
	0, 414, 0, 416, 417, 382, 384, 385, 0, 0,
	0, 0, 405, 591, 0, 427, 42, 43, 0, 59,
	60, 0, 0, 66, 171, 172, 0, 216, 0, 0,
	0, 187, 194, 194, 190, 195, 191, 0, 95, 96,
	97, 98, 99, 100, 162, 0, 0, 0, 166, 0,
	174, 176, 0, 101, 161, 0, 170, 170, 130, 0,
	131, 132, 133, 0, 149, 0, 0, 0, 0, 669,
	-2, 69, 0, 269, 47, 314, 315, 316, 224, 0,
	968, 249, 250, 251, 252, 253, 254, 255, 256, 257,
	258, 259, 0, 968, 0, 0, 968, 660, 661, 662,
	663, 0, 0, 0, 80, 0, 0, 0, 0, 605,
	0, 28, 427, 0, 369, 575, 0, 444, 0, 464,
	447, 503, 365, 0, 151, 151, 554, 151, 155, 557,
	151, 559, 151, 562, 0, 0, 0, 0, 0, 0,
	0, 566, 517, 572, 0, 574, 0, 0, 35, 0,
	616, 606, 618, 620, 0, 31, 0, 612, 0, 389,
	591, 0, 0, 391, 398, 0, 0, 392, 0, 393,
	413, 415, 0, 0, 0, 0, 599, 428, 41, 63,
	64, 65, 214, 217, 0, 196, 151, 199, 188, 189,
	0, 163, 164, 0, 173, 175, 177, 152, 126, 127,
	168, 169, 167, 0, 167, 0, 156, 0, 969, 73,
	0, 267, 294, 0, 236, 227, 228, 229, 0, 231,
	232, 236, 0, 0, 240, 0, 78, 79, 0, 0,
	245, 587, 376, 504, 448, 507, 551, 167, 555, 556,
	558, 560, 561, 563, 509, 508, 0, 0, 0, 0,
	0, 0, 0, 570, 0, 0, 0, 36, 0, 621,
	-2, 0, 0, 0, 53, 0, 599, 625, 626, 395,
	0, 400, 0, 0, 0, 403, 40, 179, 0, 198,
	0, 387, 165, 170, 150, 170, 0, 0, 72, -2,
	0, 968, 237, 0, 0, 657, 658, 968, 236, 0,
	81, 82, 0, 0, 0, 589, 0, 552, 553, 0,
	0, 0, 0, 544, 516, 567, 0, 0, 0, 619,
	0, -2, 0, 614, 613, 390, 39, 0, 0, 0,
	0, 423, 178, 180, 0, 185, 0, 197, 0, 0,
	139, 140, 154, 157, 74, 968, 226, 238, 230, 233,
	968, 0, 0, 0, 0, 247, 30, 0, 0, 510,
	512, 511, 513, 0, 0, 0, 533, 534, 0, 609,
	31, 0, 396, 424, 425, 426, 386, 181, 182, 0,
	186, 184, 0, 388, 225, 234, 0, 261, 0, 83,
	84, 77, 590, 588, 514, 0, 0, 0, 617, -2,
	615, 183, 0, 260, 0, 0, 80, 545, 0, 548,
	0, 262, 0, 244, 546, 0, 0, 0, 201, 0,
	0, 202, 203, 0, 0, 547, 204, 0, 0, 0,
	0, 0, 205, 207, 208, 0, 0, 206, 263, 264,
	209, 210, 211,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 76, 3, 3, 3, 103, 95, 3,
	55, 57, 100, 98, 56, 99, 113, 101, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 353,
	84, 83, 85, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 94, 3, 106,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 77, 78, 79, 80, 81, 82, 86, 87, 88,
	89, 90, 91, 92, 93, 96, 97, 102, 104, 107,
	108, 109, 110, 111, 112, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:335
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:340
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:341
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:345
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:369
		{
			setParseTree(yylex, nil)
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:375
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 27:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:383
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 28:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:387
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 29:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:393
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 30:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:400
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:406
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:410
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:416
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:420
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 35:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:427
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:439
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:451
		{
			yyVAL.str = InsertStr
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:455
		{
			yyVAL.str = ReplaceStr
		}
	case 39:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:461
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:467
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:471
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:475
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:479
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:484
		{
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:485
		{
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:489
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName.ToViewName()}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:493
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName.ToViewName())
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:499
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:503
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:509
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:513
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:518
		{
			yyVAL.partitions = nil
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:522
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:528
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:532
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:536
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:540
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:546
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:550
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:556
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:560
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:564
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:570
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:574
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:578
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:582
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:588
		{
			yyVAL.str = SessionStr
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:592
		{
			yyVAL.str = GlobalStr
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:597
		{
			yyVAL.int = yyPosition(yylex)
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:603
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:608
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 72:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:614
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 73:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:619
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[3].tableName.ToViewName(), ViewExpr: yyDollar[6].selStmt, ViewSelectPositionStart: yyDollar[5].int, ViewSelectPositionEnd: yyDollar[7].int - 1}
		}
	case 74:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:623
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[5].tableName.ToViewName(), ViewExpr: yyDollar[8].selStmt, ViewSelectPositionStart: yyDollar[7].int, ViewSelectPositionEnd: yyDollar[9].int - 1, OrReplace: true}
		}
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:627
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:631
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:636
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:640
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:646
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:651
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:656
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:662
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:667
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:673
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:679
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName, IfNotExists: ne}
			setDDL(yylex, yyVAL.ddl)
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:690
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:697
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:701
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:707
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:712
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:716
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:720
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:726
		{
			if err := yyDollar[2].columnType.merge(yyDollar[3].columnType); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:735
		{
			yyVAL.columnType = ColumnType{}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:739
		{
			opt := ColumnType{NotNull: yyDollar[2].boolVal, sawnull: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:748
		{
			opt := ColumnType{Default: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:757
		{
			opt := ColumnType{OnUpdate: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:766
		{
			opt := ColumnType{Autoincrement: yyDollar[2].boolVal, sawai: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:775
		{
			opt := ColumnType{KeyOpt: yyDollar[2].colKeyOpt}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:784
		{
			opt := ColumnType{Comment: yyDollar[2].sqlVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:795
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:806
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:811
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:817
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:821
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:825
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:829
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:833
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:837
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:841
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:845
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:849
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:855
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:861
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:867
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:873
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:879
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:887
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:891
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:895
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:899
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:903
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:909
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:913
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:917
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:921
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:925
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:929
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:933
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:937
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:941
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:945
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:949
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:953
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:957
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:961
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 140:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:966
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:972
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:976
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:980
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:984
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:988
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:992
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:996
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1000
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1006
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1011
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1016
		{
			yyVAL.sqlVal = nil
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1020
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1025
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 154:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1029
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1037
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1041
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 157:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1047
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1055
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1059
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1064
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1068
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1075
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1079
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1085
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1091
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1097
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1102
		{
			yyVAL.str = ""
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1106
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1110
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1115
		{
			yyVAL.str = ""
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1119
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1123
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1129
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1133
		{
			yyVAL.colKeyOpt = colKey
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1137
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1141
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1147
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 178:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1153
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 179:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1157
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1163
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1167
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1173
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1177
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1182
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1188
		{
			yyVAL.str = ""
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1192
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1198
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1202
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1206
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1210
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1214
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1220
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1224
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1229
		{
			yyVAL.str = ""
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1233
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1239
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1243
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1249
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1255
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1259
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 201:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1266
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 202:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1270
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 203:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1274
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 204:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1278
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1284
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1290
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1296
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1300
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1304
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1308
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1312
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 212:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1317
		{
			yyVAL.str = ""
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1321
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1325
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1333
		{
			yyVAL.str = yyDollar[1].str
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1337
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1341
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1347
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1351
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1355
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 224:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1366
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1370
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			ddl.Column = yyDollar[8].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 226:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1377
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1384
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 228:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1388
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: DropStr, Column: NewColIdent(string(yyDollar[7].bytes)), Table: yyDollar[4].tableName}
		}
	case 229:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1392
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 230:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1396
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: RenameStr, Table: yyDollar[4].tableName, Column: NewColIdent(string(yyDollar[7].bytes)), ToColumn: NewColIdent(string(yyDollar[9].bytes))}
		}
	case 231:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1400
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 232:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1405
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 233:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1410
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ModifyStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 234:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1417
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ChangeStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, Column: NewColIdent(string(yyDollar[7].bytes)), ColumnOrder: yyDollar[9].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			yyVAL.statement = ddl
		}
	case 235:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1423
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 236:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1428
		{
			yyVAL.columnOrder = nil
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1432
		{
			yyVAL.columnOrder = &ColumnOrder{First: true}
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1436
		{
			yyVAL.columnOrder = &ColumnOrder{AfterColumn: NewColIdent(string(yyDollar[2].bytes))}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1442
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 240:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1448
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 241:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1460
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 242:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1470
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 243:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1474
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 244:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1478
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 245:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1491
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 246:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1501
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 247:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1505
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 248:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1518
		{
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1520
		{
		}
	case 260:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1536
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1542
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1546
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 263:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1552
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 264:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1556
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1562
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1568
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 267:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1572
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1580
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 269:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1588
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1593
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromViews: yyDollar[4].tableNames, IfExists: exists}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1601
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1605
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1611
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1615
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1620
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1626
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1631
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1635
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1639
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1644
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1648
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1652
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1656
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1660
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1664
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1668
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1672
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1676
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1680
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1684
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1688
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1692
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1696
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1700
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 295:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1705
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1715
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1719
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1723
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1729
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1734
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1738
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1742
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1746
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1760
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1766
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1770
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1776
		{
			yyVAL.str = ""
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1780
		{
			yyVAL.str = "full "
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1786
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1790
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1796
		{
			yyVAL.str = ""
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1800
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1804
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1810
		{
			yyVAL.showFilter = nil
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1814
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1818
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1824
		{
			yyVAL.showFilter = nil
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1828
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1834
		{
			yyVAL.str = ""
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1838
		{
			yyVAL.str = SessionStr
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1842
		{
			yyVAL.str = GlobalStr
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1848
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1852
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1858
		{
			yyVAL.statement = &Begin{}
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1862
		{
			yyVAL.statement = &Begin{}
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1868
		{
			yyVAL.statement = &Commit{}
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1874
		{
			yyVAL.statement = &Rollback{}
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1879
		{
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1880
		{
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1884
		{
			yyVAL.statement = &Explain{ExplainFormat: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1888
		{
			yyVAL.statement = &Explain{Analyze: true, ExplainFormat: TreeStr, Statement: yyDollar[3].selStmt}
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1894
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1902
		{
			yyVAL.str = ""
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1906
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1917
		{
			yyVAL.statement = &Show{Type: "columns", OnTable: yyDollar[2].tableName}
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1921
		{
			yyVAL.statement = &OtherRead{}
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1927
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1931
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1935
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1939
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1945
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1949
		{
			setAllowComments(yylex, true)
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1953
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 349:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1959
		{
			yyVAL.bytes2 = nil
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1963
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1969
		{
			yyVAL.str = UnionStr
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1973
		{
			yyVAL.str = UnionAllStr
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1977
		{
			yyVAL.str = UnionDistinctStr
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1982
		{
			yyVAL.str = ""
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1986
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1990
		{
			yyVAL.str = SQLCacheStr
		}
	case 357:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1995
		{
			yyVAL.str = ""
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1999
		{
			yyVAL.str = ""
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2003
		{
			yyVAL.str = DistinctStr
		}
	case 360:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2008
		{
			yyVAL.str = ""
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2012
		{
			yyVAL.str = StraightJoinHint
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2017
		{
			yyVAL.selectExprs = nil
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2021
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2027
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2031
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2037
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2041
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2045
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 369:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2049
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 370:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2054
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2058
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2062
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2069
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2074
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2078
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2084
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2088
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2098
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2102
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2106
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2112
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2118
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 386:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2122
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2128
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2132
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2138
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2142
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 391:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2155
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 392:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2159
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 393:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2163
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2167
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2173
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 396:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2175
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2179
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2181
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2185
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2187
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 401:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2190
		{
			yyVAL.empty = struct{}{}
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2192
		{
			yyVAL.empty = struct{}{}
		}
	case 403:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2195
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2199
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2203
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2210
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2216
		{
			yyVAL.str = JoinStr
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2220
		{
			yyVAL.str = JoinStr
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2224
		{
			yyVAL.str = JoinStr
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2230
		{
			yyVAL.str = StraightJoinStr
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2236
		{
			yyVAL.str = LeftJoinStr
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2240
		{
			yyVAL.str = LeftJoinStr
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2244
		{
			yyVAL.str = RightJoinStr
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2248
		{
			yyVAL.str = RightJoinStr
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2254
		{
			yyVAL.str = NaturalJoinStr
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2258
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2268
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2272
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2278
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2282
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2288
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 423:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2293
		{
			yyVAL.indexHints = nil
		}
	case 424:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2297
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 425:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2301
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 426:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2305
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2310
		{
			yyVAL.expr = nil
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2314
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2320
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2324
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2328
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2332
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2336
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2340
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2344
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 436:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2350
		{
			yyVAL.str = ""
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2354
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2360
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2364
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2370
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2374
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 442:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2378
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 443:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2382
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 444:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2386
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2390
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 446:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2394
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 447:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2398
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 448:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2402
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2406
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2412
		{
			yyVAL.str = IsNullStr
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2416
		{
			yyVAL.str = IsNotNullStr
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2420
		{
			yyVAL.str = IsTrueStr
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2424
		{
			yyVAL.str = IsNotTrueStr
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2428
		{
			yyVAL.str = IsFalseStr
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2432
		{
			yyVAL.str = IsNotFalseStr
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2438
		{
			yyVAL.str = EqualStr
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2442
		{
			yyVAL.str = LessThanStr
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2446
		{
			yyVAL.str = GreaterThanStr
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2450
		{
			yyVAL.str = LessEqualStr
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2454
		{
			yyVAL.str = GreaterEqualStr
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2458
		{
			yyVAL.str = NotEqualStr
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2462
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 463:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2467
		{
			yyVAL.expr = nil
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2471
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2477
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2481
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2485
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2491
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2497
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2501
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2507
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2511
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2515
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2519
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2523
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2527
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2531
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2535
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2539
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2543
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2547
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2551
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2555
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2559
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2563
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2567
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2571
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2575
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2579
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2583
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2587
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2591
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2595
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2599
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2607
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2621
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2625
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2629
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 503:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2647
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: yyDollar[3].str == DistinctStr, Exprs: yyDollar[4].selectExprs}
		}
	case 504:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2651
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 505:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2661
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 506:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2665
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 507:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2669
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 508:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2673
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 509:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2677
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 510:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2681
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 511:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2685
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 512:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2689
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 513:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2693
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 514:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2697
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 515:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2701
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("first"), Exprs: yyDollar[3].selectExprs}
		}
	case 516:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2705
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 517:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2709
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2713
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2723
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2727
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2731
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2736
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2741
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2746
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2752
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2757
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2762
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2766
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2770
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2775
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2780
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2785
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 533:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2789
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 534:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2793
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2803
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 538:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2813
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 539:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2817
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 540:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2821
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 541:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2825
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 542:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2829
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 543:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2833
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 544:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2839
		{
			yyVAL.str = ""
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2843
		{
			yyVAL.str = BooleanModeStr
		}
	case 546:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2847
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 547:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2851
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2855
		{
			yyVAL.str = QueryExpansionStr
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2861
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2865
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2871
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2875
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2879
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2883
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2887
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2891
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2897
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2901
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2905
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2909
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2913
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2917
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2921
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2926
		{
			yyVAL.expr = nil
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2930
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 566:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2935
		{
			yyVAL.str = string("")
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2939
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2945
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2949
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 570:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2955
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 571:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2960
		{
			yyVAL.expr = nil
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2964
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2970
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2974
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 575:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2978
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2984
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2988
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2992
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2996
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3000
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3004
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3008
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3012
		{
			yyVAL.expr = &NullVal{}
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3018
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3027
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3031
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 587:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3036
		{
			yyVAL.exprs = nil
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3040
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 589:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3045
		{
			yyVAL.expr = nil
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3049
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 591:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3054
		{
			yyVAL.orderBy = nil
		}
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3058
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3064
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3068
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3074
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 596:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3079
		{
			yyVAL.str = AscScr
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3083
		{
			yyVAL.str = AscScr
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3087
		{
			yyVAL.str = DescScr
		}
	case 599:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3092
		{
			yyVAL.limit = nil
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3096
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 601:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3100
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 602:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3104
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 603:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3109
		{
			yyVAL.str = ""
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3113
		{
			yyVAL.str = ForUpdateStr
		}
	case 605:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3117
		{
			yyVAL.str = ShareModeStr
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3130
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3134
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3138
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 609:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3143
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 610:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3147
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 611:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3151
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3158
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3162
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3166
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 615:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3170
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 616:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3175
		{
			yyVAL.updateExprs = nil
		}
	case 617:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3179
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3185
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3189
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3195
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3199
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3205
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3211
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3221
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3225
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3231
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3237
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3241
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3247
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3251
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3255
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3259
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3266
		{
			yyVAL.bytes = []byte("charset")
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3273
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3277
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3281
		{
			yyVAL.expr = &Default{}
		}
	case 641:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3290
		{
			yyVAL.byt = 0
		}
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3292
		{
			yyVAL.byt = 1
		}
	case 643:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3295
		{
			yyVAL.byt = 0
		}
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3297
		{
			yyVAL.byt = 1
		}
	case 645:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3300
		{
			yyVAL.str = ""
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3302
		{
			yyVAL.str = IgnoreStr
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3306
		{
			yyVAL.empty = struct{}{}
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3308
		{
			yyVAL.empty = struct{}{}
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3310
		{
			yyVAL.empty = struct{}{}
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3312
		{
			yyVAL.empty = struct{}{}
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3314
		{
			yyVAL.empty = struct{}{}
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3316
		{
			yyVAL.empty = struct{}{}
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3318
		{
			yyVAL.empty = struct{}{}
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3320
		{
			yyVAL.empty = struct{}{}
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3322
		{
			yyVAL.empty = struct{}{}
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3324
		{
			yyVAL.empty = struct{}{}
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3328
		{
			yyVAL.empty = struct{}{}
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3330
		{
			yyVAL.empty = struct{}{}
		}
	case 659:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3333
		{
			yyVAL.empty = struct{}{}
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3335
		{
			yyVAL.empty = struct{}{}
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3337
		{
			yyVAL.empty = struct{}{}
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3341
		{
			yyVAL.empty = struct{}{}
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3343
		{
			yyVAL.empty = struct{}{}
		}
	case 664:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3346
		{
			yyVAL.empty = struct{}{}
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3348
		{
			yyVAL.empty = struct{}{}
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3350
		{
			yyVAL.empty = struct{}{}
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3352
		{
			yyVAL.empty = struct{}{}
		}
	case 668:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3355
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 669:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3357
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3361
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3365
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3372
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3378
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3382
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3389
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3703
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3712
		{
			decNesting(yylex)
		}
	case 968:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3717
		{
			skipToEnd(yylex)
		}
	case 969:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3722
		{
			skipToEnd(yylex)
		}
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3726
		{
			skipToEnd(yylex)
		}
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3730
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
