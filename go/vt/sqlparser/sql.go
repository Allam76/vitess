//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func yyPosition(yylex interface{}) int {
	return yylex.(*Tokenizer).Position
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:57
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	int                  int
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	asOf                 *AsOf
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	columnOrder          *ColumnOrder
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const UNLOCK = 57373
const KEYS = 57374
const UNIQUE = 57375
const KEY = 57376
const SYSTEM_TIME = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const INTEGRAL = 57401
const FLOAT = 57402
const HEXNUM = 57403
const VALUE_ARG = 57404
const LIST_ARG = 57405
const COMMENT = 57406
const COMMENT_KEYWORD = 57407
const BIT_LITERAL = 57408
const NULL = 57409
const TRUE = 57410
const FALSE = 57411
const OFF = 57412
const OR = 57413
const AND = 57414
const NOT = 57415
const BETWEEN = 57416
const CASE = 57417
const WHEN = 57418
const THEN = 57419
const ELSE = 57420
const END = 57421
const LE = 57422
const GE = 57423
const NE = 57424
const NULL_SAFE_EQUAL = 57425
const IS = 57426
const LIKE = 57427
const REGEXP = 57428
const IN = 57429
const SHIFT_LEFT = 57430
const SHIFT_RIGHT = 57431
const DIV = 57432
const MOD = 57433
const UNARY = 57434
const COLLATE = 57435
const BINARY = 57436
const UNDERSCORE_BINARY = 57437
const UNDERSCORE_UTF8MB4 = 57438
const INTERVAL = 57439
const JSON_EXTRACT_OP = 57440
const JSON_UNQUOTE_EXTRACT_OP = 57441
const CREATE = 57442
const ALTER = 57443
const DROP = 57444
const RENAME = 57445
const ANALYZE = 57446
const ADD = 57447
const FLUSH = 57448
const MODIFY = 57449
const CHANGE = 57450
const SCHEMA = 57451
const TABLE = 57452
const INDEX = 57453
const INDEXES = 57454
const VIEW = 57455
const TO = 57456
const IGNORE = 57457
const IF = 57458
const PRIMARY = 57459
const COLUMN = 57460
const SPATIAL = 57461
const FULLTEXT = 57462
const KEY_BLOCK_SIZE = 57463
const CHECK = 57464
const ACTION = 57465
const CASCADE = 57466
const CONSTRAINT = 57467
const FOREIGN = 57468
const NO = 57469
const REFERENCES = 57470
const RESTRICT = 57471
const FIRST = 57472
const AFTER = 57473
const SHOW = 57474
const DESCRIBE = 57475
const EXPLAIN = 57476
const DATE = 57477
const ESCAPE = 57478
const REPAIR = 57479
const OPTIMIZE = 57480
const TRUNCATE = 57481
const FORMAT = 57482
const MAXVALUE = 57483
const PARTITION = 57484
const REORGANIZE = 57485
const LESS = 57486
const THAN = 57487
const PROCEDURE = 57488
const TRIGGER = 57489
const VINDEX = 57490
const VINDEXES = 57491
const STATUS = 57492
const VARIABLES = 57493
const WARNINGS = 57494
const SEQUENCE = 57495
const BEGIN = 57496
const START = 57497
const TRANSACTION = 57498
const COMMIT = 57499
const ROLLBACK = 57500
const BIT = 57501
const TINYINT = 57502
const SMALLINT = 57503
const MEDIUMINT = 57504
const INT = 57505
const INTEGER = 57506
const BIGINT = 57507
const INTNUM = 57508
const REAL = 57509
const DOUBLE = 57510
const FLOAT_TYPE = 57511
const DECIMAL = 57512
const NUMERIC = 57513
const TIME = 57514
const TIMESTAMP = 57515
const DATETIME = 57516
const YEAR = 57517
const CHAR = 57518
const VARCHAR = 57519
const BOOL = 57520
const CHARACTER = 57521
const VARBINARY = 57522
const NCHAR = 57523
const TEXT = 57524
const TINYTEXT = 57525
const MEDIUMTEXT = 57526
const LONGTEXT = 57527
const BLOB = 57528
const TINYBLOB = 57529
const MEDIUMBLOB = 57530
const LONGBLOB = 57531
const JSON = 57532
const ENUM = 57533
const GEOMETRY = 57534
const POINT = 57535
const LINESTRING = 57536
const POLYGON = 57537
const GEOMETRYCOLLECTION = 57538
const MULTIPOINT = 57539
const MULTILINESTRING = 57540
const MULTIPOLYGON = 57541
const NULLX = 57542
const AUTO_INCREMENT = 57543
const APPROXNUM = 57544
const SIGNED = 57545
const UNSIGNED = 57546
const ZEROFILL = 57547
const COLLATION = 57548
const DATABASES = 57549
const SCHEMAS = 57550
const TABLES = 57551
const VITESS_METADATA = 57552
const VSCHEMA = 57553
const FULL = 57554
const PROCESSLIST = 57555
const COLUMNS = 57556
const FIELDS = 57557
const ENGINES = 57558
const PLUGINS = 57559
const NAMES = 57560
const CHARSET = 57561
const GLOBAL = 57562
const SESSION = 57563
const ISOLATION = 57564
const LEVEL = 57565
const READ = 57566
const WRITE = 57567
const ONLY = 57568
const REPEATABLE = 57569
const COMMITTED = 57570
const UNCOMMITTED = 57571
const SERIALIZABLE = 57572
const CURRENT_TIMESTAMP = 57573
const DATABASE = 57574
const CURRENT_DATE = 57575
const CURRENT_TIME = 57576
const LOCALTIME = 57577
const LOCALTIMESTAMP = 57578
const UTC_DATE = 57579
const UTC_TIME = 57580
const UTC_TIMESTAMP = 57581
const REPLACE = 57582
const CONVERT = 57583
const CAST = 57584
const SUBSTR = 57585
const SUBSTRING = 57586
const GROUP_CONCAT = 57587
const SEPARATOR = 57588
const TIMESTAMPADD = 57589
const TIMESTAMPDIFF = 57590
const MATCH = 57591
const AGAINST = 57592
const BOOLEAN = 57593
const LANGUAGE = 57594
const WITH = 57595
const QUERY = 57596
const EXPANSION = 57597
const UNUSED = 57598
const ARRAY = 57599
const CUME_DIST = 57600
const DESCRIPTION = 57601
const DENSE_RANK = 57602
const EMPTY = 57603
const EXCEPT = 57604
const FIRST_VALUE = 57605
const GROUPING = 57606
const GROUPS = 57607
const JSON_TABLE = 57608
const LAG = 57609
const LAST_VALUE = 57610
const LATERAL = 57611
const LEAD = 57612
const MEMBER = 57613
const NTH_VALUE = 57614
const NTILE = 57615
const OF = 57616
const OVER = 57617
const PERCENT_RANK = 57618
const RANK = 57619
const RECURSIVE = 57620
const ROW_NUMBER = 57621
const SYSTEM = 57622
const WINDOW = 57623
const ACTIVE = 57624
const ADMIN = 57625
const BUCKETS = 57626
const CLONE = 57627
const COMPONENT = 57628
const DEFINITION = 57629
const ENFORCED = 57630
const EXCLUDE = 57631
const FOLLOWING = 57632
const GEOMCOLLECTION = 57633
const GET_MASTER_PUBLIC_KEY = 57634
const HISTOGRAM = 57635
const HISTORY = 57636
const INACTIVE = 57637
const INVISIBLE = 57638
const LOCKED = 57639
const MASTER_COMPRESSION_ALGORITHMS = 57640
const MASTER_PUBLIC_KEY_PATH = 57641
const MASTER_TLS_CIPHERSUITES = 57642
const MASTER_ZSTD_COMPRESSION_LEVEL = 57643
const NESTED = 57644
const NETWORK_NAMESPACE = 57645
const NOWAIT = 57646
const NULLS = 57647
const OJ = 57648
const OLD = 57649
const OPTIONAL = 57650
const ORDINALITY = 57651
const ORGANIZATION = 57652
const OTHERS = 57653
const PATH = 57654
const PERSIST = 57655
const PERSIST_ONLY = 57656
const PRECEDING = 57657
const PRIVILEGE_CHECKS_USER = 57658
const PROCESS = 57659
const RANDOM = 57660
const REFERENCE = 57661
const REQUIRE_ROW_FORMAT = 57662
const RESOURCE = 57663
const RESPECT = 57664
const RESTART = 57665
const RETAIN = 57666
const REUSE = 57667
const ROLE = 57668
const SECONDARY = 57669
const SECONDARY_ENGINE = 57670
const SECONDARY_LOAD = 57671
const SECONDARY_UNLOAD = 57672
const SKIP = 57673
const SRID = 57674
const THREAD_PRIORITY = 57675
const TIES = 57676
const UNBOUNDED = 57677
const VCPU = 57678
const VISIBLE = 57679

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"UNIQUE",
	"KEY",
	"SYSTEM_TIME",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"MODIFY",
	"CHANGE",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"INDEXES",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"FIRST",
	"AFTER",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"FORMAT",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 31,
	-2, 4,
	-1, 41,
	167, 329,
	168, 329,
	-2, 317,
	-1, 48,
	1, 980,
	355, 980,
	-2, 348,
	-1, 332,
	114, 686,
	-2, 682,
	-1, 333,
	114, 687,
	-2, 683,
	-1, 403,
	84, 936,
	-2, 67,
	-1, 404,
	84, 854,
	-2, 68,
	-1, 409,
	84, 823,
	-2, 646,
	-1, 411,
	84, 884,
	-2, 648,
	-1, 591,
	5, 31,
	-2, 342,
	-1, 595,
	5, 31,
	-2, 341,
	-1, 722,
	1, 393,
	5, 393,
	12, 393,
	13, 393,
	14, 393,
	15, 393,
	17, 393,
	19, 393,
	29, 393,
	30, 393,
	44, 393,
	45, 393,
	46, 393,
	47, 393,
	48, 393,
	50, 393,
	51, 393,
	54, 393,
	55, 393,
	57, 393,
	58, 393,
	355, 393,
	-2, 416,
	-1, 725,
	55, 48,
	57, 48,
	-2, 52,
	-1, 878,
	114, 689,
	-2, 685,
	-1, 1117,
	5, 32,
	-2, 480,
	-1, 1149,
	5, 31,
	-2, 620,
	-1, 1234,
	5, 31,
	-2, 69,
	-1, 1338,
	1, 435,
	5, 435,
	12, 435,
	13, 435,
	14, 435,
	15, 435,
	17, 435,
	19, 435,
	29, 435,
	30, 435,
	44, 435,
	45, 435,
	46, 435,
	47, 435,
	48, 435,
	50, 435,
	51, 435,
	54, 435,
	55, 435,
	57, 435,
	58, 435,
	355, 435,
	-2, 416,
	-1, 1430,
	5, 32,
	-2, 621,
	-1, 1461,
	5, 31,
	-2, 69,
	-1, 1496,
	5, 31,
	-2, 623,
	-1, 1579,
	5, 32,
	-2, 624,
}

const yyPrivate = 57344

const yyLast = 17004

var yyAct = [...]int{

	333, 1609, 1619, 1394, 1583, 1445, 1351, 1152, 1510, 1270,
	676, 337, 996, 1567, 1476, 675, 3, 1463, 1316, 363,
	1040, 1042, 1352, 965, 1584, 969, 1317, 961, 350, 535,
	1037, 64, 300, 1313, 1153, 1009, 1057, 408, 1017, 992,
	99, 1005, 1323, 99, 311, 1198, 815, 995, 1177, 99,
	1288, 1329, 903, 963, 916, 1062, 1250, 1249, 831, 967,
	1023, 941, 738, 952, 1227, 85, 607, 613, 1033, 737,
	306, 880, 619, 335, 99, 413, 397, 628, 945, 99,
	719, 99, 301, 302, 402, 718, 305, 320, 541, 394,
	99, 399, 413, 727, 692, 63, 99, 1078, 68, 1612,
	7, 6, 931, 1593, 1607, 693, 5, 1577, 558, 1604,
	1077, 1395, 1592, 1576, 1305, 377, 1422, 383, 384, 381,
	382, 380, 379, 378, 1346, 324, 70, 71, 72, 73,
	74, 385, 386, 540, 26, 86, 55, 29, 30, 560,
	1186, 1082, 739, 1185, 740, 563, 1187, 1347, 1348, 986,
	1076, 588, 1544, 641, 640, 650, 651, 643, 644, 645,
	646, 647, 648, 649, 642, 987, 988, 652, 304, 303,
	290, 1218, 543, 544, 581, 1289, 81, 1016, 582, 579,
	580, 942, 1272, 1483, 61, 94, 90, 91, 1024, 92,
	1413, 308, 1411, 310, 295, 574, 575, 287, 586, 844,
	1073, 1068, 1069, 936, 1067, 1274, 1070, 1071, 845, 842,
	1606, 587, 562, 565, 405, 1603, 567, 1291, 1560, 1568,
	1210, 297, 1269, 946, 1253, 1215, 1214, 1010, 83, 84,
	1464, 1465, 80, 1627, 1511, 1273, 542, 843, 88, 87,
	548, 1080, 1083, 310, 1012, 1470, 1211, 1513, 270, 564,
	566, 846, 1293, 1471, 1297, 273, 1292, 298, 1290, 801,
	1216, 1236, 1208, 1295, 807, 281, 288, 289, 1209, 1176,
	99, 1175, 1294, 413, 1623, 413, 413, 771, 1075, 1174,
	413, 538, 413, 1012, 601, 1296, 1298, 269, 413, 309,
	970, 972, 89, 1012, 1090, 664, 665, 1089, 1551, 1433,
	1074, 279, 1266, 1276, 1182, 1138, 1367, 286, 93, 99,
	1106, 852, 591, 595, 1012, 1127, 733, 1512, 1199, 632,
	1024, 554, 642, 993, 652, 652, 1213, 413, 1545, 982,
	1575, 832, 616, 849, 271, 561, 597, 598, 1011, 1054,
	1079, 1059, 626, 625, 1257, 1253, 615, 536, 571, 1254,
	837, 82, 1255, 1256, 1469, 1081, 627, 1368, 759, 627,
	1558, 283, 274, 275, 1124, 284, 285, 293, 77, 1258,
	971, 276, 278, 1533, 272, 292, 291, 1011, 1327, 741,
	534, 596, 1307, 568, 569, 56, 1621, 1011, 573, 1622,
	576, 1620, 99, 99, 99, 932, 589, 592, 594, 803,
	772, 413, 606, 593, 78, 86, 1012, 413, 1011, 547,
	1212, 1265, 1358, 61, 833, 1262, 617, 622, 1581, 664,
	665, 1058, 1055, 883, 785, 788, 789, 790, 791, 792,
	793, 572, 794, 795, 796, 797, 798, 773, 774, 775,
	776, 757, 758, 786, 1628, 760, 717, 761, 762, 763,
	764, 765, 766, 767, 768, 769, 770, 777, 778, 779,
	780, 781, 782, 783, 784, 603, 887, 604, 664, 665,
	605, 24, 583, 695, 697, 699, 701, 703, 705, 706,
	885, 886, 884, 726, 696, 698, 1629, 702, 704, 731,
	707, 1459, 735, 645, 646, 647, 648, 649, 642, 1458,
	1011, 652, 550, 551, 552, 1231, 1257, 1253, 88, 87,
	599, 1254, 855, 856, 1255, 1256, 787, 1008, 1012, 641,
	640, 650, 651, 643, 644, 645, 646, 647, 648, 649,
	642, 1258, 1230, 652, 1122, 99, 1121, 1219, 315, 413,
	405, 1559, 1425, 536, 625, 99, 1380, 1123, 99, 536,
	1490, 99, 585, 626, 625, 99, 307, 413, 413, 904,
	627, 905, 626, 625, 413, 413, 99, 413, 413, 1456,
	627, 99, 932, 1363, 1135, 413, 413, 1063, 1245, 627,
	641, 640, 650, 651, 643, 644, 645, 646, 647, 648,
	649, 642, 817, 1188, 652, 1189, 1228, 626, 625, 626,
	625, 600, 99, 413, 1309, 1064, 1556, 99, 1527, 870,
	872, 873, 1011, 1524, 627, 871, 627, 536, 1006, 413,
	1007, 1103, 1104, 1105, 99, 851, 1004, 1010, 391, 392,
	413, 1397, 364, 54, 1505, 1605, 600, 808, 641, 640,
	650, 651, 643, 644, 645, 646, 647, 648, 649, 642,
	820, 821, 652, 1451, 1596, 881, 1588, 600, 1451, 1585,
	857, 1505, 1571, 1522, 850, 818, 819, 1451, 1561, 1519,
	878, 1392, 822, 823, 413, 825, 826, 1505, 1552, 876,
	1388, 626, 625, 828, 829, 1505, 1515, 54, 1505, 600,
	1451, 1450, 1435, 600, 914, 1385, 921, 924, 627, 316,
	1432, 600, 1518, 933, 1199, 859, 1243, 874, 1242, 413,
	413, 841, 1374, 1373, 61, 1194, 99, 353, 352, 355,
	356, 357, 358, 1052, 99, 99, 354, 359, 99, 99,
	330, 1051, 99, 99, 99, 413, 1370, 1371, 907, 908,
	1370, 1369, 949, 600, 1118, 600, 1364, 910, 413, 641,
	640, 650, 651, 643, 644, 645, 646, 647, 648, 649,
	642, 929, 906, 652, 839, 26, 912, 600, 65, 814,
	813, 817, 877, 954, 957, 958, 959, 955, 1000, 956,
	960, 977, 804, 1330, 1331, 979, 802, 556, 1147, 748,
	747, 729, 729, 1013, 1279, 1148, 1019, 1020, 1021, 1022,
	1326, 912, 99, 413, 975, 413, 984, 99, 99, 980,
	1118, 99, 1030, 1031, 1032, 61, 1271, 1428, 1314, 983,
	858, 1326, 1532, 1025, 1026, 1027, 26, 1178, 1178, 1039,
	976, 99, 728, 99, 99, 730, 730, 732, 728, 99,
	1118, 26, 948, 99, 99, 99, 99, 99, 650, 651,
	643, 644, 645, 646, 647, 648, 649, 642, 962, 949,
	652, 915, 917, 1372, 1035, 1036, 923, 926, 927, 928,
	949, 1495, 949, 1326, 405, 1190, 61, 317, 985, 911,
	913, 1118, 1141, 1140, 1050, 918, 728, 997, 970, 972,
	878, 61, 940, 1594, 943, 944, 734, 853, 806, 1094,
	1564, 1525, 1478, 1460, 881, 559, 1018, 559, 559, 1440,
	1038, 1044, 559, 1046, 559, 1357, 1330, 1331, 1614, 1193,
	559, 1095, 1034, 1029, 1096, 1028, 1610, 61, 1041, 54,
	54, 641, 640, 650, 651, 643, 644, 645, 646, 647,
	648, 649, 642, 1479, 1112, 652, 1333, 1314, 1232, 54,
	99, 99, 99, 99, 99, 838, 1108, 810, 1164, 1336,
	1154, 1149, 99, 1165, 661, 99, 1162, 663, 971, 99,
	865, 1163, 1115, 1166, 1335, 958, 959, 99, 1161, 1160,
	914, 643, 644, 645, 646, 647, 648, 649, 642, 321,
	322, 652, 877, 1600, 1172, 674, 413, 678, 679, 680,
	681, 682, 683, 684, 685, 686, 687, 688, 1191, 691,
	694, 694, 694, 700, 694, 694, 700, 694, 708, 709,
	710, 711, 712, 713, 1167, 723, 1180, 1591, 1181, 1173,
	1179, 1156, 1157, 1134, 1159, 1155, 1275, 1091, 1158, 620,
	621, 1598, 413, 1196, 1197, 1101, 1102, 1100, 1183, 1493,
	413, 99, 413, 413, 1362, 1200, 1361, 618, 1234, 1201,
	1195, 1223, 746, 1222, 362, 1224, 1225, 1226, 608, 557,
	1426, 666, 667, 668, 669, 670, 671, 672, 673, 609,
	1220, 1221, 954, 957, 958, 959, 955, 1474, 956, 960,
	1045, 809, 339, 326, 1229, 1235, 620, 621, 99, 1248,
	962, 800, 1241, 1251, 1261, 1264, 1099, 413, 318, 319,
	1114, 1132, 65, 312, 1098, 1244, 1538, 313, 1117, 1119,
	1537, 1120, 1481, 1178, 1128, 1260, 1259, 1126, 1267, 1268,
	1129, 1130, 1131, 1252, 1125, 997, 830, 1137, 623, 407,
	1616, 1139, 1616, 1615, 1142, 1143, 1548, 1144, 1145, 1360,
	848, 413, 413, 67, 69, 1315, 549, 47, 1237, 1154,
	1239, 1240, 62, 1, 1306, 1283, 1320, 1169, 1318, 1282,
	1608, 413, 1396, 1287, 1300, 1299, 878, 1424, 1475, 1072,
	1566, 1003, 994, 76, 533, 1094, 75, 1557, 1053, 559,
	559, 413, 570, 413, 413, 277, 559, 559, 1002, 559,
	559, 1325, 1001, 1206, 1205, 1350, 1202, 559, 559, 1343,
	1334, 1217, 1015, 1337, 1204, 641, 640, 650, 651, 643,
	644, 645, 646, 647, 648, 649, 642, 1203, 1345, 652,
	1207, 754, 1339, 99, 752, 559, 1354, 99, 1349, 753,
	751, 756, 1355, 1356, 755, 1014, 1281, 750, 280, 400,
	742, 624, 413, 48, 1468, 1263, 1376, 1377, 1066, 79,
	1365, 1366, 413, 836, 99, 413, 577, 578, 282, 660,
	413, 1097, 1184, 413, 413, 413, 406, 413, 1310, 1381,
	99, 1379, 1321, 1382, 854, 612, 1536, 1480, 1384, 1133,
	689, 930, 338, 1386, 869, 351, 54, 1391, 348, 640,
	650, 651, 643, 644, 645, 646, 647, 648, 649, 642,
	349, 678, 652, 860, 1146, 634, 835, 336, 328, 1286,
	721, 714, 953, 951, 1409, 950, 811, 1401, 1406, 1407,
	997, 1408, 997, 1402, 1410, 395, 1412, 407, 1154, 407,
	407, 413, 413, 413, 407, 1332, 407, 1447, 1448, 1427,
	413, 1328, 407, 720, 1278, 584, 964, 1436, 413, 296,
	723, 1437, 1191, 1453, 723, 879, 1444, 1421, 888, 889,
	890, 891, 892, 893, 894, 895, 896, 897, 898, 899,
	900, 901, 902, 1543, 864, 413, 28, 66, 1449, 1454,
	323, 630, 1452, 1461, 19, 18, 413, 17, 1443, 590,
	20, 21, 22, 16, 1466, 15, 610, 614, 14, 1472,
	1462, 545, 32, 36, 35, 34, 1281, 10, 23, 13,
	12, 11, 1473, 633, 9, 937, 8, 662, 4, 314,
	1455, 25, 1457, 413, 413, 559, 413, 559, 2, 0,
	0, 413, 0, 99, 0, 99, 1502, 1496, 1318, 0,
	0, 0, 413, 0, 0, 1494, 0, 0, 677, 0,
	0, 413, 0, 0, 0, 407, 1503, 1520, 1482, 690,
	1504, 743, 413, 0, 1514, 1509, 0, 0, 0, 413,
	99, 1501, 0, 1521, 1534, 722, 1403, 0, 1526, 997,
	0, 1530, 1405, 0, 0, 1516, 1523, 1517, 0, 0,
	0, 0, 0, 1414, 1415, 1529, 413, 0, 0, 0,
	1107, 0, 0, 1550, 1549, 1318, 0, 724, 1555, 0,
	0, 0, 0, 1429, 1430, 1431, 413, 1434, 0, 0,
	0, 0, 1563, 413, 413, 1477, 0, 0, 0, 0,
	0, 1442, 0, 0, 0, 0, 1570, 1569, 0, 1573,
	0, 0, 413, 0, 0, 1562, 1578, 96, 0, 0,
	1154, 99, 0, 1565, 1553, 413, 299, 0, 0, 413,
	0, 1586, 0, 0, 0, 0, 0, 0, 1150, 1151,
	0, 1590, 723, 723, 723, 723, 723, 0, 0, 0,
	1595, 396, 0, 1555, 1599, 413, 537, 964, 539, 1170,
	1601, 1602, 1597, 799, 0, 0, 0, 546, 0, 723,
	1613, 0, 0, 553, 0, 0, 1109, 1110, 1111, 1624,
	0, 407, 407, 1419, 0, 1489, 0, 0, 407, 407,
	0, 407, 407, 0, 1284, 0, 0, 0, 0, 407,
	407, 0, 0, 0, 0, 0, 0, 0, 0, 1506,
	0, 1507, 1508, 0, 641, 640, 650, 651, 643, 644,
	645, 646, 647, 648, 649, 642, 0, 407, 652, 0,
	0, 0, 1477, 997, 0, 54, 0, 834, 0, 0,
	0, 1418, 559, 861, 559, 559, 0, 0, 1539, 1540,
	1541, 1542, 0, 0, 630, 1546, 1547, 407, 0, 641,
	640, 650, 651, 643, 644, 645, 646, 647, 648, 649,
	642, 0, 0, 652, 0, 0, 0, 0, 0, 867,
	868, 0, 0, 0, 0, 0, 0, 0, 882, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 909, 0,
	0, 0, 0, 0, 0, 0, 0, 1574, 0, 0,
	0, 0, 0, 0, 1579, 0, 934, 641, 640, 650,
	651, 643, 644, 645, 646, 647, 648, 649, 642, 0,
	1587, 652, 677, 938, 939, 0, 919, 920, 0, 0,
	0, 1319, 0, 54, 0, 0, 0, 555, 0, 0,
	0, 0, 0, 0, 1247, 0, 0, 0, 0, 407,
	0, 0, 0, 0, 0, 0, 0, 1340, 1341, 1342,
	0, 0, 407, 0, 0, 0, 722, 0, 0, 0,
	722, 1625, 1626, 0, 722, 0, 602, 0, 0, 0,
	0, 0, 0, 0, 0, 991, 0, 0, 0, 0,
	0, 0, 0, 0, 1285, 0, 0, 0, 0, 1417,
	0, 0, 0, 0, 0, 1301, 1302, 0, 1303, 1304,
	0, 0, 0, 0, 0, 0, 0, 407, 636, 407,
	639, 1311, 1312, 0, 0, 611, 653, 654, 655, 656,
	657, 658, 659, 0, 637, 638, 635, 641, 640, 650,
	651, 643, 644, 645, 646, 647, 648, 649, 642, 0,
	0, 652, 1338, 1416, 0, 0, 0, 0, 0, 716,
	0, 725, 723, 0, 0, 97, 0, 407, 294, 0,
	0, 0, 0, 0, 97, 641, 640, 650, 651, 643,
	644, 645, 646, 647, 648, 649, 642, 0, 1420, 652,
	0, 1359, 0, 0, 1092, 1093, 327, 614, 0, 398,
	0, 0, 0, 0, 97, 0, 97, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 0, 0, 0, 0,
	0, 97, 0, 0, 1113, 0, 0, 882, 0, 641,
	640, 650, 651, 643, 644, 645, 646, 647, 648, 649,
	642, 0, 0, 652, 641, 640, 650, 651, 643, 644,
	645, 646, 647, 648, 649, 642, 1116, 0, 652, 0,
	54, 0, 0, 934, 0, 1404, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1136, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 722, 722, 722, 722, 722, 0, 0, 0,
	0, 0, 749, 0, 0, 0, 0, 722, 0, 0,
	407, 1319, 805, 0, 1497, 396, 0, 0, 812, 722,
	0, 0, 0, 0, 0, 0, 26, 27, 55, 29,
	30, 0, 0, 824, 0, 0, 0, 0, 827, 0,
	0, 0, 0, 0, 0, 60, 0, 0, 0, 31,
	51, 52, 0, 0, 0, 0, 1233, 1531, 0, 0,
	0, 0, 0, 0, 407, 0, 407, 407, 0, 840,
	0, 0, 42, 0, 847, 0, 61, 0, 1319, 0,
	54, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 866, 0, 0, 0, 97, 0, 1484, 1485, 1486,
	1487, 1488, 0, 1246, 0, 1491, 1492, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 407, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 0, 0, 33, 57, 38,
	37, 40, 0, 53, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 407, 0, 0, 0, 0, 0, 0,
	0, 0, 934, 0, 0, 1322, 1324, 0, 0, 41,
	59, 58, 0, 0, 49, 50, 39, 0, 0, 1308,
	0, 0, 0, 947, 0, 1324, 0, 0, 0, 1611,
	0, 43, 44, 0, 45, 46, 978, 0, 0, 0,
	0, 0, 0, 0, 0, 407, 0, 407, 1353, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 97, 97,
	0, 0, 1344, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1383, 0, 0, 1043,
	0, 0, 0, 0, 1047, 1048, 1387, 56, 1049, 1390,
	0, 0, 0, 0, 1393, 0, 0, 1398, 1399, 1400,
	0, 407, 1617, 0, 0, 0, 0, 0, 1056, 0,
	0, 0, 0, 0, 0, 0, 1065, 0, 0, 0,
	1084, 1085, 1086, 1087, 1088, 0, 0, 0, 0, 0,
	0, 0, 722, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 934, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1423, 0, 1446, 1446, 1446, 0, 0,
	97, 0, 0, 677, 407, 0, 0, 0, 0, 0,
	97, 1438, 1446, 97, 1439, 0, 97, 1441, 0, 0,
	816, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 0, 0, 0, 0, 97, 0, 0, 1467,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	407, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 0, 0,
	0, 0, 97, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1498, 1499, 97,
	1500, 0, 0, 0, 0, 1446, 0, 0, 816, 0,
	0, 0, 0, 0, 0, 0, 1353, 0, 0, 0,
	0, 0, 0, 0, 0, 1353, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1528, 0, 0, 0,
	0, 0, 0, 1446, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 327, 327, 0, 0, 0,
	327, 327, 327, 327, 0, 0, 0, 935, 1238, 0,
	1554, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 327, 327, 327, 327,
	1353, 97, 0, 0, 0, 0, 0, 407, 407, 97,
	973, 0, 0, 97, 97, 0, 0, 97, 981, 816,
	0, 0, 0, 934, 0, 1277, 1580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1353,
	0, 1572, 677, 1589, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1446,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 0, 0,
	0, 0, 97, 97, 0, 0, 97, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 0, 1060, 1061,
	0, 0, 0, 0, 97, 0, 0, 0, 97, 97,
	97, 97, 97, 0, 0, 0, 0, 0, 816, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	327, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1375, 0, 0, 0, 1378, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1389, 0, 0, 0, 0, 327, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 327, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 935, 97, 97, 97, 97, 97,
	0, 0, 0, 0, 0, 0, 0, 1168, 0, 0,
	97, 0, 0, 0, 973, 0, 0, 0, 0, 0,
	0, 0, 97, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 327, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 327, 0, 0, 1535, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 816, 0, 0, 0, 0, 0,
	0, 0, 0, 935, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1582, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 0,
	0, 0, 97, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 935, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 973, 0,
	973, 0, 0, 0, 0, 520, 508, 0, 465, 523,
	438, 455, 531, 456, 459, 496, 423, 478, 183, 453,
	0, 442, 418, 448, 419, 440, 467, 129, 437, 510,
	481, 522, 155, 521, 471, 97, 529, 157, 487, 0,
	229, 171, 0, 0, 469, 512, 476, 505, 464, 497,
	428, 486, 524, 454, 494, 525, 0, 0, 0, 412,
	0, 998, 999, 0, 0, 0, 0, 0, 119, 0,
	491, 519, 450, 493, 495, 417, 488, 0, 421, 424,
	530, 515, 445, 446, 1192, 0, 0, 0, 0, 0,
	0, 468, 477, 502, 462, 0, 0, 0, 0, 0,
	0, 0, 0, 443, 935, 485, 0, 0, 0, 425,
	422, 0, 0, 466, 0, 0, 97, 427, 0, 444,
	503, 0, 414, 137, 0, 0, 507, 514, 463, 0,
	258, 518, 461, 460, 202, 0, 233, 140, 154, 115,
	101, 111, 0, 139, 180, 209, 213, 451, 415, 511,
	441, 449, 123, 447, 211, 190, 249, 0, 484, 192,
	210, 158, 239, 203, 248, 259, 260, 236, 256, 264,
	226, 104, 235, 247, 120, 221, 106, 245, 232, 169,
	149, 150, 105, 0, 207, 128, 135, 125, 182, 242,
	243, 124, 267, 112, 255, 108, 113, 254, 176, 238,
	246, 170, 163, 107, 244, 168, 162, 153, 132, 142,
	200, 160, 201, 143, 173, 172, 174, 0, 420, 0,
	230, 252, 268, 117, 436, 0, 237, 262, 263, 0,
	0, 118, 136, 131, 199, 175, 114, 145, 227, 152,
	159, 206, 266, 189, 212, 121, 251, 228, 432, 435,
	430, 431, 479, 480, 526, 527, 528, 504, 426, 0,
	433, 434, 0, 509, 516, 517, 483, 100, 109, 156,
	265, 204, 134, 253, 416, 429, 127, 439, 0, 0,
	452, 457, 458, 470, 472, 473, 474, 475, 482, 489,
	490, 492, 498, 499, 500, 501, 506, 513, 532, 102,
	103, 110, 116, 122, 126, 130, 133, 138, 141, 144,
	146, 147, 148, 151, 161, 164, 165, 166, 167, 177,
	178, 179, 181, 184, 185, 186, 187, 188, 191, 193,
	194, 195, 196, 197, 198, 205, 208, 214, 215, 216,
	217, 218, 219, 220, 222, 223, 224, 225, 231, 234,
	240, 241, 250, 257, 261, 520, 508, 0, 465, 523,
	438, 455, 531, 456, 459, 496, 423, 478, 183, 453,
	0, 442, 418, 448, 419, 440, 467, 129, 437, 510,
	481, 522, 155, 521, 471, 0, 529, 157, 487, 0,
	229, 171, 0, 0, 469, 512, 476, 505, 464, 497,
	428, 486, 524, 454, 494, 525, 0, 0, 0, 412,
	0, 998, 999, 0, 0, 0, 0, 0, 119, 0,
	491, 519, 450, 493, 495, 417, 488, 0, 421, 424,
	530, 515, 445, 446, 0, 0, 0, 0, 0, 0,
	0, 468, 477, 502, 462, 0, 0, 0, 0, 0,
	0, 0, 0, 443, 0, 485, 0, 0, 0, 425,
	422, 0, 0, 466, 0, 0, 0, 427, 0, 444,
	503, 0, 414, 137, 0, 0, 507, 514, 463, 0,
	258, 518, 461, 460, 202, 0, 233, 140, 154, 115,
	101, 111, 0, 139, 180, 209, 213, 451, 415, 511,
	441, 449, 123, 447, 211, 190, 249, 0, 484, 192,
	210, 158, 239, 203, 248, 259, 260, 236, 256, 264,
	226, 104, 235, 247, 120, 221, 106, 245, 232, 169,
	149, 150, 105, 0, 207, 128, 135, 125, 182, 242,
	243, 124, 267, 112, 255, 108, 113, 254, 176, 238,
	246, 170, 163, 107, 244, 168, 162, 153, 132, 142,
	200, 160, 201, 143, 173, 172, 174, 0, 420, 0,
	230, 252, 268, 117, 436, 0, 237, 262, 263, 0,
	0, 118, 136, 131, 199, 175, 114, 145, 227, 152,
	159, 206, 266, 189, 212, 121, 251, 228, 432, 435,
	430, 431, 479, 480, 526, 527, 528, 504, 426, 0,
	433, 434, 0, 509, 516, 517, 483, 100, 109, 156,
	265, 204, 134, 253, 416, 429, 127, 439, 0, 0,
	452, 457, 458, 470, 472, 473, 474, 475, 482, 489,
	490, 492, 498, 499, 500, 501, 506, 513, 532, 102,
	103, 110, 116, 122, 126, 130, 133, 138, 141, 144,
	146, 147, 148, 151, 161, 164, 165, 166, 167, 177,
	178, 179, 181, 184, 185, 186, 187, 188, 191, 193,
	194, 195, 196, 197, 198, 205, 208, 214, 215, 216,
	217, 218, 219, 220, 222, 223, 224, 225, 231, 234,
	240, 241, 250, 257, 261, 520, 508, 0, 465, 523,
	438, 455, 531, 456, 459, 496, 423, 478, 183, 453,
	0, 442, 418, 448, 419, 440, 467, 129, 437, 510,
	481, 522, 155, 521, 471, 0, 529, 157, 487, 0,
	229, 171, 0, 0, 469, 512, 476, 505, 464, 497,
	428, 486, 524, 454, 494, 525, 0, 0, 0, 412,
	0, 0, 0, 0, 0, 0, 0, 0, 119, 0,
	491, 519, 450, 493, 495, 417, 488, 0, 421, 424,
	530, 515, 445, 446, 0, 0, 0, 0, 0, 0,
	0, 468, 477, 502, 462, 0, 0, 0, 0, 0,
	0, 1280, 0, 443, 0, 485, 0, 0, 0, 425,
	422, 0, 0, 466, 0, 0, 0, 427, 0, 444,
	503, 0, 414, 137, 0, 0, 507, 514, 463, 0,
	258, 518, 461, 460, 202, 0, 233, 140, 154, 115,
	101, 111, 0, 139, 180, 209, 213, 451, 415, 511,
	441, 449, 123, 447, 211, 190, 249, 0, 484, 192,
	210, 158, 239, 203, 248, 259, 260, 236, 256, 264,
	226, 104, 235, 247, 120, 221, 106, 245, 232, 169,
	149, 150, 105, 0, 207, 128, 135, 125, 182, 242,
	243, 124, 267, 112, 255, 108, 113, 254, 176, 238,
	246, 170, 163, 107, 244, 168, 162, 153, 132, 142,
	200, 160, 201, 143, 173, 172, 174, 0, 420, 0,
	230, 252, 268, 117, 436, 0, 237, 262, 263, 0,
	0, 118, 136, 131, 199, 175, 114, 145, 227, 152,
	159, 206, 266, 189, 212, 121, 251, 228, 432, 435,
	430, 431, 479, 480, 526, 527, 528, 504, 426, 0,
	433, 434, 0, 509, 516, 517, 483, 100, 109, 156,
	265, 204, 134, 253, 416, 429, 127, 439, 0, 0,
	452, 457, 458, 470, 472, 473, 474, 475, 482, 489,
	490, 492, 498, 499, 500, 501, 506, 513, 532, 102,
	103, 110, 116, 122, 126, 130, 133, 138, 141, 144,
	146, 147, 148, 151, 161, 164, 165, 166, 167, 177,
	178, 179, 181, 184, 185, 186, 187, 188, 191, 193,
	194, 195, 196, 197, 198, 205, 208, 214, 215, 216,
	217, 218, 219, 220, 222, 223, 224, 225, 231, 234,
	240, 241, 250, 257, 261, 520, 508, 0, 465, 523,
	438, 455, 531, 456, 459, 496, 423, 478, 183, 453,
	0, 442, 418, 448, 419, 440, 467, 129, 437, 510,
	481, 522, 155, 521, 471, 0, 529, 157, 487, 0,
	229, 171, 0, 0, 469, 512, 476, 505, 464, 497,
	428, 486, 524, 454, 494, 525, 61, 0, 0, 412,
	0, 0, 0, 0, 0, 0, 0, 0, 119, 0,
	491, 519, 450, 493, 495, 417, 488, 0, 421, 424,
	530, 515, 445, 446, 0, 0, 0, 0, 0, 0,
	0, 468, 477, 502, 462, 0, 0, 0, 0, 0,
	0, 0, 0, 443, 0, 485, 0, 0, 0, 425,
	422, 0, 0, 466, 0, 0, 0, 427, 0, 444,
	503, 0, 414, 137, 0, 0, 507, 514, 463, 0,
	258, 518, 461, 460, 202, 0, 233, 140, 154, 115,
	101, 111, 0, 139, 180, 209, 213, 451, 415, 511,
	441, 449, 123, 447, 211, 190, 249, 0, 484, 192,
	210, 158, 239, 203, 248, 259, 260, 236, 256, 264,
	226, 104, 235, 247, 120, 221, 106, 245, 232, 169,
	149, 150, 105, 0, 207, 128, 135, 125, 182, 242,
	243, 124, 267, 112, 255, 108, 113, 254, 176, 238,
	246, 170, 163, 107, 244, 168, 162, 153, 132, 142,
	200, 160, 201, 143, 173, 172, 174, 0, 420, 0,
	230, 252, 268, 117, 436, 0, 237, 262, 263, 0,
	0, 118, 136, 131, 199, 175, 114, 145, 227, 152,
	159, 206, 266, 189, 212, 121, 251, 228, 432, 435,
	430, 431, 479, 480, 526, 527, 528, 504, 426, 0,
	433, 434, 0, 509, 516, 517, 483, 100, 109, 156,
	265, 204, 134, 253, 416, 429, 127, 439, 0, 0,
	452, 457, 458, 470, 472, 473, 474, 475, 482, 489,
	490, 492, 498, 499, 500, 501, 506, 513, 532, 102,
	103, 110, 116, 122, 126, 130, 133, 138, 141, 144,
	146, 147, 148, 151, 161, 164, 165, 166, 167, 177,
	178, 179, 181, 184, 185, 186, 187, 188, 191, 193,
	194, 195, 196, 197, 198, 205, 208, 214, 215, 216,
	217, 218, 219, 220, 222, 223, 224, 225, 231, 234,
	240, 241, 250, 257, 261, 520, 508, 0, 465, 523,
	438, 455, 531, 456, 459, 496, 423, 478, 183, 453,
	0, 442, 418, 448, 419, 440, 467, 129, 437, 510,
	481, 522, 155, 521, 471, 0, 529, 157, 487, 0,
	229, 171, 0, 0, 469, 512, 476, 505, 464, 497,
	428, 486, 524, 454, 494, 525, 0, 0, 0, 98,
	0, 0, 0, 0, 0, 0, 0, 0, 119, 0,
	491, 519, 450, 493, 495, 417, 488, 0, 421, 424,
	530, 515, 445, 446, 0, 0, 0, 0, 0, 0,
	0, 468, 477, 502, 462, 0, 0, 0, 0, 0,
	0, 982, 0, 443, 0, 485, 0, 0, 0, 425,
	422, 0, 0, 466, 0, 0, 0, 427, 0, 444,
	503, 0, 414, 137, 0, 0, 507, 514, 463, 0,
	258, 518, 461, 460, 202, 0, 233, 140, 154, 115,
	101, 111, 0, 139, 180, 209, 213, 451, 415, 511,
	441, 449, 123, 447, 211, 190, 249, 0, 484, 192,
	210, 158, 239, 203, 248, 259, 260, 236, 256, 264,
	226, 104, 235, 247, 120, 221, 106, 245, 232, 169,
	149, 150, 105, 0, 207, 128, 135, 125, 182, 242,
	243, 124, 267, 112, 255, 108, 113, 254, 176, 238,
	246, 170, 163, 107, 244, 168, 162, 153, 132, 142,
	200, 160, 201, 143, 173, 172, 174, 0, 420, 0,
	230, 252, 268, 117, 436, 0, 237, 262, 263, 0,
	0, 118, 136, 131, 199, 175, 114, 145, 227, 152,
	159, 206, 266, 189, 212, 121, 251, 228, 432, 435,
	430, 431, 479, 480, 526, 527, 528, 504, 426, 0,
	433, 434, 0, 509, 516, 517, 483, 100, 109, 156,
	265, 204, 134, 253, 416, 429, 127, 439, 0, 0,
	452, 457, 458, 470, 472, 473, 474, 475, 482, 489,
	490, 492, 498, 499, 500, 501, 506, 513, 532, 102,
	103, 110, 116, 122, 126, 130, 133, 138, 141, 144,
	146, 147, 148, 151, 161, 164, 165, 166, 167, 177,
	178, 179, 181, 184, 185, 186, 187, 188, 191, 193,
	194, 195, 196, 197, 198, 205, 208, 214, 215, 216,
	217, 218, 219, 220, 222, 223, 224, 225, 231, 234,
	240, 241, 250, 257, 261, 520, 508, 0, 465, 523,
	438, 455, 531, 456, 459, 496, 423, 478, 183, 453,
	0, 442, 418, 448, 419, 440, 467, 129, 437, 510,
	481, 522, 155, 521, 471, 0, 529, 157, 487, 0,
	229, 171, 0, 0, 469, 512, 476, 505, 464, 497,
	428, 486, 524, 454, 494, 525, 0, 0, 0, 332,
	0, 0, 0, 0, 0, 0, 0, 0, 119, 0,
	491, 519, 450, 493, 495, 417, 488, 0, 421, 424,
	530, 515, 445, 446, 0, 0, 0, 0, 0, 0,
	0, 468, 477, 502, 462, 0, 0, 0, 0, 0,
	0, 875, 0, 443, 0, 485, 0, 0, 0, 425,
	422, 0, 0, 466, 0, 0, 0, 427, 0, 444,
	503, 0, 414, 137, 0, 0, 507, 514, 463, 0,
	258, 518, 461, 460, 202, 0, 233, 140, 154, 115,
	101, 111, 0, 139, 180, 209, 213, 451, 415, 511,
	441, 449, 123, 447, 211, 190, 249, 0, 484, 192,
	210, 158, 239, 203, 248, 259, 260, 236, 256, 264,
	226, 104, 235, 247, 120, 221, 106, 245, 232, 169,
	149, 150, 105, 0, 207, 128, 135, 125, 182, 242,
	243, 124, 267, 112, 255, 108, 113, 254, 176, 238,
	246, 170, 163, 107, 244, 168, 162, 153, 132, 142,
	200, 160, 201, 143, 173, 172, 174, 0, 420, 0,
	230, 252, 268, 117, 436, 0, 237, 262, 263, 0,
	0, 118, 136, 131, 199, 175, 114, 145, 227, 152,
	159, 206, 266, 189, 212, 121, 251, 228, 432, 435,
	430, 431, 479, 480, 526, 527, 528, 504, 426, 0,
	433, 434, 0, 509, 516, 517, 483, 100, 109, 156,
	265, 204, 134, 253, 416, 429, 127, 439, 0, 0,
	452, 457, 458, 470, 472, 473, 474, 475, 482, 489,
	490, 492, 498, 499, 500, 501, 506, 513, 532, 102,
	103, 110, 116, 122, 126, 130, 133, 138, 141, 144,
	146, 147, 148, 151, 161, 164, 165, 166, 167, 177,
	178, 179, 181, 184, 185, 186, 187, 188, 191, 193,
	194, 195, 196, 197, 198, 205, 208, 214, 215, 216,
	217, 218, 219, 220, 222, 223, 224, 225, 231, 234,
	240, 241, 250, 257, 261, 520, 508, 0, 465, 523,
	438, 455, 531, 456, 459, 496, 423, 478, 183, 453,
	0, 442, 418, 448, 419, 440, 467, 129, 437, 510,
	481, 522, 155, 521, 471, 0, 529, 157, 487, 0,
	229, 171, 0, 0, 469, 512, 476, 505, 464, 497,
	428, 486, 524, 454, 494, 525, 0, 0, 0, 412,
	0, 0, 0, 0, 0, 0, 0, 0, 119, 0,
	491, 519, 450, 493, 495, 417, 488, 0, 421, 424,
	530, 515, 445, 446, 0, 0, 0, 0, 0, 0,
	0, 468, 477, 502, 462, 0, 0, 0, 0, 0,
	0, 0, 0, 443, 0, 485, 0, 0, 0, 425,
	422, 0, 0, 466, 0, 0, 0, 427, 0, 444,
	503, 0, 414, 137, 0, 0, 507, 514, 463, 0,
	258, 518, 461, 460, 202, 0, 233, 140, 154, 115,
	101, 111, 0, 139, 180, 209, 213, 451, 415, 511,
	441, 449, 123, 447, 211, 190, 249, 0, 484, 192,
	210, 158, 239, 203, 248, 259, 260, 236, 256, 264,
	226, 104, 235, 247, 120, 221, 106, 245, 232, 169,
	149, 150, 105, 0, 207, 128, 135, 125, 182, 242,
	243, 124, 267, 112, 255, 108, 113, 254, 176, 238,
	246, 170, 163, 107, 244, 168, 162, 153, 132, 142,
	200, 160, 201, 143, 173, 172, 174, 0, 420, 0,
	230, 252, 268, 117, 436, 0, 237, 262, 263, 0,
	0, 118, 136, 131, 199, 175, 114, 145, 227, 152,
	159, 206, 266, 189, 212, 121, 251, 228, 432, 435,
	430, 431, 479, 480, 526, 527, 528, 504, 426, 0,
	433, 434, 0, 509, 516, 517, 483, 100, 109, 156,
	265, 204, 134, 253, 416, 429, 127, 439, 0, 0,
	452, 457, 458, 470, 472, 473, 474, 475, 482, 489,
	490, 492, 498, 499, 500, 501, 506, 513, 532, 102,
	103, 110, 116, 122, 126, 130, 133, 138, 141, 144,
	146, 147, 148, 151, 161, 164, 165, 166, 167, 177,
	178, 179, 181, 184, 185, 186, 187, 188, 191, 193,
	194, 195, 196, 197, 198, 205, 208, 214, 215, 216,
	217, 218, 219, 220, 222, 223, 224, 225, 231, 234,
	240, 241, 250, 257, 261, 520, 508, 0, 465, 523,
	438, 455, 531, 456, 459, 496, 423, 478, 183, 453,
	0, 442, 418, 448, 419, 440, 467, 129, 437, 510,
	481, 522, 155, 521, 471, 0, 529, 157, 487, 0,
	229, 171, 0, 0, 469, 512, 476, 505, 464, 497,
	428, 486, 524, 454, 494, 525, 0, 0, 0, 332,
	0, 0, 0, 0, 0, 0, 0, 0, 119, 0,
	491, 519, 450, 493, 495, 417, 488, 0, 421, 424,
	530, 515, 445, 446, 0, 0, 0, 0, 0, 0,
	0, 468, 477, 502, 462, 0, 0, 0, 0, 0,
	0, 0, 0, 443, 0, 485, 0, 0, 0, 425,
	422, 0, 0, 466, 0, 0, 0, 427, 0, 444,
	503, 0, 414, 137, 0, 0, 507, 514, 463, 0,
	258, 518, 461, 460, 202, 0, 233, 140, 154, 115,
	101, 111, 0, 139, 180, 209, 213, 451, 415, 511,
	441, 449, 123, 447, 211, 190, 249, 0, 484, 192,
	210, 158, 239, 203, 248, 259, 260, 236, 256, 264,
	226, 104, 235, 247, 120, 221, 106, 245, 232, 169,
	149, 150, 105, 0, 207, 128, 135, 125, 182, 242,
	243, 124, 267, 112, 255, 108, 113, 254, 176, 238,
	246, 170, 163, 107, 244, 168, 162, 153, 132, 142,
	200, 160, 201, 143, 173, 172, 174, 0, 420, 0,
	230, 252, 268, 117, 436, 0, 237, 262, 263, 0,
	0, 118, 136, 131, 199, 175, 114, 145, 227, 152,
	159, 206, 266, 189, 212, 121, 251, 228, 432, 435,
	430, 431, 479, 480, 526, 527, 528, 504, 426, 0,
	433, 434, 0, 509, 516, 517, 483, 100, 109, 156,
	265, 204, 134, 253, 416, 429, 127, 439, 0, 0,
	452, 457, 458, 470, 472, 473, 474, 475, 482, 489,
	490, 492, 498, 499, 500, 501, 506, 513, 532, 102,
	103, 110, 116, 122, 126, 130, 133, 138, 141, 144,
	146, 147, 148, 151, 161, 164, 165, 166, 167, 177,
	178, 179, 181, 184, 185, 186, 187, 188, 191, 193,
	194, 195, 196, 197, 198, 205, 208, 214, 215, 216,
	217, 218, 219, 220, 222, 223, 224, 225, 231, 234,
	240, 241, 250, 257, 261, 520, 508, 0, 465, 523,
	438, 455, 531, 456, 459, 496, 423, 478, 183, 453,
	0, 442, 418, 448, 419, 440, 467, 129, 437, 510,
	481, 522, 155, 521, 471, 0, 529, 157, 487, 0,
	229, 171, 0, 0, 469, 512, 476, 505, 464, 497,
	428, 486, 524, 454, 494, 525, 0, 0, 0, 412,
	0, 0, 0, 0, 0, 0, 0, 0, 119, 0,
	491, 519, 450, 493, 495, 417, 488, 0, 421, 424,
	530, 515, 445, 446, 0, 0, 0, 0, 0, 0,
	0, 468, 477, 502, 462, 0, 0, 0, 0, 0,
	0, 0, 0, 443, 0, 485, 0, 0, 0, 425,
	422, 0, 0, 466, 0, 0, 0, 427, 0, 444,
	503, 0, 414, 137, 0, 0, 507, 514, 463, 0,
	258, 518, 461, 460, 202, 0, 233, 140, 154, 115,
	101, 111, 0, 139, 180, 209, 213, 451, 415, 511,
	441, 449, 123, 447, 211, 190, 249, 0, 484, 192,
	210, 158, 239, 203, 248, 259, 260, 236, 256, 264,
	226, 104, 235, 247, 120, 221, 106, 245, 232, 169,
	149, 150, 105, 0, 207, 128, 135, 125, 182, 242,
	243, 124, 267, 112, 255, 108, 410, 254, 176, 238,
	246, 170, 163, 107, 244, 168, 162, 153, 132, 142,
	200, 160, 201, 143, 173, 172, 174, 0, 420, 0,
	230, 252, 268, 117, 436, 0, 237, 262, 263, 0,
	0, 118, 136, 131, 199, 411, 409, 145, 227, 152,
	159, 206, 266, 189, 212, 121, 251, 228, 432, 435,
	430, 431, 479, 480, 526, 527, 528, 504, 426, 0,
	433, 434, 0, 509, 516, 517, 483, 100, 109, 156,
	265, 204, 134, 253, 416, 429, 127, 439, 0, 0,
	452, 457, 458, 470, 472, 473, 474, 475, 482, 489,
	490, 492, 498, 499, 500, 501, 506, 513, 532, 102,
	103, 110, 116, 122, 126, 130, 133, 138, 141, 144,
	146, 147, 148, 151, 161, 164, 165, 166, 167, 177,
	178, 179, 181, 184, 185, 186, 187, 188, 191, 193,
	194, 195, 196, 197, 198, 205, 208, 214, 215, 216,
	217, 218, 219, 220, 222, 223, 224, 225, 231, 234,
	240, 241, 250, 257, 261, 520, 508, 0, 465, 523,
	438, 455, 531, 456, 459, 496, 423, 478, 183, 453,
	0, 442, 418, 448, 419, 440, 467, 129, 437, 510,
	481, 522, 155, 521, 471, 0, 529, 157, 487, 0,
	229, 171, 0, 0, 469, 512, 476, 505, 464, 497,
	428, 486, 524, 454, 494, 525, 0, 0, 0, 98,
	0, 0, 0, 0, 0, 0, 0, 0, 119, 0,
	491, 519, 450, 493, 495, 417, 488, 0, 421, 424,
	530, 515, 445, 446, 0, 0, 0, 0, 0, 0,
	0, 468, 477, 502, 462, 0, 0, 0, 0, 0,
	0, 0, 0, 443, 0, 485, 0, 0, 0, 425,
	422, 0, 0, 466, 0, 0, 0, 427, 0, 444,
	503, 0, 414, 137, 0, 0, 507, 514, 463, 0,
	258, 518, 461, 460, 202, 0, 233, 140, 154, 115,
	101, 111, 0, 139, 180, 209, 213, 451, 415, 511,
	441, 449, 123, 447, 211, 190, 249, 0, 484, 192,
	210, 158, 239, 203, 248, 259, 260, 236, 256, 264,
	226, 104, 235, 247, 120, 221, 106, 245, 232, 169,
	149, 150, 105, 0, 207, 128, 135, 125, 182, 242,
	243, 124, 267, 112, 255, 108, 113, 254, 176, 238,
	246, 170, 163, 107, 244, 168, 162, 153, 132, 142,
	200, 160, 201, 143, 173, 172, 174, 0, 420, 0,
	230, 252, 268, 117, 436, 0, 237, 262, 263, 0,
	0, 118, 136, 131, 199, 175, 114, 145, 227, 152,
	159, 206, 266, 189, 212, 121, 251, 228, 432, 435,
	430, 431, 479, 480, 526, 527, 528, 504, 426, 0,
	433, 434, 0, 509, 516, 517, 483, 100, 109, 156,
	265, 204, 134, 253, 416, 429, 127, 439, 0, 0,
	452, 457, 458, 470, 472, 473, 474, 475, 482, 489,
	490, 492, 498, 499, 500, 501, 506, 513, 532, 102,
	103, 110, 116, 122, 126, 130, 133, 138, 141, 144,
	146, 147, 148, 151, 161, 164, 165, 166, 167, 177,
	178, 179, 181, 184, 185, 186, 187, 188, 191, 193,
	194, 195, 196, 197, 198, 205, 208, 214, 215, 216,
	217, 218, 219, 220, 222, 223, 224, 225, 231, 234,
	240, 241, 250, 257, 261, 520, 508, 0, 465, 523,
	438, 455, 531, 456, 459, 496, 423, 478, 183, 453,
	0, 442, 418, 448, 419, 440, 467, 129, 437, 510,
	481, 522, 155, 521, 471, 0, 529, 157, 487, 0,
	229, 171, 0, 0, 469, 512, 476, 505, 464, 497,
	428, 486, 524, 454, 494, 525, 0, 0, 0, 412,
	0, 0, 0, 0, 0, 0, 0, 0, 119, 0,
	491, 519, 450, 493, 495, 417, 488, 0, 421, 424,
	530, 515, 445, 446, 0, 0, 0, 0, 0, 0,
	0, 468, 477, 502, 462, 0, 0, 0, 0, 0,
	0, 0, 0, 443, 0, 485, 0, 0, 0, 425,
	422, 0, 0, 466, 0, 0, 0, 427, 0, 444,
	503, 0, 414, 137, 0, 0, 507, 514, 463, 0,
	258, 518, 461, 460, 202, 0, 233, 140, 154, 115,
	101, 111, 0, 139, 180, 209, 213, 451, 415, 511,
	441, 449, 123, 447, 211, 190, 249, 0, 484, 192,
	210, 158, 239, 203, 248, 259, 260, 236, 256, 264,
	226, 104, 235, 736, 120, 221, 106, 245, 232, 169,
	149, 150, 105, 0, 207, 128, 135, 125, 182, 242,
	243, 124, 267, 112, 255, 108, 410, 254, 176, 238,
	246, 170, 163, 107, 244, 168, 162, 153, 132, 142,
	200, 160, 201, 143, 173, 172, 174, 0, 420, 0,
	230, 252, 268, 117, 436, 0, 237, 262, 263, 0,
	0, 118, 136, 131, 199, 411, 409, 145, 227, 152,
	159, 206, 266, 189, 212, 121, 251, 228, 432, 435,
	430, 431, 479, 480, 526, 527, 528, 504, 426, 0,
	433, 434, 0, 509, 516, 517, 483, 100, 109, 156,
	265, 204, 134, 253, 416, 429, 127, 439, 0, 0,
	452, 457, 458, 470, 472, 473, 474, 475, 482, 489,
	490, 492, 498, 499, 500, 501, 506, 513, 532, 102,
	103, 110, 116, 122, 126, 130, 133, 138, 141, 144,
	146, 147, 148, 151, 161, 164, 165, 166, 167, 177,
	178, 179, 181, 184, 185, 186, 187, 188, 191, 193,
	194, 195, 196, 197, 198, 205, 208, 214, 215, 216,
	217, 218, 219, 220, 222, 223, 224, 225, 231, 234,
	240, 241, 250, 257, 261, 520, 508, 0, 465, 523,
	438, 455, 531, 456, 459, 496, 423, 478, 183, 453,
	0, 442, 418, 448, 419, 440, 467, 129, 437, 510,
	481, 522, 155, 521, 471, 0, 529, 157, 487, 0,
	229, 171, 0, 0, 469, 512, 476, 505, 464, 497,
	428, 486, 524, 454, 494, 525, 0, 0, 0, 412,
	0, 0, 0, 0, 0, 0, 0, 0, 119, 0,
	491, 519, 450, 493, 495, 417, 488, 0, 421, 424,
	530, 515, 445, 446, 0, 0, 0, 0, 0, 0,
	0, 468, 477, 502, 462, 0, 0, 0, 0, 0,
	0, 0, 0, 443, 0, 485, 0, 0, 0, 425,
	422, 0, 0, 466, 0, 0, 0, 427, 0, 444,
	503, 0, 414, 137, 0, 0, 507, 514, 463, 0,
	258, 518, 461, 460, 202, 0, 233, 140, 154, 115,
	101, 111, 0, 139, 180, 209, 213, 451, 415, 511,
	441, 449, 123, 447, 211, 190, 249, 0, 484, 192,
	210, 158, 239, 203, 248, 259, 260, 236, 256, 264,
	226, 104, 235, 401, 120, 221, 106, 245, 232, 169,
	149, 150, 105, 0, 207, 128, 135, 125, 182, 242,
	243, 124, 267, 112, 255, 108, 410, 254, 176, 238,
	246, 170, 163, 107, 244, 168, 162, 153, 132, 142,
	200, 160, 201, 143, 173, 172, 174, 0, 420, 0,
	230, 252, 268, 117, 436, 0, 237, 262, 263, 0,
	0, 118, 136, 131, 199, 411, 409, 404, 403, 152,
	159, 206, 266, 189, 212, 121, 251, 228, 432, 435,
	430, 431, 479, 480, 526, 527, 528, 504, 426, 0,
	433, 434, 0, 509, 516, 517, 483, 100, 109, 156,
	265, 204, 134, 253, 416, 429, 127, 439, 0, 0,
	452, 457, 458, 470, 472, 473, 474, 475, 482, 489,
	490, 492, 498, 499, 500, 501, 506, 513, 532, 102,
	103, 110, 116, 122, 126, 130, 133, 138, 141, 144,
	146, 147, 148, 151, 161, 164, 165, 166, 167, 177,
	178, 179, 181, 184, 185, 186, 187, 188, 191, 193,
	194, 195, 196, 197, 198, 205, 208, 214, 215, 216,
	217, 218, 219, 220, 222, 223, 224, 225, 231, 234,
	240, 241, 250, 257, 261, 183, 0, 0, 0, 0,
	334, 0, 0, 0, 129, 331, 0, 0, 0, 155,
	0, 0, 0, 376, 157, 0, 0, 229, 171, 0,
	0, 0, 0, 365, 366, 0, 0, 0, 0, 0,
	0, 989, 0, 61, 0, 0, 332, 353, 352, 355,
	356, 357, 358, 0, 0, 119, 354, 359, 360, 361,
	990, 0, 0, 329, 346, 0, 375, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 343, 344, 0, 0,
	0, 0, 389, 0, 345, 0, 0, 340, 341, 342,
	347, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	137, 0, 0, 367, 0, 0, 0, 258, 0, 0,
	387, 202, 0, 233, 140, 154, 115, 101, 111, 0,
	139, 180, 209, 213, 373, 0, 0, 0, 0, 123,
	0, 211, 190, 249, 0, 0, 192, 210, 158, 239,
	203, 248, 259, 260, 236, 256, 264, 226, 104, 235,
	247, 120, 221, 106, 245, 232, 169, 149, 150, 105,
	0, 207, 128, 135, 125, 182, 242, 243, 124, 267,
	112, 255, 108, 113, 254, 176, 238, 246, 170, 163,
	107, 244, 168, 162, 153, 132, 142, 200, 160, 201,
	143, 173, 172, 174, 0, 0, 0, 230, 252, 268,
	117, 0, 0, 237, 262, 263, 0, 0, 118, 136,
	131, 199, 175, 114, 145, 227, 152, 159, 206, 266,
	189, 212, 121, 251, 228, 377, 388, 383, 384, 381,
	382, 380, 379, 378, 390, 368, 369, 370, 371, 374,
	0, 385, 386, 372, 100, 109, 156, 265, 204, 134,
	253, 0, 0, 127, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 102, 103, 110, 116,
	122, 126, 130, 133, 138, 141, 144, 146, 147, 148,
	151, 161, 164, 165, 166, 167, 177, 178, 179, 181,
	184, 185, 186, 187, 188, 191, 193, 194, 195, 196,
	197, 198, 205, 208, 214, 215, 216, 217, 218, 219,
	220, 222, 223, 224, 225, 231, 234, 240, 241, 250,
	257, 261, 183, 0, 0, 0, 0, 334, 0, 0,
	0, 129, 331, 0, 0, 0, 155, 0, 0, 0,
	376, 157, 0, 0, 229, 171, 0, 0, 0, 0,
	365, 366, 0, 0, 0, 0, 0, 0, 0, 0,
	61, 0, 600, 332, 353, 352, 355, 356, 357, 358,
	0, 0, 119, 354, 359, 360, 361, 0, 0, 0,
	329, 346, 0, 375, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 343, 344, 0, 0, 0, 0, 389,
	0, 345, 0, 0, 340, 341, 342, 347, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 137, 0, 0,
	367, 0, 0, 0, 258, 0, 0, 387, 202, 0,
	233, 140, 154, 115, 101, 111, 0, 139, 180, 209,
	213, 373, 0, 0, 0, 0, 123, 0, 211, 190,
	249, 0, 0, 192, 210, 158, 239, 203, 248, 259,
	260, 236, 256, 264, 226, 104, 235, 247, 120, 221,
	106, 245, 232, 169, 149, 150, 105, 0, 207, 128,
	135, 125, 182, 242, 243, 124, 267, 112, 255, 108,
	113, 254, 176, 238, 246, 170, 163, 107, 244, 168,
	162, 153, 132, 142, 200, 160, 201, 143, 173, 172,
	174, 0, 0, 0, 230, 252, 268, 117, 0, 0,
	237, 262, 263, 0, 0, 118, 136, 131, 199, 175,
	114, 145, 227, 152, 159, 206, 266, 189, 212, 121,
	251, 228, 377, 388, 383, 384, 381, 382, 380, 379,
	378, 390, 368, 369, 370, 371, 374, 0, 385, 386,
	372, 100, 109, 156, 265, 204, 134, 253, 0, 0,
	127, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 102, 103, 110, 116, 122, 126, 130,
	133, 138, 141, 144, 146, 147, 148, 151, 161, 164,
	165, 166, 167, 177, 178, 179, 181, 184, 185, 186,
	187, 188, 191, 193, 194, 195, 196, 197, 198, 205,
	208, 214, 215, 216, 217, 218, 219, 220, 222, 223,
	224, 225, 231, 234, 240, 241, 250, 257, 261, 183,
	0, 0, 0, 0, 334, 0, 0, 0, 129, 331,
	0, 0, 0, 155, 0, 0, 0, 376, 157, 0,
	0, 229, 171, 0, 0, 0, 0, 365, 366, 0,
	0, 0, 0, 0, 0, 0, 0, 61, 0, 0,
	332, 353, 352, 355, 356, 357, 358, 0, 0, 119,
	354, 359, 360, 361, 0, 0, 0, 329, 346, 0,
	375, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	343, 344, 325, 0, 0, 0, 389, 0, 345, 0,
	0, 340, 341, 342, 347, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 137, 0, 0, 367, 0, 0,
	0, 258, 0, 0, 387, 202, 0, 233, 140, 154,
	115, 101, 111, 0, 139, 180, 209, 213, 373, 0,
	0, 0, 0, 123, 0, 211, 190, 249, 0, 0,
	192, 210, 158, 239, 203, 248, 259, 260, 236, 256,
	264, 226, 104, 235, 247, 120, 221, 106, 245, 232,
	169, 149, 150, 105, 0, 207, 128, 135, 125, 182,
	242, 243, 124, 267, 112, 255, 108, 113, 254, 176,
	238, 246, 170, 163, 107, 244, 168, 162, 153, 132,
	142, 200, 160, 201, 143, 173, 172, 174, 0, 0,
	0, 230, 252, 268, 117, 0, 0, 237, 262, 263,
	0, 0, 118, 136, 131, 199, 175, 114, 145, 227,
	152, 159, 206, 266, 189, 212, 121, 251, 228, 377,
	388, 383, 384, 381, 382, 380, 379, 378, 390, 368,
	369, 370, 371, 374, 0, 385, 386, 372, 100, 109,
	156, 265, 204, 134, 253, 0, 0, 127, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	102, 103, 110, 116, 122, 126, 130, 133, 138, 141,
	144, 146, 147, 148, 151, 161, 164, 165, 166, 167,
	177, 178, 179, 181, 184, 185, 186, 187, 188, 191,
	193, 194, 195, 196, 197, 198, 205, 208, 214, 215,
	216, 217, 218, 219, 220, 222, 223, 224, 225, 231,
	234, 240, 241, 250, 257, 261, 183, 0, 0, 0,
	0, 334, 0, 0, 0, 129, 331, 0, 0, 0,
	155, 0, 0, 0, 376, 157, 0, 0, 229, 171,
	0, 0, 0, 0, 365, 366, 0, 0, 0, 0,
	0, 0, 0, 0, 61, 0, 0, 332, 353, 925,
	355, 356, 357, 358, 0, 0, 119, 354, 359, 360,
	361, 0, 0, 0, 329, 346, 0, 375, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 343, 344, 325,
	0, 0, 0, 389, 0, 345, 0, 0, 340, 341,
	342, 347, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 137, 0, 0, 367, 0, 0, 0, 258, 0,
	0, 387, 202, 0, 233, 140, 154, 115, 101, 111,
	0, 139, 180, 209, 213, 373, 0, 0, 0, 0,
	123, 0, 211, 190, 249, 0, 0, 192, 210, 158,
	239, 203, 248, 259, 260, 236, 256, 264, 226, 104,
	235, 247, 120, 221, 106, 245, 232, 169, 149, 150,
	105, 0, 207, 128, 135, 125, 182, 242, 243, 124,
	267, 112, 255, 108, 113, 254, 176, 238, 246, 170,
	163, 107, 244, 168, 162, 153, 132, 142, 200, 160,
	201, 143, 173, 172, 174, 0, 0, 0, 230, 252,
	268, 117, 0, 0, 237, 262, 263, 0, 0, 118,
	136, 131, 199, 175, 114, 145, 227, 152, 159, 206,
	266, 189, 212, 121, 251, 228, 377, 388, 383, 384,
	381, 382, 380, 379, 378, 390, 368, 369, 370, 371,
	374, 0, 385, 386, 372, 100, 109, 156, 265, 204,
	134, 253, 0, 0, 127, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 102, 103, 110,
	116, 122, 126, 130, 133, 138, 141, 144, 146, 147,
	148, 151, 161, 164, 165, 166, 167, 177, 178, 179,
	181, 184, 185, 186, 187, 188, 191, 193, 194, 195,
	196, 197, 198, 205, 208, 214, 215, 216, 217, 218,
	219, 220, 222, 223, 224, 225, 231, 234, 240, 241,
	250, 257, 261, 183, 0, 0, 0, 0, 334, 0,
	0, 0, 129, 331, 0, 0, 0, 155, 0, 0,
	0, 376, 157, 0, 0, 229, 171, 0, 0, 0,
	0, 365, 366, 0, 0, 0, 0, 0, 0, 0,
	0, 61, 0, 0, 332, 353, 922, 355, 356, 357,
	358, 0, 0, 119, 354, 359, 360, 361, 0, 0,
	0, 329, 346, 0, 375, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 343, 344, 325, 0, 0, 0,
	389, 0, 345, 0, 0, 340, 341, 342, 347, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 137, 0,
	0, 367, 0, 0, 0, 258, 0, 0, 387, 202,
	0, 233, 140, 154, 115, 101, 111, 0, 139, 180,
	209, 213, 373, 0, 0, 0, 0, 123, 0, 211,
	190, 249, 0, 0, 192, 210, 158, 239, 203, 248,
	259, 260, 236, 256, 264, 226, 104, 235, 247, 120,
	221, 106, 245, 232, 169, 149, 150, 105, 0, 207,
	128, 135, 125, 182, 242, 243, 124, 267, 112, 255,
	108, 113, 254, 176, 238, 246, 170, 163, 107, 244,
	168, 162, 153, 132, 142, 200, 160, 201, 143, 173,
	172, 174, 0, 0, 0, 230, 252, 268, 117, 0,
	0, 237, 262, 263, 0, 0, 118, 136, 131, 199,
	175, 114, 145, 227, 152, 159, 206, 266, 189, 212,
	121, 251, 228, 377, 388, 383, 384, 381, 382, 380,
	379, 378, 390, 368, 369, 370, 371, 374, 0, 385,
	386, 372, 100, 109, 156, 265, 204, 134, 253, 0,
	0, 127, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 103, 110, 116, 122, 126,
	130, 133, 138, 141, 144, 146, 147, 148, 151, 161,
	164, 165, 166, 167, 177, 178, 179, 181, 184, 185,
	186, 187, 188, 191, 193, 194, 195, 196, 197, 198,
	205, 208, 214, 215, 216, 217, 218, 219, 220, 222,
	223, 224, 225, 231, 234, 240, 241, 250, 257, 261,
	26, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 183, 0, 0, 0, 0, 334, 0, 0,
	0, 129, 331, 0, 0, 0, 155, 0, 0, 0,
	376, 157, 0, 0, 229, 171, 0, 0, 0, 0,
	365, 366, 0, 0, 0, 0, 0, 0, 0, 0,
	61, 0, 0, 332, 353, 352, 355, 356, 357, 358,
	0, 0, 119, 354, 359, 360, 361, 0, 0, 0,
	329, 346, 0, 375, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 343, 344, 0, 0, 0, 0, 389,
	0, 345, 0, 0, 340, 341, 342, 347, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 137, 0, 0,
	367, 0, 0, 0, 258, 0, 0, 387, 202, 0,
	233, 140, 154, 115, 101, 111, 0, 139, 180, 209,
	213, 373, 0, 0, 0, 0, 123, 0, 211, 190,
	249, 0, 0, 192, 210, 158, 239, 203, 248, 259,
	260, 236, 256, 264, 226, 104, 235, 247, 120, 221,
	106, 245, 232, 169, 149, 150, 105, 0, 207, 128,
	135, 125, 182, 242, 243, 124, 267, 112, 255, 108,
	113, 254, 176, 238, 246, 170, 163, 107, 244, 168,
	162, 153, 132, 142, 200, 160, 201, 143, 173, 172,
	174, 0, 0, 0, 230, 252, 268, 117, 0, 0,
	237, 262, 263, 0, 0, 118, 136, 131, 199, 175,
	114, 145, 227, 152, 159, 206, 266, 189, 212, 121,
	251, 228, 377, 388, 383, 384, 381, 382, 380, 379,
	378, 390, 368, 369, 370, 371, 374, 0, 385, 386,
	372, 100, 109, 156, 265, 204, 134, 253, 0, 0,
	127, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 102, 103, 110, 116, 122, 126, 130,
	133, 138, 141, 144, 146, 147, 148, 151, 161, 164,
	165, 166, 167, 177, 178, 179, 181, 184, 185, 186,
	187, 188, 191, 193, 194, 195, 196, 197, 198, 205,
	208, 214, 215, 216, 217, 218, 219, 220, 222, 223,
	224, 225, 231, 234, 240, 241, 250, 257, 261, 183,
	0, 0, 0, 0, 334, 0, 0, 0, 129, 331,
	0, 0, 0, 155, 0, 0, 0, 376, 157, 0,
	0, 229, 171, 0, 0, 0, 0, 365, 366, 0,
	0, 0, 0, 0, 0, 0, 0, 61, 0, 0,
	332, 353, 352, 355, 356, 357, 358, 0, 0, 119,
	354, 359, 360, 361, 0, 0, 0, 329, 346, 0,
	375, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	343, 344, 0, 0, 0, 0, 389, 0, 345, 0,
	0, 340, 341, 342, 347, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 137, 0, 0, 367, 0, 0,
	0, 258, 0, 0, 387, 202, 0, 233, 140, 154,
	115, 101, 111, 0, 139, 180, 209, 213, 373, 0,
	0, 0, 0, 123, 0, 211, 190, 249, 0, 0,
	192, 210, 158, 239, 203, 248, 259, 260, 236, 256,
	264, 226, 104, 235, 247, 120, 221, 106, 245, 232,
	169, 149, 150, 105, 0, 207, 128, 135, 125, 182,
	242, 243, 124, 267, 112, 255, 108, 113, 254, 176,
	238, 246, 170, 163, 107, 244, 168, 162, 153, 132,
	142, 200, 160, 201, 143, 173, 172, 174, 0, 0,
	0, 230, 252, 268, 117, 0, 0, 237, 262, 263,
	0, 0, 118, 136, 131, 199, 175, 114, 145, 227,
	152, 159, 206, 266, 189, 212, 121, 251, 228, 377,
	388, 383, 384, 381, 382, 380, 379, 378, 390, 368,
	369, 370, 371, 374, 0, 385, 386, 372, 100, 109,
	156, 265, 204, 134, 253, 0, 0, 127, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	102, 103, 110, 116, 122, 126, 130, 133, 138, 141,
	144, 146, 147, 148, 151, 161, 164, 165, 166, 167,
	177, 178, 179, 181, 184, 185, 186, 187, 188, 191,
	193, 194, 195, 196, 197, 198, 205, 208, 214, 215,
	216, 217, 218, 219, 220, 222, 223, 224, 225, 231,
	234, 240, 241, 250, 257, 261, 183, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 0, 0, 0, 0,
	155, 0, 0, 0, 376, 157, 0, 0, 229, 171,
	0, 0, 0, 0, 365, 366, 0, 0, 0, 0,
	0, 0, 0, 0, 61, 0, 0, 332, 353, 352,
	355, 356, 357, 358, 0, 0, 119, 354, 359, 360,
	361, 0, 0, 0, 0, 346, 0, 375, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 343, 344, 0,
	0, 0, 0, 389, 0, 345, 0, 0, 340, 341,
	342, 347, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 137, 0, 0, 367, 0, 0, 0, 258, 0,
	0, 387, 202, 0, 233, 140, 154, 115, 101, 111,
	0, 139, 180, 209, 213, 373, 0, 0, 0, 0,
	123, 0, 211, 190, 249, 0, 1618, 192, 210, 158,
	239, 203, 248, 259, 260, 236, 256, 264, 226, 104,
	235, 247, 120, 221, 106, 245, 232, 169, 149, 150,
	105, 0, 207, 128, 135, 125, 182, 242, 243, 124,
	267, 112, 255, 108, 113, 254, 176, 238, 246, 170,
	163, 107, 244, 168, 162, 153, 132, 142, 200, 160,
	201, 143, 173, 172, 174, 0, 0, 0, 230, 252,
	268, 117, 0, 0, 237, 262, 263, 0, 0, 118,
	136, 131, 199, 175, 114, 145, 227, 152, 159, 206,
	266, 189, 212, 121, 251, 228, 377, 388, 383, 384,
	381, 382, 380, 379, 378, 390, 368, 369, 370, 371,
	374, 0, 385, 386, 372, 100, 109, 156, 265, 204,
	134, 253, 0, 0, 127, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 102, 103, 110,
	116, 122, 126, 130, 133, 138, 141, 144, 146, 147,
	148, 151, 161, 164, 165, 166, 167, 177, 178, 179,
	181, 184, 185, 186, 187, 188, 191, 193, 194, 195,
	196, 197, 198, 205, 208, 214, 215, 216, 217, 218,
	219, 220, 222, 223, 224, 225, 231, 234, 240, 241,
	250, 257, 261, 183, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 0, 0, 0, 0, 155, 0, 0,
	0, 376, 157, 0, 0, 229, 171, 0, 0, 0,
	0, 365, 366, 0, 0, 0, 0, 0, 0, 0,
	0, 61, 0, 600, 332, 353, 352, 355, 356, 357,
	358, 0, 0, 119, 354, 359, 360, 361, 0, 0,
	0, 0, 346, 0, 375, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 343, 344, 0, 0, 0, 0,
	389, 0, 345, 0, 0, 340, 341, 342, 347, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 137, 0,
	0, 367, 0, 0, 0, 258, 0, 0, 387, 202,
	0, 233, 140, 154, 115, 101, 111, 0, 139, 180,
	209, 213, 373, 0, 0, 0, 0, 123, 0, 211,
	190, 249, 0, 0, 192, 210, 158, 239, 203, 248,
	259, 260, 236, 256, 264, 226, 104, 235, 247, 120,
	221, 106, 245, 232, 169, 149, 150, 105, 0, 207,
	128, 135, 125, 182, 242, 243, 124, 267, 112, 255,
	108, 113, 254, 176, 238, 246, 170, 163, 107, 244,
	168, 162, 153, 132, 142, 200, 160, 201, 143, 173,
	172, 174, 0, 0, 0, 230, 252, 268, 117, 0,
	0, 237, 262, 263, 0, 0, 118, 136, 131, 199,
	175, 114, 145, 227, 152, 159, 206, 266, 189, 212,
	121, 251, 228, 377, 388, 383, 384, 381, 382, 380,
	379, 378, 390, 368, 369, 370, 371, 374, 0, 385,
	386, 372, 100, 109, 156, 265, 204, 134, 253, 0,
	0, 127, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 103, 110, 116, 122, 126,
	130, 133, 138, 141, 144, 146, 147, 148, 151, 161,
	164, 165, 166, 167, 177, 178, 179, 181, 184, 185,
	186, 187, 188, 191, 193, 194, 195, 196, 197, 198,
	205, 208, 214, 215, 216, 217, 218, 219, 220, 222,
	223, 224, 225, 231, 234, 240, 241, 250, 257, 261,
	183, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 0, 0, 0, 155, 0, 0, 0, 376, 157,
	0, 0, 229, 171, 0, 0, 0, 0, 365, 366,
	0, 0, 0, 0, 0, 0, 0, 0, 61, 0,
	0, 332, 353, 352, 355, 356, 357, 358, 0, 0,
	119, 354, 359, 360, 361, 0, 0, 0, 0, 346,
	0, 375, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 343, 344, 0, 0, 0, 0, 389, 0, 345,
	0, 0, 340, 341, 342, 347, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 137, 0, 0, 367, 0,
	0, 0, 258, 0, 0, 387, 202, 0, 233, 140,
	154, 115, 101, 111, 0, 139, 180, 209, 213, 373,
	0, 0, 0, 0, 123, 0, 211, 190, 249, 0,
	0, 192, 210, 158, 239, 203, 248, 259, 260, 236,
	256, 264, 226, 104, 235, 247, 120, 221, 106, 245,
	232, 169, 149, 150, 105, 0, 207, 128, 135, 125,
	182, 242, 243, 124, 267, 112, 255, 108, 113, 254,
	176, 238, 246, 170, 163, 107, 244, 168, 162, 153,
	132, 142, 200, 160, 201, 143, 173, 172, 174, 0,
	0, 0, 230, 252, 268, 117, 0, 0, 237, 262,
	263, 0, 0, 118, 136, 131, 199, 175, 114, 145,
	227, 152, 159, 206, 266, 189, 212, 121, 251, 228,
	377, 388, 383, 384, 381, 382, 380, 379, 378, 390,
	368, 369, 370, 371, 374, 0, 385, 386, 372, 100,
	109, 156, 265, 204, 134, 253, 0, 0, 127, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 102, 103, 110, 116, 122, 126, 130, 133, 138,
	141, 144, 146, 147, 148, 151, 161, 164, 165, 166,
	167, 177, 178, 179, 181, 184, 185, 186, 187, 188,
	191, 193, 194, 195, 196, 197, 198, 205, 208, 214,
	215, 216, 217, 218, 219, 220, 222, 223, 224, 225,
	231, 234, 240, 241, 250, 257, 261, 183, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 0, 0,
	0, 155, 0, 0, 0, 0, 157, 0, 0, 229,
	171, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 412, 0,
	0, 0, 0, 0, 0, 0, 0, 119, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 641, 640, 650, 651, 643, 644,
	645, 646, 647, 648, 649, 642, 0, 0, 652, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 137, 0, 0, 0, 0, 0, 0, 258,
	0, 0, 0, 202, 0, 233, 140, 154, 115, 101,
	111, 0, 139, 180, 209, 213, 0, 0, 0, 0,
	0, 123, 0, 211, 190, 249, 0, 0, 192, 210,
	158, 239, 203, 248, 259, 260, 236, 256, 264, 226,
	104, 235, 247, 120, 221, 106, 245, 232, 169, 149,
	150, 105, 0, 207, 128, 135, 125, 182, 242, 243,
	124, 267, 112, 255, 108, 113, 254, 176, 238, 246,
	170, 163, 107, 244, 168, 162, 153, 132, 142, 200,
	160, 201, 143, 173, 172, 174, 0, 0, 0, 230,
	252, 268, 117, 0, 0, 237, 262, 263, 0, 0,
	118, 136, 131, 199, 175, 114, 145, 227, 152, 159,
	206, 266, 189, 212, 121, 251, 228, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 100, 109, 156, 265,
	204, 134, 253, 0, 0, 127, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 102, 103,
	110, 116, 122, 126, 130, 133, 138, 141, 144, 146,
	147, 148, 151, 161, 164, 165, 166, 167, 177, 178,
	179, 181, 184, 185, 186, 187, 188, 191, 193, 194,
	195, 196, 197, 198, 205, 208, 214, 215, 216, 217,
	218, 219, 220, 222, 223, 224, 225, 231, 234, 240,
	241, 250, 257, 261, 183, 0, 0, 0, 968, 0,
	0, 0, 0, 129, 0, 0, 0, 0, 155, 0,
	0, 0, 0, 157, 0, 0, 229, 171, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 970, 972,
	0, 0, 0, 0, 0, 98, 0, 974, 0, 0,
	0, 0, 0, 0, 119, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 137,
	0, 0, 0, 0, 0, 0, 258, 0, 971, 0,
	202, 0, 233, 140, 154, 115, 101, 111, 0, 139,
	180, 209, 213, 0, 0, 0, 0, 0, 123, 0,
	211, 190, 249, 0, 0, 192, 210, 158, 239, 203,
	248, 259, 260, 236, 256, 264, 226, 104, 235, 247,
	120, 221, 106, 245, 232, 169, 149, 150, 105, 0,
	207, 128, 135, 125, 182, 242, 243, 124, 267, 112,
	255, 108, 113, 254, 176, 238, 246, 170, 163, 107,
	244, 168, 162, 153, 132, 142, 200, 160, 201, 143,
	173, 172, 174, 0, 0, 0, 230, 252, 268, 117,
	0, 0, 237, 262, 263, 0, 0, 118, 136, 131,
	199, 175, 114, 145, 227, 152, 159, 206, 266, 189,
	212, 121, 251, 228, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 109, 156, 265, 204, 134, 253,
	0, 0, 127, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 102, 103, 110, 116, 122,
	126, 130, 133, 138, 141, 144, 146, 147, 148, 151,
	161, 164, 165, 166, 167, 177, 178, 179, 181, 184,
	185, 186, 187, 188, 191, 193, 194, 195, 196, 197,
	198, 205, 208, 214, 215, 216, 217, 218, 219, 220,
	222, 223, 224, 225, 231, 234, 240, 241, 250, 257,
	261, 183, 0, 0, 0, 968, 0, 0, 0, 0,
	129, 0, 0, 0, 0, 155, 0, 0, 0, 0,
	157, 0, 0, 229, 171, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 970, 972, 0, 0, 0,
	0, 0, 98, 0, 974, 0, 0, 0, 0, 0,
	0, 119, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 137, 0, 0, 0,
	0, 0, 0, 258, 0, 971, 0, 202, 0, 233,
	140, 154, 115, 101, 111, 0, 139, 180, 209, 213,
	0, 0, 0, 0, 0, 123, 0, 211, 190, 249,
	0, 0, 966, 210, 158, 239, 203, 248, 259, 260,
	236, 256, 264, 226, 104, 235, 247, 120, 221, 106,
	245, 232, 169, 149, 150, 105, 0, 207, 128, 135,
	125, 182, 242, 243, 124, 267, 112, 255, 108, 113,
	254, 176, 238, 246, 170, 163, 107, 244, 168, 162,
	153, 132, 142, 200, 160, 201, 143, 173, 172, 174,
	0, 0, 0, 230, 252, 268, 117, 0, 0, 237,
	262, 263, 0, 0, 118, 136, 131, 199, 175, 114,
	145, 227, 152, 159, 206, 266, 189, 212, 121, 251,
	228, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	100, 109, 156, 265, 204, 134, 253, 0, 0, 127,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 103, 110, 116, 122, 126, 130, 133,
	138, 141, 144, 146, 147, 148, 151, 161, 164, 165,
	166, 167, 177, 178, 179, 181, 184, 185, 186, 187,
	188, 191, 193, 194, 195, 196, 197, 198, 205, 208,
	214, 215, 216, 217, 218, 219, 220, 222, 223, 224,
	225, 231, 234, 240, 241, 250, 257, 261, 183, 0,
	0, 0, 629, 0, 0, 0, 0, 129, 0, 0,
	0, 0, 155, 0, 0, 0, 0, 157, 0, 0,
	229, 171, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 412,
	0, 631, 0, 0, 0, 0, 0, 0, 119, 0,
	0, 0, 0, 0, 626, 625, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 627, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 137, 0, 0, 0, 0, 0, 0,
	258, 0, 0, 0, 202, 0, 233, 140, 154, 115,
	101, 111, 0, 139, 180, 209, 213, 0, 0, 0,
	0, 0, 123, 0, 211, 190, 249, 0, 0, 192,
	210, 158, 239, 203, 248, 259, 260, 236, 256, 264,
	226, 104, 235, 247, 120, 221, 106, 245, 232, 169,
	149, 150, 105, 0, 207, 128, 135, 125, 182, 242,
	243, 124, 267, 112, 255, 108, 113, 254, 176, 238,
	246, 170, 163, 107, 244, 168, 162, 153, 132, 142,
	200, 160, 201, 143, 173, 172, 174, 0, 0, 0,
	230, 252, 268, 117, 0, 0, 237, 262, 263, 0,
	0, 118, 136, 131, 199, 175, 114, 145, 227, 152,
	159, 206, 266, 189, 212, 121, 251, 228, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 100, 109, 156,
	265, 204, 134, 253, 0, 0, 127, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	103, 110, 116, 122, 126, 130, 133, 138, 141, 144,
	146, 147, 148, 151, 161, 164, 165, 166, 167, 177,
	178, 179, 181, 184, 185, 186, 187, 188, 191, 193,
	194, 195, 196, 197, 198, 205, 208, 214, 215, 216,
	217, 218, 219, 220, 222, 223, 224, 225, 231, 234,
	240, 241, 250, 257, 261, 26, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 183, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 0, 0,
	0, 155, 0, 0, 0, 0, 157, 0, 0, 229,
	171, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 61, 0, 0, 412, 0,
	0, 0, 0, 0, 0, 0, 0, 119, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 137, 0, 0, 0, 0, 0, 0, 258,
	0, 0, 0, 202, 0, 233, 140, 154, 115, 101,
	111, 0, 139, 180, 209, 213, 0, 0, 0, 0,
	0, 123, 0, 211, 190, 249, 0, 0, 192, 210,
	158, 239, 203, 248, 259, 260, 236, 256, 264, 226,
	104, 235, 247, 120, 221, 106, 245, 232, 169, 149,
	150, 105, 0, 207, 128, 135, 125, 182, 242, 243,
	124, 267, 112, 255, 108, 113, 254, 176, 238, 246,
	170, 163, 107, 244, 168, 162, 153, 132, 142, 200,
	160, 201, 143, 173, 172, 174, 0, 0, 0, 230,
	252, 268, 117, 0, 0, 237, 262, 263, 0, 0,
	118, 136, 131, 199, 175, 114, 145, 227, 152, 159,
	206, 266, 189, 212, 121, 251, 228, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 100, 109, 156, 265,
	204, 134, 253, 0, 0, 127, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 102, 103,
	110, 116, 122, 126, 130, 133, 138, 141, 144, 146,
	147, 148, 151, 161, 164, 165, 166, 167, 177, 178,
	179, 181, 184, 185, 186, 187, 188, 191, 193, 194,
	195, 196, 197, 198, 205, 208, 214, 215, 216, 217,
	218, 219, 220, 222, 223, 224, 225, 231, 234, 240,
	241, 250, 257, 261, 183, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 0, 0, 0, 0, 155, 0,
	0, 0, 0, 157, 0, 0, 229, 171, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 98, 0, 974, 0, 0,
	0, 0, 0, 0, 119, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 137,
	0, 0, 0, 0, 0, 0, 258, 0, 0, 0,
	202, 0, 233, 140, 154, 115, 101, 111, 0, 139,
	180, 209, 213, 0, 0, 0, 0, 0, 123, 0,
	211, 190, 249, 0, 0, 192, 210, 158, 239, 203,
	248, 259, 260, 236, 256, 264, 226, 104, 235, 247,
	120, 221, 106, 245, 232, 169, 149, 150, 105, 0,
	207, 128, 135, 125, 182, 242, 243, 124, 267, 112,
	255, 108, 113, 254, 176, 238, 246, 170, 163, 107,
	244, 168, 162, 153, 132, 142, 200, 160, 201, 143,
	173, 172, 174, 0, 0, 0, 230, 252, 268, 117,
	0, 0, 237, 262, 263, 0, 0, 118, 136, 131,
	199, 175, 114, 145, 227, 152, 159, 206, 266, 189,
	212, 121, 251, 228, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 109, 156, 265, 204, 134, 253,
	0, 0, 127, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1171, 0, 0,
	0, 0, 0, 0, 0, 102, 103, 110, 116, 122,
	126, 130, 133, 138, 141, 144, 146, 147, 148, 151,
	161, 164, 165, 166, 167, 177, 178, 179, 181, 184,
	185, 186, 187, 188, 191, 193, 194, 195, 196, 197,
	198, 205, 208, 214, 215, 216, 217, 218, 219, 220,
	222, 223, 224, 225, 231, 234, 240, 241, 250, 257,
	261, 26, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 183, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 0, 0, 0, 0, 155, 0, 0,
	0, 0, 157, 0, 0, 229, 171, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 61, 0, 0, 98, 0, 0, 0, 0, 0,
	0, 0, 0, 119, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 137, 0,
	0, 0, 0, 0, 0, 258, 0, 0, 0, 202,
	0, 233, 140, 154, 115, 101, 111, 0, 139, 180,
	209, 213, 0, 0, 0, 0, 0, 123, 0, 211,
	190, 249, 0, 0, 192, 210, 158, 239, 203, 248,
	259, 260, 236, 256, 264, 226, 104, 235, 247, 120,
	221, 106, 245, 232, 169, 149, 150, 105, 0, 207,
	128, 135, 125, 182, 242, 243, 124, 267, 112, 255,
	108, 113, 254, 176, 238, 246, 170, 163, 107, 244,
	168, 162, 153, 132, 142, 200, 160, 201, 143, 173,
	172, 174, 0, 0, 0, 230, 252, 268, 117, 0,
	0, 237, 262, 263, 0, 0, 118, 136, 131, 199,
	175, 114, 145, 227, 152, 159, 206, 266, 189, 212,
	121, 251, 228, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 100, 109, 156, 265, 204, 134, 253, 0,
	0, 127, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 103, 110, 116, 122, 126,
	130, 133, 138, 141, 144, 146, 147, 148, 151, 161,
	164, 165, 166, 167, 177, 178, 179, 181, 184, 185,
	186, 187, 188, 191, 193, 194, 195, 196, 197, 198,
	205, 208, 214, 215, 216, 217, 218, 219, 220, 222,
	223, 224, 225, 231, 234, 240, 241, 250, 257, 261,
	183, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 0, 0, 0, 155, 0, 0, 0, 0, 157,
	0, 0, 229, 171, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 412, 0, 0, 862, 0, 0, 863, 0, 0,
	119, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 137, 0, 0, 0, 0,
	0, 0, 258, 0, 0, 0, 202, 0, 233, 140,
	154, 115, 101, 111, 0, 139, 180, 209, 213, 0,
	0, 0, 0, 0, 123, 0, 211, 190, 249, 0,
	0, 192, 210, 158, 239, 203, 248, 259, 260, 236,
	256, 264, 226, 104, 235, 247, 120, 221, 106, 245,
	232, 169, 149, 150, 105, 0, 207, 128, 135, 125,
	182, 242, 243, 124, 267, 112, 255, 108, 113, 254,
	176, 238, 246, 170, 163, 107, 244, 168, 162, 153,
	132, 142, 200, 160, 201, 143, 173, 172, 174, 0,
	0, 0, 230, 252, 268, 117, 0, 0, 237, 262,
	263, 0, 0, 118, 136, 131, 199, 175, 114, 145,
	227, 152, 159, 206, 266, 189, 212, 121, 251, 228,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 100,
	109, 156, 265, 204, 134, 253, 0, 0, 127, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 102, 103, 110, 116, 122, 126, 130, 133, 138,
	141, 144, 146, 147, 148, 151, 161, 164, 165, 166,
	167, 177, 178, 179, 181, 184, 185, 186, 187, 188,
	191, 193, 194, 195, 196, 197, 198, 205, 208, 214,
	215, 216, 217, 218, 219, 220, 222, 223, 224, 225,
	231, 234, 240, 241, 250, 257, 261, 183, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 745, 0, 0,
	0, 155, 0, 0, 0, 0, 157, 0, 0, 229,
	171, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 412, 0,
	744, 0, 0, 0, 0, 0, 0, 119, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 137, 0, 0, 0, 0, 0, 0, 258,
	0, 0, 0, 202, 0, 233, 140, 154, 115, 101,
	111, 0, 139, 180, 209, 213, 0, 0, 0, 0,
	0, 123, 0, 211, 190, 249, 0, 0, 192, 210,
	158, 239, 203, 248, 259, 260, 236, 256, 264, 226,
	104, 235, 247, 120, 221, 106, 245, 232, 169, 149,
	150, 105, 0, 207, 128, 135, 125, 182, 242, 243,
	124, 267, 112, 255, 108, 113, 254, 176, 238, 246,
	170, 163, 107, 244, 168, 162, 153, 132, 142, 200,
	160, 201, 143, 173, 172, 174, 0, 0, 0, 230,
	252, 268, 117, 0, 0, 237, 262, 263, 0, 0,
	118, 136, 131, 199, 175, 114, 145, 227, 152, 159,
	206, 266, 189, 212, 121, 251, 228, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 100, 109, 156, 265,
	204, 134, 253, 0, 0, 127, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 102, 103,
	110, 116, 122, 126, 130, 133, 138, 141, 144, 146,
	147, 148, 151, 161, 164, 165, 166, 167, 177, 178,
	179, 181, 184, 185, 186, 187, 188, 191, 193, 194,
	195, 196, 197, 198, 205, 208, 214, 215, 216, 217,
	218, 219, 220, 222, 223, 224, 225, 231, 234, 240,
	241, 250, 257, 261, 183, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 0, 0, 0, 0, 155, 0,
	0, 0, 0, 157, 0, 0, 229, 171, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 98, 0, 974, 0, 0,
	0, 0, 0, 0, 119, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 137,
	0, 0, 0, 0, 0, 0, 258, 0, 0, 0,
	202, 0, 233, 140, 154, 115, 101, 111, 0, 139,
	180, 209, 213, 0, 0, 0, 0, 0, 123, 0,
	211, 190, 249, 0, 0, 192, 210, 158, 239, 203,
	248, 259, 260, 236, 256, 264, 226, 104, 235, 247,
	120, 221, 106, 245, 232, 169, 149, 150, 105, 0,
	207, 128, 135, 125, 182, 242, 243, 124, 267, 112,
	255, 108, 113, 254, 176, 238, 246, 170, 163, 107,
	244, 168, 162, 153, 132, 142, 200, 160, 201, 143,
	173, 172, 174, 0, 0, 0, 230, 252, 268, 117,
	0, 0, 237, 262, 263, 0, 0, 118, 136, 131,
	199, 175, 114, 145, 227, 152, 159, 206, 266, 189,
	212, 121, 251, 228, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 109, 156, 265, 204, 134, 253,
	0, 0, 127, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 102, 103, 110, 116, 122,
	126, 130, 133, 138, 141, 144, 146, 147, 148, 151,
	161, 164, 165, 166, 167, 177, 178, 179, 181, 184,
	185, 186, 187, 188, 191, 193, 194, 195, 196, 197,
	198, 205, 208, 214, 215, 216, 217, 218, 219, 220,
	222, 223, 224, 225, 231, 234, 240, 241, 250, 257,
	261, 183, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 0, 0, 0, 0, 155, 0, 0, 0, 0,
	157, 0, 0, 229, 171, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 61,
	0, 0, 98, 0, 0, 0, 0, 0, 0, 0,
	0, 119, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 137, 0, 0, 0,
	0, 0, 0, 258, 0, 0, 0, 202, 0, 233,
	140, 154, 115, 101, 111, 0, 139, 180, 209, 213,
	0, 0, 0, 0, 0, 123, 0, 211, 190, 249,
	0, 0, 192, 210, 158, 239, 203, 248, 259, 260,
	236, 256, 264, 226, 104, 235, 247, 120, 221, 106,
	245, 232, 169, 149, 150, 105, 0, 207, 128, 135,
	125, 182, 242, 243, 124, 267, 112, 255, 108, 113,
	254, 176, 238, 246, 170, 163, 107, 244, 168, 162,
	153, 132, 142, 200, 160, 201, 143, 173, 172, 174,
	0, 0, 0, 230, 252, 268, 117, 0, 0, 237,
	262, 263, 0, 0, 118, 136, 131, 199, 175, 114,
	145, 227, 152, 159, 206, 266, 189, 212, 121, 251,
	228, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	100, 109, 156, 265, 204, 134, 253, 0, 0, 127,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 103, 110, 116, 122, 126, 130, 133,
	138, 141, 144, 146, 147, 148, 151, 161, 164, 165,
	166, 167, 177, 178, 179, 181, 184, 185, 186, 187,
	188, 191, 193, 194, 195, 196, 197, 198, 205, 208,
	214, 215, 216, 217, 218, 219, 220, 222, 223, 224,
	225, 231, 234, 240, 241, 250, 257, 261, 183, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 0,
	0, 0, 155, 0, 0, 0, 0, 157, 0, 0,
	229, 171, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 412,
	0, 631, 0, 0, 0, 0, 0, 0, 119, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 137, 0, 0, 0, 0, 0, 0,
	258, 0, 0, 0, 202, 0, 233, 140, 154, 115,
	101, 111, 0, 139, 180, 209, 213, 0, 0, 0,
	0, 0, 123, 0, 211, 190, 249, 0, 0, 192,
	210, 158, 239, 203, 248, 259, 260, 236, 256, 264,
	226, 104, 235, 247, 120, 221, 106, 245, 232, 169,
	149, 150, 105, 0, 207, 128, 135, 125, 182, 242,
	243, 124, 267, 112, 255, 108, 113, 254, 176, 238,
	246, 170, 163, 107, 244, 168, 162, 153, 132, 142,
	200, 160, 201, 143, 173, 172, 174, 0, 0, 0,
	230, 252, 268, 117, 0, 0, 237, 262, 263, 0,
	0, 118, 136, 131, 199, 175, 114, 145, 227, 152,
	159, 206, 266, 189, 212, 121, 251, 228, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 100, 109, 156,
	265, 204, 134, 253, 0, 0, 127, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	103, 110, 116, 122, 126, 130, 133, 138, 141, 144,
	146, 147, 148, 151, 161, 164, 165, 166, 167, 177,
	178, 179, 181, 184, 185, 186, 187, 188, 191, 193,
	194, 195, 196, 197, 198, 205, 208, 214, 215, 216,
	217, 218, 219, 220, 222, 223, 224, 225, 231, 234,
	240, 241, 250, 257, 261, 183, 0, 0, 0, 0,
	0, 0, 0, 715, 129, 0, 0, 0, 0, 155,
	0, 0, 0, 0, 157, 0, 0, 229, 171, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 98, 0, 0, 0,
	0, 0, 0, 0, 0, 119, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	137, 0, 0, 0, 0, 0, 0, 258, 0, 0,
	0, 202, 0, 233, 140, 154, 115, 101, 111, 0,
	139, 180, 209, 213, 0, 0, 0, 0, 0, 123,
	0, 211, 190, 249, 0, 0, 192, 210, 158, 239,
	203, 248, 259, 260, 236, 256, 264, 226, 104, 235,
	247, 120, 221, 106, 245, 232, 169, 149, 150, 105,
	0, 207, 128, 135, 125, 182, 242, 243, 124, 267,
	112, 255, 108, 113, 254, 176, 238, 246, 170, 163,
	107, 244, 168, 162, 153, 132, 142, 200, 160, 201,
	143, 173, 172, 174, 0, 0, 0, 230, 252, 268,
	117, 0, 0, 237, 262, 263, 0, 0, 118, 136,
	131, 199, 175, 114, 145, 227, 152, 159, 206, 266,
	189, 212, 121, 251, 228, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 100, 109, 156, 265, 204, 134,
	253, 0, 0, 127, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 102, 103, 110, 116,
	122, 126, 130, 133, 138, 141, 144, 146, 147, 148,
	151, 161, 164, 165, 166, 167, 177, 178, 179, 181,
	184, 185, 186, 187, 188, 191, 193, 194, 195, 196,
	197, 198, 205, 208, 214, 215, 216, 217, 218, 219,
	220, 222, 223, 224, 225, 231, 234, 240, 241, 250,
	257, 261, 393, 0, 0, 0, 0, 0, 0, 183,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	0, 0, 0, 155, 0, 0, 0, 0, 157, 0,
	0, 229, 171, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	98, 0, 0, 0, 0, 0, 0, 0, 0, 119,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 137, 0, 0, 0, 0, 0,
	0, 258, 0, 0, 0, 202, 0, 233, 140, 154,
	115, 101, 111, 0, 139, 180, 209, 213, 0, 0,
	0, 0, 0, 123, 0, 211, 190, 249, 0, 0,
	192, 210, 158, 239, 203, 248, 259, 260, 236, 256,
	264, 226, 104, 235, 247, 120, 221, 106, 245, 232,
	169, 149, 150, 105, 0, 207, 128, 135, 125, 182,
	242, 243, 124, 267, 112, 255, 108, 113, 254, 176,
	238, 246, 170, 163, 107, 244, 168, 162, 153, 132,
	142, 200, 160, 201, 143, 173, 172, 174, 0, 0,
	0, 230, 252, 268, 117, 0, 0, 237, 262, 263,
	0, 0, 118, 136, 131, 199, 175, 114, 145, 227,
	152, 159, 206, 266, 189, 212, 121, 251, 228, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 100, 109,
	156, 265, 204, 134, 253, 0, 0, 127, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	102, 103, 110, 116, 122, 126, 130, 133, 138, 141,
	144, 146, 147, 148, 151, 161, 164, 165, 166, 167,
	177, 178, 179, 181, 184, 185, 186, 187, 188, 191,
	193, 194, 195, 196, 197, 198, 205, 208, 214, 215,
	216, 217, 218, 219, 220, 222, 223, 224, 225, 231,
	234, 240, 241, 250, 257, 261, 183, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 0, 0, 0, 0,
	155, 0, 0, 0, 0, 157, 0, 0, 229, 171,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 0, 0,
	0, 0, 0, 0, 0, 0, 119, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 137, 0, 0, 0, 95, 0, 0, 258, 0,
	0, 0, 202, 0, 233, 140, 154, 115, 101, 111,
	0, 139, 180, 209, 213, 0, 0, 0, 0, 0,
	123, 0, 211, 190, 249, 0, 0, 192, 210, 158,
	239, 203, 248, 259, 260, 236, 256, 264, 226, 104,
	235, 247, 120, 221, 106, 245, 232, 169, 149, 150,
	105, 0, 207, 128, 135, 125, 182, 242, 243, 124,
	267, 112, 255, 108, 113, 254, 176, 238, 246, 170,
	163, 107, 244, 168, 162, 153, 132, 142, 200, 160,
	201, 143, 173, 172, 174, 0, 0, 0, 230, 252,
	268, 117, 0, 0, 237, 262, 263, 0, 0, 118,
	136, 131, 199, 175, 114, 145, 227, 152, 159, 206,
	266, 189, 212, 121, 251, 228, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 100, 109, 156, 265, 204,
	134, 253, 0, 0, 127, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 102, 103, 110,
	116, 122, 126, 130, 133, 138, 141, 144, 146, 147,
	148, 151, 161, 164, 165, 166, 167, 177, 178, 179,
	181, 184, 185, 186, 187, 188, 191, 193, 194, 195,
	196, 197, 198, 205, 208, 214, 215, 216, 217, 218,
	219, 220, 222, 223, 224, 225, 231, 234, 240, 241,
	250, 257, 261, 183, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 0, 0, 0, 0, 155, 0, 0,
	0, 0, 157, 0, 0, 229, 171, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 412, 0, 0, 0, 0, 0,
	0, 0, 0, 119, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 137, 0,
	0, 0, 0, 0, 0, 258, 0, 0, 0, 202,
	0, 233, 140, 154, 115, 101, 111, 0, 139, 180,
	209, 213, 0, 0, 0, 0, 0, 123, 0, 211,
	190, 249, 0, 0, 192, 210, 158, 239, 203, 248,
	259, 260, 236, 256, 264, 226, 104, 235, 247, 120,
	221, 106, 245, 232, 169, 149, 150, 105, 0, 207,
	128, 135, 125, 182, 242, 243, 124, 267, 112, 255,
	108, 113, 254, 176, 238, 246, 170, 163, 107, 244,
	168, 162, 153, 132, 142, 200, 160, 201, 143, 173,
	172, 174, 0, 0, 0, 230, 252, 268, 117, 0,
	0, 237, 262, 263, 0, 0, 118, 136, 131, 199,
	175, 114, 145, 227, 152, 159, 206, 266, 189, 212,
	121, 251, 228, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 100, 109, 156, 265, 204, 134, 253, 0,
	0, 127, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 103, 110, 116, 122, 126,
	130, 133, 138, 141, 144, 146, 147, 148, 151, 161,
	164, 165, 166, 167, 177, 178, 179, 181, 184, 185,
	186, 187, 188, 191, 193, 194, 195, 196, 197, 198,
	205, 208, 214, 215, 216, 217, 218, 219, 220, 222,
	223, 224, 225, 231, 234, 240, 241, 250, 257, 261,
	183, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 0, 0, 0, 155, 0, 0, 0, 0, 157,
	0, 0, 229, 171, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 0, 0, 0, 0, 0, 0, 0, 0,
	119, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 137, 0, 0, 0, 0,
	0, 0, 258, 0, 0, 0, 202, 0, 233, 140,
	154, 115, 101, 111, 0, 139, 180, 209, 213, 0,
	0, 0, 0, 0, 123, 0, 211, 190, 249, 0,
	0, 192, 210, 158, 239, 203, 248, 259, 260, 236,
	256, 264, 226, 104, 235, 247, 120, 221, 106, 245,
	232, 169, 149, 150, 105, 0, 207, 128, 135, 125,
	182, 242, 243, 124, 267, 112, 255, 108, 113, 254,
	176, 238, 246, 170, 163, 107, 244, 168, 162, 153,
	132, 142, 200, 160, 201, 143, 173, 172, 174, 0,
	0, 0, 230, 252, 268, 117, 0, 0, 237, 262,
	263, 0, 0, 118, 136, 131, 199, 175, 114, 145,
	227, 152, 159, 206, 266, 189, 212, 121, 251, 228,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 100,
	109, 156, 265, 204, 134, 253, 0, 0, 127, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 102, 103, 110, 116, 122, 126, 130, 133, 138,
	141, 144, 146, 147, 148, 151, 161, 164, 165, 166,
	167, 177, 178, 179, 181, 184, 185, 186, 187, 188,
	191, 193, 194, 195, 196, 197, 198, 205, 208, 214,
	215, 216, 217, 218, 219, 220, 222, 223, 224, 225,
	231, 234, 240, 241, 250, 257, 261, 183, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 0, 0,
	0, 155, 0, 0, 0, 0, 157, 0, 0, 229,
	171, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 332, 0,
	0, 0, 0, 0, 0, 0, 0, 119, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 137, 0, 0, 0, 0, 0, 0, 258,
	0, 0, 0, 202, 0, 233, 140, 154, 115, 101,
	111, 0, 139, 180, 209, 213, 0, 0, 0, 0,
	0, 123, 0, 211, 190, 249, 0, 0, 192, 210,
	158, 239, 203, 248, 259, 260, 236, 256, 264, 226,
	104, 235, 247, 120, 221, 106, 245, 232, 169, 149,
	150, 105, 0, 207, 128, 135, 125, 182, 242, 243,
	124, 267, 112, 255, 108, 113, 254, 176, 238, 246,
	170, 163, 107, 244, 168, 162, 153, 132, 142, 200,
	160, 201, 143, 173, 172, 174, 0, 0, 0, 230,
	252, 268, 117, 0, 0, 237, 262, 263, 0, 0,
	118, 136, 131, 199, 175, 114, 145, 227, 152, 159,
	206, 266, 189, 212, 121, 251, 228, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 100, 109, 156, 265,
	204, 134, 253, 0, 0, 127, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 102, 103,
	110, 116, 122, 126, 130, 133, 138, 141, 144, 146,
	147, 148, 151, 161, 164, 165, 166, 167, 177, 178,
	179, 181, 184, 185, 186, 187, 188, 191, 193, 194,
	195, 196, 197, 198, 205, 208, 214, 215, 216, 217,
	218, 219, 220, 222, 223, 224, 225, 231, 234, 240,
	241, 250, 257, 261,
}
var yyPact = [...]int{

	2070, -1000, -260, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1097, 1148, -1000, -1000, -1000, -1000,
	-1000, -1000, 312, 102, -1000, -1000, -1000, 165, 59, 15638,
	160, 138, 16312, -1000, 21, -1000, -1000, 100, 16312, -1000,
	-1000, -57, -58, -1000, 820, -1000, -1000, 61, -1000, -1000,
	-1000, -1000, -1000, -1000, 1096, 1101, 871, 1088, 947, -1000,
	8181, 111, 111, 15301, 7170, -1000, -1000, 288, 16312, 153,
	16312, -124, 103, 103, 103, -1000, -1000, -1000, -1000, 16312,
	107, 15975, 107, 107, 107, 16312, -1000, 207, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 16312,
	728, 1040, 4370, 86, 4370, 4370, -1000, 337, -1000, 4370,
	28, 4370, -52, 460, 30, -15, -1000, 4370, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 128, 820, 297, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 578, 157, 16312, 348,
	-1000, 1049, 9541, 9541, 1097, -1000, 820, -1000, -1000, -1000,
	1019, -1000, -1000, 350, 1127, -1000, 11900, 205, -1000, 9541,
	1792, 658, -1000, -1000, 658, -1000, -1000, 180, -1000, -1000,
	10552, 10552, 10552, 10552, 10552, 10552, 10552, 10552, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 658, -1000, 9204, 658, 658, 658, 658, 658,
	658, 658, 658, 658, 658, 9541, 658, 658, 658, 658,
	658, 658, 658, 658, 658, 658, 658, 658, 658, 658,
	658, 14957, 14283, 16312, 781, 780, -1000, -1000, 202, 839,
	6820, -97, -1000, -1000, -1000, 295, 13609, -1000, -1000, -1000,
	1033, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 732, 16312, -1000, 248, -1000, 15975, 1079,
	129, 727, 323, 723, 16312, 841, 133, 16312, 1068, 903,
	16312, 711, 710, -1000, 6470, -1000, 4370, 4370, -1000, -1000,
	-1000, 103, 103, 4370, 4370, 16312, 4370, 4370, -1000, -1000,
	16312, -1000, -1000, -1000, 4370, 4370, -1000, 1125, 320, -1000,
	-1000, -1000, -1000, 9541, -1000, 10552, 258, -1000, 901, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 705, -1000, -1000, -1000,
	-1000, 16312, 4370, 44, 72, 81, 16312, -1000, 1141, 239,
	607, 197, 840, -1000, 488, 1096, 578, 947, 13272, 925,
	-1000, -1000, -1000, 16312, -1000, 9541, 9541, 539, -1000, 14620,
	-1000, -1000, 5070, 265, 10552, 357, 388, 10552, 10552, 10552,
	10552, 10552, 10552, 10552, 10552, 10552, 10552, 10552, 10552, 10552,
	10552, 10552, 500, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 703, -1000, 820, 657, 657, 215, 215, 215, 215,
	215, 215, 215, 10889, 1076, 578, 709, 268, 9204, 8181,
	8181, 578, 9541, 9541, 8855, 8518, 8181, 8181, 1076, 315,
	268, 16649, -1000, -1000, 10215, -1000, -1000, -1000, -1000, -1000,
	578, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 15975, 15975,
	8181, 8181, 8181, 8181, 64, 16312, -1000, 813, 1038, -1000,
	-1000, -1000, 1078, 12935, 11563, 64, 775, 14283, 16312, -1000,
	-1000, 14283, 16312, 4720, 6120, 839, -97, 821, -1000, -91,
	-77, 7507, 214, -1000, -1000, -1000, -1000, 3670, 484, 735,
	-1000, -44, -1000, -1000, -1000, 850, -1000, 850, 850, 850,
	850, -8, -8, -8, -8, -1000, -1000, -1000, -1000, -1000,
	869, 867, -1000, 850, 850, 850, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 866, 866, 866, 854, 854, 873,
	-1000, 16312, 4370, 1067, 4370, -1000, 16312, 16312, 829, -1000,
	16312, 827, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	672, 664, -1000, -1000, -1000, -1000, -1000, 328, -1000, -1000,
	16312, 329, 16312, 16312, 268, 424, -1000, 544, 16312, -1000,
	82, -1000, 16312, 16312, 16312, 16312, 16312, 175, -1000, 997,
	9541, 9541, 5770, 9541, -1000, -1000, -1000, 1049, -1000, 1076,
	1095, -1000, 1011, 1009, 8181, -1000, -1000, 265, 469, -1000,
	-1000, 551, -1000, -1000, -1000, -1000, 196, 658, -1000, 654,
	-1000, -1000, -1000, -1000, 357, 10552, 10552, 10552, 424, 654,
	1899, 751, 1203, 215, 392, 392, 216, 216, 216, 216,
	216, 882, 882, -1000, -1000, -1000, 578, -1000, -1000, -1000,
	8181, -1000, 9541, -1000, 578, 687, -1000, 687, -1000, 479,
	525, 353, 1123, 687, 304, 1113, 687, 687, 687, 8181,
	492, -1000, 9541, 578, -1000, 191, -1000, 543, 826, 825,
	687, 578, 824, 687, 687, 759, 658, -1000, 16649, 14283,
	14283, 14283, 14283, 14283, -1000, 935, 934, -1000, 922, 914,
	929, 16312, -1000, 685, 12935, -1000, 658, -1000, 12586, 238,
	151, 143, 141, -1000, -1000, 1111, 14283, 815, -1000, 815,
	-1000, 190, -1000, -1000, 821, -97, -101, -1000, -1000, -1000,
	-1000, 268, -1000, 534, 818, 3320, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 863, 656, -1000, 1026, 249, 259, 645,
	1025, -1000, -1000, -1000, 192, -51, -1000, -1000, 475, -8,
	-8, -1000, -1000, 214, 1032, 214, 214, 214, 535, 535,
	-1000, -1000, -1000, -1000, 470, -1000, -1000, -1000, 443, -1000,
	894, 15975, 820, 1073, -1000, -1000, -1000, 130, -1000, 4370,
	16312, 4370, 4370, 1111, 649, 647, 320, -1000, 517, 9541,
	-1000, -1000, -1000, 10552, -1000, -1000, -1000, 372, 210, 280,
	89, 89, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 63, 761, -1000, -1000, -1000, -1000, 17,
	40, 995, 268, 268, 189, -1000, -1000, 16312, -1000, -1000,
	-1000, -1000, 783, -1000, -1000, -1000, 4020, 8181, -1000, 424,
	654, 1559, -1000, 10552, -1000, 578, 268, -1000, 8181, -1000,
	-1000, 65, 500, 65, 10552, 10552, -1000, 10552, 10552, -1000,
	-153, -1000, 753, 299, -1000, 9541, 523, -1000, 5770, -1000,
	10552, 10552, -1000, -1000, -1000, -1000, 893, 16649, 658, -1000,
	12249, 15975, 816, -1000, 294, 1038, 862, 892, 729, -1000,
	-1000, -1000, -1000, 930, -1000, 915, -1000, -1000, -1000, -1000,
	15975, 10552, 238, -1000, 658, 658, 658, 1097, 9541, 815,
	-1000, -1000, 228, -1000, -1000, -117, -98, -1000, -1000, -1000,
	3670, -1000, 3670, 15975, 84, -1000, 645, 645, -1000, -1000,
	-1000, 859, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 342,
	10552, 1140, -1000, 1022, -1000, 1020, 512, -1000, -1000, 688,
	214, 214, -1000, 247, -1000, -1000, -1000, 683, -1000, 679,
	806, 655, 16312, -1000, -1000, -1000, 16312, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 329, -1000, 268, 654, -1000, 490,
	-1000, 15975, 249, -1000, -1000, -1000, -1000, -1000, -1000, 636,
	-1000, 15975, 621, 16312, 15975, -1000, -1000, 558, 612, 15975,
	-159, 572, 15975, 15975, 15975, -1000, 5420, -1000, 1111, 14283,
	-1000, -1000, 578, -1000, 10552, 654, -1000, -1000, 578, 850,
	850, -1000, 850, 854, -1000, 850, 11, 850, 9, 578,
	578, 1884, 1830, 1662, 1604, 658, -147, -1000, 268, 9541,
	-1000, 1120, 485, -1000, 1043, 764, 760, -1000, -1000, 7844,
	578, 643, 185, 635, -1000, 1097, 16649, 9541, -1000, -1000,
	9541, 853, -1000, 9541, -1000, -1000, -1000, 635, 836, -1000,
	15975, 15975, 15975, 1096, 268, -1000, -1000, -1000, -1000, 3320,
	-1000, 633, -1000, 850, -1000, -1000, -1000, 15975, -1000, 654,
	-133, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -8,
	508, -8, 437, -1000, 429, 847, -1000, 820, -1000, -1000,
	558, 83, -1000, 873, 15975, -1000, -1000, -1000, 223, -1000,
	122, 83, 558, 1061, -1000, 5420, -1000, -1000, 846, 888,
	-1000, 1109, 802, -1000, 654, -1000, -1000, 124, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 10552, 10552, 10552, 10552,
	10552, 578, 489, 268, 10552, 10552, 1015, -1000, 658, -1000,
	-1000, 835, 15975, 15975, -1000, 15975, 1096, -1000, 268, 268,
	15975, 268, 11226, -1000, 13946, 631, -1000, 631, 631, -1000,
	179, 15975, -1000, 628, -1000, 214, -1000, 214, 644, 611,
	15975, -1000, 605, -1000, -1000, 554, 845, 873, 549, -1000,
	-1000, 15975, -1000, 83, 658, 765, -1000, 289, 15975, 16312,
	1106, 1100, -1000, -1000, 543, 543, 543, 543, 58, -1000,
	-1000, 543, 543, 1137, -1000, 658, -1000, 820, 184, -1000,
	-1000, -1000, 620, -1000, 238, 15975, -1000, -1000, -1000, 179,
	-1000, 547, 276, 480, -1000, 73, -1000, -1000, -1000, -1000,
	610, -1000, -1000, -1000, -1000, 15975, 844, -1000, -1000, -1000,
	-1000, 60, 5420, 3670, 604, -1000, -1000, 9541, 9541, -1000,
	-1000, -1000, -1000, 578, 62, -164, -1000, -1000, 16649, 760,
	578, 15975, -1000, -1000, -1000, -1000, -1000, 356, -1000, -1000,
	16312, 179, -1000, 601, 15975, -1000, 599, -1000, 15975, -1000,
	-1000, 761, 268, 744, -1000, 986, -157, -169, 743, -1000,
	-1000, -1000, 837, -1000, 179, 179, 596, -1000, 60, 1005,
	-159, -1000, 952, -1000, 15975, -1000, 179, -1000, 54, -1000,
	-161, 577, -1000, 48, -167, 872, 658, -173, 864, -1000,
	1133, 9878, -1000, -1000, 1131, 245, 245, 543, 578, -1000,
	-1000, -1000, 93, 416, -1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1438, 15, 471, 1431, 1429, 1428, 106, 101, 100,
	1426, 1424, 1421, 1420, 1419, 1418, 1417, 1415, 1414, 1413,
	1412, 1411, 1408, 1405, 1403, 1402, 1401, 1400, 1399, 1397,
	1395, 1394, 98, 1390, 1387, 1386, 72, 1384, 87, 1383,
	1367, 1359, 55, 181, 61, 54, 1093, 1355, 1354, 53,
	85, 80, 1353, 51, 1351, 1345, 89, 1335, 1326, 1325,
	63, 1323, 1322, 1517, 1321, 76, 1320, 23, 59, 48,
	1318, 1317, 1315, 1314, 73, 730, 1313, 1310, 28, 1298,
	1295, 105, 1294, 71, 10, 18, 19, 26, 1292, 1092,
	11, 1291, 102, 1290, 1289, 1287, 1286, 31, 1285, 17,
	67, 21, 1284, 44, 66, 1282, 5, 78, 42, 33,
	7, 91, 69, 1276, 34, 84, 62, 1272, 1271, 556,
	1269, 1268, 58, 1267, 1266, 36, 1263, 409, 88, 65,
	1259, 1258, 1255, 1254, 27, 57, 1253, 32, 108, 37,
	0, 1064, 139, 77, 1251, 20, 1250, 1875, 46, 25,
	52, 1249, 1248, 50, 1247, 1245, 1244, 1241, 1240, 1239,
	1234, 1231, 38, 1230, 1227, 1214, 60, 39, 1212, 1211,
	68, 30, 1206, 1204, 1203, 64, 29, 1202, 1198, 35,
	1195, 1192, 1188, 45, 1187, 1186, 1184, 1183, 1182, 47,
	12, 1181, 22, 6, 8, 24, 4, 41, 1180, 13,
	1179, 14, 1178, 3, 1172, 9, 56, 2, 1170, 1,
	1163, 1162, 632, 203, 93, 1157, 1154, 94,
}
var yyR1 = [...]int{

	0, 210, 211, 211, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 6,
	3, 4, 4, 5, 5, 7, 7, 35, 35, 8,
	9, 9, 9, 9, 214, 214, 58, 58, 56, 56,
	57, 57, 107, 107, 10, 10, 10, 10, 112, 112,
	116, 116, 116, 117, 117, 117, 117, 151, 151, 101,
	11, 11, 11, 11, 11, 11, 11, 205, 205, 204,
	203, 203, 202, 202, 201, 20, 185, 187, 187, 186,
	186, 186, 186, 176, 155, 155, 155, 155, 155, 155,
	155, 154, 154, 154, 154, 158, 158, 156, 156, 156,
	156, 156, 156, 156, 156, 156, 157, 157, 157, 157,
	157, 159, 159, 159, 159, 159, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 161, 161, 161, 161, 161, 161, 161, 161, 175,
	175, 162, 162, 170, 170, 171, 171, 171, 168, 168,
	169, 169, 172, 172, 164, 165, 173, 166, 166, 166,
	167, 167, 167, 174, 174, 174, 174, 163, 177, 177,
	196, 196, 195, 195, 194, 194, 194, 184, 184, 191,
	191, 191, 191, 191, 180, 180, 180, 179, 179, 183,
	183, 193, 193, 192, 178, 178, 197, 197, 197, 197,
	181, 181, 182, 182, 182, 208, 209, 207, 207, 207,
	207, 207, 188, 188, 188, 189, 189, 189, 190, 190,
	190, 16, 16, 16, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 99,
	99, 99, 18, 19, 19, 19, 19, 19, 19, 19,
	19, 135, 135, 206, 206, 206, 206, 206, 200, 198,
	198, 199, 199, 12, 21, 21, 13, 13, 13, 13,
	13, 14, 14, 22, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 47, 123, 123, 121, 121, 124,
	124, 122, 122, 122, 125, 125, 125, 126, 126, 152,
	152, 152, 24, 24, 29, 29, 30, 31, 136, 136,
	27, 27, 28, 28, 28, 28, 41, 41, 215, 215,
	26, 26, 25, 25, 25, 25, 15, 216, 32, 33,
	33, 34, 34, 34, 38, 38, 38, 36, 36, 36,
	37, 37, 44, 44, 43, 43, 45, 45, 45, 45,
	144, 144, 144, 143, 143, 48, 48, 49, 49, 50,
	50, 51, 51, 51, 51, 66, 66, 67, 67, 67,
	67, 67, 106, 106, 108, 108, 52, 52, 52, 52,
	53, 53, 54, 54, 55, 55, 134, 134, 149, 149,
	59, 59, 59, 61, 60, 60, 60, 60, 62, 62,
	64, 64, 63, 63, 65, 68, 68, 68, 68, 69,
	69, 46, 46, 46, 46, 46, 46, 46, 120, 120,
	71, 71, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 82, 82, 82, 82, 82, 82, 72, 72,
	72, 72, 72, 72, 72, 42, 42, 83, 83, 83,
	89, 84, 84, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 79, 79, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 217, 217,
	81, 80, 80, 80, 80, 80, 80, 39, 39, 39,
	39, 39, 150, 150, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 93, 93, 40,
	40, 91, 91, 92, 94, 94, 90, 90, 90, 74,
	74, 74, 74, 74, 74, 74, 74, 76, 76, 76,
	95, 95, 96, 96, 97, 97, 98, 98, 100, 102,
	102, 102, 103, 103, 103, 103, 104, 104, 104, 73,
	73, 73, 73, 73, 73, 105, 105, 105, 105, 109,
	109, 85, 85, 87, 87, 86, 88, 110, 110, 114,
	111, 111, 115, 115, 115, 115, 113, 113, 113, 146,
	146, 146, 118, 118, 127, 127, 128, 128, 119, 119,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	133, 133, 132, 132, 132, 129, 129, 129, 130, 130,
	145, 145, 141, 141, 142, 142, 147, 147, 148, 148,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 212, 213,
	137, 138, 138, 138,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 4, 6, 7, 5,
	10, 1, 3, 1, 3, 7, 8, 1, 1, 9,
	8, 7, 6, 6, 1, 1, 1, 3, 1, 3,
	1, 3, 0, 4, 3, 4, 5, 4, 1, 3,
	3, 2, 2, 2, 2, 2, 1, 1, 1, 0,
	2, 2, 11, 7, 9, 5, 5, 0, 2, 1,
	0, 2, 1, 3, 3, 4, 4, 2, 4, 1,
	3, 3, 3, 3, 0, 2, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 1, 4, 4, 2, 2,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 6,
	6, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 1,
	0, 1, 1, 2, 2, 3, 1, 0, 3, 3,
	0, 2, 2, 2, 1, 2, 1, 2, 5, 4,
	0, 1, 1, 2, 2, 3, 2, 0, 1, 2,
	3, 3, 2, 2, 1, 1, 1, 1, 1, 0,
	1, 1, 3, 2, 3, 1, 10, 11, 11, 12,
	1, 1, 0, 2, 2, 3, 3, 1, 1, 2,
	2, 2, 0, 1, 3, 1, 2, 3, 1, 1,
	1, 1, 1, 1, 6, 10, 9, 7, 7, 7,
	9, 7, 12, 13, 7, 9, 9, 10, 5, 0,
	1, 2, 4, 7, 5, 5, 5, 12, 7, 5,
	9, 0, 1, 1, 1, 1, 1, 1, 7, 1,
	3, 8, 8, 3, 3, 5, 4, 6, 4, 4,
	4, 3, 2, 3, 4, 4, 3, 6, 6, 4,
	4, 4, 4, 4, 3, 3, 2, 6, 2, 3,
	4, 3, 7, 5, 4, 2, 4, 3, 4, 3,
	3, 5, 2, 3, 3, 1, 1, 0, 1, 1,
	1, 0, 2, 2, 0, 2, 2, 0, 2, 0,
	1, 1, 2, 1, 1, 2, 1, 1, 1, 1,
	3, 3, 1, 1, 1, 1, 0, 3, 1, 1,
	2, 2, 2, 2, 3, 3, 2, 0, 2, 0,
	2, 1, 2, 2, 0, 1, 1, 0, 1, 1,
	0, 1, 0, 1, 1, 3, 1, 2, 3, 5,
	0, 1, 2, 1, 1, 0, 2, 1, 3, 1,
	1, 1, 3, 1, 3, 2, 6, 1, 4, 6,
	3, 2, 1, 3, 1, 3, 4, 4, 4, 3,
	2, 4, 0, 1, 0, 2, 0, 1, 1, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 3, 0, 5, 5, 5, 0,
	2, 1, 3, 3, 2, 3, 1, 2, 0, 3,
	1, 1, 3, 3, 4, 4, 5, 3, 4, 5,
	6, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 2, 2, 2, 2, 2,
	3, 1, 1, 1, 1, 5, 6, 4, 4, 3,
	6, 6, 6, 8, 8, 8, 8, 9, 4, 7,
	5, 4, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 8, 8, 0, 2,
	3, 4, 4, 4, 4, 4, 4, 0, 3, 4,
	7, 3, 1, 1, 2, 3, 3, 1, 2, 2,
	1, 2, 1, 2, 2, 1, 2, 0, 1, 0,
	2, 1, 2, 4, 0, 2, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	0, 3, 0, 2, 0, 3, 1, 3, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 4, 2,
	1, 3, 5, 4, 6, 1, 3, 3, 5, 0,
	5, 1, 3, 1, 2, 3, 1, 1, 3, 3,
	1, 3, 3, 3, 3, 3, 1, 2, 1, 1,
	1, 1, 1, 1, 0, 2, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 1, 0, 1,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -210, -1, -2, -6, -7, -8, -9, -10, -11,
	-16, -12, -13, -14, -22, -23, -24, -29, -30, -31,
	-27, -26, -25, -15, -3, -4, 6, 7, -35, 9,
	10, 29, -20, 117, -17, -18, -19, 120, 119, 156,
	121, 149, 52, 171, 172, 174, 175, -215, -136, 154,
	155, 30, 31, 123, -212, 8, 257, 118, 151, 150,
	25, 56, -211, 355, -97, 15, -34, 5, -32, -216,
	-32, -32, -32, -32, -32, -185, -187, 56, 92, -130,
	130, 74, 249, 126, 127, -129, 33, 137, 136, 127,
	127, 128, 130, 249, 126, 127, -63, -147, 59, -140,
	267, 140, 299, 300, 171, 182, 176, 203, 195, 268,
	301, 141, 193, 196, 236, 139, 302, 223, 231, 68,
	174, 245, 303, 152, 191, 187, 304, 276, 185, 27,
	305, 233, 208, 306, 272, 186, 232, 123, 307, 143,
	137, 308, 209, 213, 309, 237, 310, 311, 312, 180,
	181, 313, 239, 207, 138, 32, 269, 37, 161, 240,
	211, 314, 206, 202, 315, 316, 317, 318, 205, 179,
	201, 41, 215, 214, 216, 235, 198, 319, 320, 321,
	144, 322, 188, 18, 323, 324, 325, 326, 327, 243,
	155, 328, 159, 329, 330, 331, 332, 333, 334, 234,
	210, 212, 134, 163, 271, 335, 241, 184, 336, 145,
	160, 154, 244, 146, 337, 338, 339, 340, 341, 342,
	343, 175, 344, 345, 346, 347, 170, 238, 247, 40,
	220, 348, 178, 136, 349, 172, 167, 226, 199, 162,
	350, 351, 189, 190, 204, 177, 200, 173, 164, 156,
	352, 246, 221, 273, 197, 194, 168, 353, 130, 165,
	166, 354, 227, 228, 169, 270, 242, 192, 222, 127,
	110, 196, 236, 117, 224, 225, 233, -180, 234, 163,
	-152, 127, -121, 223, 227, 228, 169, 59, 128, 129,
	32, 238, 237, 229, -147, 173, -41, 121, 157, -63,
	-137, -137, -137, 226, 226, -137, -2, -119, 130, 228,
	132, -103, 17, 16, -5, -3, -212, 6, 20, 21,
	-38, 42, 43, -33, -45, 101, -46, -147, -70, 76,
	-75, 28, 59, -140, 23, -74, -71, -90, -88, -89,
	110, 111, 112, 99, 100, 107, 77, 113, -79, -77,
	-78, -80, 61, 60, 69, 62, 63, 64, 65, 70,
	71, 72, -141, -86, -212, 46, 47, 126, 258, 259,
	260, 261, 266, 147, 262, 79, 36, 248, 256, 255,
	254, 252, 253, 250, 251, 264, 265, 133, 249, 105,
	257, -119, -119, 11, -56, -57, -63, -65, -147, -111,
	-151, 173, -115, 238, 237, -142, -113, -141, -139, 236,
	196, 235, 59, -140, 122, 148, 274, 75, 22, 24,
	218, 78, 110, 16, 79, 109, 258, 117, 50, 275,
	250, 251, 248, 260, 261, 249, 224, 28, 10, 277,
	25, 150, 21, 103, 119, 82, 83, 153, 23, 151,
	72, 147, 280, 19, 53, 11, 13, 281, 282, 14,
	133, 132, 94, 128, 48, 8, 113, 26, 91, 44,
	283, 34, 284, 285, 286, 287, 46, 92, 17, 252,
	253, 30, 288, 266, 158, 105, 51, 38, 76, 289,
	290, 70, 291, 73, 54, 74, 15, 49, 292, 293,
	294, 295, 93, 120, 257, 47, 296, 126, 6, 263,
	29, 149, 45, 297, 127, 81, 264, 265, 131, 71,
	5, 33, 31, 9, 52, 55, 254, 255, 256, 36,
	80, 12, 298, -186, 92, -176, 59, -63, 128, -63,
	257, -128, 133, -128, -128, -21, -63, -127, 133, -141,
	-127, -127, -127, -63, 114, -63, 59, 29, -138, -212,
	-142, 249, 126, 59, 163, 127, 164, 130, -138, -138,
	-181, 11, 94, -138, 167, 168, -138, -124, -123, 231,
	232, 226, 230, 12, -47, 92, 168, 226, 166, -138,
	-28, -2, -9, -7, -8, -2, 84, -137, -137, -213,
	58, 127, -63, 117, 119, 122, 54, -104, 19, 30,
	-46, -147, -98, -100, -46, -97, -2, -32, 38, -36,
	20, 21, 67, 11, -144, 75, 74, 91, -143, 22,
	-141, 61, 114, -46, -72, 94, 76, 92, 93, 78,
	96, 95, 106, 99, 100, 101, 102, 103, 104, 105,
	97, 98, 109, 84, 85, 86, 87, 88, 89, 90,
	-120, -212, -89, -212, 115, 116, -75, -75, -75, -75,
	-75, -75, -75, -75, -212, -2, -84, -46, -212, -212,
	-212, -212, -212, -212, -212, -212, -212, -212, -212, -93,
	-46, -212, -217, -81, -212, -217, -81, -217, -81, -217,
	-212, -217, -81, -217, -81, -217, -217, -81, -212, -212,
	-212, -212, -212, -212, -64, 26, -63, -49, -50, -51,
	-52, -66, -89, -212, -63, -63, -56, -214, 57, 11,
	55, -214, 57, 114, 57, -111, 173, -112, -116, 239,
	241, 84, -146, -141, 61, 28, 29, 58, 57, -63,
	-154, -158, -160, -159, -161, -156, -157, 193, 194, 110,
	197, 199, 200, 201, 202, 203, 204, 205, 206, 207,
	208, 29, 152, 189, 190, 191, 192, 209, 210, 211,
	212, 213, 214, 215, 216, 176, 195, 268, 177, 178,
	179, 180, 181, 182, 184, 185, 186, 187, 188, -141,
	22, 130, 59, 76, 59, -63, 57, 131, -56, 23,
	54, -58, -63, 59, 59, -148, -147, -139, -138, -138,
	-128, -128, -138, -138, -63, -138, -138, -63, -138, -138,
	11, -122, 11, 94, -46, -75, -126, 92, 54, 59,
	-63, -138, 165, 165, 127, 127, 170, -63, 9, 94,
	57, 18, 114, 57, -102, 24, 25, -103, -213, -38,
	-76, -141, 62, 65, -37, 45, -63, -46, -46, -82,
	70, 76, 71, 72, -143, 101, -148, -142, -139, -75,
	-83, -86, -89, 66, 94, 92, 93, 78, -75, -75,
	-75, -75, -75, -75, -75, -75, -75, -75, -75, -75,
	-75, -75, -75, -150, 59, 61, 59, -74, -74, -141,
	-36, -213, 57, -213, -2, -43, -45, -43, -213, -46,
	-46, -90, 61, -43, -90, 61, -43, -43, -43, -36,
	-91, -92, 80, -90, -141, -147, -213, -75, -141, -141,
	-43, -44, -43, -43, -43, -107, 159, -63, 29, 57,
	-59, -61, -60, -62, 44, 48, 50, 45, 46, 47,
	51, -134, 22, -49, -212, -67, 159, -68, 22, -149,
	52, 132, 53, -147, 61, -107, 55, -49, -63, -49,
	-65, -147, 101, -115, -112, 57, 240, 242, 243, 54,
	73, -46, -167, 109, -188, -189, -190, -142, 61, 62,
	-176, -177, -178, -191, 142, -197, 134, 136, 33, -179,
	143, 128, 34, 58, -155, -168, 221, -162, 56, -162,
	-162, -162, -162, -166, 196, -166, -166, -166, 56, 56,
	-162, -162, -162, -170, 56, -170, -170, -171, 56, -171,
	-145, 55, -101, -63, -138, 23, -138, -63, -63, -63,
	57, 59, 59, -182, 11, 94, -63, -125, 92, 12,
	-147, -147, -42, 153, 61, -63, -131, 122, 119, 120,
	124, 125, -200, 118, 218, 196, 68, 28, 15, 258,
	159, 273, 59, 160, -63, -63, -63, -63, -63, 122,
	119, 40, -46, -46, -148, -100, -104, -118, 19, 11,
	36, 36, -43, 70, 71, 72, 114, -212, -83, -75,
	-75, -75, -42, 75, -213, -44, -46, -213, 57, -213,
	-213, 57, 55, 22, 11, 11, -213, 11, 11, -213,
	-213, -213, -43, -94, -92, 82, -46, -213, 114, -213,
	57, 57, -213, -213, -213, -213, -73, 29, 36, -2,
	-212, -212, -110, -114, -90, -50, -51, -51, -50, -51,
	44, 44, 44, 49, 44, 49, 44, -60, -147, -213,
	-212, 291, -149, -68, 128, 128, 128, -69, 12, -49,
	-69, -69, 114, -116, -117, 244, 241, 247, 59, 61,
	57, -190, 84, 56, 59, 34, -179, -179, -183, 59,
	-183, 34, -172, -164, -165, -173, -174, -163, 70, 76,
	28, 54, 218, 134, 34, 33, 68, -169, 222, 62,
	-166, -166, -167, 29, -167, -167, -167, -175, 61, -175,
	62, 62, 54, -141, -2, 22, 131, -138, -63, -138,
	-138, -69, 59, 59, -122, 61, -46, -75, -137, -135,
	-206, -179, -129, 135, 139, 142, 143, 134, 159, -135,
	-206, -179, 135, -132, -179, 131, 22, -135, -135, 159,
	-205, 55, 165, 218, 165, 41, 114, -63, -48, 11,
	101, -142, -44, -42, 75, -75, -213, -45, -153, 110,
	193, 152, 191, 187, 207, 198, 220, 189, 221, -150,
	-153, -75, -75, -75, -75, 267, -97, 83, -46, 81,
	-142, -75, -75, -109, 54, -110, -85, -87, -86, -212,
	-2, -105, -141, -108, -141, -69, 57, 84, -54, -53,
	54, 55, -55, 54, -53, 44, 44, -108, -75, -68,
	-212, -212, -212, -97, -46, -69, 241, 245, 246, -189,
	-190, -193, -192, -141, -197, -183, -183, 56, 70, -75,
	9, 34, 34, 61, 58, -167, -167, 59, 110, 58,
	57, 58, 57, 58, 57, -63, -101, -101, -63, -125,
	56, -176, -137, -141, -179, 59, -137, -141, 59, -63,
	-141, -176, 59, -141, -203, 270, -204, 59, -141, -141,
	-141, -69, -49, -213, -75, -213, -162, -162, -162, -171,
	-162, 181, -162, 181, -213, -213, 19, 19, 19, 19,
	-212, -40, 263, -46, 57, 57, 27, -109, 57, -213,
	-213, -213, 57, 114, -213, 57, -97, -114, -46, -46,
	56, -46, -213, -68, -134, -106, -141, -106, -106, -103,
	58, 57, -162, -106, -78, -166, 61, -166, 62, 62,
	56, -2, -176, -99, 147, 148, -145, -141, -133, 131,
	22, 131, -99, -176, 26, -202, -201, -142, 56, 55,
	-95, 13, -166, 59, -75, -75, -75, -75, -75, -213,
	61, -75, -75, 34, -87, 36, -2, -212, -141, -141,
	-141, -103, -106, -67, -149, 57, -213, -213, -213, -195,
	-194, 55, 138, 68, -192, 58, -167, -167, 58, 58,
	-193, -101, 58, -137, 59, 56, -145, 59, -141, -137,
	-99, -212, 57, 84, -106, -63, -96, 14, 16, -213,
	-213, -213, -213, -39, 94, 270, -213, -213, 9, -85,
	-2, 114, 58, -68, -141, -194, 59, -184, 84, 61,
	145, 58, -137, -193, 56, -137, -198, -199, 159, -201,
	-190, 58, -46, -84, -213, 268, 51, 271, -110, -213,
	-141, 62, -63, -196, -195, 58, -193, -213, 57, -141,
	-205, 41, 269, 272, 56, -196, 58, -199, 36, -203,
	41, -106, -196, 161, 270, 58, 162, 271, -208, -209,
	54, -212, 272, -209, 54, 10, 9, -75, 158, -207,
	146, 141, 144, 29, -207, -213, -213, 140, 28, 70,
}
var yyDef = [...]int{

	25, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 604, 0, 357, 357, 357, 357,
	357, 357, 0, 678, 231, 232, 233, 0, 0, 0,
	0, -2, 333, 334, 0, 336, 337, 346, -2, 980,
	980, 0, 0, 980, 0, 37, 38, 658, 349, 338,
	339, 978, 1, 3, 612, 0, 0, 361, 364, 359,
	0, 658, 658, 0, 0, 70, 71, 0, 0, 0,
	0, 0, 656, 656, 656, 679, 675, 676, 677, 0,
	654, 0, 654, 654, 654, 0, 282, 432, 686, 687,
	809, 810, 811, 812, 813, 814, 815, 816, 817, 818,
	819, 820, 821, 822, 823, 824, 825, 826, 827, 828,
	829, 830, 831, 832, 833, 834, 835, 836, 837, 838,
	839, 840, 841, 842, 843, 844, 845, 846, 847, 848,
	849, 850, 851, 852, 853, 854, 855, 856, 857, 858,
	859, 860, 861, 862, 863, 864, 865, 866, 867, 868,
	869, 870, 871, 872, 873, 874, 875, 876, 877, 878,
	879, 880, 881, 882, 883, 884, 885, 886, 887, 888,
	889, 890, 891, 892, 893, 894, 895, 896, 897, 898,
	899, 900, 901, 902, 903, 904, 905, 906, 907, 908,
	909, 910, 911, 912, 913, 914, 915, 916, 917, 918,
	919, 920, 921, 922, 923, 924, 925, 926, 927, 928,
	929, 930, 931, 932, 933, 934, 935, 936, 937, 938,
	939, 940, 941, 942, 943, 944, 945, 946, 947, 948,
	949, 950, 951, 952, 953, 954, 955, 956, 957, 958,
	959, 960, 961, 962, 963, 964, 965, 966, 967, 968,
	969, 970, 971, 972, 973, 974, 975, 976, 977, 0,
	0, 0, 981, 0, 981, 981, 296, 0, 298, 981,
	0, 981, 0, 305, 0, 0, 312, 981, 194, 195,
	196, 330, 331, 318, 332, 335, 0, 0, 0, 350,
	351, 352, 353, 980, 980, 356, 31, 0, 0, 0,
	659, 616, 0, 0, 604, 33, 0, 357, 362, 363,
	367, 365, 366, 358, 0, 376, 380, 0, 441, 0,
	446, 448, -2, -2, 0, 483, 484, 485, 486, 487,
	0, 0, 0, 0, 0, 0, 0, 0, 511, 512,
	513, 514, 589, 590, 591, 592, 593, 594, 595, 596,
	450, 451, 586, 636, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 577, 0, 548, 548, 548,
	548, 548, 548, 548, 548, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 48, 50, 432, 54,
	0, 956, 640, -2, -2, 0, 0, 684, 685, -2,
	822, -2, 682, 683, 690, 691, 692, 693, 694, 695,
	696, 697, 698, 699, 700, 701, 702, 703, 704, 705,
	706, 707, 708, 709, 710, 711, 712, 713, 714, 715,
	716, 717, 718, 719, 720, 721, 722, 723, 724, 725,
	726, 727, 728, 729, 730, 731, 732, 733, 734, 735,
	736, 737, 738, 739, 740, 741, 742, 743, 744, 745,
	746, 747, 748, 749, 750, 751, 752, 753, 754, 755,
	756, 757, 758, 759, 760, 761, 762, 763, 764, 765,
	766, 767, 768, 769, 770, 771, 772, 773, 774, 775,
	776, 777, 778, 779, 780, 781, 782, 783, 784, 785,
	786, 787, 788, 789, 790, 791, 792, 793, 794, 795,
	796, 797, 798, 799, 800, 801, 802, 803, 804, 805,
	806, 807, 808, 0, 0, 89, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 273, 0, 0, 0, 0,
	0, 0, 0, 281, 0, 283, 981, 981, 286, 982,
	983, 656, 656, 981, 981, 0, 981, 981, 294, 295,
	0, 210, 211, 299, 981, 981, 301, 0, 321, 319,
	320, 315, 316, 0, 307, 0, 327, 309, 310, 313,
	340, -2, 343, 344, 345, -2, 0, 354, 355, 32,
	979, 0, 981, 0, 0, 0, 0, 26, 0, 0,
	613, 0, 605, 606, 609, 612, 31, 364, 0, 370,
	368, 369, 360, 0, 377, 0, 0, 0, 381, 0,
	383, 384, 0, 444, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 468, 469, 470, 471, 472, 473, 474,
	447, 0, 461, 0, 0, 0, 503, 504, 505, 506,
	507, 508, 509, 0, 367, 31, 0, 481, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 367, 0,
	578, 0, 532, 540, 0, 533, 541, 534, 542, 535,
	0, 536, 543, 537, 544, 538, 539, 545, 0, 0,
	0, 372, 0, 0, 52, 0, 431, 0, 387, 389,
	390, 391, -2, 0, 435, -2, 0, 0, 0, 44,
	45, 0, 0, 0, 0, 55, 956, 57, 58, 0,
	0, 0, 170, 649, 650, 651, 647, 222, 0, 0,
	94, 158, 102, 103, 104, 151, 106, 151, 151, 151,
	151, 167, 167, 167, 167, 134, 135, 136, 137, 138,
	0, 0, 121, 151, 151, 151, 125, 141, 142, 143,
	144, 145, 146, 147, 148, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 153, 153, 153, 155, 155, 680,
	69, 0, 981, 0, 981, 85, 0, 0, 276, 655,
	0, 278, 46, 279, 280, 433, 688, 689, 284, 285,
	0, 0, 289, 290, 291, 292, 293, 212, 300, 304,
	0, 324, 0, 0, 306, 475, 308, 0, 0, 347,
	0, 252, 0, 0, 0, 0, 0, 0, 617, 0,
	0, 0, 0, 0, 608, 610, 611, 616, 34, 367,
	0, 597, 0, 0, 0, 371, 29, 442, 443, 445,
	462, 0, 464, 466, 382, 378, 0, 587, -2, 452,
	453, 477, 478, 479, 0, 0, 0, 0, 475, 457,
	0, 488, 489, 490, 491, 492, 493, 494, 495, 496,
	497, 498, 499, 502, 562, 563, 0, 500, 501, 510,
	372, 480, 0, 635, 31, 0, 374, 0, 519, 0,
	0, 485, 589, 0, 485, 589, 0, 0, 0, 0,
	584, 581, 0, 0, 586, 0, 549, 0, 0, 0,
	0, 0, 373, 0, 0, 0, 0, 430, 0, 0,
	0, 0, 0, 0, 420, 0, 0, 423, 0, 0,
	0, 0, 417, 0, 0, 395, 901, 397, 0, 435,
	0, 0, 0, 418, 419, 439, 0, 439, 49, 439,
	51, 0, 434, 641, 56, 0, 0, 61, 62, 642,
	643, 644, 645, 0, 86, 223, 225, 228, 229, 230,
	90, 91, 92, 0, 0, 205, 0, 0, 199, 199,
	0, 197, 198, 88, 93, 160, 159, 105, 0, 167,
	167, 128, 129, 170, 0, 170, 170, 170, 0, 0,
	122, 123, 124, 116, 0, 117, 118, 119, 0, 120,
	0, 0, 0, 0, 75, 657, 76, 0, 274, 981,
	0, 981, 981, 439, 0, 0, 321, 303, 0, 0,
	322, 323, 314, 0, 328, 311, 980, 261, 261, 672,
	261, 261, 248, 660, 661, 662, 663, 664, 665, 666,
	667, 668, 669, 0, 77, 254, 256, 255, 259, 0,
	0, 0, 614, 615, 0, 607, 27, 0, 652, 653,
	598, 599, 385, 463, 465, 467, 0, 372, 454, 475,
	458, 0, 455, 0, 449, 0, 482, -2, 0, 517,
	518, 0, 0, 0, 0, 0, 555, 0, 0, 556,
	0, 528, 604, 0, 582, 0, 0, 531, 0, 550,
	0, 0, 551, 552, 553, 554, 629, 0, 0, -2,
	0, 0, 439, 637, 0, 388, 412, 414, 0, 409,
	421, 422, 424, 0, 426, 0, 428, 429, 392, 394,
	0, 0, 435, 401, 0, 0, 0, 604, 0, 439,
	42, 43, 0, 59, 60, 0, 0, 66, 171, 172,
	0, 226, 0, 0, 0, 189, 199, 199, 192, 200,
	193, 0, 95, 96, 97, 98, 99, 100, 162, 0,
	0, 0, 166, 0, 174, 176, 0, 101, 161, 0,
	170, 170, 130, 0, 131, 132, 133, 0, 149, 0,
	0, 0, 0, 681, -2, 69, 0, 277, 47, 287,
	288, 297, 213, 214, 324, 325, 326, 476, 234, 0,
	980, 0, 0, 262, 263, 264, 265, 266, 267, 0,
	980, 0, 0, 0, 0, 673, 674, 0, 0, 0,
	80, 0, 0, 0, 0, 618, 0, 28, 439, 0,
	379, 588, 0, 456, 0, 459, 515, 375, 0, 151,
	151, 567, 151, 155, 570, 151, 572, 151, 575, 0,
	0, 0, 0, 0, 0, 0, 579, 530, 585, 0,
	587, 0, 0, 35, 0, 629, 619, 631, 633, 0,
	31, 0, 625, 0, 404, 604, 0, 0, 406, 413,
	0, 0, 407, 0, 408, 425, 427, 0, -2, 400,
	0, 0, 0, 612, 440, 41, 63, 64, 65, 224,
	227, 0, 201, 151, 204, 190, 191, 0, 163, 164,
	0, 173, 175, 177, 152, 126, 127, 168, 169, 167,
	0, 167, 0, 156, 0, 0, 73, 0, 275, 302,
	0, 249, 237, 680, 0, 238, 239, 244, 0, 241,
	0, 249, 0, 0, 253, 0, 78, 79, 0, 0,
	258, 600, 386, 516, 460, 520, 564, 167, 568, 569,
	571, 573, 574, 576, 522, 521, 0, 0, 0, 0,
	0, 0, 0, 583, 0, 0, 0, 36, 0, 634,
	-2, 0, 0, 0, 53, 0, 612, 638, 639, 410,
	0, 415, 435, 398, 0, 0, 402, 0, 0, 40,
	179, 0, 203, 0, 165, 170, 150, 170, 0, 0,
	0, -2, 0, 980, 250, 0, 0, 680, 0, 670,
	671, 0, 980, 249, 0, 81, 82, 0, 0, 0,
	602, 0, 565, 566, 0, 0, 0, 0, 557, 529,
	580, 0, 0, 0, 632, 0, -2, 0, 627, 626,
	405, 39, 0, 396, 435, 0, 436, 437, 438, 178,
	182, 0, 187, 0, 202, 0, 139, 140, 154, 157,
	0, 74, 980, 236, 251, 0, 0, 240, 245, 246,
	980, 0, 0, 0, 0, 260, 30, 0, 0, 523,
	525, 524, 526, 0, 0, 0, 546, 547, 0, 622,
	31, 0, 411, 399, 403, 183, 184, 0, 188, 186,
	0, 180, 235, 0, 0, 247, 0, 269, 0, 83,
	84, 77, 603, 601, 527, 0, 0, 0, 630, -2,
	628, 185, 0, 72, 181, 180, 0, 268, 0, 0,
	80, 558, 0, 561, 0, 242, 180, 270, 0, 257,
	559, 0, 243, 0, 0, 206, 0, 0, 207, 208,
	0, 0, 560, 209, 0, 0, 0, 0, 0, 215,
	217, 218, 0, 0, 216, 271, 272, 219, 220, 221,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 77, 3, 3, 3, 104, 96, 3,
	56, 58, 101, 99, 57, 100, 114, 102, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 355,
	85, 84, 86, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 106, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 95, 3, 107,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 78, 79, 80, 81, 82, 83, 87, 88,
	89, 90, 91, 92, 93, 94, 97, 98, 103, 105,
	108, 109, 110, 111, 112, 113, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:339
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:344
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:345
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:349
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:373
		{
			setParseTree(yylex, nil)
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:379
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 27:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:387
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 28:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:391
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 29:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:397
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 30:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:404
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:410
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:414
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:420
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:424
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 35:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:431
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:443
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:455
		{
			yyVAL.str = InsertStr
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:459
		{
			yyVAL.str = ReplaceStr
		}
	case 39:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:465
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:471
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:475
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:479
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:483
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:488
		{
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:489
		{
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:493
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName.ToViewName()}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:497
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName.ToViewName())
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:503
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:507
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:513
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:517
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:522
		{
			yyVAL.partitions = nil
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:526
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:532
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:536
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:540
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:544
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:550
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:554
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:560
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:564
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:568
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:574
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:578
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:582
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:586
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:592
		{
			yyVAL.str = SessionStr
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:596
		{
			yyVAL.str = GlobalStr
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:601
		{
			yyVAL.int = yyPosition(yylex)
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:607
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:612
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 72:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:618
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: yyDollar[4].colIdent, Using: yyDollar[5].colIdent, Type: yyDollar[2].str, Columns: yyDollar[9].indexColumns, Options: yyDollar[11].indexOptions}}
		}
	case 73:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:622
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[3].tableName.ToViewName(), ViewExpr: yyDollar[6].selStmt, ViewSelectPositionStart: yyDollar[5].int, ViewSelectPositionEnd: yyDollar[7].int - 1}
		}
	case 74:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:626
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[5].tableName.ToViewName(), ViewExpr: yyDollar[8].selStmt, ViewSelectPositionStart: yyDollar[7].int, ViewSelectPositionEnd: yyDollar[9].int - 1, OrReplace: true}
		}
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:630
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:634
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:639
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:643
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:649
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:654
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:659
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:665
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:670
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:676
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:682
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName, IfNotExists: ne}
			setDDL(yylex, yyVAL.ddl)
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:693
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:700
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:704
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:710
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:715
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:719
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:723
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:729
		{
			if err := yyDollar[2].columnType.merge(yyDollar[3].columnType); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:738
		{
			yyVAL.columnType = ColumnType{}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:742
		{
			opt := ColumnType{NotNull: yyDollar[2].boolVal, sawnull: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:751
		{
			opt := ColumnType{Default: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:760
		{
			opt := ColumnType{OnUpdate: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:769
		{
			opt := ColumnType{Autoincrement: yyDollar[2].boolVal, sawai: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:778
		{
			opt := ColumnType{KeyOpt: yyDollar[2].colKeyOpt}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:787
		{
			opt := ColumnType{Comment: yyDollar[2].sqlVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:798
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:809
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:814
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:820
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:824
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:828
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:832
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:836
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:840
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:844
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:848
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:852
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:858
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:864
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:870
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:876
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:882
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:890
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:894
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:898
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:902
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:906
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:912
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:916
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:920
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:924
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:928
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:932
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:936
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:940
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:944
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:948
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:952
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:956
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:960
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:964
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 140:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:969
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:975
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:979
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:983
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:987
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:991
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:995
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:999
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1003
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1009
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1014
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1019
		{
			yyVAL.sqlVal = nil
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1023
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1028
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 154:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1032
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1040
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1044
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 157:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1050
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1058
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1062
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1067
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1071
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1078
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1082
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1088
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1094
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1100
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1105
		{
			yyVAL.str = ""
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1109
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1113
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1118
		{
			yyVAL.str = ""
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1122
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1126
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1132
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1136
		{
			yyVAL.colKeyOpt = colKey
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1140
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1144
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1150
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 178:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1156
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 179:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1160
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 180:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1165
		{
			yyVAL.indexOptions = nil
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1169
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1175
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1179
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1185
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1189
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1194
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 187:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1200
		{
			yyVAL.str = ""
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1204
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1210
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1214
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1218
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1222
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1226
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1232
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1236
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1240
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1246
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1250
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 199:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1255
		{
			yyVAL.str = ""
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1259
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1265
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1269
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1275
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1281
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1285
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 206:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1292
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 207:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1296
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 208:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1300
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 209:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1304
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1310
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1314
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 212:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1319
		{
			yyVAL.str = ""
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1323
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1327
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1333
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1339
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1345
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1349
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1353
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1357
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1361
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 222:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1366
		{
			yyVAL.str = ""
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1370
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1374
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1382
		{
			yyVAL.str = yyDollar[1].str
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1386
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1390
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1396
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1400
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1404
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 234:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1415
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 235:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1419
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			ddl.Column = yyDollar[8].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 236:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1426
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 237:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1433
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 238:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1437
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: DropStr, Column: NewColIdent(string(yyDollar[7].bytes)), Table: yyDollar[4].tableName}
		}
	case 239:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1441
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 240:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1445
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: RenameStr, Table: yyDollar[4].tableName, Column: NewColIdent(string(yyDollar[7].bytes)), ToColumn: NewColIdent(string(yyDollar[9].bytes))}
		}
	case 241:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1449
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 242:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1454
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: yyDollar[7].colIdent, Using: yyDollar[8].colIdent, Columns: yyDollar[10].indexColumns, Options: yyDollar[12].indexOptions}}
		}
	case 243:
		yyDollar = yyS[yypt-13 : yypt+1]
		//line sql.y:1458
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: yyDollar[8].colIdent, Type: yyDollar[6].str, Using: yyDollar[9].colIdent, Columns: yyDollar[11].indexColumns, Options: yyDollar[13].indexOptions}}
		}
	case 244:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1462
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[7].colIdent}}
		}
	case 245:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1466
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: RenameStr, FromName: yyDollar[7].colIdent, ToName: yyDollar[9].colIdent}}
		}
	case 246:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1470
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ModifyStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 247:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1477
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ChangeStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, Column: NewColIdent(string(yyDollar[7].bytes)), ColumnOrder: yyDollar[9].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			yyVAL.statement = ddl
		}
	case 248:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1483
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 249:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1488
		{
			yyVAL.columnOrder = nil
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1492
		{
			yyVAL.columnOrder = &ColumnOrder{First: true}
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1496
		{
			yyVAL.columnOrder = &ColumnOrder{AfterColumn: NewColIdent(string(yyDollar[2].bytes))}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1502
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 253:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1508
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 254:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1520
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 255:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1530
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 256:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1534
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 257:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1538
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 258:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1551
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 259:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1561
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 260:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1565
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 261:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1578
		{
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1580
		{
		}
	case 268:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1591
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1597
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1601
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 271:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1607
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 272:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1611
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1617
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1623
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 275:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1627
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1635
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 277:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1643
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[3].colIdent}}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1647
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromViews: yyDollar[4].tableNames, IfExists: exists}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1655
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1659
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1665
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1669
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1674
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1680
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1685
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1689
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1693
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1697
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1702
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1706
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1710
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1714
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1718
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1722
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1726
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1730
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1734
		{
			yyVAL.statement = &Show{Type: IndexStr, Table: yyDollar[4].tableName, Database: yyDollar[5].str, ShowIndexFilterOpt: yyDollar[6].expr}
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1738
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1742
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1746
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1750
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1754
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 303:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1759
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 304:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1769
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1773
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 306:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1777
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1783
		{
			// Cannot dereference $3 directly, or else the parser stackcannot be pooled. See yyParsePooled
			cmp := yyDollar[3].expr.(*ComparisonExpr)
			cmp.Left = &ColName{Name: NewColIdent("collation")}
			var ex Expr = cmp
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &ex}
		}
	case 308:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1791
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1796
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1800
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 311:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1804
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1808
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1822
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1828
		{
			yyVAL.expr = &ComparisonExpr{Operator: LikeStr, Right: yyDollar[2].expr, Escape: yyDollar[3].expr}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1834
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1838
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1844
		{
			yyVAL.str = ""
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1848
		{
			yyVAL.str = "full "
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1854
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1858
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1864
		{
			yyVAL.str = ""
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1868
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1872
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1878
		{
			yyVAL.showFilter = nil
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1882
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1886
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1892
		{
			yyVAL.showFilter = nil
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1896
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1902
		{
			yyVAL.str = ""
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1906
		{
			yyVAL.str = SessionStr
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1910
		{
			yyVAL.str = GlobalStr
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1916
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1920
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1926
		{
			yyVAL.statement = &Begin{}
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1930
		{
			yyVAL.statement = &Begin{}
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1936
		{
			yyVAL.statement = &Commit{}
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1942
		{
			yyVAL.statement = &Rollback{}
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1947
		{
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1948
		{
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1952
		{
			yyVAL.statement = &Explain{ExplainFormat: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1956
		{
			yyVAL.statement = &Explain{Analyze: true, ExplainFormat: TreeStr, Statement: yyDollar[3].selStmt}
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1962
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 346:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1970
		{
			yyVAL.str = ""
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1974
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1985
		{
			yyVAL.statement = &Show{Type: "columns", OnTable: yyDollar[2].tableName}
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1989
		{
			yyVAL.statement = &OtherRead{}
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1995
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1999
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2003
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2007
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2013
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 357:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2017
		{
			setAllowComments(yylex, true)
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2021
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2027
		{
			yyVAL.bytes2 = nil
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2031
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2037
		{
			yyVAL.str = UnionStr
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2041
		{
			yyVAL.str = UnionAllStr
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2045
		{
			yyVAL.str = UnionDistinctStr
		}
	case 364:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2050
		{
			yyVAL.str = ""
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2054
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2058
		{
			yyVAL.str = SQLCacheStr
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2063
		{
			yyVAL.str = ""
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2067
		{
			yyVAL.str = ""
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2071
		{
			yyVAL.str = DistinctStr
		}
	case 370:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2076
		{
			yyVAL.str = ""
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2080
		{
			yyVAL.str = StraightJoinHint
		}
	case 372:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2085
		{
			yyVAL.selectExprs = nil
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2089
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2095
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2099
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2105
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2109
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2113
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 379:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2117
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2122
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2126
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2130
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2137
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 385:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2142
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2146
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2152
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2156
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2166
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2170
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2174
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2180
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2186
		{
			yyVAL.aliasedTableName = yyDollar[2].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
		}
	case 396:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2191
		{
			yyVAL.aliasedTableName = yyDollar[6].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
			yyVAL.aliasedTableName.Partitions = yyDollar[4].partitions
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2202
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Hints: yyDollar[1].indexHints}
		}
	case 398:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2206
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, Hints: yyDollar[4].indexHints}
		}
	case 399:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2210
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, As: yyDollar[5].tableIdent, Hints: yyDollar[6].indexHints}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2214
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2218
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[1].tableIdent, Hints: yyDollar[2].indexHints}
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2230
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2234
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2240
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2244
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 406:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2257
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 407:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2261
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 408:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2265
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2269
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2275
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2277
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2281
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2283
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 414:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2287
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2289
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 416:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2292
		{
			yyVAL.empty = struct{}{}
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2294
		{
			yyVAL.empty = struct{}{}
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2299
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2305
		{
			yyVAL.str = JoinStr
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2309
		{
			yyVAL.str = JoinStr
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2313
		{
			yyVAL.str = JoinStr
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2319
		{
			yyVAL.str = StraightJoinStr
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2325
		{
			yyVAL.str = LeftJoinStr
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2329
		{
			yyVAL.str = LeftJoinStr
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2333
		{
			yyVAL.str = RightJoinStr
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2337
		{
			yyVAL.str = RightJoinStr
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2343
		{
			yyVAL.str = NaturalJoinStr
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2347
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2357
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2361
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2367
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2371
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2377
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 435:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2382
		{
			yyVAL.indexHints = nil
		}
	case 436:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2386
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 437:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2390
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 438:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2394
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 439:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2399
		{
			yyVAL.expr = nil
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2403
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2409
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2413
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2417
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2421
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2425
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2429
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2433
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 448:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2439
		{
			yyVAL.str = ""
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2443
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2449
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2453
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2459
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2463
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 454:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2467
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 455:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2471
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 456:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2475
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2479
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 458:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2483
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 459:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2487
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 460:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2491
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2495
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2501
		{
			yyVAL.str = IsNullStr
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2505
		{
			yyVAL.str = IsNotNullStr
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2509
		{
			yyVAL.str = IsTrueStr
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2513
		{
			yyVAL.str = IsNotTrueStr
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2517
		{
			yyVAL.str = IsFalseStr
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2521
		{
			yyVAL.str = IsNotFalseStr
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2527
		{
			yyVAL.str = EqualStr
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2531
		{
			yyVAL.str = LessThanStr
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2535
		{
			yyVAL.str = GreaterThanStr
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2539
		{
			yyVAL.str = LessEqualStr
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2543
		{
			yyVAL.str = GreaterEqualStr
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2547
		{
			yyVAL.str = NotEqualStr
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2551
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 475:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2556
		{
			yyVAL.expr = nil
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2560
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2566
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2570
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2574
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2580
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2586
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2590
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2596
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2600
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2604
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2608
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2612
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2616
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2620
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2624
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2628
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2632
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2636
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2640
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2644
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2648
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2652
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2656
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2660
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2664
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2668
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2672
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2676
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2680
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2684
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2688
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2696
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2710
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2714
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2718
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 515:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2736
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: yyDollar[3].str == DistinctStr, Exprs: yyDollar[4].selectExprs}
		}
	case 516:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2740
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 517:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2750
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2754
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2758
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema")}
		}
	case 520:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2762
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 521:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2766
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 522:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2770
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 523:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2774
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 524:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2778
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 525:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2782
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 526:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2786
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 527:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2790
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 528:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2794
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("first"), Exprs: yyDollar[3].selectExprs}
		}
	case 529:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2798
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 530:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2802
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 531:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2806
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2816
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2820
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2824
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2829
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2834
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2839
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2845
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2850
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2855
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2859
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2863
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2868
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2873
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2878
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 546:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2882
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 547:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2886
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2896
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 551:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2906
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 552:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2910
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 553:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2914
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 554:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2918
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 555:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2922
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 556:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2926
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 557:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2932
		{
			yyVAL.str = ""
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2936
		{
			yyVAL.str = BooleanModeStr
		}
	case 559:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2940
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 560:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2944
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2948
		{
			yyVAL.str = QueryExpansionStr
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2954
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2958
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2964
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2968
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2972
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2976
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2980
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2984
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2990
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2994
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2998
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3002
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3006
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3010
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3014
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 577:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3019
		{
			yyVAL.expr = nil
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3023
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 579:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3028
		{
			yyVAL.str = string("")
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3032
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3038
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3042
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 583:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3048
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 584:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3053
		{
			yyVAL.expr = nil
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3057
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3063
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3067
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 588:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3071
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3077
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3081
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3085
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3089
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3093
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3097
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3101
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3105
		{
			yyVAL.expr = &NullVal{}
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3111
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3120
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3124
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 600:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3129
		{
			yyVAL.exprs = nil
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3133
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 602:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3138
		{
			yyVAL.expr = nil
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3142
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 604:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3147
		{
			yyVAL.orderBy = nil
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3151
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3157
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3161
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3167
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 609:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3172
		{
			yyVAL.str = AscScr
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3176
		{
			yyVAL.str = AscScr
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3180
		{
			yyVAL.str = DescScr
		}
	case 612:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3185
		{
			yyVAL.limit = nil
		}
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3189
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 614:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3193
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 615:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3197
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 616:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3202
		{
			yyVAL.str = ""
		}
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3206
		{
			yyVAL.str = ForUpdateStr
		}
	case 618:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3210
		{
			yyVAL.str = ShareModeStr
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3223
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3227
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3231
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 622:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3236
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 623:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3240
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 624:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3244
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3251
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3255
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3259
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 628:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3263
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 629:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3268
		{
			yyVAL.updateExprs = nil
		}
	case 630:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3272
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3278
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3282
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3288
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3292
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3298
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3304
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3314
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3318
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3324
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3330
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3334
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3340
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3344
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3348
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3352
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 647:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3359
		{
			yyVAL.bytes = []byte("charset")
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3366
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3370
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3374
		{
			yyVAL.expr = &Default{}
		}
	case 654:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3383
		{
			yyVAL.byt = 0
		}
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3385
		{
			yyVAL.byt = 1
		}
	case 656:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3388
		{
			yyVAL.byt = 0
		}
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3390
		{
			yyVAL.byt = 1
		}
	case 658:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3393
		{
			yyVAL.str = ""
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3395
		{
			yyVAL.str = IgnoreStr
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3399
		{
			yyVAL.empty = struct{}{}
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3401
		{
			yyVAL.empty = struct{}{}
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3403
		{
			yyVAL.empty = struct{}{}
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3405
		{
			yyVAL.empty = struct{}{}
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3407
		{
			yyVAL.empty = struct{}{}
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3409
		{
			yyVAL.empty = struct{}{}
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3411
		{
			yyVAL.empty = struct{}{}
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3413
		{
			yyVAL.empty = struct{}{}
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3415
		{
			yyVAL.empty = struct{}{}
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3417
		{
			yyVAL.empty = struct{}{}
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3421
		{
			yyVAL.empty = struct{}{}
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3423
		{
			yyVAL.empty = struct{}{}
		}
	case 672:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3426
		{
			yyVAL.empty = struct{}{}
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3428
		{
			yyVAL.empty = struct{}{}
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3430
		{
			yyVAL.empty = struct{}{}
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3434
		{
			yyVAL.str = UniqueStr
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3436
		{
			yyVAL.str = FulltextStr
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3438
		{
			yyVAL.str = SpatialStr
		}
	case 678:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3441
		{
			yyVAL.str = ""
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3443
		{
			yyVAL.str = yyDollar[1].str
		}
	case 680:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3446
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3448
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3452
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3456
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3463
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3469
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3473
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3480
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3794
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3803
		{
			decNesting(yylex)
		}
	case 980:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3808
		{
			skipToEnd(yylex)
		}
	case 981:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3813
		{
			skipToEnd(yylex)
		}
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3817
		{
			skipToEnd(yylex)
		}
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3821
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
