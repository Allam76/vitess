//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func yyPosition(yylex interface{}) int {
	return yylex.(*Tokenizer).Position
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:57
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	int                  int
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	columnOrder          *ColumnOrder
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const UNLOCK = 57373
const KEYS = 57374
const UNIQUE = 57375
const KEY = 57376
const VALUES = 57377
const LAST_INSERT_ID = 57378
const NEXT = 57379
const VALUE = 57380
const SHARE = 57381
const MODE = 57382
const SQL_NO_CACHE = 57383
const SQL_CACHE = 57384
const JOIN = 57385
const STRAIGHT_JOIN = 57386
const LEFT = 57387
const RIGHT = 57388
const INNER = 57389
const OUTER = 57390
const CROSS = 57391
const NATURAL = 57392
const USE = 57393
const FORCE = 57394
const ON = 57395
const USING = 57396
const ID = 57397
const HEX = 57398
const STRING = 57399
const INTEGRAL = 57400
const FLOAT = 57401
const HEXNUM = 57402
const VALUE_ARG = 57403
const LIST_ARG = 57404
const COMMENT = 57405
const COMMENT_KEYWORD = 57406
const BIT_LITERAL = 57407
const NULL = 57408
const TRUE = 57409
const FALSE = 57410
const OFF = 57411
const OR = 57412
const AND = 57413
const NOT = 57414
const BETWEEN = 57415
const CASE = 57416
const WHEN = 57417
const THEN = 57418
const ELSE = 57419
const END = 57420
const LE = 57421
const GE = 57422
const NE = 57423
const NULL_SAFE_EQUAL = 57424
const IS = 57425
const LIKE = 57426
const REGEXP = 57427
const IN = 57428
const SHIFT_LEFT = 57429
const SHIFT_RIGHT = 57430
const DIV = 57431
const MOD = 57432
const UNARY = 57433
const COLLATE = 57434
const BINARY = 57435
const UNDERSCORE_BINARY = 57436
const UNDERSCORE_UTF8MB4 = 57437
const INTERVAL = 57438
const JSON_EXTRACT_OP = 57439
const JSON_UNQUOTE_EXTRACT_OP = 57440
const CREATE = 57441
const ALTER = 57442
const DROP = 57443
const RENAME = 57444
const ANALYZE = 57445
const ADD = 57446
const FLUSH = 57447
const MODIFY = 57448
const CHANGE = 57449
const SCHEMA = 57450
const TABLE = 57451
const INDEX = 57452
const VIEW = 57453
const TO = 57454
const IGNORE = 57455
const IF = 57456
const PRIMARY = 57457
const COLUMN = 57458
const SPATIAL = 57459
const FULLTEXT = 57460
const KEY_BLOCK_SIZE = 57461
const CHECK = 57462
const ACTION = 57463
const CASCADE = 57464
const CONSTRAINT = 57465
const FOREIGN = 57466
const NO = 57467
const REFERENCES = 57468
const RESTRICT = 57469
const FIRST = 57470
const AFTER = 57471
const SHOW = 57472
const DESCRIBE = 57473
const EXPLAIN = 57474
const DATE = 57475
const ESCAPE = 57476
const REPAIR = 57477
const OPTIMIZE = 57478
const TRUNCATE = 57479
const MAXVALUE = 57480
const PARTITION = 57481
const REORGANIZE = 57482
const LESS = 57483
const THAN = 57484
const PROCEDURE = 57485
const TRIGGER = 57486
const VINDEX = 57487
const VINDEXES = 57488
const STATUS = 57489
const VARIABLES = 57490
const WARNINGS = 57491
const SEQUENCE = 57492
const BEGIN = 57493
const START = 57494
const TRANSACTION = 57495
const COMMIT = 57496
const ROLLBACK = 57497
const BIT = 57498
const TINYINT = 57499
const SMALLINT = 57500
const MEDIUMINT = 57501
const INT = 57502
const INTEGER = 57503
const BIGINT = 57504
const INTNUM = 57505
const REAL = 57506
const DOUBLE = 57507
const FLOAT_TYPE = 57508
const DECIMAL = 57509
const NUMERIC = 57510
const TIME = 57511
const TIMESTAMP = 57512
const DATETIME = 57513
const YEAR = 57514
const CHAR = 57515
const VARCHAR = 57516
const BOOL = 57517
const CHARACTER = 57518
const VARBINARY = 57519
const NCHAR = 57520
const TEXT = 57521
const TINYTEXT = 57522
const MEDIUMTEXT = 57523
const LONGTEXT = 57524
const BLOB = 57525
const TINYBLOB = 57526
const MEDIUMBLOB = 57527
const LONGBLOB = 57528
const JSON = 57529
const ENUM = 57530
const GEOMETRY = 57531
const POINT = 57532
const LINESTRING = 57533
const POLYGON = 57534
const GEOMETRYCOLLECTION = 57535
const MULTIPOINT = 57536
const MULTILINESTRING = 57537
const MULTIPOLYGON = 57538
const NULLX = 57539
const AUTO_INCREMENT = 57540
const APPROXNUM = 57541
const SIGNED = 57542
const UNSIGNED = 57543
const ZEROFILL = 57544
const COLLATION = 57545
const DATABASES = 57546
const SCHEMAS = 57547
const TABLES = 57548
const VITESS_METADATA = 57549
const VSCHEMA = 57550
const FULL = 57551
const PROCESSLIST = 57552
const COLUMNS = 57553
const FIELDS = 57554
const ENGINES = 57555
const PLUGINS = 57556
const NAMES = 57557
const CHARSET = 57558
const GLOBAL = 57559
const SESSION = 57560
const ISOLATION = 57561
const LEVEL = 57562
const READ = 57563
const WRITE = 57564
const ONLY = 57565
const REPEATABLE = 57566
const COMMITTED = 57567
const UNCOMMITTED = 57568
const SERIALIZABLE = 57569
const CURRENT_TIMESTAMP = 57570
const DATABASE = 57571
const CURRENT_DATE = 57572
const CURRENT_TIME = 57573
const LOCALTIME = 57574
const LOCALTIMESTAMP = 57575
const UTC_DATE = 57576
const UTC_TIME = 57577
const UTC_TIMESTAMP = 57578
const REPLACE = 57579
const CONVERT = 57580
const CAST = 57581
const SUBSTR = 57582
const SUBSTRING = 57583
const GROUP_CONCAT = 57584
const SEPARATOR = 57585
const TIMESTAMPADD = 57586
const TIMESTAMPDIFF = 57587
const MATCH = 57588
const AGAINST = 57589
const BOOLEAN = 57590
const LANGUAGE = 57591
const WITH = 57592
const QUERY = 57593
const EXPANSION = 57594
const UNUSED = 57595
const ARRAY = 57596
const CUME_DIST = 57597
const DESCRIPTION = 57598
const DENSE_RANK = 57599
const EMPTY = 57600
const EXCEPT = 57601
const FIRST_VALUE = 57602
const GROUPING = 57603
const GROUPS = 57604
const JSON_TABLE = 57605
const LAG = 57606
const LAST_VALUE = 57607
const LATERAL = 57608
const LEAD = 57609
const MEMBER = 57610
const NTH_VALUE = 57611
const NTILE = 57612
const OF = 57613
const OVER = 57614
const PERCENT_RANK = 57615
const RANK = 57616
const RECURSIVE = 57617
const ROW_NUMBER = 57618
const SYSTEM = 57619
const WINDOW = 57620
const ACTIVE = 57621
const ADMIN = 57622
const BUCKETS = 57623
const CLONE = 57624
const COMPONENT = 57625
const DEFINITION = 57626
const ENFORCED = 57627
const EXCLUDE = 57628
const FOLLOWING = 57629
const GEOMCOLLECTION = 57630
const GET_MASTER_PUBLIC_KEY = 57631
const HISTOGRAM = 57632
const HISTORY = 57633
const INACTIVE = 57634
const INVISIBLE = 57635
const LOCKED = 57636
const MASTER_COMPRESSION_ALGORITHMS = 57637
const MASTER_PUBLIC_KEY_PATH = 57638
const MASTER_TLS_CIPHERSUITES = 57639
const MASTER_ZSTD_COMPRESSION_LEVEL = 57640
const NESTED = 57641
const NETWORK_NAMESPACE = 57642
const NOWAIT = 57643
const NULLS = 57644
const OJ = 57645
const OLD = 57646
const OPTIONAL = 57647
const ORDINALITY = 57648
const ORGANIZATION = 57649
const OTHERS = 57650
const PATH = 57651
const PERSIST = 57652
const PERSIST_ONLY = 57653
const PRECEDING = 57654
const PRIVILEGE_CHECKS_USER = 57655
const PROCESS = 57656
const RANDOM = 57657
const REFERENCE = 57658
const REQUIRE_ROW_FORMAT = 57659
const RESOURCE = 57660
const RESPECT = 57661
const RESTART = 57662
const RETAIN = 57663
const REUSE = 57664
const ROLE = 57665
const SECONDARY = 57666
const SECONDARY_ENGINE = 57667
const SECONDARY_LOAD = 57668
const SECONDARY_UNLOAD = 57669
const SKIP = 57670
const SRID = 57671
const THREAD_PRIORITY = 57672
const TIES = 57673
const UNBOUNDED = 57674
const VCPU = 57675
const VISIBLE = 57676

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"UNIQUE",
	"KEY",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"MODIFY",
	"CHANGE",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"FIRST",
	"AFTER",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 29,
	-2, 4,
	-1, 39,
	164, 317,
	165, 317,
	-2, 305,
	-1, 324,
	113, 662,
	-2, 658,
	-1, 325,
	113, 663,
	-2, 659,
	-1, 393,
	83, 912,
	-2, 65,
	-1, 394,
	83, 830,
	-2, 66,
	-1, 399,
	83, 799,
	-2, 621,
	-1, 401,
	83, 860,
	-2, 623,
	-1, 699,
	1, 372,
	5, 372,
	12, 372,
	13, 372,
	14, 372,
	15, 372,
	17, 372,
	19, 372,
	29, 372,
	30, 372,
	43, 372,
	44, 372,
	45, 372,
	46, 372,
	47, 372,
	49, 372,
	50, 372,
	53, 372,
	54, 372,
	56, 372,
	57, 372,
	352, 372,
	-2, 390,
	-1, 702,
	54, 46,
	56, 46,
	-2, 50,
	-1, 851,
	113, 665,
	-2, 661,
	-1, 1078,
	5, 30,
	-2, 457,
	-1, 1109,
	5, 29,
	-2, 595,
	-1, 1193,
	5, 29,
	-2, 67,
	-1, 1383,
	5, 30,
	-2, 596,
	-1, 1412,
	5, 29,
	-2, 67,
	-1, 1444,
	5, 29,
	-2, 598,
	-1, 1522,
	5, 30,
	-2, 599,
}

const yyPrivate = 57344

const yyLast = 16254

var yyAct = [...]int{

	325, 1510, 1545, 1555, 1227, 1347, 322, 329, 1112, 655,
	963, 1456, 1424, 1130, 1274, 1414, 342, 303, 1308, 1113,
	525, 1271, 1009, 936, 1275, 1136, 61, 990, 1004, 1019,
	962, 934, 959, 1157, 972, 1403, 1281, 1287, 95, 1246,
	889, 95, 876, 398, 792, 912, 95, 1072, 1203, 806,
	1186, 902, 355, 1202, 976, 715, 853, 586, 592, 1000,
	392, 916, 598, 714, 607, 938, 312, 384, 387, 327,
	389, 95, 403, 704, 923, 60, 95, 1548, 95, 1532,
	1543, 1038, 1520, 1540, 1348, 1531, 95, 1519, 65, 1263,
	984, 1375, 95, 669, 1037, 530, 1145, 696, 1302, 1144,
	670, 552, 1146, 291, 654, 3, 953, 695, 316, 1303,
	1304, 913, 296, 82, 67, 68, 69, 70, 71, 90,
	86, 87, 88, 295, 1042, 954, 955, 716, 300, 717,
	302, 574, 1177, 1036, 1487, 620, 619, 629, 630, 622,
	623, 624, 625, 626, 627, 628, 621, 983, 1431, 631,
	292, 293, 294, 78, 1229, 297, 367, 298, 373, 374,
	371, 372, 370, 369, 368, 991, 274, 1366, 1364, 554,
	548, 556, 375, 376, 569, 289, 818, 550, 570, 567,
	568, 562, 563, 1033, 1028, 1029, 572, 1027, 1169, 1030,
	1031, 573, 284, 1174, 1173, 1231, 817, 815, 1542, 1505,
	1539, 1247, 1511, 553, 555, 80, 81, 1230, 77, 1226,
	917, 1457, 977, 1170, 84, 83, 1563, 819, 1415, 1416,
	1204, 1419, 1040, 1043, 1459, 301, 538, 1175, 532, 1167,
	1214, 1210, 816, 1131, 1133, 1168, 302, 1559, 1195, 784,
	89, 778, 1249, 266, 1297, 1296, 1295, 528, 580, 395,
	269, 265, 85, 1050, 1494, 979, 1049, 585, 1088, 1035,
	278, 273, 643, 644, 979, 1386, 95, 1085, 1233, 403,
	621, 403, 403, 631, 403, 403, 1251, 403, 1255, 403,
	1250, 1034, 1248, 991, 1141, 403, 1098, 1253, 1158, 551,
	1066, 825, 1172, 1458, 276, 960, 1252, 710, 611, 1221,
	283, 95, 1518, 544, 631, 949, 822, 811, 1488, 1254,
	1256, 1223, 1132, 1021, 606, 1323, 526, 1503, 537, 403,
	582, 1039, 583, 807, 1209, 584, 79, 267, 1418, 1211,
	1204, 1212, 1208, 594, 1205, 748, 1041, 1206, 1207, 645,
	646, 647, 648, 649, 650, 651, 652, 1557, 978, 524,
	1558, 1476, 1556, 1213, 280, 270, 271, 978, 281, 282,
	287, 643, 644, 604, 272, 275, 1324, 268, 286, 285,
	643, 644, 903, 1285, 718, 1171, 74, 1265, 907, 606,
	860, 601, 95, 95, 95, 624, 625, 626, 627, 628,
	621, 403, 1020, 631, 858, 859, 857, 403, 596, 576,
	577, 903, 780, 1095, 1222, 808, 1220, 540, 541, 542,
	1217, 1564, 75, 595, 694, 736, 1314, 620, 619, 629,
	630, 622, 623, 624, 625, 626, 627, 628, 621, 975,
	979, 631, 1524, 622, 623, 624, 625, 626, 627, 628,
	621, 557, 558, 631, 559, 560, 1410, 561, 58, 564,
	1409, 703, 1565, 1190, 526, 575, 749, 1504, 856, 708,
	1189, 712, 672, 674, 676, 678, 680, 682, 683, 673,
	675, 1178, 679, 681, 1073, 684, 1063, 1064, 1065, 762,
	765, 766, 767, 768, 769, 770, 1438, 771, 772, 773,
	774, 775, 750, 751, 752, 753, 734, 735, 763, 1407,
	737, 22, 738, 739, 740, 741, 742, 743, 744, 745,
	746, 747, 754, 755, 756, 757, 758, 759, 760, 761,
	824, 1084, 1319, 978, 1083, 95, 1082, 299, 973, 531,
	974, 1199, 605, 604, 1187, 95, 971, 977, 95, 1267,
	877, 95, 878, 605, 604, 95, 1024, 403, 403, 606,
	828, 829, 403, 403, 403, 95, 403, 403, 823, 1501,
	606, 605, 604, 403, 403, 307, 1471, 1147, 395, 1148,
	1470, 764, 605, 604, 1336, 605, 604, 526, 606, 1462,
	1541, 95, 403, 1527, 579, 579, 95, 526, 794, 606,
	1462, 1514, 606, 1462, 579, 1468, 381, 382, 403, 605,
	604, 579, 1466, 95, 1350, 785, 1462, 1495, 1465, 403,
	533, 534, 830, 1462, 1461, 1320, 606, 1401, 1400, 980,
	852, 356, 52, 861, 862, 863, 864, 865, 866, 867,
	868, 869, 870, 871, 872, 873, 874, 875, 620, 619,
	629, 630, 622, 623, 624, 625, 626, 627, 628, 621,
	1388, 579, 631, 403, 1345, 851, 849, 1341, 843, 845,
	846, 1385, 579, 832, 844, 1339, 1158, 854, 1330, 1329,
	893, 896, 1153, 847, 52, 879, 904, 578, 908, 345,
	344, 347, 348, 349, 350, 308, 403, 403, 346, 351,
	1326, 1327, 24, 95, 1326, 1325, 920, 579, 1079, 579,
	706, 95, 95, 885, 579, 95, 95, 791, 790, 95,
	95, 95, 403, 880, 881, 1107, 883, 795, 796, 781,
	779, 1108, 797, 798, 799, 403, 801, 802, 900, 776,
	725, 724, 919, 803, 804, 546, 944, 539, 706, 1284,
	946, 58, 1137, 707, 24, 709, 967, 1272, 1137, 62,
	1284, 1236, 814, 943, 794, 705, 885, 1381, 1475, 920,
	920, 24, 887, 1328, 942, 1149, 952, 992, 993, 994,
	888, 890, 950, 1443, 895, 898, 899, 951, 947, 95,
	403, 707, 403, 705, 95, 95, 920, 1079, 95, 850,
	1079, 1101, 1284, 58, 838, 1100, 1079, 1017, 705, 911,
	711, 914, 915, 826, 1006, 783, 95, 1378, 95, 95,
	58, 309, 58, 95, 1533, 1426, 95, 95, 95, 95,
	95, 985, 1393, 1005, 1313, 986, 987, 988, 989, 1288,
	1289, 1228, 1002, 1003, 1377, 1152, 1001, 996, 995, 1427,
	1008, 997, 998, 999, 1550, 620, 619, 629, 630, 622,
	623, 624, 625, 626, 627, 628, 621, 1546, 1051, 631,
	58, 1291, 354, 1272, 1191, 1069, 1070, 1071, 812, 851,
	1054, 787, 620, 619, 629, 630, 622, 623, 624, 625,
	626, 627, 628, 621, 1294, 1055, 631, 1293, 1056, 395,
	549, 1121, 549, 549, 1124, 549, 549, 1120, 549, 1125,
	549, 1537, 964, 1122, 313, 314, 549, 1530, 1123, 1126,
	854, 929, 930, 1232, 1068, 599, 600, 1535, 1061, 1060,
	1441, 95, 95, 95, 95, 95, 1318, 1114, 1317, 1076,
	52, 1160, 597, 95, 397, 1154, 95, 1182, 723, 547,
	95, 1379, 1422, 1012, 95, 640, 786, 1194, 642, 1062,
	1011, 587, 1013, 1094, 925, 928, 929, 930, 926, 933,
	927, 931, 588, 403, 1288, 1289, 599, 600, 304, 777,
	1139, 1481, 1140, 1150, 831, 1138, 653, 305, 657, 658,
	659, 660, 661, 662, 663, 664, 665, 62, 668, 671,
	671, 671, 677, 671, 671, 677, 671, 685, 686, 687,
	688, 689, 690, 850, 700, 1135, 1127, 1480, 1142, 403,
	1159, 1429, 1092, 1137, 1179, 1180, 1059, 403, 95, 1116,
	1117, 1109, 1119, 1181, 1058, 1183, 1184, 1185, 1115, 1155,
	1156, 1118, 571, 884, 886, 925, 928, 929, 930, 926,
	887, 927, 931, 310, 311, 1552, 1551, 1188, 629, 630,
	622, 623, 624, 625, 626, 627, 628, 621, 95, 1089,
	631, 1086, 805, 602, 1552, 1491, 331, 403, 1198, 1316,
	821, 64, 66, 59, 1, 1544, 1349, 1216, 1423, 1032,
	1242, 1243, 1215, 1509, 1224, 1225, 1455, 1307, 970, 961,
	73, 523, 1259, 1260, 72, 1261, 1262, 1502, 969, 968,
	1165, 1164, 1161, 1176, 982, 1163, 1162, 1269, 1270, 1166,
	731, 403, 403, 1239, 1193, 1114, 1273, 1240, 729, 1264,
	1245, 730, 728, 733, 1258, 732, 1257, 981, 727, 277,
	1201, 397, 390, 397, 397, 403, 397, 397, 1283, 397,
	964, 397, 851, 1054, 719, 1007, 603, 397, 45, 932,
	403, 1417, 403, 403, 1218, 76, 1292, 1219, 1026, 810,
	565, 1276, 1306, 1299, 1301, 566, 279, 639, 549, 549,
	1057, 1298, 1143, 549, 549, 549, 1315, 549, 549, 396,
	1305, 609, 1279, 827, 549, 549, 591, 1196, 1310, 1311,
	1312, 1479, 95, 1428, 1093, 666, 95, 901, 330, 842,
	343, 340, 341, 549, 833, 1106, 613, 328, 320, 698,
	691, 924, 1321, 1322, 922, 1278, 1332, 1333, 921, 95,
	788, 385, 1290, 1337, 1286, 697, 1235, 403, 1335, 1374,
	403, 403, 403, 1486, 403, 837, 26, 95, 63, 315,
	19, 18, 17, 20, 1238, 1344, 16, 15, 1357, 14,
	535, 30, 34, 397, 33, 32, 10, 21, 1075, 720,
	13, 1354, 12, 11, 52, 9, 1078, 1080, 1355, 1081,
	8, 7, 6, 5, 1087, 4, 1268, 1090, 1091, 657,
	1362, 306, 23, 1097, 2, 0, 0, 1099, 0, 0,
	1102, 1103, 1114, 1104, 1105, 1380, 0, 0, 0, 0,
	0, 0, 0, 0, 1390, 0, 403, 1338, 0, 0,
	1389, 0, 0, 1129, 403, 0, 1150, 1399, 0, 0,
	1340, 0, 935, 1343, 0, 0, 700, 964, 0, 964,
	700, 0, 403, 1405, 0, 0, 0, 0, 1359, 1360,
	0, 1361, 0, 0, 1363, 0, 1365, 0, 0, 403,
	0, 0, 0, 1406, 0, 1408, 0, 1413, 0, 0,
	1420, 0, 0, 0, 0, 0, 1421, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1432, 1433, 1434, 1435,
	1436, 0, 0, 0, 1439, 1440, 403, 403, 1430, 403,
	0, 0, 0, 641, 403, 0, 403, 403, 403, 95,
	1402, 549, 403, 549, 0, 0, 1442, 1449, 0, 397,
	397, 1238, 0, 0, 397, 397, 397, 0, 397, 397,
	1460, 0, 1454, 0, 0, 397, 397, 403, 95, 1450,
	0, 1451, 1452, 1453, 1276, 1467, 0, 1473, 1412, 1463,
	0, 1464, 0, 0, 397, 0, 0, 0, 0, 699,
	0, 318, 0, 0, 0, 1244, 0, 0, 1492, 0,
	834, 0, 1477, 403, 0, 0, 0, 1500, 1499, 0,
	0, 609, 1067, 0, 397, 0, 403, 403, 0, 0,
	0, 0, 0, 964, 0, 0, 0, 1513, 1512, 1444,
	0, 1516, 0, 0, 0, 403, 1276, 0, 0, 1114,
	1521, 0, 1411, 0, 0, 0, 95, 0, 0, 0,
	0, 0, 403, 0, 590, 882, 0, 0, 1469, 1529,
	0, 0, 0, 0, 1472, 0, 1425, 0, 0, 1534,
	0, 905, 0, 0, 403, 1536, 0, 0, 1110, 1111,
	0, 0, 700, 700, 700, 700, 700, 1549, 909, 910,
	1493, 0, 93, 0, 1553, 288, 1560, 935, 0, 1134,
	93, 0, 0, 0, 0, 700, 0, 0, 0, 1538,
	0, 0, 1507, 0, 397, 0, 0, 1508, 0, 0,
	0, 0, 319, 0, 0, 388, 0, 397, 0, 0,
	93, 0, 93, 0, 701, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 0, 0, 93, 619, 629, 630,
	622, 623, 624, 625, 626, 627, 628, 621, 1356, 0,
	631, 0, 0, 0, 0, 1358, 0, 0, 0, 0,
	0, 52, 92, 0, 0, 0, 1367, 1368, 549, 0,
	290, 0, 397, 0, 397, 0, 0, 0, 0, 0,
	0, 0, 0, 1425, 964, 0, 1382, 1383, 1384, 1372,
	1387, 0, 0, 0, 0, 386, 0, 0, 0, 0,
	527, 0, 529, 0, 0, 0, 0, 1398, 0, 0,
	536, 855, 615, 0, 618, 0, 543, 0, 397, 0,
	632, 633, 634, 635, 636, 637, 638, 1241, 616, 617,
	614, 620, 619, 629, 630, 622, 623, 624, 625, 626,
	627, 628, 621, 0, 0, 631, 0, 620, 619, 629,
	630, 622, 623, 624, 625, 626, 627, 628, 621, 0,
	1277, 631, 52, 0, 620, 619, 629, 630, 622, 623,
	624, 625, 626, 627, 628, 621, 0, 0, 631, 0,
	0, 0, 0, 1437, 0, 0, 589, 593, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 699, 0, 0,
	0, 699, 0, 612, 0, 699, 0, 0, 0, 0,
	93, 0, 905, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 24, 25, 53,
	27, 28, 0, 0, 0, 0, 0, 0, 656, 0,
	0, 1482, 1483, 1484, 1485, 93, 57, 667, 1489, 1490,
	29, 49, 50, 0, 0, 397, 0, 0, 0, 0,
	1496, 1497, 1498, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 40, 0, 0, 0, 58, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 700, 0,
	545, 0, 0, 0, 0, 1517, 0, 0, 0, 0,
	0, 1192, 1522, 0, 0, 0, 0, 0, 0, 397,
	0, 0, 0, 0, 0, 1373, 0, 0, 1526, 0,
	0, 0, 0, 0, 0, 581, 93, 93, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 31, 55, 36,
	35, 38, 0, 51, 0, 0, 0, 1395, 1396, 1397,
	0, 0, 0, 0, 855, 0, 0, 0, 0, 397,
	0, 0, 1561, 1562, 0, 0, 0, 0, 39, 56,
	46, 0, 0, 47, 48, 37, 0, 0, 0, 1371,
	0, 0, 0, 549, 0, 52, 0, 0, 0, 41,
	42, 397, 43, 44, 0, 0, 0, 0, 0, 0,
	905, 0, 0, 1280, 1282, 0, 693, 0, 702, 0,
	0, 0, 0, 0, 0, 0, 0, 699, 699, 699,
	699, 699, 0, 0, 0, 1370, 0, 1282, 0, 0,
	0, 0, 699, 1277, 0, 0, 1445, 0, 0, 0,
	699, 0, 397, 0, 397, 1309, 0, 0, 0, 0,
	0, 0, 0, 809, 620, 619, 629, 630, 622, 623,
	624, 625, 626, 627, 628, 621, 0, 0, 631, 93,
	0, 0, 0, 0, 1474, 54, 0, 0, 0, 93,
	0, 0, 93, 0, 0, 93, 840, 841, 0, 793,
	0, 0, 0, 0, 0, 1277, 0, 52, 0, 93,
	620, 619, 629, 630, 622, 623, 624, 625, 626, 627,
	628, 621, 0, 0, 631, 0, 0, 0, 0, 1346,
	0, 0, 1351, 1352, 1353, 93, 397, 0, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 656,
	0, 0, 891, 892, 0, 0, 0, 93, 0, 726,
	0, 0, 0, 0, 0, 0, 793, 0, 0, 782,
	0, 0, 386, 0, 0, 789, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 905, 0, 800,
	0, 1369, 620, 619, 629, 630, 622, 623, 624, 625,
	626, 627, 628, 621, 1547, 0, 631, 0, 397, 0,
	958, 0, 0, 319, 319, 813, 1404, 319, 319, 319,
	820, 0, 0, 906, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 397, 0, 0, 839, 0, 0,
	0, 0, 319, 319, 319, 319, 0, 93, 0, 0,
	0, 397, 0, 0, 0, 93, 940, 0, 0, 93,
	93, 0, 0, 93, 948, 793, 620, 619, 629, 630,
	622, 623, 624, 625, 626, 627, 628, 621, 0, 0,
	631, 0, 0, 0, 0, 0, 0, 0, 1446, 1447,
	0, 1448, 0, 0, 0, 0, 1404, 0, 1404, 1404,
	1404, 0, 0, 0, 1309, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1052, 1053, 0, 593, 0,
	0, 0, 0, 0, 1074, 0, 0, 918, 0, 1404,
	0, 0, 0, 93, 0, 0, 0, 0, 93, 93,
	945, 0, 93, 699, 620, 619, 629, 630, 622, 623,
	624, 625, 626, 627, 628, 621, 0, 0, 631, 0,
	93, 0, 1022, 1023, 0, 1506, 0, 93, 0, 0,
	93, 93, 93, 93, 93, 0, 0, 1077, 397, 397,
	793, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 319, 0, 905, 1096, 0, 1523, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1010, 1528, 0, 0, 0, 1014, 1015,
	0, 0, 1016, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1404, 0, 319, 0,
	1018, 0, 0, 0, 0, 0, 0, 1025, 0, 0,
	1044, 1045, 1046, 1047, 1048, 319, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 906, 93, 93, 93, 93, 93,
	0, 0, 0, 0, 0, 0, 0, 1128, 0, 0,
	93, 0, 0, 0, 940, 0, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1200, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1266, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 319, 0, 0, 0, 0, 0, 0, 1300,
	0, 0, 0, 0, 319, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1197, 793, 0, 0, 0, 0, 0, 0,
	0, 0, 906, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1234, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 1376,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 656,
	0, 0, 0, 93, 0, 0, 0, 1391, 0, 0,
	1392, 0, 0, 1394, 0, 0, 0, 0, 0, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1331, 0, 0, 0,
	1334, 0, 0, 0, 0, 0, 0, 0, 0, 906,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1342, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 940, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1515, 656, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 906, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 0, 1478, 0, 0, 0, 0, 0, 0, 510,
	498, 0, 455, 513, 428, 445, 521, 446, 449, 486,
	413, 468, 179, 443, 0, 432, 408, 438, 409, 430,
	457, 125, 427, 500, 471, 512, 151, 511, 461, 519,
	153, 477, 0, 225, 167, 0, 0, 459, 502, 466,
	495, 454, 487, 418, 476, 514, 444, 484, 515, 0,
	0, 0, 402, 0, 965, 966, 0, 0, 0, 0,
	0, 115, 0, 481, 509, 440, 483, 485, 407, 478,
	1525, 411, 414, 520, 505, 435, 436, 1151, 0, 0,
	0, 0, 0, 0, 458, 467, 492, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 433, 0, 475, 0,
	0, 0, 415, 412, 0, 0, 456, 0, 0, 0,
	417, 0, 434, 493, 0, 404, 133, 0, 0, 497,
	504, 453, 254, 508, 451, 450, 198, 0, 229, 136,
	150, 111, 97, 107, 0, 135, 176, 205, 209, 441,
	405, 501, 431, 439, 119, 437, 207, 186, 245, 474,
	188, 206, 154, 235, 199, 244, 255, 256, 232, 252,
	260, 222, 100, 231, 243, 116, 217, 102, 241, 228,
	165, 145, 146, 101, 0, 203, 124, 131, 121, 178,
	238, 239, 120, 263, 108, 251, 104, 109, 250, 172,
	234, 242, 166, 159, 103, 240, 164, 158, 149, 128,
	138, 196, 156, 197, 139, 169, 168, 170, 0, 410,
	0, 226, 248, 264, 113, 426, 0, 233, 258, 259,
	0, 0, 114, 132, 127, 195, 171, 110, 141, 223,
	148, 155, 202, 262, 185, 208, 117, 247, 224, 422,
	425, 420, 421, 469, 470, 516, 517, 518, 494, 416,
	0, 423, 424, 0, 499, 506, 507, 473, 96, 105,
	152, 261, 200, 130, 249, 406, 419, 123, 429, 0,
	0, 442, 447, 448, 460, 462, 463, 464, 465, 472,
	479, 480, 482, 488, 489, 490, 491, 496, 503, 522,
	98, 99, 106, 112, 118, 122, 126, 129, 134, 137,
	140, 142, 143, 144, 147, 157, 160, 161, 162, 163,
	173, 174, 175, 177, 180, 181, 182, 183, 184, 187,
	189, 190, 191, 192, 193, 194, 201, 204, 210, 211,
	212, 213, 214, 215, 216, 218, 219, 220, 221, 227,
	230, 236, 237, 246, 253, 257, 510, 498, 0, 455,
	513, 428, 445, 521, 446, 449, 486, 413, 468, 179,
	443, 0, 432, 408, 438, 409, 430, 457, 125, 427,
	500, 471, 512, 151, 511, 461, 519, 153, 477, 0,
	225, 167, 0, 0, 459, 502, 466, 495, 454, 487,
	418, 476, 514, 444, 484, 515, 0, 0, 0, 402,
	0, 965, 966, 0, 0, 0, 0, 0, 115, 0,
	481, 509, 440, 483, 485, 407, 478, 0, 411, 414,
	520, 505, 435, 436, 0, 0, 0, 0, 0, 0,
	0, 458, 467, 492, 452, 0, 0, 0, 0, 0,
	0, 0, 0, 433, 0, 475, 0, 0, 0, 415,
	412, 0, 0, 456, 0, 0, 0, 417, 0, 434,
	493, 0, 404, 133, 0, 0, 497, 504, 453, 254,
	508, 451, 450, 198, 0, 229, 136, 150, 111, 97,
	107, 0, 135, 176, 205, 209, 441, 405, 501, 431,
	439, 119, 437, 207, 186, 245, 474, 188, 206, 154,
	235, 199, 244, 255, 256, 232, 252, 260, 222, 100,
	231, 243, 116, 217, 102, 241, 228, 165, 145, 146,
	101, 0, 203, 124, 131, 121, 178, 238, 239, 120,
	263, 108, 251, 104, 109, 250, 172, 234, 242, 166,
	159, 103, 240, 164, 158, 149, 128, 138, 196, 156,
	197, 139, 169, 168, 170, 0, 410, 0, 226, 248,
	264, 113, 426, 0, 233, 258, 259, 0, 0, 114,
	132, 127, 195, 171, 110, 141, 223, 148, 155, 202,
	262, 185, 208, 117, 247, 224, 422, 425, 420, 421,
	469, 470, 516, 517, 518, 494, 416, 0, 423, 424,
	0, 499, 506, 507, 473, 96, 105, 152, 261, 200,
	130, 249, 406, 419, 123, 429, 0, 0, 442, 447,
	448, 460, 462, 463, 464, 465, 472, 479, 480, 482,
	488, 489, 490, 491, 496, 503, 522, 98, 99, 106,
	112, 118, 122, 126, 129, 134, 137, 140, 142, 143,
	144, 147, 157, 160, 161, 162, 163, 173, 174, 175,
	177, 180, 181, 182, 183, 184, 187, 189, 190, 191,
	192, 193, 194, 201, 204, 210, 211, 212, 213, 214,
	215, 216, 218, 219, 220, 221, 227, 230, 236, 237,
	246, 253, 257, 510, 498, 0, 455, 513, 428, 445,
	521, 446, 449, 486, 413, 468, 179, 443, 0, 432,
	408, 438, 409, 430, 457, 125, 427, 500, 471, 512,
	151, 511, 461, 519, 153, 477, 0, 225, 167, 0,
	0, 459, 502, 466, 495, 454, 487, 418, 476, 514,
	444, 484, 515, 58, 0, 0, 402, 0, 0, 0,
	0, 0, 0, 0, 0, 115, 0, 481, 509, 440,
	483, 485, 407, 478, 0, 411, 414, 520, 505, 435,
	436, 0, 0, 0, 0, 0, 0, 0, 458, 467,
	492, 452, 0, 0, 0, 0, 0, 0, 0, 0,
	433, 0, 475, 0, 0, 0, 415, 412, 0, 0,
	456, 0, 0, 0, 417, 0, 434, 493, 0, 404,
	133, 0, 0, 497, 504, 453, 254, 508, 451, 450,
	198, 0, 229, 136, 150, 111, 97, 107, 0, 135,
	176, 205, 209, 441, 405, 501, 431, 439, 119, 437,
	207, 186, 245, 474, 188, 206, 154, 235, 199, 244,
	255, 256, 232, 252, 260, 222, 100, 231, 243, 116,
	217, 102, 241, 228, 165, 145, 146, 101, 0, 203,
	124, 131, 121, 178, 238, 239, 120, 263, 108, 251,
	104, 109, 250, 172, 234, 242, 166, 159, 103, 240,
	164, 158, 149, 128, 138, 196, 156, 197, 139, 169,
	168, 170, 0, 410, 0, 226, 248, 264, 113, 426,
	0, 233, 258, 259, 0, 0, 114, 132, 127, 195,
	171, 110, 141, 223, 148, 155, 202, 262, 185, 208,
	117, 247, 224, 422, 425, 420, 421, 469, 470, 516,
	517, 518, 494, 416, 0, 423, 424, 0, 499, 506,
	507, 473, 96, 105, 152, 261, 200, 130, 249, 406,
	419, 123, 429, 0, 0, 442, 447, 448, 460, 462,
	463, 464, 465, 472, 479, 480, 482, 488, 489, 490,
	491, 496, 503, 522, 98, 99, 106, 112, 118, 122,
	126, 129, 134, 137, 140, 142, 143, 144, 147, 157,
	160, 161, 162, 163, 173, 174, 175, 177, 180, 181,
	182, 183, 184, 187, 189, 190, 191, 192, 193, 194,
	201, 204, 210, 211, 212, 213, 214, 215, 216, 218,
	219, 220, 221, 227, 230, 236, 237, 246, 253, 257,
	510, 498, 0, 455, 513, 428, 445, 521, 446, 449,
	486, 413, 468, 179, 443, 0, 432, 408, 438, 409,
	430, 457, 125, 427, 500, 471, 512, 151, 511, 461,
	519, 153, 477, 0, 225, 167, 0, 0, 459, 502,
	466, 495, 454, 487, 418, 476, 514, 444, 484, 515,
	0, 0, 0, 402, 0, 0, 0, 0, 0, 0,
	0, 0, 115, 0, 481, 509, 440, 483, 485, 407,
	478, 0, 411, 414, 520, 505, 435, 436, 0, 0,
	0, 0, 0, 0, 0, 458, 467, 492, 452, 0,
	0, 0, 0, 0, 0, 1237, 0, 433, 0, 475,
	0, 0, 0, 415, 412, 0, 0, 456, 0, 0,
	0, 417, 0, 434, 493, 0, 404, 133, 0, 0,
	497, 504, 453, 254, 508, 451, 450, 198, 0, 229,
	136, 150, 111, 97, 107, 0, 135, 176, 205, 209,
	441, 405, 501, 431, 439, 119, 437, 207, 186, 245,
	474, 188, 206, 154, 235, 199, 244, 255, 256, 232,
	252, 260, 222, 100, 231, 243, 116, 217, 102, 241,
	228, 165, 145, 146, 101, 0, 203, 124, 131, 121,
	178, 238, 239, 120, 263, 108, 251, 104, 109, 250,
	172, 234, 242, 166, 159, 103, 240, 164, 158, 149,
	128, 138, 196, 156, 197, 139, 169, 168, 170, 0,
	410, 0, 226, 248, 264, 113, 426, 0, 233, 258,
	259, 0, 0, 114, 132, 127, 195, 171, 110, 141,
	223, 148, 155, 202, 262, 185, 208, 117, 247, 224,
	422, 425, 420, 421, 469, 470, 516, 517, 518, 494,
	416, 0, 423, 424, 0, 499, 506, 507, 473, 96,
	105, 152, 261, 200, 130, 249, 406, 419, 123, 429,
	0, 0, 442, 447, 448, 460, 462, 463, 464, 465,
	472, 479, 480, 482, 488, 489, 490, 491, 496, 503,
	522, 98, 99, 106, 112, 118, 122, 126, 129, 134,
	137, 140, 142, 143, 144, 147, 157, 160, 161, 162,
	163, 173, 174, 175, 177, 180, 181, 182, 183, 184,
	187, 189, 190, 191, 192, 193, 194, 201, 204, 210,
	211, 212, 213, 214, 215, 216, 218, 219, 220, 221,
	227, 230, 236, 237, 246, 253, 257, 510, 498, 0,
	455, 513, 428, 445, 521, 446, 449, 486, 413, 468,
	179, 443, 0, 432, 408, 438, 409, 430, 457, 125,
	427, 500, 471, 512, 151, 511, 461, 519, 153, 477,
	0, 225, 167, 0, 0, 459, 502, 466, 495, 454,
	487, 418, 476, 514, 444, 484, 515, 0, 0, 0,
	94, 0, 0, 0, 0, 0, 0, 0, 0, 115,
	0, 481, 509, 440, 483, 485, 407, 478, 0, 411,
	414, 520, 505, 435, 436, 0, 0, 0, 0, 0,
	0, 0, 458, 467, 492, 452, 0, 0, 0, 0,
	0, 0, 949, 0, 433, 0, 475, 0, 0, 0,
	415, 412, 0, 0, 456, 0, 0, 0, 417, 0,
	434, 493, 0, 404, 133, 0, 0, 497, 504, 453,
	254, 508, 451, 450, 198, 0, 229, 136, 150, 111,
	97, 107, 0, 135, 176, 205, 209, 441, 405, 501,
	431, 439, 119, 437, 207, 186, 245, 474, 188, 206,
	154, 235, 199, 244, 255, 256, 232, 252, 260, 222,
	100, 231, 243, 116, 217, 102, 241, 228, 165, 145,
	146, 101, 0, 203, 124, 131, 121, 178, 238, 239,
	120, 263, 108, 251, 104, 109, 250, 172, 234, 242,
	166, 159, 103, 240, 164, 158, 149, 128, 138, 196,
	156, 197, 139, 169, 168, 170, 0, 410, 0, 226,
	248, 264, 113, 426, 0, 233, 258, 259, 0, 0,
	114, 132, 127, 195, 171, 110, 141, 223, 148, 155,
	202, 262, 185, 208, 117, 247, 224, 422, 425, 420,
	421, 469, 470, 516, 517, 518, 494, 416, 0, 423,
	424, 0, 499, 506, 507, 473, 96, 105, 152, 261,
	200, 130, 249, 406, 419, 123, 429, 0, 0, 442,
	447, 448, 460, 462, 463, 464, 465, 472, 479, 480,
	482, 488, 489, 490, 491, 496, 503, 522, 98, 99,
	106, 112, 118, 122, 126, 129, 134, 137, 140, 142,
	143, 144, 147, 157, 160, 161, 162, 163, 173, 174,
	175, 177, 180, 181, 182, 183, 184, 187, 189, 190,
	191, 192, 193, 194, 201, 204, 210, 211, 212, 213,
	214, 215, 216, 218, 219, 220, 221, 227, 230, 236,
	237, 246, 253, 257, 510, 498, 0, 455, 513, 428,
	445, 521, 446, 449, 486, 413, 468, 179, 443, 0,
	432, 408, 438, 409, 430, 457, 125, 427, 500, 471,
	512, 151, 511, 461, 519, 153, 477, 0, 225, 167,
	0, 0, 459, 502, 466, 495, 454, 487, 418, 476,
	514, 444, 484, 515, 0, 0, 0, 324, 0, 0,
	0, 0, 0, 0, 0, 0, 115, 0, 481, 509,
	440, 483, 485, 407, 478, 0, 411, 414, 520, 505,
	435, 436, 0, 0, 0, 0, 0, 0, 0, 458,
	467, 492, 452, 0, 0, 0, 0, 0, 0, 848,
	0, 433, 0, 475, 0, 0, 0, 415, 412, 0,
	0, 456, 0, 0, 0, 417, 0, 434, 493, 0,
	404, 133, 0, 0, 497, 504, 453, 254, 508, 451,
	450, 198, 0, 229, 136, 150, 111, 97, 107, 0,
	135, 176, 205, 209, 441, 405, 501, 431, 439, 119,
	437, 207, 186, 245, 474, 188, 206, 154, 235, 199,
	244, 255, 256, 232, 252, 260, 222, 100, 231, 243,
	116, 217, 102, 241, 228, 165, 145, 146, 101, 0,
	203, 124, 131, 121, 178, 238, 239, 120, 263, 108,
	251, 104, 109, 250, 172, 234, 242, 166, 159, 103,
	240, 164, 158, 149, 128, 138, 196, 156, 197, 139,
	169, 168, 170, 0, 410, 0, 226, 248, 264, 113,
	426, 0, 233, 258, 259, 0, 0, 114, 132, 127,
	195, 171, 110, 141, 223, 148, 155, 202, 262, 185,
	208, 117, 247, 224, 422, 425, 420, 421, 469, 470,
	516, 517, 518, 494, 416, 0, 423, 424, 0, 499,
	506, 507, 473, 96, 105, 152, 261, 200, 130, 249,
	406, 419, 123, 429, 0, 0, 442, 447, 448, 460,
	462, 463, 464, 465, 472, 479, 480, 482, 488, 489,
	490, 491, 496, 503, 522, 98, 99, 106, 112, 118,
	122, 126, 129, 134, 137, 140, 142, 143, 144, 147,
	157, 160, 161, 162, 163, 173, 174, 175, 177, 180,
	181, 182, 183, 184, 187, 189, 190, 191, 192, 193,
	194, 201, 204, 210, 211, 212, 213, 214, 215, 216,
	218, 219, 220, 221, 227, 230, 236, 237, 246, 253,
	257, 510, 498, 0, 455, 513, 428, 445, 521, 446,
	449, 486, 413, 468, 179, 443, 0, 432, 408, 438,
	409, 430, 457, 125, 427, 500, 471, 512, 151, 511,
	461, 519, 153, 477, 0, 225, 167, 0, 0, 459,
	502, 466, 495, 454, 487, 418, 476, 514, 444, 484,
	515, 0, 0, 0, 402, 0, 0, 0, 0, 0,
	0, 0, 0, 115, 0, 481, 509, 440, 483, 485,
	407, 478, 0, 411, 414, 520, 505, 435, 436, 0,
	0, 0, 0, 0, 0, 0, 458, 467, 492, 452,
	0, 0, 0, 0, 0, 0, 0, 0, 433, 0,
	475, 0, 0, 0, 415, 412, 0, 0, 456, 0,
	0, 0, 417, 0, 434, 493, 0, 404, 133, 0,
	0, 497, 504, 453, 254, 508, 451, 450, 198, 0,
	229, 136, 150, 111, 97, 107, 0, 135, 176, 205,
	209, 441, 405, 501, 431, 439, 119, 437, 207, 186,
	245, 474, 188, 206, 154, 235, 199, 244, 255, 256,
	232, 252, 260, 222, 100, 231, 243, 116, 217, 102,
	241, 228, 165, 145, 146, 101, 0, 203, 124, 131,
	121, 178, 238, 239, 120, 263, 108, 251, 104, 109,
	250, 172, 234, 242, 166, 159, 103, 240, 164, 158,
	149, 128, 138, 196, 156, 197, 139, 169, 168, 170,
	0, 410, 0, 226, 248, 264, 113, 426, 0, 233,
	258, 259, 0, 0, 114, 132, 127, 195, 171, 110,
	141, 223, 148, 155, 202, 262, 185, 208, 117, 247,
	224, 422, 425, 420, 421, 469, 470, 516, 517, 518,
	494, 416, 0, 423, 424, 0, 499, 506, 507, 473,
	96, 105, 152, 261, 200, 130, 249, 406, 419, 123,
	429, 0, 0, 442, 447, 448, 460, 462, 463, 464,
	465, 472, 479, 480, 482, 488, 489, 490, 491, 496,
	503, 522, 98, 99, 106, 112, 118, 122, 126, 129,
	134, 137, 140, 142, 143, 144, 147, 157, 160, 161,
	162, 163, 173, 174, 175, 177, 180, 181, 182, 183,
	184, 187, 189, 190, 191, 192, 193, 194, 201, 204,
	210, 211, 212, 213, 214, 215, 216, 218, 219, 220,
	221, 227, 230, 236, 237, 246, 253, 257, 510, 498,
	0, 455, 513, 428, 445, 521, 446, 449, 486, 413,
	468, 179, 443, 0, 432, 408, 438, 409, 430, 457,
	125, 427, 500, 471, 512, 151, 511, 461, 519, 153,
	477, 0, 225, 167, 0, 0, 459, 502, 466, 495,
	454, 487, 418, 476, 514, 444, 484, 515, 0, 0,
	0, 324, 0, 0, 0, 0, 0, 0, 0, 0,
	115, 0, 481, 509, 440, 483, 485, 407, 478, 0,
	411, 414, 520, 505, 435, 436, 0, 0, 0, 0,
	0, 0, 0, 458, 467, 492, 452, 0, 0, 0,
	0, 0, 0, 0, 0, 433, 0, 475, 0, 0,
	0, 415, 412, 0, 0, 456, 0, 0, 0, 417,
	0, 434, 493, 0, 404, 133, 0, 0, 497, 504,
	453, 254, 508, 451, 450, 198, 0, 229, 136, 150,
	111, 97, 107, 0, 135, 176, 205, 209, 441, 405,
	501, 431, 439, 119, 437, 207, 186, 245, 474, 188,
	206, 154, 235, 199, 244, 255, 256, 232, 252, 260,
	222, 100, 231, 243, 116, 217, 102, 241, 228, 165,
	145, 146, 101, 0, 203, 124, 131, 121, 178, 238,
	239, 120, 263, 108, 251, 104, 109, 250, 172, 234,
	242, 166, 159, 103, 240, 164, 158, 149, 128, 138,
	196, 156, 197, 139, 169, 168, 170, 0, 410, 0,
	226, 248, 264, 113, 426, 0, 233, 258, 259, 0,
	0, 114, 132, 127, 195, 171, 110, 141, 223, 148,
	155, 202, 262, 185, 208, 117, 247, 224, 422, 425,
	420, 421, 469, 470, 516, 517, 518, 494, 416, 0,
	423, 424, 0, 499, 506, 507, 473, 96, 105, 152,
	261, 200, 130, 249, 406, 419, 123, 429, 0, 0,
	442, 447, 448, 460, 462, 463, 464, 465, 472, 479,
	480, 482, 488, 489, 490, 491, 496, 503, 522, 98,
	99, 106, 112, 118, 122, 126, 129, 134, 137, 140,
	142, 143, 144, 147, 157, 160, 161, 162, 163, 173,
	174, 175, 177, 180, 181, 182, 183, 184, 187, 189,
	190, 191, 192, 193, 194, 201, 204, 210, 211, 212,
	213, 214, 215, 216, 218, 219, 220, 221, 227, 230,
	236, 237, 246, 253, 257, 510, 498, 0, 455, 513,
	428, 445, 521, 446, 449, 486, 413, 468, 179, 443,
	0, 432, 408, 438, 409, 430, 457, 125, 427, 500,
	471, 512, 151, 511, 461, 519, 153, 477, 0, 225,
	167, 0, 0, 459, 502, 466, 495, 454, 487, 418,
	476, 514, 444, 484, 515, 0, 0, 0, 402, 0,
	0, 0, 0, 0, 0, 0, 0, 115, 0, 481,
	509, 440, 483, 485, 407, 478, 0, 411, 414, 520,
	505, 435, 436, 0, 0, 0, 0, 0, 0, 0,
	458, 467, 492, 452, 0, 0, 0, 0, 0, 0,
	0, 0, 433, 0, 475, 0, 0, 0, 415, 412,
	0, 0, 456, 0, 0, 0, 417, 0, 434, 493,
	0, 404, 133, 0, 0, 497, 504, 453, 254, 508,
	451, 450, 198, 0, 229, 136, 150, 111, 97, 107,
	0, 135, 176, 205, 209, 441, 405, 501, 431, 439,
	119, 437, 207, 186, 245, 474, 188, 206, 154, 235,
	199, 244, 255, 256, 232, 252, 260, 222, 100, 231,
	243, 116, 217, 102, 241, 228, 165, 145, 146, 101,
	0, 203, 124, 131, 121, 178, 238, 239, 120, 263,
	108, 251, 104, 400, 250, 172, 234, 242, 166, 159,
	103, 240, 164, 158, 149, 128, 138, 196, 156, 197,
	139, 169, 168, 170, 0, 410, 0, 226, 248, 264,
	113, 426, 0, 233, 258, 259, 0, 0, 114, 132,
	127, 195, 401, 399, 141, 223, 148, 155, 202, 262,
	185, 208, 117, 247, 224, 422, 425, 420, 421, 469,
	470, 516, 517, 518, 494, 416, 0, 423, 424, 0,
	499, 506, 507, 473, 96, 105, 152, 261, 200, 130,
	249, 406, 419, 123, 429, 0, 0, 442, 447, 448,
	460, 462, 463, 464, 465, 472, 479, 480, 482, 488,
	489, 490, 491, 496, 503, 522, 98, 99, 106, 112,
	118, 122, 126, 129, 134, 137, 140, 142, 143, 144,
	147, 157, 160, 161, 162, 163, 173, 174, 175, 177,
	180, 181, 182, 183, 184, 187, 189, 190, 191, 192,
	193, 194, 201, 204, 210, 211, 212, 213, 214, 215,
	216, 218, 219, 220, 221, 227, 230, 236, 237, 246,
	253, 257, 510, 498, 0, 455, 513, 428, 445, 521,
	446, 449, 486, 413, 468, 179, 443, 0, 432, 408,
	438, 409, 430, 457, 125, 427, 500, 471, 512, 151,
	511, 461, 519, 153, 477, 0, 225, 167, 0, 0,
	459, 502, 466, 495, 454, 487, 418, 476, 514, 444,
	484, 515, 0, 0, 0, 94, 0, 0, 0, 0,
	0, 0, 0, 0, 115, 0, 481, 509, 440, 483,
	485, 407, 478, 0, 411, 414, 520, 505, 435, 436,
	0, 0, 0, 0, 0, 0, 0, 458, 467, 492,
	452, 0, 0, 0, 0, 0, 0, 0, 0, 433,
	0, 475, 0, 0, 0, 415, 412, 0, 0, 456,
	0, 0, 0, 417, 0, 434, 493, 0, 404, 133,
	0, 0, 497, 504, 453, 254, 508, 451, 450, 198,
	0, 229, 136, 150, 111, 97, 107, 0, 135, 176,
	205, 209, 441, 405, 501, 431, 439, 119, 437, 207,
	186, 245, 474, 188, 206, 154, 235, 199, 244, 255,
	256, 232, 252, 260, 222, 100, 231, 243, 116, 217,
	102, 241, 228, 165, 145, 146, 101, 0, 203, 124,
	131, 121, 178, 238, 239, 120, 263, 108, 251, 104,
	109, 250, 172, 234, 242, 166, 159, 103, 240, 164,
	158, 149, 128, 138, 196, 156, 197, 139, 169, 168,
	170, 0, 410, 0, 226, 248, 264, 113, 426, 0,
	233, 258, 259, 0, 0, 114, 132, 127, 195, 171,
	110, 141, 223, 148, 155, 202, 262, 185, 208, 117,
	247, 224, 422, 425, 420, 421, 469, 470, 516, 517,
	518, 494, 416, 0, 423, 424, 0, 499, 506, 507,
	473, 96, 105, 152, 261, 200, 130, 249, 406, 419,
	123, 429, 0, 0, 442, 447, 448, 460, 462, 463,
	464, 465, 472, 479, 480, 482, 488, 489, 490, 491,
	496, 503, 522, 98, 99, 106, 112, 118, 122, 126,
	129, 134, 137, 140, 142, 143, 144, 147, 157, 160,
	161, 162, 163, 173, 174, 175, 177, 180, 181, 182,
	183, 184, 187, 189, 190, 191, 192, 193, 194, 201,
	204, 210, 211, 212, 213, 214, 215, 216, 218, 219,
	220, 221, 227, 230, 236, 237, 246, 253, 257, 510,
	498, 0, 455, 513, 428, 445, 521, 446, 449, 486,
	413, 468, 179, 443, 0, 432, 408, 438, 409, 430,
	457, 125, 427, 500, 471, 512, 151, 511, 461, 519,
	153, 477, 0, 225, 167, 0, 0, 459, 502, 466,
	495, 454, 487, 418, 476, 514, 444, 484, 515, 0,
	0, 0, 402, 0, 0, 0, 0, 0, 0, 0,
	0, 115, 0, 481, 509, 440, 483, 485, 407, 478,
	0, 411, 414, 520, 505, 435, 436, 0, 0, 0,
	0, 0, 0, 0, 458, 467, 492, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 433, 0, 475, 0,
	0, 0, 415, 412, 0, 0, 456, 0, 0, 0,
	417, 0, 434, 493, 0, 404, 133, 0, 0, 497,
	504, 453, 254, 508, 451, 450, 198, 0, 229, 136,
	150, 111, 97, 107, 0, 135, 176, 205, 209, 441,
	405, 501, 431, 439, 119, 437, 207, 186, 245, 474,
	188, 206, 154, 235, 199, 244, 255, 256, 232, 252,
	260, 222, 100, 231, 713, 116, 217, 102, 241, 228,
	165, 145, 146, 101, 0, 203, 124, 131, 121, 178,
	238, 239, 120, 263, 108, 251, 104, 400, 250, 172,
	234, 242, 166, 159, 103, 240, 164, 158, 149, 128,
	138, 196, 156, 197, 139, 169, 168, 170, 0, 410,
	0, 226, 248, 264, 113, 426, 0, 233, 258, 259,
	0, 0, 114, 132, 127, 195, 401, 399, 141, 223,
	148, 155, 202, 262, 185, 208, 117, 247, 224, 422,
	425, 420, 421, 469, 470, 516, 517, 518, 494, 416,
	0, 423, 424, 0, 499, 506, 507, 473, 96, 105,
	152, 261, 200, 130, 249, 406, 419, 123, 429, 0,
	0, 442, 447, 448, 460, 462, 463, 464, 465, 472,
	479, 480, 482, 488, 489, 490, 491, 496, 503, 522,
	98, 99, 106, 112, 118, 122, 126, 129, 134, 137,
	140, 142, 143, 144, 147, 157, 160, 161, 162, 163,
	173, 174, 175, 177, 180, 181, 182, 183, 184, 187,
	189, 190, 191, 192, 193, 194, 201, 204, 210, 211,
	212, 213, 214, 215, 216, 218, 219, 220, 221, 227,
	230, 236, 237, 246, 253, 257, 510, 498, 0, 455,
	513, 428, 445, 521, 446, 449, 486, 413, 468, 179,
	443, 0, 432, 408, 438, 409, 430, 457, 125, 427,
	500, 471, 512, 151, 511, 461, 519, 153, 477, 0,
	225, 167, 0, 0, 459, 502, 466, 495, 454, 487,
	418, 476, 514, 444, 484, 515, 0, 0, 0, 402,
	0, 0, 0, 0, 0, 0, 0, 0, 115, 0,
	481, 509, 440, 483, 485, 407, 478, 0, 411, 414,
	520, 505, 435, 436, 0, 0, 0, 0, 0, 0,
	0, 458, 467, 492, 452, 0, 0, 0, 0, 0,
	0, 0, 0, 433, 0, 475, 0, 0, 0, 415,
	412, 0, 0, 456, 0, 0, 0, 417, 0, 434,
	493, 0, 404, 133, 0, 0, 497, 504, 453, 254,
	508, 451, 450, 198, 0, 229, 136, 150, 111, 97,
	107, 0, 135, 176, 205, 209, 441, 405, 501, 431,
	439, 119, 437, 207, 186, 245, 474, 188, 206, 154,
	235, 199, 244, 255, 256, 232, 252, 260, 222, 100,
	231, 391, 116, 217, 102, 241, 228, 165, 145, 146,
	101, 0, 203, 124, 131, 121, 178, 238, 239, 120,
	263, 108, 251, 104, 400, 250, 172, 234, 242, 166,
	159, 103, 240, 164, 158, 149, 128, 138, 196, 156,
	197, 139, 169, 168, 170, 0, 410, 0, 226, 248,
	264, 113, 426, 0, 233, 258, 259, 0, 0, 114,
	132, 127, 195, 401, 399, 394, 393, 148, 155, 202,
	262, 185, 208, 117, 247, 224, 422, 425, 420, 421,
	469, 470, 516, 517, 518, 494, 416, 0, 423, 424,
	0, 499, 506, 507, 473, 96, 105, 152, 261, 200,
	130, 249, 406, 419, 123, 429, 0, 0, 442, 447,
	448, 460, 462, 463, 464, 465, 472, 479, 480, 482,
	488, 489, 490, 491, 496, 503, 522, 98, 99, 106,
	112, 118, 122, 126, 129, 134, 137, 140, 142, 143,
	144, 147, 157, 160, 161, 162, 163, 173, 174, 175,
	177, 180, 181, 182, 183, 184, 187, 189, 190, 191,
	192, 193, 194, 201, 204, 210, 211, 212, 213, 214,
	215, 216, 218, 219, 220, 221, 227, 230, 236, 237,
	246, 253, 257, 179, 0, 0, 0, 0, 326, 0,
	0, 0, 125, 323, 0, 0, 0, 151, 0, 0,
	366, 153, 0, 0, 225, 167, 0, 0, 0, 0,
	357, 358, 0, 0, 0, 0, 0, 0, 956, 0,
	58, 0, 0, 324, 345, 344, 347, 348, 349, 350,
	0, 0, 115, 346, 351, 352, 353, 957, 0, 0,
	321, 338, 0, 365, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 335, 336, 0, 0, 0, 0, 379,
	0, 337, 0, 0, 332, 333, 334, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 0, 0,
	0, 0, 0, 254, 0, 0, 377, 198, 0, 229,
	136, 150, 111, 97, 107, 0, 135, 176, 205, 209,
	0, 0, 0, 0, 0, 119, 0, 207, 186, 245,
	0, 188, 206, 154, 235, 199, 244, 255, 256, 232,
	252, 260, 222, 100, 231, 243, 116, 217, 102, 241,
	228, 165, 145, 146, 101, 0, 203, 124, 131, 121,
	178, 238, 239, 120, 263, 108, 251, 104, 109, 250,
	172, 234, 242, 166, 159, 103, 240, 164, 158, 149,
	128, 138, 196, 156, 197, 139, 169, 168, 170, 0,
	0, 0, 226, 248, 264, 113, 0, 0, 233, 258,
	259, 0, 0, 114, 132, 127, 195, 171, 110, 141,
	223, 148, 155, 202, 262, 185, 208, 117, 247, 224,
	367, 378, 373, 374, 371, 372, 370, 369, 368, 380,
	359, 360, 361, 362, 364, 0, 375, 376, 363, 96,
	105, 152, 261, 200, 130, 249, 0, 0, 123, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 99, 106, 112, 118, 122, 126, 129, 134,
	137, 140, 142, 143, 144, 147, 157, 160, 161, 162,
	163, 173, 174, 175, 177, 180, 181, 182, 183, 184,
	187, 189, 190, 191, 192, 193, 194, 201, 204, 210,
	211, 212, 213, 214, 215, 216, 218, 219, 220, 221,
	227, 230, 236, 237, 246, 253, 257, 179, 0, 0,
	0, 0, 326, 0, 0, 0, 125, 323, 0, 0,
	0, 151, 0, 0, 366, 153, 0, 0, 225, 167,
	0, 0, 0, 0, 357, 358, 0, 0, 0, 0,
	0, 0, 0, 0, 58, 0, 579, 324, 345, 344,
	347, 348, 349, 350, 0, 0, 115, 346, 351, 352,
	353, 0, 0, 0, 321, 338, 0, 365, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 335, 336, 0,
	0, 0, 0, 379, 0, 337, 0, 0, 332, 333,
	334, 339, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 133, 0, 0, 0, 0, 0, 254, 0, 0,
	377, 198, 0, 229, 136, 150, 111, 97, 107, 0,
	135, 176, 205, 209, 0, 0, 0, 0, 0, 119,
	0, 207, 186, 245, 0, 188, 206, 154, 235, 199,
	244, 255, 256, 232, 252, 260, 222, 100, 231, 243,
	116, 217, 102, 241, 228, 165, 145, 146, 101, 0,
	203, 124, 131, 121, 178, 238, 239, 120, 263, 108,
	251, 104, 109, 250, 172, 234, 242, 166, 159, 103,
	240, 164, 158, 149, 128, 138, 196, 156, 197, 139,
	169, 168, 170, 0, 0, 0, 226, 248, 264, 113,
	0, 0, 233, 258, 259, 0, 0, 114, 132, 127,
	195, 171, 110, 141, 223, 148, 155, 202, 262, 185,
	208, 117, 247, 224, 367, 378, 373, 374, 371, 372,
	370, 369, 368, 380, 359, 360, 361, 362, 364, 0,
	375, 376, 363, 96, 105, 152, 261, 200, 130, 249,
	0, 0, 123, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 98, 99, 106, 112, 118,
	122, 126, 129, 134, 137, 140, 142, 143, 144, 147,
	157, 160, 161, 162, 163, 173, 174, 175, 177, 180,
	181, 182, 183, 184, 187, 189, 190, 191, 192, 193,
	194, 201, 204, 210, 211, 212, 213, 214, 215, 216,
	218, 219, 220, 221, 227, 230, 236, 237, 246, 253,
	257, 179, 0, 0, 0, 0, 326, 0, 0, 0,
	125, 323, 0, 0, 0, 151, 0, 0, 366, 153,
	0, 0, 225, 167, 0, 0, 0, 0, 357, 358,
	0, 0, 0, 0, 0, 0, 0, 0, 58, 0,
	0, 324, 345, 344, 347, 348, 349, 350, 0, 0,
	115, 346, 351, 352, 353, 0, 0, 0, 321, 338,
	0, 365, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 335, 336, 317, 0, 0, 0, 379, 0, 337,
	0, 0, 332, 333, 334, 339, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 133, 0, 0, 0, 0,
	0, 254, 0, 0, 377, 198, 0, 229, 136, 150,
	111, 97, 107, 0, 135, 176, 205, 209, 0, 0,
	0, 0, 0, 119, 0, 207, 186, 245, 0, 188,
	206, 154, 235, 199, 244, 255, 256, 232, 252, 260,
	222, 100, 231, 243, 116, 217, 102, 241, 228, 165,
	145, 146, 101, 0, 203, 124, 131, 121, 178, 238,
	239, 120, 263, 108, 251, 104, 109, 250, 172, 234,
	242, 166, 159, 103, 240, 164, 158, 149, 128, 138,
	196, 156, 197, 139, 169, 168, 170, 0, 0, 0,
	226, 248, 264, 113, 0, 0, 233, 258, 259, 0,
	0, 114, 132, 127, 195, 171, 110, 141, 223, 148,
	155, 202, 262, 185, 208, 117, 247, 224, 367, 378,
	373, 374, 371, 372, 370, 369, 368, 380, 359, 360,
	361, 362, 364, 0, 375, 376, 363, 96, 105, 152,
	261, 200, 130, 249, 0, 0, 123, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	99, 106, 112, 118, 122, 126, 129, 134, 137, 140,
	142, 143, 144, 147, 157, 160, 161, 162, 163, 173,
	174, 175, 177, 180, 181, 182, 183, 184, 187, 189,
	190, 191, 192, 193, 194, 201, 204, 210, 211, 212,
	213, 214, 215, 216, 218, 219, 220, 221, 227, 230,
	236, 237, 246, 253, 257, 179, 0, 0, 0, 0,
	326, 0, 0, 0, 125, 323, 0, 0, 0, 151,
	0, 0, 366, 153, 0, 0, 225, 167, 0, 0,
	0, 0, 357, 358, 0, 0, 0, 0, 0, 0,
	0, 0, 58, 0, 0, 324, 345, 897, 347, 348,
	349, 350, 0, 0, 115, 346, 351, 352, 353, 0,
	0, 0, 321, 338, 0, 365, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 335, 336, 317, 0, 0,
	0, 379, 0, 337, 0, 0, 332, 333, 334, 339,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 133,
	0, 0, 0, 0, 0, 254, 0, 0, 377, 198,
	0, 229, 136, 150, 111, 97, 107, 0, 135, 176,
	205, 209, 0, 0, 0, 0, 0, 119, 0, 207,
	186, 245, 0, 188, 206, 154, 235, 199, 244, 255,
	256, 232, 252, 260, 222, 100, 231, 243, 116, 217,
	102, 241, 228, 165, 145, 146, 101, 0, 203, 124,
	131, 121, 178, 238, 239, 120, 263, 108, 251, 104,
	109, 250, 172, 234, 242, 166, 159, 103, 240, 164,
	158, 149, 128, 138, 196, 156, 197, 139, 169, 168,
	170, 0, 0, 0, 226, 248, 264, 113, 0, 0,
	233, 258, 259, 0, 0, 114, 132, 127, 195, 171,
	110, 141, 223, 148, 155, 202, 262, 185, 208, 117,
	247, 224, 367, 378, 373, 374, 371, 372, 370, 369,
	368, 380, 359, 360, 361, 362, 364, 0, 375, 376,
	363, 96, 105, 152, 261, 200, 130, 249, 0, 0,
	123, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 98, 99, 106, 112, 118, 122, 126,
	129, 134, 137, 140, 142, 143, 144, 147, 157, 160,
	161, 162, 163, 173, 174, 175, 177, 180, 181, 182,
	183, 184, 187, 189, 190, 191, 192, 193, 194, 201,
	204, 210, 211, 212, 213, 214, 215, 216, 218, 219,
	220, 221, 227, 230, 236, 237, 246, 253, 257, 179,
	0, 0, 0, 0, 326, 0, 0, 0, 125, 323,
	0, 0, 0, 151, 0, 0, 366, 153, 0, 0,
	225, 167, 0, 0, 0, 0, 357, 358, 0, 0,
	0, 0, 0, 0, 0, 0, 58, 0, 0, 324,
	345, 894, 347, 348, 349, 350, 0, 0, 115, 346,
	351, 352, 353, 0, 0, 0, 321, 338, 0, 365,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 335,
	336, 317, 0, 0, 0, 379, 0, 337, 0, 0,
	332, 333, 334, 339, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 0, 0, 0, 0, 0, 254,
	0, 0, 377, 198, 0, 229, 136, 150, 111, 97,
	107, 0, 135, 176, 205, 209, 0, 0, 0, 0,
	0, 119, 0, 207, 186, 245, 0, 188, 206, 154,
	235, 199, 244, 255, 256, 232, 252, 260, 222, 100,
	231, 243, 116, 217, 102, 241, 228, 165, 145, 146,
	101, 0, 203, 124, 131, 121, 178, 238, 239, 120,
	263, 108, 251, 104, 109, 250, 172, 234, 242, 166,
	159, 103, 240, 164, 158, 149, 128, 138, 196, 156,
	197, 139, 169, 168, 170, 0, 0, 0, 226, 248,
	264, 113, 0, 0, 233, 258, 259, 0, 0, 114,
	132, 127, 195, 171, 110, 141, 223, 148, 155, 202,
	262, 185, 208, 117, 247, 224, 367, 378, 373, 374,
	371, 372, 370, 369, 368, 380, 359, 360, 361, 362,
	364, 0, 375, 376, 363, 96, 105, 152, 261, 200,
	130, 249, 0, 0, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 99, 106,
	112, 118, 122, 126, 129, 134, 137, 140, 142, 143,
	144, 147, 157, 160, 161, 162, 163, 173, 174, 175,
	177, 180, 181, 182, 183, 184, 187, 189, 190, 191,
	192, 193, 194, 201, 204, 210, 211, 212, 213, 214,
	215, 216, 218, 219, 220, 221, 227, 230, 236, 237,
	246, 253, 257, 24, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 179, 0, 0, 0, 0,
	326, 0, 0, 0, 125, 323, 0, 0, 0, 151,
	0, 0, 366, 153, 0, 0, 225, 167, 0, 0,
	0, 0, 357, 358, 0, 0, 0, 0, 0, 0,
	0, 0, 58, 0, 0, 324, 345, 344, 347, 348,
	349, 350, 0, 0, 115, 346, 351, 352, 353, 0,
	0, 0, 321, 338, 0, 365, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 335, 336, 0, 0, 0,
	0, 379, 0, 337, 0, 0, 332, 333, 334, 339,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 133,
	0, 0, 0, 0, 0, 254, 0, 0, 377, 198,
	0, 229, 136, 150, 111, 97, 107, 0, 135, 176,
	205, 209, 0, 0, 0, 0, 0, 119, 0, 207,
	186, 245, 0, 188, 206, 154, 235, 199, 244, 255,
	256, 232, 252, 260, 222, 100, 231, 243, 116, 217,
	102, 241, 228, 165, 145, 146, 101, 0, 203, 124,
	131, 121, 178, 238, 239, 120, 263, 108, 251, 104,
	109, 250, 172, 234, 242, 166, 159, 103, 240, 164,
	158, 149, 128, 138, 196, 156, 197, 139, 169, 168,
	170, 0, 0, 0, 226, 248, 264, 113, 0, 0,
	233, 258, 259, 0, 0, 114, 132, 127, 195, 171,
	110, 141, 223, 148, 155, 202, 262, 185, 208, 117,
	247, 224, 367, 378, 373, 374, 371, 372, 370, 369,
	368, 380, 359, 360, 361, 362, 364, 0, 375, 376,
	363, 96, 105, 152, 261, 200, 130, 249, 0, 0,
	123, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 98, 99, 106, 112, 118, 122, 126,
	129, 134, 137, 140, 142, 143, 144, 147, 157, 160,
	161, 162, 163, 173, 174, 175, 177, 180, 181, 182,
	183, 184, 187, 189, 190, 191, 192, 193, 194, 201,
	204, 210, 211, 212, 213, 214, 215, 216, 218, 219,
	220, 221, 227, 230, 236, 237, 246, 253, 257, 179,
	0, 0, 0, 0, 326, 0, 0, 0, 125, 323,
	0, 0, 0, 151, 0, 0, 366, 153, 0, 0,
	225, 167, 0, 0, 0, 0, 357, 358, 0, 0,
	0, 0, 0, 0, 0, 0, 58, 0, 0, 324,
	345, 344, 347, 348, 349, 350, 0, 0, 115, 346,
	351, 352, 353, 0, 0, 0, 321, 338, 0, 365,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 335,
	336, 0, 0, 0, 0, 379, 0, 337, 0, 0,
	332, 333, 334, 339, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 0, 0, 0, 0, 0, 254,
	0, 0, 377, 198, 0, 229, 136, 150, 111, 97,
	107, 0, 135, 176, 205, 209, 0, 0, 0, 0,
	0, 119, 0, 207, 186, 245, 0, 188, 206, 154,
	235, 199, 244, 255, 256, 232, 252, 260, 222, 100,
	231, 243, 116, 217, 102, 241, 228, 165, 145, 146,
	101, 0, 203, 124, 131, 121, 178, 238, 239, 120,
	263, 108, 251, 104, 109, 250, 172, 234, 242, 166,
	159, 103, 240, 164, 158, 149, 128, 138, 196, 156,
	197, 139, 169, 168, 170, 0, 0, 0, 226, 248,
	264, 113, 0, 0, 233, 258, 259, 0, 0, 114,
	132, 127, 195, 171, 110, 141, 223, 148, 155, 202,
	262, 185, 208, 117, 247, 224, 367, 378, 373, 374,
	371, 372, 370, 369, 368, 380, 359, 360, 361, 362,
	364, 0, 375, 376, 363, 96, 105, 152, 261, 200,
	130, 249, 0, 0, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 99, 106,
	112, 118, 122, 126, 129, 134, 137, 140, 142, 143,
	144, 147, 157, 160, 161, 162, 163, 173, 174, 175,
	177, 180, 181, 182, 183, 184, 187, 189, 190, 191,
	192, 193, 194, 201, 204, 210, 211, 212, 213, 214,
	215, 216, 218, 219, 220, 221, 227, 230, 236, 237,
	246, 253, 257, 179, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 0, 0, 0, 151, 0, 0,
	366, 153, 0, 0, 225, 167, 0, 0, 0, 0,
	357, 358, 0, 0, 0, 0, 0, 0, 0, 0,
	58, 0, 0, 324, 345, 344, 347, 348, 349, 350,
	0, 0, 115, 346, 351, 352, 353, 0, 0, 0,
	0, 338, 0, 365, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 335, 336, 0, 0, 0, 0, 379,
	0, 337, 0, 0, 332, 333, 334, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 0, 0,
	0, 0, 0, 254, 0, 0, 377, 198, 0, 229,
	136, 150, 111, 97, 107, 0, 135, 176, 205, 209,
	0, 0, 0, 0, 0, 119, 0, 207, 186, 245,
	1554, 188, 206, 154, 235, 199, 244, 255, 256, 232,
	252, 260, 222, 100, 231, 243, 116, 217, 102, 241,
	228, 165, 145, 146, 101, 0, 203, 124, 131, 121,
	178, 238, 239, 120, 263, 108, 251, 104, 109, 250,
	172, 234, 242, 166, 159, 103, 240, 164, 158, 149,
	128, 138, 196, 156, 197, 139, 169, 168, 170, 0,
	0, 0, 226, 248, 264, 113, 0, 0, 233, 258,
	259, 0, 0, 114, 132, 127, 195, 171, 110, 141,
	223, 148, 155, 202, 262, 185, 208, 117, 247, 224,
	367, 378, 373, 374, 371, 372, 370, 369, 368, 380,
	359, 360, 361, 362, 364, 0, 375, 376, 363, 96,
	105, 152, 261, 200, 130, 249, 0, 0, 123, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 99, 106, 112, 118, 122, 126, 129, 134,
	137, 140, 142, 143, 144, 147, 157, 160, 161, 162,
	163, 173, 174, 175, 177, 180, 181, 182, 183, 184,
	187, 189, 190, 191, 192, 193, 194, 201, 204, 210,
	211, 212, 213, 214, 215, 216, 218, 219, 220, 221,
	227, 230, 236, 237, 246, 253, 257, 179, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 0, 0,
	0, 151, 0, 0, 366, 153, 0, 0, 225, 167,
	0, 0, 0, 0, 357, 358, 0, 0, 0, 0,
	0, 0, 0, 0, 58, 0, 579, 324, 345, 344,
	347, 348, 349, 350, 0, 0, 115, 346, 351, 352,
	353, 0, 0, 0, 0, 338, 0, 365, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 335, 336, 0,
	0, 0, 0, 379, 0, 337, 0, 0, 332, 333,
	334, 339, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 133, 0, 0, 0, 0, 0, 254, 0, 0,
	377, 198, 0, 229, 136, 150, 111, 97, 107, 0,
	135, 176, 205, 209, 0, 0, 0, 0, 0, 119,
	0, 207, 186, 245, 0, 188, 206, 154, 235, 199,
	244, 255, 256, 232, 252, 260, 222, 100, 231, 243,
	116, 217, 102, 241, 228, 165, 145, 146, 101, 0,
	203, 124, 131, 121, 178, 238, 239, 120, 263, 108,
	251, 104, 109, 250, 172, 234, 242, 166, 159, 103,
	240, 164, 158, 149, 128, 138, 196, 156, 197, 139,
	169, 168, 170, 0, 0, 0, 226, 248, 264, 113,
	0, 0, 233, 258, 259, 0, 0, 114, 132, 127,
	195, 171, 110, 141, 223, 148, 155, 202, 262, 185,
	208, 117, 247, 224, 367, 378, 373, 374, 371, 372,
	370, 369, 368, 380, 359, 360, 361, 362, 364, 0,
	375, 376, 363, 96, 105, 152, 261, 200, 130, 249,
	0, 0, 123, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 98, 99, 106, 112, 118,
	122, 126, 129, 134, 137, 140, 142, 143, 144, 147,
	157, 160, 161, 162, 163, 173, 174, 175, 177, 180,
	181, 182, 183, 184, 187, 189, 190, 191, 192, 193,
	194, 201, 204, 210, 211, 212, 213, 214, 215, 216,
	218, 219, 220, 221, 227, 230, 236, 237, 246, 253,
	257, 179, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 0, 0, 0, 151, 0, 0, 366, 153,
	0, 0, 225, 167, 0, 0, 0, 0, 357, 358,
	0, 0, 0, 0, 0, 0, 0, 0, 58, 0,
	0, 324, 345, 344, 347, 348, 349, 350, 0, 0,
	115, 346, 351, 352, 353, 0, 0, 0, 0, 338,
	0, 365, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 335, 336, 0, 0, 0, 0, 379, 0, 337,
	0, 0, 332, 333, 334, 339, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 133, 0, 0, 0, 0,
	0, 254, 0, 0, 377, 198, 0, 229, 136, 150,
	111, 97, 107, 0, 135, 176, 205, 209, 0, 0,
	0, 0, 0, 119, 0, 207, 186, 245, 0, 188,
	206, 154, 235, 199, 244, 255, 256, 232, 252, 260,
	222, 100, 231, 243, 116, 217, 102, 241, 228, 165,
	145, 146, 101, 0, 203, 124, 131, 121, 178, 238,
	239, 120, 263, 108, 251, 104, 109, 250, 172, 234,
	242, 166, 159, 103, 240, 164, 158, 149, 128, 138,
	196, 156, 197, 139, 169, 168, 170, 0, 0, 0,
	226, 248, 264, 113, 0, 0, 233, 258, 259, 0,
	0, 114, 132, 127, 195, 171, 110, 141, 223, 148,
	155, 202, 262, 185, 208, 117, 247, 224, 367, 378,
	373, 374, 371, 372, 370, 369, 368, 380, 359, 360,
	361, 362, 364, 0, 375, 376, 363, 96, 105, 152,
	261, 200, 130, 249, 0, 0, 123, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	99, 106, 112, 118, 122, 126, 129, 134, 137, 140,
	142, 143, 144, 147, 157, 160, 161, 162, 163, 173,
	174, 175, 177, 180, 181, 182, 183, 184, 187, 189,
	190, 191, 192, 193, 194, 201, 204, 210, 211, 212,
	213, 214, 215, 216, 218, 219, 220, 221, 227, 230,
	236, 237, 246, 253, 257, 179, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 0, 0, 0, 151,
	0, 0, 0, 153, 0, 0, 225, 167, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 402, 0, 0, 0, 0,
	0, 0, 0, 0, 115, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 620, 619, 629, 630, 622, 623, 624, 625, 626,
	627, 628, 621, 0, 0, 631, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 133,
	0, 0, 0, 0, 0, 254, 0, 0, 0, 198,
	0, 229, 136, 150, 111, 97, 107, 0, 135, 176,
	205, 209, 0, 0, 0, 0, 0, 119, 0, 207,
	186, 245, 0, 188, 206, 154, 235, 199, 244, 255,
	256, 232, 252, 260, 222, 100, 231, 243, 116, 217,
	102, 241, 228, 165, 145, 146, 101, 0, 203, 124,
	131, 121, 178, 238, 239, 120, 263, 108, 251, 104,
	109, 250, 172, 234, 242, 166, 159, 103, 240, 164,
	158, 149, 128, 138, 196, 156, 197, 139, 169, 168,
	170, 0, 0, 0, 226, 248, 264, 113, 0, 0,
	233, 258, 259, 0, 0, 114, 132, 127, 195, 171,
	110, 141, 223, 148, 155, 202, 262, 185, 208, 117,
	247, 224, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 105, 152, 261, 200, 130, 249, 0, 0,
	123, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 98, 99, 106, 112, 118, 122, 126,
	129, 134, 137, 140, 142, 143, 144, 147, 157, 160,
	161, 162, 163, 173, 174, 175, 177, 180, 181, 182,
	183, 184, 187, 189, 190, 191, 192, 193, 194, 201,
	204, 210, 211, 212, 213, 214, 215, 216, 218, 219,
	220, 221, 227, 230, 236, 237, 246, 253, 257, 179,
	0, 0, 0, 608, 0, 0, 0, 0, 125, 0,
	0, 0, 0, 151, 0, 0, 0, 153, 0, 0,
	225, 167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 402,
	0, 610, 0, 0, 0, 0, 0, 0, 115, 0,
	0, 0, 0, 0, 605, 604, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 606, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 0, 0, 0, 0, 0, 254,
	0, 0, 0, 198, 0, 229, 136, 150, 111, 97,
	107, 0, 135, 176, 205, 209, 0, 0, 0, 0,
	0, 119, 0, 207, 186, 245, 0, 188, 206, 154,
	235, 199, 244, 255, 256, 232, 252, 260, 222, 100,
	231, 243, 116, 217, 102, 241, 228, 165, 145, 146,
	101, 0, 203, 124, 131, 121, 178, 238, 239, 120,
	263, 108, 251, 104, 109, 250, 172, 234, 242, 166,
	159, 103, 240, 164, 158, 149, 128, 138, 196, 156,
	197, 139, 169, 168, 170, 0, 0, 0, 226, 248,
	264, 113, 0, 0, 233, 258, 259, 0, 0, 114,
	132, 127, 195, 171, 110, 141, 223, 148, 155, 202,
	262, 185, 208, 117, 247, 224, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 105, 152, 261, 200,
	130, 249, 0, 0, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 99, 106,
	112, 118, 122, 126, 129, 134, 137, 140, 142, 143,
	144, 147, 157, 160, 161, 162, 163, 173, 174, 175,
	177, 180, 181, 182, 183, 184, 187, 189, 190, 191,
	192, 193, 194, 201, 204, 210, 211, 212, 213, 214,
	215, 216, 218, 219, 220, 221, 227, 230, 236, 237,
	246, 253, 257, 179, 0, 0, 0, 939, 0, 0,
	0, 0, 125, 0, 0, 0, 0, 151, 0, 0,
	0, 153, 0, 0, 225, 167, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 0, 941, 0, 0, 0, 0,
	0, 0, 115, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 0, 0,
	0, 0, 0, 254, 0, 0, 0, 198, 0, 229,
	136, 150, 111, 97, 107, 0, 135, 176, 205, 209,
	0, 0, 0, 0, 0, 119, 0, 207, 186, 245,
	0, 188, 206, 154, 235, 199, 244, 255, 256, 232,
	252, 260, 222, 100, 231, 243, 116, 217, 102, 241,
	228, 165, 145, 146, 101, 0, 203, 124, 131, 121,
	178, 238, 239, 120, 263, 108, 251, 104, 109, 250,
	172, 234, 242, 166, 159, 103, 240, 164, 158, 149,
	128, 138, 196, 156, 197, 139, 169, 168, 170, 0,
	0, 0, 226, 248, 264, 113, 0, 0, 233, 258,
	259, 0, 0, 114, 132, 127, 195, 171, 110, 141,
	223, 148, 155, 202, 262, 185, 208, 117, 247, 224,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	105, 152, 261, 200, 130, 249, 0, 0, 123, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 99, 106, 112, 118, 122, 126, 129, 134,
	137, 140, 142, 143, 144, 147, 157, 160, 161, 162,
	163, 173, 174, 175, 177, 180, 181, 182, 183, 184,
	187, 189, 190, 191, 192, 193, 194, 201, 204, 210,
	211, 212, 213, 214, 215, 216, 218, 219, 220, 221,
	227, 230, 236, 237, 246, 253, 257, 24, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 179,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	0, 0, 0, 151, 0, 0, 0, 153, 0, 0,
	225, 167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 58, 0, 0, 402,
	0, 0, 0, 0, 0, 0, 0, 0, 115, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 0, 0, 0, 0, 0, 254,
	0, 0, 0, 198, 0, 229, 136, 150, 111, 97,
	107, 0, 135, 176, 205, 209, 0, 0, 0, 0,
	0, 119, 0, 207, 186, 245, 0, 188, 206, 154,
	235, 199, 244, 255, 256, 232, 252, 260, 222, 100,
	231, 243, 116, 217, 102, 241, 228, 165, 145, 146,
	101, 0, 203, 124, 131, 121, 178, 238, 239, 120,
	263, 108, 251, 104, 109, 250, 172, 234, 242, 166,
	159, 103, 240, 164, 158, 149, 128, 138, 196, 156,
	197, 139, 169, 168, 170, 0, 0, 0, 226, 248,
	264, 113, 0, 0, 233, 258, 259, 0, 0, 114,
	132, 127, 195, 171, 110, 141, 223, 148, 155, 202,
	262, 185, 208, 117, 247, 224, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 105, 152, 261, 200,
	130, 249, 0, 0, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 99, 106,
	112, 118, 122, 126, 129, 134, 137, 140, 142, 143,
	144, 147, 157, 160, 161, 162, 163, 173, 174, 175,
	177, 180, 181, 182, 183, 184, 187, 189, 190, 191,
	192, 193, 194, 201, 204, 210, 211, 212, 213, 214,
	215, 216, 218, 219, 220, 221, 227, 230, 236, 237,
	246, 253, 257, 24, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 179, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 0, 0, 0, 151,
	0, 0, 0, 153, 0, 0, 225, 167, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 58, 0, 0, 94, 0, 0, 0, 0,
	0, 0, 0, 0, 115, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 133,
	0, 0, 0, 0, 0, 254, 0, 0, 0, 198,
	0, 229, 136, 150, 111, 97, 107, 0, 135, 176,
	205, 209, 0, 0, 0, 0, 0, 119, 0, 207,
	186, 245, 0, 188, 206, 154, 235, 199, 244, 255,
	256, 232, 252, 260, 222, 100, 231, 243, 116, 217,
	102, 241, 228, 165, 145, 146, 101, 0, 203, 124,
	131, 121, 178, 238, 239, 120, 263, 108, 251, 104,
	109, 250, 172, 234, 242, 166, 159, 103, 240, 164,
	158, 149, 128, 138, 196, 156, 197, 139, 169, 168,
	170, 0, 0, 0, 226, 248, 264, 113, 0, 0,
	233, 258, 259, 0, 0, 114, 132, 127, 195, 171,
	110, 141, 223, 148, 155, 202, 262, 185, 208, 117,
	247, 224, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 105, 152, 261, 200, 130, 249, 0, 0,
	123, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 98, 99, 106, 112, 118, 122, 126,
	129, 134, 137, 140, 142, 143, 144, 147, 157, 160,
	161, 162, 163, 173, 174, 175, 177, 180, 181, 182,
	183, 184, 187, 189, 190, 191, 192, 193, 194, 201,
	204, 210, 211, 212, 213, 214, 215, 216, 218, 219,
	220, 221, 227, 230, 236, 237, 246, 253, 257, 179,
	0, 0, 0, 939, 0, 0, 0, 0, 125, 0,
	0, 0, 0, 151, 0, 0, 0, 153, 0, 0,
	225, 167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	0, 941, 0, 0, 0, 0, 0, 0, 115, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 0, 0, 0, 0, 0, 254,
	0, 0, 0, 198, 0, 229, 136, 150, 111, 97,
	107, 0, 135, 176, 205, 209, 0, 0, 0, 0,
	0, 119, 0, 207, 186, 245, 0, 937, 206, 154,
	235, 199, 244, 255, 256, 232, 252, 260, 222, 100,
	231, 243, 116, 217, 102, 241, 228, 165, 145, 146,
	101, 0, 203, 124, 131, 121, 178, 238, 239, 120,
	263, 108, 251, 104, 109, 250, 172, 234, 242, 166,
	159, 103, 240, 164, 158, 149, 128, 138, 196, 156,
	197, 139, 169, 168, 170, 0, 0, 0, 226, 248,
	264, 113, 0, 0, 233, 258, 259, 0, 0, 114,
	132, 127, 195, 171, 110, 141, 223, 148, 155, 202,
	262, 185, 208, 117, 247, 224, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 105, 152, 261, 200,
	130, 249, 0, 0, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 99, 106,
	112, 118, 122, 126, 129, 134, 137, 140, 142, 143,
	144, 147, 157, 160, 161, 162, 163, 173, 174, 175,
	177, 180, 181, 182, 183, 184, 187, 189, 190, 191,
	192, 193, 194, 201, 204, 210, 211, 212, 213, 214,
	215, 216, 218, 219, 220, 221, 227, 230, 236, 237,
	246, 253, 257, 179, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 0, 0, 0, 151, 0, 0,
	0, 153, 0, 0, 225, 167, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 402, 0, 0, 835, 0, 0, 836,
	0, 0, 115, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 0, 0,
	0, 0, 0, 254, 0, 0, 0, 198, 0, 229,
	136, 150, 111, 97, 107, 0, 135, 176, 205, 209,
	0, 0, 0, 0, 0, 119, 0, 207, 186, 245,
	0, 188, 206, 154, 235, 199, 244, 255, 256, 232,
	252, 260, 222, 100, 231, 243, 116, 217, 102, 241,
	228, 165, 145, 146, 101, 0, 203, 124, 131, 121,
	178, 238, 239, 120, 263, 108, 251, 104, 109, 250,
	172, 234, 242, 166, 159, 103, 240, 164, 158, 149,
	128, 138, 196, 156, 197, 139, 169, 168, 170, 0,
	0, 0, 226, 248, 264, 113, 0, 0, 233, 258,
	259, 0, 0, 114, 132, 127, 195, 171, 110, 141,
	223, 148, 155, 202, 262, 185, 208, 117, 247, 224,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	105, 152, 261, 200, 130, 249, 0, 0, 123, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 99, 106, 112, 118, 122, 126, 129, 134,
	137, 140, 142, 143, 144, 147, 157, 160, 161, 162,
	163, 173, 174, 175, 177, 180, 181, 182, 183, 184,
	187, 189, 190, 191, 192, 193, 194, 201, 204, 210,
	211, 212, 213, 214, 215, 216, 218, 219, 220, 221,
	227, 230, 236, 237, 246, 253, 257, 179, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 722, 0, 0,
	0, 151, 0, 0, 0, 153, 0, 0, 225, 167,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 402, 0, 721,
	0, 0, 0, 0, 0, 0, 115, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 133, 0, 0, 0, 0, 0, 254, 0, 0,
	0, 198, 0, 229, 136, 150, 111, 97, 107, 0,
	135, 176, 205, 209, 0, 0, 0, 0, 0, 119,
	0, 207, 186, 245, 0, 188, 206, 154, 235, 199,
	244, 255, 256, 232, 252, 260, 222, 100, 231, 243,
	116, 217, 102, 241, 228, 165, 145, 146, 101, 0,
	203, 124, 131, 121, 178, 238, 239, 120, 263, 108,
	251, 104, 109, 250, 172, 234, 242, 166, 159, 103,
	240, 164, 158, 149, 128, 138, 196, 156, 197, 139,
	169, 168, 170, 0, 0, 0, 226, 248, 264, 113,
	0, 0, 233, 258, 259, 0, 0, 114, 132, 127,
	195, 171, 110, 141, 223, 148, 155, 202, 262, 185,
	208, 117, 247, 224, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 105, 152, 261, 200, 130, 249,
	0, 0, 123, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 98, 99, 106, 112, 118,
	122, 126, 129, 134, 137, 140, 142, 143, 144, 147,
	157, 160, 161, 162, 163, 173, 174, 175, 177, 180,
	181, 182, 183, 184, 187, 189, 190, 191, 192, 193,
	194, 201, 204, 210, 211, 212, 213, 214, 215, 216,
	218, 219, 220, 221, 227, 230, 236, 237, 246, 253,
	257, 179, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 0, 0, 0, 151, 0, 0, 0, 153,
	0, 0, 225, 167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 58, 0,
	0, 94, 0, 0, 0, 0, 0, 0, 0, 0,
	115, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 133, 0, 0, 0, 0,
	0, 254, 0, 0, 0, 198, 0, 229, 136, 150,
	111, 97, 107, 0, 135, 176, 205, 209, 0, 0,
	0, 0, 0, 119, 0, 207, 186, 245, 0, 188,
	206, 154, 235, 199, 244, 255, 256, 232, 252, 260,
	222, 100, 231, 243, 116, 217, 102, 241, 228, 165,
	145, 146, 101, 0, 203, 124, 131, 121, 178, 238,
	239, 120, 263, 108, 251, 104, 109, 250, 172, 234,
	242, 166, 159, 103, 240, 164, 158, 149, 128, 138,
	196, 156, 197, 139, 169, 168, 170, 0, 0, 0,
	226, 248, 264, 113, 0, 0, 233, 258, 259, 0,
	0, 114, 132, 127, 195, 171, 110, 141, 223, 148,
	155, 202, 262, 185, 208, 117, 247, 224, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 105, 152,
	261, 200, 130, 249, 0, 0, 123, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	99, 106, 112, 118, 122, 126, 129, 134, 137, 140,
	142, 143, 144, 147, 157, 160, 161, 162, 163, 173,
	174, 175, 177, 180, 181, 182, 183, 184, 187, 189,
	190, 191, 192, 193, 194, 201, 204, 210, 211, 212,
	213, 214, 215, 216, 218, 219, 220, 221, 227, 230,
	236, 237, 246, 253, 257, 179, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 0, 0, 0, 151,
	0, 0, 0, 153, 0, 0, 225, 167, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 0, 941, 0, 0,
	0, 0, 0, 0, 115, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 133,
	0, 0, 0, 0, 0, 254, 0, 0, 0, 198,
	0, 229, 136, 150, 111, 97, 107, 0, 135, 176,
	205, 209, 0, 0, 0, 0, 0, 119, 0, 207,
	186, 245, 0, 188, 206, 154, 235, 199, 244, 255,
	256, 232, 252, 260, 222, 100, 231, 243, 116, 217,
	102, 241, 228, 165, 145, 146, 101, 0, 203, 124,
	131, 121, 178, 238, 239, 120, 263, 108, 251, 104,
	109, 250, 172, 234, 242, 166, 159, 103, 240, 164,
	158, 149, 128, 138, 196, 156, 197, 139, 169, 168,
	170, 0, 0, 0, 226, 248, 264, 113, 0, 0,
	233, 258, 259, 0, 0, 114, 132, 127, 195, 171,
	110, 141, 223, 148, 155, 202, 262, 185, 208, 117,
	247, 224, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 105, 152, 261, 200, 130, 249, 0, 0,
	123, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 98, 99, 106, 112, 118, 122, 126,
	129, 134, 137, 140, 142, 143, 144, 147, 157, 160,
	161, 162, 163, 173, 174, 175, 177, 180, 181, 182,
	183, 184, 187, 189, 190, 191, 192, 193, 194, 201,
	204, 210, 211, 212, 213, 214, 215, 216, 218, 219,
	220, 221, 227, 230, 236, 237, 246, 253, 257, 179,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	0, 0, 0, 151, 0, 0, 0, 153, 0, 0,
	225, 167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 402,
	0, 610, 0, 0, 0, 0, 0, 0, 115, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 0, 0, 0, 0, 0, 254,
	0, 0, 0, 198, 0, 229, 136, 150, 111, 97,
	107, 0, 135, 176, 205, 209, 0, 0, 0, 0,
	0, 119, 0, 207, 186, 245, 0, 188, 206, 154,
	235, 199, 244, 255, 256, 232, 252, 260, 222, 100,
	231, 243, 116, 217, 102, 241, 228, 165, 145, 146,
	101, 0, 203, 124, 131, 121, 178, 238, 239, 120,
	263, 108, 251, 104, 109, 250, 172, 234, 242, 166,
	159, 103, 240, 164, 158, 149, 128, 138, 196, 156,
	197, 139, 169, 168, 170, 0, 0, 0, 226, 248,
	264, 113, 0, 0, 233, 258, 259, 0, 0, 114,
	132, 127, 195, 171, 110, 141, 223, 148, 155, 202,
	262, 185, 208, 117, 247, 224, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 105, 152, 261, 200,
	130, 249, 0, 0, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 99, 106,
	112, 118, 122, 126, 129, 134, 137, 140, 142, 143,
	144, 147, 157, 160, 161, 162, 163, 173, 174, 175,
	177, 180, 181, 182, 183, 184, 187, 189, 190, 191,
	192, 193, 194, 201, 204, 210, 211, 212, 213, 214,
	215, 216, 218, 219, 220, 221, 227, 230, 236, 237,
	246, 253, 257, 179, 0, 0, 0, 0, 0, 0,
	0, 692, 125, 0, 0, 0, 0, 151, 0, 0,
	0, 153, 0, 0, 225, 167, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 0, 0, 0, 0, 0, 0,
	0, 0, 115, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 0, 0,
	0, 0, 0, 254, 0, 0, 0, 198, 0, 229,
	136, 150, 111, 97, 107, 0, 135, 176, 205, 209,
	0, 0, 0, 0, 0, 119, 0, 207, 186, 245,
	0, 188, 206, 154, 235, 199, 244, 255, 256, 232,
	252, 260, 222, 100, 231, 243, 116, 217, 102, 241,
	228, 165, 145, 146, 101, 0, 203, 124, 131, 121,
	178, 238, 239, 120, 263, 108, 251, 104, 109, 250,
	172, 234, 242, 166, 159, 103, 240, 164, 158, 149,
	128, 138, 196, 156, 197, 139, 169, 168, 170, 0,
	0, 0, 226, 248, 264, 113, 0, 0, 233, 258,
	259, 0, 0, 114, 132, 127, 195, 171, 110, 141,
	223, 148, 155, 202, 262, 185, 208, 117, 247, 224,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	105, 152, 261, 200, 130, 249, 0, 0, 123, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 99, 106, 112, 118, 122, 126, 129, 134,
	137, 140, 142, 143, 144, 147, 157, 160, 161, 162,
	163, 173, 174, 175, 177, 180, 181, 182, 183, 184,
	187, 189, 190, 191, 192, 193, 194, 201, 204, 210,
	211, 212, 213, 214, 215, 216, 218, 219, 220, 221,
	227, 230, 236, 237, 246, 253, 257, 383, 0, 0,
	0, 0, 0, 0, 179, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 0, 0, 0, 151, 0,
	0, 0, 153, 0, 0, 225, 167, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 0, 0, 0, 0, 0,
	0, 0, 0, 115, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 0,
	0, 0, 0, 0, 254, 0, 0, 0, 198, 0,
	229, 136, 150, 111, 97, 107, 0, 135, 176, 205,
	209, 0, 0, 0, 0, 0, 119, 0, 207, 186,
	245, 0, 188, 206, 154, 235, 199, 244, 255, 256,
	232, 252, 260, 222, 100, 231, 243, 116, 217, 102,
	241, 228, 165, 145, 146, 101, 0, 203, 124, 131,
	121, 178, 238, 239, 120, 263, 108, 251, 104, 109,
	250, 172, 234, 242, 166, 159, 103, 240, 164, 158,
	149, 128, 138, 196, 156, 197, 139, 169, 168, 170,
	0, 0, 0, 226, 248, 264, 113, 0, 0, 233,
	258, 259, 0, 0, 114, 132, 127, 195, 171, 110,
	141, 223, 148, 155, 202, 262, 185, 208, 117, 247,
	224, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 105, 152, 261, 200, 130, 249, 0, 0, 123,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 99, 106, 112, 118, 122, 126, 129,
	134, 137, 140, 142, 143, 144, 147, 157, 160, 161,
	162, 163, 173, 174, 175, 177, 180, 181, 182, 183,
	184, 187, 189, 190, 191, 192, 193, 194, 201, 204,
	210, 211, 212, 213, 214, 215, 216, 218, 219, 220,
	221, 227, 230, 236, 237, 246, 253, 257, 179, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 0,
	0, 0, 151, 0, 0, 0, 153, 0, 0, 225,
	167, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 0,
	0, 0, 0, 0, 0, 0, 0, 115, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 0, 0, 0, 91, 0, 254, 0,
	0, 0, 198, 0, 229, 136, 150, 111, 97, 107,
	0, 135, 176, 205, 209, 0, 0, 0, 0, 0,
	119, 0, 207, 186, 245, 0, 188, 206, 154, 235,
	199, 244, 255, 256, 232, 252, 260, 222, 100, 231,
	243, 116, 217, 102, 241, 228, 165, 145, 146, 101,
	0, 203, 124, 131, 121, 178, 238, 239, 120, 263,
	108, 251, 104, 109, 250, 172, 234, 242, 166, 159,
	103, 240, 164, 158, 149, 128, 138, 196, 156, 197,
	139, 169, 168, 170, 0, 0, 0, 226, 248, 264,
	113, 0, 0, 233, 258, 259, 0, 0, 114, 132,
	127, 195, 171, 110, 141, 223, 148, 155, 202, 262,
	185, 208, 117, 247, 224, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 105, 152, 261, 200, 130,
	249, 0, 0, 123, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 98, 99, 106, 112,
	118, 122, 126, 129, 134, 137, 140, 142, 143, 144,
	147, 157, 160, 161, 162, 163, 173, 174, 175, 177,
	180, 181, 182, 183, 184, 187, 189, 190, 191, 192,
	193, 194, 201, 204, 210, 211, 212, 213, 214, 215,
	216, 218, 219, 220, 221, 227, 230, 236, 237, 246,
	253, 257, 179, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 0, 0, 0, 151, 0, 0, 0,
	153, 0, 0, 225, 167, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 402, 0, 0, 0, 0, 0, 0, 0,
	0, 115, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 0, 0, 0,
	0, 0, 254, 0, 0, 0, 198, 0, 229, 136,
	150, 111, 97, 107, 0, 135, 176, 205, 209, 0,
	0, 0, 0, 0, 119, 0, 207, 186, 245, 0,
	188, 206, 154, 235, 199, 244, 255, 256, 232, 252,
	260, 222, 100, 231, 243, 116, 217, 102, 241, 228,
	165, 145, 146, 101, 0, 203, 124, 131, 121, 178,
	238, 239, 120, 263, 108, 251, 104, 109, 250, 172,
	234, 242, 166, 159, 103, 240, 164, 158, 149, 128,
	138, 196, 156, 197, 139, 169, 168, 170, 0, 0,
	0, 226, 248, 264, 113, 0, 0, 233, 258, 259,
	0, 0, 114, 132, 127, 195, 171, 110, 141, 223,
	148, 155, 202, 262, 185, 208, 117, 247, 224, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 105,
	152, 261, 200, 130, 249, 0, 0, 123, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	98, 99, 106, 112, 118, 122, 126, 129, 134, 137,
	140, 142, 143, 144, 147, 157, 160, 161, 162, 163,
	173, 174, 175, 177, 180, 181, 182, 183, 184, 187,
	189, 190, 191, 192, 193, 194, 201, 204, 210, 211,
	212, 213, 214, 215, 216, 218, 219, 220, 221, 227,
	230, 236, 237, 246, 253, 257, 179, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 0, 0, 0,
	151, 0, 0, 0, 153, 0, 0, 225, 167, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 0, 0, 0,
	0, 0, 0, 0, 0, 115, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 0, 0, 0, 0, 0, 254, 0, 0, 0,
	198, 0, 229, 136, 150, 111, 97, 107, 0, 135,
	176, 205, 209, 0, 0, 0, 0, 0, 119, 0,
	207, 186, 245, 0, 188, 206, 154, 235, 199, 244,
	255, 256, 232, 252, 260, 222, 100, 231, 243, 116,
	217, 102, 241, 228, 165, 145, 146, 101, 0, 203,
	124, 131, 121, 178, 238, 239, 120, 263, 108, 251,
	104, 109, 250, 172, 234, 242, 166, 159, 103, 240,
	164, 158, 149, 128, 138, 196, 156, 197, 139, 169,
	168, 170, 0, 0, 0, 226, 248, 264, 113, 0,
	0, 233, 258, 259, 0, 0, 114, 132, 127, 195,
	171, 110, 141, 223, 148, 155, 202, 262, 185, 208,
	117, 247, 224, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 105, 152, 261, 200, 130, 249, 0,
	0, 123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 99, 106, 112, 118, 122,
	126, 129, 134, 137, 140, 142, 143, 144, 147, 157,
	160, 161, 162, 163, 173, 174, 175, 177, 180, 181,
	182, 183, 184, 187, 189, 190, 191, 192, 193, 194,
	201, 204, 210, 211, 212, 213, 214, 215, 216, 218,
	219, 220, 221, 227, 230, 236, 237, 246, 253, 257,
	179, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 0, 0, 0, 151, 0, 0, 0, 153, 0,
	0, 225, 167, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	324, 0, 0, 0, 0, 0, 0, 0, 0, 115,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 133, 0, 0, 0, 0, 0,
	254, 0, 0, 0, 198, 0, 229, 136, 150, 111,
	97, 107, 0, 135, 176, 205, 209, 0, 0, 0,
	0, 0, 119, 0, 207, 186, 245, 0, 188, 206,
	154, 235, 199, 244, 255, 256, 232, 252, 260, 222,
	100, 231, 243, 116, 217, 102, 241, 228, 165, 145,
	146, 101, 0, 203, 124, 131, 121, 178, 238, 239,
	120, 263, 108, 251, 104, 109, 250, 172, 234, 242,
	166, 159, 103, 240, 164, 158, 149, 128, 138, 196,
	156, 197, 139, 169, 168, 170, 0, 0, 0, 226,
	248, 264, 113, 0, 0, 233, 258, 259, 0, 0,
	114, 132, 127, 195, 171, 110, 141, 223, 148, 155,
	202, 262, 185, 208, 117, 247, 224, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 105, 152, 261,
	200, 130, 249, 0, 0, 123, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 98, 99,
	106, 112, 118, 122, 126, 129, 134, 137, 140, 142,
	143, 144, 147, 157, 160, 161, 162, 163, 173, 174,
	175, 177, 180, 181, 182, 183, 184, 187, 189, 190,
	191, 192, 193, 194, 201, 204, 210, 211, 212, 213,
	214, 215, 216, 218, 219, 220, 221, 227, 230, 236,
	237, 246, 253, 257,
}
var yyPact = [...]int{

	1791, -1000, -277, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 972, 1066, -1000, -1000, -1000, -1000, -1000, -1000,
	321, 80, -1000, -1000, -1000, 126, -6, 14900, 125, 134,
	15568, -1000, 5, -1000, -1000, 15568, -1000, -1000, -1000, -100,
	-111, -1000, 755, -1000, -1000, 0, -1000, -1000, -1000, -1000,
	-1000, 951, 961, 805, 1023, 863, -1000, 7843, 106, 106,
	14566, 6841, -1000, -1000, 258, 15568, 120, 15568, -159, 97,
	97, 97, -1000, -1000, -1000, 15568, 95, 679, 95, 95,
	95, 15568, -1000, 190, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 15568, 677, 910, 3718, 43,
	3718, 3718, -1000, 3718, 3718, -1000, 3718, 17, 3718, -49,
	1020, 21, -32, -1000, 3718, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 528, 122,
	15568, 204, -1000, 932, 9191, 9191, 972, -1000, 755, -1000,
	-1000, -1000, 895, -1000, -1000, 315, 1052, -1000, 10861, 185,
	-1000, 9191, 1607, 757, -1000, -1000, 757, -1000, -1000, 148,
	-1000, -1000, 10193, 10193, 10193, 10193, 10193, 10193, 10193, 10193,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 757, -1000, 8857, 757, 757, 757,
	757, 757, 757, 757, 757, 9191, 757, 757, 757, 757,
	757, 757, 757, 757, 757, 757, 757, 757, 757, 757,
	757, 14225, 13223, 15568, 727, 689, -1000, -1000, 184, 744,
	6494, -109, -1000, -1000, -1000, 291, 12889, -1000, -1000, -1000,
	909, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 674, 15568, -1000, 306, -1000, 671, 947,
	113, 662, 327, 661, 15568, 749, 110, 15568, 923, 818,
	15568, 650, 649, -1000, 6147, -1000, 3718, 3718, -1000, -1000,
	-1000, 3718, 3718, 3718, 15568, 3718, 3718, -1000, -1000, -1000,
	-1000, -1000, 3718, 3718, -1000, 1051, 312, -1000, -1000, -1000,
	-1000, 9191, 216, -1000, 815, -1000, -1000, -1000, -1000, -1000,
	15568, 3718, 35, 70, 50, 15568, -1000, 1061, 213, 502,
	178, 747, -1000, 526, 951, 528, 863, 12555, 750, -1000,
	-1000, -1000, 15568, -1000, 9191, 9191, 589, -1000, 13891, -1000,
	-1000, 4759, 224, 10193, 393, 303, 10193, 10193, 10193, 10193,
	10193, 10193, 10193, 10193, 10193, 10193, 10193, 10193, 10193, 10193,
	10193, 482, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	617, -1000, 755, 620, 620, 196, 196, 196, 196, 196,
	196, 196, 10527, 946, 528, 647, 488, 8857, 7843, 7843,
	9191, 9191, 8511, 8177, 7843, 946, 293, 488, 15902, -1000,
	-1000, 9859, -1000, -1000, -1000, -1000, -1000, 528, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 15234, 15234, 7843, 7843, 7843,
	7843, 54, 15568, -1000, 703, 992, -1000, -1000, -1000, 937,
	11887, 12221, 54, 699, 13223, 15568, -1000, -1000, 13223, 15568,
	4412, 5800, 744, -109, 710, -1000, -131, -114, 7175, 187,
	-1000, -1000, -1000, -1000, 3371, 396, 562, -1000, -71, -1000,
	-1000, -1000, 766, -1000, 766, 766, 766, 766, -28, -28,
	-28, -28, -1000, -1000, -1000, -1000, -1000, 783, 782, -1000,
	766, 766, 766, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 781, 781, 781, 768, 768, 786, -1000, 15568, 3718,
	920, 3718, -1000, 15568, 15568, 742, -1000, 15568, 741, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 15568, 301, 15568, 15568, 488,
	-1000, 486, 15568, 66, -1000, 15568, 15568, 15568, 15568, 15568,
	135, -1000, 819, 9191, 9191, 5453, 9191, -1000, -1000, -1000,
	932, -1000, 946, 1005, -1000, 884, 883, 7843, -1000, -1000,
	224, 289, -1000, -1000, 407, -1000, -1000, -1000, -1000, 177,
	757, -1000, 2058, -1000, -1000, -1000, -1000, 393, 10193, 10193,
	10193, 323, 2058, 2210, 952, 1512, 196, 285, 285, 165,
	165, 165, 165, 165, 335, 335, -1000, -1000, -1000, 528,
	-1000, -1000, -1000, 7843, -1000, 9191, -1000, 528, 642, -1000,
	642, 470, 499, 256, 1050, 642, 247, 1048, 642, 642,
	7843, 322, -1000, 9191, 528, -1000, 173, -1000, 544, 739,
	735, 642, 528, 731, 642, 642, 686, 757, -1000, 15902,
	13223, 13223, 13223, 13223, 13223, -1000, 854, 848, -1000, 860,
	851, 866, 15568, -1000, 640, 11887, 182, 757, -1000, 13557,
	-1000, -1000, 1001, 13223, 730, -1000, 730, -1000, 171, -1000,
	-1000, 710, -109, -142, -1000, -1000, -1000, -1000, 488, -1000,
	509, 709, 3024, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	780, 614, -1000, 901, 221, 230, 608, 897, -1000, -1000,
	-1000, 160, -87, -1000, -1000, 410, -28, -28, -1000, -1000,
	187, 908, 187, 187, 187, 474, 474, -1000, -1000, -1000,
	-1000, 399, -1000, -1000, -1000, 392, -1000, 811, 15234, 755,
	925, -1000, -1000, -1000, 109, -1000, 3718, 15568, 312, -1000,
	471, 9191, -1000, -1000, -1000, -1000, -1000, 197, 197, 277,
	87, 87, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 53, 777, -1000, -1000, -1000, -1000, -8,
	33, 873, 488, 488, 155, -1000, -1000, 15568, -1000, -1000,
	-1000, -1000, 740, -1000, -1000, -1000, 4065, 7843, -1000, 323,
	2058, 1623, -1000, 10193, 10193, -1000, 528, 488, -1000, 7843,
	-1000, -1000, 92, 482, 92, 10193, 10193, -1000, 10193, 10193,
	-1000, -175, 734, 295, -1000, 9191, 459, -1000, 5453, -1000,
	10193, 10193, -1000, -1000, -1000, -1000, 810, 15902, 757, -1000,
	11541, 15234, 736, -1000, 290, 992, 776, 808, 911, -1000,
	-1000, -1000, -1000, 844, -1000, 841, -1000, -1000, -1000, -1000,
	-1000, 119, 118, 117, 15234, -1000, 972, 9191, 730, -1000,
	-1000, 205, -1000, -1000, -140, -133, -1000, -1000, -1000, 3371,
	-1000, 3371, 15234, 71, -1000, 608, 608, -1000, -1000, -1000,
	769, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 347, 10193,
	1060, -1000, 894, -1000, 892, 462, -1000, -1000, 558, 187,
	187, -1000, 257, -1000, -1000, -1000, 638, -1000, 634, 707,
	612, 15568, -1000, -1000, -1000, 15568, -1000, -1000, 301, -1000,
	488, -1000, 519, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 607, -1000, 599, 15568, -1000,
	-1000, -1000, -1000, -1000, 529, 596, 15234, -183, 546, 15234,
	15234, 15234, -1000, 5106, -1000, 1001, 13223, -1000, -1000, 528,
	-1000, 10193, 2058, 2058, -1000, -1000, 528, 766, 766, -1000,
	766, 768, -1000, 766, -10, 766, -11, 528, 528, 2132,
	1976, 1930, 1640, 757, -169, -1000, 488, 9191, -1000, 778,
	751, -1000, 914, 694, 701, -1000, -1000, 7509, 528, 605,
	152, 594, -1000, 972, 15902, 9191, -1000, -1000, 9191, 767,
	-1000, 9191, -1000, -1000, -1000, 757, 757, 757, 594, 951,
	488, -1000, -1000, -1000, -1000, 3024, -1000, 561, -1000, 766,
	-1000, -1000, -1000, 15234, -1000, 2058, -89, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -28, 439, -28, 389, -1000,
	385, 3718, -1000, 755, -1000, -1000, 529, 73, -1000, -1000,
	-1000, 199, -1000, -1000, 73, 529, 916, -1000, 5106, -1000,
	-1000, 760, 785, -1000, 998, 704, -1000, 2058, -1000, -1000,
	90, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10193,
	10193, 10193, 10193, 10193, 528, 426, 488, 10193, 10193, 886,
	-1000, 757, -1000, -1000, 738, 15234, 15234, -1000, 15234, 951,
	-1000, 488, 488, 15234, 488, 15234, 15234, 15234, 11195, -1000,
	157, 15234, -1000, 557, -1000, -1000, 187, -1000, 187, 551,
	545, -1000, -1000, 538, -1000, -1000, 512, 508, -1000, -1000,
	-1000, 73, 757, 702, -1000, 268, 15234, 15568, 993, 955,
	-1000, -1000, 544, 544, 544, 544, 41, -1000, -1000, 544,
	544, 1056, -1000, 757, -1000, 755, 141, -1000, -1000, -1000,
	550, 537, 537, 537, 182, 157, -1000, 501, 234, 397,
	-1000, 56, 15234, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 46, 5106, 3371, 534, -1000, -1000,
	9191, 9191, -1000, -1000, -1000, -1000, 528, 37, -186, -1000,
	-1000, 15902, 701, 528, 15234, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 371, -1000, -1000, 15568, -1000, -1000, -1000, 527,
	-1000, 15234, -1000, -1000, 777, 488, 700, -1000, 867, -181,
	-190, 683, -1000, -1000, -1000, 759, -1000, 46, 882, -183,
	-1000, 861, -1000, 15234, -1000, 42, -1000, -184, 523, 39,
	-188, 804, 757, -192, 791, -1000, 1036, 9525, -1000, -1000,
	1055, 208, 208, 544, 528, -1000, -1000, -1000, 78, 383,
	-1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1284, 104, 501, 1282, 1281, 1275, 1273, 1272, 1271,
	1270, 1265, 1263, 1262, 1260, 1257, 1256, 1255, 1254, 1252,
	1251, 1250, 1249, 1247, 1246, 1243, 1242, 1241, 1240, 88,
	1239, 1238, 1236, 62, 1235, 66, 1233, 1229, 47, 111,
	45, 40, 1451, 1226, 31, 107, 97, 1225, 37, 1224,
	1222, 67, 1221, 1220, 1218, 74, 1214, 1211, 1594, 1210,
	68, 1209, 13, 25, 1208, 1207, 1206, 1205, 69, 6,
	1204, 1202, 16, 1201, 1200, 100, 1199, 56, 9, 14,
	52, 24, 1198, 1066, 7, 1197, 51, 1195, 1194, 1193,
	1191, 26, 1186, 15, 58, 22, 1183, 17, 57, 1182,
	35, 61, 36, 21, 8, 70, 63, 1179, 19, 60,
	55, 1172, 1170, 527, 1167, 1166, 49, 1165, 1160, 29,
	1159, 318, 529, 1158, 1157, 1155, 1154, 1151, 1149, 53,
	1148, 103, 170, 43, 0, 862, 177, 64, 1146, 1145,
	1144, 1514, 44, 65, 23, 42, 1132, 1129, 39, 1128,
	1127, 1125, 1123, 1122, 1121, 1118, 1110, 90, 1109, 1106,
	1105, 27, 32, 1104, 1103, 59, 28, 1102, 1101, 1100,
	50, 20, 1099, 1098, 54, 33, 1097, 1094, 1091, 1090,
	1089, 30, 10, 1088, 18, 1087, 11, 1086, 34, 1083,
	1, 1079, 12, 1078, 5, 1076, 4, 48, 3, 1075,
	2, 1074, 1073, 621, 378, 73, 1072, 93,
}
var yyR1 = [...]int{

	0, 201, 202, 202, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 6, 3, 4,
	4, 5, 5, 7, 7, 32, 32, 8, 9, 9,
	9, 9, 205, 205, 53, 53, 51, 51, 52, 52,
	101, 101, 10, 10, 10, 10, 106, 106, 110, 110,
	110, 111, 111, 111, 111, 146, 146, 95, 11, 11,
	11, 11, 11, 11, 11, 196, 196, 195, 194, 194,
	193, 193, 192, 20, 177, 179, 179, 178, 178, 178,
	178, 171, 150, 150, 150, 150, 150, 150, 150, 149,
	149, 149, 149, 153, 153, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 152, 152, 152, 152, 152, 154,
	154, 154, 154, 154, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 156,
	156, 156, 156, 156, 156, 156, 156, 170, 170, 157,
	157, 165, 165, 166, 166, 166, 163, 163, 164, 164,
	167, 167, 159, 160, 168, 161, 161, 161, 162, 162,
	162, 169, 169, 169, 169, 158, 172, 172, 187, 187,
	186, 186, 186, 176, 176, 183, 183, 183, 183, 183,
	174, 174, 175, 175, 185, 185, 184, 173, 173, 188,
	188, 188, 188, 199, 200, 198, 198, 198, 198, 198,
	180, 180, 180, 181, 181, 181, 182, 182, 182, 16,
	16, 16, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 93, 93, 93, 18, 19, 19,
	19, 19, 19, 19, 19, 19, 129, 129, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 191, 189,
	189, 190, 190, 12, 21, 21, 13, 13, 13, 13,
	13, 14, 14, 22, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 117, 117, 115, 115, 118, 118, 116,
	116, 116, 119, 119, 119, 120, 120, 147, 147, 147,
	24, 24, 26, 26, 27, 28, 130, 130, 25, 25,
	25, 25, 25, 25, 25, 15, 206, 29, 30, 30,
	31, 31, 31, 35, 35, 35, 33, 33, 33, 34,
	34, 40, 40, 39, 39, 41, 41, 41, 41, 138,
	138, 138, 137, 137, 43, 43, 44, 44, 45, 45,
	46, 46, 46, 46, 61, 61, 100, 100, 102, 102,
	47, 47, 47, 47, 48, 48, 49, 49, 50, 50,
	128, 128, 144, 144, 144, 143, 143, 54, 54, 54,
	56, 55, 55, 55, 55, 57, 57, 59, 59, 58,
	58, 60, 62, 62, 62, 62, 63, 63, 42, 42,
	42, 42, 42, 42, 42, 114, 114, 65, 65, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 76,
	76, 76, 76, 76, 76, 66, 66, 66, 66, 66,
	66, 66, 38, 38, 77, 77, 77, 83, 78, 78,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 73, 73, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 207, 207, 75, 74, 74, 74, 74,
	74, 74, 36, 36, 36, 36, 36, 145, 145, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 87, 87, 37, 37, 85, 85, 86, 88,
	88, 84, 84, 84, 68, 68, 68, 68, 68, 68,
	68, 68, 70, 70, 70, 89, 89, 90, 90, 91,
	91, 92, 92, 94, 96, 96, 96, 97, 97, 97,
	97, 98, 98, 98, 67, 67, 67, 67, 67, 67,
	99, 99, 99, 99, 103, 103, 79, 79, 81, 81,
	80, 82, 104, 104, 108, 105, 105, 109, 109, 109,
	109, 107, 107, 107, 140, 140, 140, 112, 112, 121,
	121, 122, 122, 113, 113, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 127, 127, 126, 126, 126,
	124, 124, 125, 125, 125, 125, 139, 139, 135, 135,
	136, 136, 141, 141, 142, 142, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 203, 204, 131, 132, 132, 132,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 4, 6, 7, 5, 10, 1,
	3, 1, 3, 7, 8, 1, 1, 9, 8, 7,
	6, 6, 1, 1, 1, 3, 1, 3, 1, 3,
	0, 4, 3, 4, 5, 4, 1, 3, 3, 2,
	2, 2, 2, 2, 1, 1, 1, 0, 2, 2,
	8, 7, 9, 5, 5, 0, 2, 1, 0, 2,
	1, 3, 3, 4, 4, 2, 4, 1, 3, 3,
	3, 3, 0, 2, 2, 2, 2, 2, 2, 3,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 1, 4, 4, 2, 2, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 6, 6, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 1, 0, 1,
	1, 2, 2, 3, 1, 0, 3, 3, 0, 2,
	2, 2, 1, 2, 1, 2, 5, 4, 1, 2,
	2, 3, 2, 0, 1, 2, 3, 3, 2, 2,
	1, 1, 0, 1, 1, 3, 2, 3, 1, 10,
	11, 11, 12, 3, 3, 1, 1, 2, 2, 2,
	0, 1, 3, 1, 2, 3, 1, 1, 1, 1,
	1, 1, 6, 10, 9, 7, 7, 7, 9, 7,
	7, 9, 10, 5, 0, 1, 2, 4, 7, 5,
	5, 5, 12, 7, 5, 9, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 7, 1,
	3, 8, 8, 3, 3, 5, 4, 6, 4, 4,
	4, 3, 2, 3, 4, 4, 3, 4, 4, 4,
	4, 4, 4, 3, 3, 2, 3, 3, 2, 3,
	4, 3, 7, 5, 4, 2, 4, 4, 3, 3,
	5, 2, 3, 1, 1, 0, 1, 1, 1, 0,
	2, 2, 0, 2, 2, 0, 2, 0, 1, 1,
	2, 1, 1, 2, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 3, 3, 2, 0, 2, 0, 2,
	1, 2, 2, 0, 1, 1, 0, 1, 1, 0,
	1, 0, 1, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 1, 0, 2, 1, 3, 1, 1,
	1, 3, 1, 3, 3, 7, 1, 3, 1, 3,
	4, 4, 4, 3, 2, 4, 0, 1, 0, 2,
	0, 1, 0, 1, 2, 1, 1, 1, 2, 2,
	1, 2, 3, 2, 3, 2, 2, 2, 1, 1,
	3, 3, 0, 5, 5, 5, 0, 2, 1, 3,
	3, 2, 3, 1, 2, 0, 3, 1, 1, 3,
	3, 4, 4, 5, 3, 4, 5, 6, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 0, 2, 1, 1, 1, 3, 1, 3,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 2, 2, 2, 2, 2, 3, 1, 1,
	1, 1, 5, 6, 4, 4, 6, 6, 6, 8,
	8, 8, 8, 9, 7, 5, 4, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 8, 8, 0, 2, 3, 4, 4, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 2, 1, 2, 2,
	1, 2, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 0, 3, 0, 2, 0,
	3, 1, 3, 2, 0, 1, 1, 0, 2, 4,
	4, 0, 2, 4, 2, 1, 3, 5, 4, 6,
	1, 3, 3, 5, 0, 5, 1, 3, 1, 2,
	3, 1, 1, 3, 3, 1, 3, 3, 3, 3,
	3, 1, 2, 1, 1, 1, 1, 1, 1, 0,
	2, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 0, 1, 1, 1, 0, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -201, -1, -2, -6, -7, -8, -9, -10, -11,
	-16, -12, -13, -14, -22, -23, -24, -26, -27, -28,
	-25, -15, -3, -4, 6, 7, -32, 9, 10, 29,
	-20, 116, -17, -18, -19, 119, 118, 154, 120, 147,
	51, 168, 169, 171, 172, -130, 149, 152, 153, 30,
	31, 122, -203, 8, 254, 117, 148, 25, 55, -202,
	352, -91, 15, -31, 5, -29, -206, -29, -29, -29,
	-29, -29, -177, -179, 55, 91, -125, 128, 73, 246,
	125, 126, 33, 135, 134, 126, 126, 127, 128, 246,
	125, 126, -58, -141, 58, -134, 264, 138, 296, 297,
	168, 179, 173, 200, 192, 265, 298, 139, 190, 193,
	233, 137, 299, 220, 228, 67, 171, 242, 300, 150,
	188, 184, 301, 273, 182, 27, 302, 230, 205, 303,
	269, 183, 229, 122, 304, 141, 135, 305, 206, 210,
	306, 234, 307, 308, 309, 177, 178, 310, 236, 204,
	136, 32, 266, 36, 158, 237, 208, 311, 203, 199,
	312, 313, 314, 315, 202, 176, 198, 40, 212, 211,
	213, 232, 195, 316, 317, 318, 142, 319, 185, 18,
	320, 321, 322, 323, 324, 240, 153, 325, 156, 326,
	327, 328, 329, 330, 331, 231, 207, 209, 132, 160,
	268, 332, 238, 181, 333, 143, 157, 152, 241, 144,
	334, 335, 336, 337, 338, 339, 340, 172, 341, 342,
	343, 344, 167, 235, 244, 39, 217, 345, 175, 134,
	346, 169, 164, 223, 196, 159, 347, 348, 186, 187,
	201, 174, 197, 170, 161, 154, 349, 243, 218, 270,
	194, 191, 165, 350, 128, 162, 163, 351, 224, 225,
	166, 267, 239, 189, 219, 126, 109, 193, 233, 116,
	221, 222, 230, 127, 32, 231, 160, -147, 126, -115,
	220, 224, 225, 166, 58, 235, 234, 226, -141, 170,
	-58, -131, -131, -131, -131, 223, 223, -131, -2, -113,
	128, 225, 130, -97, 17, 16, -5, -3, -203, 6,
	20, 21, -35, 41, 42, -30, -41, 100, -42, -141,
	-64, 75, -69, 28, 58, -134, 23, -68, -65, -84,
	-82, -83, 109, 110, 111, 98, 99, 106, 76, 112,
	-73, -71, -72, -74, 60, 59, 68, 61, 62, 63,
	64, 69, 70, 71, -135, -80, -203, 45, 46, 255,
	256, 257, 258, 263, 259, 78, 35, 245, 253, 252,
	251, 249, 250, 247, 248, 261, 262, 131, 246, 104,
	254, -113, -113, 11, -51, -52, -58, -60, -141, -105,
	-146, 170, -109, 235, 234, -136, -107, -135, -133, 233,
	193, 232, 58, -134, 121, 146, 271, 74, 22, 24,
	215, 77, 109, 16, 78, 108, 255, 116, 49, 272,
	247, 248, 245, 257, 258, 246, 221, 28, 10, 274,
	25, 148, 21, 102, 118, 81, 82, 151, 23, 149,
	71, 145, 277, 19, 52, 11, 13, 278, 279, 14,
	131, 130, 93, 127, 47, 8, 112, 26, 90, 43,
	280, 34, 281, 282, 283, 284, 45, 91, 17, 249,
	250, 30, 285, 263, 155, 104, 50, 37, 75, 286,
	287, 69, 288, 72, 53, 73, 15, 48, 289, 290,
	291, 292, 92, 119, 254, 46, 293, 125, 6, 260,
	29, 147, 44, 294, 126, 80, 261, 262, 129, 70,
	5, 33, 31, 9, 51, 54, 251, 252, 253, 35,
	79, 12, 295, -178, 91, -171, 58, -58, 127, -58,
	254, -122, 131, -122, -122, -21, -58, -121, 131, 58,
	-121, -121, -121, -58, 113, -58, 58, 29, -132, -203,
	-136, 246, 58, 160, 126, 161, 128, -132, -132, -132,
	-132, -132, 164, 165, -132, -118, -117, 228, 229, 223,
	227, 12, 165, 223, 163, -132, -131, -131, -204, 57,
	126, -58, 116, 118, 121, 53, -98, 19, 30, -42,
	-141, -92, -94, -42, -91, -2, -29, 37, -33, 20,
	21, 66, 11, -138, 74, 73, 90, -137, 22, -135,
	60, 113, -42, -66, 93, 75, 91, 92, 77, 95,
	94, 105, 98, 99, 100, 101, 102, 103, 104, 96,
	97, 108, 83, 84, 85, 86, 87, 88, 89, -114,
	-203, -83, -203, 114, 115, -69, -69, -69, -69, -69,
	-69, -69, -69, -203, -2, -78, -42, -203, -203, -203,
	-203, -203, -203, -203, -203, -203, -87, -42, -203, -207,
	-75, -203, -207, -75, -207, -75, -207, -203, -207, -75,
	-207, -75, -207, -207, -75, -203, -203, -203, -203, -203,
	-203, -59, 26, -58, -44, -45, -46, -47, -61, -83,
	-203, -58, -58, -51, -205, 56, 11, 54, -205, 56,
	113, 56, -105, 170, -106, -110, 236, 238, 83, -140,
	-135, 60, 28, 29, 57, 56, -58, -149, -153, -155,
	-154, -156, -151, -152, 190, 191, 109, 194, 196, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 29, 150,
	186, 187, 188, 189, 206, 207, 208, 209, 210, 211,
	212, 213, 173, 192, 265, 174, 175, 176, 177, 178,
	179, 181, 182, 183, 184, 185, 58, 22, 128, 58,
	75, 58, -58, 56, 129, -51, 23, 53, -53, -58,
	58, 58, -142, -141, -133, -132, -132, -132, -132, -132,
	-58, -132, -132, -132, -132, 11, -116, 11, 93, -42,
	-120, 91, 53, -58, -132, 162, 162, 126, 126, 167,
	-58, 9, 93, 56, 18, 113, 56, -96, 24, 25,
	-97, -204, -35, -70, -135, 61, 64, -34, 44, -58,
	-42, -42, -76, 69, 75, 70, 71, -137, 100, -142,
	-136, -133, -69, -77, -80, -83, 65, 93, 91, 92,
	77, -69, -69, -69, -69, -69, -69, -69, -69, -69,
	-69, -69, -69, -69, -69, -69, -145, 58, 60, 58,
	-68, -68, -135, -33, -204, 56, -204, -2, -39, -41,
	-39, -42, -42, -84, 60, -39, -84, 60, -39, -39,
	-33, -85, -86, 79, -84, -135, -141, -204, -69, -135,
	-135, -39, -40, -39, -39, -39, -101, 156, -58, 29,
	56, -54, -56, -55, -57, 43, 47, 49, 44, 45,
	46, 50, -128, 22, -44, -203, -144, 156, -143, 22,
	-141, 60, -101, 54, -44, -58, -44, -60, -141, 100,
	-109, -106, 56, 237, 239, 240, 53, 72, -42, -162,
	108, -180, -181, -182, -136, 60, 61, -171, -172, -173,
	-183, 140, -188, 132, 134, 33, -174, 141, 127, 34,
	57, -150, -163, 218, -157, 55, -157, -157, -157, -157,
	-161, 193, -161, -161, -161, 55, 55, -157, -157, -157,
	-165, 55, -165, -165, -166, 55, -166, -139, 54, -95,
	-58, -132, 23, -132, -58, -58, -58, 56, -58, -119,
	91, 12, -141, -141, 60, -58, -123, 121, 118, 119,
	123, 124, -191, 117, 215, 193, 67, 28, 15, 255,
	156, 270, 58, 157, -58, -58, -58, -58, -58, 121,
	118, 39, -42, -42, -142, -94, -98, -112, 19, 11,
	35, 35, -39, 69, 70, 71, 113, -203, -77, -69,
	-69, -69, -38, 151, 74, -204, -40, -42, -204, 56,
	-204, -204, 56, 54, 22, 11, 11, -204, 11, 11,
	-204, -204, -39, -88, -86, 81, -42, -204, 113, -204,
	56, 56, -204, -204, -204, -204, -67, 29, 35, -2,
	-203, -203, -104, -108, -84, -45, -46, -46, -45, -46,
	43, 43, 43, 48, 43, 48, 43, -55, -141, -204,
	-62, 51, 130, 52, -203, -143, -63, 12, -44, -63,
	-63, 113, -110, -111, 241, 238, 244, 58, 60, 56,
	-182, 83, 55, 58, 34, -174, -174, -175, 58, -175,
	34, -167, -159, -160, -168, -169, -158, 69, 75, 28,
	53, 215, 132, 34, 33, 67, -164, 219, 61, -161,
	-161, -162, 29, -162, -162, -162, -170, 60, -170, 61,
	61, 53, -135, -2, 22, 129, -132, -58, -116, 60,
	-42, -131, -129, -197, 133, 137, 140, 141, 135, 127,
	34, 132, 134, 156, 33, -129, -197, 133, -126, -124,
	129, 22, 127, 34, -129, -129, 156, -196, 54, 162,
	215, 162, 40, 113, -58, -43, 11, 100, -136, -40,
	-38, 74, -69, -69, -204, -41, -148, 109, 190, 150,
	188, 184, 204, 195, 217, 186, 218, -145, -148, -69,
	-69, -69, -69, 264, -91, 82, -42, 80, -136, -69,
	-69, -103, 53, -104, -79, -81, -80, -203, -2, -99,
	-135, -102, -135, -63, 56, 83, -49, -48, 53, 54,
	-50, 53, -48, 43, 43, 127, 127, 127, -102, -91,
	-42, -63, 238, 242, 243, -181, -182, -185, -184, -135,
	-188, -175, -175, 55, 69, -69, 9, 34, 34, 60,
	57, -162, -162, 58, 109, 57, 56, 57, 56, 57,
	56, -58, -95, -95, -58, -119, 55, -171, -131, 58,
	-131, 58, -58, -131, -171, 58, -135, -194, 267, -195,
	58, -135, -135, -135, -63, -44, -204, -69, -204, -157,
	-157, -157, -166, -157, 178, -157, 178, -204, -204, 19,
	19, 19, 19, -203, -37, 260, -42, 56, 56, 27,
	-103, 56, -204, -204, -204, 56, 113, -204, 56, -91,
	-108, -42, -42, 55, -42, -203, -203, -203, -204, -97,
	57, 56, -157, -100, -135, -72, -161, 60, -161, 61,
	61, -132, -2, -171, -93, 145, 146, -127, 129, 22,
	-93, -171, 26, -193, -192, -136, 55, 54, -89, 13,
	-161, 58, -69, -69, -69, -69, -69, -204, 60, -69,
	-69, 34, -81, 35, -2, -203, -135, -135, -135, -97,
	-100, -100, -100, -100, -144, -187, -186, 54, 136, 67,
	-184, 57, 56, -162, -162, 57, 57, -95, 57, -131,
	58, 58, -131, -93, -203, 56, 83, -100, -58, -90,
	14, 16, -204, -204, -204, -204, -36, 93, 267, -204,
	-204, 9, -79, -2, 113, 57, -204, -204, -204, -62,
	-186, 58, -176, 83, 60, 143, -135, -131, -131, -189,
	-190, 156, -192, -182, 57, -42, -78, -204, 265, 50,
	268, -104, -204, -135, 61, -58, -204, 56, -135, -196,
	40, 266, 269, 55, -190, 35, -194, 40, -100, 158,
	267, 57, 159, 268, -199, -200, 53, -203, 269, -200,
	53, 10, 9, -69, 155, -198, 144, 139, 142, 29,
	-198, -204, -204, 138, 28, 69,
}
var yyDef = [...]int{

	23, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 579, 0, 336, 336, 336, 336, 336, 336,
	0, 652, 219, 220, 221, 0, 0, 0, 0, -2,
	321, 322, 0, 324, 325, 956, 956, 956, 956, 0,
	0, 956, 0, 35, 36, 633, 326, 327, 954, 1,
	3, 587, 0, 0, 340, 343, 338, 0, 633, 633,
	0, 0, 68, 69, 0, 0, 0, 0, 0, 631,
	631, 631, 653, 654, 655, 0, 629, 0, 629, 629,
	629, 0, 272, 409, 662, 663, 785, 786, 787, 788,
	789, 790, 791, 792, 793, 794, 795, 796, 797, 798,
	799, 800, 801, 802, 803, 804, 805, 806, 807, 808,
	809, 810, 811, 812, 813, 814, 815, 816, 817, 818,
	819, 820, 821, 822, 823, 824, 825, 826, 827, 828,
	829, 830, 831, 832, 833, 834, 835, 836, 837, 838,
	839, 840, 841, 842, 843, 844, 845, 846, 847, 848,
	849, 850, 851, 852, 853, 854, 855, 856, 857, 858,
	859, 860, 861, 862, 863, 864, 865, 866, 867, 868,
	869, 870, 871, 872, 873, 874, 875, 876, 877, 878,
	879, 880, 881, 882, 883, 884, 885, 886, 887, 888,
	889, 890, 891, 892, 893, 894, 895, 896, 897, 898,
	899, 900, 901, 902, 903, 904, 905, 906, 907, 908,
	909, 910, 911, 912, 913, 914, 915, 916, 917, 918,
	919, 920, 921, 922, 923, 924, 925, 926, 927, 928,
	929, 930, 931, 932, 933, 934, 935, 936, 937, 938,
	939, 940, 941, 942, 943, 944, 945, 946, 947, 948,
	949, 950, 951, 952, 953, 0, 0, 0, 957, 0,
	957, 957, 285, 957, 957, 288, 957, 0, 957, 0,
	295, 0, 0, 301, 957, 318, 319, 306, 320, 323,
	328, 329, 330, 331, 332, 956, 956, 335, 29, 0,
	0, 0, 634, 591, 0, 0, 579, 31, 0, 336,
	341, 342, 346, 344, 345, 337, 0, 355, 359, 0,
	418, 0, 423, 425, -2, -2, 0, 460, 461, 462,
	463, 464, 0, 0, 0, 0, 0, 0, 0, 0,
	488, 489, 490, 491, 564, 565, 566, 567, 568, 569,
	570, 571, 427, 428, 561, 611, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 552, 0, 523, 523, 523,
	523, 523, 523, 523, 523, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 46, 48, 409, 52,
	0, 932, 615, -2, -2, 0, 0, 660, 661, -2,
	798, -2, 658, 659, 666, 667, 668, 669, 670, 671,
	672, 673, 674, 675, 676, 677, 678, 679, 680, 681,
	682, 683, 684, 685, 686, 687, 688, 689, 690, 691,
	692, 693, 694, 695, 696, 697, 698, 699, 700, 701,
	702, 703, 704, 705, 706, 707, 708, 709, 710, 711,
	712, 713, 714, 715, 716, 717, 718, 719, 720, 721,
	722, 723, 724, 725, 726, 727, 728, 729, 730, 731,
	732, 733, 734, 735, 736, 737, 738, 739, 740, 741,
	742, 743, 744, 745, 746, 747, 748, 749, 750, 751,
	752, 753, 754, 755, 756, 757, 758, 759, 760, 761,
	762, 763, 764, 765, 766, 767, 768, 769, 770, 771,
	772, 773, 774, 775, 776, 777, 778, 779, 780, 781,
	782, 783, 784, 0, 0, 87, 0, 85, 0, 0,
	0, 0, 0, 0, 0, 263, 0, 0, 0, 0,
	0, 0, 0, 271, 0, 273, 957, 957, 276, 958,
	959, 957, 957, 957, 0, 957, 957, 283, 284, 286,
	287, 289, 957, 957, 291, 0, 309, 307, 308, 303,
	304, 0, 315, 298, 299, 302, 333, 334, 30, 955,
	0, 957, 0, 0, 0, 0, 24, 0, 0, 588,
	0, 580, 581, 584, 587, 29, 343, 0, 349, 347,
	348, 339, 0, 356, 0, 0, 0, 360, 0, 362,
	363, 0, 421, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 445, 446, 447, 448, 449, 450, 451, 424,
	0, 438, 0, 0, 0, 480, 481, 482, 483, 484,
	485, 486, 0, 346, 29, 0, 458, 0, 0, 0,
	0, 0, 0, 0, 0, 346, 0, 553, 0, 507,
	515, 0, 508, 516, 509, 517, 510, 0, 511, 518,
	512, 519, 513, 514, 520, 0, 0, 0, 351, 0,
	0, 50, 0, 408, 0, 366, 368, 369, 370, -2,
	0, 392, -2, 0, 0, 0, 42, 43, 0, 0,
	0, 0, 53, 932, 55, 56, 0, 0, 0, 168,
	624, 625, 626, 622, 210, 0, 0, 92, 156, 100,
	101, 102, 149, 104, 149, 149, 149, 149, 165, 165,
	165, 165, 132, 133, 134, 135, 136, 0, 0, 119,
	149, 149, 149, 123, 139, 140, 141, 142, 143, 144,
	145, 146, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 151, 151, 151, 153, 153, 656, 67, 0, 957,
	0, 957, 83, 0, 0, 266, 630, 0, 268, 44,
	269, 270, 410, 664, 665, 274, 275, 277, 278, 279,
	280, 281, 282, 290, 294, 0, 312, 0, 0, 296,
	297, 0, 0, 0, 237, 0, 0, 0, 0, 0,
	0, 592, 0, 0, 0, 0, 0, 583, 585, 586,
	591, 32, 346, 0, 572, 0, 0, 0, 350, 27,
	419, 420, 422, 439, 0, 441, 443, 361, 357, 0,
	562, -2, 429, 430, 454, 455, 456, 0, 0, 0,
	0, 452, 434, 0, 465, 466, 467, 468, 469, 470,
	471, 472, 473, 474, 475, 476, 479, 537, 538, 0,
	477, 478, 487, 351, 457, 0, 610, 29, 0, 353,
	0, 0, 0, 462, 564, 0, 462, 564, 0, 0,
	0, 559, 556, 0, 0, 561, 0, 524, 0, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 407, 0,
	0, 0, 0, 0, 0, 397, 0, 0, 400, 0,
	0, 0, 0, 391, 0, 0, 412, 877, 393, 0,
	395, 396, 416, 0, 416, 47, 416, 49, 0, 411,
	616, 54, 0, 0, 59, 60, 617, 618, 619, 620,
	0, 84, 211, 213, 216, 217, 218, 88, 89, 90,
	0, 0, 198, 0, 0, 192, 192, 0, 190, 191,
	86, 91, 158, 157, 103, 0, 165, 165, 126, 127,
	168, 0, 168, 168, 168, 0, 0, 120, 121, 122,
	114, 0, 115, 116, 117, 0, 118, 0, 0, 0,
	0, 73, 632, 74, 0, 264, 957, 0, 309, 293,
	0, 0, 310, 311, 316, 300, 956, 246, 246, 647,
	246, 246, 233, 635, 636, 637, 638, 639, 640, 641,
	642, 643, 644, 0, 75, 239, 241, 240, 244, 0,
	0, 0, 589, 590, 0, 582, 25, 0, 627, 628,
	573, 574, 364, 440, 442, 444, 0, 351, 431, 452,
	435, 0, 432, 0, 0, 426, 0, 459, -2, 0,
	494, 495, 0, 0, 0, 0, 0, 530, 0, 0,
	531, 0, 579, 0, 557, 0, 0, 506, 0, 525,
	0, 0, 526, 527, 528, 529, 604, 0, 0, -2,
	0, 0, 416, 612, 0, 367, 386, 388, 0, 383,
	398, 399, 401, 0, 403, 0, 405, 406, 371, 373,
	374, 0, 0, 0, 0, 394, 579, 0, 416, 40,
	41, 0, 57, 58, 0, 0, 64, 169, 170, 0,
	214, 0, 0, 0, 185, 192, 192, 188, 193, 189,
	0, 93, 94, 95, 96, 97, 98, 160, 0, 0,
	0, 164, 0, 172, 174, 0, 99, 159, 0, 168,
	168, 128, 0, 129, 130, 131, 0, 147, 0, 0,
	0, 0, 657, -2, 67, 0, 267, 45, 312, 313,
	314, 222, 0, 956, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 257, 0, 956, 0, 0, 956,
	648, 649, 650, 651, 0, 0, 0, 78, 0, 0,
	0, 0, 593, 0, 26, 416, 0, 358, 563, 0,
	433, 0, 453, 436, 492, 354, 0, 149, 149, 542,
	149, 153, 545, 149, 547, 149, 550, 0, 0, 0,
	0, 0, 0, 0, 554, 505, 560, 0, 562, 0,
	0, 33, 0, 604, 594, 606, 608, 0, 29, 0,
	600, 0, 378, 579, 0, 0, 380, 387, 0, 0,
	381, 0, 382, 402, 404, 0, 0, 0, 0, 587,
	417, 39, 61, 62, 63, 212, 215, 0, 194, 149,
	197, 186, 187, 0, 161, 162, 0, 171, 173, 175,
	150, 124, 125, 166, 167, 165, 0, 165, 0, 154,
	0, 957, 71, 0, 265, 292, 0, 234, 225, 226,
	227, 0, 229, 230, 234, 0, 0, 238, 0, 76,
	77, 0, 0, 243, 575, 365, 493, 437, 496, 539,
	165, 543, 544, 546, 548, 549, 551, 498, 497, 0,
	0, 0, 0, 0, 0, 0, 558, 0, 0, 0,
	34, 0, 609, -2, 0, 0, 0, 51, 0, 587,
	613, 614, 384, 0, 389, 0, 0, 0, 392, 38,
	177, 0, 196, 0, 376, 163, 168, 148, 168, 0,
	0, 70, -2, 0, 956, 235, 0, 0, 645, 646,
	956, 234, 0, 79, 80, 0, 0, 0, 577, 0,
	540, 541, 0, 0, 0, 0, 532, 504, 555, 0,
	0, 0, 607, 0, -2, 0, 602, 601, 379, 37,
	0, 0, 0, 0, 412, 176, 178, 0, 183, 0,
	195, 0, 0, 137, 138, 152, 155, 72, 956, 224,
	236, 228, 231, 956, 0, 0, 0, 0, 245, 28,
	0, 0, 499, 501, 500, 502, 0, 0, 0, 521,
	522, 0, 597, 29, 0, 385, 413, 414, 415, 375,
	179, 180, 0, 184, 182, 0, 377, 223, 232, 0,
	259, 0, 81, 82, 75, 578, 576, 503, 0, 0,
	0, 605, -2, 603, 181, 0, 258, 0, 0, 78,
	533, 0, 536, 0, 260, 0, 242, 534, 0, 0,
	0, 199, 0, 0, 200, 201, 0, 0, 535, 202,
	0, 0, 0, 0, 0, 203, 205, 206, 0, 0,
	204, 261, 262, 207, 208, 209,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 76, 3, 3, 3, 103, 95, 3,
	55, 57, 100, 98, 56, 99, 113, 101, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 352,
	84, 83, 85, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 94, 3, 106,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 77, 78, 79, 80, 81, 82, 86, 87, 88,
	89, 90, 91, 92, 93, 96, 97, 102, 104, 107,
	108, 109, 110, 111, 112, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:334
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:339
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:340
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:344
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:366
		{
			setParseTree(yylex, nil)
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:372
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:380
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:384
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:390
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 28:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:397
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:403
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:407
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:413
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:417
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:424
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:436
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:448
		{
			yyVAL.str = InsertStr
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:452
		{
			yyVAL.str = ReplaceStr
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:458
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:464
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:468
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:472
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:476
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:481
		{
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:482
		{
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:486
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName.ToViewName()}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:490
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName.ToViewName())
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:496
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:500
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:506
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:510
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 50:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:515
		{
			yyVAL.partitions = nil
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:519
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:525
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:529
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:533
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:537
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:543
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:547
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:553
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:557
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:561
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:567
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:571
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:575
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:579
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:585
		{
			yyVAL.str = SessionStr
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:589
		{
			yyVAL.str = GlobalStr
		}
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:594
		{
			yyVAL.int = yyPosition(yylex)
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:600
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:605
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 70:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:611
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 71:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:616
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[3].tableName.ToViewName(), ViewExpr: yyDollar[6].selStmt, ViewSelectPositionStart: yyDollar[5].int, ViewSelectPositionEnd: yyDollar[7].int - 1}
		}
	case 72:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:620
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[5].tableName.ToViewName(), ViewExpr: yyDollar[8].selStmt, ViewSelectPositionStart: yyDollar[7].int, ViewSelectPositionEnd: yyDollar[9].int - 1, OrReplace: true}
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:624
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 74:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:628
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:633
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:637
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:643
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:648
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:653
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:659
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:664
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:670
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:676
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName, IfNotExists: ne}
			setDDL(yylex, yyVAL.ddl)
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:687
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:694
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:698
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:704
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:709
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:713
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:717
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:723
		{
			if err := yyDollar[2].columnType.merge(yyDollar[3].columnType); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:732
		{
			yyVAL.columnType = ColumnType{}
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:736
		{
			opt := ColumnType{NotNull: yyDollar[2].boolVal, sawnull: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:745
		{
			opt := ColumnType{Default: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:754
		{
			opt := ColumnType{OnUpdate: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:763
		{
			opt := ColumnType{Autoincrement: yyDollar[2].boolVal, sawai: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:772
		{
			opt := ColumnType{KeyOpt: yyDollar[2].colKeyOpt}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:781
		{
			opt := ColumnType{Comment: yyDollar[2].sqlVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:792
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:803
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:808
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:814
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:818
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:822
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:826
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:830
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:834
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:838
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:842
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:846
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:852
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:858
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:864
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:870
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:876
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:884
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:888
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:892
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:896
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:900
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:906
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:910
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:914
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:918
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:922
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:926
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:930
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:934
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:938
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:942
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:946
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:950
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:954
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:958
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 138:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:963
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:969
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:973
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:977
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:981
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:985
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:989
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:993
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:997
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1003
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1008
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1013
		{
			yyVAL.sqlVal = nil
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1017
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1022
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 152:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1026
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1034
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1038
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 155:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1044
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1052
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1056
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1061
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1065
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1072
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1076
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1082
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1088
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1094
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1099
		{
			yyVAL.str = ""
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1103
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1107
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1112
		{
			yyVAL.str = ""
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1116
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1120
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1126
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1130
		{
			yyVAL.colKeyOpt = colKey
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1134
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1138
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1144
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1150
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 177:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1154
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1160
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1164
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1170
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1174
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1179
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1185
		{
			yyVAL.str = ""
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1189
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1195
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1199
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1203
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1207
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1211
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1217
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1221
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1226
		{
			yyVAL.str = ""
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1230
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1236
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1240
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1246
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1252
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1256
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 199:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1263
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 200:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1267
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 201:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1271
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 202:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1275
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1281
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1287
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1293
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1297
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1301
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1305
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1309
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 210:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1314
		{
			yyVAL.str = ""
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1318
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1322
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1330
		{
			yyVAL.str = yyDollar[1].str
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1334
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1338
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1344
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1348
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1352
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 222:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1363
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 223:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1367
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			ddl.Column = yyDollar[8].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 224:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1374
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 225:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1381
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 226:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1385
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: DropStr, Column: NewColIdent(string(yyDollar[7].bytes)), Table: yyDollar[4].tableName}
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1389
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 228:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1393
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: RenameStr, Table: yyDollar[4].tableName, Column: NewColIdent(string(yyDollar[7].bytes)), ToColumn: NewColIdent(string(yyDollar[9].bytes))}
		}
	case 229:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1397
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 230:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1402
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 231:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1407
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ModifyStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 232:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1414
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ChangeStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, Column: NewColIdent(string(yyDollar[7].bytes)), ColumnOrder: yyDollar[9].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			yyVAL.statement = ddl
		}
	case 233:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1420
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 234:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1425
		{
			yyVAL.columnOrder = nil
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1429
		{
			yyVAL.columnOrder = &ColumnOrder{First: true}
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1433
		{
			yyVAL.columnOrder = &ColumnOrder{AfterColumn: NewColIdent(string(yyDollar[2].bytes))}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1439
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 238:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1445
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 239:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1457
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 240:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1467
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 241:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1471
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 242:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1475
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 243:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1488
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 244:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1498
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 245:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1502
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 246:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1515
		{
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1517
		{
		}
	case 258:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1533
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1539
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1543
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 261:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1549
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 262:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1553
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1559
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1565
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 265:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1569
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1577
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 267:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1585
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1590
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromViews: yyDollar[4].tableNames, IfExists: exists}
		}
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1598
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1602
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1608
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1612
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1617
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1623
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1628
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1632
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1636
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1641
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1645
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1649
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1653
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1657
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1661
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1665
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1669
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1673
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1677
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1681
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1685
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1689
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1693
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1697
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 293:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1702
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1712
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1716
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1720
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1726
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1731
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1735
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1739
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1743
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1757
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1763
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1767
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1773
		{
			yyVAL.str = ""
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1777
		{
			yyVAL.str = "full "
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1783
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1787
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1793
		{
			yyVAL.str = ""
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1797
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1801
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1807
		{
			yyVAL.showFilter = nil
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1811
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1815
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1821
		{
			yyVAL.showFilter = nil
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1825
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1831
		{
			yyVAL.str = ""
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1835
		{
			yyVAL.str = SessionStr
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1839
		{
			yyVAL.str = GlobalStr
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1845
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1849
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1855
		{
			yyVAL.statement = &Begin{}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1859
		{
			yyVAL.statement = &Begin{}
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1865
		{
			yyVAL.statement = &Commit{}
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1871
		{
			yyVAL.statement = &Rollback{}
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1876
		{
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1877
		{
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1882
		{
			yyVAL.statement = &Show{Type: "columns", OnTable: yyDollar[2].tableName}
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1886
		{
			yyVAL.statement = &OtherRead{}
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1890
		{
			yyVAL.statement = &OtherRead{}
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1894
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1898
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1902
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1906
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1912
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1916
		{
			setAllowComments(yylex, true)
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1920
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1926
		{
			yyVAL.bytes2 = nil
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1930
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1936
		{
			yyVAL.str = UnionStr
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1940
		{
			yyVAL.str = UnionAllStr
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1944
		{
			yyVAL.str = UnionDistinctStr
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1949
		{
			yyVAL.str = ""
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1953
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1957
		{
			yyVAL.str = SQLCacheStr
		}
	case 346:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1962
		{
			yyVAL.str = ""
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1966
		{
			yyVAL.str = ""
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1970
		{
			yyVAL.str = DistinctStr
		}
	case 349:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1975
		{
			yyVAL.str = ""
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1979
		{
			yyVAL.str = StraightJoinHint
		}
	case 351:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1984
		{
			yyVAL.selectExprs = nil
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1988
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1994
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1998
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2004
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2008
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2012
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 358:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2016
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2021
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2025
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2029
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2036
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 364:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2041
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2045
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2051
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2055
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2065
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2069
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2073
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2079
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2085
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 375:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2089
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2095
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2099
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2105
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2109
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 380:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2122
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 381:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2126
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 382:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2130
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2134
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2140
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 385:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2142
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 386:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2146
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2148
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 388:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2152
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2154
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 390:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2157
		{
			yyVAL.empty = struct{}{}
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2159
		{
			yyVAL.empty = struct{}{}
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2162
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2166
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2170
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2177
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2183
		{
			yyVAL.str = JoinStr
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2187
		{
			yyVAL.str = JoinStr
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2191
		{
			yyVAL.str = JoinStr
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2197
		{
			yyVAL.str = StraightJoinStr
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2203
		{
			yyVAL.str = LeftJoinStr
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2207
		{
			yyVAL.str = LeftJoinStr
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2211
		{
			yyVAL.str = RightJoinStr
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2215
		{
			yyVAL.str = RightJoinStr
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2221
		{
			yyVAL.str = NaturalJoinStr
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2225
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2235
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2239
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2245
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2249
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2255
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2260
		{
			yyVAL.indexHints = nil
		}
	case 413:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2264
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 414:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2268
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 415:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2272
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 416:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2277
		{
			yyVAL.expr = nil
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2281
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2287
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2291
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2295
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2299
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2303
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2307
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2311
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2317
		{
			yyVAL.str = ""
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2321
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2327
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2331
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2337
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2341
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 431:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2345
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 432:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2349
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 433:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2353
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2357
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 435:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2361
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 436:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2365
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 437:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2369
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2373
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2379
		{
			yyVAL.str = IsNullStr
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2383
		{
			yyVAL.str = IsNotNullStr
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2387
		{
			yyVAL.str = IsTrueStr
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2391
		{
			yyVAL.str = IsNotTrueStr
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2395
		{
			yyVAL.str = IsFalseStr
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2399
		{
			yyVAL.str = IsNotFalseStr
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2405
		{
			yyVAL.str = EqualStr
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2409
		{
			yyVAL.str = LessThanStr
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2413
		{
			yyVAL.str = GreaterThanStr
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2417
		{
			yyVAL.str = LessEqualStr
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2421
		{
			yyVAL.str = GreaterEqualStr
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2425
		{
			yyVAL.str = NotEqualStr
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2429
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 452:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2434
		{
			yyVAL.expr = nil
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2438
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2444
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2448
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2452
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2458
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2464
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2468
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2474
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2478
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2482
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2486
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2490
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2494
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2498
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2502
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2506
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2510
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2514
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2518
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2522
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2526
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2530
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2534
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2538
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2542
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2546
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2550
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2554
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2558
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2562
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2566
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2574
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2588
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2592
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2596
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 492:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2614
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: yyDollar[3].str == DistinctStr, Exprs: yyDollar[4].selectExprs}
		}
	case 493:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2618
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 494:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2628
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 495:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2632
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 496:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2636
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 497:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2640
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 498:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2644
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 499:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2648
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 500:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2652
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 501:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2656
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 502:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2660
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 503:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2664
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 504:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2668
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 505:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2672
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 506:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2676
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2686
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2690
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2694
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2699
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2704
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2709
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2715
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2720
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2725
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2729
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2733
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2738
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2743
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2748
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 521:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2752
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 522:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2756
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2766
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2776
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 527:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2780
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 528:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2784
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 529:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2788
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 530:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2792
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 531:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2796
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 532:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2802
		{
			yyVAL.str = ""
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2806
		{
			yyVAL.str = BooleanModeStr
		}
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2810
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 535:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2814
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2818
		{
			yyVAL.str = QueryExpansionStr
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2824
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2828
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2834
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2838
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2842
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2846
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2850
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2854
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2860
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2864
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2868
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2872
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2876
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2880
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2884
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 552:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2889
		{
			yyVAL.expr = nil
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2893
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 554:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2898
		{
			yyVAL.str = string("")
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2902
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2908
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2912
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 558:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2918
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 559:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2923
		{
			yyVAL.expr = nil
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2927
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2933
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2937
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 563:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2941
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2947
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2951
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2955
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2959
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2963
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2967
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2971
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2975
		{
			yyVAL.expr = &NullVal{}
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2981
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2990
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2994
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 575:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2999
		{
			yyVAL.exprs = nil
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3003
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 577:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3008
		{
			yyVAL.expr = nil
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3012
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 579:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3017
		{
			yyVAL.orderBy = nil
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3021
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3027
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3031
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3037
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 584:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3042
		{
			yyVAL.str = AscScr
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3046
		{
			yyVAL.str = AscScr
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3050
		{
			yyVAL.str = DescScr
		}
	case 587:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3055
		{
			yyVAL.limit = nil
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3059
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 589:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3063
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 590:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3067
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 591:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3072
		{
			yyVAL.str = ""
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3076
		{
			yyVAL.str = ForUpdateStr
		}
	case 593:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3080
		{
			yyVAL.str = ShareModeStr
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3093
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3097
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3101
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 597:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3106
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 598:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3110
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 599:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3114
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3121
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3125
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3129
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 603:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3133
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 604:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3138
		{
			yyVAL.updateExprs = nil
		}
	case 605:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3142
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3148
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3152
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3158
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3162
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3168
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3174
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3184
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3188
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3194
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3200
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3204
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3210
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3214
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3218
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3222
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3229
		{
			yyVAL.bytes = []byte("charset")
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3236
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3240
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3244
		{
			yyVAL.expr = &Default{}
		}
	case 629:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3253
		{
			yyVAL.byt = 0
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3255
		{
			yyVAL.byt = 1
		}
	case 631:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3258
		{
			yyVAL.byt = 0
		}
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3260
		{
			yyVAL.byt = 1
		}
	case 633:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3263
		{
			yyVAL.str = ""
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3265
		{
			yyVAL.str = IgnoreStr
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3269
		{
			yyVAL.empty = struct{}{}
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3271
		{
			yyVAL.empty = struct{}{}
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3273
		{
			yyVAL.empty = struct{}{}
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3275
		{
			yyVAL.empty = struct{}{}
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3277
		{
			yyVAL.empty = struct{}{}
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3279
		{
			yyVAL.empty = struct{}{}
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3281
		{
			yyVAL.empty = struct{}{}
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3283
		{
			yyVAL.empty = struct{}{}
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3285
		{
			yyVAL.empty = struct{}{}
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3287
		{
			yyVAL.empty = struct{}{}
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3291
		{
			yyVAL.empty = struct{}{}
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3293
		{
			yyVAL.empty = struct{}{}
		}
	case 647:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3296
		{
			yyVAL.empty = struct{}{}
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3298
		{
			yyVAL.empty = struct{}{}
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3300
		{
			yyVAL.empty = struct{}{}
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3304
		{
			yyVAL.empty = struct{}{}
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3306
		{
			yyVAL.empty = struct{}{}
		}
	case 652:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3309
		{
			yyVAL.empty = struct{}{}
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3311
		{
			yyVAL.empty = struct{}{}
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3313
		{
			yyVAL.empty = struct{}{}
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3315
		{
			yyVAL.empty = struct{}{}
		}
	case 656:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3318
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3320
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3324
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3328
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3335
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3341
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3345
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3352
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3666
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3675
		{
			decNesting(yylex)
		}
	case 956:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3680
		{
			skipToEnd(yylex)
		}
	case 957:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3685
		{
			skipToEnd(yylex)
		}
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3689
		{
			skipToEnd(yylex)
		}
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3693
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
