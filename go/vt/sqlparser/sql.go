// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

import "fmt"

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func yyPosition(yylex interface{}) int {
	return yylex.(*Tokenizer).Position
}

func yyOldPosition(yylex interface{}) int {
	return yylex.(*Tokenizer).OldPosition
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:63
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ddls                     []*DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	int                      int
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	statements               Statements
	partitions               Partitions
	colName                  *ColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	subquery                 *Subquery
	simpleTableExpr          SimpleTableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	asOf                     *AsOf
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	boolean                  bool
	sqlVal                   *SQLVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	assignExprs              AssignmentExprs
	assignExpr               *AssignmentExpr
	setVarExprs              SetVarExprs
	setVarExpr               *SetVarExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	columnOrder              *ColumnOrder
	triggerOrder             *TriggerOrder
	colKeyOpt                ColumnKeyOption
	optVal                   Expr
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexColumn              *IndexColumn
	indexColumns             []*IndexColumn
	constraintDefinition     *ConstraintDefinition
	constraintInfo           ConstraintInfo
	ReferenceAction          ReferenceAction
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	showFilter               *ShowFilter
	over                     *Over
	caseStatementCases       []CaseStatementCase
	caseStatementCase        CaseStatementCase
	ifStatementConditions    []IfStatementCondition
	ifStatementCondition     IfStatementCondition
	signalInfo               SignalInfo
	signalInfos              []SignalInfo
	signalConditionItemName  SignalConditionItemName
	declareHandlerAction     DeclareHandlerAction
	declareHandlerCondition  DeclareHandlerCondition
	declareHandlerConditions []DeclareHandlerCondition
	procedureParam           ProcedureParam
	procedureParams          []ProcedureParam
	characteristic           Characteristic
	characteristics          []Characteristic
	Fields                   *Fields
	Lines                    *Lines
	EnclosedBy               *EnclosedBy
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const CALL = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const OF = 57376
const OUTFILE = 57377
const DATA = 57378
const LOAD = 57379
const LINES = 57380
const TERMINATED = 57381
const ESCAPED = 57382
const ENCLOSED = 57383
const OPTIONALLY = 57384
const STARTING = 57385
const UNIQUE = 57386
const KEY = 57387
const SYSTEM_TIME = 57388
const VALUES = 57389
const LAST_INSERT_ID = 57390
const SQL_CALC_FOUND_ROWS = 57391
const NEXT = 57392
const VALUE = 57393
const SHARE = 57394
const MODE = 57395
const SQL_NO_CACHE = 57396
const SQL_CACHE = 57397
const JOIN = 57398
const STRAIGHT_JOIN = 57399
const LEFT = 57400
const RIGHT = 57401
const INNER = 57402
const OUTER = 57403
const CROSS = 57404
const NATURAL = 57405
const USE = 57406
const FORCE = 57407
const ON = 57408
const USING = 57409
const ID = 57410
const HEX = 57411
const STRING = 57412
const INTEGRAL = 57413
const FLOAT = 57414
const HEXNUM = 57415
const VALUE_ARG = 57416
const LIST_ARG = 57417
const COMMENT = 57418
const COMMENT_KEYWORD = 57419
const BIT_LITERAL = 57420
const NULL = 57421
const TRUE = 57422
const FALSE = 57423
const OFF = 57424
const OR = 57425
const AND = 57426
const NOT = 57427
const BETWEEN = 57428
const CASE = 57429
const WHEN = 57430
const THEN = 57431
const ELSE = 57432
const ELSEIF = 57433
const END = 57434
const LE = 57435
const GE = 57436
const NE = 57437
const NULL_SAFE_EQUAL = 57438
const IS = 57439
const LIKE = 57440
const REGEXP = 57441
const IN = 57442
const SHIFT_LEFT = 57443
const SHIFT_RIGHT = 57444
const DIV = 57445
const MOD = 57446
const UNARY = 57447
const COLLATE = 57448
const BINARY = 57449
const UNDERSCORE_BINARY = 57450
const UNDERSCORE_UTF8MB4 = 57451
const INTERVAL = 57452
const JSON_EXTRACT_OP = 57453
const JSON_UNQUOTE_EXTRACT_OP = 57454
const CREATE = 57455
const ALTER = 57456
const DROP = 57457
const RENAME = 57458
const ANALYZE = 57459
const ADD = 57460
const FLUSH = 57461
const MODIFY = 57462
const CHANGE = 57463
const SCHEMA = 57464
const TABLE = 57465
const INDEX = 57466
const INDEXES = 57467
const VIEW = 57468
const TO = 57469
const IGNORE = 57470
const IF = 57471
const PRIMARY = 57472
const COLUMN = 57473
const SPATIAL = 57474
const FULLTEXT = 57475
const KEY_BLOCK_SIZE = 57476
const CHECK = 57477
const ACTION = 57478
const CASCADE = 57479
const CONSTRAINT = 57480
const FOREIGN = 57481
const NO = 57482
const REFERENCES = 57483
const RESTRICT = 57484
const FIRST = 57485
const AFTER = 57486
const SHOW = 57487
const DESCRIBE = 57488
const EXPLAIN = 57489
const DATE = 57490
const ESCAPE = 57491
const REPAIR = 57492
const OPTIMIZE = 57493
const TRUNCATE = 57494
const FORMAT = 57495
const MAXVALUE = 57496
const PARTITION = 57497
const REORGANIZE = 57498
const LESS = 57499
const THAN = 57500
const PROCEDURE = 57501
const TRIGGER = 57502
const TRIGGERS = 57503
const FUNCTION = 57504
const STATUS = 57505
const VARIABLES = 57506
const WARNINGS = 57507
const SEQUENCE = 57508
const EACH = 57509
const ROW = 57510
const BEFORE = 57511
const FOLLOWS = 57512
const PRECEDES = 57513
const DEFINER = 57514
const INVOKER = 57515
const INOUT = 57516
const OUT = 57517
const DETERMINISTIC = 57518
const CONTAINS = 57519
const READS = 57520
const MODIFIES = 57521
const SQL = 57522
const SECURITY = 57523
const CLASS_ORIGIN = 57524
const SUBCLASS_ORIGIN = 57525
const MESSAGE_TEXT = 57526
const MYSQL_ERRNO = 57527
const CONSTRAINT_CATALOG = 57528
const CONSTRAINT_SCHEMA = 57529
const CONSTRAINT_NAME = 57530
const CATALOG_NAME = 57531
const SCHEMA_NAME = 57532
const TABLE_NAME = 57533
const COLUMN_NAME = 57534
const CURSOR_NAME = 57535
const SIGNAL = 57536
const RESIGNAL = 57537
const SQLSTATE = 57538
const DECLARE = 57539
const CONDITION = 57540
const CURSOR = 57541
const CONTINUE = 57542
const EXIT = 57543
const UNDO = 57544
const HANDLER = 57545
const FOUND = 57546
const SQLWARNING = 57547
const SQLEXCEPTION = 57548
const BEGIN = 57549
const START = 57550
const TRANSACTION = 57551
const COMMIT = 57552
const ROLLBACK = 57553
const BIT = 57554
const TINYINT = 57555
const SMALLINT = 57556
const MEDIUMINT = 57557
const INT = 57558
const INTEGER = 57559
const BIGINT = 57560
const INTNUM = 57561
const REAL = 57562
const DOUBLE = 57563
const FLOAT_TYPE = 57564
const DECIMAL = 57565
const NUMERIC = 57566
const DEC = 57567
const FIXED = 57568
const PRECISION = 57569
const TIME = 57570
const TIMESTAMP = 57571
const DATETIME = 57572
const YEAR = 57573
const CHAR = 57574
const VARCHAR = 57575
const BOOL = 57576
const CHARACTER = 57577
const VARBINARY = 57578
const NCHAR = 57579
const NVARCHAR = 57580
const NATIONAL = 57581
const VARYING = 57582
const TEXT = 57583
const TINYTEXT = 57584
const MEDIUMTEXT = 57585
const LONGTEXT = 57586
const LONG = 57587
const BLOB = 57588
const TINYBLOB = 57589
const MEDIUMBLOB = 57590
const LONGBLOB = 57591
const JSON = 57592
const ENUM = 57593
const GEOMETRY = 57594
const POINT = 57595
const LINESTRING = 57596
const POLYGON = 57597
const GEOMETRYCOLLECTION = 57598
const MULTIPOINT = 57599
const MULTILINESTRING = 57600
const MULTIPOLYGON = 57601
const NULLX = 57602
const AUTO_INCREMENT = 57603
const APPROXNUM = 57604
const SIGNED = 57605
const UNSIGNED = 57606
const ZEROFILL = 57607
const LOCAL = 57608
const COLLATION = 57609
const DATABASES = 57610
const SCHEMAS = 57611
const TABLES = 57612
const FULL = 57613
const PROCESSLIST = 57614
const COLUMNS = 57615
const FIELDS = 57616
const ENGINES = 57617
const PLUGINS = 57618
const NAMES = 57619
const CHARSET = 57620
const GLOBAL = 57621
const SESSION = 57622
const ISOLATION = 57623
const LEVEL = 57624
const READ = 57625
const WRITE = 57626
const ONLY = 57627
const REPEATABLE = 57628
const COMMITTED = 57629
const UNCOMMITTED = 57630
const SERIALIZABLE = 57631
const CURRENT_TIMESTAMP = 57632
const DATABASE = 57633
const CURRENT_DATE = 57634
const CURRENT_USER = 57635
const CURRENT_TIME = 57636
const LOCALTIME = 57637
const LOCALTIMESTAMP = 57638
const UTC_DATE = 57639
const UTC_TIME = 57640
const UTC_TIMESTAMP = 57641
const REPLACE = 57642
const CONVERT = 57643
const CAST = 57644
const SUBSTR = 57645
const SUBSTRING = 57646
const GROUP_CONCAT = 57647
const SEPARATOR = 57648
const TIMESTAMPADD = 57649
const TIMESTAMPDIFF = 57650
const OVER = 57651
const WINDOW = 57652
const GROUPING = 57653
const GROUPS = 57654
const AVG = 57655
const BIT_AND = 57656
const BIT_OR = 57657
const BIT_XOR = 57658
const COUNT = 57659
const JSON_ARRAYAGG = 57660
const JSON_OBJECTAGG = 57661
const MAX = 57662
const MIN = 57663
const STDDEV_POP = 57664
const STDDEV = 57665
const STD = 57666
const STDDEV_SAMP = 57667
const SUM = 57668
const VAR_POP = 57669
const VARIANCE = 57670
const VAR_SAMP = 57671
const CUME_DIST = 57672
const DENSE_RANK = 57673
const FIRST_VALUE = 57674
const LAG = 57675
const LAST_VALUE = 57676
const LEAD = 57677
const NTH_VALUE = 57678
const NTILE = 57679
const ROW_NUMBER = 57680
const PERCENT_RANK = 57681
const RANK = 57682
const MATCH = 57683
const AGAINST = 57684
const BOOLEAN = 57685
const LANGUAGE = 57686
const WITH = 57687
const QUERY = 57688
const EXPANSION = 57689
const UNUSED = 57690
const ARRAY = 57691
const DESCRIPTION = 57692
const EMPTY = 57693
const EXCEPT = 57694
const JSON_TABLE = 57695
const LATERAL = 57696
const MEMBER = 57697
const RECURSIVE = 57698
const ACTIVE = 57699
const ADMIN = 57700
const BUCKETS = 57701
const CLONE = 57702
const COMPONENT = 57703
const DEFINITION = 57704
const ENFORCED = 57705
const EXCLUDE = 57706
const FOLLOWING = 57707
const GEOMCOLLECTION = 57708
const GET_MASTER_PUBLIC_KEY = 57709
const HISTOGRAM = 57710
const HISTORY = 57711
const INACTIVE = 57712
const INVISIBLE = 57713
const LOCKED = 57714
const MASTER_COMPRESSION_ALGORITHMS = 57715
const MASTER_PUBLIC_KEY_PATH = 57716
const MASTER_TLS_CIPHERSUITES = 57717
const MASTER_ZSTD_COMPRESSION_LEVEL = 57718
const NESTED = 57719
const NETWORK_NAMESPACE = 57720
const NOWAIT = 57721
const NULLS = 57722
const OJ = 57723
const OLD = 57724
const OPTIONAL = 57725
const ORDINALITY = 57726
const ORGANIZATION = 57727
const OTHERS = 57728
const PATH = 57729
const PERSIST = 57730
const PERSIST_ONLY = 57731
const PRECEDING = 57732
const PRIVILEGE_CHECKS_USER = 57733
const PROCESS = 57734
const RANDOM = 57735
const REFERENCE = 57736
const REQUIRE_ROW_FORMAT = 57737
const RESOURCE = 57738
const RESPECT = 57739
const RESTART = 57740
const RETAIN = 57741
const REUSE = 57742
const ROLE = 57743
const SECONDARY = 57744
const SECONDARY_ENGINE = 57745
const SECONDARY_LOAD = 57746
const SECONDARY_UNLOAD = 57747
const SKIP = 57748
const SRID = 57749
const THREAD_PRIORITY = 57750
const TIES = 57751
const UNBOUNDED = 57752
const VCPU = 57753
const VISIBLE = 57754
const SYSTEM = 57755
const INFILE = 57756

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CALL",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"OF",
	"OUTFILE",
	"DATA",
	"LOAD",
	"LINES",
	"TERMINATED",
	"ESCAPED",
	"ENCLOSED",
	"OPTIONALLY",
	"STARTING",
	"UNIQUE",
	"KEY",
	"SYSTEM_TIME",
	"VALUES",
	"LAST_INSERT_ID",
	"SQL_CALC_FOUND_ROWS",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"ELSEIF",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"MODIFY",
	"CHANGE",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"INDEXES",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"FIRST",
	"AFTER",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"FORMAT",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TRIGGERS",
	"FUNCTION",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"EACH",
	"ROW",
	"BEFORE",
	"FOLLOWS",
	"PRECEDES",
	"DEFINER",
	"INVOKER",
	"INOUT",
	"OUT",
	"DETERMINISTIC",
	"CONTAINS",
	"READS",
	"MODIFIES",
	"SQL",
	"SECURITY",
	"CLASS_ORIGIN",
	"SUBCLASS_ORIGIN",
	"MESSAGE_TEXT",
	"MYSQL_ERRNO",
	"CONSTRAINT_CATALOG",
	"CONSTRAINT_SCHEMA",
	"CONSTRAINT_NAME",
	"CATALOG_NAME",
	"SCHEMA_NAME",
	"TABLE_NAME",
	"COLUMN_NAME",
	"CURSOR_NAME",
	"SIGNAL",
	"RESIGNAL",
	"SQLSTATE",
	"DECLARE",
	"CONDITION",
	"CURSOR",
	"CONTINUE",
	"EXIT",
	"UNDO",
	"HANDLER",
	"FOUND",
	"SQLWARNING",
	"SQLEXCEPTION",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DEC",
	"FIXED",
	"PRECISION",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NATIONAL",
	"VARYING",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"LONG",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"LOCAL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"OVER",
	"WINDOW",
	"GROUPING",
	"GROUPS",
	"AVG",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"COUNT",
	"JSON_ARRAYAGG",
	"JSON_OBJECTAGG",
	"MAX",
	"MIN",
	"STDDEV_POP",
	"STDDEV",
	"STD",
	"STDDEV_SAMP",
	"SUM",
	"VAR_POP",
	"VARIANCE",
	"VAR_SAMP",
	"CUME_DIST",
	"DENSE_RANK",
	"FIRST_VALUE",
	"LAG",
	"LAST_VALUE",
	"LEAD",
	"NTH_VALUE",
	"NTILE",
	"ROW_NUMBER",
	"PERCENT_RANK",
	"RANK",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"DESCRIPTION",
	"EMPTY",
	"EXCEPT",
	"JSON_TABLE",
	"LATERAL",
	"MEMBER",
	"RECURSIVE",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"SYSTEM",
	"INFILE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 28,
	5, 44,
	-2, 824,
	-1, 36,
	141, 904,
	-2, 114,
	-1, 43,
	180, 487,
	181, 487,
	-2, 477,
	-1, 50,
	1, 1307,
	432, 1307,
	-2, 507,
	-1, 419,
	127, 914,
	-2, 908,
	-1, 420,
	127, 915,
	-2, 909,
	-1, 529,
	97, 1088,
	127, 1088,
	-2, 872,
	-1, 531,
	97, 1171,
	127, 1171,
	-2, 874,
	-1, 957,
	1, 561,
	5, 561,
	12, 561,
	13, 561,
	14, 561,
	15, 561,
	17, 561,
	19, 561,
	30, 561,
	31, 561,
	56, 561,
	57, 561,
	58, 561,
	59, 561,
	60, 561,
	62, 561,
	63, 561,
	66, 561,
	67, 561,
	69, 561,
	70, 561,
	432, 561,
	-2, 591,
	-1, 961,
	67, 61,
	69, 61,
	-2, 65,
	-1, 1152,
	127, 917,
	-2, 913,
	-1, 1322,
	68, 348,
	-2, 1054,
	-1, 1325,
	68, 344,
	71, 344,
	-2, 989,
	-1, 1326,
	68, 345,
	71, 345,
	-2, 999,
	-1, 1408,
	68, 422,
	71, 422,
	-2, 388,
	-1, 1453,
	5, 45,
	-2, 657,
	-1, 1774,
	1, 612,
	5, 612,
	12, 612,
	13, 612,
	14, 612,
	15, 612,
	17, 612,
	19, 612,
	30, 612,
	31, 612,
	56, 612,
	57, 612,
	58, 612,
	59, 612,
	60, 612,
	62, 612,
	63, 612,
	66, 612,
	67, 612,
	69, 612,
	70, 612,
	432, 612,
	-2, 591,
	-1, 1898,
	5, 45,
	-2, 842,
	-1, 2033,
	41, 924,
	-2, 922,
	-1, 2138,
	5, 45,
	-2, 845,
}

const yyPrivate = 57344

const yyLast = 25724

var yyAct = [...]int{

	453, 71, 417, 2239, 2285, 2260, 2250, 2155, 1369, 2251,
	2154, 2241, 2079, 7, 2047, 2141, 2078, 6, 2077, 5,
	2080, 8, 2127, 2181, 1787, 2033, 1908, 2121, 994, 1768,
	1971, 2007, 1367, 75, 1517, 1675, 1685, 373, 1748, 1272,
	1266, 411, 1953, 1327, 1130, 1575, 1935, 452, 404, 1788,
	1270, 1684, 1323, 1629, 882, 1303, 2142, 1749, 726, 1837,
	1545, 437, 1309, 1319, 1359, 1264, 1518, 538, 354, 357,
	1745, 94, 71, 1437, 424, 1308, 1754, 371, 1406, 957,
	1760, 1122, 1074, 540, 716, 1696, 1216, 348, 1177, 1394,
	1315, 535, 1343, 1138, 1651, 1652, 1190, 1612, 791, 972,
	1355, 1248, 1094, 1255, 1154, 1208, 407, 422, 953, 752,
	534, 1211, 521, 832, 971, 515, 370, 751, 681, 963,
	2307, 2303, 2293, 2275, 2273, 2255, 2234, 2189, 74, 1113,
	1929, 1818, 2266, 512, 2174, 1330, 2249, 954, 898, 349,
	350, 2135, 2222, 353, 2173, 1713, 899, 1483, 60, 2134,
	1883, 680, 1782, 77, 29, 1783, 1784, 728, 522, 1291,
	1292, 1290, 1936, 29, 426, 29, 1554, 29, 352, 1553,
	1938, 536, 1555, 703, 973, 708, 974, 729, 730, 351,
	2076, 3, 770, 823, 79, 80, 81, 82, 83, 1512,
	2057, 847, 846, 856, 857, 849, 850, 851, 852, 853,
	854, 855, 848, 1329, 1992, 858, 1513, 1595, 1268, 1978,
	683, 29, 686, 63, 32, 33, 72, 104, 100, 101,
	1331, 102, 1331, 959, 1349, 72, 1344, 72, 466, 72,
	472, 474, 473, 470, 471, 469, 468, 467, 1344, 1941,
	1356, 368, 1874, 707, 711, 475, 476, 713, 1872, 1697,
	2264, 714, 403, 96, 106, 105, 1335, 1337, 2186, 1336,
	1730, 2184, 2185, 2236, 358, 108, 731, 2030, 732, 729,
	730, 1587, 355, 72, 347, 1939, 1940, 1942, 1943, 1944,
	709, 712, 2029, 710, 2028, 2027, 1592, 1591, 2026, 2024,
	2025, 1699, 2106, 2107, 1376, 89, 2074, 1630, 2178, 2179,
	2143, 1910, 1537, 723, 724, 359, 514, 725, 1588, 532,
	722, 721, 679, 63, 32, 33, 685, 684, 2248, 1375,
	2221, 2122, 1593, 689, 1585, 715, 715, 1678, 1249, 345,
	1586, 698, 2072, 1631, 2299, 34, 993, 715, 1954, 1955,
	1791, 1657, 2008, 1842, 993, 71, 71, 992, 91, 93,
	993, 2109, 88, 2308, 2305, 2010, 76, 739, 98, 97,
	1569, 741, 2294, 740, 774, 346, 1701, 1050, 1275, 1277,
	2276, 1705, 782, 1700, 682, 1698, 691, 367, 1055, 366,
	1703, 367, 1964, 1634, 1064, 1544, 103, 1543, 2245, 1590,
	1344, 2240, 1542, 1702, 678, 1647, 778, 319, 95, 99,
	1865, 1858, 356, 1963, 2289, 2243, 1704, 1706, 1563, 1602,
	1550, 1334, 706, 1456, 356, 1442, 1358, 1632, 1633, 867,
	870, 871, 869, 1817, 993, 1729, 2009, 1427, 1464, 1128,
	872, 873, 874, 875, 876, 877, 878, 879, 987, 744,
	745, 993, 1967, 1937, 793, 2058, 2133, 356, 993, 1276,
	96, 836, 880, 969, 884, 885, 886, 887, 888, 889,
	890, 891, 892, 893, 894, 1573, 897, 900, 900, 900,
	906, 900, 900, 906, 900, 906, 915, 916, 917, 918,
	919, 920, 921, 922, 923, 924, 925, 926, 927, 928,
	929, 930, 931, 932, 933, 934, 935, 936, 937, 938,
	939, 940, 941, 942, 943, 944, 945, 946, 947, 948,
	70, 958, 773, 1888, 1461, 783, 771, 90, 838, 70,
	1589, 70, 64, 70, 1962, 738, 742, 1573, 2287, 2230,
	356, 2288, 699, 2286, 29, 30, 63, 32, 33, 2242,
	2244, 1807, 705, 700, 1968, 870, 871, 848, 58, 1672,
	858, 952, 1304, 1576, 69, 98, 97, 858, 34, 53,
	54, 1572, 1285, 1125, 831, 59, 86, 70, 829, 1095,
	1385, 1573, 719, 830, 829, 1676, 1573, 717, 1209, 851,
	852, 853, 854, 855, 848, 831, 868, 858, 736, 1758,
	779, 831, 44, 1808, 976, 978, 72, 1302, 980, 981,
	982, 690, 1301, 85, 1300, 1051, 901, 903, 905, 907,
	909, 911, 912, 914, 902, 904, 1296, 908, 910, 1294,
	913, 1108, 64, 1572, 1161, 1715, 991, 2279, 2261, 2278,
	2292, 870, 871, 967, 881, 704, 733, 979, 743, 1159,
	1160, 1158, 687, 2231, 1057, 962, 754, 755, 756, 757,
	758, 759, 760, 761, 762, 763, 764, 765, 36, 65,
	40, 39, 42, 1795, 55, 1096, 1386, 1572, 720, 826,
	1671, 1419, 1572, 2157, 1668, 960, 365, 2139, 1659, 1657,
	1928, 2300, 1192, 1665, 72, 1418, 1664, 1667, 1927, 1617,
	43, 68, 67, 1615, 1157, 51, 52, 41, 1131, 1132,
	1596, 2218, 715, 1660, 693, 694, 695, 696, 697, 715,
	715, 715, 847, 846, 856, 857, 849, 850, 851, 852,
	853, 854, 855, 848, 715, 715, 858, 1423, 2182, 735,
	2206, 2217, 2205, 951, 2301, 961, 1417, 2191, 1101, 56,
	57, 846, 856, 857, 849, 850, 851, 852, 853, 854,
	855, 848, 45, 66, 858, 47, 48, 509, 510, 830,
	829, 2163, 413, 830, 829, 2071, 830, 829, 2023, 2182,
	1395, 1985, 1925, 2296, 1209, 71, 1472, 831, 1800, 1613,
	715, 831, 1121, 1076, 831, 1401, 1105, 1415, 1409, 1410,
	1178, 1408, 1179, 1411, 1412, 933, 934, 935, 936, 937,
	921, 922, 923, 938, 939, 924, 925, 926, 932, 940,
	927, 928, 929, 930, 931, 943, 942, 941, 944, 945,
	947, 946, 948, 1111, 1065, 1081, 1082, 1079, 1421, 1424,
	1098, 1099, 1127, 1144, 1146, 1147, 1999, 2223, 1133, 1145,
	1439, 1440, 1441, 1153, 749, 64, 1162, 1163, 1164, 1165,
	1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175,
	1176, 1120, 2204, 1460, 1103, 1104, 748, 1459, 1106, 1458,
	71, 836, 1836, 830, 829, 1838, 1078, 1618, 1114, 1135,
	2233, 830, 829, 1126, 1109, 884, 830, 829, 2183, 1155,
	70, 831, 2203, 830, 829, 1090, 1091, 1119, 2069, 831,
	830, 829, 1136, 1212, 831, 1137, 830, 829, 1416, 2041,
	1061, 831, 1576, 1717, 514, 1919, 2220, 1069, 831, 2168,
	784, 1150, 1152, 1151, 831, 2037, 830, 829, 1561, 1116,
	1562, 1919, 2165, 784, 1414, 1086, 1087, 1088, 1919, 2073,
	1999, 2065, 1089, 784, 831, 1838, 960, 1148, 1999, 2013,
	1999, 784, 2036, 1077, 1960, 1115, 1999, 1998, 2017, 1269,
	1083, 1084, 1085, 1853, 958, 1198, 1201, 1849, 958, 1919,
	1918, 2016, 1210, 1846, 1420, 1092, 1093, 1845, 1181, 1182,
	1843, 847, 846, 856, 857, 849, 850, 851, 852, 853,
	854, 855, 848, 1185, 1187, 858, 1901, 784, 1823, 1195,
	1426, 784, 1117, 1828, 1280, 1827, 1156, 1826, 1282, 849,
	850, 851, 852, 853, 854, 855, 848, 1815, 1814, 858,
	1222, 1422, 1224, 1573, 1811, 1812, 1801, 1860, 1546, 1811,
	1810, 1118, 1641, 1220, 1221, 1454, 784, 1274, 1640, 1383,
	1227, 1228, 1229, 1230, 1382, 522, 1252, 784, 1186, 1398,
	881, 1140, 1180, 1076, 1186, 784, 76, 715, 1102, 715,
	1051, 1073, 1072, 1278, 1184, 1188, 1071, 1070, 1062, 1060,
	1306, 1152, 1305, 1059, 1310, 536, 1058, 1056, 1206, 990,
	989, 76, 1316, 1286, 1283, 1861, 1880, 1757, 788, 792,
	1293, 701, 1295, 360, 1279, 2170, 964, 965, 965, 839,
	1546, 1313, 1896, 1345, 1346, 1347, 1348, 2035, 1824, 1546,
	1186, 1361, 1362, 1363, 1364, 1813, 1231, 1232, 1365, 1572,
	1770, 1236, 71, 960, 1239, 1659, 1657, 1649, 960, 1244,
	993, 1251, 960, 1661, 1658, 1454, 883, 1332, 1333, 881,
	1338, 1339, 1340, 1341, 1342, 1357, 1746, 896, 1879, 1757,
	1660, 1886, 1443, 966, 966, 968, 964, 1252, 1352, 1353,
	1354, 1564, 1445, 1446, 1447, 1861, 1757, 793, 1289, 1454,
	1252, 1477, 1476, 1107, 1250, 847, 846, 856, 857, 849,
	850, 851, 852, 853, 854, 855, 848, 1381, 1281, 858,
	847, 846, 856, 857, 849, 850, 851, 852, 853, 854,
	855, 848, 964, 1129, 858, 1063, 1155, 970, 780, 72,
	2176, 1306, 1152, 1151, 781, 775, 1397, 1396, 1257, 1260,
	1261, 1262, 1258, 1404, 1259, 1263, 2166, 1403, 1431, 1769,
	1438, 2039, 1930, 1331, 1425, 1906, 1360, 847, 846, 856,
	857, 849, 850, 851, 852, 853, 854, 855, 848, 1515,
	1516, 858, 1448, 958, 958, 958, 958, 958, 1794, 72,
	1761, 1762, 1368, 1444, 1356, 1568, 1377, 1351, 1387, 1350,
	1269, 1451, 1538, 1393, 1052, 768, 2270, 72, 2268, 1370,
	958, 2252, 1822, 1764, 1746, 1619, 1067, 1378, 1379, 1529,
	1527, 1380, 1450, 1767, 1530, 1528, 1766, 1526, 1402, 1525,
	1453, 1455, 881, 408, 409, 2200, 1457, 2172, 1371, 1682,
	1373, 1428, 1463, 1471, 1541, 1466, 1467, 1468, 1139, 2198,
	1547, 1390, 1474, 1156, 1475, 1436, 1519, 1478, 1479, 1435,
	1480, 1481, 1990, 1578, 1485, 1486, 1487, 1488, 1489, 824,
	825, 1548, 1533, 1549, 1848, 1496, 1497, 1498, 1799, 1500,
	1501, 1540, 1503, 1504, 1505, 1506, 1798, 1508, 1509, 1510,
	1570, 1520, 976, 978, 1523, 2111, 2114, 1532, 822, 1577,
	71, 1565, 2162, 2161, 1571, 1574, 2034, 2190, 1534, 1535,
	2032, 715, 2105, 715, 715, 2104, 1051, 361, 1080, 1551,
	1644, 1521, 1522, 1310, 1524, 786, 1606, 988, 1645, 1605,
	766, 1607, 1608, 1609, 1610, 1567, 1531, 787, 1261, 1262,
	750, 747, 746, 702, 2213, 2045, 1100, 960, 960, 960,
	960, 960, 2044, 1894, 1969, 1597, 1598, 1131, 1132, 1514,
	1400, 1679, 1604, 1372, 960, 1066, 824, 825, 1434, 1622,
	1392, 1265, 1611, 1054, 960, 1639, 1433, 451, 2212, 1614,
	1188, 883, 1691, 776, 777, 2211, 2210, 2020, 405, 1616,
	2193, 1653, 1666, 1670, 1709, 1710, 2192, 1711, 1712, 2159,
	1599, 1600, 1601, 1603, 2115, 2049, 1989, 406, 76, 1718,
	1719, 1482, 1484, 2048, 1721, 1972, 1546, 1465, 1490, 1491,
	1492, 1493, 1462, 1642, 1097, 1650, 1648, 2272, 2271, 1655,
	1656, 1646, 827, 1714, 1662, 1663, 1673, 1674, 2271, 2272,
	1677, 2062, 1141, 1142, 1751, 1797, 71, 856, 857, 849,
	850, 851, 852, 853, 854, 855, 848, 1687, 362, 858,
	1688, 527, 1124, 364, 539, 1689, 2090, 46, 1772, 1695,
	1152, 1151, 1774, 1776, 1777, 1778, 1708, 1747, 1707, 692,
	1621, 1693, 1624, 1625, 1626, 2092, 19, 2091, 18, 2093,
	20, 1750, 78, 1692, 49, 1643, 73, 883, 2094, 21,
	1, 1196, 1197, 1217, 2089, 15, 2088, 14, 1756, 1779,
	1775, 2082, 10, 2097, 25, 1771, 2160, 1519, 2096, 24,
	1796, 442, 441, 444, 445, 446, 447, 1753, 2098, 26,
	443, 448, 2087, 13, 1765, 1636, 1727, 1728, 1781, 2084,
	12, 1733, 2083, 11, 1736, 1773, 2110, 1792, 2112, 1741,
	1793, 2081, 9, 420, 2031, 1949, 1934, 1933, 1628, 1786,
	1820, 1821, 1635, 1790, 1637, 1638, 1627, 1365, 767, 1112,
	1785, 1654, 1413, 2120, 1317, 1307, 533, 1831, 1687, 1310,
	84, 1310, 1384, 1802, 1803, 718, 1683, 1958, 327, 1825,
	1806, 1314, 1299, 1583, 2113, 111, 769, 1809, 111, 1582,
	1579, 1594, 1328, 1581, 111, 1257, 1260, 1261, 1262, 1258,
	1121, 1259, 1263, 1580, 2108, 1761, 1762, 1584, 998, 996,
	997, 995, 1804, 1864, 111, 1000, 1752, 999, 331, 1840,
	983, 2149, 828, 92, 50, 1961, 111, 1669, 1407, 111,
	543, 87, 111, 727, 1881, 333, 866, 1432, 1552, 526,
	517, 785, 1834, 111, 2177, 543, 1841, 1862, 1835, 1051,
	790, 111, 2123, 1852, 1470, 1366, 895, 1207, 1805, 1832,
	1839, 425, 1536, 2126, 1143, 1859, 1722, 1723, 1724, 1725,
	1726, 1844, 440, 439, 438, 1887, 435, 436, 1391, 1857,
	1134, 1511, 840, 1816, 423, 415, 1870, 956, 949, 1399,
	1256, 1254, 539, 539, 1253, 1068, 513, 1763, 1759, 1267,
	955, 369, 61, 734, 539, 344, 1882, 2056, 31, 363,
	1902, 410, 27, 17, 737, 22, 16, 1405, 688, 35,
	1863, 38, 37, 1914, 1915, 1916, 1623, 1374, 1866, 1429,
	1430, 2148, 792, 2238, 1912, 753, 1830, 2259, 1895, 1875,
	1876, 1921, 71, 2180, 1903, 2095, 2099, 2086, 1917, 2085,
	2225, 23, 1519, 1867, 1868, 2224, 1869, 4, 772, 1871,
	1913, 1873, 62, 1819, 960, 28, 2, 0, 1565, 0,
	0, 0, 0, 0, 0, 1946, 1947, 1948, 1829, 1922,
	1923, 958, 0, 1897, 1898, 1899, 1900, 1956, 0, 1452,
	1310, 1833, 0, 1957, 0, 0, 0, 0, 1945, 0,
	1979, 1980, 1981, 1982, 1983, 1911, 1951, 0, 1986, 1987,
	0, 1950, 1473, 1850, 1959, 1965, 1952, 1751, 1974, 1975,
	1994, 1973, 0, 1924, 0, 1926, 1790, 0, 0, 0,
	1365, 1772, 0, 1966, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1731, 1732, 1920, 1734, 1735, 0, 1737,
	1738, 1739, 1740, 1997, 1742, 1743, 1744, 0, 0, 0,
	2019, 0, 2021, 111, 1750, 0, 0, 0, 543, 543,
	1687, 1996, 0, 0, 1991, 2018, 0, 0, 2000, 0,
	543, 1977, 2001, 0, 0, 2012, 0, 527, 527, 2011,
	2046, 527, 527, 527, 984, 2006, 0, 1556, 0, 1557,
	2014, 2022, 2015, 1558, 1559, 1560, 0, 0, 0, 1274,
	111, 2002, 0, 1751, 1984, 71, 0, 0, 0, 1988,
	2038, 0, 1931, 0, 2040, 0, 0, 0, 0, 2043,
	1885, 0, 0, 0, 0, 0, 2051, 0, 0, 0,
	1265, 0, 71, 0, 0, 960, 2003, 2004, 2005, 2075,
	0, 2063, 0, 0, 2050, 0, 958, 835, 2068, 0,
	1750, 0, 2067, 0, 2061, 2070, 1932, 2119, 0, 847,
	846, 856, 857, 849, 850, 851, 852, 853, 854, 855,
	848, 1275, 1277, 858, 2117, 0, 0, 0, 0, 0,
	0, 0, 0, 2118, 0, 0, 2116, 0, 0, 0,
	1993, 2130, 0, 0, 2144, 0, 2125, 2129, 2131, 0,
	0, 2052, 2053, 2054, 2055, 2136, 0, 2137, 2059, 2060,
	0, 0, 0, 0, 71, 847, 846, 856, 857, 849,
	850, 851, 852, 853, 854, 855, 848, 0, 0, 858,
	0, 0, 0, 0, 0, 0, 1053, 0, 0, 0,
	0, 0, 0, 111, 111, 111, 2158, 1519, 2156, 0,
	0, 0, 1276, 0, 0, 2171, 0, 0, 0, 539,
	543, 0, 0, 1889, 1890, 1716, 539, 539, 539, 1891,
	0, 0, 1892, 0, 0, 0, 0, 1893, 2132, 0,
	0, 539, 539, 0, 2068, 2064, 2138, 2164, 2187, 0,
	0, 2195, 0, 0, 71, 0, 2202, 2153, 0, 0,
	71, 2196, 0, 2199, 2209, 2194, 2197, 2216, 0, 0,
	960, 0, 0, 2201, 2207, 0, 0, 71, 2129, 2219,
	0, 0, 71, 0, 0, 2229, 2246, 2232, 0, 2228,
	0, 2227, 2235, 2226, 0, 0, 0, 539, 0, 1780,
	1123, 71, 2167, 2253, 71, 71, 2247, 0, 0, 71,
	0, 2254, 2216, 0, 2256, 0, 2262, 0, 2175, 2265,
	0, 0, 0, 0, 0, 0, 71, 0, 2269, 71,
	2267, 0, 0, 2216, 0, 2280, 0, 2282, 2283, 2277,
	0, 0, 0, 2214, 71, 0, 71, 2290, 0, 0,
	71, 2216, 0, 2216, 0, 0, 539, 0, 0, 0,
	2295, 0, 0, 0, 71, 0, 2140, 71, 0, 0,
	0, 2216, 543, 0, 71, 0, 0, 2304, 71, 0,
	111, 2216, 0, 0, 111, 2216, 0, 111, 0, 0,
	0, 0, 0, 111, 0, 543, 0, 1183, 0, 0,
	1878, 0, 543, 543, 543, 111, 111, 111, 0, 0,
	0, 0, 111, 0, 0, 527, 0, 543, 543, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1854, 0,
	842, 0, 845, 1213, 1214, 0, 0, 0, 413, 859,
	860, 861, 862, 863, 864, 865, 0, 843, 844, 841,
	847, 846, 856, 857, 849, 850, 851, 852, 853, 854,
	855, 848, 2237, 0, 858, 2297, 2298, 0, 0, 0,
	1884, 0, 111, 543, 111, 0, 543, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 527, 847,
	846, 856, 857, 849, 850, 851, 852, 853, 854, 855,
	848, 0, 0, 858, 883, 539, 0, 539, 539, 0,
	0, 1904, 0, 0, 1905, 0, 0, 1907, 1690, 0,
	0, 111, 0, 0, 0, 883, 0, 835, 0, 1189,
	1194, 0, 0, 0, 1200, 1203, 1204, 1205, 0, 847,
	846, 856, 857, 849, 850, 851, 852, 853, 854, 855,
	848, 0, 0, 858, 0, 0, 0, 0, 0, 0,
	0, 1215, 0, 1218, 1219, 0, 0, 0, 1223, 0,
	1225, 1226, 1449, 543, 539, 0, 539, 1877, 1233, 1234,
	1235, 0, 1237, 1238, 0, 1240, 1241, 1242, 1243, 0,
	1245, 1246, 1247, 847, 846, 856, 857, 849, 850, 851,
	852, 853, 854, 855, 848, 0, 0, 858, 0, 543,
	543, 0, 0, 0, 0, 0, 0, 0, 0, 29,
	0, 63, 32, 33, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 58, 0, 0, 0, 0, 0, 69,
	0, 0, 0, 34, 111, 0, 539, 0, 0, 0,
	0, 0, 111, 111, 0, 0, 0, 111, 111, 0,
	0, 111, 111, 111, 0, 339, 847, 846, 856, 857,
	849, 850, 851, 852, 853, 854, 855, 848, 0, 0,
	858, 72, 0, 543, 543, 847, 846, 856, 857, 849,
	850, 851, 852, 853, 854, 855, 848, 0, 0, 858,
	0, 0, 0, 336, 2100, 0, 0, 2258, 2261, 2257,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 413, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 883, 36, 65, 40, 39, 42, 0, 111,
	543, 0, 543, 0, 0, 320, 0, 111, 111, 2101,
	0, 111, 323, 0, 0, 0, 0, 0, 0, 527,
	0, 0, 332, 337, 338, 43, 68, 67, 0, 0,
	0, 0, 41, 0, 0, 0, 0, 0, 0, 111,
	111, 111, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2124, 2128, 0, 0, 527, 527, 0, 329, 0,
	0, 330, 0, 0, 335, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 56, 57, 539, 2102, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2103, 66, 0,
	47, 48, 0, 0, 0, 0, 0, 0, 0, 0,
	1469, 0, 0, 2145, 2146, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1494, 1495, 0, 0, 0,
	1499, 0, 0, 1502, 321, 0, 1620, 0, 1507, 0,
	0, 29, 0, 63, 32, 33, 0, 0, 539, 0,
	539, 539, 0, 0, 0, 58, 0, 0, 0, 0,
	0, 69, 0, 0, 0, 34, 334, 324, 325, 0,
	342, 0, 0, 2128, 326, 328, 0, 322, 341, 340,
	64, 0, 0, 0, 0, 2208, 0, 0, 0, 0,
	0, 0, 0, 0, 1680, 1681, 111, 111, 111, 111,
	111, 0, 0, 72, 0, 0, 0, 0, 111, 0,
	539, 0, 0, 111, 0, 0, 0, 111, 0, 0,
	0, 0, 0, 111, 539, 70, 2100, 0, 0, 0,
	0, 2306, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1720, 543, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2281, 36, 65, 40, 39, 42,
	0, 0, 789, 0, 0, 0, 0, 0, 0, 0,
	527, 2101, 0, 1123, 1755, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 43, 68, 67,
	0, 0, 0, 0, 41, 0, 1755, 0, 0, 0,
	0, 0, 543, 0, 109, 0, 0, 343, 0, 0,
	0, 0, 0, 109, 543, 111, 543, 543, 0, 0,
	0, 539, 539, 0, 539, 0, 1789, 0, 0, 0,
	0, 0, 0, 372, 0, 0, 56, 57, 0, 2102,
	0, 0, 414, 0, 0, 516, 528, 0, 109, 2103,
	66, 109, 47, 48, 0, 0, 0, 0, 0, 0,
	543, 543, 109, 0, 0, 0, 111, 0, 0, 0,
	109, 0, 0, 0, 0, 0, 543, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 543, 0, 0,
	0, 0, 0, 0, 1847, 0, 0, 0, 1851, 0,
	0, 0, 0, 0, 0, 1855, 1856, 0, 0, 0,
	0, 0, 64, 0, 0, 0, 0, 0, 0, 543,
	543, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 543, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 70, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 543, 543, 0,
	543, 0, 543, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 527, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1909, 0, 0,
	0, 0, 0, 0, 1909, 1909, 1909, 0, 0, 0,
	0, 0, 0, 539, 0, 0, 0, 0, 0, 0,
	0, 0, 1909, 111, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	543, 0, 0, 111, 543, 0, 0, 0, 0, 0,
	0, 543, 543, 0, 0, 0, 1970, 0, 0, 0,
	0, 0, 0, 539, 0, 0, 0, 0, 0, 109,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1995,
	0, 0, 0, 0, 1909, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1789, 0, 0,
	0, 29, 0, 63, 32, 33, 0, 0, 1789, 0,
	0, 0, 0, 0, 0, 58, 0, 0, 0, 0,
	0, 69, 0, 543, 0, 34, 0, 0, 0, 0,
	543, 543, 543, 0, 0, 0, 0, 0, 0, 543,
	0, 0, 2042, 0, 0, 0, 0, 0, 543, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 72, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 2066, 0, 0,
	0, 0, 0, 0, 0, 0, 2100, 0, 0, 0,
	0, 2302, 109, 109, 109, 0, 0, 0, 0, 0,
	0, 0, 528, 528, 0, 0, 528, 528, 528, 0,
	0, 0, 543, 0, 111, 0, 0, 1789, 0, 543,
	0, 0, 0, 0, 0, 36, 65, 40, 39, 42,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	527, 2101, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 543, 0, 43, 68, 67,
	543, 0, 0, 0, 41, 111, 0, 111, 0, 0,
	0, 0, 0, 543, 0, 0, 0, 0, 0, 29,
	539, 63, 32, 33, 543, 0, 0, 0, 0, 0,
	0, 0, 0, 58, 0, 0, 0, 0, 0, 69,
	2169, 0, 0, 34, 0, 0, 56, 57, 0, 2102,
	0, 0, 0, 0, 0, 0, 0, 0, 543, 2103,
	66, 0, 47, 48, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 72, 2263, 0, 1789, 0, 0, 0, 0, 0,
	0, 0, 0, 543, 1909, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2100, 0, 539, 0, 0, 109,
	0, 0, 0, 109, 0, 0, 109, 0, 0, 0,
	0, 0, 1075, 0, 0, 0, 0, 0, 0, 111,
	0, 0, 0, 543, 109, 109, 109, 0, 0, 0,
	0, 109, 0, 36, 65, 40, 39, 42, 0, 0,
	0, 0, 64, 0, 0, 0, 0, 0, 0, 2101,
	0, 0, 0, 0, 0, 0, 111, 0, 0, 0,
	0, 0, 0, 0, 0, 43, 68, 67, 0, 0,
	0, 0, 41, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 543, 70, 0, 0,
	0, 109, 0, 372, 1020, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 543, 0, 0, 0,
	0, 0, 0, 0, 56, 57, 0, 2102, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2103, 66, 0,
	47, 48, 0, 2188, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	543, 1075, 0, 0, 0, 0, 0, 0, 0, 0,
	543, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 543, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1007, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1193, 1193,
	0, 0, 0, 1193, 1193, 1193, 1193, 0, 0, 0,
	528, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	64, 0, 0, 0, 0, 0, 0, 0, 0, 1021,
	1193, 1193, 1193, 1193, 0, 0, 1193, 1193, 1193, 1193,
	1193, 0, 0, 0, 0, 0, 0, 1193, 1193, 1193,
	1020, 1193, 1193, 0, 1193, 1193, 1193, 1193, 0, 1193,
	1193, 1193, 0, 109, 0, 70, 0, 0, 0, 0,
	0, 109, 372, 0, 0, 0, 109, 109, 0, 0,
	109, 1284, 1075, 528, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1034, 1037, 1038, 1039, 1040, 1041, 1042,
	1075, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 0, 1022,
	1023, 1024, 1025, 1001, 1005, 1035, 1002, 1008, 1004, 1006,
	1003, 0, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016,
	1017, 1018, 1019, 1026, 1027, 1028, 1029, 1030, 1031, 1032,
	1033, 0, 0, 1007, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 109, 109, 0, 0,
	109, 0, 0, 0, 0, 1021, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1388, 1389,
	109, 0, 0, 0, 0, 29, 0, 63, 32, 33,
	0, 0, 0, 0, 1036, 0, 0, 0, 0, 58,
	0, 0, 0, 0, 0, 69, 0, 0, 0, 34,
	0, 1075, 0, 0, 0, 0, 0, 0, 0, 1034,
	1037, 1038, 1039, 1040, 1041, 1042, 0, 1043, 1044, 1045,
	1046, 1047, 1048, 1049, 0, 1022, 1023, 1024, 1025, 1001,
	1005, 1035, 1002, 1008, 1004, 1006, 1003, 72, 1009, 1010,
	1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1026,
	1027, 1028, 1029, 1030, 1031, 1032, 1033, 1193, 0, 0,
	2100, 0, 0, 0, 0, 2291, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1193,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 36,
	65, 40, 39, 42, 1193, 1193, 0, 0, 0, 1193,
	0, 0, 1193, 0, 0, 2101, 0, 1193, 0, 0,
	0, 0, 0, 0, 528, 109, 109, 109, 109, 109,
	0, 43, 68, 67, 0, 0, 0, 372, 41, 0,
	1036, 0, 109, 0, 0, 29, 372, 63, 32, 33,
	0, 0, 109, 0, 29, 0, 63, 32, 33, 58,
	528, 528, 0, 0, 0, 69, 0, 0, 58, 34,
	0, 0, 0, 0, 69, 0, 0, 0, 34, 0,
	56, 57, 0, 2102, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2103, 66, 0, 47, 48, 29, 0,
	63, 32, 33, 0, 0, 0, 0, 72, 0, 0,
	0, 0, 58, 0, 0, 0, 72, 0, 69, 0,
	0, 0, 34, 0, 0, 0, 0, 0, 0, 0,
	2100, 0, 0, 0, 0, 2274, 0, 0, 0, 2100,
	0, 0, 0, 0, 2215, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 0, 0,
	72, 0, 0, 0, 0, 0, 0, 0, 0, 36,
	65, 40, 39, 42, 0, 0, 0, 0, 36, 65,
	40, 39, 42, 2100, 0, 2101, 64, 0, 0, 0,
	0, 0, 0, 0, 2101, 0, 0, 0, 0, 0,
	0, 43, 68, 67, 0, 109, 0, 0, 41, 0,
	43, 68, 67, 0, 0, 0, 1193, 41, 0, 0,
	0, 0, 36, 65, 40, 39, 42, 1193, 0, 1075,
	0, 70, 0, 0, 0, 0, 0, 0, 2101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	56, 57, 0, 2102, 43, 68, 67, 0, 0, 56,
	57, 41, 2102, 2103, 66, 0, 47, 48, 0, 0,
	0, 0, 2103, 66, 0, 47, 48, 0, 0, 0,
	0, 0, 0, 0, 0, 528, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 56, 57, 0, 2102, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2103, 66, 0, 47,
	48, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 64, 0, 0, 0,
	0, 0, 0, 0, 0, 64, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 70, 0, 0, 0, 0, 0, 109, 0, 64,
	70, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 70, 0, 0, 0, 414, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	528, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 372, 0, 372, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 414, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 661, 641, 286, 599, 664, 571, 588, 675,
	589, 592, 630, 557, 611, 222, 586, 558, 0, 575,
	548, 582, 549, 572, 601, 156, 570, 643, 614, 663,
	186, 626, 0, 147, 194, 192, 0, 0, 109, 228,
	284, 662, 607, 0, 670, 189, 0, 623, 307, 275,
	207, 0, 0, 603, 650, 609, 639, 598, 632, 564,
	622, 665, 587, 628, 666, 528, 0, 0, 2147, 0,
	0, 0, 0, 0, 0, 109, 0, 137, 0, 625,
	660, 584, 627, 629, 546, 624, 0, 552, 559, 674,
	656, 578, 579, 580, 0, 0, 0, 0, 0, 0,
	0, 602, 610, 636, 595, 0, 0, 0, 0, 0,
	0, 0, 0, 576, 0, 620, 0, 0, 0, 560,
	553, 0, 0, 600, 0, 0, 0, 563, 116, 577,
	637, 0, 544, 166, 208, 127, 640, 655, 597, 179,
	313, 659, 594, 593, 242, 0, 280, 169, 187, 131,
	113, 125, 141, 168, 218, 251, 260, 585, 545, 644,
	573, 583, 148, 581, 253, 226, 302, 0, 617, 232,
	252, 190, 291, 244, 300, 301, 170, 285, 310, 315,
	272, 157, 0, 117, 0, 239, 152, 183, 596, 631,
	574, 145, 634, 621, 649, 271, 132, 287, 206, 212,
	142, 144, 143, 126, 266, 289, 136, 146, 276, 256,
	281, 151, 0, 0, 2150, 2151, 2152, 0, 0, 0,
	0, 118, 283, 299, 138, 264, 120, 297, 279, 204,
	180, 181, 119, 0, 249, 155, 165, 150, 221, 0,
	164, 241, 294, 295, 149, 317, 128, 309, 122, 129,
	308, 215, 0, 214, 311, 290, 298, 205, 198, 0,
	121, 296, 203, 197, 185, 160, 172, 237, 193, 238,
	173, 210, 209, 211, 0, 550, 0, 277, 305, 318,
	195, 134, 569, 265, 288, 0, 0, 135, 163, 159,
	236, 213, 130, 175, 274, 184, 191, 248, 316, 225,
	254, 139, 304, 273, 567, 568, 565, 0, 566, 612,
	613, 667, 668, 669, 638, 561, 0, 651, 652, 0,
	642, 657, 658, 633, 676, 590, 591, 551, 554, 555,
	556, 562, 604, 605, 616, 619, 647, 646, 645, 648,
	653, 672, 671, 673, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 615, 112, 123, 188, 677,
	246, 162, 306, 547, 154, 0, 0, 606, 608, 618,
	635, 114, 115, 124, 133, 140, 153, 158, 161, 167,
	171, 174, 176, 177, 178, 182, 196, 199, 200, 201,
	202, 216, 217, 219, 220, 223, 224, 227, 229, 230,
	231, 233, 234, 235, 240, 243, 245, 247, 250, 255,
	257, 258, 259, 261, 262, 263, 267, 268, 269, 270,
	278, 282, 292, 293, 303, 312, 314, 654, 661, 641,
	286, 599, 664, 571, 588, 675, 589, 592, 630, 557,
	611, 222, 586, 558, 0, 575, 548, 582, 549, 572,
	601, 156, 570, 643, 614, 663, 186, 626, 0, 147,
	194, 192, 0, 0, 0, 228, 284, 662, 607, 0,
	670, 189, 0, 623, 307, 275, 207, 0, 0, 603,
	650, 609, 639, 598, 632, 564, 622, 665, 587, 628,
	666, 0, 0, 0, 542, 0, 1311, 1312, 0, 0,
	0, 0, 0, 137, 0, 625, 660, 584, 627, 629,
	546, 624, 0, 552, 559, 674, 656, 578, 579, 580,
	1566, 0, 0, 0, 0, 0, 0, 602, 610, 636,
	595, 0, 0, 0, 0, 0, 0, 0, 0, 576,
	0, 620, 0, 0, 0, 560, 553, 0, 0, 600,
	0, 0, 0, 563, 116, 577, 637, 0, 544, 166,
	208, 127, 640, 655, 597, 179, 313, 659, 594, 593,
	242, 0, 280, 169, 187, 131, 113, 125, 141, 168,
	218, 251, 260, 585, 545, 644, 573, 583, 148, 581,
	253, 226, 302, 0, 617, 232, 252, 190, 291, 244,
	300, 301, 170, 285, 310, 315, 272, 157, 0, 117,
	0, 239, 152, 183, 596, 631, 574, 145, 634, 621,
	649, 271, 132, 287, 206, 212, 142, 144, 143, 126,
	266, 289, 136, 146, 276, 256, 281, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 118, 283, 299,
	138, 264, 120, 297, 279, 204, 180, 181, 119, 0,
	249, 155, 165, 150, 221, 0, 164, 241, 294, 295,
	149, 317, 128, 309, 122, 129, 308, 215, 0, 214,
	311, 290, 298, 205, 198, 0, 121, 296, 203, 197,
	185, 160, 172, 237, 193, 238, 173, 210, 209, 211,
	0, 550, 0, 277, 305, 318, 195, 134, 569, 265,
	288, 0, 0, 135, 163, 159, 236, 213, 130, 175,
	274, 184, 191, 248, 316, 225, 254, 139, 304, 273,
	567, 568, 565, 0, 566, 612, 613, 667, 668, 669,
	638, 561, 0, 651, 652, 0, 642, 657, 658, 633,
	676, 590, 591, 551, 554, 555, 556, 562, 604, 605,
	616, 619, 647, 646, 645, 648, 653, 672, 671, 673,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 615, 112, 123, 188, 677, 246, 162, 306, 547,
	154, 0, 0, 606, 608, 618, 635, 114, 115, 124,
	133, 140, 153, 158, 161, 167, 171, 174, 176, 177,
	178, 182, 196, 199, 200, 201, 202, 216, 217, 219,
	220, 223, 224, 227, 229, 230, 231, 233, 234, 235,
	240, 243, 245, 247, 250, 255, 257, 258, 259, 261,
	262, 263, 267, 268, 269, 270, 278, 282, 292, 293,
	303, 312, 314, 654, 661, 641, 286, 599, 664, 571,
	588, 675, 589, 592, 630, 557, 611, 222, 586, 558,
	0, 575, 548, 582, 549, 572, 601, 156, 570, 643,
	614, 663, 186, 626, 0, 147, 194, 192, 0, 0,
	0, 228, 284, 662, 607, 0, 670, 189, 0, 623,
	307, 275, 207, 0, 0, 603, 650, 609, 639, 598,
	632, 564, 622, 665, 587, 628, 666, 0, 0, 0,
	542, 0, 1311, 1312, 0, 0, 0, 0, 0, 137,
	0, 625, 660, 584, 627, 629, 546, 624, 0, 552,
	559, 674, 656, 578, 579, 580, 0, 0, 0, 0,
	0, 0, 0, 602, 610, 636, 595, 0, 0, 0,
	0, 0, 0, 0, 0, 576, 0, 620, 0, 0,
	0, 560, 553, 0, 0, 600, 0, 0, 0, 563,
	116, 577, 637, 0, 544, 166, 208, 127, 640, 655,
	597, 179, 313, 659, 594, 593, 242, 0, 280, 169,
	187, 131, 113, 125, 141, 168, 218, 251, 260, 585,
	545, 644, 573, 583, 148, 581, 253, 226, 302, 0,
	617, 232, 252, 190, 291, 244, 300, 301, 170, 285,
	310, 315, 272, 157, 0, 117, 0, 239, 152, 183,
	596, 631, 574, 145, 634, 621, 649, 271, 132, 287,
	206, 212, 142, 144, 143, 126, 266, 289, 136, 146,
	276, 256, 281, 151, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 118, 283, 299, 138, 264, 120, 297,
	279, 204, 180, 181, 119, 0, 249, 155, 165, 150,
	221, 0, 164, 241, 294, 295, 149, 317, 128, 309,
	122, 129, 308, 215, 0, 214, 311, 290, 298, 205,
	198, 0, 121, 296, 203, 197, 185, 160, 172, 237,
	193, 238, 173, 210, 209, 211, 0, 550, 0, 277,
	305, 318, 195, 134, 569, 265, 288, 0, 0, 135,
	163, 159, 236, 213, 130, 175, 274, 184, 191, 248,
	316, 225, 254, 139, 304, 273, 567, 568, 565, 0,
	566, 612, 613, 667, 668, 669, 638, 561, 0, 651,
	652, 0, 642, 657, 658, 633, 676, 590, 591, 551,
	554, 555, 556, 562, 604, 605, 616, 619, 647, 646,
	645, 648, 653, 672, 671, 673, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 615, 112, 123,
	188, 677, 246, 162, 306, 547, 154, 0, 0, 606,
	608, 618, 635, 114, 115, 124, 133, 140, 153, 158,
	161, 167, 171, 174, 176, 177, 178, 182, 196, 199,
	200, 201, 202, 216, 217, 219, 220, 223, 224, 227,
	229, 230, 231, 233, 234, 235, 240, 243, 245, 247,
	250, 255, 257, 258, 259, 261, 262, 263, 267, 268,
	269, 270, 278, 282, 292, 293, 303, 312, 314, 654,
	661, 641, 286, 599, 664, 571, 588, 675, 589, 592,
	630, 557, 611, 222, 586, 558, 0, 575, 548, 582,
	549, 572, 601, 156, 570, 643, 614, 663, 186, 626,
	0, 147, 194, 192, 0, 0, 0, 228, 284, 662,
	607, 0, 670, 189, 0, 623, 307, 275, 207, 0,
	0, 603, 650, 609, 639, 598, 632, 564, 622, 665,
	587, 628, 666, 0, 0, 0, 542, 0, 0, 0,
	0, 0, 0, 0, 0, 137, 0, 625, 660, 584,
	627, 629, 546, 624, 0, 552, 559, 674, 656, 578,
	579, 580, 0, 0, 0, 0, 0, 0, 0, 602,
	610, 636, 595, 0, 0, 0, 0, 0, 0, 1976,
	0, 576, 0, 620, 0, 0, 0, 560, 553, 0,
	0, 600, 0, 0, 0, 563, 116, 577, 637, 0,
	544, 166, 208, 127, 640, 655, 597, 179, 313, 659,
	594, 593, 242, 0, 280, 169, 187, 131, 113, 125,
	141, 168, 218, 251, 260, 585, 545, 644, 573, 583,
	148, 581, 253, 226, 302, 0, 617, 232, 252, 190,
	291, 244, 300, 301, 170, 285, 310, 315, 272, 157,
	0, 117, 0, 239, 152, 183, 596, 631, 574, 145,
	634, 621, 649, 271, 132, 287, 206, 212, 142, 144,
	143, 126, 266, 289, 136, 146, 276, 256, 281, 151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 118,
	283, 299, 138, 264, 120, 297, 279, 204, 180, 181,
	119, 0, 249, 155, 165, 150, 221, 0, 164, 241,
	294, 295, 149, 317, 128, 309, 122, 129, 308, 215,
	0, 214, 311, 290, 298, 205, 198, 0, 121, 296,
	203, 197, 185, 160, 172, 237, 193, 238, 173, 210,
	209, 211, 0, 550, 0, 277, 305, 318, 195, 134,
	569, 265, 288, 0, 0, 135, 163, 159, 236, 213,
	130, 175, 274, 184, 191, 248, 316, 225, 254, 139,
	304, 273, 567, 568, 565, 0, 566, 612, 613, 667,
	668, 669, 638, 561, 0, 651, 652, 0, 642, 657,
	658, 633, 676, 590, 591, 551, 554, 555, 556, 562,
	604, 605, 616, 619, 647, 646, 645, 648, 653, 672,
	671, 673, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 615, 112, 123, 188, 677, 246, 162,
	306, 547, 154, 0, 0, 606, 608, 618, 635, 114,
	115, 124, 133, 140, 153, 158, 161, 167, 171, 174,
	176, 177, 178, 182, 196, 199, 200, 201, 202, 216,
	217, 219, 220, 223, 224, 227, 229, 230, 231, 233,
	234, 235, 240, 243, 245, 247, 250, 255, 257, 258,
	259, 261, 262, 263, 267, 268, 269, 270, 278, 282,
	292, 293, 303, 312, 314, 654, 661, 641, 286, 599,
	664, 571, 588, 675, 589, 592, 630, 557, 611, 222,
	586, 558, 0, 575, 548, 582, 549, 572, 601, 156,
	570, 643, 614, 663, 186, 626, 0, 147, 194, 192,
	0, 0, 0, 228, 284, 662, 607, 0, 670, 189,
	0, 623, 307, 275, 207, 0, 0, 603, 650, 609,
	639, 598, 632, 564, 622, 665, 587, 628, 666, 0,
	0, 0, 419, 0, 0, 0, 0, 0, 0, 0,
	0, 137, 0, 625, 660, 584, 627, 629, 546, 624,
	0, 552, 559, 674, 656, 578, 579, 580, 0, 0,
	0, 0, 0, 0, 0, 602, 610, 636, 595, 0,
	0, 0, 0, 0, 0, 1694, 0, 576, 0, 620,
	0, 0, 0, 560, 553, 0, 0, 600, 0, 0,
	0, 563, 116, 577, 637, 0, 544, 166, 208, 127,
	640, 655, 597, 179, 313, 659, 594, 593, 242, 0,
	280, 169, 187, 131, 113, 125, 141, 168, 218, 251,
	260, 585, 545, 644, 573, 583, 148, 581, 253, 226,
	302, 0, 617, 232, 252, 190, 291, 244, 300, 301,
	170, 285, 310, 315, 272, 157, 0, 117, 0, 239,
	152, 183, 596, 631, 574, 145, 634, 621, 649, 271,
	132, 287, 206, 212, 142, 144, 143, 126, 266, 289,
	136, 146, 276, 256, 281, 151, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 118, 283, 299, 138, 264,
	120, 297, 279, 204, 180, 181, 119, 0, 249, 155,
	165, 150, 221, 0, 164, 241, 294, 295, 149, 317,
	128, 309, 122, 129, 308, 215, 0, 214, 311, 290,
	298, 205, 198, 0, 121, 296, 203, 197, 185, 160,
	172, 237, 193, 238, 173, 210, 209, 211, 0, 550,
	0, 277, 305, 318, 195, 134, 569, 265, 288, 0,
	0, 135, 163, 159, 236, 213, 130, 175, 274, 184,
	191, 248, 316, 225, 254, 139, 304, 273, 567, 568,
	565, 0, 566, 612, 613, 667, 668, 669, 638, 561,
	0, 651, 652, 0, 642, 657, 658, 633, 676, 590,
	591, 551, 554, 555, 556, 562, 604, 605, 616, 619,
	647, 646, 645, 648, 653, 672, 671, 673, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 615,
	112, 123, 188, 677, 246, 162, 306, 547, 154, 0,
	0, 606, 608, 618, 635, 114, 115, 124, 133, 140,
	153, 158, 161, 167, 171, 174, 176, 177, 178, 182,
	196, 199, 200, 201, 202, 216, 217, 219, 220, 223,
	224, 227, 229, 230, 231, 233, 234, 235, 240, 243,
	245, 247, 250, 255, 257, 258, 259, 261, 262, 263,
	267, 268, 269, 270, 278, 282, 292, 293, 303, 312,
	314, 654, 661, 641, 286, 599, 664, 571, 588, 675,
	589, 592, 630, 557, 611, 222, 586, 558, 0, 575,
	548, 582, 549, 572, 601, 156, 570, 643, 614, 663,
	186, 626, 0, 147, 194, 192, 0, 0, 0, 228,
	284, 662, 607, 0, 670, 189, 0, 623, 307, 275,
	207, 0, 0, 603, 650, 609, 639, 598, 632, 564,
	622, 665, 587, 628, 666, 0, 0, 0, 542, 0,
	0, 0, 0, 0, 0, 0, 0, 137, 0, 625,
	660, 584, 627, 629, 546, 624, 0, 552, 559, 674,
	656, 578, 579, 580, 0, 0, 0, 0, 0, 0,
	0, 602, 610, 636, 595, 0, 0, 0, 0, 0,
	0, 1686, 0, 576, 0, 620, 0, 0, 0, 560,
	553, 0, 0, 600, 0, 0, 0, 563, 116, 577,
	637, 0, 544, 166, 208, 127, 640, 655, 597, 179,
	313, 659, 594, 593, 242, 0, 280, 169, 187, 131,
	113, 125, 141, 168, 218, 251, 260, 585, 545, 644,
	573, 583, 148, 581, 253, 226, 302, 0, 617, 232,
	252, 190, 291, 244, 300, 301, 170, 285, 310, 315,
	272, 157, 0, 117, 0, 239, 152, 183, 596, 631,
	574, 145, 634, 621, 649, 271, 132, 287, 206, 212,
	142, 144, 143, 126, 266, 289, 136, 146, 276, 256,
	281, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 118, 283, 299, 138, 264, 120, 297, 279, 204,
	180, 181, 119, 0, 249, 155, 165, 150, 221, 0,
	164, 241, 294, 295, 149, 317, 128, 309, 122, 129,
	308, 215, 0, 214, 311, 290, 298, 205, 198, 0,
	121, 296, 203, 197, 185, 160, 172, 237, 193, 238,
	173, 210, 209, 211, 0, 550, 0, 277, 305, 318,
	195, 134, 569, 265, 288, 0, 0, 135, 163, 159,
	236, 213, 130, 175, 274, 184, 191, 248, 316, 225,
	254, 139, 304, 273, 567, 568, 565, 0, 566, 612,
	613, 667, 668, 669, 638, 561, 0, 651, 652, 0,
	642, 657, 658, 633, 676, 590, 591, 551, 554, 555,
	556, 562, 604, 605, 616, 619, 647, 646, 645, 648,
	653, 672, 671, 673, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 615, 112, 123, 188, 677,
	246, 162, 306, 547, 154, 0, 0, 606, 608, 618,
	635, 114, 115, 124, 133, 140, 153, 158, 161, 167,
	171, 174, 176, 177, 178, 182, 196, 199, 200, 201,
	202, 216, 217, 219, 220, 223, 224, 227, 229, 230,
	231, 233, 234, 235, 240, 243, 245, 247, 250, 255,
	257, 258, 259, 261, 262, 263, 267, 268, 269, 270,
	278, 282, 292, 293, 303, 312, 314, 654, 661, 641,
	286, 599, 664, 571, 588, 675, 589, 592, 630, 557,
	611, 222, 586, 558, 0, 575, 548, 582, 549, 572,
	601, 156, 570, 643, 614, 663, 186, 626, 0, 147,
	194, 192, 0, 0, 0, 228, 284, 662, 607, 0,
	670, 189, 0, 623, 307, 275, 207, 0, 0, 603,
	650, 609, 639, 598, 632, 564, 622, 665, 587, 628,
	666, 72, 0, 0, 542, 0, 0, 0, 0, 0,
	0, 0, 0, 137, 0, 625, 660, 584, 627, 629,
	546, 624, 0, 552, 559, 674, 656, 578, 579, 580,
	0, 0, 0, 0, 0, 0, 0, 602, 610, 636,
	595, 0, 0, 0, 0, 0, 0, 0, 0, 576,
	0, 620, 0, 0, 0, 560, 553, 0, 0, 600,
	0, 0, 0, 563, 116, 577, 637, 0, 544, 166,
	208, 127, 640, 655, 597, 179, 313, 659, 594, 593,
	242, 0, 280, 169, 187, 131, 113, 125, 141, 168,
	218, 251, 260, 585, 545, 644, 573, 583, 148, 581,
	253, 226, 302, 0, 617, 232, 252, 190, 291, 244,
	300, 301, 170, 285, 310, 315, 272, 157, 0, 117,
	0, 239, 152, 183, 596, 631, 574, 145, 634, 621,
	649, 271, 132, 287, 206, 212, 142, 144, 143, 126,
	266, 289, 136, 146, 276, 256, 281, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 118, 283, 299,
	138, 264, 120, 297, 279, 204, 180, 181, 119, 0,
	249, 155, 165, 150, 221, 0, 164, 241, 294, 295,
	149, 317, 128, 309, 122, 129, 308, 215, 0, 214,
	311, 290, 298, 205, 198, 0, 121, 296, 203, 197,
	185, 160, 172, 237, 193, 238, 173, 210, 209, 211,
	0, 550, 0, 277, 305, 318, 195, 134, 569, 265,
	288, 0, 0, 135, 163, 159, 236, 213, 130, 175,
	274, 184, 191, 248, 316, 225, 254, 139, 304, 273,
	567, 568, 565, 0, 566, 612, 613, 667, 668, 669,
	638, 561, 0, 651, 652, 0, 642, 657, 658, 633,
	676, 590, 591, 551, 554, 555, 556, 562, 604, 605,
	616, 619, 647, 646, 645, 648, 653, 672, 671, 673,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 615, 112, 123, 188, 677, 246, 162, 306, 547,
	154, 0, 0, 606, 608, 618, 635, 114, 115, 124,
	133, 140, 153, 158, 161, 167, 171, 174, 176, 177,
	178, 182, 196, 199, 200, 201, 202, 216, 217, 219,
	220, 223, 224, 227, 229, 230, 231, 233, 234, 235,
	240, 243, 245, 247, 250, 255, 257, 258, 259, 261,
	262, 263, 267, 268, 269, 270, 278, 282, 292, 293,
	303, 312, 314, 654, 661, 641, 286, 599, 664, 571,
	588, 675, 589, 592, 630, 557, 611, 222, 586, 558,
	0, 575, 548, 582, 549, 572, 601, 156, 570, 643,
	614, 663, 186, 626, 0, 147, 194, 192, 0, 0,
	0, 228, 284, 662, 607, 0, 670, 189, 0, 623,
	307, 275, 207, 0, 0, 603, 650, 609, 639, 598,
	632, 564, 622, 665, 587, 628, 666, 0, 0, 0,
	110, 0, 0, 0, 0, 0, 0, 0, 0, 137,
	0, 625, 660, 584, 627, 629, 546, 624, 0, 552,
	559, 674, 656, 578, 579, 580, 0, 0, 0, 0,
	0, 0, 0, 602, 610, 636, 595, 0, 0, 0,
	0, 0, 0, 1285, 0, 576, 0, 620, 0, 0,
	0, 560, 553, 0, 0, 600, 0, 0, 0, 563,
	116, 577, 637, 0, 544, 166, 208, 127, 640, 655,
	597, 179, 313, 659, 594, 593, 242, 0, 280, 169,
	187, 131, 113, 125, 141, 168, 218, 251, 260, 585,
	545, 644, 573, 583, 148, 581, 253, 226, 302, 0,
	617, 232, 252, 190, 291, 244, 300, 301, 170, 285,
	310, 315, 272, 157, 0, 117, 0, 239, 152, 183,
	596, 631, 574, 145, 634, 621, 649, 271, 132, 287,
	206, 212, 142, 144, 143, 126, 266, 289, 136, 146,
	276, 256, 281, 151, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 118, 283, 299, 138, 264, 120, 297,
	279, 204, 180, 181, 119, 0, 249, 155, 165, 150,
	221, 0, 164, 241, 294, 295, 149, 317, 128, 309,
	122, 129, 308, 215, 0, 214, 311, 290, 298, 205,
	198, 0, 121, 296, 203, 197, 185, 160, 172, 237,
	193, 238, 173, 210, 209, 211, 0, 550, 0, 277,
	305, 318, 195, 134, 569, 265, 288, 0, 0, 135,
	163, 159, 236, 213, 130, 175, 274, 184, 191, 248,
	316, 225, 254, 139, 304, 273, 567, 568, 565, 0,
	566, 612, 613, 667, 668, 669, 638, 561, 0, 651,
	652, 0, 642, 657, 658, 633, 676, 590, 591, 551,
	554, 555, 556, 562, 604, 605, 616, 619, 647, 646,
	645, 648, 653, 672, 671, 673, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 615, 112, 123,
	188, 677, 246, 162, 306, 547, 154, 0, 0, 606,
	608, 618, 635, 114, 115, 124, 133, 140, 153, 158,
	161, 167, 171, 174, 176, 177, 178, 182, 196, 199,
	200, 201, 202, 216, 217, 219, 220, 223, 224, 227,
	229, 230, 231, 233, 234, 235, 240, 243, 245, 247,
	250, 255, 257, 258, 259, 261, 262, 263, 267, 268,
	269, 270, 278, 282, 292, 293, 303, 312, 314, 654,
	661, 641, 286, 599, 664, 571, 588, 675, 589, 592,
	630, 557, 611, 222, 586, 558, 0, 575, 548, 582,
	549, 572, 601, 156, 570, 643, 614, 663, 186, 626,
	0, 147, 194, 192, 0, 0, 0, 228, 284, 662,
	607, 0, 670, 189, 0, 623, 307, 275, 207, 0,
	0, 603, 650, 609, 639, 598, 632, 564, 622, 665,
	587, 628, 666, 0, 0, 0, 419, 0, 0, 0,
	0, 0, 0, 0, 0, 137, 0, 625, 660, 584,
	627, 629, 546, 624, 0, 552, 559, 674, 656, 578,
	579, 580, 0, 0, 0, 0, 0, 0, 0, 602,
	610, 636, 595, 0, 0, 0, 0, 0, 0, 1149,
	0, 576, 0, 620, 0, 0, 0, 560, 553, 0,
	0, 600, 0, 0, 0, 563, 116, 577, 637, 0,
	544, 166, 208, 127, 640, 655, 597, 179, 313, 659,
	594, 593, 242, 0, 280, 169, 187, 131, 113, 125,
	141, 168, 218, 251, 260, 585, 545, 644, 573, 583,
	148, 581, 253, 226, 302, 0, 617, 232, 252, 190,
	291, 244, 300, 301, 170, 285, 310, 315, 272, 157,
	0, 117, 0, 239, 152, 183, 596, 631, 574, 145,
	634, 621, 649, 271, 132, 287, 206, 212, 142, 144,
	143, 126, 266, 289, 136, 146, 276, 256, 281, 151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 118,
	283, 299, 138, 264, 120, 297, 279, 204, 180, 181,
	119, 0, 249, 155, 165, 150, 221, 0, 164, 241,
	294, 295, 149, 317, 128, 309, 122, 129, 308, 215,
	0, 214, 311, 290, 298, 205, 198, 0, 121, 296,
	203, 197, 185, 160, 172, 237, 193, 238, 173, 210,
	209, 211, 0, 550, 0, 277, 305, 318, 195, 134,
	569, 265, 288, 0, 0, 135, 163, 159, 236, 213,
	130, 175, 274, 184, 191, 248, 316, 225, 254, 139,
	304, 273, 567, 568, 565, 0, 566, 612, 613, 667,
	668, 669, 638, 561, 0, 651, 652, 0, 642, 657,
	658, 633, 676, 590, 591, 551, 554, 555, 556, 562,
	604, 605, 616, 619, 647, 646, 645, 648, 653, 672,
	671, 673, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 615, 112, 123, 188, 677, 246, 162,
	306, 547, 154, 0, 0, 606, 608, 618, 635, 114,
	115, 124, 133, 140, 153, 158, 161, 167, 171, 174,
	176, 177, 178, 182, 196, 199, 200, 201, 202, 216,
	217, 219, 220, 223, 224, 227, 229, 230, 231, 233,
	234, 235, 240, 243, 245, 247, 250, 255, 257, 258,
	259, 261, 262, 263, 267, 268, 269, 270, 278, 282,
	292, 293, 303, 312, 314, 654, 661, 641, 286, 599,
	664, 571, 588, 675, 589, 592, 630, 557, 611, 222,
	586, 558, 0, 575, 548, 582, 549, 572, 601, 156,
	570, 643, 614, 663, 186, 626, 0, 147, 194, 192,
	0, 0, 0, 228, 284, 662, 607, 0, 670, 189,
	0, 623, 307, 275, 207, 0, 0, 603, 650, 609,
	639, 598, 632, 564, 622, 665, 587, 628, 666, 0,
	0, 0, 542, 0, 0, 0, 0, 0, 0, 0,
	0, 137, 0, 625, 660, 584, 627, 629, 546, 624,
	0, 552, 559, 674, 656, 578, 579, 580, 0, 0,
	0, 0, 0, 0, 0, 602, 610, 636, 595, 0,
	0, 0, 0, 0, 0, 0, 0, 576, 0, 620,
	0, 0, 0, 560, 553, 0, 0, 600, 0, 0,
	0, 563, 116, 577, 637, 0, 544, 166, 208, 127,
	640, 655, 597, 179, 313, 659, 594, 593, 242, 0,
	280, 169, 187, 131, 113, 125, 141, 168, 218, 251,
	260, 585, 545, 644, 573, 583, 148, 581, 253, 226,
	302, 0, 617, 232, 252, 190, 291, 244, 300, 301,
	170, 285, 310, 315, 272, 157, 0, 117, 0, 239,
	152, 183, 596, 631, 574, 145, 634, 621, 649, 271,
	132, 287, 206, 212, 142, 144, 143, 126, 266, 289,
	136, 146, 276, 256, 281, 151, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 118, 283, 299, 138, 264,
	120, 297, 279, 204, 180, 181, 119, 0, 249, 155,
	165, 150, 221, 0, 164, 241, 294, 295, 149, 317,
	128, 309, 122, 129, 308, 215, 0, 214, 311, 290,
	298, 205, 198, 0, 121, 296, 203, 197, 185, 160,
	172, 237, 193, 238, 173, 210, 209, 211, 0, 550,
	0, 277, 305, 318, 195, 134, 569, 265, 288, 0,
	0, 135, 163, 159, 236, 213, 130, 175, 274, 184,
	191, 248, 316, 225, 254, 139, 304, 273, 567, 568,
	565, 0, 566, 612, 613, 667, 668, 669, 638, 561,
	0, 651, 652, 0, 642, 657, 658, 633, 676, 590,
	591, 551, 554, 555, 556, 562, 604, 605, 616, 619,
	647, 646, 645, 648, 653, 672, 671, 673, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 615,
	112, 123, 188, 677, 246, 162, 306, 547, 154, 0,
	0, 606, 608, 618, 635, 114, 115, 124, 133, 140,
	153, 158, 161, 167, 171, 174, 176, 177, 178, 182,
	196, 199, 200, 201, 202, 216, 217, 219, 220, 223,
	224, 227, 229, 230, 231, 233, 234, 235, 240, 243,
	245, 247, 250, 255, 257, 258, 259, 261, 262, 263,
	267, 268, 269, 270, 278, 282, 292, 293, 303, 312,
	314, 654, 661, 641, 286, 599, 664, 571, 588, 675,
	589, 592, 630, 557, 611, 222, 586, 558, 0, 575,
	548, 582, 549, 572, 601, 156, 570, 643, 614, 663,
	186, 626, 0, 147, 194, 192, 0, 0, 0, 228,
	284, 662, 607, 0, 670, 189, 0, 623, 307, 275,
	207, 0, 0, 603, 650, 609, 639, 598, 632, 564,
	622, 665, 587, 628, 666, 0, 0, 0, 419, 0,
	0, 0, 0, 0, 0, 0, 0, 137, 0, 625,
	660, 584, 627, 629, 546, 624, 0, 552, 559, 674,
	656, 578, 579, 580, 0, 0, 0, 0, 0, 0,
	0, 602, 610, 636, 595, 0, 0, 0, 0, 0,
	0, 0, 0, 576, 0, 620, 0, 0, 0, 560,
	553, 0, 0, 600, 0, 0, 0, 563, 116, 577,
	637, 0, 544, 166, 208, 127, 640, 655, 597, 179,
	313, 659, 594, 593, 242, 0, 280, 169, 187, 131,
	113, 125, 141, 168, 218, 251, 260, 585, 545, 644,
	573, 583, 148, 581, 253, 226, 302, 0, 617, 232,
	252, 190, 291, 244, 300, 301, 170, 285, 310, 315,
	272, 157, 0, 117, 0, 239, 152, 183, 596, 631,
	574, 145, 634, 621, 649, 271, 132, 287, 206, 212,
	142, 144, 143, 126, 266, 289, 136, 146, 276, 256,
	281, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 118, 283, 299, 138, 264, 120, 297, 279, 204,
	180, 181, 119, 0, 249, 155, 165, 150, 221, 0,
	164, 241, 294, 295, 149, 317, 128, 309, 122, 129,
	308, 215, 0, 214, 311, 290, 298, 205, 198, 0,
	121, 296, 203, 197, 185, 160, 172, 237, 193, 238,
	173, 210, 209, 211, 0, 550, 0, 277, 305, 318,
	195, 134, 569, 265, 288, 0, 0, 135, 163, 159,
	236, 213, 130, 175, 274, 184, 191, 248, 316, 225,
	254, 139, 304, 273, 567, 568, 565, 0, 566, 612,
	613, 667, 668, 669, 638, 561, 0, 651, 652, 0,
	642, 657, 658, 633, 676, 590, 591, 551, 554, 555,
	556, 562, 604, 605, 616, 619, 647, 646, 645, 648,
	653, 672, 671, 673, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 615, 112, 123, 188, 677,
	246, 162, 306, 547, 154, 0, 0, 606, 608, 618,
	635, 114, 115, 124, 133, 140, 153, 158, 161, 167,
	171, 174, 176, 177, 178, 182, 196, 199, 200, 201,
	202, 216, 217, 219, 220, 223, 224, 227, 229, 230,
	231, 233, 234, 235, 240, 243, 245, 247, 250, 255,
	257, 258, 259, 261, 262, 263, 267, 268, 269, 270,
	278, 282, 292, 293, 303, 312, 314, 654, 661, 641,
	286, 599, 664, 571, 588, 675, 589, 592, 630, 557,
	611, 222, 586, 558, 0, 575, 548, 582, 549, 572,
	601, 156, 570, 643, 614, 663, 186, 626, 0, 147,
	194, 192, 0, 0, 0, 228, 284, 1322, 1326, 0,
	670, 189, 0, 623, 307, 275, 207, 0, 0, 603,
	650, 609, 639, 598, 632, 564, 622, 665, 587, 628,
	666, 0, 0, 0, 542, 0, 0, 0, 0, 0,
	0, 0, 0, 137, 0, 625, 660, 584, 627, 629,
	546, 624, 0, 552, 559, 674, 656, 578, 579, 580,
	0, 0, 0, 0, 0, 0, 0, 602, 610, 636,
	595, 0, 0, 0, 0, 0, 0, 0, 0, 576,
	0, 620, 0, 0, 0, 560, 553, 0, 0, 600,
	0, 0, 0, 563, 116, 577, 637, 0, 544, 166,
	208, 127, 640, 655, 1325, 179, 313, 659, 594, 593,
	1320, 0, 1321, 169, 187, 541, 113, 125, 1318, 1324,
	218, 251, 260, 585, 545, 644, 573, 583, 148, 581,
	253, 226, 302, 0, 617, 232, 252, 190, 291, 244,
	300, 301, 170, 285, 310, 315, 272, 157, 0, 117,
	0, 239, 152, 183, 596, 631, 574, 145, 634, 621,
	649, 271, 132, 287, 206, 212, 142, 144, 143, 126,
	266, 289, 136, 146, 276, 256, 281, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 118, 283, 299,
	138, 264, 120, 297, 279, 204, 180, 181, 119, 0,
	249, 155, 165, 150, 221, 0, 164, 241, 294, 295,
	149, 317, 128, 309, 122, 129, 308, 215, 0, 214,
	311, 290, 298, 205, 198, 0, 121, 296, 203, 197,
	185, 160, 172, 237, 193, 238, 173, 210, 209, 211,
	0, 550, 0, 277, 305, 318, 195, 134, 569, 265,
	288, 0, 0, 135, 163, 159, 236, 213, 130, 175,
	274, 184, 191, 248, 316, 225, 254, 139, 304, 273,
	567, 568, 565, 0, 566, 612, 613, 667, 668, 669,
	638, 561, 0, 651, 652, 0, 642, 657, 658, 633,
	676, 590, 591, 551, 554, 555, 556, 562, 604, 605,
	616, 619, 647, 646, 645, 648, 653, 672, 671, 673,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 615, 112, 123, 188, 677, 246, 162, 306, 547,
	154, 0, 0, 606, 608, 618, 635, 114, 115, 124,
	133, 140, 153, 158, 161, 167, 171, 174, 176, 177,
	178, 182, 196, 199, 200, 201, 202, 216, 217, 219,
	220, 223, 224, 227, 229, 230, 231, 233, 234, 235,
	240, 243, 245, 247, 250, 255, 257, 258, 259, 261,
	262, 263, 267, 268, 269, 270, 278, 282, 292, 293,
	303, 312, 314, 654, 661, 641, 286, 599, 664, 571,
	588, 675, 589, 592, 630, 557, 611, 222, 586, 558,
	0, 575, 548, 582, 549, 572, 601, 156, 570, 643,
	614, 663, 186, 626, 0, 147, 194, 192, 0, 0,
	0, 228, 284, 662, 607, 0, 670, 189, 0, 623,
	307, 275, 207, 0, 0, 603, 650, 609, 639, 598,
	632, 564, 622, 665, 587, 628, 666, 0, 0, 0,
	110, 0, 0, 0, 0, 0, 0, 0, 0, 137,
	0, 625, 660, 584, 627, 629, 546, 624, 0, 552,
	559, 674, 656, 578, 579, 580, 0, 0, 0, 0,
	0, 0, 0, 602, 610, 636, 595, 0, 0, 0,
	0, 0, 0, 0, 0, 576, 0, 620, 0, 0,
	0, 560, 553, 0, 0, 600, 0, 0, 0, 563,
	116, 577, 637, 0, 544, 166, 208, 127, 640, 655,
	597, 179, 313, 659, 594, 593, 242, 0, 280, 169,
	187, 131, 113, 125, 141, 168, 218, 251, 260, 585,
	545, 644, 573, 583, 148, 581, 253, 226, 302, 0,
	617, 232, 252, 190, 291, 244, 300, 301, 170, 285,
	310, 315, 272, 157, 0, 117, 0, 239, 152, 183,
	596, 631, 574, 145, 634, 621, 649, 271, 132, 287,
	206, 212, 142, 144, 143, 126, 266, 289, 136, 146,
	276, 256, 281, 151, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 118, 283, 299, 138, 264, 120, 297,
	279, 204, 180, 181, 119, 0, 249, 155, 165, 150,
	221, 0, 164, 241, 294, 295, 149, 317, 128, 309,
	122, 129, 308, 215, 0, 214, 311, 290, 298, 205,
	198, 0, 121, 296, 203, 197, 185, 160, 172, 237,
	193, 238, 173, 210, 209, 211, 0, 550, 0, 277,
	305, 318, 195, 134, 569, 265, 288, 0, 0, 135,
	163, 159, 236, 213, 130, 175, 274, 184, 191, 248,
	316, 225, 254, 139, 304, 273, 567, 568, 565, 0,
	566, 612, 613, 667, 668, 669, 638, 561, 0, 651,
	652, 0, 642, 657, 658, 633, 676, 590, 591, 551,
	554, 555, 556, 562, 604, 605, 616, 619, 647, 646,
	645, 648, 653, 672, 671, 673, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 615, 112, 123,
	188, 677, 246, 162, 306, 547, 154, 0, 0, 606,
	608, 618, 635, 114, 115, 124, 133, 140, 153, 158,
	161, 167, 171, 174, 176, 177, 178, 182, 196, 199,
	200, 201, 202, 216, 217, 219, 220, 223, 224, 227,
	229, 230, 231, 233, 234, 235, 240, 243, 245, 247,
	250, 255, 257, 258, 259, 261, 262, 263, 267, 268,
	269, 270, 278, 282, 292, 293, 303, 312, 314, 654,
	661, 641, 286, 599, 664, 571, 588, 675, 589, 592,
	630, 557, 611, 222, 586, 558, 0, 575, 548, 582,
	549, 572, 601, 156, 570, 643, 614, 663, 186, 626,
	0, 147, 194, 192, 0, 0, 0, 228, 284, 662,
	607, 0, 670, 189, 0, 623, 307, 275, 207, 0,
	0, 603, 650, 609, 639, 598, 632, 564, 622, 665,
	587, 628, 666, 0, 0, 0, 542, 0, 0, 0,
	0, 0, 0, 0, 0, 137, 0, 625, 660, 584,
	627, 629, 546, 624, 0, 552, 559, 674, 656, 578,
	579, 580, 0, 0, 0, 0, 0, 0, 0, 602,
	610, 636, 595, 0, 0, 0, 0, 0, 0, 0,
	0, 576, 0, 620, 0, 0, 0, 560, 553, 0,
	0, 600, 0, 0, 0, 563, 116, 577, 637, 0,
	544, 166, 208, 127, 640, 655, 597, 179, 313, 659,
	594, 593, 242, 0, 280, 169, 187, 541, 113, 125,
	537, 168, 218, 251, 260, 585, 545, 644, 573, 583,
	148, 581, 253, 226, 302, 0, 617, 232, 252, 190,
	291, 244, 300, 301, 170, 285, 310, 315, 272, 157,
	0, 117, 0, 239, 152, 183, 596, 631, 574, 145,
	634, 621, 649, 271, 132, 287, 206, 212, 142, 144,
	143, 126, 266, 289, 136, 146, 276, 256, 281, 151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 118,
	283, 299, 138, 264, 120, 297, 279, 204, 180, 181,
	119, 0, 249, 155, 165, 150, 221, 0, 164, 241,
	294, 295, 149, 317, 128, 309, 122, 129, 308, 215,
	0, 214, 311, 290, 298, 205, 198, 0, 121, 296,
	203, 197, 185, 160, 172, 237, 193, 238, 173, 210,
	209, 211, 0, 550, 0, 277, 305, 318, 195, 134,
	569, 265, 288, 0, 0, 135, 163, 159, 236, 213,
	130, 175, 274, 184, 191, 248, 316, 225, 254, 139,
	304, 273, 567, 568, 565, 0, 566, 612, 613, 667,
	668, 669, 638, 561, 0, 651, 652, 0, 642, 657,
	658, 633, 676, 590, 591, 551, 554, 555, 556, 562,
	604, 605, 616, 619, 647, 646, 645, 648, 653, 672,
	671, 673, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 615, 112, 123, 188, 677, 246, 162,
	306, 547, 154, 0, 0, 606, 608, 618, 635, 114,
	115, 124, 133, 140, 153, 158, 161, 167, 171, 174,
	176, 177, 178, 182, 196, 199, 200, 201, 202, 216,
	217, 219, 220, 223, 224, 227, 229, 230, 231, 233,
	234, 235, 240, 243, 245, 247, 250, 255, 257, 258,
	259, 261, 262, 263, 267, 268, 269, 270, 278, 282,
	292, 293, 303, 312, 314, 654, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 222, 0, 0,
	0, 0, 0, 421, 0, 0, 0, 156, 418, 0,
	0, 0, 186, 0, 0, 147, 194, 192, 0, 0,
	0, 228, 284, 0, 0, 0, 465, 189, 0, 0,
	307, 275, 207, 0, 0, 0, 0, 454, 455, 0,
	0, 0, 0, 0, 0, 1297, 0, 72, 0, 0,
	419, 442, 441, 444, 445, 446, 447, 0, 0, 137,
	443, 448, 449, 450, 1298, 0, 0, 416, 433, 0,
	464, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 430, 431, 0, 0, 0, 0, 479, 0, 432,
	0, 0, 427, 428, 429, 434, 0, 0, 0, 0,
	116, 0, 0, 0, 0, 166, 208, 127, 456, 0,
	0, 179, 313, 0, 0, 477, 242, 0, 280, 169,
	187, 131, 113, 125, 141, 168, 218, 251, 260, 462,
	0, 0, 0, 0, 148, 0, 253, 226, 302, 0,
	0, 232, 252, 190, 291, 244, 300, 301, 170, 285,
	310, 315, 272, 157, 0, 117, 0, 239, 152, 183,
	0, 0, 0, 145, 0, 0, 0, 271, 132, 287,
	206, 212, 142, 144, 143, 126, 266, 289, 136, 146,
	276, 256, 281, 151, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 118, 283, 299, 138, 264, 120, 297,
	279, 204, 180, 181, 119, 0, 249, 155, 165, 150,
	221, 0, 164, 241, 294, 295, 149, 317, 128, 309,
	122, 129, 308, 215, 0, 214, 311, 290, 298, 205,
	198, 0, 121, 296, 203, 197, 185, 160, 172, 237,
	193, 238, 173, 210, 209, 211, 0, 0, 0, 277,
	305, 318, 195, 134, 0, 265, 288, 0, 0, 135,
	163, 159, 236, 213, 130, 175, 274, 184, 191, 248,
	316, 225, 254, 139, 304, 273, 466, 478, 472, 474,
	473, 470, 471, 469, 468, 467, 480, 457, 458, 459,
	460, 463, 0, 475, 476, 0, 0, 0, 0, 493,
	494, 495, 496, 497, 498, 499, 492, 500, 501, 502,
	503, 504, 505, 506, 507, 508, 481, 482, 483, 484,
	485, 486, 487, 488, 491, 489, 490, 461, 112, 123,
	188, 0, 246, 162, 306, 0, 154, 0, 0, 0,
	0, 0, 0, 114, 115, 124, 133, 140, 153, 158,
	161, 167, 171, 174, 176, 177, 178, 182, 196, 199,
	200, 201, 202, 216, 217, 219, 220, 223, 224, 227,
	229, 230, 231, 233, 234, 235, 240, 243, 245, 247,
	250, 255, 257, 258, 259, 261, 262, 263, 267, 268,
	269, 270, 278, 282, 292, 293, 303, 312, 314, 29,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 0, 0, 0, 0, 0, 421, 0, 0,
	0, 156, 418, 0, 0, 0, 186, 0, 0, 147,
	194, 192, 0, 0, 0, 228, 284, 0, 0, 0,
	465, 189, 0, 0, 307, 275, 207, 0, 0, 0,
	0, 454, 455, 0, 0, 0, 0, 0, 0, 0,
	0, 72, 0, 0, 419, 442, 441, 444, 445, 446,
	447, 0, 0, 137, 443, 448, 449, 450, 0, 0,
	0, 416, 433, 0, 464, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 430, 431, 0, 0, 0,
	0, 479, 0, 432, 0, 0, 427, 428, 429, 434,
	0, 0, 0, 0, 116, 0, 0, 0, 0, 166,
	208, 127, 456, 0, 0, 179, 313, 0, 0, 477,
	242, 0, 280, 169, 187, 131, 113, 125, 141, 168,
	218, 251, 260, 462, 0, 0, 0, 0, 148, 0,
	253, 226, 302, 0, 0, 232, 252, 190, 291, 244,
	300, 301, 170, 285, 310, 315, 272, 157, 0, 117,
	0, 239, 152, 183, 0, 0, 0, 145, 0, 0,
	0, 271, 132, 287, 206, 212, 142, 144, 143, 126,
	266, 289, 136, 146, 276, 256, 281, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 118, 283, 299,
	138, 264, 120, 297, 279, 204, 180, 181, 119, 0,
	249, 155, 165, 150, 221, 0, 164, 241, 294, 295,
	149, 317, 128, 309, 122, 129, 308, 215, 0, 214,
	311, 290, 298, 205, 198, 0, 121, 296, 203, 197,
	185, 160, 172, 237, 193, 238, 173, 210, 209, 211,
	0, 0, 0, 277, 305, 318, 195, 134, 0, 265,
	288, 0, 0, 135, 163, 159, 236, 213, 130, 175,
	274, 184, 191, 248, 316, 225, 254, 139, 304, 273,
	466, 478, 472, 474, 473, 470, 471, 469, 468, 467,
	480, 457, 458, 459, 460, 463, 0, 475, 476, 0,
	0, 0, 0, 493, 494, 495, 496, 497, 498, 499,
	492, 500, 501, 502, 503, 504, 505, 506, 507, 508,
	481, 482, 483, 484, 485, 486, 487, 488, 491, 489,
	490, 461, 112, 123, 188, 70, 246, 162, 306, 0,
	154, 0, 0, 0, 0, 0, 0, 114, 115, 124,
	133, 140, 153, 158, 161, 167, 171, 174, 176, 177,
	178, 182, 196, 199, 200, 201, 202, 216, 217, 219,
	220, 223, 224, 227, 229, 230, 231, 233, 234, 235,
	240, 243, 245, 247, 250, 255, 257, 258, 259, 261,
	262, 263, 267, 268, 269, 270, 278, 282, 292, 293,
	303, 312, 314, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 222, 0, 0, 0, 0, 0,
	421, 0, 0, 0, 156, 418, 0, 0, 0, 186,
	0, 0, 147, 194, 192, 0, 0, 0, 228, 284,
	0, 0, 0, 465, 189, 0, 0, 307, 275, 207,
	0, 0, 0, 0, 454, 455, 0, 0, 0, 0,
	0, 0, 0, 0, 72, 0, 0, 419, 442, 441,
	444, 445, 446, 447, 0, 0, 137, 443, 448, 449,
	450, 0, 0, 0, 416, 433, 0, 464, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 430, 431,
	412, 0, 0, 0, 479, 0, 432, 0, 0, 427,
	428, 429, 434, 0, 0, 0, 0, 116, 0, 0,
	0, 0, 166, 208, 127, 456, 0, 0, 179, 313,
	0, 0, 477, 242, 0, 280, 169, 187, 131, 113,
	125, 141, 168, 218, 251, 260, 462, 0, 0, 0,
	0, 148, 0, 253, 226, 302, 0, 0, 232, 252,
	190, 291, 244, 300, 301, 170, 285, 310, 315, 272,
	157, 0, 117, 0, 239, 152, 183, 0, 0, 0,
	145, 0, 0, 0, 271, 132, 287, 206, 212, 142,
	144, 143, 126, 266, 289, 136, 146, 276, 256, 281,
	151, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	118, 283, 299, 138, 264, 120, 297, 279, 204, 180,
	181, 119, 0, 249, 155, 165, 150, 221, 0, 164,
	241, 294, 295, 149, 317, 128, 309, 122, 129, 308,
	215, 0, 214, 311, 290, 298, 205, 198, 0, 121,
	296, 203, 197, 185, 160, 172, 237, 193, 238, 173,
	210, 209, 211, 0, 0, 0, 277, 305, 318, 195,
	134, 0, 265, 288, 0, 0, 135, 163, 159, 236,
	213, 130, 175, 274, 184, 191, 248, 316, 225, 254,
	139, 304, 273, 466, 478, 472, 474, 473, 470, 471,
	469, 468, 467, 480, 457, 458, 459, 460, 463, 0,
	475, 476, 0, 0, 0, 0, 493, 494, 495, 496,
	497, 498, 499, 492, 500, 501, 502, 503, 504, 505,
	506, 507, 508, 481, 482, 483, 484, 485, 486, 487,
	488, 491, 489, 490, 461, 112, 123, 188, 0, 246,
	162, 306, 0, 154, 0, 0, 0, 0, 0, 0,
	114, 115, 124, 133, 140, 153, 158, 161, 167, 171,
	174, 176, 177, 178, 182, 196, 199, 200, 201, 202,
	216, 217, 219, 220, 223, 224, 227, 229, 230, 231,
	233, 234, 235, 240, 243, 245, 247, 250, 255, 257,
	258, 259, 261, 262, 263, 267, 268, 269, 270, 278,
	282, 292, 293, 303, 312, 314, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 222, 0, 0,
	0, 0, 0, 421, 0, 0, 0, 156, 418, 0,
	0, 0, 186, 0, 0, 147, 194, 192, 0, 0,
	0, 228, 284, 0, 0, 0, 465, 189, 0, 0,
	307, 275, 207, 0, 0, 0, 0, 454, 455, 0,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 784,
	419, 442, 441, 444, 445, 446, 447, 0, 0, 137,
	443, 448, 449, 450, 0, 0, 0, 416, 433, 0,
	464, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 430, 431, 0, 0, 0, 0, 479, 0, 432,
	0, 0, 427, 428, 429, 434, 0, 0, 0, 0,
	116, 0, 0, 0, 0, 166, 208, 127, 456, 0,
	0, 179, 313, 0, 0, 477, 242, 0, 280, 169,
	187, 131, 113, 125, 141, 168, 218, 251, 260, 462,
	0, 0, 0, 0, 148, 0, 253, 226, 302, 0,
	0, 232, 252, 190, 291, 244, 300, 301, 170, 285,
	310, 315, 272, 157, 0, 117, 0, 239, 152, 183,
	0, 0, 0, 145, 0, 0, 0, 271, 132, 287,
	206, 212, 142, 144, 143, 126, 266, 289, 136, 146,
	276, 256, 281, 151, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 118, 283, 299, 138, 264, 120, 297,
	279, 204, 180, 181, 119, 0, 249, 155, 165, 150,
	221, 0, 164, 241, 294, 295, 149, 317, 128, 309,
	122, 129, 308, 215, 0, 214, 311, 290, 298, 205,
	198, 0, 121, 296, 203, 197, 185, 160, 172, 237,
	193, 238, 173, 210, 209, 211, 0, 0, 0, 277,
	305, 318, 195, 134, 0, 265, 288, 0, 0, 135,
	163, 159, 236, 213, 130, 175, 274, 184, 191, 248,
	316, 225, 254, 139, 304, 273, 466, 478, 472, 474,
	473, 470, 471, 469, 468, 467, 480, 457, 458, 459,
	460, 463, 0, 475, 476, 0, 0, 0, 0, 493,
	494, 495, 496, 497, 498, 499, 492, 500, 501, 502,
	503, 504, 505, 506, 507, 508, 481, 482, 483, 484,
	485, 486, 487, 488, 491, 489, 490, 461, 112, 123,
	188, 0, 246, 162, 306, 0, 154, 0, 0, 0,
	0, 0, 0, 114, 115, 124, 133, 140, 153, 158,
	161, 167, 171, 174, 176, 177, 178, 182, 196, 199,
	200, 201, 202, 216, 217, 219, 220, 223, 224, 227,
	229, 230, 231, 233, 234, 235, 240, 243, 245, 247,
	250, 255, 257, 258, 259, 261, 262, 263, 267, 268,
	269, 270, 278, 282, 292, 293, 303, 312, 314, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 0, 0, 0, 0, 421, 0, 0, 0,
	156, 418, 0, 0, 0, 186, 0, 0, 147, 194,
	192, 0, 0, 0, 228, 284, 0, 0, 0, 465,
	189, 0, 0, 307, 275, 207, 0, 0, 0, 0,
	454, 455, 0, 0, 0, 0, 0, 0, 0, 0,
	72, 0, 0, 419, 442, 441, 444, 445, 446, 447,
	0, 0, 137, 443, 448, 449, 450, 0, 0, 0,
	416, 433, 0, 464, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 430, 431, 1191, 0, 0, 0,
	479, 0, 432, 0, 0, 427, 428, 429, 434, 0,
	0, 0, 0, 116, 0, 0, 0, 0, 166, 208,
	127, 456, 0, 0, 179, 313, 0, 0, 477, 242,
	0, 280, 169, 187, 131, 113, 125, 141, 168, 218,
	251, 260, 462, 0, 0, 0, 0, 148, 0, 253,
	226, 302, 0, 0, 232, 252, 190, 291, 244, 300,
	301, 170, 285, 310, 315, 272, 157, 0, 117, 0,
	239, 152, 183, 0, 0, 0, 145, 0, 0, 0,
	271, 132, 287, 206, 212, 142, 144, 143, 126, 266,
	289, 136, 146, 276, 256, 281, 151, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 118, 283, 299, 138,
	264, 120, 297, 279, 204, 180, 181, 119, 0, 249,
	155, 165, 150, 221, 0, 164, 241, 294, 295, 149,
	317, 128, 309, 122, 129, 308, 215, 0, 214, 311,
	290, 298, 205, 198, 0, 121, 296, 203, 197, 185,
	160, 172, 237, 193, 238, 173, 210, 209, 211, 0,
	0, 0, 277, 305, 318, 195, 134, 0, 265, 288,
	0, 0, 135, 163, 159, 236, 213, 130, 175, 274,
	184, 191, 248, 316, 225, 254, 139, 304, 273, 466,
	478, 472, 474, 473, 470, 471, 469, 468, 467, 480,
	457, 458, 459, 460, 463, 0, 475, 476, 0, 0,
	0, 0, 493, 494, 495, 496, 497, 498, 499, 492,
	500, 501, 502, 503, 504, 505, 506, 507, 508, 481,
	482, 483, 484, 485, 486, 487, 488, 491, 489, 490,
	461, 112, 123, 188, 0, 246, 162, 306, 0, 154,
	0, 0, 0, 0, 0, 0, 114, 115, 124, 133,
	140, 153, 158, 161, 167, 171, 174, 176, 177, 178,
	182, 196, 199, 200, 201, 202, 216, 217, 219, 220,
	223, 224, 227, 229, 230, 231, 233, 234, 235, 240,
	243, 245, 247, 250, 255, 257, 258, 259, 261, 262,
	263, 267, 268, 269, 270, 278, 282, 292, 293, 303,
	312, 314, 286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 0, 0, 0, 0, 0, 421,
	0, 0, 0, 156, 418, 0, 0, 0, 186, 0,
	0, 147, 194, 192, 0, 0, 0, 228, 284, 0,
	0, 0, 465, 189, 0, 0, 307, 275, 207, 0,
	0, 0, 0, 454, 455, 0, 0, 0, 0, 0,
	0, 0, 0, 72, 0, 0, 419, 442, 1202, 444,
	445, 446, 447, 0, 0, 137, 443, 448, 449, 450,
	0, 0, 0, 416, 433, 0, 464, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 430, 431, 1191,
	0, 0, 0, 479, 0, 432, 0, 0, 427, 428,
	429, 434, 0, 0, 0, 0, 116, 0, 0, 0,
	0, 166, 208, 127, 456, 0, 0, 179, 313, 0,
	0, 477, 242, 0, 280, 169, 187, 131, 113, 125,
	141, 168, 218, 251, 260, 462, 0, 0, 0, 0,
	148, 0, 253, 226, 302, 0, 0, 232, 252, 190,
	291, 244, 300, 301, 170, 285, 310, 315, 272, 157,
	0, 117, 0, 239, 152, 183, 0, 0, 0, 145,
	0, 0, 0, 271, 132, 287, 206, 212, 142, 144,
	143, 126, 266, 289, 136, 146, 276, 256, 281, 151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 118,
	283, 299, 138, 264, 120, 297, 279, 204, 180, 181,
	119, 0, 249, 155, 165, 150, 221, 0, 164, 241,
	294, 295, 149, 317, 128, 309, 122, 129, 308, 215,
	0, 214, 311, 290, 298, 205, 198, 0, 121, 296,
	203, 197, 185, 160, 172, 237, 193, 238, 173, 210,
	209, 211, 0, 0, 0, 277, 305, 318, 195, 134,
	0, 265, 288, 0, 0, 135, 163, 159, 236, 213,
	130, 175, 274, 184, 191, 248, 316, 225, 254, 139,
	304, 273, 466, 478, 472, 474, 473, 470, 471, 469,
	468, 467, 480, 457, 458, 459, 460, 463, 0, 475,
	476, 0, 0, 0, 0, 493, 494, 495, 496, 497,
	498, 499, 492, 500, 501, 502, 503, 504, 505, 506,
	507, 508, 481, 482, 483, 484, 485, 486, 487, 488,
	491, 489, 490, 461, 112, 123, 188, 0, 246, 162,
	306, 0, 154, 0, 0, 0, 0, 0, 0, 114,
	115, 124, 133, 140, 153, 158, 161, 167, 171, 174,
	176, 177, 178, 182, 196, 199, 200, 201, 202, 216,
	217, 219, 220, 223, 224, 227, 229, 230, 231, 233,
	234, 235, 240, 243, 245, 247, 250, 255, 257, 258,
	259, 261, 262, 263, 267, 268, 269, 270, 278, 282,
	292, 293, 303, 312, 314, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 0, 0, 0,
	0, 0, 421, 0, 0, 0, 156, 418, 0, 0,
	0, 186, 0, 0, 147, 194, 192, 0, 0, 0,
	228, 284, 0, 0, 0, 465, 189, 0, 0, 307,
	275, 207, 0, 0, 0, 0, 454, 455, 0, 0,
	0, 0, 0, 0, 0, 0, 72, 0, 0, 419,
	442, 1199, 444, 445, 446, 447, 0, 0, 137, 443,
	448, 449, 450, 0, 0, 0, 416, 433, 0, 464,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	430, 431, 1191, 0, 0, 0, 479, 0, 432, 0,
	0, 427, 428, 429, 434, 0, 0, 0, 0, 116,
	0, 0, 0, 0, 166, 208, 127, 456, 0, 0,
	179, 313, 0, 0, 477, 242, 0, 280, 169, 187,
	131, 113, 125, 141, 168, 218, 251, 260, 462, 0,
	0, 0, 0, 148, 0, 253, 226, 302, 0, 0,
	232, 252, 190, 291, 244, 300, 301, 170, 285, 310,
	315, 272, 157, 0, 117, 0, 239, 152, 183, 0,
	0, 0, 145, 0, 0, 0, 271, 132, 287, 206,
	212, 142, 144, 143, 126, 266, 289, 136, 146, 276,
	256, 281, 151, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 118, 283, 299, 138, 264, 120, 297, 279,
	204, 180, 181, 119, 0, 249, 155, 165, 150, 221,
	0, 164, 241, 294, 295, 149, 317, 128, 309, 122,
	129, 308, 215, 0, 214, 311, 290, 298, 205, 198,
	0, 121, 296, 203, 197, 185, 160, 172, 237, 193,
	238, 173, 210, 209, 211, 0, 0, 0, 277, 305,
	318, 195, 134, 0, 265, 288, 0, 0, 135, 163,
	159, 236, 213, 130, 175, 274, 184, 191, 248, 316,
	225, 254, 139, 304, 273, 466, 478, 472, 474, 473,
	470, 471, 469, 468, 467, 480, 457, 458, 459, 460,
	463, 0, 475, 476, 0, 0, 0, 0, 493, 494,
	495, 496, 497, 498, 499, 492, 500, 501, 502, 503,
	504, 505, 506, 507, 508, 481, 482, 483, 484, 485,
	486, 487, 488, 491, 489, 490, 461, 112, 123, 188,
	0, 246, 162, 306, 0, 154, 0, 0, 0, 0,
	0, 0, 114, 115, 124, 133, 140, 153, 158, 161,
	167, 171, 174, 176, 177, 178, 182, 196, 199, 200,
	201, 202, 216, 217, 219, 220, 223, 224, 227, 229,
	230, 231, 233, 234, 235, 240, 243, 245, 247, 250,
	255, 257, 258, 259, 261, 262, 263, 267, 268, 269,
	270, 278, 282, 292, 293, 303, 312, 314, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	0, 0, 0, 0, 0, 421, 0, 0, 0, 156,
	418, 0, 0, 0, 186, 0, 0, 147, 194, 192,
	0, 0, 0, 228, 284, 0, 0, 0, 465, 189,
	0, 0, 307, 275, 207, 0, 0, 0, 0, 454,
	455, 0, 0, 0, 0, 0, 0, 0, 0, 72,
	0, 1110, 419, 442, 441, 444, 445, 446, 447, 0,
	0, 137, 443, 448, 449, 450, 0, 0, 0, 416,
	433, 0, 464, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 430, 431, 0, 0, 0, 0, 479,
	0, 432, 0, 0, 427, 428, 429, 434, 0, 0,
	0, 0, 116, 0, 0, 0, 0, 166, 208, 127,
	456, 0, 0, 179, 313, 0, 0, 477, 242, 0,
	280, 169, 187, 131, 113, 125, 141, 168, 218, 251,
	260, 462, 0, 0, 0, 0, 148, 0, 253, 226,
	302, 0, 0, 232, 252, 190, 291, 244, 300, 301,
	170, 285, 310, 315, 272, 157, 0, 117, 0, 239,
	152, 183, 0, 0, 0, 145, 0, 0, 0, 271,
	132, 287, 206, 212, 142, 144, 143, 126, 266, 289,
	136, 146, 276, 256, 281, 151, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 118, 283, 299, 138, 264,
	120, 297, 279, 204, 180, 181, 119, 0, 249, 155,
	165, 150, 221, 0, 164, 241, 294, 295, 149, 317,
	128, 309, 122, 129, 308, 215, 0, 214, 311, 290,
	298, 205, 198, 0, 121, 296, 203, 197, 185, 160,
	172, 237, 193, 238, 173, 210, 209, 211, 0, 0,
	0, 277, 305, 318, 195, 134, 0, 265, 288, 0,
	0, 135, 163, 159, 236, 213, 130, 175, 274, 184,
	191, 248, 316, 225, 254, 139, 304, 273, 466, 478,
	472, 474, 473, 470, 471, 469, 468, 467, 480, 457,
	458, 459, 460, 463, 0, 475, 476, 0, 0, 0,
	0, 493, 494, 495, 496, 497, 498, 499, 492, 500,
	501, 502, 503, 504, 505, 506, 507, 508, 481, 482,
	483, 484, 485, 486, 487, 488, 491, 489, 490, 461,
	112, 123, 188, 0, 246, 162, 306, 0, 154, 0,
	0, 0, 0, 0, 0, 114, 115, 124, 133, 140,
	153, 158, 161, 167, 171, 174, 176, 177, 178, 182,
	196, 199, 200, 201, 202, 216, 217, 219, 220, 223,
	224, 227, 229, 230, 231, 233, 234, 235, 240, 243,
	245, 247, 250, 255, 257, 258, 259, 261, 262, 263,
	267, 268, 269, 270, 278, 282, 292, 293, 303, 312,
	314, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 0, 0, 0, 0, 0, 421, 0,
	0, 0, 156, 418, 0, 0, 0, 186, 0, 0,
	147, 194, 192, 0, 0, 0, 228, 284, 0, 0,
	0, 465, 189, 0, 0, 307, 275, 207, 0, 0,
	0, 0, 454, 455, 0, 0, 0, 0, 0, 0,
	0, 0, 72, 0, 0, 419, 442, 441, 444, 445,
	446, 447, 0, 0, 137, 443, 448, 449, 450, 0,
	0, 0, 416, 433, 0, 464, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 430, 431, 0, 0,
	0, 0, 479, 0, 432, 0, 0, 427, 428, 429,
	434, 0, 0, 0, 0, 116, 0, 0, 0, 0,
	166, 208, 127, 456, 0, 0, 179, 313, 0, 0,
	477, 242, 0, 280, 169, 187, 131, 113, 125, 141,
	168, 218, 251, 260, 462, 0, 0, 0, 0, 148,
	0, 253, 226, 302, 0, 0, 232, 252, 190, 291,
	244, 300, 301, 170, 285, 310, 315, 272, 157, 0,
	117, 0, 239, 152, 183, 0, 0, 0, 145, 0,
	0, 0, 271, 132, 287, 206, 212, 142, 144, 143,
	126, 266, 289, 136, 146, 276, 256, 281, 151, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 118, 283,
	299, 138, 264, 120, 297, 279, 204, 180, 181, 119,
	0, 249, 155, 165, 150, 221, 0, 164, 241, 294,
	295, 149, 317, 128, 309, 122, 129, 308, 215, 0,
	214, 311, 290, 298, 205, 198, 0, 121, 296, 203,
	197, 185, 160, 172, 237, 193, 238, 173, 210, 209,
	211, 0, 0, 0, 277, 305, 318, 195, 134, 0,
	265, 288, 0, 0, 135, 163, 159, 236, 213, 130,
	175, 274, 184, 191, 248, 316, 225, 254, 139, 304,
	273, 466, 478, 472, 474, 473, 470, 471, 469, 468,
	467, 480, 457, 458, 459, 460, 463, 0, 475, 476,
	0, 0, 0, 0, 493, 494, 495, 496, 497, 498,
	499, 492, 500, 501, 502, 503, 504, 505, 506, 507,
	508, 481, 482, 483, 484, 485, 486, 487, 488, 491,
	489, 490, 461, 112, 123, 188, 0, 246, 162, 306,
	0, 154, 0, 0, 0, 0, 0, 0, 114, 115,
	124, 133, 140, 153, 158, 161, 167, 171, 174, 176,
	177, 178, 182, 196, 199, 200, 201, 202, 216, 217,
	219, 220, 223, 224, 227, 229, 230, 231, 233, 234,
	235, 240, 243, 245, 247, 250, 255, 257, 258, 259,
	261, 262, 263, 267, 268, 269, 270, 278, 282, 292,
	293, 303, 312, 314, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 0, 0,
	0, 421, 0, 0, 0, 156, 418, 0, 0, 0,
	186, 0, 0, 147, 194, 192, 0, 0, 0, 228,
	284, 0, 0, 0, 465, 189, 0, 0, 307, 275,
	207, 0, 0, 0, 0, 454, 455, 0, 0, 0,
	0, 0, 0, 0, 0, 72, 0, 0, 419, 442,
	441, 444, 445, 446, 447, 0, 0, 137, 443, 448,
	449, 450, 0, 0, 0, 416, 433, 0, 464, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 430,
	431, 0, 0, 0, 0, 479, 0, 432, 0, 0,
	427, 428, 429, 434, 0, 0, 0, 0, 116, 0,
	0, 0, 0, 166, 208, 127, 456, 0, 0, 179,
	313, 0, 0, 477, 242, 0, 280, 169, 187, 131,
	113, 125, 141, 168, 218, 251, 260, 462, 0, 0,
	0, 0, 148, 0, 253, 226, 302, 0, 0, 232,
	252, 190, 291, 244, 300, 301, 170, 285, 310, 315,
	272, 157, 0, 117, 0, 239, 152, 183, 0, 0,
	0, 145, 0, 0, 0, 271, 132, 287, 206, 212,
	142, 144, 143, 126, 266, 289, 136, 146, 276, 256,
	281, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 118, 283, 299, 138, 264, 120, 297, 279, 204,
	180, 181, 119, 0, 249, 155, 165, 150, 221, 0,
	164, 241, 294, 295, 149, 317, 128, 309, 122, 129,
	308, 215, 0, 214, 311, 290, 298, 205, 198, 0,
	121, 296, 203, 197, 185, 160, 172, 237, 193, 238,
	173, 210, 209, 211, 0, 0, 0, 277, 305, 318,
	195, 134, 0, 265, 288, 0, 0, 135, 163, 159,
	236, 213, 130, 175, 274, 184, 191, 248, 316, 225,
	254, 139, 304, 273, 466, 478, 472, 474, 473, 470,
	471, 469, 468, 467, 480, 457, 458, 459, 460, 463,
	0, 475, 476, 0, 0, 0, 0, 794, 795, 796,
	797, 798, 802, 803, 807, 808, 816, 815, 814, 817,
	818, 820, 819, 821, 799, 800, 801, 804, 805, 806,
	809, 810, 813, 811, 812, 461, 112, 123, 188, 0,
	246, 162, 306, 0, 154, 0, 0, 0, 0, 0,
	0, 114, 115, 124, 133, 140, 153, 158, 161, 167,
	171, 174, 176, 177, 178, 182, 196, 199, 200, 201,
	202, 216, 217, 219, 220, 223, 224, 227, 229, 230,
	231, 233, 234, 235, 240, 243, 245, 247, 250, 255,
	257, 258, 259, 261, 262, 263, 267, 268, 269, 270,
	278, 282, 292, 293, 303, 312, 314, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 156, 0,
	0, 0, 0, 186, 0, 0, 147, 194, 192, 0,
	0, 0, 228, 284, 0, 0, 0, 465, 189, 0,
	0, 307, 275, 207, 0, 0, 0, 0, 454, 455,
	0, 0, 0, 0, 0, 0, 0, 0, 72, 0,
	0, 419, 442, 441, 444, 445, 446, 447, 0, 0,
	137, 443, 448, 449, 450, 0, 0, 0, 0, 433,
	0, 464, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 430, 431, 0, 0, 0, 0, 479, 0,
	432, 0, 0, 427, 428, 429, 434, 0, 0, 0,
	0, 116, 0, 0, 0, 0, 166, 208, 127, 456,
	0, 0, 179, 313, 0, 0, 477, 242, 0, 280,
	169, 187, 131, 113, 125, 141, 168, 218, 251, 260,
	462, 0, 0, 0, 0, 148, 0, 253, 226, 302,
	0, 2284, 232, 252, 190, 291, 244, 300, 301, 170,
	285, 310, 315, 272, 157, 0, 117, 0, 239, 152,
	183, 0, 0, 0, 145, 0, 0, 0, 271, 132,
	287, 206, 212, 142, 144, 143, 126, 266, 289, 136,
	146, 276, 256, 281, 151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 118, 283, 299, 138, 264, 120,
	297, 279, 204, 180, 181, 119, 0, 249, 155, 165,
	150, 221, 0, 164, 241, 294, 295, 149, 317, 128,
	309, 122, 129, 308, 215, 0, 214, 311, 290, 298,
	205, 198, 0, 121, 296, 203, 197, 185, 160, 172,
	237, 193, 238, 173, 210, 209, 211, 0, 0, 0,
	277, 305, 318, 195, 134, 0, 265, 288, 0, 0,
	135, 163, 159, 236, 213, 130, 175, 274, 184, 191,
	248, 316, 225, 254, 139, 304, 273, 466, 478, 472,
	474, 473, 470, 471, 469, 468, 467, 480, 457, 458,
	459, 460, 463, 0, 475, 476, 0, 0, 0, 0,
	493, 494, 495, 496, 497, 498, 499, 492, 500, 501,
	502, 503, 504, 505, 506, 507, 508, 481, 482, 483,
	484, 485, 486, 487, 488, 491, 489, 490, 461, 112,
	123, 188, 0, 246, 162, 306, 0, 154, 0, 0,
	0, 0, 0, 0, 114, 115, 124, 133, 140, 153,
	158, 161, 167, 171, 174, 176, 177, 178, 182, 196,
	199, 200, 201, 202, 216, 217, 219, 220, 223, 224,
	227, 229, 230, 231, 233, 234, 235, 240, 243, 245,
	247, 250, 255, 257, 258, 259, 261, 262, 263, 267,
	268, 269, 270, 278, 282, 292, 293, 303, 312, 314,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 156, 0, 0, 0, 0, 186, 0, 0, 147,
	194, 192, 0, 0, 0, 228, 284, 0, 0, 0,
	465, 189, 0, 0, 307, 275, 207, 0, 0, 0,
	0, 454, 455, 0, 0, 0, 0, 0, 0, 0,
	0, 72, 0, 784, 419, 442, 441, 444, 445, 446,
	447, 0, 0, 137, 443, 448, 449, 450, 0, 0,
	0, 0, 433, 0, 464, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 430, 431, 0, 0, 0,
	0, 479, 0, 432, 0, 0, 427, 428, 429, 434,
	0, 0, 0, 0, 116, 0, 0, 0, 0, 166,
	208, 127, 456, 0, 0, 179, 313, 0, 0, 477,
	242, 0, 280, 169, 187, 131, 113, 125, 141, 168,
	218, 251, 260, 462, 0, 0, 0, 0, 148, 0,
	253, 226, 302, 0, 0, 232, 252, 190, 291, 244,
	300, 301, 170, 285, 310, 315, 272, 157, 0, 117,
	0, 239, 152, 183, 0, 0, 0, 145, 0, 0,
	0, 271, 132, 287, 206, 212, 142, 144, 143, 126,
	266, 289, 136, 146, 276, 256, 281, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 118, 283, 299,
	138, 264, 120, 297, 279, 204, 180, 181, 119, 0,
	249, 155, 165, 150, 221, 0, 164, 241, 294, 295,
	149, 317, 128, 309, 122, 129, 308, 215, 0, 214,
	311, 290, 298, 205, 198, 0, 121, 296, 203, 197,
	185, 160, 172, 237, 193, 238, 173, 210, 209, 211,
	0, 0, 0, 277, 305, 318, 195, 134, 0, 265,
	288, 0, 0, 135, 163, 159, 236, 213, 130, 175,
	274, 184, 191, 248, 316, 225, 254, 139, 304, 273,
	466, 478, 472, 474, 473, 470, 471, 469, 468, 467,
	480, 457, 458, 459, 460, 463, 0, 475, 476, 0,
	0, 0, 0, 493, 494, 495, 496, 497, 498, 499,
	492, 500, 501, 502, 503, 504, 505, 506, 507, 508,
	481, 482, 483, 484, 485, 486, 487, 488, 491, 489,
	490, 461, 112, 123, 188, 0, 246, 162, 306, 0,
	154, 0, 0, 0, 0, 0, 0, 114, 115, 124,
	133, 140, 153, 158, 161, 167, 171, 174, 176, 177,
	178, 182, 196, 199, 200, 201, 202, 216, 217, 219,
	220, 223, 224, 227, 229, 230, 231, 233, 234, 235,
	240, 243, 245, 247, 250, 255, 257, 258, 259, 261,
	262, 263, 267, 268, 269, 270, 278, 282, 292, 293,
	303, 312, 314, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 156, 0, 0, 0, 0, 186,
	0, 0, 147, 194, 192, 0, 0, 0, 228, 284,
	0, 0, 0, 465, 189, 0, 0, 307, 275, 207,
	0, 0, 0, 0, 454, 455, 0, 0, 0, 0,
	0, 0, 0, 0, 72, 0, 0, 419, 442, 441,
	444, 445, 446, 447, 0, 0, 137, 443, 448, 449,
	450, 0, 0, 0, 0, 433, 0, 464, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 430, 431,
	0, 0, 0, 0, 479, 0, 432, 0, 0, 427,
	428, 429, 434, 0, 0, 0, 0, 116, 0, 0,
	0, 0, 166, 208, 127, 456, 0, 0, 179, 313,
	0, 0, 477, 242, 0, 280, 169, 187, 131, 113,
	125, 141, 168, 218, 251, 260, 462, 0, 0, 0,
	0, 148, 0, 253, 226, 302, 0, 0, 232, 252,
	190, 291, 244, 300, 301, 170, 285, 310, 315, 272,
	157, 0, 117, 0, 239, 152, 183, 0, 0, 0,
	145, 0, 0, 0, 271, 132, 287, 206, 212, 142,
	144, 143, 126, 266, 289, 136, 146, 276, 256, 281,
	151, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	118, 283, 299, 138, 264, 120, 297, 279, 204, 180,
	181, 119, 0, 249, 155, 165, 150, 221, 0, 164,
	241, 294, 295, 149, 317, 128, 309, 122, 129, 308,
	215, 0, 214, 311, 290, 298, 205, 198, 0, 121,
	296, 203, 197, 185, 160, 172, 237, 193, 238, 173,
	210, 209, 211, 0, 0, 0, 277, 305, 318, 195,
	134, 0, 265, 288, 0, 0, 135, 163, 159, 236,
	213, 130, 175, 274, 184, 191, 248, 316, 225, 254,
	139, 304, 273, 466, 478, 472, 474, 473, 470, 471,
	469, 468, 467, 480, 457, 458, 459, 460, 463, 0,
	475, 476, 0, 0, 0, 0, 493, 494, 495, 496,
	497, 498, 499, 492, 500, 501, 502, 503, 504, 505,
	506, 507, 508, 481, 482, 483, 484, 485, 486, 487,
	488, 491, 489, 490, 461, 112, 123, 188, 0, 246,
	162, 306, 0, 154, 0, 0, 0, 0, 0, 0,
	114, 115, 124, 133, 140, 153, 158, 161, 167, 171,
	174, 176, 177, 178, 182, 196, 199, 200, 201, 202,
	216, 217, 219, 220, 223, 224, 227, 229, 230, 231,
	233, 234, 235, 240, 243, 245, 247, 250, 255, 257,
	258, 259, 261, 262, 263, 267, 268, 269, 270, 278,
	282, 292, 293, 303, 312, 314, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 222, 0, 0,
	0, 0, 1273, 0, 0, 0, 0, 156, 0, 0,
	0, 0, 186, 0, 0, 147, 194, 192, 0, 0,
	0, 228, 284, 0, 0, 0, 0, 189, 0, 0,
	307, 275, 207, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1275, 1277, 0, 0, 0, 0, 0,
	110, 0, 374, 0, 0, 0, 0, 0, 0, 137,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 0, 0, 0, 0, 166, 208, 127, 0, 0,
	0, 179, 313, 0, 1276, 0, 242, 0, 280, 169,
	187, 131, 113, 125, 141, 168, 218, 251, 260, 0,
	0, 0, 0, 0, 148, 0, 253, 226, 302, 0,
	0, 232, 252, 190, 291, 244, 300, 301, 170, 285,
	310, 315, 272, 157, 0, 117, 0, 239, 152, 183,
	0, 0, 0, 145, 0, 0, 0, 271, 132, 287,
	206, 212, 142, 144, 143, 126, 266, 289, 136, 146,
	276, 256, 281, 151, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 118, 283, 299, 138, 264, 120, 297,
	279, 204, 180, 181, 119, 0, 249, 155, 165, 150,
	221, 0, 164, 241, 294, 295, 149, 317, 128, 309,
	122, 129, 308, 215, 0, 214, 311, 290, 298, 205,
	198, 0, 121, 296, 203, 197, 185, 160, 172, 237,
	193, 238, 173, 210, 209, 211, 0, 0, 0, 277,
	305, 318, 195, 134, 0, 265, 288, 0, 0, 135,
	163, 159, 236, 213, 130, 175, 274, 184, 191, 248,
	316, 225, 254, 139, 304, 273, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 375,
	376, 377, 378, 379, 383, 384, 388, 389, 397, 396,
	395, 398, 399, 401, 400, 402, 380, 381, 382, 385,
	386, 387, 390, 391, 394, 392, 393, 0, 112, 123,
	188, 0, 246, 162, 306, 0, 154, 0, 0, 0,
	0, 0, 0, 114, 115, 124, 133, 140, 153, 158,
	161, 167, 171, 174, 176, 177, 178, 182, 196, 199,
	200, 201, 202, 216, 217, 219, 220, 223, 224, 227,
	229, 230, 231, 233, 234, 235, 240, 243, 245, 247,
	250, 255, 257, 258, 259, 261, 262, 263, 267, 268,
	269, 270, 278, 282, 292, 293, 303, 312, 314, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 0, 0, 0, 1273, 0, 0, 0, 0,
	156, 0, 0, 0, 0, 186, 0, 0, 147, 194,
	192, 0, 0, 0, 228, 284, 0, 0, 0, 0,
	189, 0, 0, 307, 275, 207, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1275, 1277, 0, 0,
	0, 0, 0, 110, 0, 374, 0, 0, 0, 0,
	0, 0, 137, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 0, 0, 0, 0, 166, 208,
	127, 0, 0, 0, 179, 313, 0, 1276, 0, 242,
	0, 280, 169, 187, 131, 113, 125, 141, 168, 218,
	251, 260, 0, 0, 0, 0, 0, 148, 0, 253,
	226, 302, 0, 0, 1271, 252, 190, 291, 244, 300,
	301, 170, 285, 310, 315, 272, 157, 0, 117, 0,
	239, 152, 183, 0, 0, 0, 145, 0, 0, 0,
	271, 132, 287, 206, 212, 142, 144, 143, 126, 266,
	289, 136, 146, 276, 256, 281, 151, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 118, 283, 299, 138,
	264, 120, 297, 279, 204, 180, 181, 119, 0, 249,
	155, 165, 150, 221, 0, 164, 241, 294, 295, 149,
	317, 128, 309, 122, 129, 308, 215, 0, 214, 311,
	290, 298, 205, 198, 0, 121, 296, 203, 197, 185,
	160, 172, 237, 193, 238, 173, 210, 209, 211, 0,
	0, 0, 277, 305, 318, 195, 134, 0, 265, 288,
	0, 0, 135, 163, 159, 236, 213, 130, 175, 274,
	184, 191, 248, 316, 225, 254, 139, 304, 273, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 375, 376, 377, 378, 379, 383, 384, 388,
	389, 397, 396, 395, 398, 399, 401, 400, 402, 380,
	381, 382, 385, 386, 387, 390, 391, 394, 392, 393,
	0, 112, 123, 188, 0, 246, 162, 306, 0, 154,
	0, 0, 0, 0, 0, 0, 114, 115, 124, 133,
	140, 153, 158, 161, 167, 171, 174, 176, 177, 178,
	182, 196, 199, 200, 201, 202, 216, 217, 219, 220,
	223, 224, 227, 229, 230, 231, 233, 234, 235, 240,
	243, 245, 247, 250, 255, 257, 258, 259, 261, 262,
	263, 267, 268, 269, 270, 278, 282, 292, 293, 303,
	312, 314, 286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 0, 0, 0, 0, 833, 0,
	0, 0, 0, 156, 0, 0, 0, 0, 186, 0,
	0, 147, 194, 192, 0, 0, 0, 228, 284, 0,
	0, 0, 0, 189, 0, 0, 307, 275, 207, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 834, 0, 837, 0,
	0, 0, 0, 0, 0, 137, 0, 0, 0, 0,
	0, 830, 829, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 831,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 0, 0, 0,
	0, 166, 208, 127, 0, 0, 0, 179, 313, 0,
	0, 0, 242, 0, 280, 169, 187, 131, 113, 125,
	141, 168, 218, 251, 260, 0, 0, 0, 0, 0,
	148, 0, 253, 226, 302, 0, 0, 232, 252, 190,
	291, 244, 300, 301, 170, 285, 310, 315, 272, 157,
	0, 117, 0, 239, 152, 183, 0, 0, 0, 145,
	0, 0, 0, 271, 132, 287, 206, 212, 142, 144,
	143, 126, 266, 289, 136, 146, 276, 256, 281, 151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 118,
	283, 299, 138, 264, 120, 297, 279, 204, 180, 181,
	119, 0, 249, 155, 165, 150, 221, 0, 164, 241,
	294, 295, 149, 317, 128, 309, 122, 129, 308, 215,
	0, 214, 311, 290, 298, 205, 198, 0, 121, 296,
	203, 197, 185, 160, 172, 237, 193, 238, 173, 210,
	209, 211, 0, 0, 0, 277, 305, 318, 195, 134,
	0, 265, 288, 0, 0, 135, 163, 159, 236, 213,
	130, 175, 274, 184, 191, 248, 316, 225, 254, 139,
	304, 273, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 375, 376, 377, 378, 379,
	383, 384, 388, 389, 397, 396, 395, 398, 399, 401,
	400, 402, 380, 381, 382, 385, 386, 387, 390, 391,
	394, 392, 393, 0, 112, 123, 188, 0, 246, 162,
	306, 0, 154, 0, 0, 0, 0, 0, 0, 114,
	115, 124, 133, 140, 153, 158, 161, 167, 171, 174,
	176, 177, 178, 182, 196, 199, 200, 201, 202, 216,
	217, 219, 220, 223, 224, 227, 229, 230, 231, 233,
	234, 235, 240, 243, 245, 247, 250, 255, 257, 258,
	259, 261, 262, 263, 267, 268, 269, 270, 278, 282,
	292, 293, 303, 312, 314, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 156, 0, 0, 0,
	0, 186, 1539, 0, 147, 194, 192, 0, 0, 0,
	228, 284, 0, 0, 0, 0, 189, 0, 0, 307,
	275, 207, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 110,
	0, 374, 0, 0, 0, 0, 0, 0, 137, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	0, 0, 0, 0, 166, 208, 127, 0, 0, 0,
	179, 313, 0, 0, 0, 242, 0, 280, 169, 187,
	131, 113, 125, 141, 168, 218, 251, 260, 0, 0,
	0, 0, 0, 148, 0, 253, 226, 302, 0, 0,
	232, 252, 190, 291, 244, 300, 301, 170, 285, 310,
	315, 272, 157, 0, 117, 0, 239, 152, 183, 0,
	0, 0, 145, 0, 0, 0, 271, 132, 287, 206,
	212, 142, 144, 143, 126, 266, 289, 136, 146, 276,
	256, 281, 151, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 118, 283, 299, 138, 264, 120, 297, 279,
	204, 180, 181, 119, 0, 249, 155, 165, 150, 221,
	0, 164, 241, 294, 295, 149, 317, 128, 309, 122,
	129, 308, 215, 0, 214, 311, 290, 298, 205, 198,
	0, 121, 296, 203, 197, 185, 160, 172, 237, 193,
	238, 173, 210, 209, 211, 0, 0, 0, 277, 305,
	318, 195, 134, 0, 265, 288, 0, 0, 135, 163,
	159, 236, 213, 130, 175, 274, 184, 191, 248, 316,
	225, 254, 139, 304, 273, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 375, 376,
	377, 378, 379, 383, 384, 388, 389, 397, 396, 395,
	398, 399, 401, 400, 402, 380, 381, 382, 385, 386,
	387, 390, 391, 394, 392, 393, 0, 112, 123, 188,
	0, 246, 162, 306, 0, 154, 0, 0, 0, 0,
	0, 0, 114, 115, 124, 133, 140, 153, 158, 161,
	167, 171, 174, 176, 177, 178, 182, 196, 199, 200,
	201, 202, 216, 217, 219, 220, 223, 224, 227, 229,
	230, 231, 233, 234, 235, 240, 243, 245, 247, 250,
	255, 257, 258, 259, 261, 262, 263, 267, 268, 269,
	270, 278, 282, 292, 293, 303, 312, 314, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 156,
	0, 0, 0, 0, 186, 0, 0, 147, 194, 192,
	0, 0, 0, 228, 284, 0, 0, 0, 0, 189,
	0, 0, 307, 275, 207, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 110, 0, 374, 0, 0, 0, 0, 0,
	0, 137, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 0, 0, 0, 0, 166, 208, 127,
	0, 0, 0, 179, 313, 0, 0, 0, 242, 0,
	280, 169, 187, 131, 113, 125, 141, 168, 218, 251,
	260, 0, 0, 0, 0, 0, 148, 0, 253, 226,
	302, 0, 0, 232, 252, 190, 291, 244, 300, 301,
	170, 285, 310, 315, 272, 157, 0, 117, 0, 239,
	152, 183, 0, 0, 0, 145, 0, 0, 0, 271,
	132, 287, 206, 212, 142, 144, 143, 126, 266, 289,
	136, 146, 276, 256, 281, 151, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 118, 283, 299, 138, 264,
	120, 297, 279, 204, 180, 181, 119, 0, 249, 155,
	165, 150, 221, 0, 164, 241, 294, 295, 149, 317,
	128, 309, 122, 129, 308, 215, 0, 214, 311, 290,
	298, 205, 198, 0, 121, 296, 203, 197, 185, 160,
	172, 237, 193, 238, 173, 210, 209, 211, 0, 0,
	0, 277, 305, 318, 195, 134, 0, 265, 288, 0,
	0, 135, 163, 159, 236, 213, 130, 175, 274, 184,
	191, 248, 316, 225, 254, 139, 304, 273, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 375, 376, 377, 378, 379, 383, 384, 388, 389,
	397, 396, 395, 398, 399, 401, 400, 402, 380, 381,
	382, 385, 386, 387, 390, 391, 394, 392, 393, 0,
	112, 123, 188, 0, 246, 162, 306, 0, 154, 0,
	0, 0, 0, 0, 0, 114, 115, 124, 133, 140,
	153, 158, 161, 167, 171, 174, 176, 177, 178, 182,
	196, 199, 200, 201, 202, 216, 217, 219, 220, 223,
	224, 227, 229, 230, 231, 233, 234, 235, 240, 243,
	245, 247, 250, 255, 257, 258, 259, 261, 262, 263,
	267, 268, 269, 270, 278, 282, 292, 293, 303, 312,
	314, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 156, 0, 0, 0, 0, 186, 0, 0,
	147, 194, 192, 0, 0, 0, 228, 284, 0, 0,
	0, 0, 189, 0, 0, 307, 275, 207, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 834, 0, 837, 0, 0,
	0, 0, 0, 0, 137, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 0, 0, 0, 0,
	166, 208, 127, 0, 0, 0, 179, 313, 0, 0,
	0, 242, 0, 280, 169, 187, 131, 113, 125, 141,
	168, 218, 251, 260, 0, 0, 0, 0, 0, 148,
	0, 253, 226, 302, 0, 0, 232, 252, 190, 291,
	244, 300, 301, 170, 285, 310, 315, 272, 157, 0,
	117, 0, 239, 152, 183, 0, 0, 0, 145, 0,
	0, 0, 271, 132, 287, 206, 212, 142, 144, 143,
	126, 266, 289, 136, 146, 276, 256, 281, 151, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 118, 283,
	299, 138, 264, 120, 297, 279, 204, 180, 181, 119,
	0, 249, 155, 165, 150, 221, 0, 164, 241, 294,
	295, 149, 317, 128, 309, 122, 129, 308, 215, 0,
	214, 311, 290, 298, 205, 198, 0, 121, 296, 203,
	197, 185, 160, 172, 237, 193, 238, 173, 210, 209,
	211, 0, 0, 0, 277, 305, 318, 195, 134, 0,
	265, 288, 0, 0, 135, 163, 159, 236, 213, 130,
	175, 274, 184, 191, 248, 316, 225, 254, 139, 304,
	273, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 375, 376, 377, 378, 379, 383,
	384, 388, 389, 397, 396, 395, 398, 399, 401, 400,
	402, 380, 381, 382, 385, 386, 387, 390, 391, 394,
	392, 393, 0, 112, 123, 188, 0, 246, 162, 306,
	0, 154, 0, 0, 0, 0, 0, 0, 114, 115,
	124, 133, 140, 153, 158, 161, 167, 171, 174, 176,
	177, 178, 182, 196, 199, 200, 201, 202, 216, 217,
	219, 220, 223, 224, 227, 229, 230, 231, 233, 234,
	235, 240, 243, 245, 247, 250, 255, 257, 258, 259,
	261, 262, 263, 267, 268, 269, 270, 278, 282, 292,
	293, 303, 312, 314, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 156, 0, 0, 0, 0,
	186, 0, 0, 147, 194, 192, 0, 0, 0, 228,
	284, 0, 0, 0, 0, 189, 0, 0, 307, 275,
	207, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 542, 0,
	0, 0, 0, 0, 0, 0, 0, 137, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 847, 846, 856, 857, 849,
	850, 851, 852, 853, 854, 855, 848, 0, 0, 858,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 0,
	0, 0, 0, 166, 208, 127, 0, 0, 0, 179,
	313, 0, 0, 0, 242, 0, 280, 169, 187, 131,
	113, 125, 141, 168, 218, 251, 260, 0, 0, 0,
	0, 0, 148, 0, 253, 226, 302, 0, 0, 232,
	252, 190, 291, 244, 300, 301, 170, 285, 310, 315,
	272, 157, 0, 117, 0, 239, 152, 183, 0, 0,
	0, 145, 0, 0, 0, 271, 132, 287, 206, 212,
	142, 144, 143, 126, 266, 289, 136, 146, 276, 256,
	281, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 118, 283, 299, 138, 264, 120, 297, 279, 204,
	180, 181, 119, 0, 249, 155, 165, 150, 221, 0,
	164, 241, 294, 295, 149, 317, 128, 309, 122, 129,
	308, 215, 0, 214, 311, 290, 298, 205, 198, 0,
	121, 296, 203, 197, 185, 160, 172, 237, 193, 238,
	173, 210, 209, 211, 0, 0, 0, 277, 305, 318,
	195, 134, 0, 265, 288, 0, 0, 135, 163, 159,
	236, 213, 130, 175, 274, 184, 191, 248, 316, 225,
	254, 139, 304, 273, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 112, 123, 188, 0,
	246, 162, 306, 0, 154, 0, 0, 0, 0, 0,
	0, 114, 115, 124, 133, 140, 153, 158, 161, 167,
	171, 174, 176, 177, 178, 182, 196, 199, 200, 201,
	202, 216, 217, 219, 220, 223, 224, 227, 229, 230,
	231, 233, 234, 235, 240, 243, 245, 247, 250, 255,
	257, 258, 259, 261, 262, 263, 267, 268, 269, 270,
	278, 282, 292, 293, 303, 312, 314, 29, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 156,
	0, 0, 0, 0, 186, 0, 0, 147, 194, 192,
	0, 0, 0, 228, 284, 0, 0, 0, 1268, 189,
	0, 0, 307, 275, 207, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 72,
	0, 0, 110, 0, 0, 0, 0, 0, 0, 0,
	0, 137, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 0, 0, 0, 0, 166, 208, 127,
	0, 0, 0, 179, 313, 0, 0, 0, 242, 0,
	280, 169, 187, 131, 113, 125, 141, 168, 218, 251,
	260, 0, 0, 0, 0, 0, 148, 0, 253, 226,
	302, 0, 0, 232, 252, 190, 291, 244, 300, 301,
	170, 285, 310, 315, 272, 157, 0, 117, 0, 239,
	152, 183, 0, 0, 0, 145, 0, 0, 0, 271,
	132, 287, 206, 212, 142, 144, 143, 126, 266, 289,
	136, 146, 276, 256, 281, 151, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 118, 283, 299, 138, 264,
	120, 297, 279, 204, 180, 181, 119, 0, 249, 155,
	165, 150, 221, 0, 164, 241, 294, 295, 149, 317,
	128, 309, 122, 129, 308, 215, 0, 214, 311, 290,
	298, 205, 198, 0, 121, 296, 203, 197, 185, 160,
	172, 237, 193, 238, 173, 210, 209, 211, 0, 0,
	0, 277, 305, 318, 195, 134, 0, 265, 288, 0,
	0, 135, 163, 159, 236, 213, 130, 175, 274, 184,
	191, 248, 316, 225, 254, 139, 304, 273, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	112, 123, 188, 70, 246, 162, 306, 0, 154, 0,
	0, 0, 0, 0, 0, 114, 115, 124, 133, 140,
	153, 158, 161, 167, 171, 174, 176, 177, 178, 182,
	196, 199, 200, 201, 202, 216, 217, 219, 220, 223,
	224, 227, 229, 230, 231, 233, 234, 235, 240, 243,
	245, 247, 250, 255, 257, 258, 259, 261, 262, 263,
	267, 268, 269, 270, 278, 282, 292, 293, 303, 312,
	314, 29, 286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 156, 0, 0, 0, 0, 186, 0,
	0, 147, 194, 192, 0, 0, 0, 228, 284, 0,
	0, 0, 0, 189, 0, 0, 307, 275, 207, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 72, 0, 0, 542, 0, 0, 0,
	0, 0, 0, 0, 0, 137, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 0, 0, 0,
	0, 166, 208, 127, 0, 0, 0, 179, 313, 0,
	0, 0, 242, 0, 280, 169, 187, 131, 113, 125,
	141, 168, 218, 251, 260, 0, 0, 0, 0, 0,
	148, 0, 253, 226, 302, 0, 0, 232, 252, 190,
	291, 244, 300, 301, 170, 285, 310, 315, 272, 157,
	0, 117, 0, 239, 152, 183, 0, 0, 0, 145,
	0, 0, 0, 271, 132, 287, 206, 212, 142, 144,
	143, 126, 266, 289, 136, 146, 276, 256, 281, 151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 118,
	283, 299, 138, 264, 120, 297, 279, 204, 180, 181,
	119, 0, 249, 155, 165, 150, 221, 0, 164, 241,
	294, 295, 149, 317, 128, 309, 122, 129, 308, 215,
	0, 214, 311, 290, 298, 205, 198, 0, 121, 296,
	203, 197, 185, 160, 172, 237, 193, 238, 173, 210,
	209, 211, 0, 0, 0, 277, 305, 318, 195, 134,
	0, 265, 288, 0, 0, 135, 163, 159, 236, 213,
	130, 175, 274, 184, 191, 248, 316, 225, 254, 139,
	304, 273, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 112, 123, 188, 70, 246, 162,
	306, 0, 154, 0, 0, 0, 0, 0, 0, 114,
	115, 124, 133, 140, 153, 158, 161, 167, 171, 174,
	176, 177, 178, 182, 196, 199, 200, 201, 202, 216,
	217, 219, 220, 223, 224, 227, 229, 230, 231, 233,
	234, 235, 240, 243, 245, 247, 250, 255, 257, 258,
	259, 261, 262, 263, 267, 268, 269, 270, 278, 282,
	292, 293, 303, 312, 314, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 156, 986, 0, 0,
	0, 186, 0, 0, 147, 194, 192, 0, 0, 0,
	228, 284, 0, 0, 0, 0, 189, 0, 0, 307,
	275, 207, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 542,
	0, 985, 0, 0, 0, 0, 0, 0, 137, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	0, 0, 0, 0, 166, 208, 127, 0, 0, 0,
	179, 313, 0, 0, 0, 242, 0, 280, 169, 187,
	131, 113, 125, 141, 168, 218, 251, 260, 0, 0,
	0, 0, 0, 148, 0, 253, 226, 302, 0, 0,
	232, 252, 190, 291, 244, 300, 301, 170, 285, 310,
	315, 272, 157, 0, 117, 0, 239, 152, 183, 0,
	0, 0, 145, 0, 0, 0, 271, 132, 287, 206,
	212, 142, 144, 143, 126, 266, 289, 136, 146, 276,
	256, 281, 151, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 118, 283, 299, 138, 264, 120, 297, 279,
	204, 180, 181, 119, 0, 249, 155, 165, 150, 221,
	0, 164, 241, 294, 295, 149, 317, 128, 309, 122,
	129, 308, 215, 0, 214, 311, 290, 298, 205, 198,
	0, 121, 296, 203, 197, 185, 160, 172, 237, 193,
	238, 173, 210, 209, 211, 0, 0, 0, 277, 305,
	318, 195, 134, 0, 265, 288, 0, 0, 135, 163,
	159, 236, 213, 130, 175, 274, 184, 191, 248, 316,
	225, 254, 139, 304, 273, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 112, 123, 188,
	0, 246, 162, 306, 0, 154, 0, 0, 0, 0,
	0, 0, 114, 115, 124, 133, 140, 153, 158, 161,
	167, 171, 174, 176, 177, 178, 182, 196, 199, 200,
	201, 202, 216, 217, 219, 220, 223, 224, 227, 229,
	230, 231, 233, 234, 235, 240, 243, 245, 247, 250,
	255, 257, 258, 259, 261, 262, 263, 267, 268, 269,
	270, 278, 282, 292, 293, 303, 312, 314, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 156,
	0, 0, 0, 0, 186, 0, 0, 147, 194, 192,
	0, 0, 0, 228, 284, 0, 0, 0, 0, 189,
	0, 0, 307, 275, 207, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 72,
	0, 0, 110, 0, 0, 0, 0, 0, 0, 0,
	0, 137, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 0, 0, 0, 0, 166, 208, 127,
	0, 0, 0, 179, 313, 0, 0, 0, 242, 0,
	280, 169, 187, 131, 113, 125, 141, 168, 218, 251,
	260, 0, 0, 0, 0, 0, 148, 0, 253, 226,
	302, 0, 0, 232, 252, 190, 291, 244, 300, 301,
	170, 285, 310, 315, 272, 157, 0, 117, 0, 239,
	152, 183, 0, 0, 0, 145, 0, 0, 0, 271,
	132, 287, 206, 212, 142, 144, 143, 126, 266, 289,
	136, 146, 276, 256, 281, 151, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 118, 283, 299, 138, 264,
	120, 297, 279, 204, 180, 181, 119, 0, 249, 155,
	165, 150, 221, 0, 164, 241, 294, 295, 149, 317,
	128, 309, 122, 129, 308, 215, 0, 214, 311, 290,
	298, 205, 198, 0, 121, 296, 203, 197, 185, 160,
	172, 237, 193, 238, 173, 210, 209, 211, 0, 0,
	0, 277, 305, 318, 195, 134, 0, 265, 288, 0,
	0, 135, 163, 159, 236, 213, 130, 175, 274, 184,
	191, 248, 316, 225, 254, 139, 304, 273, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	112, 123, 188, 0, 246, 162, 306, 0, 154, 0,
	0, 0, 0, 0, 0, 114, 115, 124, 133, 140,
	153, 158, 161, 167, 171, 174, 176, 177, 178, 182,
	196, 199, 200, 201, 202, 216, 217, 219, 220, 223,
	224, 227, 229, 230, 231, 233, 234, 235, 240, 243,
	245, 247, 250, 255, 257, 258, 259, 261, 262, 263,
	267, 268, 269, 270, 278, 282, 292, 293, 303, 312,
	314, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 156, 0, 0, 0, 0, 186, 0, 0,
	147, 194, 192, 0, 0, 0, 228, 284, 0, 0,
	0, 0, 189, 0, 0, 307, 275, 207, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 72, 0, 0, 542, 0, 0, 0, 0,
	0, 0, 0, 0, 137, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 0, 0, 0, 0,
	166, 208, 127, 0, 0, 0, 179, 313, 0, 0,
	0, 242, 0, 280, 169, 187, 131, 113, 125, 141,
	168, 218, 251, 260, 0, 0, 0, 0, 0, 148,
	0, 253, 226, 302, 0, 0, 232, 252, 190, 291,
	244, 300, 301, 170, 285, 310, 315, 272, 157, 0,
	117, 0, 239, 152, 183, 0, 0, 0, 145, 0,
	0, 0, 271, 132, 287, 206, 212, 142, 144, 143,
	126, 266, 289, 136, 146, 276, 256, 281, 151, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 118, 283,
	299, 138, 264, 120, 297, 279, 204, 180, 181, 119,
	0, 249, 155, 165, 150, 221, 0, 164, 241, 294,
	295, 149, 317, 128, 309, 122, 129, 308, 215, 0,
	214, 311, 290, 298, 205, 198, 0, 121, 296, 203,
	197, 185, 160, 172, 237, 193, 238, 173, 210, 209,
	211, 0, 0, 0, 277, 305, 318, 195, 134, 0,
	265, 288, 0, 0, 135, 163, 159, 236, 213, 130,
	175, 274, 184, 191, 248, 316, 225, 254, 139, 304,
	273, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 112, 123, 188, 0, 246, 162, 306,
	0, 154, 0, 0, 0, 0, 0, 0, 114, 115,
	124, 133, 140, 153, 158, 161, 167, 171, 174, 176,
	177, 178, 182, 196, 199, 200, 201, 202, 216, 217,
	219, 220, 223, 224, 227, 229, 230, 231, 233, 234,
	235, 240, 243, 245, 247, 250, 255, 257, 258, 259,
	261, 262, 263, 267, 268, 269, 270, 278, 282, 292,
	293, 303, 312, 314, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 950, 156, 0, 0, 0, 0,
	186, 0, 0, 147, 194, 192, 0, 0, 0, 228,
	284, 0, 0, 0, 0, 189, 0, 0, 307, 275,
	207, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 110, 0,
	0, 0, 0, 0, 0, 0, 0, 137, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 0,
	0, 0, 0, 166, 208, 127, 0, 0, 0, 179,
	313, 0, 0, 0, 242, 0, 280, 169, 187, 131,
	113, 125, 141, 168, 218, 251, 260, 0, 0, 0,
	0, 0, 148, 0, 253, 226, 302, 0, 0, 232,
	252, 190, 291, 244, 300, 301, 170, 285, 310, 315,
	272, 157, 0, 117, 0, 239, 152, 183, 0, 0,
	0, 145, 0, 0, 0, 271, 132, 287, 206, 212,
	142, 144, 143, 126, 266, 289, 136, 146, 276, 256,
	281, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 118, 283, 299, 138, 264, 120, 297, 279, 204,
	180, 181, 119, 0, 249, 155, 165, 150, 221, 0,
	164, 241, 294, 295, 149, 317, 128, 309, 122, 129,
	308, 215, 0, 214, 311, 290, 298, 205, 198, 0,
	121, 296, 203, 197, 185, 160, 172, 237, 193, 238,
	173, 210, 209, 211, 0, 0, 0, 277, 305, 318,
	195, 134, 0, 265, 288, 0, 0, 135, 163, 159,
	236, 213, 130, 175, 274, 184, 191, 248, 316, 225,
	254, 139, 304, 273, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 112, 123, 188, 0,
	246, 162, 306, 0, 154, 0, 0, 0, 0, 0,
	0, 114, 115, 124, 133, 140, 153, 158, 161, 167,
	171, 174, 176, 177, 178, 182, 196, 199, 200, 201,
	202, 216, 217, 219, 220, 223, 224, 227, 229, 230,
	231, 233, 234, 235, 240, 243, 245, 247, 250, 255,
	257, 258, 259, 261, 262, 263, 267, 268, 269, 270,
	278, 282, 292, 293, 303, 312, 314, 286, 0, 0,
	0, 511, 0, 0, 0, 0, 0, 0, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 156, 0,
	0, 0, 0, 186, 0, 0, 147, 194, 192, 0,
	0, 0, 228, 284, 0, 0, 0, 0, 189, 0,
	0, 307, 275, 207, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 110, 0, 0, 0, 0, 0, 0, 0, 0,
	137, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 116, 0, 0, 0, 0, 166, 208, 127, 0,
	0, 0, 179, 313, 0, 0, 0, 242, 0, 280,
	169, 187, 131, 113, 125, 141, 168, 218, 251, 260,
	0, 0, 0, 0, 0, 148, 0, 253, 226, 302,
	0, 0, 232, 252, 190, 291, 244, 300, 301, 170,
	285, 310, 315, 272, 157, 0, 117, 0, 239, 152,
	183, 0, 0, 0, 145, 0, 0, 0, 271, 132,
	287, 206, 212, 142, 144, 143, 126, 266, 289, 136,
	146, 276, 256, 281, 151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 118, 283, 299, 138, 264, 120,
	297, 279, 204, 180, 181, 119, 0, 249, 155, 165,
	150, 221, 0, 164, 241, 294, 295, 149, 317, 128,
	309, 122, 129, 308, 215, 0, 214, 311, 290, 298,
	205, 198, 0, 121, 296, 203, 197, 185, 160, 172,
	237, 193, 238, 173, 210, 209, 211, 0, 0, 0,
	277, 305, 318, 195, 134, 0, 265, 288, 0, 0,
	135, 163, 159, 236, 213, 130, 175, 274, 184, 191,
	248, 316, 225, 254, 139, 304, 273, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 112,
	123, 188, 0, 246, 162, 306, 0, 154, 0, 0,
	0, 0, 0, 0, 114, 115, 124, 133, 140, 153,
	158, 161, 167, 171, 174, 176, 177, 178, 182, 196,
	199, 200, 201, 202, 216, 217, 219, 220, 223, 224,
	227, 229, 230, 231, 233, 234, 235, 240, 243, 245,
	247, 250, 255, 257, 258, 259, 261, 262, 263, 267,
	268, 269, 270, 278, 282, 292, 293, 303, 312, 314,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 156, 0, 0, 0, 0, 186, 0, 0, 147,
	194, 192, 0, 0, 0, 228, 284, 0, 0, 0,
	0, 189, 0, 0, 307, 275, 207, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 110, 0, 0, 0, 0, 0,
	0, 0, 0, 137, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 0, 0, 0, 0, 166,
	208, 127, 0, 107, 0, 179, 313, 0, 0, 0,
	242, 0, 280, 169, 187, 131, 113, 125, 141, 168,
	218, 251, 260, 0, 0, 0, 0, 0, 148, 0,
	253, 226, 302, 0, 0, 232, 252, 190, 291, 244,
	300, 301, 170, 285, 310, 315, 272, 157, 0, 117,
	0, 239, 152, 183, 0, 0, 0, 145, 0, 0,
	0, 271, 132, 287, 206, 212, 142, 144, 143, 126,
	266, 289, 136, 146, 276, 256, 281, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 118, 283, 299,
	138, 264, 120, 297, 279, 204, 180, 181, 119, 0,
	249, 155, 165, 150, 221, 0, 164, 241, 294, 295,
	149, 317, 128, 309, 122, 129, 308, 215, 0, 214,
	311, 290, 298, 205, 198, 0, 121, 296, 203, 197,
	185, 160, 172, 237, 193, 238, 173, 210, 209, 211,
	0, 0, 0, 277, 305, 318, 195, 134, 0, 265,
	288, 0, 0, 135, 163, 159, 236, 213, 130, 175,
	274, 184, 191, 248, 316, 225, 254, 139, 304, 273,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 112, 123, 188, 0, 246, 162, 306, 0,
	154, 0, 0, 0, 0, 0, 0, 114, 115, 124,
	133, 140, 153, 158, 161, 167, 171, 174, 176, 177,
	178, 182, 196, 199, 200, 201, 202, 216, 217, 219,
	220, 223, 224, 227, 229, 230, 231, 233, 234, 235,
	240, 243, 245, 247, 250, 255, 257, 258, 259, 261,
	262, 263, 267, 268, 269, 270, 278, 282, 292, 293,
	303, 312, 314, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 156, 0, 0, 0, 0, 186,
	0, 0, 147, 194, 192, 0, 0, 0, 228, 284,
	0, 0, 0, 0, 189, 0, 0, 307, 275, 207,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 542, 0, 0,
	0, 0, 0, 0, 0, 0, 137, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 0, 0,
	0, 0, 166, 208, 127, 0, 0, 0, 179, 313,
	0, 0, 0, 242, 0, 280, 169, 187, 131, 113,
	125, 141, 168, 218, 251, 260, 0, 0, 0, 0,
	0, 148, 0, 253, 226, 302, 0, 0, 232, 252,
	190, 291, 244, 300, 301, 170, 285, 310, 315, 272,
	157, 0, 117, 0, 239, 152, 183, 0, 0, 0,
	145, 0, 0, 0, 271, 132, 287, 206, 212, 142,
	144, 143, 126, 266, 289, 136, 146, 276, 256, 281,
	151, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	118, 283, 299, 138, 264, 120, 297, 279, 204, 180,
	181, 119, 0, 249, 155, 165, 150, 221, 0, 164,
	241, 294, 295, 149, 317, 128, 309, 122, 129, 308,
	215, 0, 214, 311, 290, 298, 205, 198, 0, 121,
	296, 203, 197, 185, 160, 172, 237, 193, 238, 173,
	210, 209, 211, 0, 0, 0, 277, 305, 318, 195,
	134, 0, 265, 288, 0, 0, 135, 163, 159, 236,
	213, 130, 175, 274, 184, 191, 248, 316, 225, 254,
	139, 304, 273, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 112, 123, 188, 0, 246,
	162, 306, 0, 154, 0, 0, 0, 0, 0, 0,
	114, 115, 124, 133, 140, 153, 158, 161, 167, 171,
	174, 176, 177, 178, 182, 196, 199, 200, 201, 202,
	216, 217, 219, 220, 223, 224, 227, 229, 230, 231,
	233, 234, 235, 240, 243, 245, 247, 250, 255, 257,
	258, 259, 261, 262, 263, 267, 268, 269, 270, 278,
	282, 292, 293, 303, 312, 314, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 156, 0, 0,
	0, 0, 186, 0, 0, 147, 194, 192, 0, 0,
	0, 228, 284, 0, 0, 0, 0, 189, 0, 0,
	307, 275, 207, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	110, 0, 0, 0, 0, 0, 0, 0, 0, 137,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 0, 0, 0, 0, 166, 208, 127, 0, 0,
	0, 179, 313, 0, 0, 0, 242, 0, 280, 169,
	187, 131, 113, 125, 141, 168, 218, 251, 260, 0,
	0, 0, 0, 0, 148, 0, 253, 226, 302, 0,
	0, 232, 252, 190, 291, 244, 300, 301, 170, 285,
	310, 315, 272, 157, 0, 117, 0, 239, 152, 183,
	0, 0, 0, 145, 0, 0, 0, 271, 132, 287,
	206, 212, 142, 144, 143, 126, 266, 289, 136, 146,
	276, 256, 281, 151, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 118, 283, 299, 138, 264, 120, 297,
	279, 204, 180, 181, 119, 0, 249, 155, 165, 150,
	221, 0, 164, 241, 294, 295, 149, 317, 128, 309,
	122, 129, 308, 215, 0, 214, 311, 290, 298, 205,
	198, 0, 121, 296, 203, 197, 185, 160, 172, 237,
	193, 238, 173, 210, 209, 211, 0, 0, 0, 277,
	305, 318, 195, 134, 0, 265, 288, 0, 0, 135,
	163, 159, 236, 213, 130, 175, 274, 184, 191, 248,
	316, 225, 254, 139, 304, 273, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 112, 123,
	188, 0, 246, 162, 306, 0, 154, 0, 0, 0,
	0, 0, 0, 114, 115, 124, 133, 140, 153, 158,
	161, 167, 171, 174, 176, 177, 178, 182, 196, 199,
	200, 201, 202, 216, 217, 219, 220, 223, 224, 227,
	229, 230, 231, 233, 234, 235, 240, 243, 245, 247,
	250, 255, 257, 258, 259, 261, 262, 263, 267, 268,
	269, 270, 278, 282, 292, 293, 303, 312, 314, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	156, 0, 0, 0, 0, 186, 0, 0, 147, 194,
	192, 0, 0, 0, 228, 284, 0, 0, 0, 0,
	189, 0, 0, 307, 275, 207, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 419, 0, 0, 0, 0, 0, 0,
	0, 0, 137, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 0, 0, 0, 0, 166, 208,
	127, 0, 0, 0, 179, 313, 0, 0, 0, 242,
	0, 280, 169, 187, 131, 113, 125, 141, 168, 218,
	251, 260, 0, 0, 0, 0, 0, 148, 0, 253,
	226, 302, 0, 0, 232, 252, 190, 291, 244, 300,
	301, 170, 285, 310, 315, 272, 157, 0, 117, 0,
	239, 152, 183, 0, 0, 0, 145, 0, 0, 0,
	271, 132, 287, 206, 212, 142, 144, 143, 126, 266,
	289, 136, 146, 276, 256, 281, 151, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 118, 283, 299, 138,
	264, 120, 297, 279, 204, 180, 181, 119, 0, 249,
	155, 165, 150, 221, 0, 164, 241, 294, 295, 149,
	317, 128, 309, 122, 129, 308, 215, 0, 214, 311,
	290, 298, 205, 198, 0, 121, 296, 203, 197, 185,
	160, 172, 237, 193, 238, 173, 210, 209, 211, 0,
	0, 0, 277, 305, 318, 195, 134, 0, 265, 288,
	0, 0, 135, 163, 159, 236, 213, 130, 175, 274,
	184, 191, 248, 316, 225, 254, 139, 304, 273, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 112, 123, 188, 0, 246, 162, 306, 0, 154,
	0, 0, 0, 0, 0, 0, 114, 115, 124, 133,
	140, 153, 158, 161, 167, 171, 174, 176, 177, 178,
	182, 196, 199, 200, 201, 202, 216, 217, 219, 220,
	223, 224, 227, 229, 230, 231, 233, 234, 235, 240,
	243, 245, 247, 250, 255, 257, 258, 259, 261, 262,
	263, 267, 268, 269, 270, 278, 282, 292, 293, 303,
	312, 314, 286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 156, 0, 0, 0, 0, 186, 0,
	0, 147, 194, 192, 0, 0, 0, 228, 284, 0,
	0, 0, 0, 189, 0, 0, 307, 275, 207, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 419, 0, 0, 0,
	0, 0, 0, 0, 0, 137, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 0, 0, 0,
	0, 166, 208, 127, 0, 0, 0, 179, 313, 0,
	0, 0, 242, 0, 280, 169, 187, 131, 113, 125,
	141, 168, 218, 251, 260, 0, 0, 0, 0, 0,
	148, 0, 253, 226, 302, 0, 0, 232, 252, 190,
	291, 244, 300, 301, 170, 285, 310, 315, 272, 157,
	0, 117, 0, 239, 152, 183, 0, 0, 0, 145,
	0, 0, 0, 271, 132, 287, 206, 212, 142, 144,
	143, 126, 266, 289, 136, 146, 276, 256, 281, 151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 118,
	283, 299, 138, 264, 120, 297, 279, 204, 180, 181,
	119, 0, 249, 155, 165, 150, 221, 0, 164, 241,
	294, 295, 149, 317, 128, 309, 122, 530, 308, 215,
	0, 214, 311, 290, 298, 205, 198, 0, 121, 296,
	203, 197, 185, 160, 172, 237, 193, 238, 173, 210,
	209, 211, 0, 0, 0, 277, 305, 318, 523, 134,
	0, 265, 288, 0, 0, 135, 163, 159, 236, 531,
	529, 1287, 1288, 184, 191, 248, 316, 225, 254, 139,
	304, 273, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 112, 123, 188, 0, 246, 162,
	306, 0, 154, 0, 0, 0, 0, 0, 0, 114,
	115, 124, 133, 140, 153, 158, 161, 167, 171, 174,
	176, 177, 178, 182, 196, 199, 200, 201, 202, 216,
	217, 219, 220, 223, 224, 227, 229, 230, 231, 233,
	524, 525, 240, 243, 245, 247, 250, 255, 257, 258,
	259, 261, 262, 263, 267, 268, 269, 270, 278, 282,
	292, 293, 303, 312, 314, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 156, 0, 0, 0,
	0, 186, 0, 0, 147, 194, 192, 0, 0, 0,
	228, 284, 0, 0, 0, 0, 189, 0, 0, 307,
	275, 207, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 419,
	0, 0, 0, 0, 0, 0, 0, 0, 137, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	0, 0, 0, 0, 166, 208, 127, 0, 0, 0,
	179, 313, 0, 0, 0, 242, 0, 280, 169, 187,
	131, 113, 125, 141, 168, 218, 251, 260, 0, 0,
	0, 0, 0, 148, 0, 253, 226, 302, 0, 0,
	232, 252, 190, 291, 244, 300, 301, 170, 285, 310,
	315, 272, 157, 0, 117, 0, 239, 152, 183, 0,
	0, 0, 145, 0, 0, 0, 271, 132, 287, 206,
	212, 142, 144, 143, 126, 266, 289, 136, 146, 276,
	256, 281, 151, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 118, 283, 977, 138, 264, 120, 297, 279,
	204, 180, 181, 119, 0, 249, 155, 165, 150, 221,
	0, 164, 241, 294, 295, 149, 317, 128, 309, 122,
	129, 308, 215, 0, 214, 311, 290, 298, 205, 198,
	0, 121, 296, 203, 197, 185, 160, 172, 237, 193,
	238, 173, 210, 209, 211, 0, 0, 0, 277, 305,
	318, 195, 134, 0, 265, 288, 0, 0, 135, 163,
	159, 236, 213, 130, 175, 274, 184, 191, 248, 316,
	225, 254, 139, 304, 273, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 112, 123, 188,
	0, 246, 162, 306, 0, 154, 0, 0, 0, 0,
	0, 0, 114, 115, 124, 133, 140, 153, 158, 161,
	167, 171, 174, 176, 177, 178, 182, 196, 199, 200,
	201, 202, 216, 217, 219, 220, 223, 224, 227, 229,
	230, 231, 233, 234, 235, 240, 243, 245, 247, 250,
	255, 257, 258, 259, 261, 262, 263, 267, 268, 269,
	270, 278, 282, 292, 293, 303, 312, 314, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 156,
	0, 0, 0, 0, 186, 0, 0, 147, 194, 192,
	0, 0, 0, 228, 284, 0, 0, 0, 0, 189,
	0, 0, 307, 275, 207, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 419, 0, 0, 0, 0, 0, 0, 0,
	0, 137, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 0, 0, 0, 0, 166, 208, 127,
	0, 0, 0, 179, 313, 0, 0, 0, 242, 0,
	280, 169, 187, 131, 113, 125, 141, 168, 218, 251,
	260, 0, 0, 0, 0, 0, 148, 0, 253, 226,
	302, 0, 0, 232, 252, 190, 291, 244, 300, 301,
	170, 285, 310, 315, 272, 157, 0, 117, 0, 239,
	152, 183, 0, 0, 0, 145, 0, 0, 0, 271,
	132, 287, 206, 212, 142, 144, 143, 126, 266, 289,
	136, 146, 276, 256, 281, 151, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 118, 283, 975, 138, 264,
	120, 297, 279, 204, 180, 181, 119, 0, 249, 155,
	165, 150, 221, 0, 164, 241, 294, 295, 149, 317,
	128, 309, 122, 129, 308, 215, 0, 214, 311, 290,
	298, 205, 198, 0, 121, 296, 203, 197, 185, 160,
	172, 237, 193, 238, 173, 210, 209, 211, 0, 0,
	0, 277, 305, 318, 195, 134, 0, 265, 288, 0,
	0, 135, 163, 159, 236, 213, 130, 175, 274, 184,
	191, 248, 316, 225, 254, 139, 304, 273, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	112, 123, 188, 0, 246, 162, 306, 0, 154, 0,
	0, 0, 0, 0, 0, 114, 115, 124, 133, 140,
	153, 158, 161, 167, 171, 174, 176, 177, 178, 182,
	196, 199, 200, 201, 202, 216, 217, 219, 220, 223,
	224, 227, 229, 230, 231, 233, 234, 235, 240, 243,
	245, 247, 250, 255, 257, 258, 259, 261, 262, 263,
	267, 268, 269, 270, 278, 282, 292, 293, 303, 312,
	314, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 156, 0, 0, 0, 0, 186, 0, 0,
	147, 194, 192, 0, 0, 0, 228, 284, 0, 0,
	0, 0, 189, 0, 0, 307, 275, 207, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 419, 0, 0, 0, 0,
	0, 0, 0, 0, 137, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 0, 0, 0, 0,
	166, 208, 127, 0, 0, 0, 179, 313, 0, 0,
	0, 242, 0, 280, 169, 187, 131, 113, 125, 141,
	168, 218, 251, 260, 0, 0, 0, 0, 0, 148,
	0, 253, 226, 302, 0, 0, 232, 252, 190, 291,
	244, 300, 301, 170, 285, 310, 315, 272, 157, 0,
	117, 0, 239, 152, 183, 0, 0, 0, 145, 0,
	0, 0, 271, 132, 287, 206, 212, 142, 144, 143,
	126, 266, 289, 136, 146, 276, 256, 281, 151, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 118, 283,
	518, 138, 264, 120, 297, 279, 204, 180, 181, 119,
	0, 249, 155, 165, 150, 221, 0, 164, 241, 294,
	295, 149, 317, 128, 309, 122, 530, 308, 215, 0,
	214, 311, 290, 298, 205, 198, 0, 121, 296, 203,
	197, 185, 160, 172, 237, 193, 238, 173, 210, 209,
	211, 0, 0, 0, 277, 305, 318, 523, 134, 0,
	265, 288, 0, 0, 135, 163, 159, 236, 531, 529,
	519, 520, 184, 191, 248, 316, 225, 254, 139, 304,
	273, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 112, 123, 188, 0, 246, 162, 306,
	0, 154, 0, 0, 0, 0, 0, 0, 114, 115,
	124, 133, 140, 153, 158, 161, 167, 171, 174, 176,
	177, 178, 182, 196, 199, 200, 201, 202, 216, 217,
	219, 220, 223, 224, 227, 229, 230, 231, 233, 524,
	525, 240, 243, 245, 247, 250, 255, 257, 258, 259,
	261, 262, 263, 267, 268, 269, 270, 278, 282, 292,
	293, 303, 312, 314,
}
var yyPact = [...]int{

	528, -1000, -304, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1463, -1000,
	-1000, -1000, -1000, -1000, -1000, 498, 209, -1000, -1000, 259,
	78, 22333, 257, 2562, 23179, -1000, -1000, -1000, -1000, 195,
	23179, -1000, -1000, -108, -119, -1000, 201, 234, 1022, 1351,
	-1000, 1522, 1528, -1000, -1000, 236, 15, -1000, -1000, -1000,
	18101, 148, -1000, -1000, -1000, 1441, 1461, 1249, -1000, 11756,
	232, 232, 21910, 25294, -1000, 23179, 10485, 253, 23179, -166,
	228, 228, 140, 228, -1000, 545, -1000, -1000, -1000, 23179,
	230, 22756, 230, 230, 230, 230, 230, 23179, -1000, 405,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 23179,
	1020, 1383, 530, 104, 7503, 7503, -1000, 561, -1000, 131,
	130, 123, 127, -21, 624, -1000, 7503, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 205, 148, 541, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1382, 1381, 793, 1380, 447, 1370,
	1207, -101, -1000, 1209, 1432, 256, 23179, -1000, -1000, 1139,
	-1000, 1191, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 863, 1376, 14294, 14717, 1318, -1000, -1000,
	590, 1491, -1000, 17255, 391, -1000, 14294, 2272, 1141, -1000,
	-1000, 1141, -1000, -1000, 292, -1000, -1000, 15986, 15986, 15986,
	15986, 15986, 15986, 15986, 15986, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1141, -1000, 11333, 1141, 1141, 1141, 1141, 1141, 1141,
	1141, 1141, 1141, 1141, 14294, 1141, 1141, 1141, 1141, 1141,
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141,
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141,
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141,
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 21487,
	20641, 23179, 1087, 1086, -1000, -1000, 326, 1138, -124, 24871,
	24448, -1000, 540, 23602, 23602, 23602, 20218, -1000, 311, -1000,
	1367, -1000, -1000, 1010, 192, -1000, 3860, 296, -1000, -1000,
	-1000, 1206, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 22756, 1420,
	235, 1006, 556, 1005, 1002, 998, 23179, 997, 1136, 240,
	23179, 1411, 1220, 23179, 996, 995, 991, 990, -1000, 10059,
	-1000, 7503, 530, -1000, 754, 14294, 228, 228, 7503, 7503,
	7503, 23179, 23179, 23179, -1000, -1000, -1000, -1000, 23179, -1000,
	-1000, 530, 530, 7503, 7503, 558, 1483, 558, 558, -1000,
	-1000, -1000, -1000, 14294, -1000, 15986, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 987, -1000, -1000, 447, 447, -1000, 713,
	447, 1104, -1000, 524, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 447, -1000, 13871, -302,
	-1000, 1249, -1000, -1000, 148, -1000, -1000, -1000, 23179, 7503,
	18101, 1141, 22756, -1000, -1000, -1000, 1523, 456, 814, 302,
	1134, -1000, 673, 1402, 1141, 1141, 1141, 1141, 1141, 1141,
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141,
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141,
	1141, 1141, 828, 1269, -1000, -1000, -1000, 23179, -1000, 14294,
	14294, 751, -1000, 18524, -1000, -1000, -1000, -1000, 8355, 460,
	15986, 616, 534, 15986, 15986, 15986, 15986, 15986, 15986, 15986,
	15986, 15986, 15986, 15986, 15986, 15986, 15986, 15986, 719, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 981, -1000, 148,
	1519, 1519, 435, 435, 435, 435, 435, 435, 435, 18947,
	1415, 863, 985, 487, 11333, 12602, 12602, 863, 14294, 14294,
	13448, 13025, 12602, 12602, 1415, 486, 487, 23602, -1000, -1000,
	15563, -1000, -1000, -1000, -1000, -1000, 863, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 22756, 22756, 12602, 12602, 12602,
	12602, 863, 863, 12602, 12602, 12602, 12602, 12602, 863, 863,
	863, 863, 1415, 1415, 12602, 12602, 12602, 1415, 12602, 12602,
	1415, 12602, 12602, 12602, 12602, 1415, 12602, 12602, 12602, 156,
	23179, -1000, 1101, 1162, -1000, -1000, -1000, 1418, 19371, 16832,
	-1000, 156, 1027, 20641, 23179, -1000, -1000, 20641, 23179, 7929,
	24025, 1099, -1000, -138, -142, -124, 522, -124, 519, 10909,
	507, 505, 500, 430, -1000, -1000, -1000, 9207, -1000, 5799,
	9633, -1000, 296, 1206, -1000, -78, -1000, -1000, -1000, 1165,
	-1000, 1165, 154, 7, 1165, 1165, 1165, 1165, 1165, -14,
	-14, -14, -14, -26, -1000, -1000, -1000, -1000, -1000, 1201,
	1199, -1000, 1165, 1165, 1165, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1196, 172, 1168, 1168, 1168, 1168, 1168,
	198, -1000, 14294, 1195, -1000, 23179, 7503, 1409, 7503, 133,
	1198, -1000, -1000, 23179, 23179, 1133, -1000, 23179, 1118, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	487, 973, 968, -1000, -1000, -1000, -1000, -1000, -1000, 559,
	-1000, -1000, -1000, -1000, 530, 23179, 23179, 23179, 1417, 530,
	487, 604, -1000, 1104, 1104, -1000, 1104, 447, 1519, 1104,
	-1000, 979, 1403, 712, 1415, 863, 1249, 656, -1000, -1000,
	-1000, 161, 931, 300, -1000, 1259, 14294, 14294, 9207, 14717,
	-1000, -1000, -1000, -1000, 1427, -1000, 1282, 1278, 1173, -1000,
	-1000, 460, 481, -1000, -1000, 758, -1000, -1000, -1000, -1000,
	288, 1141, -1000, 2507, -1000, -1000, -1000, -1000, 616, 15986,
	15986, 15986, 604, 2507, 2415, 1407, 632, 435, 465, 465,
	428, 428, 428, 428, 428, 897, 897, -1000, -1000, -1000,
	863, -1000, -1000, -1000, 12602, -1000, 14294, -1000, 863, 966,
	-1000, -1000, 487, 286, 966, -1000, 800, 840, 503, 1481,
	966, 417, 1476, 966, 966, 966, 12602, 682, -1000, 14294,
	863, -1000, 873, 1103, 1102, 966, 863, 1100, 966, 966,
	-179, -179, 863, 966, 863, 966, 966, -179, -179, -179,
	-179, 12602, 12602, 966, 966, 966, 12602, 966, 966, 12602,
	966, 966, 966, 966, 12602, 966, 966, 966, 159, 1141,
	-1000, 23602, 20641, 20641, 20641, 20641, 20641, -1000, 1243, 1241,
	-1000, 1234, 1233, 1350, 18101, -1000, 977, 863, 117, 19371,
	-1000, 1141, -1000, 17678, 304, 251, 246, 244, 1474, 20641,
	1088, -1000, 1088, -1000, 283, -1000, -1000, 23602, 23602, -124,
	-134, -1000, -1000, 1099, 14294, 1099, 14294, -1000, -1000, 487,
	14294, 14294, 14294, -1000, 857, -1000, 281, 1092, 5373, -1000,
	-1000, -1000, -1000, 192, -1000, -1000, -1000, 1197, 289, -1000,
	1315, 420, 482, 841, 1288, -1000, -1000, 242, -75, -1000,
	-1000, 626, -14, -14, 1165, 1165, 152, 1165, -1000, -14,
	-1000, -1000, -1000, 430, 1366, 430, 430, 430, 430, -14,
	706, 706, -1000, -1000, -1000, -1000, 619, -1000, 1196, -1000,
	615, -1000, -1000, -1000, -1000, -1000, 807, 1219, 22756, 148,
	1416, -1000, -1000, -1000, 1544, -1000, -1000, 226, 239, -1000,
	7503, 23179, 7503, 7503, 1474, 967, 961, -1000, -1000, -1000,
	558, 530, 1356, -1000, -1000, 15986, -1000, -1000, -1000, 156,
	255, -1000, 1269, -1000, 1415, 1058, -1000, -1000, 978, 531,
	526, 193, 193, -1000, 478, 193, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 155, 1408, 22756, 22756, 1256, 487,
	487, -1000, 23179, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 7077, 12602, -1000, 604, 2507, 2361, -1000, 15986,
	-1000, 863, 487, -1000, 12602, -1000, 6651, -1000, 126, 719,
	126, 15986, 15986, -1000, 15986, 15986, -1000, -214, -1000, 1066,
	529, -1000, 14294, 820, -1000, -1000, 15986, 15986, -1000, -1000,
	-1000, -1000, -1000, 21064, -1000, -179, -179, -179, -179, -179,
	-1000, -1000, -1000, -1000, 966, 966, -179, -179, -179, 966,
	-179, -179, 966, -179, -179, -179, -179, 966, -179, -179,
	-179, 1218, 23602, 1141, -1000, 19795, 22756, 1097, -1000, 492,
	1162, 1194, 1217, 1619, -1000, -1000, -1000, -1000, 1240, -1000,
	1237, -1000, -1000, 1161, -1000, -1000, 1051, 1141, 22756, 15986,
	304, -1000, 1141, 1141, 1141, 1463, 14294, 1088, -1000, -1000,
	448, -1000, -1000, -148, -149, -1000, 487, 487, 487, 487,
	487, -1000, -1000, 8781, 5799, -1000, 5799, -1000, 22756, 184,
	-1000, 841, -1000, -1000, 841, -1000, -1000, -1000, 1190, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 581, 15986, 1506, -1000,
	1311, -1000, 1303, 705, -1000, -1000, 956, 430, 430, -14,
	-1000, -1000, 1165, -1000, 430, -1000, 470, -1000, -1000, -1000,
	-1000, 430, 960, -1000, 955, 1046, -1000, 948, 43, 23179,
	-1000, -1000, -1000, 1216, -1000, -1000, -1000, 928, 1039, -1000,
	3860, 936, 934, 932, 23179, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 530, -1000, 15986, 2507, -14, 23179, 1173, 656,
	-1000, 804, -1000, 841, 406, -1000, -1000, -1000, 1288, -1000,
	-1000, 272, 909, -1000, 906, 902, 22756, 1299, 896, 23179,
	22756, -1000, -1000, 874, 892, 14294, -1000, 22756, 22756, 1141,
	274, -1000, -1000, -1000, 1016, 11756, -1000, -1000, 863, -1000,
	15986, 2507, -1000, -1000, -1000, 273, 863, 1165, 1165, -1000,
	1165, 1168, -1000, 1165, 14, 1165, 8, 863, 863, 2488,
	2311, 1129, 1067, 1141, -173, -1000, 487, 14294, 1941, 1082,
	-1000, 341, -1000, -1000, -1000, -1000, -1000, -179, -179, -1000,
	-1000, -1000, -1000, -179, -1000, -1000, -179, -1000, -1000, -1000,
	-1000, -179, -1000, -1000, -1000, -1000, 1395, 1080, 1033, -1000,
	-1000, 12179, 863, 931, 927, -1000, 1463, 23602, 14294, -1000,
	-1000, 14294, 1167, -1000, 14294, -1000, -1000, -1000, -1000, 22756,
	116, -1000, 14294, 927, 1997, -1000, 22756, 22756, 22756, 1441,
	487, -1000, -1000, -1000, -1000, 5373, -1000, 900, -1000, 1165,
	-1000, 1288, -1000, -1000, 22756, -1000, 2507, -79, -1000, -1000,
	-1000, -1000, -1000, -1000, 430, -1000, -1000, -1000, -1000, -1000,
	-14, 699, -14, 614, -1000, 606, -1000, -1000, -250, 1164,
	-1000, 148, 23179, 82, 226, -1000, 3860, 3860, 3860, -1000,
	-1000, 2507, -113, -1000, -1000, -1000, 874, 178, 3860, -1000,
	1195, 420, 184, -1000, -1000, -1000, -1000, -1000, 883, 380,
	-1000, 238, 178, 874, 487, 412, 1397, -1000, 22756, 1472,
	20641, -1000, -1000, -1000, 2507, 6225, -1000, -1000, 138, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 15986, 15986, 15986,
	15986, 15986, 863, 698, 487, 15986, 15986, 863, 1460, -1000,
	-1000, -1000, -1000, -1000, 1287, -1000, 1141, -1000, -1000, 157,
	-1000, 22756, 1441, -1000, 487, 487, 22756, 487, 887, -1000,
	1141, 16409, -1000, 18101, 881, 881, 881, -1000, 275, 22756,
	1402, 879, -1000, -1000, 430, -1000, 430, 901, 888, -1000,
	22756, -1000, 1438, -1000, 82, -1000, 695, 92, 97, -1000,
	91, 88, 87, 85, 69, -1000, -1000, -1000, -1000, 1342,
	1337, 1096, 882, -1000, -1000, 854, -1000, 1163, 841, -1000,
	-1000, 838, -1000, -1000, 22756, -1000, 178, 1393, 1386, 1141,
	-1000, 1469, 1459, 1088, 11756, -1000, -1000, -1000, -1000, 873,
	873, 873, 873, 83, -1000, -1000, 873, 873, -1000, 14294,
	1502, -1000, 1141, -1000, 148, -1000, -1000, 871, -1000, 22756,
	-1000, -1000, 304, -1000, -1000, -1000, 275, -1000, 827, 478,
	692, -1000, -1000, 174, -1000, -1000, -1000, -1000, 869, -1000,
	112, 4272, -1000, -1000, -1000, -1000, -1000, -1000, 1349, 1346,
	103, 206, 1322, 1324, 1458, 20641, -1000, -1000, 242, 22756,
	1195, -1000, -1000, -1000, 15986, -1000, 149, -1000, 14717, 14717,
	1472, -1000, -1000, -1000, -1000, -1000, 863, 86, -222, -1000,
	-1000, 1041, 23602, 1033, 863, -1000, -1000, -1000, -1000, -1000,
	603, -1000, 23179, 275, 115, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	14294, 14294, 4947, 4272, -1000, -1000, -1000, -1000, 1161, 599,
	1337, 1453, 1333, 1331, -1000, 688, 1088, 862, 1158, 2507,
	850, -1000, 22756, -1000, 487, -1000, 1026, -1000, 487, -1000,
	1469, -1000, -1000, 1254, -217, -230, 863, 1018, -1000, -1000,
	1142, -1000, 275, 111, -1000, 677, 795, 46, 38, 3704,
	-1000, -1000, -1000, -1000, -305, -1000, -1000, 1339, -1000, 664,
	-1000, 1450, 1444, -1000, 1472, 275, 22756, -1000, 149, 1272,
	14717, -1000, -1000, 1252, -1000, -1000, 22756, -1000, 821, 791,
	636, -1000, 14294, 4272, 1437, 1436, 1429, 1385, 8781, 4228,
	-1000, -1000, 658, 628, 1469, -1000, 846, -1000, 146, -1000,
	-220, 767, 305, -1000, -1000, 552, 4272, -1000, 787, -306,
	189, 148, 317, 15986, -1000, -1000, -1000, -1000, -1000, -1000,
	275, 143, -227, 1215, -1000, -1000, -1000, -1000, -1000, -1000,
	4272, -1000, -307, 4272, 2543, -1000, -1000, -1000, 3543, -1000,
	-1000, -1000, -1000, 29, -1000, -1000, 2507, -1000, 1141, -232,
	1212, 1210, 1488, -1000, -308, 4219, -309, 224, 4272, 533,
	-1000, 14294, -1000, 317, -1000, 15140, -1000, -1000, 1500, -1000,
	1498, 374, 374, 4049, 539, 4272, -1000, -310, 216, 4272,
	-1000, 680, -1000, 873, 863, -1000, -1000, -1000, 181, 652,
	-1000, -1000, -1000, 3365, -1000, -311, 4272, -1000, -1000, -1000,
	-1000, -1000, 208, 2815, -312, -1000, 207, 4272, -1000,
}
var yyPgo = [...]int{

	0, 1846, 180, 1845, 148, 1842, 1838, 1837, 18, 16,
	12, 20, 1835, 1621, 1612, 1609, 1602, 1831, 1598, 1830,
	7, 1829, 1827, 1588, 1826, 1825, 1583, 10, 1823, 23,
	1817, 5, 109, 117, 1815, 3, 1813, 1811, 11, 1807,
	1806, 1581, 1802, 1801, 1799, 1798, 78, 1797, 1576, 1574,
	1796, 1795, 1568, 1559, 1794, 1793, 1557, 1555, 1536, 1792,
	153, 1791, 1789, 1788, 183, 73, 106, 1787, 1786, 1785,
	89, 51, 1573, 86, 41, 96, 682, 1783, 22, 40,
	1782, 1781, 108, 137, 1780, 116, 1779, 79, 164, 80,
	1778, 1777, 133, 1776, 1775, 1774, 103, 1771, 1770, 223,
	1769, 1768, 115, 1767, 50, 39, 60, 1765, 1764, 1763,
	1762, 1761, 107, 2, 1760, 1758, 1757, 61, 1756, 1754,
	146, 1753, 1752, 1744, 104, 54, 1743, 38, 1742, 47,
	57, 1741, 74, 1737, 105, 1736, 1734, 30, 14, 1732,
	33, 1730, 42, 1724, 98, 260, 425, 8, 36, 44,
	48, 1721, 81, 26, 29, 101, 76, 70, 34, 1720,
	114, 1719, 66, 112, 99, 1718, 1717, 676, 1716, 1715,
	102, 1713, 58, 173, 601, 118, 93, 71, 1711, 1708,
	1707, 1705, 65, 94, 1704, 1703, 87, 251, 83, 1623,
	37, 1447, 84, 113, 1702, 32, 1701, 1700, 2952, 82,
	77, 88, 1698, 85, 28, 43, 1697, 1695, 1691, 1690,
	1689, 1688, 135, 1687, 1684, 1683, 1673, 92, 55, 1672,
	1671, 100, 64, 1670, 1669, 1666, 1664, 1663, 97, 59,
	110, 1661, 90, 91, 52, 1658, 1657, 1655, 1652, 45,
	35, 1650, 1646, 1645, 75, 62, 1644, 49, 24, 31,
	56, 15, 63, 67, 1643, 27, 1642, 95, 4, 6,
	9, 1641, 1639, 1638, 1636, 1628, 53, 1627, 1626, 46,
	1625, 1624, 1618, 25, 1616, 1586, 1570, 1566, 0, 111,
	119, 1564, 1562, 138,
}
var yyR1 = [...]int{

	0, 276, 277, 277, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	59, 2, 2, 7, 3, 3, 3, 4, 4, 80,
	81, 81, 85, 85, 5, 5, 6, 6, 8, 8,
	63, 63, 9, 10, 10, 10, 10, 280, 280, 94,
	94, 92, 92, 93, 93, 155, 155, 11, 11, 11,
	11, 160, 160, 164, 164, 164, 165, 165, 165, 165,
	147, 148, 13, 13, 13, 13, 13, 13, 13, 13,
	13, 264, 264, 265, 265, 266, 266, 266, 266, 267,
	267, 268, 268, 269, 269, 269, 269, 269, 269, 269,
	269, 269, 269, 24, 185, 185, 39, 39, 40, 40,
	40, 143, 143, 143, 12, 12, 12, 12, 12, 19,
	21, 21, 28, 28, 29, 22, 22, 22, 22, 30,
	30, 31, 25, 25, 25, 25, 25, 25, 37, 37,
	37, 36, 36, 35, 35, 35, 35, 35, 35, 23,
	23, 23, 23, 38, 38, 33, 33, 32, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	26, 26, 26, 26, 26, 26, 18, 263, 263, 263,
	27, 27, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 44, 241, 242, 242,
	242, 242, 242, 242, 242, 242, 229, 230, 205, 205,
	205, 205, 205, 205, 205, 204, 204, 204, 204, 208,
	208, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	207, 207, 207, 207, 207, 207, 207, 207, 209, 209,
	209, 209, 209, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 211, 211,
	211, 211, 211, 211, 211, 211, 228, 228, 212, 212,
	221, 221, 222, 222, 222, 219, 219, 220, 220, 223,
	223, 215, 216, 224, 217, 217, 217, 218, 218, 218,
	227, 227, 227, 227, 213, 231, 231, 251, 251, 250,
	250, 249, 249, 249, 240, 240, 246, 246, 246, 246,
	246, 235, 235, 235, 234, 234, 236, 236, 239, 239,
	248, 248, 247, 232, 232, 252, 252, 252, 252, 252,
	233, 233, 233, 253, 237, 237, 238, 238, 238, 259,
	260, 258, 258, 258, 258, 258, 109, 109, 109, 243,
	243, 243, 244, 244, 244, 245, 245, 245, 261, 261,
	41, 41, 42, 47, 47, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 142, 142,
	142, 43, 183, 183, 257, 257, 257, 256, 254, 254,
	255, 255, 14, 45, 45, 15, 15, 15, 15, 15,
	15, 15, 16, 16, 48, 49, 49, 49, 49, 49,
	49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
	49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
	49, 49, 49, 49, 77, 171, 171, 169, 169, 172,
	172, 170, 170, 170, 173, 173, 173, 202, 202, 202,
	50, 50, 55, 55, 58, 56, 57, 184, 184, 53,
	53, 54, 54, 54, 54, 69, 69, 281, 281, 52,
	52, 51, 51, 51, 51, 17, 282, 60, 61, 61,
	62, 62, 62, 176, 176, 66, 66, 66, 64, 64,
	64, 65, 65, 71, 71, 75, 75, 75, 75, 74,
	74, 74, 74, 145, 145, 145, 146, 146, 194, 194,
	194, 193, 193, 193, 193, 79, 79, 82, 82, 83,
	83, 83, 83, 86, 128, 128, 103, 103, 104, 104,
	104, 104, 104, 115, 115, 154, 154, 153, 153, 156,
	156, 84, 84, 84, 84, 89, 89, 90, 90, 91,
	91, 182, 182, 200, 200, 200, 95, 95, 95, 97,
	96, 96, 96, 96, 98, 98, 100, 101, 101, 99,
	99, 102, 105, 105, 105, 105, 106, 106, 76, 76,
	76, 76, 76, 76, 76, 168, 168, 108, 108, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 123,
	123, 123, 123, 123, 123, 110, 110, 110, 110, 110,
	110, 110, 70, 70, 124, 124, 124, 88, 87, 87,
	73, 73, 72, 72, 125, 125, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
	118, 118, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 283, 283, 120, 119, 119, 119, 119, 119,
	119, 67, 67, 67, 67, 67, 201, 201, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 135, 135, 68, 68, 133, 133, 134, 136, 136,
	132, 132, 132, 112, 112, 112, 112, 112, 112, 112,
	112, 114, 114, 114, 137, 137, 126, 126, 78, 78,
	138, 138, 139, 139, 140, 140, 141, 141, 144, 144,
	149, 149, 149, 150, 150, 150, 150, 151, 151, 151,
	111, 111, 111, 111, 111, 111, 152, 152, 152, 152,
	157, 157, 127, 127, 130, 130, 129, 131, 158, 158,
	162, 159, 159, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 161, 161, 161, 197, 197, 197, 166, 166,
	174, 174, 175, 175, 167, 167, 214, 214, 179, 179,
	179, 179, 179, 179, 179, 179, 181, 181, 180, 180,
	180, 177, 177, 177, 178, 178, 195, 195, 191, 191,
	196, 196, 192, 192, 198, 198, 199, 199, 262, 262,
	225, 225, 272, 272, 226, 226, 273, 273, 275, 275,
	270, 270, 271, 271, 274, 274, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 278, 279, 186, 187, 187,
	187,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	11, 4, 7, 5, 1, 13, 3, 10, 12, 2,
	1, 3, 3, 6, 1, 3, 1, 3, 7, 8,
	1, 1, 9, 8, 7, 6, 6, 1, 1, 1,
	3, 1, 3, 1, 3, 0, 4, 3, 4, 5,
	5, 1, 3, 3, 2, 2, 2, 2, 2, 1,
	0, 0, 2, 3, 11, 7, 9, 5, 5, 15,
	11, 0, 1, 1, 3, 2, 3, 3, 3, 0,
	1, 1, 2, 2, 2, 2, 1, 2, 2, 3,
	3, 3, 3, 4, 0, 3, 1, 1, 1, 1,
	1, 0, 2, 2, 1, 1, 1, 1, 1, 4,
	5, 8, 1, 2, 5, 7, 10, 8, 11, 1,
	2, 5, 5, 5, 5, 6, 3, 5, 1, 1,
	1, 1, 3, 1, 1, 1, 2, 1, 1, 2,
	4, 2, 4, 2, 3, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 4, 3, 2, 4, 3, 0, 2, 3,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 4, 1, 1,
	2, 3, 4, 3, 3, 3, 3, 3, 0, 2,
	2, 2, 2, 2, 2, 3, 1, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 3, 2, 2, 2, 2, 2, 1, 2,
	2, 2, 1, 4, 4, 3, 3, 2, 4, 5,
	2, 3, 4, 2, 2, 3, 3, 3, 3, 3,
	4, 1, 1, 1, 1, 1, 6, 6, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 3,
	0, 5, 0, 3, 5, 0, 1, 0, 1, 1,
	2, 2, 3, 1, 0, 3, 3, 0, 2, 2,
	2, 1, 2, 1, 2, 5, 4, 0, 1, 1,
	2, 2, 3, 2, 0, 1, 2, 3, 3, 2,
	2, 1, 1, 1, 1, 1, 0, 1, 0, 1,
	1, 3, 3, 3, 1, 10, 11, 11, 12, 12,
	3, 2, 1, 5, 1, 1, 0, 2, 2, 3,
	3, 1, 1, 2, 2, 2, 0, 1, 2, 0,
	1, 3, 1, 2, 3, 1, 1, 1, 0, 2,
	1, 1, 5, 1, 3, 2, 5, 4, 3, 3,
	3, 5, 3, 8, 10, 3, 3, 3, 5, 4,
	5, 1, 2, 2, 4, 3, 6, 5, 0, 1,
	2, 4, 0, 1, 1, 1, 1, 7, 1, 3,
	8, 8, 3, 3, 5, 4, 6, 4, 4, 4,
	4, 4, 3, 2, 3, 4, 4, 3, 6, 6,
	4, 4, 4, 4, 4, 4, 3, 3, 2, 6,
	2, 4, 4, 4, 5, 7, 6, 5, 4, 2,
	4, 3, 2, 3, 3, 1, 1, 0, 1, 1,
	1, 0, 2, 2, 0, 2, 2, 0, 1, 1,
	2, 1, 1, 1, 2, 1, 1, 1, 1, 3,
	3, 1, 1, 1, 1, 0, 3, 1, 1, 2,
	2, 2, 2, 3, 3, 2, 0, 2, 0, 2,
	1, 2, 2, 0, 1, 0, 1, 1, 0, 1,
	1, 0, 1, 3, 5, 1, 1, 3, 5, 1,
	2, 3, 5, 2, 4, 7, 0, 1, 0, 1,
	2, 1, 1, 1, 1, 1, 3, 1, 1, 1,
	4, 1, 3, 2, 2, 4, 2, 6, 1, 4,
	6, 3, 2, 0, 3, 0, 3, 1, 3, 1,
	3, 4, 4, 4, 3, 2, 4, 0, 1, 0,
	2, 0, 1, 1, 1, 1, 1, 2, 2, 1,
	2, 3, 2, 3, 2, 2, 3, 2, 1, 1,
	3, 3, 0, 5, 5, 5, 0, 2, 1, 3,
	3, 2, 3, 1, 2, 0, 3, 1, 1, 3,
	3, 4, 4, 5, 3, 4, 5, 6, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 0, 2, 1, 1, 1, 3, 1, 3,
	0, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 2, 2,
	2, 2, 2, 3, 1, 1, 1, 1, 1, 1,
	5, 6, 6, 6, 5, 5, 5, 6, 5, 5,
	6, 5, 5, 5, 5, 6, 5, 5, 5, 4,
	4, 5, 5, 5, 5, 5, 4, 4, 4, 4,
	4, 4, 3, 6, 6, 6, 8, 8, 8, 8,
	9, 4, 7, 5, 4, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	8, 8, 0, 2, 3, 4, 4, 4, 4, 4,
	4, 0, 3, 4, 7, 3, 1, 1, 2, 3,
	3, 1, 2, 2, 1, 2, 1, 2, 2, 1,
	2, 0, 1, 0, 2, 1, 2, 4, 0, 2,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 0, 3, 1, 3, 1, 1,
	0, 2, 1, 1, 0, 3, 1, 3, 2, 2,
	0, 1, 1, 0, 2, 4, 4, 0, 2, 4,
	2, 1, 3, 5, 4, 6, 1, 3, 3, 5,
	0, 5, 1, 3, 1, 2, 3, 1, 1, 3,
	3, 1, 3, 3, 3, 3, 4, 4, 4, 4,
	4, 3, 1, 2, 1, 1, 1, 1, 1, 1,
	0, 2, 0, 3, 0, 1, 0, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 1, 1, 0, 1, 0, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 0, 2,
	0, 1, 0, 4, 0, 1, 0, 3, 0, 3,
	0, 4, 0, 3, 0, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	1,
}
var yyChk = [...]int{

	-1000, -276, -1, -2, -7, -8, -9, -10, -11, -13,
	-41, -14, -15, -16, -48, -49, -50, -55, -56, -57,
	-53, -52, -51, -17, -23, -26, -18, -59, -3, 6,
	7, -63, 9, 10, 30, -44, 130, -42, -43, 133,
	132, 169, 134, 162, 64, 224, -58, 227, 228, -281,
	-184, 167, 168, 31, 32, 136, 211, 212, 20, 37,
	-4, -80, -5, 8, 317, 131, 225, 164, 163, 26,
	362, -278, 68, -277, 432, -140, 15, -60, -282, -60,
	-60, -60, -60, -60, -241, 105, 68, -178, 143, 86,
	308, 139, -185, 140, -177, 189, 44, 150, 149, 140,
	140, 141, 143, 308, 139, 177, 176, 140, -99, -198,
	71, -189, 359, 153, 374, 375, 131, 186, 224, 235,
	229, 263, 251, 360, 376, 154, 206, 138, 249, 252,
	295, 152, 199, 377, 284, 290, 209, 80, 227, 304,
	378, 155, 203, 205, 204, 194, 210, 36, 165, 247,
	240, 214, 189, 379, 367, 238, 28, 184, 380, 292,
	268, 381, 364, 291, 243, 239, 136, 382, 156, 150,
	179, 383, 269, 273, 384, 296, 385, 386, 387, 142,
	233, 234, 388, 190, 298, 267, 33, 151, 361, 48,
	174, 299, 38, 271, 37, 283, 389, 266, 261, 390,
	391, 392, 393, 265, 232, 260, 201, 53, 137, 275,
	274, 276, 202, 294, 256, 254, 394, 395, 157, 396,
	397, 241, 18, 398, 399, 302, 168, 400, 42, 401,
	402, 403, 172, 404, 405, 406, 293, 270, 272, 188,
	407, 244, 147, 408, 176, 409, 363, 410, 300, 237,
	411, 158, 173, 167, 303, 412, 212, 413, 414, 415,
	159, 416, 417, 418, 228, 286, 207, 419, 420, 421,
	422, 198, 183, 306, 297, 52, 211, 280, 423, 231,
	149, 213, 424, 225, 43, 180, 7, 200, 287, 208,
	258, 175, 425, 426, 245, 246, 264, 230, 259, 226,
	177, 178, 169, 427, 305, 281, 365, 51, 253, 250,
	181, 257, 428, 143, 429, 182, 301, 248, 282, 140,
	123, 252, 295, 130, 285, 286, 292, -235, 293, 176,
	179, -202, 140, -169, 284, 182, 71, 141, 142, 33,
	297, 296, 288, -198, -69, 134, 170, -99, -186, -186,
	-186, 287, 287, -186, -38, 71, 213, -38, 30, 71,
	71, 36, 6, -62, 5, -167, 143, 145, 226, -81,
	-85, -200, -198, -190, 73, 330, 331, 332, 333, 334,
	347, 348, 349, 335, 336, 350, 351, 352, 337, 338,
	353, 354, 356, 357, 355, 341, 340, 339, 342, 343,
	345, 344, 346, -2, -150, 17, 16, -66, 54, 55,
	-61, -74, 114, -76, -198, -107, 88, -113, 29, 71,
	-189, 24, -112, -108, -132, -131, -88, 123, 124, 125,
	112, 113, 120, 89, 126, -118, -116, -117, -119, -121,
	-122, 73, 72, 81, 74, 75, 76, 77, 82, 83,
	84, -191, -129, -278, 58, 59, 139, 318, 319, 320,
	321, 358, 160, 322, 91, 47, 307, 316, 315, 314,
	312, 313, 309, 311, 310, 324, 325, 146, 308, 118,
	317, 347, 348, 349, 350, 351, 352, 353, 354, 356,
	357, 355, 337, 330, 331, 332, 333, 334, 335, 336,
	338, 339, 340, 341, 342, 343, 344, 345, 346, -167,
	-167, 11, -92, -93, -99, -102, -198, -159, 226, 296,
	297, -163, -132, 283, 405, 406, -161, -191, -198, 295,
	252, 294, -99, -242, -230, -233, -192, 155, -253, -191,
	-188, 152, 71, -189, 135, 161, 87, 366, 23, 25,
	278, 330, 90, 123, 331, 332, 333, 16, 20, 91,
	122, 318, 334, 130, 62, 309, 311, 307, 308, 285,
	29, 10, 26, 163, 193, 22, 116, 132, 94, 95,
	96, 166, 24, 164, 84, 160, 19, 65, 11, 13,
	328, 329, 14, 146, 145, 107, 191, 141, 60, 8,
	126, 27, 104, 56, 335, 336, 370, 45, 371, 58,
	105, 17, 312, 313, 31, 358, 337, 171, 372, 338,
	118, 196, 63, 50, 88, 82, 34, 85, 66, 86,
	15, 192, 61, 326, 195, 373, 106, 133, 317, 59,
	139, 6, 323, 30, 162, 341, 340, 339, 342, 197,
	57, 320, 321, 343, 430, 140, 93, 324, 325, 144,
	83, 5, 44, 32, 9, 64, 67, 314, 315, 316,
	47, 345, 344, 346, 92, 12, 327, 362, 141, -99,
	317, -175, 146, -175, 177, 176, -175, 97, -45, -99,
	-174, 146, -191, -174, -174, -174, -174, -174, -99, 127,
	-99, 71, 30, -173, 105, 12, 308, 139, 71, 176,
	179, 140, 177, 143, -187, -278, -192, -187, -237, 11,
	107, 180, 180, 180, 181, 180, -172, -171, 178, 290,
	291, 287, 289, 12, -77, 105, -187, -54, -2, -10,
	-8, -9, -2, 97, -186, -186, 30, 30, 73, 51,
	30, -33, -32, -34, 199, 200, 201, 202, 203, 204,
	205, 206, 207, 208, 209, 210, 30, -263, 68, -225,
	283, -60, -6, -4, -278, 6, 21, 22, 140, -99,
	69, 23, -278, -279, 70, -151, 19, 31, -76, -198,
	-141, -144, -76, -190, 330, 331, 332, 333, 334, 347,
	348, 349, 335, 336, 350, 351, 352, 337, 338, 353,
	354, 356, 357, 355, 341, 340, 339, 342, 343, 345,
	344, 346, 50, -64, 21, 22, 79, 11, -194, 87,
	86, 104, -193, 23, 71, -189, -190, 73, 127, -76,
	-110, 107, 88, 105, 106, 90, 109, 108, 119, 112,
	113, 114, 115, 116, 117, 118, 110, 111, 122, 97,
	98, 99, 100, 101, 102, 103, -168, -278, -88, -278,
	128, 129, -113, -113, -113, -113, -113, -113, -113, -113,
	-278, -2, -125, -76, -278, -278, -278, -278, -278, -278,
	-278, -278, -278, -278, -278, -135, -76, -278, -283, -120,
	-278, -283, -120, -283, -120, -283, -278, -283, -120, -283,
	-120, -283, -283, -120, -283, -278, -278, -278, -278, -278,
	-278, -278, -278, -278, -278, -278, -278, -278, -278, -278,
	-278, -278, -278, -278, -278, -278, -278, -278, -278, -278,
	-278, -278, -278, -278, -278, -278, -278, -278, -278, -101,
	27, -99, -79, -82, -83, -84, -103, -87, -278, -99,
	-88, -99, -92, -280, 69, 11, 67, -280, 69, 127,
	69, -160, -164, 298, 300, 226, -132, 226, -132, 97,
	-132, -132, -132, -197, -191, 73, 29, 127, 30, 70,
	69, -233, 155, 152, -204, -208, -210, -209, -211, -206,
	-207, 249, 252, 256, 254, 250, 255, 123, 253, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	30, 165, 245, 246, 247, 248, 269, 270, 271, 272,
	273, 274, 275, 276, 229, 251, 360, 230, 231, 232,
	233, 234, 235, 237, 238, 239, 240, 241, 242, 243,
	71, -253, 68, -191, 23, 143, 71, 88, 71, 71,
	71, -99, 71, 69, 144, -92, 24, 66, -94, -99,
	71, 71, 71, 71, -199, -198, -188, -187, -173, 73,
	-76, -175, -175, -187, -187, -187, -99, -99, -99, -99,
	-173, -173, -187, -187, -170, 11, 107, 11, -170, -170,
	-76, -113, 71, -33, -33, 73, -33, 69, 97, -33,
	70, -125, -262, 431, -66, -2, -60, -99, -187, -85,
	-87, -278, -152, -191, 9, 107, 69, 18, 127, 69,
	-149, 25, 26, -149, -114, 51, 74, 77, -176, 49,
	-99, -76, -76, -123, 82, 88, 83, 84, -193, 114,
	-199, -192, -188, -113, -124, -129, -88, 78, 107, 105,
	106, 90, -113, -113, -113, -113, -113, -113, -113, -113,
	-113, -113, -113, -113, -113, -113, -113, -201, 71, 73,
	71, -112, -112, -191, -64, -279, 69, -279, -2, -72,
	-75, 114, -76, -198, -72, -279, -76, -76, -132, 73,
	-72, -132, 73, -72, -72, -72, -64, -133, -134, 92,
	-132, -279, -113, -191, -191, -72, -73, -72, -72, -72,
	-279, -279, -75, -72, -75, -72, -72, -279, -279, -279,
	-279, -64, -64, -72, -72, -72, -64, -72, -72, -64,
	-72, -72, -72, -72, -64, -72, -72, -72, -155, 172,
	-99, 30, 69, -95, -97, -96, -98, 56, 60, 62,
	57, 58, 59, 63, -182, 23, -79, -86, 47, -278,
	-104, 172, -105, 23, -200, 64, 145, 65, -155, 67,
	-79, -99, -79, -102, -198, 114, -163, 296, 297, 69,
	299, 301, 302, -160, 97, -160, 97, 66, 85, -76,
	97, 97, 97, -218, 122, -192, -199, -243, -244, -245,
	-192, 73, 74, -230, -231, -232, -233, -246, 155, -252,
	147, 149, 44, -234, 156, 141, 45, -205, -219, 281,
	-212, 68, -212, -212, 257, 249, 252, 250, -212, -212,
	-212, -212, -212, -217, 252, -217, -217, -217, -217, 250,
	68, 68, -212, -212, -212, -221, 68, -221, 244, -222,
	68, -222, -222, -222, -222, -253, -76, -195, 67, -147,
	-99, -187, 24, -187, -39, 186, 161, 68, -99, -99,
	-99, 69, 71, 71, -238, 11, 107, -173, -198, -198,
	-99, -115, 23, -173, -70, 166, -32, -112, 70, -100,
	27, 73, -64, -279, -66, -47, -46, -179, 135, 132,
	133, 137, 138, -256, 278, 131, 252, 80, 29, 15,
	318, 172, 365, 71, 173, -279, 69, 127, 52, -76,
	-76, -144, -166, 19, 11, 47, 47, -65, 57, 82,
	83, 84, 127, -278, -124, -113, -113, -113, -70, 87,
	-279, -73, -76, -279, 69, -279, 127, -279, 69, 67,
	23, 11, 11, -279, 11, 11, -279, -279, -279, -72,
	-136, -134, 94, -76, -279, -279, 69, 69, -279, -279,
	-279, -279, -145, 326, -145, -279, -279, -279, -279, -279,
	-145, -145, -145, -145, -72, -72, -279, -279, -279, -72,
	-279, -279, -72, -279, -279, -279, -279, -72, -279, -279,
	-279, -111, 30, 47, -2, -278, -278, -158, -162, -132,
	-82, -83, -83, -82, -83, 56, 56, 56, 61, 56,
	61, 56, -96, -200, -279, -279, -128, 185, -278, 34,
	-200, -105, 141, 141, 141, -106, 12, -79, -106, -106,
	127, -164, -165, 303, 300, 306, -76, -76, -76, -76,
	-76, 71, 73, 127, 69, -245, 97, -233, 68, 71,
	45, -234, 141, 45, -234, -239, 71, -239, 45, -223,
	-215, -216, -224, -227, -213, 82, 88, 29, 66, 278,
	147, 45, 44, 80, -220, 282, 74, -217, -217, -212,
	-212, -212, 257, -212, -217, -218, 30, -218, -218, -218,
	-218, -217, -228, 73, -228, 74, -221, 74, 70, 66,
	-191, -2, 23, -40, 8, 9, 10, -264, -265, -266,
	71, 107, 191, 192, 144, -187, -99, -187, -187, -106,
	71, 71, -170, -173, 34, -113, -155, 140, -176, 69,
	-186, -183, -257, -234, -261, -232, -233, 148, 156, 147,
	172, 155, -183, -257, 155, 152, -234, 156, 148, -180,
	-234, 144, 23, -183, -183, -240, 97, -183, 172, 23,
	-191, -191, 53, -99, -71, -148, 114, -192, -73, -70,
	87, -113, -279, -75, 114, -199, -203, 123, 249, 165,
	247, 240, 267, 254, 280, 245, 281, -201, -203, -113,
	-113, -113, -113, 359, -140, 96, -76, 93, -113, -113,
	-191, -278, -145, -145, -145, -145, -145, -279, -279, -146,
	-145, -146, -146, -279, -146, -146, -279, -146, -146, -146,
	-146, -279, -146, -146, -146, -157, 66, -158, -127, -130,
	-129, -278, -2, -152, -156, -191, -106, 69, 97, -90,
	-89, 66, 67, -91, 66, -89, 56, 56, -154, 68,
	69, -129, -278, -156, -113, -105, -278, -278, -278, -140,
	-76, -106, 300, 304, 305, -244, -245, -248, -247, -191,
	-252, 156, -239, -239, 68, 82, -113, 9, 45, 45,
	73, 70, -218, -218, -217, -212, -218, 71, 123, -218,
	70, 69, 70, 69, 70, 69, -109, 380, 88, -99,
	-147, -147, 66, 70, 69, -204, 71, 71, 71, -99,
	-173, -113, -217, -99, -65, -46, 68, -229, 71, -186,
	-239, -177, 71, 71, -186, 71, 71, -191, 45, 71,
	-99, -191, -229, 71, -76, -191, -191, -87, 127, -106,
	11, 69, -74, -279, -113, 127, -279, -212, -212, -212,
	-222, -212, 234, -212, 234, -279, -279, 19, 19, 19,
	19, -278, -68, 323, -76, 69, 69, -140, 172, -146,
	-146, -146, -146, -146, 28, -157, 69, -279, -279, -279,
	-279, 69, -140, -162, -76, -76, 68, -76, -153, -191,
	185, -279, -105, -182, -153, -153, -153, -150, 70, 69,
	-212, -153, -117, -218, -217, 73, -217, 74, 74, 380,
	68, -2, -99, -267, -268, -269, 80, 361, 88, 193,
	194, 157, 195, 196, 197, -266, -204, -204, -204, -270,
	-172, -71, -229, -142, 160, 161, -204, -195, -236, -234,
	71, -181, 144, 23, 144, -142, -229, 30, 132, 27,
	-191, -137, 13, -79, -148, -148, 114, -217, 71, -113,
	-113, -113, -113, -113, -279, 73, -113, -113, -279, 16,
	45, -130, 47, -2, -278, -191, -150, -153, 70, 69,
	-129, -104, -200, -279, -279, -279, -250, -249, 67, 151,
	80, -247, -149, 70, -218, -218, 70, 70, -248, -147,
	19, -147, -269, 73, 197, 193, 197, 197, 197, 197,
	198, -271, 38, -273, 39, 11, 70, 71, -205, 68,
	-239, 71, -191, -142, 29, 29, -278, -138, 14, 16,
	-106, -74, -279, -279, -279, -279, -67, 107, 362, -279,
	-279, -125, 9, -127, -2, 70, -191, -105, -249, 71,
	-240, 73, 158, 70, 184, -20, -2, -8, -9, -10,
	-11, -13, -41, -14, -15, -21, -22, -16, -48, -49,
	-58, -56, -57, -53, -52, -25, -23, -26, -18, -24,
	91, 146, 214, 224, 36, 36, 189, 190, -214, 145,
	-274, 43, -272, -226, 42, 16, -79, -248, -195, -113,
	-254, -255, 172, -139, -76, -190, -126, -78, -76, -190,
	-137, -148, -279, 360, 63, 363, -140, -158, -279, 74,
	-99, -251, -250, 185, -147, -76, -76, 71, -37, -196,
	217, 218, 219, -192, -27, -20, -154, 74, -273, 16,
	-275, 40, 41, 73, -106, 70, 68, -279, 69, -191,
	69, -138, 53, 361, 364, -279, 68, -143, 187, 188,
	-28, -29, 92, 93, 215, 216, 220, -204, 69, 432,
	38, 73, 16, 16, -137, -251, -248, -255, 47, -78,
	53, -153, -147, 71, 71, 96, 94, -29, -76, -27,
	19, 19, 19, 29, -192, 96, -20, 73, 73, -138,
	70, 174, 362, 70, -12, -19, -11, -8, -9, -10,
	224, 91, -27, 93, 432, -38, 74, -2, -36, -35,
	74, -38, 222, 88, 223, 71, -113, -251, 175, 363,
	-259, -260, 66, -147, -27, 432, -27, 96, 94, -30,
	-31, 95, -20, 69, 221, -278, 364, -260, 66, -259,
	66, 10, 9, 432, 96, 432, 146, -27, 96, 94,
	-31, -76, -35, -113, 171, -258, 159, 154, 157, 30,
	-258, 96, 91, 432, 146, -27, 93, -279, -279, 153,
	29, 82, 96, 432, -27, 146, 96, 432, 146,
}
var yyDef = [...]int{

	29, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, -2, 516,
	516, 516, 516, 516, 516, 0, -2, 390, 391, 0,
	0, 0, 0, -2, 491, 492, 493, 495, 496, 505,
	-2, 1307, 1307, 0, 0, 1307, 0, 180, 0, 0,
	34, 0, 0, 50, 51, 884, 0, 508, 497, 498,
	0, 0, 1305, 1, 3, 833, 0, 525, 518, 0,
	884, 884, 0, 0, 82, 0, 0, 0, 0, 0,
	882, 882, 0, 882, 905, 0, 901, 902, 903, 0,
	880, 0, 880, 880, 880, 880, 880, 0, 443, 609,
	914, 915, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077,
	1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087,
	1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097,
	1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107,
	1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117,
	1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127,
	1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137,
	1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147,
	1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157,
	1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167,
	1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177,
	1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187,
	1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197,
	1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207,
	1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217,
	1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227,
	1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237,
	1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247,
	1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257,
	1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267,
	1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 0,
	0, 0, 484, 0, 1308, 1308, 458, 0, 460, 0,
	0, 0, 0, 0, 469, 472, 1308, 341, 342, 343,
	488, 489, 478, 490, 0, 0, 0, 509, 510, 511,
	512, 1307, 1307, 515, 159, 161, 0, 181, 0, 184,
	187, 920, 516, 0, 520, 0, 0, 885, 494, 39,
	40, 0, 593, 594, 595, 1277, 1278, 1279, 1280, 1281,
	1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291,
	1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301,
	1302, 1303, 1304, 0, 837, 0, 0, 528, 526, 527,
	517, 0, 539, 548, 0, 618, 0, 623, 625, -2,
	-2, 0, 666, 667, 668, 669, 670, 0, 0, 0,
	0, 0, 0, 0, 0, 694, 695, 696, 697, 698,
	699, 803, 804, 805, 806, 807, 808, 809, 810, 627,
	628, 800, 857, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 791, 0, 762, 762, 762, 762,
	762, 762, 762, 762, 762, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 61, 63, 609, 67, 1257, 1133,
	1232, 861, 0, 1153, 1192, 1193, 0, 800, 0, -2,
	1087, -2, 83, 0, 218, 219, 0, 1099, 362, 912,
	913, 1089, 908, 909, 936, 937, 938, 939, 940, 941,
	942, 943, 944, 945, 946, 947, 948, 949, 950, 951,
	952, 953, 954, 955, 956, 957, 958, 959, 960, 961,
	962, 963, 964, 965, 966, 967, 968, 969, 970, 971,
	972, 973, 974, 975, 976, 977, 978, 979, 980, 981,
	982, 983, 984, 985, 986, 987, 988, 989, 990, 991,
	992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001,
	1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011,
	1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021,
	1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031,
	1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041,
	1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051,
	1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061,
	1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 432, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 442, 0,
	444, 1308, 484, 447, 0, 0, 882, 882, 1308, 1308,
	1308, 0, 0, 0, 456, 1309, 1310, 457, 0, 364,
	365, 484, 484, 1308, 1308, 481, 0, 481, 481, 479,
	480, 475, 476, 0, 471, 0, 473, 499, 501, 502,
	503, 504, 500, 0, 513, 514, 0, 0, 163, 0,
	0, 183, 165, 0, 168, 169, 170, 171, 172, 173,
	174, 175, 176, 177, 178, 179, 0, 186, 0, 918,
	921, 525, 36, 46, 0, 516, 521, 522, 0, 1308,
	0, 0, 0, 45, 1306, 31, 0, 0, 834, 0,
	825, 826, 830, 830, 1277, 1278, 1279, 1280, 1281, 1282,
	1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292,
	1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302,
	1303, 1304, 0, 523, 529, 530, 519, 0, 540, 0,
	0, 0, 549, 0, 551, 552, 553, 554, 0, 621,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 645,
	646, 647, 648, 649, 650, 651, 624, 0, 638, 0,
	0, 0, 686, 687, 688, 689, 690, 691, 692, 0,
	528, 0, 0, 664, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 528, 0, 792, 0, 745, 754,
	0, 746, 755, 747, 756, 748, 0, 749, 757, 750,
	758, 751, 752, 759, 753, 0, 0, 0, 660, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 528, 528, 0, 0, 0, 528, 0, 0,
	528, 0, 0, 0, 0, 528, 0, 0, 0, 65,
	0, 608, 0, 555, 557, 558, 559, -2, 0, 612,
	658, -2, 0, 0, 0, 57, 58, 0, 0, 0,
	0, 68, 71, 0, 0, 1257, 0, 1257, 0, 0,
	0, 0, 0, 317, 875, 876, 877, 0, 873, 379,
	0, 220, 0, 0, 228, 305, 236, 237, 238, 298,
	240, 298, 298, 0, 298, 298, 298, 298, 298, 314,
	314, 314, 314, 314, 281, 282, 283, 284, 285, 0,
	0, 258, 298, 298, 298, 262, 288, 289, 290, 291,
	292, 293, 294, 295, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 300, 300, 302, 302, 302, 302, 302,
	0, 361, 0, 906, 80, 0, 1308, 0, 1308, 0,
	0, 216, 115, 0, 0, 435, 881, 0, 437, 59,
	438, 439, 440, 441, 610, 916, 917, 445, 446, 485,
	486, 0, 0, 450, 451, 452, 453, 454, 455, 366,
	461, 462, 463, 468, 484, 0, 0, 0, 573, 484,
	470, 652, 506, 160, 162, 164, 182, 0, 0, 185,
	188, 0, 0, 0, 528, 0, 525, 0, 421, 41,
	42, 0, 0, 846, 838, 0, 0, 0, 0, 0,
	828, 831, 832, 829, 0, 811, 0, 0, 531, 524,
	33, 619, 620, 622, 639, 0, 641, 643, 550, 541,
	0, 801, -2, 629, 630, 654, 655, 656, 0, 0,
	0, 0, 652, 634, 0, 671, 672, 673, 674, 675,
	676, 677, 678, 679, 680, 681, 682, 685, 776, 777,
	0, 683, 684, 693, 660, 657, 0, 856, 0, 0,
	662, 535, 536, 0, 0, 732, 0, 0, 668, 803,
	0, 668, 803, 0, 0, 0, 0, 798, 795, 0,
	0, 763, 0, 0, 0, 0, 0, 661, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	607, 0, 0, 0, 0, 0, 0, 596, 0, 0,
	599, 0, 0, 0, 0, 592, 0, 0, 0, 0,
	566, 1190, 568, 0, 612, 0, 0, 0, 616, 0,
	616, 62, 616, 64, 0, 611, 862, 1133, 1232, 0,
	0, 74, 75, 69, 0, 70, 0, 863, 864, 865,
	0, 0, 0, 871, 0, 801, 0, 217, 380, 382,
	385, 386, 387, 221, 223, 224, 225, 0, 1099, 354,
	1200, 1238, -2, 348, 1126, -2, -2, 227, 307, 306,
	239, 0, 314, 314, 298, 298, 298, 298, 267, 314,
	270, 273, 274, 317, 0, 317, 317, 317, 317, 314,
	0, 0, 259, 260, 261, 250, 0, 251, 300, 253,
	0, 254, 255, 256, 257, 360, 0, 0, 0, 0,
	0, 87, 883, 88, 0, 116, 117, 91, 0, 433,
	1308, 0, 1308, 1308, 616, 0, 0, 464, 482, 483,
	481, 484, 0, 467, 474, 0, 166, 167, 189, 65,
	0, 919, 523, 47, 528, 392, 393, 1307, -2, 422,
	898, 422, 422, 411, 334, 422, 888, 889, 890, 891,
	892, 893, 894, 895, 0, 0, 0, 0, 0, 835,
	836, 827, 0, 878, 879, 812, 813, 81, 532, 640,
	642, 644, 0, 660, 631, 652, 635, 0, 632, 0,
	626, 0, 665, -2, 0, 730, 0, 731, 0, 0,
	0, 0, 0, 769, 0, 0, 770, 0, 741, 824,
	0, 796, 0, 0, 744, 764, 0, 0, 765, 766,
	767, 768, 719, 0, 720, 0, 0, 0, 0, 0,
	726, 727, 728, 729, 0, 0, 546, 546, 546, 0,
	546, 546, 0, 546, 546, 546, 546, 0, 546, 546,
	546, 850, 0, 0, 841, 0, 0, 616, 858, 0,
	556, 587, 589, 0, 584, 597, 598, 600, 0, 602,
	0, 604, 605, 575, 562, 659, 563, 0, 0, 0,
	612, 572, 0, 0, 0, 824, 0, 616, 55, 56,
	0, 72, 73, 0, 0, 79, 866, 867, 868, 869,
	870, 318, 319, 0, 0, 383, 0, 222, 0, 0,
	336, 348, 344, 345, 348, 339, 349, 340, 0, 229,
	230, 231, 232, 233, 234, 309, 0, 0, 0, 313,
	0, 321, 323, 0, 235, 308, 0, 317, 317, 314,
	265, 266, 298, 271, 317, 275, 0, 276, 277, 278,
	279, 317, 0, 296, 0, 0, 252, 0, 376, 0,
	907, 80, 80, 0, 118, 119, 120, 0, 92, 93,
	0, 0, 0, 0, 0, 436, 60, 448, 449, 459,
	367, 368, 484, 466, 0, 653, 314, 0, 531, 0,
	395, 0, 1307, 348, 0, 412, 413, 423, 424, 425,
	426, 0, 0, 1307, 0, 0, 0, 424, 0, 0,
	0, 899, 900, 0, 0, 0, 335, 0, 0, 0,
	848, 847, 839, 32, 616, 0, 542, 802, 0, 633,
	0, 636, 700, 663, 537, 0, 0, 298, 298, 781,
	298, 302, 784, 298, 786, 298, 789, 0, 0, 0,
	0, 0, 0, 0, 793, 743, 799, 0, 0, 0,
	543, 824, 721, 722, 723, 724, 725, 546, 546, 704,
	547, 705, 706, 546, 708, 709, 546, 711, 712, 713,
	714, 546, 716, 717, 718, 48, 0, 850, 840, 852,
	854, 0, 0, 0, 0, 579, 824, 0, 0, 581,
	588, 0, 0, 582, 0, 583, 601, 603, 560, 0,
	0, 564, 0, 0, -2, 571, 0, 0, 0, 833,
	617, 54, 76, 77, 78, 381, 384, 0, 350, 298,
	353, 0, 337, 338, 0, 310, 311, 0, 320, 322,
	324, 299, 263, 264, 317, 272, 268, 315, 316, 280,
	314, 0, 314, 0, 303, 0, 363, 377, 0, 0,
	85, 0, 0, 99, 0, 95, 0, 0, 0, 434,
	465, 574, 930, 606, 81, 394, 0, 418, 0, 398,
	906, 346, 389, 399, 400, 405, 406, 407, 0, 0,
	402, 0, 418, 0, 415, 0, 0, 43, 0, 814,
	0, 81, 81, 701, 637, 0, 733, 778, 314, 782,
	783, 785, 787, 788, 790, 735, 734, 0, 0, 0,
	0, 0, 0, 0, 797, 0, 0, 0, 0, 702,
	703, 707, 710, 715, 0, 49, 0, 855, -2, 0,
	66, 0, 833, 859, 860, 585, 0, 590, 0, 577,
	0, 612, 569, 0, 0, 0, 0, 53, 326, 0,
	830, 0, 312, 269, 317, 297, 317, 0, 0, 378,
	0, 80, 0, 80, 100, 101, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 94, 96, 97, 98, 932,
	926, 0, 0, 397, 419, 0, 228, 0, 348, 347,
	414, 0, 896, 897, 0, 409, 418, 0, 0, 0,
	849, 820, 0, 616, 0, 533, 538, 779, 780, 0,
	0, 0, 0, 771, 742, 794, 0, 0, 544, 0,
	0, 853, 0, 844, 0, 580, 52, 0, 576, 0,
	565, 567, 612, 613, 614, 615, 325, 329, 0, 334,
	0, 351, 352, 0, 286, 287, 301, 304, 0, 86,
	0, 0, 102, 103, 104, 105, 107, 108, 0, 0,
	0, 886, 934, -2, 0, 0, 396, 420, 226, 0,
	906, 401, 408, 410, 0, 417, 0, 37, 0, 0,
	814, 81, 736, 738, 737, 739, 0, 0, 0, 760,
	761, 824, 0, 843, 0, 586, 578, 570, 330, 331,
	0, 333, 0, 327, 0, 80, 192, 193, 194, 195,
	196, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 207, 208, 209, 210, 211, 212, 213, 214, 215,
	0, 0, 0, 0, 109, 110, 111, 112, 575, 0,
	926, 0, 928, 0, 925, 0, 616, 0, 0, 416,
	0, 428, 0, 821, 822, 823, 815, 816, 818, 819,
	820, 534, 740, 0, 0, 0, 0, 851, -2, 332,
	0, 84, 328, 121, 90, 0, 0, 908, 0, 0,
	148, 149, 150, 910, 0, 190, 30, 0, 933, 0,
	931, 0, 0, 927, 814, 327, 0, 427, 0, 0,
	0, 38, 772, 0, 775, 545, 0, 80, 0, 0,
	0, 132, 0, 0, 0, 0, 0, 146, 0, 0,
	887, 935, 0, 0, 820, 403, 0, 429, 0, 817,
	773, 0, 0, 122, 123, 0, 0, 133, 0, 0,
	0, 0, 0, 0, 911, 113, 191, 929, 923, 35,
	327, 0, 0, 355, 80, 124, 125, 126, 127, 128,
	0, 130, 0, 0, 0, 142, 143, 144, 0, 151,
	153, 154, 155, 0, 157, 158, 147, 404, 0, 0,
	356, 357, 0, 89, 0, 0, 0, 0, 0, 0,
	139, 0, 145, 0, 156, 0, 774, 358, 0, 359,
	0, 0, 0, 0, 0, 134, 135, 0, 0, 0,
	140, 0, 152, 0, 0, 369, 371, 372, 0, 0,
	370, 129, 131, 0, 137, 0, 0, 430, 431, 373,
	374, 375, 0, 0, 0, 136, 0, 141, 138,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 89, 3, 3, 3, 117, 109, 3,
	68, 70, 114, 112, 69, 113, 127, 115, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 432,
	98, 97, 99, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 119, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 108, 3, 120,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 87, 88, 90, 91, 92, 93, 94, 95,
	96, 100, 101, 102, 103, 104, 105, 106, 107, 110,
	111, 116, 118, 121, 122, 123, 124, 125, 126, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:408
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:413
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:414
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:418
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 29:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:446
		{
			setParseTree(yylex, nil)
		}
	case 30:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:452
		{
			yyVAL.statement = &Load{Local: yyDollar[3].boolVal, Infile: yyDollar[4].str, Table: yyDollar[5].tableName, Partition: yyDollar[6].partitions, Charset: yyDollar[7].str, Fields: yyDollar[8].Fields, Lines: yyDollar[9].Lines, IgnoreNum: yyDollar[10].sqlVal, Columns: yyDollar[11].columns}
		}
	case 31:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:458
		{
			yyDollar[1].selStmt.SetOrderBy(yyDollar[2].orderBy)
			yyDollar[1].selStmt.SetLimit(yyDollar[3].limit)
			yyDollar[1].selStmt.SetLock(yyDollar[4].str)
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:465
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 33:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:471
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:478
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 35:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sql.y:482
		{
			yyVAL.selStmt = &Select{CommonTableExprs: yyDollar[1].tableExprs, Comments: Comments(yyDollar[3].bytes2), Cache: yyDollar[4].str, Distinct: yyDollar[5].str, Hints: yyDollar[7].str, SelectExprs: yyDollar[8].selectExprs, From: yyDollar[10].tableExprs, Where: NewWhere(WhereStr, yyDollar[11].expr), GroupBy: GroupBy(yyDollar[12].exprs), Having: NewWhere(HavingStr, yyDollar[13].expr)}
			if yyDollar[6].byt == 1 {
				yyVAL.selStmt.(*Select).CalcFoundRows = true
			}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:489
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt}
		}
	case 37:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:495
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[6].str, SelectExprs: yyDollar[7].selectExprs, From: TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
			if yyDollar[5].byt == 1 {
				yyVAL.selStmt.(*Select).CalcFoundRows = true
			}
		}
	case 38:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:502
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[6].str, SelectExprs: yyDollar[7].selectExprs, From: yyDollar[9].tableExprs, Where: NewWhere(WhereStr, yyDollar[10].expr), GroupBy: GroupBy(yyDollar[11].exprs), Having: NewWhere(HavingStr, yyDollar[12].expr)}
			if yyDollar[5].byt == 1 {
				yyVAL.selStmt.(*Select).CalcFoundRows = true
			}
		}
	case 39:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:511
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:517
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:521
		{
			yyVAL.tableExprs = append(yyDollar[1].tableExprs, yyDollar[3].tableExpr)
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:527
		{
			yyVAL.tableExpr = &CommonTableExpr{&AliasedTableExpr{Expr: yyDollar[3].simpleTableExpr, As: yyDollar[1].tableIdent}, nil}
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:531
		{
			yyVAL.tableExpr = &CommonTableExpr{&AliasedTableExpr{Expr: yyDollar[6].simpleTableExpr, As: yyDollar[1].tableIdent}, yyDollar[3].columns}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:537
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:541
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:547
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:551
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 48:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:557
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].assignExprs)
			yyVAL.statement = ins
		}
	case 49:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:569
		{
			cols := make(Columns, 0, len(yyDollar[7].assignExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].assignExprs))
			for _, updateList := range yyDollar[7].assignExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].assignExprs)}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:581
		{
			yyVAL.str = InsertStr
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:585
		{
			yyVAL.str = ReplaceStr
		}
	case 52:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:591
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].assignExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 53:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:597
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 54:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:601
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 55:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:605
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 56:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:609
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:614
		{
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:615
		{
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:619
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName.ToViewName()}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:623
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName.ToViewName())
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:629
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:633
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:639
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:643
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 65:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:648
		{
			yyVAL.partitions = nil
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:652
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:658
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setVarExprs}
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:662
		{
			for i := 0; i < len(yyDollar[4].setVarExprs); i++ {
				yyDollar[4].setVarExprs[i].Scope = SetScope_None
			}
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setVarExprs}
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:669
		{
			for i := 0; i < len(yyDollar[5].setVarExprs); i++ {
				yyDollar[5].setVarExprs[i].Scope = SetScope_Global
			}
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[5].setVarExprs}
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:676
		{
			for i := 0; i < len(yyDollar[5].setVarExprs); i++ {
				yyDollar[5].setVarExprs[i].Scope = SetScope_Session
			}
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[5].setVarExprs}
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:685
		{
			yyVAL.setVarExprs = SetVarExprs{yyDollar[1].setVarExpr}
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:689
		{
			yyVAL.setVarExprs = append(yyVAL.setVarExprs, yyDollar[3].setVarExpr)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:695
		{
			yyVAL.setVarExpr = &SetVarExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:699
		{
			yyVAL.setVarExpr = &SetVarExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:703
		{
			yyVAL.setVarExpr = &SetVarExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:709
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:713
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:717
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:721
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:726
		{
			yyVAL.int = yyPosition(yylex)
		}
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:731
		{
			yyVAL.int = yyOldPosition(yylex)
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:737
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			if len(yyDollar[1].ddl.TableSpec.Constraints) > 0 {
				yyDollar[1].ddl.ConstraintAction = AddStr
			}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:745
		{
			yyDollar[1].ddl.OptLike = &OptLike{LikeTable: yyDollar[3].tableName}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 84:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:750
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: yyDollar[4].colIdent, Using: yyDollar[5].colIdent, Type: yyDollar[2].str, Columns: yyDollar[9].indexColumns, Options: yyDollar[11].indexOptions}}
		}
	case 85:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:754
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[3].tableName.ToViewName(), ViewExpr: yyDollar[6].selStmt, SubStatementPositionStart: yyDollar[5].int, SubStatementPositionEnd: yyDollar[7].int - 1}
		}
	case 86:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:758
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[5].tableName.ToViewName(), ViewExpr: yyDollar[8].selStmt, SubStatementPositionStart: yyDollar[7].int, SubStatementPositionEnd: yyDollar[9].int - 1, OrReplace: true}
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:762
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes), IfNotExists: ne}
		}
	case 88:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:770
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes), IfNotExists: ne}
		}
	case 89:
		yyDollar = yyS[yypt-15 : yypt+1]
//line sql.y:778
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[8].tableName, TriggerSpec: &TriggerSpec{Name: string(yyDollar[4].bytes), Time: yyDollar[5].str, Event: yyDollar[6].str, Order: yyDollar[12].triggerOrder, Body: yyDollar[14].statement}, SubStatementPositionStart: yyDollar[13].int, SubStatementPositionEnd: yyDollar[15].int - 1}
		}
	case 90:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:782
		{
			yyVAL.statement = &DDL{Action: CreateStr, ProcedureSpec: &ProcedureSpec{Name: string(yyDollar[4].bytes), Definer: yyDollar[2].str, Params: yyDollar[6].procedureParams, Characteristics: yyDollar[8].characteristics, Body: yyDollar[10].statement}, SubStatementPositionStart: yyDollar[9].int, SubStatementPositionEnd: yyDollar[11].int - 1}
		}
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:787
		{
			yyVAL.procedureParams = nil
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:791
		{
			yyVAL.procedureParams = yyDollar[1].procedureParams
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:797
		{
			yyVAL.procedureParams = []ProcedureParam{yyDollar[1].procedureParam}
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:801
		{
			yyVAL.procedureParams = append(yyVAL.procedureParams, yyDollar[3].procedureParam)
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:807
		{
			yyVAL.procedureParam = ProcedureParam{Direction: ProcedureParamDirection_In, Name: string(yyDollar[1].bytes), Type: yyDollar[2].columnType}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:811
		{
			yyVAL.procedureParam = ProcedureParam{Direction: ProcedureParamDirection_In, Name: string(yyDollar[2].bytes), Type: yyDollar[3].columnType}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:815
		{
			yyVAL.procedureParam = ProcedureParam{Direction: ProcedureParamDirection_Inout, Name: string(yyDollar[2].bytes), Type: yyDollar[3].columnType}
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:819
		{
			yyVAL.procedureParam = ProcedureParam{Direction: ProcedureParamDirection_Out, Name: string(yyDollar[2].bytes), Type: yyDollar[3].columnType}
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:824
		{
			yyVAL.characteristics = nil
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:828
		{
			yyVAL.characteristics = yyDollar[1].characteristics
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:834
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:838
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[2].characteristic)
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:844
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_Comment, Comment: string(yyDollar[2].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:848
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_LanguageSql}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:852
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_NotDeterministic}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:856
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_Deterministic}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:860
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_ContainsSql}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:864
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_NoSql}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:868
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_ReadsSqlData}
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:872
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_ModifiesSqlData}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:876
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_SqlSecurityDefiner}
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:880
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_SqlSecurityInvoker}
		}
	case 113:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:886
		{
			yyVAL.statement = &BeginEndBlock{Statements: yyDollar[2].statements}
		}
	case 114:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:891
		{
			yyVAL.str = ""
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:895
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:901
		{
			yyVAL.str = BeforeStr
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:905
		{
			yyVAL.str = AfterStr
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:911
		{
			yyVAL.str = InsertStr
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:915
		{
			yyVAL.str = UpdateStr
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:919
		{
			yyVAL.str = DeleteStr
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:924
		{
			yyVAL.triggerOrder = nil
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:928
		{
			yyVAL.triggerOrder = &TriggerOrder{PrecedesOrFollows: FollowsStr, OtherTriggerName: string(yyDollar[2].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:932
		{
			yyVAL.triggerOrder = &TriggerOrder{PrecedesOrFollows: PrecedesStr, OtherTriggerName: string(yyDollar[2].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:938
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 129:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:948
		{
			yyVAL.statement = &BeginEndBlock{Statements: yyDollar[2].statements}
		}
	case 130:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:954
		{
			yyVAL.statement = &CaseStatement{Expr: yyDollar[2].expr, Cases: yyDollar[3].caseStatementCases}
		}
	case 131:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:958
		{
			yyVAL.statement = &CaseStatement{Expr: yyDollar[2].expr, Cases: yyDollar[3].caseStatementCases, Else: yyDollar[5].statements}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:964
		{
			yyVAL.caseStatementCases = []CaseStatementCase{yyDollar[1].caseStatementCase}
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:968
		{
			yyVAL.caseStatementCases = append(yyVAL.caseStatementCases, yyDollar[2].caseStatementCase)
		}
	case 134:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:974
		{
			yyVAL.caseStatementCase = CaseStatementCase{Case: yyDollar[2].expr, Statements: yyDollar[4].statements}
		}
	case 135:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:980
		{
			conds := []IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}
			yyVAL.statement = &IfStatement{Conditions: conds}
		}
	case 136:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:985
		{
			conds := []IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}
			yyVAL.statement = &IfStatement{Conditions: conds, Else: yyDollar[7].statements}
		}
	case 137:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:990
		{
			conds := yyDollar[6].ifStatementConditions
			conds = append([]IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}, conds...)
			yyVAL.statement = &IfStatement{Conditions: conds}
		}
	case 138:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:996
		{
			conds := yyDollar[6].ifStatementConditions
			conds = append([]IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}, conds...)
			yyVAL.statement = &IfStatement{Conditions: conds, Else: yyDollar[8].statements}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1004
		{
			yyVAL.ifStatementConditions = []IfStatementCondition{yyDollar[1].ifStatementCondition}
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1008
		{
			yyVAL.ifStatementConditions = append(yyVAL.ifStatementConditions, yyDollar[2].ifStatementCondition)
		}
	case 141:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1014
		{
			yyVAL.ifStatementCondition = IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}
		}
	case 142:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1020
		{
			yyVAL.statement = &Declare{Condition: &DeclareCondition{Name: string(yyDollar[2].bytes), SqlStateValue: string(yyDollar[5].bytes)}}
		}
	case 143:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1024
		{
			yyVAL.statement = &Declare{Condition: &DeclareCondition{Name: string(yyDollar[2].bytes), MysqlErrorCode: NewIntVal(yyDollar[5].bytes)}}
		}
	case 144:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1028
		{
			yyVAL.statement = &Declare{Cursor: &DeclareCursor{Name: string(yyDollar[2].bytes), SelectStmt: yyDollar[5].selStmt}}
		}
	case 145:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1032
		{
			yyVAL.statement = &Declare{Handler: &DeclareHandler{Action: yyDollar[2].declareHandlerAction, ConditionValues: yyDollar[5].declareHandlerConditions, Statement: yyDollar[6].statement}}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1036
		{
			yyVAL.statement = &Declare{Variables: &DeclareVariables{Names: yyDollar[2].colIdents, VarType: yyDollar[3].columnType}}
		}
	case 147:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1040
		{
			yyDollar[3].columnType.Default = yyDollar[5].expr
			yyVAL.statement = &Declare{Variables: &DeclareVariables{Names: yyDollar[2].colIdents, VarType: yyDollar[3].columnType}}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1047
		{
			yyVAL.declareHandlerAction = DeclareHandlerAction_Continue
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1051
		{
			yyVAL.declareHandlerAction = DeclareHandlerAction_Exit
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1055
		{
			yyVAL.declareHandlerAction = DeclareHandlerAction_Undo
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1061
		{
			yyVAL.declareHandlerConditions = []DeclareHandlerCondition{yyDollar[1].declareHandlerCondition}
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1065
		{
			yyVAL.declareHandlerConditions = append(yyVAL.declareHandlerConditions, yyDollar[3].declareHandlerCondition)
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1071
		{
			yyVAL.declareHandlerCondition = DeclareHandlerCondition{ValueType: DeclareHandlerCondition_MysqlErrorCode, MysqlErrorCode: NewIntVal(yyDollar[1].bytes)}
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1075
		{
			yyVAL.declareHandlerCondition = DeclareHandlerCondition{ValueType: DeclareHandlerCondition_SqlState, String: string(yyDollar[1].bytes)}
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1079
		{
			yyVAL.declareHandlerCondition = DeclareHandlerCondition{ValueType: DeclareHandlerCondition_SqlWarning}
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1083
		{
			yyVAL.declareHandlerCondition = DeclareHandlerCondition{ValueType: DeclareHandlerCondition_NotFound}
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1087
		{
			yyVAL.declareHandlerCondition = DeclareHandlerCondition{ValueType: DeclareHandlerCondition_SqlException}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1091
		{
			yyVAL.declareHandlerCondition = DeclareHandlerCondition{ValueType: DeclareHandlerCondition_ConditionName, String: string(yyDollar[1].bytes)}
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1097
		{
			yyVAL.statement = &Signal{SqlStateValue: string(yyDollar[2].bytes)}
		}
	case 160:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1101
		{
			yyVAL.statement = &Signal{SqlStateValue: string(yyDollar[2].bytes), Info: yyDollar[4].signalInfos}
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1105
		{
			yyVAL.statement = &Signal{ConditionName: string(yyDollar[2].bytes)}
		}
	case 162:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1109
		{
			yyVAL.statement = &Signal{ConditionName: string(yyDollar[2].bytes), Info: yyDollar[4].signalInfos}
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1115
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1119
		{
			yyVAL.bytes = yyDollar[3].bytes
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1125
		{
			yyVAL.signalInfos = []SignalInfo{yyDollar[1].signalInfo}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1129
		{
			yyVAL.signalInfos = append(yyVAL.signalInfos, yyDollar[3].signalInfo)
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1135
		{
			yyVAL.signalInfo = SignalInfo{ConditionItemName: yyDollar[1].signalConditionItemName, Value: yyDollar[3].expr.(*SQLVal)}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1141
		{
			yyVAL.signalConditionItemName = SignalConditionItemName_ClassOrigin
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1145
		{
			yyVAL.signalConditionItemName = SignalConditionItemName_SubclassOrigin
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1149
		{
			yyVAL.signalConditionItemName = SignalConditionItemName_MessageText
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1153
		{
			yyVAL.signalConditionItemName = SignalConditionItemName_MysqlErrno
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1157
		{
			yyVAL.signalConditionItemName = SignalConditionItemName_ConstraintCatalog
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1161
		{
			yyVAL.signalConditionItemName = SignalConditionItemName_ConstraintSchema
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1165
		{
			yyVAL.signalConditionItemName = SignalConditionItemName_ConstraintName
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1169
		{
			yyVAL.signalConditionItemName = SignalConditionItemName_CatalogName
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1173
		{
			yyVAL.signalConditionItemName = SignalConditionItemName_SchemaName
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1177
		{
			yyVAL.signalConditionItemName = SignalConditionItemName_TableName
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1181
		{
			yyVAL.signalConditionItemName = SignalConditionItemName_ColumnName
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1185
		{
			yyVAL.signalConditionItemName = SignalConditionItemName_CursorName
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1191
		{
			yyVAL.statement = &Resignal{}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1195
		{
			yyVAL.statement = &Resignal{Signal{SqlStateValue: string(yyDollar[2].bytes)}}
		}
	case 182:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1199
		{
			yyVAL.statement = &Resignal{Signal{SqlStateValue: string(yyDollar[2].bytes), Info: yyDollar[4].signalInfos}}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1203
		{
			yyVAL.statement = &Resignal{Signal{Info: yyDollar[3].signalInfos}}
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1207
		{
			yyVAL.statement = &Resignal{Signal{ConditionName: string(yyDollar[2].bytes)}}
		}
	case 185:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1211
		{
			yyVAL.statement = &Resignal{Signal{ConditionName: string(yyDollar[2].bytes), Info: yyDollar[4].signalInfos}}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1217
		{
			yyVAL.statement = &Call{FuncName: string(yyDollar[2].bytes), Params: yyDollar[3].exprs}
		}
	case 187:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1222
		{
			yyVAL.exprs = nil
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1226
		{
			yyVAL.exprs = nil
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1230
		{
			yyVAL.exprs = yyDollar[2].exprs
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1236
		{
			yyVAL.statements = Statements{yyDollar[1].statement}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1240
		{
			yyVAL.statements = append(yyVAL.statements, yyDollar[3].statement)
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1246
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 216:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1275
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName, IfNotExists: ne}
			setDDL(yylex, yyVAL.ddl)
		}
	case 217:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1286
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1293
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1298
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddConstraint(yyDollar[1].constraintDefinition)
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1303
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
			yyVAL.TableSpec.AddConstraint(yyDollar[2].constraintDefinition)
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1309
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 222:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1313
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
			yyVAL.TableSpec.AddConstraint(yyDollar[4].constraintDefinition)
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1318
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1322
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1326
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1332
		{
			if err := yyDollar[2].columnType.merge(yyDollar[3].columnType); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1342
		{
			if err := yyDollar[2].columnType.merge(yyDollar[3].columnType); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 228:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1351
		{
			yyVAL.columnType = ColumnType{}
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1355
		{
			opt := ColumnType{NotNull: yyDollar[2].boolVal, sawnull: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1364
		{
			opt := ColumnType{Default: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1373
		{
			opt := ColumnType{OnUpdate: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1382
		{
			opt := ColumnType{Autoincrement: yyDollar[2].boolVal, sawai: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1391
		{
			opt := ColumnType{KeyOpt: yyDollar[2].colKeyOpt}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1400
		{
			opt := ColumnType{Comment: yyDollar[2].sqlVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1411
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1422
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1427
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1433
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1437
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1441
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1445
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1449
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1453
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1457
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1461
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1465
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1471
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1477
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1483
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1489
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1495
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1501
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1507
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1513
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1521
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1525
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1529
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1533
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1537
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1543
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1547
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1551
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1555
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1559
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1563
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 269:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1567
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1571
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1575
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1579
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Length: yyDollar[4].sqlVal}
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1583
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1587
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1591
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1595
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1599
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1603
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1607
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1611
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1615
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1619
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1623
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1627
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1631
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1635
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 287:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1640
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1646
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1650
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1654
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1658
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1662
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1666
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1670
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1674
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1680
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[1].bytes))
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1685
		{
			yyVAL.strs = append(yyDollar[1].strs, string(yyDollar[3].bytes))
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1690
		{
			yyVAL.sqlVal = nil
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1694
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1699
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 301:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1703
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1711
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1715
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 304:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1721
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1729
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1733
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1738
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1742
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1749
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1753
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1759
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1765
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1771
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1776
		{
			yyVAL.str = ""
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1780
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1784
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1789
		{
			yyVAL.str = ""
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1793
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1797
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1803
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1807
		{
			yyVAL.colKeyOpt = colKey
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1811
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1815
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1821
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 325:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1827
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1831
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1836
		{
			yyVAL.indexOptions = nil
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1840
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1846
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1850
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1856
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1860
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1865
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1871
		{
			yyVAL.str = ""
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1875
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1881
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1885
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1889
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1893
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1897
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1903
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1907
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1911
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1917
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1921
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 346:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1926
		{
			yyVAL.str = ""
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1930
		{
			yyVAL.str = yyDollar[1].str
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1935
		{
			yyVAL.str = ""
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1939
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1945
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1949
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1955
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal, Order: yyDollar[3].str}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1961
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1965
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 355:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1971
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 356:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1975
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 357:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1979
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 358:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1983
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 359:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1987
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[12].ReferenceAction, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1993
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1997
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[2].constraintInfo}
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2001
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 363:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2007
		{
			yyVAL.constraintInfo = &CheckConstraintDefinition{Expr: yyDollar[3].expr, Enforced: yyDollar[5].boolean}
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2013
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2017
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2022
		{
			yyVAL.str = ""
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2026
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2030
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2036
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2042
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2048
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2052
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2056
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2060
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2064
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2069
		{
			yyVAL.boolean = true
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2073
		{
			yyVAL.boolean = true
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2077
		{
			yyVAL.boolean = false
		}
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2082
		{
			yyVAL.str = ""
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2086
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2090
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2098
		{
			yyVAL.str = yyDollar[1].str
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2102
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2106
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2112
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2116
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2120
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 388:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2125
		{
			yyVAL.str = ""
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2129
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 392:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2139
		{
			for i := 0; i < len(yyDollar[5].ddls); i++ {
				if yyDollar[5].ddls[i].Action == RenameStr {
					yyDollar[5].ddls[i].FromTables = append(TableNames{yyDollar[4].tableName}, yyDollar[5].ddls[i].FromTables...)
				} else {
					yyDollar[5].ddls[i].Table = yyDollar[4].tableName
				}
			}
			yyVAL.statement = &MultiAlterDDL{Table: yyDollar[4].tableName, Statements: yyDollar[5].ddls}
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2152
		{
			yyVAL.ddls = []*DDL{yyDollar[1].ddl}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2156
		{
			yyVAL.ddls = append(yyVAL.ddls, yyDollar[3].ddl)
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2162
		{
			yyVAL.ddl = &DDL{Action: AlterStr}
		}
	case 396:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2166
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddColumn(yyDollar[4].columnDefinition)
			ddl.Column = yyDollar[4].columnDefinition.Name
			yyVAL.ddl = ddl
		}
	case 397:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2173
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[4].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[3].columnDefinition)
			ddl.Column = yyDollar[3].columnDefinition.Name
			yyVAL.ddl = ddl
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2180
		{
			yyVAL.ddl = &DDL{Action: AlterStr}
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2184
		{
			yyVAL.ddl = &DDL{Action: AlterStr, ColumnAction: DropStr, Column: NewColIdent(string(yyDollar[3].bytes))}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2188
		{
			yyVAL.ddl = &DDL{Action: AlterStr}
		}
	case 401:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2192
		{
			yyVAL.ddl = &DDL{Action: AlterStr, ColumnAction: RenameStr, Column: NewColIdent(string(yyDollar[3].bytes)), ToColumn: NewColIdent(string(yyDollar[5].bytes))}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2196
		{
			// Change this to a rename statement
			yyVAL.ddl = &DDL{Action: RenameStr, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 403:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2201
		{
			yyVAL.ddl = &DDL{Action: AlterStr, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[3].str), Using: yyDollar[4].colIdent, Columns: yyDollar[6].indexColumns, Options: yyDollar[8].indexOptions}}
		}
	case 404:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:2205
		{
			yyVAL.ddl = &DDL{Action: AlterStr, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[5].str), Type: yyDollar[3].str, Using: yyDollar[6].colIdent, Columns: yyDollar[8].indexColumns, Options: yyDollar[10].indexOptions}}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2209
		{
			yyVAL.ddl = &DDL{Action: AlterStr, ConstraintAction: DropStr, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[3].bytes)}}}}
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2214
		{
			yyVAL.ddl = &DDL{Action: AlterStr, ConstraintAction: DropStr, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[3].bytes), Details: &CheckConstraintDefinition{}}}}}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2219
		{
			yyVAL.ddl = &DDL{Action: AlterStr, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[3].colIdent}}
		}
	case 408:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2223
		{
			yyVAL.ddl = &DDL{Action: AlterStr, IndexSpec: &IndexSpec{Action: RenameStr, FromName: yyDollar[3].colIdent, ToName: yyDollar[5].colIdent}}
		}
	case 409:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2227
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ModifyStr, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[4].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[3].columnDefinition)
			ddl.Column = yyDollar[3].columnDefinition.Name
			yyVAL.ddl = ddl
		}
	case 410:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2234
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ChangeStr, TableSpec: &TableSpec{}, Column: NewColIdent(string(yyDollar[3].bytes)), ColumnOrder: yyDollar[5].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[4].columnDefinition)
			yyVAL.ddl = ddl
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2240
		{
			yyVAL.ddl = &DDL{Action: AlterStr, PartitionSpec: yyDollar[1].partSpec}
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2244
		{
			ddl := &DDL{Action: AlterStr, ConstraintAction: AddStr, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddConstraint(yyDollar[2].constraintDefinition)
			yyVAL.ddl = ddl
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2250
		{
			ddl := &DDL{Action: AlterStr, ConstraintAction: AddStr, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddConstraint(yyDollar[2].constraintDefinition)
			yyVAL.ddl = ddl
		}
	case 414:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2256
		{
			yyVAL.ddl = &DDL{Action: AlterStr, ConstraintAction: DropStr, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[4].bytes), Details: &ForeignKeyDefinition{}}}}}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2261
		{
			yyVAL.ddl = &DDL{Action: AlterStr, AutoIncSpec: &AutoIncSpec{Value: yyDollar[3].expr}}
		}
	case 416:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2265
		{
			yyVAL.ddl = &DDL{Action: AlterStr, DefaultSpec: &DefaultSpec{Action: SetStr, Column: yyDollar[3].colIdent, Value: yyDollar[6].expr}}
		}
	case 417:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2269
		{
			yyVAL.ddl = &DDL{Action: AlterStr, DefaultSpec: &DefaultSpec{Action: DropStr, Column: yyDollar[3].colIdent}}
		}
	case 418:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2274
		{
			yyVAL.columnOrder = nil
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2278
		{
			yyVAL.columnOrder = &ColumnOrder{First: true}
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2282
		{
			yyVAL.columnOrder = &ColumnOrder{AfterColumn: NewColIdent(string(yyDollar[2].bytes))}
		}
	case 421:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2288
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 422:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2294
		{
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2296
		{
		}
	case 427:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2305
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2311
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2315
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 430:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2321
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 431:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2325
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2331
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2337
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 434:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2341
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 435:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2349
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 436:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2357
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[3].colIdent}}
		}
	case 437:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2361
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromViews: yyDollar[4].tableNames, IfExists: exists}
		}
	case 438:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2369
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes), IfExists: exists}
		}
	case 439:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2377
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes), IfExists: exists}
		}
	case 440:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2385
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, TriggerSpec: &TriggerSpec{Name: string(yyDollar[4].bytes)}, IfExists: exists}
		}
	case 441:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2393
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, ProcedureSpec: &ProcedureSpec{Name: string(yyDollar[4].bytes)}, IfExists: exists}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2403
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2407
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2412
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 445:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2418
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 446:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2423
		{
			yyVAL.statement = &Show{Type: CharsetStr, Filter: yyDollar[4].showFilter}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2427
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Filter: yyDollar[3].showFilter}
		}
	case 448:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2431
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 449:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2435
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 450:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2440
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 451:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2444
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 452:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2448
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 453:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2452
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 454:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2456
		{
			yyVAL.statement = &Show{Type: CreateTriggerStr, Table: yyDollar[4].tableName}
		}
	case 455:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2460
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2464
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2468
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2472
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 459:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2476
		{
			yyVAL.statement = &Show{Type: IndexStr, Table: yyDollar[4].tableName, Database: yyDollar[5].str, ShowIndexFilterOpt: yyDollar[6].expr}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2480
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2484
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Filter: yyDollar[4].showFilter}
		}
	case 462:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2488
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Filter: yyDollar[4].showFilter}
		}
	case 463:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2492
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 464:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2496
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Database: yyDollar[4].str, Filter: yyDollar[5].showFilter}
		}
	case 465:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2500
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 466:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2505
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[6].showFilter, AsOf: yyDollar[5].expr}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 467:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2515
		{
			yyVAL.statement = &Show{Type: string(yyDollar[3].bytes), ShowTablesOpt: &ShowTablesOpt{DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}}
		}
	case 468:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2519
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2523
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2527
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2533
		{
			// Cannot dereference $3 directly, or else the parser stackcannot be pooled. See yyParsePooled
			cmp := yyDollar[3].expr.(*ComparisonExpr)
			cmp.Left = &ColName{Name: NewColIdent("collation")}
			var ex Expr = cmp
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &ex}
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2541
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2551
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2557
		{
			yyVAL.expr = &ComparisonExpr{Operator: LikeStr, Right: yyDollar[2].expr, Escape: yyDollar[3].expr}
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2563
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2567
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 477:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2573
		{
			yyVAL.str = ""
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2577
		{
			yyVAL.str = "full "
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2583
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2587
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 481:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2593
		{
			yyVAL.str = ""
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2597
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2601
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 484:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2607
		{
			yyVAL.showFilter = nil
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2611
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2615
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 487:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2621
		{
			yyVAL.str = ""
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2625
		{
			yyVAL.str = SessionStr
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2629
		{
			yyVAL.str = GlobalStr
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2635
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2639
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2645
		{
			yyVAL.statement = &Begin{}
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2649
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2655
		{
			yyVAL.statement = &Begin{}
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2661
		{
			yyVAL.statement = &Commit{}
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2667
		{
			yyVAL.statement = &Rollback{}
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2672
		{
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2673
		{
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2677
		{
			yyVAL.statement = &Explain{ExplainFormat: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2681
		{
			yyVAL.statement = &Explain{Analyze: true, ExplainFormat: TreeStr, Statement: yyDollar[3].selStmt}
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2687
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 505:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2695
		{
			yyVAL.str = ""
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2699
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2710
		{
			yyVAL.statement = &Show{Type: "columns", OnTable: yyDollar[2].tableName}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2714
		{
			yyVAL.statement = &OtherRead{}
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2720
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2724
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2728
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2732
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2738
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2742
		{
			setAllowComments(yylex, true)
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2746
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 518:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2752
		{
			yyVAL.bytes2 = nil
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2756
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2762
		{
			yyVAL.str = UnionStr
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2766
		{
			yyVAL.str = UnionAllStr
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2770
		{
			yyVAL.str = UnionDistinctStr
		}
	case 523:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2775
		{
			yyVAL.byt = 0
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2779
		{
			yyVAL.byt = 1
		}
	case 525:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2784
		{
			yyVAL.str = ""
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2788
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2792
		{
			yyVAL.str = SQLCacheStr
		}
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2797
		{
			yyVAL.str = ""
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2801
		{
			yyVAL.str = ""
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2805
		{
			yyVAL.str = DistinctStr
		}
	case 531:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2810
		{
			yyVAL.str = ""
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2814
		{
			yyVAL.str = StraightJoinHint
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2820
		{
			if ae, ok := yyDollar[2].selectExpr.(*AliasedExpr); ok {
				ae.StartParsePos = yyDollar[1].int
				ae.EndParsePos = yyDollar[3].int - 1
			}
			yyVAL.selectExprs = SelectExprs{yyDollar[2].selectExpr}
		}
	case 534:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2828
		{
			if ae, ok := yyDollar[4].selectExpr.(*AliasedExpr); ok {
				ae.StartParsePos = yyDollar[3].int
				ae.EndParsePos = yyDollar[5].int - 1
			}
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[4].selectExpr)
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2839
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2843
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr}
		}
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2847
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 538:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2851
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2857
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2861
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2865
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 542:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2869
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2876
		{
			yyVAL.over = &Over{WindowName: yyDollar[2].colIdent}
		}
	case 544:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2880
		{
			yyVAL.over = &Over{OrderBy: yyDollar[3].orderBy}
		}
	case 545:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2884
		{
			yyVAL.over = &Over{PartitionBy: yyDollar[5].exprs, OrderBy: yyDollar[6].orderBy}
		}
	case 546:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2889
		{
			yyVAL.over = nil
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2893
		{
			yyVAL.over = yyDollar[1].over
		}
	case 548:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2898
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2902
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2906
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2912
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2916
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2920
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2924
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2930
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2934
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2944
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 560:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2948
		{
			switch n := yyDollar[1].simpleTableExpr.(type) {
			case *Subquery:
				n.Columns = yyDollar[4].columns
			case *ValuesStatement:
				n.Columns = yyDollar[4].columns
			}
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].simpleTableExpr, As: yyDollar[3].tableIdent}
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2958
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2964
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2970
		{
			yyVAL.simpleTableExpr = &ValuesStatement{Rows: yyDollar[2].values}
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2976
		{
			yyVAL.values = Values{yyDollar[2].valTuple}
		}
	case 565:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2980
		{
			yyVAL.values = append(yyVAL.values, yyDollar[4].valTuple)
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2986
		{
			yyVAL.aliasedTableName = yyDollar[2].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
		}
	case 567:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2991
		{
			yyVAL.aliasedTableName = yyDollar[6].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
			yyVAL.aliasedTableName.Partitions = yyDollar[4].partitions
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3002
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Hints: yyDollar[1].indexHints}
		}
	case 569:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3006
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, Hints: yyDollar[4].indexHints}
		}
	case 570:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3010
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, As: yyDollar[5].tableIdent, Hints: yyDollar[6].indexHints}
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3014
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3018
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[1].tableIdent, Hints: yyDollar[2].indexHints}
		}
	case 573:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3029
		{
			yyVAL.expr = nil
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3033
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 575:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3038
		{
			yyVAL.columns = nil
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3042
		{
			yyVAL.columns = yyDollar[2].columns
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3048
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3052
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3058
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3062
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 581:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3075
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 582:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3079
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 583:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3083
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3087
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3093
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 586:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3095
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 587:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3099
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3101
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 589:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3105
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3107
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 591:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3110
		{
			yyVAL.empty = struct{}{}
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3112
		{
			yyVAL.empty = struct{}{}
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3117
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3121
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3127
		{
			yyVAL.str = JoinStr
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3131
		{
			yyVAL.str = JoinStr
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3135
		{
			yyVAL.str = JoinStr
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3141
		{
			yyVAL.str = StraightJoinStr
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3147
		{
			yyVAL.str = LeftJoinStr
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3151
		{
			yyVAL.str = LeftJoinStr
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3155
		{
			yyVAL.str = RightJoinStr
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3159
		{
			yyVAL.str = RightJoinStr
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3165
		{
			yyVAL.str = NaturalJoinStr
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3169
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3179
		{
			yyVAL.tableName = yyDollar[3].tableName
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3185
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3189
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3195
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3199
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3205
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 612:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3210
		{
			yyVAL.indexHints = nil
		}
	case 613:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3214
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 614:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3218
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 615:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3222
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 616:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3227
		{
			yyVAL.expr = nil
		}
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3231
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3237
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3241
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3245
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3249
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3253
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3257
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3261
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 625:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3267
		{
			yyVAL.str = ""
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3271
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3277
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3281
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3287
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3291
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 631:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3295
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 632:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3299
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 633:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3303
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3307
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 635:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3311
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 636:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3315
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 637:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3319
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3323
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3329
		{
			yyVAL.str = IsNullStr
		}
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3333
		{
			yyVAL.str = IsNotNullStr
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3337
		{
			yyVAL.str = IsTrueStr
		}
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3341
		{
			yyVAL.str = IsNotTrueStr
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3345
		{
			yyVAL.str = IsFalseStr
		}
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3349
		{
			yyVAL.str = IsNotFalseStr
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3355
		{
			yyVAL.str = EqualStr
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3359
		{
			yyVAL.str = LessThanStr
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3363
		{
			yyVAL.str = GreaterThanStr
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3367
		{
			yyVAL.str = LessEqualStr
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3371
		{
			yyVAL.str = GreaterEqualStr
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3375
		{
			yyVAL.str = NotEqualStr
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3379
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 652:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3384
		{
			yyVAL.expr = nil
		}
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3388
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3394
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3398
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3402
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3408
		{
			yyVAL.subquery = &Subquery{Select: yyDollar[2].selStmt}
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3414
		{
			yyVAL.simpleTableExpr = yyDollar[1].subquery
		}
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3418
		{
			yyVAL.simpleTableExpr = yyDollar[2].simpleTableExpr
		}
	case 660:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3424
		{
			yyVAL.selectExprs = nil
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3431
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3435
		{
			yyVAL.selectExprs = append(yyDollar[1].selectExprs, yyDollar[3].selectExpr)
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3441
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 665:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3445
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3451
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3455
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3459
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3463
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3467
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 671:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3471
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 672:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3475
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3479
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 674:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3483
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 675:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3487
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3491
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3495
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 678:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3499
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 679:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3503
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3507
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3511
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 682:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3515
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3519
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 684:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3523
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3527
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 686:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3531
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 687:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3535
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3539
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 689:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3543
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 690:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3551
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 691:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3565
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 692:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3569
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 693:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3573
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 700:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3593
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: yyDollar[3].str == DistinctStr, Exprs: yyDollar[4].selectExprs}
		}
	case 701:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3597
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 702:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3607
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 703:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3611
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 704:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3615
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 705:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3619
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 706:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3623
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 707:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3627
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 708:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3631
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 709:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3635
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 710:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3639
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 711:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3643
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 712:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3647
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 713:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3651
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 714:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3655
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 715:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3659
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 716:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3663
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 717:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3667
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 718:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3671
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 719:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3680
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 720:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3684
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 721:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3688
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: SelectExprs{yyDollar[3].selectExpr}, Over: yyDollar[5].over}
		}
	case 722:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3692
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 723:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3696
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: SelectExprs{yyDollar[3].selectExpr}, Over: yyDollar[5].over}
		}
	case 724:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3700
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 725:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3704
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 726:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3708
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 727:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3712
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 728:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3716
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 729:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3720
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 730:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3731
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 731:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3735
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 732:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3739
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 733:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3743
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 734:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3747
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 735:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3751
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 736:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3755
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 737:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3759
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 738:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3763
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 739:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3767
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 740:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3771
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 741:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3775
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 742:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3779
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 743:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3783
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 744:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3787
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 745:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3797
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 746:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3801
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 747:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3805
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 748:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3810
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 749:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3815
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 750:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3820
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 751:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3826
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 752:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3831
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 753:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3835
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 754:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3840
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Fsp: yyDollar[2].expr}
		}
	case 755:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3844
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Fsp: yyDollar[2].expr}
		}
	case 756:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3848
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Fsp: yyDollar[2].expr}
		}
	case 757:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3853
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Fsp: yyDollar[2].expr}
		}
	case 758:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3858
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Fsp: yyDollar[2].expr}
		}
	case 759:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3863
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Fsp: yyDollar[2].expr}
		}
	case 760:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3867
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 761:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3871
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 764:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3882
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 765:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3892
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 766:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3896
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 767:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3900
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 768:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3904
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 769:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3908
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 770:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3912
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 771:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3918
		{
			yyVAL.str = ""
		}
	case 772:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3922
		{
			yyVAL.str = BooleanModeStr
		}
	case 773:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3926
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 774:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3930
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 775:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3934
		{
			yyVAL.str = QueryExpansionStr
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3940
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3944
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 778:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3950
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 779:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3954
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 780:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3958
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3962
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 782:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3966
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 783:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3970
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3976
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 785:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3980
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3984
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 787:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3988
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 788:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3992
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3996
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 790:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4000
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 791:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4005
		{
			yyVAL.expr = nil
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4009
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 793:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4014
		{
			yyVAL.str = string("")
		}
	case 794:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4018
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4024
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 796:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4028
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 797:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4034
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 798:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4039
		{
			yyVAL.expr = nil
		}
	case 799:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4043
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4049
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 801:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4053
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 802:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4057
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4063
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4067
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4071
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4075
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4079
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4083
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4087
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4091
		{
			yyVAL.expr = &NullVal{}
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4097
		{
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 812:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4101
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 813:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4105
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 814:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4110
		{
			yyVAL.exprs = nil
		}
	case 815:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4114
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4120
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 817:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4124
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4130
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4134
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 820:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4139
		{
			yyVAL.expr = nil
		}
	case 821:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4143
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4149
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4153
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 824:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4158
		{
			yyVAL.orderBy = nil
		}
	case 825:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4162
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4168
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 827:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4172
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 828:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4178
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 829:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4182
		{
			yyVAL.order = &Order{Expr: &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}, Direction: yyDollar[2].str}
		}
	case 830:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4187
		{
			yyVAL.str = AscScr
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4191
		{
			yyVAL.str = AscScr
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4195
		{
			yyVAL.str = DescScr
		}
	case 833:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4200
		{
			yyVAL.limit = nil
		}
	case 834:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4204
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 835:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4208
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 836:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4212
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 837:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4217
		{
			yyVAL.str = ""
		}
	case 838:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4221
		{
			yyVAL.str = ForUpdateStr
		}
	case 839:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4225
		{
			yyVAL.str = ShareModeStr
		}
	case 840:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4238
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4242
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 842:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4246
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 843:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4251
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 844:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4255
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 845:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:4259
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4266
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 847:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4270
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 848:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4274
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 849:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4278
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 850:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4283
		{
			yyVAL.assignExprs = nil
		}
	case 851:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4287
		{
			yyVAL.assignExprs = yyDollar[5].assignExprs
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4293
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 853:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4297
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4303
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 855:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4307
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 856:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4313
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4319
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4329
		{
			yyVAL.assignExprs = AssignmentExprs{yyDollar[1].assignExpr}
		}
	case 859:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4333
		{
			yyVAL.assignExprs = append(yyDollar[1].assignExprs, yyDollar[3].assignExpr)
		}
	case 860:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4339
		{
			yyVAL.assignExpr = &AssignmentExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4345
		{
			yyVAL.setVarExprs = SetVarExprs{yyDollar[1].setVarExpr}
		}
	case 862:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4349
		{
			yyVAL.setVarExprs = append(yyDollar[1].setVarExprs, yyDollar[3].setVarExpr)
		}
	case 863:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4355
		{
			colName, scope, err := VarScopeForColName(yyDollar[1].colName)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.setVarExpr = &SetVarExpr{Name: colName, Expr: NewStrVal(yyDollar[3].bytes), Scope: scope}
		}
	case 864:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4364
		{
			colName, scope, err := VarScopeForColName(yyDollar[1].colName)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.setVarExpr = &SetVarExpr{Name: colName, Expr: NewStrVal(yyDollar[3].bytes), Scope: scope}
		}
	case 865:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4373
		{
			colName, scope, err := VarScopeForColName(yyDollar[1].colName)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.setVarExpr = &SetVarExpr{Name: colName, Expr: yyDollar[3].expr, Scope: scope}
		}
	case 866:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4382
		{
			_, scope, err := VarScopeForColName(yyDollar[2].colName)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			} else if scope != SetScope_None {
				yylex.Error(fmt.Sprintf("invalid system variable name `%s`", yyDollar[2].colName.Name.val))
				return 1
			}
			yyVAL.setVarExpr = &SetVarExpr{Name: yyDollar[2].colName, Expr: yyDollar[4].expr, Scope: SetScope_Global}
		}
	case 867:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4394
		{
			_, scope, err := VarScopeForColName(yyDollar[2].colName)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			} else if scope != SetScope_None {
				yylex.Error(fmt.Sprintf("invalid system variable name `%s`", yyDollar[2].colName.Name.val))
				return 1
			}
			yyVAL.setVarExpr = &SetVarExpr{Name: yyDollar[2].colName, Expr: yyDollar[4].expr, Scope: SetScope_Session}
		}
	case 868:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4406
		{
			_, scope, err := VarScopeForColName(yyDollar[2].colName)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			} else if scope != SetScope_None {
				yylex.Error(fmt.Sprintf("invalid system variable name `%s`", yyDollar[2].colName.Name.val))
				return 1
			}
			yyVAL.setVarExpr = &SetVarExpr{Name: yyDollar[2].colName, Expr: yyDollar[4].expr, Scope: SetScope_Session}
		}
	case 869:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4418
		{
			_, scope, err := VarScopeForColName(yyDollar[2].colName)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			} else if scope != SetScope_None {
				yylex.Error(fmt.Sprintf("invalid system variable name `%s`", yyDollar[2].colName.Name.val))
				return 1
			}
			yyVAL.setVarExpr = &SetVarExpr{Name: yyDollar[2].colName, Expr: yyDollar[4].expr, Scope: SetScope_Persist}
		}
	case 870:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4430
		{
			_, scope, err := VarScopeForColName(yyDollar[2].colName)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			} else if scope != SetScope_None {
				yylex.Error(fmt.Sprintf("invalid system variable name `%s`", yyDollar[2].colName.Name.val))
				return 1
			}
			yyVAL.setVarExpr = &SetVarExpr{Name: yyDollar[2].colName, Expr: yyDollar[4].expr, Scope: SetScope_PersistOnly}
		}
	case 871:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4442
		{
			yyVAL.setVarExpr = &SetVarExpr{Name: NewColName(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr, Scope: SetScope_Session}
		}
	case 873:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4449
		{
			yyVAL.bytes = []byte("charset")
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4456
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4460
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4464
		{
			yyVAL.expr = &Default{}
		}
	case 880:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4473
		{
			yyVAL.byt = 0
		}
	case 881:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4475
		{
			yyVAL.byt = 1
		}
	case 882:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4478
		{
			yyVAL.byt = 0
		}
	case 883:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4480
		{
			yyVAL.byt = 1
		}
	case 884:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4483
		{
			yyVAL.str = ""
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4485
		{
			yyVAL.str = IgnoreStr
		}
	case 886:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4488
		{
			yyVAL.sqlVal = nil
		}
	case 887:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4490
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4494
		{
			yyVAL.empty = struct{}{}
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4496
		{
			yyVAL.empty = struct{}{}
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4498
		{
			yyVAL.empty = struct{}{}
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4500
		{
			yyVAL.empty = struct{}{}
		}
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4502
		{
			yyVAL.empty = struct{}{}
		}
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4504
		{
			yyVAL.empty = struct{}{}
		}
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4506
		{
			yyVAL.empty = struct{}{}
		}
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4508
		{
			yyVAL.empty = struct{}{}
		}
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4512
		{
			yyVAL.empty = struct{}{}
		}
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4514
		{
			yyVAL.empty = struct{}{}
		}
	case 898:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4517
		{
			yyVAL.empty = struct{}{}
		}
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4519
		{
			yyVAL.empty = struct{}{}
		}
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4521
		{
			yyVAL.empty = struct{}{}
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4525
		{
			yyVAL.str = UniqueStr
		}
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4527
		{
			yyVAL.str = FulltextStr
		}
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4529
		{
			yyVAL.str = SpatialStr
		}
	case 904:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4532
		{
			yyVAL.str = ""
		}
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4534
		{
			yyVAL.str = yyDollar[1].str
		}
	case 906:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4537
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 907:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4539
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4543
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4547
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4553
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 911:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4557
		{
			yyVAL.colIdents = append(yyVAL.colIdents, yyDollar[3].colIdent)
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4564
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4570
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4574
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4581
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 918:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4586
		{
			yyVAL.str = string("")
		}
	case 919:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4588
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 920:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4591
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4593
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 922:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4596
		{
			yyVAL.EnclosedBy = nil
		}
	case 923:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4600
		{
			yyVAL.EnclosedBy = &EnclosedBy{Optionally: yyDollar[1].boolVal, Delim: NewStrVal(yyDollar[4].bytes)}
		}
	case 924:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4605
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4609
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 926:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4614
		{
			yyVAL.sqlVal = nil
		}
	case 927:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4618
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[3].bytes)
		}
	case 928:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4623
		{
			yyVAL.sqlVal = nil
		}
	case 929:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4627
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[3].bytes)
		}
	case 930:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4632
		{
			yyVAL.Fields = nil
		}
	case 931:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4636
		{
			yyVAL.Fields = &Fields{TerminatedBy: yyDollar[2].sqlVal, EnclosedBy: yyDollar[3].EnclosedBy, EscapedBy: yyDollar[4].sqlVal}
		}
	case 932:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4641
		{
			yyVAL.Lines = nil
		}
	case 933:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4645
		{
			yyVAL.Lines = &Lines{StartingBy: yyDollar[2].sqlVal, TerminatedBy: yyDollar[3].sqlVal}
		}
	case 934:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4650
		{
			yyVAL.sqlVal = nil
		}
	case 935:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4654
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[3].bytes)
		}
	case 1305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:5053
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:5062
		{
			decNesting(yylex)
		}
	case 1307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:5067
		{
			skipToEnd(yylex)
		}
	case 1308:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:5072
		{
			skipToEnd(yylex)
		}
	case 1309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:5076
		{
			skipToEnd(yylex)
		}
	case 1310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:5080
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
