// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const VALUES = 57376
const LAST_INSERT_ID = 57377
const NEXT = 57378
const VALUE = 57379
const SHARE = 57380
const MODE = 57381
const SQL_NO_CACHE = 57382
const SQL_CACHE = 57383
const JOIN = 57384
const STRAIGHT_JOIN = 57385
const LEFT = 57386
const RIGHT = 57387
const INNER = 57388
const OUTER = 57389
const CROSS = 57390
const NATURAL = 57391
const USE = 57392
const FORCE = 57393
const ON = 57394
const USING = 57395
const ID = 57396
const HEX = 57397
const STRING = 57398
const INTEGRAL = 57399
const FLOAT = 57400
const HEXNUM = 57401
const VALUE_ARG = 57402
const LIST_ARG = 57403
const COMMENT = 57404
const COMMENT_KEYWORD = 57405
const BIT_LITERAL = 57406
const NULL = 57407
const TRUE = 57408
const FALSE = 57409
const OFF = 57410
const OR = 57411
const AND = 57412
const NOT = 57413
const BETWEEN = 57414
const CASE = 57415
const WHEN = 57416
const THEN = 57417
const ELSE = 57418
const END = 57419
const LE = 57420
const GE = 57421
const NE = 57422
const NULL_SAFE_EQUAL = 57423
const IS = 57424
const LIKE = 57425
const REGEXP = 57426
const IN = 57427
const SHIFT_LEFT = 57428
const SHIFT_RIGHT = 57429
const DIV = 57430
const MOD = 57431
const UNARY = 57432
const COLLATE = 57433
const BINARY = 57434
const UNDERSCORE_BINARY = 57435
const UNDERSCORE_UTF8MB4 = 57436
const INTERVAL = 57437
const JSON_EXTRACT_OP = 57438
const JSON_UNQUOTE_EXTRACT_OP = 57439
const CREATE = 57440
const ALTER = 57441
const DROP = 57442
const RENAME = 57443
const ANALYZE = 57444
const ADD = 57445
const FLUSH = 57446
const SCHEMA = 57447
const TABLE = 57448
const INDEX = 57449
const VIEW = 57450
const TO = 57451
const IGNORE = 57452
const IF = 57453
const UNIQUE = 57454
const PRIMARY = 57455
const COLUMN = 57456
const SPATIAL = 57457
const FULLTEXT = 57458
const KEY_BLOCK_SIZE = 57459
const ACTION = 57460
const CASCADE = 57461
const CONSTRAINT = 57462
const FOREIGN = 57463
const NO = 57464
const REFERENCES = 57465
const RESTRICT = 57466
const SHOW = 57467
const DESCRIBE = 57468
const EXPLAIN = 57469
const DATE = 57470
const ESCAPE = 57471
const REPAIR = 57472
const OPTIMIZE = 57473
const TRUNCATE = 57474
const MAXVALUE = 57475
const PARTITION = 57476
const REORGANIZE = 57477
const LESS = 57478
const THAN = 57479
const PROCEDURE = 57480
const TRIGGER = 57481
const VINDEX = 57482
const VINDEXES = 57483
const STATUS = 57484
const VARIABLES = 57485
const WARNINGS = 57486
const BEGIN = 57487
const START = 57488
const TRANSACTION = 57489
const COMMIT = 57490
const ROLLBACK = 57491
const BIT = 57492
const TINYINT = 57493
const SMALLINT = 57494
const MEDIUMINT = 57495
const INT = 57496
const INTEGER = 57497
const BIGINT = 57498
const INTNUM = 57499
const UUID = 57500
const REAL = 57501
const DOUBLE = 57502
const FLOAT_TYPE = 57503
const DECIMAL = 57504
const NUMERIC = 57505
const TIME = 57506
const TIMESTAMP = 57507
const DATETIME = 57508
const YEAR = 57509
const CHAR = 57510
const VARCHAR = 57511
const BOOL = 57512
const CHARACTER = 57513
const VARBINARY = 57514
const NCHAR = 57515
const TEXT = 57516
const TINYTEXT = 57517
const MEDIUMTEXT = 57518
const LONGTEXT = 57519
const BLOB = 57520
const TINYBLOB = 57521
const MEDIUMBLOB = 57522
const LONGBLOB = 57523
const JSON = 57524
const ENUM = 57525
const GEOMETRY = 57526
const POINT = 57527
const LINESTRING = 57528
const POLYGON = 57529
const GEOMETRYCOLLECTION = 57530
const MULTIPOINT = 57531
const MULTILINESTRING = 57532
const MULTIPOLYGON = 57533
const NULLX = 57534
const AUTO_INCREMENT = 57535
const APPROXNUM = 57536
const SIGNED = 57537
const UNSIGNED = 57538
const ZEROFILL = 57539
const COLLATION = 57540
const DATABASES = 57541
const SCHEMAS = 57542
const TABLES = 57543
const VITESS_KEYSPACES = 57544
const VITESS_SHARDS = 57545
const VITESS_TABLETS = 57546
const VSCHEMA = 57547
const VSCHEMA_TABLES = 57548
const VITESS_TARGET = 57549
const FULL = 57550
const PROCESSLIST = 57551
const COLUMNS = 57552
const FIELDS = 57553
const ENGINES = 57554
const PLUGINS = 57555
const NAMES = 57556
const CHARSET = 57557
const GLOBAL = 57558
const SESSION = 57559
const ISOLATION = 57560
const LEVEL = 57561
const READ = 57562
const WRITE = 57563
const ONLY = 57564
const REPEATABLE = 57565
const COMMITTED = 57566
const UNCOMMITTED = 57567
const SERIALIZABLE = 57568
const CURRENT_TIMESTAMP = 57569
const DATABASE = 57570
const CURRENT_DATE = 57571
const CURRENT_TIME = 57572
const LOCALTIME = 57573
const LOCALTIMESTAMP = 57574
const UTC_DATE = 57575
const UTC_TIME = 57576
const UTC_TIMESTAMP = 57577
const REPLACE = 57578
const CONVERT = 57579
const CAST = 57580
const SUBSTR = 57581
const SUBSTRING = 57582
const GROUP_CONCAT = 57583
const SEPARATOR = 57584
const TIMESTAMPADD = 57585
const TIMESTAMPDIFF = 57586
const MATCH = 57587
const AGAINST = 57588
const BOOLEAN = 57589
const LANGUAGE = 57590
const WITH = 57591
const QUERY = 57592
const EXPANSION = 57593
const UNUSED = 57594

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"UUID",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA",
	"VSCHEMA_TABLES",
	"VITESS_TARGET",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 29,
	-2, 4,
	-1, 37,
	159, 303,
	160, 303,
	-2, 293,
	-1, 272,
	112, 645,
	-2, 641,
	-1, 273,
	112, 646,
	-2, 642,
	-1, 338,
	82, 821,
	-2, 60,
	-1, 339,
	82, 777,
	-2, 61,
	-1, 344,
	82, 756,
	-2, 605,
	-1, 346,
	82, 798,
	-2, 607,
	-1, 617,
	1, 356,
	5, 356,
	12, 356,
	13, 356,
	14, 356,
	15, 356,
	17, 356,
	19, 356,
	30, 356,
	31, 356,
	42, 356,
	43, 356,
	44, 356,
	45, 356,
	46, 356,
	48, 356,
	49, 356,
	52, 356,
	53, 356,
	55, 356,
	56, 356,
	270, 356,
	-2, 374,
	-1, 620,
	53, 43,
	55, 43,
	-2, 45,
	-1, 765,
	112, 648,
	-2, 644,
	-1, 1000,
	5, 30,
	-2, 440,
	-1, 1030,
	5, 29,
	-2, 579,
	-1, 1277,
	5, 30,
	-2, 580,
	-1, 1331,
	5, 29,
	-2, 582,
	-1, 1402,
	5, 30,
	-2, 583,
}

const yyPrivate = 57344

const yyLast = 12874

var yyAct = [...]int{

	273, 1435, 1390, 1127, 1425, 1033, 874, 1240, 277, 1297,
	573, 1343, 1312, 1051, 1178, 1212, 851, 445, 303, 251,
	1034, 1175, 1076, 290, 57, 1185, 929, 965, 1179, 343,
	1057, 873, 81, 1191, 883, 992, 211, 1150, 797, 211,
	730, 790, 1096, 1106, 1105, 211, 304, 51, 800, 241,
	849, 630, 887, 853, 838, 614, 572, 3, 818, 915,
	767, 505, 511, 831, 613, 925, 629, 211, 81, 337,
	799, 517, 211, 275, 211, 525, 974, 260, 332, 334,
	587, 56, 870, 1428, 1412, 1423, 1400, 1420, 476, 1241,
	1411, 588, 1399, 1167, 243, 244, 245, 246, 51, 1269,
	249, 450, 478, 631, 1064, 632, 256, 1063, 250, 1206,
	1065, 864, 264, 1368, 538, 537, 547, 548, 540, 541,
	542, 543, 544, 545, 546, 539, 499, 315, 549, 321,
	322, 319, 320, 318, 317, 316, 61, 1207, 1208, 948,
	865, 866, 248, 323, 324, 247, 1087, 206, 202, 203,
	204, 495, 198, 947, 200, 1151, 340, 908, 916, 496,
	493, 494, 63, 64, 65, 66, 67, 1260, 480, 1318,
	482, 1258, 240, 488, 489, 705, 1130, 463, 1422, 266,
	1129, 952, 1419, 703, 1391, 1126, 498, 832, 1386, 888,
	946, 1344, 1153, 1443, 464, 452, 200, 1123, 1309, 211,
	479, 481, 211, 1125, 1346, 1131, 1052, 1054, 211, 704,
	709, 696, 890, 1201, 211, 1200, 1199, 81, 890, 81,
	81, 448, 81, 81, 706, 81, 1155, 81, 1159, 1439,
	1154, 455, 1152, 890, 213, 1375, 81, 1157, 201, 1280,
	943, 940, 941, 1137, 939, 959, 1156, 446, 958, 199,
	871, 540, 541, 542, 543, 544, 545, 546, 539, 1158,
	1160, 549, 1077, 475, 1019, 475, 475, 81, 475, 475,
	205, 475, 1345, 475, 986, 950, 953, 1009, 460, 513,
	561, 562, 475, 1053, 1006, 739, 529, 1369, 1222, 823,
	477, 470, 539, 549, 736, 549, 524, 501, 502, 1124,
	916, 1122, 1308, 51, 909, 1384, 1119, 1398, 889, 774,
	731, 446, 945, 514, 889, 819, 1358, 1112, 558, 886,
	884, 560, 885, 772, 773, 771, 1189, 882, 888, 889,
	211, 211, 211, 633, 944, 1437, 81, 1169, 1438, 1223,
	1436, 457, 81, 458, 444, 967, 459, 1080, 819, 571,
	1016, 575, 576, 577, 578, 579, 580, 581, 582, 583,
	70, 586, 589, 589, 589, 595, 589, 589, 595, 589,
	603, 604, 605, 606, 607, 608, 522, 618, 949, 561,
	562, 612, 466, 467, 468, 451, 561, 562, 698, 1444,
	519, 732, 524, 951, 515, 1385, 71, 590, 592, 594,
	596, 598, 600, 601, 738, 270, 904, 900, 591, 593,
	621, 597, 599, 1111, 602, 627, 1404, 1303, 1116, 1113,
	1107, 1114, 1110, 966, 340, 1302, 1108, 1109, 1445, 791,
	901, 792, 508, 512, 542, 543, 544, 545, 546, 539,
	1115, 737, 549, 1100, 906, 211, 898, 1005, 1099, 530,
	81, 1088, 899, 523, 522, 211, 211, 81, 523, 522,
	1171, 211, 453, 454, 211, 1325, 1004, 211, 1003, 1300,
	524, 211, 1382, 81, 81, 524, 1134, 54, 81, 81,
	81, 211, 81, 81, 574, 523, 522, 770, 22, 81,
	81, 197, 1097, 585, 523, 522, 475, 523, 522, 1066,
	718, 1067, 524, 475, 742, 743, 1085, 905, 903, 1231,
	1355, 524, 446, 446, 524, 1349, 1421, 81, 1243, 475,
	475, 211, 1407, 504, 475, 475, 475, 81, 475, 475,
	983, 984, 985, 744, 1236, 475, 475, 757, 759, 760,
	503, 1234, 710, 758, 1349, 1394, 504, 716, 255, 1349,
	504, 768, 523, 522, 1349, 1376, 329, 330, 1077, 765,
	1349, 1348, 302, 1295, 1294, 1282, 504, 1279, 504, 524,
	1072, 81, 538, 537, 547, 548, 540, 541, 542, 543,
	544, 545, 546, 539, 1229, 1228, 549, 793, 902, 809,
	812, 1225, 1226, 746, 79, 820, 1225, 1224, 998, 504,
	835, 504, 761, 715, 81, 81, 763, 51, 714, 24,
	699, 211, 802, 504, 58, 697, 694, 472, 764, 211,
	211, 465, 575, 211, 211, 993, 1354, 81, 640, 639,
	342, 1353, 804, 1028, 1352, 794, 795, 1029, 624, 1176,
	81, 1219, 1188, 54, 891, 828, 24, 805, 806, 1188,
	834, 811, 814, 815, 998, 816, 1058, 54, 878, 802,
	840, 843, 844, 845, 841, 850, 842, 846, 1058, 618,
	1192, 1193, 1140, 859, 1330, 835, 827, 733, 829, 830,
	625, 858, 623, 623, 857, 1275, 563, 564, 565, 566,
	567, 568, 569, 570, 54, 862, 861, 211, 81, 835,
	81, 24, 754, 755, 81, 81, 211, 211, 279, 211,
	211, 1188, 1357, 211, 81, 340, 998, 917, 918, 919,
	931, 835, 1227, 1068, 863, 1022, 1021, 998, 875, 623,
	211, 626, 211, 211, 740, 211, 708, 1413, 293, 292,
	295, 296, 297, 298, 475, 257, 475, 294, 299, 54,
	1314, 910, 1287, 930, 1217, 574, 927, 928, 807, 808,
	475, 840, 843, 844, 845, 841, 1071, 842, 846, 765,
	1192, 1193, 752, 971, 926, 921, 920, 1128, 933, 342,
	1430, 342, 342, 1426, 342, 342, 1195, 342, 1176, 342,
	768, 1045, 1101, 54, 734, 712, 1046, 1043, 342, 1198,
	1197, 1042, 1044, 975, 745, 1047, 976, 844, 845, 1041,
	1417, 987, 1410, 869, 261, 262, 1136, 1415, 518, 981,
	980, 1092, 982, 506, 638, 473, 1328, 1084, 764, 527,
	1083, 1079, 988, 516, 1073, 507, 211, 211, 211, 211,
	211, 1273, 1310, 1035, 936, 711, 848, 518, 211, 979,
	252, 211, 258, 259, 58, 211, 1362, 978, 253, 211,
	1361, 1316, 801, 803, 1058, 497, 1432, 1431, 60, 997,
	1010, 1007, 729, 520, 81, 1432, 1015, 1372, 1031, 1032,
	1069, 1082, 618, 618, 618, 618, 618, 1013, 1030, 735,
	1060, 62, 1037, 1038, 622, 1040, 55, 850, 342, 1055,
	1036, 1048, 1145, 1039, 635, 618, 1, 804, 1056, 1059,
	1078, 1424, 1242, 1311, 942, 1061, 1389, 972, 973, 1342,
	512, 1211, 538, 537, 547, 548, 540, 541, 542, 543,
	544, 545, 546, 539, 81, 81, 549, 766, 1074, 1075,
	775, 776, 777, 778, 779, 780, 781, 782, 783, 784,
	785, 786, 787, 788, 789, 881, 872, 911, 912, 913,
	914, 69, 875, 81, 1098, 443, 68, 1383, 880, 879,
	896, 1089, 1090, 922, 923, 924, 895, 892, 211, 1086,
	907, 475, 999, 559, 1118, 1117, 894, 81, 1104, 893,
	897, 648, 646, 647, 645, 824, 644, 650, 1091, 1017,
	1093, 1094, 1095, 649, 642, 1133, 643, 225, 335, 475,
	847, 634, 342, 932, 521, 72, 1121, 1307, 1120, 342,
	938, 491, 492, 227, 557, 1144, 1143, 977, 1062, 341,
	1183, 741, 81, 81, 1177, 342, 342, 1035, 1168, 617,
	342, 342, 342, 1162, 342, 342, 1161, 1149, 1180, 765,
	510, 342, 342, 1360, 1315, 1014, 81, 584, 817, 278,
	756, 291, 288, 289, 1187, 747, 1027, 531, 276, 81,
	268, 81, 81, 1196, 616, 1142, 1181, 1210, 51, 748,
	609, 1202, 1203, 995, 839, 837, 836, 996, 1182, 527,
	1205, 1194, 342, 1190, 1000, 1001, 1002, 1215, 1216, 615,
	1209, 1008, 211, 1139, 1011, 1012, 1218, 1214, 1172, 1268,
	1018, 1367, 751, 26, 1020, 59, 263, 1023, 1024, 1025,
	1026, 211, 19, 1232, 18, 17, 20, 81, 16, 15,
	81, 81, 211, 796, 14, 461, 30, 21, 81, 1050,
	13, 211, 12, 11, 10, 9, 8, 1135, 7, 821,
	6, 5, 4, 254, 23, 2, 1233, 875, 0, 875,
	0, 1247, 0, 0, 0, 0, 825, 826, 1235, 0,
	1248, 1238, 1220, 1221, 0, 0, 0, 0, 989, 990,
	991, 0, 1256, 0, 0, 0, 0, 618, 0, 342,
	0, 1249, 0, 0, 0, 0, 1170, 1035, 0, 1274,
	0, 0, 342, 0, 0, 0, 0, 0, 0, 1284,
	81, 0, 1283, 0, 1267, 0, 1069, 0, 81, 0,
	0, 0, 0, 1293, 0, 0, 1142, 0, 0, 0,
	0, 81, 0, 0, 0, 0, 0, 0, 1204, 0,
	0, 769, 81, 0, 0, 0, 1289, 1290, 1291, 1305,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 342, 0, 0, 0, 954, 955, 0, 0,
	0, 0, 0, 0, 0, 0, 342, 475, 0, 0,
	81, 81, 1306, 81, 1299, 0, 1301, 1148, 81, 0,
	81, 81, 81, 211, 1180, 0, 81, 1337, 875, 1338,
	1339, 1340, 342, 1336, 1329, 0, 1081, 0, 0, 1341,
	0, 1347, 0, 0, 1317, 81, 0, 0, 0, 0,
	0, 0, 1181, 0, 1359, 1332, 0, 617, 0, 0,
	1313, 617, 0, 0, 0, 1331, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1373, 0, 0, 0, 1180,
	81, 1270, 0, 0, 1381, 1380, 0, 1356, 81, 81,
	0, 574, 0, 0, 0, 1393, 0, 0, 0, 1285,
	1392, 0, 1286, 1396, 0, 1288, 81, 1181, 1401, 51,
	0, 1035, 1350, 0, 1351, 0, 0, 211, 0, 1374,
	0, 0, 81, 0, 0, 0, 0, 821, 1409, 1146,
	1147, 0, 0, 0, 1388, 0, 0, 0, 0, 0,
	1414, 0, 1163, 1164, 81, 1165, 1166, 1416, 0, 0,
	0, 0, 0, 1418, 0, 0, 0, 1173, 1174, 1429,
	0, 0, 0, 1250, 1440, 0, 342, 0, 509, 0,
	1252, 0, 0, 0, 0, 0, 1313, 875, 0, 0,
	0, 1261, 1262, 0, 0, 0, 1253, 1254, 0, 1255,
	0, 0, 1257, 0, 1259, 0, 0, 0, 0, 1427,
	0, 1276, 1277, 1278, 209, 1281, 0, 239, 0, 0,
	769, 0, 0, 209, 0, 0, 0, 0, 619, 0,
	0, 0, 1292, 0, 0, 0, 1102, 342, 0, 0,
	0, 0, 267, 0, 0, 209, 474, 0, 0, 0,
	209, 0, 209, 0, 0, 0, 0, 0, 1296, 0,
	0, 0, 0, 0, 208, 342, 0, 0, 0, 0,
	0, 0, 504, 242, 0, 0, 0, 0, 0, 0,
	0, 1395, 574, 0, 617, 617, 617, 617, 617, 342,
	0, 1251, 0, 0, 0, 333, 0, 0, 1324, 617,
	447, 0, 449, 0, 0, 0, 0, 617, 0, 538,
	537, 547, 548, 540, 541, 542, 543, 544, 545, 546,
	539, 0, 342, 549, 0, 0, 0, 0, 0, 0,
	0, 821, 0, 0, 1184, 1186, 547, 548, 540, 541,
	542, 543, 544, 545, 546, 539, 0, 0, 549, 1363,
	1364, 1365, 1366, 0, 0, 0, 1370, 1371, 1186, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1377, 1378,
	1379, 342, 0, 342, 1213, 0, 0, 209, 0, 0,
	209, 0, 0, 0, 0, 0, 209, 0, 0, 0,
	0, 0, 209, 0, 0, 0, 0, 1397, 0, 0,
	0, 0, 0, 0, 1402, 1272, 0, 0, 0, 1319,
	1320, 1321, 1322, 1323, 0, 0, 0, 1326, 1327, 1406,
	0, 0, 0, 0, 0, 0, 0, 456, 0, 1239,
	462, 0, 1244, 1245, 0, 0, 469, 0, 0, 0,
	342, 0, 471, 538, 537, 547, 548, 540, 541, 542,
	543, 544, 545, 546, 539, 0, 0, 549, 0, 0,
	0, 0, 0, 1441, 1442, 483, 484, 0, 485, 486,
	0, 487, 994, 490, 0, 0, 0, 0, 0, 0,
	222, 0, 500, 1271, 0, 0, 0, 0, 0, 0,
	0, 821, 538, 537, 547, 548, 540, 541, 542, 543,
	544, 545, 546, 539, 235, 0, 549, 0, 209, 209,
	209, 0, 342, 0, 0, 0, 0, 0, 0, 0,
	1298, 538, 537, 547, 548, 540, 541, 542, 543, 544,
	545, 546, 539, 342, 0, 549, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 0, 0, 611, 0,
	620, 0, 217, 0, 0, 0, 0, 0, 0, 0,
	226, 221, 0, 1433, 0, 0, 0, 0, 0, 0,
	0, 0, 1333, 1334, 0, 1335, 0, 0, 0, 617,
	1298, 0, 1298, 1298, 1298, 0, 0, 0, 1213, 0,
	0, 0, 224, 0, 0, 0, 0, 0, 234, 0,
	0, 0, 0, 0, 0, 0, 0, 1298, 0, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 209, 215, 0, 0, 0, 209,
	0, 0, 209, 0, 0, 209, 0, 0, 0, 717,
	0, 0, 1387, 0, 0, 0, 0, 0, 0, 209,
	342, 342, 228, 218, 219, 0, 229, 230, 231, 233,
	0, 232, 238, 641, 0, 821, 220, 223, 1403, 216,
	237, 236, 0, 700, 701, 0, 0, 0, 0, 707,
	0, 0, 333, 1266, 1408, 713, 695, 0, 0, 209,
	0, 0, 0, 702, 0, 0, 0, 0, 717, 724,
	0, 0, 0, 0, 0, 0, 1298, 0, 0, 719,
	720, 0, 0, 0, 721, 722, 723, 0, 725, 726,
	0, 0, 0, 0, 0, 727, 728, 538, 537, 547,
	548, 540, 541, 542, 543, 544, 545, 546, 539, 753,
	267, 549, 0, 0, 0, 267, 267, 0, 0, 267,
	267, 267, 0, 0, 0, 822, 0, 538, 537, 547,
	548, 540, 541, 542, 543, 544, 545, 546, 539, 0,
	0, 549, 0, 0, 267, 267, 267, 267, 0, 209,
	0, 0, 0, 0, 0, 0, 0, 209, 855, 0,
	0, 209, 209, 533, 0, 536, 0, 0, 0, 0,
	0, 550, 551, 552, 553, 554, 555, 556, 1265, 534,
	535, 532, 538, 537, 547, 548, 540, 541, 542, 543,
	544, 545, 546, 539, 0, 0, 549, 0, 0, 833,
	0, 0, 24, 25, 52, 27, 28, 0, 0, 0,
	0, 0, 860, 0, 0, 0, 0, 0, 0, 0,
	0, 43, 0, 0, 0, 0, 29, 48, 49, 0,
	0, 0, 0, 0, 0, 209, 0, 0, 0, 0,
	0, 0, 0, 0, 209, 209, 38, 209, 209, 0,
	54, 209, 538, 537, 547, 548, 540, 541, 542, 543,
	544, 545, 546, 539, 666, 0, 549, 0, 209, 0,
	968, 969, 0, 209, 0, 0, 0, 0, 717, 0,
	0, 0, 0, 0, 0, 934, 0, 0, 0, 0,
	267, 0, 0, 0, 956, 957, 0, 960, 961, 0,
	0, 962, 0, 0, 935, 0, 937, 0, 0, 0,
	0, 31, 32, 34, 33, 36, 0, 50, 964, 0,
	963, 0, 0, 970, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 37, 44,
	45, 0, 654, 46, 47, 35, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 267, 0, 0, 39, 40,
	0, 41, 42, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 822, 209, 209, 209, 209, 209, 667,
	1264, 0, 0, 0, 0, 0, 1049, 0, 0, 209,
	0, 0, 0, 855, 0, 1263, 0, 209, 0, 0,
	0, 680, 683, 684, 685, 686, 687, 688, 0, 651,
	689, 690, 691, 692, 693, 668, 669, 670, 671, 652,
	653, 681, 0, 655, 0, 656, 657, 658, 659, 660,
	661, 662, 663, 664, 665, 672, 673, 674, 675, 676,
	677, 678, 679, 0, 0, 0, 0, 0, 0, 53,
	0, 0, 0, 0, 538, 537, 547, 548, 540, 541,
	542, 543, 544, 545, 546, 539, 0, 0, 549, 538,
	537, 547, 548, 540, 541, 542, 543, 544, 545, 546,
	539, 0, 0, 549, 537, 547, 548, 540, 541, 542,
	543, 544, 545, 546, 539, 0, 0, 549, 682, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 267, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 0, 0,
	0, 1103, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 717, 0,
	0, 0, 0, 0, 0, 0, 1138, 822, 0, 1132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	209, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 209,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	209, 0, 0, 0, 0, 0, 0, 0, 0, 209,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1230, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1237,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1246, 0, 0, 0, 0, 0, 0, 822, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 855, 0, 0, 0, 0, 0, 1304, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 430, 419, 0, 390, 433,
	368, 382, 442, 383, 384, 412, 354, 398, 139, 380,
	0, 371, 349, 377, 350, 369, 392, 103, 395, 367,
	421, 401, 432, 120, 440, 122, 406, 0, 160, 131,
	0, 822, 394, 423, 396, 417, 389, 413, 359, 405,
	434, 381, 410, 435, 0, 209, 0, 80, 0, 876,
	877, 0, 0, 0, 0, 0, 96, 0, 408, 429,
	379, 409, 411, 348, 407, 0, 352, 355, 441, 425,
	374, 375, 1070, 0, 0, 0, 0, 0, 0, 393,
	397, 414, 387, 0, 0, 0, 0, 0, 0, 0,
	0, 372, 0, 404, 0, 1405, 0, 356, 353, 0,
	0, 391, 0, 0, 0, 358, 0, 373, 415, 0,
	347, 109, 418, 424, 388, 212, 428, 386, 385, 431,
	146, 0, 163, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 422, 370, 378, 99, 376, 153, 141, 176,
	403, 142, 152, 123, 168, 147, 175, 184, 185, 165,
	183, 192, 84, 164, 174, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 0, 439, 150, 102, 107, 101,
	138, 169, 170, 100, 195, 91, 182, 88, 92, 181,
	136, 167, 173, 130, 127, 87, 171, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	351, 0, 161, 178, 196, 94, 366, 157, 166, 186,
	187, 188, 189, 190, 191, 0, 0, 95, 108, 104,
	143, 135, 93, 114, 158, 117, 124, 149, 194, 140,
	154, 98, 177, 159, 362, 365, 360, 361, 399, 400,
	436, 437, 438, 416, 357, 0, 363, 364, 0, 420,
	426, 427, 402, 82, 89, 121, 193, 148, 106, 179,
	430, 419, 0, 390, 433, 368, 382, 442, 383, 384,
	412, 354, 398, 139, 380, 0, 371, 349, 377, 350,
	369, 392, 103, 395, 367, 421, 401, 432, 120, 440,
	122, 406, 0, 160, 131, 0, 0, 394, 423, 396,
	417, 389, 413, 359, 405, 434, 381, 410, 435, 0,
	0, 0, 80, 0, 876, 877, 0, 0, 0, 0,
	0, 96, 0, 408, 429, 379, 409, 411, 348, 407,
	0, 352, 355, 441, 425, 374, 375, 0, 0, 0,
	0, 0, 0, 0, 393, 397, 414, 387, 0, 0,
	0, 0, 0, 0, 0, 0, 372, 0, 404, 0,
	0, 0, 356, 353, 0, 0, 391, 0, 0, 0,
	358, 0, 373, 415, 0, 347, 109, 418, 424, 388,
	212, 428, 386, 385, 431, 146, 0, 163, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 422, 370, 378,
	99, 376, 153, 141, 176, 403, 142, 152, 123, 168,
	147, 175, 184, 185, 165, 183, 192, 84, 164, 174,
	97, 156, 86, 172, 162, 129, 115, 116, 85, 0,
	439, 150, 102, 107, 101, 138, 169, 170, 100, 195,
	91, 182, 88, 92, 181, 136, 167, 173, 130, 127,
	87, 171, 128, 126, 118, 105, 112, 144, 125, 145,
	113, 133, 132, 134, 0, 351, 0, 161, 178, 196,
	94, 366, 157, 166, 186, 187, 188, 189, 190, 191,
	0, 0, 95, 108, 104, 143, 135, 93, 114, 158,
	117, 124, 149, 194, 140, 154, 98, 177, 159, 362,
	365, 360, 361, 399, 400, 436, 437, 438, 416, 357,
	0, 363, 364, 0, 420, 426, 427, 402, 82, 89,
	121, 193, 148, 106, 179, 430, 419, 0, 390, 433,
	368, 382, 442, 383, 384, 412, 354, 398, 139, 380,
	0, 371, 349, 377, 350, 369, 392, 103, 395, 367,
	421, 401, 432, 120, 440, 122, 406, 0, 160, 131,
	0, 0, 394, 423, 396, 417, 389, 413, 359, 405,
	434, 381, 410, 435, 54, 0, 0, 80, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 408, 429,
	379, 409, 411, 348, 407, 0, 352, 355, 441, 425,
	374, 375, 0, 0, 0, 0, 0, 0, 0, 393,
	397, 414, 387, 0, 0, 0, 0, 0, 0, 0,
	0, 372, 0, 404, 0, 0, 0, 356, 353, 0,
	0, 391, 0, 0, 0, 358, 0, 373, 415, 0,
	347, 109, 418, 424, 388, 212, 428, 386, 385, 431,
	146, 0, 163, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 422, 370, 378, 99, 376, 153, 141, 176,
	403, 142, 152, 123, 168, 147, 175, 184, 185, 165,
	183, 192, 84, 164, 174, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 0, 439, 150, 102, 107, 101,
	138, 169, 170, 100, 195, 91, 182, 88, 92, 181,
	136, 167, 173, 130, 127, 87, 171, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	351, 0, 161, 178, 196, 94, 366, 157, 166, 186,
	187, 188, 189, 190, 191, 0, 0, 95, 108, 104,
	143, 135, 93, 114, 158, 117, 124, 149, 194, 140,
	154, 98, 177, 159, 362, 365, 360, 361, 399, 400,
	436, 437, 438, 416, 357, 0, 363, 364, 0, 420,
	426, 427, 402, 82, 89, 121, 193, 148, 106, 179,
	430, 419, 0, 390, 433, 368, 382, 442, 383, 384,
	412, 354, 398, 139, 380, 0, 371, 349, 377, 350,
	369, 392, 103, 395, 367, 421, 401, 432, 120, 440,
	122, 406, 0, 160, 131, 0, 0, 394, 423, 396,
	417, 389, 413, 359, 405, 434, 381, 410, 435, 0,
	0, 0, 80, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 408, 429, 379, 409, 411, 348, 407,
	0, 352, 355, 441, 425, 374, 375, 0, 0, 0,
	0, 0, 0, 0, 393, 397, 414, 387, 0, 0,
	0, 0, 0, 0, 1141, 0, 372, 0, 404, 0,
	0, 0, 356, 353, 0, 0, 391, 0, 0, 0,
	358, 0, 373, 415, 0, 347, 109, 418, 424, 388,
	212, 428, 386, 385, 431, 146, 0, 163, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 422, 370, 378,
	99, 376, 153, 141, 176, 403, 142, 152, 123, 168,
	147, 175, 184, 185, 165, 183, 192, 84, 164, 174,
	97, 156, 86, 172, 162, 129, 115, 116, 85, 0,
	439, 150, 102, 107, 101, 138, 169, 170, 100, 195,
	91, 182, 88, 92, 181, 136, 167, 173, 130, 127,
	87, 171, 128, 126, 118, 105, 112, 144, 125, 145,
	113, 133, 132, 134, 0, 351, 0, 161, 178, 196,
	94, 366, 157, 166, 186, 187, 188, 189, 190, 191,
	0, 0, 95, 108, 104, 143, 135, 93, 114, 158,
	117, 124, 149, 194, 140, 154, 98, 177, 159, 362,
	365, 360, 361, 399, 400, 436, 437, 438, 416, 357,
	0, 363, 364, 0, 420, 426, 427, 402, 82, 89,
	121, 193, 148, 106, 179, 430, 419, 0, 390, 433,
	368, 382, 442, 383, 384, 412, 354, 398, 139, 380,
	0, 371, 349, 377, 350, 369, 392, 103, 395, 367,
	421, 401, 432, 120, 440, 122, 406, 0, 160, 131,
	0, 0, 394, 423, 396, 417, 389, 413, 359, 405,
	434, 381, 410, 435, 0, 0, 0, 272, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 408, 429,
	379, 409, 411, 348, 407, 0, 352, 355, 441, 425,
	374, 375, 0, 0, 0, 0, 0, 0, 0, 393,
	397, 414, 387, 0, 0, 0, 0, 0, 0, 762,
	0, 372, 0, 404, 0, 0, 0, 356, 353, 0,
	0, 391, 0, 0, 0, 358, 0, 373, 415, 0,
	347, 109, 418, 424, 388, 212, 428, 386, 385, 431,
	146, 0, 163, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 422, 370, 378, 99, 376, 153, 141, 176,
	403, 142, 152, 123, 168, 147, 175, 184, 185, 165,
	183, 192, 84, 164, 174, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 0, 439, 150, 102, 107, 101,
	138, 169, 170, 100, 195, 91, 182, 88, 92, 181,
	136, 167, 173, 130, 127, 87, 171, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	351, 0, 161, 178, 196, 94, 366, 157, 166, 186,
	187, 188, 189, 190, 191, 0, 0, 95, 108, 104,
	143, 135, 93, 114, 158, 117, 124, 149, 194, 140,
	154, 98, 177, 159, 362, 365, 360, 361, 399, 400,
	436, 437, 438, 416, 357, 0, 363, 364, 0, 420,
	426, 427, 402, 82, 89, 121, 193, 148, 106, 179,
	430, 419, 0, 390, 433, 368, 382, 442, 383, 384,
	412, 354, 398, 139, 380, 0, 371, 349, 377, 350,
	369, 392, 103, 395, 367, 421, 401, 432, 120, 440,
	122, 406, 0, 160, 131, 0, 0, 394, 423, 396,
	417, 389, 413, 359, 405, 434, 381, 410, 435, 0,
	0, 0, 80, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 408, 429, 379, 409, 411, 348, 407,
	0, 352, 355, 441, 425, 374, 375, 0, 0, 0,
	0, 0, 0, 0, 393, 397, 414, 387, 0, 0,
	0, 0, 0, 0, 0, 0, 372, 0, 404, 0,
	0, 0, 356, 353, 0, 0, 391, 0, 0, 0,
	358, 0, 373, 415, 0, 347, 109, 418, 424, 388,
	212, 428, 386, 385, 431, 146, 0, 163, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 422, 370, 378,
	99, 376, 153, 141, 176, 403, 142, 152, 123, 168,
	147, 175, 184, 185, 165, 183, 192, 84, 164, 174,
	97, 156, 86, 172, 162, 129, 115, 116, 85, 0,
	439, 150, 102, 107, 101, 138, 169, 170, 100, 195,
	91, 182, 88, 92, 181, 136, 167, 173, 130, 127,
	87, 171, 128, 126, 118, 105, 112, 144, 125, 145,
	113, 133, 132, 134, 0, 351, 0, 161, 178, 196,
	94, 366, 157, 166, 186, 187, 188, 189, 190, 191,
	0, 0, 95, 108, 104, 143, 135, 93, 114, 158,
	117, 124, 149, 194, 140, 154, 98, 177, 159, 362,
	365, 360, 361, 399, 400, 436, 437, 438, 416, 357,
	0, 363, 364, 0, 420, 426, 427, 402, 82, 89,
	121, 193, 148, 106, 179, 430, 419, 0, 390, 433,
	368, 382, 442, 383, 384, 412, 354, 398, 139, 380,
	0, 371, 349, 377, 350, 369, 392, 103, 395, 367,
	421, 401, 432, 120, 440, 122, 406, 0, 160, 131,
	0, 0, 394, 423, 396, 417, 389, 413, 359, 405,
	434, 381, 410, 435, 0, 0, 0, 272, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 408, 429,
	379, 409, 411, 348, 407, 0, 352, 355, 441, 425,
	374, 375, 0, 0, 0, 0, 0, 0, 0, 393,
	397, 414, 387, 0, 0, 0, 0, 0, 0, 0,
	0, 372, 0, 404, 0, 0, 0, 356, 353, 0,
	0, 391, 0, 0, 0, 358, 0, 373, 415, 0,
	347, 109, 418, 424, 388, 212, 428, 386, 385, 431,
	146, 0, 163, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 422, 370, 378, 99, 376, 153, 141, 176,
	403, 142, 152, 123, 168, 147, 175, 184, 185, 165,
	183, 192, 84, 164, 174, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 0, 439, 150, 102, 107, 101,
	138, 169, 170, 100, 195, 91, 182, 88, 92, 181,
	136, 167, 173, 130, 127, 87, 171, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	351, 0, 161, 178, 196, 94, 366, 157, 166, 186,
	187, 188, 189, 190, 191, 0, 0, 95, 108, 104,
	143, 135, 93, 114, 158, 117, 124, 149, 194, 140,
	154, 98, 177, 159, 362, 365, 360, 361, 399, 400,
	436, 437, 438, 416, 357, 0, 363, 364, 0, 420,
	426, 427, 402, 82, 89, 121, 193, 148, 106, 179,
	430, 419, 0, 390, 433, 368, 382, 442, 383, 384,
	412, 354, 398, 139, 380, 0, 371, 349, 377, 350,
	369, 392, 103, 395, 367, 421, 401, 432, 120, 440,
	122, 406, 0, 160, 131, 0, 0, 394, 423, 396,
	417, 389, 413, 359, 405, 434, 381, 410, 435, 0,
	0, 0, 80, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 408, 429, 379, 409, 411, 348, 407,
	0, 352, 355, 441, 425, 374, 375, 0, 0, 0,
	0, 0, 0, 0, 393, 397, 414, 387, 0, 0,
	0, 0, 0, 0, 0, 0, 372, 0, 404, 0,
	0, 0, 356, 353, 0, 0, 391, 0, 0, 0,
	358, 0, 373, 415, 0, 347, 109, 418, 424, 388,
	212, 428, 386, 385, 431, 146, 0, 163, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 422, 370, 378,
	99, 376, 153, 141, 176, 403, 142, 152, 123, 168,
	147, 175, 184, 185, 165, 183, 192, 84, 164, 174,
	97, 156, 86, 172, 162, 129, 115, 116, 85, 0,
	439, 150, 102, 107, 101, 138, 169, 170, 100, 195,
	91, 182, 88, 345, 181, 136, 167, 173, 130, 127,
	87, 171, 128, 126, 118, 105, 112, 144, 125, 145,
	113, 133, 132, 134, 0, 351, 0, 161, 178, 196,
	94, 366, 157, 166, 186, 187, 188, 189, 190, 191,
	0, 0, 95, 108, 104, 143, 346, 344, 114, 158,
	117, 124, 149, 194, 140, 154, 98, 177, 159, 362,
	365, 360, 361, 399, 400, 436, 437, 438, 416, 357,
	0, 363, 364, 0, 420, 426, 427, 402, 82, 89,
	121, 193, 148, 106, 179, 430, 419, 0, 390, 433,
	368, 382, 442, 383, 384, 412, 354, 398, 139, 380,
	0, 371, 349, 377, 350, 369, 392, 103, 395, 367,
	421, 401, 432, 120, 440, 122, 406, 0, 160, 131,
	0, 0, 394, 423, 396, 417, 389, 413, 359, 405,
	434, 381, 410, 435, 0, 0, 0, 210, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 408, 429,
	379, 409, 411, 348, 407, 0, 352, 355, 441, 425,
	374, 375, 0, 0, 0, 0, 0, 0, 0, 393,
	397, 414, 387, 0, 0, 0, 0, 0, 0, 0,
	0, 372, 0, 404, 0, 0, 0, 356, 353, 0,
	0, 391, 0, 0, 0, 358, 0, 373, 415, 0,
	347, 109, 418, 424, 388, 212, 428, 386, 385, 431,
	146, 0, 163, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 422, 370, 378, 99, 376, 153, 141, 176,
	403, 142, 152, 123, 168, 147, 175, 184, 185, 165,
	183, 192, 84, 164, 174, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 0, 439, 150, 102, 107, 101,
	138, 169, 170, 100, 195, 91, 182, 88, 92, 181,
	136, 167, 173, 130, 127, 87, 171, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	351, 0, 161, 178, 196, 94, 366, 157, 166, 186,
	187, 188, 189, 190, 191, 0, 0, 95, 108, 104,
	143, 135, 93, 114, 158, 117, 124, 149, 194, 140,
	154, 98, 177, 159, 362, 365, 360, 361, 399, 400,
	436, 437, 438, 416, 357, 0, 363, 364, 0, 420,
	426, 427, 402, 82, 89, 121, 193, 148, 106, 179,
	430, 419, 0, 390, 433, 368, 382, 442, 383, 384,
	412, 354, 398, 139, 380, 0, 371, 349, 377, 350,
	369, 392, 103, 395, 367, 421, 401, 432, 120, 440,
	122, 406, 0, 160, 131, 0, 0, 394, 423, 396,
	417, 389, 413, 359, 405, 434, 381, 410, 435, 0,
	0, 0, 80, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 408, 429, 379, 409, 411, 348, 407,
	0, 352, 355, 441, 425, 374, 375, 0, 0, 0,
	0, 0, 0, 0, 393, 397, 414, 387, 0, 0,
	0, 0, 0, 0, 0, 0, 372, 0, 404, 0,
	0, 0, 356, 353, 0, 0, 391, 0, 0, 0,
	358, 0, 373, 415, 0, 347, 109, 418, 424, 388,
	212, 428, 386, 385, 431, 146, 0, 163, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 422, 370, 378,
	99, 376, 153, 141, 176, 403, 142, 152, 123, 168,
	147, 175, 184, 185, 165, 183, 192, 84, 164, 628,
	97, 156, 86, 172, 162, 129, 115, 116, 85, 0,
	439, 150, 102, 107, 101, 138, 169, 170, 100, 195,
	91, 182, 88, 345, 181, 136, 167, 173, 130, 127,
	87, 171, 128, 126, 118, 105, 112, 144, 125, 145,
	113, 133, 132, 134, 0, 351, 0, 161, 178, 196,
	94, 366, 157, 166, 186, 187, 188, 189, 190, 191,
	0, 0, 95, 108, 104, 143, 346, 344, 114, 158,
	117, 124, 149, 194, 140, 154, 98, 177, 159, 362,
	365, 360, 361, 399, 400, 436, 437, 438, 416, 357,
	0, 363, 364, 0, 420, 426, 427, 402, 82, 89,
	121, 193, 148, 106, 179, 430, 419, 0, 390, 433,
	368, 382, 442, 383, 384, 412, 354, 398, 139, 380,
	0, 371, 349, 377, 350, 369, 392, 103, 395, 367,
	421, 401, 432, 120, 440, 122, 406, 0, 160, 131,
	0, 0, 394, 423, 396, 417, 389, 413, 359, 405,
	434, 381, 410, 435, 0, 0, 0, 80, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 408, 429,
	379, 409, 411, 348, 407, 0, 352, 355, 441, 425,
	374, 375, 0, 0, 0, 0, 0, 0, 0, 393,
	397, 414, 387, 0, 0, 0, 0, 0, 0, 0,
	0, 372, 0, 404, 0, 0, 0, 356, 353, 0,
	0, 391, 0, 0, 0, 358, 0, 373, 415, 0,
	347, 109, 418, 424, 388, 212, 428, 386, 385, 431,
	146, 0, 163, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 422, 370, 378, 99, 376, 153, 141, 176,
	403, 142, 152, 123, 168, 147, 175, 184, 185, 165,
	183, 192, 84, 164, 336, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 0, 439, 150, 102, 107, 101,
	138, 169, 170, 100, 195, 91, 182, 88, 345, 181,
	136, 167, 173, 130, 127, 87, 171, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	351, 0, 161, 178, 196, 94, 366, 157, 166, 186,
	187, 188, 189, 190, 191, 0, 0, 95, 108, 104,
	143, 346, 344, 339, 338, 117, 124, 149, 194, 140,
	154, 98, 177, 159, 362, 365, 360, 361, 399, 400,
	436, 437, 438, 416, 357, 0, 363, 364, 0, 420,
	426, 427, 402, 82, 89, 121, 193, 148, 106, 179,
	139, 0, 0, 0, 0, 274, 0, 0, 0, 103,
	0, 271, 0, 0, 0, 120, 314, 122, 0, 0,
	160, 131, 0, 0, 0, 0, 305, 306, 0, 0,
	0, 0, 0, 0, 867, 0, 54, 0, 0, 272,
	293, 292, 295, 296, 297, 298, 0, 0, 96, 294,
	299, 300, 301, 868, 0, 0, 269, 286, 0, 313,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	284, 0, 0, 0, 0, 327, 0, 285, 0, 0,
	280, 281, 282, 287, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 212, 0, 0,
	325, 0, 146, 0, 163, 111, 119, 83, 90, 0,
	110, 137, 151, 155, 0, 0, 0, 99, 0, 153,
	141, 176, 0, 142, 152, 123, 168, 147, 175, 184,
	185, 165, 183, 192, 84, 164, 174, 97, 156, 86,
	172, 162, 129, 115, 116, 85, 0, 180, 150, 102,
	107, 101, 138, 169, 170, 100, 195, 91, 182, 88,
	92, 181, 136, 167, 173, 130, 127, 87, 171, 128,
	126, 118, 105, 112, 144, 125, 145, 113, 133, 132,
	134, 0, 0, 0, 161, 178, 196, 94, 0, 157,
	166, 186, 187, 188, 189, 190, 191, 0, 0, 95,
	108, 104, 143, 135, 93, 114, 158, 117, 124, 149,
	194, 140, 154, 98, 177, 159, 315, 326, 321, 322,
	319, 320, 318, 317, 316, 328, 307, 308, 309, 310,
	312, 0, 323, 324, 311, 82, 89, 121, 193, 148,
	106, 179, 139, 0, 0, 798, 0, 274, 0, 0,
	0, 103, 0, 271, 0, 0, 0, 120, 314, 122,
	0, 0, 160, 131, 0, 0, 0, 0, 305, 306,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 272, 293, 292, 295, 296, 297, 298, 0, 0,
	96, 294, 299, 300, 301, 0, 0, 0, 269, 286,
	0, 313, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 284, 265, 0, 0, 0, 327, 0, 285,
	0, 0, 280, 281, 282, 287, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 212,
	0, 0, 325, 0, 146, 0, 163, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 0, 0, 0, 99,
	0, 153, 141, 176, 0, 142, 152, 123, 168, 147,
	175, 184, 185, 165, 183, 192, 84, 164, 174, 97,
	156, 86, 172, 162, 129, 115, 116, 85, 0, 180,
	150, 102, 107, 101, 138, 169, 170, 100, 195, 91,
	182, 88, 92, 181, 136, 167, 173, 130, 127, 87,
	171, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 0, 0, 161, 178, 196, 94,
	0, 157, 166, 186, 187, 188, 189, 190, 191, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 158, 117,
	124, 149, 194, 140, 154, 98, 177, 159, 315, 326,
	321, 322, 319, 320, 318, 317, 316, 328, 307, 308,
	309, 310, 312, 0, 323, 324, 311, 82, 89, 121,
	193, 148, 106, 179, 139, 0, 0, 0, 0, 274,
	0, 0, 0, 103, 0, 271, 0, 0, 0, 120,
	314, 122, 0, 0, 160, 131, 0, 0, 0, 0,
	305, 306, 0, 0, 0, 0, 0, 0, 0, 0,
	54, 0, 504, 272, 293, 292, 295, 296, 297, 298,
	0, 0, 96, 294, 299, 300, 301, 0, 0, 0,
	269, 286, 0, 313, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 284, 0, 0, 0, 0, 327,
	0, 285, 0, 0, 280, 281, 282, 287, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 212, 0, 0, 325, 0, 146, 0, 163, 111,
	119, 83, 90, 0, 110, 137, 151, 155, 0, 0,
	0, 99, 0, 153, 141, 176, 0, 142, 152, 123,
	168, 147, 175, 184, 185, 165, 183, 192, 84, 164,
	174, 97, 156, 86, 172, 162, 129, 115, 116, 85,
	0, 180, 150, 102, 107, 101, 138, 169, 170, 100,
	195, 91, 182, 88, 92, 181, 136, 167, 173, 130,
	127, 87, 171, 128, 126, 118, 105, 112, 144, 125,
	145, 113, 133, 132, 134, 0, 0, 0, 161, 178,
	196, 94, 0, 157, 166, 186, 187, 188, 189, 190,
	191, 0, 0, 95, 108, 104, 143, 135, 93, 114,
	158, 117, 124, 149, 194, 140, 154, 98, 177, 159,
	315, 326, 321, 322, 319, 320, 318, 317, 316, 328,
	307, 308, 309, 310, 312, 0, 323, 324, 311, 82,
	89, 121, 193, 148, 106, 179, 139, 0, 0, 0,
	0, 274, 0, 0, 0, 103, 0, 271, 0, 0,
	0, 120, 314, 122, 0, 0, 160, 131, 0, 0,
	0, 0, 305, 306, 0, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 0, 272, 293, 292, 295, 296,
	297, 298, 0, 0, 96, 294, 299, 300, 301, 0,
	0, 0, 269, 286, 0, 313, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 284, 265, 0, 0,
	0, 327, 0, 285, 0, 0, 280, 281, 282, 287,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 0, 0, 212, 0, 0, 325, 0, 146, 0,
	163, 111, 119, 83, 90, 0, 110, 137, 151, 155,
	0, 0, 0, 99, 0, 153, 141, 176, 0, 142,
	152, 123, 168, 147, 175, 184, 185, 165, 183, 192,
	84, 164, 174, 97, 156, 86, 172, 162, 129, 115,
	116, 85, 0, 180, 150, 102, 107, 101, 138, 169,
	170, 100, 195, 91, 182, 88, 92, 181, 136, 167,
	173, 130, 127, 87, 171, 128, 126, 118, 105, 112,
	144, 125, 145, 113, 133, 132, 134, 0, 0, 0,
	161, 178, 196, 94, 0, 157, 166, 186, 187, 188,
	189, 190, 191, 0, 0, 95, 108, 104, 143, 135,
	93, 114, 158, 117, 124, 149, 194, 140, 154, 98,
	177, 159, 315, 326, 321, 322, 319, 320, 318, 317,
	316, 328, 307, 308, 309, 310, 312, 0, 323, 324,
	311, 82, 89, 121, 193, 148, 106, 179, 139, 0,
	0, 0, 0, 274, 0, 0, 0, 103, 0, 271,
	0, 0, 0, 120, 314, 122, 0, 0, 160, 131,
	0, 0, 0, 0, 305, 306, 0, 0, 0, 0,
	0, 0, 0, 0, 54, 0, 0, 272, 293, 813,
	295, 296, 297, 298, 0, 0, 96, 294, 299, 300,
	301, 0, 0, 0, 269, 286, 0, 313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 284, 265,
	0, 0, 0, 327, 0, 285, 0, 0, 280, 281,
	282, 287, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 212, 0, 0, 325, 0,
	146, 0, 163, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 0, 0, 0, 99, 0, 153, 141, 176,
	0, 142, 152, 123, 168, 147, 175, 184, 185, 165,
	183, 192, 84, 164, 174, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 0, 180, 150, 102, 107, 101,
	138, 169, 170, 100, 195, 91, 182, 88, 92, 181,
	136, 167, 173, 130, 127, 87, 171, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	0, 0, 161, 178, 196, 94, 0, 157, 166, 186,
	187, 188, 189, 190, 191, 0, 0, 95, 108, 104,
	143, 135, 93, 114, 158, 117, 124, 149, 194, 140,
	154, 98, 177, 159, 315, 326, 321, 322, 319, 320,
	318, 317, 316, 328, 307, 308, 309, 310, 312, 0,
	323, 324, 311, 82, 89, 121, 193, 148, 106, 179,
	139, 0, 0, 0, 0, 274, 0, 0, 0, 103,
	0, 271, 0, 0, 0, 120, 314, 122, 0, 0,
	160, 131, 0, 0, 0, 0, 305, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 54, 0, 0, 272,
	293, 810, 295, 296, 297, 298, 0, 0, 96, 294,
	299, 300, 301, 0, 0, 0, 269, 286, 0, 313,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	284, 265, 0, 0, 0, 327, 0, 285, 0, 0,
	280, 281, 282, 287, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 212, 0, 0,
	325, 0, 146, 0, 163, 111, 119, 83, 90, 0,
	110, 137, 151, 155, 0, 0, 0, 99, 0, 153,
	141, 176, 0, 142, 152, 123, 168, 147, 175, 184,
	185, 165, 183, 192, 84, 164, 174, 97, 156, 86,
	172, 162, 129, 115, 116, 85, 0, 180, 150, 102,
	107, 101, 138, 169, 170, 100, 195, 91, 182, 88,
	92, 181, 136, 167, 173, 130, 127, 87, 171, 128,
	126, 118, 105, 112, 144, 125, 145, 113, 133, 132,
	134, 0, 0, 0, 161, 178, 196, 94, 0, 157,
	166, 186, 187, 188, 189, 190, 191, 0, 0, 95,
	108, 104, 143, 135, 93, 114, 158, 117, 124, 149,
	194, 140, 154, 98, 177, 159, 315, 326, 321, 322,
	319, 320, 318, 317, 316, 328, 307, 308, 309, 310,
	312, 24, 323, 324, 311, 82, 89, 121, 193, 148,
	106, 179, 0, 139, 0, 0, 0, 0, 274, 0,
	0, 0, 103, 0, 271, 0, 0, 0, 120, 314,
	122, 0, 0, 160, 131, 0, 0, 0, 0, 305,
	306, 0, 0, 0, 0, 0, 0, 0, 0, 54,
	0, 0, 272, 293, 292, 295, 296, 297, 298, 0,
	0, 96, 294, 299, 300, 301, 0, 0, 0, 269,
	286, 0, 313, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 284, 0, 0, 0, 0, 327, 0,
	285, 0, 0, 280, 281, 282, 287, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	212, 0, 0, 325, 0, 146, 0, 163, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 0, 0, 0,
	99, 0, 153, 141, 176, 0, 142, 152, 123, 168,
	147, 175, 184, 185, 165, 183, 192, 84, 164, 174,
	97, 156, 86, 172, 162, 129, 115, 116, 85, 0,
	180, 150, 102, 107, 101, 138, 169, 170, 100, 195,
	91, 182, 88, 92, 181, 136, 167, 173, 130, 127,
	87, 171, 128, 126, 118, 105, 112, 144, 125, 145,
	113, 133, 132, 134, 0, 0, 0, 161, 178, 196,
	94, 0, 157, 166, 186, 187, 188, 189, 190, 191,
	0, 0, 95, 108, 104, 143, 135, 93, 114, 158,
	117, 124, 149, 194, 140, 154, 98, 177, 159, 315,
	326, 321, 322, 319, 320, 318, 317, 316, 328, 307,
	308, 309, 310, 312, 0, 323, 324, 311, 82, 89,
	121, 193, 148, 106, 179, 139, 0, 0, 0, 0,
	274, 0, 0, 0, 103, 0, 271, 0, 0, 0,
	120, 314, 122, 0, 0, 160, 131, 0, 0, 0,
	0, 305, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 54, 0, 0, 272, 293, 292, 295, 296, 297,
	298, 0, 0, 96, 294, 299, 300, 301, 0, 0,
	0, 269, 286, 0, 313, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 284, 0, 0, 0, 0,
	327, 0, 285, 0, 0, 280, 281, 282, 287, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 212, 0, 0, 325, 0, 146, 0, 163,
	111, 119, 83, 90, 0, 110, 137, 151, 155, 0,
	0, 0, 99, 0, 153, 141, 176, 0, 142, 152,
	123, 168, 147, 175, 184, 185, 165, 183, 192, 84,
	164, 174, 97, 156, 86, 172, 162, 129, 115, 116,
	85, 0, 180, 150, 102, 107, 101, 138, 169, 170,
	100, 195, 91, 182, 88, 92, 181, 136, 167, 173,
	130, 127, 87, 171, 128, 126, 118, 105, 112, 144,
	125, 145, 113, 133, 132, 134, 0, 0, 0, 161,
	178, 196, 94, 0, 157, 166, 186, 187, 188, 189,
	190, 191, 0, 0, 95, 108, 104, 143, 135, 93,
	114, 158, 117, 124, 149, 194, 140, 154, 98, 177,
	159, 315, 326, 321, 322, 319, 320, 318, 317, 316,
	328, 307, 308, 309, 310, 312, 0, 323, 324, 311,
	82, 89, 121, 193, 148, 106, 179, 139, 0, 0,
	0, 0, 0, 0, 0, 0, 103, 0, 0, 0,
	0, 0, 120, 314, 122, 0, 0, 160, 131, 0,
	0, 0, 0, 305, 306, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 0, 272, 293, 292, 295,
	296, 297, 298, 0, 0, 96, 294, 299, 300, 301,
	0, 0, 0, 0, 286, 0, 313, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 284, 0, 0,
	0, 0, 327, 0, 285, 0, 0, 280, 281, 282,
	287, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 212, 0, 0, 325, 0, 146,
	0, 163, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 0, 0, 0, 99, 0, 153, 141, 176, 1434,
	142, 152, 123, 168, 147, 175, 184, 185, 165, 183,
	192, 84, 164, 174, 97, 156, 86, 172, 162, 129,
	115, 116, 85, 0, 180, 150, 102, 107, 101, 138,
	169, 170, 100, 195, 91, 182, 88, 92, 181, 136,
	167, 173, 130, 127, 87, 171, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 0,
	0, 161, 178, 196, 94, 0, 157, 166, 186, 187,
	188, 189, 190, 191, 0, 0, 95, 108, 104, 143,
	135, 93, 114, 158, 117, 124, 149, 194, 140, 154,
	98, 177, 159, 315, 326, 321, 322, 319, 320, 318,
	317, 316, 328, 307, 308, 309, 310, 312, 0, 323,
	324, 311, 82, 89, 121, 193, 148, 106, 179, 139,
	0, 0, 0, 0, 0, 0, 0, 0, 103, 0,
	0, 0, 0, 0, 120, 314, 122, 0, 0, 160,
	131, 0, 0, 0, 0, 305, 306, 0, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 504, 272, 293,
	292, 295, 296, 297, 298, 0, 0, 96, 294, 299,
	300, 301, 0, 0, 0, 0, 286, 0, 313, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 284,
	0, 0, 0, 0, 327, 0, 285, 0, 0, 280,
	281, 282, 287, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 212, 0, 0, 325,
	0, 146, 0, 163, 111, 119, 83, 90, 0, 110,
	137, 151, 155, 0, 0, 0, 99, 0, 153, 141,
	176, 0, 142, 152, 123, 168, 147, 175, 184, 185,
	165, 183, 192, 84, 164, 174, 97, 156, 86, 172,
	162, 129, 115, 116, 85, 0, 180, 150, 102, 107,
	101, 138, 169, 170, 100, 195, 91, 182, 88, 92,
	181, 136, 167, 173, 130, 127, 87, 171, 128, 126,
	118, 105, 112, 144, 125, 145, 113, 133, 132, 134,
	0, 0, 0, 161, 178, 196, 94, 0, 157, 166,
	186, 187, 188, 189, 190, 191, 0, 0, 95, 108,
	104, 143, 135, 93, 114, 158, 117, 124, 149, 194,
	140, 154, 98, 177, 159, 315, 326, 321, 322, 319,
	320, 318, 317, 316, 328, 307, 308, 309, 310, 312,
	0, 323, 324, 311, 82, 89, 121, 193, 148, 106,
	179, 139, 0, 0, 0, 0, 0, 0, 0, 0,
	103, 0, 0, 0, 0, 0, 120, 314, 122, 0,
	0, 160, 131, 0, 0, 0, 0, 305, 306, 0,
	0, 0, 0, 0, 0, 0, 0, 54, 0, 0,
	272, 293, 292, 295, 296, 297, 298, 0, 0, 96,
	294, 299, 300, 301, 0, 0, 0, 0, 286, 0,
	313, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 284, 0, 0, 0, 0, 327, 0, 285, 0,
	0, 280, 281, 282, 287, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 212, 0,
	0, 325, 0, 146, 0, 163, 111, 119, 83, 90,
	0, 110, 137, 151, 155, 0, 0, 0, 99, 0,
	153, 141, 176, 0, 142, 152, 123, 168, 147, 175,
	184, 185, 165, 183, 192, 84, 164, 174, 97, 156,
	86, 172, 162, 129, 115, 116, 85, 0, 180, 150,
	102, 107, 101, 138, 169, 170, 100, 195, 91, 182,
	88, 92, 181, 136, 167, 173, 130, 127, 87, 171,
	128, 126, 118, 105, 112, 144, 125, 145, 113, 133,
	132, 134, 0, 0, 0, 161, 178, 196, 94, 0,
	157, 166, 186, 187, 188, 189, 190, 191, 0, 0,
	95, 108, 104, 143, 135, 93, 114, 158, 117, 124,
	149, 194, 140, 154, 98, 177, 159, 315, 326, 321,
	322, 319, 320, 318, 317, 316, 328, 307, 308, 309,
	310, 312, 0, 323, 324, 311, 82, 89, 121, 193,
	148, 106, 179, 139, 0, 0, 0, 0, 0, 0,
	0, 0, 103, 0, 0, 0, 0, 0, 120, 0,
	122, 0, 0, 160, 131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 80, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 538, 537,
	547, 548, 540, 541, 542, 543, 544, 545, 546, 539,
	0, 0, 549, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	212, 0, 0, 0, 0, 146, 0, 163, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 0, 0, 0,
	99, 0, 153, 141, 176, 0, 142, 152, 123, 168,
	147, 175, 184, 185, 165, 183, 192, 84, 164, 174,
	97, 156, 86, 172, 162, 129, 115, 116, 85, 0,
	180, 150, 102, 107, 101, 138, 169, 170, 100, 195,
	91, 182, 88, 92, 181, 136, 167, 173, 130, 127,
	87, 171, 128, 126, 118, 105, 112, 144, 125, 145,
	113, 133, 132, 134, 0, 0, 0, 161, 178, 196,
	94, 0, 157, 166, 186, 187, 188, 189, 190, 191,
	0, 0, 95, 108, 104, 143, 135, 93, 114, 158,
	117, 124, 149, 194, 140, 154, 98, 177, 159, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 89,
	121, 193, 148, 106, 179, 139, 0, 0, 0, 526,
	0, 0, 0, 0, 103, 0, 0, 0, 0, 0,
	120, 0, 122, 0, 0, 160, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 80, 0, 528, 0, 0, 0,
	0, 0, 0, 96, 0, 0, 0, 0, 0, 523,
	522, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 524, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 212, 0, 0, 0, 0, 146, 0, 163,
	111, 119, 83, 90, 0, 110, 137, 151, 155, 0,
	0, 0, 99, 0, 153, 141, 176, 0, 142, 152,
	123, 168, 147, 175, 184, 185, 165, 183, 192, 84,
	164, 174, 97, 156, 86, 172, 162, 129, 115, 116,
	85, 0, 180, 150, 102, 107, 101, 138, 169, 170,
	100, 195, 91, 182, 88, 92, 181, 136, 167, 173,
	130, 127, 87, 171, 128, 126, 118, 105, 112, 144,
	125, 145, 113, 133, 132, 134, 0, 0, 0, 161,
	178, 196, 94, 0, 157, 166, 186, 187, 188, 189,
	190, 191, 0, 0, 95, 108, 104, 143, 135, 93,
	114, 158, 117, 124, 149, 194, 140, 154, 98, 177,
	159, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
	82, 89, 121, 193, 148, 106, 179, 103, 0, 0,
	0, 0, 0, 120, 0, 122, 0, 0, 160, 131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 80, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 0, 0,
	0, 0, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 76, 77, 0, 73, 0, 0, 0, 78,
	146, 0, 163, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 0, 0, 0, 99, 0, 153, 141, 176,
	0, 142, 152, 123, 168, 147, 175, 184, 185, 165,
	183, 192, 84, 164, 174, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 0, 180, 150, 102, 107, 101,
	138, 169, 170, 100, 195, 91, 182, 88, 92, 181,
	136, 167, 173, 130, 127, 87, 171, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	0, 0, 161, 178, 196, 94, 0, 157, 166, 186,
	187, 188, 189, 190, 191, 0, 0, 95, 108, 104,
	143, 135, 93, 114, 158, 117, 124, 149, 194, 140,
	154, 98, 177, 159, 0, 75, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 89, 121, 193, 148, 106, 179,
	139, 0, 0, 0, 854, 0, 0, 0, 0, 103,
	0, 0, 0, 0, 0, 120, 0, 122, 0, 0,
	160, 131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 210,
	0, 856, 0, 0, 0, 0, 0, 0, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 212, 0, 0,
	0, 0, 146, 0, 163, 111, 119, 83, 90, 0,
	110, 137, 151, 155, 0, 0, 0, 99, 0, 153,
	141, 176, 0, 142, 152, 123, 168, 147, 175, 184,
	185, 165, 183, 192, 84, 164, 174, 97, 156, 86,
	172, 162, 129, 115, 116, 85, 0, 180, 150, 102,
	107, 101, 138, 169, 170, 100, 195, 91, 182, 88,
	92, 181, 136, 167, 173, 130, 127, 87, 171, 128,
	126, 118, 105, 112, 144, 125, 145, 113, 133, 132,
	134, 0, 0, 0, 161, 178, 196, 94, 0, 157,
	166, 186, 187, 188, 189, 190, 191, 0, 0, 95,
	108, 104, 143, 135, 93, 114, 158, 117, 124, 149,
	194, 140, 154, 98, 177, 159, 0, 0, 0, 0,
	0, 24, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 82, 89, 121, 193, 148,
	106, 179, 103, 0, 0, 0, 0, 0, 120, 0,
	122, 0, 0, 160, 131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 54,
	0, 0, 80, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	212, 0, 0, 0, 0, 146, 0, 163, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 0, 0, 0,
	99, 0, 153, 141, 176, 0, 142, 152, 123, 168,
	147, 175, 184, 185, 165, 183, 192, 84, 164, 174,
	97, 156, 86, 172, 162, 129, 115, 116, 85, 0,
	180, 150, 102, 107, 101, 138, 169, 170, 100, 195,
	91, 182, 88, 92, 181, 136, 167, 173, 130, 127,
	87, 171, 128, 126, 118, 105, 112, 144, 125, 145,
	113, 133, 132, 134, 0, 0, 0, 161, 178, 196,
	94, 0, 157, 166, 186, 187, 188, 189, 190, 191,
	0, 0, 95, 108, 104, 143, 135, 93, 114, 158,
	117, 124, 149, 194, 140, 154, 98, 177, 159, 0,
	0, 0, 0, 0, 24, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 0, 82, 89,
	121, 193, 148, 106, 179, 103, 0, 0, 0, 0,
	0, 120, 0, 122, 0, 0, 160, 131, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 0, 210, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 0, 0, 212, 0, 0, 0, 0, 146, 0,
	163, 111, 119, 83, 90, 0, 110, 137, 151, 155,
	0, 0, 0, 99, 0, 153, 141, 176, 0, 142,
	152, 123, 168, 147, 175, 184, 185, 165, 183, 192,
	84, 164, 174, 97, 156, 86, 172, 162, 129, 115,
	116, 85, 0, 180, 150, 102, 107, 101, 138, 169,
	170, 100, 195, 91, 182, 88, 92, 181, 136, 167,
	173, 130, 127, 87, 171, 128, 126, 118, 105, 112,
	144, 125, 145, 113, 133, 132, 134, 0, 0, 0,
	161, 178, 196, 94, 0, 157, 166, 186, 187, 188,
	189, 190, 191, 0, 0, 95, 108, 104, 143, 135,
	93, 114, 158, 117, 124, 149, 194, 140, 154, 98,
	177, 159, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 89, 121, 193, 148, 106, 179, 139, 0,
	0, 0, 854, 0, 0, 0, 0, 103, 0, 0,
	0, 0, 0, 120, 0, 122, 0, 0, 160, 131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 210, 0, 856,
	0, 0, 0, 0, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 212, 0, 0, 0, 0,
	146, 0, 163, 111, 119, 83, 90, 0, 110, 137,
	151, 155, 0, 0, 0, 99, 0, 153, 141, 176,
	0, 852, 152, 123, 168, 147, 175, 184, 185, 165,
	183, 192, 84, 164, 174, 97, 156, 86, 172, 162,
	129, 115, 116, 85, 0, 180, 150, 102, 107, 101,
	138, 169, 170, 100, 195, 91, 182, 88, 92, 181,
	136, 167, 173, 130, 127, 87, 171, 128, 126, 118,
	105, 112, 144, 125, 145, 113, 133, 132, 134, 0,
	0, 0, 161, 178, 196, 94, 0, 157, 166, 186,
	187, 188, 189, 190, 191, 0, 0, 95, 108, 104,
	143, 135, 93, 114, 158, 117, 124, 149, 194, 140,
	154, 98, 177, 159, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 82, 89, 121, 193, 148, 106, 179,
	103, 0, 0, 0, 0, 0, 120, 0, 122, 0,
	0, 160, 131, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	80, 0, 0, 749, 0, 0, 750, 0, 0, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 212, 0,
	0, 0, 0, 146, 0, 163, 111, 119, 83, 90,
	0, 110, 137, 151, 155, 0, 0, 0, 99, 0,
	153, 141, 176, 0, 142, 152, 123, 168, 147, 175,
	184, 185, 165, 183, 192, 84, 164, 174, 97, 156,
	86, 172, 162, 129, 115, 116, 85, 0, 180, 150,
	102, 107, 101, 138, 169, 170, 100, 195, 91, 182,
	88, 92, 181, 136, 167, 173, 130, 127, 87, 171,
	128, 126, 118, 105, 112, 144, 125, 145, 113, 133,
	132, 134, 0, 0, 0, 161, 178, 196, 94, 0,
	157, 166, 186, 187, 188, 189, 190, 191, 0, 0,
	95, 108, 104, 143, 135, 93, 114, 158, 117, 124,
	149, 194, 140, 154, 98, 177, 159, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 0, 82, 89, 121, 193,
	148, 106, 179, 103, 0, 637, 0, 0, 0, 120,
	0, 122, 0, 0, 160, 131, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 80, 0, 636, 0, 0, 0, 0,
	0, 0, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 212, 0, 0, 0, 0, 146, 0, 163, 111,
	119, 83, 90, 0, 110, 137, 151, 155, 0, 0,
	0, 99, 0, 153, 141, 176, 0, 142, 152, 123,
	168, 147, 175, 184, 185, 165, 183, 192, 84, 164,
	174, 97, 156, 86, 172, 162, 129, 115, 116, 85,
	0, 180, 150, 102, 107, 101, 138, 169, 170, 100,
	195, 91, 182, 88, 92, 181, 136, 167, 173, 130,
	127, 87, 171, 128, 126, 118, 105, 112, 144, 125,
	145, 113, 133, 132, 134, 0, 0, 0, 161, 178,
	196, 94, 0, 157, 166, 186, 187, 188, 189, 190,
	191, 0, 0, 95, 108, 104, 143, 135, 93, 114,
	158, 117, 124, 149, 194, 140, 154, 98, 177, 159,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 0, 82,
	89, 121, 193, 148, 106, 179, 103, 0, 0, 0,
	0, 0, 120, 0, 122, 0, 0, 160, 131, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 0, 210, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 212, 0, 0, 0, 0, 146,
	0, 163, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 0, 0, 0, 99, 0, 153, 141, 176, 0,
	142, 152, 123, 168, 147, 175, 184, 185, 165, 183,
	192, 84, 164, 174, 97, 156, 86, 172, 162, 129,
	115, 116, 85, 0, 180, 150, 102, 107, 101, 138,
	169, 170, 100, 195, 91, 182, 88, 92, 181, 136,
	167, 173, 130, 127, 87, 171, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 0,
	0, 161, 178, 196, 94, 0, 157, 166, 186, 187,
	188, 189, 190, 191, 0, 0, 95, 108, 104, 143,
	135, 93, 114, 158, 117, 124, 149, 194, 140, 154,
	98, 177, 159, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 0, 82, 89, 121, 193, 148, 106, 179, 103,
	0, 0, 0, 0, 0, 120, 0, 122, 0, 0,
	160, 131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 210,
	0, 856, 0, 0, 0, 0, 0, 0, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 212, 0, 0,
	0, 0, 146, 0, 163, 111, 119, 83, 90, 0,
	110, 137, 151, 155, 0, 0, 0, 99, 0, 153,
	141, 176, 0, 142, 152, 123, 168, 147, 175, 184,
	185, 165, 183, 192, 84, 164, 174, 97, 156, 86,
	172, 162, 129, 115, 116, 85, 0, 180, 150, 102,
	107, 101, 138, 169, 170, 100, 195, 91, 182, 88,
	92, 181, 136, 167, 173, 130, 127, 87, 171, 128,
	126, 118, 105, 112, 144, 125, 145, 113, 133, 132,
	134, 0, 0, 0, 161, 178, 196, 94, 0, 157,
	166, 186, 187, 188, 189, 190, 191, 0, 0, 95,
	108, 104, 143, 135, 93, 114, 158, 117, 124, 149,
	194, 140, 154, 98, 177, 159, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 82, 89, 121, 193, 148,
	106, 179, 103, 0, 0, 0, 0, 0, 120, 0,
	122, 0, 0, 160, 131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 80, 0, 528, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	212, 0, 0, 0, 0, 146, 0, 163, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 0, 0, 0,
	99, 0, 153, 141, 176, 0, 142, 152, 123, 168,
	147, 175, 184, 185, 165, 183, 192, 84, 164, 174,
	97, 156, 86, 172, 162, 129, 115, 116, 85, 0,
	180, 150, 102, 107, 101, 138, 169, 170, 100, 195,
	91, 182, 88, 92, 181, 136, 167, 173, 130, 127,
	87, 171, 128, 126, 118, 105, 112, 144, 125, 145,
	113, 133, 132, 134, 0, 0, 0, 161, 178, 196,
	94, 0, 157, 166, 186, 187, 188, 189, 190, 191,
	0, 0, 95, 108, 104, 143, 135, 93, 114, 158,
	117, 124, 149, 194, 140, 154, 98, 177, 159, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 82, 89,
	121, 193, 148, 106, 179, 610, 103, 0, 0, 0,
	0, 0, 120, 0, 122, 0, 0, 160, 131, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 210, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 212, 0, 0, 0, 0, 146,
	0, 163, 111, 119, 83, 90, 0, 110, 137, 151,
	155, 0, 0, 0, 99, 0, 153, 141, 176, 0,
	142, 152, 123, 168, 147, 175, 184, 185, 165, 183,
	192, 84, 164, 174, 97, 156, 86, 172, 162, 129,
	115, 116, 85, 0, 180, 150, 102, 107, 101, 138,
	169, 170, 100, 195, 91, 182, 88, 92, 181, 136,
	167, 173, 130, 127, 87, 171, 128, 126, 118, 105,
	112, 144, 125, 145, 113, 133, 132, 134, 0, 0,
	0, 161, 178, 196, 94, 0, 157, 166, 186, 187,
	188, 189, 190, 191, 0, 0, 95, 108, 104, 143,
	135, 93, 114, 158, 117, 124, 149, 194, 140, 154,
	98, 177, 159, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 331, 0, 0, 0, 0, 0, 0,
	139, 0, 82, 89, 121, 193, 148, 106, 179, 103,
	0, 0, 0, 0, 0, 120, 0, 122, 0, 0,
	160, 131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 210,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 212, 0, 0,
	0, 0, 146, 0, 163, 111, 119, 83, 90, 0,
	110, 137, 151, 155, 0, 0, 0, 99, 0, 153,
	141, 176, 0, 142, 152, 123, 168, 147, 175, 184,
	185, 165, 183, 192, 84, 164, 174, 97, 156, 86,
	172, 162, 129, 115, 116, 85, 0, 180, 150, 102,
	107, 101, 138, 169, 170, 100, 195, 91, 182, 88,
	92, 181, 136, 167, 173, 130, 127, 87, 171, 128,
	126, 118, 105, 112, 144, 125, 145, 113, 133, 132,
	134, 0, 0, 0, 161, 178, 196, 94, 0, 157,
	166, 186, 187, 188, 189, 190, 191, 0, 0, 95,
	108, 104, 143, 135, 93, 114, 158, 117, 124, 149,
	194, 140, 154, 98, 177, 159, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 82, 89, 121, 193, 148,
	106, 179, 103, 0, 0, 0, 0, 0, 120, 0,
	122, 0, 0, 160, 131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 210, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 0, 207, 0,
	212, 0, 0, 0, 0, 146, 0, 163, 111, 119,
	83, 90, 0, 110, 137, 151, 155, 0, 0, 0,
	99, 0, 153, 141, 176, 0, 142, 152, 123, 168,
	147, 175, 184, 185, 165, 183, 192, 84, 164, 174,
	97, 156, 86, 172, 162, 129, 115, 116, 85, 0,
	180, 150, 102, 107, 101, 138, 169, 170, 100, 195,
	91, 182, 88, 92, 181, 136, 167, 173, 130, 127,
	87, 171, 128, 126, 118, 105, 112, 144, 125, 145,
	113, 133, 132, 134, 0, 0, 0, 161, 178, 196,
	94, 0, 157, 166, 186, 187, 188, 189, 190, 191,
	0, 0, 95, 108, 104, 143, 135, 93, 114, 158,
	117, 124, 149, 194, 140, 154, 98, 177, 159, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 0, 82, 89,
	121, 193, 148, 106, 179, 103, 0, 0, 0, 0,
	0, 120, 0, 122, 0, 0, 160, 131, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 80, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 0, 0, 212, 0, 0, 0, 0, 146, 0,
	163, 111, 119, 83, 90, 0, 110, 137, 151, 155,
	0, 0, 0, 99, 0, 153, 141, 176, 0, 142,
	152, 123, 168, 147, 175, 184, 185, 165, 183, 192,
	84, 164, 174, 97, 156, 86, 172, 162, 129, 115,
	116, 85, 0, 180, 150, 102, 107, 101, 138, 169,
	170, 100, 195, 91, 182, 88, 92, 181, 136, 167,
	173, 130, 127, 87, 171, 128, 126, 118, 105, 112,
	144, 125, 145, 113, 133, 132, 134, 0, 0, 0,
	161, 178, 196, 94, 0, 157, 166, 186, 187, 188,
	189, 190, 191, 0, 0, 95, 108, 104, 143, 135,
	93, 114, 158, 117, 124, 149, 194, 140, 154, 98,
	177, 159, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	0, 82, 89, 121, 193, 148, 106, 179, 103, 0,
	0, 0, 0, 0, 120, 0, 122, 0, 0, 160,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 210, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 212, 0, 0, 0,
	0, 146, 0, 163, 111, 119, 83, 90, 0, 110,
	137, 151, 155, 0, 0, 0, 99, 0, 153, 141,
	176, 0, 142, 152, 123, 168, 147, 175, 184, 185,
	165, 183, 192, 84, 164, 174, 97, 156, 86, 172,
	162, 129, 115, 116, 85, 0, 180, 150, 102, 107,
	101, 138, 169, 170, 100, 195, 91, 182, 88, 92,
	181, 136, 167, 173, 130, 127, 87, 171, 128, 126,
	118, 105, 112, 144, 125, 145, 113, 133, 132, 134,
	0, 0, 0, 161, 178, 196, 94, 0, 157, 166,
	186, 187, 188, 189, 190, 191, 0, 0, 95, 108,
	104, 143, 135, 93, 114, 158, 117, 124, 149, 194,
	140, 154, 98, 177, 159, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 82, 89, 121, 193, 148, 106,
	179, 103, 0, 0, 0, 0, 0, 120, 0, 122,
	0, 0, 160, 131, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 272, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 212,
	0, 0, 0, 0, 146, 0, 163, 111, 119, 83,
	90, 0, 110, 137, 151, 155, 0, 0, 0, 99,
	0, 153, 141, 176, 0, 142, 152, 123, 168, 147,
	175, 184, 185, 165, 183, 192, 84, 164, 174, 97,
	156, 86, 172, 162, 129, 115, 116, 85, 0, 180,
	150, 102, 107, 101, 138, 169, 170, 100, 195, 91,
	182, 88, 92, 181, 136, 167, 173, 130, 127, 87,
	171, 128, 126, 118, 105, 112, 144, 125, 145, 113,
	133, 132, 134, 0, 0, 0, 161, 178, 196, 94,
	0, 157, 166, 186, 187, 188, 189, 190, 191, 0,
	0, 95, 108, 104, 143, 135, 93, 114, 158, 117,
	124, 149, 194, 140, 154, 98, 177, 159, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 89, 121,
	193, 148, 106, 179,
}
var yyPact = [...]int{

	2096, -1000, -189, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 839, 863, -1000, -1000, -1000, -1000, -1000, -1000,
	306, 8940, 27, 115, 25, 11875, 111, 1707, 12361, -1000,
	8, -1000, -1000, -1000, 12361, -1000, -1000, -1000, -73, -76,
	-1000, 695, -1000, -1000, -1000, -1000, -1000, 833, 842, 739,
	832, 774, -1000, 6428, 69, 69, 11632, 5420, -1000, -1000,
	254, 12361, 97, 12361, -152, 67, 67, 67, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 108, 12361, 226,
	-1000, 12361, 66, 564, 66, 66, 66, 12361, -1000, 179,
	-1000, -1000, -1000, 12361, 560, 795, 3300, 45, 3300, 3300,
	-1000, 3300, 3300, -1000, 3300, 14, 3300, -67, 853, -1000,
	-1000, -1000, -1000, -32, -1000, 3300, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	490, 804, 7437, 7437, 839, -1000, 695, -1000, -1000, -1000,
	797, -1000, -1000, 325, 862, -1000, 8697, 174, -1000, 7437,
	1989, 589, -1000, -1000, 589, -1000, -1000, 167, -1000, -1000,
	8193, 8193, 8193, 8193, 8193, 8193, 8193, 8193, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 589, -1000, 7185, 589, 589, 589, 589, 589,
	589, 589, 589, 7437, 589, 589, 589, 589, 589, 589,
	589, 589, 589, 589, 589, 589, 589, 589, 589, 11389,
	10659, 12361, 627, -1000, 676, 5155, -132, -1000, -1000, -1000,
	251, 10416, -1000, -1000, -1000, 794, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 573, 12361, -1000, 2134, -1000, 559, 3300,
	86, 558, 314, 553, 12361, 12361, 3300, 26, 52, 101,
	12361, 681, 84, 12361, 822, 743, 12361, 551, 546, -1000,
	4890, -1000, 3300, 3300, -1000, -1000, -1000, 3300, 3300, 3300,
	12361, 3300, 3300, -1000, -1000, -1000, -1000, -1000, 3300, 3300,
	-1000, 861, 299, -1000, -1000, -1000, -1000, 7437, -1000, 742,
	-1000, -1000, -1000, -1000, -1000, -1000, 880, 202, 386, 173,
	679, -1000, 480, 833, 490, 774, 10173, 729, -1000, -1000,
	12361, -1000, 7437, 7437, 469, -1000, 11145, -1000, -1000, 3830,
	207, 8193, 423, 233, 8193, 8193, 8193, 8193, 8193, 8193,
	8193, 8193, 8193, 8193, 8193, 8193, 8193, 8193, 8193, 372,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 530, -1000,
	695, 680, 680, 186, 186, 186, 186, 186, 186, 186,
	8445, 5924, 490, 557, 422, 7185, 6428, 6428, 7437, 7437,
	6932, 6680, 6428, 826, 237, 422, 12604, -1000, -1000, 7941,
	-1000, -1000, -1000, -1000, -1000, 490, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 12118, 12118, 6428, 6428, 6428, 6428, 36,
	12361, -1000, 620, 719, -1000, -1000, -1000, 824, 9678, 9930,
	36, 628, 10659, 12361, -1000, -1000, 4625, 676, -132, 669,
	-1000, -125, -98, 5672, 143, -1000, -1000, -1000, -1000, 3035,
	190, 588, 378, -1000, -56, -1000, -1000, -1000, -1000, 697,
	-1000, -1000, 697, 697, 697, 697, -30, -30, -30, -30,
	-1000, -1000, -1000, -1000, -1000, 722, 721, -1000, 697, 697,
	697, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 720,
	720, 720, 699, 699, 725, -1000, 12361, 3300, 821, 3300,
	-1000, 124, -1000, 12118, 12118, 12361, 12361, 128, 12361, 12361,
	674, -1000, 12361, 3300, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 12361,
	333, 12361, 12361, 422, 12361, -1000, 735, 7437, 7437, 4360,
	7437, -1000, -1000, -1000, 804, -1000, 826, 838, -1000, 786,
	785, 6428, -1000, -1000, 207, 303, -1000, -1000, 462, -1000,
	-1000, -1000, -1000, 162, 589, -1000, 1904, -1000, -1000, -1000,
	-1000, 423, 8193, 8193, 8193, 479, 1904, 1659, 1501, 2290,
	186, 335, 335, 188, 188, 188, 188, 188, 154, 154,
	-1000, -1000, -1000, 490, -1000, -1000, -1000, 490, 6428, 672,
	-1000, -1000, 7437, -1000, 490, 543, 543, 413, 425, 273,
	860, 543, 266, 859, 543, 543, 6428, 270, -1000, 7437,
	490, -1000, 152, -1000, 1476, 671, 670, 543, 490, 543,
	543, 603, 589, -1000, 12604, 10659, 10659, 10659, 10659, 10659,
	-1000, 767, 759, -1000, 755, 749, 763, 12361, -1000, 545,
	9678, 156, 589, -1000, 10902, -1000, -1000, 852, 10659, 644,
	-1000, -1000, 669, -132, -133, -1000, -1000, -1000, -1000, 422,
	-1000, 442, 668, 2770, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 712, 513, -1000, 806, 184, 205, 501, 803, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 279,
	8193, 872, -1000, 802, -1000, 799, 447, -68, -1000, -1000,
	391, -30, -30, -1000, -1000, 143, 791, 143, 143, 143,
	433, 433, -1000, -1000, -1000, -1000, 388, -1000, -1000, -1000,
	383, -1000, 740, 12118, 3300, -1000, -1000, -1000, -1000, 289,
	289, 175, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 34, 724, -1000, -1000, -1000, 23, 19,
	79, -1000, 3300, -1000, 299, -1000, 417, 7437, -1000, -1000,
	-1000, 777, 422, 422, 131, -1000, -1000, 12361, -1000, -1000,
	-1000, -1000, 661, -1000, -1000, -1000, 3565, 6428, -1000, 479,
	1904, 829, -1000, 8193, 8193, -1000, -1000, 543, 6428, 422,
	-1000, -1000, -1000, 47, 372, 47, 8193, 8193, -1000, 8193,
	8193, -1000, -170, 599, 256, -1000, 7437, 381, -1000, 4360,
	-1000, 8193, 8193, -1000, -1000, -1000, -1000, 736, 12604, 589,
	-1000, 9435, 12118, 656, -1000, 244, 719, 718, 734, 618,
	-1000, -1000, -1000, -1000, 758, -1000, 757, -1000, -1000, -1000,
	-1000, -1000, 92, 91, 89, 12118, -1000, 839, 7437, 644,
	-1000, -1000, -1000, -128, -104, -1000, -1000, -1000, 3035, -1000,
	3035, 12118, 51, -1000, 501, 501, -1000, -1000, -1000, 700,
	-1000, 1904, -117, -1000, -1000, -1000, -1000, -1000, 585, 143,
	143, -1000, 231, -1000, -1000, -1000, 541, -1000, 536, 667,
	529, 12361, -1000, -1000, -1000, 455, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 484, -1000, 477,
	12361, -1000, -1000, -1000, -1000, -1000, 12118, -177, 461, 12118,
	12118, 12361, -1000, 333, -1000, 422, -1000, 4095, -1000, 852,
	10659, -1000, -1000, 490, -1000, 8193, 1904, 1904, -1000, -1000,
	490, 697, 697, -1000, 697, 699, -1000, 697, -1, 697,
	-5, 490, 490, 2276, 2261, 2059, 1934, 589, -160, -1000,
	422, 7437, -1000, 1688, 1610, -1000, 814, 587, 630, -1000,
	-1000, 6176, 490, 512, 127, 510, -1000, 839, 12604, 7437,
	-1000, -1000, 7437, 698, -1000, 7437, -1000, -1000, -1000, 589,
	589, 589, 510, 833, 422, -1000, -1000, -1000, -1000, 2770,
	-1000, 508, -1000, 697, -1000, -1000, -1000, 12118, -1000, -1000,
	-1000, -1000, -1000, -1000, -30, 410, -30, 365, -1000, 357,
	3300, 456, -1000, -1000, -1000, -1000, 176, -1000, -1000, 816,
	-1000, 4095, -1000, -1000, 696, -1000, -1000, -1000, 848, 666,
	-1000, 1904, -1000, -1000, 112, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 8193, 8193, 8193, 8193, 8193, 490, 406,
	422, 8193, 8193, 798, -1000, 589, -1000, -1000, 640, 12118,
	12118, -1000, 12118, 833, -1000, 422, 422, 12118, 422, 12118,
	12118, 12118, 9192, -1000, 138, 12118, -1000, 505, -1000, 143,
	-1000, 143, 578, 575, -1000, 570, -1000, 453, -1000, -1000,
	589, 657, -1000, 234, 12118, 846, 840, -1000, -1000, 1476,
	1476, 1476, 1476, 21, -1000, -1000, 1476, 1476, 868, -1000,
	589, -1000, 695, 123, -1000, -1000, -1000, 499, 494, 494,
	494, 156, 138, -1000, 415, 223, 336, -1000, 48, 12118,
	-1000, -1000, -1000, -1000, -1000, -1000, 33, 4095, 3035, 489,
	-1000, 7437, 7437, -1000, -1000, -1000, -1000, 490, 43, -181,
	-1000, -1000, 12604, 630, 490, 12118, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 356, -1000, -1000, 12361, -1000, -1000, 467,
	-1000, 12118, -1000, -1000, 724, 422, 604, -1000, 773, -175,
	-184, 594, -1000, -1000, -1000, 683, -1000, 33, 783, -177,
	-1000, 771, -1000, 12118, -1000, 29, -1000, -179, 460, 24,
	-182, 731, 589, -185, 728, -1000, 857, 7689, -1000, -1000,
	866, 199, 199, 1476, 490, -1000, -1000, -1000, 58, 360,
	-1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1155, 56, 488, 1154, 1153, 1152, 1151, 1150, 1148,
	1146, 1145, 1144, 1143, 1142, 1140, 1137, 1136, 1135, 1134,
	1129, 1128, 1126, 1125, 1124, 1122, 136, 1116, 1115, 1113,
	71, 1112, 77, 1111, 1109, 35, 70, 38, 48, 179,
	1103, 50, 64, 55, 1099, 33, 1093, 1091, 78, 1086,
	54, 1085, 1084, 1488, 1080, 1074, 13, 30, 1070, 1068,
	1067, 1066, 73, 405, 1065, 1063, 23, 1062, 1061, 91,
	1060, 60, 10, 14, 18, 28, 1059, 708, 8, 1058,
	58, 1057, 1055, 1054, 1053, 24, 1050, 62, 1031, 19,
	61, 1030, 9, 63, 25, 21, 5, 79, 66, 1029,
	20, 69, 51, 1028, 1027, 491, 44, 1024, 1023, 40,
	1022, 1021, 27, 177, 385, 1020, 1018, 1017, 1016, 1015,
	29, 0, 562, 88, 75, 1014, 1013, 1011, 1438, 76,
	53, 16, 1010, 49, 1506, 41, 1008, 1007, 37, 1006,
	1004, 1003, 997, 996, 994, 993, 992, 991, 304, 990,
	989, 986, 59, 82, 980, 979, 65, 26, 977, 976,
	970, 42, 17, 969, 968, 52, 22, 967, 966, 965,
	961, 956, 31, 6, 955, 15, 921, 11, 919, 34,
	916, 2, 914, 12, 913, 7, 912, 3, 43, 1,
	911, 4, 906, 896, 46, 289, 894, 891, 80,
}
var yyR1 = [...]int{

	0, 192, 193, 193, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 6, 3, 4,
	4, 5, 5, 7, 7, 29, 29, 8, 9, 9,
	9, 196, 196, 48, 48, 93, 93, 10, 10, 10,
	10, 98, 98, 102, 102, 102, 103, 103, 103, 103,
	136, 136, 11, 11, 11, 11, 11, 11, 11, 187,
	187, 186, 185, 185, 184, 184, 183, 17, 168, 170,
	170, 169, 169, 169, 169, 162, 140, 140, 140, 140,
	140, 140, 140, 139, 139, 139, 139, 139, 143, 143,
	144, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	142, 142, 142, 142, 142, 145, 145, 145, 145, 145,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 147, 147, 147, 147, 147,
	147, 147, 147, 161, 161, 148, 148, 156, 156, 157,
	157, 157, 154, 154, 155, 155, 158, 158, 150, 151,
	159, 152, 152, 152, 153, 153, 153, 160, 160, 160,
	160, 149, 163, 163, 178, 178, 177, 177, 177, 167,
	167, 174, 174, 174, 174, 174, 165, 165, 166, 166,
	176, 176, 175, 164, 164, 179, 179, 179, 179, 190,
	191, 189, 189, 189, 189, 189, 171, 171, 171, 172,
	172, 172, 173, 173, 173, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 106, 106, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 182, 180, 180, 181, 181, 13, 18,
	18, 14, 14, 14, 14, 14, 15, 15, 19, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 110, 110, 108, 108, 111, 111, 109, 109, 109,
	112, 112, 112, 137, 137, 137, 21, 21, 23, 23,
	24, 25, 22, 22, 22, 22, 22, 22, 22, 22,
	16, 197, 26, 27, 27, 28, 28, 28, 32, 32,
	32, 30, 30, 31, 31, 37, 37, 36, 36, 38,
	38, 38, 38, 125, 125, 125, 124, 124, 40, 40,
	41, 41, 42, 42, 43, 43, 43, 43, 55, 55,
	92, 92, 94, 94, 44, 44, 44, 44, 45, 45,
	46, 46, 47, 47, 132, 132, 131, 131, 131, 130,
	130, 49, 49, 49, 51, 50, 50, 50, 50, 52,
	52, 54, 54, 53, 53, 56, 56, 56, 56, 57,
	57, 39, 39, 39, 39, 39, 39, 39, 107, 107,
	59, 59, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 70, 70, 70, 70, 70, 70, 60, 60,
	60, 60, 60, 60, 60, 35, 35, 71, 71, 71,
	77, 72, 72, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 67, 67, 67, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 198, 198, 69,
	68, 68, 68, 68, 68, 68, 33, 33, 33, 33,
	33, 135, 135, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 81, 81, 34, 34,
	79, 79, 80, 82, 82, 78, 78, 78, 62, 62,
	62, 62, 62, 62, 62, 62, 64, 64, 64, 83,
	83, 84, 84, 85, 85, 86, 86, 87, 88, 88,
	88, 89, 89, 89, 89, 90, 90, 90, 61, 61,
	61, 61, 61, 61, 91, 91, 91, 91, 95, 95,
	73, 73, 75, 75, 74, 76, 96, 96, 100, 97,
	97, 101, 101, 101, 101, 99, 99, 99, 127, 127,
	127, 104, 104, 113, 113, 114, 114, 105, 105, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 117,
	117, 116, 116, 116, 118, 118, 119, 119, 119, 126,
	126, 122, 122, 123, 123, 128, 128, 129, 129, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 194, 195, 133, 134, 134, 134,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 4, 6, 7, 5, 10, 1,
	3, 1, 3, 7, 8, 1, 1, 9, 8, 7,
	6, 1, 1, 1, 3, 0, 4, 3, 4, 5,
	4, 1, 3, 3, 2, 2, 2, 2, 2, 1,
	1, 1, 2, 2, 8, 4, 6, 5, 5, 0,
	2, 1, 0, 2, 1, 3, 3, 4, 4, 2,
	4, 1, 3, 3, 3, 2, 1, 2, 2, 2,
	2, 2, 2, 3, 1, 1, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 1,
	4, 4, 2, 2, 3, 3, 3, 3, 1, 1,
	1, 1, 1, 6, 6, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 3, 0, 5, 0,
	3, 5, 0, 1, 0, 1, 1, 2, 2, 3,
	1, 0, 3, 3, 0, 2, 2, 2, 1, 2,
	1, 2, 5, 4, 1, 2, 2, 3, 2, 0,
	1, 2, 3, 3, 2, 2, 1, 1, 0, 1,
	1, 3, 2, 3, 1, 10, 11, 11, 12, 3,
	3, 1, 1, 2, 2, 2, 0, 1, 3, 1,
	2, 3, 1, 1, 1, 6, 10, 8, 7, 7,
	7, 9, 7, 7, 4, 5, 7, 5, 5, 5,
	12, 7, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 7, 1, 3, 8, 8, 3, 3,
	5, 4, 6, 5, 4, 4, 3, 2, 3, 4,
	4, 3, 4, 4, 4, 4, 4, 4, 3, 3,
	2, 3, 3, 2, 3, 4, 3, 7, 5, 4,
	2, 4, 2, 2, 2, 2, 3, 3, 5, 2,
	3, 1, 1, 0, 1, 1, 1, 0, 2, 2,
	0, 2, 2, 0, 1, 1, 2, 1, 1, 2,
	1, 1, 2, 2, 2, 2, 2, 2, 3, 3,
	2, 0, 2, 0, 2, 1, 2, 2, 0, 1,
	1, 0, 1, 0, 1, 0, 1, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 1, 0, 2,
	1, 3, 1, 1, 1, 3, 1, 3, 3, 7,
	1, 3, 1, 3, 4, 4, 4, 3, 2, 4,
	0, 1, 0, 2, 0, 1, 0, 1, 2, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 0, 5, 5, 5, 0,
	2, 1, 3, 3, 2, 3, 1, 2, 0, 3,
	1, 1, 3, 3, 4, 4, 5, 3, 4, 5,
	6, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 2, 2, 2, 2, 2,
	3, 1, 1, 1, 1, 4, 5, 6, 4, 4,
	6, 6, 6, 8, 8, 8, 8, 9, 7, 5,
	4, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 8, 8, 0, 2, 3,
	4, 4, 4, 4, 4, 4, 0, 3, 4, 7,
	3, 1, 1, 2, 3, 3, 1, 2, 2, 1,
	2, 1, 2, 2, 1, 2, 0, 1, 0, 2,
	1, 2, 4, 0, 2, 1, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 0,
	3, 0, 2, 0, 3, 1, 3, 2, 0, 1,
	1, 0, 2, 4, 4, 0, 2, 4, 2, 1,
	3, 5, 4, 6, 1, 3, 3, 5, 0, 5,
	1, 3, 1, 2, 3, 1, 1, 3, 3, 1,
	3, 3, 3, 3, 3, 1, 2, 1, 1, 1,
	1, 1, 1, 0, 2, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 0, 1, 1, 0,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -192, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -19, -20, -21, -23, -24, -25,
	-22, -16, -3, -4, 6, 7, -29, 9, 10, 30,
	-17, 115, 116, 118, 117, 149, 119, 142, 50, 162,
	163, 165, 166, 25, 143, 144, 147, 148, 31, 32,
	121, -194, 8, 253, 54, -193, 270, -85, 15, -28,
	5, -26, -197, -26, -26, -26, -26, -26, -168, -170,
	54, 90, -119, 125, 72, 245, 122, 123, 129, -122,
	57, -121, 263, 135, 162, 173, 167, 195, 187, 264,
	136, 185, 188, 232, 215, 227, 66, 165, 241, 145,
	183, 179, 177, 27, 229, 200, 268, 178, 228, 121,
	138, 133, 201, 205, 233, 171, 172, 235, 199, 134,
	33, 265, 35, 153, 236, 203, 198, 194, 197, 170,
	193, 39, 207, 206, 208, 231, 190, 139, 180, 18,
	239, 148, 151, 230, 202, 204, 130, 155, 267, 237,
	176, 140, 152, 147, 240, 141, 166, 217, 234, 243,
	38, 212, 169, 132, 163, 159, 218, 191, 154, 181,
	182, 196, 168, 192, 164, 156, 149, 242, 213, 269,
	175, 189, 186, 160, 157, 158, 219, 220, 221, 222,
	223, 224, 161, 266, 238, 184, 214, -105, 125, 222,
	127, 123, 123, 124, 125, 245, 122, 123, -53, -128,
	57, -121, 125, 123, 108, 188, 232, 115, 216, 217,
	229, 124, 33, 230, 155, -137, 123, -108, 215, 219,
	220, 221, 224, 222, 161, 57, 234, 233, 225, -128,
	164, -133, -53, -133, -133, -133, -133, 218, 218, -133,
	-2, -89, 17, 16, -5, -3, -194, 6, 20, 21,
	-32, 40, 41, -27, -38, 99, -39, -128, -58, 74,
	-63, 29, 57, -121, 23, -62, -59, -78, -76, -77,
	108, 109, 110, 97, 98, 105, 75, 111, -67, -65,
	-66, -68, 59, 58, 67, 60, 61, 62, 63, 68,
	69, 70, -122, -74, -194, 44, 45, 254, 255, 256,
	257, 262, 258, 77, 34, 244, 252, 251, 250, 248,
	249, 246, 247, 260, 261, 128, 245, 103, 253, -105,
	-105, 11, -48, -53, -97, -136, 164, -101, 234, 233,
	-123, -99, -122, -120, 232, 188, 231, 120, 73, 22,
	24, 210, 76, 108, 16, 77, 107, 254, 115, 48,
	246, 247, 244, 256, 257, 245, 216, 29, 10, 25,
	143, 21, 101, 117, 80, 81, 146, 23, 144, 70,
	19, 51, 11, 13, 14, 128, 127, 92, 124, 46,
	8, 111, 26, 89, 42, 28, 44, 90, 17, 248,
	249, 31, 262, 150, 103, 49, 36, 74, 68, 71,
	52, 72, 15, 47, 91, 118, 253, 45, 122, 6,
	259, 30, 142, 43, 123, 79, 260, 261, 126, 69,
	5, 129, 32, 9, 50, 53, 250, 251, 252, 175,
	34, 78, 12, -169, 90, -162, 57, -53, 124, -53,
	253, -114, 128, -114, -114, 123, -53, 115, 117, 120,
	52, -18, -53, -113, 128, 57, -113, -113, -113, -53,
	112, -53, 57, 30, -134, -194, -123, 245, 57, 155,
	123, 156, 125, -134, -134, -134, -134, -134, 159, 160,
	-134, -111, -110, 227, 228, 218, 226, 12, 218, 158,
	-134, -133, -133, -195, 56, -90, 19, 31, -39, -128,
	-86, -87, -39, -85, -2, -26, 36, -30, 21, 65,
	11, -125, 73, 72, 89, -124, 22, -122, 59, 112,
	-39, -60, 92, 74, 90, 91, 76, 94, 93, 104,
	97, 98, 99, 100, 101, 102, 103, 95, 96, 107,
	82, 83, 84, 85, 86, 87, 88, -107, -194, -77,
	-194, 113, 114, -63, -63, -63, -63, -63, -63, -63,
	-63, -194, -2, -72, -39, -194, -194, -194, -194, -194,
	-194, -194, -194, -194, -81, -39, -194, -198, -69, -194,
	-198, -69, -198, -69, -198, -194, -198, -69, -198, -69,
	-198, -198, -69, -194, -194, -194, -194, -194, -194, -54,
	26, -53, -41, -42, -43, -44, -55, -77, -194, -53,
	-53, -48, -196, 55, 11, 53, 55, -97, 164, -98,
	-102, 235, 237, 82, -127, -122, 59, 29, 30, 56,
	55, -53, -140, -139, -143, -144, -146, -145, -147, -141,
	-142, 175, 185, 186, 108, 189, 191, 192, 193, 194,
	195, 196, 197, 198, 199, 200, 30, 145, 181, 182,
	183, 184, 201, 202, 203, 204, 205, 206, 207, 208,
	167, 187, 264, 168, 169, 170, 171, 172, 173, 176,
	177, 178, 179, 180, 57, -134, 125, 57, 74, 57,
	-53, -53, -134, 157, 157, 123, 123, -53, 55, 126,
	-48, 23, 52, -53, 57, 57, -129, -128, -120, -134,
	-134, -134, -134, -134, -53, -134, -134, -134, -134, 11,
	-109, 11, 92, -39, 52, 9, 92, 55, 18, 112,
	55, -88, 24, 25, -89, -195, -32, -64, -122, 60,
	63, -31, 43, -53, -39, -39, -70, 68, 74, 69,
	70, -124, 99, -129, -123, -120, -63, -71, -74, -77,
	64, 92, 90, 91, 76, -63, -63, -63, -63, -63,
	-63, -63, -63, -63, -63, -63, -63, -63, -63, -63,
	-135, 57, 59, 57, -62, -62, -122, -37, 21, -36,
	-38, -195, 55, -195, -2, -36, -36, -39, -39, -78,
	59, -36, -78, 59, -36, -36, -30, -79, -80, 78,
	-78, -122, -128, -195, -63, -122, -122, -36, -37, -36,
	-36, -93, 151, -53, 30, 55, -49, -51, -50, -52,
	42, 46, 48, 43, 44, 45, 49, -132, 22, -41,
	-194, -131, 151, -130, 22, -128, 59, -93, 53, -41,
	-53, -101, -98, 55, 236, 238, 239, 52, 71, -39,
	-153, 107, -171, -172, -173, -123, 59, 60, -162, -163,
	-164, -174, 137, -179, 130, 132, 129, -165, 138, 124,
	28, 56, -158, -150, -151, -159, -160, -149, 68, 74,
	29, 52, 210, 130, 28, 129, 66, -154, 213, -148,
	54, -148, -148, -148, -148, -152, 188, -152, -152, -152,
	54, 54, -148, -148, -148, -156, 54, -156, -156, -157,
	54, -157, -126, 53, -53, -134, 23, -134, -115, 120,
	117, 118, -182, 116, 210, 188, 66, 29, 15, 254,
	151, 269, 57, 152, -122, -122, -53, -53, 120, 117,
	-53, -53, -53, -134, -53, -112, 90, 12, -128, -128,
	-53, 38, -39, -39, -129, -87, -90, -104, 19, 11,
	34, 34, -36, 68, 69, 70, 112, -194, -71, -63,
	-63, -63, -35, 146, 73, -195, -195, -36, 55, -39,
	-195, -195, -195, 55, 53, 22, 11, 11, -195, 11,
	11, -195, -195, -36, -82, -80, 80, -39, -195, 112,
	-195, 55, 55, -195, -195, -195, -195, -61, 30, 34,
	-2, -194, -194, -96, -100, -78, -42, -43, -43, -42,
	-43, 42, 42, 42, 47, 42, 47, 42, -50, -128,
	-195, -56, 50, 127, 51, -194, -130, -57, 12, -41,
	-57, -102, -103, 240, 237, 243, 57, 59, 55, -173,
	82, 54, 57, 28, -165, -165, -166, 57, -166, 28,
	68, -63, 9, 28, 28, 59, -155, 214, 60, -152,
	-152, -153, 30, -153, -153, -153, -161, 59, -161, 60,
	60, 52, -122, -134, -133, -106, -188, 131, 137, 138,
	133, 124, 28, 130, 132, 151, 129, -106, -188, 131,
	-116, -118, 126, 22, 124, 28, 151, -187, 53, 157,
	157, 126, -134, -109, 59, -39, 39, 112, -53, -40,
	11, 99, -123, -37, -35, 73, -63, -63, -195, -38,
	-138, 108, 185, 145, 183, 179, 199, 190, 212, 181,
	213, -135, -138, -63, -63, -63, -63, 263, -85, 81,
	-39, 79, -123, -63, -63, -95, 52, -96, -73, -75,
	-74, -194, -2, -91, -122, -94, -122, -57, 55, 82,
	-46, -45, 52, 53, -47, 52, -45, 42, 42, 124,
	124, 124, -94, -85, -39, -57, 237, 241, 242, -172,
	-173, -176, -175, -122, -179, -166, -166, 54, -66, 56,
	-153, -153, 57, 108, 56, 55, 56, 55, 56, 55,
	-53, 54, -162, -133, 57, -133, 57, -53, -133, -122,
	-185, 266, -186, 57, -122, -122, -53, -112, -57, -41,
	-195, -63, -195, -148, -148, -148, -157, -148, 172, -148,
	172, -195, -195, 19, 19, 19, 19, -194, -34, 259,
	-39, 55, 55, 27, -95, 55, -195, -195, -195, 55,
	112, -195, 55, -85, -100, -39, -39, 54, -39, -194,
	-194, -194, -195, -89, 56, 55, -148, -92, -122, -152,
	59, -152, 60, 60, -134, -162, -133, -117, 126, 22,
	26, -184, -183, -123, 54, -83, 13, -152, 57, -63,
	-63, -63, -63, -63, -195, 59, -63, -63, 28, -75,
	34, -2, -194, -122, -122, -122, -89, -92, -92, -92,
	-92, -131, -178, -177, 53, 134, 66, -175, 56, 55,
	-153, -153, 56, 56, 56, 57, -194, 55, 82, -92,
	-84, 14, 16, -195, -195, -195, -195, -33, 92, 266,
	-195, -195, 9, -73, -2, 112, 56, -195, -195, -195,
	-56, -177, 57, -167, 82, 59, 140, -122, -133, -180,
	-181, 151, -183, -173, 56, -39, -72, -195, 264, 49,
	267, -96, -195, -122, 60, -53, -195, 55, -122, -187,
	39, 265, 268, 54, -181, 34, -185, 39, -92, 153,
	266, 56, 154, 267, -190, -191, 52, -194, 268, -191,
	52, 10, 9, -63, 150, -189, 141, 136, 139, 30,
	-189, -195, -195, 135, 29, 68,
}
var yyDef = [...]int{

	23, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 563, 0, 321, 321, 321, 321, 321, 321,
	0, 636, 617, 0, 0, 0, 0, -2, 307, 308,
	0, 310, 311, 863, 863, 863, 863, 863, 0, 0,
	863, 0, 35, 36, 861, 1, 3, 571, 0, 0,
	325, 328, 323, 0, 617, 617, 0, 0, 62, 63,
	0, 0, 0, 847, 0, 615, 615, 615, 637, 638,
	641, 642, 745, 746, 747, 748, 749, 750, 751, 752,
	753, 754, 755, 756, 757, 758, 759, 760, 761, 762,
	763, 764, 765, 766, 767, 768, 769, 770, 771, 772,
	773, 774, 775, 776, 777, 778, 779, 780, 781, 782,
	783, 784, 785, 786, 787, 788, 789, 790, 791, 792,
	793, 794, 795, 796, 797, 798, 799, 800, 801, 802,
	803, 804, 805, 806, 807, 808, 809, 810, 811, 812,
	813, 814, 815, 816, 817, 818, 819, 820, 821, 822,
	823, 824, 825, 826, 827, 828, 829, 830, 831, 832,
	833, 834, 835, 836, 837, 838, 839, 840, 841, 842,
	843, 844, 845, 846, 848, 849, 850, 851, 852, 853,
	854, 855, 856, 857, 858, 859, 860, 0, 0, 0,
	618, 0, 613, 0, 613, 613, 613, 0, 257, 393,
	645, 646, 847, 0, 0, 0, 864, 0, 864, 864,
	270, 864, 864, 273, 864, 0, 864, 0, 280, 282,
	283, 284, 285, 0, 289, 864, 304, 305, 294, 306,
	309, 312, 313, 314, 315, 316, 317, 863, 863, 320,
	29, 575, 0, 0, 563, 31, 0, 321, 326, 327,
	331, 329, 330, 322, 0, 339, 343, 0, 401, 0,
	406, 408, -2, -2, 0, 443, 444, 445, 446, 447,
	0, 0, 0, 0, 0, 0, 0, 0, 471, 472,
	473, 474, 548, 549, 550, 551, 552, 553, 554, 555,
	410, 411, 545, 595, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 536, 0, 507, 507, 507, 507, 507,
	507, 507, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 43, 47, 0, 837, 599, -2, -2,
	0, 0, 643, 644, -2, 755, -2, 649, 650, 651,
	652, 653, 654, 655, 656, 657, 658, 659, 660, 661,
	662, 663, 664, 665, 666, 667, 668, 669, 670, 671,
	672, 673, 674, 675, 676, 677, 678, 679, 680, 681,
	682, 683, 684, 685, 686, 687, 688, 689, 690, 691,
	692, 693, 694, 695, 696, 697, 698, 699, 700, 701,
	702, 703, 704, 705, 706, 707, 708, 709, 710, 711,
	712, 713, 714, 715, 716, 717, 718, 719, 720, 721,
	722, 723, 724, 725, 726, 727, 728, 729, 730, 731,
	732, 733, 734, 735, 736, 737, 738, 739, 740, 741,
	742, 743, 744, 0, 0, 81, 0, 79, 0, 864,
	0, 0, 0, 0, 0, 0, 864, 0, 0, 0,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 256,
	0, 258, 864, 864, 261, 865, 866, 864, 864, 864,
	0, 864, 864, 268, 269, 271, 272, 274, 864, 864,
	276, 0, 297, 295, 296, 291, 292, 0, 286, 287,
	290, 318, 319, 30, 862, 24, 0, 0, 572, 0,
	564, 565, 568, 571, 29, 328, 0, 333, 332, 324,
	0, 340, 0, 0, 0, 344, 0, 346, 347, 0,
	404, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	428, 429, 430, 431, 432, 433, 434, 407, 0, 421,
	0, 0, 0, 463, 464, 465, 466, 467, 468, 469,
	0, 335, 29, 0, 441, 0, 0, 0, 0, 0,
	0, 0, 0, 331, 0, 537, 0, 491, 499, 0,
	492, 500, 493, 501, 494, 0, 495, 502, 496, 503,
	497, 498, 504, 0, 0, 0, 335, 0, 0, 45,
	0, 392, 0, 350, 352, 353, 354, -2, 0, 376,
	-2, 0, 0, 0, 41, 42, 0, 48, 837, 50,
	51, 0, 0, 0, 164, 608, 609, 610, 606, 206,
	0, 0, 85, 86, 152, 94, 95, 96, 97, 145,
	99, 100, 145, 145, 145, 145, 161, 161, 161, 161,
	128, 129, 130, 131, 132, 0, 0, 115, 145, 145,
	145, 119, 135, 136, 137, 138, 139, 140, 141, 142,
	101, 102, 103, 104, 105, 106, 107, 108, 109, 147,
	147, 147, 149, 149, 639, 65, 0, 864, 0, 864,
	77, 0, 224, 0, 0, 0, 0, 0, 0, 0,
	251, 614, 0, 864, 254, 255, 394, 647, 648, 259,
	260, 262, 263, 264, 265, 266, 267, 275, 279, 0,
	300, 0, 0, 281, 0, 576, 0, 0, 0, 0,
	0, 567, 569, 570, 575, 32, 331, 0, 556, 0,
	0, 0, 334, 27, 402, 403, 405, 422, 0, 424,
	426, 345, 341, 0, 546, -2, 412, 413, 437, 438,
	439, 0, 0, 0, 0, 435, 417, 0, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 457, 458, 459,
	462, 521, 522, 0, 460, 461, 470, 0, 0, 336,
	337, 440, 0, 594, 29, 0, 0, 0, 0, 445,
	548, 0, 445, 548, 0, 0, 0, 543, 540, 0,
	0, 545, 0, 508, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 391, 0, 0, 0, 0, 0, 0,
	381, 0, 0, 384, 0, 0, 0, 0, 375, 0,
	0, 395, 805, 377, 0, 379, 380, 399, 0, 399,
	44, 600, 49, 0, 0, 54, 55, 601, 602, 603,
	604, 0, 78, 207, 209, 212, 213, 214, 82, 83,
	84, 0, 0, 194, 0, 0, 188, 188, 0, 186,
	187, 80, 87, 88, 89, 90, 91, 92, 156, 0,
	0, 0, 160, 0, 168, 170, 0, 154, 153, 98,
	0, 161, 161, 122, 123, 164, 0, 164, 164, 164,
	0, 0, 116, 117, 118, 110, 0, 111, 112, 113,
	0, 114, 0, 0, 864, 67, 616, 68, 863, 232,
	232, 631, 225, 619, 620, 621, 622, 623, 624, 625,
	626, 627, 628, 0, 69, 227, 229, 228, 0, 0,
	0, 249, 864, 253, 297, 278, 0, 0, 298, 299,
	288, 0, 573, 574, 0, 566, 25, 0, 611, 612,
	557, 558, 348, 423, 425, 427, 0, 335, 414, 435,
	418, 0, 415, 0, 0, 409, 475, 0, 0, 442,
	-2, 478, 479, 0, 0, 0, 0, 0, 514, 0,
	0, 515, 0, 563, 0, 541, 0, 0, 490, 0,
	509, 0, 0, 510, 511, 512, 513, 588, 0, 0,
	-2, 0, 0, 399, 596, 0, 351, 370, 372, 0,
	367, 382, 383, 385, 0, 387, 0, 389, 390, 355,
	357, 358, 0, 0, 0, 0, 378, 563, 0, 399,
	40, 52, 53, 0, 0, 59, 165, 166, 0, 210,
	0, 0, 0, 181, 188, 188, 184, 189, 185, 0,
	157, 158, 0, 167, 169, 171, 93, 155, 0, 164,
	164, 124, 0, 125, 126, 127, 0, 143, 0, 0,
	0, 0, 640, 66, 215, 0, 863, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 0, 863, 0,
	0, 863, 632, 633, 634, 635, 0, 72, 0, 0,
	0, 0, 252, 300, 301, 302, 577, 0, 26, 399,
	0, 342, 547, 0, 416, 0, 436, 419, 476, 338,
	0, 145, 145, 526, 145, 149, 529, 145, 531, 145,
	534, 0, 0, 0, 0, 0, 0, 0, 538, 489,
	544, 0, 546, 0, 0, 33, 0, 588, 578, 590,
	592, 0, 29, 0, 584, 0, 362, 563, 0, 0,
	364, 371, 0, 0, 365, 0, 366, 386, 388, 0,
	0, 0, 0, 571, 400, 39, 56, 57, 58, 208,
	211, 0, 190, 145, 193, 182, 183, 0, 159, 146,
	120, 121, 162, 163, 161, 0, 161, 0, 150, 0,
	864, 0, 863, 218, 219, 220, 0, 222, 223, 0,
	226, 0, 70, 71, 0, 231, 250, 277, 559, 349,
	477, 420, 480, 523, 161, 527, 528, 530, 532, 533,
	535, 482, 481, 0, 0, 0, 0, 0, 0, 0,
	542, 0, 0, 0, 34, 0, 593, -2, 0, 0,
	0, 46, 0, 571, 597, 598, 368, 0, 373, 0,
	0, 0, 376, 38, 173, 0, 192, 0, 360, 164,
	144, 164, 0, 0, 64, 0, 217, 0, 629, 630,
	0, 73, 74, 0, 0, 561, 0, 524, 525, 0,
	0, 0, 0, 516, 488, 539, 0, 0, 0, 591,
	0, -2, 0, 586, 585, 363, 37, 0, 0, 0,
	0, 395, 172, 174, 0, 179, 0, 191, 0, 0,
	133, 134, 148, 151, 863, 221, 0, 0, 0, 0,
	28, 0, 0, 483, 485, 484, 486, 0, 0, 0,
	505, 506, 0, 581, 29, 0, 369, 396, 397, 398,
	359, 175, 176, 0, 180, 178, 0, 361, 216, 0,
	244, 0, 75, 76, 69, 562, 560, 487, 0, 0,
	0, 589, -2, 587, 177, 0, 243, 0, 0, 72,
	517, 0, 520, 0, 245, 0, 230, 518, 0, 0,
	0, 195, 0, 0, 196, 197, 0, 0, 519, 198,
	0, 0, 0, 0, 0, 199, 201, 202, 0, 0,
	200, 246, 247, 203, 204, 205,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 75, 3, 3, 3, 102, 94, 3,
	54, 56, 99, 97, 55, 98, 112, 100, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 270,
	83, 82, 84, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 104, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 93, 3, 105,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	76, 77, 78, 79, 80, 81, 85, 86, 87, 88,
	89, 90, 91, 92, 95, 96, 101, 103, 106, 107,
	108, 109, 110, 111, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:316
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:321
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:322
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:326
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:348
		{
			setParseTree(yylex, nil)
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:354
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:362
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:366
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:372
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 28:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:379
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:385
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:389
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:395
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:399
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:406
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:418
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:430
		{
			yyVAL.str = InsertStr
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:434
		{
			yyVAL.str = ReplaceStr
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:440
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:446
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:450
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:454
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:459
		{
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:460
		{
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:464
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:468
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 45:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:473
		{
			yyVAL.partitions = nil
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:477
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:483
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:487
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:491
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:495
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:501
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:505
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:511
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:515
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:519
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:525
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:529
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:533
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:537
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:543
		{
			yyVAL.str = SessionStr
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:547
		{
			yyVAL.str = GlobalStr
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:553
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:558
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 64:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:564
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:569
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 66:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:573
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:577
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:581
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:586
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:590
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:596
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:601
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:606
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:612
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:617
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:623
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:629
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName, IfNotExists: ne}
			setDDL(yylex, yyVAL.ddl)
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:640
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:647
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:651
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:657
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:662
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:666
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:670
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:676
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:682
		{
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:687
		{
			if yyDollar[1].columnType.sawnull {
				yylex.Error("cannot include NULL / NOT NULL more than once")
				return 1
			}
			yyDollar[1].columnType.NotNull = yyDollar[2].boolVal
			yyDollar[1].columnType.sawnull = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:697
		{
			if yyDollar[1].columnType.Default != nil {
				yylex.Error("cannot include DEFAULT more than once")
				return 1
			}
			yyDollar[1].columnType.Default = yyDollar[2].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:706
		{
			if yyDollar[1].columnType.OnUpdate != nil {
				yylex.Error("cannot include ON UPDATE more than once")
				return 1
			}
			yyDollar[1].columnType.OnUpdate = yyDollar[2].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:715
		{
			if yyDollar[1].columnType.sawai {
				yylex.Error("cannot include AUTO_INCREMENT more than once")
				return 1
			}
			yyDollar[1].columnType.Autoincrement = yyDollar[2].boolVal
			yyDollar[1].columnType.sawai = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:725
		{
			if yyDollar[1].columnType.KeyOpt != colKeyNone {
				yylex.Error("cannot include more than one key option for a column definition")
				return 1
			}
			yyDollar[1].columnType.KeyOpt = yyDollar[2].colKeyOpt
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:734
		{
			if yyDollar[1].columnType.Comment != nil {
				yylex.Error("cannot include more than one comment for a column definition")
				return 1
			}
			yyDollar[1].columnType.Comment = yyDollar[2].sqlVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:745
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:757
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:762
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:768
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:774
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:778
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:782
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:786
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:790
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:794
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:798
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:802
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:806
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:812
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:818
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:824
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:830
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:836
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:844
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:848
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:852
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:856
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:860
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:866
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 121:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:870
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:874
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:878
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:882
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:886
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:890
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:894
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:898
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:902
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:906
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:910
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:914
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:918
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 134:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:923
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:929
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:933
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:937
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:941
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:945
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:949
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:953
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:957
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:963
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:968
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:973
		{
			yyVAL.sqlVal = nil
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:977
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:982
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 148:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:986
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:994
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:998
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 151:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1004
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1012
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1016
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1021
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1025
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1032
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1036
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1042
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1048
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1054
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1059
		{
			yyVAL.str = ""
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1063
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1067
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1072
		{
			yyVAL.str = ""
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1076
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1080
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1086
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1090
		{
			yyVAL.colKeyOpt = colKey
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1094
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1098
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1104
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1110
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 173:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1114
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1120
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1124
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1130
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1134
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1139
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1145
		{
			yyVAL.str = ""
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1149
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1155
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1159
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1163
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1167
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1171
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1177
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1181
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1186
		{
			yyVAL.str = ""
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1190
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1196
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1200
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1206
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1212
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1216
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 195:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1223
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 196:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1227
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 197:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1231
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 198:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1235
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1241
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1247
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1253
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1257
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1261
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1265
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1269
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 206:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1274
		{
			yyVAL.str = ""
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1278
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1282
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1290
		{
			yyVAL.str = yyDollar[1].str
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1294
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1298
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1304
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1308
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1312
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 215:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1318
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 216:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1322
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			ddl.Column = yyDollar[8].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 217:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1329
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 218:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1336
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 219:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1340
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: DropStr, Column: NewColIdent(string(yyDollar[7].bytes)), Table: yyDollar[4].tableName}
		}
	case 220:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1344
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 221:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1348
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: RenameStr, Table: yyDollar[4].tableName, Column: NewColIdent(string(yyDollar[7].bytes)), ToColumn: NewColIdent(string(yyDollar[9].bytes))}
		}
	case 222:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1352
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 223:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1357
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 224:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1362
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 225:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1366
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 226:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1370
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[5].colIdent,
				Type:   yyDollar[6].colIdent,
				Params: yyDollar[7].vindexParams,
			}}
		}
	case 227:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1378
		{
			yyVAL.statement = &DDL{Action: DropVindexStr, VindexSpec: &VindexSpec{
				Name: yyDollar[5].colIdent,
			}}
		}
	case 228:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1384
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 229:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1388
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 230:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1392
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 231:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1405
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 232:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1416
		{
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1418
		{
		}
	case 243:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1433
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1439
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1443
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 246:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1449
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 247:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1453
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1459
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1465
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 250:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1469
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1477
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 252:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1485
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 253:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1490
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1498
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1502
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1508
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1512
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1517
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1523
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1528
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1532
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1536
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1541
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1545
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1549
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1553
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1557
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1561
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1565
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1569
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1573
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1577
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1581
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1585
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1589
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1593
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1597
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 278:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1602
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1612
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1616
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1620
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1626
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1630
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1634
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1638
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1642
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1646
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1650
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1654
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1664
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1670
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1674
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1680
		{
			yyVAL.str = ""
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1684
		{
			yyVAL.str = "full "
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1690
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1694
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1700
		{
			yyVAL.str = ""
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1704
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1708
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1714
		{
			yyVAL.showFilter = nil
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1718
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1722
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1728
		{
			yyVAL.str = ""
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1732
		{
			yyVAL.str = SessionStr
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1736
		{
			yyVAL.str = GlobalStr
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1742
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1746
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1752
		{
			yyVAL.statement = &Begin{}
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1756
		{
			yyVAL.statement = &Begin{}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1762
		{
			yyVAL.statement = &Commit{}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1768
		{
			yyVAL.statement = &Rollback{}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1774
		{
			yyVAL.statement = &OtherRead{}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1779
		{
			yyVAL.statement = &Show{Type: "columns", OnTable: yyDollar[2].tableName}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1783
		{
			yyVAL.statement = &OtherRead{}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1787
		{
			yyVAL.statement = &OtherRead{}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1791
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1795
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1799
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1803
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1809
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1813
		{
			setAllowComments(yylex, true)
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1817
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1823
		{
			yyVAL.bytes2 = nil
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1827
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1833
		{
			yyVAL.str = UnionStr
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1837
		{
			yyVAL.str = UnionAllStr
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1841
		{
			yyVAL.str = UnionDistinctStr
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1846
		{
			yyVAL.str = ""
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1850
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1854
		{
			yyVAL.str = SQLCacheStr
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1859
		{
			yyVAL.str = ""
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1863
		{
			yyVAL.str = DistinctStr
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1868
		{
			yyVAL.str = ""
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1872
		{
			yyVAL.str = StraightJoinHint
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1877
		{
			yyVAL.selectExprs = nil
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1881
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1887
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1891
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1897
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1901
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1905
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 342:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1909
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1914
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1918
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1922
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1929
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1934
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1938
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1944
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1948
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1958
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1962
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1966
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1972
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1978
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 359:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1982
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1988
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1992
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1998
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2002
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 364:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2015
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 365:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2019
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 366:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2023
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2027
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2033
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 369:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2035
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 370:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2039
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2041
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 372:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2045
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2047
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 374:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2050
		{
			yyVAL.empty = struct{}{}
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2052
		{
			yyVAL.empty = struct{}{}
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2055
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2059
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2063
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2070
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2076
		{
			yyVAL.str = JoinStr
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2080
		{
			yyVAL.str = JoinStr
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2084
		{
			yyVAL.str = JoinStr
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2090
		{
			yyVAL.str = StraightJoinStr
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2096
		{
			yyVAL.str = LeftJoinStr
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2100
		{
			yyVAL.str = LeftJoinStr
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2104
		{
			yyVAL.str = RightJoinStr
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2108
		{
			yyVAL.str = RightJoinStr
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2114
		{
			yyVAL.str = NaturalJoinStr
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2118
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2128
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2132
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2138
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2142
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2147
		{
			yyVAL.indexHints = nil
		}
	case 396:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2151
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 397:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2155
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 398:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2159
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2164
		{
			yyVAL.expr = nil
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2168
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2174
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2178
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2182
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2186
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2190
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2194
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2198
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 408:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2204
		{
			yyVAL.str = ""
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2208
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2214
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2218
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2224
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2228
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 414:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2232
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 415:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2236
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 416:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2240
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2244
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 418:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2248
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 419:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2252
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 420:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2256
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2260
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2266
		{
			yyVAL.str = IsNullStr
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2270
		{
			yyVAL.str = IsNotNullStr
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2274
		{
			yyVAL.str = IsTrueStr
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2278
		{
			yyVAL.str = IsNotTrueStr
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2282
		{
			yyVAL.str = IsFalseStr
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2286
		{
			yyVAL.str = IsNotFalseStr
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2292
		{
			yyVAL.str = EqualStr
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2296
		{
			yyVAL.str = LessThanStr
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2300
		{
			yyVAL.str = GreaterThanStr
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2304
		{
			yyVAL.str = LessEqualStr
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2308
		{
			yyVAL.str = GreaterEqualStr
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2312
		{
			yyVAL.str = NotEqualStr
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2316
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 435:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2321
		{
			yyVAL.expr = nil
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2325
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2331
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2335
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2339
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2345
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2351
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2355
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2361
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2365
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2369
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2373
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2377
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2381
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2385
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2389
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2393
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2397
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2401
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2405
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2409
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2413
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2417
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2421
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2425
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2429
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2433
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2437
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2441
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2445
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2449
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2453
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2461
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2475
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2479
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2483
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2501
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 476:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2505
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 477:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2509
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 478:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2519
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 479:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2523
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 480:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2527
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 481:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2531
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 482:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2535
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 483:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2539
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 484:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2543
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 485:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2547
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 486:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2551
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 487:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2555
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 488:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2559
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 489:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2563
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 490:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2567
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2577
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2581
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2585
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2590
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2595
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2600
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2606
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2611
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2616
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2620
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2624
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2629
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2634
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2639
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 505:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2643
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 506:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2647
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2657
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 510:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2667
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 511:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2671
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 512:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2675
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 513:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2679
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 514:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2683
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 515:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2687
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2693
		{
			yyVAL.str = ""
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2697
		{
			yyVAL.str = BooleanModeStr
		}
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2701
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 519:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2705
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2709
		{
			yyVAL.str = QueryExpansionStr
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2715
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2719
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2725
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2729
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2733
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2737
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2741
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2745
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2751
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2755
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2759
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2763
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2767
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2771
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2775
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 536:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2780
		{
			yyVAL.expr = nil
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2784
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2789
		{
			yyVAL.str = string("")
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2793
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2799
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2803
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 542:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2809
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 543:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2814
		{
			yyVAL.expr = nil
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2818
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2824
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2828
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 547:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2832
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2838
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2842
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2846
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2850
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2854
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2858
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2862
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2866
		{
			yyVAL.expr = &NullVal{}
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2872
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2881
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2885
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 559:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2890
		{
			yyVAL.exprs = nil
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2894
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 561:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2899
		{
			yyVAL.expr = nil
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2903
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 563:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2908
		{
			yyVAL.orderBy = nil
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2912
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2918
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2922
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2928
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 568:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2933
		{
			yyVAL.str = AscScr
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2937
		{
			yyVAL.str = AscScr
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2941
		{
			yyVAL.str = DescScr
		}
	case 571:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2946
		{
			yyVAL.limit = nil
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2950
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 573:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2954
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 574:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2958
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 575:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2963
		{
			yyVAL.str = ""
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2967
		{
			yyVAL.str = ForUpdateStr
		}
	case 577:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2971
		{
			yyVAL.str = ShareModeStr
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2984
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2988
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2992
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 581:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2997
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 582:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3001
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 583:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3005
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3012
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3016
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3020
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 587:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3024
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 588:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3029
		{
			yyVAL.updateExprs = nil
		}
	case 589:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3033
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3039
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3043
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3049
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3053
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3059
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3065
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3075
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3079
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3085
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3091
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3095
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3101
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3105
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3109
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3113
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3120
		{
			yyVAL.bytes = []byte("charset")
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3127
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3131
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3135
		{
			yyVAL.expr = &Default{}
		}
	case 613:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3144
		{
			yyVAL.byt = 0
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3146
		{
			yyVAL.byt = 1
		}
	case 615:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3149
		{
			yyVAL.byt = 0
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3151
		{
			yyVAL.byt = 1
		}
	case 617:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3154
		{
			yyVAL.str = ""
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3156
		{
			yyVAL.str = IgnoreStr
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3160
		{
			yyVAL.empty = struct{}{}
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3162
		{
			yyVAL.empty = struct{}{}
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3164
		{
			yyVAL.empty = struct{}{}
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3166
		{
			yyVAL.empty = struct{}{}
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3168
		{
			yyVAL.empty = struct{}{}
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3170
		{
			yyVAL.empty = struct{}{}
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3172
		{
			yyVAL.empty = struct{}{}
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3174
		{
			yyVAL.empty = struct{}{}
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3176
		{
			yyVAL.empty = struct{}{}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3178
		{
			yyVAL.empty = struct{}{}
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3182
		{
			yyVAL.empty = struct{}{}
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3184
		{
			yyVAL.empty = struct{}{}
		}
	case 631:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3187
		{
			yyVAL.empty = struct{}{}
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3189
		{
			yyVAL.empty = struct{}{}
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3191
		{
			yyVAL.empty = struct{}{}
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3195
		{
			yyVAL.empty = struct{}{}
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3197
		{
			yyVAL.empty = struct{}{}
		}
	case 636:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3200
		{
			yyVAL.empty = struct{}{}
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3202
		{
			yyVAL.empty = struct{}{}
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3204
		{
			yyVAL.empty = struct{}{}
		}
	case 639:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3207
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3209
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3213
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3217
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3224
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3230
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3234
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3241
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3479
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3488
		{
			decNesting(yylex)
		}
	case 863:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3493
		{
			skipToEnd(yylex)
		}
	case 864:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3498
		{
			skipToEnd(yylex)
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3502
		{
			skipToEnd(yylex)
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3506
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
