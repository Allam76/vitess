// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func yyPosition(yylex interface{}) int {
	return yylex.(*Tokenizer).Position
}

func yyOldPosition(yylex interface{}) int {
	return yylex.(*Tokenizer).OldPosition
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:61
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	int                   int
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	statements            Statements
	partitions            Partitions
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	subquery              *Subquery
	simpleTableExpr       SimpleTableExpr
	joinCondition         JoinCondition
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	asOf                  *AsOf
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	boolean               bool
	sqlVal                *SQLVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	setExprs              SetExprs
	setExpr               *SetExpr
	colIdent              ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	TableSpec             *TableSpec
	columnType            ColumnType
	columnOrder           *ColumnOrder
	triggerOrder          *TriggerOrder
	colKeyOpt             ColumnKeyOption
	optVal                Expr
	LengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexInfo             *IndexInfo
	indexOption           *IndexOption
	indexOptions          []*IndexOption
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	constraintDefinition  *ConstraintDefinition
	constraintInfo        ConstraintInfo
	ReferenceAction       ReferenceAction
	partDefs              []*PartitionDefinition
	partDef               *PartitionDefinition
	partSpec              *PartitionSpec
	showFilter            *ShowFilter
	over                  *Over
	caseStatementCases    []CaseStatementCase
	caseStatementCase     CaseStatementCase
	ifStatementConditions []IfStatementCondition
	ifStatementCondition  IfStatementCondition
	signalInfo            SignalInfo
	signalInfos           []SignalInfo
	procedureParam        ProcedureParam
	procedureParams       []ProcedureParam
	characteristic        Characteristic
	characteristics       []Characteristic
	Fields                *Fields
	Lines                 *Lines
	EnclosedBy            *EnclosedBy
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const CALL = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const OF = 57376
const OUTFILE = 57377
const DATA = 57378
const LOAD = 57379
const LINES = 57380
const TERMINATED = 57381
const ESCAPED = 57382
const ENCLOSED = 57383
const OPTIONALLY = 57384
const STARTING = 57385
const UNIQUE = 57386
const KEY = 57387
const SYSTEM_TIME = 57388
const VALUES = 57389
const LAST_INSERT_ID = 57390
const SQL_CALC_FOUND_ROWS = 57391
const NEXT = 57392
const VALUE = 57393
const SHARE = 57394
const MODE = 57395
const SQL_NO_CACHE = 57396
const SQL_CACHE = 57397
const JOIN = 57398
const STRAIGHT_JOIN = 57399
const LEFT = 57400
const RIGHT = 57401
const INNER = 57402
const OUTER = 57403
const CROSS = 57404
const NATURAL = 57405
const USE = 57406
const FORCE = 57407
const ON = 57408
const USING = 57409
const ID = 57410
const HEX = 57411
const STRING = 57412
const INTEGRAL = 57413
const FLOAT = 57414
const HEXNUM = 57415
const VALUE_ARG = 57416
const LIST_ARG = 57417
const COMMENT = 57418
const COMMENT_KEYWORD = 57419
const BIT_LITERAL = 57420
const NULL = 57421
const TRUE = 57422
const FALSE = 57423
const OFF = 57424
const OR = 57425
const AND = 57426
const NOT = 57427
const BETWEEN = 57428
const CASE = 57429
const WHEN = 57430
const THEN = 57431
const ELSE = 57432
const ELSEIF = 57433
const END = 57434
const LE = 57435
const GE = 57436
const NE = 57437
const NULL_SAFE_EQUAL = 57438
const IS = 57439
const LIKE = 57440
const REGEXP = 57441
const IN = 57442
const SHIFT_LEFT = 57443
const SHIFT_RIGHT = 57444
const DIV = 57445
const MOD = 57446
const UNARY = 57447
const COLLATE = 57448
const BINARY = 57449
const UNDERSCORE_BINARY = 57450
const UNDERSCORE_UTF8MB4 = 57451
const INTERVAL = 57452
const JSON_EXTRACT_OP = 57453
const JSON_UNQUOTE_EXTRACT_OP = 57454
const CREATE = 57455
const ALTER = 57456
const DROP = 57457
const RENAME = 57458
const ANALYZE = 57459
const ADD = 57460
const FLUSH = 57461
const MODIFY = 57462
const CHANGE = 57463
const SCHEMA = 57464
const TABLE = 57465
const INDEX = 57466
const INDEXES = 57467
const VIEW = 57468
const TO = 57469
const IGNORE = 57470
const IF = 57471
const PRIMARY = 57472
const COLUMN = 57473
const SPATIAL = 57474
const FULLTEXT = 57475
const KEY_BLOCK_SIZE = 57476
const CHECK = 57477
const ACTION = 57478
const CASCADE = 57479
const CONSTRAINT = 57480
const FOREIGN = 57481
const NO = 57482
const REFERENCES = 57483
const RESTRICT = 57484
const FIRST = 57485
const AFTER = 57486
const SHOW = 57487
const DESCRIBE = 57488
const EXPLAIN = 57489
const DATE = 57490
const ESCAPE = 57491
const REPAIR = 57492
const OPTIMIZE = 57493
const TRUNCATE = 57494
const FORMAT = 57495
const MAXVALUE = 57496
const PARTITION = 57497
const REORGANIZE = 57498
const LESS = 57499
const THAN = 57500
const PROCEDURE = 57501
const TRIGGER = 57502
const TRIGGERS = 57503
const FUNCTION = 57504
const STATUS = 57505
const VARIABLES = 57506
const WARNINGS = 57507
const SEQUENCE = 57508
const EACH = 57509
const ROW = 57510
const BEFORE = 57511
const FOLLOWS = 57512
const PRECEDES = 57513
const DEFINER = 57514
const INVOKER = 57515
const INOUT = 57516
const OUT = 57517
const DETERMINISTIC = 57518
const CONTAINS = 57519
const READS = 57520
const MODIFIES = 57521
const SQL = 57522
const SECURITY = 57523
const CLASS_ORIGIN = 57524
const SUBCLASS_ORIGIN = 57525
const MESSAGE_TEXT = 57526
const MYSQL_ERRNO = 57527
const CONSTRAINT_CATALOG = 57528
const CONSTRAINT_SCHEMA = 57529
const CONSTRAINT_NAME = 57530
const CATALOG_NAME = 57531
const SCHEMA_NAME = 57532
const TABLE_NAME = 57533
const COLUMN_NAME = 57534
const CURSOR_NAME = 57535
const SIGNAL = 57536
const SQLSTATE = 57537
const BEGIN = 57538
const START = 57539
const TRANSACTION = 57540
const COMMIT = 57541
const ROLLBACK = 57542
const BIT = 57543
const TINYINT = 57544
const SMALLINT = 57545
const MEDIUMINT = 57546
const INT = 57547
const INTEGER = 57548
const BIGINT = 57549
const INTNUM = 57550
const REAL = 57551
const DOUBLE = 57552
const FLOAT_TYPE = 57553
const DECIMAL = 57554
const NUMERIC = 57555
const DEC = 57556
const FIXED = 57557
const PRECISION = 57558
const TIME = 57559
const TIMESTAMP = 57560
const DATETIME = 57561
const YEAR = 57562
const CHAR = 57563
const VARCHAR = 57564
const BOOL = 57565
const CHARACTER = 57566
const VARBINARY = 57567
const NCHAR = 57568
const NVARCHAR = 57569
const NATIONAL = 57570
const VARYING = 57571
const TEXT = 57572
const TINYTEXT = 57573
const MEDIUMTEXT = 57574
const LONGTEXT = 57575
const LONG = 57576
const BLOB = 57577
const TINYBLOB = 57578
const MEDIUMBLOB = 57579
const LONGBLOB = 57580
const JSON = 57581
const ENUM = 57582
const GEOMETRY = 57583
const POINT = 57584
const LINESTRING = 57585
const POLYGON = 57586
const GEOMETRYCOLLECTION = 57587
const MULTIPOINT = 57588
const MULTILINESTRING = 57589
const MULTIPOLYGON = 57590
const NULLX = 57591
const AUTO_INCREMENT = 57592
const APPROXNUM = 57593
const SIGNED = 57594
const UNSIGNED = 57595
const ZEROFILL = 57596
const LOCAL = 57597
const COLLATION = 57598
const DATABASES = 57599
const SCHEMAS = 57600
const TABLES = 57601
const FULL = 57602
const PROCESSLIST = 57603
const COLUMNS = 57604
const FIELDS = 57605
const ENGINES = 57606
const PLUGINS = 57607
const NAMES = 57608
const CHARSET = 57609
const GLOBAL = 57610
const SESSION = 57611
const ISOLATION = 57612
const LEVEL = 57613
const READ = 57614
const WRITE = 57615
const ONLY = 57616
const REPEATABLE = 57617
const COMMITTED = 57618
const UNCOMMITTED = 57619
const SERIALIZABLE = 57620
const CURRENT_TIMESTAMP = 57621
const DATABASE = 57622
const CURRENT_DATE = 57623
const CURRENT_USER = 57624
const CURRENT_TIME = 57625
const LOCALTIME = 57626
const LOCALTIMESTAMP = 57627
const UTC_DATE = 57628
const UTC_TIME = 57629
const UTC_TIMESTAMP = 57630
const REPLACE = 57631
const CONVERT = 57632
const CAST = 57633
const SUBSTR = 57634
const SUBSTRING = 57635
const GROUP_CONCAT = 57636
const SEPARATOR = 57637
const TIMESTAMPADD = 57638
const TIMESTAMPDIFF = 57639
const OVER = 57640
const WINDOW = 57641
const GROUPING = 57642
const GROUPS = 57643
const AVG = 57644
const BIT_AND = 57645
const BIT_OR = 57646
const BIT_XOR = 57647
const COUNT = 57648
const JSON_ARRAYAGG = 57649
const JSON_OBJECTAGG = 57650
const MAX = 57651
const MIN = 57652
const STDDEV_POP = 57653
const STDDEV = 57654
const STD = 57655
const STDDEV_SAMP = 57656
const SUM = 57657
const VAR_POP = 57658
const VARIANCE = 57659
const VAR_SAMP = 57660
const CUME_DIST = 57661
const DENSE_RANK = 57662
const FIRST_VALUE = 57663
const LAG = 57664
const LAST_VALUE = 57665
const LEAD = 57666
const NTH_VALUE = 57667
const NTILE = 57668
const ROW_NUMBER = 57669
const PERCENT_RANK = 57670
const RANK = 57671
const MATCH = 57672
const AGAINST = 57673
const BOOLEAN = 57674
const LANGUAGE = 57675
const WITH = 57676
const QUERY = 57677
const EXPANSION = 57678
const UNUSED = 57679
const ARRAY = 57680
const DESCRIPTION = 57681
const EMPTY = 57682
const EXCEPT = 57683
const JSON_TABLE = 57684
const LATERAL = 57685
const MEMBER = 57686
const RECURSIVE = 57687
const ACTIVE = 57688
const ADMIN = 57689
const BUCKETS = 57690
const CLONE = 57691
const COMPONENT = 57692
const DEFINITION = 57693
const ENFORCED = 57694
const EXCLUDE = 57695
const FOLLOWING = 57696
const GEOMCOLLECTION = 57697
const GET_MASTER_PUBLIC_KEY = 57698
const HISTOGRAM = 57699
const HISTORY = 57700
const INACTIVE = 57701
const INVISIBLE = 57702
const LOCKED = 57703
const MASTER_COMPRESSION_ALGORITHMS = 57704
const MASTER_PUBLIC_KEY_PATH = 57705
const MASTER_TLS_CIPHERSUITES = 57706
const MASTER_ZSTD_COMPRESSION_LEVEL = 57707
const NESTED = 57708
const NETWORK_NAMESPACE = 57709
const NOWAIT = 57710
const NULLS = 57711
const OJ = 57712
const OLD = 57713
const OPTIONAL = 57714
const ORDINALITY = 57715
const ORGANIZATION = 57716
const OTHERS = 57717
const PATH = 57718
const PERSIST = 57719
const PERSIST_ONLY = 57720
const PRECEDING = 57721
const PRIVILEGE_CHECKS_USER = 57722
const PROCESS = 57723
const RANDOM = 57724
const REFERENCE = 57725
const REQUIRE_ROW_FORMAT = 57726
const RESOURCE = 57727
const RESPECT = 57728
const RESTART = 57729
const RETAIN = 57730
const REUSE = 57731
const ROLE = 57732
const SECONDARY = 57733
const SECONDARY_ENGINE = 57734
const SECONDARY_LOAD = 57735
const SECONDARY_UNLOAD = 57736
const SKIP = 57737
const SRID = 57738
const THREAD_PRIORITY = 57739
const TIES = 57740
const UNBOUNDED = 57741
const VCPU = 57742
const VISIBLE = 57743
const SYSTEM = 57744
const INFILE = 57745

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CALL",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"OF",
	"OUTFILE",
	"DATA",
	"LOAD",
	"LINES",
	"TERMINATED",
	"ESCAPED",
	"ENCLOSED",
	"OPTIONALLY",
	"STARTING",
	"UNIQUE",
	"KEY",
	"SYSTEM_TIME",
	"VALUES",
	"LAST_INSERT_ID",
	"SQL_CALC_FOUND_ROWS",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"ELSEIF",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"MODIFY",
	"CHANGE",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"INDEXES",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"FIRST",
	"AFTER",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"FORMAT",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TRIGGERS",
	"FUNCTION",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"EACH",
	"ROW",
	"BEFORE",
	"FOLLOWS",
	"PRECEDES",
	"DEFINER",
	"INVOKER",
	"INOUT",
	"OUT",
	"DETERMINISTIC",
	"CONTAINS",
	"READS",
	"MODIFIES",
	"SQL",
	"SECURITY",
	"CLASS_ORIGIN",
	"SUBCLASS_ORIGIN",
	"MESSAGE_TEXT",
	"MYSQL_ERRNO",
	"CONSTRAINT_CATALOG",
	"CONSTRAINT_SCHEMA",
	"CONSTRAINT_NAME",
	"CATALOG_NAME",
	"SCHEMA_NAME",
	"TABLE_NAME",
	"COLUMN_NAME",
	"CURSOR_NAME",
	"SIGNAL",
	"SQLSTATE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DEC",
	"FIXED",
	"PRECISION",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NATIONAL",
	"VARYING",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"LONG",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"LOCAL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"OVER",
	"WINDOW",
	"GROUPING",
	"GROUPS",
	"AVG",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"COUNT",
	"JSON_ARRAYAGG",
	"JSON_OBJECTAGG",
	"MAX",
	"MIN",
	"STDDEV_POP",
	"STDDEV",
	"STD",
	"STDDEV_SAMP",
	"SUM",
	"VAR_POP",
	"VARIANCE",
	"VAR_SAMP",
	"CUME_DIST",
	"DENSE_RANK",
	"FIRST_VALUE",
	"LAG",
	"LAST_VALUE",
	"LEAD",
	"NTH_VALUE",
	"NTILE",
	"ROW_NUMBER",
	"PERCENT_RANK",
	"RANK",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"DESCRIPTION",
	"EMPTY",
	"EXCEPT",
	"JSON_TABLE",
	"LATERAL",
	"MEMBER",
	"RECURSIVE",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"SYSTEM",
	"INFILE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 42,
	-2, 4,
	-1, 36,
	141, 865,
	-2, 114,
	-1, 43,
	180, 455,
	181, 455,
	-2, 445,
	-1, 50,
	1, 1264,
	421, 1264,
	-2, 475,
	-1, 416,
	127, 873,
	-2, 869,
	-1, 417,
	127, 874,
	-2, 870,
	-1, 518,
	97, 1189,
	127, 1189,
	-2, 78,
	-1, 519,
	97, 1091,
	127, 1091,
	-2, 79,
	-1, 524,
	97, 1047,
	127, 1047,
	-2, 832,
	-1, 526,
	97, 1129,
	127, 1129,
	-2, 834,
	-1, 733,
	5, 42,
	-2, 469,
	-1, 737,
	5, 42,
	-2, 468,
	-1, 931,
	1, 529,
	5, 529,
	12, 529,
	13, 529,
	14, 529,
	15, 529,
	17, 529,
	19, 529,
	30, 529,
	31, 529,
	56, 529,
	57, 529,
	58, 529,
	59, 529,
	60, 529,
	62, 529,
	63, 529,
	66, 529,
	67, 529,
	69, 529,
	70, 529,
	421, 529,
	-2, 559,
	-1, 935,
	67, 59,
	69, 59,
	-2, 63,
	-1, 1131,
	127, 876,
	-2, 872,
	-1, 1293,
	68, 321,
	-2, 1013,
	-1, 1296,
	68, 317,
	71, 317,
	-2, 948,
	-1, 1297,
	68, 318,
	71, 318,
	-2, 958,
	-1, 1375,
	68, 390,
	71, 390,
	-2, 361,
	-1, 1421,
	5, 43,
	-2, 625,
	-1, 1482,
	5, 42,
	-2, 809,
	-1, 1582,
	5, 42,
	-2, 80,
	-1, 1731,
	1, 580,
	5, 580,
	12, 580,
	13, 580,
	14, 580,
	15, 580,
	17, 580,
	19, 580,
	30, 580,
	31, 580,
	56, 580,
	57, 580,
	58, 580,
	59, 580,
	60, 580,
	62, 580,
	63, 580,
	66, 580,
	67, 580,
	69, 580,
	70, 580,
	421, 580,
	-2, 559,
	-1, 1853,
	5, 43,
	-2, 810,
	-1, 1883,
	5, 42,
	-2, 80,
	-1, 1943,
	5, 42,
	-2, 812,
	-1, 1982,
	41, 883,
	-2, 881,
	-1, 2025,
	5, 42,
	-2, 167,
	-1, 2085,
	5, 43,
	-2, 813,
}

const yyPrivate = 57344

const yyLast = 24034

var yyAct = [...]int{

	450, 60, 2181, 1996, 2202, 2095, 2171, 2122, 2094, 414,
	1865, 1340, 2172, 2028, 7, 2027, 6, 2088, 2026, 5,
	2029, 8, 2074, 1956, 1744, 1982, 2068, 1338, 1637, 345,
	72, 1709, 1251, 421, 365, 1536, 514, 1921, 408, 449,
	1905, 1511, 1646, 1298, 1887, 1245, 1106, 1274, 856, 1249,
	1745, 395, 2089, 1710, 1793, 533, 1645, 1590, 434, 1243,
	1706, 60, 363, 711, 1314, 931, 1290, 1330, 1280, 93,
	1190, 1715, 1279, 721, 1719, 400, 1405, 1098, 1657, 1169,
	1156, 346, 347, 1365, 1294, 350, 1613, 1326, 1195, 419,
	1614, 1073, 963, 1043, 530, 1286, 1573, 927, 1117, 1133,
	1690, 698, 1227, 948, 1234, 535, 756, 1187, 762, 529,
	947, 517, 512, 806, 404, 362, 520, 928, 509, 676,
	937, 873, 2224, 1063, 2220, 2210, 1691, 2193, 2191, 872,
	2176, 2167, 2125, 71, 1091, 1881, 1775, 1888, 2184, 2115,
	2170, 2082, 2155, 2114, 2081, 1890, 1674, 1451, 1838, 531,
	675, 1739, 797, 76, 2006, 821, 820, 830, 831, 823,
	824, 825, 826, 827, 828, 829, 822, 29, 1268, 832,
	29, 949, 29, 950, 423, 349, 401, 1520, 29, 348,
	1519, 1269, 1270, 1521, 78, 79, 80, 81, 82, 1740,
	1741, 1480, 723, 103, 99, 100, 709, 101, 724, 725,
	747, 1556, 1300, 1315, 1302, 703, 1302, 1320, 1481, 1315,
	678, 1942, 681, 29, 1893, 61, 32, 33, 29, 1247,
	61, 32, 33, 1306, 1308, 1928, 1307, 57, 1327, 69,
	105, 104, 69, 67, 69, 1829, 1171, 34, 69, 463,
	69, 469, 471, 470, 467, 468, 466, 465, 464, 1827,
	1891, 1892, 1894, 1895, 1896, 360, 472, 473, 352, 1979,
	1978, 1977, 1976, 1975, 1973, 1974, 1347, 95, 2052, 2053,
	2119, 2120, 2090, 702, 706, 69, 1591, 708, 1861, 1503,
	69, 2023, 718, 719, 720, 2169, 717, 716, 680, 679,
	726, 1346, 727, 724, 725, 2154, 2069, 1639, 2047, 1228,
	2021, 2179, 2182, 2178, 2216, 61, 32, 33, 342, 88,
	704, 707, 1592, 705, 962, 410, 1906, 1907, 1748, 1957,
	95, 962, 710, 710, 961, 1798, 1619, 34, 1530, 1019,
	1548, 962, 1959, 2225, 710, 2222, 2211, 36, 63, 40,
	39, 42, 60, 60, 343, 1553, 1552, 1254, 1256, 2194,
	73, 102, 677, 2048, 686, 734, 358, 736, 359, 2055,
	735, 359, 90, 92, 755, 1916, 87, 1549, 1595, 43,
	66, 65, 97, 96, 1033, 1024, 41, 1510, 739, 740,
	1509, 1554, 1563, 1546, 1305, 1508, 673, 1610, 751, 1547,
	316, 98, 1820, 1329, 1813, 1315, 1593, 1594, 2007, 844,
	845, 60, 1524, 1958, 1915, 1516, 962, 1889, 1424, 962,
	962, 1410, 94, 1394, 1104, 956, 841, 1774, 56, 843,
	2049, 64, 943, 47, 48, 97, 96, 749, 1255, 793,
	2080, 701, 764, 2206, 846, 847, 848, 849, 850, 851,
	852, 853, 812, 694, 1275, 810, 832, 1534, 1551, 854,
	1264, 858, 859, 860, 861, 862, 863, 864, 865, 866,
	867, 868, 1764, 871, 874, 874, 874, 880, 874, 874,
	880, 874, 880, 889, 890, 891, 892, 893, 894, 895,
	896, 897, 898, 899, 900, 901, 902, 903, 904, 905,
	906, 907, 908, 909, 910, 911, 912, 913, 914, 915,
	916, 917, 918, 919, 920, 921, 922, 1843, 932, 748,
	2163, 1534, 68, 62, 1765, 68, 1101, 68, 62, 712,
	89, 68, 805, 68, 1658, 1914, 822, 1064, 1634, 832,
	731, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083,
	1084, 1085, 1086, 1533, 1432, 85, 1638, 1429, 803, 520,
	1534, 1368, 945, 926, 951, 795, 1534, 2204, 68, 1534,
	2205, 700, 2203, 68, 1356, 805, 1660, 738, 1550, 682,
	821, 820, 830, 831, 823, 824, 825, 826, 827, 828,
	829, 822, 84, 714, 832, 1537, 876, 878, 1020, 882,
	884, 1386, 887, 842, 875, 877, 879, 881, 883, 885,
	886, 888, 2123, 62, 2143, 1385, 2142, 1533, 804, 803,
	1188, 804, 803, 1621, 1619, 2213, 1676, 2123, 1627, 728,
	2209, 1626, 1629, 1065, 960, 1140, 805, 936, 1366, 805,
	1662, 941, 2164, 759, 763, 1666, 1244, 1661, 1622, 1659,
	1138, 1139, 1137, 1188, 1664, 1440, 1533, 1390, 1026, 1633,
	813, 1752, 1533, 1630, 699, 1533, 1384, 1663, 1621, 1619,
	1357, 844, 845, 962, 844, 845, 1623, 1620, 1579, 800,
	1665, 1667, 2025, 3, 2098, 1107, 1108, 1254, 1256, 715,
	2086, 2217, 934, 1622, 804, 803, 1880, 857, 2151, 823,
	824, 825, 826, 827, 828, 829, 822, 710, 870, 832,
	804, 803, 805, 685, 710, 710, 710, 1382, 1376, 1377,
	1879, 1375, 730, 1378, 1379, 2197, 2182, 2196, 805, 710,
	710, 821, 820, 830, 831, 823, 824, 825, 826, 827,
	828, 829, 822, 356, 2218, 832, 804, 803, 27, 1578,
	1070, 69, 825, 826, 827, 828, 829, 822, 1388, 1391,
	832, 1136, 1576, 710, 805, 1097, 1557, 2150, 1255, 1123,
	1125, 1126, 1407, 1408, 1409, 1124, 907, 908, 909, 910,
	911, 895, 896, 897, 912, 913, 898, 899, 900, 906,
	914, 901, 902, 903, 904, 905, 917, 916, 915, 918,
	919, 921, 920, 922, 1089, 2128, 804, 803, 2104, 1047,
	1045, 357, 1103, 2166, 1034, 688, 689, 690, 691, 692,
	1157, 1109, 1158, 399, 805, 2020, 1972, 1383, 1059, 1060,
	1096, 1050, 1051, 1428, 1132, 1935, 1114, 1141, 1142, 1143,
	1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153,
	1154, 1155, 810, 1381, 60, 1110, 1067, 1068, 1427, 1115,
	1426, 1877, 1116, 1102, 1522, 1134, 1523, 804, 803, 858,
	1757, 1574, 1372, 1092, 2124, 1111, 1087, 804, 803, 1095,
	804, 803, 804, 803, 743, 805, 1130, 1048, 2141, 1678,
	2140, 506, 507, 1387, 1191, 805, 804, 803, 805, 1792,
	805, 2018, 1794, 1046, 1951, 2156, 742, 1991, 1177, 1180,
	1052, 1053, 1054, 1537, 805, 1189, 1129, 1871, 2153, 750,
	1112, 1987, 750, 1951, 2149, 1061, 1062, 1794, 1131, 2109,
	750, 1127, 1871, 2106, 1871, 2022, 1164, 1166, 1912, 934,
	1389, 1809, 1174, 1248, 1160, 1161, 1805, 1049, 932, 1951,
	2014, 73, 932, 1951, 1962, 1951, 750, 1871, 1870, 1094,
	821, 820, 830, 831, 823, 824, 825, 826, 827, 828,
	829, 822, 1856, 750, 832, 1069, 1199, 1200, 1393, 750,
	1985, 1815, 1512, 1206, 1207, 1208, 1209, 1201, 520, 1203,
	1802, 1801, 857, 1259, 1799, 1785, 1784, 1261, 1783, 1602,
	1135, 1772, 1771, 1768, 1769, 1165, 1253, 830, 831, 823,
	824, 825, 826, 827, 828, 829, 822, 1163, 1601, 832,
	1768, 1767, 1422, 750, 733, 737, 1354, 1020, 1231, 750,
	1276, 1185, 1281, 531, 1165, 1369, 710, 1353, 710, 1816,
	1165, 750, 1406, 1159, 1071, 1042, 1041, 1040, 1257, 1039,
	1120, 1121, 1031, 1029, 1316, 1317, 1318, 1319, 1028, 1045,
	1277, 1027, 1025, 939, 1287, 1262, 1265, 1266, 696, 1210,
	1211, 939, 1131, 353, 1215, 959, 958, 1218, 1512, 1284,
	1966, 1965, 1223, 794, 1707, 1336, 1984, 944, 1512, 1780,
	1758, 1230, 944, 1332, 1333, 1334, 1335, 439, 438, 441,
	442, 443, 444, 73, 2111, 857, 440, 445, 60, 1175,
	1176, 1328, 1258, 1851, 938, 1781, 1770, 934, 1727, 940,
	1525, 942, 934, 1841, 1267, 1422, 934, 940, 1445, 938,
	1231, 1444, 1301, 855, 1367, 1231, 1236, 1239, 1240, 1241,
	1237, 1411, 1238, 1242, 1816, 944, 1720, 1721, 1352, 69,
	764, 938, 1105, 1032, 754, 753, 1339, 1422, 1413, 1414,
	1415, 2117, 821, 820, 830, 831, 823, 824, 825, 826,
	827, 828, 829, 822, 2107, 1358, 832, 2097, 1130, 1392,
	1364, 1989, 1236, 1239, 1240, 1241, 1237, 1134, 1238, 1242,
	1882, 1302, 1859, 1331, 2188, 1751, 1720, 1721, 1273, 69,
	1327, 1529, 1348, 1322, 1321, 1021, 745, 2186, 1277, 820,
	830, 831, 823, 824, 825, 826, 827, 828, 829, 822,
	1131, 2173, 832, 1779, 1398, 1723, 1707, 1399, 1580, 1036,
	1726, 1495, 1342, 1725, 1344, 1416, 1496, 1492, 1483, 1484,
	1418, 1491, 932, 932, 932, 932, 932, 1412, 1421, 1423,
	1497, 1493, 1240, 1241, 1425, 1373, 1494, 405, 406, 1248,
	1431, 1504, 1419, 1434, 1435, 1436, 2137, 2113, 1337, 932,
	1442, 1643, 1443, 1395, 520, 1446, 1447, 1485, 1448, 1449,
	798, 799, 1453, 1454, 1455, 1456, 1457, 1118, 2135, 1404,
	1403, 1940, 1539, 1464, 1465, 1466, 1507, 1468, 1469, 1804,
	1471, 1472, 1473, 1474, 1439, 1476, 1477, 1478, 1756, 796,
	1755, 1514, 1531, 1515, 1513, 2057, 1499, 2060, 2103, 2102,
	1983, 2127, 1135, 1981, 2051, 1506, 1500, 1501, 2050, 354,
	1605, 1567, 957, 741, 697, 757, 1450, 1452, 1849, 1486,
	1538, 1919, 1489, 1458, 1459, 1460, 1461, 758, 1371, 1396,
	1397, 60, 763, 1281, 1343, 1020, 1035, 1498, 1526, 417,
	1487, 1488, 710, 1490, 710, 710, 1107, 1108, 1640, 1583,
	798, 799, 1566, 1363, 1568, 1569, 1570, 1571, 1558, 1559,
	1244, 1517, 1023, 402, 403, 1565, 1606, 1532, 1535, 1528,
	1402, 1969, 396, 2130, 2129, 1572, 2100, 2061, 1401, 1998,
	1939, 110, 397, 73, 110, 1997, 1922, 1600, 1512, 1433,
	110, 1430, 1420, 1066, 1612, 801, 934, 934, 934, 934,
	934, 1585, 1586, 1587, 2190, 2189, 2189, 1577, 110, 1575,
	2190, 2011, 1754, 934, 1100, 1441, 355, 1652, 75, 2039,
	46, 110, 77, 934, 110, 538, 49, 110, 70, 1670,
	1671, 1, 1672, 1673, 2041, 19, 2040, 18, 110, 2101,
	538, 2056, 1682, 2058, 1679, 1680, 110, 1980, 1608, 1607,
	1615, 1628, 1632, 1624, 1604, 1635, 1636, 1625, 1675, 1901,
	1618, 1617, 1611, 1609, 1648, 2042, 20, 2043, 21, 2038,
	15, 1886, 1712, 1885, 60, 1603, 2037, 14, 1130, 1589,
	1653, 2031, 10, 2044, 24, 2045, 25, 1650, 2036, 13,
	1649, 1588, 1654, 744, 1729, 2033, 12, 1669, 1668, 1733,
	1734, 1735, 2032, 11, 520, 1731, 855, 1708, 1656, 2030,
	9, 1711, 1090, 1616, 1380, 2067, 1288, 1717, 1278, 528,
	1131, 1167, 83, 1688, 1689, 1355, 713, 1910, 1694, 1732,
	324, 1697, 1736, 1728, 1285, 448, 1702, 1544, 1596, 2059,
	1598, 1599, 746, 1543, 1540, 1738, 1555, 1299, 1753, 1542,
	1541, 1714, 2054, 1545, 1724, 967, 1692, 1693, 1749, 1695,
	1696, 1750, 1698, 1699, 1700, 1701, 1730, 1703, 1704, 1705,
	1683, 1684, 1685, 1686, 1687, 965, 1336, 966, 1648, 1281,
	964, 1281, 969, 968, 1777, 1778, 1743, 1747, 1742, 1196,
	328, 515, 952, 802, 91, 855, 1759, 1760, 50, 1913,
	1631, 1374, 86, 1763, 722, 1788, 330, 840, 1400, 1518,
	1766, 521, 2096, 2118, 761, 1761, 2070, 1438, 522, 869,
	1186, 534, 422, 1502, 2073, 1122, 437, 436, 435, 432,
	433, 1097, 1362, 1113, 1795, 1479, 687, 814, 1773, 420,
	412, 1796, 930, 923, 1840, 1800, 1370, 1235, 1233, 1232,
	1037, 1819, 510, 1722, 1718, 1246, 110, 929, 361, 59,
	729, 538, 538, 341, 1789, 1836, 1837, 1677, 2005, 1020,
	31, 74, 407, 538, 1782, 1817, 1797, 1814, 1791, 26,
	1808, 17, 732, 821, 820, 830, 831, 823, 824, 825,
	826, 827, 828, 829, 822, 1787, 1812, 832, 110, 22,
	16, 683, 35, 1842, 38, 37, 1584, 1345, 351, 1074,
	1818, 1072, 2180, 2121, 2046, 2035, 2034, 2158, 1821, 23,
	1825, 2157, 4, 398, 28, 2, 0, 0, 0, 1830,
	1831, 0, 0, 0, 0, 1867, 1868, 0, 1857, 1737,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	809, 0, 1873, 0, 1863, 0, 0, 0, 0, 1850,
	855, 0, 0, 0, 0, 0, 0, 0, 0, 60,
	0, 0, 0, 1852, 1853, 1854, 1855, 0, 1869, 1844,
	1845, 1864, 0, 0, 0, 1846, 0, 0, 1847, 0,
	0, 1862, 0, 1848, 0, 0, 1281, 0, 0, 1875,
	0, 1526, 0, 1874, 0, 934, 932, 0, 0, 0,
	0, 0, 0, 0, 1909, 0, 0, 0, 0, 0,
	0, 0, 1876, 0, 1878, 0, 0, 0, 0, 1897,
	0, 0, 1929, 1930, 1931, 1932, 1933, 1904, 1903, 1917,
	1936, 1937, 1712, 0, 1336, 1944, 110, 110, 110, 1924,
	1925, 1923, 1729, 1902, 1918, 1747, 0, 534, 534, 0,
	1947, 538, 0, 0, 1810, 0, 1898, 1899, 1900, 534,
	0, 0, 1911, 410, 1648, 0, 0, 1908, 1927, 0,
	0, 1711, 0, 0, 0, 1968, 0, 1970, 0, 0,
	1482, 1948, 0, 0, 0, 1941, 0, 1967, 1934, 1946,
	0, 0, 1949, 1938, 0, 1839, 0, 0, 0, 1961,
	1995, 1167, 1960, 1955, 1963, 1253, 1964, 1950, 0, 0,
	0, 1971, 0, 0, 0, 1986, 1952, 0, 1953, 1954,
	0, 0, 0, 1712, 0, 60, 1990, 1993, 0, 857,
	0, 0, 1988, 0, 0, 0, 0, 1858, 0, 1994,
	1860, 0, 0, 2000, 0, 1999, 857, 0, 0, 0,
	0, 60, 0, 0, 2012, 0, 2024, 0, 0, 2017,
	0, 0, 1711, 2015, 0, 932, 0, 2019, 2010, 0,
	934, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2001, 2002, 2003, 2004, 0, 0, 0, 2008, 2009, 0,
	0, 0, 0, 1582, 2064, 2063, 0, 0, 2065, 0,
	0, 0, 0, 538, 2066, 0, 0, 0, 0, 0,
	2062, 110, 2072, 2076, 0, 110, 2091, 2077, 110, 0,
	0, 2083, 0, 2078, 110, 520, 538, 0, 2084, 0,
	60, 0, 0, 538, 538, 538, 110, 110, 110, 0,
	0, 522, 0, 110, 0, 0, 0, 953, 538, 538,
	0, 0, 0, 0, 0, 0, 2079, 0, 0, 0,
	0, 2112, 2099, 0, 2085, 0, 0, 0, 0, 0,
	0, 0, 0, 1303, 1304, 0, 1309, 1310, 1311, 1312,
	1313, 110, 538, 110, 2105, 538, 0, 0, 2126, 0,
	0, 0, 0, 2017, 1323, 1324, 1325, 0, 0, 0,
	0, 0, 0, 0, 2132, 60, 60, 0, 2138, 2144,
	2139, 2148, 2133, 2146, 2136, 2152, 2134, 0, 2108, 0,
	0, 0, 0, 2131, 60, 0, 2076, 0, 0, 0,
	0, 110, 2165, 2162, 2116, 2161, 1713, 809, 2160, 934,
	2159, 410, 0, 1835, 60, 0, 0, 60, 60, 2174,
	2183, 2168, 2175, 2148, 0, 2177, 857, 60, 0, 2187,
	60, 0, 2148, 2198, 2185, 0, 0, 0, 2195, 0,
	0, 0, 60, 2200, 60, 2207, 0, 2148, 60, 2148,
	0, 0, 0, 538, 0, 0, 2212, 0, 0, 0,
	0, 60, 0, 0, 60, 0, 2148, 0, 0, 1022,
	0, 60, 2221, 0, 0, 60, 2148, 0, 0, 0,
	2148, 0, 0, 0, 2071, 2075, 0, 0, 0, 538,
	538, 0, 534, 0, 0, 0, 0, 0, 0, 534,
	534, 534, 821, 820, 830, 831, 823, 824, 825, 826,
	827, 828, 829, 822, 534, 534, 832, 0, 0, 0,
	0, 2214, 2215, 0, 110, 0, 0, 0, 0, 0,
	0, 0, 110, 110, 2092, 2093, 0, 110, 110, 0,
	0, 110, 110, 110, 0, 0, 0, 0, 534, 0,
	0, 1099, 0, 0, 0, 0, 0, 0, 538, 538,
	0, 0, 0, 933, 0, 0, 0, 0, 29, 30,
	61, 32, 33, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 57, 0, 0, 0, 0, 0, 67, 0,
	0, 0, 34, 53, 54, 0, 0, 0, 2075, 58,
	0, 0, 0, 0, 0, 107, 0, 0, 534, 0,
	2145, 0, 0, 0, 344, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 110, 538, 44, 538, 0, 0,
	69, 0, 110, 110, 0, 0, 110, 0, 0, 0,
	0, 0, 0, 0, 0, 511, 0, 0, 527, 1162,
	0, 674, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 684, 0, 110, 110, 110, 522, 0, 2199,
	693, 0, 0, 0, 0, 0, 0, 0, 1560, 1561,
	1562, 1564, 0, 0, 0, 1192, 1193, 0, 0, 0,
	0, 0, 36, 63, 40, 39, 42, 0, 55, 0,
	0, 1883, 0, 0, 0, 0, 0, 0, 0, 1168,
	1173, 0, 0, 0, 1179, 1182, 1183, 1184, 0, 0,
	0, 0, 0, 0, 43, 66, 65, 0, 0, 51,
	52, 41, 0, 0, 0, 0, 0, 0, 0, 0,
	522, 1194, 0, 1197, 1198, 0, 0, 0, 1202, 0,
	1204, 1205, 534, 0, 534, 534, 0, 0, 1212, 1213,
	1214, 0, 1216, 1217, 0, 1219, 1220, 1221, 1222, 0,
	1224, 1225, 1226, 56, 0, 45, 64, 1943, 47, 48,
	816, 0, 819, 0, 0, 0, 0, 0, 0, 833,
	834, 835, 836, 837, 838, 839, 1834, 817, 818, 815,
	821, 820, 830, 831, 823, 824, 825, 826, 827, 828,
	829, 822, 1833, 0, 832, 0, 0, 0, 0, 0,
	0, 534, 0, 534, 0, 0, 0, 0, 0, 0,
	0, 110, 110, 110, 110, 110, 0, 0, 0, 0,
	0, 0, 0, 110, 0, 0, 0, 0, 110, 0,
	0, 0, 110, 0, 0, 0, 0, 0, 110, 0,
	0, 0, 0, 0, 0, 0, 0, 2013, 62, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 538,
	695, 0, 0, 0, 0, 821, 820, 830, 831, 823,
	824, 825, 826, 827, 828, 829, 822, 0, 0, 832,
	534, 821, 820, 830, 831, 823, 824, 825, 826, 827,
	828, 829, 822, 68, 0, 832, 0, 0, 0, 0,
	0, 0, 752, 0, 0, 0, 0, 0, 0, 760,
	0, 0, 0, 0, 0, 0, 1762, 0, 0, 538,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 538, 110, 538, 538, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 29, 0, 61, 32, 33,
	0, 108, 0, 0, 340, 0, 0, 0, 0, 57,
	108, 0, 0, 0, 0, 67, 0, 0, 0, 34,
	0, 0, 0, 538, 538, 0, 0, 0, 364, 0,
	110, 0, 0, 0, 0, 0, 0, 0, 411, 0,
	538, 513, 523, 0, 108, 0, 0, 108, 0, 0,
	0, 0, 0, 0, 0, 0, 522, 69, 108, 0,
	0, 1822, 1823, 0, 1824, 1437, 108, 1826, 0, 1828,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2047, 538, 0, 0, 0, 2223, 0, 0, 0, 0,
	1462, 1463, 1832, 0, 0, 1467, 0, 0, 1470, 0,
	925, 0, 935, 1475, 0, 534, 0, 0, 0, 0,
	0, 0, 0, 538, 538, 0, 0, 0, 0, 36,
	63, 40, 39, 42, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 538, 2048, 0, 0, 336, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1872,
	0, 43, 66, 65, 538, 538, 0, 538, 41, 538,
	0, 0, 0, 0, 0, 1581, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 333, 534, 0, 534,
	534, 821, 820, 830, 831, 823, 824, 825, 826, 827,
	828, 829, 822, 0, 0, 832, 0, 0, 0, 0,
	56, 0, 2049, 64, 0, 47, 48, 0, 0, 0,
	110, 0, 0, 0, 0, 0, 0, 0, 0, 1641,
	1642, 0, 0, 0, 0, 110, 0, 0, 317, 0,
	0, 0, 0, 0, 0, 320, 534, 0, 0, 0,
	110, 0, 0, 0, 0, 329, 334, 335, 0, 0,
	534, 0, 0, 0, 0, 0, 0, 0, 538, 0,
	0, 110, 538, 0, 0, 0, 0, 0, 0, 538,
	0, 0, 0, 0, 0, 1030, 108, 1681, 0, 511,
	0, 326, 1038, 0, 327, 0, 0, 332, 0, 0,
	0, 0, 0, 0, 0, 62, 0, 0, 0, 0,
	1055, 1056, 1057, 0, 0, 0, 522, 1058, 0, 1099,
	1716, 0, 0, 0, 0, 0, 0, 0, 108, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1716, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	68, 0, 0, 0, 0, 1093, 318, 0, 0, 0,
	534, 534, 0, 534, 0, 1746, 0, 0, 0, 0,
	0, 0, 0, 538, 538, 538, 0, 0, 0, 0,
	0, 0, 538, 0, 0, 0, 0, 0, 331, 321,
	322, 538, 339, 0, 0, 0, 323, 325, 0, 319,
	338, 337, 0, 0, 0, 1119, 0, 0, 0, 0,
	29, 0, 61, 32, 33, 1651, 0, 0, 0, 110,
	0, 0, 0, 0, 57, 0, 0, 0, 0, 0,
	67, 0, 0, 0, 34, 0, 821, 820, 830, 831,
	823, 824, 825, 826, 827, 828, 829, 822, 0, 0,
	832, 0, 0, 538, 0, 110, 0, 0, 0, 0,
	538, 0, 0, 0, 1803, 0, 0, 0, 1807, 0,
	0, 0, 69, 0, 0, 1811, 108, 108, 108, 0,
	0, 0, 0, 0, 0, 523, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2047, 538, 0, 0, 538,
	2219, 0, 110, 0, 110, 0, 0, 0, 0, 0,
	0, 538, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 538, 0, 0, 0, 0, 0, 1229, 0,
	0, 0, 0, 0, 36, 63, 40, 39, 42, 0,
	0, 0, 1260, 0, 0, 0, 0, 0, 0, 0,
	2048, 0, 0, 0, 0, 0, 538, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 43, 66, 65, 1866,
	1866, 1866, 1417, 41, 0, 0, 0, 0, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 1866, 0, 0,
	0, 538, 0, 821, 820, 830, 831, 823, 824, 825,
	826, 827, 828, 829, 822, 0, 0, 832, 0, 0,
	0, 0, 0, 0, 0, 56, 0, 2049, 64, 0,
	47, 48, 0, 0, 110, 0, 0, 0, 1341, 538,
	0, 0, 0, 0, 0, 0, 1349, 1350, 0, 0,
	1351, 0, 0, 0, 0, 0, 0, 0, 0, 1920,
	0, 108, 0, 0, 0, 108, 534, 0, 108, 0,
	0, 110, 0, 0, 1044, 0, 0, 0, 0, 0,
	1361, 0, 0, 0, 0, 0, 108, 108, 108, 0,
	0, 0, 0, 108, 0, 0, 0, 0, 0, 0,
	0, 0, 1945, 0, 0, 1866, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1746, 0, 538,
	62, 0, 0, 0, 0, 0, 0, 0, 1746, 0,
	0, 108, 0, 364, 821, 820, 830, 831, 823, 824,
	825, 826, 827, 828, 829, 822, 0, 538, 832, 0,
	0, 0, 0, 0, 0, 0, 0, 538, 0, 0,
	0, 0, 1992, 0, 0, 68, 0, 538, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1044, 0, 0, 0, 0, 2016, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1746, 0, 0, 0, 1172,
	1172, 0, 0, 0, 1172, 1172, 1172, 1172, 0, 0,
	0, 523, 0, 0, 0, 0, 0, 522, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 989, 0,
	0, 1172, 1172, 1172, 1172, 0, 0, 1172, 1172, 1172,
	1172, 1172, 0, 0, 0, 0, 0, 0, 1172, 1172,
	1172, 0, 1172, 1172, 0, 1172, 1172, 1172, 1172, 0,
	1172, 1172, 1172, 0, 108, 0, 0, 0, 0, 0,
	0, 0, 108, 364, 0, 2110, 0, 108, 108, 0,
	0, 108, 1263, 1044, 523, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1044, 0, 0, 0,
	0, 0, 0, 1866, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1746, 0, 0, 0, 0, 0, 0,
	0, 976, 0, 1866, 0, 0, 1597, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 990, 108, 0, 0, 0, 0, 0,
	0, 0, 108, 108, 1644, 0, 108, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1359, 1360, 108, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1003, 1006, 1007, 1008,
	1009, 1010, 1011, 0, 1012, 1013, 1014, 1015, 1016, 1017,
	1018, 0, 991, 992, 993, 994, 970, 974, 1004, 971,
	977, 973, 975, 972, 1044, 978, 979, 980, 981, 982,
	983, 984, 985, 986, 987, 988, 995, 996, 997, 998,
	999, 1000, 1001, 1002, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 29, 0, 61, 32,
	33, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	57, 0, 0, 0, 0, 29, 67, 61, 32, 33,
	34, 0, 0, 1172, 0, 0, 0, 0, 0, 57,
	0, 0, 0, 0, 0, 67, 0, 0, 0, 34,
	0, 0, 0, 0, 0, 1172, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 69, 0,
	0, 0, 0, 0, 0, 0, 0, 1005, 0, 0,
	1172, 1172, 0, 0, 1776, 1172, 0, 69, 1172, 0,
	0, 2047, 0, 1172, 0, 0, 2208, 0, 0, 1786,
	523, 108, 108, 108, 108, 108, 0, 0, 0, 0,
	2047, 0, 0, 364, 1790, 2192, 0, 0, 108, 0,
	0, 0, 364, 0, 0, 0, 0, 0, 108, 0,
	36, 63, 40, 39, 42, 1806, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2048, 0, 0, 36,
	63, 40, 39, 42, 0, 0, 0, 0, 0, 0,
	0, 0, 43, 66, 65, 2048, 0, 0, 0, 41,
	0, 0, 29, 0, 61, 32, 33, 0, 0, 0,
	0, 43, 66, 65, 0, 0, 57, 0, 41, 0,
	0, 0, 67, 0, 0, 0, 34, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 56, 0, 2049, 64, 0, 47, 48, 0, 0,
	0, 0, 108, 0, 0, 0, 0, 0, 0, 0,
	56, 0, 2049, 64, 69, 47, 48, 0, 0, 0,
	0, 29, 0, 61, 32, 33, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 57, 0, 2047, 0, 0,
	0, 67, 2147, 0, 0, 34, 0, 0, 0, 0,
	108, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1172, 0, 1884, 0, 0, 0, 0, 0, 0,
	0, 0, 1172, 0, 1044, 0, 36, 63, 40, 39,
	42, 0, 0, 69, 0, 0, 62, 0, 0, 0,
	0, 0, 2048, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 62, 2047, 0, 43, 66,
	65, 0, 0, 0, 0, 41, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	523, 68, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 36, 63, 40, 39, 42,
	68, 0, 0, 0, 0, 0, 0, 56, 0, 2049,
	64, 2048, 47, 48, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 43, 66, 65,
	0, 0, 0, 0, 41, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 56, 0, 2049, 64,
	108, 47, 48, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 108, 0, 0, 0, 0,
	0, 0, 62, 0, 0, 0, 0, 0, 0, 0,
	108, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 411, 68, 0, 0,
	0, 0, 0, 0, 0, 2087, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 62, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 68, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 108, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 364, 0, 364, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 411, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 656, 636,
	283, 594, 659, 566, 583, 670, 584, 587, 625, 552,
	606, 220, 581, 553, 0, 570, 543, 577, 544, 567,
	596, 154, 565, 638, 609, 658, 184, 621, 0, 146,
	192, 190, 0, 0, 108, 226, 281, 657, 602, 0,
	665, 187, 0, 618, 304, 272, 205, 0, 0, 598,
	645, 604, 634, 593, 627, 559, 617, 660, 582, 623,
	661, 523, 0, 0, 537, 0, 1282, 1283, 0, 0,
	0, 108, 0, 136, 0, 620, 655, 579, 622, 624,
	541, 619, 0, 547, 554, 669, 651, 573, 574, 575,
	1527, 0, 0, 0, 0, 0, 0, 597, 605, 631,
	590, 0, 0, 0, 0, 0, 0, 0, 0, 571,
	0, 615, 0, 0, 0, 555, 548, 0, 0, 595,
	0, 0, 0, 558, 115, 572, 632, 0, 539, 164,
	206, 126, 635, 650, 592, 177, 310, 654, 589, 588,
	240, 0, 277, 167, 185, 130, 112, 124, 140, 166,
	216, 249, 257, 580, 540, 639, 568, 578, 147, 576,
	251, 224, 299, 0, 612, 230, 250, 188, 288, 242,
	297, 298, 168, 282, 307, 312, 269, 155, 0, 116,
	0, 237, 150, 181, 591, 626, 569, 144, 629, 616,
	644, 268, 131, 284, 204, 210, 141, 143, 142, 125,
	263, 286, 135, 145, 273, 278, 117, 280, 296, 137,
	261, 119, 294, 276, 202, 178, 179, 118, 0, 247,
	153, 163, 149, 219, 0, 162, 239, 291, 292, 148,
	314, 127, 306, 121, 128, 305, 213, 0, 212, 308,
	287, 295, 203, 196, 0, 120, 293, 201, 195, 183,
	158, 170, 235, 191, 236, 171, 208, 207, 209, 0,
	545, 0, 274, 302, 315, 193, 133, 564, 262, 285,
	0, 0, 134, 161, 157, 234, 211, 129, 173, 271,
	182, 189, 246, 313, 223, 252, 138, 301, 270, 562,
	563, 560, 0, 561, 607, 608, 662, 663, 664, 633,
	556, 0, 646, 647, 0, 637, 652, 653, 628, 671,
	585, 586, 546, 549, 550, 551, 557, 599, 600, 611,
	614, 642, 641, 640, 643, 648, 667, 666, 668, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	610, 111, 122, 186, 672, 244, 160, 303, 542, 152,
	0, 0, 601, 603, 613, 630, 113, 114, 123, 132,
	139, 151, 156, 159, 165, 169, 172, 174, 175, 176,
	180, 194, 197, 198, 199, 200, 214, 215, 217, 218,
	221, 222, 225, 227, 228, 229, 231, 232, 233, 238,
	241, 243, 245, 248, 253, 254, 255, 256, 258, 259,
	260, 264, 265, 266, 267, 275, 279, 289, 290, 300,
	309, 311, 649, 656, 636, 283, 594, 659, 566, 583,
	670, 584, 587, 625, 552, 606, 220, 581, 553, 0,
	570, 543, 577, 544, 567, 596, 154, 565, 638, 609,
	658, 184, 621, 0, 146, 192, 190, 0, 0, 0,
	226, 281, 657, 602, 0, 665, 187, 0, 618, 304,
	272, 205, 0, 0, 598, 645, 604, 634, 593, 627,
	559, 617, 660, 582, 623, 661, 0, 0, 0, 537,
	0, 1282, 1283, 0, 0, 0, 0, 0, 136, 0,
	620, 655, 579, 622, 624, 541, 619, 0, 547, 554,
	669, 651, 573, 574, 575, 0, 0, 0, 0, 0,
	0, 0, 597, 605, 631, 590, 0, 0, 0, 0,
	0, 0, 0, 0, 571, 0, 615, 0, 0, 0,
	555, 548, 0, 0, 595, 0, 0, 0, 558, 115,
	572, 632, 0, 539, 164, 206, 126, 635, 650, 592,
	177, 310, 654, 589, 588, 240, 0, 277, 167, 185,
	130, 112, 124, 140, 166, 216, 249, 257, 580, 540,
	639, 568, 578, 147, 576, 251, 224, 299, 0, 612,
	230, 250, 188, 288, 242, 297, 298, 168, 282, 307,
	312, 269, 155, 0, 116, 0, 237, 150, 181, 591,
	626, 569, 144, 629, 616, 644, 268, 131, 284, 204,
	210, 141, 143, 142, 125, 263, 286, 135, 145, 273,
	278, 117, 280, 296, 137, 261, 119, 294, 276, 202,
	178, 179, 118, 0, 247, 153, 163, 149, 219, 0,
	162, 239, 291, 292, 148, 314, 127, 306, 121, 128,
	305, 213, 0, 212, 308, 287, 295, 203, 196, 0,
	120, 293, 201, 195, 183, 158, 170, 235, 191, 236,
	171, 208, 207, 209, 0, 545, 0, 274, 302, 315,
	193, 133, 564, 262, 285, 0, 0, 134, 161, 157,
	234, 211, 129, 173, 271, 182, 189, 246, 313, 223,
	252, 138, 301, 270, 562, 563, 560, 0, 561, 607,
	608, 662, 663, 664, 633, 556, 0, 646, 647, 0,
	637, 652, 653, 628, 671, 585, 586, 546, 549, 550,
	551, 557, 599, 600, 611, 614, 642, 641, 640, 643,
	648, 667, 666, 668, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 610, 111, 122, 186, 672,
	244, 160, 303, 542, 152, 0, 0, 601, 603, 613,
	630, 113, 114, 123, 132, 139, 151, 156, 159, 165,
	169, 172, 174, 175, 176, 180, 194, 197, 198, 199,
	200, 214, 215, 217, 218, 221, 222, 225, 227, 228,
	229, 231, 232, 233, 238, 241, 243, 245, 248, 253,
	254, 255, 256, 258, 259, 260, 264, 265, 266, 267,
	275, 279, 289, 290, 300, 309, 311, 649, 656, 636,
	283, 594, 659, 566, 583, 670, 584, 587, 625, 552,
	606, 220, 581, 553, 0, 570, 543, 577, 544, 567,
	596, 154, 565, 638, 609, 658, 184, 621, 0, 146,
	192, 190, 0, 0, 0, 226, 281, 657, 602, 0,
	665, 187, 0, 618, 304, 272, 205, 0, 0, 598,
	645, 604, 634, 593, 627, 559, 617, 660, 582, 623,
	661, 0, 0, 0, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 0, 620, 655, 579, 622, 624,
	541, 619, 0, 547, 554, 669, 651, 573, 574, 575,
	0, 0, 0, 0, 0, 0, 0, 597, 605, 631,
	590, 0, 0, 0, 0, 0, 0, 1926, 0, 571,
	0, 615, 0, 0, 0, 555, 548, 0, 0, 595,
	0, 0, 0, 558, 115, 572, 632, 0, 539, 164,
	206, 126, 635, 650, 592, 177, 310, 654, 589, 588,
	240, 0, 277, 167, 185, 130, 112, 124, 140, 166,
	216, 249, 257, 580, 540, 639, 568, 578, 147, 576,
	251, 224, 299, 0, 612, 230, 250, 188, 288, 242,
	297, 298, 168, 282, 307, 312, 269, 155, 0, 116,
	0, 237, 150, 181, 591, 626, 569, 144, 629, 616,
	644, 268, 131, 284, 204, 210, 141, 143, 142, 125,
	263, 286, 135, 145, 273, 278, 117, 280, 296, 137,
	261, 119, 294, 276, 202, 178, 179, 118, 0, 247,
	153, 163, 149, 219, 0, 162, 239, 291, 292, 148,
	314, 127, 306, 121, 128, 305, 213, 0, 212, 308,
	287, 295, 203, 196, 0, 120, 293, 201, 195, 183,
	158, 170, 235, 191, 236, 171, 208, 207, 209, 0,
	545, 0, 274, 302, 315, 193, 133, 564, 262, 285,
	0, 0, 134, 161, 157, 234, 211, 129, 173, 271,
	182, 189, 246, 313, 223, 252, 138, 301, 270, 562,
	563, 560, 0, 561, 607, 608, 662, 663, 664, 633,
	556, 0, 646, 647, 0, 637, 652, 653, 628, 671,
	585, 586, 546, 549, 550, 551, 557, 599, 600, 611,
	614, 642, 641, 640, 643, 648, 667, 666, 668, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	610, 111, 122, 186, 672, 244, 160, 303, 542, 152,
	0, 0, 601, 603, 613, 630, 113, 114, 123, 132,
	139, 151, 156, 159, 165, 169, 172, 174, 175, 176,
	180, 194, 197, 198, 199, 200, 214, 215, 217, 218,
	221, 222, 225, 227, 228, 229, 231, 232, 233, 238,
	241, 243, 245, 248, 253, 254, 255, 256, 258, 259,
	260, 264, 265, 266, 267, 275, 279, 289, 290, 300,
	309, 311, 649, 656, 636, 283, 594, 659, 566, 583,
	670, 584, 587, 625, 552, 606, 220, 581, 553, 0,
	570, 543, 577, 544, 567, 596, 154, 565, 638, 609,
	658, 184, 621, 0, 146, 192, 190, 0, 0, 0,
	226, 281, 657, 602, 0, 665, 187, 0, 618, 304,
	272, 205, 0, 0, 598, 645, 604, 634, 593, 627,
	559, 617, 660, 582, 623, 661, 0, 0, 0, 416,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 0,
	620, 655, 579, 622, 624, 541, 619, 0, 547, 554,
	669, 651, 573, 574, 575, 0, 0, 0, 0, 0,
	0, 0, 597, 605, 631, 590, 0, 0, 0, 0,
	0, 0, 1655, 0, 571, 0, 615, 0, 0, 0,
	555, 548, 0, 0, 595, 0, 0, 0, 558, 115,
	572, 632, 0, 539, 164, 206, 126, 635, 650, 592,
	177, 310, 654, 589, 588, 240, 0, 277, 167, 185,
	130, 112, 124, 140, 166, 216, 249, 257, 580, 540,
	639, 568, 578, 147, 576, 251, 224, 299, 0, 612,
	230, 250, 188, 288, 242, 297, 298, 168, 282, 307,
	312, 269, 155, 0, 116, 0, 237, 150, 181, 591,
	626, 569, 144, 629, 616, 644, 268, 131, 284, 204,
	210, 141, 143, 142, 125, 263, 286, 135, 145, 273,
	278, 117, 280, 296, 137, 261, 119, 294, 276, 202,
	178, 179, 118, 0, 247, 153, 163, 149, 219, 0,
	162, 239, 291, 292, 148, 314, 127, 306, 121, 128,
	305, 213, 0, 212, 308, 287, 295, 203, 196, 0,
	120, 293, 201, 195, 183, 158, 170, 235, 191, 236,
	171, 208, 207, 209, 0, 545, 0, 274, 302, 315,
	193, 133, 564, 262, 285, 0, 0, 134, 161, 157,
	234, 211, 129, 173, 271, 182, 189, 246, 313, 223,
	252, 138, 301, 270, 562, 563, 560, 0, 561, 607,
	608, 662, 663, 664, 633, 556, 0, 646, 647, 0,
	637, 652, 653, 628, 671, 585, 586, 546, 549, 550,
	551, 557, 599, 600, 611, 614, 642, 641, 640, 643,
	648, 667, 666, 668, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 610, 111, 122, 186, 672,
	244, 160, 303, 542, 152, 0, 0, 601, 603, 613,
	630, 113, 114, 123, 132, 139, 151, 156, 159, 165,
	169, 172, 174, 175, 176, 180, 194, 197, 198, 199,
	200, 214, 215, 217, 218, 221, 222, 225, 227, 228,
	229, 231, 232, 233, 238, 241, 243, 245, 248, 253,
	254, 255, 256, 258, 259, 260, 264, 265, 266, 267,
	275, 279, 289, 290, 300, 309, 311, 649, 656, 636,
	283, 594, 659, 566, 583, 670, 584, 587, 625, 552,
	606, 220, 581, 553, 0, 570, 543, 577, 544, 567,
	596, 154, 565, 638, 609, 658, 184, 621, 0, 146,
	192, 190, 0, 0, 0, 226, 281, 657, 602, 0,
	665, 187, 0, 618, 304, 272, 205, 0, 0, 598,
	645, 604, 634, 593, 627, 559, 617, 660, 582, 623,
	661, 0, 0, 0, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 0, 620, 655, 579, 622, 624,
	541, 619, 0, 547, 554, 669, 651, 573, 574, 575,
	0, 0, 0, 0, 0, 0, 0, 597, 605, 631,
	590, 0, 0, 0, 0, 0, 0, 1647, 0, 571,
	0, 615, 0, 0, 0, 555, 548, 0, 0, 595,
	0, 0, 0, 558, 115, 572, 632, 0, 539, 164,
	206, 126, 635, 650, 592, 177, 310, 654, 589, 588,
	240, 0, 277, 167, 185, 130, 112, 124, 140, 166,
	216, 249, 257, 580, 540, 639, 568, 578, 147, 576,
	251, 224, 299, 0, 612, 230, 250, 188, 288, 242,
	297, 298, 168, 282, 307, 312, 269, 155, 0, 116,
	0, 237, 150, 181, 591, 626, 569, 144, 629, 616,
	644, 268, 131, 284, 204, 210, 141, 143, 142, 125,
	263, 286, 135, 145, 273, 278, 117, 280, 296, 137,
	261, 119, 294, 276, 202, 178, 179, 118, 0, 247,
	153, 163, 149, 219, 0, 162, 239, 291, 292, 148,
	314, 127, 306, 121, 128, 305, 213, 0, 212, 308,
	287, 295, 203, 196, 0, 120, 293, 201, 195, 183,
	158, 170, 235, 191, 236, 171, 208, 207, 209, 0,
	545, 0, 274, 302, 315, 193, 133, 564, 262, 285,
	0, 0, 134, 161, 157, 234, 211, 129, 173, 271,
	182, 189, 246, 313, 223, 252, 138, 301, 270, 562,
	563, 560, 0, 561, 607, 608, 662, 663, 664, 633,
	556, 0, 646, 647, 0, 637, 652, 653, 628, 671,
	585, 586, 546, 549, 550, 551, 557, 599, 600, 611,
	614, 642, 641, 640, 643, 648, 667, 666, 668, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	610, 111, 122, 186, 672, 244, 160, 303, 542, 152,
	0, 0, 601, 603, 613, 630, 113, 114, 123, 132,
	139, 151, 156, 159, 165, 169, 172, 174, 175, 176,
	180, 194, 197, 198, 199, 200, 214, 215, 217, 218,
	221, 222, 225, 227, 228, 229, 231, 232, 233, 238,
	241, 243, 245, 248, 253, 254, 255, 256, 258, 259,
	260, 264, 265, 266, 267, 275, 279, 289, 290, 300,
	309, 311, 649, 656, 636, 283, 594, 659, 566, 583,
	670, 584, 587, 625, 552, 606, 220, 581, 553, 0,
	570, 543, 577, 544, 567, 596, 154, 565, 638, 609,
	658, 184, 621, 0, 146, 192, 190, 0, 0, 0,
	226, 281, 657, 602, 0, 665, 187, 0, 618, 304,
	272, 205, 0, 0, 598, 645, 604, 634, 593, 627,
	559, 617, 660, 582, 623, 661, 69, 0, 0, 537,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 0,
	620, 655, 579, 622, 624, 541, 619, 0, 547, 554,
	669, 651, 573, 574, 575, 0, 0, 0, 0, 0,
	0, 0, 597, 605, 631, 590, 0, 0, 0, 0,
	0, 0, 0, 0, 571, 0, 615, 0, 0, 0,
	555, 548, 0, 0, 595, 0, 0, 0, 558, 115,
	572, 632, 0, 539, 164, 206, 126, 635, 650, 592,
	177, 310, 654, 589, 588, 240, 0, 277, 167, 185,
	130, 112, 124, 140, 166, 216, 249, 257, 580, 540,
	639, 568, 578, 147, 576, 251, 224, 299, 0, 612,
	230, 250, 188, 288, 242, 297, 298, 168, 282, 307,
	312, 269, 155, 0, 116, 0, 237, 150, 181, 591,
	626, 569, 144, 629, 616, 644, 268, 131, 284, 204,
	210, 141, 143, 142, 125, 263, 286, 135, 145, 273,
	278, 117, 280, 296, 137, 261, 119, 294, 276, 202,
	178, 179, 118, 0, 247, 153, 163, 149, 219, 0,
	162, 239, 291, 292, 148, 314, 127, 306, 121, 128,
	305, 213, 0, 212, 308, 287, 295, 203, 196, 0,
	120, 293, 201, 195, 183, 158, 170, 235, 191, 236,
	171, 208, 207, 209, 0, 545, 0, 274, 302, 315,
	193, 133, 564, 262, 285, 0, 0, 134, 161, 157,
	234, 211, 129, 173, 271, 182, 189, 246, 313, 223,
	252, 138, 301, 270, 562, 563, 560, 0, 561, 607,
	608, 662, 663, 664, 633, 556, 0, 646, 647, 0,
	637, 652, 653, 628, 671, 585, 586, 546, 549, 550,
	551, 557, 599, 600, 611, 614, 642, 641, 640, 643,
	648, 667, 666, 668, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 610, 111, 122, 186, 672,
	244, 160, 303, 542, 152, 0, 0, 601, 603, 613,
	630, 113, 114, 123, 132, 139, 151, 156, 159, 165,
	169, 172, 174, 175, 176, 180, 194, 197, 198, 199,
	200, 214, 215, 217, 218, 221, 222, 225, 227, 228,
	229, 231, 232, 233, 238, 241, 243, 245, 248, 253,
	254, 255, 256, 258, 259, 260, 264, 265, 266, 267,
	275, 279, 289, 290, 300, 309, 311, 649, 656, 636,
	283, 594, 659, 566, 583, 670, 584, 587, 625, 552,
	606, 220, 581, 553, 0, 570, 543, 577, 544, 567,
	596, 154, 565, 638, 609, 658, 184, 621, 0, 146,
	192, 190, 0, 0, 0, 226, 281, 657, 602, 0,
	665, 187, 0, 618, 304, 272, 205, 0, 0, 598,
	645, 604, 634, 593, 627, 559, 617, 660, 582, 623,
	661, 0, 0, 0, 109, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 0, 620, 655, 579, 622, 624,
	541, 619, 0, 547, 554, 669, 651, 573, 574, 575,
	0, 0, 0, 0, 0, 0, 0, 597, 605, 631,
	590, 0, 0, 0, 0, 0, 0, 1264, 0, 571,
	0, 615, 0, 0, 0, 555, 548, 0, 0, 595,
	0, 0, 0, 558, 115, 572, 632, 0, 539, 164,
	206, 126, 635, 650, 592, 177, 310, 654, 589, 588,
	240, 0, 277, 167, 185, 130, 112, 124, 140, 166,
	216, 249, 257, 580, 540, 639, 568, 578, 147, 576,
	251, 224, 299, 0, 612, 230, 250, 188, 288, 242,
	297, 298, 168, 282, 307, 312, 269, 155, 0, 116,
	0, 237, 150, 181, 591, 626, 569, 144, 629, 616,
	644, 268, 131, 284, 204, 210, 141, 143, 142, 125,
	263, 286, 135, 145, 273, 278, 117, 280, 296, 137,
	261, 119, 294, 276, 202, 178, 179, 118, 0, 247,
	153, 163, 149, 219, 0, 162, 239, 291, 292, 148,
	314, 127, 306, 121, 128, 305, 213, 0, 212, 308,
	287, 295, 203, 196, 0, 120, 293, 201, 195, 183,
	158, 170, 235, 191, 236, 171, 208, 207, 209, 0,
	545, 0, 274, 302, 315, 193, 133, 564, 262, 285,
	0, 0, 134, 161, 157, 234, 211, 129, 173, 271,
	182, 189, 246, 313, 223, 252, 138, 301, 270, 562,
	563, 560, 0, 561, 607, 608, 662, 663, 664, 633,
	556, 0, 646, 647, 0, 637, 652, 653, 628, 671,
	585, 586, 546, 549, 550, 551, 557, 599, 600, 611,
	614, 642, 641, 640, 643, 648, 667, 666, 668, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	610, 111, 122, 186, 672, 244, 160, 303, 542, 152,
	0, 0, 601, 603, 613, 630, 113, 114, 123, 132,
	139, 151, 156, 159, 165, 169, 172, 174, 175, 176,
	180, 194, 197, 198, 199, 200, 214, 215, 217, 218,
	221, 222, 225, 227, 228, 229, 231, 232, 233, 238,
	241, 243, 245, 248, 253, 254, 255, 256, 258, 259,
	260, 264, 265, 266, 267, 275, 279, 289, 290, 300,
	309, 311, 649, 656, 636, 283, 594, 659, 566, 583,
	670, 584, 587, 625, 552, 606, 220, 581, 553, 0,
	570, 543, 577, 544, 567, 596, 154, 565, 638, 609,
	658, 184, 621, 0, 146, 192, 190, 0, 0, 0,
	226, 281, 657, 602, 0, 665, 187, 0, 618, 304,
	272, 205, 0, 0, 598, 645, 604, 634, 593, 627,
	559, 617, 660, 582, 623, 661, 0, 0, 0, 416,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 0,
	620, 655, 579, 622, 624, 541, 619, 0, 547, 554,
	669, 651, 573, 574, 575, 0, 0, 0, 0, 0,
	0, 0, 597, 605, 631, 590, 0, 0, 0, 0,
	0, 0, 1128, 0, 571, 0, 615, 0, 0, 0,
	555, 548, 0, 0, 595, 0, 0, 0, 558, 115,
	572, 632, 0, 539, 164, 206, 126, 635, 650, 592,
	177, 310, 654, 589, 588, 240, 0, 277, 167, 185,
	130, 112, 124, 140, 166, 216, 249, 257, 580, 540,
	639, 568, 578, 147, 576, 251, 224, 299, 0, 612,
	230, 250, 188, 288, 242, 297, 298, 168, 282, 307,
	312, 269, 155, 0, 116, 0, 237, 150, 181, 591,
	626, 569, 144, 629, 616, 644, 268, 131, 284, 204,
	210, 141, 143, 142, 125, 263, 286, 135, 145, 273,
	278, 117, 280, 296, 137, 261, 119, 294, 276, 202,
	178, 179, 118, 0, 247, 153, 163, 149, 219, 0,
	162, 239, 291, 292, 148, 314, 127, 306, 121, 128,
	305, 213, 0, 212, 308, 287, 295, 203, 196, 0,
	120, 293, 201, 195, 183, 158, 170, 235, 191, 236,
	171, 208, 207, 209, 0, 545, 0, 274, 302, 315,
	193, 133, 564, 262, 285, 0, 0, 134, 161, 157,
	234, 211, 129, 173, 271, 182, 189, 246, 313, 223,
	252, 138, 301, 270, 562, 563, 560, 0, 561, 607,
	608, 662, 663, 664, 633, 556, 0, 646, 647, 0,
	637, 652, 653, 628, 671, 585, 586, 546, 549, 550,
	551, 557, 599, 600, 611, 614, 642, 641, 640, 643,
	648, 667, 666, 668, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 610, 111, 122, 186, 672,
	244, 160, 303, 542, 152, 0, 0, 601, 603, 613,
	630, 113, 114, 123, 132, 139, 151, 156, 159, 165,
	169, 172, 174, 175, 176, 180, 194, 197, 198, 199,
	200, 214, 215, 217, 218, 221, 222, 225, 227, 228,
	229, 231, 232, 233, 238, 241, 243, 245, 248, 253,
	254, 255, 256, 258, 259, 260, 264, 265, 266, 267,
	275, 279, 289, 290, 300, 309, 311, 649, 656, 636,
	283, 594, 659, 566, 583, 670, 584, 587, 625, 552,
	606, 220, 581, 553, 0, 570, 543, 577, 544, 567,
	596, 154, 565, 638, 609, 658, 184, 621, 0, 146,
	192, 190, 0, 0, 0, 226, 281, 657, 602, 0,
	665, 187, 0, 618, 304, 272, 205, 0, 0, 598,
	645, 604, 634, 593, 627, 559, 617, 660, 582, 623,
	661, 0, 0, 0, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 0, 620, 655, 579, 622, 624,
	541, 619, 0, 547, 554, 669, 651, 573, 574, 575,
	0, 0, 0, 0, 0, 0, 0, 597, 605, 631,
	590, 0, 0, 0, 0, 0, 0, 0, 0, 571,
	0, 615, 0, 0, 0, 555, 548, 0, 0, 595,
	0, 0, 0, 558, 115, 572, 632, 0, 539, 164,
	206, 126, 635, 650, 592, 177, 310, 654, 589, 588,
	240, 0, 277, 167, 185, 130, 112, 124, 140, 166,
	216, 249, 257, 580, 540, 639, 568, 578, 147, 576,
	251, 224, 299, 0, 612, 230, 250, 188, 288, 242,
	297, 298, 168, 282, 307, 312, 269, 155, 0, 116,
	0, 237, 150, 181, 591, 626, 569, 144, 629, 616,
	644, 268, 131, 284, 204, 210, 141, 143, 142, 125,
	263, 286, 135, 145, 273, 278, 117, 280, 296, 137,
	261, 119, 294, 276, 202, 178, 179, 118, 0, 247,
	153, 163, 149, 219, 0, 162, 239, 291, 292, 148,
	314, 127, 306, 121, 128, 305, 213, 0, 212, 308,
	287, 295, 203, 196, 0, 120, 293, 201, 195, 183,
	158, 170, 235, 191, 236, 171, 208, 207, 209, 0,
	545, 0, 274, 302, 315, 193, 133, 564, 262, 285,
	0, 0, 134, 161, 157, 234, 211, 129, 173, 271,
	182, 189, 246, 313, 223, 252, 138, 301, 270, 562,
	563, 560, 0, 561, 607, 608, 662, 663, 664, 633,
	556, 0, 646, 647, 0, 637, 652, 653, 628, 671,
	585, 586, 546, 549, 550, 551, 557, 599, 600, 611,
	614, 642, 641, 640, 643, 648, 667, 666, 668, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	610, 111, 122, 186, 672, 244, 160, 303, 542, 152,
	0, 0, 601, 603, 613, 630, 113, 114, 123, 132,
	139, 151, 156, 159, 165, 169, 172, 174, 175, 176,
	180, 194, 197, 198, 199, 200, 214, 215, 217, 218,
	221, 222, 225, 227, 228, 229, 231, 232, 233, 238,
	241, 243, 245, 248, 253, 254, 255, 256, 258, 259,
	260, 264, 265, 266, 267, 275, 279, 289, 290, 300,
	309, 311, 649, 656, 636, 283, 594, 659, 566, 583,
	670, 584, 587, 625, 552, 606, 220, 581, 553, 0,
	570, 543, 577, 544, 567, 596, 154, 565, 638, 609,
	658, 184, 621, 0, 146, 192, 190, 0, 0, 0,
	226, 281, 657, 602, 0, 665, 187, 0, 618, 304,
	272, 205, 0, 0, 598, 645, 604, 634, 593, 627,
	559, 617, 660, 582, 623, 661, 0, 0, 0, 416,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 0,
	620, 655, 579, 622, 624, 541, 619, 0, 547, 554,
	669, 651, 573, 574, 575, 0, 0, 0, 0, 0,
	0, 0, 597, 605, 631, 590, 0, 0, 0, 0,
	0, 0, 0, 0, 571, 0, 615, 0, 0, 0,
	555, 548, 0, 0, 595, 0, 0, 0, 558, 115,
	572, 632, 0, 539, 164, 206, 126, 635, 650, 592,
	177, 310, 654, 589, 588, 240, 0, 277, 167, 185,
	130, 112, 124, 140, 166, 216, 249, 257, 580, 540,
	639, 568, 578, 147, 576, 251, 224, 299, 0, 612,
	230, 250, 188, 288, 242, 297, 298, 168, 282, 307,
	312, 269, 155, 0, 116, 0, 237, 150, 181, 591,
	626, 569, 144, 629, 616, 644, 268, 131, 284, 204,
	210, 141, 143, 142, 125, 263, 286, 135, 145, 273,
	278, 117, 280, 296, 137, 261, 119, 294, 276, 202,
	178, 179, 118, 0, 247, 153, 163, 149, 219, 0,
	162, 239, 291, 292, 148, 314, 127, 306, 121, 128,
	305, 213, 0, 212, 308, 287, 295, 203, 196, 0,
	120, 293, 201, 195, 183, 158, 170, 235, 191, 236,
	171, 208, 207, 209, 0, 545, 0, 274, 302, 315,
	193, 133, 564, 262, 285, 0, 0, 134, 161, 157,
	234, 211, 129, 173, 271, 182, 189, 246, 313, 223,
	252, 138, 301, 270, 562, 563, 560, 0, 561, 607,
	608, 662, 663, 664, 633, 556, 0, 646, 647, 0,
	637, 652, 653, 628, 671, 585, 586, 546, 549, 550,
	551, 557, 599, 600, 611, 614, 642, 641, 640, 643,
	648, 667, 666, 668, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 610, 111, 122, 186, 672,
	244, 160, 303, 542, 152, 0, 0, 601, 603, 613,
	630, 113, 114, 123, 132, 139, 151, 156, 159, 165,
	169, 172, 174, 175, 176, 180, 194, 197, 198, 199,
	200, 214, 215, 217, 218, 221, 222, 225, 227, 228,
	229, 231, 232, 233, 238, 241, 243, 245, 248, 253,
	254, 255, 256, 258, 259, 260, 264, 265, 266, 267,
	275, 279, 289, 290, 300, 309, 311, 649, 656, 636,
	283, 594, 659, 566, 583, 670, 584, 587, 625, 552,
	606, 220, 581, 553, 0, 570, 543, 577, 544, 567,
	596, 154, 565, 638, 609, 658, 184, 621, 0, 146,
	192, 190, 0, 0, 0, 226, 281, 1293, 1297, 0,
	665, 187, 0, 618, 304, 272, 205, 0, 0, 598,
	645, 604, 634, 593, 627, 559, 617, 660, 582, 623,
	661, 0, 0, 0, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 0, 620, 655, 579, 622, 624,
	541, 619, 0, 547, 554, 669, 651, 573, 574, 575,
	0, 0, 0, 0, 0, 0, 0, 597, 605, 631,
	590, 0, 0, 0, 0, 0, 0, 0, 0, 571,
	0, 615, 0, 0, 0, 555, 548, 0, 0, 595,
	0, 0, 0, 558, 115, 572, 632, 0, 539, 164,
	206, 126, 635, 650, 1296, 177, 310, 654, 589, 588,
	1291, 0, 1292, 167, 185, 536, 112, 124, 1289, 1295,
	216, 249, 257, 580, 540, 639, 568, 578, 147, 576,
	251, 224, 299, 0, 612, 230, 250, 188, 288, 242,
	297, 298, 168, 282, 307, 312, 269, 155, 0, 116,
	0, 237, 150, 181, 591, 626, 569, 144, 629, 616,
	644, 268, 131, 284, 204, 210, 141, 143, 142, 125,
	263, 286, 135, 145, 273, 278, 117, 280, 296, 137,
	261, 119, 294, 276, 202, 178, 179, 118, 0, 247,
	153, 163, 149, 219, 0, 162, 239, 291, 292, 148,
	314, 127, 306, 121, 128, 305, 213, 0, 212, 308,
	287, 295, 203, 196, 0, 120, 293, 201, 195, 183,
	158, 170, 235, 191, 236, 171, 208, 207, 209, 0,
	545, 0, 274, 302, 315, 193, 133, 564, 262, 285,
	0, 0, 134, 161, 157, 234, 211, 129, 173, 271,
	182, 189, 246, 313, 223, 252, 138, 301, 270, 562,
	563, 560, 0, 561, 607, 608, 662, 663, 664, 633,
	556, 0, 646, 647, 0, 637, 652, 653, 628, 671,
	585, 586, 546, 549, 550, 551, 557, 599, 600, 611,
	614, 642, 641, 640, 643, 648, 667, 666, 668, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	610, 111, 122, 186, 672, 244, 160, 303, 542, 152,
	0, 0, 601, 603, 613, 630, 113, 114, 123, 132,
	139, 151, 156, 159, 165, 169, 172, 174, 175, 176,
	180, 194, 197, 198, 199, 200, 214, 215, 217, 218,
	221, 222, 225, 227, 228, 229, 231, 232, 233, 238,
	241, 243, 245, 248, 253, 254, 255, 256, 258, 259,
	260, 264, 265, 266, 267, 275, 279, 289, 290, 300,
	309, 311, 649, 656, 636, 283, 594, 659, 566, 583,
	670, 584, 587, 625, 552, 606, 220, 581, 553, 0,
	570, 543, 577, 544, 567, 596, 154, 565, 638, 609,
	658, 184, 621, 0, 146, 192, 190, 0, 0, 0,
	226, 281, 657, 602, 0, 665, 187, 0, 618, 304,
	272, 205, 0, 0, 598, 645, 604, 634, 593, 627,
	559, 617, 660, 582, 623, 661, 0, 0, 0, 109,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 0,
	620, 655, 579, 622, 624, 541, 619, 0, 547, 554,
	669, 651, 573, 574, 575, 0, 0, 0, 0, 0,
	0, 0, 597, 605, 631, 590, 0, 0, 0, 0,
	0, 0, 0, 0, 571, 0, 615, 0, 0, 0,
	555, 548, 0, 0, 595, 0, 0, 0, 558, 115,
	572, 632, 0, 539, 164, 206, 126, 635, 650, 592,
	177, 310, 654, 589, 588, 240, 0, 277, 167, 185,
	130, 112, 124, 140, 166, 216, 249, 257, 580, 540,
	639, 568, 578, 147, 576, 251, 224, 299, 0, 612,
	230, 250, 188, 288, 242, 297, 298, 168, 282, 307,
	312, 269, 155, 0, 116, 0, 237, 150, 181, 591,
	626, 569, 144, 629, 616, 644, 268, 131, 284, 204,
	210, 141, 143, 142, 125, 263, 286, 135, 145, 273,
	278, 117, 280, 296, 137, 261, 119, 294, 276, 202,
	178, 179, 118, 0, 247, 153, 163, 149, 219, 0,
	162, 239, 291, 292, 148, 314, 127, 306, 121, 128,
	305, 213, 0, 212, 308, 287, 295, 203, 196, 0,
	120, 293, 201, 195, 183, 158, 170, 235, 191, 236,
	171, 208, 207, 209, 0, 545, 0, 274, 302, 315,
	193, 133, 564, 262, 285, 0, 0, 134, 161, 157,
	234, 211, 129, 173, 271, 182, 189, 246, 313, 223,
	252, 138, 301, 270, 562, 563, 560, 0, 561, 607,
	608, 662, 663, 664, 633, 556, 0, 646, 647, 0,
	637, 652, 653, 628, 671, 585, 586, 546, 549, 550,
	551, 557, 599, 600, 611, 614, 642, 641, 640, 643,
	648, 667, 666, 668, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 610, 111, 122, 186, 672,
	244, 160, 303, 542, 152, 0, 0, 601, 603, 613,
	630, 113, 114, 123, 132, 139, 151, 156, 159, 165,
	169, 172, 174, 175, 176, 180, 194, 197, 198, 199,
	200, 214, 215, 217, 218, 221, 222, 225, 227, 228,
	229, 231, 232, 233, 238, 241, 243, 245, 248, 253,
	254, 255, 256, 258, 259, 260, 264, 265, 266, 267,
	275, 279, 289, 290, 300, 309, 311, 649, 656, 636,
	283, 594, 659, 566, 583, 670, 584, 587, 625, 552,
	606, 220, 581, 553, 0, 570, 543, 577, 544, 567,
	596, 154, 565, 638, 609, 658, 184, 621, 0, 146,
	192, 190, 0, 0, 0, 226, 281, 657, 602, 0,
	665, 187, 0, 618, 304, 272, 205, 0, 0, 598,
	645, 604, 634, 593, 627, 559, 617, 660, 582, 623,
	661, 0, 0, 0, 537, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 0, 620, 655, 579, 622, 624,
	541, 619, 0, 547, 554, 669, 651, 573, 574, 575,
	0, 0, 0, 0, 0, 0, 0, 597, 605, 631,
	590, 0, 0, 0, 0, 0, 0, 0, 0, 571,
	0, 615, 0, 0, 0, 555, 548, 0, 0, 595,
	0, 0, 0, 558, 115, 572, 632, 0, 539, 164,
	206, 126, 635, 650, 592, 177, 310, 654, 589, 588,
	240, 0, 277, 167, 185, 536, 112, 124, 532, 166,
	216, 249, 257, 580, 540, 639, 568, 578, 147, 576,
	251, 224, 299, 0, 612, 230, 250, 188, 288, 242,
	297, 298, 168, 282, 307, 312, 269, 155, 0, 116,
	0, 237, 150, 181, 591, 626, 569, 144, 629, 616,
	644, 268, 131, 284, 204, 210, 141, 143, 142, 125,
	263, 286, 135, 145, 273, 278, 117, 280, 296, 137,
	261, 119, 294, 276, 202, 178, 179, 118, 0, 247,
	153, 163, 149, 219, 0, 162, 239, 291, 292, 148,
	314, 127, 306, 121, 128, 305, 213, 0, 212, 308,
	287, 295, 203, 196, 0, 120, 293, 201, 195, 183,
	158, 170, 235, 191, 236, 171, 208, 207, 209, 0,
	545, 0, 274, 302, 315, 193, 133, 564, 262, 285,
	0, 0, 134, 161, 157, 234, 211, 129, 173, 271,
	182, 189, 246, 313, 223, 252, 138, 301, 270, 562,
	563, 560, 0, 561, 607, 608, 662, 663, 664, 633,
	556, 0, 646, 647, 0, 637, 652, 653, 628, 671,
	585, 586, 546, 549, 550, 551, 557, 599, 600, 611,
	614, 642, 641, 640, 643, 648, 667, 666, 668, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	610, 111, 122, 186, 672, 244, 160, 303, 542, 152,
	0, 0, 601, 603, 613, 630, 113, 114, 123, 132,
	139, 151, 156, 159, 165, 169, 172, 174, 175, 176,
	180, 194, 197, 198, 199, 200, 214, 215, 217, 218,
	221, 222, 225, 227, 228, 229, 231, 232, 233, 238,
	241, 243, 245, 248, 253, 254, 255, 256, 258, 259,
	260, 264, 265, 266, 267, 275, 279, 289, 290, 300,
	309, 311, 649, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 220, 0, 0, 0, 0, 0,
	418, 0, 0, 0, 154, 415, 0, 0, 0, 184,
	0, 0, 146, 192, 190, 0, 0, 0, 226, 281,
	0, 0, 0, 462, 187, 0, 0, 304, 272, 205,
	0, 0, 0, 0, 451, 452, 0, 0, 0, 0,
	0, 0, 1271, 0, 69, 0, 0, 416, 439, 438,
	441, 442, 443, 444, 0, 0, 136, 440, 445, 446,
	447, 1272, 0, 0, 413, 430, 0, 461, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 427, 428,
	0, 0, 0, 0, 476, 0, 429, 0, 0, 424,
	425, 426, 431, 0, 0, 0, 0, 115, 0, 0,
	0, 0, 164, 206, 126, 453, 0, 0, 177, 310,
	0, 0, 474, 240, 0, 277, 167, 185, 130, 112,
	124, 140, 166, 216, 249, 257, 459, 0, 0, 0,
	0, 147, 0, 251, 224, 299, 0, 0, 230, 250,
	188, 288, 242, 297, 298, 168, 282, 307, 312, 269,
	155, 0, 116, 0, 237, 150, 181, 0, 0, 0,
	144, 0, 0, 0, 268, 131, 284, 204, 210, 141,
	143, 142, 125, 263, 286, 135, 145, 273, 278, 117,
	280, 296, 137, 261, 119, 294, 276, 202, 178, 179,
	118, 0, 247, 153, 163, 149, 219, 0, 162, 239,
	291, 292, 148, 314, 127, 306, 121, 128, 305, 213,
	0, 212, 308, 287, 295, 203, 196, 0, 120, 293,
	201, 195, 183, 158, 170, 235, 191, 236, 171, 208,
	207, 209, 0, 0, 0, 274, 302, 315, 193, 133,
	0, 262, 285, 0, 0, 134, 161, 157, 234, 211,
	129, 173, 271, 182, 189, 246, 313, 223, 252, 138,
	301, 270, 463, 475, 469, 471, 470, 467, 468, 466,
	465, 464, 477, 454, 455, 456, 457, 460, 0, 472,
	473, 0, 0, 0, 0, 490, 491, 492, 493, 494,
	495, 496, 489, 497, 498, 499, 500, 501, 502, 503,
	504, 505, 478, 479, 480, 481, 482, 483, 484, 485,
	488, 486, 487, 458, 111, 122, 186, 0, 244, 160,
	303, 0, 152, 0, 0, 0, 0, 0, 0, 113,
	114, 123, 132, 139, 151, 156, 159, 165, 169, 172,
	174, 175, 176, 180, 194, 197, 198, 199, 200, 214,
	215, 217, 218, 221, 222, 225, 227, 228, 229, 231,
	232, 233, 238, 241, 243, 245, 248, 253, 254, 255,
	256, 258, 259, 260, 264, 265, 266, 267, 275, 279,
	289, 290, 300, 309, 311, 29, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 0, 418, 0, 0, 0, 154, 415, 0,
	0, 0, 184, 0, 0, 146, 192, 190, 0, 0,
	0, 226, 281, 0, 0, 0, 462, 187, 0, 0,
	304, 272, 205, 0, 0, 0, 0, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 69, 0, 0,
	416, 439, 438, 441, 442, 443, 444, 0, 0, 136,
	440, 445, 446, 447, 0, 0, 0, 413, 430, 0,
	461, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 427, 428, 0, 0, 0, 0, 476, 0, 429,
	0, 0, 424, 425, 426, 431, 0, 0, 0, 0,
	115, 0, 0, 0, 0, 164, 206, 126, 453, 0,
	0, 177, 310, 0, 0, 474, 240, 0, 277, 167,
	185, 130, 112, 124, 140, 166, 216, 249, 257, 459,
	0, 0, 0, 0, 147, 0, 251, 224, 299, 0,
	0, 230, 250, 188, 288, 242, 297, 298, 168, 282,
	307, 312, 269, 155, 0, 116, 0, 237, 150, 181,
	0, 0, 0, 144, 0, 0, 0, 268, 131, 284,
	204, 210, 141, 143, 142, 125, 263, 286, 135, 145,
	273, 278, 117, 280, 296, 137, 261, 119, 294, 276,
	202, 178, 179, 118, 0, 247, 153, 163, 149, 219,
	0, 162, 239, 291, 292, 148, 314, 127, 306, 121,
	128, 305, 213, 0, 212, 308, 287, 295, 203, 196,
	0, 120, 293, 201, 195, 183, 158, 170, 235, 191,
	236, 171, 208, 207, 209, 0, 0, 0, 274, 302,
	315, 193, 133, 0, 262, 285, 0, 0, 134, 161,
	157, 234, 211, 129, 173, 271, 182, 189, 246, 313,
	223, 252, 138, 301, 270, 463, 475, 469, 471, 470,
	467, 468, 466, 465, 464, 477, 454, 455, 456, 457,
	460, 0, 472, 473, 0, 0, 0, 0, 490, 491,
	492, 493, 494, 495, 496, 489, 497, 498, 499, 500,
	501, 502, 503, 504, 505, 478, 479, 480, 481, 482,
	483, 484, 485, 488, 486, 487, 458, 111, 122, 186,
	68, 244, 160, 303, 0, 152, 0, 0, 0, 0,
	0, 0, 113, 114, 123, 132, 139, 151, 156, 159,
	165, 169, 172, 174, 175, 176, 180, 194, 197, 198,
	199, 200, 214, 215, 217, 218, 221, 222, 225, 227,
	228, 229, 231, 232, 233, 238, 241, 243, 245, 248,
	253, 254, 255, 256, 258, 259, 260, 264, 265, 266,
	267, 275, 279, 289, 290, 300, 309, 311, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 418, 0, 0, 0, 154,
	415, 0, 0, 0, 184, 0, 0, 146, 192, 190,
	0, 0, 0, 226, 281, 0, 0, 0, 462, 187,
	0, 0, 304, 272, 205, 0, 0, 0, 0, 451,
	452, 0, 0, 0, 0, 0, 0, 0, 0, 69,
	0, 0, 416, 439, 438, 441, 442, 443, 444, 0,
	0, 136, 440, 445, 446, 447, 0, 0, 0, 413,
	430, 0, 461, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 427, 428, 409, 0, 0, 0, 476,
	0, 429, 0, 0, 424, 425, 426, 431, 0, 0,
	0, 0, 115, 0, 0, 0, 0, 164, 206, 126,
	453, 0, 0, 177, 310, 0, 0, 474, 240, 0,
	277, 167, 185, 130, 112, 124, 140, 166, 216, 249,
	257, 459, 0, 0, 0, 0, 147, 0, 251, 224,
	299, 0, 0, 230, 250, 188, 288, 242, 297, 298,
	168, 282, 307, 312, 269, 155, 0, 116, 0, 237,
	150, 181, 0, 0, 0, 144, 0, 0, 0, 268,
	131, 284, 204, 210, 141, 143, 142, 125, 263, 286,
	135, 145, 273, 278, 117, 280, 296, 137, 261, 119,
	294, 276, 202, 178, 179, 118, 0, 247, 153, 163,
	149, 219, 0, 162, 239, 291, 292, 148, 314, 127,
	306, 121, 128, 305, 213, 0, 212, 308, 287, 295,
	203, 196, 0, 120, 293, 201, 195, 183, 158, 170,
	235, 191, 236, 171, 208, 207, 209, 0, 0, 0,
	274, 302, 315, 193, 133, 0, 262, 285, 0, 0,
	134, 161, 157, 234, 211, 129, 173, 271, 182, 189,
	246, 313, 223, 252, 138, 301, 270, 463, 475, 469,
	471, 470, 467, 468, 466, 465, 464, 477, 454, 455,
	456, 457, 460, 0, 472, 473, 0, 0, 0, 0,
	490, 491, 492, 493, 494, 495, 496, 489, 497, 498,
	499, 500, 501, 502, 503, 504, 505, 478, 479, 480,
	481, 482, 483, 484, 485, 488, 486, 487, 458, 111,
	122, 186, 0, 244, 160, 303, 0, 152, 0, 0,
	0, 0, 0, 0, 113, 114, 123, 132, 139, 151,
	156, 159, 165, 169, 172, 174, 175, 176, 180, 194,
	197, 198, 199, 200, 214, 215, 217, 218, 221, 222,
	225, 227, 228, 229, 231, 232, 233, 238, 241, 243,
	245, 248, 253, 254, 255, 256, 258, 259, 260, 264,
	265, 266, 267, 275, 279, 289, 290, 300, 309, 311,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 418, 0, 0,
	0, 154, 415, 0, 0, 0, 184, 0, 0, 146,
	192, 190, 0, 0, 0, 226, 281, 0, 0, 0,
	462, 187, 0, 0, 304, 272, 205, 0, 0, 0,
	0, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 0, 750, 416, 439, 438, 441, 442, 443,
	444, 0, 0, 136, 440, 445, 446, 447, 0, 0,
	0, 413, 430, 0, 461, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 427, 428, 0, 0, 0,
	0, 476, 0, 429, 0, 0, 424, 425, 426, 431,
	0, 0, 0, 0, 115, 0, 0, 0, 0, 164,
	206, 126, 453, 0, 0, 177, 310, 0, 0, 474,
	240, 0, 277, 167, 185, 130, 112, 124, 140, 166,
	216, 249, 257, 459, 0, 0, 0, 0, 147, 0,
	251, 224, 299, 0, 0, 230, 250, 188, 288, 242,
	297, 298, 168, 282, 307, 312, 269, 155, 0, 116,
	0, 237, 150, 181, 0, 0, 0, 144, 0, 0,
	0, 268, 131, 284, 204, 210, 141, 143, 142, 125,
	263, 286, 135, 145, 273, 278, 117, 280, 296, 137,
	261, 119, 294, 276, 202, 178, 179, 118, 0, 247,
	153, 163, 149, 219, 0, 162, 239, 291, 292, 148,
	314, 127, 306, 121, 128, 305, 213, 0, 212, 308,
	287, 295, 203, 196, 0, 120, 293, 201, 195, 183,
	158, 170, 235, 191, 236, 171, 208, 207, 209, 0,
	0, 0, 274, 302, 315, 193, 133, 0, 262, 285,
	0, 0, 134, 161, 157, 234, 211, 129, 173, 271,
	182, 189, 246, 313, 223, 252, 138, 301, 270, 463,
	475, 469, 471, 470, 467, 468, 466, 465, 464, 477,
	454, 455, 456, 457, 460, 0, 472, 473, 0, 0,
	0, 0, 490, 491, 492, 493, 494, 495, 496, 489,
	497, 498, 499, 500, 501, 502, 503, 504, 505, 478,
	479, 480, 481, 482, 483, 484, 485, 488, 486, 487,
	458, 111, 122, 186, 0, 244, 160, 303, 0, 152,
	0, 0, 0, 0, 0, 0, 113, 114, 123, 132,
	139, 151, 156, 159, 165, 169, 172, 174, 175, 176,
	180, 194, 197, 198, 199, 200, 214, 215, 217, 218,
	221, 222, 225, 227, 228, 229, 231, 232, 233, 238,
	241, 243, 245, 248, 253, 254, 255, 256, 258, 259,
	260, 264, 265, 266, 267, 275, 279, 289, 290, 300,
	309, 311, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 418,
	0, 0, 0, 154, 415, 0, 0, 0, 184, 0,
	0, 146, 192, 190, 0, 0, 0, 226, 281, 0,
	0, 0, 462, 187, 0, 0, 304, 272, 205, 0,
	0, 0, 0, 451, 452, 0, 0, 0, 0, 0,
	0, 0, 0, 69, 0, 0, 416, 439, 438, 441,
	442, 443, 444, 0, 0, 136, 440, 445, 446, 447,
	0, 0, 0, 413, 430, 0, 461, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 427, 428, 1170,
	0, 0, 0, 476, 0, 429, 0, 0, 424, 425,
	426, 431, 0, 0, 0, 0, 115, 0, 0, 0,
	0, 164, 206, 126, 453, 0, 0, 177, 310, 0,
	0, 474, 240, 0, 277, 167, 185, 130, 112, 124,
	140, 166, 216, 249, 257, 459, 0, 0, 0, 0,
	147, 0, 251, 224, 299, 0, 0, 230, 250, 188,
	288, 242, 297, 298, 168, 282, 307, 312, 269, 155,
	0, 116, 0, 237, 150, 181, 0, 0, 0, 144,
	0, 0, 0, 268, 131, 284, 204, 210, 141, 143,
	142, 125, 263, 286, 135, 145, 273, 278, 117, 280,
	296, 137, 261, 119, 294, 276, 202, 178, 179, 118,
	0, 247, 153, 163, 149, 219, 0, 162, 239, 291,
	292, 148, 314, 127, 306, 121, 128, 305, 213, 0,
	212, 308, 287, 295, 203, 196, 0, 120, 293, 201,
	195, 183, 158, 170, 235, 191, 236, 171, 208, 207,
	209, 0, 0, 0, 274, 302, 315, 193, 133, 0,
	262, 285, 0, 0, 134, 161, 157, 234, 211, 129,
	173, 271, 182, 189, 246, 313, 223, 252, 138, 301,
	270, 463, 475, 469, 471, 470, 467, 468, 466, 465,
	464, 477, 454, 455, 456, 457, 460, 0, 472, 473,
	0, 0, 0, 0, 490, 491, 492, 493, 494, 495,
	496, 489, 497, 498, 499, 500, 501, 502, 503, 504,
	505, 478, 479, 480, 481, 482, 483, 484, 485, 488,
	486, 487, 458, 111, 122, 186, 0, 244, 160, 303,
	0, 152, 0, 0, 0, 0, 0, 0, 113, 114,
	123, 132, 139, 151, 156, 159, 165, 169, 172, 174,
	175, 176, 180, 194, 197, 198, 199, 200, 214, 215,
	217, 218, 221, 222, 225, 227, 228, 229, 231, 232,
	233, 238, 241, 243, 245, 248, 253, 254, 255, 256,
	258, 259, 260, 264, 265, 266, 267, 275, 279, 289,
	290, 300, 309, 311, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	0, 418, 0, 0, 0, 154, 415, 0, 0, 0,
	184, 0, 0, 146, 192, 190, 0, 0, 0, 226,
	281, 0, 0, 0, 462, 187, 0, 0, 304, 272,
	205, 0, 0, 0, 0, 451, 452, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 0, 0, 416, 439,
	1181, 441, 442, 443, 444, 0, 0, 136, 440, 445,
	446, 447, 0, 0, 0, 413, 430, 0, 461, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 427,
	428, 1170, 0, 0, 0, 476, 0, 429, 0, 0,
	424, 425, 426, 431, 0, 0, 0, 0, 115, 0,
	0, 0, 0, 164, 206, 126, 453, 0, 0, 177,
	310, 0, 0, 474, 240, 0, 277, 167, 185, 130,
	112, 124, 140, 166, 216, 249, 257, 459, 0, 0,
	0, 0, 147, 0, 251, 224, 299, 0, 0, 230,
	250, 188, 288, 242, 297, 298, 168, 282, 307, 312,
	269, 155, 0, 116, 0, 237, 150, 181, 0, 0,
	0, 144, 0, 0, 0, 268, 131, 284, 204, 210,
	141, 143, 142, 125, 263, 286, 135, 145, 273, 278,
	117, 280, 296, 137, 261, 119, 294, 276, 202, 178,
	179, 118, 0, 247, 153, 163, 149, 219, 0, 162,
	239, 291, 292, 148, 314, 127, 306, 121, 128, 305,
	213, 0, 212, 308, 287, 295, 203, 196, 0, 120,
	293, 201, 195, 183, 158, 170, 235, 191, 236, 171,
	208, 207, 209, 0, 0, 0, 274, 302, 315, 193,
	133, 0, 262, 285, 0, 0, 134, 161, 157, 234,
	211, 129, 173, 271, 182, 189, 246, 313, 223, 252,
	138, 301, 270, 463, 475, 469, 471, 470, 467, 468,
	466, 465, 464, 477, 454, 455, 456, 457, 460, 0,
	472, 473, 0, 0, 0, 0, 490, 491, 492, 493,
	494, 495, 496, 489, 497, 498, 499, 500, 501, 502,
	503, 504, 505, 478, 479, 480, 481, 482, 483, 484,
	485, 488, 486, 487, 458, 111, 122, 186, 0, 244,
	160, 303, 0, 152, 0, 0, 0, 0, 0, 0,
	113, 114, 123, 132, 139, 151, 156, 159, 165, 169,
	172, 174, 175, 176, 180, 194, 197, 198, 199, 200,
	214, 215, 217, 218, 221, 222, 225, 227, 228, 229,
	231, 232, 233, 238, 241, 243, 245, 248, 253, 254,
	255, 256, 258, 259, 260, 264, 265, 266, 267, 275,
	279, 289, 290, 300, 309, 311, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 0, 418, 0, 0, 0, 154, 415, 0,
	0, 0, 184, 0, 0, 146, 192, 190, 0, 0,
	0, 226, 281, 0, 0, 0, 462, 187, 0, 0,
	304, 272, 205, 0, 0, 0, 0, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 69, 0, 0,
	416, 439, 1178, 441, 442, 443, 444, 0, 0, 136,
	440, 445, 446, 447, 0, 0, 0, 413, 430, 0,
	461, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 427, 428, 1170, 0, 0, 0, 476, 0, 429,
	0, 0, 424, 425, 426, 431, 0, 0, 0, 0,
	115, 0, 0, 0, 0, 164, 206, 126, 453, 0,
	0, 177, 310, 0, 0, 474, 240, 0, 277, 167,
	185, 130, 112, 124, 140, 166, 216, 249, 257, 459,
	0, 0, 0, 0, 147, 0, 251, 224, 299, 0,
	0, 230, 250, 188, 288, 242, 297, 298, 168, 282,
	307, 312, 269, 155, 0, 116, 0, 237, 150, 181,
	0, 0, 0, 144, 0, 0, 0, 268, 131, 284,
	204, 210, 141, 143, 142, 125, 263, 286, 135, 145,
	273, 278, 117, 280, 296, 137, 261, 119, 294, 276,
	202, 178, 179, 118, 0, 247, 153, 163, 149, 219,
	0, 162, 239, 291, 292, 148, 314, 127, 306, 121,
	128, 305, 213, 0, 212, 308, 287, 295, 203, 196,
	0, 120, 293, 201, 195, 183, 158, 170, 235, 191,
	236, 171, 208, 207, 209, 0, 0, 0, 274, 302,
	315, 193, 133, 0, 262, 285, 0, 0, 134, 161,
	157, 234, 211, 129, 173, 271, 182, 189, 246, 313,
	223, 252, 138, 301, 270, 463, 475, 469, 471, 470,
	467, 468, 466, 465, 464, 477, 454, 455, 456, 457,
	460, 0, 472, 473, 0, 0, 0, 0, 490, 491,
	492, 493, 494, 495, 496, 489, 497, 498, 499, 500,
	501, 502, 503, 504, 505, 478, 479, 480, 481, 482,
	483, 484, 485, 488, 486, 487, 458, 111, 122, 186,
	0, 244, 160, 303, 0, 152, 0, 0, 0, 0,
	0, 0, 113, 114, 123, 132, 139, 151, 156, 159,
	165, 169, 172, 174, 175, 176, 180, 194, 197, 198,
	199, 200, 214, 215, 217, 218, 221, 222, 225, 227,
	228, 229, 231, 232, 233, 238, 241, 243, 245, 248,
	253, 254, 255, 256, 258, 259, 260, 264, 265, 266,
	267, 275, 279, 289, 290, 300, 309, 311, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 418, 0, 0, 0, 154,
	415, 0, 0, 0, 184, 0, 0, 146, 192, 190,
	0, 0, 0, 226, 281, 0, 0, 0, 462, 187,
	0, 0, 304, 272, 205, 0, 0, 0, 0, 451,
	452, 0, 0, 0, 0, 0, 0, 0, 0, 69,
	0, 1088, 416, 439, 438, 441, 442, 443, 444, 0,
	0, 136, 440, 445, 446, 447, 0, 0, 0, 413,
	430, 0, 461, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 427, 428, 0, 0, 0, 0, 476,
	0, 429, 0, 0, 424, 425, 426, 431, 0, 0,
	0, 0, 115, 0, 0, 0, 0, 164, 206, 126,
	453, 0, 0, 177, 310, 0, 0, 474, 240, 0,
	277, 167, 185, 130, 112, 124, 140, 166, 216, 249,
	257, 459, 0, 0, 0, 0, 147, 0, 251, 224,
	299, 0, 0, 230, 250, 188, 288, 242, 297, 298,
	168, 282, 307, 312, 269, 155, 0, 116, 0, 237,
	150, 181, 0, 0, 0, 144, 0, 0, 0, 268,
	131, 284, 204, 210, 141, 143, 142, 125, 263, 286,
	135, 145, 273, 278, 117, 280, 296, 137, 261, 119,
	294, 276, 202, 178, 179, 118, 0, 247, 153, 163,
	149, 219, 0, 162, 239, 291, 292, 148, 314, 127,
	306, 121, 128, 305, 213, 0, 212, 308, 287, 295,
	203, 196, 0, 120, 293, 201, 195, 183, 158, 170,
	235, 191, 236, 171, 208, 207, 209, 0, 0, 0,
	274, 302, 315, 193, 133, 0, 262, 285, 0, 0,
	134, 161, 157, 234, 211, 129, 173, 271, 182, 189,
	246, 313, 223, 252, 138, 301, 270, 463, 475, 469,
	471, 470, 467, 468, 466, 465, 464, 477, 454, 455,
	456, 457, 460, 0, 472, 473, 0, 0, 0, 0,
	490, 491, 492, 493, 494, 495, 496, 489, 497, 498,
	499, 500, 501, 502, 503, 504, 505, 478, 479, 480,
	481, 482, 483, 484, 485, 488, 486, 487, 458, 111,
	122, 186, 0, 244, 160, 303, 0, 152, 0, 0,
	0, 0, 0, 0, 113, 114, 123, 132, 139, 151,
	156, 159, 165, 169, 172, 174, 175, 176, 180, 194,
	197, 198, 199, 200, 214, 215, 217, 218, 221, 222,
	225, 227, 228, 229, 231, 232, 233, 238, 241, 243,
	245, 248, 253, 254, 255, 256, 258, 259, 260, 264,
	265, 266, 267, 275, 279, 289, 290, 300, 309, 311,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 418, 0, 0,
	0, 154, 415, 0, 0, 0, 184, 0, 0, 146,
	192, 190, 0, 0, 0, 226, 281, 0, 0, 0,
	462, 187, 0, 0, 304, 272, 205, 0, 0, 0,
	0, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 0, 0, 416, 439, 438, 441, 442, 443,
	444, 0, 0, 136, 440, 445, 446, 447, 0, 0,
	0, 413, 430, 0, 461, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 427, 428, 0, 0, 0,
	0, 476, 0, 429, 0, 0, 424, 425, 426, 431,
	0, 0, 0, 0, 115, 0, 0, 0, 0, 164,
	206, 126, 453, 0, 0, 177, 310, 0, 0, 474,
	240, 0, 277, 167, 185, 130, 112, 124, 140, 166,
	216, 249, 257, 459, 0, 0, 0, 0, 147, 0,
	251, 224, 299, 0, 0, 230, 250, 188, 288, 242,
	297, 298, 168, 282, 307, 312, 269, 155, 0, 116,
	0, 237, 150, 181, 0, 0, 0, 144, 0, 0,
	0, 268, 131, 284, 204, 210, 141, 143, 142, 125,
	263, 286, 135, 145, 273, 278, 117, 280, 296, 137,
	261, 119, 294, 276, 202, 178, 179, 118, 0, 247,
	153, 163, 149, 219, 0, 162, 239, 291, 292, 148,
	314, 127, 306, 121, 128, 305, 213, 0, 212, 308,
	287, 295, 203, 196, 0, 120, 293, 201, 195, 183,
	158, 170, 235, 191, 236, 171, 208, 207, 209, 0,
	0, 0, 274, 302, 315, 193, 133, 0, 262, 285,
	0, 0, 134, 161, 157, 234, 211, 129, 173, 271,
	182, 189, 246, 313, 223, 252, 138, 301, 270, 463,
	475, 469, 471, 470, 467, 468, 466, 465, 464, 477,
	454, 455, 456, 457, 460, 0, 472, 473, 0, 0,
	0, 0, 490, 491, 492, 493, 494, 495, 496, 489,
	497, 498, 499, 500, 501, 502, 503, 504, 505, 478,
	479, 480, 481, 482, 483, 484, 485, 488, 486, 487,
	458, 111, 122, 186, 0, 244, 160, 303, 0, 152,
	0, 0, 0, 0, 0, 0, 113, 114, 123, 132,
	139, 151, 156, 159, 165, 169, 172, 174, 175, 176,
	180, 194, 197, 198, 199, 200, 214, 215, 217, 218,
	221, 222, 225, 227, 228, 229, 231, 232, 233, 238,
	241, 243, 245, 248, 253, 254, 255, 256, 258, 259,
	260, 264, 265, 266, 267, 275, 279, 289, 290, 300,
	309, 311, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 418,
	0, 0, 0, 154, 415, 0, 0, 0, 184, 0,
	0, 146, 192, 190, 0, 0, 0, 226, 281, 0,
	0, 0, 462, 187, 0, 0, 304, 272, 205, 0,
	0, 0, 0, 451, 452, 0, 0, 0, 0, 0,
	0, 0, 0, 69, 0, 0, 416, 439, 438, 441,
	442, 443, 444, 0, 0, 136, 440, 445, 446, 447,
	0, 0, 0, 413, 430, 0, 461, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 427, 428, 0,
	0, 0, 0, 476, 0, 429, 0, 0, 424, 425,
	426, 431, 0, 0, 0, 0, 115, 0, 0, 0,
	0, 164, 206, 126, 453, 0, 0, 177, 310, 0,
	0, 474, 240, 0, 277, 167, 185, 130, 112, 124,
	140, 166, 216, 249, 257, 459, 0, 0, 0, 0,
	147, 0, 251, 224, 299, 0, 0, 230, 250, 188,
	288, 242, 297, 298, 168, 282, 307, 312, 269, 155,
	0, 116, 0, 237, 150, 181, 0, 0, 0, 144,
	0, 0, 0, 268, 131, 284, 204, 210, 141, 143,
	142, 125, 263, 286, 135, 145, 273, 278, 117, 280,
	296, 137, 261, 119, 294, 276, 202, 178, 179, 118,
	0, 247, 153, 163, 149, 219, 0, 162, 239, 291,
	292, 148, 314, 127, 306, 121, 128, 305, 213, 0,
	212, 308, 287, 295, 203, 196, 0, 120, 293, 201,
	195, 183, 158, 170, 235, 191, 236, 171, 208, 207,
	209, 0, 0, 0, 274, 302, 315, 193, 133, 0,
	262, 285, 0, 0, 134, 161, 157, 234, 211, 129,
	173, 271, 182, 189, 246, 313, 223, 252, 138, 301,
	270, 463, 475, 469, 471, 470, 467, 468, 466, 465,
	464, 477, 454, 455, 456, 457, 460, 0, 472, 473,
	0, 0, 0, 0, 765, 766, 767, 768, 769, 773,
	774, 778, 779, 787, 786, 785, 788, 789, 791, 790,
	792, 770, 771, 772, 775, 776, 777, 780, 781, 784,
	782, 783, 458, 111, 122, 186, 0, 244, 160, 303,
	0, 152, 0, 0, 0, 0, 0, 0, 113, 114,
	123, 132, 139, 151, 156, 159, 165, 169, 172, 174,
	175, 176, 180, 194, 197, 198, 199, 200, 214, 215,
	217, 218, 221, 222, 225, 227, 228, 229, 231, 232,
	233, 238, 241, 243, 245, 248, 253, 254, 255, 256,
	258, 259, 260, 264, 265, 266, 267, 275, 279, 289,
	290, 300, 309, 311, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 154, 0, 0, 0, 0,
	184, 0, 0, 146, 192, 190, 0, 0, 0, 226,
	281, 0, 0, 0, 462, 187, 0, 0, 304, 272,
	205, 0, 0, 0, 0, 451, 452, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 0, 0, 416, 439,
	438, 441, 442, 443, 444, 0, 0, 136, 440, 445,
	446, 447, 0, 0, 0, 0, 430, 0, 461, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 427,
	428, 0, 0, 0, 0, 476, 0, 429, 0, 0,
	424, 425, 426, 431, 0, 0, 0, 0, 115, 0,
	0, 0, 0, 164, 206, 126, 453, 0, 0, 177,
	310, 0, 0, 474, 240, 0, 277, 167, 185, 130,
	112, 124, 140, 166, 216, 249, 257, 459, 0, 0,
	0, 0, 147, 0, 251, 224, 299, 0, 2201, 230,
	250, 188, 288, 242, 297, 298, 168, 282, 307, 312,
	269, 155, 0, 116, 0, 237, 150, 181, 0, 0,
	0, 144, 0, 0, 0, 268, 131, 284, 204, 210,
	141, 143, 142, 125, 263, 286, 135, 145, 273, 278,
	117, 280, 296, 137, 261, 119, 294, 276, 202, 178,
	179, 118, 0, 247, 153, 163, 149, 219, 0, 162,
	239, 291, 292, 148, 314, 127, 306, 121, 128, 305,
	213, 0, 212, 308, 287, 295, 203, 196, 0, 120,
	293, 201, 195, 183, 158, 170, 235, 191, 236, 171,
	208, 207, 209, 0, 0, 0, 274, 302, 315, 193,
	133, 0, 262, 285, 0, 0, 134, 161, 157, 234,
	211, 129, 173, 271, 182, 189, 246, 313, 223, 252,
	138, 301, 270, 463, 475, 469, 471, 470, 467, 468,
	466, 465, 464, 477, 454, 455, 456, 457, 460, 0,
	472, 473, 0, 0, 0, 0, 490, 491, 492, 493,
	494, 495, 496, 489, 497, 498, 499, 500, 501, 502,
	503, 504, 505, 478, 479, 480, 481, 482, 483, 484,
	485, 488, 486, 487, 458, 111, 122, 186, 0, 244,
	160, 303, 0, 152, 0, 0, 0, 0, 0, 0,
	113, 114, 123, 132, 139, 151, 156, 159, 165, 169,
	172, 174, 175, 176, 180, 194, 197, 198, 199, 200,
	214, 215, 217, 218, 221, 222, 225, 227, 228, 229,
	231, 232, 233, 238, 241, 243, 245, 248, 253, 254,
	255, 256, 258, 259, 260, 264, 265, 266, 267, 275,
	279, 289, 290, 300, 309, 311, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 154, 0, 0,
	0, 0, 184, 0, 0, 146, 192, 190, 0, 0,
	0, 226, 281, 0, 0, 0, 462, 187, 0, 0,
	304, 272, 205, 0, 0, 0, 0, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 69, 0, 750,
	416, 439, 438, 441, 442, 443, 444, 0, 0, 136,
	440, 445, 446, 447, 0, 0, 0, 0, 430, 0,
	461, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 427, 428, 0, 0, 0, 0, 476, 0, 429,
	0, 0, 424, 425, 426, 431, 0, 0, 0, 0,
	115, 0, 0, 0, 0, 164, 206, 126, 453, 0,
	0, 177, 310, 0, 0, 474, 240, 0, 277, 167,
	185, 130, 112, 124, 140, 166, 216, 249, 257, 459,
	0, 0, 0, 0, 147, 0, 251, 224, 299, 0,
	0, 230, 250, 188, 288, 242, 297, 298, 168, 282,
	307, 312, 269, 155, 0, 116, 0, 237, 150, 181,
	0, 0, 0, 144, 0, 0, 0, 268, 131, 284,
	204, 210, 141, 143, 142, 125, 263, 286, 135, 145,
	273, 278, 117, 280, 296, 137, 261, 119, 294, 276,
	202, 178, 179, 118, 0, 247, 153, 163, 149, 219,
	0, 162, 239, 291, 292, 148, 314, 127, 306, 121,
	128, 305, 213, 0, 212, 308, 287, 295, 203, 196,
	0, 120, 293, 201, 195, 183, 158, 170, 235, 191,
	236, 171, 208, 207, 209, 0, 0, 0, 274, 302,
	315, 193, 133, 0, 262, 285, 0, 0, 134, 161,
	157, 234, 211, 129, 173, 271, 182, 189, 246, 313,
	223, 252, 138, 301, 270, 463, 475, 469, 471, 470,
	467, 468, 466, 465, 464, 477, 454, 455, 456, 457,
	460, 0, 472, 473, 0, 0, 0, 0, 490, 491,
	492, 493, 494, 495, 496, 489, 497, 498, 499, 500,
	501, 502, 503, 504, 505, 478, 479, 480, 481, 482,
	483, 484, 485, 488, 486, 487, 458, 111, 122, 186,
	0, 244, 160, 303, 0, 152, 0, 0, 0, 0,
	0, 0, 113, 114, 123, 132, 139, 151, 156, 159,
	165, 169, 172, 174, 175, 176, 180, 194, 197, 198,
	199, 200, 214, 215, 217, 218, 221, 222, 225, 227,
	228, 229, 231, 232, 233, 238, 241, 243, 245, 248,
	253, 254, 255, 256, 258, 259, 260, 264, 265, 266,
	267, 275, 279, 289, 290, 300, 309, 311, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
	0, 0, 0, 0, 184, 0, 0, 146, 192, 190,
	0, 0, 0, 226, 281, 0, 0, 0, 462, 187,
	0, 0, 304, 272, 205, 0, 0, 0, 0, 451,
	452, 0, 0, 0, 0, 0, 0, 0, 0, 69,
	0, 0, 416, 439, 438, 441, 442, 443, 444, 0,
	0, 136, 440, 445, 446, 447, 0, 0, 0, 0,
	430, 0, 461, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 427, 428, 0, 0, 0, 0, 476,
	0, 429, 0, 0, 424, 425, 426, 431, 0, 0,
	0, 0, 115, 0, 0, 0, 0, 164, 206, 126,
	453, 0, 0, 177, 310, 0, 0, 474, 240, 0,
	277, 167, 185, 130, 112, 124, 140, 166, 216, 249,
	257, 459, 0, 0, 0, 0, 147, 0, 251, 224,
	299, 0, 0, 230, 250, 188, 288, 242, 297, 298,
	168, 282, 307, 312, 269, 155, 0, 116, 0, 237,
	150, 181, 0, 0, 0, 144, 0, 0, 0, 268,
	131, 284, 204, 210, 141, 143, 142, 125, 263, 286,
	135, 145, 273, 278, 117, 280, 296, 137, 261, 119,
	294, 276, 202, 178, 179, 118, 0, 247, 153, 163,
	149, 219, 0, 162, 239, 291, 292, 148, 314, 127,
	306, 121, 128, 305, 213, 0, 212, 308, 287, 295,
	203, 196, 0, 120, 293, 201, 195, 183, 158, 170,
	235, 191, 236, 171, 208, 207, 209, 0, 0, 0,
	274, 302, 315, 193, 133, 0, 262, 285, 0, 0,
	134, 161, 157, 234, 211, 129, 173, 271, 182, 189,
	246, 313, 223, 252, 138, 301, 270, 463, 475, 469,
	471, 470, 467, 468, 466, 465, 464, 477, 454, 455,
	456, 457, 460, 0, 472, 473, 0, 0, 0, 0,
	490, 491, 492, 493, 494, 495, 496, 489, 497, 498,
	499, 500, 501, 502, 503, 504, 505, 478, 479, 480,
	481, 482, 483, 484, 485, 488, 486, 487, 458, 111,
	122, 186, 0, 244, 160, 303, 0, 152, 0, 0,
	0, 0, 0, 0, 113, 114, 123, 132, 139, 151,
	156, 159, 165, 169, 172, 174, 175, 176, 180, 194,
	197, 198, 199, 200, 214, 215, 217, 218, 221, 222,
	225, 227, 228, 229, 231, 232, 233, 238, 241, 243,
	245, 248, 253, 254, 255, 256, 258, 259, 260, 264,
	265, 266, 267, 275, 279, 289, 290, 300, 309, 311,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 1252, 0, 0, 0,
	0, 154, 0, 0, 0, 0, 184, 0, 0, 146,
	192, 190, 0, 0, 0, 226, 281, 0, 0, 0,
	0, 187, 0, 0, 304, 272, 205, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1254, 1256, 0,
	0, 0, 0, 0, 109, 0, 366, 0, 0, 0,
	0, 0, 0, 136, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 115, 0, 0, 0, 0, 164,
	206, 126, 0, 0, 0, 177, 310, 0, 1255, 0,
	240, 0, 277, 167, 185, 130, 112, 124, 140, 166,
	216, 249, 257, 0, 0, 0, 0, 0, 147, 0,
	251, 224, 299, 0, 0, 230, 250, 188, 288, 242,
	297, 298, 168, 282, 307, 312, 269, 155, 0, 116,
	0, 237, 150, 181, 0, 0, 0, 144, 0, 0,
	0, 268, 131, 284, 204, 210, 141, 143, 142, 125,
	263, 286, 135, 145, 273, 278, 117, 280, 296, 137,
	261, 119, 294, 276, 202, 178, 179, 118, 0, 247,
	153, 163, 149, 219, 0, 162, 239, 291, 292, 148,
	314, 127, 306, 121, 128, 305, 213, 0, 212, 308,
	287, 295, 203, 196, 0, 120, 293, 201, 195, 183,
	158, 170, 235, 191, 236, 171, 208, 207, 209, 0,
	0, 0, 274, 302, 315, 193, 133, 0, 262, 285,
	0, 0, 134, 161, 157, 234, 211, 129, 173, 271,
	182, 189, 246, 313, 223, 252, 138, 301, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 367, 368, 369, 370, 371, 375, 376, 380,
	381, 389, 388, 387, 390, 391, 393, 392, 394, 372,
	373, 374, 377, 378, 379, 382, 383, 386, 384, 385,
	0, 111, 122, 186, 0, 244, 160, 303, 0, 152,
	0, 0, 0, 0, 0, 0, 113, 114, 123, 132,
	139, 151, 156, 159, 165, 169, 172, 174, 175, 176,
	180, 194, 197, 198, 199, 200, 214, 215, 217, 218,
	221, 222, 225, 227, 228, 229, 231, 232, 233, 238,
	241, 243, 245, 248, 253, 254, 255, 256, 258, 259,
	260, 264, 265, 266, 267, 275, 279, 289, 290, 300,
	309, 311, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 1252, 0,
	0, 0, 0, 154, 0, 0, 0, 0, 184, 0,
	0, 146, 192, 190, 0, 0, 0, 226, 281, 0,
	0, 0, 0, 187, 0, 0, 304, 272, 205, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1254,
	1256, 0, 0, 0, 0, 0, 109, 0, 366, 0,
	0, 0, 0, 0, 0, 136, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 115, 0, 0, 0,
	0, 164, 206, 126, 0, 0, 0, 177, 310, 0,
	1255, 0, 240, 0, 277, 167, 185, 130, 112, 124,
	140, 166, 216, 249, 257, 0, 0, 0, 0, 0,
	147, 0, 251, 224, 299, 0, 0, 1250, 250, 188,
	288, 242, 297, 298, 168, 282, 307, 312, 269, 155,
	0, 116, 0, 237, 150, 181, 0, 0, 0, 144,
	0, 0, 0, 268, 131, 284, 204, 210, 141, 143,
	142, 125, 263, 286, 135, 145, 273, 278, 117, 280,
	296, 137, 261, 119, 294, 276, 202, 178, 179, 118,
	0, 247, 153, 163, 149, 219, 0, 162, 239, 291,
	292, 148, 314, 127, 306, 121, 128, 305, 213, 0,
	212, 308, 287, 295, 203, 196, 0, 120, 293, 201,
	195, 183, 158, 170, 235, 191, 236, 171, 208, 207,
	209, 0, 0, 0, 274, 302, 315, 193, 133, 0,
	262, 285, 0, 0, 134, 161, 157, 234, 211, 129,
	173, 271, 182, 189, 246, 313, 223, 252, 138, 301,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 367, 368, 369, 370, 371, 375,
	376, 380, 381, 389, 388, 387, 390, 391, 393, 392,
	394, 372, 373, 374, 377, 378, 379, 382, 383, 386,
	384, 385, 0, 111, 122, 186, 0, 244, 160, 303,
	0, 152, 0, 0, 0, 0, 0, 0, 113, 114,
	123, 132, 139, 151, 156, 159, 165, 169, 172, 174,
	175, 176, 180, 194, 197, 198, 199, 200, 214, 215,
	217, 218, 221, 222, 225, 227, 228, 229, 231, 232,
	233, 238, 241, 243, 245, 248, 253, 254, 255, 256,
	258, 259, 260, 264, 265, 266, 267, 275, 279, 289,
	290, 300, 309, 311, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	807, 0, 0, 0, 0, 154, 0, 0, 0, 0,
	184, 0, 0, 146, 192, 190, 0, 0, 0, 226,
	281, 0, 0, 0, 0, 187, 0, 0, 304, 272,
	205, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 808, 0,
	811, 0, 0, 0, 0, 0, 0, 136, 0, 0,
	0, 0, 0, 804, 803, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 805, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 115, 0,
	0, 0, 0, 164, 206, 126, 0, 0, 0, 177,
	310, 0, 0, 0, 240, 0, 277, 167, 185, 130,
	112, 124, 140, 166, 216, 249, 257, 0, 0, 0,
	0, 0, 147, 0, 251, 224, 299, 0, 0, 230,
	250, 188, 288, 242, 297, 298, 168, 282, 307, 312,
	269, 155, 0, 116, 0, 237, 150, 181, 0, 0,
	0, 144, 0, 0, 0, 268, 131, 284, 204, 210,
	141, 143, 142, 125, 263, 286, 135, 145, 273, 278,
	117, 280, 296, 137, 261, 119, 294, 276, 202, 178,
	179, 118, 0, 247, 153, 163, 149, 219, 0, 162,
	239, 291, 292, 148, 314, 127, 306, 121, 128, 305,
	213, 0, 212, 308, 287, 295, 203, 196, 0, 120,
	293, 201, 195, 183, 158, 170, 235, 191, 236, 171,
	208, 207, 209, 0, 0, 0, 274, 302, 315, 193,
	133, 0, 262, 285, 0, 0, 134, 161, 157, 234,
	211, 129, 173, 271, 182, 189, 246, 313, 223, 252,
	138, 301, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 367, 368, 369, 370,
	371, 375, 376, 380, 381, 389, 388, 387, 390, 391,
	393, 392, 394, 372, 373, 374, 377, 378, 379, 382,
	383, 386, 384, 385, 0, 111, 122, 186, 0, 244,
	160, 303, 0, 152, 0, 0, 0, 0, 0, 0,
	113, 114, 123, 132, 139, 151, 156, 159, 165, 169,
	172, 174, 175, 176, 180, 194, 197, 198, 199, 200,
	214, 215, 217, 218, 221, 222, 225, 227, 228, 229,
	231, 232, 233, 238, 241, 243, 245, 248, 253, 254,
	255, 256, 258, 259, 260, 264, 265, 266, 267, 275,
	279, 289, 290, 300, 309, 311, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 154, 0, 0,
	0, 0, 184, 1505, 0, 146, 192, 190, 0, 0,
	0, 226, 281, 0, 0, 0, 0, 187, 0, 0,
	304, 272, 205, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 366, 0, 0, 0, 0, 0, 0, 136,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	115, 0, 0, 0, 0, 164, 206, 126, 0, 0,
	0, 177, 310, 0, 0, 0, 240, 0, 277, 167,
	185, 130, 112, 124, 140, 166, 216, 249, 257, 0,
	0, 0, 0, 0, 147, 0, 251, 224, 299, 0,
	0, 230, 250, 188, 288, 242, 297, 298, 168, 282,
	307, 312, 269, 155, 0, 116, 0, 237, 150, 181,
	0, 0, 0, 144, 0, 0, 0, 268, 131, 284,
	204, 210, 141, 143, 142, 125, 263, 286, 135, 145,
	273, 278, 117, 280, 296, 137, 261, 119, 294, 276,
	202, 178, 179, 118, 0, 247, 153, 163, 149, 219,
	0, 162, 239, 291, 292, 148, 314, 127, 306, 121,
	128, 305, 213, 0, 212, 308, 287, 295, 203, 196,
	0, 120, 293, 201, 195, 183, 158, 170, 235, 191,
	236, 171, 208, 207, 209, 0, 0, 0, 274, 302,
	315, 193, 133, 0, 262, 285, 0, 0, 134, 161,
	157, 234, 211, 129, 173, 271, 182, 189, 246, 313,
	223, 252, 138, 301, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 367, 368,
	369, 370, 371, 375, 376, 380, 381, 389, 388, 387,
	390, 391, 393, 392, 394, 372, 373, 374, 377, 378,
	379, 382, 383, 386, 384, 385, 0, 111, 122, 186,
	0, 244, 160, 303, 0, 152, 0, 0, 0, 0,
	0, 0, 113, 114, 123, 132, 139, 151, 156, 159,
	165, 169, 172, 174, 175, 176, 180, 194, 197, 198,
	199, 200, 214, 215, 217, 218, 221, 222, 225, 227,
	228, 229, 231, 232, 233, 238, 241, 243, 245, 248,
	253, 254, 255, 256, 258, 259, 260, 264, 265, 266,
	267, 275, 279, 289, 290, 300, 309, 311, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
	0, 0, 0, 0, 184, 0, 0, 146, 192, 190,
	0, 0, 0, 226, 281, 0, 0, 0, 0, 187,
	0, 0, 304, 272, 205, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 366, 0, 0, 0, 0, 0,
	0, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 115, 0, 0, 0, 0, 164, 206, 126,
	0, 0, 0, 177, 310, 0, 0, 0, 240, 0,
	277, 167, 185, 130, 112, 124, 140, 166, 216, 249,
	257, 0, 0, 0, 0, 0, 147, 0, 251, 224,
	299, 0, 0, 230, 250, 188, 288, 242, 297, 298,
	168, 282, 307, 312, 269, 155, 0, 116, 0, 237,
	150, 181, 0, 0, 0, 144, 0, 0, 0, 268,
	131, 284, 204, 210, 141, 143, 142, 125, 263, 286,
	135, 145, 273, 278, 117, 280, 296, 137, 261, 119,
	294, 276, 202, 178, 179, 118, 0, 247, 153, 163,
	149, 219, 0, 162, 239, 291, 292, 148, 314, 127,
	306, 121, 128, 305, 213, 0, 212, 308, 287, 295,
	203, 196, 0, 120, 293, 201, 195, 183, 158, 170,
	235, 191, 236, 171, 208, 207, 209, 0, 0, 0,
	274, 302, 315, 193, 133, 0, 262, 285, 0, 0,
	134, 161, 157, 234, 211, 129, 173, 271, 182, 189,
	246, 313, 223, 252, 138, 301, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	367, 368, 369, 370, 371, 375, 376, 380, 381, 389,
	388, 387, 390, 391, 393, 392, 394, 372, 373, 374,
	377, 378, 379, 382, 383, 386, 384, 385, 0, 111,
	122, 186, 0, 244, 160, 303, 0, 152, 0, 0,
	0, 0, 0, 0, 113, 114, 123, 132, 139, 151,
	156, 159, 165, 169, 172, 174, 175, 176, 180, 194,
	197, 198, 199, 200, 214, 215, 217, 218, 221, 222,
	225, 227, 228, 229, 231, 232, 233, 238, 241, 243,
	245, 248, 253, 254, 255, 256, 258, 259, 260, 264,
	265, 266, 267, 275, 279, 289, 290, 300, 309, 311,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 0, 0, 0, 0, 184, 0, 0, 146,
	192, 190, 0, 0, 0, 226, 281, 0, 0, 0,
	0, 187, 0, 0, 304, 272, 205, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 808, 0, 811, 0, 0, 0,
	0, 0, 0, 136, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 115, 0, 0, 0, 0, 164,
	206, 126, 0, 0, 0, 177, 310, 0, 0, 0,
	240, 0, 277, 167, 185, 130, 112, 124, 140, 166,
	216, 249, 257, 0, 0, 0, 0, 0, 147, 0,
	251, 224, 299, 0, 0, 230, 250, 188, 288, 242,
	297, 298, 168, 282, 307, 312, 269, 155, 0, 116,
	0, 237, 150, 181, 0, 0, 0, 144, 0, 0,
	0, 268, 131, 284, 204, 210, 141, 143, 142, 125,
	263, 286, 135, 145, 273, 278, 117, 280, 296, 137,
	261, 119, 294, 276, 202, 178, 179, 118, 0, 247,
	153, 163, 149, 219, 0, 162, 239, 291, 292, 148,
	314, 127, 306, 121, 128, 305, 213, 0, 212, 308,
	287, 295, 203, 196, 0, 120, 293, 201, 195, 183,
	158, 170, 235, 191, 236, 171, 208, 207, 209, 0,
	0, 0, 274, 302, 315, 193, 133, 0, 262, 285,
	0, 0, 134, 161, 157, 234, 211, 129, 173, 271,
	182, 189, 246, 313, 223, 252, 138, 301, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 367, 368, 369, 370, 371, 375, 376, 380,
	381, 389, 388, 387, 390, 391, 393, 392, 394, 372,
	373, 374, 377, 378, 379, 382, 383, 386, 384, 385,
	0, 111, 122, 186, 0, 244, 160, 303, 0, 152,
	0, 0, 0, 0, 0, 0, 113, 114, 123, 132,
	139, 151, 156, 159, 165, 169, 172, 174, 175, 176,
	180, 194, 197, 198, 199, 200, 214, 215, 217, 218,
	221, 222, 225, 227, 228, 229, 231, 232, 233, 238,
	241, 243, 245, 248, 253, 254, 255, 256, 258, 259,
	260, 264, 265, 266, 267, 275, 279, 289, 290, 300,
	309, 311, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 0, 0, 184, 0,
	0, 146, 192, 190, 0, 0, 0, 226, 281, 0,
	0, 0, 0, 187, 0, 0, 304, 272, 205, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 537, 0, 0, 0,
	0, 0, 0, 0, 0, 136, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 821, 820, 830, 831, 823, 824, 825,
	826, 827, 828, 829, 822, 0, 0, 832, 0, 0,
	0, 0, 0, 0, 0, 0, 115, 0, 0, 0,
	0, 164, 206, 126, 0, 0, 0, 177, 310, 0,
	0, 0, 240, 0, 277, 167, 185, 130, 112, 124,
	140, 166, 216, 249, 257, 0, 0, 0, 0, 0,
	147, 0, 251, 224, 299, 0, 0, 230, 250, 188,
	288, 242, 297, 298, 168, 282, 307, 312, 269, 155,
	0, 116, 0, 237, 150, 181, 0, 0, 0, 144,
	0, 0, 0, 268, 131, 284, 204, 210, 141, 143,
	142, 125, 263, 286, 135, 145, 273, 278, 117, 280,
	296, 137, 261, 119, 294, 276, 202, 178, 179, 118,
	0, 247, 153, 163, 149, 219, 0, 162, 239, 291,
	292, 148, 314, 127, 306, 121, 128, 305, 213, 0,
	212, 308, 287, 295, 203, 196, 0, 120, 293, 201,
	195, 183, 158, 170, 235, 191, 236, 171, 208, 207,
	209, 0, 0, 0, 274, 302, 315, 193, 133, 0,
	262, 285, 0, 0, 134, 161, 157, 234, 211, 129,
	173, 271, 182, 189, 246, 313, 223, 252, 138, 301,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 122, 186, 0, 244, 160, 303,
	0, 152, 0, 0, 0, 0, 0, 0, 113, 114,
	123, 132, 139, 151, 156, 159, 165, 169, 172, 174,
	175, 176, 180, 194, 197, 198, 199, 200, 214, 215,
	217, 218, 221, 222, 225, 227, 228, 229, 231, 232,
	233, 238, 241, 243, 245, 248, 253, 254, 255, 256,
	258, 259, 260, 264, 265, 266, 267, 275, 279, 289,
	290, 300, 309, 311, 29, 283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 154, 0, 0, 0,
	0, 184, 0, 0, 146, 192, 190, 0, 0, 0,
	226, 281, 0, 0, 0, 1247, 187, 0, 0, 304,
	272, 205, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 69, 0, 0, 109,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 115,
	0, 0, 0, 0, 164, 206, 126, 0, 0, 0,
	177, 310, 0, 0, 0, 240, 0, 277, 167, 185,
	130, 112, 124, 140, 166, 216, 249, 257, 0, 0,
	0, 0, 0, 147, 0, 251, 224, 299, 0, 0,
	230, 250, 188, 288, 242, 297, 298, 168, 282, 307,
	312, 269, 155, 0, 116, 0, 237, 150, 181, 0,
	0, 0, 144, 0, 0, 0, 268, 131, 284, 204,
	210, 141, 143, 142, 125, 263, 286, 135, 145, 273,
	278, 117, 280, 296, 137, 261, 119, 294, 276, 202,
	178, 179, 118, 0, 247, 153, 163, 149, 219, 0,
	162, 239, 291, 292, 148, 314, 127, 306, 121, 128,
	305, 213, 0, 212, 308, 287, 295, 203, 196, 0,
	120, 293, 201, 195, 183, 158, 170, 235, 191, 236,
	171, 208, 207, 209, 0, 0, 0, 274, 302, 315,
	193, 133, 0, 262, 285, 0, 0, 134, 161, 157,
	234, 211, 129, 173, 271, 182, 189, 246, 313, 223,
	252, 138, 301, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 122, 186, 68,
	244, 160, 303, 0, 152, 0, 0, 0, 0, 0,
	0, 113, 114, 123, 132, 139, 151, 156, 159, 165,
	169, 172, 174, 175, 176, 180, 194, 197, 198, 199,
	200, 214, 215, 217, 218, 221, 222, 225, 227, 228,
	229, 231, 232, 233, 238, 241, 243, 245, 248, 253,
	254, 255, 256, 258, 259, 260, 264, 265, 266, 267,
	275, 279, 289, 290, 300, 309, 311, 29, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
	0, 0, 0, 0, 184, 0, 0, 146, 192, 190,
	0, 0, 0, 226, 281, 0, 0, 0, 0, 187,
	0, 0, 304, 272, 205, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 69,
	0, 0, 537, 0, 0, 0, 0, 0, 0, 0,
	0, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 115, 0, 0, 0, 0, 164, 206, 126,
	0, 0, 0, 177, 310, 0, 0, 0, 240, 0,
	277, 167, 185, 130, 112, 124, 140, 166, 216, 249,
	257, 0, 0, 0, 0, 0, 147, 0, 251, 224,
	299, 0, 0, 230, 250, 188, 288, 242, 297, 298,
	168, 282, 307, 312, 269, 155, 0, 116, 0, 237,
	150, 181, 0, 0, 0, 144, 0, 0, 0, 268,
	131, 284, 204, 210, 141, 143, 142, 125, 263, 286,
	135, 145, 273, 278, 117, 280, 296, 137, 261, 119,
	294, 276, 202, 178, 179, 118, 0, 247, 153, 163,
	149, 219, 0, 162, 239, 291, 292, 148, 314, 127,
	306, 121, 128, 305, 213, 0, 212, 308, 287, 295,
	203, 196, 0, 120, 293, 201, 195, 183, 158, 170,
	235, 191, 236, 171, 208, 207, 209, 0, 0, 0,
	274, 302, 315, 193, 133, 0, 262, 285, 0, 0,
	134, 161, 157, 234, 211, 129, 173, 271, 182, 189,
	246, 313, 223, 252, 138, 301, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	122, 186, 68, 244, 160, 303, 0, 152, 0, 0,
	0, 0, 0, 0, 113, 114, 123, 132, 139, 151,
	156, 159, 165, 169, 172, 174, 175, 176, 180, 194,
	197, 198, 199, 200, 214, 215, 217, 218, 221, 222,
	225, 227, 228, 229, 231, 232, 233, 238, 241, 243,
	245, 248, 253, 254, 255, 256, 258, 259, 260, 264,
	265, 266, 267, 275, 279, 289, 290, 300, 309, 311,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 955, 0, 0, 0, 184, 0, 0, 146,
	192, 190, 0, 0, 0, 226, 281, 0, 0, 0,
	0, 187, 0, 0, 304, 272, 205, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 537, 0, 954, 0, 0, 0,
	0, 0, 0, 136, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 115, 0, 0, 0, 0, 164,
	206, 126, 0, 0, 0, 177, 310, 0, 0, 0,
	240, 0, 277, 167, 185, 130, 112, 124, 140, 166,
	216, 249, 257, 0, 0, 0, 0, 0, 147, 0,
	251, 224, 299, 0, 0, 230, 250, 188, 288, 242,
	297, 298, 168, 282, 307, 312, 269, 155, 0, 116,
	0, 237, 150, 181, 0, 0, 0, 144, 0, 0,
	0, 268, 131, 284, 204, 210, 141, 143, 142, 125,
	263, 286, 135, 145, 273, 278, 117, 280, 296, 137,
	261, 119, 294, 276, 202, 178, 179, 118, 0, 247,
	153, 163, 149, 219, 0, 162, 239, 291, 292, 148,
	314, 127, 306, 121, 128, 305, 213, 0, 212, 308,
	287, 295, 203, 196, 0, 120, 293, 201, 195, 183,
	158, 170, 235, 191, 236, 171, 208, 207, 209, 0,
	0, 0, 274, 302, 315, 193, 133, 0, 262, 285,
	0, 0, 134, 161, 157, 234, 211, 129, 173, 271,
	182, 189, 246, 313, 223, 252, 138, 301, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 122, 186, 0, 244, 160, 303, 0, 152,
	0, 0, 0, 0, 0, 0, 113, 114, 123, 132,
	139, 151, 156, 159, 165, 169, 172, 174, 175, 176,
	180, 194, 197, 198, 199, 200, 214, 215, 217, 218,
	221, 222, 225, 227, 228, 229, 231, 232, 233, 238,
	241, 243, 245, 248, 253, 254, 255, 256, 258, 259,
	260, 264, 265, 266, 267, 275, 279, 289, 290, 300,
	309, 311, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 0, 0, 184, 0,
	0, 146, 192, 190, 0, 0, 0, 226, 281, 0,
	0, 0, 0, 187, 0, 0, 304, 272, 205, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 69, 0, 0, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 136, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 115, 0, 0, 0,
	0, 164, 206, 126, 0, 0, 0, 177, 310, 0,
	0, 0, 240, 0, 277, 167, 185, 130, 112, 124,
	140, 166, 216, 249, 257, 0, 0, 0, 0, 0,
	147, 0, 251, 224, 299, 0, 0, 230, 250, 188,
	288, 242, 297, 298, 168, 282, 307, 312, 269, 155,
	0, 116, 0, 237, 150, 181, 0, 0, 0, 144,
	0, 0, 0, 268, 131, 284, 204, 210, 141, 143,
	142, 125, 263, 286, 135, 145, 273, 278, 117, 280,
	296, 137, 261, 119, 294, 276, 202, 178, 179, 118,
	0, 247, 153, 163, 149, 219, 0, 162, 239, 291,
	292, 148, 314, 127, 306, 121, 128, 305, 213, 0,
	212, 308, 287, 295, 203, 196, 0, 120, 293, 201,
	195, 183, 158, 170, 235, 191, 236, 171, 208, 207,
	209, 0, 0, 0, 274, 302, 315, 193, 133, 0,
	262, 285, 0, 0, 134, 161, 157, 234, 211, 129,
	173, 271, 182, 189, 246, 313, 223, 252, 138, 301,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 122, 186, 0, 244, 160, 303,
	0, 152, 0, 0, 0, 0, 0, 0, 113, 114,
	123, 132, 139, 151, 156, 159, 165, 169, 172, 174,
	175, 176, 180, 194, 197, 198, 199, 200, 214, 215,
	217, 218, 221, 222, 225, 227, 228, 229, 231, 232,
	233, 238, 241, 243, 245, 248, 253, 254, 255, 256,
	258, 259, 260, 264, 265, 266, 267, 275, 279, 289,
	290, 300, 309, 311, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 154, 0, 0, 0, 0,
	184, 0, 0, 146, 192, 190, 0, 0, 0, 226,
	281, 0, 0, 0, 0, 187, 0, 0, 304, 272,
	205, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 0, 0, 537, 0,
	0, 0, 0, 0, 0, 0, 0, 136, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 115, 0,
	0, 0, 0, 164, 206, 126, 0, 0, 0, 177,
	310, 0, 0, 0, 240, 0, 277, 167, 185, 130,
	112, 124, 140, 166, 216, 249, 257, 0, 0, 0,
	0, 0, 147, 0, 251, 224, 299, 0, 0, 230,
	250, 188, 288, 242, 297, 298, 168, 282, 307, 312,
	269, 155, 0, 116, 0, 237, 150, 181, 0, 0,
	0, 144, 0, 0, 0, 268, 131, 284, 204, 210,
	141, 143, 142, 125, 263, 286, 135, 145, 273, 278,
	117, 280, 296, 137, 261, 119, 294, 276, 202, 178,
	179, 118, 0, 247, 153, 163, 149, 219, 0, 162,
	239, 291, 292, 148, 314, 127, 306, 121, 128, 305,
	213, 0, 212, 308, 287, 295, 203, 196, 0, 120,
	293, 201, 195, 183, 158, 170, 235, 191, 236, 171,
	208, 207, 209, 0, 0, 0, 274, 302, 315, 193,
	133, 0, 262, 285, 0, 0, 134, 161, 157, 234,
	211, 129, 173, 271, 182, 189, 246, 313, 223, 252,
	138, 301, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 122, 186, 0, 244,
	160, 303, 0, 152, 0, 0, 0, 0, 0, 0,
	113, 114, 123, 132, 139, 151, 156, 159, 165, 169,
	172, 174, 175, 176, 180, 194, 197, 198, 199, 200,
	214, 215, 217, 218, 221, 222, 225, 227, 228, 229,
	231, 232, 233, 238, 241, 243, 245, 248, 253, 254,
	255, 256, 258, 259, 260, 264, 265, 266, 267, 275,
	279, 289, 290, 300, 309, 311, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 0, 924, 154, 0, 0,
	0, 0, 184, 0, 0, 146, 192, 190, 0, 0,
	0, 226, 281, 0, 0, 0, 0, 187, 0, 0,
	304, 272, 205, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 136,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	115, 0, 0, 0, 0, 164, 206, 126, 0, 0,
	0, 177, 310, 0, 0, 0, 240, 0, 277, 167,
	185, 130, 112, 124, 140, 166, 216, 249, 257, 0,
	0, 0, 0, 0, 147, 0, 251, 224, 299, 0,
	0, 230, 250, 188, 288, 242, 297, 298, 168, 282,
	307, 312, 269, 155, 0, 116, 0, 237, 150, 181,
	0, 0, 0, 144, 0, 0, 0, 268, 131, 284,
	204, 210, 141, 143, 142, 125, 263, 286, 135, 145,
	273, 278, 117, 280, 296, 137, 261, 119, 294, 276,
	202, 178, 179, 118, 0, 247, 153, 163, 149, 219,
	0, 162, 239, 291, 292, 148, 314, 127, 306, 121,
	128, 305, 213, 0, 212, 308, 287, 295, 203, 196,
	0, 120, 293, 201, 195, 183, 158, 170, 235, 191,
	236, 171, 208, 207, 209, 0, 0, 0, 274, 302,
	315, 193, 133, 0, 262, 285, 0, 0, 134, 161,
	157, 234, 211, 129, 173, 271, 182, 189, 246, 313,
	223, 252, 138, 301, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 122, 186,
	0, 244, 160, 303, 0, 152, 0, 0, 0, 0,
	0, 0, 113, 114, 123, 132, 139, 151, 156, 159,
	165, 169, 172, 174, 175, 176, 180, 194, 197, 198,
	199, 200, 214, 215, 217, 218, 221, 222, 225, 227,
	228, 229, 231, 232, 233, 238, 241, 243, 245, 248,
	253, 254, 255, 256, 258, 259, 260, 264, 265, 266,
	267, 275, 279, 289, 290, 300, 309, 311, 283, 0,
	0, 0, 508, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
	0, 0, 0, 0, 184, 0, 0, 146, 192, 190,
	0, 0, 0, 226, 281, 0, 0, 0, 0, 187,
	0, 0, 304, 272, 205, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 115, 0, 0, 0, 0, 164, 206, 126,
	0, 0, 0, 177, 310, 0, 0, 0, 240, 0,
	277, 167, 185, 130, 112, 124, 140, 166, 216, 249,
	257, 0, 0, 0, 0, 0, 147, 0, 251, 224,
	299, 0, 0, 230, 250, 188, 288, 242, 297, 298,
	168, 282, 307, 312, 269, 155, 0, 116, 0, 237,
	150, 181, 0, 0, 0, 144, 0, 0, 0, 268,
	131, 284, 204, 210, 141, 143, 142, 125, 263, 286,
	135, 145, 273, 278, 117, 280, 296, 137, 261, 119,
	294, 276, 202, 178, 179, 118, 0, 247, 153, 163,
	149, 219, 0, 162, 239, 291, 292, 148, 314, 127,
	306, 121, 128, 305, 213, 0, 212, 308, 287, 295,
	203, 196, 0, 120, 293, 201, 195, 183, 158, 170,
	235, 191, 236, 171, 208, 207, 209, 0, 0, 0,
	274, 302, 315, 193, 133, 0, 262, 285, 0, 0,
	134, 161, 157, 234, 211, 129, 173, 271, 182, 189,
	246, 313, 223, 252, 138, 301, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	122, 186, 0, 244, 160, 303, 0, 152, 0, 0,
	0, 0, 0, 0, 113, 114, 123, 132, 139, 151,
	156, 159, 165, 169, 172, 174, 175, 176, 180, 194,
	197, 198, 199, 200, 214, 215, 217, 218, 221, 222,
	225, 227, 228, 229, 231, 232, 233, 238, 241, 243,
	245, 248, 253, 254, 255, 256, 258, 259, 260, 264,
	265, 266, 267, 275, 279, 289, 290, 300, 309, 311,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 0, 0, 0, 0, 184, 0, 0, 146,
	192, 190, 0, 0, 0, 226, 281, 0, 0, 0,
	0, 187, 0, 0, 304, 272, 205, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 115, 0, 0, 0, 0, 164,
	206, 126, 0, 106, 0, 177, 310, 0, 0, 0,
	240, 0, 277, 167, 185, 130, 112, 124, 140, 166,
	216, 249, 257, 0, 0, 0, 0, 0, 147, 0,
	251, 224, 299, 0, 0, 230, 250, 188, 288, 242,
	297, 298, 168, 282, 307, 312, 269, 155, 0, 116,
	0, 237, 150, 181, 0, 0, 0, 144, 0, 0,
	0, 268, 131, 284, 204, 210, 141, 143, 142, 125,
	263, 286, 135, 145, 273, 278, 117, 280, 296, 137,
	261, 119, 294, 276, 202, 178, 179, 118, 0, 247,
	153, 163, 149, 219, 0, 162, 239, 291, 292, 148,
	314, 127, 306, 121, 128, 305, 213, 0, 212, 308,
	287, 295, 203, 196, 0, 120, 293, 201, 195, 183,
	158, 170, 235, 191, 236, 171, 208, 207, 209, 0,
	0, 0, 274, 302, 315, 193, 133, 0, 262, 285,
	0, 0, 134, 161, 157, 234, 211, 129, 173, 271,
	182, 189, 246, 313, 223, 252, 138, 301, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 122, 186, 0, 244, 160, 303, 0, 152,
	0, 0, 0, 0, 0, 0, 113, 114, 123, 132,
	139, 151, 156, 159, 165, 169, 172, 174, 175, 176,
	180, 194, 197, 198, 199, 200, 214, 215, 217, 218,
	221, 222, 225, 227, 228, 229, 231, 232, 233, 238,
	241, 243, 245, 248, 253, 254, 255, 256, 258, 259,
	260, 264, 265, 266, 267, 275, 279, 289, 290, 300,
	309, 311, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 0, 0, 184, 0,
	0, 146, 192, 190, 0, 0, 0, 226, 281, 0,
	0, 0, 0, 187, 0, 0, 304, 272, 205, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 537, 0, 0, 0,
	0, 0, 0, 0, 0, 136, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 115, 0, 0, 0,
	0, 164, 206, 126, 0, 0, 0, 177, 310, 0,
	0, 0, 240, 0, 277, 167, 185, 130, 112, 124,
	140, 166, 216, 249, 257, 0, 0, 0, 0, 0,
	147, 0, 251, 224, 299, 0, 0, 230, 250, 188,
	288, 242, 297, 298, 168, 282, 307, 312, 269, 155,
	0, 116, 0, 237, 150, 181, 0, 0, 0, 144,
	0, 0, 0, 268, 131, 284, 204, 210, 141, 143,
	142, 125, 263, 286, 135, 145, 273, 278, 117, 280,
	296, 137, 261, 119, 294, 276, 202, 178, 179, 118,
	0, 247, 153, 163, 149, 219, 0, 162, 239, 291,
	292, 148, 314, 127, 306, 121, 128, 305, 213, 0,
	212, 308, 287, 295, 203, 196, 0, 120, 293, 201,
	195, 183, 158, 170, 235, 191, 236, 171, 208, 207,
	209, 0, 0, 0, 274, 302, 315, 193, 133, 0,
	262, 285, 0, 0, 134, 161, 157, 234, 211, 129,
	173, 271, 182, 189, 246, 313, 223, 252, 138, 301,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 122, 186, 0, 244, 160, 303,
	0, 152, 0, 0, 0, 0, 0, 0, 113, 114,
	123, 132, 139, 151, 156, 159, 165, 169, 172, 174,
	175, 176, 180, 194, 197, 198, 199, 200, 214, 215,
	217, 218, 221, 222, 225, 227, 228, 229, 231, 232,
	233, 238, 241, 243, 245, 248, 253, 254, 255, 256,
	258, 259, 260, 264, 265, 266, 267, 275, 279, 289,
	290, 300, 309, 311, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 154, 0, 0, 0, 0,
	184, 0, 0, 146, 192, 190, 0, 0, 0, 226,
	281, 0, 0, 0, 0, 187, 0, 0, 304, 272,
	205, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 136, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 115, 0,
	0, 0, 0, 164, 206, 126, 0, 0, 0, 177,
	310, 0, 0, 0, 240, 0, 277, 167, 185, 130,
	112, 124, 140, 166, 216, 249, 257, 0, 0, 0,
	0, 0, 147, 0, 251, 224, 299, 0, 0, 230,
	250, 188, 288, 242, 297, 298, 168, 282, 307, 312,
	269, 155, 0, 116, 0, 237, 150, 181, 0, 0,
	0, 144, 0, 0, 0, 268, 131, 284, 204, 210,
	141, 143, 142, 125, 263, 286, 135, 145, 273, 278,
	117, 280, 296, 137, 261, 119, 294, 276, 202, 178,
	179, 118, 0, 247, 153, 163, 149, 219, 0, 162,
	239, 291, 292, 148, 314, 127, 306, 121, 128, 305,
	213, 0, 212, 308, 287, 295, 203, 196, 0, 120,
	293, 201, 195, 183, 158, 170, 235, 191, 236, 171,
	208, 207, 209, 0, 0, 0, 274, 302, 315, 193,
	133, 0, 262, 285, 0, 0, 134, 161, 157, 234,
	211, 129, 173, 271, 182, 189, 246, 313, 223, 252,
	138, 301, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 122, 186, 0, 244,
	160, 303, 0, 152, 0, 0, 0, 0, 0, 0,
	113, 114, 123, 132, 139, 151, 156, 159, 165, 169,
	172, 174, 175, 176, 180, 194, 197, 198, 199, 200,
	214, 215, 217, 218, 221, 222, 225, 227, 228, 229,
	231, 232, 233, 238, 241, 243, 245, 248, 253, 254,
	255, 256, 258, 259, 260, 264, 265, 266, 267, 275,
	279, 289, 290, 300, 309, 311, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 154, 0, 0,
	0, 0, 184, 0, 0, 146, 192, 190, 0, 0,
	0, 226, 281, 0, 0, 0, 0, 187, 0, 0,
	304, 272, 205, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	416, 0, 0, 0, 0, 0, 0, 0, 0, 136,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	115, 0, 0, 0, 0, 164, 206, 126, 0, 0,
	0, 177, 310, 0, 0, 0, 240, 0, 277, 167,
	185, 130, 112, 124, 140, 166, 216, 249, 257, 0,
	0, 0, 0, 0, 147, 0, 251, 224, 299, 0,
	0, 230, 250, 188, 288, 242, 297, 298, 168, 282,
	307, 312, 269, 155, 0, 116, 0, 237, 150, 181,
	0, 0, 0, 144, 0, 0, 0, 268, 131, 284,
	204, 210, 141, 143, 142, 125, 263, 286, 135, 145,
	273, 278, 117, 280, 296, 137, 261, 119, 294, 276,
	202, 178, 179, 118, 0, 247, 153, 163, 149, 219,
	0, 162, 239, 291, 292, 148, 314, 127, 306, 121,
	525, 305, 213, 0, 212, 308, 287, 295, 203, 196,
	0, 120, 293, 201, 195, 183, 158, 170, 235, 191,
	236, 171, 208, 207, 209, 0, 0, 0, 274, 302,
	315, 193, 133, 0, 262, 285, 0, 0, 134, 161,
	157, 234, 526, 524, 173, 271, 182, 189, 246, 313,
	223, 252, 138, 301, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 122, 186,
	0, 244, 160, 303, 0, 152, 0, 0, 0, 0,
	0, 0, 113, 114, 123, 132, 139, 151, 156, 159,
	165, 169, 172, 174, 175, 176, 180, 194, 197, 198,
	199, 200, 214, 215, 217, 218, 221, 222, 225, 227,
	228, 229, 231, 232, 233, 238, 241, 243, 245, 248,
	253, 254, 255, 256, 258, 259, 260, 264, 265, 266,
	267, 275, 279, 289, 290, 300, 309, 311, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 220,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
	0, 0, 0, 0, 184, 0, 0, 146, 192, 190,
	0, 0, 0, 226, 281, 0, 0, 0, 0, 187,
	0, 0, 304, 272, 205, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 416, 0, 0, 0, 0, 0, 0, 0,
	0, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 115, 0, 0, 0, 0, 164, 206, 126,
	0, 0, 0, 177, 310, 0, 0, 0, 240, 0,
	277, 167, 185, 130, 112, 124, 140, 166, 216, 249,
	257, 0, 0, 0, 0, 0, 147, 0, 251, 224,
	299, 0, 0, 230, 250, 188, 288, 242, 297, 298,
	168, 282, 307, 312, 269, 155, 0, 116, 0, 237,
	150, 181, 0, 0, 0, 144, 0, 0, 0, 268,
	131, 284, 204, 210, 141, 143, 142, 125, 263, 286,
	135, 145, 273, 278, 117, 280, 296, 137, 261, 119,
	294, 276, 202, 178, 179, 118, 0, 247, 153, 163,
	149, 219, 0, 162, 239, 291, 292, 148, 314, 127,
	306, 121, 128, 305, 213, 0, 212, 308, 287, 295,
	203, 196, 0, 120, 293, 201, 195, 183, 158, 170,
	235, 191, 236, 171, 208, 207, 209, 0, 0, 0,
	274, 302, 315, 193, 133, 0, 262, 285, 0, 0,
	134, 161, 157, 234, 211, 129, 173, 271, 182, 189,
	246, 313, 223, 252, 138, 301, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	122, 186, 0, 244, 160, 303, 0, 152, 0, 0,
	0, 0, 0, 0, 113, 114, 123, 132, 139, 151,
	156, 159, 165, 169, 172, 174, 175, 176, 180, 194,
	197, 198, 199, 200, 214, 215, 217, 218, 221, 222,
	225, 227, 228, 229, 231, 232, 233, 238, 241, 243,
	245, 248, 253, 254, 255, 256, 258, 259, 260, 264,
	265, 266, 267, 275, 279, 289, 290, 300, 309, 311,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 220, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 0, 0, 0, 0, 184, 0, 0, 146,
	192, 190, 0, 0, 0, 226, 281, 0, 0, 0,
	0, 187, 0, 0, 304, 272, 205, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 416, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 115, 0, 0, 0, 0, 164,
	206, 126, 0, 0, 0, 177, 310, 0, 0, 0,
	240, 0, 277, 167, 185, 130, 112, 124, 140, 166,
	216, 249, 257, 0, 0, 0, 0, 0, 147, 0,
	251, 224, 299, 0, 0, 230, 250, 188, 288, 242,
	297, 298, 168, 282, 307, 312, 269, 155, 0, 116,
	0, 237, 150, 181, 0, 0, 0, 144, 0, 0,
	0, 268, 131, 284, 204, 210, 141, 143, 142, 125,
	263, 286, 135, 145, 273, 278, 117, 280, 946, 137,
	261, 119, 294, 276, 202, 178, 179, 118, 0, 247,
	153, 163, 149, 219, 0, 162, 239, 291, 292, 148,
	314, 127, 306, 121, 525, 305, 213, 0, 212, 308,
	287, 295, 203, 196, 0, 120, 293, 201, 195, 183,
	158, 170, 235, 191, 236, 171, 208, 207, 209, 0,
	0, 0, 274, 302, 315, 193, 133, 0, 262, 285,
	0, 0, 134, 161, 157, 234, 526, 524, 173, 271,
	182, 189, 246, 313, 223, 252, 138, 301, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 122, 186, 0, 244, 160, 303, 0, 152,
	0, 0, 0, 0, 0, 0, 113, 114, 123, 132,
	139, 151, 156, 159, 165, 169, 172, 174, 175, 176,
	180, 194, 197, 198, 199, 200, 214, 215, 217, 218,
	221, 222, 225, 227, 228, 229, 231, 232, 233, 238,
	241, 243, 245, 248, 253, 254, 255, 256, 258, 259,
	260, 264, 265, 266, 267, 275, 279, 289, 290, 300,
	309, 311, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 0, 0, 184, 0,
	0, 146, 192, 190, 0, 0, 0, 226, 281, 0,
	0, 0, 0, 187, 0, 0, 304, 272, 205, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 416, 0, 0, 0,
	0, 0, 0, 0, 0, 136, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 115, 0, 0, 0,
	0, 164, 206, 126, 0, 0, 0, 177, 310, 0,
	0, 0, 240, 0, 277, 167, 185, 130, 112, 124,
	140, 166, 216, 249, 257, 0, 0, 0, 0, 0,
	147, 0, 251, 224, 299, 0, 0, 230, 250, 188,
	288, 242, 297, 298, 168, 282, 307, 312, 269, 155,
	0, 116, 0, 237, 150, 181, 0, 0, 0, 144,
	0, 0, 0, 268, 131, 284, 204, 210, 141, 143,
	142, 125, 263, 286, 135, 145, 273, 278, 117, 280,
	516, 137, 261, 119, 294, 276, 202, 178, 179, 118,
	0, 247, 153, 163, 149, 219, 0, 162, 239, 291,
	292, 148, 314, 127, 306, 121, 525, 305, 213, 0,
	212, 308, 287, 295, 203, 196, 0, 120, 293, 201,
	195, 183, 158, 170, 235, 191, 236, 171, 208, 207,
	209, 0, 0, 0, 274, 302, 315, 193, 133, 0,
	262, 285, 0, 0, 134, 161, 157, 234, 526, 524,
	519, 518, 182, 189, 246, 313, 223, 252, 138, 301,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 122, 186, 0, 244, 160, 303,
	0, 152, 0, 0, 0, 0, 0, 0, 113, 114,
	123, 132, 139, 151, 156, 159, 165, 169, 172, 174,
	175, 176, 180, 194, 197, 198, 199, 200, 214, 215,
	217, 218, 221, 222, 225, 227, 228, 229, 231, 232,
	233, 238, 241, 243, 245, 248, 253, 254, 255, 256,
	258, 259, 260, 264, 265, 266, 267, 275, 279, 289,
	290, 300, 309, 311,
}
var yyPact = [...]int{

	2312, -1000, -288, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1378, 1423, -1000,
	-1000, -1000, -1000, -1000, -1000, 477, 223, -1000, -1000, 251,
	54, 21143, 250, 2825, 21967, -1000, -1000, -1000, -1000, 174,
	21967, -1000, -1000, -97, -101, -1000, 46, 992, 1283, 1420,
	166, -1000, -1000, 213, 40, -1000, -1000, -1000, 17021, -1000,
	-1000, -1000, 1365, 1376, 170, 1352, 1193, -1000, 10841, 216,
	216, 20731, 23615, -1000, 21967, 9603, 245, 21967, -156, 206,
	206, 112, 206, -1000, 472, -1000, -1000, -1000, 21967, 208,
	21555, 208, 208, 208, 208, 208, 21967, -1000, 316, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 21967, 987, 1294, 549,
	134, 6698, 6698, -1000, 572, -1000, 107, 106, 102, 104,
	14, 607, -1000, 6698, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 212, 166, 470, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1293, 823, 1128, -72, -1000, 839, 248, 21967, -1000,
	-1000, 1076, -1000, 1121, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1306, 13313, 13725, 1378, -1000,
	166, -1000, -1000, -1000, 1249, -1000, -1000, 590, 1394, -1000,
	16197, 315, -1000, 13313, 2442, 1071, -1000, -1000, 1071, -1000,
	-1000, 271, -1000, -1000, 14961, 14961, 14961, 14961, 14961, 14961,
	14961, 14961, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1071, -1000,
	10429, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
	1071, 13313, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
	1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
	1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
	1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
	1071, 1071, 1071, 1071, 1071, 1071, 20319, 19495, 21967, 1050,
	1042, -1000, -1000, 295, 1013, 23203, -116, -1000, -1000, -1000,
	457, 19083, -1000, 288, -1000, 1292, -1000, -1000, 996, 169,
	-1000, 3538, 258, -1000, -1000, -1000, 1127, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 21555, 1349, 232, 981, 560, 980, 977,
	972, 21967, 971, 1074, 230, 21967, 1322, 1153, 21967, 968,
	966, 965, 964, -1000, 9188, -1000, 6698, 549, -1000, 804,
	13313, 206, 206, 6698, 6698, 6698, 21967, 21967, 21967, -1000,
	-1000, -1000, -1000, 21967, -1000, -1000, 549, 549, 6698, 6698,
	516, 1392, 516, 516, -1000, -1000, -1000, -1000, 13313, -1000,
	14961, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 963, -1000,
	-1000, 332, -1000, 793, -1000, 12901, -286, -1000, 1193, -1000,
	-1000, 21967, 6698, 17021, 1071, 21555, -1000, 1415, 409, 784,
	287, 1073, -1000, 650, 1331, 1071, 1071, 1071, 1071, 1071,
	1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
	1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
	1071, 1071, 1071, 1365, 839, 1193, 775, 1228, -1000, -1000,
	-1000, 21967, -1000, 13313, 13313, 677, -1000, 17433, -1000, -1000,
	-1000, -1000, 7528, 418, 14961, 673, 535, 14961, 14961, 14961,
	14961, 14961, 14961, 14961, 14961, 14961, 14961, 14961, 14961, 14961,
	14961, 14961, 739, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 962, -1000, 166, 1015, 1015, 324, 324, 324, 324,
	324, 324, 324, 17845, 1339, 839, 961, 614, 10429, 11665,
	11665, 839, 13313, 13313, 12489, 12077, 11665, 11665, 1339, 518,
	614, 22791, -1000, -1000, 14549, -1000, -1000, -1000, -1000, -1000,
	839, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 21555,
	21555, 11665, 11665, 11665, 11665, 839, 839, 11665, 11665, 11665,
	11665, 11665, 839, 839, 839, 839, 1339, 1339, 11665, 11665,
	11665, 1339, 11665, 11665, 1339, 11665, 11665, 11665, 11665, 1339,
	11665, 11665, 11665, 127, 21967, -1000, 1051, 1116, -1000, -1000,
	-1000, 1347, 18258, 15785, -1000, 127, 1035, 19495, 21967, -1000,
	-1000, 19495, 21967, 7113, 22379, 1013, -116, 1045, -1000, -120,
	-109, 10016, 322, -1000, -1000, -1000, 8358, -1000, 5038, 8773,
	-1000, 258, 1127, -1000, -68, -1000, -1000, -1000, 1113, -1000,
	1113, 138, -15, 1113, 1113, 1113, 1113, 1113, -38, -38,
	-38, -38, -32, -1000, -1000, -1000, -1000, -1000, 1126, 1125,
	-1000, 1113, 1113, 1113, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1122, 160, 1115, 1115, 1115, 1115, 1115, 179,
	-1000, 13313, 1079, -1000, 21967, 6698, 1320, 6698, 105, 1124,
	-1000, -1000, 21967, 21967, 1072, -1000, 21967, 1069, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 614,
	956, 945, -1000, -1000, -1000, -1000, -1000, -1000, 553, -1000,
	-1000, -1000, -1000, 549, 21967, 21967, 21967, 1340, 549, 614,
	462, -1000, 1055, -1000, 454, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 955,
	1311, 789, 1339, 576, -1000, -1000, -1000, 172, 899, 286,
	-1000, 1211, 13313, 13313, 8358, 13725, -1000, -1000, -1000, -1000,
	1306, -1000, 1339, 1369, -1000, 1233, 1232, 975, -1000, -1000,
	418, 461, -1000, -1000, 680, -1000, -1000, -1000, -1000, 284,
	1071, -1000, 3326, -1000, -1000, -1000, -1000, 673, 14961, 14961,
	14961, 462, 3326, 3195, 887, 1090, 324, 628, 628, 407,
	407, 407, 407, 407, 577, 577, -1000, -1000, -1000, 839,
	-1000, -1000, -1000, 11665, -1000, 13313, -1000, 839, 943, -1000,
	-1000, 614, 281, 943, -1000, 781, 800, 536, 1390, 943,
	533, 1388, 943, 943, 943, 11665, 551, -1000, 13313, 839,
	-1000, 842, 1052, 1049, 943, 839, 1046, 943, 943, -168,
	-168, 839, 943, 839, 943, 943, -168, -168, -168, -168,
	11665, 11665, 943, 943, 943, 11665, 943, 943, 11665, 943,
	943, 943, 943, 11665, 943, 943, 943, 161, 1071, -1000,
	22379, 19495, 19495, 19495, 19495, 19495, -1000, 1175, 1171, -1000,
	1185, 1165, 1184, 17021, -1000, 949, 839, 94, 18258, -1000,
	1071, -1000, 16609, 283, 244, 239, 236, 1386, 19495, 1056,
	-1000, 1056, -1000, 278, -1000, -1000, 1045, -116, -112, -1000,
	-1000, -1000, -1000, 614, -1000, 783, -1000, 275, 1041, 4623,
	-1000, -1000, -1000, -1000, 169, -1000, -1000, -1000, 1123, 257,
	-1000, 1257, 402, 514, 832, 1237, -1000, -1000, 301, -70,
	-1000, -1000, 682, -38, -38, 1113, 1113, 136, 1113, -1000,
	-38, -1000, -1000, -1000, 322, 1291, 322, 322, 322, 322,
	-38, 788, 788, -1000, -1000, -1000, -1000, 678, -1000, 1122,
	-1000, 665, -1000, -1000, -1000, -1000, -1000, 598, 1152, 21555,
	166, 1336, -1000, -1000, -1000, 1403, -1000, -1000, 205, 224,
	-1000, 6698, 21967, 6698, 6698, 1386, 937, 918, -1000, -1000,
	-1000, 516, 549, 1286, -1000, -1000, 14961, 332, 1015, -1000,
	127, 247, -1000, 1228, -1000, 511, 466, 505, 178, 178,
	-1000, 449, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 125, 1335, 21555, 21555, 1208, 614, 614, -1000, -1000,
	21967, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	6283, 11665, -1000, 462, 3326, 3038, -1000, 14961, -1000, 839,
	614, -1000, 11665, -1000, 5868, -1000, 401, 739, 401, 14961,
	14961, -1000, 14961, 14961, -1000, -202, -1000, 1078, 520, -1000,
	13313, 786, -1000, -1000, 14961, 14961, -1000, -1000, -1000, -1000,
	-1000, 19907, -1000, -168, -168, -168, -168, -168, -1000, -1000,
	-1000, -1000, 943, 943, -168, -168, -168, 943, -168, -168,
	943, -168, -168, -168, -168, 943, -168, -168, -168, 1150,
	22379, 1071, -1000, 18671, 21555, 1066, 1116, 1120, 1149, 1070,
	-1000, -1000, -1000, -1000, 1167, -1000, 1164, -1000, -1000, -1000,
	-1000, -1000, 1039, 1071, 21555, 14961, 283, -1000, 1071, 1071,
	1071, 1378, 13313, 1056, -1000, -1000, 336, -1000, -1000, -138,
	-104, -1000, -1000, -1000, 7943, 5038, -1000, 5038, -1000, 21555,
	162, -1000, 832, -1000, -1000, 832, -1000, -1000, -1000, 1117,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 569, 14961, 1413,
	-1000, 1255, -1000, 1253, 787, -1000, -1000, 1010, 322, 322,
	-38, -1000, -1000, 1113, -1000, 322, -1000, 391, -1000, -1000,
	-1000, -1000, 322, 941, -1000, 924, 1037, -1000, 922, 48,
	21967, -1000, -1000, -1000, 1147, -1000, -1000, -1000, 1009, 1036,
	-1000, 3538, 917, 915, 914, 21967, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 549, -1000, 14961, 3326, -1000, -1000, -38,
	21967, 975, -1000, 821, -1000, 832, 276, -1000, -1000, -1000,
	1237, -1000, -1000, 254, 913, -1000, 910, 909, 21555, 1244,
	865, 21967, 21555, -1000, -1000, 846, 860, 13313, -1000, 21555,
	1071, 267, -1000, -1000, -1000, 960, 10841, -1000, -1000, 839,
	-1000, 14961, 3326, -1000, -1000, -1000, 265, 839, 1113, 1113,
	-1000, 1113, 1115, -1000, 1113, 26, 1113, 12, 839, 839,
	2793, 2543, 2527, 2144, 1071, -164, -1000, 614, 13313, 1585,
	1044, -1000, 335, -1000, -1000, -1000, -1000, -1000, -168, -168,
	-1000, -1000, -1000, -1000, -168, -1000, -1000, -168, -1000, -1000,
	-1000, -1000, -168, -1000, -1000, -1000, -1000, 1300, 1008, 1034,
	-1000, -1000, 11253, 839, 899, 893, -1000, 1378, -1000, -1000,
	13313, 1114, -1000, 13313, -1000, -1000, -1000, 93, -1000, 13313,
	893, 613, -1000, 21555, 21555, 21555, 1365, 614, -1000, -1000,
	-1000, -1000, 4623, -1000, 878, -1000, 1113, -1000, 1237, -1000,
	-1000, 21555, -1000, 3326, -57, -1000, -1000, -1000, -1000, -1000,
	-1000, 322, -1000, -1000, -1000, -1000, -1000, -38, 778, -38,
	636, -1000, 612, -1000, -1000, -234, 1112, -1000, 166, 21967,
	57, 205, -1000, 3538, 3538, 3538, -1000, -1000, 3326, -81,
	-1000, -1000, 846, 156, 3538, -1000, 1079, 402, 162, -1000,
	-1000, -1000, -1000, -1000, 857, 381, -1000, 221, 156, 846,
	614, 1304, -1000, 21555, 1383, 19495, -1000, -1000, -1000, 3326,
	5453, -1000, -1000, 154, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 14961, 14961, 14961, 14961, 14961, 839, 752, 614,
	14961, 14961, 839, 1374, -1000, -1000, -1000, -1000, -1000, 1236,
	-1000, 1071, -1000, -1000, 164, -1000, 21555, 1365, 614, 21555,
	614, 1071, 15373, -1000, 17021, 876, -1000, 876, 876, -1000,
	252, 21555, 1331, 874, -1000, -1000, 322, -1000, 322, 1001,
	1000, -1000, 21555, -1000, 1362, -1000, 57, -1000, 743, 67,
	72, -1000, 66, 65, 64, 63, 61, -1000, -1000, -1000,
	-1000, 1275, 1271, 1065, 900, -1000, -1000, 840, -1000, 1103,
	832, -1000, -1000, 826, -1000, -1000, 21555, -1000, 156, 1071,
	-1000, 1381, 1373, 1056, 10841, -1000, -1000, -1000, -1000, 842,
	842, 842, 842, 47, -1000, -1000, 842, 842, -1000, 13313,
	1412, -1000, 1071, -1000, 166, -1000, -1000, 870, -1000, -1000,
	283, 21555, -1000, -1000, -1000, 252, -1000, 820, 449, 742,
	-1000, -1000, 142, -1000, -1000, -1000, -1000, 855, -1000, 97,
	4045, -1000, -1000, -1000, -1000, -1000, -1000, 1282, 1278, 79,
	214, 1262, 1265, 1371, 19495, -1000, -1000, -1000, 301, 21555,
	1079, -1000, -1000, -1000, -1000, 124, -1000, 13725, 13725, 1383,
	-1000, -1000, -1000, -1000, -1000, 839, 81, -211, -1000, -1000,
	926, 22379, 1034, 839, -1000, -1000, -1000, -1000, -1000, 606,
	-1000, 21967, 252, 87, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 13313, 13313, 4045,
	-1000, -1000, -1000, -1000, 1099, 600, 1271, 1370, 1269, 1267,
	-1000, 725, 1056, -1000, 853, 1096, -1000, 850, -1000, 21555,
	-1000, 614, -1000, 1025, -1000, 614, -1000, 1381, -1000, -1000,
	1204, -207, -214, 839, 1013, -1000, -1000, 1083, -1000, 252,
	83, -1000, 525, 771, -289, -1000, -1000, 21555, 1273, -1000,
	722, -1000, 1368, 1367, -1000, 1383, 252, 21555, -1000, 124,
	1231, 13725, -1000, -1000, 1203, -1000, -1000, 21555, -1000, 809,
	807, 510, -1000, 13313, 4045, 3976, 844, -1000, -1000, 684,
	615, 1381, -1000, 838, -1000, 121, -1000, -209, 825, 297,
	-1000, -1000, 541, 4045, -1000, 710, -290, -1000, -1000, -1000,
	-1000, -1000, -1000, 252, 110, -212, 1145, -1000, -1000, -1000,
	-1000, -1000, -1000, 4045, -1000, -291, 4045, 207, -1000, 1071,
	-215, 1131, 1118, 1405, -1000, -293, 3829, -294, 203, 4045,
	621, -1000, 13313, 14137, -1000, -1000, 1411, -1000, 1406, 403,
	403, 3810, 529, 4045, -1000, -296, 190, 4045, -1000, 522,
	842, 839, -1000, -1000, -1000, 151, 652, -1000, -1000, -1000,
	3114, -1000, -297, 4045, -1000, -1000, -1000, -1000, -1000, 189,
	2709, -299, -1000, 187, 4045, -1000,
}
var yyPgo = [...]int{

	0, 1735, 672, 738, 1734, 1733, 1732, 18, 15, 13,
	20, 1731, 1519, 1512, 1505, 1498, 1729, 1495, 1727, 5,
	1726, 1725, 1493, 1724, 8, 1723, 7, 1722, 2, 91,
	1721, 1719, 1718, 1717, 1716, 1491, 1715, 1714, 1712, 1711,
	1486, 1479, 1710, 1709, 1477, 1475, 1692, 1691, 1446, 1444,
	1429, 1689, 153, 1682, 1681, 1680, 152, 76, 114, 1678,
	1676, 1673, 83, 56, 1599, 88, 38, 79, 236, 1670,
	22, 45, 1669, 1668, 97, 117, 1667, 115, 1665, 65,
	174, 74, 1664, 1663, 118, 1662, 1660, 1659, 104, 1658,
	1657, 2313, 1656, 1653, 112, 1652, 49, 32, 41, 1650,
	1649, 1648, 1647, 1645, 89, 9, 1643, 1642, 1640, 58,
	1639, 1638, 121, 1637, 1636, 1635, 99, 48, 1634, 31,
	1633, 39, 53, 1632, 33, 1630, 107, 1629, 1627, 37,
	3, 1626, 30, 1624, 40, 1623, 108, 126, 100, 11,
	42, 46, 51, 106, 77, 10, 1622, 102, 71, 60,
	36, 110, 1621, 111, 103, 1619, 1618, 801, 1617, 1616,
	123, 1614, 73, 101, 703, 119, 98, 69, 1612, 1611,
	1610, 1609, 59, 86, 1608, 1604, 29, 196, 105, 1349,
	34, 1545, 63, 113, 1603, 27, 1602, 2679, 93, 62,
	80, 1601, 1600, 78, 92, 43, 1593, 1592, 1590, 1587,
	1585, 1565, 1122, 1563, 1562, 1560, 1559, 64, 47, 1557,
	1556, 87, 67, 1554, 1553, 1552, 1549, 1547, 96, 54,
	109, 1544, 95, 94, 84, 1540, 1537, 1536, 1535, 35,
	28, 1532, 1529, 1528, 72, 68, 1526, 50, 24, 23,
	52, 17, 66, 55, 1525, 26, 1524, 90, 4, 6,
	12, 1523, 1522, 1503, 1501, 1489, 57, 1483, 1481, 44,
	1469, 1457, 1453, 25, 1451, 1449, 1441, 1438, 0, 70,
	120, 1436, 1432, 129,
}
var yyR1 = [...]int{

	0, 266, 267, 267, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 51,
	2, 2, 2, 6, 3, 3, 3, 72, 73, 73,
	77, 77, 4, 4, 5, 5, 7, 7, 55, 55,
	8, 9, 9, 9, 9, 270, 270, 86, 86, 84,
	84, 85, 85, 147, 147, 10, 10, 10, 10, 151,
	151, 154, 154, 154, 155, 155, 155, 155, 191, 191,
	139, 140, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 254, 254, 255, 255, 256, 256, 256, 256, 257,
	257, 258, 258, 259, 259, 259, 259, 259, 259, 259,
	259, 259, 259, 23, 175, 175, 33, 33, 34, 34,
	34, 135, 135, 135, 11, 11, 11, 11, 11, 18,
	20, 20, 25, 25, 26, 21, 21, 21, 21, 27,
	27, 28, 22, 22, 32, 32, 30, 30, 29, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 17, 253, 253, 253, 24, 24, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 38,
	231, 232, 232, 232, 232, 232, 232, 232, 232, 219,
	220, 195, 195, 195, 195, 195, 195, 195, 194, 194,
	194, 194, 198, 198, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 197, 197, 197, 197, 197, 197, 197,
	197, 199, 199, 199, 199, 199, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 201, 201, 201, 201, 201, 201, 201, 201, 218,
	218, 202, 202, 211, 211, 212, 212, 212, 209, 209,
	210, 210, 213, 213, 205, 206, 214, 207, 207, 207,
	208, 208, 208, 217, 217, 217, 217, 203, 221, 221,
	241, 241, 240, 240, 239, 239, 239, 230, 230, 236,
	236, 236, 236, 236, 225, 225, 225, 224, 224, 226,
	226, 229, 229, 238, 238, 237, 222, 222, 242, 242,
	242, 242, 242, 223, 223, 223, 243, 227, 227, 228,
	228, 228, 249, 250, 248, 248, 248, 248, 248, 101,
	101, 101, 233, 233, 233, 234, 234, 234, 235, 235,
	235, 251, 251, 35, 35, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 36, 134, 134, 134, 37,
	173, 173, 247, 247, 247, 246, 244, 244, 245, 245,
	13, 39, 39, 14, 14, 14, 14, 14, 14, 14,
	15, 15, 40, 41, 41, 41, 41, 41, 41, 41,
	41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
	41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
	41, 41, 69, 161, 161, 159, 159, 162, 162, 160,
	160, 160, 163, 163, 163, 192, 192, 192, 42, 42,
	47, 47, 50, 48, 49, 174, 174, 45, 45, 46,
	46, 46, 46, 61, 61, 271, 271, 44, 44, 43,
	43, 43, 43, 16, 272, 52, 53, 53, 54, 54,
	54, 166, 166, 58, 58, 58, 56, 56, 56, 57,
	57, 63, 63, 67, 67, 67, 67, 66, 66, 66,
	66, 137, 137, 137, 138, 138, 184, 184, 184, 183,
	183, 183, 183, 71, 71, 74, 74, 75, 75, 75,
	75, 78, 120, 120, 95, 95, 96, 96, 96, 96,
	96, 107, 107, 146, 146, 145, 145, 148, 148, 76,
	76, 76, 76, 81, 81, 82, 82, 83, 83, 172,
	172, 189, 189, 189, 87, 87, 87, 89, 88, 88,
	88, 88, 90, 90, 92, 93, 93, 91, 91, 94,
	97, 97, 97, 97, 98, 98, 68, 68, 68, 68,
	68, 68, 68, 158, 158, 100, 100, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 115, 115, 115,
	115, 115, 115, 102, 102, 102, 102, 102, 102, 102,
	62, 62, 116, 116, 116, 80, 79, 79, 65, 65,
	64, 64, 117, 117, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 110, 110,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 113, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	273, 273, 112, 111, 111, 111, 111, 111, 111, 59,
	59, 59, 59, 59, 190, 190, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 127,
	127, 60, 60, 125, 125, 126, 128, 128, 124, 124,
	124, 104, 104, 104, 104, 104, 104, 104, 104, 106,
	106, 106, 129, 129, 118, 118, 70, 70, 130, 130,
	131, 131, 132, 132, 133, 133, 136, 136, 141, 141,
	141, 142, 142, 142, 142, 143, 143, 143, 103, 103,
	103, 103, 103, 103, 144, 144, 144, 144, 149, 149,
	119, 119, 122, 122, 121, 123, 150, 150, 153, 153,
	153, 153, 152, 152, 152, 186, 186, 186, 156, 156,
	164, 164, 165, 165, 157, 157, 204, 204, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 171, 171, 170,
	170, 170, 167, 167, 167, 168, 168, 185, 185, 181,
	181, 182, 182, 187, 187, 188, 188, 252, 252, 215,
	215, 262, 262, 216, 216, 263, 263, 265, 265, 260,
	260, 261, 261, 264, 264, 178, 178, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 178, 178, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 180, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 268, 269, 176, 177, 177, 177,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 11,
	4, 6, 7, 5, 10, 12, 13, 2, 1, 3,
	3, 6, 1, 3, 1, 3, 7, 8, 1, 1,
	9, 8, 7, 6, 6, 1, 1, 1, 3, 1,
	3, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	0, 0, 2, 3, 11, 7, 9, 5, 5, 15,
	11, 0, 1, 1, 3, 2, 3, 3, 3, 0,
	1, 1, 2, 2, 2, 2, 1, 2, 2, 3,
	3, 3, 3, 4, 0, 3, 1, 1, 1, 1,
	1, 0, 2, 2, 1, 1, 1, 1, 1, 4,
	5, 8, 1, 2, 5, 7, 10, 8, 11, 1,
	2, 5, 2, 4, 2, 3, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 2, 3, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	4, 1, 1, 2, 3, 4, 3, 3, 3, 3,
	3, 0, 2, 2, 2, 2, 2, 2, 3, 1,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 3, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 1, 4, 4, 3, 3,
	2, 4, 5, 2, 3, 4, 2, 2, 3, 3,
	3, 3, 3, 4, 1, 1, 1, 1, 1, 6,
	6, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 1,
	0, 1, 1, 2, 2, 3, 1, 0, 3, 3,
	0, 2, 2, 2, 1, 2, 1, 2, 5, 4,
	0, 1, 1, 2, 2, 3, 2, 0, 1, 2,
	3, 3, 2, 2, 1, 1, 1, 1, 1, 0,
	1, 0, 1, 1, 3, 3, 3, 1, 10, 11,
	11, 12, 12, 3, 2, 1, 5, 1, 1, 0,
	2, 2, 3, 3, 1, 1, 2, 2, 2, 0,
	1, 2, 0, 1, 3, 1, 2, 3, 1, 1,
	1, 0, 2, 1, 1, 6, 10, 9, 7, 7,
	7, 9, 7, 12, 14, 7, 7, 7, 9, 9,
	10, 5, 6, 6, 8, 7, 0, 1, 2, 4,
	0, 1, 1, 1, 1, 7, 1, 3, 8, 8,
	3, 3, 5, 4, 6, 4, 4, 4, 4, 4,
	3, 2, 3, 4, 4, 3, 6, 6, 4, 4,
	4, 4, 4, 4, 3, 3, 2, 6, 2, 4,
	4, 4, 5, 7, 6, 5, 4, 2, 4, 3,
	2, 3, 3, 1, 1, 0, 1, 1, 1, 0,
	2, 2, 0, 2, 2, 0, 1, 1, 2, 1,
	1, 1, 2, 1, 1, 1, 1, 3, 3, 1,
	1, 1, 1, 0, 3, 1, 1, 2, 2, 2,
	2, 3, 3, 2, 0, 2, 0, 2, 1, 2,
	2, 0, 1, 0, 1, 1, 0, 1, 1, 0,
	1, 3, 5, 1, 1, 3, 5, 1, 2, 3,
	5, 2, 4, 7, 0, 1, 0, 1, 2, 1,
	1, 1, 1, 1, 3, 1, 1, 1, 3, 1,
	3, 2, 2, 4, 2, 6, 1, 4, 6, 3,
	2, 0, 3, 0, 3, 1, 3, 1, 3, 4,
	4, 4, 3, 2, 4, 0, 1, 0, 2, 0,
	1, 1, 1, 1, 1, 2, 2, 1, 2, 3,
	2, 3, 2, 2, 3, 2, 1, 1, 3, 3,
	0, 5, 5, 5, 0, 2, 1, 3, 3, 2,
	3, 1, 2, 0, 3, 1, 1, 3, 3, 4,
	4, 5, 3, 4, 5, 6, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 3, 1, 3, 0, 1,
	1, 3, 1, 3, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 1, 1, 1, 5, 6,
	6, 6, 5, 5, 5, 6, 5, 5, 6, 5,
	5, 5, 5, 6, 5, 5, 5, 4, 4, 5,
	5, 5, 5, 5, 4, 4, 4, 4, 4, 4,
	3, 6, 6, 6, 8, 8, 8, 8, 9, 4,
	7, 5, 4, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 8, 8,
	0, 2, 3, 4, 4, 4, 4, 4, 4, 0,
	3, 4, 7, 3, 1, 1, 2, 3, 3, 1,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 0, 3, 1, 3, 1, 1, 0, 2,
	1, 1, 0, 3, 1, 3, 2, 2, 0, 1,
	1, 0, 2, 4, 4, 0, 2, 4, 2, 1,
	3, 5, 4, 6, 1, 3, 3, 5, 0, 5,
	1, 3, 1, 2, 3, 1, 1, 3, 3, 3,
	3, 3, 1, 2, 1, 1, 1, 1, 1, 1,
	0, 2, 0, 3, 0, 1, 0, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 1, 0, 1, 0, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 0,
	1, 0, 4, 0, 1, 0, 3, 0, 3, 0,
	4, 0, 3, 0, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -266, -1, -2, -6, -7, -8, -9, -10, -12,
	-35, -13, -14, -15, -40, -41, -42, -47, -48, -49,
	-45, -44, -43, -16, -22, -17, -51, -3, -4, 6,
	7, -55, 9, 10, 30, -38, 130, -36, -37, 133,
	132, 169, 134, 162, 64, 213, -50, 216, 217, -271,
	-174, 167, 168, 31, 32, 136, 211, 20, 37, -72,
	-268, 8, 306, 131, 214, 164, 163, 26, 351, 68,
	-267, 421, -132, 15, -54, 5, -52, -272, -52, -52,
	-52, -52, -52, -231, 105, 68, -168, 143, 86, 297,
	139, -175, 140, -167, 189, 44, 150, 149, 140, 140,
	141, 143, 297, 139, 177, 176, 140, -91, -187, 71,
	-179, 348, 153, 363, 364, 131, 186, 213, 224, 218,
	252, 240, 349, 365, 154, 206, 138, 238, 241, 284,
	152, 199, 366, 273, 279, 209, 80, 216, 293, 367,
	155, 203, 205, 204, 194, 210, 36, 165, 236, 229,
	189, 368, 356, 227, 28, 184, 369, 281, 257, 370,
	353, 280, 232, 228, 136, 371, 156, 150, 179, 372,
	258, 262, 373, 285, 374, 375, 376, 142, 222, 223,
	377, 190, 287, 256, 33, 151, 350, 48, 174, 288,
	38, 260, 37, 272, 378, 255, 250, 379, 380, 381,
	382, 254, 221, 249, 201, 53, 137, 264, 263, 265,
	202, 283, 245, 243, 383, 384, 157, 385, 386, 230,
	18, 387, 388, 291, 168, 389, 42, 390, 391, 392,
	172, 393, 394, 395, 282, 259, 261, 188, 396, 233,
	147, 397, 176, 398, 352, 399, 289, 226, 400, 158,
	173, 167, 292, 401, 402, 403, 404, 159, 405, 406,
	407, 217, 275, 207, 408, 409, 410, 411, 198, 183,
	295, 286, 52, 211, 269, 412, 220, 149, 212, 413,
	214, 43, 180, 7, 200, 276, 208, 247, 175, 414,
	415, 234, 235, 253, 219, 248, 215, 177, 178, 169,
	416, 294, 270, 354, 51, 242, 239, 181, 246, 417,
	143, 418, 182, 290, 237, 271, 140, 123, 241, 284,
	130, 274, 275, 281, -225, 282, 176, 179, -192, 140,
	-159, 273, 182, 71, 141, 142, 33, 286, 285, 277,
	-187, -61, 134, 170, -91, -176, -176, -176, 276, 276,
	-176, -32, 212, 71, 36, 6, -2, -157, 143, 145,
	215, -73, -77, -189, -187, -180, 73, 319, 320, 321,
	322, 323, 336, 337, 338, 324, 325, 339, 340, 341,
	326, 327, 342, 343, 345, 346, 344, 330, 329, 328,
	331, 332, 334, 333, 335, -142, 17, 16, -5, -3,
	-268, 6, 21, 22, -58, 54, 55, -53, -66, 114,
	-68, -187, -99, 88, -105, 29, 71, -179, 24, -104,
	-100, -124, -123, -80, 123, 124, 125, 112, 113, 120,
	89, 126, -110, -108, -109, -111, -113, -114, 73, 72,
	81, 74, 75, 76, 77, 82, 83, 84, -181, -121,
	-268, 58, 59, 139, 307, 308, 309, 310, 347, 160,
	311, 91, 47, 296, 305, 304, 303, 301, 302, 298,
	300, 299, 313, 314, 146, 297, 118, 306, 336, 337,
	338, 339, 340, 341, 342, 343, 345, 346, 344, 326,
	319, 320, 321, 322, 323, 324, 325, 327, 328, 329,
	330, 331, 332, 333, 334, 335, -157, -157, 11, -84,
	-85, -91, -94, -187, -150, -191, 215, -153, 286, 285,
	-124, -152, -181, -187, 284, 241, 283, -91, -232, -220,
	-223, -182, 155, -243, -181, -178, 152, 71, -179, 135,
	161, 87, 355, 23, 25, 267, 319, 90, 123, 320,
	321, 322, 16, 20, 91, 122, 307, 323, 130, 62,
	298, 300, 296, 297, 274, 29, 10, 26, 163, 193,
	22, 116, 132, 94, 95, 96, 166, 24, 164, 84,
	160, 19, 65, 11, 13, 317, 318, 14, 146, 145,
	107, 191, 141, 60, 8, 126, 27, 104, 56, 324,
	325, 359, 45, 360, 58, 105, 17, 301, 302, 31,
	347, 326, 171, 361, 327, 118, 196, 63, 50, 88,
	82, 34, 85, 66, 86, 15, 192, 61, 315, 195,
	362, 106, 133, 306, 59, 139, 6, 312, 30, 162,
	330, 329, 328, 331, 197, 57, 309, 310, 332, 419,
	140, 93, 313, 314, 144, 83, 5, 44, 32, 9,
	64, 67, 303, 304, 305, 47, 334, 333, 335, 92,
	12, 316, 351, 141, -91, 306, -165, 146, -165, 177,
	176, -165, 97, -39, -91, -164, 146, -181, -164, -164,
	-164, -164, -164, -91, 127, -91, 71, 30, -163, 105,
	12, 297, 139, 71, 176, 179, 140, 177, 143, -177,
	-268, -182, -177, -227, 11, 107, 180, 180, 180, 181,
	180, -162, -161, 178, 279, 280, 276, 278, 12, -69,
	105, -177, -46, -2, -9, -7, -8, -2, 97, -176,
	-176, 30, 73, 51, -253, 68, -215, 272, -52, -269,
	70, 140, -91, 69, 23, -268, -143, 19, 31, -68,
	-187, -133, -136, -68, -180, 319, 320, 321, 322, 323,
	336, 337, 338, 324, 325, 339, 340, 341, 326, 327,
	342, 343, 345, 346, 344, 330, 329, 328, 331, 332,
	334, 333, 335, -132, -2, -52, 50, -56, 21, 22,
	79, 11, -184, 87, 86, 104, -183, 23, 71, -179,
	-180, 73, 127, -68, -102, 107, 88, 105, 106, 90,
	109, 108, 119, 112, 113, 114, 115, 116, 117, 118,
	110, 111, 122, 97, 98, 99, 100, 101, 102, 103,
	-158, -268, -80, -268, 128, 129, -105, -105, -105, -105,
	-105, -105, -105, -105, -268, -2, -117, -68, -268, -268,
	-268, -268, -268, -268, -268, -268, -268, -268, -268, -127,
	-68, -268, -273, -112, -268, -273, -112, -273, -112, -273,
	-268, -273, -112, -273, -112, -273, -273, -112, -273, -268,
	-268, -268, -268, -268, -268, -268, -268, -268, -268, -268,
	-268, -268, -268, -268, -268, -268, -268, -268, -268, -268,
	-268, -268, -268, -268, -268, -268, -268, -268, -268, -268,
	-268, -268, -268, -93, 27, -91, -71, -74, -75, -76,
	-95, -79, -268, -91, -80, -91, -84, -270, 69, 11,
	67, -270, 69, 127, 69, -150, 215, -151, -154, 287,
	289, 97, -186, -181, 73, 29, 127, 30, 70, 69,
	-223, 155, 152, -194, -198, -200, -199, -201, -196, -197,
	238, 241, 245, 243, 239, 244, 123, 242, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 30,
	165, 234, 235, 236, 237, 258, 259, 260, 261, 262,
	263, 264, 265, 218, 240, 349, 219, 220, 221, 222,
	223, 224, 226, 227, 228, 229, 230, 231, 232, 71,
	-243, 68, -181, 23, 143, 71, 88, 71, 71, 71,
	-91, 71, 69, 144, -84, 24, 66, -86, -91, 71,
	71, 71, 71, -188, -187, -178, -177, -163, 73, -68,
	-165, -165, -177, -177, -177, -91, -91, -91, -91, -163,
	-163, -177, -177, -160, 11, 107, 11, -160, -160, -68,
	-105, 71, -30, -29, -31, 199, 200, 201, 202, 203,
	204, 205, 206, 207, 208, 209, 210, 73, 70, -117,
	-252, 420, -58, -91, -177, -77, -79, -268, -144, -181,
	9, 107, 69, 18, 127, 69, -141, 25, 26, -141,
	-142, -269, -58, -106, 51, 74, 77, -166, 49, -91,
	-68, -68, -115, 82, 88, 83, 84, -183, 114, -188,
	-182, -178, -105, -116, -121, -80, 78, 107, 105, 106,
	90, -105, -105, -105, -105, -105, -105, -105, -105, -105,
	-105, -105, -105, -105, -105, -105, -190, 71, 73, 71,
	-104, -104, -181, -56, -269, 69, -269, -2, -64, -67,
	114, -68, -187, -64, -269, -68, -68, -124, 73, -64,
	-124, 73, -64, -64, -64, -56, -125, -126, 92, -124,
	-269, -105, -181, -181, -64, -65, -64, -64, -64, -269,
	-269, -67, -64, -67, -64, -64, -269, -269, -269, -269,
	-56, -56, -64, -64, -64, -56, -64, -64, -56, -64,
	-64, -64, -64, -56, -64, -64, -64, -147, 172, -91,
	30, 69, -87, -89, -88, -90, 56, 60, 62, 57,
	58, 59, 63, -172, 23, -71, -78, 47, -268, -96,
	172, -97, 23, -189, 64, 145, 65, -147, 67, -71,
	-91, -71, -94, -187, 114, -153, -151, 69, 288, 290,
	291, 66, 85, -68, -208, 122, -182, -188, -233, -234,
	-235, -182, 73, 74, -220, -221, -222, -223, -236, 155,
	-242, 147, 149, 44, -224, 156, 141, 45, -195, -209,
	270, -202, 68, -202, -202, 246, 238, 241, 239, -202,
	-202, -202, -202, -202, -207, 241, -207, -207, -207, -207,
	239, 68, 68, -202, -202, -202, -211, 68, -211, 233,
	-212, 68, -212, -212, -212, -212, -243, -68, -185, 67,
	-139, -91, -177, 24, -177, -33, 186, 161, 68, -91,
	-91, -91, 69, 71, 71, -228, 11, 107, -163, -187,
	-187, -91, -107, 23, -163, -62, 166, 69, 97, 70,
	-92, 27, 73, -56, -169, 135, 132, 133, 137, 138,
	-246, 267, 131, 241, 80, 29, 15, 307, 172, 354,
	71, 173, -269, 69, 127, 52, -68, -68, -136, -143,
	-156, 19, 11, 47, 47, -57, 57, 82, 83, 84,
	127, -268, -116, -105, -105, -105, -62, 87, -269, -65,
	-68, -269, 69, -269, 127, -269, 69, 67, 23, 11,
	11, -269, 11, 11, -269, -269, -269, -64, -128, -126,
	94, -68, -269, -269, 69, 69, -269, -269, -269, -269,
	-137, 315, -137, -269, -269, -269, -269, -269, -137, -137,
	-137, -137, -64, -64, -269, -269, -269, -64, -269, -269,
	-64, -269, -269, -269, -269, -64, -269, -269, -269, -103,
	30, 47, -2, -268, -268, -150, -74, -75, -75, -74,
	-75, 56, 56, 56, 61, 56, 61, 56, -88, -189,
	-269, -269, -120, 185, -268, 34, -189, -97, 141, 141,
	141, -98, 12, -71, -98, -98, 127, -154, -155, 292,
	289, 295, 71, 73, 127, 69, -235, 97, -223, 68,
	71, 45, -224, 141, 45, -224, -229, 71, -229, 45,
	-213, -205, -206, -214, -217, -203, 82, 88, 29, 66,
	267, 147, 45, 44, 80, -210, 271, 74, -207, -207,
	-202, -202, -202, 246, -202, -207, -208, 30, -208, -208,
	-208, -208, -207, -218, 73, -218, 74, -211, 74, 70,
	66, -181, -2, 23, -34, 8, 9, 10, -254, -255,
	-256, 71, 107, 191, 192, 144, -177, -91, -177, -177,
	-98, 71, 71, -160, -163, 34, -105, -29, -104, -147,
	140, -166, -176, -173, -247, -224, -251, -222, -223, 148,
	156, 147, 172, 155, -173, -247, 155, 152, -224, 156,
	148, -170, -224, 144, 23, -173, -173, -230, 97, 172,
	23, -181, -181, 53, -91, -63, -140, 114, -182, -65,
	-62, 87, -105, -269, -67, 114, -188, -193, 123, 238,
	165, 236, 229, 256, 243, 269, 234, 270, -190, -193,
	-105, -105, -105, -105, 348, -132, 96, -68, 93, -105,
	-105, -181, -268, -137, -137, -137, -137, -137, -269, -269,
	-138, -137, -138, -138, -269, -138, -138, -269, -138, -138,
	-138, -138, -269, -138, -138, -138, -149, 66, -150, -119,
	-122, -121, -268, -2, -144, -148, -181, -98, -82, -81,
	66, 67, -83, 66, -81, 56, 56, 69, -121, -268,
	-148, -105, -97, -268, -268, -268, -132, -68, -98, 289,
	293, 294, -234, -235, -238, -237, -181, -242, 156, -229,
	-229, 68, 82, -105, 9, 45, 45, 73, 70, -208,
	-208, -207, -202, -208, 71, 123, -208, 70, 69, 70,
	69, 70, 69, -101, 369, 88, -91, -139, -139, 66,
	70, 69, -194, 71, 71, 71, -91, -163, -105, -207,
	-91, -57, 68, -219, 71, -176, -229, -167, 71, 71,
	-176, 71, 71, -181, 45, 71, -91, -181, -219, 71,
	-68, -181, -79, 127, -98, 11, 69, -66, -269, -105,
	127, -269, -202, -202, -202, -212, -202, 223, -202, 223,
	-269, -269, 19, 19, 19, 19, -268, -60, 312, -68,
	69, 69, -132, 172, -138, -138, -138, -138, -138, 28,
	-149, 69, -269, -269, -269, -269, 69, -132, -68, 68,
	-68, 185, -269, -97, -172, -145, -181, -145, -145, -142,
	70, 69, -202, -145, -109, -208, -207, 73, -207, 74,
	74, 369, 68, -2, -91, -257, -258, -259, 80, 350,
	88, 193, 194, 157, 195, 196, 197, -256, -194, -194,
	-194, -260, -162, -63, -219, -134, 160, 161, -194, -185,
	-226, -224, 71, -171, 144, 23, 144, -134, -219, 27,
	-181, -129, 13, -71, -140, -140, 114, -207, 71, -105,
	-105, -105, -105, -105, -269, 73, -105, -105, -269, 16,
	45, -122, 47, -2, -268, -181, -142, -145, -121, -96,
	-189, 69, -269, -269, -269, -240, -239, 67, 151, 80,
	-237, -141, 70, -208, -208, 70, 70, -238, -139, 19,
	-139, -259, 73, 197, 193, 197, 197, 197, 197, 198,
	-261, 38, -263, 39, 11, 70, -176, 71, -195, 68,
	-229, 71, -181, -176, -134, -268, -130, 14, 16, -98,
	-66, -269, -269, -269, -269, -59, 107, 351, -269, -269,
	-117, 9, -119, -2, 70, -97, -181, -239, 71, -230,
	73, 158, 70, 184, -19, -2, -7, -8, -9, -10,
	-12, -35, -13, -14, -20, -21, -15, -40, -41, -50,
	-48, -49, -45, -44, -22, -17, -23, 91, 146, 213,
	36, 36, 189, 190, -204, 145, -264, 43, -262, -216,
	42, 16, -71, -176, -238, -185, -176, -244, -245, 172,
	-131, -68, -180, -118, -70, -68, -180, -129, -140, -269,
	349, 63, 352, -132, -150, -269, 74, -91, -241, -240,
	185, -139, -68, -68, -24, -19, -146, 68, 74, -263,
	16, -265, 40, 41, 73, -98, 70, 68, -269, 69,
	-181, 69, -130, 53, 350, 353, -269, 68, -135, 187,
	188, -25, -26, 92, 93, 421, -145, 38, 73, 16,
	16, -129, -241, -238, -245, 47, -70, 53, -145, -139,
	71, 71, 96, 94, -26, -68, -24, 96, -19, 70,
	73, 73, -130, 70, 174, 351, 70, -11, -18, -10,
	-7, -8, -9, 213, 91, -24, 93, 421, -241, 175,
	352, -249, -250, 66, -139, -24, 421, -24, 96, 94,
	-27, -28, 95, -268, 353, -250, 66, -249, 66, 10,
	9, 421, 96, 421, 146, -24, 96, 94, -28, -68,
	-105, 171, -248, 159, 154, 157, 30, -248, 96, 91,
	421, 146, -24, 93, -269, -269, 153, 29, 82, 96,
	421, -24, 146, 96, 421, 146,
}
var yyDef = [...]int{

	28, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 792, 0, 484,
	484, 484, 484, 484, 484, 0, -2, 363, 364, 0,
	0, 0, 0, -2, 459, 460, 461, 463, 464, 473,
	-2, 1264, 1264, 0, 0, 1264, 0, 0, 0, 0,
	0, 48, 49, 844, 0, 476, 465, 466, 0, 1262,
	1, 3, 801, 0, 0, 488, 493, 486, 0, 844,
	844, 0, 0, 82, 0, 0, 0, 0, 0, 842,
	842, 0, 842, 866, 0, 862, 863, 864, 0, 840,
	0, 840, 840, 840, 840, 840, 0, 411, 577, 873,
	874, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037,
	1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047,
	1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057,
	1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067,
	1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077,
	1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087,
	1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097,
	1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107,
	1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117,
	1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127,
	1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137,
	1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147,
	1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157,
	1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167,
	1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177,
	1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187,
	1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197,
	1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207,
	1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217,
	1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227,
	1228, 1229, 1230, 1231, 1232, 1233, 0, 0, 0, 452,
	0, 1265, 1265, 426, 0, 428, 0, 0, 0, 0,
	0, 437, 440, 1265, 314, 315, 316, 456, 457, 446,
	458, 0, 0, 0, 477, 478, 479, 480, 1264, 1264,
	483, 142, 0, 162, 879, 484, 42, 0, 0, 845,
	462, 37, 38, 0, 561, 562, 563, 1234, 1235, 1236,
	1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246,
	1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256,
	1257, 1258, 1259, 1260, 1261, 805, 0, 0, 792, 44,
	0, 484, 489, 490, 496, 494, 495, 485, 0, 507,
	516, 0, 586, 0, 591, 593, -2, -2, 0, 634,
	635, 636, 637, 638, 0, 0, 0, 0, 0, 0,
	0, 0, 662, 663, 664, 665, 666, 667, 771, 772,
	773, 774, 775, 776, 777, 778, 595, 596, 768, 825,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 759, 0, 730, 730, 730, 730, 730, 730, 730,
	730, 730, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 59, 61, 577, 65, 0, 1214, 826, -2, -2,
	0, 0, 768, 0, -2, 1046, -2, 83, 0, 191,
	192, 0, 1058, 335, 871, 872, 1048, 869, 870, 895,
	896, 897, 898, 899, 900, 901, 902, 903, 904, 905,
	906, 907, 908, 909, 910, 911, 912, 913, 914, 915,
	916, 917, 918, 919, 920, 921, 922, 923, 924, 925,
	926, 927, 928, 929, 930, 931, 932, 933, 934, 935,
	936, 937, 938, 939, 940, 941, 942, 943, 944, 945,
	946, 947, 948, 949, 950, 951, 952, 953, 954, 955,
	956, 957, 958, 959, 960, 961, 962, 963, 964, 965,
	966, 967, 968, 969, 970, 971, 972, 973, 974, 975,
	976, 977, 978, 979, 980, 981, 982, 983, 984, 985,
	986, 987, 988, 989, 990, 991, 992, 993, 994, 995,
	996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005,
	1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015,
	1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025,
	1026, 1027, 1028, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 400, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 410, 0, 412, 1265, 452, 415, 0,
	0, 842, 842, 1265, 1265, 1265, 0, 0, 0, 424,
	1266, 1267, 425, 0, 337, 338, 452, 452, 1265, 1265,
	449, 0, 449, 449, 447, 448, 443, 444, 0, 439,
	0, 441, 467, -2, 470, 471, 472, -2, 0, 481,
	482, 0, 144, 0, 161, 0, 877, 880, 493, 43,
	1263, 0, 1265, 0, 0, 0, 30, 0, 0, 802,
	0, 793, 794, 798, 798, 1234, 1235, 1236, 1237, 1238,
	1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248,
	1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258,
	1259, 1260, 1261, 801, 42, 493, 0, 491, 497, 498,
	487, 0, 508, 0, 0, 0, 517, 0, 519, 520,
	521, 522, 0, 589, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 613, 614, 615, 616, 617, 618, 619,
	592, 0, 606, 0, 0, 0, 654, 655, 656, 657,
	658, 659, 660, 0, 496, 42, 0, 632, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 496, 0,
	760, 0, 713, 722, 0, 714, 723, 715, 724, 716,
	0, 717, 725, 718, 726, 719, 720, 727, 721, 0,
	0, 0, 628, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 496, 496, 0, 0,
	0, 496, 0, 0, 496, 0, 0, 0, 0, 496,
	0, 0, 0, 63, 0, 576, 0, 523, 525, 526,
	527, -2, 0, 580, 626, -2, 0, 0, 0, 55,
	56, 0, 0, 0, 0, 66, 1214, 68, 69, 0,
	0, 0, 290, 835, 836, 837, 0, 833, 352, 0,
	193, 0, 0, 201, 278, 209, 210, 211, 271, 213,
	271, 271, 0, 271, 271, 271, 271, 271, 287, 287,
	287, 287, 287, 254, 255, 256, 257, 258, 0, 0,
	231, 271, 271, 271, 235, 261, 262, 263, 264, 265,
	266, 267, 268, 214, 215, 216, 217, 218, 219, 220,
	221, 222, 273, 273, 275, 275, 275, 275, 275, 0,
	334, 0, 867, 80, 0, 1265, 0, 1265, 0, 0,
	189, 115, 0, 0, 403, 841, 0, 405, 57, 406,
	407, 408, 409, 578, 875, 876, 413, 414, 453, 454,
	0, 0, 418, 419, 420, 421, 422, 423, 339, 429,
	430, 431, 436, 452, 0, 0, 0, 541, 452, 438,
	620, 474, 143, 146, 0, 149, 150, 151, 152, 153,
	154, 155, 156, 157, 158, 159, 160, 145, 163, 0,
	0, 0, 496, 0, 389, 39, 40, 0, 0, 814,
	806, 0, 0, 0, 0, 0, 796, 799, 800, 797,
	805, 45, 496, 0, 779, 0, 0, 499, 492, 33,
	587, 588, 590, 607, 0, 609, 611, 518, 509, 0,
	769, -2, 597, 598, 622, 623, 624, 0, 0, 0,
	0, 620, 602, 0, 639, 640, 641, 642, 643, 644,
	645, 646, 647, 648, 649, 650, 653, 744, 745, 0,
	651, 652, 661, 628, 625, 0, 824, 42, 0, 630,
	503, 504, 0, 0, 700, 0, 0, 636, 771, 0,
	636, 771, 0, 0, 0, 0, 766, 763, 0, 0,
	731, 0, 0, 0, 0, 0, 629, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 575,
	0, 0, 0, 0, 0, 0, 564, 0, 0, 567,
	0, 0, 0, 0, 560, 0, 0, 0, 0, 534,
	1148, 536, 0, 580, 0, 0, 0, 584, 0, 584,
	60, 584, 62, 0, 579, 827, 67, 0, 0, 72,
	73, 828, 829, 830, 831, 0, 769, 0, 190, 353,
	355, 358, 359, 360, 194, 196, 197, 198, 0, 1058,
	327, 1158, 1195, -2, 321, 1084, -2, -2, 200, 280,
	279, 212, 0, 287, 287, 271, 271, 271, 271, 240,
	287, 243, 246, 247, 290, 0, 290, 290, 290, 290,
	287, 0, 0, 232, 233, 234, 223, 0, 224, 273,
	226, 0, 227, 228, 229, 230, 333, 0, 0, 0,
	0, 0, 87, 843, 88, 0, 116, 117, 91, 0,
	401, 1265, 0, 1265, 1265, 584, 0, 0, 432, 450,
	451, 449, 452, 0, 435, 442, 0, 0, 0, 164,
	63, 0, 878, 491, 1264, -2, 390, 859, 390, 390,
	381, 307, 848, 849, 850, 851, 852, 853, 854, 855,
	856, 0, 0, 0, 0, 0, 803, 804, 795, 31,
	0, 838, 839, 780, 781, 81, 500, 608, 610, 612,
	0, 628, 599, 620, 603, 0, 600, 0, 594, 0,
	633, -2, 0, 698, 0, 699, 0, 0, 0, 0,
	0, 737, 0, 0, 738, 0, 709, 792, 0, 764,
	0, 0, 712, 732, 0, 0, 733, 734, 735, 736,
	687, 0, 688, 0, 0, 0, 0, 0, 694, 695,
	696, 697, 0, 0, 514, 514, 514, 0, 514, 514,
	0, 514, 514, 514, 514, 0, 514, 514, 514, 818,
	0, 0, -2, 0, 0, 584, 524, 555, 557, 0,
	552, 565, 566, 568, 0, 570, 0, 572, 573, 528,
	530, 627, 531, 0, 0, 0, 580, 540, 0, 0,
	0, 792, 0, 584, 53, 54, 0, 70, 71, 0,
	0, 77, 291, 292, 0, 0, 356, 0, 195, 0,
	0, 309, 321, 317, 318, 321, 312, 322, 313, 0,
	202, 203, 204, 205, 206, 207, 282, 0, 0, 0,
	286, 0, 294, 296, 0, 208, 281, 0, 290, 290,
	287, 238, 239, 271, 244, 290, 248, 0, 249, 250,
	251, 252, 290, 0, 269, 0, 0, 225, 0, 349,
	0, 868, -2, 80, 0, 118, 119, 120, 0, 92,
	93, 0, 0, 0, 0, 0, 404, 58, 416, 417,
	427, 340, 341, 452, 434, 0, 621, 147, 148, 287,
	0, 499, 365, 0, 1264, 321, 0, 382, 383, 391,
	392, 393, 394, 0, 0, 1264, 0, 0, 0, 392,
	0, 0, 0, 860, 861, 0, 0, 0, 308, 0,
	0, 816, 815, 807, 32, 584, 0, 510, 770, 0,
	601, 0, 604, 668, 631, 505, 0, 0, 271, 271,
	749, 271, 275, 752, 271, 754, 271, 757, 0, 0,
	0, 0, 0, 0, 0, 761, 711, 767, 0, 0,
	0, 511, 792, 689, 690, 691, 692, 693, 514, 514,
	672, 515, 673, 674, 514, 676, 677, 514, 679, 680,
	681, 682, 514, 684, 685, 686, 46, 0, 818, 808,
	820, 822, 0, 42, 0, 0, 547, 792, 549, 556,
	0, 0, 550, 0, 551, 569, 571, 0, 532, 0,
	0, -2, 539, 0, 0, 0, 801, 585, 52, 74,
	75, 76, 354, 357, 0, 323, 271, 326, 0, 310,
	311, 0, 283, 284, 0, 293, 295, 297, 272, 236,
	237, 290, 245, 241, 288, 289, 253, 287, 0, 287,
	0, 276, 0, 336, 350, 0, 0, 85, 0, 0,
	99, 0, 95, 0, 0, 0, 402, 433, 542, 889,
	574, 81, 0, 386, 0, 368, 867, 319, 362, 369,
	370, 375, 376, 377, 0, 0, 372, 0, 386, 0,
	385, 0, 41, 0, 782, 0, 81, 81, 669, 605,
	0, 701, 746, 287, 750, 751, 753, 755, 756, 758,
	703, 702, 0, 0, 0, 0, 0, 0, 0, 765,
	0, 0, 0, 0, 670, 671, 675, 678, 683, 0,
	47, 0, 823, -2, 0, 64, 0, 801, 553, 0,
	558, 0, 580, 537, 0, 0, 545, 0, 0, 51,
	299, 0, 798, 0, 285, 242, 290, 270, 290, 0,
	0, 351, 0, -2, 0, 80, 100, 101, 0, 0,
	0, 106, 0, 0, 0, 0, 0, 94, 96, 97,
	98, 891, 885, 0, 0, 1264, 387, 0, 201, 0,
	321, 320, 384, 0, 857, 858, 0, 1264, 386, 0,
	817, 788, 0, 584, 0, 501, 506, 747, 748, 0,
	0, 0, 0, 739, 710, 762, 0, 0, 512, 0,
	0, 821, 0, -2, 0, 548, 50, 0, 533, 535,
	580, 0, 581, 582, 583, 298, 302, 0, 307, 0,
	324, 325, 0, 259, 260, 274, 277, 0, 86, 0,
	0, 102, 103, 104, 105, 107, 108, 0, 0, 0,
	846, 893, -2, 0, 0, 1264, 367, 388, 199, 0,
	867, 371, 378, 379, 1264, 0, 34, 0, 0, 782,
	81, 704, 706, 705, 707, 0, 0, 0, 728, 729,
	792, 0, 811, 42, 554, 538, 546, 303, 304, 0,
	306, 0, 300, 0, 80, -2, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 0, 0, 0,
	109, 110, 111, 112, 543, 0, 885, 0, 887, 0,
	884, 0, 584, 366, 0, 0, 380, 0, 396, 0,
	789, 790, 791, 783, 784, 786, 787, 788, 502, 708,
	0, 0, 0, 0, 819, -2, 305, 0, 84, 301,
	121, 90, 0, 0, 0, 165, 29, 0, 0, 892,
	0, 890, 0, 0, 886, 782, 300, 0, 395, 0,
	0, 0, 35, 740, 0, 743, 513, 0, 80, 0,
	0, 0, 132, 0, 0, 0, 0, 847, 894, 0,
	0, 788, 373, 0, 397, 0, 785, 741, 0, 0,
	122, 123, 0, 0, 133, 0, 0, 113, 166, 544,
	888, 882, 36, 300, 0, 0, 328, 80, 124, 125,
	126, 127, 128, 0, 130, 0, 0, 0, 374, 0,
	0, 329, 330, 0, 89, 0, 0, 0, 0, 0,
	0, 139, 0, 0, 742, 331, 0, 332, 0, 0,
	0, 0, 0, 134, 135, 0, 0, 0, 140, 0,
	0, 0, 342, 344, 345, 0, 0, 343, 129, 131,
	0, 137, 0, 0, 398, 399, 346, 347, 348, 0,
	0, 0, 136, 0, 141, 138,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 89, 3, 3, 3, 117, 109, 3,
	68, 70, 114, 112, 69, 113, 127, 115, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 421,
	98, 97, 99, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 119, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 108, 3, 120,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 87, 88, 90, 91, 92, 93, 94, 95,
	96, 100, 101, 102, 103, 104, 105, 106, 107, 110,
	111, 116, 118, 121, 122, 123, 124, 125, 126, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:388
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:393
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:394
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:398
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:425
		{
			setParseTree(yylex, nil)
		}
	case 29:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:431
		{
			yyVAL.statement = &Load{Local: yyDollar[3].boolVal, Infile: yyDollar[4].str, Table: yyDollar[5].tableName, Partition: yyDollar[6].partitions, Charset: yyDollar[7].str, Fields: yyDollar[8].Fields, Lines: yyDollar[9].Lines, IgnoreNum: yyDollar[10].sqlVal, Columns: yyDollar[11].columns}
		}
	case 30:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:437
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:445
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:449
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 33:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:455
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 34:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:462
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[6].str, SelectExprs: yyDollar[7].selectExprs, From: TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
			if yyDollar[5].byt == 1 {
				yyVAL.selStmt.(*Select).CalcFoundRows = true
			}
		}
	case 35:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:469
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[6].str, SelectExprs: yyDollar[7].selectExprs, From: yyDollar[9].tableExprs, Where: NewWhere(WhereStr, yyDollar[10].expr), GroupBy: GroupBy(yyDollar[11].exprs), Having: NewWhere(HavingStr, yyDollar[12].expr)}
			if yyDollar[5].byt == 1 {
				yyVAL.selStmt.(*Select).CalcFoundRows = true
			}
		}
	case 36:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sql.y:476
		{
			yyVAL.selStmt = &Select{CommonTableExprs: yyDollar[1].tableExprs, Comments: Comments(yyDollar[3].bytes2), Cache: yyDollar[4].str, Distinct: yyDollar[5].str, Hints: yyDollar[7].str, SelectExprs: yyDollar[8].selectExprs, From: yyDollar[10].tableExprs, Where: NewWhere(WhereStr, yyDollar[11].expr), GroupBy: GroupBy(yyDollar[12].exprs), Having: NewWhere(HavingStr, yyDollar[13].expr)}
			if yyDollar[6].byt == 1 {
				yyVAL.selStmt.(*Select).CalcFoundRows = true
			}
		}
	case 37:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:485
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:491
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:495
		{
			yyVAL.tableExprs = append(yyDollar[1].tableExprs, yyDollar[3].tableExpr)
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:501
		{
			yyVAL.tableExpr = &CommonTableExpr{&AliasedTableExpr{Expr: yyDollar[3].simpleTableExpr, As: yyDollar[1].tableIdent}, nil}
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:505
		{
			yyVAL.tableExpr = &CommonTableExpr{&AliasedTableExpr{Expr: yyDollar[6].simpleTableExpr, As: yyDollar[1].tableIdent}, yyDollar[3].columns}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:511
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:515
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:521
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:525
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 46:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:532
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].setExprs)
			yyVAL.statement = ins
		}
	case 47:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:544
		{
			cols := make(Columns, 0, len(yyDollar[7].setExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].setExprs))
			for _, updateList := range yyDollar[7].setExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].setExprs)}
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:556
		{
			yyVAL.str = InsertStr
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:560
		{
			yyVAL.str = ReplaceStr
		}
	case 50:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:566
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].setExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 51:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:572
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 52:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:576
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 53:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:580
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 54:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:584
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:589
		{
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:590
		{
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:594
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName.ToViewName()}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:598
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName.ToViewName())
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:604
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:608
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:614
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:618
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:623
		{
			yyVAL.partitions = nil
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:627
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:633
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:637
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:641
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:645
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:651
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:655
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:661
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:665
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:669
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:675
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:679
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:683
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:687
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:693
		{
			yyVAL.str = SessionStr
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:697
		{
			yyVAL.str = GlobalStr
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:702
		{
			yyVAL.int = yyPosition(yylex)
		}
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:707
		{
			yyVAL.int = yyOldPosition(yylex)
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:713
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			if len(yyDollar[1].ddl.TableSpec.Constraints) > 0 {
				yyDollar[1].ddl.ConstraintAction = AddStr
			}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:721
		{
			yyDollar[1].ddl.OptLike = &OptLike{LikeTable: yyDollar[3].tableName}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 84:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:726
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: yyDollar[4].colIdent, Using: yyDollar[5].colIdent, Type: yyDollar[2].str, Columns: yyDollar[9].indexColumns, Options: yyDollar[11].indexOptions}}
		}
	case 85:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:730
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[3].tableName.ToViewName(), ViewExpr: yyDollar[6].selStmt, SubStatementPositionStart: yyDollar[5].int, SubStatementPositionEnd: yyDollar[7].int - 1}
		}
	case 86:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:734
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[5].tableName.ToViewName(), ViewExpr: yyDollar[8].selStmt, SubStatementPositionStart: yyDollar[7].int, SubStatementPositionEnd: yyDollar[9].int - 1, OrReplace: true}
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:738
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes), IfNotExists: ne}
		}
	case 88:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:746
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes), IfNotExists: ne}
		}
	case 89:
		yyDollar = yyS[yypt-15 : yypt+1]
//line sql.y:754
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[8].tableName, TriggerSpec: &TriggerSpec{Name: string(yyDollar[4].bytes), Time: yyDollar[5].str, Event: yyDollar[6].str, Order: yyDollar[12].triggerOrder, Body: yyDollar[14].statement}, SubStatementPositionStart: yyDollar[13].int, SubStatementPositionEnd: yyDollar[15].int - 1}
		}
	case 90:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:758
		{
			yyVAL.statement = &DDL{Action: CreateStr, ProcedureSpec: &ProcedureSpec{Name: string(yyDollar[4].bytes), Definer: yyDollar[2].str, Params: yyDollar[6].procedureParams, Characteristics: yyDollar[8].characteristics, Body: yyDollar[10].statement}, SubStatementPositionStart: yyDollar[9].int, SubStatementPositionEnd: yyDollar[11].int - 1}
		}
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:763
		{
			yyVAL.procedureParams = nil
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:767
		{
			yyVAL.procedureParams = yyDollar[1].procedureParams
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:773
		{
			yyVAL.procedureParams = []ProcedureParam{yyDollar[1].procedureParam}
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:777
		{
			yyVAL.procedureParams = append(yyVAL.procedureParams, yyDollar[3].procedureParam)
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:783
		{
			yyVAL.procedureParam = ProcedureParam{Direction: ProcedureParamDirection_In, Name: string(yyDollar[1].bytes), Type: yyDollar[2].columnType}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:787
		{
			yyVAL.procedureParam = ProcedureParam{Direction: ProcedureParamDirection_In, Name: string(yyDollar[2].bytes), Type: yyDollar[3].columnType}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:791
		{
			yyVAL.procedureParam = ProcedureParam{Direction: ProcedureParamDirection_Inout, Name: string(yyDollar[2].bytes), Type: yyDollar[3].columnType}
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:795
		{
			yyVAL.procedureParam = ProcedureParam{Direction: ProcedureParamDirection_Out, Name: string(yyDollar[2].bytes), Type: yyDollar[3].columnType}
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:800
		{
			yyVAL.characteristics = nil
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:804
		{
			yyVAL.characteristics = yyDollar[1].characteristics
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:810
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:814
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[2].characteristic)
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:820
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_Comment, Comment: string(yyDollar[2].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:824
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_LanguageSql}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:828
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_NotDeterministic}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:832
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_Deterministic}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:836
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_ContainsSql}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:840
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_NoSql}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:844
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_ReadsSqlData}
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:848
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_ModifiesSqlData}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:852
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_SqlSecurityDefiner}
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:856
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_SqlSecurityInvoker}
		}
	case 113:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:862
		{
			yyVAL.statement = &BeginEndBlock{Statements: yyDollar[2].statements}
		}
	case 114:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:867
		{
			yyVAL.str = ""
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:871
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:877
		{
			yyVAL.str = BeforeStr
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:881
		{
			yyVAL.str = AfterStr
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:887
		{
			yyVAL.str = InsertStr
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:891
		{
			yyVAL.str = UpdateStr
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:895
		{
			yyVAL.str = DeleteStr
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:900
		{
			yyVAL.triggerOrder = nil
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:904
		{
			yyVAL.triggerOrder = &TriggerOrder{PrecedesOrFollows: FollowsStr, OtherTriggerName: string(yyDollar[2].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:908
		{
			yyVAL.triggerOrder = &TriggerOrder{PrecedesOrFollows: PrecedesStr, OtherTriggerName: string(yyDollar[2].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:914
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 129:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:924
		{
			yyVAL.statement = &BeginEndBlock{Statements: yyDollar[2].statements}
		}
	case 130:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:930
		{
			yyVAL.statement = &CaseStatement{Expr: yyDollar[2].expr, Cases: yyDollar[3].caseStatementCases}
		}
	case 131:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:934
		{
			yyVAL.statement = &CaseStatement{Expr: yyDollar[2].expr, Cases: yyDollar[3].caseStatementCases, Else: yyDollar[5].statements}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:940
		{
			yyVAL.caseStatementCases = []CaseStatementCase{yyDollar[1].caseStatementCase}
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:944
		{
			yyVAL.caseStatementCases = append(yyVAL.caseStatementCases, yyDollar[2].caseStatementCase)
		}
	case 134:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:950
		{
			yyVAL.caseStatementCase = CaseStatementCase{Case: yyDollar[2].expr, Statements: yyDollar[4].statements}
		}
	case 135:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:956
		{
			conds := []IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}
			yyVAL.statement = &IfStatement{Conditions: conds}
		}
	case 136:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:961
		{
			conds := []IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}
			yyVAL.statement = &IfStatement{Conditions: conds, Else: yyDollar[7].statements}
		}
	case 137:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:966
		{
			conds := yyDollar[6].ifStatementConditions
			conds = append([]IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}, conds...)
			yyVAL.statement = &IfStatement{Conditions: conds}
		}
	case 138:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:972
		{
			conds := yyDollar[6].ifStatementConditions
			conds = append([]IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}, conds...)
			yyVAL.statement = &IfStatement{Conditions: conds, Else: yyDollar[8].statements}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:980
		{
			yyVAL.ifStatementConditions = []IfStatementCondition{yyDollar[1].ifStatementCondition}
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:984
		{
			yyVAL.ifStatementConditions = append(yyVAL.ifStatementConditions, yyDollar[2].ifStatementCondition)
		}
	case 141:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:990
		{
			yyVAL.ifStatementCondition = IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:996
		{
			yyVAL.statement = &Signal{SqlStateValue: string(yyDollar[2].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1000
		{
			yyVAL.statement = &Signal{SqlStateValue: string(yyDollar[2].bytes), Info: yyDollar[4].signalInfos}
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1006
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1010
		{
			yyVAL.bytes = yyDollar[3].bytes
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1016
		{
			yyVAL.signalInfos = []SignalInfo{yyDollar[1].signalInfo}
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1020
		{
			yyVAL.signalInfos = append(yyVAL.signalInfos, yyDollar[3].signalInfo)
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1026
		{
			yyVAL.signalInfo = SignalInfo{Name: string(yyDollar[1].bytes), Value: yyDollar[3].expr.(*SQLVal)}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1032
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1049
		{
			yyVAL.statement = &Call{FuncName: string(yyDollar[2].bytes), Params: yyDollar[3].exprs}
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1054
		{
			yyVAL.exprs = nil
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1058
		{
			yyVAL.exprs = nil
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1062
		{
			yyVAL.exprs = yyDollar[2].exprs
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1068
		{
			yyVAL.statements = Statements{yyDollar[1].statement}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1072
		{
			yyVAL.statements = append(yyVAL.statements, yyDollar[3].statement)
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1078
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 189:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1105
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName, IfNotExists: ne}
			setDDL(yylex, yyVAL.ddl)
		}
	case 190:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1116
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1123
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1128
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddConstraint(yyDollar[1].constraintDefinition)
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1133
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
			yyVAL.TableSpec.AddConstraint(yyDollar[2].constraintDefinition)
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1139
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 195:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1143
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
			yyVAL.TableSpec.AddConstraint(yyDollar[4].constraintDefinition)
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1148
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1152
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1156
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1162
		{
			if err := yyDollar[2].columnType.merge(yyDollar[3].columnType); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1172
		{
			if err := yyDollar[2].columnType.merge(yyDollar[3].columnType); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 201:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1181
		{
			yyVAL.columnType = ColumnType{}
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1185
		{
			opt := ColumnType{NotNull: yyDollar[2].boolVal, sawnull: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1194
		{
			opt := ColumnType{Default: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1203
		{
			opt := ColumnType{OnUpdate: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1212
		{
			opt := ColumnType{Autoincrement: yyDollar[2].boolVal, sawai: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1221
		{
			opt := ColumnType{KeyOpt: yyDollar[2].colKeyOpt}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1230
		{
			opt := ColumnType{Comment: yyDollar[2].sqlVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1241
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1252
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1257
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1263
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1267
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1271
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1275
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1279
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1283
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1287
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1291
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1295
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1301
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1307
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1313
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1319
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1325
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1331
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1337
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1343
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1351
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1355
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1359
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1363
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1367
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1373
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1377
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1381
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1385
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1389
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1393
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 242:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1397
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1401
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1405
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1409
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Length: yyDollar[4].sqlVal}
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1413
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1417
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1421
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1425
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1429
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1433
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1437
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1441
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1445
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1449
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1453
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1457
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1461
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1465
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 260:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1470
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1476
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1480
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1484
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1488
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1492
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1496
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1500
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1504
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1510
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[1].bytes))
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1515
		{
			yyVAL.strs = append(yyDollar[1].strs, string(yyDollar[3].bytes))
		}
	case 271:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1520
		{
			yyVAL.sqlVal = nil
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1524
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 273:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1529
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 274:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1533
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 275:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1541
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1545
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 277:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1551
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 278:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1559
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1563
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 280:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1568
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1572
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1579
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1583
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1589
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1595
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1601
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1606
		{
			yyVAL.str = ""
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1610
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1614
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 290:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1619
		{
			yyVAL.str = ""
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1623
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1627
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1633
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1637
		{
			yyVAL.colKeyOpt = colKey
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1641
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1645
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1651
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 298:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1657
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1661
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1666
		{
			yyVAL.indexOptions = nil
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1670
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1676
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1680
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1686
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1690
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1695
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1701
		{
			yyVAL.str = ""
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1705
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1711
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1715
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1719
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1723
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1727
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1733
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1737
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1741
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1747
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1751
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1756
		{
			yyVAL.str = ""
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1760
		{
			yyVAL.str = yyDollar[1].str
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1765
		{
			yyVAL.str = ""
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1769
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1775
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1779
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1785
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal, Order: yyDollar[3].str}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1791
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1795
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 328:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1801
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 329:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1805
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 330:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1809
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 331:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1813
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 332:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1817
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[12].ReferenceAction, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1823
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1827
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[2].constraintInfo}
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1831
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 336:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1837
		{
			yyVAL.constraintInfo = &CheckConstraintDefinition{Expr: yyDollar[3].expr, Enforced: yyDollar[5].boolean}
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1843
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1847
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1852
		{
			yyVAL.str = ""
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1856
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1860
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1866
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1872
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1878
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1882
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1886
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1890
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1894
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 349:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1899
		{
			yyVAL.boolean = true
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1903
		{
			yyVAL.boolean = true
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1907
		{
			yyVAL.boolean = false
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1912
		{
			yyVAL.str = ""
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1916
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1920
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1928
		{
			yyVAL.str = yyDollar[1].str
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1932
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1936
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1942
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1946
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1950
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 361:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1955
		{
			yyVAL.str = ""
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1959
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 365:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1969
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 366:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1973
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			ddl.Column = yyDollar[8].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 367:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1980
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 368:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1987
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 369:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1991
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: DropStr, Column: NewColIdent(string(yyDollar[7].bytes)), Table: yyDollar[4].tableName}
		}
	case 370:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1995
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 371:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1999
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: RenameStr, Table: yyDollar[4].tableName, Column: NewColIdent(string(yyDollar[7].bytes)), ToColumn: NewColIdent(string(yyDollar[9].bytes))}
		}
	case 372:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2003
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 373:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:2008
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[7].str), Using: yyDollar[8].colIdent, Columns: yyDollar[10].indexColumns, Options: yyDollar[12].indexOptions}}
		}
	case 374:
		yyDollar = yyS[yypt-14 : yypt+1]
//line sql.y:2012
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[9].str), Type: yyDollar[7].str, Using: yyDollar[10].colIdent, Columns: yyDollar[12].indexColumns, Options: yyDollar[14].indexOptions}}
		}
	case 375:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2016
		{
			yyVAL.statement = &DDL{Action: AlterStr, ConstraintAction: DropStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[7].bytes)}}}}
		}
	case 376:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2021
		{
			yyVAL.statement = &DDL{Action: AlterStr, ConstraintAction: DropStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[7].bytes), Details: &CheckConstraintDefinition{}}}}}
		}
	case 377:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2026
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[7].colIdent}}
		}
	case 378:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2030
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: RenameStr, FromName: yyDollar[7].colIdent, ToName: yyDollar[9].colIdent}}
		}
	case 379:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2034
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ModifyStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 380:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:2041
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ChangeStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, Column: NewColIdent(string(yyDollar[7].bytes)), ColumnOrder: yyDollar[9].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			yyVAL.statement = ddl
		}
	case 381:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2047
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 382:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2051
		{
			ddl := &DDL{Action: AlterStr, ConstraintAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddConstraint(yyDollar[6].constraintDefinition)
			yyVAL.statement = ddl
		}
	case 383:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2057
		{
			ddl := &DDL{Action: AlterStr, ConstraintAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddConstraint(yyDollar[6].constraintDefinition)
			yyVAL.statement = ddl
		}
	case 384:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2063
		{
			yyVAL.statement = &DDL{Action: AlterStr, ConstraintAction: DropStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[8].bytes), Details: &ForeignKeyDefinition{}}}}}
		}
	case 385:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2068
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, AutoIncSpec: &AutoIncSpec{Value: yyDollar[7].expr}}
		}
	case 386:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2073
		{
			yyVAL.columnOrder = nil
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2077
		{
			yyVAL.columnOrder = &ColumnOrder{First: true}
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2081
		{
			yyVAL.columnOrder = &ColumnOrder{AfterColumn: NewColIdent(string(yyDollar[2].bytes))}
		}
	case 389:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2087
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 390:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2093
		{
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2095
		{
		}
	case 395:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2104
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2110
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2114
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 398:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2120
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 399:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2124
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2130
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2136
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 402:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2140
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 403:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2148
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 404:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2156
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[3].colIdent}}
		}
	case 405:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2160
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromViews: yyDollar[4].tableNames, IfExists: exists}
		}
	case 406:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2168
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes), IfExists: exists}
		}
	case 407:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2176
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes), IfExists: exists}
		}
	case 408:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2184
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, TriggerSpec: &TriggerSpec{Name: string(yyDollar[4].bytes)}, IfExists: exists}
		}
	case 409:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2192
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, ProcedureSpec: &ProcedureSpec{Name: string(yyDollar[4].bytes)}, IfExists: exists}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2202
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2206
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2211
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 413:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2217
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 414:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2222
		{
			yyVAL.statement = &Show{Type: CharsetStr, Filter: yyDollar[4].showFilter}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2226
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Filter: yyDollar[3].showFilter}
		}
	case 416:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2230
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 417:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2234
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 418:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2239
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 419:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2243
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 420:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2247
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 421:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2251
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 422:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2255
		{
			yyVAL.statement = &Show{Type: CreateTriggerStr, Table: yyDollar[4].tableName}
		}
	case 423:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2259
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2263
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2267
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2271
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 427:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2275
		{
			yyVAL.statement = &Show{Type: IndexStr, Table: yyDollar[4].tableName, Database: yyDollar[5].str, ShowIndexFilterOpt: yyDollar[6].expr}
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2279
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 429:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2283
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Filter: yyDollar[4].showFilter}
		}
	case 430:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2287
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Filter: yyDollar[4].showFilter}
		}
	case 431:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2291
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 432:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2295
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Database: yyDollar[4].str, Filter: yyDollar[5].showFilter}
		}
	case 433:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2299
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 434:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2304
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[6].showFilter, AsOf: yyDollar[5].expr}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 435:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2314
		{
			yyVAL.statement = &Show{Type: string(yyDollar[3].bytes), ShowTablesOpt: &ShowTablesOpt{DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}}
		}
	case 436:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2318
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2322
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 438:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2326
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2332
		{
			// Cannot dereference $3 directly, or else the parser stackcannot be pooled. See yyParsePooled
			cmp := yyDollar[3].expr.(*ComparisonExpr)
			cmp.Left = &ColName{Name: NewColIdent("collation")}
			var ex Expr = cmp
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &ex}
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2340
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2350
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2356
		{
			yyVAL.expr = &ComparisonExpr{Operator: LikeStr, Right: yyDollar[2].expr, Escape: yyDollar[3].expr}
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2362
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2366
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 445:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2372
		{
			yyVAL.str = ""
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2376
		{
			yyVAL.str = "full "
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2382
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2386
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2392
		{
			yyVAL.str = ""
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2396
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2400
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 452:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2406
		{
			yyVAL.showFilter = nil
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2410
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2414
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 455:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2420
		{
			yyVAL.str = ""
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2424
		{
			yyVAL.str = SessionStr
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2428
		{
			yyVAL.str = GlobalStr
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2434
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2438
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2444
		{
			yyVAL.statement = &Begin{}
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2448
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2454
		{
			yyVAL.statement = &Begin{}
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2460
		{
			yyVAL.statement = &Commit{}
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2466
		{
			yyVAL.statement = &Rollback{}
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2471
		{
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2472
		{
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2476
		{
			yyVAL.statement = &Explain{ExplainFormat: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2480
		{
			yyVAL.statement = &Explain{Analyze: true, ExplainFormat: TreeStr, Statement: yyDollar[3].selStmt}
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2486
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 473:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2494
		{
			yyVAL.str = ""
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2498
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2509
		{
			yyVAL.statement = &Show{Type: "columns", OnTable: yyDollar[2].tableName}
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2513
		{
			yyVAL.statement = &OtherRead{}
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2519
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2523
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2527
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2531
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2537
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 484:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2541
		{
			setAllowComments(yylex, true)
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2545
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 486:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2551
		{
			yyVAL.bytes2 = nil
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2555
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2561
		{
			yyVAL.str = UnionStr
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2565
		{
			yyVAL.str = UnionAllStr
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2569
		{
			yyVAL.str = UnionDistinctStr
		}
	case 491:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2574
		{
			yyVAL.byt = 0
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2578
		{
			yyVAL.byt = 1
		}
	case 493:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2583
		{
			yyVAL.str = ""
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2587
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2591
		{
			yyVAL.str = SQLCacheStr
		}
	case 496:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2596
		{
			yyVAL.str = ""
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2600
		{
			yyVAL.str = ""
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2604
		{
			yyVAL.str = DistinctStr
		}
	case 499:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2609
		{
			yyVAL.str = ""
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2613
		{
			yyVAL.str = StraightJoinHint
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2619
		{
			if ae, ok := yyDollar[2].selectExpr.(*AliasedExpr); ok {
				ae.StartParsePos = yyDollar[1].int
				ae.EndParsePos = yyDollar[3].int - 1
			}
			yyVAL.selectExprs = SelectExprs{yyDollar[2].selectExpr}
		}
	case 502:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2627
		{
			if ae, ok := yyDollar[4].selectExpr.(*AliasedExpr); ok {
				ae.StartParsePos = yyDollar[3].int
				ae.EndParsePos = yyDollar[5].int - 1
			}
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[4].selectExpr)
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2638
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2642
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr}
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2646
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 506:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2650
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2656
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2660
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2664
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 510:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2668
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2675
		{
			yyVAL.over = &Over{WindowName: yyDollar[2].colIdent}
		}
	case 512:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2679
		{
			yyVAL.over = &Over{OrderBy: yyDollar[3].orderBy}
		}
	case 513:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2683
		{
			yyVAL.over = &Over{PartitionBy: yyDollar[5].exprs, OrderBy: yyDollar[6].orderBy}
		}
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2688
		{
			yyVAL.over = nil
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2692
		{
			yyVAL.over = yyDollar[1].over
		}
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2697
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2701
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2705
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2711
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2715
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2719
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2723
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2729
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2733
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2743
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2747
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].simpleTableExpr, As: yyDollar[3].tableIdent}
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2751
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2757
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2763
		{
			yyVAL.simpleTableExpr = &ValuesStatement{Rows: yyDollar[2].values}
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2769
		{
			yyVAL.values = Values{yyDollar[2].valTuple}
		}
	case 533:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2773
		{
			yyVAL.values = append(yyVAL.values, yyDollar[4].valTuple)
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2779
		{
			yyVAL.aliasedTableName = yyDollar[2].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
		}
	case 535:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2784
		{
			yyVAL.aliasedTableName = yyDollar[6].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
			yyVAL.aliasedTableName.Partitions = yyDollar[4].partitions
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2795
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Hints: yyDollar[1].indexHints}
		}
	case 537:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2799
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, Hints: yyDollar[4].indexHints}
		}
	case 538:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2803
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, As: yyDollar[5].tableIdent, Hints: yyDollar[6].indexHints}
		}
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2807
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2811
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[1].tableIdent, Hints: yyDollar[2].indexHints}
		}
	case 541:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2822
		{
			yyVAL.expr = nil
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2826
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 543:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2831
		{
			yyVAL.columns = nil
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2835
		{
			yyVAL.columns = yyDollar[2].columns
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2841
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2845
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2851
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2855
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 549:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2868
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 550:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2872
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 551:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2876
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2880
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2886
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 554:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2888
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 555:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2892
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2894
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 557:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2898
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2900
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 559:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2903
		{
			yyVAL.empty = struct{}{}
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2905
		{
			yyVAL.empty = struct{}{}
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2910
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2914
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2920
		{
			yyVAL.str = JoinStr
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2924
		{
			yyVAL.str = JoinStr
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2928
		{
			yyVAL.str = JoinStr
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2934
		{
			yyVAL.str = StraightJoinStr
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2940
		{
			yyVAL.str = LeftJoinStr
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2944
		{
			yyVAL.str = LeftJoinStr
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2948
		{
			yyVAL.str = RightJoinStr
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2952
		{
			yyVAL.str = RightJoinStr
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2958
		{
			yyVAL.str = NaturalJoinStr
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2962
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2972
		{
			yyVAL.tableName = yyDollar[3].tableName
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2978
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2982
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2988
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2992
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2998
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 580:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3003
		{
			yyVAL.indexHints = nil
		}
	case 581:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3007
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 582:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3011
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 583:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3015
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 584:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3020
		{
			yyVAL.expr = nil
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3024
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3030
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3034
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3038
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3042
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3046
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3050
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3054
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 593:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3060
		{
			yyVAL.str = ""
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3064
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3070
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3074
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3080
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3084
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 599:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3088
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 600:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3092
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 601:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3096
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3100
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 603:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3104
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 604:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3108
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 605:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3112
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3116
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3122
		{
			yyVAL.str = IsNullStr
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3126
		{
			yyVAL.str = IsNotNullStr
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3130
		{
			yyVAL.str = IsTrueStr
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3134
		{
			yyVAL.str = IsNotTrueStr
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3138
		{
			yyVAL.str = IsFalseStr
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3142
		{
			yyVAL.str = IsNotFalseStr
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3148
		{
			yyVAL.str = EqualStr
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3152
		{
			yyVAL.str = LessThanStr
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3156
		{
			yyVAL.str = GreaterThanStr
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3160
		{
			yyVAL.str = LessEqualStr
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3164
		{
			yyVAL.str = GreaterEqualStr
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3168
		{
			yyVAL.str = NotEqualStr
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3172
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 620:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3177
		{
			yyVAL.expr = nil
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3181
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3187
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3191
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3195
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3201
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3207
		{
			yyVAL.simpleTableExpr = yyDollar[1].subquery
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3211
		{
			yyVAL.simpleTableExpr = yyDollar[2].simpleTableExpr
		}
	case 628:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3217
		{
			yyVAL.selectExprs = nil
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3224
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3228
		{
			yyVAL.selectExprs = append(yyDollar[1].selectExprs, yyDollar[3].selectExpr)
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3234
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3238
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3244
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3248
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3252
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3256
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3260
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3264
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3268
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3272
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3276
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3280
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3284
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3288
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3292
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3296
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3300
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 649:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3304
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 650:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3308
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 651:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3312
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3316
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3320
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 654:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3324
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3328
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 656:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3332
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3336
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 658:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3344
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3358
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3362
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3366
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 668:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3386
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: yyDollar[3].str == DistinctStr, Exprs: yyDollar[4].selectExprs}
		}
	case 669:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3390
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 670:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3400
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 671:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3404
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 672:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3408
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 673:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3412
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 674:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3416
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 675:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3420
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 676:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3424
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 677:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3428
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 678:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3432
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 679:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3436
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 680:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3440
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 681:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3444
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 682:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3448
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 683:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3452
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 684:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3456
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 685:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3460
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 686:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3464
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 687:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3473
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 688:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3477
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 689:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3481
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: SelectExprs{yyDollar[3].selectExpr}, Over: yyDollar[5].over}
		}
	case 690:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3485
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 691:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3489
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: SelectExprs{yyDollar[3].selectExpr}, Over: yyDollar[5].over}
		}
	case 692:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3493
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 693:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3497
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 694:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3501
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 695:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3505
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 696:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3509
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 697:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3513
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 698:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3524
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 699:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3528
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 700:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3532
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 701:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3536
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 702:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3540
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 703:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3544
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 704:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3548
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 705:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3552
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 706:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3556
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 707:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3560
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 708:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3564
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 709:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3568
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 710:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3572
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 711:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3576
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 712:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3580
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 713:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3590
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 714:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3594
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 715:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3598
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 716:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3603
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 717:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3608
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 718:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3613
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 719:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3619
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 720:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3624
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 721:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3628
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 722:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3633
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Fsp: yyDollar[2].expr}
		}
	case 723:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3637
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Fsp: yyDollar[2].expr}
		}
	case 724:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3641
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Fsp: yyDollar[2].expr}
		}
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3646
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Fsp: yyDollar[2].expr}
		}
	case 726:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3651
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Fsp: yyDollar[2].expr}
		}
	case 727:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3656
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Fsp: yyDollar[2].expr}
		}
	case 728:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3660
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 729:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3664
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 732:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3675
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 733:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3685
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 734:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3689
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 735:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3693
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 736:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3697
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 737:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3701
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 738:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3705
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 739:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3711
		{
			yyVAL.str = ""
		}
	case 740:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3715
		{
			yyVAL.str = BooleanModeStr
		}
	case 741:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3719
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 742:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3723
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 743:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3727
		{
			yyVAL.str = QueryExpansionStr
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3733
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3737
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 746:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3743
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 747:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3747
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 748:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3751
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3755
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 750:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3759
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 751:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3763
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3769
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 753:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3773
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3777
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 755:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3781
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 756:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3785
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3789
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 758:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3793
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 759:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3798
		{
			yyVAL.expr = nil
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3802
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 761:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3807
		{
			yyVAL.str = string("")
		}
	case 762:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3811
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3817
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 764:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3821
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 765:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3827
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 766:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3832
		{
			yyVAL.expr = nil
		}
	case 767:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3836
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3842
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 769:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3846
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 770:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3850
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3856
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3860
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3864
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3868
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3872
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3876
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3880
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3884
		{
			yyVAL.expr = &NullVal{}
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3890
		{
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 780:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3894
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 781:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3898
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 782:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3903
		{
			yyVAL.exprs = nil
		}
	case 783:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3907
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3913
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 785:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3917
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3923
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3927
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 788:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3932
		{
			yyVAL.expr = nil
		}
	case 789:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3936
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3942
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3946
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 792:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3951
		{
			yyVAL.orderBy = nil
		}
	case 793:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3955
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3961
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 795:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3965
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 796:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3971
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 797:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3975
		{
			yyVAL.order = &Order{Expr: &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}, Direction: yyDollar[2].str}
		}
	case 798:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3980
		{
			yyVAL.str = AscScr
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3984
		{
			yyVAL.str = AscScr
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3988
		{
			yyVAL.str = DescScr
		}
	case 801:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3993
		{
			yyVAL.limit = nil
		}
	case 802:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3997
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 803:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4001
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 804:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4005
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 805:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4010
		{
			yyVAL.str = ""
		}
	case 806:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4014
		{
			yyVAL.str = ForUpdateStr
		}
	case 807:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4018
		{
			yyVAL.str = ShareModeStr
		}
	case 808:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4031
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4035
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 810:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4039
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 811:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4044
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 812:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4048
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 813:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:4052
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4059
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 815:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4063
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 816:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4067
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 817:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4071
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 818:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4076
		{
			yyVAL.setExprs = nil
		}
	case 819:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4080
		{
			yyVAL.setExprs = yyDollar[5].setExprs
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4086
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 821:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4090
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4096
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 823:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4100
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 824:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4106
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4112
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4122
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 827:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4126
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 828:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4132
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: NewStrVal([]byte("on"))}
		}
	case 829:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4136
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: NewStrVal([]byte("off"))}
		}
	case 830:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4140
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 831:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4144
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 833:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4151
		{
			yyVAL.bytes = []byte("charset")
		}
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4158
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4162
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4166
		{
			yyVAL.expr = &Default{}
		}
	case 840:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4175
		{
			yyVAL.byt = 0
		}
	case 841:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4177
		{
			yyVAL.byt = 1
		}
	case 842:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4180
		{
			yyVAL.byt = 0
		}
	case 843:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4182
		{
			yyVAL.byt = 1
		}
	case 844:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4185
		{
			yyVAL.str = ""
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4187
		{
			yyVAL.str = IgnoreStr
		}
	case 846:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4190
		{
			yyVAL.sqlVal = nil
		}
	case 847:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4192
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4196
		{
			yyVAL.empty = struct{}{}
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4198
		{
			yyVAL.empty = struct{}{}
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4200
		{
			yyVAL.empty = struct{}{}
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4202
		{
			yyVAL.empty = struct{}{}
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4204
		{
			yyVAL.empty = struct{}{}
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4206
		{
			yyVAL.empty = struct{}{}
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4208
		{
			yyVAL.empty = struct{}{}
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4210
		{
			yyVAL.empty = struct{}{}
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4212
		{
			yyVAL.empty = struct{}{}
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4216
		{
			yyVAL.empty = struct{}{}
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4218
		{
			yyVAL.empty = struct{}{}
		}
	case 859:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4221
		{
			yyVAL.empty = struct{}{}
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4223
		{
			yyVAL.empty = struct{}{}
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4225
		{
			yyVAL.empty = struct{}{}
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4229
		{
			yyVAL.str = UniqueStr
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4231
		{
			yyVAL.str = FulltextStr
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4233
		{
			yyVAL.str = SpatialStr
		}
	case 865:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4236
		{
			yyVAL.str = ""
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4238
		{
			yyVAL.str = yyDollar[1].str
		}
	case 867:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4241
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 868:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4243
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4247
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4251
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4258
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4264
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4268
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4275
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 877:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4280
		{
			yyVAL.str = string("")
		}
	case 878:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4282
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 879:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4285
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4287
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 881:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4290
		{
			yyVAL.EnclosedBy = nil
		}
	case 882:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4294
		{
			yyVAL.EnclosedBy = &EnclosedBy{Optionally: yyDollar[1].boolVal, Delim: NewStrVal(yyDollar[4].bytes)}
		}
	case 883:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4299
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4303
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 885:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4308
		{
			yyVAL.sqlVal = nil
		}
	case 886:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4312
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[3].bytes)
		}
	case 887:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4317
		{
			yyVAL.sqlVal = nil
		}
	case 888:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4321
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[3].bytes)
		}
	case 889:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4326
		{
			yyVAL.Fields = nil
		}
	case 890:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4330
		{
			yyVAL.Fields = &Fields{TerminatedBy: yyDollar[2].sqlVal, EnclosedBy: yyDollar[3].EnclosedBy, EscapedBy: yyDollar[4].sqlVal}
		}
	case 891:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4335
		{
			yyVAL.Lines = nil
		}
	case 892:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4339
		{
			yyVAL.Lines = &Lines{StartingBy: yyDollar[2].sqlVal, TerminatedBy: yyDollar[3].sqlVal}
		}
	case 893:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4344
		{
			yyVAL.sqlVal = nil
		}
	case 894:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4348
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[3].bytes)
		}
	case 1262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4745
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4754
		{
			decNesting(yylex)
		}
	case 1264:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4759
		{
			skipToEnd(yylex)
		}
	case 1265:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4764
		{
			skipToEnd(yylex)
		}
	case 1266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4768
		{
			skipToEnd(yylex)
		}
	case 1267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4772
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
