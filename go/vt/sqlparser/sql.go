// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func yyPosition(yylex interface{}) int {
	return yylex.(*Tokenizer).Position
}

func yyOldPosition(yylex interface{}) int {
	return yylex.(*Tokenizer).OldPosition
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:61
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	int                   int
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	statements            Statements
	partitions            Partitions
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	joinCondition         JoinCondition
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	asOf                  *AsOf
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	sqlVal                *SQLVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	setExprs              SetExprs
	setExpr               *SetExpr
	colIdent              ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	TableSpec             *TableSpec
	columnType            ColumnType
	columnOrder           *ColumnOrder
	triggerOrder          *TriggerOrder
	colKeyOpt             ColumnKeyOption
	optVal                Expr
	LengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexInfo             *IndexInfo
	indexOption           *IndexOption
	indexOptions          []*IndexOption
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	constraintDefinition  *ConstraintDefinition
	constraintInfo        ConstraintInfo
	ReferenceAction       ReferenceAction
	partDefs              []*PartitionDefinition
	partDef               *PartitionDefinition
	partSpec              *PartitionSpec
	showFilter            *ShowFilter
	over                  *Over
	caseStatementCases    []CaseStatementCase
	caseStatementCase     CaseStatementCase
	ifStatementConditions []IfStatementCondition
	ifStatementCondition  IfStatementCondition
	signalInfo            SignalInfo
	signalInfos           []SignalInfo
	procedureParam        ProcedureParam
	procedureParams       []ProcedureParam
	characteristic        Characteristic
	characteristics       []Characteristic
	Fields                *Fields
	Lines                 *Lines
	EnclosedBy            *EnclosedBy
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const CALL = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const OF = 57376
const OUTFILE = 57377
const DATA = 57378
const LOAD = 57379
const LINES = 57380
const TERMINATED = 57381
const ESCAPED = 57382
const ENCLOSED = 57383
const OPTIONALLY = 57384
const STARTING = 57385
const UNIQUE = 57386
const KEY = 57387
const SYSTEM_TIME = 57388
const VALUES = 57389
const LAST_INSERT_ID = 57390
const NEXT = 57391
const VALUE = 57392
const SHARE = 57393
const MODE = 57394
const SQL_NO_CACHE = 57395
const SQL_CACHE = 57396
const JOIN = 57397
const STRAIGHT_JOIN = 57398
const LEFT = 57399
const RIGHT = 57400
const INNER = 57401
const OUTER = 57402
const CROSS = 57403
const NATURAL = 57404
const USE = 57405
const FORCE = 57406
const ON = 57407
const USING = 57408
const ID = 57409
const HEX = 57410
const STRING = 57411
const INTEGRAL = 57412
const FLOAT = 57413
const HEXNUM = 57414
const VALUE_ARG = 57415
const LIST_ARG = 57416
const COMMENT = 57417
const COMMENT_KEYWORD = 57418
const BIT_LITERAL = 57419
const NULL = 57420
const TRUE = 57421
const FALSE = 57422
const OFF = 57423
const OR = 57424
const AND = 57425
const NOT = 57426
const BETWEEN = 57427
const CASE = 57428
const WHEN = 57429
const THEN = 57430
const ELSE = 57431
const ELSEIF = 57432
const END = 57433
const LE = 57434
const GE = 57435
const NE = 57436
const NULL_SAFE_EQUAL = 57437
const IS = 57438
const LIKE = 57439
const REGEXP = 57440
const IN = 57441
const SHIFT_LEFT = 57442
const SHIFT_RIGHT = 57443
const DIV = 57444
const MOD = 57445
const UNARY = 57446
const COLLATE = 57447
const BINARY = 57448
const UNDERSCORE_BINARY = 57449
const UNDERSCORE_UTF8MB4 = 57450
const INTERVAL = 57451
const JSON_EXTRACT_OP = 57452
const JSON_UNQUOTE_EXTRACT_OP = 57453
const CREATE = 57454
const ALTER = 57455
const DROP = 57456
const RENAME = 57457
const ANALYZE = 57458
const ADD = 57459
const FLUSH = 57460
const MODIFY = 57461
const CHANGE = 57462
const SCHEMA = 57463
const TABLE = 57464
const INDEX = 57465
const INDEXES = 57466
const VIEW = 57467
const TO = 57468
const IGNORE = 57469
const IF = 57470
const PRIMARY = 57471
const COLUMN = 57472
const SPATIAL = 57473
const FULLTEXT = 57474
const KEY_BLOCK_SIZE = 57475
const CHECK = 57476
const ACTION = 57477
const CASCADE = 57478
const CONSTRAINT = 57479
const FOREIGN = 57480
const NO = 57481
const REFERENCES = 57482
const RESTRICT = 57483
const FIRST = 57484
const AFTER = 57485
const SHOW = 57486
const DESCRIBE = 57487
const EXPLAIN = 57488
const DATE = 57489
const ESCAPE = 57490
const REPAIR = 57491
const OPTIMIZE = 57492
const TRUNCATE = 57493
const FORMAT = 57494
const MAXVALUE = 57495
const PARTITION = 57496
const REORGANIZE = 57497
const LESS = 57498
const THAN = 57499
const PROCEDURE = 57500
const TRIGGER = 57501
const TRIGGERS = 57502
const FUNCTION = 57503
const STATUS = 57504
const VARIABLES = 57505
const WARNINGS = 57506
const SEQUENCE = 57507
const EACH = 57508
const ROW = 57509
const BEFORE = 57510
const FOLLOWS = 57511
const PRECEDES = 57512
const DEFINER = 57513
const INVOKER = 57514
const INOUT = 57515
const OUT = 57516
const DETERMINISTIC = 57517
const CONTAINS = 57518
const READS = 57519
const MODIFIES = 57520
const SQL = 57521
const SECURITY = 57522
const CLASS_ORIGIN = 57523
const SUBCLASS_ORIGIN = 57524
const MESSAGE_TEXT = 57525
const MYSQL_ERRNO = 57526
const CONSTRAINT_CATALOG = 57527
const CONSTRAINT_SCHEMA = 57528
const CONSTRAINT_NAME = 57529
const CATALOG_NAME = 57530
const SCHEMA_NAME = 57531
const TABLE_NAME = 57532
const COLUMN_NAME = 57533
const CURSOR_NAME = 57534
const SIGNAL = 57535
const SQLSTATE = 57536
const BEGIN = 57537
const START = 57538
const TRANSACTION = 57539
const COMMIT = 57540
const ROLLBACK = 57541
const BIT = 57542
const TINYINT = 57543
const SMALLINT = 57544
const MEDIUMINT = 57545
const INT = 57546
const INTEGER = 57547
const BIGINT = 57548
const INTNUM = 57549
const REAL = 57550
const DOUBLE = 57551
const FLOAT_TYPE = 57552
const DECIMAL = 57553
const NUMERIC = 57554
const DEC = 57555
const FIXED = 57556
const PRECISION = 57557
const TIME = 57558
const TIMESTAMP = 57559
const DATETIME = 57560
const YEAR = 57561
const CHAR = 57562
const VARCHAR = 57563
const BOOL = 57564
const CHARACTER = 57565
const VARBINARY = 57566
const NCHAR = 57567
const NVARCHAR = 57568
const NATIONAL = 57569
const VARYING = 57570
const TEXT = 57571
const TINYTEXT = 57572
const MEDIUMTEXT = 57573
const LONGTEXT = 57574
const LONG = 57575
const BLOB = 57576
const TINYBLOB = 57577
const MEDIUMBLOB = 57578
const LONGBLOB = 57579
const JSON = 57580
const ENUM = 57581
const GEOMETRY = 57582
const POINT = 57583
const LINESTRING = 57584
const POLYGON = 57585
const GEOMETRYCOLLECTION = 57586
const MULTIPOINT = 57587
const MULTILINESTRING = 57588
const MULTIPOLYGON = 57589
const NULLX = 57590
const AUTO_INCREMENT = 57591
const APPROXNUM = 57592
const SIGNED = 57593
const UNSIGNED = 57594
const ZEROFILL = 57595
const LOCAL = 57596
const COLLATION = 57597
const DATABASES = 57598
const SCHEMAS = 57599
const TABLES = 57600
const FULL = 57601
const PROCESSLIST = 57602
const COLUMNS = 57603
const FIELDS = 57604
const ENGINES = 57605
const PLUGINS = 57606
const NAMES = 57607
const CHARSET = 57608
const GLOBAL = 57609
const SESSION = 57610
const ISOLATION = 57611
const LEVEL = 57612
const READ = 57613
const WRITE = 57614
const ONLY = 57615
const REPEATABLE = 57616
const COMMITTED = 57617
const UNCOMMITTED = 57618
const SERIALIZABLE = 57619
const CURRENT_TIMESTAMP = 57620
const DATABASE = 57621
const CURRENT_DATE = 57622
const CURRENT_USER = 57623
const CURRENT_TIME = 57624
const LOCALTIME = 57625
const LOCALTIMESTAMP = 57626
const UTC_DATE = 57627
const UTC_TIME = 57628
const UTC_TIMESTAMP = 57629
const REPLACE = 57630
const CONVERT = 57631
const CAST = 57632
const SUBSTR = 57633
const SUBSTRING = 57634
const GROUP_CONCAT = 57635
const SEPARATOR = 57636
const TIMESTAMPADD = 57637
const TIMESTAMPDIFF = 57638
const OVER = 57639
const WINDOW = 57640
const GROUPING = 57641
const GROUPS = 57642
const AVG = 57643
const BIT_AND = 57644
const BIT_OR = 57645
const BIT_XOR = 57646
const COUNT = 57647
const JSON_ARRAYAGG = 57648
const JSON_OBJECTAGG = 57649
const MAX = 57650
const MIN = 57651
const STDDEV_POP = 57652
const STDDEV = 57653
const STD = 57654
const STDDEV_SAMP = 57655
const SUM = 57656
const VAR_POP = 57657
const VARIANCE = 57658
const VAR_SAMP = 57659
const CUME_DIST = 57660
const DENSE_RANK = 57661
const FIRST_VALUE = 57662
const LAG = 57663
const LAST_VALUE = 57664
const LEAD = 57665
const NTH_VALUE = 57666
const NTILE = 57667
const ROW_NUMBER = 57668
const PERCENT_RANK = 57669
const RANK = 57670
const MATCH = 57671
const AGAINST = 57672
const BOOLEAN = 57673
const LANGUAGE = 57674
const WITH = 57675
const QUERY = 57676
const EXPANSION = 57677
const UNUSED = 57678
const ARRAY = 57679
const DESCRIPTION = 57680
const EMPTY = 57681
const EXCEPT = 57682
const JSON_TABLE = 57683
const LATERAL = 57684
const MEMBER = 57685
const RECURSIVE = 57686
const ACTIVE = 57687
const ADMIN = 57688
const BUCKETS = 57689
const CLONE = 57690
const COMPONENT = 57691
const DEFINITION = 57692
const ENFORCED = 57693
const EXCLUDE = 57694
const FOLLOWING = 57695
const GEOMCOLLECTION = 57696
const GET_MASTER_PUBLIC_KEY = 57697
const HISTOGRAM = 57698
const HISTORY = 57699
const INACTIVE = 57700
const INVISIBLE = 57701
const LOCKED = 57702
const MASTER_COMPRESSION_ALGORITHMS = 57703
const MASTER_PUBLIC_KEY_PATH = 57704
const MASTER_TLS_CIPHERSUITES = 57705
const MASTER_ZSTD_COMPRESSION_LEVEL = 57706
const NESTED = 57707
const NETWORK_NAMESPACE = 57708
const NOWAIT = 57709
const NULLS = 57710
const OJ = 57711
const OLD = 57712
const OPTIONAL = 57713
const ORDINALITY = 57714
const ORGANIZATION = 57715
const OTHERS = 57716
const PATH = 57717
const PERSIST = 57718
const PERSIST_ONLY = 57719
const PRECEDING = 57720
const PRIVILEGE_CHECKS_USER = 57721
const PROCESS = 57722
const RANDOM = 57723
const REFERENCE = 57724
const REQUIRE_ROW_FORMAT = 57725
const RESOURCE = 57726
const RESPECT = 57727
const RESTART = 57728
const RETAIN = 57729
const REUSE = 57730
const ROLE = 57731
const SECONDARY = 57732
const SECONDARY_ENGINE = 57733
const SECONDARY_LOAD = 57734
const SECONDARY_UNLOAD = 57735
const SKIP = 57736
const SRID = 57737
const THREAD_PRIORITY = 57738
const TIES = 57739
const UNBOUNDED = 57740
const VCPU = 57741
const VISIBLE = 57742
const SYSTEM = 57743
const INFILE = 57744

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CALL",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"OF",
	"OUTFILE",
	"DATA",
	"LOAD",
	"LINES",
	"TERMINATED",
	"ESCAPED",
	"ENCLOSED",
	"OPTIONALLY",
	"STARTING",
	"UNIQUE",
	"KEY",
	"SYSTEM_TIME",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"ELSEIF",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"MODIFY",
	"CHANGE",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"INDEXES",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"FIRST",
	"AFTER",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"FORMAT",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TRIGGERS",
	"FUNCTION",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"EACH",
	"ROW",
	"BEFORE",
	"FOLLOWS",
	"PRECEDES",
	"DEFINER",
	"INVOKER",
	"INOUT",
	"OUT",
	"DETERMINISTIC",
	"CONTAINS",
	"READS",
	"MODIFIES",
	"SQL",
	"SECURITY",
	"CLASS_ORIGIN",
	"SUBCLASS_ORIGIN",
	"MESSAGE_TEXT",
	"MYSQL_ERRNO",
	"CONSTRAINT_CATALOG",
	"CONSTRAINT_SCHEMA",
	"CONSTRAINT_NAME",
	"CATALOG_NAME",
	"SCHEMA_NAME",
	"TABLE_NAME",
	"COLUMN_NAME",
	"CURSOR_NAME",
	"SIGNAL",
	"SQLSTATE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DEC",
	"FIXED",
	"PRECISION",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NATIONAL",
	"VARYING",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"LONG",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"LOCAL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"OVER",
	"WINDOW",
	"GROUPING",
	"GROUPS",
	"AVG",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"COUNT",
	"JSON_ARRAYAGG",
	"JSON_OBJECTAGG",
	"MAX",
	"MIN",
	"STDDEV_POP",
	"STDDEV",
	"STD",
	"STDDEV_SAMP",
	"SUM",
	"VAR_POP",
	"VARIANCE",
	"VAR_SAMP",
	"CUME_DIST",
	"DENSE_RANK",
	"FIRST_VALUE",
	"LAG",
	"LAST_VALUE",
	"LEAD",
	"NTH_VALUE",
	"NTILE",
	"ROW_NUMBER",
	"PERCENT_RANK",
	"RANK",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"DESCRIPTION",
	"EMPTY",
	"EXCEPT",
	"JSON_TABLE",
	"LATERAL",
	"MEMBER",
	"RECURSIVE",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"SYSTEM",
	"INFILE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 36,
	-2, 4,
	-1, 36,
	140, 841,
	-2, 108,
	-1, 43,
	179, 438,
	180, 438,
	-2, 428,
	-1, 50,
	1, 1240,
	420, 1240,
	-2, 458,
	-1, 380,
	126, 849,
	-2, 845,
	-1, 381,
	126, 850,
	-2, 846,
	-1, 482,
	96, 1164,
	126, 1164,
	-2, 72,
	-1, 483,
	96, 1066,
	126, 1066,
	-2, 73,
	-1, 488,
	96, 1022,
	126, 1022,
	-2, 808,
	-1, 490,
	96, 1104,
	126, 1104,
	-2, 810,
	-1, 690,
	5, 36,
	-2, 452,
	-1, 694,
	5, 36,
	-2, 451,
	-1, 912,
	1, 510,
	5, 510,
	12, 510,
	13, 510,
	14, 510,
	15, 510,
	17, 510,
	19, 510,
	30, 510,
	31, 510,
	55, 510,
	56, 510,
	57, 510,
	58, 510,
	59, 510,
	61, 510,
	62, 510,
	65, 510,
	66, 510,
	68, 510,
	69, 510,
	420, 510,
	-2, 537,
	-1, 915,
	66, 53,
	68, 53,
	-2, 57,
	-1, 1098,
	126, 852,
	-2, 848,
	-1, 1260,
	67, 311,
	-2, 989,
	-1, 1263,
	67, 307,
	70, 307,
	-2, 924,
	-1, 1264,
	67, 308,
	70, 308,
	-2, 934,
	-1, 1340,
	67, 371,
	70, 371,
	-2, 344,
	-1, 1383,
	5, 37,
	-2, 603,
	-1, 1444,
	5, 36,
	-2, 785,
	-1, 1539,
	5, 36,
	-2, 74,
	-1, 1683,
	1, 558,
	5, 558,
	12, 558,
	13, 558,
	14, 558,
	15, 558,
	17, 558,
	19, 558,
	30, 558,
	31, 558,
	55, 558,
	56, 558,
	57, 558,
	58, 558,
	59, 558,
	61, 558,
	62, 558,
	65, 558,
	66, 558,
	68, 558,
	69, 558,
	420, 558,
	-2, 537,
	-1, 1799,
	5, 37,
	-2, 786,
	-1, 1829,
	5, 36,
	-2, 74,
	-1, 1887,
	5, 36,
	-2, 788,
	-1, 1927,
	41, 859,
	-2, 857,
	-1, 1974,
	5, 36,
	-2, 161,
	-1, 2026,
	5, 37,
	-2, 789,
}

const yyPrivate = 57344

const yyLast = 23121

var yyAct = [...]int{

	414, 59, 2036, 2108, 2139, 2118, 1901, 2037, 2062, 2109,
	1812, 2030, 2016, 1305, 1977, 7, 1976, 6, 1975, 5,
	1978, 8, 1944, 1223, 385, 1696, 1927, 1865, 1303, 1592,
	1759, 70, 478, 1216, 413, 1073, 1214, 1663, 1850, 1494,
	1265, 1833, 1368, 1697, 837, 940, 2031, 359, 678, 1218,
	1257, 1547, 1664, 372, 1741, 398, 1248, 1210, 1470, 1660,
	59, 1247, 1670, 1261, 91, 1674, 1645, 1611, 1254, 1123,
	1212, 1136, 1331, 364, 1017, 1162, 383, 928, 909, 1297,
	1201, 1570, 1154, 1031, 1100, 1531, 709, 1194, 1293, 1038,
	908, 1046, 715, 927, 481, 1569, 759, 368, 476, 917,
	635, 2161, 2157, 493, 473, 484, 2147, 2130, 2128, 2113,
	2104, 1281, 2065, 69, 1064, 2121, 1242, 2055, 496, 74,
	2107, 2023, 2092, 853, 1954, 802, 801, 811, 812, 804,
	805, 806, 807, 808, 809, 810, 803, 854, 1834, 813,
	2054, 1628, 1413, 1784, 634, 1691, 1836, 1692, 1693, 344,
	76, 77, 78, 79, 80, 427, 1236, 433, 435, 434,
	431, 432, 430, 429, 428, 1479, 348, 662, 1478, 1237,
	1238, 1480, 436, 437, 929, 347, 930, 60, 32, 33,
	1157, 704, 680, 1514, 29, 2022, 60, 32, 33, 637,
	659, 640, 681, 682, 101, 97, 98, 1267, 99, 34,
	1269, 345, 346, 1282, 1269, 349, 1273, 1275, 1287, 1274,
	1282, 1775, 750, 1773, 1872, 1839, 358, 351, 381, 1924,
	1923, 1974, 3, 1294, 1922, 1612, 1921, 1920, 378, 1918,
	93, 103, 102, 1919, 1312, 661, 665, 2001, 2002, 667,
	1548, 2059, 2060, 674, 2032, 67, 1972, 675, 676, 673,
	2106, 1837, 1838, 1840, 1841, 1842, 639, 638, 2091, 1311,
	108, 2017, 1594, 108, 1195, 1851, 1852, 1614, 657, 108,
	1970, 86, 663, 666, 494, 664, 1549, 1700, 341, 2153,
	683, 354, 684, 681, 682, 1048, 1049, 1050, 1051, 1052,
	1053, 1054, 1055, 1056, 1057, 1058, 1059, 1574, 108, 2162,
	1492, 108, 498, 1902, 108, 2159, 2148, 93, 1219, 1221,
	2131, 636, 645, 998, 342, 108, 1904, 498, 2004, 658,
	71, 658, 658, 108, 88, 90, 357, 1861, 85, 658,
	356, 1616, 357, 658, 95, 94, 1620, 1552, 1615, 1007,
	1613, 59, 59, 1469, 1468, 1618, 1467, 632, 1567, 707,
	315, 96, 100, 1860, 1962, 691, 1802, 693, 1617, 692,
	1550, 1551, 1766, 1394, 1589, 59, 2143, 1483, 1955, 387,
	1475, 1619, 1621, 1386, 92, 825, 826, 1372, 1521, 1071,
	822, 2100, 1272, 824, 1282, 717, 1492, 1903, 1296, 1220,
	936, 1492, 923, 660, 746, 1491, 793, 1391, 763, 653,
	1492, 1578, 1574, 1243, 803, 813, 1575, 813, 1835, 1582,
	1584, 95, 94, 835, 1232, 839, 840, 841, 842, 843,
	844, 845, 846, 847, 848, 849, 1579, 852, 855, 855,
	855, 861, 855, 855, 861, 855, 861, 870, 871, 872,
	873, 874, 875, 876, 877, 878, 879, 880, 881, 882,
	883, 884, 885, 886, 887, 888, 889, 890, 891, 892,
	893, 894, 895, 896, 897, 898, 899, 900, 901, 902,
	903, 2021, 913, 1859, 61, 1506, 1789, 1716, 1492, 825,
	826, 1491, 87, 61, 1588, 748, 1491, 1068, 1585, 2141,
	1511, 1510, 2142, 758, 2140, 1491, 1039, 696, 697, 1321,
	671, 1578, 1574, 1495, 484, 1593, 1575, 1334, 1033, 1576,
	1577, 1507, 925, 825, 826, 806, 807, 808, 809, 810,
	803, 756, 685, 813, 83, 1512, 1579, 1504, 1107, 1717,
	757, 756, 931, 1505, 108, 705, 2063, 498, 758, 498,
	498, 1155, 907, 1105, 1106, 1104, 644, 498, 758, 695,
	641, 498, 856, 858, 860, 862, 864, 866, 867, 869,
	1630, 82, 690, 694, 2146, 2101, 857, 859, 1138, 863,
	865, 1000, 868, 1491, 921, 108, 753, 916, 804, 805,
	806, 807, 808, 809, 810, 803, 747, 1704, 813, 668,
	669, 1040, 1509, 762, 1322, 672, 1155, 677, 1402, 2040,
	1032, 688, 802, 801, 811, 812, 804, 805, 806, 807,
	808, 809, 810, 803, 687, 2028, 813, 827, 828, 829,
	830, 831, 832, 833, 834, 801, 811, 812, 804, 805,
	806, 807, 808, 809, 810, 803, 836, 355, 813, 1827,
	757, 756, 1389, 1826, 1388, 374, 647, 648, 649, 650,
	651, 2134, 2119, 2133, 706, 1536, 658, 658, 758, 2154,
	1332, 757, 756, 658, 658, 658, 811, 812, 804, 805,
	806, 807, 808, 809, 810, 803, 658, 658, 813, 758,
	2063, 1124, 2081, 1125, 2080, 1369, 1370, 1371, 1534, 108,
	108, 108, 802, 801, 811, 812, 804, 805, 806, 807,
	808, 809, 810, 803, 498, 1515, 813, 1074, 1075, 658,
	1070, 2155, 1508, 1390, 1211, 470, 471, 2089, 2088, 888,
	889, 890, 891, 892, 876, 877, 878, 893, 894, 879,
	880, 881, 887, 895, 882, 883, 884, 885, 886, 898,
	897, 896, 899, 900, 902, 901, 903, 1062, 1481, 1008,
	1482, 27, 823, 1076, 1219, 1221, 757, 756, 1034, 2068,
	1069, 1022, 1023, 2150, 757, 756, 700, 757, 756, 2046,
	1041, 2103, 1019, 67, 758, 757, 756, 757, 756, 757,
	756, 2079, 758, 1103, 763, 758, 2064, 1969, 699, 1917,
	1090, 1092, 1093, 758, 1077, 758, 1091, 758, 802, 801,
	811, 812, 804, 805, 806, 807, 808, 809, 810, 803,
	757, 756, 813, 1081, 1644, 1879, 1824, 1632, 1709, 1532,
	1338, 1323, 1060, 1740, 363, 59, 1742, 2078, 758, 1896,
	2093, 1101, 1818, 2090, 706, 1220, 1082, 1896, 2087, 1083,
	839, 912, 2050, 706, 1818, 2047, 1079, 1818, 1971, 924,
	1967, 498, 1935, 1351, 1896, 1963, 1929, 1094, 1495, 108,
	1931, 1896, 1907, 108, 1742, 1781, 108, 1350, 1096, 1857,
	1144, 1147, 108, 1756, 498, 498, 1752, 1156, 1896, 706,
	1911, 498, 498, 498, 108, 108, 108, 1818, 1817, 108,
	1804, 706, 1801, 706, 498, 498, 403, 402, 405, 406,
	407, 408, 1127, 1128, 1749, 404, 409, 1747, 1355, 1746,
	1734, 1733, 1098, 1732, 1213, 1559, 1043, 1349, 913, 1724,
	1723, 1910, 913, 1558, 1020, 1021, 108, 498, 1078, 712,
	716, 1024, 1025, 1026, 1720, 1721, 1720, 1719, 1384, 706,
	1598, 1471, 1488, 1319, 1035, 1036, 794, 1198, 706, 484,
	1168, 1318, 1170, 802, 801, 811, 812, 804, 805, 806,
	807, 808, 809, 810, 803, 29, 1126, 813, 1347, 1341,
	1342, 1044, 1340, 108, 1343, 1344, 1016, 1066, 1015, 762,
	1132, 1335, 1729, 838, 1097, 1132, 706, 1710, 1227, 1442,
	1014, 1013, 1229, 1005, 851, 1003, 1002, 1599, 1001, 919,
	658, 999, 658, 1225, 939, 938, 1443, 655, 352, 1353,
	1356, 1245, 1661, 1197, 1226, 924, 918, 1131, 1133, 1233,
	1234, 1230, 29, 1141, 1099, 1471, 67, 1108, 1109, 1110,
	1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120,
	1121, 1122, 1019, 1252, 71, 1797, 836, 1471, 1130, 71,
	2018, 1198, 919, 498, 920, 1098, 922, 1166, 1167, 29,
	1730, 1134, 1152, 1886, 1173, 1174, 1175, 1176, 1283, 1284,
	1285, 1286, 1299, 1300, 1301, 1302, 1722, 1484, 1348, 1295,
	1780, 1198, 1235, 67, 1158, 1384, 1407, 1406, 1333, 498,
	498, 1317, 918, 1072, 1006, 67, 717, 1132, 1373, 2057,
	1177, 1178, 1384, 924, 1346, 1182, 365, 920, 1185, 918,
	2048, 2039, 1933, 1190, 1828, 1203, 1206, 1207, 1208, 1204,
	67, 1205, 1209, 1269, 108, 1330, 1807, 1244, 1304, 1249,
	494, 1298, 108, 108, 1703, 836, 108, 108, 1294, 1101,
	108, 108, 108, 1487, 1352, 1313, 1245, 1675, 1676, 1203,
	1206, 1207, 1208, 1204, 1289, 1205, 1209, 498, 498, 1675,
	1676, 1085, 1288, 702, 1361, 1360, 1102, 67, 802, 801,
	811, 812, 804, 805, 806, 807, 808, 809, 810, 803,
	2125, 1378, 813, 2123, 2110, 1728, 1678, 1661, 1537, 1374,
	1098, 1354, 1010, 1457, 1681, 1445, 1446, 1680, 1458, 913,
	913, 913, 913, 913, 1455, 1459, 1381, 1207, 1208, 1456,
	1454, 1453, 369, 370, 1213, 2075, 1463, 108, 498, 2053,
	498, 1595, 484, 1357, 2074, 108, 108, 913, 1366, 108,
	1447, 1365, 1884, 1412, 1414, 1497, 1401, 751, 752, 1751,
	1420, 1421, 1422, 1423, 1708, 1707, 1489, 2006, 2009, 2045,
	2044, 1928, 1466, 2067, 1042, 1926, 108, 2000, 108, 108,
	1461, 1999, 1097, 353, 1562, 749, 1525, 1465, 1307, 937,
	1309, 838, 710, 698, 656, 1795, 1074, 1075, 1449, 1450,
	1308, 1452, 1864, 912, 711, 1337, 1473, 912, 1474, 1448,
	1460, 912, 1451, 1009, 1540, 751, 752, 1472, 1327, 1211,
	997, 1496, 366, 367, 1485, 1914, 59, 1380, 360, 2070,
	1364, 2069, 2042, 1476, 2010, 1383, 1385, 658, 1363, 658,
	658, 1387, 1883, 1490, 1493, 1087, 1088, 1393, 1867, 361,
	1396, 1397, 1398, 71, 1375, 1376, 1377, 1404, 1268, 1405,
	1866, 1760, 1408, 1409, 1471, 1410, 1411, 2127, 2126, 1415,
	1416, 1417, 1418, 1419, 1542, 1543, 1544, 75, 1395, 1392,
	1426, 1427, 1428, 1037, 1430, 1431, 754, 1433, 1434, 1435,
	1436, 2126, 1438, 1439, 1440, 1533, 2127, 1959, 1706, 1557,
	1067, 73, 1516, 1517, 49, 1535, 1988, 46, 68, 1523,
	1990, 19, 1, 1462, 1989, 18, 1991, 20, 1524, 1530,
	1526, 1527, 1528, 1529, 1571, 1583, 1587, 2043, 838, 1573,
	1561, 1565, 1142, 1143, 1636, 1560, 1444, 108, 108, 108,
	108, 108, 1600, 1581, 1566, 1564, 1597, 1992, 21, 108,
	2005, 1629, 108, 1987, 15, 1134, 108, 1580, 1249, 1590,
	1591, 1986, 14, 2007, 1666, 108, 59, 1925, 1604, 1603,
	1980, 10, 1993, 24, 1994, 25, 1608, 1847, 1623, 1622,
	1832, 1610, 1985, 13, 1982, 12, 498, 484, 1685, 1686,
	1687, 1981, 11, 1831, 1102, 1662, 1979, 9, 1665, 1546,
	1545, 1163, 1637, 1638, 1639, 1640, 1641, 701, 1063, 1568,
	1572, 1345, 2015, 1255, 1246, 492, 81, 1320, 670, 1684,
	1241, 1855, 1688, 323, 1253, 1098, 1672, 1502, 2008, 703,
	1501, 1498, 1513, 1266, 1500, 1499, 2003, 1679, 1503, 944,
	942, 943, 941, 498, 946, 945, 1682, 1539, 327, 479,
	1701, 1690, 932, 1702, 755, 498, 108, 498, 498, 1699,
	89, 50, 1858, 1695, 1586, 1339, 1694, 412, 84, 679,
	329, 821, 1362, 1726, 1727, 1477, 485, 2038, 1668, 2058,
	714, 1563, 1607, 1602, 1940, 1400, 850, 1153, 912, 912,
	912, 912, 912, 386, 1943, 1089, 401, 1097, 400, 399,
	396, 108, 397, 912, 1326, 1553, 1080, 1555, 1556, 1441,
	795, 498, 384, 376, 1731, 911, 912, 904, 1336, 913,
	1202, 1200, 1324, 1199, 1011, 1642, 1643, 474, 1606, 1787,
	1648, 1744, 1677, 1651, 1673, 910, 686, 1367, 1656, 340,
	1624, 1625, 1783, 1626, 1627, 1953, 1084, 31, 486, 1782,
	1713, 495, 498, 1711, 1712, 1633, 1634, 1745, 1358, 1359,
	1715, 716, 1762, 1763, 1736, 1755, 646, 1718, 802, 801,
	811, 812, 804, 805, 806, 807, 808, 809, 810, 803,
	72, 371, 813, 26, 498, 498, 17, 1667, 1788, 1761,
	689, 22, 16, 642, 1602, 1249, 35, 1249, 1738, 38,
	37, 1541, 498, 1310, 350, 1047, 1045, 2117, 2061, 1995,
	1984, 1983, 2095, 1683, 23, 2094, 1771, 1814, 1815, 4,
	362, 1382, 498, 498, 1805, 498, 498, 28, 2, 0,
	0, 0, 0, 0, 1820, 0, 0, 1810, 0, 0,
	1743, 0, 1796, 0, 1403, 0, 0, 0, 59, 0,
	0, 1748, 0, 0, 0, 1705, 1816, 0, 0, 0,
	0, 1811, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1485, 0, 0, 0, 0, 108, 0, 0, 0,
	0, 0, 1821, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 0, 1854, 0, 0, 0, 0, 1844, 1845,
	1846, 0, 1843, 0, 1764, 0, 108, 1848, 1853, 0,
	0, 1737, 1767, 0, 1862, 1849, 0, 1699, 1666, 0,
	0, 1888, 498, 1776, 1777, 108, 498, 0, 0, 1856,
	0, 1863, 0, 498, 0, 0, 1869, 108, 1893, 0,
	1868, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1822, 1823, 1665, 1825, 1765, 0, 0, 0, 0, 0,
	0, 0, 0, 1913, 0, 1915, 1894, 1798, 1799, 1800,
	1885, 1803, 0, 1892, 1912, 1906, 0, 0, 0, 0,
	0, 1895, 1905, 1809, 1900, 1939, 495, 0, 495, 495,
	0, 0, 0, 0, 1916, 713, 495, 0, 0, 0,
	495, 1871, 0, 0, 0, 1249, 0, 1666, 0, 59,
	1942, 1946, 0, 0, 1932, 1934, 0, 0, 0, 1947,
	0, 0, 1938, 0, 498, 498, 498, 1966, 0, 0,
	0, 0, 1948, 498, 0, 0, 59, 106, 0, 0,
	339, 1665, 498, 1973, 1960, 0, 106, 0, 1958, 1964,
	0, 0, 0, 1968, 0, 0, 0, 374, 0, 0,
	1908, 0, 1909, 0, 0, 0, 0, 108, 0, 1829,
	0, 0, 375, 0, 0, 477, 487, 1602, 106, 2012,
	0, 106, 0, 2013, 1878, 0, 0, 0, 912, 1882,
	0, 1631, 106, 0, 0, 2019, 0, 0, 0, 0,
	106, 0, 0, 0, 484, 498, 0, 2033, 0, 0,
	2024, 0, 2025, 1897, 0, 1898, 1899, 0, 0, 59,
	1930, 0, 0, 0, 0, 0, 0, 1873, 1874, 1875,
	1876, 1877, 1937, 0, 0, 1880, 1881, 0, 0, 0,
	498, 498, 1887, 498, 0, 0, 498, 486, 108, 0,
	108, 0, 2041, 933, 0, 0, 0, 498, 1966, 0,
	1689, 2052, 1946, 0, 0, 0, 0, 498, 0, 0,
	2066, 0, 0, 0, 1949, 1950, 1951, 1952, 0, 2071,
	0, 1956, 1957, 2073, 0, 59, 59, 2084, 2076, 0,
	2082, 0, 2077, 2086, 2072, 0, 0, 0, 0, 2011,
	498, 0, 59, 0, 2102, 0, 0, 0, 2014, 0,
	0, 0, 2099, 0, 2098, 0, 2097, 0, 2096, 0,
	0, 59, 2105, 2112, 59, 59, 2114, 2120, 2111, 0,
	1961, 0, 2086, 2124, 59, 498, 0, 59, 2122, 2132,
	0, 2086, 0, 2135, 0, 0, 0, 0, 0, 59,
	0, 59, 2144, 0, 2020, 59, 2086, 2149, 2086, 0,
	0, 0, 2026, 0, 0, 0, 0, 0, 59, 0,
	0, 59, 498, 2158, 0, 2086, 0, 0, 59, 0,
	0, 1757, 59, 0, 0, 2086, 0, 0, 0, 2086,
	0, 0, 0, 0, 0, 0, 0, 914, 0, 0,
	996, 498, 0, 0, 0, 0, 0, 0, 0, 108,
	0, 106, 0, 0, 0, 0, 2049, 0, 0, 0,
	0, 1785, 0, 495, 495, 2056, 0, 0, 0, 0,
	495, 495, 495, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 495, 495, 0, 0, 0, 343, 0,
	0, 0, 106, 0, 0, 838, 498, 0, 0, 0,
	0, 0, 1646, 1647, 1806, 1649, 1650, 1808, 1652, 1653,
	1654, 1655, 0, 1657, 1658, 1659, 495, 475, 498, 0,
	491, 0, 335, 633, 0, 0, 0, 498, 0, 0,
	0, 0, 0, 0, 643, 0, 498, 0, 0, 0,
	0, 0, 652, 0, 0, 0, 1270, 1271, 0, 1276,
	1277, 1278, 1279, 1280, 0, 0, 0, 0, 0, 332,
	0, 0, 0, 0, 0, 0, 0, 1290, 1291, 1292,
	0, 0, 0, 0, 0, 0, 0, 0, 2151, 2152,
	0, 0, 1135, 1140, 0, 0, 0, 1146, 1149, 1150,
	1151, 374, 1779, 0, 0, 0, 0, 0, 0, 0,
	0, 495, 0, 0, 0, 0, 106, 106, 106, 2137,
	0, 316, 0, 0, 1161, 487, 1164, 1165, 319, 0,
	0, 1169, 0, 1171, 1172, 0, 0, 0, 328, 333,
	334, 1179, 1180, 1181, 0, 1183, 1184, 0, 1186, 1187,
	1188, 1189, 1129, 1191, 1192, 1193, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1786, 0,
	486, 0, 0, 0, 325, 0, 0, 326, 0, 0,
	331, 0, 0, 0, 0, 0, 0, 0, 1159, 1160,
	802, 801, 811, 812, 804, 805, 806, 807, 808, 809,
	810, 803, 0, 0, 813, 1941, 1945, 802, 801, 811,
	812, 804, 805, 806, 807, 808, 809, 810, 803, 0,
	0, 813, 838, 0, 0, 0, 0, 1790, 1791, 0,
	0, 0, 1778, 1792, 0, 0, 1793, 0, 0, 317,
	0, 1794, 486, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 495, 0, 495, 495, 0, 0,
	0, 0, 0, 654, 0, 0, 0, 0, 0, 0,
	0, 330, 320, 321, 0, 338, 0, 0, 0, 322,
	324, 0, 318, 337, 336, 0, 106, 0, 0, 0,
	106, 0, 0, 106, 0, 0, 0, 0, 0, 1018,
	0, 0, 0, 0, 708, 0, 0, 0, 0, 0,
	0, 106, 106, 106, 0, 0, 106, 495, 0, 495,
	802, 801, 811, 812, 804, 805, 806, 807, 808, 809,
	810, 803, 0, 0, 813, 2034, 2035, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 29, 30, 60, 32,
	33, 0, 0, 106, 0, 0, 0, 1945, 0, 0,
	57, 0, 0, 0, 0, 0, 66, 0, 0, 0,
	34, 53, 54, 0, 0, 0, 0, 58, 0, 0,
	0, 1518, 1519, 1520, 1522, 0, 0, 0, 0, 495,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 0, 2083, 44, 1399, 0, 0, 67, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 906, 0,
	915, 0, 1605, 0, 0, 0, 0, 0, 0, 1424,
	1425, 0, 0, 0, 1429, 0, 0, 1432, 0, 1018,
	0, 0, 1437, 802, 801, 811, 812, 804, 805, 806,
	807, 808, 809, 810, 803, 0, 0, 813, 2136, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 36,
	62, 40, 39, 42, 0, 55, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1139, 1139, 0, 0,
	0, 1139, 1139, 1139, 1139, 0, 0, 0, 487, 0,
	0, 43, 65, 64, 0, 0, 51, 52, 41, 0,
	0, 0, 0, 0, 0, 486, 0, 0, 1139, 1139,
	1139, 1139, 0, 0, 1139, 1139, 1139, 1139, 1139, 0,
	0, 0, 0, 0, 0, 1139, 1139, 1139, 0, 1139,
	1139, 0, 1139, 1139, 1139, 1139, 0, 1139, 1139, 1139,
	56, 106, 45, 63, 0, 47, 48, 0, 0, 106,
	1222, 0, 0, 106, 106, 495, 0, 106, 1231, 1018,
	487, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1018, 0, 0, 0, 0, 29, 1004, 60,
	32, 33, 475, 0, 0, 1012, 0, 0, 0, 0,
	0, 57, 0, 0, 0, 0, 0, 66, 0, 0,
	0, 34, 0, 1027, 1028, 1029, 0, 0, 1030, 0,
	0, 0, 1538, 0, 0, 0, 0, 0, 0, 0,
	1714, 0, 0, 0, 495, 0, 495, 495, 1379, 0,
	0, 0, 0, 0, 106, 61, 0, 0, 67, 0,
	0, 0, 106, 106, 0, 1065, 106, 0, 0, 802,
	801, 811, 812, 804, 805, 806, 807, 808, 809, 810,
	803, 1996, 0, 813, 2116, 2119, 2115, 0, 0, 0,
	0, 0, 0, 106, 0, 1328, 1329, 0, 0, 0,
	495, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1086, 0, 495, 0, 0, 0, 0, 0,
	36, 62, 40, 39, 42, 0, 0, 1018, 0, 0,
	0, 1768, 1769, 0, 1770, 0, 1997, 1772, 0, 1774,
	0, 1635, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 43, 65, 64, 0, 0, 0, 0, 41,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	486, 0, 0, 1669, 1671, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1139, 0, 0, 0,
	0, 1671, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 56, 0, 1998, 63, 0, 47, 48, 1139, 0,
	0, 495, 495, 0, 495, 1698, 0, 1819, 802, 801,
	811, 812, 804, 805, 806, 807, 808, 809, 810, 803,
	0, 0, 813, 1139, 1139, 0, 0, 0, 1139, 0,
	0, 1139, 0, 0, 0, 0, 1139, 0, 0, 0,
	0, 0, 0, 487, 106, 106, 106, 106, 106, 966,
	0, 0, 0, 1196, 0, 0, 1222, 0, 0, 106,
	0, 0, 0, 1222, 0, 0, 1228, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1750, 0, 0, 797, 1754, 800, 0, 0, 0,
	0, 0, 1758, 814, 815, 816, 817, 818, 819, 820,
	0, 798, 799, 796, 802, 801, 811, 812, 804, 805,
	806, 807, 808, 809, 810, 803, 0, 0, 813, 0,
	0, 953, 0, 0, 0, 0, 1306, 0, 0, 0,
	0, 0, 0, 0, 1314, 1315, 0, 0, 1316, 0,
	0, 0, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 967, 0, 1325, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1813, 1813, 1813, 0, 0, 106, 0,
	0, 0, 495, 0, 375, 0, 0, 0, 0, 1139,
	0, 1813, 0, 0, 0, 0, 0, 0, 0, 0,
	1139, 0, 1018, 0, 0, 0, 980, 983, 984, 985,
	986, 987, 988, 0, 989, 990, 991, 992, 993, 994,
	995, 0, 968, 969, 970, 971, 947, 951, 981, 948,
	954, 950, 952, 949, 0, 955, 956, 957, 958, 959,
	960, 961, 962, 963, 964, 965, 972, 973, 974, 975,
	976, 977, 978, 979, 495, 0, 0, 0, 487, 0,
	0, 0, 29, 0, 60, 32, 33, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 57, 0, 0, 0,
	0, 0, 66, 0, 0, 0, 34, 0, 0, 1889,
	1890, 0, 1891, 0, 0, 1813, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1698, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1698, 0, 0, 0,
	0, 0, 0, 67, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 982, 0, 0,
	0, 0, 0, 0, 0, 0, 1996, 0, 0, 1936,
	0, 2160, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 29, 0, 60, 32,
	33, 0, 0, 106, 1965, 36, 62, 40, 39, 42,
	57, 0, 0, 0, 0, 0, 66, 0, 0, 0,
	34, 1997, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 43, 65, 64,
	0, 1698, 0, 0, 41, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1554, 0, 67, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 486, 0, 0,
	2027, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1996, 0, 0, 0, 0, 2156, 56, 0, 1998, 63,
	0, 47, 48, 29, 0, 60, 32, 33, 0, 0,
	1596, 0, 0, 0, 0, 0, 0, 57, 0, 0,
	0, 0, 29, 66, 60, 32, 33, 34, 0, 36,
	62, 40, 39, 42, 0, 2051, 57, 0, 0, 0,
	0, 0, 66, 0, 0, 1997, 34, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1813, 0, 0,
	0, 43, 65, 64, 67, 0, 1698, 0, 41, 0,
	0, 0, 0, 0, 106, 1813, 0, 0, 0, 0,
	0, 0, 0, 67, 0, 0, 0, 1996, 0, 0,
	0, 61, 2145, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1996, 0, 375, 0,
	56, 2129, 1998, 63, 0, 47, 48, 0, 0, 29,
	0, 60, 32, 33, 0, 0, 36, 62, 40, 39,
	42, 0, 0, 57, 0, 0, 0, 0, 0, 66,
	0, 0, 1997, 34, 0, 36, 62, 40, 39, 42,
	0, 0, 0, 0, 0, 1222, 0, 1222, 43, 65,
	64, 1997, 0, 0, 0, 41, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 43, 65, 64,
	67, 0, 0, 0, 41, 1725, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1735, 0, 0, 1996, 0, 61, 0, 56, 2085, 1998,
	63, 0, 47, 48, 0, 1739, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 56, 0, 1998, 63,
	0, 47, 48, 0, 1753, 0, 0, 0, 0, 0,
	0, 0, 36, 62, 40, 39, 42, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1997, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 43, 65, 64, 0, 0, 0,
	0, 41, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 61, 0, 0, 487, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 0, 0,
	0, 61, 0, 56, 0, 1998, 63, 0, 47, 48,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 616, 596, 281, 554,
	619, 526, 543, 630, 544, 547, 585, 512, 566, 218,
	541, 513, 0, 530, 503, 537, 504, 527, 556, 152,
	525, 598, 569, 618, 182, 581, 1830, 144, 190, 188,
	0, 0, 0, 224, 279, 617, 562, 0, 625, 185,
	578, 302, 270, 203, 0, 0, 558, 605, 564, 594,
	553, 587, 519, 577, 620, 542, 583, 621, 0, 0,
	0, 497, 0, 1250, 1251, 0, 0, 0, 61, 0,
	134, 0, 580, 615, 539, 582, 584, 501, 579, 0,
	507, 514, 629, 611, 533, 534, 535, 1486, 0, 0,
	0, 0, 0, 0, 557, 565, 591, 550, 0, 0,
	0, 0, 0, 0, 0, 0, 531, 0, 575, 0,
	0, 0, 515, 508, 0, 0, 555, 0, 0, 0,
	518, 113, 532, 592, 0, 499, 162, 204, 124, 595,
	610, 552, 175, 308, 614, 549, 548, 238, 0, 275,
	165, 183, 128, 110, 122, 138, 164, 214, 247, 255,
	540, 500, 599, 528, 538, 145, 536, 249, 222, 297,
	0, 572, 228, 248, 186, 286, 240, 295, 296, 166,
	280, 305, 310, 267, 153, 0, 114, 0, 235, 148,
	179, 551, 586, 529, 142, 589, 576, 604, 266, 129,
	282, 202, 208, 139, 141, 140, 123, 261, 284, 133,
	143, 271, 276, 115, 278, 294, 135, 259, 117, 292,
	274, 200, 176, 177, 116, 0, 245, 151, 161, 147,
	217, 0, 160, 237, 289, 290, 146, 313, 125, 304,
	119, 126, 303, 211, 0, 210, 306, 285, 293, 201,
	194, 0, 118, 291, 199, 193, 181, 156, 168, 233,
	189, 234, 169, 206, 205, 207, 0, 505, 0, 272,
	300, 314, 191, 131, 524, 260, 283, 0, 2029, 132,
	159, 155, 232, 209, 127, 171, 269, 180, 187, 244,
	312, 221, 250, 136, 299, 268, 522, 523, 520, 0,
	521, 567, 568, 622, 623, 624, 593, 516, 0, 606,
	607, 0, 597, 612, 613, 588, 631, 545, 546, 506,
	509, 510, 511, 517, 559, 560, 571, 574, 602, 601,
	600, 603, 608, 627, 626, 628, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 570, 109, 120,
	184, 311, 242, 158, 301, 502, 150, 0, 0, 561,
	563, 573, 590, 111, 112, 121, 130, 137, 149, 154,
	157, 163, 167, 170, 172, 173, 174, 178, 192, 195,
	196, 197, 198, 212, 213, 215, 216, 219, 220, 223,
	225, 226, 227, 229, 230, 231, 236, 239, 241, 243,
	246, 251, 252, 253, 254, 256, 257, 258, 262, 263,
	264, 265, 273, 277, 287, 288, 298, 307, 309, 609,
	616, 596, 281, 554, 619, 526, 543, 630, 544, 547,
	585, 512, 566, 218, 541, 513, 0, 530, 503, 537,
	504, 527, 556, 152, 525, 598, 569, 618, 182, 581,
	0, 144, 190, 188, 0, 0, 0, 224, 279, 617,
	562, 0, 625, 185, 578, 302, 270, 203, 0, 0,
	558, 605, 564, 594, 553, 587, 519, 577, 620, 542,
	583, 621, 0, 0, 0, 497, 0, 1250, 1251, 0,
	0, 0, 0, 0, 134, 0, 580, 615, 539, 582,
	584, 501, 579, 0, 507, 514, 629, 611, 533, 534,
	535, 0, 0, 0, 0, 0, 0, 0, 557, 565,
	591, 550, 0, 0, 0, 0, 0, 0, 0, 0,
	531, 0, 575, 0, 0, 0, 515, 508, 0, 0,
	555, 0, 0, 0, 518, 113, 532, 592, 0, 499,
	162, 204, 124, 595, 610, 552, 175, 308, 614, 549,
	548, 238, 0, 275, 165, 183, 128, 110, 122, 138,
	164, 214, 247, 255, 540, 500, 599, 528, 538, 145,
	536, 249, 222, 297, 0, 572, 228, 248, 186, 286,
	240, 295, 296, 166, 280, 305, 310, 267, 153, 0,
	114, 0, 235, 148, 179, 551, 586, 529, 142, 589,
	576, 604, 266, 129, 282, 202, 208, 139, 141, 140,
	123, 261, 284, 133, 143, 271, 276, 115, 278, 294,
	135, 259, 117, 292, 274, 200, 176, 177, 116, 0,
	245, 151, 161, 147, 217, 0, 160, 237, 289, 290,
	146, 313, 125, 304, 119, 126, 303, 211, 0, 210,
	306, 285, 293, 201, 194, 0, 118, 291, 199, 193,
	181, 156, 168, 233, 189, 234, 169, 206, 205, 207,
	0, 505, 0, 272, 300, 314, 191, 131, 524, 260,
	283, 0, 0, 132, 159, 155, 232, 209, 127, 171,
	269, 180, 187, 244, 312, 221, 250, 136, 299, 268,
	522, 523, 520, 0, 521, 567, 568, 622, 623, 624,
	593, 516, 0, 606, 607, 0, 597, 612, 613, 588,
	631, 545, 546, 506, 509, 510, 511, 517, 559, 560,
	571, 574, 602, 601, 600, 603, 608, 627, 626, 628,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 570, 109, 120, 184, 311, 242, 158, 301, 502,
	150, 0, 0, 561, 563, 573, 590, 111, 112, 121,
	130, 137, 149, 154, 157, 163, 167, 170, 172, 173,
	174, 178, 192, 195, 196, 197, 198, 212, 213, 215,
	216, 219, 220, 223, 225, 226, 227, 229, 230, 231,
	236, 239, 241, 243, 246, 251, 252, 253, 254, 256,
	257, 258, 262, 263, 264, 265, 273, 277, 287, 288,
	298, 307, 309, 609, 616, 596, 281, 554, 619, 526,
	543, 630, 544, 547, 585, 512, 566, 218, 541, 513,
	0, 530, 503, 537, 504, 527, 556, 152, 525, 598,
	569, 618, 182, 581, 0, 144, 190, 188, 0, 0,
	0, 224, 279, 617, 562, 0, 625, 185, 578, 302,
	270, 203, 0, 0, 558, 605, 564, 594, 553, 587,
	519, 577, 620, 542, 583, 621, 0, 0, 0, 497,
	0, 0, 0, 0, 0, 0, 0, 0, 134, 0,
	580, 615, 539, 582, 584, 501, 579, 0, 507, 514,
	629, 611, 533, 534, 535, 0, 0, 0, 0, 0,
	0, 0, 557, 565, 591, 550, 0, 0, 0, 0,
	0, 0, 1870, 0, 531, 0, 575, 0, 0, 0,
	515, 508, 0, 0, 555, 0, 0, 0, 518, 113,
	532, 592, 0, 499, 162, 204, 124, 595, 610, 552,
	175, 308, 614, 549, 548, 238, 0, 275, 165, 183,
	128, 110, 122, 138, 164, 214, 247, 255, 540, 500,
	599, 528, 538, 145, 536, 249, 222, 297, 0, 572,
	228, 248, 186, 286, 240, 295, 296, 166, 280, 305,
	310, 267, 153, 0, 114, 0, 235, 148, 179, 551,
	586, 529, 142, 589, 576, 604, 266, 129, 282, 202,
	208, 139, 141, 140, 123, 261, 284, 133, 143, 271,
	276, 115, 278, 294, 135, 259, 117, 292, 274, 200,
	176, 177, 116, 0, 245, 151, 161, 147, 217, 0,
	160, 237, 289, 290, 146, 313, 125, 304, 119, 126,
	303, 211, 0, 210, 306, 285, 293, 201, 194, 0,
	118, 291, 199, 193, 181, 156, 168, 233, 189, 234,
	169, 206, 205, 207, 0, 505, 0, 272, 300, 314,
	191, 131, 524, 260, 283, 0, 0, 132, 159, 155,
	232, 209, 127, 171, 269, 180, 187, 244, 312, 221,
	250, 136, 299, 268, 522, 523, 520, 0, 521, 567,
	568, 622, 623, 624, 593, 516, 0, 606, 607, 0,
	597, 612, 613, 588, 631, 545, 546, 506, 509, 510,
	511, 517, 559, 560, 571, 574, 602, 601, 600, 603,
	608, 627, 626, 628, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 570, 109, 120, 184, 311,
	242, 158, 301, 502, 150, 0, 0, 561, 563, 573,
	590, 111, 112, 121, 130, 137, 149, 154, 157, 163,
	167, 170, 172, 173, 174, 178, 192, 195, 196, 197,
	198, 212, 213, 215, 216, 219, 220, 223, 225, 226,
	227, 229, 230, 231, 236, 239, 241, 243, 246, 251,
	252, 253, 254, 256, 257, 258, 262, 263, 264, 265,
	273, 277, 287, 288, 298, 307, 309, 609, 616, 596,
	281, 554, 619, 526, 543, 630, 544, 547, 585, 512,
	566, 218, 541, 513, 0, 530, 503, 537, 504, 527,
	556, 152, 525, 598, 569, 618, 182, 581, 0, 144,
	190, 188, 0, 0, 0, 224, 279, 617, 562, 0,
	625, 185, 578, 302, 270, 203, 0, 0, 558, 605,
	564, 594, 553, 587, 519, 577, 620, 542, 583, 621,
	0, 0, 0, 380, 0, 0, 0, 0, 0, 0,
	0, 0, 134, 0, 580, 615, 539, 582, 584, 501,
	579, 0, 507, 514, 629, 611, 533, 534, 535, 0,
	0, 0, 0, 0, 0, 0, 557, 565, 591, 550,
	0, 0, 0, 0, 0, 0, 1609, 0, 531, 0,
	575, 0, 0, 0, 515, 508, 0, 0, 555, 0,
	0, 0, 518, 113, 532, 592, 0, 499, 162, 204,
	124, 595, 610, 552, 175, 308, 614, 549, 548, 238,
	0, 275, 165, 183, 128, 110, 122, 138, 164, 214,
	247, 255, 540, 500, 599, 528, 538, 145, 536, 249,
	222, 297, 0, 572, 228, 248, 186, 286, 240, 295,
	296, 166, 280, 305, 310, 267, 153, 0, 114, 0,
	235, 148, 179, 551, 586, 529, 142, 589, 576, 604,
	266, 129, 282, 202, 208, 139, 141, 140, 123, 261,
	284, 133, 143, 271, 276, 115, 278, 294, 135, 259,
	117, 292, 274, 200, 176, 177, 116, 0, 245, 151,
	161, 147, 217, 0, 160, 237, 289, 290, 146, 313,
	125, 304, 119, 126, 303, 211, 0, 210, 306, 285,
	293, 201, 194, 0, 118, 291, 199, 193, 181, 156,
	168, 233, 189, 234, 169, 206, 205, 207, 0, 505,
	0, 272, 300, 314, 191, 131, 524, 260, 283, 0,
	0, 132, 159, 155, 232, 209, 127, 171, 269, 180,
	187, 244, 312, 221, 250, 136, 299, 268, 522, 523,
	520, 0, 521, 567, 568, 622, 623, 624, 593, 516,
	0, 606, 607, 0, 597, 612, 613, 588, 631, 545,
	546, 506, 509, 510, 511, 517, 559, 560, 571, 574,
	602, 601, 600, 603, 608, 627, 626, 628, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 570,
	109, 120, 184, 311, 242, 158, 301, 502, 150, 0,
	0, 561, 563, 573, 590, 111, 112, 121, 130, 137,
	149, 154, 157, 163, 167, 170, 172, 173, 174, 178,
	192, 195, 196, 197, 198, 212, 213, 215, 216, 219,
	220, 223, 225, 226, 227, 229, 230, 231, 236, 239,
	241, 243, 246, 251, 252, 253, 254, 256, 257, 258,
	262, 263, 264, 265, 273, 277, 287, 288, 298, 307,
	309, 609, 616, 596, 281, 554, 619, 526, 543, 630,
	544, 547, 585, 512, 566, 218, 541, 513, 0, 530,
	503, 537, 504, 527, 556, 152, 525, 598, 569, 618,
	182, 581, 0, 144, 190, 188, 0, 0, 0, 224,
	279, 617, 562, 0, 625, 185, 578, 302, 270, 203,
	0, 0, 558, 605, 564, 594, 553, 587, 519, 577,
	620, 542, 583, 621, 0, 0, 0, 497, 0, 0,
	0, 0, 0, 0, 0, 0, 134, 0, 580, 615,
	539, 582, 584, 501, 579, 0, 507, 514, 629, 611,
	533, 534, 535, 0, 0, 0, 0, 0, 0, 0,
	557, 565, 591, 550, 0, 0, 0, 0, 0, 0,
	1601, 0, 531, 0, 575, 0, 0, 0, 515, 508,
	0, 0, 555, 0, 0, 0, 518, 113, 532, 592,
	0, 499, 162, 204, 124, 595, 610, 552, 175, 308,
	614, 549, 548, 238, 0, 275, 165, 183, 128, 110,
	122, 138, 164, 214, 247, 255, 540, 500, 599, 528,
	538, 145, 536, 249, 222, 297, 0, 572, 228, 248,
	186, 286, 240, 295, 296, 166, 280, 305, 310, 267,
	153, 0, 114, 0, 235, 148, 179, 551, 586, 529,
	142, 589, 576, 604, 266, 129, 282, 202, 208, 139,
	141, 140, 123, 261, 284, 133, 143, 271, 276, 115,
	278, 294, 135, 259, 117, 292, 274, 200, 176, 177,
	116, 0, 245, 151, 161, 147, 217, 0, 160, 237,
	289, 290, 146, 313, 125, 304, 119, 126, 303, 211,
	0, 210, 306, 285, 293, 201, 194, 0, 118, 291,
	199, 193, 181, 156, 168, 233, 189, 234, 169, 206,
	205, 207, 0, 505, 0, 272, 300, 314, 191, 131,
	524, 260, 283, 0, 0, 132, 159, 155, 232, 209,
	127, 171, 269, 180, 187, 244, 312, 221, 250, 136,
	299, 268, 522, 523, 520, 0, 521, 567, 568, 622,
	623, 624, 593, 516, 0, 606, 607, 0, 597, 612,
	613, 588, 631, 545, 546, 506, 509, 510, 511, 517,
	559, 560, 571, 574, 602, 601, 600, 603, 608, 627,
	626, 628, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 570, 109, 120, 184, 311, 242, 158,
	301, 502, 150, 0, 0, 561, 563, 573, 590, 111,
	112, 121, 130, 137, 149, 154, 157, 163, 167, 170,
	172, 173, 174, 178, 192, 195, 196, 197, 198, 212,
	213, 215, 216, 219, 220, 223, 225, 226, 227, 229,
	230, 231, 236, 239, 241, 243, 246, 251, 252, 253,
	254, 256, 257, 258, 262, 263, 264, 265, 273, 277,
	287, 288, 298, 307, 309, 609, 616, 596, 281, 554,
	619, 526, 543, 630, 544, 547, 585, 512, 566, 218,
	541, 513, 0, 530, 503, 537, 504, 527, 556, 152,
	525, 598, 569, 618, 182, 581, 0, 144, 190, 188,
	0, 0, 0, 224, 279, 617, 562, 0, 625, 185,
	578, 302, 270, 203, 0, 0, 558, 605, 564, 594,
	553, 587, 519, 577, 620, 542, 583, 621, 67, 0,
	0, 497, 0, 0, 0, 0, 0, 0, 0, 0,
	134, 0, 580, 615, 539, 582, 584, 501, 579, 0,
	507, 514, 629, 611, 533, 534, 535, 0, 0, 0,
	0, 0, 0, 0, 557, 565, 591, 550, 0, 0,
	0, 0, 0, 0, 0, 0, 531, 0, 575, 0,
	0, 0, 515, 508, 0, 0, 555, 0, 0, 0,
	518, 113, 532, 592, 0, 499, 162, 204, 124, 595,
	610, 552, 175, 308, 614, 549, 548, 238, 0, 275,
	165, 183, 128, 110, 122, 138, 164, 214, 247, 255,
	540, 500, 599, 528, 538, 145, 536, 249, 222, 297,
	0, 572, 228, 248, 186, 286, 240, 295, 296, 166,
	280, 305, 310, 267, 153, 0, 114, 0, 235, 148,
	179, 551, 586, 529, 142, 589, 576, 604, 266, 129,
	282, 202, 208, 139, 141, 140, 123, 261, 284, 133,
	143, 271, 276, 115, 278, 294, 135, 259, 117, 292,
	274, 200, 176, 177, 116, 0, 245, 151, 161, 147,
	217, 0, 160, 237, 289, 290, 146, 313, 125, 304,
	119, 126, 303, 211, 0, 210, 306, 285, 293, 201,
	194, 0, 118, 291, 199, 193, 181, 156, 168, 233,
	189, 234, 169, 206, 205, 207, 0, 505, 0, 272,
	300, 314, 191, 131, 524, 260, 283, 0, 0, 132,
	159, 155, 232, 209, 127, 171, 269, 180, 187, 244,
	312, 221, 250, 136, 299, 268, 522, 523, 520, 0,
	521, 567, 568, 622, 623, 624, 593, 516, 0, 606,
	607, 0, 597, 612, 613, 588, 631, 545, 546, 506,
	509, 510, 511, 517, 559, 560, 571, 574, 602, 601,
	600, 603, 608, 627, 626, 628, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 570, 109, 120,
	184, 311, 242, 158, 301, 502, 150, 0, 0, 561,
	563, 573, 590, 111, 112, 121, 130, 137, 149, 154,
	157, 163, 167, 170, 172, 173, 174, 178, 192, 195,
	196, 197, 198, 212, 213, 215, 216, 219, 220, 223,
	225, 226, 227, 229, 230, 231, 236, 239, 241, 243,
	246, 251, 252, 253, 254, 256, 257, 258, 262, 263,
	264, 265, 273, 277, 287, 288, 298, 307, 309, 609,
	616, 596, 281, 554, 619, 526, 543, 630, 544, 547,
	585, 512, 566, 218, 541, 513, 0, 530, 503, 537,
	504, 527, 556, 152, 525, 598, 569, 618, 182, 581,
	0, 144, 190, 188, 0, 0, 0, 224, 279, 617,
	562, 0, 625, 185, 578, 302, 270, 203, 0, 0,
	558, 605, 564, 594, 553, 587, 519, 577, 620, 542,
	583, 621, 0, 0, 0, 107, 0, 0, 0, 0,
	0, 0, 0, 0, 134, 0, 580, 615, 539, 582,
	584, 501, 579, 0, 507, 514, 629, 611, 533, 534,
	535, 0, 0, 0, 0, 0, 0, 0, 557, 565,
	591, 550, 0, 0, 0, 0, 0, 0, 1232, 0,
	531, 0, 575, 0, 0, 0, 515, 508, 0, 0,
	555, 0, 0, 0, 518, 113, 532, 592, 0, 499,
	162, 204, 124, 595, 610, 552, 175, 308, 614, 549,
	548, 238, 0, 275, 165, 183, 128, 110, 122, 138,
	164, 214, 247, 255, 540, 500, 599, 528, 538, 145,
	536, 249, 222, 297, 0, 572, 228, 248, 186, 286,
	240, 295, 296, 166, 280, 305, 310, 267, 153, 0,
	114, 0, 235, 148, 179, 551, 586, 529, 142, 589,
	576, 604, 266, 129, 282, 202, 208, 139, 141, 140,
	123, 261, 284, 133, 143, 271, 276, 115, 278, 294,
	135, 259, 117, 292, 274, 200, 176, 177, 116, 0,
	245, 151, 161, 147, 217, 0, 160, 237, 289, 290,
	146, 313, 125, 304, 119, 126, 303, 211, 0, 210,
	306, 285, 293, 201, 194, 0, 118, 291, 199, 193,
	181, 156, 168, 233, 189, 234, 169, 206, 205, 207,
	0, 505, 0, 272, 300, 314, 191, 131, 524, 260,
	283, 0, 0, 132, 159, 155, 232, 209, 127, 171,
	269, 180, 187, 244, 312, 221, 250, 136, 299, 268,
	522, 523, 520, 0, 521, 567, 568, 622, 623, 624,
	593, 516, 0, 606, 607, 0, 597, 612, 613, 588,
	631, 545, 546, 506, 509, 510, 511, 517, 559, 560,
	571, 574, 602, 601, 600, 603, 608, 627, 626, 628,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 570, 109, 120, 184, 311, 242, 158, 301, 502,
	150, 0, 0, 561, 563, 573, 590, 111, 112, 121,
	130, 137, 149, 154, 157, 163, 167, 170, 172, 173,
	174, 178, 192, 195, 196, 197, 198, 212, 213, 215,
	216, 219, 220, 223, 225, 226, 227, 229, 230, 231,
	236, 239, 241, 243, 246, 251, 252, 253, 254, 256,
	257, 258, 262, 263, 264, 265, 273, 277, 287, 288,
	298, 307, 309, 609, 616, 596, 281, 554, 619, 526,
	543, 630, 544, 547, 585, 512, 566, 218, 541, 513,
	0, 530, 503, 537, 504, 527, 556, 152, 525, 598,
	569, 618, 182, 581, 0, 144, 190, 188, 0, 0,
	0, 224, 279, 617, 562, 0, 625, 185, 578, 302,
	270, 203, 0, 0, 558, 605, 564, 594, 553, 587,
	519, 577, 620, 542, 583, 621, 0, 0, 0, 380,
	0, 0, 0, 0, 0, 0, 0, 0, 134, 0,
	580, 615, 539, 582, 584, 501, 579, 0, 507, 514,
	629, 611, 533, 534, 535, 0, 0, 0, 0, 0,
	0, 0, 557, 565, 591, 550, 0, 0, 0, 0,
	0, 0, 1095, 0, 531, 0, 575, 0, 0, 0,
	515, 508, 0, 0, 555, 0, 0, 0, 518, 113,
	532, 592, 0, 499, 162, 204, 124, 595, 610, 552,
	175, 308, 614, 549, 548, 238, 0, 275, 165, 183,
	128, 110, 122, 138, 164, 214, 247, 255, 540, 500,
	599, 528, 538, 145, 536, 249, 222, 297, 0, 572,
	228, 248, 186, 286, 240, 295, 296, 166, 280, 305,
	310, 267, 153, 0, 114, 0, 235, 148, 179, 551,
	586, 529, 142, 589, 576, 604, 266, 129, 282, 202,
	208, 139, 141, 140, 123, 261, 284, 133, 143, 271,
	276, 115, 278, 294, 135, 259, 117, 292, 274, 200,
	176, 177, 116, 0, 245, 151, 161, 147, 217, 0,
	160, 237, 289, 290, 146, 313, 125, 304, 119, 126,
	303, 211, 0, 210, 306, 285, 293, 201, 194, 0,
	118, 291, 199, 193, 181, 156, 168, 233, 189, 234,
	169, 206, 205, 207, 0, 505, 0, 272, 300, 314,
	191, 131, 524, 260, 283, 0, 0, 132, 159, 155,
	232, 209, 127, 171, 269, 180, 187, 244, 312, 221,
	250, 136, 299, 268, 522, 523, 520, 0, 521, 567,
	568, 622, 623, 624, 593, 516, 0, 606, 607, 0,
	597, 612, 613, 588, 631, 545, 546, 506, 509, 510,
	511, 517, 559, 560, 571, 574, 602, 601, 600, 603,
	608, 627, 626, 628, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 570, 109, 120, 184, 311,
	242, 158, 301, 502, 150, 0, 0, 561, 563, 573,
	590, 111, 112, 121, 130, 137, 149, 154, 157, 163,
	167, 170, 172, 173, 174, 178, 192, 195, 196, 197,
	198, 212, 213, 215, 216, 219, 220, 223, 225, 226,
	227, 229, 230, 231, 236, 239, 241, 243, 246, 251,
	252, 253, 254, 256, 257, 258, 262, 263, 264, 265,
	273, 277, 287, 288, 298, 307, 309, 609, 616, 596,
	281, 554, 619, 526, 543, 630, 544, 547, 585, 512,
	566, 218, 541, 513, 0, 530, 503, 537, 504, 527,
	556, 152, 525, 598, 569, 618, 182, 581, 0, 144,
	190, 188, 0, 0, 0, 224, 279, 617, 562, 0,
	625, 185, 578, 302, 270, 203, 0, 0, 558, 605,
	564, 594, 553, 587, 519, 577, 620, 542, 583, 621,
	0, 0, 0, 497, 0, 0, 0, 0, 0, 0,
	0, 0, 134, 0, 580, 615, 539, 582, 584, 501,
	579, 0, 507, 514, 629, 611, 533, 534, 535, 0,
	0, 0, 0, 0, 0, 0, 557, 565, 591, 550,
	0, 0, 0, 0, 0, 0, 0, 0, 531, 0,
	575, 0, 0, 0, 515, 508, 0, 0, 555, 0,
	0, 0, 518, 113, 532, 592, 0, 499, 162, 204,
	124, 595, 610, 552, 175, 308, 614, 549, 548, 238,
	0, 275, 165, 183, 128, 110, 122, 138, 164, 214,
	247, 255, 540, 500, 599, 528, 538, 145, 536, 249,
	222, 297, 0, 572, 228, 248, 186, 286, 240, 295,
	296, 166, 280, 305, 310, 267, 153, 0, 114, 0,
	235, 148, 179, 551, 586, 529, 142, 589, 576, 604,
	266, 129, 282, 202, 208, 139, 141, 140, 123, 261,
	284, 133, 143, 271, 276, 115, 278, 294, 135, 259,
	117, 292, 274, 200, 176, 177, 116, 0, 245, 151,
	161, 147, 217, 0, 160, 237, 289, 290, 146, 313,
	125, 304, 119, 126, 303, 211, 0, 210, 306, 285,
	293, 201, 194, 0, 118, 291, 199, 193, 181, 156,
	168, 233, 189, 234, 169, 206, 205, 207, 0, 505,
	0, 272, 300, 314, 191, 131, 524, 260, 283, 0,
	0, 132, 159, 155, 232, 209, 127, 171, 269, 180,
	187, 244, 312, 221, 250, 136, 299, 268, 522, 523,
	520, 0, 521, 567, 568, 622, 623, 624, 593, 516,
	0, 606, 607, 0, 597, 612, 613, 588, 631, 545,
	546, 506, 509, 510, 511, 517, 559, 560, 571, 574,
	602, 601, 600, 603, 608, 627, 626, 628, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 570,
	109, 120, 184, 311, 242, 158, 301, 502, 150, 0,
	0, 561, 563, 573, 590, 111, 112, 121, 130, 137,
	149, 154, 157, 163, 167, 170, 172, 173, 174, 178,
	192, 195, 196, 197, 198, 212, 213, 215, 216, 219,
	220, 223, 225, 226, 227, 229, 230, 231, 236, 239,
	241, 243, 246, 251, 252, 253, 254, 256, 257, 258,
	262, 263, 264, 265, 273, 277, 287, 288, 298, 307,
	309, 609, 616, 596, 281, 554, 619, 526, 543, 630,
	544, 547, 585, 512, 566, 218, 541, 513, 0, 530,
	503, 537, 504, 527, 556, 152, 525, 598, 569, 618,
	182, 581, 0, 144, 190, 188, 0, 0, 0, 224,
	279, 617, 562, 0, 625, 185, 578, 302, 270, 203,
	0, 0, 558, 605, 564, 594, 553, 587, 519, 577,
	620, 542, 583, 621, 0, 0, 0, 380, 0, 0,
	0, 0, 0, 0, 0, 0, 134, 0, 580, 615,
	539, 582, 584, 501, 579, 0, 507, 514, 629, 611,
	533, 534, 535, 0, 0, 0, 0, 0, 0, 0,
	557, 565, 591, 550, 0, 0, 0, 0, 0, 0,
	0, 0, 531, 0, 575, 0, 0, 0, 515, 508,
	0, 0, 555, 0, 0, 0, 518, 113, 532, 592,
	0, 499, 162, 204, 124, 595, 610, 552, 175, 308,
	614, 549, 548, 238, 0, 275, 165, 183, 128, 110,
	122, 138, 164, 214, 247, 255, 540, 500, 599, 528,
	538, 145, 536, 249, 222, 297, 0, 572, 228, 248,
	186, 286, 240, 295, 296, 166, 280, 305, 310, 267,
	153, 0, 114, 0, 235, 148, 179, 551, 586, 529,
	142, 589, 576, 604, 266, 129, 282, 202, 208, 139,
	141, 140, 123, 261, 284, 133, 143, 271, 276, 115,
	278, 294, 135, 259, 117, 292, 274, 200, 176, 177,
	116, 0, 245, 151, 161, 147, 217, 0, 160, 237,
	289, 290, 146, 313, 125, 304, 119, 126, 303, 211,
	0, 210, 306, 285, 293, 201, 194, 0, 118, 291,
	199, 193, 181, 156, 168, 233, 189, 234, 169, 206,
	205, 207, 0, 505, 0, 272, 300, 314, 191, 131,
	524, 260, 283, 0, 0, 132, 159, 155, 232, 209,
	127, 171, 269, 180, 187, 244, 312, 221, 250, 136,
	299, 268, 522, 523, 520, 0, 521, 567, 568, 622,
	623, 624, 593, 516, 0, 606, 607, 0, 597, 612,
	613, 588, 631, 545, 546, 506, 509, 510, 511, 517,
	559, 560, 571, 574, 602, 601, 600, 603, 608, 627,
	626, 628, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 570, 109, 120, 184, 311, 242, 158,
	301, 502, 150, 0, 0, 561, 563, 573, 590, 111,
	112, 121, 130, 137, 149, 154, 157, 163, 167, 170,
	172, 173, 174, 178, 192, 195, 196, 197, 198, 212,
	213, 215, 216, 219, 220, 223, 225, 226, 227, 229,
	230, 231, 236, 239, 241, 243, 246, 251, 252, 253,
	254, 256, 257, 258, 262, 263, 264, 265, 273, 277,
	287, 288, 298, 307, 309, 609, 616, 596, 281, 554,
	619, 526, 543, 630, 544, 547, 585, 512, 566, 218,
	541, 513, 0, 530, 503, 537, 504, 527, 556, 152,
	525, 598, 569, 618, 182, 581, 0, 144, 190, 188,
	0, 0, 0, 224, 279, 1260, 1264, 0, 625, 185,
	578, 302, 270, 203, 0, 0, 558, 605, 564, 594,
	553, 587, 519, 577, 620, 542, 583, 621, 0, 0,
	0, 497, 0, 0, 0, 0, 0, 0, 0, 0,
	134, 0, 580, 615, 539, 582, 584, 501, 579, 0,
	507, 514, 629, 611, 533, 534, 535, 0, 0, 0,
	0, 0, 0, 0, 557, 565, 591, 550, 0, 0,
	0, 0, 0, 0, 0, 0, 531, 0, 575, 0,
	0, 0, 515, 508, 0, 0, 555, 0, 0, 0,
	518, 113, 532, 592, 0, 499, 162, 204, 124, 595,
	610, 1263, 175, 308, 614, 549, 548, 1258, 0, 1259,
	165, 183, 128, 110, 122, 1256, 1262, 214, 247, 255,
	540, 500, 599, 528, 538, 145, 536, 249, 222, 297,
	0, 572, 228, 248, 186, 286, 240, 295, 296, 166,
	280, 305, 310, 267, 153, 0, 114, 0, 235, 148,
	179, 551, 586, 529, 142, 589, 576, 604, 266, 129,
	282, 202, 208, 139, 141, 140, 123, 261, 284, 133,
	143, 271, 276, 115, 278, 294, 135, 259, 117, 292,
	274, 200, 176, 177, 116, 0, 245, 151, 161, 147,
	217, 0, 160, 237, 289, 290, 146, 313, 125, 304,
	119, 126, 303, 211, 0, 210, 306, 285, 293, 201,
	194, 0, 118, 291, 199, 193, 181, 156, 168, 233,
	189, 234, 169, 206, 205, 207, 0, 505, 0, 272,
	300, 314, 191, 131, 524, 260, 283, 0, 0, 132,
	159, 155, 232, 209, 127, 171, 269, 180, 187, 244,
	312, 221, 250, 136, 299, 268, 522, 523, 520, 0,
	521, 567, 568, 622, 623, 624, 593, 516, 0, 606,
	607, 0, 597, 612, 613, 588, 631, 545, 546, 506,
	509, 510, 511, 517, 559, 560, 571, 574, 602, 601,
	600, 603, 608, 627, 626, 628, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 570, 109, 120,
	184, 311, 242, 158, 301, 502, 150, 0, 0, 561,
	563, 573, 590, 111, 112, 121, 130, 137, 149, 154,
	157, 163, 167, 170, 172, 173, 174, 178, 192, 195,
	196, 197, 198, 212, 213, 215, 216, 219, 220, 223,
	225, 226, 227, 229, 230, 231, 236, 239, 241, 243,
	246, 251, 252, 253, 254, 256, 257, 258, 262, 263,
	264, 265, 273, 277, 287, 288, 298, 307, 309, 609,
	616, 596, 281, 554, 619, 526, 543, 630, 544, 547,
	585, 512, 566, 218, 541, 513, 0, 530, 503, 537,
	504, 527, 556, 152, 525, 598, 569, 618, 182, 581,
	0, 144, 190, 188, 0, 0, 0, 224, 279, 617,
	562, 0, 625, 185, 578, 302, 270, 203, 0, 0,
	558, 605, 564, 594, 553, 587, 519, 577, 620, 542,
	583, 621, 0, 0, 0, 107, 0, 0, 0, 0,
	0, 0, 0, 0, 134, 0, 580, 615, 539, 582,
	584, 501, 579, 0, 507, 514, 629, 611, 533, 534,
	535, 0, 0, 0, 0, 0, 0, 0, 557, 565,
	591, 550, 0, 0, 0, 0, 0, 0, 0, 0,
	531, 0, 575, 0, 0, 0, 515, 508, 0, 0,
	555, 0, 0, 0, 518, 113, 532, 592, 0, 499,
	162, 204, 124, 595, 610, 552, 175, 308, 614, 549,
	548, 238, 0, 275, 165, 183, 128, 110, 122, 138,
	164, 214, 247, 255, 540, 500, 599, 528, 538, 145,
	536, 249, 222, 297, 0, 572, 228, 248, 186, 286,
	240, 295, 296, 166, 280, 305, 310, 267, 153, 0,
	114, 0, 235, 148, 179, 551, 586, 529, 142, 589,
	576, 604, 266, 129, 282, 202, 208, 139, 141, 140,
	123, 261, 284, 133, 143, 271, 276, 115, 278, 294,
	135, 259, 117, 292, 274, 200, 176, 177, 116, 0,
	245, 151, 161, 147, 217, 0, 160, 237, 289, 290,
	146, 313, 125, 304, 119, 126, 303, 211, 0, 210,
	306, 285, 293, 201, 194, 0, 118, 291, 199, 193,
	181, 156, 168, 233, 189, 234, 169, 206, 205, 207,
	0, 505, 0, 272, 300, 314, 191, 131, 524, 260,
	283, 0, 0, 132, 159, 155, 232, 209, 127, 171,
	269, 180, 187, 244, 312, 221, 250, 136, 299, 268,
	522, 523, 520, 0, 521, 567, 568, 622, 623, 624,
	593, 516, 0, 606, 607, 0, 597, 612, 613, 588,
	631, 545, 546, 506, 509, 510, 511, 517, 559, 560,
	571, 574, 602, 601, 600, 603, 608, 627, 626, 628,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 570, 109, 120, 184, 311, 242, 158, 301, 502,
	150, 0, 0, 561, 563, 573, 590, 111, 112, 121,
	130, 137, 149, 154, 157, 163, 167, 170, 172, 173,
	174, 178, 192, 195, 196, 197, 198, 212, 213, 215,
	216, 219, 220, 223, 225, 226, 227, 229, 230, 231,
	236, 239, 241, 243, 246, 251, 252, 253, 254, 256,
	257, 258, 262, 263, 264, 265, 273, 277, 287, 288,
	298, 307, 309, 609, 281, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 0, 0, 0, 0,
	0, 382, 0, 0, 0, 152, 379, 0, 0, 0,
	182, 0, 0, 144, 190, 188, 0, 0, 0, 224,
	279, 0, 0, 0, 426, 185, 0, 302, 270, 203,
	0, 0, 0, 0, 415, 416, 0, 0, 0, 0,
	0, 0, 1239, 0, 67, 0, 0, 380, 403, 402,
	405, 406, 407, 408, 0, 0, 134, 404, 409, 410,
	411, 1240, 0, 0, 377, 394, 0, 425, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 391, 392,
	0, 0, 0, 0, 440, 0, 393, 0, 0, 388,
	389, 390, 395, 0, 0, 0, 0, 113, 0, 0,
	0, 0, 162, 204, 124, 417, 0, 0, 175, 308,
	0, 0, 438, 238, 0, 275, 165, 183, 128, 110,
	122, 138, 164, 214, 247, 255, 423, 0, 0, 0,
	0, 145, 0, 249, 222, 297, 0, 0, 228, 248,
	186, 286, 240, 295, 296, 166, 280, 305, 310, 267,
	153, 0, 114, 0, 235, 148, 179, 0, 0, 0,
	142, 0, 0, 0, 266, 129, 282, 202, 208, 139,
	141, 140, 123, 261, 284, 133, 143, 271, 276, 115,
	278, 294, 135, 259, 117, 292, 274, 200, 176, 177,
	116, 0, 245, 151, 161, 147, 217, 0, 160, 237,
	289, 290, 146, 313, 125, 304, 119, 126, 303, 211,
	0, 210, 306, 285, 293, 201, 194, 0, 118, 291,
	199, 193, 181, 156, 168, 233, 189, 234, 169, 206,
	205, 207, 0, 0, 0, 272, 300, 314, 191, 131,
	0, 260, 283, 0, 0, 132, 159, 155, 232, 209,
	127, 171, 269, 180, 187, 244, 312, 221, 250, 136,
	299, 268, 427, 439, 433, 435, 434, 431, 432, 430,
	429, 428, 441, 418, 419, 420, 421, 424, 0, 436,
	437, 0, 0, 0, 0, 454, 455, 456, 457, 458,
	459, 460, 453, 461, 462, 463, 464, 465, 466, 467,
	468, 469, 442, 443, 444, 445, 446, 447, 448, 449,
	452, 450, 451, 422, 109, 120, 184, 311, 242, 158,
	301, 0, 150, 0, 0, 0, 0, 0, 0, 111,
	112, 121, 130, 137, 149, 154, 157, 163, 167, 170,
	172, 173, 174, 178, 192, 195, 196, 197, 198, 212,
	213, 215, 216, 219, 220, 223, 225, 226, 227, 229,
	230, 231, 236, 239, 241, 243, 246, 251, 252, 253,
	254, 256, 257, 258, 262, 263, 264, 265, 273, 277,
	287, 288, 298, 307, 309, 281, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 0, 0, 0,
	0, 0, 382, 0, 0, 0, 152, 379, 0, 0,
	0, 182, 0, 0, 144, 190, 188, 0, 0, 0,
	224, 279, 0, 0, 0, 426, 185, 0, 302, 270,
	203, 0, 0, 0, 0, 415, 416, 0, 0, 0,
	0, 0, 0, 0, 0, 67, 0, 0, 380, 403,
	402, 405, 406, 407, 408, 0, 0, 134, 404, 409,
	410, 411, 0, 0, 0, 377, 394, 0, 425, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 391,
	392, 373, 0, 0, 0, 440, 0, 393, 0, 0,
	388, 389, 390, 395, 0, 0, 0, 0, 113, 0,
	0, 0, 0, 162, 204, 124, 417, 0, 0, 175,
	308, 0, 0, 438, 238, 0, 275, 165, 183, 128,
	110, 122, 138, 164, 214, 247, 255, 423, 0, 0,
	0, 0, 145, 0, 249, 222, 297, 0, 0, 228,
	248, 186, 286, 240, 295, 296, 166, 280, 305, 310,
	267, 153, 0, 114, 0, 235, 148, 179, 0, 0,
	0, 142, 0, 0, 0, 266, 129, 282, 202, 208,
	139, 141, 140, 123, 261, 284, 133, 143, 271, 276,
	115, 278, 294, 135, 259, 117, 292, 274, 200, 176,
	177, 116, 0, 245, 151, 161, 147, 217, 0, 160,
	237, 289, 290, 146, 313, 125, 304, 119, 126, 303,
	211, 0, 210, 306, 285, 293, 201, 194, 0, 118,
	291, 199, 193, 181, 156, 168, 233, 189, 234, 169,
	206, 205, 207, 0, 0, 0, 272, 300, 314, 191,
	131, 0, 260, 283, 0, 0, 132, 159, 155, 232,
	209, 127, 171, 269, 180, 187, 244, 312, 221, 250,
	136, 299, 268, 427, 439, 433, 435, 434, 431, 432,
	430, 429, 428, 441, 418, 419, 420, 421, 424, 0,
	436, 437, 0, 0, 0, 0, 454, 455, 456, 457,
	458, 459, 460, 453, 461, 462, 463, 464, 465, 466,
	467, 468, 469, 442, 443, 444, 445, 446, 447, 448,
	449, 452, 450, 451, 422, 109, 120, 184, 311, 242,
	158, 301, 0, 150, 0, 0, 0, 0, 0, 0,
	111, 112, 121, 130, 137, 149, 154, 157, 163, 167,
	170, 172, 173, 174, 178, 192, 195, 196, 197, 198,
	212, 213, 215, 216, 219, 220, 223, 225, 226, 227,
	229, 230, 231, 236, 239, 241, 243, 246, 251, 252,
	253, 254, 256, 257, 258, 262, 263, 264, 265, 273,
	277, 287, 288, 298, 307, 309, 281, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 0, 0,
	0, 0, 0, 382, 0, 0, 0, 152, 379, 0,
	0, 0, 182, 0, 0, 144, 190, 188, 0, 0,
	0, 224, 279, 0, 0, 0, 426, 185, 0, 302,
	270, 203, 0, 0, 0, 0, 415, 416, 0, 0,
	0, 0, 0, 0, 0, 0, 67, 0, 706, 380,
	403, 402, 405, 406, 407, 408, 0, 0, 134, 404,
	409, 410, 411, 0, 0, 0, 377, 394, 0, 425,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	391, 392, 0, 0, 0, 0, 440, 0, 393, 0,
	0, 388, 389, 390, 395, 0, 0, 0, 0, 113,
	0, 0, 0, 0, 162, 204, 124, 417, 0, 0,
	175, 308, 0, 0, 438, 238, 0, 275, 165, 183,
	128, 110, 122, 138, 164, 214, 247, 255, 423, 0,
	0, 0, 0, 145, 0, 249, 222, 297, 0, 0,
	228, 248, 186, 286, 240, 295, 296, 166, 280, 305,
	310, 267, 153, 0, 114, 0, 235, 148, 179, 0,
	0, 0, 142, 0, 0, 0, 266, 129, 282, 202,
	208, 139, 141, 140, 123, 261, 284, 133, 143, 271,
	276, 115, 278, 294, 135, 259, 117, 292, 274, 200,
	176, 177, 116, 0, 245, 151, 161, 147, 217, 0,
	160, 237, 289, 290, 146, 313, 125, 304, 119, 126,
	303, 211, 0, 210, 306, 285, 293, 201, 194, 0,
	118, 291, 199, 193, 181, 156, 168, 233, 189, 234,
	169, 206, 205, 207, 0, 0, 0, 272, 300, 314,
	191, 131, 0, 260, 283, 0, 0, 132, 159, 155,
	232, 209, 127, 171, 269, 180, 187, 244, 312, 221,
	250, 136, 299, 268, 427, 439, 433, 435, 434, 431,
	432, 430, 429, 428, 441, 418, 419, 420, 421, 424,
	0, 436, 437, 0, 0, 0, 0, 454, 455, 456,
	457, 458, 459, 460, 453, 461, 462, 463, 464, 465,
	466, 467, 468, 469, 442, 443, 444, 445, 446, 447,
	448, 449, 452, 450, 451, 422, 109, 120, 184, 311,
	242, 158, 301, 0, 150, 0, 0, 0, 0, 0,
	0, 111, 112, 121, 130, 137, 149, 154, 157, 163,
	167, 170, 172, 173, 174, 178, 192, 195, 196, 197,
	198, 212, 213, 215, 216, 219, 220, 223, 225, 226,
	227, 229, 230, 231, 236, 239, 241, 243, 246, 251,
	252, 253, 254, 256, 257, 258, 262, 263, 264, 265,
	273, 277, 287, 288, 298, 307, 309, 281, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 0,
	0, 0, 0, 0, 382, 0, 0, 0, 152, 379,
	0, 0, 0, 182, 0, 0, 144, 190, 188, 0,
	0, 0, 224, 279, 0, 0, 0, 426, 185, 0,
	302, 270, 203, 0, 0, 0, 0, 415, 416, 0,
	0, 0, 0, 0, 0, 0, 0, 67, 0, 0,
	380, 403, 402, 405, 406, 407, 408, 0, 0, 134,
	404, 409, 410, 411, 0, 0, 0, 377, 394, 0,
	425, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 391, 392, 1137, 0, 0, 0, 440, 0, 393,
	0, 0, 388, 389, 390, 395, 0, 0, 0, 0,
	113, 0, 0, 0, 0, 162, 204, 124, 417, 0,
	0, 175, 308, 0, 0, 438, 238, 0, 275, 165,
	183, 128, 110, 122, 138, 164, 214, 247, 255, 423,
	0, 0, 0, 0, 145, 0, 249, 222, 297, 0,
	0, 228, 248, 186, 286, 240, 295, 296, 166, 280,
	305, 310, 267, 153, 0, 114, 0, 235, 148, 179,
	0, 0, 0, 142, 0, 0, 0, 266, 129, 282,
	202, 208, 139, 141, 140, 123, 261, 284, 133, 143,
	271, 276, 115, 278, 294, 135, 259, 117, 292, 274,
	200, 176, 177, 116, 0, 245, 151, 161, 147, 217,
	0, 160, 237, 289, 290, 146, 313, 125, 304, 119,
	126, 303, 211, 0, 210, 306, 285, 293, 201, 194,
	0, 118, 291, 199, 193, 181, 156, 168, 233, 189,
	234, 169, 206, 205, 207, 0, 0, 0, 272, 300,
	314, 191, 131, 0, 260, 283, 0, 0, 132, 159,
	155, 232, 209, 127, 171, 269, 180, 187, 244, 312,
	221, 250, 136, 299, 268, 427, 439, 433, 435, 434,
	431, 432, 430, 429, 428, 441, 418, 419, 420, 421,
	424, 0, 436, 437, 0, 0, 0, 0, 454, 455,
	456, 457, 458, 459, 460, 453, 461, 462, 463, 464,
	465, 466, 467, 468, 469, 442, 443, 444, 445, 446,
	447, 448, 449, 452, 450, 451, 422, 109, 120, 184,
	311, 242, 158, 301, 0, 150, 0, 0, 0, 0,
	0, 0, 111, 112, 121, 130, 137, 149, 154, 157,
	163, 167, 170, 172, 173, 174, 178, 192, 195, 196,
	197, 198, 212, 213, 215, 216, 219, 220, 223, 225,
	226, 227, 229, 230, 231, 236, 239, 241, 243, 246,
	251, 252, 253, 254, 256, 257, 258, 262, 263, 264,
	265, 273, 277, 287, 288, 298, 307, 309, 281, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 0, 0, 382, 0, 0, 0, 152,
	379, 0, 0, 0, 182, 0, 0, 144, 190, 188,
	0, 0, 0, 224, 279, 0, 0, 0, 426, 185,
	0, 302, 270, 203, 0, 0, 0, 0, 415, 416,
	0, 0, 0, 0, 0, 0, 0, 0, 67, 0,
	0, 380, 403, 1148, 405, 406, 407, 408, 0, 0,
	134, 404, 409, 410, 411, 0, 0, 0, 377, 394,
	0, 425, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 391, 392, 1137, 0, 0, 0, 440, 0,
	393, 0, 0, 388, 389, 390, 395, 0, 0, 0,
	0, 113, 0, 0, 0, 0, 162, 204, 124, 417,
	0, 0, 175, 308, 0, 0, 438, 238, 0, 275,
	165, 183, 128, 110, 122, 138, 164, 214, 247, 255,
	423, 0, 0, 0, 0, 145, 0, 249, 222, 297,
	0, 0, 228, 248, 186, 286, 240, 295, 296, 166,
	280, 305, 310, 267, 153, 0, 114, 0, 235, 148,
	179, 0, 0, 0, 142, 0, 0, 0, 266, 129,
	282, 202, 208, 139, 141, 140, 123, 261, 284, 133,
	143, 271, 276, 115, 278, 294, 135, 259, 117, 292,
	274, 200, 176, 177, 116, 0, 245, 151, 161, 147,
	217, 0, 160, 237, 289, 290, 146, 313, 125, 304,
	119, 126, 303, 211, 0, 210, 306, 285, 293, 201,
	194, 0, 118, 291, 199, 193, 181, 156, 168, 233,
	189, 234, 169, 206, 205, 207, 0, 0, 0, 272,
	300, 314, 191, 131, 0, 260, 283, 0, 0, 132,
	159, 155, 232, 209, 127, 171, 269, 180, 187, 244,
	312, 221, 250, 136, 299, 268, 427, 439, 433, 435,
	434, 431, 432, 430, 429, 428, 441, 418, 419, 420,
	421, 424, 0, 436, 437, 0, 0, 0, 0, 454,
	455, 456, 457, 458, 459, 460, 453, 461, 462, 463,
	464, 465, 466, 467, 468, 469, 442, 443, 444, 445,
	446, 447, 448, 449, 452, 450, 451, 422, 109, 120,
	184, 311, 242, 158, 301, 0, 150, 0, 0, 0,
	0, 0, 0, 111, 112, 121, 130, 137, 149, 154,
	157, 163, 167, 170, 172, 173, 174, 178, 192, 195,
	196, 197, 198, 212, 213, 215, 216, 219, 220, 223,
	225, 226, 227, 229, 230, 231, 236, 239, 241, 243,
	246, 251, 252, 253, 254, 256, 257, 258, 262, 263,
	264, 265, 273, 277, 287, 288, 298, 307, 309, 281,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 0, 0, 0, 0, 0, 382, 0, 0, 0,
	152, 379, 0, 0, 0, 182, 0, 0, 144, 190,
	188, 0, 0, 0, 224, 279, 0, 0, 0, 426,
	185, 0, 302, 270, 203, 0, 0, 0, 0, 415,
	416, 0, 0, 0, 0, 0, 0, 0, 0, 67,
	0, 0, 380, 403, 1145, 405, 406, 407, 408, 0,
	0, 134, 404, 409, 410, 411, 0, 0, 0, 377,
	394, 0, 425, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 391, 392, 1137, 0, 0, 0, 440,
	0, 393, 0, 0, 388, 389, 390, 395, 0, 0,
	0, 0, 113, 0, 0, 0, 0, 162, 204, 124,
	417, 0, 0, 175, 308, 0, 0, 438, 238, 0,
	275, 165, 183, 128, 110, 122, 138, 164, 214, 247,
	255, 423, 0, 0, 0, 0, 145, 0, 249, 222,
	297, 0, 0, 228, 248, 186, 286, 240, 295, 296,
	166, 280, 305, 310, 267, 153, 0, 114, 0, 235,
	148, 179, 0, 0, 0, 142, 0, 0, 0, 266,
	129, 282, 202, 208, 139, 141, 140, 123, 261, 284,
	133, 143, 271, 276, 115, 278, 294, 135, 259, 117,
	292, 274, 200, 176, 177, 116, 0, 245, 151, 161,
	147, 217, 0, 160, 237, 289, 290, 146, 313, 125,
	304, 119, 126, 303, 211, 0, 210, 306, 285, 293,
	201, 194, 0, 118, 291, 199, 193, 181, 156, 168,
	233, 189, 234, 169, 206, 205, 207, 0, 0, 0,
	272, 300, 314, 191, 131, 0, 260, 283, 0, 0,
	132, 159, 155, 232, 209, 127, 171, 269, 180, 187,
	244, 312, 221, 250, 136, 299, 268, 427, 439, 433,
	435, 434, 431, 432, 430, 429, 428, 441, 418, 419,
	420, 421, 424, 0, 436, 437, 0, 0, 0, 0,
	454, 455, 456, 457, 458, 459, 460, 453, 461, 462,
	463, 464, 465, 466, 467, 468, 469, 442, 443, 444,
	445, 446, 447, 448, 449, 452, 450, 451, 422, 109,
	120, 184, 311, 242, 158, 301, 0, 150, 0, 0,
	0, 0, 0, 0, 111, 112, 121, 130, 137, 149,
	154, 157, 163, 167, 170, 172, 173, 174, 178, 192,
	195, 196, 197, 198, 212, 213, 215, 216, 219, 220,
	223, 225, 226, 227, 229, 230, 231, 236, 239, 241,
	243, 246, 251, 252, 253, 254, 256, 257, 258, 262,
	263, 264, 265, 273, 277, 287, 288, 298, 307, 309,
	29, 281, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 0, 0, 0, 0, 0, 382, 0,
	0, 0, 152, 379, 0, 0, 0, 182, 0, 0,
	144, 190, 188, 0, 0, 0, 224, 279, 0, 0,
	0, 426, 185, 0, 302, 270, 203, 0, 0, 0,
	0, 415, 416, 0, 0, 0, 0, 0, 0, 0,
	0, 67, 0, 0, 380, 403, 402, 405, 406, 407,
	408, 0, 0, 134, 404, 409, 410, 411, 0, 0,
	0, 377, 394, 0, 425, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 391, 392, 0, 0, 0,
	0, 440, 0, 393, 0, 0, 388, 389, 390, 395,
	0, 0, 0, 0, 113, 0, 0, 0, 0, 162,
	204, 124, 417, 0, 0, 175, 308, 0, 0, 438,
	238, 0, 275, 165, 183, 128, 110, 122, 138, 164,
	214, 247, 255, 423, 0, 0, 0, 0, 145, 0,
	249, 222, 297, 0, 0, 228, 248, 186, 286, 240,
	295, 296, 166, 280, 305, 310, 267, 153, 0, 114,
	0, 235, 148, 179, 0, 0, 0, 142, 0, 0,
	0, 266, 129, 282, 202, 208, 139, 141, 140, 123,
	261, 284, 133, 143, 271, 276, 115, 278, 294, 135,
	259, 117, 292, 274, 200, 176, 177, 116, 0, 245,
	151, 161, 147, 217, 0, 160, 237, 289, 290, 146,
	313, 125, 304, 119, 126, 303, 211, 0, 210, 306,
	285, 293, 201, 194, 0, 118, 291, 199, 193, 181,
	156, 168, 233, 189, 234, 169, 206, 205, 207, 0,
	0, 0, 272, 300, 314, 191, 131, 0, 260, 283,
	0, 0, 132, 159, 155, 232, 209, 127, 171, 269,
	180, 187, 244, 312, 221, 250, 136, 299, 268, 427,
	439, 433, 435, 434, 431, 432, 430, 429, 428, 441,
	418, 419, 420, 421, 424, 0, 436, 437, 0, 0,
	0, 0, 454, 455, 456, 457, 458, 459, 460, 453,
	461, 462, 463, 464, 465, 466, 467, 468, 469, 442,
	443, 444, 445, 446, 447, 448, 449, 452, 450, 451,
	422, 109, 120, 184, 311, 242, 158, 301, 0, 150,
	0, 0, 0, 0, 0, 0, 111, 112, 121, 130,
	137, 149, 154, 157, 163, 167, 170, 172, 173, 174,
	178, 192, 195, 196, 197, 198, 212, 213, 215, 216,
	219, 220, 223, 225, 226, 227, 229, 230, 231, 236,
	239, 241, 243, 246, 251, 252, 253, 254, 256, 257,
	258, 262, 263, 264, 265, 273, 277, 287, 288, 298,
	307, 309, 281, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 0, 0, 0, 0, 0, 382,
	0, 0, 0, 152, 379, 0, 0, 0, 182, 0,
	0, 144, 190, 188, 0, 0, 0, 224, 279, 0,
	0, 0, 426, 185, 0, 302, 270, 203, 0, 0,
	0, 0, 415, 416, 0, 0, 0, 0, 0, 0,
	0, 0, 67, 0, 1061, 380, 403, 402, 405, 406,
	407, 408, 0, 0, 134, 404, 409, 410, 411, 0,
	0, 0, 377, 394, 0, 425, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 391, 392, 0, 0,
	0, 0, 440, 0, 393, 0, 0, 388, 389, 390,
	395, 0, 0, 0, 0, 113, 0, 0, 0, 0,
	162, 204, 124, 417, 0, 0, 175, 308, 0, 0,
	438, 238, 0, 275, 165, 183, 128, 110, 122, 138,
	164, 214, 247, 255, 423, 0, 0, 0, 0, 145,
	0, 249, 222, 297, 0, 0, 228, 248, 186, 286,
	240, 295, 296, 166, 280, 305, 310, 267, 153, 0,
	114, 0, 235, 148, 179, 0, 0, 0, 142, 0,
	0, 0, 266, 129, 282, 202, 208, 139, 141, 140,
	123, 261, 284, 133, 143, 271, 276, 115, 278, 294,
	135, 259, 117, 292, 274, 200, 176, 177, 116, 0,
	245, 151, 161, 147, 217, 0, 160, 237, 289, 290,
	146, 313, 125, 304, 119, 126, 303, 211, 0, 210,
	306, 285, 293, 201, 194, 0, 118, 291, 199, 193,
	181, 156, 168, 233, 189, 234, 169, 206, 205, 207,
	0, 0, 0, 272, 300, 314, 191, 131, 0, 260,
	283, 0, 0, 132, 159, 155, 232, 209, 127, 171,
	269, 180, 187, 244, 312, 221, 250, 136, 299, 268,
	427, 439, 433, 435, 434, 431, 432, 430, 429, 428,
	441, 418, 419, 420, 421, 424, 0, 436, 437, 0,
	0, 0, 0, 454, 455, 456, 457, 458, 459, 460,
	453, 461, 462, 463, 464, 465, 466, 467, 468, 469,
	442, 443, 444, 445, 446, 447, 448, 449, 452, 450,
	451, 422, 109, 120, 184, 311, 242, 158, 301, 0,
	150, 0, 0, 0, 0, 0, 0, 111, 112, 121,
	130, 137, 149, 154, 157, 163, 167, 170, 172, 173,
	174, 178, 192, 195, 196, 197, 198, 212, 213, 215,
	216, 219, 220, 223, 225, 226, 227, 229, 230, 231,
	236, 239, 241, 243, 246, 251, 252, 253, 254, 256,
	257, 258, 262, 263, 264, 265, 273, 277, 287, 288,
	298, 307, 309, 281, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 0,
	382, 0, 0, 0, 152, 379, 0, 0, 0, 182,
	0, 0, 144, 190, 188, 0, 0, 0, 224, 279,
	0, 0, 0, 426, 185, 0, 302, 270, 203, 0,
	0, 0, 0, 415, 416, 0, 0, 0, 0, 0,
	0, 0, 0, 67, 0, 0, 380, 403, 402, 405,
	406, 407, 408, 0, 0, 134, 404, 409, 410, 411,
	0, 0, 0, 377, 394, 0, 425, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 391, 392, 0,
	0, 0, 0, 440, 0, 393, 0, 0, 388, 389,
	390, 395, 0, 0, 0, 0, 113, 0, 0, 0,
	0, 162, 204, 124, 417, 0, 0, 175, 308, 0,
	0, 438, 238, 0, 275, 165, 183, 128, 110, 122,
	138, 164, 214, 247, 255, 423, 0, 0, 0, 0,
	145, 0, 249, 222, 297, 0, 0, 228, 248, 186,
	286, 240, 295, 296, 166, 280, 305, 310, 267, 153,
	0, 114, 0, 235, 148, 179, 0, 0, 0, 142,
	0, 0, 0, 266, 129, 282, 202, 208, 139, 141,
	140, 123, 261, 284, 133, 143, 271, 276, 115, 278,
	294, 135, 259, 117, 292, 274, 200, 176, 177, 116,
	0, 245, 151, 161, 147, 217, 0, 160, 237, 289,
	290, 146, 313, 125, 304, 119, 126, 303, 211, 0,
	210, 306, 285, 293, 201, 194, 0, 118, 291, 199,
	193, 181, 156, 168, 233, 189, 234, 169, 206, 205,
	207, 0, 0, 0, 272, 300, 314, 191, 131, 0,
	260, 283, 0, 0, 132, 159, 155, 232, 209, 127,
	171, 269, 180, 187, 244, 312, 221, 250, 136, 299,
	268, 427, 439, 433, 435, 434, 431, 432, 430, 429,
	428, 441, 418, 419, 420, 421, 424, 0, 436, 437,
	0, 0, 0, 0, 454, 455, 456, 457, 458, 459,
	460, 453, 461, 462, 463, 464, 465, 466, 467, 468,
	469, 442, 443, 444, 445, 446, 447, 448, 449, 452,
	450, 451, 422, 109, 120, 184, 311, 242, 158, 301,
	0, 150, 0, 0, 0, 0, 0, 0, 111, 112,
	121, 130, 137, 149, 154, 157, 163, 167, 170, 172,
	173, 174, 178, 192, 195, 196, 197, 198, 212, 213,
	215, 216, 219, 220, 223, 225, 226, 227, 229, 230,
	231, 236, 239, 241, 243, 246, 251, 252, 253, 254,
	256, 257, 258, 262, 263, 264, 265, 273, 277, 287,
	288, 298, 307, 309, 281, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 0, 0, 0, 0,
	0, 382, 0, 0, 0, 152, 379, 0, 0, 0,
	182, 0, 0, 144, 190, 188, 0, 0, 0, 224,
	279, 0, 0, 0, 426, 185, 0, 302, 270, 203,
	0, 0, 0, 0, 415, 416, 0, 0, 0, 0,
	0, 0, 0, 0, 67, 0, 0, 380, 403, 402,
	405, 406, 407, 408, 0, 0, 134, 404, 409, 410,
	411, 0, 0, 0, 377, 394, 0, 425, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 391, 392,
	0, 0, 0, 0, 440, 0, 393, 0, 0, 388,
	389, 390, 395, 0, 0, 0, 0, 113, 0, 0,
	0, 0, 162, 204, 124, 417, 0, 0, 175, 308,
	0, 0, 438, 238, 0, 275, 165, 183, 128, 110,
	122, 138, 164, 214, 247, 255, 423, 0, 0, 0,
	0, 145, 0, 249, 222, 297, 0, 0, 228, 248,
	186, 286, 240, 295, 296, 166, 280, 305, 310, 267,
	153, 0, 114, 0, 235, 148, 179, 0, 0, 0,
	142, 0, 0, 0, 266, 129, 282, 202, 208, 139,
	141, 140, 123, 261, 284, 133, 143, 271, 276, 115,
	278, 294, 135, 259, 117, 292, 274, 200, 176, 177,
	116, 0, 245, 151, 161, 147, 217, 0, 160, 237,
	289, 290, 146, 313, 125, 304, 119, 126, 303, 211,
	0, 210, 306, 285, 293, 201, 194, 0, 118, 291,
	199, 193, 181, 156, 168, 233, 189, 234, 169, 206,
	205, 207, 0, 0, 0, 272, 300, 314, 191, 131,
	0, 260, 283, 0, 0, 132, 159, 155, 232, 209,
	127, 171, 269, 180, 187, 244, 312, 221, 250, 136,
	299, 268, 427, 439, 433, 435, 434, 431, 432, 430,
	429, 428, 441, 418, 419, 420, 421, 424, 0, 436,
	437, 0, 0, 0, 0, 718, 719, 720, 721, 722,
	726, 727, 731, 732, 740, 739, 738, 741, 742, 744,
	743, 745, 723, 724, 725, 728, 729, 730, 733, 734,
	737, 735, 736, 422, 109, 120, 184, 311, 242, 158,
	301, 0, 150, 0, 0, 0, 0, 0, 0, 111,
	112, 121, 130, 137, 149, 154, 157, 163, 167, 170,
	172, 173, 174, 178, 192, 195, 196, 197, 198, 212,
	213, 215, 216, 219, 220, 223, 225, 226, 227, 229,
	230, 231, 236, 239, 241, 243, 246, 251, 252, 253,
	254, 256, 257, 258, 262, 263, 264, 265, 273, 277,
	287, 288, 298, 307, 309, 281, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 152, 0, 0, 0,
	0, 182, 0, 0, 144, 190, 188, 0, 0, 0,
	224, 279, 0, 0, 0, 426, 185, 0, 302, 270,
	203, 0, 0, 0, 0, 415, 416, 0, 0, 0,
	0, 0, 0, 0, 0, 67, 0, 0, 380, 403,
	402, 405, 406, 407, 408, 0, 0, 134, 404, 409,
	410, 411, 0, 0, 0, 0, 394, 0, 425, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 391,
	392, 0, 0, 0, 0, 440, 0, 393, 0, 0,
	388, 389, 390, 395, 0, 0, 0, 0, 113, 0,
	0, 0, 0, 162, 204, 124, 417, 0, 0, 175,
	308, 0, 0, 438, 238, 0, 275, 165, 183, 128,
	110, 122, 138, 164, 214, 247, 255, 423, 0, 0,
	0, 0, 145, 0, 249, 222, 297, 0, 2138, 228,
	248, 186, 286, 240, 295, 296, 166, 280, 305, 310,
	267, 153, 0, 114, 0, 235, 148, 179, 0, 0,
	0, 142, 0, 0, 0, 266, 129, 282, 202, 208,
	139, 141, 140, 123, 261, 284, 133, 143, 271, 276,
	115, 278, 294, 135, 259, 117, 292, 274, 200, 176,
	177, 116, 0, 245, 151, 161, 147, 217, 0, 160,
	237, 289, 290, 146, 313, 125, 304, 119, 126, 303,
	211, 0, 210, 306, 285, 293, 201, 194, 0, 118,
	291, 199, 193, 181, 156, 168, 233, 189, 234, 169,
	206, 205, 207, 0, 0, 0, 272, 300, 314, 191,
	131, 0, 260, 283, 0, 0, 132, 159, 155, 232,
	209, 127, 171, 269, 180, 187, 244, 312, 221, 250,
	136, 299, 268, 427, 439, 433, 435, 434, 431, 432,
	430, 429, 428, 441, 418, 419, 420, 421, 424, 0,
	436, 437, 0, 0, 0, 0, 454, 455, 456, 457,
	458, 459, 460, 453, 461, 462, 463, 464, 465, 466,
	467, 468, 469, 442, 443, 444, 445, 446, 447, 448,
	449, 452, 450, 451, 422, 109, 120, 184, 311, 242,
	158, 301, 0, 150, 0, 0, 0, 0, 0, 0,
	111, 112, 121, 130, 137, 149, 154, 157, 163, 167,
	170, 172, 173, 174, 178, 192, 195, 196, 197, 198,
	212, 213, 215, 216, 219, 220, 223, 225, 226, 227,
	229, 230, 231, 236, 239, 241, 243, 246, 251, 252,
	253, 254, 256, 257, 258, 262, 263, 264, 265, 273,
	277, 287, 288, 298, 307, 309, 281, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 152, 0, 0,
	0, 0, 182, 0, 0, 144, 190, 188, 0, 0,
	0, 224, 279, 0, 0, 0, 426, 185, 0, 302,
	270, 203, 0, 0, 0, 0, 415, 416, 0, 0,
	0, 0, 0, 0, 0, 0, 67, 0, 706, 380,
	403, 402, 405, 406, 407, 408, 0, 0, 134, 404,
	409, 410, 411, 0, 0, 0, 0, 394, 0, 425,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	391, 392, 0, 0, 0, 0, 440, 0, 393, 0,
	0, 388, 389, 390, 395, 0, 0, 0, 0, 113,
	0, 0, 0, 0, 162, 204, 124, 417, 0, 0,
	175, 308, 0, 0, 438, 238, 0, 275, 165, 183,
	128, 110, 122, 138, 164, 214, 247, 255, 423, 0,
	0, 0, 0, 145, 0, 249, 222, 297, 0, 0,
	228, 248, 186, 286, 240, 295, 296, 166, 280, 305,
	310, 267, 153, 0, 114, 0, 235, 148, 179, 0,
	0, 0, 142, 0, 0, 0, 266, 129, 282, 202,
	208, 139, 141, 140, 123, 261, 284, 133, 143, 271,
	276, 115, 278, 294, 135, 259, 117, 292, 274, 200,
	176, 177, 116, 0, 245, 151, 161, 147, 217, 0,
	160, 237, 289, 290, 146, 313, 125, 304, 119, 126,
	303, 211, 0, 210, 306, 285, 293, 201, 194, 0,
	118, 291, 199, 193, 181, 156, 168, 233, 189, 234,
	169, 206, 205, 207, 0, 0, 0, 272, 300, 314,
	191, 131, 0, 260, 283, 0, 0, 132, 159, 155,
	232, 209, 127, 171, 269, 180, 187, 244, 312, 221,
	250, 136, 299, 268, 427, 439, 433, 435, 434, 431,
	432, 430, 429, 428, 441, 418, 419, 420, 421, 424,
	0, 436, 437, 0, 0, 0, 0, 454, 455, 456,
	457, 458, 459, 460, 453, 461, 462, 463, 464, 465,
	466, 467, 468, 469, 442, 443, 444, 445, 446, 447,
	448, 449, 452, 450, 451, 422, 109, 120, 184, 311,
	242, 158, 301, 0, 150, 0, 0, 0, 0, 0,
	0, 111, 112, 121, 130, 137, 149, 154, 157, 163,
	167, 170, 172, 173, 174, 178, 192, 195, 196, 197,
	198, 212, 213, 215, 216, 219, 220, 223, 225, 226,
	227, 229, 230, 231, 236, 239, 241, 243, 246, 251,
	252, 253, 254, 256, 257, 258, 262, 263, 264, 265,
	273, 277, 287, 288, 298, 307, 309, 281, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 152, 0,
	0, 0, 0, 182, 0, 0, 144, 190, 188, 0,
	0, 0, 224, 279, 0, 0, 0, 426, 185, 0,
	302, 270, 203, 0, 0, 0, 0, 415, 416, 0,
	0, 0, 0, 0, 0, 0, 0, 67, 0, 0,
	380, 403, 402, 405, 406, 407, 408, 0, 0, 134,
	404, 409, 410, 411, 0, 0, 0, 0, 394, 0,
	425, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 391, 392, 0, 0, 0, 0, 440, 0, 393,
	0, 0, 388, 389, 390, 395, 0, 0, 0, 0,
	113, 0, 0, 0, 0, 162, 204, 124, 417, 0,
	0, 175, 308, 0, 0, 438, 238, 0, 275, 165,
	183, 128, 110, 122, 138, 164, 214, 247, 255, 423,
	0, 0, 0, 0, 145, 0, 249, 222, 297, 0,
	0, 228, 248, 186, 286, 240, 295, 296, 166, 280,
	305, 310, 267, 153, 0, 114, 0, 235, 148, 179,
	0, 0, 0, 142, 0, 0, 0, 266, 129, 282,
	202, 208, 139, 141, 140, 123, 261, 284, 133, 143,
	271, 276, 115, 278, 294, 135, 259, 117, 292, 274,
	200, 176, 177, 116, 0, 245, 151, 161, 147, 217,
	0, 160, 237, 289, 290, 146, 313, 125, 304, 119,
	126, 303, 211, 0, 210, 306, 285, 293, 201, 194,
	0, 118, 291, 199, 193, 181, 156, 168, 233, 189,
	234, 169, 206, 205, 207, 0, 0, 0, 272, 300,
	314, 191, 131, 0, 260, 283, 0, 0, 132, 159,
	155, 232, 209, 127, 171, 269, 180, 187, 244, 312,
	221, 250, 136, 299, 268, 427, 439, 433, 435, 434,
	431, 432, 430, 429, 428, 441, 418, 419, 420, 421,
	424, 0, 436, 437, 0, 0, 0, 0, 454, 455,
	456, 457, 458, 459, 460, 453, 461, 462, 463, 464,
	465, 466, 467, 468, 469, 442, 443, 444, 445, 446,
	447, 448, 449, 452, 450, 451, 422, 109, 120, 184,
	311, 242, 158, 301, 0, 150, 0, 0, 0, 0,
	0, 0, 111, 112, 121, 130, 137, 149, 154, 157,
	163, 167, 170, 172, 173, 174, 178, 192, 195, 196,
	197, 198, 212, 213, 215, 216, 219, 220, 223, 225,
	226, 227, 229, 230, 231, 236, 239, 241, 243, 246,
	251, 252, 253, 254, 256, 257, 258, 262, 263, 264,
	265, 273, 277, 287, 288, 298, 307, 309, 281, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 0, 1217, 0, 0, 0, 0, 152,
	0, 0, 0, 0, 182, 0, 0, 144, 190, 188,
	0, 0, 0, 224, 279, 0, 0, 0, 0, 185,
	0, 302, 270, 203, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1219, 1221, 0, 0, 0, 0,
	0, 107, 0, 1224, 0, 0, 0, 0, 0, 0,
	134, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 113, 0, 0, 0, 0, 162, 204, 124, 0,
	0, 0, 175, 308, 0, 1220, 0, 238, 0, 275,
	165, 183, 128, 110, 122, 138, 164, 214, 247, 255,
	0, 0, 0, 0, 0, 145, 0, 249, 222, 297,
	0, 0, 228, 248, 186, 286, 240, 295, 296, 166,
	280, 305, 310, 267, 153, 0, 114, 0, 235, 148,
	179, 0, 0, 0, 142, 0, 0, 0, 266, 129,
	282, 202, 208, 139, 141, 140, 123, 261, 284, 133,
	143, 271, 276, 115, 278, 294, 135, 259, 117, 292,
	274, 200, 176, 177, 116, 0, 245, 151, 161, 147,
	217, 0, 160, 237, 289, 290, 146, 313, 125, 304,
	119, 126, 303, 211, 0, 210, 306, 285, 293, 201,
	194, 0, 118, 291, 199, 193, 181, 156, 168, 233,
	189, 234, 169, 206, 205, 207, 0, 0, 0, 272,
	300, 314, 191, 131, 0, 260, 283, 0, 0, 132,
	159, 155, 232, 209, 127, 171, 269, 180, 187, 244,
	312, 221, 250, 136, 299, 268, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 765,
	766, 767, 768, 769, 773, 774, 778, 779, 787, 786,
	785, 788, 789, 791, 790, 792, 770, 771, 772, 775,
	776, 777, 780, 781, 784, 782, 783, 0, 109, 120,
	184, 311, 242, 158, 301, 0, 150, 0, 0, 0,
	0, 0, 0, 111, 112, 121, 130, 137, 149, 154,
	157, 163, 167, 170, 172, 173, 174, 178, 192, 195,
	196, 197, 198, 212, 213, 215, 216, 219, 220, 223,
	225, 226, 227, 229, 230, 231, 236, 239, 241, 243,
	246, 251, 252, 253, 254, 256, 257, 258, 262, 263,
	264, 265, 273, 277, 287, 288, 298, 307, 309, 281,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 0, 0, 0, 0, 1217, 0, 0, 0, 0,
	152, 0, 0, 0, 0, 182, 0, 0, 144, 190,
	188, 0, 0, 0, 224, 279, 0, 0, 0, 0,
	185, 0, 302, 270, 203, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1219, 1221, 0, 0, 0,
	0, 0, 107, 0, 1224, 0, 0, 0, 0, 0,
	0, 134, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 113, 0, 0, 0, 0, 162, 204, 124,
	0, 0, 0, 175, 308, 0, 1220, 0, 238, 0,
	275, 165, 183, 128, 110, 122, 138, 164, 214, 247,
	255, 0, 0, 0, 0, 0, 145, 0, 249, 222,
	297, 0, 0, 1215, 248, 186, 286, 240, 295, 296,
	166, 280, 305, 310, 267, 153, 0, 114, 0, 235,
	148, 179, 0, 0, 0, 142, 0, 0, 0, 266,
	129, 282, 202, 208, 139, 141, 140, 123, 261, 284,
	133, 143, 271, 276, 115, 278, 294, 135, 259, 117,
	292, 274, 200, 176, 177, 116, 0, 245, 151, 161,
	147, 217, 0, 160, 237, 289, 290, 146, 313, 125,
	304, 119, 126, 303, 211, 0, 210, 306, 285, 293,
	201, 194, 0, 118, 291, 199, 193, 181, 156, 168,
	233, 189, 234, 169, 206, 205, 207, 0, 0, 0,
	272, 300, 314, 191, 131, 0, 260, 283, 0, 0,
	132, 159, 155, 232, 209, 127, 171, 269, 180, 187,
	244, 312, 221, 250, 136, 299, 268, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	765, 766, 767, 768, 769, 773, 774, 778, 779, 787,
	786, 785, 788, 789, 791, 790, 792, 770, 771, 772,
	775, 776, 777, 780, 781, 784, 782, 783, 0, 109,
	120, 184, 311, 242, 158, 301, 0, 150, 0, 0,
	0, 0, 0, 0, 111, 112, 121, 130, 137, 149,
	154, 157, 163, 167, 170, 172, 173, 174, 178, 192,
	195, 196, 197, 198, 212, 213, 215, 216, 219, 220,
	223, 225, 226, 227, 229, 230, 231, 236, 239, 241,
	243, 246, 251, 252, 253, 254, 256, 257, 258, 262,
	263, 264, 265, 273, 277, 287, 288, 298, 307, 309,
	281, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 0, 0, 0, 0, 760, 0, 0, 0,
	0, 152, 0, 0, 0, 0, 182, 0, 0, 144,
	190, 188, 0, 0, 0, 224, 279, 0, 0, 0,
	0, 185, 0, 302, 270, 203, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 761, 0, 764, 0, 0, 0, 0,
	0, 0, 134, 0, 0, 0, 0, 0, 757, 756,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 758, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 113, 0, 0, 0, 0, 162, 204,
	124, 0, 0, 0, 175, 308, 0, 0, 0, 238,
	0, 275, 165, 183, 128, 110, 122, 138, 164, 214,
	247, 255, 0, 0, 0, 0, 0, 145, 0, 249,
	222, 297, 0, 0, 228, 248, 186, 286, 240, 295,
	296, 166, 280, 305, 310, 267, 153, 0, 114, 0,
	235, 148, 179, 0, 0, 0, 142, 0, 0, 0,
	266, 129, 282, 202, 208, 139, 141, 140, 123, 261,
	284, 133, 143, 271, 276, 115, 278, 294, 135, 259,
	117, 292, 274, 200, 176, 177, 116, 0, 245, 151,
	161, 147, 217, 0, 160, 237, 289, 290, 146, 313,
	125, 304, 119, 126, 303, 211, 0, 210, 306, 285,
	293, 201, 194, 0, 118, 291, 199, 193, 181, 156,
	168, 233, 189, 234, 169, 206, 205, 207, 0, 0,
	0, 272, 300, 314, 191, 131, 0, 260, 283, 0,
	0, 132, 159, 155, 232, 209, 127, 171, 269, 180,
	187, 244, 312, 221, 250, 136, 299, 268, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 765, 766, 767, 768, 769, 773, 774, 778, 779,
	787, 786, 785, 788, 789, 791, 790, 792, 770, 771,
	772, 775, 776, 777, 780, 781, 784, 782, 783, 0,
	109, 120, 184, 311, 242, 158, 301, 0, 150, 0,
	0, 0, 0, 0, 0, 111, 112, 121, 130, 137,
	149, 154, 157, 163, 167, 170, 172, 173, 174, 178,
	192, 195, 196, 197, 198, 212, 213, 215, 216, 219,
	220, 223, 225, 226, 227, 229, 230, 231, 236, 239,
	241, 243, 246, 251, 252, 253, 254, 256, 257, 258,
	262, 263, 264, 265, 273, 277, 287, 288, 298, 307,
	309, 281, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 152, 0, 0, 0, 0, 182, 1464, 0,
	144, 190, 188, 0, 0, 0, 224, 279, 0, 0,
	0, 0, 185, 0, 302, 270, 203, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 107, 0, 1224, 0, 0, 0,
	0, 0, 0, 134, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 113, 0, 0, 0, 0, 162,
	204, 124, 0, 0, 0, 175, 308, 0, 0, 0,
	238, 0, 275, 165, 183, 128, 110, 122, 138, 164,
	214, 247, 255, 0, 0, 0, 0, 0, 145, 0,
	249, 222, 297, 0, 0, 228, 248, 186, 286, 240,
	295, 296, 166, 280, 305, 310, 267, 153, 0, 114,
	0, 235, 148, 179, 0, 0, 0, 142, 0, 0,
	0, 266, 129, 282, 202, 208, 139, 141, 140, 123,
	261, 284, 133, 143, 271, 276, 115, 278, 294, 135,
	259, 117, 292, 274, 200, 176, 177, 116, 0, 245,
	151, 161, 147, 217, 0, 160, 237, 289, 290, 146,
	313, 125, 304, 119, 126, 303, 211, 0, 210, 306,
	285, 293, 201, 194, 0, 118, 291, 199, 193, 181,
	156, 168, 233, 189, 234, 169, 206, 205, 207, 0,
	0, 0, 272, 300, 314, 191, 131, 0, 260, 283,
	0, 0, 132, 159, 155, 232, 209, 127, 171, 269,
	180, 187, 244, 312, 221, 250, 136, 299, 268, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 765, 766, 767, 768, 769, 773, 774, 778,
	779, 787, 786, 785, 788, 789, 791, 790, 792, 770,
	771, 772, 775, 776, 777, 780, 781, 784, 782, 783,
	0, 109, 120, 184, 311, 242, 158, 301, 0, 150,
	0, 0, 0, 0, 0, 0, 111, 112, 121, 130,
	137, 149, 154, 157, 163, 167, 170, 172, 173, 174,
	178, 192, 195, 196, 197, 198, 212, 213, 215, 216,
	219, 220, 223, 225, 226, 227, 229, 230, 231, 236,
	239, 241, 243, 246, 251, 252, 253, 254, 256, 257,
	258, 262, 263, 264, 265, 273, 277, 287, 288, 298,
	307, 309, 281, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 152, 0, 0, 0, 0, 182, 0,
	0, 144, 190, 188, 0, 0, 0, 224, 279, 0,
	0, 0, 0, 185, 0, 302, 270, 203, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 107, 0, 1224, 0, 0,
	0, 0, 0, 0, 134, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 113, 0, 0, 0, 0,
	162, 204, 124, 0, 0, 0, 175, 308, 0, 0,
	0, 238, 0, 275, 165, 183, 128, 110, 122, 138,
	164, 214, 247, 255, 0, 0, 0, 0, 0, 145,
	0, 249, 222, 297, 0, 0, 228, 248, 186, 286,
	240, 295, 296, 166, 280, 305, 310, 267, 153, 0,
	114, 0, 235, 148, 179, 0, 0, 0, 142, 0,
	0, 0, 266, 129, 282, 202, 208, 139, 141, 140,
	123, 261, 284, 133, 143, 271, 276, 115, 278, 294,
	135, 259, 117, 292, 274, 200, 176, 177, 116, 0,
	245, 151, 161, 147, 217, 0, 160, 237, 289, 290,
	146, 313, 125, 304, 119, 126, 303, 211, 0, 210,
	306, 285, 293, 201, 194, 0, 118, 291, 199, 193,
	181, 156, 168, 233, 189, 234, 169, 206, 205, 207,
	0, 0, 0, 272, 300, 314, 191, 131, 0, 260,
	283, 0, 0, 132, 159, 155, 232, 209, 127, 171,
	269, 180, 187, 244, 312, 221, 250, 136, 299, 268,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 765, 766, 767, 768, 769, 773, 774,
	778, 779, 787, 786, 785, 788, 789, 791, 790, 792,
	770, 771, 772, 775, 776, 777, 780, 781, 784, 782,
	783, 0, 109, 120, 184, 311, 242, 158, 301, 0,
	150, 0, 0, 0, 0, 0, 0, 111, 112, 121,
	130, 137, 149, 154, 157, 163, 167, 170, 172, 173,
	174, 178, 192, 195, 196, 197, 198, 212, 213, 215,
	216, 219, 220, 223, 225, 226, 227, 229, 230, 231,
	236, 239, 241, 243, 246, 251, 252, 253, 254, 256,
	257, 258, 262, 263, 264, 265, 273, 277, 287, 288,
	298, 307, 309, 281, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 152, 0, 0, 0, 0, 182,
	0, 0, 144, 190, 188, 0, 0, 0, 224, 279,
	0, 0, 0, 0, 185, 0, 302, 270, 203, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 761, 0, 764, 0,
	0, 0, 0, 0, 0, 134, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 113, 0, 0, 0,
	0, 162, 204, 124, 0, 0, 0, 175, 308, 0,
	0, 0, 238, 0, 275, 165, 183, 128, 110, 122,
	138, 164, 214, 247, 255, 0, 0, 0, 0, 0,
	145, 0, 249, 222, 297, 0, 0, 228, 248, 186,
	286, 240, 295, 296, 166, 280, 305, 310, 267, 153,
	0, 114, 0, 235, 148, 179, 0, 0, 0, 142,
	0, 0, 0, 266, 129, 282, 202, 208, 139, 141,
	140, 123, 261, 284, 133, 143, 271, 276, 115, 278,
	294, 135, 259, 117, 292, 274, 200, 176, 177, 116,
	0, 245, 151, 161, 147, 217, 0, 160, 237, 289,
	290, 146, 313, 125, 304, 119, 126, 303, 211, 0,
	210, 306, 285, 293, 201, 194, 0, 118, 291, 199,
	193, 181, 156, 168, 233, 189, 234, 169, 206, 205,
	207, 0, 0, 0, 272, 300, 314, 191, 131, 0,
	260, 283, 0, 0, 132, 159, 155, 232, 209, 127,
	171, 269, 180, 187, 244, 312, 221, 250, 136, 299,
	268, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 765, 766, 767, 768, 769, 773,
	774, 778, 779, 787, 786, 785, 788, 789, 791, 790,
	792, 770, 771, 772, 775, 776, 777, 780, 781, 784,
	782, 783, 0, 109, 120, 184, 311, 242, 158, 301,
	0, 150, 0, 0, 0, 0, 0, 0, 111, 112,
	121, 130, 137, 149, 154, 157, 163, 167, 170, 172,
	173, 174, 178, 192, 195, 196, 197, 198, 212, 213,
	215, 216, 219, 220, 223, 225, 226, 227, 229, 230,
	231, 236, 239, 241, 243, 246, 251, 252, 253, 254,
	256, 257, 258, 262, 263, 264, 265, 273, 277, 287,
	288, 298, 307, 309, 281, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 152, 0, 0, 0, 0,
	182, 0, 0, 144, 190, 188, 0, 0, 0, 224,
	279, 0, 0, 0, 0, 185, 0, 302, 270, 203,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 497, 0, 0,
	0, 0, 0, 0, 0, 0, 134, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 802, 801, 811, 812, 804, 805,
	806, 807, 808, 809, 810, 803, 0, 0, 813, 0,
	0, 0, 0, 0, 0, 0, 0, 113, 0, 0,
	0, 0, 162, 204, 124, 0, 0, 0, 175, 308,
	0, 0, 0, 238, 0, 275, 165, 183, 128, 110,
	122, 138, 164, 214, 247, 255, 0, 0, 0, 0,
	0, 145, 0, 249, 222, 297, 0, 0, 228, 248,
	186, 286, 240, 295, 296, 166, 280, 305, 310, 267,
	153, 0, 114, 0, 235, 148, 179, 0, 0, 0,
	142, 0, 0, 0, 266, 129, 282, 202, 208, 139,
	141, 140, 123, 261, 284, 133, 143, 271, 276, 115,
	278, 294, 135, 259, 117, 292, 274, 200, 176, 177,
	116, 0, 245, 151, 161, 147, 217, 0, 160, 237,
	289, 290, 146, 313, 125, 304, 119, 126, 303, 211,
	0, 210, 306, 285, 293, 201, 194, 0, 118, 291,
	199, 193, 181, 156, 168, 233, 189, 234, 169, 206,
	205, 207, 0, 0, 0, 272, 300, 314, 191, 131,
	0, 260, 283, 0, 0, 132, 159, 155, 232, 209,
	127, 171, 269, 180, 187, 244, 312, 221, 250, 136,
	299, 268, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 120, 184, 311, 242, 158,
	301, 0, 150, 0, 0, 0, 0, 0, 0, 111,
	112, 121, 130, 137, 149, 154, 157, 163, 167, 170,
	172, 173, 174, 178, 192, 195, 196, 197, 198, 212,
	213, 215, 216, 219, 220, 223, 225, 226, 227, 229,
	230, 231, 236, 239, 241, 243, 246, 251, 252, 253,
	254, 256, 257, 258, 262, 263, 264, 265, 273, 277,
	287, 288, 298, 307, 309, 29, 281, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 152, 0, 0,
	0, 0, 182, 0, 0, 144, 190, 188, 0, 0,
	0, 224, 279, 0, 0, 0, 0, 185, 0, 302,
	270, 203, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 67, 0, 0, 497,
	0, 0, 0, 0, 0, 0, 0, 0, 134, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 113,
	0, 0, 0, 0, 162, 204, 124, 0, 0, 0,
	175, 308, 0, 0, 0, 238, 0, 275, 165, 183,
	128, 110, 122, 138, 164, 214, 247, 255, 0, 0,
	0, 0, 0, 145, 0, 249, 222, 297, 0, 0,
	228, 248, 186, 286, 240, 295, 296, 166, 280, 305,
	310, 267, 153, 0, 114, 0, 235, 148, 179, 0,
	0, 0, 142, 0, 0, 0, 266, 129, 282, 202,
	208, 139, 141, 140, 123, 261, 284, 133, 143, 271,
	276, 115, 278, 294, 135, 259, 117, 292, 274, 200,
	176, 177, 116, 0, 245, 151, 161, 147, 217, 0,
	160, 237, 289, 290, 146, 313, 125, 304, 119, 126,
	303, 211, 0, 210, 306, 285, 293, 201, 194, 0,
	118, 291, 199, 193, 181, 156, 168, 233, 189, 234,
	169, 206, 205, 207, 0, 0, 0, 272, 300, 314,
	191, 131, 0, 260, 283, 0, 0, 132, 159, 155,
	232, 209, 127, 171, 269, 180, 187, 244, 312, 221,
	250, 136, 299, 268, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 120, 184, 311,
	242, 158, 301, 0, 150, 0, 0, 0, 0, 0,
	0, 111, 112, 121, 130, 137, 149, 154, 157, 163,
	167, 170, 172, 173, 174, 178, 192, 195, 196, 197,
	198, 212, 213, 215, 216, 219, 220, 223, 225, 226,
	227, 229, 230, 231, 236, 239, 241, 243, 246, 251,
	252, 253, 254, 256, 257, 258, 262, 263, 264, 265,
	273, 277, 287, 288, 298, 307, 309, 29, 281, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 152,
	0, 0, 0, 0, 182, 0, 0, 144, 190, 188,
	0, 0, 0, 224, 279, 0, 0, 0, 0, 185,
	0, 302, 270, 203, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 67, 0,
	0, 107, 0, 0, 0, 0, 0, 0, 0, 0,
	134, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 113, 0, 0, 0, 0, 162, 204, 124, 0,
	0, 0, 175, 308, 0, 0, 0, 238, 0, 275,
	165, 183, 128, 110, 122, 138, 164, 214, 247, 255,
	0, 0, 0, 0, 0, 145, 0, 249, 222, 297,
	0, 0, 228, 248, 186, 286, 240, 295, 296, 166,
	280, 305, 310, 267, 153, 0, 114, 0, 235, 148,
	179, 0, 0, 0, 142, 0, 0, 0, 266, 129,
	282, 202, 208, 139, 141, 140, 123, 261, 284, 133,
	143, 271, 276, 115, 278, 294, 135, 259, 117, 292,
	274, 200, 176, 177, 116, 0, 245, 151, 161, 147,
	217, 0, 160, 237, 289, 290, 146, 313, 125, 304,
	119, 126, 303, 211, 0, 210, 306, 285, 293, 201,
	194, 0, 118, 291, 199, 193, 181, 156, 168, 233,
	189, 234, 169, 206, 205, 207, 0, 0, 0, 272,
	300, 314, 191, 131, 0, 260, 283, 0, 0, 132,
	159, 155, 232, 209, 127, 171, 269, 180, 187, 244,
	312, 221, 250, 136, 299, 268, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 120,
	184, 311, 242, 158, 301, 0, 150, 0, 0, 0,
	0, 0, 0, 111, 112, 121, 130, 137, 149, 154,
	157, 163, 167, 170, 172, 173, 174, 178, 192, 195,
	196, 197, 198, 212, 213, 215, 216, 219, 220, 223,
	225, 226, 227, 229, 230, 231, 236, 239, 241, 243,
	246, 251, 252, 253, 254, 256, 257, 258, 262, 263,
	264, 265, 273, 277, 287, 288, 298, 307, 309, 281,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	152, 935, 0, 0, 0, 182, 0, 0, 144, 190,
	188, 0, 0, 0, 224, 279, 0, 0, 0, 0,
	185, 0, 302, 270, 203, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 497, 0, 934, 0, 0, 0, 0, 0,
	0, 134, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 113, 0, 0, 0, 0, 162, 204, 124,
	0, 0, 0, 175, 308, 0, 0, 0, 238, 0,
	275, 165, 183, 128, 110, 122, 138, 164, 214, 247,
	255, 0, 0, 0, 0, 0, 145, 0, 249, 222,
	297, 0, 0, 228, 248, 186, 286, 240, 295, 296,
	166, 280, 305, 310, 267, 153, 0, 114, 0, 235,
	148, 179, 0, 0, 0, 142, 0, 0, 0, 266,
	129, 282, 202, 208, 139, 141, 140, 123, 261, 284,
	133, 143, 271, 276, 115, 278, 294, 135, 259, 117,
	292, 274, 200, 176, 177, 116, 0, 245, 151, 161,
	147, 217, 0, 160, 237, 289, 290, 146, 313, 125,
	304, 119, 126, 303, 211, 0, 210, 306, 285, 293,
	201, 194, 0, 118, 291, 199, 193, 181, 156, 168,
	233, 189, 234, 169, 206, 205, 207, 0, 0, 0,
	272, 300, 314, 191, 131, 0, 260, 283, 0, 0,
	132, 159, 155, 232, 209, 127, 171, 269, 180, 187,
	244, 312, 221, 250, 136, 299, 268, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	120, 184, 311, 242, 158, 301, 0, 150, 0, 0,
	0, 0, 0, 0, 111, 112, 121, 130, 137, 149,
	154, 157, 163, 167, 170, 172, 173, 174, 178, 192,
	195, 196, 197, 198, 212, 213, 215, 216, 219, 220,
	223, 225, 226, 227, 229, 230, 231, 236, 239, 241,
	243, 246, 251, 252, 253, 254, 256, 257, 258, 262,
	263, 264, 265, 273, 277, 287, 288, 298, 307, 309,
	281, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 152, 0, 0, 0, 0, 182, 0, 0, 144,
	190, 188, 0, 0, 0, 224, 279, 0, 0, 0,
	0, 185, 0, 302, 270, 203, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	67, 0, 0, 107, 0, 0, 0, 0, 0, 0,
	0, 0, 134, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 113, 0, 0, 0, 0, 162, 204,
	124, 0, 0, 0, 175, 308, 0, 0, 0, 238,
	0, 275, 165, 183, 128, 110, 122, 138, 164, 214,
	247, 255, 0, 0, 0, 0, 0, 145, 0, 249,
	222, 297, 0, 0, 228, 248, 186, 286, 240, 295,
	296, 166, 280, 305, 310, 267, 153, 0, 114, 0,
	235, 148, 179, 0, 0, 0, 142, 0, 0, 0,
	266, 129, 282, 202, 208, 139, 141, 140, 123, 261,
	284, 133, 143, 271, 276, 115, 278, 294, 135, 259,
	117, 292, 274, 200, 176, 177, 116, 0, 245, 151,
	161, 147, 217, 0, 160, 237, 289, 290, 146, 313,
	125, 304, 119, 126, 303, 211, 0, 210, 306, 285,
	293, 201, 194, 0, 118, 291, 199, 193, 181, 156,
	168, 233, 189, 234, 169, 206, 205, 207, 0, 0,
	0, 272, 300, 314, 191, 131, 0, 260, 283, 0,
	0, 132, 159, 155, 232, 209, 127, 171, 269, 180,
	187, 244, 312, 221, 250, 136, 299, 268, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 120, 184, 311, 242, 158, 301, 0, 150, 0,
	0, 0, 0, 0, 0, 111, 112, 121, 130, 137,
	149, 154, 157, 163, 167, 170, 172, 173, 174, 178,
	192, 195, 196, 197, 198, 212, 213, 215, 216, 219,
	220, 223, 225, 226, 227, 229, 230, 231, 236, 239,
	241, 243, 246, 251, 252, 253, 254, 256, 257, 258,
	262, 263, 264, 265, 273, 277, 287, 288, 298, 307,
	309, 281, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 152, 0, 0, 0, 0, 182, 0, 0,
	144, 190, 188, 0, 0, 0, 224, 279, 0, 0,
	0, 0, 185, 0, 302, 270, 203, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 67, 0, 0, 497, 0, 0, 0, 0, 0,
	0, 0, 0, 134, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 113, 0, 0, 0, 0, 162,
	204, 124, 0, 0, 0, 175, 308, 0, 0, 0,
	238, 0, 275, 165, 183, 128, 110, 122, 138, 164,
	214, 247, 255, 0, 0, 0, 0, 0, 145, 0,
	249, 222, 297, 0, 0, 228, 248, 186, 286, 240,
	295, 296, 166, 280, 305, 310, 267, 153, 0, 114,
	0, 235, 148, 179, 0, 0, 0, 142, 0, 0,
	0, 266, 129, 282, 202, 208, 139, 141, 140, 123,
	261, 284, 133, 143, 271, 276, 115, 278, 294, 135,
	259, 117, 292, 274, 200, 176, 177, 116, 0, 245,
	151, 161, 147, 217, 0, 160, 237, 289, 290, 146,
	313, 125, 304, 119, 126, 303, 211, 0, 210, 306,
	285, 293, 201, 194, 0, 118, 291, 199, 193, 181,
	156, 168, 233, 189, 234, 169, 206, 205, 207, 0,
	0, 0, 272, 300, 314, 191, 131, 0, 260, 283,
	0, 0, 132, 159, 155, 232, 209, 127, 171, 269,
	180, 187, 244, 312, 221, 250, 136, 299, 268, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 120, 184, 311, 242, 158, 301, 0, 150,
	0, 0, 0, 0, 0, 0, 111, 112, 121, 130,
	137, 149, 154, 157, 163, 167, 170, 172, 173, 174,
	178, 192, 195, 196, 197, 198, 212, 213, 215, 216,
	219, 220, 223, 225, 226, 227, 229, 230, 231, 236,
	239, 241, 243, 246, 251, 252, 253, 254, 256, 257,
	258, 262, 263, 264, 265, 273, 277, 287, 288, 298,
	307, 309, 281, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 0, 0, 0, 0, 0, 0,
	0, 0, 905, 152, 0, 0, 0, 0, 182, 0,
	0, 144, 190, 188, 0, 0, 0, 224, 279, 0,
	0, 0, 0, 185, 0, 302, 270, 203, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 107, 0, 0, 0, 0,
	0, 0, 0, 0, 134, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 113, 0, 0, 0, 0,
	162, 204, 124, 0, 0, 0, 175, 308, 0, 0,
	0, 238, 0, 275, 165, 183, 128, 110, 122, 138,
	164, 214, 247, 255, 0, 0, 0, 0, 0, 145,
	0, 249, 222, 297, 0, 0, 228, 248, 186, 286,
	240, 295, 296, 166, 280, 305, 310, 267, 153, 0,
	114, 0, 235, 148, 179, 0, 0, 0, 142, 0,
	0, 0, 266, 129, 282, 202, 208, 139, 141, 140,
	123, 261, 284, 133, 143, 271, 276, 115, 278, 294,
	135, 259, 117, 292, 274, 200, 176, 177, 116, 0,
	245, 151, 161, 147, 217, 0, 160, 237, 289, 290,
	146, 313, 125, 304, 119, 126, 303, 211, 0, 210,
	306, 285, 293, 201, 194, 0, 118, 291, 199, 193,
	181, 156, 168, 233, 189, 234, 169, 206, 205, 207,
	0, 0, 0, 272, 300, 314, 191, 131, 0, 260,
	283, 0, 0, 132, 159, 155, 232, 209, 127, 171,
	269, 180, 187, 244, 312, 221, 250, 136, 299, 268,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 120, 184, 311, 242, 158, 301, 0,
	150, 0, 0, 0, 0, 0, 0, 111, 112, 121,
	130, 137, 149, 154, 157, 163, 167, 170, 172, 173,
	174, 178, 192, 195, 196, 197, 198, 212, 213, 215,
	216, 219, 220, 223, 225, 226, 227, 229, 230, 231,
	236, 239, 241, 243, 246, 251, 252, 253, 254, 256,
	257, 258, 262, 263, 264, 265, 273, 277, 287, 288,
	298, 307, 309, 281, 0, 0, 0, 472, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 152, 0, 0, 0, 0, 182,
	0, 0, 144, 190, 188, 0, 0, 0, 224, 279,
	0, 0, 0, 0, 185, 0, 302, 270, 203, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 107, 0, 0, 0,
	0, 0, 0, 0, 0, 134, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 113, 0, 0, 0,
	0, 162, 204, 124, 0, 0, 0, 175, 308, 0,
	0, 0, 238, 0, 275, 165, 183, 128, 110, 122,
	138, 164, 214, 247, 255, 0, 0, 0, 0, 0,
	145, 0, 249, 222, 297, 0, 0, 228, 248, 186,
	286, 240, 295, 296, 166, 280, 305, 310, 267, 153,
	0, 114, 0, 235, 148, 179, 0, 0, 0, 142,
	0, 0, 0, 266, 129, 282, 202, 208, 139, 141,
	140, 123, 261, 284, 133, 143, 271, 276, 115, 278,
	294, 135, 259, 117, 292, 274, 200, 176, 177, 116,
	0, 245, 151, 161, 147, 217, 0, 160, 237, 289,
	290, 146, 313, 125, 304, 119, 126, 303, 211, 0,
	210, 306, 285, 293, 201, 194, 0, 118, 291, 199,
	193, 181, 156, 168, 233, 189, 234, 169, 206, 205,
	207, 0, 0, 0, 272, 300, 314, 191, 131, 0,
	260, 283, 0, 0, 132, 159, 155, 232, 209, 127,
	171, 269, 180, 187, 244, 312, 221, 250, 136, 299,
	268, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 120, 184, 311, 242, 158, 301,
	0, 150, 0, 0, 0, 0, 0, 0, 111, 112,
	121, 130, 137, 149, 154, 157, 163, 167, 170, 172,
	173, 174, 178, 192, 195, 196, 197, 198, 212, 213,
	215, 216, 219, 220, 223, 225, 226, 227, 229, 230,
	231, 236, 239, 241, 243, 246, 251, 252, 253, 254,
	256, 257, 258, 262, 263, 264, 265, 273, 277, 287,
	288, 298, 307, 309, 281, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 152, 0, 0, 0, 0,
	182, 0, 0, 144, 190, 188, 0, 0, 0, 224,
	279, 0, 0, 0, 0, 185, 0, 302, 270, 203,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 107, 0, 0,
	0, 0, 0, 0, 0, 0, 134, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 113, 0, 0,
	0, 0, 162, 204, 124, 0, 104, 0, 175, 308,
	0, 0, 0, 238, 0, 275, 165, 183, 128, 110,
	122, 138, 164, 214, 247, 255, 0, 0, 0, 0,
	0, 145, 0, 249, 222, 297, 0, 0, 228, 248,
	186, 286, 240, 295, 296, 166, 280, 305, 310, 267,
	153, 0, 114, 0, 235, 148, 179, 0, 0, 0,
	142, 0, 0, 0, 266, 129, 282, 202, 208, 139,
	141, 140, 123, 261, 284, 133, 143, 271, 276, 115,
	278, 294, 135, 259, 117, 292, 274, 200, 176, 177,
	116, 0, 245, 151, 161, 147, 217, 0, 160, 237,
	289, 290, 146, 313, 125, 304, 119, 126, 303, 211,
	0, 210, 306, 285, 293, 201, 194, 0, 118, 291,
	199, 193, 181, 156, 168, 233, 189, 234, 169, 206,
	205, 207, 0, 0, 0, 272, 300, 314, 191, 131,
	0, 260, 283, 0, 0, 132, 159, 155, 232, 209,
	127, 171, 269, 180, 187, 244, 312, 221, 250, 136,
	299, 268, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 120, 184, 311, 242, 158,
	301, 0, 150, 0, 0, 0, 0, 0, 0, 111,
	112, 121, 130, 137, 149, 154, 157, 163, 167, 170,
	172, 173, 174, 178, 192, 195, 196, 197, 198, 212,
	213, 215, 216, 219, 220, 223, 225, 226, 227, 229,
	230, 231, 236, 239, 241, 243, 246, 251, 252, 253,
	254, 256, 257, 258, 262, 263, 264, 265, 273, 277,
	287, 288, 298, 307, 309, 281, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 152, 0, 0, 0,
	0, 182, 0, 0, 144, 190, 188, 0, 0, 0,
	224, 279, 0, 0, 0, 0, 185, 0, 302, 270,
	203, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 497, 0,
	0, 0, 0, 0, 0, 0, 0, 134, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 113, 0,
	0, 0, 0, 162, 204, 124, 0, 0, 0, 175,
	308, 0, 0, 0, 238, 0, 275, 165, 183, 128,
	110, 122, 138, 164, 214, 247, 255, 0, 0, 0,
	0, 0, 145, 0, 249, 222, 297, 0, 0, 228,
	248, 186, 286, 240, 295, 296, 166, 280, 305, 310,
	267, 153, 0, 114, 0, 235, 148, 179, 0, 0,
	0, 142, 0, 0, 0, 266, 129, 282, 202, 208,
	139, 141, 140, 123, 261, 284, 133, 143, 271, 276,
	115, 278, 294, 135, 259, 117, 292, 274, 200, 176,
	177, 116, 0, 245, 151, 161, 147, 217, 0, 160,
	237, 289, 290, 146, 313, 125, 304, 119, 126, 303,
	211, 0, 210, 306, 285, 293, 201, 194, 0, 118,
	291, 199, 193, 181, 156, 168, 233, 189, 234, 169,
	206, 205, 207, 0, 0, 0, 272, 300, 314, 191,
	131, 0, 260, 283, 0, 0, 132, 159, 155, 232,
	209, 127, 171, 269, 180, 187, 244, 312, 221, 250,
	136, 299, 268, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 120, 184, 311, 242,
	158, 301, 0, 150, 0, 0, 0, 0, 0, 0,
	111, 112, 121, 130, 137, 149, 154, 157, 163, 167,
	170, 172, 173, 174, 178, 192, 195, 196, 197, 198,
	212, 213, 215, 216, 219, 220, 223, 225, 226, 227,
	229, 230, 231, 236, 239, 241, 243, 246, 251, 252,
	253, 254, 256, 257, 258, 262, 263, 264, 265, 273,
	277, 287, 288, 298, 307, 309, 281, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 152, 0, 0,
	0, 0, 182, 0, 0, 144, 190, 188, 0, 0,
	0, 224, 279, 0, 0, 0, 0, 185, 0, 302,
	270, 203, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 107,
	0, 0, 0, 0, 0, 0, 0, 0, 134, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 113,
	0, 0, 0, 0, 162, 204, 124, 0, 0, 0,
	175, 308, 0, 0, 0, 238, 0, 275, 165, 183,
	128, 110, 122, 138, 164, 214, 247, 255, 0, 0,
	0, 0, 0, 145, 0, 249, 222, 297, 0, 0,
	228, 248, 186, 286, 240, 295, 296, 166, 280, 305,
	310, 267, 153, 0, 114, 0, 235, 148, 179, 0,
	0, 0, 142, 0, 0, 0, 266, 129, 282, 202,
	208, 139, 141, 140, 123, 261, 284, 133, 143, 271,
	276, 115, 278, 294, 135, 259, 117, 292, 274, 200,
	176, 177, 116, 0, 245, 151, 161, 147, 217, 0,
	160, 237, 289, 290, 146, 313, 125, 304, 119, 126,
	303, 211, 0, 210, 306, 285, 293, 201, 194, 0,
	118, 291, 199, 193, 181, 156, 168, 233, 189, 234,
	169, 206, 205, 207, 0, 0, 0, 272, 300, 314,
	191, 131, 0, 260, 283, 0, 0, 132, 159, 155,
	232, 209, 127, 171, 269, 180, 187, 244, 312, 221,
	250, 136, 299, 268, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 120, 184, 311,
	242, 158, 301, 0, 150, 0, 0, 0, 0, 0,
	0, 111, 112, 121, 130, 137, 149, 154, 157, 163,
	167, 170, 172, 173, 174, 178, 192, 195, 196, 197,
	198, 212, 213, 215, 216, 219, 220, 223, 225, 226,
	227, 229, 230, 231, 236, 239, 241, 243, 246, 251,
	252, 253, 254, 256, 257, 258, 262, 263, 264, 265,
	273, 277, 287, 288, 298, 307, 309, 281, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 152, 0,
	0, 0, 0, 182, 0, 0, 144, 190, 188, 0,
	0, 0, 224, 279, 0, 0, 0, 0, 185, 0,
	302, 270, 203, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	380, 0, 0, 0, 0, 0, 0, 0, 0, 134,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	113, 0, 0, 0, 0, 162, 204, 124, 0, 0,
	0, 175, 308, 0, 0, 0, 238, 0, 275, 165,
	183, 128, 110, 122, 138, 164, 214, 247, 255, 0,
	0, 0, 0, 0, 145, 0, 249, 222, 297, 0,
	0, 228, 248, 186, 286, 240, 295, 296, 166, 280,
	305, 310, 267, 153, 0, 114, 0, 235, 148, 179,
	0, 0, 0, 142, 0, 0, 0, 266, 129, 282,
	202, 208, 139, 141, 140, 123, 261, 284, 133, 143,
	271, 276, 115, 278, 294, 135, 259, 117, 292, 274,
	200, 176, 177, 116, 0, 245, 151, 161, 147, 217,
	0, 160, 237, 289, 290, 146, 313, 125, 304, 119,
	489, 303, 211, 0, 210, 306, 285, 293, 201, 194,
	0, 118, 291, 199, 193, 181, 156, 168, 233, 189,
	234, 169, 206, 205, 207, 0, 0, 0, 272, 300,
	314, 191, 131, 0, 260, 283, 0, 0, 132, 159,
	155, 232, 490, 488, 171, 269, 180, 187, 244, 312,
	221, 250, 136, 299, 268, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 120, 184,
	311, 242, 158, 301, 0, 150, 0, 0, 0, 0,
	0, 0, 111, 112, 121, 130, 137, 149, 154, 157,
	163, 167, 170, 172, 173, 174, 178, 192, 195, 196,
	197, 198, 212, 213, 215, 216, 219, 220, 223, 225,
	226, 227, 229, 230, 231, 236, 239, 241, 243, 246,
	251, 252, 253, 254, 256, 257, 258, 262, 263, 264,
	265, 273, 277, 287, 288, 298, 307, 309, 281, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 152,
	0, 0, 0, 0, 182, 0, 0, 144, 190, 188,
	0, 0, 0, 224, 279, 0, 0, 0, 0, 185,
	0, 302, 270, 203, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 380, 0, 0, 0, 0, 0, 0, 0, 0,
	134, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 113, 0, 0, 0, 0, 162, 204, 124, 0,
	0, 0, 175, 308, 0, 0, 0, 238, 0, 275,
	165, 183, 128, 110, 122, 138, 164, 214, 247, 255,
	0, 0, 0, 0, 0, 145, 0, 249, 222, 297,
	0, 0, 228, 248, 186, 286, 240, 295, 296, 166,
	280, 305, 310, 267, 153, 0, 114, 0, 235, 148,
	179, 0, 0, 0, 142, 0, 0, 0, 266, 129,
	282, 202, 208, 139, 141, 140, 123, 261, 284, 133,
	143, 271, 276, 115, 278, 294, 135, 259, 117, 292,
	274, 200, 176, 177, 116, 0, 245, 151, 161, 147,
	217, 0, 160, 237, 289, 290, 146, 313, 125, 304,
	119, 126, 303, 211, 0, 210, 306, 285, 293, 201,
	194, 0, 118, 291, 199, 193, 181, 156, 168, 233,
	189, 234, 169, 206, 205, 207, 0, 0, 0, 272,
	300, 314, 191, 131, 0, 260, 283, 0, 0, 132,
	159, 155, 232, 209, 127, 171, 269, 180, 187, 244,
	312, 221, 250, 136, 299, 268, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 120,
	184, 311, 242, 158, 301, 0, 150, 0, 0, 0,
	0, 0, 0, 111, 112, 121, 130, 137, 149, 154,
	157, 163, 167, 170, 172, 173, 174, 178, 192, 195,
	196, 197, 198, 212, 213, 215, 216, 219, 220, 223,
	225, 226, 227, 229, 230, 231, 236, 239, 241, 243,
	246, 251, 252, 253, 254, 256, 257, 258, 262, 263,
	264, 265, 273, 277, 287, 288, 298, 307, 309, 281,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	152, 0, 0, 0, 0, 182, 0, 0, 144, 190,
	188, 0, 0, 0, 224, 279, 0, 0, 0, 0,
	185, 0, 302, 270, 203, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 380, 0, 0, 0, 0, 0, 0, 0,
	0, 134, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 113, 0, 0, 0, 0, 162, 204, 124,
	0, 0, 0, 175, 308, 0, 0, 0, 238, 0,
	275, 165, 183, 128, 110, 122, 138, 164, 214, 247,
	255, 0, 0, 0, 0, 0, 145, 0, 249, 222,
	297, 0, 0, 228, 248, 186, 286, 240, 295, 296,
	166, 280, 305, 310, 267, 153, 0, 114, 0, 235,
	148, 179, 0, 0, 0, 142, 0, 0, 0, 266,
	129, 282, 202, 208, 139, 141, 140, 123, 261, 284,
	133, 143, 271, 276, 115, 278, 926, 135, 259, 117,
	292, 274, 200, 176, 177, 116, 0, 245, 151, 161,
	147, 217, 0, 160, 237, 289, 290, 146, 313, 125,
	304, 119, 489, 303, 211, 0, 210, 306, 285, 293,
	201, 194, 0, 118, 291, 199, 193, 181, 156, 168,
	233, 189, 234, 169, 206, 205, 207, 0, 0, 0,
	272, 300, 314, 191, 131, 0, 260, 283, 0, 0,
	132, 159, 155, 232, 490, 488, 171, 269, 180, 187,
	244, 312, 221, 250, 136, 299, 268, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	120, 184, 311, 242, 158, 301, 0, 150, 0, 0,
	0, 0, 0, 0, 111, 112, 121, 130, 137, 149,
	154, 157, 163, 167, 170, 172, 173, 174, 178, 192,
	195, 196, 197, 198, 212, 213, 215, 216, 219, 220,
	223, 225, 226, 227, 229, 230, 231, 236, 239, 241,
	243, 246, 251, 252, 253, 254, 256, 257, 258, 262,
	263, 264, 265, 273, 277, 287, 288, 298, 307, 309,
	281, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 152, 0, 0, 0, 0, 182, 0, 0, 144,
	190, 188, 0, 0, 0, 224, 279, 0, 0, 0,
	0, 185, 0, 302, 270, 203, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 380, 0, 0, 0, 0, 0, 0,
	0, 0, 134, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 113, 0, 0, 0, 0, 162, 204,
	124, 0, 0, 0, 175, 308, 0, 0, 0, 238,
	0, 275, 165, 183, 128, 110, 122, 138, 164, 214,
	247, 255, 0, 0, 0, 0, 0, 145, 0, 249,
	222, 297, 0, 0, 228, 248, 186, 286, 240, 295,
	296, 166, 280, 305, 310, 267, 153, 0, 114, 0,
	235, 148, 179, 0, 0, 0, 142, 0, 0, 0,
	266, 129, 282, 202, 208, 139, 141, 140, 123, 261,
	284, 133, 143, 271, 276, 115, 278, 480, 135, 259,
	117, 292, 274, 200, 176, 177, 116, 0, 245, 151,
	161, 147, 217, 0, 160, 237, 289, 290, 146, 313,
	125, 304, 119, 489, 303, 211, 0, 210, 306, 285,
	293, 201, 194, 0, 118, 291, 199, 193, 181, 156,
	168, 233, 189, 234, 169, 206, 205, 207, 0, 0,
	0, 272, 300, 314, 191, 131, 0, 260, 283, 0,
	0, 132, 159, 155, 232, 490, 488, 483, 482, 180,
	187, 244, 312, 221, 250, 136, 299, 268, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 120, 184, 311, 242, 158, 301, 0, 150, 0,
	0, 0, 0, 0, 0, 111, 112, 121, 130, 137,
	149, 154, 157, 163, 167, 170, 172, 173, 174, 178,
	192, 195, 196, 197, 198, 212, 213, 215, 216, 219,
	220, 223, 225, 226, 227, 229, 230, 231, 236, 239,
	241, 243, 246, 251, 252, 253, 254, 256, 257, 258,
	262, 263, 264, 265, 273, 277, 287, 288, 298, 307,
	309, 29, 0, 60, 32, 33, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 57, 0, 0, 0, 0,
	0, 66, 0, 0, 0, 34, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 67, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1996, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 36, 62, 40, 39, 42, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1997, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 43, 65, 64, 0,
	0, 0, 0, 41, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 56, 0, 1998, 63, 0,
	47, 48, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	61,
}
var yyPact = [...]int{

	2570, -1000, -307, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1318, 1376, -1000,
	-1000, -1000, -1000, -1000, -1000, 457, 186, -1000, -1000, 212,
	56, 19937, 211, 2229, 20759, -1000, -1000, -1000, -1000, 145,
	20759, -1000, -1000, -100, -109, -1000, 6, 938, 1227, 1053,
	-1000, -1000, 188, 2, -1000, -1000, -1000, -1000, -1000, -1000,
	1291, 1313, 1100, 1281, 1159, -1000, 9248, 182, 182, 19526,
	22403, -1000, 20759, 7183, 207, 20759, -161, 166, 166, 81,
	166, -1000, 454, -1000, -1000, -1000, 20759, 167, 20348, 167,
	167, 167, 167, 167, 20759, -1000, 273, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 20759, 937, 1244, 5941, 97,
	5941, 5941, -1000, 489, -1000, 70, 64, 68, 5941, 5,
	510, -1000, 5941, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	178, 1053, 453, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1243, 716, 1096, -90, 765, 210, 20759, -1000, -1000, 1253,
	12126, 12537, 1318, -1000, 1053, -1000, -1000, -1000, 1216, -1000,
	-1000, 498, 1355, -1000, 15003, 270, -1000, 12126, 3047, 1028,
	-1000, -1000, 1028, -1000, -1000, 248, -1000, -1000, 13770, 13770,
	13770, 13770, 13770, 13770, 13770, 13770, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1028, -1000, 11304, 1028, 1028, 1028, 1028, 1028,
	1028, 1028, 1028, 1028, 1028, 12126, 1028, 1028, 1028, 1028,
	1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
	1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
	1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
	1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
	19115, 18293, 20759, 1041, 988, -1000, -1000, 266, 781, 21992,
	-112, -1000, -1000, -1000, 436, 17882, -1000, 264, -1000, 1239,
	-1000, -1000, 936, -1000, 3049, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 20348, 1277, 171, 931, 484, 928, 926, 925,
	20759, 923, 1026, 196, 20759, 1269, 1127, 20759, 921, 920,
	908, 906, -1000, 8425, -1000, 5941, 5941, -1000, -1000, -1000,
	166, 166, 5941, 5941, 5941, 20759, 20759, 20759, -1000, -1000,
	20759, -1000, -1000, 496, 496, 5941, 5941, -1000, 1352, 485,
	485, -1000, -1000, -1000, -1000, 12126, -1000, 13770, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 901, -1000, -1000, 87, -1000,
	750, -1000, 11715, -305, -1000, -1000, -1000, 20759, 5941, -1000,
	1371, 381, 692, 253, 1025, -1000, 682, 1251, 1028, 1028,
	1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
	1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
	1028, 1028, 1028, 1028, 1028, 1028, 1291, 765, 1159, 763,
	1105, -1000, -1000, -1000, 20759, -1000, 12126, 12126, 709, -1000,
	16236, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 6769, 390, 13770, 706, 439, 13770, 13770,
	13770, 13770, 13770, 13770, 13770, 13770, 13770, 13770, 13770, 13770,
	13770, 13770, 13770, 611, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 896, -1000, 1053, 825, 825, 284, 284, 284,
	284, 284, 284, 284, 16647, 1274, 765, 917, 555, 11304,
	10070, 10070, 765, 12126, 12126, 10892, 10481, 10070, 10070, 1274,
	450, 555, 21581, -1000, -1000, 13359, -1000, -1000, -1000, -1000,
	-1000, 765, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	20348, 20348, 10070, 10070, 10070, 10070, 765, 765, 10070, 10070,
	10070, 10070, 10070, 765, 765, 765, 765, 1274, 1274, 10070,
	10070, 10070, 1274, 10070, 10070, 1274, 10070, 10070, 10070, 10070,
	1274, 10070, 10070, 10070, 93, 20759, -1000, 983, 1060, -1000,
	-1000, -1000, 1276, 17471, 14592, 93, 948, 18293, 20759, -1000,
	-1000, 18293, 20759, 6355, 21170, 781, -112, 1014, -1000, -131,
	-120, 8837, 282, -1000, -1000, -1000, 7597, -1000, 4285, 8011,
	-1000, -72, -1000, -1000, -1000, 1056, -1000, 1056, 137, -31,
	1056, 1056, 1056, 1056, 1056, -37, -37, -37, -37, -30,
	-1000, -1000, -1000, -1000, -1000, 1095, 1087, -1000, 1056, 1056,
	1056, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1071,
	156, 1064, 1064, 1064, 1064, 1064, 1062, -1000, 20759, 5941,
	1256, 5941, 74, 1078, -1000, -1000, 20759, 20759, 1024, -1000,
	20759, 1023, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 881, 873, -1000, -1000, -1000, -1000, -1000, -1000,
	488, -1000, 749, 12126, -1000, -1000, -1000, 20759, 1275, 20759,
	20759, 496, 555, 495, -1000, 1020, -1000, 411, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 912, 1258, 748, 838, -1000, -1000, 1172, 12126,
	12126, 7597, 12537, -1000, -1000, -1000, -1000, 1253, -1000, 1274,
	1299, -1000, 1184, 1181, -1000, -1000, -1000, 390, 435, -1000,
	-1000, 604, -1000, -1000, -1000, -1000, 251, 1028, -1000, 2931,
	-1000, -1000, -1000, -1000, 706, 13770, 13770, 13770, 495, 2931,
	2782, 557, 517, 284, 402, 402, 286, 286, 286, 286,
	286, 467, 467, -1000, -1000, -1000, 765, -1000, -1000, -1000,
	10070, -1000, 12126, -1000, 765, 870, -1000, -1000, 555, 247,
	870, -1000, 576, 690, 386, 1348, 870, 352, 1347, 870,
	870, 870, 10070, 505, -1000, 12126, 765, -1000, 585, 1019,
	1018, 870, 765, 1017, 870, 870, -172, -172, 765, 870,
	765, 870, 870, -172, -172, -172, -172, 10070, 10070, 870,
	870, 870, 10070, 870, 870, 10070, 870, 870, 870, 870,
	10070, 870, 870, 870, 959, 1028, -1000, 21170, 18293, 18293,
	18293, 18293, 18293, -1000, 1156, 1155, -1000, 1149, 1138, 1150,
	15825, -1000, 879, 17471, -1000, 1028, -1000, 15414, 245, 206,
	204, 203, -1000, -1000, -1000, 1332, 18293, 1013, -1000, 1013,
	-1000, 244, -1000, -1000, 1014, -112, -123, -1000, -1000, -1000,
	-1000, 555, -1000, 678, -1000, 241, 1009, 3871, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1076, 872, -1000, 1201, 346,
	433, 788, 1190, -1000, -1000, 446, -87, -1000, -1000, 632,
	-37, -37, 1056, 1056, 133, 1056, -1000, -37, -1000, -1000,
	-1000, 282, 1236, 282, 282, 282, 282, -37, 747, 747,
	-1000, -1000, -1000, -1000, 615, -1000, 1071, -1000, 582, -1000,
	-1000, -1000, -1000, 1123, 20348, 1053, 1271, -1000, -1000, -1000,
	1346, -1000, -1000, 170, 194, -1000, 5941, 20759, 5941, 5941,
	1332, 853, 845, -1000, 555, 485, 496, 1230, -1000, -1000,
	-1000, -1000, 13770, 87, 825, -1000, 93, 209, -1000, -1000,
	355, 255, 341, 150, 150, -1000, 409, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 91, 1169, 555, 555,
	-1000, -1000, 20759, -1000, -1000, -1000, -1000, 929, 9248, -1000,
	-1000, -1000, 5527, 10070, -1000, 495, 2931, 2566, -1000, 13770,
	-1000, 765, 555, -1000, 10070, -1000, 5113, -1000, 103, 611,
	103, 13770, 13770, -1000, 13770, 13770, -1000, -206, -1000, 1034,
	465, -1000, 12126, 725, -1000, -1000, 13770, 13770, -1000, -1000,
	-1000, -1000, -1000, 18704, -1000, -172, -172, -172, -172, -172,
	-1000, -1000, -1000, -1000, 870, 870, -172, -172, -172, 870,
	-172, -172, 870, -172, -172, -172, -172, 870, -172, -172,
	-172, 1122, 21170, 1028, -1000, 17059, 20348, 1035, 1060, 1082,
	1121, 1094, -1000, -1000, -1000, -1000, 1142, -1000, 1139, -1000,
	-1000, -1000, -1000, 20348, 13770, 245, -1000, 1028, 1028, 1028,
	1318, 12126, 1013, -1000, -1000, 301, -1000, -1000, -143, -145,
	-1000, -1000, -1000, 7183, 4285, -1000, 4285, 20348, 122, -1000,
	788, -1000, -1000, 788, -1000, -1000, -1000, 1067, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 506, 13770, 1369, -1000, 1200,
	-1000, 1199, 746, -1000, -1000, 918, 282, 282, -37, -1000,
	-1000, 1056, -1000, 282, -1000, 407, -1000, -1000, -1000, -1000,
	282, 868, -1000, 866, 1008, -1000, 851, 20759, -1000, -1000,
	-1000, 1120, -1000, -1000, -1000, 913, 992, -1000, 3049, 843,
	841, 840, 20759, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	496, -1000, 13770, 2931, -1000, -1000, -37, 20759, -1000, 756,
	-1000, 788, 263, -1000, -1000, -1000, 839, 1190, -1000, -1000,
	837, -1000, 834, 20348, 1194, 806, 20759, 20348, -1000, -1000,
	794, 803, 12126, -1000, 20348, -1000, -1000, 1328, 18293, -1000,
	-1000, -1000, -1000, 765, -1000, 13770, 2931, -1000, -1000, -1000,
	236, 765, 1056, 1056, -1000, 1056, 1064, -1000, 1056, -9,
	1056, -11, 765, 765, 2443, 2313, 1061, 846, 1028, -168,
	-1000, 555, 12126, 2330, 1541, -1000, 305, -1000, -1000, -1000,
	-1000, -1000, -172, -172, -1000, -1000, -1000, -1000, -172, -1000,
	-1000, -172, -1000, -1000, -1000, -1000, -172, -1000, -1000, -1000,
	-1000, 1247, 947, 977, -1000, -1000, 9659, 765, 824, 230,
	822, -1000, 1318, -1000, -1000, 12126, 1059, -1000, 12126, -1000,
	-1000, -1000, 822, 691, -1000, 20348, 20348, 20348, 1291, 555,
	-1000, -1000, -1000, -1000, 3871, -1000, 819, -1000, 1056, -1000,
	1190, -1000, -1000, 20348, -1000, 2931, -140, -1000, -1000, -1000,
	-1000, -1000, -1000, 282, -1000, -1000, -1000, -1000, -1000, -37,
	744, -37, 570, -1000, 566, 1047, -1000, 1053, 20759, 59,
	170, -1000, 3049, 3049, 3049, -1000, -1000, 2931, -86, -1000,
	794, 106, 3049, -1000, 1062, 346, 122, -1000, -1000, -1000,
	-1000, 799, 330, -1000, 184, 106, 794, 555, 1255, 1326,
	1312, 1013, 9248, -1000, -1000, 2931, 4699, -1000, -1000, 144,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 13770, 13770,
	13770, 13770, 13770, 765, 743, 555, 13770, 13770, 765, 1306,
	-1000, -1000, -1000, -1000, -1000, 1187, -1000, 1028, -1000, -1000,
	1016, 20348, 20348, -1000, 20348, 1291, 555, 20348, 555, 14181,
	-1000, 15825, 810, -1000, 810, 810, -1000, 237, 20348, 1251,
	793, -1000, -1000, 282, -1000, 282, 852, 811, 20348, -1000,
	1286, -1000, 59, -1000, 717, 33, 41, -1000, 31, 30,
	28, 24, 22, -1000, -1000, -1000, -1000, 1217, 1212, 787,
	-1000, -1000, 790, -1000, 1045, 788, -1000, -1000, 782, -1000,
	-1000, 20348, -1000, 106, 1028, -1000, 12537, 12537, 1328, -1000,
	-1000, -1000, -1000, 585, 585, 585, 585, 18, -1000, -1000,
	585, 585, -1000, 12126, 1368, -1000, 1028, -1000, 1053, 228,
	-1000, -1000, -1000, 786, -1000, 245, 20348, -1000, -1000, -1000,
	237, -1000, 780, 409, 715, -1000, -1000, 113, -1000, -1000,
	-1000, -1000, 779, -1000, 63, 22815, -1000, -1000, -1000, -1000,
	-1000, -1000, 1225, 1221, 49, 174, 1204, 1206, 1298, -1000,
	-1000, -1000, 446, 20348, 1062, -1000, -1000, -1000, -1000, 90,
	-1000, 555, -1000, 982, -1000, 555, -1000, 1326, -1000, -1000,
	-1000, -1000, -1000, 765, 123, -230, -1000, -1000, 1029, 21170,
	977, 765, 20348, -1000, -1000, -1000, -1000, -1000, 542, -1000,
	20759, 237, 60, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 12126, 12126, 22815, -1000,
	-1000, -1000, -1000, 1044, 526, 1212, 1296, 1210, 1208, -1000,
	697, -1000, 776, 1043, -1000, 774, -1000, 20348, 12537, -1000,
	-1000, 1167, -209, -235, 765, 781, -1000, -1000, -1000, 1032,
	-1000, 237, 55, -1000, 445, 694, -308, -1000, -1000, 20348,
	1215, -1000, 687, -1000, 1295, 1293, -1000, 237, 20348, -1000,
	90, 1177, -1000, -1000, 1163, -1000, -1000, 20348, -1000, 757,
	711, 589, -1000, 12126, 22815, 3643, 769, -1000, -1000, 646,
	645, -1000, 764, -1000, 85, -228, 761, 169, -1000, -1000,
	475, 22815, -1000, 679, -310, -1000, -1000, -1000, -1000, -1000,
	237, 76, -231, 1119, -1000, -1000, -1000, -1000, -1000, -1000,
	22815, -1000, -311, 22815, 2811, -1000, 1028, -237, 1118, 1115,
	1338, -1000, -312, 3546, -313, 165, 22815, 558, -1000, 12126,
	12948, -1000, -1000, 1367, -1000, 1361, 336, 336, 3527, 474,
	22815, -1000, -314, 161, 22815, -1000, 671, 585, 765, -1000,
	-1000, -1000, 127, 630, -1000, -1000, -1000, 3430, -1000, -318,
	22815, -1000, -1000, -1000, -1000, -1000, 160, 3316, -319, -1000,
	154, 22815, -1000,
}
var yyPgo = [...]int{

	0, 1708, 221, 751, 1707, 1700, 1699, 18, 16, 14,
	20, 1695, 1476, 1471, 1464, 1462, 1694, 1454, 1692, 7,
	1691, 1690, 1452, 1689, 2, 1688, 8, 1687, 5, 91,
	1686, 1685, 1684, 1683, 1681, 1450, 1680, 1679, 1676, 1673,
	1441, 1433, 1672, 1671, 1427, 1396, 1670, 1666, 1394, 1390,
	1386, 1663, 119, 1661, 1660, 1627, 212, 1626, 97, 1625,
	1622, 1619, 72, 1617, 1481, 75, 53, 71, 568, 1616,
	22, 70, 90, 78, 1615, 65, 1614, 1612, 104, 1607,
	1604, 1603, 80, 1601, 1600, 2177, 1598, 1597, 98, 1595,
	36, 33, 58, 1593, 1592, 1590, 1589, 76, 228, 1586,
	1584, 1582, 55, 1580, 1579, 137, 1578, 1576, 1575, 84,
	44, 1574, 37, 34, 52, 1573, 369, 24, 1567, 82,
	1566, 1565, 30, 27, 1564, 31, 1560, 38, 1559, 92,
	66, 814, 13, 42, 35, 47, 86, 1558, 10, 1557,
	87, 62, 59, 32, 93, 1556, 94, 77, 1555, 1552,
	637, 1551, 1550, 89, 1549, 48, 83, 546, 100, 64,
	1548, 1545, 1544, 1542, 57, 95, 1541, 1540, 149, 268,
	118, 218, 23, 1547, 190, 96, 1534, 28, 1532, 1875,
	74, 49, 69, 1529, 1528, 67, 45, 40, 1525, 1524,
	1522, 1521, 1520, 1519, 1338, 1518, 1516, 1515, 1514, 111,
	116, 1513, 1512, 88, 79, 1511, 1510, 1509, 1508, 1507,
	85, 54, 103, 1504, 68, 63, 1503, 1501, 1498, 1497,
	39, 29, 1496, 1495, 1494, 61, 56, 1493, 43, 25,
	6, 46, 11, 50, 1492, 12, 1491, 81, 4, 3,
	9, 1490, 1488, 1487, 1480, 1479, 51, 1473, 1460, 41,
	1457, 1447, 1443, 26, 1430, 1407, 1392, 1388, 0, 180,
	99, 1384, 1357, 123,
}
var yyR1 = [...]int{

	0, 256, 257, 257, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 51,
	2, 2, 2, 6, 3, 3, 4, 4, 5, 5,
	7, 7, 55, 55, 8, 9, 9, 9, 9, 260,
	260, 80, 80, 78, 78, 79, 79, 140, 140, 10,
	10, 10, 10, 144, 144, 147, 147, 147, 148, 148,
	148, 148, 183, 183, 132, 133, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 244, 244, 245, 245, 246,
	246, 246, 246, 247, 247, 248, 248, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 23, 167, 167,
	33, 33, 34, 34, 34, 128, 128, 128, 11, 11,
	11, 11, 11, 18, 20, 20, 25, 25, 26, 21,
	21, 21, 21, 27, 27, 28, 22, 22, 32, 32,
	30, 30, 29, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 17, 243, 243, 243, 24,
	24, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 38, 222, 223, 223, 223, 223, 211,
	212, 187, 187, 187, 187, 187, 187, 187, 186, 186,
	186, 186, 190, 190, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 189, 189, 189, 189, 189, 189, 189,
	189, 191, 191, 191, 191, 191, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 193, 193, 193, 193, 193, 193, 193, 193, 210,
	210, 194, 194, 203, 203, 204, 204, 204, 201, 201,
	202, 202, 205, 205, 197, 198, 206, 199, 199, 199,
	200, 200, 200, 209, 209, 209, 209, 195, 213, 213,
	232, 232, 231, 231, 230, 230, 230, 221, 221, 227,
	227, 227, 227, 227, 216, 216, 216, 215, 215, 217,
	217, 220, 220, 229, 229, 228, 214, 214, 233, 233,
	233, 233, 233, 218, 218, 219, 219, 219, 239, 240,
	238, 238, 238, 238, 238, 224, 224, 224, 225, 225,
	225, 226, 226, 226, 241, 241, 35, 35, 36, 36,
	36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 36, 36, 127, 127, 127,
	37, 165, 165, 237, 237, 237, 237, 237, 236, 234,
	234, 235, 235, 13, 39, 39, 14, 14, 14, 14,
	14, 14, 14, 15, 15, 40, 41, 41, 41, 41,
	41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
	41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
	41, 41, 41, 41, 41, 69, 154, 154, 152, 152,
	155, 155, 153, 153, 153, 156, 156, 156, 184, 184,
	184, 42, 42, 47, 47, 50, 48, 49, 166, 166,
	45, 45, 46, 46, 46, 46, 61, 61, 261, 261,
	44, 44, 43, 43, 43, 43, 16, 262, 52, 53,
	53, 54, 54, 54, 58, 58, 58, 56, 56, 56,
	57, 57, 63, 63, 67, 67, 67, 67, 66, 66,
	66, 66, 130, 130, 130, 131, 131, 176, 176, 176,
	175, 175, 175, 175, 71, 71, 72, 72, 73, 73,
	73, 73, 89, 89, 90, 90, 90, 90, 90, 100,
	100, 139, 139, 138, 138, 141, 141, 74, 74, 74,
	74, 75, 75, 76, 76, 77, 77, 164, 164, 181,
	181, 181, 81, 81, 81, 83, 82, 82, 82, 82,
	84, 84, 86, 87, 87, 85, 85, 88, 91, 91,
	91, 91, 92, 92, 68, 68, 68, 68, 68, 68,
	68, 151, 151, 94, 94, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 108, 108, 108, 108, 108,
	108, 95, 95, 95, 95, 95, 95, 95, 62, 62,
	109, 109, 109, 116, 65, 65, 64, 64, 110, 110,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 103, 103, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 263, 263, 105, 104,
	104, 104, 104, 104, 104, 59, 59, 59, 59, 59,
	182, 182, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 120, 120, 60, 60, 118,
	118, 119, 121, 121, 117, 117, 117, 97, 97, 97,
	97, 97, 97, 97, 97, 99, 99, 99, 122, 122,
	111, 111, 70, 70, 123, 123, 124, 124, 125, 125,
	126, 126, 129, 129, 134, 134, 134, 135, 135, 135,
	135, 136, 136, 136, 96, 96, 96, 96, 96, 96,
	137, 137, 137, 137, 142, 142, 112, 112, 114, 114,
	113, 115, 143, 143, 146, 146, 146, 146, 145, 145,
	145, 178, 178, 178, 149, 149, 157, 157, 158, 158,
	150, 150, 196, 196, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 163, 163, 162, 162, 162, 159, 159,
	159, 160, 160, 177, 177, 173, 173, 174, 174, 179,
	179, 180, 180, 242, 242, 207, 207, 252, 252, 208,
	208, 253, 253, 255, 255, 250, 250, 251, 251, 254,
	254, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 258, 259,
	168, 169, 169, 169,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 11,
	4, 6, 7, 5, 9, 11, 1, 3, 1, 3,
	7, 8, 1, 1, 9, 8, 7, 6, 6, 1,
	1, 1, 3, 1, 3, 1, 3, 0, 4, 3,
	4, 5, 4, 1, 3, 3, 2, 2, 2, 2,
	2, 1, 1, 1, 0, 0, 2, 3, 11, 7,
	9, 5, 5, 15, 11, 0, 1, 1, 3, 2,
	3, 3, 3, 0, 1, 1, 2, 2, 2, 2,
	1, 2, 2, 3, 3, 3, 3, 4, 0, 3,
	1, 1, 1, 1, 1, 0, 2, 2, 1, 1,
	1, 1, 1, 4, 5, 8, 1, 2, 5, 7,
	10, 8, 11, 1, 2, 5, 2, 4, 2, 3,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 2, 3, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 4, 1, 3, 3, 3, 3,
	3, 0, 2, 2, 2, 2, 2, 2, 3, 1,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 3, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 1, 4, 4, 3, 3,
	2, 4, 5, 2, 3, 4, 2, 2, 3, 3,
	3, 3, 3, 4, 1, 1, 1, 1, 1, 6,
	6, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 1,
	0, 1, 1, 2, 2, 3, 1, 0, 3, 3,
	0, 2, 2, 2, 1, 2, 1, 2, 5, 4,
	0, 1, 1, 2, 2, 3, 2, 0, 1, 2,
	3, 3, 2, 2, 1, 1, 1, 1, 1, 0,
	1, 0, 1, 1, 3, 3, 3, 1, 10, 11,
	11, 12, 12, 1, 1, 0, 2, 2, 3, 3,
	1, 1, 2, 2, 2, 0, 1, 3, 1, 2,
	3, 1, 1, 1, 0, 2, 1, 1, 6, 10,
	9, 7, 7, 7, 9, 7, 12, 14, 7, 7,
	9, 9, 10, 5, 6, 8, 7, 0, 1, 2,
	4, 0, 1, 1, 1, 1, 1, 1, 7, 1,
	3, 8, 8, 3, 3, 5, 4, 6, 4, 4,
	4, 4, 4, 3, 2, 3, 4, 4, 3, 6,
	6, 4, 4, 4, 4, 4, 4, 3, 3, 2,
	6, 2, 4, 4, 4, 3, 7, 6, 5, 4,
	2, 4, 3, 2, 3, 3, 1, 1, 0, 1,
	1, 1, 0, 2, 2, 0, 2, 2, 0, 1,
	1, 2, 1, 1, 1, 2, 1, 1, 1, 1,
	3, 3, 1, 1, 1, 1, 0, 3, 1, 1,
	2, 2, 2, 2, 3, 3, 2, 0, 2, 0,
	2, 1, 2, 2, 0, 1, 1, 0, 1, 1,
	0, 1, 3, 5, 1, 1, 3, 5, 1, 2,
	3, 5, 2, 4, 7, 0, 1, 0, 1, 2,
	1, 1, 1, 1, 1, 3, 1, 1, 1, 3,
	1, 3, 2, 6, 1, 4, 6, 3, 2, 0,
	3, 0, 3, 1, 3, 1, 3, 4, 4, 4,
	3, 2, 4, 0, 1, 0, 2, 0, 1, 1,
	1, 1, 1, 2, 2, 1, 2, 3, 2, 3,
	2, 2, 3, 2, 1, 1, 3, 3, 0, 5,
	5, 5, 0, 2, 1, 3, 3, 2, 3, 1,
	2, 0, 3, 1, 1, 3, 3, 4, 4, 5,
	3, 4, 5, 6, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 3, 0, 1, 1, 3, 1, 3,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 2, 2, 2, 2, 2, 3, 1, 1,
	1, 1, 1, 1, 5, 6, 6, 6, 5, 5,
	5, 6, 5, 5, 6, 5, 5, 5, 5, 6,
	5, 5, 5, 4, 4, 5, 5, 5, 5, 5,
	4, 4, 4, 4, 4, 4, 3, 6, 6, 6,
	8, 8, 8, 8, 9, 4, 7, 5, 4, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 8, 8, 0, 2, 3, 4,
	4, 4, 4, 4, 4, 0, 3, 4, 7, 3,
	1, 1, 2, 3, 3, 1, 2, 2, 1, 2,
	1, 2, 2, 1, 2, 0, 1, 0, 2, 1,
	2, 4, 0, 2, 1, 3, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 0, 3,
	1, 3, 1, 1, 0, 2, 1, 1, 0, 3,
	1, 3, 2, 2, 0, 1, 1, 0, 2, 4,
	4, 0, 2, 4, 2, 1, 3, 5, 4, 6,
	1, 3, 3, 5, 0, 5, 1, 3, 1, 2,
	3, 1, 1, 3, 3, 3, 3, 3, 1, 2,
	1, 1, 1, 1, 1, 1, 0, 2, 0, 3,
	0, 1, 0, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	1, 0, 1, 0, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 2, 0, 1, 0, 4, 0,
	1, 0, 3, 0, 3, 0, 4, 0, 3, 0,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -256, -1, -2, -6, -7, -8, -9, -10, -12,
	-35, -13, -14, -15, -40, -41, -42, -47, -48, -49,
	-45, -44, -43, -16, -22, -17, -51, -3, -4, 6,
	7, -55, 9, 10, 30, -38, 129, -36, -37, 132,
	131, 168, 133, 161, 63, 212, -50, 215, 216, -261,
	-166, 166, 167, 31, 32, 135, 210, 20, 37, -258,
	8, 305, 130, 213, 163, 162, 26, 67, -257, 420,
	-125, 15, -54, 5, -52, -262, -52, -52, -52, -52,
	-52, -222, 104, 67, -160, 142, 85, 296, 138, -167,
	139, -159, 188, 44, 149, 148, 139, 139, 140, 142,
	296, 138, 176, 175, 139, -85, -179, 70, -171, 347,
	152, 362, 363, 130, 185, 212, 223, 217, 251, 239,
	348, 364, 153, 205, 137, 237, 240, 283, 151, 198,
	365, 272, 278, 208, 79, 215, 292, 366, 154, 202,
	204, 203, 193, 209, 36, 164, 235, 228, 188, 367,
	355, 226, 28, 183, 368, 280, 256, 369, 352, 279,
	231, 227, 135, 370, 155, 149, 178, 371, 257, 261,
	372, 284, 373, 374, 375, 141, 221, 222, 376, 189,
	286, 255, 33, 150, 349, 48, 173, 287, 38, 259,
	37, 271, 377, 254, 249, 378, 379, 380, 381, 253,
	220, 248, 200, 52, 136, 263, 262, 264, 201, 282,
	244, 242, 382, 383, 156, 384, 385, 229, 18, 386,
	387, 290, 167, 388, 42, 389, 390, 391, 171, 392,
	393, 394, 281, 258, 260, 187, 395, 232, 146, 396,
	175, 397, 351, 398, 288, 225, 399, 157, 172, 166,
	291, 400, 401, 402, 403, 158, 404, 405, 406, 216,
	274, 206, 407, 408, 409, 410, 197, 182, 294, 285,
	51, 210, 268, 411, 219, 148, 211, 412, 213, 43,
	179, 7, 199, 275, 207, 246, 174, 413, 414, 233,
	234, 252, 218, 247, 214, 176, 177, 168, 415, 293,
	269, 353, 50, 241, 238, 180, 245, 416, 142, 417,
	181, 350, 289, 236, 270, 139, 122, 240, 283, 129,
	273, 274, 280, -216, 281, 175, 178, -184, 139, -152,
	272, 181, 70, 140, 141, 33, 285, 284, 276, -179,
	-61, 133, 169, -85, -168, -168, -168, 275, 275, -168,
	-32, 211, 70, 36, -2, -150, 142, 144, 214, -135,
	17, 16, -5, -3, -258, 6, 21, 22, -58, 53,
	54, -53, -66, 113, -68, -179, -93, 87, -98, 29,
	70, -171, 24, -97, -94, -117, -115, -116, 122, 123,
	124, 111, 112, 119, 88, 125, -103, -101, -102, -104,
	-106, -107, 72, 71, 80, 73, 74, 75, 76, 81,
	82, 83, -173, -113, -258, 57, 58, 138, 306, 307,
	308, 309, 346, 159, 310, 90, 47, 295, 304, 303,
	302, 300, 301, 297, 299, 298, 312, 313, 145, 296,
	117, 305, 335, 336, 337, 338, 339, 340, 341, 342,
	344, 345, 343, 325, 318, 319, 320, 321, 322, 323,
	324, 326, 327, 328, 329, 330, 331, 332, 333, 334,
	-150, -150, 11, -78, -79, -85, -88, -179, -143, -183,
	214, -146, 285, 284, -117, -145, -173, -179, 283, 240,
	282, -85, -223, -212, -174, -173, -170, 70, -171, 134,
	160, 86, 354, 23, 25, 266, 318, 89, 122, 319,
	320, 321, 16, 20, 90, 121, 306, 322, 129, 61,
	297, 299, 295, 296, 273, 29, 10, 26, 162, 192,
	22, 115, 131, 93, 94, 95, 165, 24, 163, 83,
	159, 19, 64, 11, 13, 316, 317, 14, 145, 144,
	106, 190, 140, 59, 8, 125, 27, 103, 55, 323,
	324, 358, 45, 359, 57, 104, 17, 300, 301, 31,
	346, 325, 170, 360, 326, 117, 195, 62, 49, 87,
	81, 34, 84, 65, 85, 15, 191, 60, 314, 194,
	361, 105, 132, 305, 58, 138, 6, 311, 30, 161,
	329, 328, 327, 330, 196, 56, 308, 309, 331, 418,
	139, 92, 312, 313, 143, 82, 5, 44, 32, 9,
	63, 66, 302, 303, 304, 47, 333, 332, 334, 91,
	12, 315, 140, -85, 305, -158, 145, -158, 176, 175,
	-158, 96, -39, -85, -157, 145, -173, -157, -157, -157,
	-157, -157, -85, 126, -85, 70, 30, -169, -258, -174,
	296, 138, 70, 175, 178, 139, 176, 142, -169, -169,
	-218, 11, 106, 179, 179, 179, 180, -169, -155, -154,
	177, 278, 279, 275, 277, 12, -69, 104, -169, -46,
	-2, -9, -7, -8, -2, 96, -168, -168, 30, 72,
	50, -243, 67, -207, 271, -259, 69, 139, -85, -136,
	19, 31, -68, -179, -126, -129, -68, -172, 318, 319,
	320, 321, 322, 335, 336, 337, 323, 324, 338, 339,
	340, 325, 326, 341, 342, 344, 345, 343, 329, 328,
	327, 330, 331, 333, 332, 334, -125, -2, -52, 49,
	-56, 21, 22, 78, 11, -176, 86, 85, 103, -175,
	23, 70, -171, -172, 72, 318, 319, 320, 321, 322,
	335, 336, 337, 323, 324, 338, 339, 340, 325, 326,
	341, 342, 344, 345, 343, 329, 328, 327, 330, 331,
	333, 332, 334, 126, -68, -95, 106, 87, 104, 105,
	89, 108, 107, 118, 111, 112, 113, 114, 115, 116,
	117, 109, 110, 121, 96, 97, 98, 99, 100, 101,
	102, -151, -258, -116, -258, 127, 128, -98, -98, -98,
	-98, -98, -98, -98, -98, -258, -2, -110, -68, -258,
	-258, -258, -258, -258, -258, -258, -258, -258, -258, -258,
	-120, -68, -258, -263, -105, -258, -263, -105, -263, -105,
	-263, -258, -263, -105, -263, -105, -263, -263, -105, -263,
	-258, -258, -258, -258, -258, -258, -258, -258, -258, -258,
	-258, -258, -258, -258, -258, -258, -258, -258, -258, -258,
	-258, -258, -258, -258, -258, -258, -258, -258, -258, -258,
	-258, -258, -258, -258, -87, 27, -85, -71, -72, -73,
	-74, -89, -116, -258, -85, -85, -78, -260, 68, 11,
	66, -260, 68, 126, 68, -143, 214, -144, -147, 286,
	288, 96, -178, -173, 72, 29, 126, 30, 69, 68,
	-186, -190, -192, -191, -193, -188, -189, 237, 240, 244,
	242, 238, 243, 122, 241, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 256, 30, 164, 233, 234,
	235, 236, 257, 258, 259, 260, 261, 262, 263, 264,
	217, 239, 348, 218, 219, 220, 221, 222, 223, 225,
	226, 227, 228, 229, 230, 231, -173, 23, 142, 70,
	87, 70, 70, 70, -85, 70, 68, 143, -78, 24,
	65, -80, -85, 70, 70, 70, 70, -180, -179, -170,
	-169, -169, -158, -158, -169, -169, -169, -85, -85, -85,
	-85, -156, 104, 12, -156, -169, -169, 11, -153, 11,
	106, -153, -68, -98, 70, -30, -29, -31, 198, 199,
	200, 201, 202, 203, 204, 205, 206, 207, 208, 209,
	72, 69, -110, -242, 419, -85, -169, 9, 106, 68,
	18, 126, 68, -134, 25, 26, -134, -135, -259, -58,
	-99, 50, 73, 76, -57, 56, -85, -68, -68, -108,
	81, 87, 82, 83, -175, 113, -180, -174, -170, -98,
	-109, -113, -116, 77, 106, 104, 105, 89, -98, -98,
	-98, -98, -98, -98, -98, -98, -98, -98, -98, -98,
	-98, -98, -98, -182, 70, 72, 70, -97, -97, -173,
	-56, -259, 68, -259, -2, -64, -67, 113, -68, -179,
	-64, -259, -68, -68, -117, 72, -64, -117, 72, -64,
	-64, -64, -56, -118, -119, 91, -117, -259, -98, -173,
	-173, -64, -65, -64, -64, -64, -259, -259, -67, -64,
	-67, -64, -64, -259, -259, -259, -259, -56, -56, -64,
	-64, -64, -56, -64, -64, -56, -64, -64, -64, -64,
	-56, -64, -64, -64, -140, 171, -85, 30, 68, -81,
	-83, -82, -84, 55, 59, 61, 56, 57, 58, 62,
	-164, 23, -71, -258, -90, 171, -91, 23, -181, 63,
	144, 64, -179, -172, 72, -140, 66, -71, -85, -71,
	-88, -179, 113, -146, -144, 68, 287, 289, 290, 65,
	84, -68, -200, 121, -174, -180, -224, -225, -226, -174,
	72, 73, -212, -213, -214, -227, 154, -233, 146, 148,
	44, -215, 155, 140, 45, -187, -201, 269, -194, 67,
	-194, -194, 245, 237, 240, 238, -194, -194, -194, -194,
	-194, -199, 240, -199, -199, -199, -199, 238, 67, 67,
	-194, -194, -194, -203, 67, -203, 232, -204, 67, -204,
	-204, -204, -204, -177, 66, -132, -85, -169, 24, -169,
	-33, 185, 160, 67, -85, -85, -85, 68, 70, 70,
	-219, 11, 106, 72, -68, -85, -100, 23, -179, -179,
	-156, -62, 165, 68, 96, 69, -86, 27, 72, -161,
	134, 131, 132, 136, 137, -236, 266, 130, 240, 79,
	29, 15, 306, 171, 353, 70, 172, 51, -68, -68,
	-129, -136, -149, 19, 11, 47, 47, -63, -133, 81,
	82, 83, 126, -258, -109, -98, -98, -98, -62, 86,
	-259, -65, -68, -259, 68, -259, 126, -259, 68, 66,
	23, 11, 11, -259, 11, 11, -259, -259, -259, -64,
	-121, -119, 93, -68, -259, -259, 68, 68, -259, -259,
	-259, -259, -130, 314, -130, -259, -259, -259, -259, -259,
	-130, -130, -130, -130, -64, -64, -259, -259, -259, -64,
	-259, -259, -64, -259, -259, -259, -259, -64, -259, -259,
	-259, -96, 30, 47, -2, -258, -258, -143, -72, -73,
	-73, -72, -73, 55, 55, 55, 60, 55, 60, 55,
	-82, -181, -259, -258, 34, -181, -91, 140, 140, 140,
	-92, 12, -71, -92, -92, 126, -147, -148, 291, 288,
	294, 70, 72, 126, 68, -226, 96, 67, 70, 45,
	-215, 140, 45, -215, -220, 70, -220, 45, -205, -197,
	-198, -206, -209, -195, 81, 87, 29, 65, 266, 146,
	45, 44, 79, -202, 270, 73, -199, -199, -194, -194,
	-194, 245, -194, -199, -200, 30, -200, -200, -200, -200,
	-199, -210, 72, -210, 73, -203, 73, 65, -173, -2,
	23, -34, 8, 9, 10, -244, -245, -246, 70, 106,
	190, 191, 143, -169, -85, -169, -169, -92, 70, 70,
	-153, -156, 34, -98, -29, -97, -140, 139, -168, -165,
	-237, -215, -241, -214, 147, 151, 154, 155, 146, 171,
	-165, -237, 154, -215, 155, 147, -162, -215, 143, 23,
	-165, -165, -221, 96, 171, 52, -85, -92, 11, 68,
	-66, 113, -174, -65, -62, 86, -98, -259, -67, 113,
	-180, -185, 122, 237, 164, 235, 228, 255, 242, 268,
	233, 269, -182, -185, -98, -98, -98, -98, 347, -125,
	95, -68, 92, -98, -98, -173, -258, -130, -130, -130,
	-130, -130, -259, -259, -131, -130, -131, -131, -259, -131,
	-131, -259, -131, -131, -131, -131, -259, -131, -131, -131,
	-142, 65, -143, -112, -114, -113, -258, -2, -137, -173,
	-141, -173, -92, -76, -75, 65, 66, -77, 65, -75,
	55, 55, -141, -98, -91, -258, -258, -258, -125, -68,
	-92, 288, 292, 293, -225, -226, -229, -228, -173, -233,
	155, -220, -220, 67, 81, -98, 9, 45, 45, 72,
	69, -200, -200, -199, -194, -200, 70, 122, -200, 69,
	68, 69, 68, 69, 68, -85, -132, -132, 65, 69,
	68, -186, 70, 70, 70, -85, -156, -98, -199, -85,
	67, -211, 70, -168, -220, -159, 70, 70, -168, 70,
	-173, 45, 70, -85, -173, -211, 70, -68, -173, -122,
	13, -71, -133, -133, -259, -98, 126, -259, -194, -194,
	-194, -204, -194, 222, -194, 222, -259, -259, 19, 19,
	19, 19, -258, -60, 311, -68, 68, 68, -125, 171,
	-131, -131, -131, -131, -131, 28, -142, 68, -259, -259,
	-259, 68, 126, -259, 68, -125, -68, 67, -68, -259,
	-91, -164, -138, -173, -138, -138, -135, 69, 68, -194,
	-138, -102, -200, -199, 72, -199, 73, 73, 67, -2,
	-85, -247, -248, -249, 79, 349, 87, 192, 193, 156,
	194, 195, 196, -246, -186, -186, -186, -250, -155, -211,
	-127, 159, 160, -186, -177, -217, -215, 70, -163, 143,
	23, 143, -127, -211, 27, -123, 14, 16, -92, -66,
	113, -199, 70, -98, -98, -98, -98, -98, -259, 72,
	-98, -98, -259, 16, 45, -114, 47, -2, -258, -173,
	-173, -173, -135, -138, -90, -181, 68, -259, -259, -259,
	-231, -230, 66, 150, 79, -228, -134, 69, -200, -200,
	69, 69, -229, -132, 19, -132, -249, 72, 196, 192,
	196, 196, 196, 196, 197, -251, 38, -253, 39, 69,
	-168, 70, -187, 67, -220, 70, -173, -168, -127, -258,
	-124, -68, -172, -111, -70, -68, -172, -122, -133, -259,
	-259, -259, -259, -59, 106, 350, -259, -259, -110, 9,
	-112, -2, 126, 69, -91, -173, -230, 70, -221, 72,
	157, 69, 183, -19, -2, -7, -8, -9, -10, -12,
	-35, -13, -14, -20, -21, -15, -40, -41, -50, -48,
	-49, -45, -44, -22, -17, -23, 90, 145, 212, 36,
	36, 188, 189, -196, 144, -254, 43, -252, -208, 42,
	16, -168, -229, -177, -168, -234, -235, 171, 68, -123,
	-259, 348, 62, 351, -125, -143, -259, -173, 73, -85,
	-232, -231, 184, -132, -68, -68, -24, -19, -139, 67,
	73, -253, 16, -255, 40, 41, 72, 69, 67, -259,
	68, -173, -70, 52, 349, 352, -259, 67, -128, 186,
	187, -25, -26, 91, 92, 420, -138, 38, 72, 16,
	16, -232, -229, -235, 47, 52, -138, -132, 70, 70,
	95, 93, -26, -68, -24, 95, -19, 69, 72, 72,
	69, 173, 350, 69, -11, -18, -10, -7, -8, -9,
	212, 90, -24, 92, 420, -232, 174, 351, -239, -240,
	65, -132, -24, 420, -24, 95, 93, -27, -28, 94,
	-258, 352, -240, 65, -239, 65, 10, 9, 420, 95,
	420, 145, -24, 95, 93, -28, -68, -98, 170, -238,
	158, 153, 156, 30, -238, 95, 90, 420, 145, -24,
	92, -259, -259, 152, 29, 81, 95, 420, -24, 145,
	95, 420, 145,
}
var yyDef = [...]int{

	28, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 768, 0, 467,
	467, 467, 467, 467, 467, 0, -2, 346, 347, 0,
	0, 0, 0, -2, 442, 443, 444, 446, 447, 456,
	-2, 1240, 1240, 0, 0, 1240, 0, 0, 0, 0,
	42, 43, 820, 0, 459, 448, 449, 1238, 1, 3,
	777, 0, 0, 471, 474, 469, 0, 820, 820, 0,
	0, 76, 0, 0, 0, 0, 0, 818, 818, 0,
	818, 842, 0, 838, 839, 840, 0, 816, 0, 816,
	816, 816, 816, 816, 0, 394, 555, 849, 850, 1004,
	1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014,
	1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024,
	1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034,
	1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044,
	1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054,
	1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064,
	1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074,
	1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084,
	1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094,
	1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104,
	1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114,
	1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124,
	1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134,
	1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144,
	1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154,
	1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164,
	1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174,
	1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184,
	1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194,
	1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204,
	1205, 1206, 1207, 1208, 1209, 0, 0, 0, 1241, 0,
	1241, 1241, 409, 0, 411, 0, 0, 0, 1241, 0,
	420, 423, 1241, 304, 305, 306, 439, 440, 429, 441,
	0, 0, 0, 460, 461, 462, 463, 1240, 1240, 466,
	136, 0, 156, 855, 36, 0, 0, 821, 445, 781,
	0, 0, 768, 38, 0, 467, 472, 473, 477, 475,
	476, 468, 0, 488, 497, 0, 564, 0, 569, 571,
	-2, -2, 0, 610, 611, 612, 613, 614, 0, 0,
	0, 0, 0, 0, 0, 0, 638, 639, 640, 641,
	642, 643, 747, 748, 749, 750, 751, 752, 753, 754,
	573, 574, 744, 801, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 735, 0, 706, 706, 706,
	706, 706, 706, 706, 706, 706, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 53, 55, 555, 59, 0,
	1189, 802, -2, -2, 0, 0, 744, 0, -2, 1021,
	-2, 77, 0, 185, 0, 847, 848, 845, 846, 871,
	872, 873, 874, 875, 876, 877, 878, 879, 880, 881,
	882, 883, 884, 885, 886, 887, 888, 889, 890, 891,
	892, 893, 894, 895, 896, 897, 898, 899, 900, 901,
	902, 903, 904, 905, 906, 907, 908, 909, 910, 911,
	912, 913, 914, 915, 916, 917, 918, 919, 920, 921,
	922, 923, 924, 925, 926, 927, 928, 929, 930, 931,
	932, 933, 934, 935, 936, 937, 938, 939, 940, 941,
	942, 943, 944, 945, 946, 947, 948, 949, 950, 951,
	952, 953, 954, 955, 956, 957, 958, 959, 960, 961,
	962, 963, 964, 965, 966, 967, 968, 969, 970, 971,
	972, 973, 974, 975, 976, 977, 978, 979, 980, 981,
	982, 983, 984, 985, 986, 987, 988, 989, 990, 991,
	992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001,
	1002, 1003, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 383, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 393, 0, 395, 1241, 1241, 398, 1242, 1243,
	818, 818, 1241, 1241, 1241, 0, 0, 0, 407, 408,
	0, 323, 324, 435, 435, 1241, 1241, 415, 0, 432,
	432, 430, 431, 426, 427, 0, 422, 0, 424, 450,
	-2, 453, 454, 455, -2, 0, 464, 465, 0, 138,
	0, 155, 0, 853, 856, 37, 1239, 0, 1241, 30,
	0, 0, 778, 0, 769, 770, 774, 774, 1210, 1211,
	1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221,
	1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231,
	1232, 1233, 1234, 1235, 1236, 1237, 777, 36, 474, 0,
	480, 478, 479, 470, 0, 489, 0, 0, 0, 498,
	0, 500, 501, 502, 503, 1210, 1211, 1212, 1213, 1214,
	1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224,
	1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234,
	1235, 1236, 1237, 0, 567, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 591, 592, 593, 594, 595, 596,
	597, 570, 0, 584, 0, 0, 0, 630, 631, 632,
	633, 634, 635, 636, 0, 477, 36, 0, 608, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 477,
	0, 736, 0, 689, 698, 0, 690, 699, 691, 700,
	692, 0, 693, 701, 694, 702, 695, 696, 703, 697,
	0, 0, 0, 604, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 477, 477, 0,
	0, 0, 477, 0, 0, 477, 0, 0, 0, 0,
	477, 0, 0, 0, 57, 0, 554, 0, 504, 506,
	507, 508, -2, 0, 558, -2, 0, 0, 0, 49,
	50, 0, 0, 0, 0, 60, 1189, 62, 63, 0,
	0, 0, 280, 811, 812, 813, 0, 809, 335, 0,
	191, 268, 199, 200, 201, 261, 203, 261, 261, 0,
	261, 261, 261, 261, 261, 277, 277, 277, 277, 277,
	244, 245, 246, 247, 248, 0, 0, 221, 261, 261,
	261, 225, 251, 252, 253, 254, 255, 256, 257, 258,
	204, 205, 206, 207, 208, 209, 210, 211, 212, 263,
	263, 265, 265, 265, 265, 265, 843, 74, 0, 1241,
	0, 1241, 0, 0, 183, 109, 0, 0, 386, 817,
	0, 388, 51, 389, 390, 391, 392, 556, 851, 852,
	396, 397, 0, 0, 401, 402, 403, 404, 405, 406,
	325, 412, 0, 0, 413, 414, 419, 0, 519, 0,
	0, 435, 421, 598, 457, 137, 140, 0, 143, 144,
	145, 146, 147, 148, 149, 150, 151, 152, 153, 154,
	139, 157, 0, 0, 0, 0, 370, 782, 0, 0,
	0, 0, 0, 772, 775, 776, 773, 781, 39, 477,
	0, 755, 0, 0, 75, 481, 33, 565, 566, 568,
	585, 0, 587, 589, 499, 490, 0, 745, -2, 575,
	576, 600, 601, 602, 0, 0, 0, 0, 598, 580,
	0, 615, 616, 617, 618, 619, 620, 621, 622, 623,
	624, 625, 626, 629, 720, 721, 0, 627, 628, 637,
	604, 603, 0, 800, 36, 0, 606, 484, 485, 0,
	0, 676, 0, 0, 612, 747, 0, 612, 747, 0,
	0, 0, 0, 742, 739, 0, 0, 707, 0, 0,
	0, 0, 0, 605, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 553, 0, 0, 0,
	0, 0, 0, 542, 0, 0, 545, 0, 0, 0,
	0, 538, 0, 0, 512, 1123, 514, 0, 558, 0,
	0, 0, 539, 540, 541, 562, 0, 562, 54, 562,
	56, 0, 557, 803, 61, 0, 0, 66, 67, 804,
	805, 806, 807, 0, 745, 0, 184, 336, 338, 341,
	342, 343, 186, 187, 188, 0, 1033, 317, 1133, 1170,
	-2, 311, 1059, -2, -2, 190, 270, 269, 202, 0,
	277, 277, 261, 261, 261, 261, 230, 277, 233, 236,
	237, 280, 0, 280, 280, 280, 280, 277, 0, 0,
	222, 223, 224, 213, 0, 214, 263, 216, 0, 217,
	218, 219, 220, 0, 0, 0, 0, 81, 819, 82,
	0, 110, 111, 85, 0, 384, 1241, 0, 1241, 1241,
	562, 0, 0, 436, 437, 432, 435, 0, 433, 434,
	418, 425, 0, 0, 0, 158, 57, 0, 854, 1240,
	-2, 371, 835, 371, 371, 363, 297, 824, 825, 826,
	827, 828, 829, 830, 831, 832, 0, 0, 779, 780,
	771, 31, 0, 814, 815, 756, 757, 562, 0, 586,
	588, 590, 0, 604, 577, 598, 581, 0, 578, 0,
	572, 0, 609, -2, 0, 674, 0, 675, 0, 0,
	0, 0, 0, 713, 0, 0, 714, 0, 685, 768,
	0, 740, 0, 0, 688, 708, 0, 0, 709, 710,
	711, 712, 663, 0, 664, 0, 0, 0, 0, 0,
	670, 671, 672, 673, 0, 0, 495, 495, 495, 0,
	495, 495, 0, 495, 495, 495, 495, 0, 495, 495,
	495, 794, 0, 0, -2, 0, 0, 562, 505, 533,
	535, 0, 530, 543, 544, 546, 0, 548, 0, 550,
	551, 509, 511, 0, 0, 558, 518, 0, 0, 0,
	768, 0, 562, 47, 48, 0, 64, 65, 0, 0,
	71, 281, 282, 0, 0, 339, 0, 0, 0, 299,
	311, 307, 308, 311, 302, 312, 303, 0, 192, 193,
	194, 195, 196, 197, 272, 0, 0, 0, 276, 0,
	284, 286, 0, 198, 271, 0, 280, 280, 277, 228,
	229, 261, 234, 280, 238, 0, 239, 240, 241, 242,
	280, 0, 259, 0, 0, 215, 0, 0, 844, -2,
	74, 0, 112, 113, 114, 0, 86, 87, 0, 0,
	0, 0, 0, 387, 52, 399, 400, 410, 326, 327,
	435, 417, 0, 599, 141, 142, 277, 0, 348, 0,
	1240, 311, 0, 364, 372, 373, 374, 375, 376, 377,
	0, 1240, 374, 0, 375, 0, 0, 0, 836, 837,
	0, 0, 0, 298, 0, 783, 32, 758, 0, 75,
	75, 491, 746, 0, 579, 0, 582, 644, 607, 486,
	0, 0, 261, 261, 725, 261, 265, 728, 261, 730,
	261, 733, 0, 0, 0, 0, 0, 0, 0, 737,
	687, 743, 0, 0, 0, 492, 768, 665, 666, 667,
	668, 669, 495, 495, 648, 496, 649, 650, 495, 652,
	653, 495, 655, 656, 657, 658, 495, 660, 661, 662,
	40, 0, 794, 784, 796, 798, 0, 36, 0, 790,
	0, 525, 768, 527, 534, 0, 0, 528, 0, 529,
	547, 549, 0, -2, 517, 0, 0, 0, 777, 563,
	46, 68, 69, 70, 337, 340, 0, 313, 261, 316,
	0, 300, 301, 0, 273, 274, 0, 283, 285, 287,
	262, 226, 227, 280, 235, 231, 278, 279, 243, 277,
	0, 277, 0, 266, 0, 0, 79, 0, 0, 93,
	0, 89, 0, 0, 0, 385, 416, 520, 865, 552,
	0, 367, 0, 351, 843, 309, 345, 352, 353, 358,
	359, 0, 0, 355, 0, 367, 0, 366, 0, 764,
	0, 562, 0, 482, 645, 583, 0, 677, 722, 277,
	726, 727, 729, 731, 732, 734, 679, 678, 0, 0,
	0, 0, 0, 0, 0, 741, 0, 0, 0, 0,
	646, 647, 651, 654, 659, 0, 41, 0, 799, -2,
	0, 0, 0, 58, 0, 777, 531, 0, 536, 558,
	515, 0, 0, 523, 0, 0, 45, 289, 0, 774,
	0, 275, 232, 280, 260, 280, 0, 0, 0, -2,
	0, 74, 94, 95, 0, 0, 0, 100, 0, 0,
	0, 0, 0, 88, 90, 91, 92, 867, 861, 0,
	1240, 368, 0, 191, 0, 311, 310, 365, 0, 833,
	834, 0, 1240, 367, 0, 34, 0, 0, 758, 75,
	487, 723, 724, 0, 0, 0, 0, 715, 686, 738,
	0, 0, 493, 0, 0, 797, 0, -2, 0, 792,
	791, 526, 44, 0, 513, 558, 0, 559, 560, 561,
	288, 292, 0, 297, 0, 314, 315, 0, 249, 250,
	264, 267, 0, 80, 0, 0, 96, 97, 98, 99,
	101, 102, 0, 0, 0, 822, 869, -2, 0, 1240,
	350, 369, 189, 0, 843, 354, 360, 361, 1240, 0,
	765, 766, 767, 759, 760, 762, 763, 764, 483, 680,
	682, 681, 683, 0, 0, 0, 704, 705, 768, 0,
	787, 36, 0, 532, 516, 524, 293, 294, 0, 296,
	0, 290, 0, 74, -2, 162, 163, 164, 165, 166,
	167, 168, 169, 170, 171, 172, 173, 174, 175, 176,
	177, 178, 179, 180, 181, 182, 0, 0, 0, 103,
	104, 105, 106, 521, 0, 861, 0, 863, 0, 860,
	0, 349, 0, 0, 362, 0, 379, 0, 0, 35,
	684, 0, 0, 0, 0, 795, -2, 793, 295, 0,
	78, 291, 115, 84, 0, 0, 0, 159, 29, 0,
	0, 868, 0, 866, 0, 0, 862, 290, 0, 378,
	0, 0, 761, 716, 0, 719, 494, 0, 74, 0,
	0, 0, 126, 0, 0, 0, 0, 823, 870, 0,
	0, 356, 0, 380, 0, 717, 0, 0, 116, 117,
	0, 0, 127, 0, 0, 107, 160, 522, 864, 858,
	290, 0, 0, 318, 74, 118, 119, 120, 121, 122,
	0, 124, 0, 0, 0, 357, 0, 0, 319, 320,
	0, 83, 0, 0, 0, 0, 0, 0, 133, 0,
	0, 718, 321, 0, 322, 0, 0, 0, 0, 0,
	128, 129, 0, 0, 0, 134, 0, 0, 0, 328,
	330, 331, 0, 0, 329, 123, 125, 0, 131, 0,
	0, 381, 382, 332, 333, 334, 0, 0, 0, 130,
	0, 135, 132,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 88, 3, 3, 3, 116, 108, 3,
	67, 69, 113, 111, 68, 112, 126, 114, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 420,
	97, 96, 98, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 118, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 107, 3, 119,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 87, 89, 90, 91, 92, 93, 94, 95,
	99, 100, 101, 102, 103, 104, 105, 106, 109, 110,
	115, 117, 120, 121, 122, 123, 124, 125, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:384
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:389
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:390
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:394
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:421
		{
			setParseTree(yylex, nil)
		}
	case 29:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:427
		{
			yyVAL.statement = &Load{Local: yyDollar[3].boolVal, Infile: yyDollar[4].str, Table: yyDollar[5].tableName, Partition: yyDollar[6].partitions, Charset: yyDollar[7].str, Fields: yyDollar[8].Fields, Lines: yyDollar[9].Lines, IgnoreNum: yyDollar[10].sqlVal, Columns: yyDollar[11].columns}
		}
	case 30:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:433
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:441
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:445
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 33:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:451
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 34:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:458
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}, Where: NewWhere(WhereStr, yyDollar[7].expr), GroupBy: GroupBy(yyDollar[8].exprs), Having: NewWhere(HavingStr, yyDollar[9].expr)}
		}
	case 35:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:462
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[8].tableExprs, Where: NewWhere(WhereStr, yyDollar[9].expr), GroupBy: GroupBy(yyDollar[10].exprs), Having: NewWhere(HavingStr, yyDollar[11].expr)}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:468
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:472
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:478
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:482
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 40:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:489
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].setExprs)
			yyVAL.statement = ins
		}
	case 41:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:501
		{
			cols := make(Columns, 0, len(yyDollar[7].setExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].setExprs))
			for _, updateList := range yyDollar[7].setExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].setExprs)}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:513
		{
			yyVAL.str = InsertStr
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:517
		{
			yyVAL.str = ReplaceStr
		}
	case 44:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:523
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].setExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:529
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 46:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:533
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:537
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 48:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:541
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:546
		{
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:547
		{
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:551
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName.ToViewName()}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:555
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName.ToViewName())
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:561
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:565
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:571
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:575
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 57:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:580
		{
			yyVAL.partitions = nil
		}
	case 58:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:584
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:590
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 60:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:594
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 61:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:598
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 62:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:602
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:608
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:612
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:618
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:622
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:626
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:632
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:636
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:640
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:644
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:650
		{
			yyVAL.str = SessionStr
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:654
		{
			yyVAL.str = GlobalStr
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:659
		{
			yyVAL.int = yyPosition(yylex)
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:664
		{
			yyVAL.int = yyOldPosition(yylex)
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:670
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			if len(yyDollar[1].ddl.TableSpec.Constraints) > 0 {
				yyDollar[1].ddl.ConstraintAction = AddStr
			}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:678
		{
			yyDollar[1].ddl.OptLike = &OptLike{LikeTable: yyDollar[3].tableName}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 78:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:683
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: yyDollar[4].colIdent, Using: yyDollar[5].colIdent, Type: yyDollar[2].str, Columns: yyDollar[9].indexColumns, Options: yyDollar[11].indexOptions}}
		}
	case 79:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:687
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[3].tableName.ToViewName(), ViewExpr: yyDollar[6].selStmt, SubStatementPositionStart: yyDollar[5].int, SubStatementPositionEnd: yyDollar[7].int - 1}
		}
	case 80:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:691
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[5].tableName.ToViewName(), ViewExpr: yyDollar[8].selStmt, SubStatementPositionStart: yyDollar[7].int, SubStatementPositionEnd: yyDollar[9].int - 1, OrReplace: true}
		}
	case 81:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:695
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes), IfNotExists: ne}
		}
	case 82:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:703
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes), IfNotExists: ne}
		}
	case 83:
		yyDollar = yyS[yypt-15 : yypt+1]
//line sql.y:711
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[8].tableName, TriggerSpec: &TriggerSpec{Name: string(yyDollar[4].bytes), Time: yyDollar[5].str, Event: yyDollar[6].str, Order: yyDollar[12].triggerOrder, Body: yyDollar[14].statement}, SubStatementPositionStart: yyDollar[13].int, SubStatementPositionEnd: yyDollar[15].int - 1}
		}
	case 84:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:715
		{
			yyVAL.statement = &DDL{Action: CreateStr, ProcedureSpec: &ProcedureSpec{Name: string(yyDollar[4].bytes), Definer: yyDollar[2].str, Params: yyDollar[6].procedureParams, Characteristics: yyDollar[8].characteristics, Body: yyDollar[10].statement}, SubStatementPositionStart: yyDollar[9].int, SubStatementPositionEnd: yyDollar[11].int - 1}
		}
	case 85:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:720
		{
			yyVAL.procedureParams = nil
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:724
		{
			yyVAL.procedureParams = yyDollar[1].procedureParams
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:730
		{
			yyVAL.procedureParams = []ProcedureParam{yyDollar[1].procedureParam}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:734
		{
			yyVAL.procedureParams = append(yyVAL.procedureParams, yyDollar[3].procedureParam)
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:740
		{
			yyVAL.procedureParam = ProcedureParam{Direction: ProcedureParamDirection_In, Name: string(yyDollar[1].bytes), Type: yyDollar[2].columnType}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:744
		{
			yyVAL.procedureParam = ProcedureParam{Direction: ProcedureParamDirection_In, Name: string(yyDollar[2].bytes), Type: yyDollar[3].columnType}
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:748
		{
			yyVAL.procedureParam = ProcedureParam{Direction: ProcedureParamDirection_Inout, Name: string(yyDollar[2].bytes), Type: yyDollar[3].columnType}
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:752
		{
			yyVAL.procedureParam = ProcedureParam{Direction: ProcedureParamDirection_Out, Name: string(yyDollar[2].bytes), Type: yyDollar[3].columnType}
		}
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:757
		{
			yyVAL.characteristics = nil
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:761
		{
			yyVAL.characteristics = yyDollar[1].characteristics
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:767
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:771
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[2].characteristic)
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:777
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_Comment, Comment: string(yyDollar[2].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:781
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_LanguageSql}
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:785
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_NotDeterministic}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:789
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_Deterministic}
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:793
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_ContainsSql}
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:797
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_NoSql}
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:801
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_ReadsSqlData}
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:805
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_ModifiesSqlData}
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:809
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_SqlSecurityDefiner}
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:813
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_SqlSecurityInvoker}
		}
	case 107:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:819
		{
			yyVAL.statement = &BeginEndBlock{Statements: yyDollar[2].statements}
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:824
		{
			yyVAL.str = ""
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:828
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:834
		{
			yyVAL.str = BeforeStr
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:838
		{
			yyVAL.str = AfterStr
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:844
		{
			yyVAL.str = InsertStr
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:848
		{
			yyVAL.str = UpdateStr
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:852
		{
			yyVAL.str = DeleteStr
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:857
		{
			yyVAL.triggerOrder = nil
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:861
		{
			yyVAL.triggerOrder = &TriggerOrder{PrecedesOrFollows: FollowsStr, OtherTriggerName: string(yyDollar[2].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:865
		{
			yyVAL.triggerOrder = &TriggerOrder{PrecedesOrFollows: PrecedesStr, OtherTriggerName: string(yyDollar[2].bytes)}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:871
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:881
		{
			yyVAL.statement = &BeginEndBlock{Statements: yyDollar[2].statements}
		}
	case 124:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:887
		{
			yyVAL.statement = &CaseStatement{Expr: yyDollar[2].expr, Cases: yyDollar[3].caseStatementCases}
		}
	case 125:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:891
		{
			yyVAL.statement = &CaseStatement{Expr: yyDollar[2].expr, Cases: yyDollar[3].caseStatementCases, Else: yyDollar[5].statements}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:897
		{
			yyVAL.caseStatementCases = []CaseStatementCase{yyDollar[1].caseStatementCase}
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:901
		{
			yyVAL.caseStatementCases = append(yyVAL.caseStatementCases, yyDollar[2].caseStatementCase)
		}
	case 128:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:907
		{
			yyVAL.caseStatementCase = CaseStatementCase{Case: yyDollar[2].expr, Statements: yyDollar[4].statements}
		}
	case 129:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:913
		{
			conds := []IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}
			yyVAL.statement = &IfStatement{Conditions: conds}
		}
	case 130:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:918
		{
			conds := []IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}
			yyVAL.statement = &IfStatement{Conditions: conds, Else: yyDollar[7].statements}
		}
	case 131:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:923
		{
			conds := yyDollar[6].ifStatementConditions
			conds = append([]IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}, conds...)
			yyVAL.statement = &IfStatement{Conditions: conds}
		}
	case 132:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:929
		{
			conds := yyDollar[6].ifStatementConditions
			conds = append([]IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}, conds...)
			yyVAL.statement = &IfStatement{Conditions: conds, Else: yyDollar[8].statements}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:937
		{
			yyVAL.ifStatementConditions = []IfStatementCondition{yyDollar[1].ifStatementCondition}
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:941
		{
			yyVAL.ifStatementConditions = append(yyVAL.ifStatementConditions, yyDollar[2].ifStatementCondition)
		}
	case 135:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:947
		{
			yyVAL.ifStatementCondition = IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:953
		{
			yyVAL.statement = &Signal{SqlStateValue: string(yyDollar[2].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:957
		{
			yyVAL.statement = &Signal{SqlStateValue: string(yyDollar[2].bytes), Info: yyDollar[4].signalInfos}
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:963
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:967
		{
			yyVAL.bytes = yyDollar[3].bytes
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:973
		{
			yyVAL.signalInfos = []SignalInfo{yyDollar[1].signalInfo}
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:977
		{
			yyVAL.signalInfos = append(yyVAL.signalInfos, yyDollar[3].signalInfo)
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:983
		{
			yyVAL.signalInfo = SignalInfo{Name: string(yyDollar[1].bytes), Value: yyDollar[3].expr.(*SQLVal)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:989
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1006
		{
			yyVAL.statement = &Call{FuncName: string(yyDollar[2].bytes), Params: yyDollar[3].exprs}
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1011
		{
			yyVAL.exprs = nil
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1015
		{
			yyVAL.exprs = nil
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1019
		{
			yyVAL.exprs = yyDollar[2].exprs
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1025
		{
			yyVAL.statements = Statements{yyDollar[1].statement}
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1029
		{
			yyVAL.statements = append(yyVAL.statements, yyDollar[3].statement)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1035
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 183:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1062
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName, IfNotExists: ne}
			setDDL(yylex, yyVAL.ddl)
		}
	case 184:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1073
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1080
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1085
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1089
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1093
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1099
		{
			if err := yyDollar[2].columnType.merge(yyDollar[3].columnType); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1109
		{
			if err := yyDollar[2].columnType.merge(yyDollar[3].columnType); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 191:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1118
		{
			yyVAL.columnType = ColumnType{}
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1122
		{
			opt := ColumnType{NotNull: yyDollar[2].boolVal, sawnull: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1131
		{
			opt := ColumnType{Default: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1140
		{
			opt := ColumnType{OnUpdate: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1149
		{
			opt := ColumnType{Autoincrement: yyDollar[2].boolVal, sawai: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1158
		{
			opt := ColumnType{KeyOpt: yyDollar[2].colKeyOpt}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1167
		{
			opt := ColumnType{Comment: yyDollar[2].sqlVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1178
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1189
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1194
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1200
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1204
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1208
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1212
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1216
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1220
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1224
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1228
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1232
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1238
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1244
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1250
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1256
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1262
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1268
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1274
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1280
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1288
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1292
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1296
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1300
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1304
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 226:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1310
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 227:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1314
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1318
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1322
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1326
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1330
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 232:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1334
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1338
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1342
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1346
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Length: yyDollar[4].sqlVal}
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1350
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1354
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1358
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1362
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1366
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1370
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1374
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1378
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1382
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1386
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1390
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1394
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1398
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1402
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 250:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1407
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1413
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1417
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1421
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1425
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1429
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1433
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1437
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1441
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1447
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[1].bytes))
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1452
		{
			yyVAL.strs = append(yyDollar[1].strs, string(yyDollar[3].bytes))
		}
	case 261:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1457
		{
			yyVAL.sqlVal = nil
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1461
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1466
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 264:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1470
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 265:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1478
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1482
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 267:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1488
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 268:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1496
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1500
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 270:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1505
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1509
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1516
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1520
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1526
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1532
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1538
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 277:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1543
		{
			yyVAL.str = ""
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1547
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1551
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 280:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1556
		{
			yyVAL.str = ""
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1560
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1564
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1570
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1574
		{
			yyVAL.colKeyOpt = colKey
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1578
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1582
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1588
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 288:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1594
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1598
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 290:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1603
		{
			yyVAL.indexOptions = nil
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1607
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1613
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1617
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1623
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1627
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1632
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1638
		{
			yyVAL.str = ""
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1642
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1648
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1652
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1656
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1660
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1664
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1670
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1674
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1678
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1684
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1688
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1693
		{
			yyVAL.str = ""
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1697
		{
			yyVAL.str = yyDollar[1].str
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1702
		{
			yyVAL.str = ""
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1706
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1712
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1716
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1722
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal, Order: yyDollar[3].str}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1728
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1732
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 318:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1739
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 319:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1743
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 320:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1747
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 321:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1751
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 322:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1755
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[12].ReferenceAction, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1761
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1765
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1770
		{
			yyVAL.str = ""
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1774
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1778
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1784
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1790
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1796
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1800
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1804
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1808
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1812
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1817
		{
			yyVAL.str = ""
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1821
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1825
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1833
		{
			yyVAL.str = yyDollar[1].str
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1837
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1841
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1847
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1851
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1855
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1860
		{
			yyVAL.str = ""
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1864
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 348:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1874
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 349:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1878
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			ddl.Column = yyDollar[8].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 350:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1885
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 351:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1892
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 352:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1896
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: DropStr, Column: NewColIdent(string(yyDollar[7].bytes)), Table: yyDollar[4].tableName}
		}
	case 353:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1900
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 354:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1904
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: RenameStr, Table: yyDollar[4].tableName, Column: NewColIdent(string(yyDollar[7].bytes)), ToColumn: NewColIdent(string(yyDollar[9].bytes))}
		}
	case 355:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1908
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 356:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1913
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[7].str), Using: yyDollar[8].colIdent, Columns: yyDollar[10].indexColumns, Options: yyDollar[12].indexOptions}}
		}
	case 357:
		yyDollar = yyS[yypt-14 : yypt+1]
//line sql.y:1917
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[9].str), Type: yyDollar[7].str, Using: yyDollar[10].colIdent, Columns: yyDollar[12].indexColumns, Options: yyDollar[14].indexOptions}}
		}
	case 358:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1921
		{
			yyVAL.statement = &DDL{Action: AlterStr, ConstraintAction: DropStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[7].bytes)}}}}
		}
	case 359:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1926
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[7].colIdent}}
		}
	case 360:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1930
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: RenameStr, FromName: yyDollar[7].colIdent, ToName: yyDollar[9].colIdent}}
		}
	case 361:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1934
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ModifyStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 362:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1941
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ChangeStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, Column: NewColIdent(string(yyDollar[7].bytes)), ColumnOrder: yyDollar[9].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			yyVAL.statement = ddl
		}
	case 363:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1947
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 364:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1951
		{
			ddl := &DDL{Action: AlterStr, ConstraintAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddConstraint(yyDollar[6].constraintDefinition)
			yyVAL.statement = ddl
		}
	case 365:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1957
		{
			yyVAL.statement = &DDL{Action: AlterStr, ConstraintAction: DropStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[8].bytes), Details: &ForeignKeyDefinition{}}}}}
		}
	case 366:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1962
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, AutoIncSpec: &AutoIncSpec{Value: yyDollar[7].expr}}
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1967
		{
			yyVAL.columnOrder = nil
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1971
		{
			yyVAL.columnOrder = &ColumnOrder{First: true}
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1975
		{
			yyVAL.columnOrder = &ColumnOrder{AfterColumn: NewColIdent(string(yyDollar[2].bytes))}
		}
	case 370:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1981
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1987
		{
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1989
		{
		}
	case 378:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2000
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2006
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2010
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 381:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2016
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 382:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2020
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2026
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2032
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 385:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2036
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 386:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2044
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 387:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2052
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[3].colIdent}}
		}
	case 388:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2056
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromViews: yyDollar[4].tableNames, IfExists: exists}
		}
	case 389:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2064
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes), IfExists: exists}
		}
	case 390:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2072
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes), IfExists: exists}
		}
	case 391:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2080
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, TriggerSpec: &TriggerSpec{Name: string(yyDollar[4].bytes)}, IfExists: exists}
		}
	case 392:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2088
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, ProcedureSpec: &ProcedureSpec{Name: string(yyDollar[4].bytes)}, IfExists: exists}
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2098
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2102
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2107
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 396:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2113
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 397:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2118
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2122
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 399:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2126
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 400:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2130
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 401:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2135
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 402:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2139
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 403:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2143
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 404:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2147
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 405:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2151
		{
			yyVAL.statement = &Show{Type: CreateTriggerStr, Table: yyDollar[4].tableName}
		}
	case 406:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2155
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2159
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2163
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2167
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 410:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2171
		{
			yyVAL.statement = &Show{Type: IndexStr, Table: yyDollar[4].tableName, Database: yyDollar[5].str, ShowIndexFilterOpt: yyDollar[6].expr}
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2175
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 412:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2179
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), ProcFuncFilter: yyDollar[4].showFilter}
		}
	case 413:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2183
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), ProcFuncFilter: yyDollar[4].showFilter}
		}
	case 414:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2187
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2191
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 416:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2195
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 417:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2200
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[6].showFilter, AsOf: yyDollar[5].expr}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 418:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2210
		{
			yyVAL.statement = &Show{Type: string(yyDollar[3].bytes), ShowTablesOpt: &ShowTablesOpt{DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}}
		}
	case 419:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2214
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2218
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 421:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2222
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2228
		{
			// Cannot dereference $3 directly, or else the parser stackcannot be pooled. See yyParsePooled
			cmp := yyDollar[3].expr.(*ComparisonExpr)
			cmp.Left = &ColName{Name: NewColIdent("collation")}
			var ex Expr = cmp
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &ex}
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2236
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2246
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2252
		{
			yyVAL.expr = &ComparisonExpr{Operator: LikeStr, Right: yyDollar[2].expr, Escape: yyDollar[3].expr}
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2258
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2262
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 428:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2268
		{
			yyVAL.str = ""
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2272
		{
			yyVAL.str = "full "
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2278
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2282
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 432:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2288
		{
			yyVAL.str = ""
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2292
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2296
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 435:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2302
		{
			yyVAL.showFilter = nil
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2306
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2310
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 438:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2316
		{
			yyVAL.str = ""
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2320
		{
			yyVAL.str = SessionStr
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2324
		{
			yyVAL.str = GlobalStr
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2330
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2334
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2340
		{
			yyVAL.statement = &Begin{}
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2344
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2350
		{
			yyVAL.statement = &Begin{}
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2356
		{
			yyVAL.statement = &Commit{}
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2362
		{
			yyVAL.statement = &Rollback{}
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2367
		{
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2368
		{
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2372
		{
			yyVAL.statement = &Explain{ExplainFormat: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2376
		{
			yyVAL.statement = &Explain{Analyze: true, ExplainFormat: TreeStr, Statement: yyDollar[3].selStmt}
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2382
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2390
		{
			yyVAL.str = ""
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2394
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2405
		{
			yyVAL.statement = &Show{Type: "columns", OnTable: yyDollar[2].tableName}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2409
		{
			yyVAL.statement = &OtherRead{}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2415
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2419
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2423
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2427
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2433
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 467:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2437
		{
			setAllowComments(yylex, true)
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2441
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 469:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2447
		{
			yyVAL.bytes2 = nil
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2451
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2457
		{
			yyVAL.str = UnionStr
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2461
		{
			yyVAL.str = UnionAllStr
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2465
		{
			yyVAL.str = UnionDistinctStr
		}
	case 474:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2470
		{
			yyVAL.str = ""
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2474
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2478
		{
			yyVAL.str = SQLCacheStr
		}
	case 477:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2483
		{
			yyVAL.str = ""
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2487
		{
			yyVAL.str = ""
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2491
		{
			yyVAL.str = DistinctStr
		}
	case 480:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2496
		{
			yyVAL.str = ""
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2500
		{
			yyVAL.str = StraightJoinHint
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2506
		{
			if ae, ok := yyDollar[2].selectExpr.(*AliasedExpr); ok {
				ae.StartParsePos = yyDollar[1].int
				ae.EndParsePos = yyDollar[3].int - 1
			}
			yyVAL.selectExprs = SelectExprs{yyDollar[2].selectExpr}
		}
	case 483:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2514
		{
			if ae, ok := yyDollar[4].selectExpr.(*AliasedExpr); ok {
				ae.StartParsePos = yyDollar[3].int
				ae.EndParsePos = yyDollar[5].int - 1
			}
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[4].selectExpr)
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2525
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2529
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr}
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2533
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 487:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2537
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2543
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2547
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2551
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 491:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2555
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2562
		{
			yyVAL.over = &Over{WindowName: yyDollar[2].colIdent}
		}
	case 493:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2566
		{
			yyVAL.over = &Over{OrderBy: yyDollar[3].orderBy}
		}
	case 494:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2570
		{
			yyVAL.over = &Over{PartitionBy: yyDollar[5].exprs, OrderBy: yyDollar[6].orderBy}
		}
	case 495:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2575
		{
			yyVAL.over = nil
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2579
		{
			yyVAL.over = yyDollar[1].over
		}
	case 497:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2584
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2588
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2592
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2598
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2602
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2606
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2610
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2616
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2620
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2630
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2634
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2638
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2644
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2650
		{
			yyVAL.aliasedTableName = yyDollar[2].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
		}
	case 513:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2655
		{
			yyVAL.aliasedTableName = yyDollar[6].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
			yyVAL.aliasedTableName.Partitions = yyDollar[4].partitions
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2666
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Hints: yyDollar[1].indexHints}
		}
	case 515:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2670
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, Hints: yyDollar[4].indexHints}
		}
	case 516:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2674
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, As: yyDollar[5].tableIdent, Hints: yyDollar[6].indexHints}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2678
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2682
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[1].tableIdent, Hints: yyDollar[2].indexHints}
		}
	case 519:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2693
		{
			yyVAL.expr = nil
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2697
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 521:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2702
		{
			yyVAL.columns = nil
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2706
		{
			yyVAL.columns = yyDollar[2].columns
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2712
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2716
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2722
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2726
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 527:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2739
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 528:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2743
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 529:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2747
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2751
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2757
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 532:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2759
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 533:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2763
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2765
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 535:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2769
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2771
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 537:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2774
		{
			yyVAL.empty = struct{}{}
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2776
		{
			yyVAL.empty = struct{}{}
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2781
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2785
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2791
		{
			yyVAL.str = JoinStr
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2795
		{
			yyVAL.str = JoinStr
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2799
		{
			yyVAL.str = JoinStr
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2805
		{
			yyVAL.str = StraightJoinStr
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2811
		{
			yyVAL.str = LeftJoinStr
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2815
		{
			yyVAL.str = LeftJoinStr
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2819
		{
			yyVAL.str = RightJoinStr
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2823
		{
			yyVAL.str = RightJoinStr
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2829
		{
			yyVAL.str = NaturalJoinStr
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2833
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2843
		{
			yyVAL.tableName = yyDollar[3].tableName
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2849
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2853
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2859
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2863
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2869
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 558:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2874
		{
			yyVAL.indexHints = nil
		}
	case 559:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2878
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 560:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2882
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 561:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2886
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 562:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2891
		{
			yyVAL.expr = nil
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2895
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2901
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2905
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2909
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2913
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2917
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2921
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2925
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 571:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2931
		{
			yyVAL.str = ""
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2935
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2941
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2945
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2951
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2955
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 577:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2959
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 578:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2963
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 579:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2967
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2971
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 581:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2975
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 582:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2979
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 583:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2983
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2987
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2993
		{
			yyVAL.str = IsNullStr
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2997
		{
			yyVAL.str = IsNotNullStr
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3001
		{
			yyVAL.str = IsTrueStr
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3005
		{
			yyVAL.str = IsNotTrueStr
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3009
		{
			yyVAL.str = IsFalseStr
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3013
		{
			yyVAL.str = IsNotFalseStr
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3019
		{
			yyVAL.str = EqualStr
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3023
		{
			yyVAL.str = LessThanStr
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3027
		{
			yyVAL.str = GreaterThanStr
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3031
		{
			yyVAL.str = LessEqualStr
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3035
		{
			yyVAL.str = GreaterEqualStr
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3039
		{
			yyVAL.str = NotEqualStr
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3043
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 598:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3048
		{
			yyVAL.expr = nil
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3052
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3058
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3062
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3066
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3072
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 604:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3077
		{
			yyVAL.selectExprs = nil
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3084
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3088
		{
			yyVAL.selectExprs = append(yyDollar[1].selectExprs, yyDollar[3].selectExpr)
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3094
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3098
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3104
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3108
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3112
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3116
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3120
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3124
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3128
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3132
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3136
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3140
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3144
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3148
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3152
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3156
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3160
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3164
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3168
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3172
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3176
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3180
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3184
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3188
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3192
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3196
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3204
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3218
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3222
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3226
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 644:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3246
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: yyDollar[3].str == DistinctStr, Exprs: yyDollar[4].selectExprs}
		}
	case 645:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3250
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 646:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3260
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 647:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3264
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 648:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3268
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 649:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3272
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 650:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3276
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 651:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3280
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 652:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3284
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 653:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3288
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 654:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3292
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 655:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3296
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 656:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3300
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 657:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3304
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 658:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3308
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 659:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3312
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 660:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3316
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 661:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3320
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 662:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3324
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 663:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3333
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 664:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3337
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 665:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3341
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: SelectExprs{yyDollar[3].selectExpr}, Over: yyDollar[5].over}
		}
	case 666:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3345
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 667:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3349
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: SelectExprs{yyDollar[3].selectExpr}, Over: yyDollar[5].over}
		}
	case 668:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3353
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 669:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3357
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 670:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3361
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 671:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3365
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 672:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3369
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 673:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3373
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 674:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3384
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 675:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3388
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3392
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 677:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3396
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 678:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3400
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 679:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3404
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 680:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3408
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 681:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3412
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 682:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3416
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 683:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3420
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 684:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3424
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 685:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3428
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 686:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3432
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 687:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3436
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 688:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3440
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 689:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3450
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 690:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3454
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 691:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3458
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 692:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3463
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 693:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3468
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 694:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3473
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 695:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3479
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3484
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 697:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3488
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 698:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3493
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Fsp: yyDollar[2].expr}
		}
	case 699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3497
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Fsp: yyDollar[2].expr}
		}
	case 700:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3501
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Fsp: yyDollar[2].expr}
		}
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3506
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Fsp: yyDollar[2].expr}
		}
	case 702:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3511
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Fsp: yyDollar[2].expr}
		}
	case 703:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3516
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Fsp: yyDollar[2].expr}
		}
	case 704:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3520
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 705:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3524
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 708:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3535
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 709:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3545
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 710:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3549
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 711:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3553
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 712:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3557
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 713:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3561
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 714:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3565
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs}
		}
	case 715:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3571
		{
			yyVAL.str = ""
		}
	case 716:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3575
		{
			yyVAL.str = BooleanModeStr
		}
	case 717:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3579
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 718:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3583
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 719:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3587
		{
			yyVAL.str = QueryExpansionStr
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3593
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3597
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 722:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3603
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 723:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3607
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 724:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3611
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3615
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 726:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3619
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 727:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3623
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3629
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 729:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3633
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3637
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 731:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3641
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 732:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3645
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3649
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 734:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3653
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 735:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3658
		{
			yyVAL.expr = nil
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3662
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 737:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3667
		{
			yyVAL.str = string("")
		}
	case 738:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3671
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3677
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 740:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3681
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 741:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3687
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 742:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3692
		{
			yyVAL.expr = nil
		}
	case 743:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3696
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3702
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 745:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3706
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 746:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3710
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3716
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3720
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3724
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3728
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3732
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3736
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3740
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3744
		{
			yyVAL.expr = &NullVal{}
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3750
		{
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 756:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3754
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 757:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3758
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 758:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3763
		{
			yyVAL.exprs = nil
		}
	case 759:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3767
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3773
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 761:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3777
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3783
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3787
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 764:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3792
		{
			yyVAL.expr = nil
		}
	case 765:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3796
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3802
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3806
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 768:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3811
		{
			yyVAL.orderBy = nil
		}
	case 769:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3815
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3821
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 771:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3825
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 772:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3831
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 773:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3835
		{
			yyVAL.order = &Order{Expr: &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}, Direction: yyDollar[2].str}
		}
	case 774:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3840
		{
			yyVAL.str = AscScr
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3844
		{
			yyVAL.str = AscScr
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3848
		{
			yyVAL.str = DescScr
		}
	case 777:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3853
		{
			yyVAL.limit = nil
		}
	case 778:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3857
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 779:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3861
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 780:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3865
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 781:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3870
		{
			yyVAL.str = ""
		}
	case 782:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3874
		{
			yyVAL.str = ForUpdateStr
		}
	case 783:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3878
		{
			yyVAL.str = ShareModeStr
		}
	case 784:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3891
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3895
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 786:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3899
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 787:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3904
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 788:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3908
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 789:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3912
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3919
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 791:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3923
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 792:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3927
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 793:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3931
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 794:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3936
		{
			yyVAL.setExprs = nil
		}
	case 795:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3940
		{
			yyVAL.setExprs = yyDollar[5].setExprs
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3946
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 797:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3950
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3956
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 799:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3960
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 800:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3966
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3972
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3982
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 803:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3986
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 804:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3992
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: NewStrVal([]byte("on"))}
		}
	case 805:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3996
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: NewStrVal([]byte("off"))}
		}
	case 806:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4000
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 807:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4004
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 809:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4011
		{
			yyVAL.bytes = []byte("charset")
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4018
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4022
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4026
		{
			yyVAL.expr = &Default{}
		}
	case 816:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4035
		{
			yyVAL.byt = 0
		}
	case 817:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4037
		{
			yyVAL.byt = 1
		}
	case 818:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4040
		{
			yyVAL.byt = 0
		}
	case 819:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4042
		{
			yyVAL.byt = 1
		}
	case 820:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4045
		{
			yyVAL.str = ""
		}
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4047
		{
			yyVAL.str = IgnoreStr
		}
	case 822:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4050
		{
			yyVAL.sqlVal = nil
		}
	case 823:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4052
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4056
		{
			yyVAL.empty = struct{}{}
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4058
		{
			yyVAL.empty = struct{}{}
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4060
		{
			yyVAL.empty = struct{}{}
		}
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4062
		{
			yyVAL.empty = struct{}{}
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4064
		{
			yyVAL.empty = struct{}{}
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4066
		{
			yyVAL.empty = struct{}{}
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4068
		{
			yyVAL.empty = struct{}{}
		}
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4070
		{
			yyVAL.empty = struct{}{}
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4072
		{
			yyVAL.empty = struct{}{}
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4076
		{
			yyVAL.empty = struct{}{}
		}
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4078
		{
			yyVAL.empty = struct{}{}
		}
	case 835:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4081
		{
			yyVAL.empty = struct{}{}
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4083
		{
			yyVAL.empty = struct{}{}
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4085
		{
			yyVAL.empty = struct{}{}
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4089
		{
			yyVAL.str = UniqueStr
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4091
		{
			yyVAL.str = FulltextStr
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4093
		{
			yyVAL.str = SpatialStr
		}
	case 841:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4096
		{
			yyVAL.str = ""
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4098
		{
			yyVAL.str = yyDollar[1].str
		}
	case 843:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4101
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 844:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4103
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4107
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4111
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4118
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4124
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4128
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4135
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 853:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4140
		{
			yyVAL.str = string("")
		}
	case 854:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4142
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 855:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4145
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4147
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 857:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4150
		{
			yyVAL.EnclosedBy = nil
		}
	case 858:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4154
		{
			yyVAL.EnclosedBy = &EnclosedBy{Optionally: yyDollar[1].boolVal, Delim: NewStrVal(yyDollar[4].bytes)}
		}
	case 859:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4159
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4163
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 861:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4168
		{
			yyVAL.sqlVal = nil
		}
	case 862:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4172
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[3].bytes)
		}
	case 863:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4177
		{
			yyVAL.sqlVal = nil
		}
	case 864:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4181
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[3].bytes)
		}
	case 865:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4186
		{
			yyVAL.Fields = nil
		}
	case 866:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4190
		{
			yyVAL.Fields = &Fields{TerminatedBy: yyDollar[2].sqlVal, EnclosedBy: yyDollar[3].EnclosedBy, EscapedBy: yyDollar[4].sqlVal}
		}
	case 867:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4195
		{
			yyVAL.Lines = nil
		}
	case 868:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4199
		{
			yyVAL.Lines = &Lines{StartingBy: yyDollar[2].sqlVal, TerminatedBy: yyDollar[3].sqlVal}
		}
	case 869:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4204
		{
			yyVAL.sqlVal = nil
		}
	case 870:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4208
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[3].bytes)
		}
	case 1238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4605
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4614
		{
			decNesting(yylex)
		}
	case 1240:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4619
		{
			skipToEnd(yylex)
		}
	case 1241:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4624
		{
			skipToEnd(yylex)
		}
	case 1242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4628
		{
			skipToEnd(yylex)
		}
	case 1243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4632
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
