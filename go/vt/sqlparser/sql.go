// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func yyPosition(yylex interface{}) int {
	return yylex.(*Tokenizer).Position
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:57
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	int                   int
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	statements            Statements
	partitions            Partitions
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	joinCondition         JoinCondition
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	asOf                  *AsOf
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	sqlVal                *SQLVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	setExprs              SetExprs
	setExpr               *SetExpr
	colIdent              ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	TableSpec             *TableSpec
	columnType            ColumnType
	columnOrder           *ColumnOrder
	triggerOrder          *TriggerOrder
	colKeyOpt             ColumnKeyOption
	optVal                Expr
	LengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexInfo             *IndexInfo
	indexOption           *IndexOption
	indexOptions          []*IndexOption
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	constraintDefinition  *ConstraintDefinition
	constraintInfo        ConstraintInfo
	ReferenceAction       ReferenceAction
	partDefs              []*PartitionDefinition
	partDef               *PartitionDefinition
	partSpec              *PartitionSpec
	vindexParam           VindexParam
	vindexParams          []VindexParam
	showFilter            *ShowFilter
	optLike               *OptLike
	over                  *Over
	caseStatementCases    []CaseStatementCase
	caseStatementCase     CaseStatementCase
	ifStatementConditions []IfStatementCondition
	ifStatementCondition  IfStatementCondition
	signalInfo            SignalInfo
	signalInfos           []SignalInfo
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const UNLOCK = 57373
const KEYS = 57374
const OF = 57375
const UNIQUE = 57376
const KEY = 57377
const SYSTEM_TIME = 57378
const VALUES = 57379
const LAST_INSERT_ID = 57380
const NEXT = 57381
const VALUE = 57382
const SHARE = 57383
const MODE = 57384
const SQL_NO_CACHE = 57385
const SQL_CACHE = 57386
const JOIN = 57387
const STRAIGHT_JOIN = 57388
const LEFT = 57389
const RIGHT = 57390
const INNER = 57391
const OUTER = 57392
const CROSS = 57393
const NATURAL = 57394
const USE = 57395
const FORCE = 57396
const ON = 57397
const USING = 57398
const ID = 57399
const HEX = 57400
const STRING = 57401
const INTEGRAL = 57402
const FLOAT = 57403
const HEXNUM = 57404
const VALUE_ARG = 57405
const LIST_ARG = 57406
const COMMENT = 57407
const COMMENT_KEYWORD = 57408
const BIT_LITERAL = 57409
const NULL = 57410
const TRUE = 57411
const FALSE = 57412
const OFF = 57413
const OR = 57414
const AND = 57415
const NOT = 57416
const BETWEEN = 57417
const CASE = 57418
const WHEN = 57419
const THEN = 57420
const ELSE = 57421
const ELSEIF = 57422
const END = 57423
const LE = 57424
const GE = 57425
const NE = 57426
const NULL_SAFE_EQUAL = 57427
const IS = 57428
const LIKE = 57429
const REGEXP = 57430
const IN = 57431
const SHIFT_LEFT = 57432
const SHIFT_RIGHT = 57433
const DIV = 57434
const MOD = 57435
const UNARY = 57436
const COLLATE = 57437
const BINARY = 57438
const UNDERSCORE_BINARY = 57439
const UNDERSCORE_UTF8MB4 = 57440
const INTERVAL = 57441
const JSON_EXTRACT_OP = 57442
const JSON_UNQUOTE_EXTRACT_OP = 57443
const CREATE = 57444
const ALTER = 57445
const DROP = 57446
const RENAME = 57447
const ANALYZE = 57448
const ADD = 57449
const FLUSH = 57450
const MODIFY = 57451
const CHANGE = 57452
const SCHEMA = 57453
const TABLE = 57454
const INDEX = 57455
const INDEXES = 57456
const VIEW = 57457
const TO = 57458
const IGNORE = 57459
const IF = 57460
const PRIMARY = 57461
const COLUMN = 57462
const SPATIAL = 57463
const FULLTEXT = 57464
const KEY_BLOCK_SIZE = 57465
const CHECK = 57466
const ACTION = 57467
const CASCADE = 57468
const CONSTRAINT = 57469
const FOREIGN = 57470
const NO = 57471
const REFERENCES = 57472
const RESTRICT = 57473
const FIRST = 57474
const AFTER = 57475
const SHOW = 57476
const DESCRIBE = 57477
const EXPLAIN = 57478
const DATE = 57479
const ESCAPE = 57480
const REPAIR = 57481
const OPTIMIZE = 57482
const TRUNCATE = 57483
const FORMAT = 57484
const MAXVALUE = 57485
const PARTITION = 57486
const REORGANIZE = 57487
const LESS = 57488
const THAN = 57489
const PROCEDURE = 57490
const TRIGGER = 57491
const TRIGGERS = 57492
const VINDEX = 57493
const VINDEXES = 57494
const STATUS = 57495
const VARIABLES = 57496
const WARNINGS = 57497
const SEQUENCE = 57498
const EACH = 57499
const ROW = 57500
const BEFORE = 57501
const FOLLOWS = 57502
const PRECEDES = 57503
const DEFINER = 57504
const CLASS_ORIGIN = 57505
const SUBCLASS_ORIGIN = 57506
const MESSAGE_TEXT = 57507
const MYSQL_ERRNO = 57508
const CONSTRAINT_CATALOG = 57509
const CONSTRAINT_SCHEMA = 57510
const CONSTRAINT_NAME = 57511
const CATALOG_NAME = 57512
const SCHEMA_NAME = 57513
const TABLE_NAME = 57514
const COLUMN_NAME = 57515
const CURSOR_NAME = 57516
const SIGNAL = 57517
const SQLSTATE = 57518
const BEGIN = 57519
const START = 57520
const TRANSACTION = 57521
const COMMIT = 57522
const ROLLBACK = 57523
const BIT = 57524
const TINYINT = 57525
const SMALLINT = 57526
const MEDIUMINT = 57527
const INT = 57528
const INTEGER = 57529
const BIGINT = 57530
const INTNUM = 57531
const REAL = 57532
const DOUBLE = 57533
const FLOAT_TYPE = 57534
const DECIMAL = 57535
const NUMERIC = 57536
const DEC = 57537
const FIXED = 57538
const PRECISION = 57539
const TIME = 57540
const TIMESTAMP = 57541
const DATETIME = 57542
const YEAR = 57543
const CHAR = 57544
const VARCHAR = 57545
const BOOL = 57546
const CHARACTER = 57547
const VARBINARY = 57548
const NCHAR = 57549
const NVARCHAR = 57550
const NATIONAL = 57551
const VARYING = 57552
const TEXT = 57553
const TINYTEXT = 57554
const MEDIUMTEXT = 57555
const LONGTEXT = 57556
const LONG = 57557
const BLOB = 57558
const TINYBLOB = 57559
const MEDIUMBLOB = 57560
const LONGBLOB = 57561
const JSON = 57562
const ENUM = 57563
const GEOMETRY = 57564
const POINT = 57565
const LINESTRING = 57566
const POLYGON = 57567
const GEOMETRYCOLLECTION = 57568
const MULTIPOINT = 57569
const MULTILINESTRING = 57570
const MULTIPOLYGON = 57571
const NULLX = 57572
const AUTO_INCREMENT = 57573
const APPROXNUM = 57574
const SIGNED = 57575
const UNSIGNED = 57576
const ZEROFILL = 57577
const COLLATION = 57578
const DATABASES = 57579
const SCHEMAS = 57580
const TABLES = 57581
const VITESS_METADATA = 57582
const VSCHEMA = 57583
const FULL = 57584
const PROCESSLIST = 57585
const COLUMNS = 57586
const FIELDS = 57587
const ENGINES = 57588
const PLUGINS = 57589
const NAMES = 57590
const CHARSET = 57591
const GLOBAL = 57592
const SESSION = 57593
const ISOLATION = 57594
const LEVEL = 57595
const READ = 57596
const WRITE = 57597
const ONLY = 57598
const REPEATABLE = 57599
const COMMITTED = 57600
const UNCOMMITTED = 57601
const SERIALIZABLE = 57602
const CURRENT_TIMESTAMP = 57603
const DATABASE = 57604
const CURRENT_DATE = 57605
const CURRENT_USER = 57606
const CURRENT_TIME = 57607
const LOCALTIME = 57608
const LOCALTIMESTAMP = 57609
const UTC_DATE = 57610
const UTC_TIME = 57611
const UTC_TIMESTAMP = 57612
const REPLACE = 57613
const CONVERT = 57614
const CAST = 57615
const SUBSTR = 57616
const SUBSTRING = 57617
const GROUP_CONCAT = 57618
const SEPARATOR = 57619
const TIMESTAMPADD = 57620
const TIMESTAMPDIFF = 57621
const NTH_VALUE = 57622
const NTILE = 57623
const OVER = 57624
const PERCENT_RANK = 57625
const RANK = 57626
const ROW_NUMBER = 57627
const WINDOW = 57628
const CUME_DIST = 57629
const DENSE_RANK = 57630
const FIRST_VALUE = 57631
const GROUPING = 57632
const GROUPS = 57633
const LAG = 57634
const LAST_VALUE = 57635
const LEAD = 57636
const MATCH = 57637
const AGAINST = 57638
const BOOLEAN = 57639
const LANGUAGE = 57640
const WITH = 57641
const QUERY = 57642
const EXPANSION = 57643
const UNUSED = 57644
const ARRAY = 57645
const DESCRIPTION = 57646
const EMPTY = 57647
const EXCEPT = 57648
const JSON_TABLE = 57649
const LATERAL = 57650
const MEMBER = 57651
const RECURSIVE = 57652
const ACTIVE = 57653
const ADMIN = 57654
const BUCKETS = 57655
const CLONE = 57656
const COMPONENT = 57657
const DEFINITION = 57658
const ENFORCED = 57659
const EXCLUDE = 57660
const FOLLOWING = 57661
const GEOMCOLLECTION = 57662
const GET_MASTER_PUBLIC_KEY = 57663
const HISTOGRAM = 57664
const HISTORY = 57665
const INACTIVE = 57666
const INVISIBLE = 57667
const LOCKED = 57668
const MASTER_COMPRESSION_ALGORITHMS = 57669
const MASTER_PUBLIC_KEY_PATH = 57670
const MASTER_TLS_CIPHERSUITES = 57671
const MASTER_ZSTD_COMPRESSION_LEVEL = 57672
const NESTED = 57673
const NETWORK_NAMESPACE = 57674
const NOWAIT = 57675
const NULLS = 57676
const OJ = 57677
const OLD = 57678
const OPTIONAL = 57679
const ORDINALITY = 57680
const ORGANIZATION = 57681
const OTHERS = 57682
const PATH = 57683
const PERSIST = 57684
const PERSIST_ONLY = 57685
const PRECEDING = 57686
const PRIVILEGE_CHECKS_USER = 57687
const PROCESS = 57688
const RANDOM = 57689
const REFERENCE = 57690
const REQUIRE_ROW_FORMAT = 57691
const RESOURCE = 57692
const RESPECT = 57693
const RESTART = 57694
const RETAIN = 57695
const REUSE = 57696
const ROLE = 57697
const SECONDARY = 57698
const SECONDARY_ENGINE = 57699
const SECONDARY_LOAD = 57700
const SECONDARY_UNLOAD = 57701
const SKIP = 57702
const SRID = 57703
const THREAD_PRIORITY = 57704
const TIES = 57705
const UNBOUNDED = 57706
const VCPU = 57707
const VISIBLE = 57708
const SYSTEM = 57709

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"OF",
	"UNIQUE",
	"KEY",
	"SYSTEM_TIME",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"ELSEIF",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"MODIFY",
	"CHANGE",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"INDEXES",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"FIRST",
	"AFTER",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"FORMAT",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TRIGGERS",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"EACH",
	"ROW",
	"BEFORE",
	"FOLLOWS",
	"PRECEDES",
	"DEFINER",
	"CLASS_ORIGIN",
	"SUBCLASS_ORIGIN",
	"MESSAGE_TEXT",
	"MYSQL_ERRNO",
	"CONSTRAINT_CATALOG",
	"CONSTRAINT_SCHEMA",
	"CONSTRAINT_NAME",
	"CATALOG_NAME",
	"SCHEMA_NAME",
	"TABLE_NAME",
	"COLUMN_NAME",
	"CURSOR_NAME",
	"SIGNAL",
	"SQLSTATE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DEC",
	"FIXED",
	"PRECISION",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NATIONAL",
	"VARYING",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"LONG",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"NTH_VALUE",
	"NTILE",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"ROW_NUMBER",
	"WINDOW",
	"CUME_DIST",
	"DENSE_RANK",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"LAG",
	"LAST_VALUE",
	"LEAD",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"DESCRIPTION",
	"EMPTY",
	"EXCEPT",
	"JSON_TABLE",
	"LATERAL",
	"MEMBER",
	"RECURSIVE",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"SYSTEM",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 32,
	-2, 4,
	-1, 34,
	166, 79,
	-2, 765,
	-1, 42,
	170, 413,
	171, 413,
	-2, 401,
	-1, 49,
	1, 1083,
	385, 1083,
	-2, 432,
	-1, 365,
	116, 773,
	-2, 769,
	-1, 366,
	116, 774,
	-2, 770,
	-1, 437,
	86, 1035,
	116, 1035,
	-2, 68,
	-1, 438,
	86, 941,
	116, 941,
	-2, 69,
	-1, 443,
	86, 901,
	116, 901,
	-2, 734,
	-1, 445,
	86, 976,
	116, 976,
	-2, 736,
	-1, 621,
	5, 32,
	-2, 426,
	-1, 625,
	5, 32,
	-2, 425,
	-1, 753,
	1, 481,
	5, 481,
	12, 481,
	13, 481,
	14, 481,
	15, 481,
	17, 481,
	19, 481,
	29, 481,
	30, 481,
	45, 481,
	46, 481,
	47, 481,
	48, 481,
	49, 481,
	51, 481,
	52, 481,
	55, 481,
	56, 481,
	58, 481,
	59, 481,
	385, 481,
	-2, 506,
	-1, 756,
	56, 49,
	58, 49,
	-2, 53,
	-1, 943,
	116, 776,
	-2, 772,
	-1, 1151,
	57, 343,
	60, 343,
	-2, 307,
	-1, 1203,
	5, 33,
	-2, 570,
	-1, 1234,
	5, 32,
	-2, 711,
	-1, 1327,
	5, 32,
	-2, 70,
	-1, 1442,
	1, 525,
	5, 525,
	12, 525,
	13, 525,
	14, 525,
	15, 525,
	17, 525,
	19, 525,
	29, 525,
	30, 525,
	45, 525,
	46, 525,
	47, 525,
	48, 525,
	49, 525,
	51, 525,
	52, 525,
	55, 525,
	56, 525,
	58, 525,
	59, 525,
	385, 525,
	-2, 506,
	-1, 1545,
	5, 33,
	-2, 712,
	-1, 1575,
	5, 32,
	-2, 70,
	-1, 1614,
	5, 32,
	-2, 714,
	-1, 1700,
	5, 33,
	-2, 715,
	-1, 1750,
	385, 128,
	-2, 32,
}

const yyPrivate = 57344

const yyLast = 18551

var yyAct = [...]int{

	397, 56, 1749, 1805, 1783, 1774, 1744, 1758, 1745, 1753,
	7, 1752, 6, 1119, 1754, 8, 1704, 1508, 1688, 1748,
	1628, 1751, 5, 1376, 1455, 478, 1117, 1593, 706, 366,
	1373, 1422, 1578, 1456, 1061, 1030, 370, 433, 396, 1282,
	913, 1055, 1423, 1705, 1032, 1028, 1558, 1024, 1074, 1070,
	383, 448, 1026, 344, 1433, 1419, 1060, 56, 88, 1141,
	1112, 1429, 968, 1395, 1350, 1144, 368, 873, 1351, 349,
	104, 981, 1067, 104, 1004, 1107, 884, 769, 1015, 104,
	749, 996, 927, 1319, 372, 945, 359, 640, 646, 1095,
	750, 66, 768, 431, 857, 436, 353, 1008, 454, 428,
	758, 652, 1825, 722, 1821, 104, 1816, 1808, 1005, 480,
	104, 1800, 104, 439, 1799, 1769, 723, 65, 70, 1762,
	1715, 1743, 1698, 104, 476, 466, 1732, 1509, 1714, 1697,
	104, 1412, 1537, 453, 659, 658, 1450, 1269, 1451, 1452,
	1268, 1260, 90, 1270, 357, 1050, 1051, 72, 73, 74,
	75, 76, 660, 1049, 770, 1162, 771, 1750, 3, 608,
	57, 30, 31, 98, 94, 95, 592, 96, 1161, 341,
	618, 343, 335, 334, 1302, 1081, 1378, 1096, 331, 1601,
	1528, 32, 1083, 83, 456, 410, 458, 416, 418, 417,
	414, 415, 413, 412, 411, 1101, 1083, 1096, 1108, 1526,
	1166, 99, 419, 420, 1087, 1089, 326, 1088, 27, 1160,
	57, 30, 31, 338, 339, 1706, 1665, 671, 670, 680,
	681, 673, 674, 675, 676, 677, 678, 679, 672, 332,
	333, 682, 1126, 336, 591, 594, 85, 87, 596, 1682,
	82, 1718, 1719, 1294, 904, 616, 92, 91, 611, 1299,
	1298, 903, 612, 609, 610, 1380, 1379, 617, 1125, 63,
	1158, 1152, 1153, 901, 1151, 457, 1154, 1155, 603, 604,
	1295, 593, 595, 1742, 1731, 1689, 328, 1375, 1009, 1075,
	67, 1579, 1580, 1680, 1300, 1788, 1292, 89, 905, 90,
	902, 1355, 1293, 1826, 1823, 342, 1817, 1809, 455, 463,
	343, 1164, 1167, 1588, 477, 1629, 477, 477, 1333, 1033,
	1035, 477, 329, 477, 97, 848, 840, 1587, 1631, 477,
	1259, 1258, 1672, 1257, 451, 634, 300, 93, 56, 56,
	104, 1778, 1548, 466, 1273, 466, 466, 622, 1265, 624,
	466, 1096, 466, 1077, 1174, 1192, 1740, 1173, 466, 623,
	56, 1297, 1309, 911, 1213, 1110, 694, 695, 661, 1077,
	777, 764, 1159, 662, 472, 691, 1086, 1210, 693, 1056,
	682, 104, 886, 887, 888, 889, 890, 891, 892, 893,
	894, 895, 896, 897, 1283, 590, 1045, 84, 1157, 1630,
	1034, 1696, 1474, 92, 91, 908, 704, 874, 708, 709,
	710, 711, 712, 713, 714, 715, 716, 717, 718, 1134,
	721, 724, 724, 724, 730, 724, 724, 730, 724, 730,
	739, 740, 741, 742, 743, 744, 1191, 754, 1586, 1163,
	597, 598, 643, 647, 639, 602, 1666, 605, 1076, 648,
	58, 1073, 1077, 619, 1475, 1776, 659, 658, 1777, 663,
	1775, 600, 692, 1819, 1076, 104, 104, 104, 999, 1165,
	694, 695, 1077, 1296, 660, 1370, 660, 449, 880, 650,
	466, 439, 766, 694, 695, 477, 477, 104, 1077, 748,
	672, 466, 875, 682, 707, 621, 625, 1374, 104, 79,
	58, 449, 104, 952, 1135, 720, 1143, 104, 636, 613,
	637, 1653, 104, 638, 466, 466, 1149, 649, 950, 951,
	949, 753, 772, 627, 628, 725, 727, 729, 731, 733,
	735, 736, 738, 914, 915, 447, 80, 757, 726, 728,
	762, 732, 734, 626, 737, 459, 601, 1076, 1812, 1806,
	1811, 1414, 462, 1071, 658, 1072, 27, 997, 57, 30,
	31, 1069, 1075, 1815, 1796, 705, 27, 1076, 57, 30,
	31, 660, 849, 1359, 1355, 1208, 842, 1207, 1356, 32,
	655, 1363, 1365, 1076, 659, 658, 1369, 1082, 1142, 32,
	1366, 615, 859, 1462, 659, 658, 1702, 27, 1360, 57,
	30, 31, 660, 477, 477, 1573, 997, 63, 1221, 860,
	861, 1789, 660, 1679, 477, 477, 340, 63, 1572, 1324,
	32, 673, 674, 675, 676, 677, 678, 679, 672, 1322,
	1759, 682, 466, 466, 104, 104, 104, 63, 1303, 104,
	1759, 1608, 25, 466, 466, 1824, 477, 948, 63, 467,
	468, 469, 470, 1729, 1790, 27, 1570, 57, 30, 31,
	670, 680, 681, 673, 674, 675, 676, 677, 678, 679,
	672, 1759, 939, 682, 104, 466, 1820, 1467, 32, 104,
	1784, 1344, 1792, 910, 1791, 1760, 876, 659, 658, 1728,
	425, 426, 1320, 1146, 1798, 1760, 104, 466, 942, 862,
	863, 466, 659, 658, 56, 660, 63, 659, 658, 1785,
	877, 348, 916, 1784, 946, 934, 936, 937, 898, 708,
	660, 935, 969, 909, 970, 660, 1760, 864, 865, 1759,
	1623, 1733, 1803, 1806, 1802, 1209, 1677, 631, 870, 871,
	659, 658, 55, 466, 1740, 675, 676, 677, 678, 679,
	672, 1647, 55, 682, 1740, 931, 932, 918, 660, 630,
	947, 986, 989, 1490, 920, 1027, 449, 941, 998, 754,
	900, 972, 973, 754, 659, 658, 1187, 1188, 1189, 466,
	466, 1416, 943, 55, 1760, 1740, 104, 921, 659, 658,
	922, 1271, 660, 1272, 104, 104, 659, 658, 104, 104,
	1564, 1730, 104, 104, 104, 707, 660, 1283, 632, 984,
	985, 1644, 439, 1057, 660, 1062, 975, 1710, 633, 466,
	449, 1040, 1564, 1707, 633, 1042, 1396, 1584, 980, 982,
	994, 1623, 1692, 988, 991, 992, 993, 1511, 58, 1564,
	1681, 55, 1065, 1740, 1623, 1673, 1623, 1634, 58, 753,
	1623, 633, 477, 753, 477, 1564, 1563, 753, 1550, 633,
	1003, 705, 1006, 1007, 1038, 1077, 1505, 1043, 1398, 1054,
	1047, 1046, 1547, 633, 765, 1501, 979, 1498, 1496, 58,
	104, 466, 1058, 466, 859, 1495, 1340, 104, 104, 1482,
	1481, 104, 1478, 1479, 1478, 1477, 1642, 943, 1097, 1098,
	1099, 1100, 1339, 1278, 1012, 633, 1114, 1115, 1116, 1204,
	633, 760, 104, 1132, 104, 104, 1131, 971, 1109, 1111,
	882, 104, 705, 856, 1400, 855, 27, 977, 633, 1404,
	854, 1399, 846, 1397, 844, 843, 841, 58, 1402, 780,
	779, 104, 104, 104, 104, 104, 474, 942, 1638, 1232,
	760, 1401, 1637, 1193, 1468, 1261, 761, 1233, 763, 67,
	1076, 27, 1261, 1384, 1403, 1405, 1359, 1355, 466, 363,
	1420, 1356, 67, 765, 1357, 1358, 1121, 63, 1123, 671,
	670, 680, 681, 673, 674, 675, 676, 677, 678, 679,
	672, 1360, 1613, 682, 1078, 761, 977, 759, 946, 1011,
	1543, 1012, 977, 1039, 1652, 759, 1176, 1177, 765, 647,
	1204, 1178, 63, 63, 1179, 1204, 1058, 27, 1012, 1235,
	1236, 1186, 1480, 754, 754, 754, 754, 754, 1012, 1198,
	1274, 943, 1048, 1204, 1226, 1225, 1148, 1145, 1027, 1130,
	1253, 1190, 1185, 759, 947, 1194, 912, 847, 350, 1716,
	754, 1708, 104, 104, 104, 104, 104, 1645, 439, 1237,
	1201, 1595, 1574, 1083, 104, 1553, 1113, 104, 63, 1461,
	1108, 104, 1434, 1435, 1202, 1277, 1766, 1103, 1256, 104,
	386, 385, 388, 389, 390, 391, 1255, 1220, 1102, 387,
	392, 1377, 1118, 1596, 1222, 1764, 1062, 924, 1746, 63,
	466, 1486, 1262, 1238, 1437, 1275, 1241, 753, 753, 753,
	753, 753, 1250, 1218, 1239, 1240, 1420, 1242, 917, 1325,
	881, 851, 753, 1247, 1284, 1440, 1439, 1244, 1248, 1243,
	56, 1280, 1281, 1245, 753, 1725, 1266, 1713, 1246, 1381,
	477, 1175, 477, 477, 354, 355, 1723, 1312, 1184, 1314,
	1315, 1316, 1317, 1017, 1020, 1021, 1022, 1018, 466, 1019,
	1023, 1183, 1611, 1434, 1435, 1249, 1500, 1021, 1022, 466,
	104, 466, 466, 1285, 976, 978, 1234, 1466, 1465, 1279,
	983, 653, 654, 1541, 1304, 1305, 27, 1343, 57, 30,
	31, 1311, 1263, 641, 1264, 979, 1323, 1321, 1313, 345,
	651, 1318, 778, 1328, 642, 629, 475, 1342, 1540, 32,
	1352, 1364, 1368, 1591, 1341, 1017, 1020, 1021, 1022, 1018,
	104, 1019, 1023, 914, 915, 1122, 1348, 1361, 1388, 1371,
	1372, 1362, 466, 850, 1354, 1347, 1138, 63, 653, 654,
	1345, 1025, 839, 1641, 1425, 1658, 56, 671, 670, 680,
	681, 673, 674, 675, 676, 677, 678, 679, 672, 1386,
	1759, 682, 351, 352, 1334, 1807, 1336, 1337, 1444, 1445,
	1446, 1390, 346, 67, 1657, 466, 466, 1598, 1389, 439,
	1421, 1406, 1424, 1407, 1182, 1338, 1394, 1327, 1261, 1330,
	1331, 1332, 1181, 466, 1768, 1767, 69, 1214, 1211, 872,
	656, 1443, 1767, 1768, 1669, 1464, 1438, 907, 71, 1388,
	1062, 48, 1062, 466, 466, 1760, 466, 466, 1415, 64,
	1413, 1454, 1757, 24, 1, 1441, 1353, 1510, 1592, 1156,
	1459, 1460, 1687, 1068, 1059, 78, 446, 77, 1458, 1349,
	1133, 1453, 599, 696, 697, 698, 699, 700, 701, 702,
	703, 1484, 1485, 1582, 308, 1066, 1469, 1470, 1448, 1290,
	1289, 1286, 1447, 1473, 1301, 104, 1080, 1288, 1287, 1291,
	1476, 786, 55, 104, 1740, 784, 785, 1084, 1085, 783,
	1090, 1091, 1092, 1093, 1094, 788, 787, 1079, 782, 1431,
	311, 434, 773, 926, 86, 754, 49, 1585, 1104, 1105,
	1106, 1367, 1493, 1426, 466, 1150, 1471, 104, 466, 81,
	879, 1488, 1491, 606, 1449, 466, 607, 313, 466, 466,
	466, 690, 1494, 1535, 104, 1517, 1180, 1267, 440, 1427,
	657, 395, 1717, 1504, 645, 1656, 1597, 1219, 719, 995,
	1200, 27, 371, 57, 30, 31, 933, 1516, 1203, 1205,
	384, 1206, 381, 382, 1137, 919, 1231, 1212, 664, 369,
	1215, 1216, 1217, 361, 32, 752, 745, 1223, 58, 1224,
	1506, 1524, 1227, 1228, 1016, 1229, 1230, 1014, 1013, 753,
	852, 429, 1436, 707, 466, 466, 466, 1542, 1556, 1062,
	1432, 751, 63, 466, 1383, 1252, 56, 614, 1275, 327,
	1557, 466, 1560, 1561, 1536, 1664, 923, 29, 441, 68,
	356, 1562, 19, 1538, 18, 1759, 17, 620, 1566, 20,
	1780, 21, 707, 1568, 22, 1567, 104, 464, 16, 15,
	1581, 1552, 14, 1551, 1554, 1515, 460, 33, 37, 36,
	1492, 35, 10, 1329, 1124, 1594, 337, 1589, 885, 466,
	883, 1497, 1577, 1583, 1425, 1458, 1804, 1615, 1782, 1756,
	1755, 23, 13, 12, 11, 9, 1734, 1590, 4, 347,
	1760, 26, 2, 0, 0, 0, 0, 1569, 0, 1571,
	0, 0, 0, 0, 0, 878, 0, 466, 466, 0,
	466, 0, 1424, 466, 0, 104, 1612, 104, 0, 1640,
	0, 0, 1651, 0, 466, 0, 0, 0, 1632, 1639,
	1620, 1621, 1622, 0, 466, 1619, 1633, 1627, 0, 1599,
	0, 1635, 1600, 1636, 1425, 0, 56, 55, 466, 1740,
	0, 0, 1646, 1650, 944, 466, 104, 953, 954, 955,
	956, 957, 958, 959, 960, 961, 962, 963, 964, 965,
	966, 967, 1654, 1575, 0, 1670, 0, 0, 1676, 1385,
	0, 633, 1424, 466, 0, 0, 0, 0, 1674, 0,
	1393, 1678, 0, 0, 1306, 1307, 1308, 1310, 0, 0,
	1684, 0, 0, 1685, 0, 466, 0, 0, 1594, 1062,
	1690, 0, 466, 466, 1000, 0, 0, 1694, 1691, 671,
	670, 680, 681, 673, 674, 675, 676, 677, 678, 679,
	672, 0, 466, 682, 1614, 0, 439, 1699, 0, 0,
	104, 0, 0, 58, 0, 0, 1712, 0, 0, 466,
	0, 0, 0, 0, 1720, 479, 1676, 479, 479, 1722,
	1724, 1727, 479, 1721, 479, 1735, 0, 1739, 466, 1738,
	479, 56, 1736, 1761, 1693, 707, 466, 1741, 1747, 1737,
	0, 0, 1765, 1763, 0, 0, 0, 1643, 0, 0,
	0, 0, 0, 1726, 0, 0, 0, 0, 1649, 0,
	56, 0, 1781, 1671, 1779, 0, 680, 681, 673, 674,
	675, 676, 677, 678, 679, 672, 56, 1793, 682, 0,
	0, 0, 0, 56, 0, 0, 0, 0, 0, 56,
	56, 56, 1781, 1781, 56, 1795, 0, 0, 1813, 56,
	0, 1781, 1797, 56, 0, 0, 0, 56, 1801, 1781,
	56, 1683, 56, 1810, 1781, 0, 56, 0, 1781, 1686,
	0, 0, 1818, 0, 0, 0, 0, 0, 0, 1822,
	0, 0, 0, 1025, 0, 0, 1770, 1771, 1518, 0,
	0, 0, 0, 0, 1520, 0, 441, 0, 0, 0,
	0, 0, 774, 0, 0, 1529, 1530, 0, 0, 0,
	0, 1794, 0, 838, 1033, 1035, 0, 0, 0, 0,
	0, 0, 0, 0, 1544, 1545, 1546, 1472, 1549, 0,
	0, 0, 0, 1814, 0, 0, 479, 479, 0, 0,
	1555, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1195, 1196, 1197, 321, 0, 0, 0, 1539, 671, 670,
	680, 681, 673, 674, 675, 676, 677, 678, 679, 672,
	0, 0, 682, 0, 0, 0, 0, 0, 0, 0,
	0, 318, 0, 0, 0, 0, 0, 755, 0, 0,
	0, 0, 0, 0, 0, 1034, 671, 670, 680, 681,
	673, 674, 675, 676, 677, 678, 679, 672, 0, 0,
	682, 0, 0, 0, 1521, 1522, 0, 1523, 0, 0,
	1525, 0, 1527, 0, 0, 0, 0, 0, 101, 0,
	0, 0, 0, 301, 0, 1607, 0, 330, 0, 0,
	304, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	312, 319, 320, 0, 479, 479, 0, 1624, 0, 1625,
	1626, 0, 0, 430, 0, 479, 479, 0, 450, 0,
	452, 0, 0, 0, 0, 1565, 0, 0, 0, 0,
	0, 461, 0, 0, 0, 0, 310, 0, 471, 0,
	0, 0, 0, 317, 0, 0, 0, 479, 1659, 0,
	0, 1660, 1661, 1662, 1663, 0, 0, 0, 1667, 1668,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 929,
	0, 0, 0, 938, 479, 0, 0, 0, 0, 0,
	27, 28, 57, 30, 31, 0, 0, 0, 0, 0,
	0, 0, 0, 302, 0, 1346, 0, 0, 0, 62,
	0, 0, 0, 32, 52, 53, 0, 0, 0, 0,
	0, 0, 0, 1695, 0, 974, 0, 0, 0, 0,
	1700, 0, 0, 0, 314, 305, 306, 43, 315, 316,
	324, 63, 0, 441, 307, 309, 1709, 303, 323, 322,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1392,
	0, 1001, 1002, 0, 0, 0, 0, 0, 0, 0,
	1408, 1409, 0, 1410, 1411, 0, 0, 0, 0, 0,
	0, 0, 0, 644, 0, 1417, 1418, 441, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 479,
	0, 479, 0, 34, 59, 39, 38, 41, 0, 54,
	0, 0, 0, 0, 1442, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 0, 0, 325, 0, 0,
	0, 1786, 1787, 102, 0, 42, 61, 60, 0, 0,
	50, 51, 40, 0, 0, 0, 0, 0, 473, 0,
	0, 0, 0, 0, 1463, 0, 360, 1534, 0, 432,
	442, 0, 0, 479, 102, 479, 102, 0, 0, 0,
	0, 0, 0, 0, 1533, 0, 55, 102, 44, 45,
	0, 46, 47, 0, 102, 0, 0, 0, 0, 635,
	0, 0, 0, 0, 0, 666, 0, 669, 1532, 0,
	0, 0, 0, 1489, 683, 684, 685, 686, 687, 688,
	689, 0, 667, 668, 665, 671, 670, 680, 681, 673,
	674, 675, 676, 677, 678, 679, 672, 0, 0, 682,
	0, 0, 0, 479, 0, 671, 670, 680, 681, 673,
	674, 675, 676, 677, 678, 679, 672, 0, 0, 682,
	929, 1519, 671, 670, 680, 681, 673, 674, 675, 676,
	677, 678, 679, 672, 1531, 0, 682, 0, 0, 0,
	0, 0, 58, 747, 0, 756, 671, 670, 680, 681,
	673, 674, 675, 676, 677, 678, 679, 672, 0, 0,
	682, 0, 0, 0, 0, 781, 1391, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 845, 0, 0, 0,
	430, 0, 0, 0, 0, 853, 0, 671, 670, 680,
	681, 673, 674, 675, 676, 677, 678, 679, 672, 0,
	0, 682, 0, 441, 0, 0, 1199, 0, 0, 0,
	0, 0, 671, 670, 680, 681, 673, 674, 675, 676,
	677, 678, 679, 672, 0, 0, 682, 671, 670, 680,
	681, 673, 674, 675, 676, 677, 678, 679, 672, 0,
	0, 682, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 479, 0, 102, 0, 0, 0, 0, 0,
	0, 1602, 1603, 1604, 1605, 1606, 0, 0, 0, 1609,
	1610, 671, 670, 680, 681, 673, 674, 675, 676, 677,
	678, 679, 672, 0, 0, 682, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 102, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1326, 0, 866, 867, 868, 0, 0, 869, 0, 0,
	0, 479, 808, 479, 479, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 899, 0, 0, 0, 0, 906, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 925, 0, 0, 0, 0, 102,
	102, 102, 0, 0, 479, 0, 0, 0, 442, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 102, 0, 0, 0, 795, 0, 0, 0, 0,
	0, 0, 102, 0, 0, 0, 102, 0, 0, 0,
	0, 102, 0, 0, 441, 0, 858, 1428, 1430, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1430, 0, 809, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1010, 479, 479, 0, 479, 1457,
	0, 0, 0, 0, 0, 0, 0, 1041, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1772, 822, 825, 826, 827, 828, 829, 830, 0,
	831, 832, 833, 834, 835, 836, 837, 0, 810, 811,
	812, 813, 789, 793, 823, 790, 796, 792, 794, 791,
	0, 797, 798, 799, 800, 801, 802, 803, 804, 805,
	806, 807, 814, 815, 816, 817, 818, 819, 820, 821,
	0, 0, 0, 0, 0, 0, 0, 0, 102, 102,
	102, 0, 0, 102, 0, 0, 1499, 0, 1120, 0,
	1503, 0, 0, 0, 0, 1127, 1128, 1507, 0, 1129,
	1512, 1513, 1514, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 102, 0,
	1136, 0, 0, 102, 0, 0, 0, 0, 0, 1147,
	0, 0, 0, 0, 0, 0, 0, 824, 0, 0,
	102, 0, 0, 0, 0, 0, 858, 0, 0, 1168,
	1169, 1170, 1171, 1172, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1559, 1559, 1559, 0,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	0, 0, 0, 1559, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 360, 360, 0, 0, 0, 360, 360,
	360, 360, 0, 0, 0, 442, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 360, 360, 360, 360, 0,
	102, 479, 0, 0, 0, 0, 0, 0, 102, 1036,
	0, 0, 102, 102, 0, 0, 102, 1044, 858, 442,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 858, 0, 0, 0, 0, 0, 0, 0, 1616,
	1617, 0, 1618, 0, 0, 1559, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1457, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1457, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1648, 0, 0, 0, 0, 0, 0, 1559, 0, 0,
	0, 0, 0, 0, 102, 0, 0, 0, 0, 0,
	0, 102, 102, 0, 0, 102, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1675, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 102, 0, 1139, 1140,
	0, 0, 0, 0, 0, 102, 0, 1457, 0, 0,
	0, 0, 0, 0, 479, 479, 0, 0, 1335, 0,
	0, 0, 0, 0, 0, 102, 102, 102, 102, 102,
	0, 441, 0, 0, 1701, 858, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 360, 0, 0,
	0, 1711, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1382, 0,
	1457, 0, 0, 0, 0, 0, 0, 0, 1559, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 360,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 360, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 442, 102, 102, 102, 102,
	102, 0, 0, 0, 0, 0, 0, 0, 1251, 0,
	0, 102, 0, 0, 0, 1036, 0, 0, 0, 0,
	0, 0, 0, 102, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1483, 0, 0, 0, 0, 0, 0,
	0, 1487, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 1502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 360, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 360, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 442, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1576, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	0, 0, 0, 0, 0, 0, 0, 102, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1655, 0, 0, 0, 0, 0,
	0, 102, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 102, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1703, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	102, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1036,
	0, 1036, 577, 565, 0, 530, 580, 504, 520, 588,
	521, 524, 556, 490, 540, 205, 518, 0, 507, 485,
	514, 486, 505, 532, 143, 503, 567, 543, 579, 169,
	552, 578, 536, 0, 586, 173, 549, 0, 255, 190,
	102, 0, 534, 569, 538, 563, 529, 557, 495, 548,
	581, 519, 554, 582, 0, 0, 0, 465, 0, 1063,
	1064, 0, 0, 0, 0, 0, 127, 0, 551, 576,
	516, 553, 555, 484, 550, 0, 488, 491, 587, 572,
	510, 511, 512, 1276, 0, 0, 0, 0, 0, 0,
	533, 539, 560, 527, 0, 0, 0, 0, 0, 0,
	0, 0, 508, 0, 547, 0, 0, 0, 492, 489,
	0, 0, 531, 442, 0, 0, 494, 0, 509, 561,
	0, 481, 152, 0, 102, 564, 571, 528, 0, 289,
	575, 526, 525, 223, 0, 260, 155, 170, 121, 106,
	116, 0, 154, 200, 233, 241, 517, 482, 568, 506,
	515, 136, 513, 235, 209, 280, 0, 546, 214, 234,
	176, 269, 225, 278, 279, 290, 291, 264, 287, 295,
	252, 0, 0, 0, 0, 0, 0, 122, 265, 189,
	194, 131, 133, 132, 117, 247, 267, 126, 135, 256,
	261, 109, 263, 277, 128, 245, 111, 275, 259, 187,
	164, 165, 110, 0, 231, 142, 151, 138, 204, 0,
	0, 0, 272, 273, 137, 298, 118, 286, 113, 119,
	285, 196, 0, 0, 0, 268, 276, 188, 181, 0,
	112, 274, 186, 180, 168, 146, 157, 220, 178, 221,
	158, 192, 191, 193, 0, 487, 0, 257, 283, 299,
	124, 502, 0, 266, 293, 294, 0, 0, 125, 149,
	145, 219, 195, 120, 160, 254, 167, 177, 230, 297,
	208, 236, 129, 282, 253, 498, 501, 496, 0, 497,
	541, 542, 583, 584, 585, 562, 493, 0, 499, 500,
	0, 566, 573, 574, 197, 202, 558, 216, 229, 246,
	589, 134, 141, 150, 522, 523, 171, 174, 175, 545,
	105, 114, 172, 296, 227, 148, 284, 483, 140, 0,
	0, 535, 537, 544, 559, 107, 108, 115, 123, 130,
	139, 144, 147, 153, 156, 159, 161, 162, 163, 166,
	179, 182, 183, 184, 185, 198, 199, 201, 203, 206,
	207, 210, 211, 212, 213, 215, 217, 218, 222, 224,
	226, 228, 232, 237, 238, 239, 240, 242, 243, 244,
	248, 249, 250, 251, 258, 262, 270, 271, 281, 288,
	292, 570, 577, 565, 0, 530, 580, 504, 520, 588,
	521, 524, 556, 490, 540, 205, 518, 0, 507, 485,
	514, 486, 505, 532, 143, 503, 567, 543, 579, 169,
	552, 578, 536, 0, 586, 173, 549, 0, 255, 190,
	0, 0, 534, 569, 538, 563, 529, 557, 495, 548,
	581, 519, 554, 582, 0, 0, 0, 465, 0, 1063,
	1064, 0, 0, 0, 0, 0, 127, 0, 551, 576,
	516, 553, 555, 484, 550, 0, 488, 491, 587, 572,
	510, 511, 512, 0, 0, 0, 0, 0, 0, 0,
	533, 539, 560, 527, 0, 0, 0, 0, 0, 0,
	0, 0, 508, 0, 547, 0, 0, 0, 492, 489,
	0, 0, 531, 0, 0, 0, 494, 0, 509, 561,
	0, 481, 152, 0, 0, 564, 571, 528, 0, 289,
	575, 526, 525, 223, 0, 260, 155, 170, 121, 106,
	116, 0, 154, 200, 233, 241, 517, 482, 568, 506,
	515, 136, 513, 235, 209, 280, 0, 546, 214, 234,
	176, 269, 225, 278, 279, 290, 291, 264, 287, 295,
	252, 0, 0, 0, 0, 0, 0, 122, 265, 189,
	194, 131, 133, 132, 117, 247, 267, 126, 135, 256,
	261, 109, 263, 277, 128, 245, 111, 275, 259, 187,
	164, 165, 110, 0, 231, 142, 151, 138, 204, 0,
	0, 0, 272, 273, 137, 298, 118, 286, 113, 119,
	285, 196, 0, 0, 0, 268, 276, 188, 181, 0,
	112, 274, 186, 180, 168, 146, 157, 220, 178, 221,
	158, 192, 191, 193, 0, 487, 0, 257, 283, 299,
	124, 502, 0, 266, 293, 294, 0, 0, 125, 149,
	145, 219, 195, 120, 160, 254, 167, 177, 230, 297,
	208, 236, 129, 282, 253, 498, 501, 496, 0, 497,
	541, 542, 583, 584, 585, 562, 493, 0, 499, 500,
	0, 566, 573, 574, 197, 202, 558, 216, 229, 246,
	589, 134, 141, 150, 522, 523, 171, 174, 175, 545,
	105, 114, 172, 296, 227, 148, 284, 483, 140, 0,
	0, 535, 537, 544, 559, 107, 108, 115, 123, 130,
	139, 144, 147, 153, 156, 159, 161, 162, 163, 166,
	179, 182, 183, 184, 185, 198, 199, 201, 203, 206,
	207, 210, 211, 212, 213, 215, 217, 218, 222, 224,
	226, 228, 232, 237, 238, 239, 240, 242, 243, 244,
	248, 249, 250, 251, 258, 262, 270, 271, 281, 288,
	292, 570, 577, 565, 0, 530, 580, 504, 520, 588,
	521, 524, 556, 490, 540, 205, 518, 0, 507, 485,
	514, 486, 505, 532, 143, 503, 567, 543, 579, 169,
	552, 578, 536, 0, 586, 173, 549, 0, 255, 190,
	0, 0, 534, 569, 538, 563, 529, 557, 495, 548,
	581, 519, 554, 582, 0, 0, 0, 465, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 0, 551, 576,
	516, 553, 555, 484, 550, 0, 488, 491, 587, 572,
	510, 511, 512, 0, 0, 0, 0, 0, 0, 0,
	533, 539, 560, 527, 0, 0, 0, 0, 0, 0,
	1387, 0, 508, 0, 547, 0, 0, 0, 492, 489,
	0, 0, 531, 0, 0, 0, 494, 0, 509, 561,
	0, 481, 152, 0, 0, 564, 571, 528, 0, 289,
	575, 526, 525, 223, 0, 260, 155, 170, 121, 106,
	116, 0, 154, 200, 233, 241, 517, 482, 568, 506,
	515, 136, 513, 235, 209, 280, 0, 546, 214, 234,
	176, 269, 225, 278, 279, 290, 291, 264, 287, 295,
	252, 0, 0, 0, 0, 0, 0, 122, 265, 189,
	194, 131, 133, 132, 117, 247, 267, 126, 135, 256,
	261, 109, 263, 277, 128, 245, 111, 275, 259, 187,
	164, 165, 110, 0, 231, 142, 151, 138, 204, 0,
	0, 0, 272, 273, 137, 298, 118, 286, 113, 119,
	285, 196, 0, 0, 0, 268, 276, 188, 181, 0,
	112, 274, 186, 180, 168, 146, 157, 220, 178, 221,
	158, 192, 191, 193, 0, 487, 0, 257, 283, 299,
	124, 502, 0, 266, 293, 294, 0, 0, 125, 149,
	145, 219, 195, 120, 160, 254, 167, 177, 230, 297,
	208, 236, 129, 282, 253, 498, 501, 496, 0, 497,
	541, 542, 583, 584, 585, 562, 493, 0, 499, 500,
	0, 566, 573, 574, 197, 202, 558, 216, 229, 246,
	589, 134, 141, 150, 522, 523, 171, 174, 175, 545,
	105, 114, 172, 296, 227, 148, 284, 483, 140, 0,
	0, 535, 537, 544, 559, 107, 108, 115, 123, 130,
	139, 144, 147, 153, 156, 159, 161, 162, 163, 166,
	179, 182, 183, 184, 185, 198, 199, 201, 203, 206,
	207, 210, 211, 212, 213, 215, 217, 218, 222, 224,
	226, 228, 232, 237, 238, 239, 240, 242, 243, 244,
	248, 249, 250, 251, 258, 262, 270, 271, 281, 288,
	292, 570, 577, 565, 0, 530, 580, 504, 520, 588,
	521, 524, 556, 490, 540, 205, 518, 0, 507, 485,
	514, 486, 505, 532, 143, 503, 567, 543, 579, 169,
	552, 578, 536, 0, 586, 173, 549, 0, 255, 190,
	0, 0, 534, 569, 538, 563, 529, 557, 495, 548,
	581, 519, 554, 582, 63, 0, 0, 465, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 0, 551, 576,
	516, 553, 555, 484, 550, 0, 488, 491, 587, 572,
	510, 511, 512, 0, 0, 0, 0, 0, 0, 0,
	533, 539, 560, 527, 0, 0, 0, 0, 0, 0,
	0, 0, 508, 0, 547, 0, 0, 0, 492, 489,
	0, 0, 531, 0, 0, 0, 494, 0, 509, 561,
	0, 481, 152, 0, 0, 564, 571, 528, 0, 289,
	575, 526, 525, 223, 0, 260, 155, 170, 121, 106,
	116, 0, 154, 200, 233, 241, 517, 482, 568, 506,
	515, 136, 513, 235, 209, 280, 0, 546, 214, 234,
	176, 269, 225, 278, 279, 290, 291, 264, 287, 295,
	252, 0, 0, 0, 0, 0, 0, 122, 265, 189,
	194, 131, 133, 132, 117, 247, 267, 126, 135, 256,
	261, 109, 263, 277, 128, 245, 111, 275, 259, 187,
	164, 165, 110, 0, 231, 142, 151, 138, 204, 0,
	0, 0, 272, 273, 137, 298, 118, 286, 113, 119,
	285, 196, 0, 0, 0, 268, 276, 188, 181, 0,
	112, 274, 186, 180, 168, 146, 157, 220, 178, 221,
	158, 192, 191, 193, 0, 487, 0, 257, 283, 299,
	124, 502, 0, 266, 293, 294, 0, 0, 125, 149,
	145, 219, 195, 120, 160, 254, 167, 177, 230, 297,
	208, 236, 129, 282, 253, 498, 501, 496, 0, 497,
	541, 542, 583, 584, 585, 562, 493, 0, 499, 500,
	0, 566, 573, 574, 197, 202, 558, 216, 229, 246,
	589, 134, 141, 150, 522, 523, 171, 174, 175, 545,
	105, 114, 172, 296, 227, 148, 284, 483, 140, 0,
	0, 535, 537, 544, 559, 107, 108, 115, 123, 130,
	139, 144, 147, 153, 156, 159, 161, 162, 163, 166,
	179, 182, 183, 184, 185, 198, 199, 201, 203, 206,
	207, 210, 211, 212, 213, 215, 217, 218, 222, 224,
	226, 228, 232, 237, 238, 239, 240, 242, 243, 244,
	248, 249, 250, 251, 258, 262, 270, 271, 281, 288,
	292, 570, 577, 565, 0, 530, 580, 504, 520, 588,
	521, 524, 556, 490, 540, 205, 518, 0, 507, 485,
	514, 486, 505, 532, 143, 503, 567, 543, 579, 169,
	552, 578, 536, 0, 586, 173, 549, 0, 255, 190,
	0, 0, 534, 569, 538, 563, 529, 557, 495, 548,
	581, 519, 554, 582, 0, 0, 0, 103, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 0, 551, 576,
	516, 553, 555, 484, 550, 0, 488, 491, 587, 572,
	510, 511, 512, 0, 0, 0, 0, 0, 0, 0,
	533, 539, 560, 527, 0, 0, 0, 0, 0, 0,
	1045, 0, 508, 0, 547, 0, 0, 0, 492, 489,
	0, 0, 531, 0, 0, 0, 494, 0, 509, 561,
	0, 481, 152, 0, 0, 564, 571, 528, 0, 289,
	575, 526, 525, 223, 0, 260, 155, 170, 121, 106,
	116, 0, 154, 200, 233, 241, 517, 482, 568, 506,
	515, 136, 513, 235, 209, 280, 0, 546, 214, 234,
	176, 269, 225, 278, 279, 290, 291, 264, 287, 295,
	252, 0, 0, 0, 0, 0, 0, 122, 265, 189,
	194, 131, 133, 132, 117, 247, 267, 126, 135, 256,
	261, 109, 263, 277, 128, 245, 111, 275, 259, 187,
	164, 165, 110, 0, 231, 142, 151, 138, 204, 0,
	0, 0, 272, 273, 137, 298, 118, 286, 113, 119,
	285, 196, 0, 0, 0, 268, 276, 188, 181, 0,
	112, 274, 186, 180, 168, 146, 157, 220, 178, 221,
	158, 192, 191, 193, 0, 487, 0, 257, 283, 299,
	124, 502, 0, 266, 293, 294, 0, 0, 125, 149,
	145, 219, 195, 120, 160, 254, 167, 177, 230, 297,
	208, 236, 129, 282, 253, 498, 501, 496, 0, 497,
	541, 542, 583, 584, 585, 562, 493, 0, 499, 500,
	0, 566, 573, 574, 197, 202, 558, 216, 229, 246,
	589, 134, 141, 150, 522, 523, 171, 174, 175, 545,
	105, 114, 172, 296, 227, 148, 284, 483, 140, 0,
	0, 535, 537, 544, 559, 107, 108, 115, 123, 130,
	139, 144, 147, 153, 156, 159, 161, 162, 163, 166,
	179, 182, 183, 184, 185, 198, 199, 201, 203, 206,
	207, 210, 211, 212, 213, 215, 217, 218, 222, 224,
	226, 228, 232, 237, 238, 239, 240, 242, 243, 244,
	248, 249, 250, 251, 258, 262, 270, 271, 281, 288,
	292, 570, 577, 565, 0, 530, 580, 504, 520, 588,
	521, 524, 556, 490, 540, 205, 518, 0, 507, 485,
	514, 486, 505, 532, 143, 503, 567, 543, 579, 169,
	552, 578, 536, 0, 586, 173, 549, 0, 255, 190,
	0, 0, 534, 569, 538, 563, 529, 557, 495, 548,
	581, 519, 554, 582, 0, 0, 0, 365, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 0, 551, 576,
	516, 553, 555, 484, 550, 0, 488, 491, 587, 572,
	510, 511, 512, 0, 0, 0, 0, 0, 0, 0,
	533, 539, 560, 527, 0, 0, 0, 0, 0, 0,
	940, 0, 508, 0, 547, 0, 0, 0, 492, 489,
	0, 0, 531, 0, 0, 0, 494, 0, 509, 561,
	0, 481, 152, 0, 0, 564, 571, 528, 0, 289,
	575, 526, 525, 223, 0, 260, 155, 170, 121, 106,
	116, 0, 154, 200, 233, 241, 517, 482, 568, 506,
	515, 136, 513, 235, 209, 280, 0, 546, 214, 234,
	176, 269, 225, 278, 279, 290, 291, 264, 287, 295,
	252, 0, 0, 0, 0, 0, 0, 122, 265, 189,
	194, 131, 133, 132, 117, 247, 267, 126, 135, 256,
	261, 109, 263, 277, 128, 245, 111, 275, 259, 187,
	164, 165, 110, 0, 231, 142, 151, 138, 204, 0,
	0, 0, 272, 273, 137, 298, 118, 286, 113, 119,
	285, 196, 0, 0, 0, 268, 276, 188, 181, 0,
	112, 274, 186, 180, 168, 146, 157, 220, 178, 221,
	158, 192, 191, 193, 0, 487, 0, 257, 283, 299,
	124, 502, 0, 266, 293, 294, 0, 0, 125, 149,
	145, 219, 195, 120, 160, 254, 167, 177, 230, 297,
	208, 236, 129, 282, 253, 498, 501, 496, 0, 497,
	541, 542, 583, 584, 585, 562, 493, 0, 499, 500,
	0, 566, 573, 574, 197, 202, 558, 216, 229, 246,
	589, 134, 141, 150, 522, 523, 171, 174, 175, 545,
	105, 114, 172, 296, 227, 148, 284, 483, 140, 0,
	0, 535, 537, 544, 559, 107, 108, 115, 123, 130,
	139, 144, 147, 153, 156, 159, 161, 162, 163, 166,
	179, 182, 183, 184, 185, 198, 199, 201, 203, 206,
	207, 210, 211, 212, 213, 215, 217, 218, 222, 224,
	226, 228, 232, 237, 238, 239, 240, 242, 243, 244,
	248, 249, 250, 251, 258, 262, 270, 271, 281, 288,
	292, 570, 577, 565, 0, 530, 580, 504, 520, 588,
	521, 524, 556, 490, 540, 205, 518, 0, 507, 485,
	514, 486, 505, 532, 143, 503, 567, 543, 579, 169,
	552, 578, 536, 0, 586, 173, 549, 0, 255, 190,
	0, 0, 534, 569, 538, 563, 529, 557, 495, 548,
	581, 519, 554, 582, 0, 0, 0, 465, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 0, 551, 576,
	516, 553, 555, 484, 550, 0, 488, 491, 587, 572,
	510, 511, 512, 0, 0, 0, 0, 0, 0, 0,
	533, 539, 560, 527, 0, 0, 0, 0, 0, 0,
	0, 0, 508, 0, 547, 0, 0, 0, 492, 489,
	0, 0, 531, 0, 0, 0, 494, 0, 509, 561,
	0, 481, 152, 0, 0, 564, 571, 528, 0, 289,
	575, 526, 525, 223, 0, 260, 155, 170, 121, 106,
	116, 0, 154, 200, 233, 241, 517, 482, 568, 506,
	515, 136, 513, 235, 209, 280, 0, 546, 214, 234,
	176, 269, 225, 278, 279, 290, 291, 264, 287, 295,
	252, 0, 0, 0, 0, 0, 0, 122, 265, 189,
	194, 131, 133, 132, 117, 247, 267, 126, 135, 256,
	261, 109, 263, 277, 128, 245, 111, 275, 259, 187,
	164, 165, 110, 0, 231, 142, 151, 138, 204, 0,
	0, 0, 272, 273, 137, 298, 118, 286, 113, 119,
	285, 196, 0, 0, 0, 268, 276, 188, 181, 0,
	112, 274, 186, 180, 168, 146, 157, 220, 178, 221,
	158, 192, 191, 193, 0, 487, 0, 257, 283, 299,
	124, 502, 0, 266, 293, 294, 0, 0, 125, 149,
	145, 219, 195, 120, 160, 254, 167, 177, 230, 297,
	208, 236, 129, 282, 253, 498, 501, 496, 0, 497,
	541, 542, 583, 584, 585, 562, 493, 0, 499, 500,
	0, 566, 573, 574, 197, 202, 558, 216, 229, 246,
	589, 134, 141, 150, 522, 523, 171, 174, 175, 545,
	105, 114, 172, 296, 227, 148, 284, 483, 140, 0,
	0, 535, 537, 544, 559, 107, 108, 115, 123, 130,
	139, 144, 147, 153, 156, 159, 161, 162, 163, 166,
	179, 182, 183, 184, 185, 198, 199, 201, 203, 206,
	207, 210, 211, 212, 213, 215, 217, 218, 222, 224,
	226, 228, 232, 237, 238, 239, 240, 242, 243, 244,
	248, 249, 250, 251, 258, 262, 270, 271, 281, 288,
	292, 570, 577, 565, 0, 530, 580, 504, 520, 588,
	521, 524, 556, 490, 540, 205, 518, 0, 507, 485,
	514, 486, 505, 532, 143, 503, 567, 543, 579, 169,
	552, 578, 536, 0, 586, 173, 549, 0, 255, 190,
	0, 0, 534, 569, 538, 563, 529, 557, 495, 548,
	581, 519, 554, 582, 0, 0, 0, 365, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 0, 551, 576,
	516, 553, 555, 484, 550, 0, 488, 491, 587, 572,
	510, 511, 512, 0, 0, 0, 0, 0, 0, 0,
	533, 539, 560, 527, 0, 0, 0, 0, 0, 0,
	0, 0, 508, 0, 547, 0, 0, 0, 492, 489,
	0, 0, 531, 0, 0, 0, 494, 0, 509, 561,
	0, 481, 152, 0, 0, 564, 571, 528, 0, 289,
	575, 526, 525, 223, 0, 260, 155, 170, 121, 106,
	116, 0, 154, 200, 233, 241, 517, 482, 568, 506,
	515, 136, 513, 235, 209, 280, 0, 546, 214, 234,
	176, 269, 225, 278, 279, 290, 291, 264, 287, 295,
	252, 0, 0, 0, 0, 0, 0, 122, 265, 189,
	194, 131, 133, 132, 117, 247, 267, 126, 135, 256,
	261, 109, 263, 277, 128, 245, 111, 275, 259, 187,
	164, 165, 110, 0, 231, 142, 151, 138, 204, 0,
	0, 0, 272, 273, 137, 298, 118, 286, 113, 119,
	285, 196, 0, 0, 0, 268, 276, 188, 181, 0,
	112, 274, 186, 180, 168, 146, 157, 220, 178, 221,
	158, 192, 191, 193, 0, 487, 0, 257, 283, 299,
	124, 502, 0, 266, 293, 294, 0, 0, 125, 149,
	145, 219, 195, 120, 160, 254, 167, 177, 230, 297,
	208, 236, 129, 282, 253, 498, 501, 496, 0, 497,
	541, 542, 583, 584, 585, 562, 493, 0, 499, 500,
	0, 566, 573, 574, 197, 202, 558, 216, 229, 246,
	589, 134, 141, 150, 522, 523, 171, 174, 175, 545,
	105, 114, 172, 296, 227, 148, 284, 483, 140, 0,
	0, 535, 537, 544, 559, 107, 108, 115, 123, 130,
	139, 144, 147, 153, 156, 159, 161, 162, 163, 166,
	179, 182, 183, 184, 185, 198, 199, 201, 203, 206,
	207, 210, 211, 212, 213, 215, 217, 218, 222, 224,
	226, 228, 232, 237, 238, 239, 240, 242, 243, 244,
	248, 249, 250, 251, 258, 262, 270, 271, 281, 288,
	292, 570, 577, 565, 0, 530, 580, 504, 520, 588,
	521, 524, 556, 490, 540, 205, 518, 0, 507, 485,
	514, 486, 505, 532, 143, 503, 567, 543, 579, 169,
	552, 578, 536, 0, 586, 173, 549, 0, 255, 190,
	0, 0, 534, 569, 538, 563, 529, 557, 495, 548,
	581, 519, 554, 582, 0, 0, 0, 103, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 0, 551, 576,
	516, 553, 555, 484, 550, 0, 488, 491, 587, 572,
	510, 511, 512, 0, 0, 0, 0, 0, 0, 0,
	533, 539, 560, 527, 0, 0, 0, 0, 0, 0,
	0, 0, 508, 0, 547, 0, 0, 0, 492, 489,
	0, 0, 531, 0, 0, 0, 494, 0, 509, 561,
	0, 481, 152, 0, 0, 564, 571, 528, 0, 289,
	575, 526, 525, 223, 0, 260, 155, 170, 121, 106,
	116, 0, 154, 200, 233, 241, 517, 482, 568, 506,
	515, 136, 513, 235, 209, 280, 0, 546, 214, 234,
	176, 269, 225, 278, 279, 290, 291, 264, 287, 295,
	252, 0, 0, 0, 0, 0, 0, 122, 265, 189,
	194, 131, 133, 132, 117, 247, 267, 126, 135, 256,
	261, 109, 263, 277, 128, 245, 111, 275, 259, 187,
	164, 165, 110, 0, 231, 142, 151, 138, 204, 0,
	0, 0, 272, 273, 137, 298, 118, 286, 113, 119,
	285, 196, 0, 0, 0, 268, 276, 188, 181, 0,
	112, 274, 186, 180, 168, 146, 157, 220, 178, 221,
	158, 192, 191, 193, 0, 487, 0, 257, 283, 299,
	124, 502, 0, 266, 293, 294, 0, 0, 125, 149,
	145, 219, 195, 120, 160, 254, 167, 177, 230, 297,
	208, 236, 129, 282, 253, 498, 501, 496, 0, 497,
	541, 542, 583, 584, 585, 562, 493, 0, 499, 500,
	0, 566, 573, 574, 197, 202, 558, 216, 229, 246,
	589, 134, 141, 150, 522, 523, 171, 174, 175, 545,
	105, 114, 172, 296, 227, 148, 284, 483, 140, 0,
	0, 535, 537, 544, 559, 107, 108, 115, 123, 130,
	139, 144, 147, 153, 156, 159, 161, 162, 163, 166,
	179, 182, 183, 184, 185, 198, 199, 201, 203, 206,
	207, 210, 211, 212, 213, 215, 217, 218, 222, 224,
	226, 228, 232, 237, 238, 239, 240, 242, 243, 244,
	248, 249, 250, 251, 258, 262, 270, 271, 281, 288,
	292, 570, 205, 0, 0, 0, 0, 367, 0, 0,
	0, 143, 364, 0, 0, 0, 169, 0, 0, 0,
	0, 409, 173, 0, 0, 255, 190, 0, 0, 0,
	0, 398, 399, 0, 0, 0, 0, 0, 0, 1052,
	0, 63, 0, 0, 365, 386, 385, 388, 389, 390,
	391, 0, 0, 127, 387, 392, 393, 394, 1053, 0,
	0, 362, 379, 0, 408, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 376, 377, 0, 0, 0,
	0, 423, 0, 378, 0, 0, 373, 374, 375, 380,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 152,
	0, 0, 400, 0, 0, 0, 289, 0, 0, 421,
	223, 0, 260, 155, 170, 121, 106, 116, 0, 154,
	200, 233, 241, 406, 0, 0, 0, 0, 136, 0,
	235, 209, 280, 0, 0, 214, 234, 176, 269, 225,
	278, 279, 290, 291, 264, 287, 295, 252, 0, 0,
	0, 0, 0, 0, 122, 265, 189, 194, 131, 133,
	132, 117, 247, 267, 126, 135, 256, 261, 109, 263,
	277, 128, 245, 111, 275, 259, 187, 164, 165, 110,
	0, 231, 142, 151, 138, 204, 0, 0, 0, 272,
	273, 137, 298, 118, 286, 113, 119, 285, 196, 0,
	0, 0, 268, 276, 188, 181, 0, 112, 274, 186,
	180, 168, 146, 157, 220, 178, 221, 158, 192, 191,
	193, 0, 0, 0, 257, 283, 299, 124, 0, 0,
	266, 293, 294, 0, 0, 125, 149, 145, 219, 195,
	120, 160, 254, 167, 177, 230, 297, 208, 236, 129,
	282, 253, 410, 422, 416, 418, 417, 414, 415, 413,
	412, 411, 424, 401, 402, 403, 404, 407, 0, 419,
	420, 197, 202, 0, 216, 229, 246, 0, 134, 141,
	150, 0, 0, 171, 174, 175, 405, 105, 114, 172,
	296, 227, 148, 284, 0, 140, 0, 0, 0, 0,
	0, 0, 107, 108, 115, 123, 130, 139, 144, 147,
	153, 156, 159, 161, 162, 163, 166, 179, 182, 183,
	184, 185, 198, 199, 201, 203, 206, 207, 210, 211,
	212, 213, 215, 217, 218, 222, 224, 226, 228, 232,
	237, 238, 239, 240, 242, 243, 244, 248, 249, 250,
	251, 258, 262, 270, 271, 281, 288, 292, 205, 0,
	0, 0, 0, 367, 0, 0, 0, 143, 364, 0,
	0, 0, 169, 0, 0, 0, 0, 409, 173, 0,
	0, 255, 190, 0, 0, 0, 0, 398, 399, 0,
	0, 0, 0, 0, 0, 0, 0, 63, 0, 633,
	365, 386, 385, 388, 389, 390, 391, 0, 0, 127,
	387, 392, 393, 394, 0, 0, 0, 362, 379, 0,
	408, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 376, 377, 0, 0, 0, 0, 423, 0, 378,
	0, 0, 373, 374, 375, 380, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 152, 0, 0, 400, 0,
	0, 0, 289, 0, 0, 421, 223, 0, 260, 155,
	170, 121, 106, 116, 0, 154, 200, 233, 241, 406,
	0, 0, 0, 0, 136, 0, 235, 209, 280, 0,
	0, 214, 234, 176, 269, 225, 278, 279, 290, 291,
	264, 287, 295, 252, 0, 0, 0, 0, 0, 0,
	122, 265, 189, 194, 131, 133, 132, 117, 247, 267,
	126, 135, 256, 261, 109, 263, 277, 128, 245, 111,
	275, 259, 187, 164, 165, 110, 0, 231, 142, 151,
	138, 204, 0, 0, 0, 272, 273, 137, 298, 118,
	286, 113, 119, 285, 196, 0, 0, 0, 268, 276,
	188, 181, 0, 112, 274, 186, 180, 168, 146, 157,
	220, 178, 221, 158, 192, 191, 193, 0, 0, 0,
	257, 283, 299, 124, 0, 0, 266, 293, 294, 0,
	0, 125, 149, 145, 219, 195, 120, 160, 254, 167,
	177, 230, 297, 208, 236, 129, 282, 253, 410, 422,
	416, 418, 417, 414, 415, 413, 412, 411, 424, 401,
	402, 403, 404, 407, 0, 419, 420, 197, 202, 0,
	216, 229, 246, 0, 134, 141, 150, 0, 0, 171,
	174, 175, 405, 105, 114, 172, 296, 227, 148, 284,
	0, 140, 0, 0, 0, 0, 0, 0, 107, 108,
	115, 123, 130, 139, 144, 147, 153, 156, 159, 161,
	162, 163, 166, 179, 182, 183, 184, 185, 198, 199,
	201, 203, 206, 207, 210, 211, 212, 213, 215, 217,
	218, 222, 224, 226, 228, 232, 237, 238, 239, 240,
	242, 243, 244, 248, 249, 250, 251, 258, 262, 270,
	271, 281, 288, 292, 205, 0, 0, 0, 0, 367,
	0, 0, 0, 143, 364, 0, 0, 0, 169, 0,
	0, 0, 0, 409, 173, 0, 0, 255, 190, 0,
	0, 0, 0, 398, 399, 0, 0, 0, 0, 0,
	0, 0, 0, 63, 0, 0, 365, 386, 385, 388,
	389, 390, 391, 0, 0, 127, 387, 392, 393, 394,
	0, 0, 0, 362, 379, 0, 408, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 376, 377, 358,
	0, 0, 0, 423, 0, 378, 0, 0, 373, 374,
	375, 380, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 152, 0, 0, 400, 0, 0, 0, 289, 0,
	0, 421, 223, 0, 260, 155, 170, 121, 106, 116,
	0, 154, 200, 233, 241, 406, 0, 0, 0, 0,
	136, 0, 235, 209, 280, 0, 0, 214, 234, 176,
	269, 225, 278, 279, 290, 291, 264, 287, 295, 252,
	0, 0, 0, 0, 0, 0, 122, 265, 189, 194,
	131, 133, 132, 117, 247, 267, 126, 135, 256, 261,
	109, 263, 277, 128, 245, 111, 275, 259, 187, 164,
	165, 110, 0, 231, 142, 151, 138, 204, 0, 0,
	0, 272, 273, 137, 298, 118, 286, 113, 119, 285,
	196, 0, 0, 0, 268, 276, 188, 181, 0, 112,
	274, 186, 180, 168, 146, 157, 220, 178, 221, 158,
	192, 191, 193, 0, 0, 0, 257, 283, 299, 124,
	0, 0, 266, 293, 294, 0, 0, 125, 149, 145,
	219, 195, 120, 160, 254, 167, 177, 230, 297, 208,
	236, 129, 282, 253, 410, 422, 416, 418, 417, 414,
	415, 413, 412, 411, 424, 401, 402, 403, 404, 407,
	0, 419, 420, 197, 202, 0, 216, 229, 246, 0,
	134, 141, 150, 0, 0, 171, 174, 175, 405, 105,
	114, 172, 296, 227, 148, 284, 0, 140, 0, 0,
	0, 0, 0, 0, 107, 108, 115, 123, 130, 139,
	144, 147, 153, 156, 159, 161, 162, 163, 166, 179,
	182, 183, 184, 185, 198, 199, 201, 203, 206, 207,
	210, 211, 212, 213, 215, 217, 218, 222, 224, 226,
	228, 232, 237, 238, 239, 240, 242, 243, 244, 248,
	249, 250, 251, 258, 262, 270, 271, 281, 288, 292,
	205, 0, 0, 0, 0, 367, 0, 0, 0, 143,
	364, 0, 0, 0, 169, 0, 0, 0, 0, 409,
	173, 0, 0, 255, 190, 0, 0, 0, 0, 398,
	399, 0, 0, 0, 0, 0, 0, 0, 0, 63,
	0, 0, 365, 386, 990, 388, 389, 390, 391, 0,
	0, 127, 387, 392, 393, 394, 0, 0, 0, 362,
	379, 0, 408, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 376, 377, 358, 0, 0, 0, 423,
	0, 378, 0, 0, 373, 374, 375, 380, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 152, 0, 0,
	400, 0, 0, 0, 289, 0, 0, 421, 223, 0,
	260, 155, 170, 121, 106, 116, 0, 154, 200, 233,
	241, 406, 0, 0, 0, 0, 136, 0, 235, 209,
	280, 0, 0, 214, 234, 176, 269, 225, 278, 279,
	290, 291, 264, 287, 295, 252, 0, 0, 0, 0,
	0, 0, 122, 265, 189, 194, 131, 133, 132, 117,
	247, 267, 126, 135, 256, 261, 109, 263, 277, 128,
	245, 111, 275, 259, 187, 164, 165, 110, 0, 231,
	142, 151, 138, 204, 0, 0, 0, 272, 273, 137,
	298, 118, 286, 113, 119, 285, 196, 0, 0, 0,
	268, 276, 188, 181, 0, 112, 274, 186, 180, 168,
	146, 157, 220, 178, 221, 158, 192, 191, 193, 0,
	0, 0, 257, 283, 299, 124, 0, 0, 266, 293,
	294, 0, 0, 125, 149, 145, 219, 195, 120, 160,
	254, 167, 177, 230, 297, 208, 236, 129, 282, 253,
	410, 422, 416, 418, 417, 414, 415, 413, 412, 411,
	424, 401, 402, 403, 404, 407, 0, 419, 420, 197,
	202, 0, 216, 229, 246, 0, 134, 141, 150, 0,
	0, 171, 174, 175, 405, 105, 114, 172, 296, 227,
	148, 284, 0, 140, 0, 0, 0, 0, 0, 0,
	107, 108, 115, 123, 130, 139, 144, 147, 153, 156,
	159, 161, 162, 163, 166, 179, 182, 183, 184, 185,
	198, 199, 201, 203, 206, 207, 210, 211, 212, 213,
	215, 217, 218, 222, 224, 226, 228, 232, 237, 238,
	239, 240, 242, 243, 244, 248, 249, 250, 251, 258,
	262, 270, 271, 281, 288, 292, 205, 0, 0, 0,
	0, 367, 0, 0, 0, 143, 364, 0, 0, 0,
	169, 0, 0, 0, 0, 409, 173, 0, 0, 255,
	190, 0, 0, 0, 0, 398, 399, 0, 0, 0,
	0, 0, 0, 0, 0, 63, 0, 0, 365, 386,
	987, 388, 389, 390, 391, 0, 0, 127, 387, 392,
	393, 394, 0, 0, 0, 362, 379, 0, 408, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 376,
	377, 358, 0, 0, 0, 423, 0, 378, 0, 0,
	373, 374, 375, 380, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 152, 0, 0, 400, 0, 0, 0,
	289, 0, 0, 421, 223, 0, 260, 155, 170, 121,
	106, 116, 0, 154, 200, 233, 241, 406, 0, 0,
	0, 0, 136, 0, 235, 209, 280, 0, 0, 214,
	234, 176, 269, 225, 278, 279, 290, 291, 264, 287,
	295, 252, 0, 0, 0, 0, 0, 0, 122, 265,
	189, 194, 131, 133, 132, 117, 247, 267, 126, 135,
	256, 261, 109, 263, 277, 128, 245, 111, 275, 259,
	187, 164, 165, 110, 0, 231, 142, 151, 138, 204,
	0, 0, 0, 272, 273, 137, 298, 118, 286, 113,
	119, 285, 196, 0, 0, 0, 268, 276, 188, 181,
	0, 112, 274, 186, 180, 168, 146, 157, 220, 178,
	221, 158, 192, 191, 193, 0, 0, 0, 257, 283,
	299, 124, 0, 0, 266, 293, 294, 0, 0, 125,
	149, 145, 219, 195, 120, 160, 254, 167, 177, 230,
	297, 208, 236, 129, 282, 253, 410, 422, 416, 418,
	417, 414, 415, 413, 412, 411, 424, 401, 402, 403,
	404, 407, 0, 419, 420, 197, 202, 0, 216, 229,
	246, 0, 134, 141, 150, 0, 0, 171, 174, 175,
	405, 105, 114, 172, 296, 227, 148, 284, 0, 140,
	0, 0, 0, 0, 0, 0, 107, 108, 115, 123,
	130, 139, 144, 147, 153, 156, 159, 161, 162, 163,
	166, 179, 182, 183, 184, 185, 198, 199, 201, 203,
	206, 207, 210, 211, 212, 213, 215, 217, 218, 222,
	224, 226, 228, 232, 237, 238, 239, 240, 242, 243,
	244, 248, 249, 250, 251, 258, 262, 270, 271, 281,
	288, 292, 27, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 0, 0, 0, 0, 367,
	0, 0, 0, 143, 364, 0, 0, 0, 169, 0,
	0, 0, 0, 409, 173, 0, 0, 255, 190, 0,
	0, 0, 0, 398, 399, 0, 0, 0, 0, 0,
	0, 0, 0, 63, 0, 0, 365, 386, 385, 388,
	389, 390, 391, 0, 0, 127, 387, 392, 393, 394,
	0, 0, 0, 362, 379, 0, 408, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 376, 377, 0,
	0, 0, 0, 423, 0, 378, 0, 0, 373, 374,
	375, 380, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 152, 0, 0, 400, 0, 0, 0, 289, 0,
	0, 421, 223, 0, 260, 155, 170, 121, 106, 116,
	0, 154, 200, 233, 241, 406, 0, 0, 0, 0,
	136, 0, 235, 209, 280, 0, 0, 214, 234, 176,
	269, 225, 278, 279, 290, 291, 264, 287, 295, 252,
	0, 0, 0, 0, 0, 0, 122, 265, 189, 194,
	131, 133, 132, 117, 247, 267, 126, 135, 256, 261,
	109, 263, 277, 128, 245, 111, 275, 259, 187, 164,
	165, 110, 0, 231, 142, 151, 138, 204, 0, 0,
	0, 272, 273, 137, 298, 118, 286, 113, 119, 285,
	196, 0, 0, 0, 268, 276, 188, 181, 0, 112,
	274, 186, 180, 168, 146, 157, 220, 178, 221, 158,
	192, 191, 193, 0, 0, 0, 257, 283, 299, 124,
	0, 0, 266, 293, 294, 0, 0, 125, 149, 145,
	219, 195, 120, 160, 254, 167, 177, 230, 297, 208,
	236, 129, 282, 253, 410, 422, 416, 418, 417, 414,
	415, 413, 412, 411, 424, 401, 402, 403, 404, 407,
	0, 419, 420, 197, 202, 0, 216, 229, 246, 0,
	134, 141, 150, 0, 0, 171, 174, 175, 405, 105,
	114, 172, 296, 227, 148, 284, 0, 140, 0, 0,
	0, 0, 0, 0, 107, 108, 115, 123, 130, 139,
	144, 147, 153, 156, 159, 161, 162, 163, 166, 179,
	182, 183, 184, 185, 198, 199, 201, 203, 206, 207,
	210, 211, 212, 213, 215, 217, 218, 222, 224, 226,
	228, 232, 237, 238, 239, 240, 242, 243, 244, 248,
	249, 250, 251, 258, 262, 270, 271, 281, 288, 292,
	205, 0, 0, 0, 0, 367, 0, 0, 0, 143,
	364, 0, 0, 0, 169, 0, 0, 0, 0, 409,
	173, 0, 0, 255, 190, 0, 0, 0, 0, 398,
	399, 0, 0, 0, 0, 0, 0, 0, 0, 63,
	0, 0, 365, 386, 385, 388, 389, 390, 391, 0,
	0, 127, 387, 392, 393, 394, 0, 0, 0, 362,
	379, 0, 408, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 376, 377, 0, 0, 0, 0, 423,
	0, 378, 0, 0, 373, 374, 375, 380, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 152, 0, 0,
	400, 0, 0, 0, 289, 0, 0, 421, 223, 0,
	260, 155, 170, 121, 106, 116, 0, 154, 200, 233,
	241, 406, 0, 0, 0, 0, 136, 0, 235, 209,
	280, 0, 0, 214, 234, 176, 269, 225, 278, 279,
	290, 291, 264, 287, 295, 252, 0, 0, 0, 0,
	0, 0, 122, 265, 189, 194, 131, 133, 132, 117,
	247, 267, 126, 135, 256, 261, 109, 263, 277, 128,
	245, 111, 275, 259, 187, 164, 165, 110, 0, 231,
	142, 151, 138, 204, 0, 0, 0, 272, 273, 137,
	298, 118, 286, 113, 119, 285, 196, 0, 0, 0,
	268, 276, 188, 181, 0, 112, 274, 186, 180, 168,
	146, 157, 220, 178, 221, 158, 192, 191, 193, 0,
	0, 0, 257, 283, 299, 124, 0, 0, 266, 293,
	294, 0, 0, 125, 149, 145, 219, 195, 120, 160,
	254, 167, 177, 230, 297, 208, 236, 129, 282, 253,
	410, 422, 416, 418, 417, 414, 415, 413, 412, 411,
	424, 401, 402, 403, 404, 407, 0, 419, 420, 197,
	202, 0, 216, 229, 246, 0, 134, 141, 150, 0,
	0, 171, 174, 175, 405, 105, 114, 172, 296, 227,
	148, 284, 0, 140, 0, 0, 0, 0, 0, 0,
	107, 108, 115, 123, 130, 139, 144, 147, 153, 156,
	159, 161, 162, 163, 166, 179, 182, 183, 184, 185,
	198, 199, 201, 203, 206, 207, 210, 211, 212, 213,
	215, 217, 218, 222, 224, 226, 228, 232, 237, 238,
	239, 240, 242, 243, 244, 248, 249, 250, 251, 258,
	262, 270, 271, 281, 288, 292, 205, 0, 0, 0,
	0, 0, 0, 0, 0, 143, 0, 0, 0, 0,
	169, 0, 0, 0, 0, 409, 173, 0, 0, 255,
	190, 0, 0, 0, 0, 398, 399, 0, 0, 0,
	0, 0, 0, 0, 0, 63, 0, 0, 365, 386,
	385, 388, 389, 390, 391, 0, 0, 127, 387, 392,
	393, 394, 0, 0, 0, 0, 379, 0, 408, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 376,
	377, 0, 0, 0, 0, 423, 0, 378, 0, 0,
	373, 374, 375, 380, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 152, 0, 0, 400, 0, 0, 0,
	289, 0, 0, 421, 223, 0, 260, 155, 170, 121,
	106, 116, 0, 154, 200, 233, 241, 406, 0, 0,
	0, 0, 136, 0, 235, 209, 280, 0, 1773, 214,
	234, 176, 269, 225, 278, 279, 290, 291, 264, 287,
	295, 252, 0, 0, 0, 0, 0, 0, 122, 265,
	189, 194, 131, 133, 132, 117, 247, 267, 126, 135,
	256, 261, 109, 263, 277, 128, 245, 111, 275, 259,
	187, 164, 165, 110, 0, 231, 142, 151, 138, 204,
	0, 0, 0, 272, 273, 137, 298, 118, 286, 113,
	119, 285, 196, 0, 0, 0, 268, 276, 188, 181,
	0, 112, 274, 186, 180, 168, 146, 157, 220, 178,
	221, 158, 192, 191, 193, 0, 0, 0, 257, 283,
	299, 124, 0, 0, 266, 293, 294, 0, 0, 125,
	149, 145, 219, 195, 120, 160, 254, 167, 177, 230,
	297, 208, 236, 129, 282, 253, 410, 422, 416, 418,
	417, 414, 415, 413, 412, 411, 424, 401, 402, 403,
	404, 407, 0, 419, 420, 197, 202, 0, 216, 229,
	246, 0, 134, 141, 150, 0, 0, 171, 174, 175,
	405, 105, 114, 172, 296, 227, 148, 284, 0, 140,
	0, 0, 0, 0, 0, 0, 107, 108, 115, 123,
	130, 139, 144, 147, 153, 156, 159, 161, 162, 163,
	166, 179, 182, 183, 184, 185, 198, 199, 201, 203,
	206, 207, 210, 211, 212, 213, 215, 217, 218, 222,
	224, 226, 228, 232, 237, 238, 239, 240, 242, 243,
	244, 248, 249, 250, 251, 258, 262, 270, 271, 281,
	288, 292, 205, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 0, 0, 0, 0, 169, 0, 0, 0,
	0, 409, 173, 0, 0, 255, 190, 0, 0, 0,
	0, 398, 399, 0, 0, 0, 0, 0, 0, 0,
	0, 63, 0, 633, 365, 386, 385, 388, 389, 390,
	391, 0, 0, 127, 387, 392, 393, 394, 0, 0,
	0, 0, 379, 0, 408, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 376, 377, 0, 0, 0,
	0, 423, 0, 378, 0, 0, 373, 374, 375, 380,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 152,
	0, 0, 400, 0, 0, 0, 289, 0, 0, 421,
	223, 0, 260, 155, 170, 121, 106, 116, 0, 154,
	200, 233, 241, 406, 0, 0, 0, 0, 136, 0,
	235, 209, 280, 0, 0, 214, 234, 176, 269, 225,
	278, 279, 290, 291, 264, 287, 295, 252, 0, 0,
	0, 0, 0, 0, 122, 265, 189, 194, 131, 133,
	132, 117, 247, 267, 126, 135, 256, 261, 109, 263,
	277, 128, 245, 111, 275, 259, 187, 164, 165, 110,
	0, 231, 142, 151, 138, 204, 0, 0, 0, 272,
	273, 137, 298, 118, 286, 113, 119, 285, 196, 0,
	0, 0, 268, 276, 188, 181, 0, 112, 274, 186,
	180, 168, 146, 157, 220, 178, 221, 158, 192, 191,
	193, 0, 0, 0, 257, 283, 299, 124, 0, 0,
	266, 293, 294, 0, 0, 125, 149, 145, 219, 195,
	120, 160, 254, 167, 177, 230, 297, 208, 236, 129,
	282, 253, 410, 422, 416, 418, 417, 414, 415, 413,
	412, 411, 424, 401, 402, 403, 404, 407, 0, 419,
	420, 197, 202, 0, 216, 229, 246, 0, 134, 141,
	150, 0, 0, 171, 174, 175, 405, 105, 114, 172,
	296, 227, 148, 284, 0, 140, 0, 0, 0, 0,
	0, 0, 107, 108, 115, 123, 130, 139, 144, 147,
	153, 156, 159, 161, 162, 163, 166, 179, 182, 183,
	184, 185, 198, 199, 201, 203, 206, 207, 210, 211,
	212, 213, 215, 217, 218, 222, 224, 226, 228, 232,
	237, 238, 239, 240, 242, 243, 244, 248, 249, 250,
	251, 258, 262, 270, 271, 281, 288, 292, 205, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 0, 0,
	0, 0, 169, 0, 0, 0, 0, 409, 173, 0,
	0, 255, 190, 0, 0, 0, 0, 398, 399, 0,
	0, 0, 0, 0, 0, 0, 0, 63, 0, 0,
	365, 386, 385, 388, 389, 390, 391, 0, 0, 127,
	387, 392, 393, 394, 0, 0, 0, 0, 379, 0,
	408, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 376, 377, 0, 0, 0, 0, 423, 0, 378,
	0, 0, 373, 374, 375, 380, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 152, 0, 0, 400, 0,
	0, 0, 289, 0, 0, 421, 223, 0, 260, 155,
	170, 121, 106, 116, 0, 154, 200, 233, 241, 406,
	0, 0, 0, 0, 136, 0, 235, 209, 280, 0,
	0, 214, 234, 176, 269, 225, 278, 279, 290, 291,
	264, 287, 295, 252, 0, 0, 0, 0, 0, 0,
	122, 265, 189, 194, 131, 133, 132, 117, 247, 267,
	126, 135, 256, 261, 109, 263, 277, 128, 245, 111,
	275, 259, 187, 164, 165, 110, 0, 231, 142, 151,
	138, 204, 0, 0, 0, 272, 273, 137, 298, 118,
	286, 113, 119, 285, 196, 0, 0, 0, 268, 276,
	188, 181, 0, 112, 274, 186, 180, 168, 146, 157,
	220, 178, 221, 158, 192, 191, 193, 0, 0, 0,
	257, 283, 299, 124, 0, 0, 266, 293, 294, 0,
	0, 125, 149, 145, 219, 195, 120, 160, 254, 167,
	177, 230, 297, 208, 236, 129, 282, 253, 410, 422,
	416, 418, 417, 414, 415, 413, 412, 411, 424, 401,
	402, 403, 404, 407, 0, 419, 420, 197, 202, 0,
	216, 229, 246, 0, 134, 141, 150, 0, 0, 171,
	174, 175, 405, 105, 114, 172, 296, 227, 148, 284,
	0, 140, 0, 0, 0, 0, 0, 0, 107, 108,
	115, 123, 130, 139, 144, 147, 153, 156, 159, 161,
	162, 163, 166, 179, 182, 183, 184, 185, 198, 199,
	201, 203, 206, 207, 210, 211, 212, 213, 215, 217,
	218, 222, 224, 226, 228, 232, 237, 238, 239, 240,
	242, 243, 244, 248, 249, 250, 251, 258, 262, 270,
	271, 281, 288, 292, 205, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 0, 0, 0, 0, 169, 0,
	0, 0, 0, 0, 173, 0, 0, 255, 190, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 465, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 671, 670, 680, 681, 673, 674, 675,
	676, 677, 678, 679, 672, 0, 0, 682, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 152, 0, 0, 0, 0, 0, 0, 289, 0,
	0, 0, 223, 0, 260, 155, 170, 121, 106, 116,
	0, 154, 200, 233, 241, 0, 0, 0, 0, 0,
	136, 0, 235, 209, 280, 0, 0, 214, 234, 176,
	269, 225, 278, 279, 290, 291, 264, 287, 295, 252,
	0, 0, 0, 0, 0, 0, 122, 265, 189, 194,
	131, 133, 132, 117, 247, 267, 126, 135, 256, 261,
	109, 263, 277, 128, 245, 111, 275, 259, 187, 164,
	165, 110, 0, 231, 142, 151, 138, 204, 0, 0,
	0, 272, 273, 137, 298, 118, 286, 113, 119, 285,
	196, 0, 0, 0, 268, 276, 188, 181, 0, 112,
	274, 186, 180, 168, 146, 157, 220, 178, 221, 158,
	192, 191, 193, 0, 0, 0, 257, 283, 299, 124,
	0, 0, 266, 293, 294, 0, 0, 125, 149, 145,
	219, 195, 120, 160, 254, 167, 177, 230, 297, 208,
	236, 129, 282, 253, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 197, 202, 0, 216, 229, 246, 0,
	134, 141, 150, 0, 0, 171, 174, 175, 0, 105,
	114, 172, 296, 227, 148, 284, 0, 140, 0, 0,
	0, 0, 0, 0, 107, 108, 115, 123, 130, 139,
	144, 147, 153, 156, 159, 161, 162, 163, 166, 179,
	182, 183, 184, 185, 198, 199, 201, 203, 206, 207,
	210, 211, 212, 213, 215, 217, 218, 222, 224, 226,
	228, 232, 237, 238, 239, 240, 242, 243, 244, 248,
	249, 250, 251, 258, 262, 270, 271, 281, 288, 292,
	205, 0, 0, 0, 1031, 0, 0, 0, 0, 143,
	0, 0, 0, 0, 169, 0, 0, 0, 0, 0,
	173, 0, 0, 255, 190, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1033, 1035, 0, 0, 0,
	0, 0, 103, 0, 1037, 0, 0, 0, 0, 0,
	0, 127, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 152, 0, 0,
	0, 0, 0, 0, 289, 0, 1034, 0, 223, 0,
	260, 155, 170, 121, 106, 116, 0, 154, 200, 233,
	241, 0, 0, 0, 0, 0, 136, 0, 235, 209,
	280, 0, 0, 214, 234, 176, 269, 225, 278, 279,
	290, 291, 264, 287, 295, 252, 0, 0, 0, 0,
	0, 0, 122, 265, 189, 194, 131, 133, 132, 117,
	247, 267, 126, 135, 256, 261, 109, 263, 277, 128,
	245, 111, 275, 259, 187, 164, 165, 110, 0, 231,
	142, 151, 138, 204, 0, 0, 0, 272, 273, 137,
	298, 118, 286, 113, 119, 285, 196, 0, 0, 0,
	268, 276, 188, 181, 0, 112, 274, 186, 180, 168,
	146, 157, 220, 178, 221, 158, 192, 191, 193, 0,
	0, 0, 257, 283, 299, 124, 0, 0, 266, 293,
	294, 0, 0, 125, 149, 145, 219, 195, 120, 160,
	254, 167, 177, 230, 297, 208, 236, 129, 282, 253,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	202, 0, 216, 229, 246, 0, 134, 141, 150, 0,
	0, 171, 174, 175, 0, 105, 114, 172, 296, 227,
	148, 284, 0, 140, 0, 0, 0, 0, 0, 0,
	107, 108, 115, 123, 130, 139, 144, 147, 153, 156,
	159, 161, 162, 163, 166, 179, 182, 183, 184, 185,
	198, 199, 201, 203, 206, 207, 210, 211, 212, 213,
	215, 217, 218, 222, 224, 226, 228, 232, 237, 238,
	239, 240, 242, 243, 244, 248, 249, 250, 251, 258,
	262, 270, 271, 281, 288, 292, 205, 0, 0, 0,
	1031, 0, 0, 0, 0, 143, 0, 0, 0, 0,
	169, 0, 0, 0, 0, 0, 173, 0, 0, 255,
	190, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1033, 1035, 0, 0, 0, 0, 0, 103, 0,
	1037, 0, 0, 0, 0, 0, 0, 127, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 152, 0, 0, 0, 0, 0, 0,
	289, 0, 1034, 0, 223, 0, 260, 155, 170, 121,
	106, 116, 0, 154, 200, 233, 241, 0, 0, 0,
	0, 0, 136, 0, 235, 209, 280, 0, 0, 1029,
	234, 176, 269, 225, 278, 279, 290, 291, 264, 287,
	295, 252, 0, 0, 0, 0, 0, 0, 122, 265,
	189, 194, 131, 133, 132, 117, 247, 267, 126, 135,
	256, 261, 109, 263, 277, 128, 245, 111, 275, 259,
	187, 164, 165, 110, 0, 231, 142, 151, 138, 204,
	0, 0, 0, 272, 273, 137, 298, 118, 286, 113,
	119, 285, 196, 0, 0, 0, 268, 276, 188, 181,
	0, 112, 274, 186, 180, 168, 146, 157, 220, 178,
	221, 158, 192, 191, 193, 0, 0, 0, 257, 283,
	299, 124, 0, 0, 266, 293, 294, 0, 0, 125,
	149, 145, 219, 195, 120, 160, 254, 167, 177, 230,
	297, 208, 236, 129, 282, 253, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 197, 202, 0, 216, 229,
	246, 0, 134, 141, 150, 0, 0, 171, 174, 175,
	0, 105, 114, 172, 296, 227, 148, 284, 0, 140,
	0, 0, 0, 0, 0, 0, 107, 108, 115, 123,
	130, 139, 144, 147, 153, 156, 159, 161, 162, 163,
	166, 179, 182, 183, 184, 185, 198, 199, 201, 203,
	206, 207, 210, 211, 212, 213, 215, 217, 218, 222,
	224, 226, 228, 232, 237, 238, 239, 240, 242, 243,
	244, 248, 249, 250, 251, 258, 262, 270, 271, 281,
	288, 292, 27, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 0, 0, 0, 0, 169, 0,
	0, 0, 0, 0, 173, 0, 0, 255, 190, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 63, 0, 0, 465, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 152, 0, 0, 0, 0, 0, 0, 289, 0,
	0, 0, 223, 0, 260, 155, 170, 121, 106, 116,
	0, 154, 200, 233, 241, 0, 0, 0, 0, 0,
	136, 0, 235, 209, 280, 0, 0, 214, 234, 176,
	269, 225, 278, 279, 290, 291, 264, 287, 295, 252,
	0, 0, 0, 0, 0, 0, 122, 265, 189, 194,
	131, 133, 132, 117, 247, 267, 126, 135, 256, 261,
	109, 263, 277, 128, 245, 111, 275, 259, 187, 164,
	165, 110, 0, 231, 142, 151, 138, 204, 0, 0,
	0, 272, 273, 137, 298, 118, 286, 113, 119, 285,
	196, 0, 0, 0, 268, 276, 188, 181, 0, 112,
	274, 186, 180, 168, 146, 157, 220, 178, 221, 158,
	192, 191, 193, 0, 0, 0, 257, 283, 299, 124,
	0, 0, 266, 293, 294, 0, 0, 125, 149, 145,
	219, 195, 120, 160, 254, 167, 177, 230, 297, 208,
	236, 129, 282, 253, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 197, 202, 0, 216, 229, 246, 0,
	134, 141, 150, 0, 0, 171, 174, 175, 0, 105,
	114, 172, 296, 227, 148, 284, 0, 140, 0, 0,
	0, 0, 0, 0, 107, 108, 115, 123, 130, 139,
	144, 147, 153, 156, 159, 161, 162, 163, 166, 179,
	182, 183, 184, 185, 198, 199, 201, 203, 206, 207,
	210, 211, 212, 213, 215, 217, 218, 222, 224, 226,
	228, 232, 237, 238, 239, 240, 242, 243, 244, 248,
	249, 250, 251, 258, 262, 270, 271, 281, 288, 292,
	205, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	0, 0, 0, 0, 169, 1254, 0, 0, 0, 0,
	173, 0, 0, 255, 190, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 103, 0, 1037, 0, 0, 0, 0, 0,
	0, 127, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 152, 0, 0,
	0, 0, 0, 0, 289, 0, 0, 0, 223, 0,
	260, 155, 170, 121, 106, 116, 0, 154, 200, 233,
	241, 0, 0, 0, 0, 0, 136, 0, 235, 209,
	280, 0, 0, 214, 234, 176, 269, 225, 278, 279,
	290, 291, 264, 287, 295, 252, 0, 0, 0, 0,
	0, 0, 122, 265, 189, 194, 131, 133, 132, 117,
	247, 267, 126, 135, 256, 261, 109, 263, 277, 128,
	245, 111, 275, 259, 187, 164, 165, 110, 0, 231,
	142, 151, 138, 204, 0, 0, 0, 272, 273, 137,
	298, 118, 286, 113, 119, 285, 196, 0, 0, 0,
	268, 276, 188, 181, 0, 112, 274, 186, 180, 168,
	146, 157, 220, 178, 221, 158, 192, 191, 193, 0,
	0, 0, 257, 283, 299, 124, 0, 0, 266, 293,
	294, 0, 0, 125, 149, 145, 219, 195, 120, 160,
	254, 167, 177, 230, 297, 208, 236, 129, 282, 253,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	202, 0, 216, 229, 246, 0, 134, 141, 150, 0,
	0, 171, 174, 175, 0, 105, 114, 172, 296, 227,
	148, 284, 0, 140, 0, 0, 0, 0, 0, 0,
	107, 108, 115, 123, 130, 139, 144, 147, 153, 156,
	159, 161, 162, 163, 166, 179, 182, 183, 184, 185,
	198, 199, 201, 203, 206, 207, 210, 211, 212, 213,
	215, 217, 218, 222, 224, 226, 228, 232, 237, 238,
	239, 240, 242, 243, 244, 248, 249, 250, 251, 258,
	262, 270, 271, 281, 288, 292, 27, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 205, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 0, 0,
	0, 0, 169, 0, 0, 0, 0, 0, 173, 0,
	0, 255, 190, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 63, 0, 0,
	103, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 152, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 223, 0, 260, 155,
	170, 121, 106, 116, 0, 154, 200, 233, 241, 0,
	0, 0, 0, 0, 136, 0, 235, 209, 280, 0,
	0, 214, 234, 176, 269, 225, 278, 279, 290, 291,
	264, 287, 295, 252, 0, 0, 0, 0, 0, 0,
	122, 265, 189, 194, 131, 133, 132, 117, 247, 267,
	126, 135, 256, 261, 109, 263, 277, 128, 245, 111,
	275, 259, 187, 164, 165, 110, 0, 231, 142, 151,
	138, 204, 0, 0, 0, 272, 273, 137, 298, 118,
	286, 113, 119, 285, 196, 0, 0, 0, 268, 276,
	188, 181, 0, 112, 274, 186, 180, 168, 146, 157,
	220, 178, 221, 158, 192, 191, 193, 0, 0, 0,
	257, 283, 299, 124, 0, 0, 266, 293, 294, 0,
	0, 125, 149, 145, 219, 195, 120, 160, 254, 167,
	177, 230, 297, 208, 236, 129, 282, 253, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 197, 202, 0,
	216, 229, 246, 0, 134, 141, 150, 0, 0, 171,
	174, 175, 0, 105, 114, 172, 296, 227, 148, 284,
	0, 140, 0, 0, 0, 0, 0, 0, 107, 108,
	115, 123, 130, 139, 144, 147, 153, 156, 159, 161,
	162, 163, 166, 179, 182, 183, 184, 185, 198, 199,
	201, 203, 206, 207, 210, 211, 212, 213, 215, 217,
	218, 222, 224, 226, 228, 232, 237, 238, 239, 240,
	242, 243, 244, 248, 249, 250, 251, 258, 262, 270,
	271, 281, 288, 292, 205, 0, 0, 0, 928, 0,
	0, 0, 0, 143, 0, 0, 0, 0, 169, 0,
	0, 0, 0, 0, 173, 0, 0, 255, 190, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 465, 0, 930, 0,
	0, 0, 0, 0, 0, 127, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 152, 0, 0, 0, 0, 0, 0, 289, 0,
	0, 0, 223, 0, 260, 155, 170, 121, 106, 116,
	0, 154, 200, 233, 241, 0, 0, 0, 0, 0,
	136, 0, 235, 209, 280, 0, 0, 214, 234, 176,
	269, 225, 278, 279, 290, 291, 264, 287, 295, 252,
	0, 0, 0, 0, 0, 0, 122, 265, 189, 194,
	131, 133, 132, 117, 247, 267, 126, 135, 256, 261,
	109, 263, 277, 128, 245, 111, 275, 259, 187, 164,
	165, 110, 0, 231, 142, 151, 138, 204, 0, 0,
	0, 272, 273, 137, 298, 118, 286, 113, 119, 285,
	196, 0, 0, 0, 268, 276, 188, 181, 0, 112,
	274, 186, 180, 168, 146, 157, 220, 178, 221, 158,
	192, 191, 193, 0, 0, 0, 257, 283, 299, 124,
	0, 0, 266, 293, 294, 0, 0, 125, 149, 145,
	219, 195, 120, 160, 254, 167, 177, 230, 297, 208,
	236, 129, 282, 253, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 197, 202, 0, 216, 229, 246, 0,
	134, 141, 150, 0, 0, 171, 174, 175, 0, 105,
	114, 172, 296, 227, 148, 284, 0, 140, 0, 0,
	0, 0, 0, 0, 107, 108, 115, 123, 130, 139,
	144, 147, 153, 156, 159, 161, 162, 163, 166, 179,
	182, 183, 184, 185, 198, 199, 201, 203, 206, 207,
	210, 211, 212, 213, 215, 217, 218, 222, 224, 226,
	228, 232, 237, 238, 239, 240, 242, 243, 244, 248,
	249, 250, 251, 258, 262, 270, 271, 281, 288, 292,
	205, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	776, 0, 0, 0, 169, 0, 0, 0, 0, 0,
	173, 0, 0, 255, 190, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 465, 0, 775, 0, 0, 0, 0, 0,
	0, 127, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 152, 0, 0,
	0, 0, 0, 0, 289, 0, 0, 0, 223, 0,
	260, 155, 170, 121, 106, 116, 0, 154, 200, 233,
	241, 0, 0, 0, 0, 0, 136, 0, 235, 209,
	280, 0, 0, 214, 234, 176, 269, 225, 278, 279,
	290, 291, 264, 287, 295, 252, 0, 0, 0, 0,
	0, 0, 122, 265, 189, 194, 131, 133, 132, 117,
	247, 267, 126, 135, 256, 261, 109, 263, 277, 128,
	245, 111, 275, 259, 187, 164, 165, 110, 0, 231,
	142, 151, 138, 204, 0, 0, 0, 272, 273, 137,
	298, 118, 286, 113, 119, 285, 196, 0, 0, 0,
	268, 276, 188, 181, 0, 112, 274, 186, 180, 168,
	146, 157, 220, 178, 221, 158, 192, 191, 193, 0,
	0, 0, 257, 283, 299, 124, 0, 0, 266, 293,
	294, 0, 0, 125, 149, 145, 219, 195, 120, 160,
	254, 167, 177, 230, 297, 208, 236, 129, 282, 253,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	202, 0, 216, 229, 246, 0, 134, 141, 150, 0,
	0, 171, 174, 175, 0, 105, 114, 172, 296, 227,
	148, 284, 0, 140, 0, 0, 0, 0, 0, 0,
	107, 108, 115, 123, 130, 139, 144, 147, 153, 156,
	159, 161, 162, 163, 166, 179, 182, 183, 184, 185,
	198, 199, 201, 203, 206, 207, 210, 211, 212, 213,
	215, 217, 218, 222, 224, 226, 228, 232, 237, 238,
	239, 240, 242, 243, 244, 248, 249, 250, 251, 258,
	262, 270, 271, 281, 288, 292, 205, 0, 0, 0,
	0, 0, 0, 0, 0, 143, 0, 0, 0, 0,
	169, 0, 0, 0, 0, 0, 173, 0, 0, 255,
	190, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 103, 0,
	1037, 0, 0, 0, 0, 0, 0, 127, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 152, 0, 0, 0, 0, 0, 0,
	289, 0, 0, 0, 223, 0, 260, 155, 170, 121,
	106, 116, 0, 154, 200, 233, 241, 0, 0, 0,
	0, 0, 136, 0, 235, 209, 280, 0, 0, 214,
	234, 176, 269, 225, 278, 279, 290, 291, 264, 287,
	295, 252, 0, 0, 0, 0, 0, 0, 122, 265,
	189, 194, 131, 133, 132, 117, 247, 267, 126, 135,
	256, 261, 109, 263, 277, 128, 245, 111, 275, 259,
	187, 164, 165, 110, 0, 231, 142, 151, 138, 204,
	0, 0, 0, 272, 273, 137, 298, 118, 286, 113,
	119, 285, 196, 0, 0, 0, 268, 276, 188, 181,
	0, 112, 274, 186, 180, 168, 146, 157, 220, 178,
	221, 158, 192, 191, 193, 0, 0, 0, 257, 283,
	299, 124, 0, 0, 266, 293, 294, 0, 0, 125,
	149, 145, 219, 195, 120, 160, 254, 167, 177, 230,
	297, 208, 236, 129, 282, 253, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 197, 202, 0, 216, 229,
	246, 0, 134, 141, 150, 0, 0, 171, 174, 175,
	0, 105, 114, 172, 296, 227, 148, 284, 0, 140,
	0, 0, 0, 0, 0, 0, 107, 108, 115, 123,
	130, 139, 144, 147, 153, 156, 159, 161, 162, 163,
	166, 179, 182, 183, 184, 185, 198, 199, 201, 203,
	206, 207, 210, 211, 212, 213, 215, 217, 218, 222,
	224, 226, 228, 232, 237, 238, 239, 240, 242, 243,
	244, 248, 249, 250, 251, 258, 262, 270, 271, 281,
	288, 292, 205, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 0, 0, 0, 0, 169, 0, 0, 0,
	0, 0, 173, 0, 0, 255, 190, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 63, 0, 0, 103, 0, 0, 0, 0, 0,
	0, 0, 0, 127, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 152,
	0, 0, 0, 0, 0, 0, 289, 0, 0, 0,
	223, 0, 260, 155, 170, 121, 106, 116, 0, 154,
	200, 233, 241, 0, 0, 0, 0, 0, 136, 0,
	235, 209, 280, 0, 0, 214, 234, 176, 269, 225,
	278, 279, 290, 291, 264, 287, 295, 252, 0, 0,
	0, 0, 0, 0, 122, 265, 189, 194, 131, 133,
	132, 117, 247, 267, 126, 135, 256, 261, 109, 263,
	277, 128, 245, 111, 275, 259, 187, 164, 165, 110,
	0, 231, 142, 151, 138, 204, 0, 0, 0, 272,
	273, 137, 298, 118, 286, 113, 119, 285, 196, 0,
	0, 0, 268, 276, 188, 181, 0, 112, 274, 186,
	180, 168, 146, 157, 220, 178, 221, 158, 192, 191,
	193, 0, 0, 0, 257, 283, 299, 124, 0, 0,
	266, 293, 294, 0, 0, 125, 149, 145, 219, 195,
	120, 160, 254, 167, 177, 230, 297, 208, 236, 129,
	282, 253, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 197, 202, 0, 216, 229, 246, 0, 134, 141,
	150, 0, 0, 171, 174, 175, 0, 105, 114, 172,
	296, 227, 148, 284, 0, 140, 0, 0, 0, 0,
	0, 0, 107, 108, 115, 123, 130, 139, 144, 147,
	153, 156, 159, 161, 162, 163, 166, 179, 182, 183,
	184, 185, 198, 199, 201, 203, 206, 207, 210, 211,
	212, 213, 215, 217, 218, 222, 224, 226, 228, 232,
	237, 238, 239, 240, 242, 243, 244, 248, 249, 250,
	251, 258, 262, 270, 271, 281, 288, 292, 205, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 0, 0,
	0, 0, 169, 0, 0, 0, 0, 0, 173, 0,
	0, 255, 190, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	465, 0, 930, 0, 0, 0, 0, 0, 0, 127,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 152, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 223, 0, 260, 155,
	170, 121, 106, 116, 0, 154, 200, 233, 241, 0,
	0, 0, 0, 0, 136, 0, 235, 209, 280, 0,
	0, 214, 234, 176, 269, 225, 278, 279, 290, 291,
	264, 287, 295, 252, 0, 0, 0, 0, 0, 0,
	122, 265, 189, 194, 131, 133, 132, 117, 247, 267,
	126, 135, 256, 261, 109, 263, 277, 128, 245, 111,
	275, 259, 187, 164, 165, 110, 0, 231, 142, 151,
	138, 204, 0, 0, 0, 272, 273, 137, 298, 118,
	286, 113, 119, 285, 196, 0, 0, 0, 268, 276,
	188, 181, 0, 112, 274, 186, 180, 168, 146, 157,
	220, 178, 221, 158, 192, 191, 193, 0, 0, 0,
	257, 283, 299, 124, 0, 0, 266, 293, 294, 0,
	0, 125, 149, 145, 219, 195, 120, 160, 254, 167,
	177, 230, 297, 208, 236, 129, 282, 253, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 197, 202, 0,
	216, 229, 246, 0, 134, 141, 150, 0, 0, 171,
	174, 175, 0, 105, 114, 172, 296, 227, 148, 284,
	0, 140, 0, 0, 0, 0, 0, 0, 107, 108,
	115, 123, 130, 139, 144, 147, 153, 156, 159, 161,
	162, 163, 166, 179, 182, 183, 184, 185, 198, 199,
	201, 203, 206, 207, 210, 211, 212, 213, 215, 217,
	218, 222, 224, 226, 228, 232, 237, 238, 239, 240,
	242, 243, 244, 248, 249, 250, 251, 258, 262, 270,
	271, 281, 288, 292, 205, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 0, 0, 0, 0, 169, 0,
	0, 0, 0, 0, 173, 0, 0, 255, 190, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 63, 0, 0, 465, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 152, 0, 0, 0, 0, 0, 0, 289, 0,
	0, 0, 223, 0, 260, 155, 170, 121, 106, 116,
	0, 154, 200, 233, 241, 0, 0, 0, 0, 0,
	136, 0, 235, 209, 280, 0, 0, 214, 234, 176,
	269, 225, 278, 279, 290, 291, 264, 287, 295, 252,
	0, 0, 0, 0, 0, 0, 122, 265, 189, 194,
	131, 133, 132, 117, 247, 267, 126, 135, 256, 261,
	109, 263, 277, 128, 245, 111, 275, 259, 187, 164,
	165, 110, 0, 231, 142, 151, 138, 204, 0, 0,
	0, 272, 273, 137, 298, 118, 286, 113, 119, 285,
	196, 0, 0, 0, 268, 276, 188, 181, 0, 112,
	274, 186, 180, 168, 146, 157, 220, 178, 221, 158,
	192, 191, 193, 0, 0, 0, 257, 283, 299, 124,
	0, 0, 266, 293, 294, 0, 0, 125, 149, 145,
	219, 195, 120, 160, 254, 167, 177, 230, 297, 208,
	236, 129, 282, 253, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 197, 202, 0, 216, 229, 246, 0,
	134, 141, 150, 0, 0, 171, 174, 175, 0, 105,
	114, 172, 296, 227, 148, 284, 0, 140, 0, 0,
	0, 0, 0, 0, 107, 108, 115, 123, 130, 139,
	144, 147, 153, 156, 159, 161, 162, 163, 166, 179,
	182, 183, 184, 185, 198, 199, 201, 203, 206, 207,
	210, 211, 212, 213, 215, 217, 218, 222, 224, 226,
	228, 232, 237, 238, 239, 240, 242, 243, 244, 248,
	249, 250, 251, 258, 262, 270, 271, 281, 288, 292,
	205, 0, 0, 0, 0, 0, 0, 0, 746, 143,
	0, 0, 0, 0, 169, 0, 0, 0, 0, 0,
	173, 0, 0, 255, 190, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 103, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 152, 0, 0,
	0, 0, 0, 0, 289, 0, 0, 0, 223, 0,
	260, 155, 170, 121, 106, 116, 0, 154, 200, 233,
	241, 0, 0, 0, 0, 0, 136, 0, 235, 209,
	280, 0, 0, 214, 234, 176, 269, 225, 278, 279,
	290, 291, 264, 287, 295, 252, 0, 0, 0, 0,
	0, 0, 122, 265, 189, 194, 131, 133, 132, 117,
	247, 267, 126, 135, 256, 261, 109, 263, 277, 128,
	245, 111, 275, 259, 187, 164, 165, 110, 0, 231,
	142, 151, 138, 204, 0, 0, 0, 272, 273, 137,
	298, 118, 286, 113, 119, 285, 196, 0, 0, 0,
	268, 276, 188, 181, 0, 112, 274, 186, 180, 168,
	146, 157, 220, 178, 221, 158, 192, 191, 193, 0,
	0, 0, 257, 283, 299, 124, 0, 0, 266, 293,
	294, 0, 0, 125, 149, 145, 219, 195, 120, 160,
	254, 167, 177, 230, 297, 208, 236, 129, 282, 253,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	202, 0, 216, 229, 246, 0, 134, 141, 150, 0,
	0, 171, 174, 175, 0, 105, 114, 172, 296, 227,
	148, 284, 0, 140, 0, 0, 0, 0, 0, 0,
	107, 108, 115, 123, 130, 139, 144, 147, 153, 156,
	159, 161, 162, 163, 166, 179, 182, 183, 184, 185,
	198, 199, 201, 203, 206, 207, 210, 211, 212, 213,
	215, 217, 218, 222, 224, 226, 228, 232, 237, 238,
	239, 240, 242, 243, 244, 248, 249, 250, 251, 258,
	262, 270, 271, 281, 288, 292, 427, 0, 0, 0,
	0, 0, 0, 205, 0, 0, 0, 0, 0, 0,
	0, 0, 143, 0, 0, 0, 0, 169, 0, 0,
	0, 0, 0, 173, 0, 0, 255, 190, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 103, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	152, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 223, 0, 260, 155, 170, 121, 106, 116, 0,
	154, 200, 233, 241, 0, 0, 0, 0, 0, 136,
	0, 235, 209, 280, 0, 0, 214, 234, 176, 269,
	225, 278, 279, 290, 291, 264, 287, 295, 252, 0,
	0, 0, 0, 0, 0, 122, 265, 189, 194, 131,
	133, 132, 117, 247, 267, 126, 135, 256, 261, 109,
	263, 277, 128, 245, 111, 275, 259, 187, 164, 165,
	110, 0, 231, 142, 151, 138, 204, 0, 0, 0,
	272, 273, 137, 298, 118, 286, 113, 119, 285, 196,
	0, 0, 0, 268, 276, 188, 181, 0, 112, 274,
	186, 180, 168, 146, 157, 220, 178, 221, 158, 192,
	191, 193, 0, 0, 0, 257, 283, 299, 124, 0,
	0, 266, 293, 294, 0, 0, 125, 149, 145, 219,
	195, 120, 160, 254, 167, 177, 230, 297, 208, 236,
	129, 282, 253, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 197, 202, 0, 216, 229, 246, 0, 134,
	141, 150, 0, 0, 171, 174, 175, 0, 105, 114,
	172, 296, 227, 148, 284, 0, 140, 0, 0, 0,
	0, 0, 0, 107, 108, 115, 123, 130, 139, 144,
	147, 153, 156, 159, 161, 162, 163, 166, 179, 182,
	183, 184, 185, 198, 199, 201, 203, 206, 207, 210,
	211, 212, 213, 215, 217, 218, 222, 224, 226, 228,
	232, 237, 238, 239, 240, 242, 243, 244, 248, 249,
	250, 251, 258, 262, 270, 271, 281, 288, 292, 205,
	0, 0, 0, 0, 0, 0, 0, 0, 143, 0,
	0, 0, 0, 169, 0, 0, 0, 0, 0, 173,
	0, 0, 255, 190, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 152, 0, 0, 0,
	100, 0, 0, 289, 0, 0, 0, 223, 0, 260,
	155, 170, 121, 106, 116, 0, 154, 200, 233, 241,
	0, 0, 0, 0, 0, 136, 0, 235, 209, 280,
	0, 0, 214, 234, 176, 269, 225, 278, 279, 290,
	291, 264, 287, 295, 252, 0, 0, 0, 0, 0,
	0, 122, 265, 189, 194, 131, 133, 132, 117, 247,
	267, 126, 135, 256, 261, 109, 263, 277, 128, 245,
	111, 275, 259, 187, 164, 165, 110, 0, 231, 142,
	151, 138, 204, 0, 0, 0, 272, 273, 137, 298,
	118, 286, 113, 119, 285, 196, 0, 0, 0, 268,
	276, 188, 181, 0, 112, 274, 186, 180, 168, 146,
	157, 220, 178, 221, 158, 192, 191, 193, 0, 0,
	0, 257, 283, 299, 124, 0, 0, 266, 293, 294,
	0, 0, 125, 149, 145, 219, 195, 120, 160, 254,
	167, 177, 230, 297, 208, 236, 129, 282, 253, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 197, 202,
	0, 216, 229, 246, 0, 134, 141, 150, 0, 0,
	171, 174, 175, 0, 105, 114, 172, 296, 227, 148,
	284, 0, 140, 0, 0, 0, 0, 0, 0, 107,
	108, 115, 123, 130, 139, 144, 147, 153, 156, 159,
	161, 162, 163, 166, 179, 182, 183, 184, 185, 198,
	199, 201, 203, 206, 207, 210, 211, 212, 213, 215,
	217, 218, 222, 224, 226, 228, 232, 237, 238, 239,
	240, 242, 243, 244, 248, 249, 250, 251, 258, 262,
	270, 271, 281, 288, 292, 205, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 0, 0, 0, 0, 169,
	0, 0, 0, 0, 0, 173, 0, 0, 255, 190,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 465, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 152, 0, 0, 0, 0, 0, 0, 289,
	0, 0, 0, 223, 0, 260, 155, 170, 121, 106,
	116, 0, 154, 200, 233, 241, 0, 0, 0, 0,
	0, 136, 0, 235, 209, 280, 0, 0, 214, 234,
	176, 269, 225, 278, 279, 290, 291, 264, 287, 295,
	252, 0, 0, 0, 0, 0, 0, 122, 265, 189,
	194, 131, 133, 132, 117, 247, 267, 126, 135, 256,
	261, 109, 263, 277, 128, 245, 111, 275, 259, 187,
	164, 165, 110, 0, 231, 142, 151, 138, 204, 0,
	0, 0, 272, 273, 137, 298, 118, 286, 113, 119,
	285, 196, 0, 0, 0, 268, 276, 188, 181, 0,
	112, 274, 186, 180, 168, 146, 157, 220, 178, 221,
	158, 192, 191, 193, 0, 0, 0, 257, 283, 299,
	124, 0, 0, 266, 293, 294, 0, 0, 125, 149,
	145, 219, 195, 120, 160, 254, 167, 177, 230, 297,
	208, 236, 129, 282, 253, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 197, 202, 0, 216, 229, 246,
	0, 134, 141, 150, 0, 0, 171, 174, 175, 0,
	105, 114, 172, 296, 227, 148, 284, 0, 140, 0,
	0, 0, 0, 0, 0, 107, 108, 115, 123, 130,
	139, 144, 147, 153, 156, 159, 161, 162, 163, 166,
	179, 182, 183, 184, 185, 198, 199, 201, 203, 206,
	207, 210, 211, 212, 213, 215, 217, 218, 222, 224,
	226, 228, 232, 237, 238, 239, 240, 242, 243, 244,
	248, 249, 250, 251, 258, 262, 270, 271, 281, 288,
	292, 205, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 0, 0, 0, 0, 169, 0, 0, 0, 0,
	0, 173, 0, 0, 255, 190, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 0, 0, 0, 0, 0, 0,
	0, 0, 127, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 152, 0,
	0, 0, 0, 0, 0, 289, 0, 0, 0, 223,
	0, 260, 155, 170, 121, 106, 116, 0, 154, 200,
	233, 241, 0, 0, 0, 0, 0, 136, 0, 235,
	209, 280, 0, 0, 214, 234, 176, 269, 225, 278,
	279, 290, 291, 264, 287, 295, 252, 0, 0, 0,
	0, 0, 0, 122, 265, 189, 194, 131, 133, 132,
	117, 247, 267, 126, 135, 256, 261, 109, 263, 277,
	128, 245, 111, 275, 259, 187, 164, 165, 110, 0,
	231, 142, 151, 138, 204, 0, 0, 0, 272, 273,
	137, 298, 118, 286, 113, 119, 285, 196, 0, 0,
	0, 268, 276, 188, 181, 0, 112, 274, 186, 180,
	168, 146, 157, 220, 178, 221, 158, 192, 191, 193,
	0, 0, 0, 257, 283, 299, 124, 0, 0, 266,
	293, 294, 0, 0, 125, 149, 145, 219, 195, 120,
	160, 254, 167, 177, 230, 297, 208, 236, 129, 282,
	253, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	197, 202, 0, 216, 229, 246, 0, 134, 141, 150,
	0, 0, 171, 174, 175, 0, 105, 114, 172, 296,
	227, 148, 284, 0, 140, 0, 0, 0, 0, 0,
	0, 107, 108, 115, 123, 130, 139, 144, 147, 153,
	156, 159, 161, 162, 163, 166, 179, 182, 183, 184,
	185, 198, 199, 201, 203, 206, 207, 210, 211, 212,
	213, 215, 217, 218, 222, 224, 226, 228, 232, 237,
	238, 239, 240, 242, 243, 244, 248, 249, 250, 251,
	258, 262, 270, 271, 281, 288, 292, 205, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 0, 0, 0,
	0, 169, 0, 0, 0, 0, 0, 173, 0, 0,
	255, 190, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 365,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 152, 0, 0, 0, 0, 0,
	0, 289, 0, 0, 0, 223, 0, 260, 155, 170,
	121, 106, 116, 0, 154, 200, 233, 241, 0, 0,
	0, 0, 0, 136, 0, 235, 209, 280, 0, 0,
	214, 234, 176, 269, 225, 278, 279, 290, 291, 264,
	287, 295, 252, 0, 0, 0, 0, 0, 0, 122,
	265, 189, 194, 131, 133, 132, 117, 247, 267, 126,
	135, 256, 261, 109, 263, 277, 128, 245, 111, 275,
	259, 187, 164, 165, 110, 0, 231, 142, 151, 138,
	204, 0, 0, 0, 272, 273, 137, 298, 118, 286,
	113, 444, 285, 196, 0, 0, 0, 268, 276, 188,
	181, 0, 112, 274, 186, 180, 168, 146, 157, 220,
	178, 221, 158, 192, 191, 193, 0, 0, 0, 257,
	283, 299, 124, 0, 0, 266, 293, 294, 0, 0,
	125, 149, 145, 219, 445, 443, 160, 254, 167, 177,
	230, 297, 208, 236, 129, 282, 253, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 197, 202, 0, 216,
	229, 246, 0, 134, 141, 150, 0, 0, 171, 174,
	175, 0, 105, 114, 172, 296, 227, 148, 284, 0,
	140, 0, 0, 0, 0, 0, 0, 107, 108, 115,
	123, 130, 139, 144, 147, 153, 156, 159, 161, 162,
	163, 166, 179, 182, 183, 184, 185, 198, 199, 201,
	203, 206, 207, 210, 211, 212, 213, 215, 217, 218,
	222, 224, 226, 228, 232, 237, 238, 239, 240, 242,
	243, 244, 248, 249, 250, 251, 258, 262, 270, 271,
	281, 288, 292, 205, 0, 0, 0, 0, 0, 0,
	0, 0, 143, 0, 0, 0, 0, 169, 0, 0,
	0, 0, 0, 173, 0, 0, 255, 190, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 365, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	152, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 223, 0, 260, 155, 170, 121, 106, 116, 0,
	154, 200, 233, 241, 0, 0, 0, 0, 0, 136,
	0, 235, 209, 280, 0, 0, 214, 234, 176, 269,
	225, 278, 279, 290, 291, 264, 287, 295, 252, 0,
	0, 0, 0, 0, 0, 122, 265, 189, 194, 131,
	133, 132, 117, 247, 267, 126, 135, 256, 261, 109,
	263, 277, 128, 245, 111, 275, 259, 187, 164, 165,
	110, 0, 231, 142, 151, 138, 204, 0, 0, 0,
	272, 273, 137, 298, 118, 286, 113, 119, 285, 196,
	0, 0, 0, 268, 276, 188, 181, 0, 112, 274,
	186, 180, 168, 146, 157, 220, 178, 221, 158, 192,
	191, 193, 0, 0, 0, 257, 283, 299, 124, 0,
	0, 266, 293, 294, 0, 0, 125, 149, 145, 219,
	195, 120, 160, 254, 167, 177, 230, 297, 208, 236,
	129, 282, 253, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 197, 202, 0, 216, 229, 246, 0, 134,
	141, 150, 0, 0, 171, 174, 175, 0, 105, 114,
	172, 296, 227, 148, 284, 0, 140, 0, 0, 0,
	0, 0, 0, 107, 108, 115, 123, 130, 139, 144,
	147, 153, 156, 159, 161, 162, 163, 166, 179, 182,
	183, 184, 185, 198, 199, 201, 203, 206, 207, 210,
	211, 212, 213, 215, 217, 218, 222, 224, 226, 228,
	232, 237, 238, 239, 240, 242, 243, 244, 248, 249,
	250, 251, 258, 262, 270, 271, 281, 288, 292, 205,
	0, 0, 0, 0, 0, 0, 0, 0, 143, 0,
	0, 0, 0, 169, 0, 0, 0, 0, 0, 173,
	0, 0, 255, 190, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 365, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 152, 0, 0, 0,
	0, 0, 0, 289, 0, 0, 0, 223, 0, 260,
	155, 170, 121, 106, 116, 0, 154, 200, 233, 241,
	0, 0, 0, 0, 0, 136, 0, 235, 209, 280,
	0, 0, 214, 234, 176, 269, 225, 278, 279, 290,
	291, 264, 287, 295, 252, 0, 0, 0, 0, 0,
	0, 122, 265, 189, 194, 131, 133, 132, 117, 247,
	267, 126, 135, 256, 261, 109, 263, 767, 128, 245,
	111, 275, 259, 187, 164, 165, 110, 0, 231, 142,
	151, 138, 204, 0, 0, 0, 272, 273, 137, 298,
	118, 286, 113, 444, 285, 196, 0, 0, 0, 268,
	276, 188, 181, 0, 112, 274, 186, 180, 168, 146,
	157, 220, 178, 221, 158, 192, 191, 193, 0, 0,
	0, 257, 283, 299, 124, 0, 0, 266, 293, 294,
	0, 0, 125, 149, 145, 219, 445, 443, 160, 254,
	167, 177, 230, 297, 208, 236, 129, 282, 253, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 197, 202,
	0, 216, 229, 246, 0, 134, 141, 150, 0, 0,
	171, 174, 175, 0, 105, 114, 172, 296, 227, 148,
	284, 0, 140, 0, 0, 0, 0, 0, 0, 107,
	108, 115, 123, 130, 139, 144, 147, 153, 156, 159,
	161, 162, 163, 166, 179, 182, 183, 184, 185, 198,
	199, 201, 203, 206, 207, 210, 211, 212, 213, 215,
	217, 218, 222, 224, 226, 228, 232, 237, 238, 239,
	240, 242, 243, 244, 248, 249, 250, 251, 258, 262,
	270, 271, 281, 288, 292, 205, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 0, 0, 0, 0, 169,
	0, 0, 0, 0, 0, 173, 0, 0, 255, 190,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 365, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 152, 0, 0, 0, 0, 0, 0, 289,
	0, 0, 0, 223, 0, 260, 155, 170, 121, 106,
	116, 0, 154, 200, 233, 241, 0, 0, 0, 0,
	0, 136, 0, 235, 209, 280, 0, 0, 214, 234,
	176, 269, 225, 278, 279, 290, 291, 264, 287, 295,
	252, 0, 0, 0, 0, 0, 0, 122, 265, 189,
	194, 131, 133, 132, 117, 247, 267, 126, 135, 256,
	261, 109, 263, 435, 128, 245, 111, 275, 259, 187,
	164, 165, 110, 0, 231, 142, 151, 138, 204, 0,
	0, 0, 272, 273, 137, 298, 118, 286, 113, 444,
	285, 196, 0, 0, 0, 268, 276, 188, 181, 0,
	112, 274, 186, 180, 168, 146, 157, 220, 178, 221,
	158, 192, 191, 193, 0, 0, 0, 257, 283, 299,
	124, 0, 0, 266, 293, 294, 0, 0, 125, 149,
	145, 219, 445, 443, 438, 437, 167, 177, 230, 297,
	208, 236, 129, 282, 253, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 197, 202, 0, 216, 229, 246,
	0, 134, 141, 150, 0, 0, 171, 174, 175, 0,
	105, 114, 172, 296, 227, 148, 284, 0, 140, 0,
	0, 0, 0, 0, 0, 107, 108, 115, 123, 130,
	139, 144, 147, 153, 156, 159, 161, 162, 163, 166,
	179, 182, 183, 184, 185, 198, 199, 201, 203, 206,
	207, 210, 211, 212, 213, 215, 217, 218, 222, 224,
	226, 228, 232, 237, 238, 239, 240, 242, 243, 244,
	248, 249, 250, 251, 258, 262, 270, 271, 281, 288,
	292,
}
var yyPact = [...]int{

	2084, -1000, -268, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1248, 1281, -1000, -1000, -1000,
	-1000, -1000, -1000, 432, 108, -1000, -1000, -1000, 198, 35,
	15971, 197, 1881, 16703, -1000, 10, -1000, -1000, 153, 16703,
	-1000, -1000, -83, -84, -1000, 20, 1001, -1000, -1000, 37,
	-1000, -1000, -1000, -1000, -1000, -1000, 1172, 1246, 1032, 1232,
	1091, -1000, 7876, 166, 166, 15605, 18167, -1000, -1000, 431,
	16703, 194, 16703, -155, 163, 163, 99, 163, -1000, 449,
	-1000, -1000, -1000, 16703, 164, 16337, 164, 164, 164, 164,
	16703, -1000, 248, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	16703, 876, 1167, 4877, 106, 4877, 4877, -1000, 440, -1000,
	4877, 98, 4877, -8, 487, 74, 1, -1000, 4877, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 202, 1001, 447,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1166, 687, 755,
	196, 16703, 379, -1000, 1164, 9352, 9352, 1248, -1000, 1001,
	-1000, -1000, -1000, 1151, -1000, -1000, 502, 1279, -1000, 59,
	247, -1000, 9352, 2218, 946, -1000, -1000, 946, -1000, -1000,
	239, -1000, -1000, 10450, 10450, 10450, 10450, 10450, 10450, 10450,
	10450, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 946, -1000, 8986, 946, 946,
	946, 946, 946, 946, 946, 946, 946, 946, 9352, 946,
	946, 946, 946, 946, 946, 946, 946, 946, 946, 946,
	946, 946, 946, 946, 946, 15232, 14134, 16703, 929, 890,
	-1000, -1000, 245, 806, 17801, -115, -1000, -1000, -1000, 426,
	13402, -1000, 244, -1000, 1163, -1000, 871, 16703, -1000, 2523,
	-1000, 16337, 1210, 184, 866, 489, 865, 864, 16703, 862,
	979, 182, 16703, 1200, 1056, -1000, -1000, 16703, 860, 855,
	853, -1000, 6777, -1000, 4877, 4877, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	163, 163, 4877, 4877, 16703, 16703, 16703, -1000, -1000, 16703,
	-1000, -1000, -1000, 4877, 4877, -1000, 1278, 386, 386, -1000,
	-1000, -1000, -1000, 9352, -1000, 10450, 374, -1000, 1055, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 850, -1000, -1000, 192,
	-1000, 646, -1000, -1000, 16703, 4877, 95, 122, 115, 16703,
	-1000, 1288, 299, 655, 237, 978, -1000, 499, 1172, 755,
	1091, 714, 1041, -1000, -1000, -1000, 16703, 13036, 9352, 9352,
	634, 14866, 5637, 373, 10450, 570, 414, 10450, 10450, 10450,
	10450, 10450, 10450, 10450, 10450, 10450, 10450, 10450, 10450, 10450,
	10450, 10450, 652, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 847, -1000, 1001, 1009, 1009, 259, 259, 259, 259,
	259, 259, 259, 10816, 1208, 755, 859, 711, 8986, 7876,
	7876, 755, 9352, 9352, 8608, 8242, 7876, 7876, 1208, 466,
	711, 17435, -1000, -1000, 10084, -1000, -1000, -1000, -1000, -1000,
	755, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 16337,
	16337, 7876, 7876, 7876, 7876, 117, 16703, -1000, 960, 1160,
	-1000, -1000, -1000, 1209, 12670, 11548, 117, 937, 14134, 16703,
	-1000, -1000, 14134, 16703, 5257, 17069, 806, -115, 964, -1000,
	-117, -127, 7144, 258, -1000, -1000, -1000, 6397, -1000, 4117,
	407, 925, -1000, -76, -1000, -1000, -1000, 996, -1000, 996,
	139, -15, 996, 996, 996, 996, 996, -45, -45, -45,
	-45, -25, -1000, -1000, -1000, -1000, -1000, 1021, 1010, -1000,
	996, 996, 996, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1003, 141, 1003, 999, 999, 999, 999, 1026, -1000,
	16703, 4877, 1192, 4877, 82, -1000, -1000, 16703, 16703, 975,
	-1000, 16703, 971, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 846, 843, -1000, -1000, -1000, -1000, -1000, 398,
	-1000, -1000, 16703, 1204, 16703, 16703, 484, 711, 872, -1000,
	621, 16703, -1000, 968, -1000, 420, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 140,
	-1000, 16703, 16703, 16703, 16703, 16703, 223, -1000, 1090, 9352,
	9352, 6397, 9352, -1000, -1000, -1000, 1164, -1000, 1208, 1263,
	-1000, 1114, 1101, 7876, -1000, -1000, -1000, -1000, 14500, -1000,
	-1000, 373, 468, -1000, -1000, 695, -1000, -1000, -1000, 265,
	-1000, 229, 946, -1000, 2404, -1000, -1000, -1000, -1000, 570,
	10450, 10450, 10450, 872, 2404, 2360, 1677, 552, 259, 632,
	632, 372, 372, 372, 372, 372, 510, 510, -1000, -1000,
	-1000, 755, -1000, -1000, -1000, 7876, -1000, 9352, -1000, 755,
	841, -1000, 841, -1000, 509, 703, 356, 1277, 841, 343,
	1276, 841, 841, 841, 7876, 515, -1000, 9352, 755, -1000,
	1592, 967, 966, 841, 755, 965, 841, 841, 910, 946,
	-1000, 17069, 14134, 14134, 14134, 14134, 14134, -1000, 1074, 1072,
	-1000, 1078, 1068, 1110, 16703, -1000, 836, 12670, -1000, 946,
	-1000, 12292, 256, 193, 191, 190, -1000, -1000, 1266, 14134,
	933, -1000, 933, -1000, 222, -1000, -1000, 964, -115, -134,
	-1000, -1000, -1000, -1000, 711, -1000, 721, -1000, 218, 962,
	3737, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1008, 833,
	-1000, 1134, 308, 324, 737, 1128, -1000, -1000, -1000, 215,
	-78, -1000, -1000, 565, -45, -45, 996, 996, 125, 996,
	-1000, -45, -1000, -1000, -1000, 258, 1159, 258, 258, 258,
	258, -45, 620, 620, -1000, -1000, -1000, -1000, 556, -1000,
	1003, -1000, -1000, 546, -1000, -1000, -1000, 1054, 16337, 1001,
	1171, -1000, -1000, -1000, 1271, -1000, -1000, 175, -1000, 4877,
	16703, 4877, 4877, 1266, 832, 816, 386, 484, 1144, -1000,
	-1000, -1000, 609, 9352, -1000, 10450, -1000, -1000, 192, 1009,
	-1000, 820, 427, 443, 154, 154, -1000, 401, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 116, 1025, -1000,
	-1000, -1000, -1000, 8, 87, 1087, 711, 711, -1000, -1000,
	16703, -1000, -1000, -1000, -1000, 942, -1000, -1000, -1000, -1000,
	755, 1233, 4497, 7876, -1000, 872, 2404, 2320, -1000, 10450,
	-1000, 755, 711, -1000, 7876, -1000, -1000, 704, 652, 704,
	10450, 10450, -1000, 10450, 10450, -1000, -182, -1000, 947, 456,
	-1000, 9352, 689, -1000, -1000, 10450, 10450, -1000, -1000, -1000,
	-1000, 1051, 17069, 946, -1000, 11926, 16337, 940, 1160, 1007,
	1039, 1098, -1000, -1000, -1000, -1000, 1071, -1000, 1070, -1000,
	-1000, -1000, -1000, 16337, 10450, 256, -1000, 946, 946, 946,
	1248, 9352, 933, -1000, -1000, 283, -1000, -1000, -135, -137,
	-1000, -1000, -1000, 6017, 4117, -1000, 4117, 16337, 134, -1000,
	737, 737, -1000, -1000, -1000, 1002, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 512, 10450, 1286, -1000, 1133, -1000, 1132,
	605, -1000, -1000, 885, 258, 258, -45, -1000, -1000, 996,
	-1000, 258, -1000, 332, -1000, -1000, -1000, -1000, 258, 826,
	-1000, 824, 954, -1000, 821, 16703, -1000, -1000, -1000, 1036,
	-1000, -1000, -1000, 16703, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 484, -1000, 10450, -1000, 711, 2404, -1000, -1000, -1000,
	696, -1000, 737, 255, -1000, -1000, -1000, 815, 1128, -1000,
	-1000, 808, -1000, 807, 16337, 1121, 805, 16703, 16337, -1000,
	-1000, 750, 796, 9352, -1000, 16337, -189, 767, 16337, 16337,
	16337, -1000, -1000, 1266, 14134, -1000, 9352, -1000, -1000, 755,
	-1000, 10450, 2404, -1000, -1000, 755, 996, 996, -1000, 996,
	999, -1000, 996, -5, 996, -24, 755, 755, 2345, 2279,
	2255, 2238, 946, -162, -1000, 711, 9352, 1859, 1140, -1000,
	1146, 905, 932, -1000, -1000, 7510, 755, 804, 216, 790,
	-1000, 1248, -1000, -1000, 9352, 998, -1000, 9352, -1000, -1000,
	-1000, 790, 1821, -1000, 16337, 16337, 16337, 1172, 711, -1000,
	-1000, -1000, -1000, 3737, -1000, 787, -1000, 996, -1000, -1000,
	-1000, 16337, -1000, 2404, -93, -1000, -1000, -1000, -1000, -1000,
	-1000, 258, -1000, -1000, -1000, -1000, -1000, -45, 584, -45,
	545, -1000, 532, 995, -1000, 1001, 16703, -1000, -1000, 2404,
	750, 132, -1000, 1026, 308, 134, -1000, -1000, -1000, -1000,
	757, 295, -1000, 170, 132, 750, 711, 1177, -1000, 6017,
	-1000, -1000, 994, 1027, -1000, 1254, 950, 934, -1000, 2404,
	-1000, -1000, 119, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 10450, 10450, 10450, 10450, 10450, 755, 569, 711, 10450,
	10450, 1117, -1000, 946, -1000, -1000, 945, 16337, 16337, -1000,
	16337, 1172, 711, 16337, 711, 11182, -1000, 13768, 782, -1000,
	782, 782, -1000, 249, 16337, 1189, 778, -1000, -1000, 258,
	-1000, 258, 883, 879, 16337, -1000, 1214, 827, -1000, -1000,
	741, 990, 737, -1000, -1000, 681, -1000, -1000, 16337, -1000,
	132, 946, 936, -1000, 415, 16337, 16703, 1250, 1219, 755,
	-1000, -1000, 1592, 1592, 1592, 1592, 120, -1000, -1000, 1592,
	1592, 1285, -1000, 946, -1000, 1001, 206, -1000, -1000, -1000,
	776, -1000, 256, 16337, -1000, -1000, -1000, 249, -1000, 666,
	401, 541, -1000, -1000, 136, -1000, -1000, -1000, -1000, 771,
	-1000, 65, -1000, -1000, -1000, 16337, 1026, -1000, -1000, -1000,
	-1000, 114, 6017, 4117, 763, -1000, -1000, 9352, 9352, -1000,
	-1000, -1000, -1000, -1000, 755, 77, -195, -1000, -1000, 17069,
	932, 755, 16337, -1000, -1000, -1000, -1000, -1000, 523, -1000,
	16703, 249, 40, -1000, 754, 984, -1000, 749, -1000, 16337,
	-1000, -1000, 1025, 711, 928, -1000, 1085, -187, -198, 806,
	-1000, -1000, -1000, 982, -1000, 249, 64, 249, 16337, -1000,
	114, 1099, -189, -1000, 1083, -1000, 16337, -1000, 619, 583,
	-1000, 732, -1000, 111, -1000, -190, 662, 152, -1000, -1000,
	249, 109, -196, 1033, -1000, -1000, -1000, -1000, -1000, -1000,
	540, -1000, 946, -199, 1030, 1011, 1275, -1000, -270, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 9352,
	9352, 9718, -1000, -1000, 1284, -1000, 1282, 302, 302, 1425,
	622, 617, 1592, 755, -1000, -1000, -1000, 143, 573, -1000,
	-1000, -1000, 589, -1000, 9352, 540, -1000, -1000, -1000, -1000,
	-1000, 474, 540, -1000, 602, -271, -1000, -274, 540, 639,
	1170, -278, 162, 540, 455, -1000, 9352, 473, 540, -1000,
	-279, 161, 540, -1000, 371, -1000, 581, -1000, -281, 540,
	159, 550, -283, -1000, 158, 540, -1000,
}
var yyPgo = [...]int{

	0, 1562, 157, 632, 1561, 1559, 1558, 21, 11, 9,
	14, 1556, 1555, 1554, 1553, 1552, 1551, 7, 2, 1550,
	1549, 1312, 19, 1548, 4, 1546, 3, 76, 1540, 1538,
	1536, 1534, 1533, 1532, 1531, 1529, 1528, 1527, 1526, 1522,
	1519, 1518, 1514, 1511, 1509, 1507, 1506, 1504, 1502, 118,
	1500, 1499, 1497, 101, 1496, 96, 1495, 1494, 1489, 65,
	108, 74, 71, 86, 1487, 1484, 52, 80, 90, 1481,
	54, 1480, 1472, 99, 1471, 1470, 1468, 78, 1467, 1464,
	1947, 1456, 93, 1455, 45, 35, 141, 1453, 1449, 1448,
	1446, 66, 959, 1445, 1444, 1443, 50, 1442, 1440, 116,
	1436, 85, 28, 31, 38, 42, 1432, 84, 36, 1429,
	81, 1428, 1427, 1426, 1425, 91, 1424, 32, 1422, 88,
	1420, 13, 40, 53, 87, 1419, 46, 97, 61, 55,
	37, 92, 1418, 95, 77, 1417, 1416, 606, 1411, 1407,
	67, 1406, 1403, 59, 1400, 542, 98, 58, 1399, 1395,
	1391, 1387, 47, 64, 1386, 1384, 178, 124, 109, 29,
	1421, 25, 82, 1383, 26, 1382, 2183, 94, 44, 62,
	1381, 1380, 63, 1378, 1377, 1376, 1375, 1369, 1366, 1365,
	1361, 577, 1359, 1358, 1357, 89, 41, 1356, 1354, 75,
	60, 1351, 1350, 1349, 83, 51, 1345, 72, 48, 1344,
	1343, 1332, 1330, 39, 30, 1327, 1326, 1325, 1324, 56,
	34, 1323, 33, 24, 20, 43, 16, 49, 1322, 18,
	1319, 27, 1318, 17, 1317, 23, 68, 5, 6, 8,
	1316, 1314, 1309, 0, 458, 100, 1301, 1298, 103,
}
var yyR1 = [...]int{

	0, 231, 232, 232, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	6, 3, 4, 4, 5, 5, 7, 7, 52, 52,
	8, 9, 9, 9, 9, 235, 235, 75, 75, 73,
	73, 74, 74, 127, 127, 10, 10, 10, 10, 131,
	131, 134, 134, 134, 135, 135, 135, 135, 170, 170,
	121, 12, 12, 12, 12, 12, 12, 12, 12, 155,
	155, 31, 31, 32, 32, 32, 118, 118, 118, 11,
	11, 11, 11, 11, 17, 19, 19, 23, 23, 24,
	20, 20, 20, 20, 25, 25, 26, 21, 21, 30,
	30, 28, 28, 27, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 22, 22, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 225, 225, 224,
	223, 223, 222, 222, 221, 37, 205, 207, 207, 206,
	206, 206, 206, 195, 174, 174, 174, 174, 174, 174,
	174, 173, 173, 173, 173, 177, 177, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 176, 176, 176, 176,
	176, 176, 176, 176, 178, 178, 178, 178, 178, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 180, 180, 180, 180, 180, 180,
	180, 180, 194, 194, 181, 181, 189, 189, 190, 190,
	190, 187, 187, 188, 188, 191, 191, 183, 184, 192,
	185, 185, 185, 186, 186, 186, 193, 193, 193, 193,
	182, 196, 196, 216, 216, 215, 215, 214, 214, 214,
	204, 204, 211, 211, 211, 211, 211, 199, 199, 199,
	198, 198, 200, 200, 203, 203, 213, 213, 212, 197,
	197, 217, 217, 217, 217, 217, 201, 201, 202, 202,
	202, 228, 229, 227, 227, 227, 227, 227, 208, 208,
	208, 209, 209, 209, 210, 210, 210, 230, 230, 33,
	33, 33, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 117, 117, 117, 35, 36, 36, 36, 36, 36,
	36, 36, 36, 153, 153, 226, 226, 226, 226, 226,
	220, 218, 218, 219, 219, 13, 38, 38, 14, 14,
	14, 14, 14, 14, 15, 15, 39, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 40, 64, 141,
	141, 139, 139, 142, 142, 140, 140, 140, 143, 143,
	143, 144, 144, 171, 171, 171, 41, 41, 46, 46,
	47, 48, 154, 154, 44, 44, 45, 45, 45, 45,
	58, 58, 236, 236, 43, 43, 42, 42, 42, 42,
	16, 237, 49, 50, 50, 51, 51, 51, 55, 55,
	55, 53, 53, 53, 54, 54, 61, 61, 60, 60,
	62, 62, 62, 62, 120, 120, 120, 120, 163, 163,
	163, 162, 162, 65, 65, 66, 66, 67, 67, 68,
	68, 68, 68, 83, 83, 84, 84, 84, 84, 84,
	94, 94, 126, 126, 128, 128, 69, 69, 69, 69,
	70, 70, 71, 71, 72, 72, 152, 152, 168, 168,
	76, 76, 76, 78, 77, 77, 77, 77, 79, 79,
	81, 81, 80, 80, 82, 85, 85, 85, 85, 86,
	86, 63, 63, 63, 63, 63, 63, 63, 138, 138,
	88, 88, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 100, 100, 100, 100, 100, 100, 89, 89,
	89, 89, 89, 89, 89, 59, 59, 101, 101, 101,
	107, 102, 102, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 97, 97, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 238,
	238, 99, 98, 98, 98, 98, 98, 98, 56, 56,
	56, 56, 56, 169, 169, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 111, 111,
	57, 57, 109, 109, 110, 112, 112, 108, 108, 108,
	91, 91, 91, 91, 91, 91, 91, 91, 93, 93,
	93, 113, 113, 114, 114, 115, 115, 116, 116, 119,
	122, 122, 122, 123, 123, 123, 123, 124, 124, 124,
	90, 90, 90, 90, 90, 90, 125, 125, 125, 125,
	129, 129, 103, 103, 105, 105, 104, 106, 130, 130,
	133, 133, 133, 133, 132, 132, 132, 165, 165, 165,
	136, 136, 145, 145, 146, 146, 137, 137, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 151, 151, 150,
	150, 150, 147, 147, 147, 148, 148, 164, 164, 160,
	160, 161, 161, 166, 166, 167, 167, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 233, 234, 156, 157, 157, 157,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 4, 6, 7,
	5, 10, 1, 3, 1, 3, 7, 8, 1, 1,
	9, 8, 7, 6, 6, 1, 1, 1, 3, 1,
	3, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	0, 2, 2, 11, 7, 9, 5, 5, 15, 0,
	3, 1, 1, 1, 1, 1, 0, 2, 2, 1,
	1, 1, 1, 1, 4, 5, 8, 1, 2, 5,
	7, 10, 8, 11, 1, 2, 5, 2, 4, 2,
	3, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	0, 2, 1, 3, 3, 4, 4, 2, 4, 1,
	3, 3, 3, 3, 0, 2, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 3, 2,
	2, 2, 2, 2, 1, 2, 2, 2, 1, 4,
	4, 3, 3, 2, 4, 5, 2, 3, 4, 2,
	2, 3, 3, 3, 3, 3, 4, 1, 1, 1,
	1, 1, 6, 6, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 3, 0, 5, 0, 3,
	5, 0, 1, 0, 1, 1, 2, 2, 3, 1,
	0, 3, 3, 0, 2, 2, 2, 1, 2, 1,
	2, 5, 4, 0, 1, 1, 2, 2, 3, 2,
	0, 1, 2, 3, 3, 2, 2, 1, 1, 1,
	1, 1, 0, 1, 0, 1, 1, 3, 3, 3,
	1, 10, 11, 11, 12, 12, 1, 1, 0, 2,
	2, 3, 3, 1, 1, 2, 2, 2, 0, 1,
	3, 1, 2, 3, 1, 1, 1, 0, 2, 1,
	1, 1, 6, 10, 9, 7, 7, 7, 9, 7,
	12, 14, 7, 7, 9, 9, 10, 5, 6, 8,
	7, 0, 1, 2, 4, 7, 5, 5, 5, 12,
	7, 5, 9, 0, 1, 1, 1, 1, 1, 1,
	7, 1, 3, 8, 8, 3, 3, 5, 4, 6,
	4, 4, 4, 4, 3, 2, 3, 4, 4, 3,
	6, 6, 4, 4, 4, 4, 4, 3, 3, 2,
	6, 2, 3, 4, 3, 7, 6, 5, 4, 2,
	4, 3, 4, 3, 3, 5, 2, 3, 3, 1,
	1, 0, 1, 1, 1, 0, 2, 2, 0, 2,
	2, 0, 2, 0, 1, 1, 2, 1, 1, 2,
	1, 1, 1, 1, 3, 3, 1, 1, 1, 1,
	0, 3, 1, 1, 2, 2, 2, 2, 3, 3,
	2, 0, 2, 0, 2, 1, 2, 2, 0, 1,
	1, 0, 1, 1, 0, 1, 0, 1, 1, 3,
	1, 3, 3, 5, 0, 2, 4, 7, 0, 1,
	2, 1, 1, 0, 2, 1, 3, 1, 1, 1,
	3, 1, 3, 2, 6, 1, 4, 6, 3, 2,
	0, 3, 1, 3, 1, 3, 4, 4, 4, 3,
	2, 4, 0, 1, 0, 2, 0, 1, 1, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 3, 0, 5, 5, 5, 0,
	2, 1, 3, 3, 2, 3, 1, 2, 0, 3,
	1, 1, 3, 3, 4, 4, 5, 3, 4, 5,
	6, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 2, 2, 2, 2, 2,
	3, 1, 1, 1, 1, 5, 6, 4, 4, 3,
	6, 6, 6, 8, 8, 8, 8, 9, 4, 7,
	5, 4, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 8, 8, 0,
	2, 3, 4, 4, 4, 4, 4, 4, 0, 3,
	4, 7, 3, 1, 1, 2, 3, 3, 1, 2,
	2, 1, 2, 1, 2, 2, 1, 2, 0, 1,
	0, 2, 1, 2, 4, 0, 2, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 0, 3, 0, 2, 0, 3, 1, 3, 2,
	0, 1, 1, 0, 2, 4, 4, 0, 2, 4,
	2, 1, 3, 5, 4, 6, 1, 3, 3, 5,
	0, 5, 1, 3, 1, 2, 3, 1, 1, 3,
	3, 3, 3, 3, 1, 2, 1, 1, 1, 1,
	1, 1, 0, 2, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 1, 0, 1, 0, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -231, -1, -2, -6, -7, -8, -9, -10, -12,
	-33, -13, -14, -15, -39, -40, -41, -46, -47, -48,
	-44, -43, -42, -16, -21, -3, -4, 6, 7, -52,
	9, 10, 29, -37, 119, -34, -35, -36, 122, 121,
	158, 123, 151, 53, 194, 195, 197, 198, -236, -154,
	156, 157, 30, 31, 125, 192, -233, 8, 288, 120,
	153, 152, 25, 57, -232, 385, -115, 15, -51, 5,
	-49, -237, -49, -49, -49, -49, -49, -205, -207, 57,
	94, -148, 132, 75, 279, 128, -155, 129, -147, 179,
	34, 139, 138, 129, 129, 130, 132, 279, 128, 166,
	129, -80, -166, 60, -159, 313, 142, 328, 329, 194,
	205, 199, 233, 221, 314, 330, 143, 187, 219, 222,
	266, 141, 180, 331, 253, 261, 190, 69, 197, 275,
	332, 184, 186, 185, 304, 191, 154, 217, 210, 333,
	321, 305, 208, 27, 334, 263, 238, 335, 318, 262,
	306, 209, 125, 336, 145, 139, 337, 239, 243, 338,
	267, 339, 340, 341, 203, 204, 342, 269, 237, 32,
	140, 309, 315, 38, 310, 311, 163, 270, 241, 343,
	236, 231, 344, 345, 346, 347, 235, 202, 230, 182,
	42, 245, 244, 246, 183, 265, 224, 297, 348, 349,
	146, 350, 298, 351, 211, 18, 352, 353, 273, 157,
	354, 355, 356, 357, 161, 358, 300, 359, 360, 264,
	240, 242, 361, 136, 362, 165, 363, 317, 364, 301,
	271, 207, 365, 147, 162, 156, 274, 366, 367, 368,
	369, 148, 370, 371, 372, 198, 302, 188, 373, 374,
	375, 376, 173, 277, 268, 41, 192, 250, 377, 201,
	138, 193, 378, 195, 170, 181, 256, 189, 228, 164,
	379, 380, 215, 216, 234, 200, 229, 196, 166, 167,
	158, 381, 276, 251, 319, 223, 220, 171, 382, 132,
	168, 169, 383, 257, 258, 172, 316, 272, 218, 252,
	129, 112, 222, 266, 119, 254, 255, 263, -199, 264,
	165, -171, 129, -139, 253, 257, 258, 172, 60, 130,
	131, 32, 268, 267, 259, -166, 196, -58, 123, 159,
	-80, -156, -156, -156, 256, 256, -156, -30, 193, -2,
	-137, 132, 258, 134, -123, 17, 16, -5, -3, -233,
	6, 20, 21, -55, 43, 44, -50, -62, 103, -63,
	-166, -87, 77, -92, 28, 60, -159, 23, -91, -88,
	-108, -106, -107, 112, 113, 114, 101, 102, 109, 78,
	115, -97, -95, -96, -98, 62, 61, 70, 63, 64,
	65, 66, 71, 72, 73, -160, -104, -233, 47, 48,
	128, 289, 290, 291, 292, 312, 149, 293, 80, 37,
	278, 287, 286, 285, 283, 284, 280, 282, 281, 295,
	296, 135, 279, 107, 288, -137, -137, 11, -73, -74,
	-80, -82, -166, -130, -170, 196, -133, 268, 267, -108,
	-132, -160, -166, 266, 222, 265, -206, 94, -195, 60,
	-80, 130, -80, 288, -146, 135, -146, 166, -146, 86,
	-38, -80, -145, 135, -160, 60, -159, -145, -145, -145,
	-145, -80, 116, -80, 60, 29, -157, -233, -161, -160,
	-158, 124, 150, 320, 76, 22, 24, 248, 79, 112,
	16, 80, 111, 289, 119, 51, 280, 282, 278, 291,
	292, 279, 254, 28, 10, 25, 152, 21, 105, 121,
	83, 84, 85, 155, 23, 153, 73, 149, 19, 54,
	11, 13, 307, 308, 14, 135, 134, 96, 130, 49,
	8, 115, 26, 93, 45, 324, 35, 325, 47, 94,
	17, 283, 284, 30, 326, 312, 160, 107, 52, 39,
	77, 71, 33, 74, 55, 75, 15, 50, 299, 327,
	95, 122, 288, 48, 128, 6, 294, 29, 151, 46,
	384, 129, 82, 295, 296, 133, 72, 5, 34, 31,
	9, 53, 56, 285, 286, 287, 37, 81, 12, 303,
	279, 128, 60, 165, 129, 166, 132, -157, -157, -201,
	11, 96, -157, 170, 171, -157, -142, -141, 167, 261,
	262, 256, 260, 12, -64, 94, 171, 256, 169, -157,
	-45, -2, -9, -7, -8, -2, 86, -156, -156, 29,
	62, 40, -234, 59, 129, -80, 119, 121, 124, 55,
	-124, 19, 30, -63, -166, -116, -119, -63, -115, -2,
	-49, 39, -53, 20, 21, 68, 11, -120, 76, 75,
	93, 299, 116, -63, -89, 96, 77, 94, 95, 79,
	98, 97, 108, 101, 102, 103, 104, 105, 106, 107,
	99, 100, 111, 86, 87, 88, 89, 90, 91, 92,
	-138, -233, -107, -233, 117, 118, -92, -92, -92, -92,
	-92, -92, -92, -92, -233, -2, -102, -63, -233, -233,
	-233, -233, -233, -233, -233, -233, -233, -233, -233, -111,
	-63, -233, -238, -99, -233, -238, -99, -238, -99, -238,
	-233, -238, -99, -238, -99, -238, -238, -99, -238, -233,
	-233, -233, -233, -233, -233, -81, 26, -80, -66, -67,
	-68, -69, -83, -107, -233, -80, -80, -73, -235, 58,
	11, 56, -235, 58, 116, 58, -130, 196, -131, -134,
	269, 271, 86, -165, -160, 62, 28, 116, 29, 59,
	58, -80, -173, -177, -179, -178, -180, -175, -176, 219,
	222, 226, 224, 220, 225, 112, 223, 228, 229, 230,
	231, 232, 233, 234, 235, 236, 237, 238, 29, 154,
	215, 216, 217, 218, 239, 240, 241, 242, 243, 244,
	245, 246, 199, 221, 314, 200, 201, 202, 203, 204,
	205, 207, 208, 209, 210, 211, 212, 213, -160, 22,
	132, 60, 77, 60, 60, -80, 60, 58, 133, -73,
	23, 55, -75, -80, 60, 60, 60, -167, -166, -158,
	-157, -157, -146, -146, -157, -157, -80, -80, -80, -80,
	-157, -157, 11, -140, 11, 96, -140, -63, -92, -144,
	94, 55, 60, -28, -27, -29, 180, 181, 182, 183,
	184, 185, 186, 187, 188, 189, 190, 191, 62, -80,
	-157, 168, 168, 129, 129, 173, -80, 9, 96, 58,
	18, 116, 58, -122, 24, 25, -123, -234, -55, -93,
	40, 63, 66, -54, 46, -80, -163, -162, 22, -160,
	62, -63, -63, -100, 71, 77, 72, 73, -160, -233,
	103, -167, -161, -158, -92, -101, -104, -107, 67, 96,
	94, 95, 79, -92, -92, -92, -92, -92, -92, -92,
	-92, -92, -92, -92, -92, -92, -92, -92, -169, 60,
	62, 60, -91, -91, -160, -53, -234, 58, -234, -2,
	-60, -62, -60, -234, -63, -63, -108, 62, -60, -108,
	62, -60, -60, -60, -53, -109, -110, 81, -108, -234,
	-92, -160, -160, -60, -61, -60, -60, -60, -127, 161,
	-80, 29, 58, -76, -78, -77, -79, 45, 49, 51,
	46, 47, 48, 52, -152, 22, -66, -233, -84, 161,
	-85, 22, -168, 53, 134, 54, -166, 62, -127, 56,
	-66, -80, -66, -82, -166, 103, -133, -131, 58, 270,
	272, 273, 55, 74, -63, -186, 111, -161, -167, -208,
	-209, -210, -161, 62, 63, -195, -196, -197, -211, 144,
	-217, 136, 138, 34, -198, 145, 130, 35, 59, -174,
	-187, 251, -181, 57, -181, -181, 227, 219, 222, 220,
	-181, -181, -181, -181, -181, -185, 222, -185, -185, -185,
	-185, 220, 57, 57, -181, -181, -181, -189, 57, -189,
	214, -189, -190, 57, -190, -190, -190, -164, 56, -121,
	-80, -157, 23, -157, -31, 176, 150, -80, -80, -80,
	58, 60, 60, -202, 11, 96, -80, -94, 22, -166,
	-166, -143, 94, 12, -59, 155, 62, -80, 58, 86,
	-149, 124, 121, 122, 126, 127, -220, 248, 120, 222,
	69, 28, 15, 289, 161, 319, 60, 162, -80, -80,
	-80, -80, -80, 124, 121, 41, -63, -63, -119, -124,
	-136, 19, 11, 37, 37, -60, -162, 71, 72, 73,
	-115, 161, 116, -233, -101, -92, -92, -92, -59, 76,
	-234, -61, -63, -234, 58, -234, -234, 58, 56, 22,
	11, 11, -234, 11, 11, -234, -234, -234, -60, -112,
	-110, 83, -63, -234, -234, 58, 58, -234, -234, -234,
	-234, -90, 29, 37, -2, -233, -233, -130, -67, -68,
	-68, -67, -68, 45, 45, 45, 50, 45, 50, 45,
	-77, -166, -234, -233, 33, -168, -85, 130, 130, 130,
	-86, 12, -66, -86, -86, 116, -134, -135, 274, 271,
	277, 60, 62, 116, 58, -210, 86, 57, 60, 35,
	-198, -198, -203, 60, -203, 35, -191, -183, -184, -192,
	-193, -182, 71, 77, 28, 55, 248, 136, 35, 34,
	69, -188, 252, 63, -185, -185, -181, -181, -181, 227,
	-181, -185, -186, 29, -186, -186, -186, -186, -185, -194,
	62, -194, 63, -189, 63, 55, -160, -2, 22, -32,
	8, 9, 10, 133, -157, -80, -157, -157, -86, 60,
	60, -140, -143, 33, 62, -63, -92, -27, -91, -156,
	-153, -226, -198, -230, -197, 137, 141, 144, 145, 136,
	161, -153, -226, 144, -198, 145, 137, -150, -198, 133,
	22, -153, -153, -204, 86, 161, -225, 56, 168, 248,
	168, 42, -80, -65, 11, -234, 16, 103, -161, -61,
	-59, 76, -92, -234, -62, -172, 112, 219, 154, 217,
	210, 237, 224, 250, 215, 251, -169, -172, -92, -92,
	-92, -92, 313, -115, 85, -63, 82, -92, -92, -129,
	55, -130, -103, -105, -104, -233, -2, -125, -160, -128,
	-160, -86, -71, -70, 55, 56, -72, 55, -70, 45,
	45, -128, -92, -85, -233, -233, -233, -115, -63, -86,
	271, 275, 276, -209, -210, -213, -212, -160, -217, -203,
	-203, 57, 71, -92, 9, 35, 35, 62, 59, -186,
	-186, -185, -181, -186, 60, 112, -186, 59, 58, 59,
	58, 59, 58, -80, -121, -121, 55, -80, -143, -92,
	57, -195, -156, -203, -147, 60, 60, -156, 60, -160,
	35, 60, -80, -160, -195, 60, -63, -160, -223, 316,
	-224, 60, -160, -160, -160, -86, -66, -102, -234, -92,
	-234, -181, -181, -181, -190, -181, 204, -181, 204, -234,
	-234, 19, 19, 19, 19, -233, -57, 294, -63, 58,
	58, 27, -129, 58, -234, -234, -234, 58, 116, -234,
	58, -115, -63, 57, -63, -234, -85, -152, -126, -160,
	-126, -126, -123, 59, 58, -181, -126, -96, -186, -185,
	62, -185, 63, 63, 57, -2, -80, -195, -117, 149,
	150, -164, -200, -198, 60, -151, 133, 22, 133, -117,
	-195, 26, -222, -221, -161, 57, 56, -113, 13, -115,
	-185, 60, -92, -92, -92, -92, -92, -234, 62, -92,
	-92, 35, -105, 37, -2, -233, -160, -160, -160, -123,
	-126, -84, -168, 58, -234, -234, -234, -215, -214, 56,
	140, 69, -212, -122, 59, -186, -186, 59, 59, -213,
	-121, 19, 59, -156, 60, 57, -203, 60, -160, -156,
	-117, -233, 58, 86, -126, -80, -114, 14, 16, -234,
	-234, -234, -234, -234, -56, 96, 316, -234, -234, 9,
	-103, -2, 116, 59, -85, -160, -214, 60, -204, 62,
	147, 59, 174, -156, -213, -164, -156, -218, -219, 161,
	-221, -210, 59, -63, -102, -234, 314, 52, 317, -130,
	-234, -160, 63, -80, -216, -215, 175, 59, 57, -234,
	58, -160, -225, 42, 315, 318, 57, -118, 177, 178,
	-216, -213, -219, 37, -223, 42, -126, -121, 60, 60,
	59, 163, 316, 59, -11, -17, -10, -7, -8, -9,
	194, -216, 164, 317, -228, -229, 55, -121, -22, -18,
	-2, -7, -8, -9, -10, -19, -20, -21, -17, 80,
	135, -233, 318, -229, 55, -228, 55, 10, 9, 385,
	-63, -63, -92, 160, -227, 148, 143, 146, 29, -227,
	85, -18, -23, -24, 81, 82, -234, -234, 142, 28,
	71, 85, 83, -24, -63, -22, 80, -22, 82, 385,
	385, -22, 85, 83, -25, -26, 84, 85, 385, 135,
	-22, 85, 83, -26, -63, 80, 385, 135, -22, 82,
	85, 385, -22, 135, 85, 385, 135,
}
var yyDef = [...]int{

	26, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 695, 0, 441, 441, 441,
	441, 441, 441, 0, -2, 309, 310, 311, 0, 0,
	0, 0, -2, 417, 418, 0, 420, 421, 430, -2,
	1083, 1083, 0, 0, 1083, 0, 0, 38, 39, 746,
	433, 422, 423, 1081, 1, 3, 703, 0, 0, 445,
	448, 443, 0, 746, 746, 0, 0, 71, 72, 0,
	0, 0, 0, 0, 744, 744, 0, 744, 766, 0,
	762, 763, 764, 0, 742, 0, 742, 742, 742, 742,
	0, 365, 522, 773, 774, 886, 887, 888, 889, 890,
	891, 892, 893, 894, 895, 896, 897, 898, 899, 900,
	901, 902, 903, 904, 905, 906, 907, 908, 909, 910,
	911, 912, 913, 914, 915, 916, 917, 918, 919, 920,
	921, 922, 923, 924, 925, 926, 927, 928, 929, 930,
	931, 932, 933, 934, 935, 936, 937, 938, 939, 940,
	941, 942, 943, 944, 945, 946, 947, 948, 949, 950,
	951, 952, 953, 954, 955, 956, 957, 958, 959, 960,
	961, 962, 963, 964, 965, 966, 967, 968, 969, 970,
	971, 972, 973, 974, 975, 976, 977, 978, 979, 980,
	981, 982, 983, 984, 985, 986, 987, 988, 989, 990,
	991, 992, 993, 994, 995, 996, 997, 998, 999, 1000,
	1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010,
	1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020,
	1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030,
	1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040,
	1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050,
	1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060,
	1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070,
	1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080,
	0, 0, 0, 1084, 0, 1084, 1084, 379, 0, 381,
	1084, 0, 1084, 0, 389, 0, 0, 396, 1084, 267,
	268, 269, 414, 415, 402, 416, 419, 0, 0, 0,
	434, 435, 436, 437, 1083, 1083, 440, 107, 0, 32,
	0, 0, 0, 747, 707, 0, 0, 695, 34, 0,
	441, 446, 447, 451, 449, 450, 442, 0, 460, 464,
	0, 531, 0, 536, 538, -2, -2, 0, 573, 574,
	575, 576, 577, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 602, 603, 604, 680, 681, 682, 683, 684,
	685, 686, 687, 540, 541, 677, 727, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 668, 0,
	639, 639, 639, 639, 639, 639, 639, 639, 639, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	49, 51, 522, 55, 0, 1058, 728, -2, -2, 0,
	0, 677, 0, -2, 900, -2, 0, 0, 149, 0,
	147, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 769, 770, 0, 0, 0,
	0, 364, 0, 366, 1084, 1084, 369, 1085, 1086, 771,
	772, 777, 778, 779, 780, 781, 782, 783, 784, 785,
	786, 787, 788, 789, 790, 791, 792, 793, 794, 795,
	796, 797, 798, 799, 800, 801, 802, 803, 804, 805,
	806, 807, 808, 809, 810, 811, 812, 813, 814, 815,
	816, 817, 818, 819, 820, 821, 822, 823, 824, 825,
	826, 827, 828, 829, 830, 831, 832, 833, 834, 835,
	836, 837, 838, 839, 840, 841, 842, 843, 844, 845,
	846, 847, 848, 849, 850, 851, 852, 853, 854, 855,
	856, 857, 858, 859, 860, 861, 862, 863, 864, 865,
	866, 867, 868, 869, 870, 871, 872, 873, 874, 875,
	876, 877, 878, 879, 880, 881, 882, 883, 884, 885,
	744, 744, 1084, 1084, 0, 0, 0, 377, 378, 0,
	286, 287, 382, 1084, 1084, 384, 0, 405, 405, 403,
	404, 399, 400, 0, 391, 0, 411, 393, 394, 397,
	424, -2, 427, 428, 429, -2, 0, 438, 439, 0,
	109, 0, 33, 1082, 0, 1084, 0, 0, 0, 0,
	27, 0, 0, 704, 0, 696, 697, 700, 703, 32,
	448, 0, 454, 452, 453, 444, 0, 468, 0, 0,
	0, 0, 0, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 558, 559, 560, 561, 562, 563, 564,
	537, 0, 551, 0, 0, 0, 593, 594, 595, 596,
	597, 598, 599, 0, 451, 32, 0, 571, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 451, 0,
	669, 0, 622, 631, 0, 623, 632, 624, 633, 625,
	0, 626, 634, 627, 635, 628, 629, 636, 630, 0,
	0, 0, 456, 0, 0, 53, 0, 521, 0, 475,
	477, 478, 479, -2, 0, 525, -2, 0, 0, 0,
	45, 46, 0, 0, 0, 0, 56, 1058, 58, 59,
	0, 0, 0, 243, 737, 738, 739, 0, 735, 298,
	0, 0, 154, 231, 162, 163, 164, 224, 166, 224,
	224, 0, 224, 224, 224, 224, 224, 240, 240, 240,
	240, 240, 207, 208, 209, 210, 211, 0, 0, 184,
	224, 224, 224, 188, 214, 215, 216, 217, 218, 219,
	220, 221, 167, 168, 169, 170, 171, 172, 173, 174,
	175, 226, 226, 226, 228, 228, 228, 228, 767, 70,
	0, 1084, 0, 1084, 0, 145, 80, 0, 0, 358,
	743, 0, 360, 47, 361, 362, 363, 523, 775, 776,
	367, 368, 0, 0, 372, 373, 374, 375, 376, 288,
	383, 388, 0, 490, 0, 0, 408, 390, 565, 392,
	0, 0, 431, 108, 111, 0, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 110, 0,
	334, 0, 0, 0, 0, 0, 0, 708, 0, 0,
	0, 0, 0, 699, 701, 702, 707, 35, 451, 0,
	688, 0, 0, 0, 455, 30, 461, 469, 0, 471,
	472, 532, 533, 535, 552, 0, 554, 556, 465, 695,
	462, 0, 678, -2, 542, 543, 567, 568, 569, 0,
	0, 0, 0, 565, 547, 0, 578, 579, 580, 581,
	582, 583, 584, 585, 586, 587, 588, 589, 592, 653,
	654, 0, 590, 591, 600, 456, 570, 0, 726, 32,
	0, 458, 0, 609, 0, 0, 575, 680, 0, 575,
	680, 0, 0, 0, 0, 675, 672, 0, 0, 640,
	0, 0, 0, 0, 0, 457, 0, 0, 0, 0,
	520, 0, 0, 0, 0, 0, 0, 510, 0, 0,
	513, 0, 0, 0, 0, 507, 0, 0, 483, 995,
	485, 0, 525, 0, 0, 0, 508, 509, 529, 0,
	529, 50, 529, 52, 0, 524, 729, 57, 0, 0,
	62, 63, 730, 731, 732, 733, 0, 678, 0, 146,
	299, 301, 304, 305, 306, 150, 151, 152, 0, 0,
	280, 0, 0, 274, 274, 0, 270, 271, 148, 153,
	233, 232, 165, 0, 240, 240, 224, 224, 224, 224,
	193, 240, 196, 199, 200, 243, 0, 243, 243, 243,
	243, 240, 0, 0, 185, 186, 187, 176, 0, 177,
	226, 179, 180, 0, 181, 182, 183, 0, 0, 0,
	0, 76, 745, 77, 0, 81, 82, 0, 356, 1084,
	0, 1084, 1084, 529, 0, 0, 405, 408, 0, 406,
	407, 387, 0, 0, 398, 0, 412, 395, 0, 0,
	1083, -2, 343, 759, 343, 343, 327, 260, 748, 749,
	750, 751, 752, 753, 754, 755, 756, 0, 137, 336,
	338, 337, 341, 0, 0, 0, 705, 706, 698, 28,
	0, 740, 741, 689, 690, 473, 470, 553, 555, 557,
	0, 0, 0, 456, 544, 565, 548, 0, 545, 0,
	539, 0, 572, -2, 0, 607, 608, 0, 0, 0,
	0, 0, 646, 0, 0, 647, 0, 618, 695, 0,
	673, 0, 0, 621, 641, 0, 0, 642, 643, 644,
	645, 720, 0, 0, -2, 0, 0, 529, 476, 502,
	504, 0, 499, 511, 512, 514, 0, 516, 0, 518,
	519, 480, 482, 0, 0, 525, 489, 0, 0, 0,
	695, 0, 529, 43, 44, 0, 60, 61, 0, 0,
	67, 244, 245, 0, 0, 302, 0, 0, 0, 262,
	274, 274, 265, 275, 266, 0, 155, 156, 157, 158,
	159, 160, 235, 0, 0, 0, 239, 0, 247, 249,
	0, 161, 234, 0, 243, 243, 240, 191, 192, 224,
	197, 243, 201, 0, 202, 203, 204, 205, 243, 0,
	222, 0, 0, 178, 0, 0, 768, -2, 70, 0,
	83, 84, 85, 0, 359, 48, 370, 371, 380, 289,
	290, 408, 386, 0, 409, 410, 566, 112, 113, 312,
	0, 1083, 274, 0, 328, 344, 345, 346, 347, 348,
	349, 0, 1083, 346, 0, 347, 0, 0, 0, 760,
	761, 0, 0, 0, 261, 0, 140, 0, 0, 0,
	0, 709, 29, 529, 0, 466, 0, 463, 679, 0,
	546, 0, 549, 605, 459, 0, 224, 224, 658, 224,
	228, 661, 224, 663, 224, 666, 0, 0, 0, 0,
	0, 0, 0, 670, 620, 676, 0, 0, 0, 36,
	0, 720, 710, 722, 724, 0, 32, 0, 716, 0,
	494, 695, 496, 503, 0, 0, 497, 0, 498, 515,
	517, 0, -2, 488, 0, 0, 0, 703, 530, 42,
	64, 65, 66, 300, 303, 0, 276, 224, 279, 263,
	264, 0, 236, 237, 0, 246, 248, 250, 225, 189,
	190, 243, 198, 194, 241, 242, 206, 240, 0, 240,
	0, 229, 0, 0, 74, 0, 0, 357, 385, 491,
	0, 331, 315, 767, 272, 308, 316, 317, 322, 323,
	0, 0, 319, 0, 331, 0, 330, 0, 335, 0,
	138, 139, 0, 0, 340, 691, 474, 695, 606, 550,
	610, 655, 240, 659, 660, 662, 664, 665, 667, 612,
	611, 0, 0, 0, 0, 0, 0, 0, 674, 0,
	0, 0, 37, 0, 725, -2, 0, 0, 0, 54,
	0, 703, 500, 0, 505, 525, 486, 0, 0, 492,
	0, 0, 41, 252, 0, 700, 0, 238, 195, 243,
	223, 243, 0, 0, 0, -2, 0, 0, 1083, 332,
	0, 0, 274, 273, 329, 0, 757, 758, 0, 1083,
	331, 0, 141, 142, 0, 0, 0, 693, 0, 0,
	656, 657, 0, 0, 0, 0, 648, 619, 671, 0,
	0, 0, 723, 0, -2, 0, 718, 717, 495, 40,
	0, 484, 525, 0, 526, 527, 528, 251, 255, 0,
	260, 0, 277, 278, 0, 212, 213, 227, 230, 0,
	75, 0, 1083, 314, 333, 0, 767, 318, 324, 325,
	1083, 0, 0, 0, 0, 342, 31, 0, 0, 467,
	613, 615, 614, 616, 0, 0, 0, 637, 638, 0,
	713, 32, 0, 501, 487, 493, 256, 257, 0, 259,
	0, 253, 0, 313, 0, 0, 326, 0, 351, 0,
	143, 144, 137, 694, 692, 617, 0, 0, 0, 721,
	-2, 719, 258, 0, 73, 254, 86, 253, 0, 350,
	0, 0, 140, 649, 0, 652, 0, 70, 0, 0,
	320, 0, 352, 0, 339, 650, 0, 0, 87, 88,
	253, 0, 0, 281, 70, 89, 90, 91, 92, 93,
	0, 321, 0, 0, 282, 283, 0, 78, 0, 126,
	-2, 129, 130, 131, 132, 133, 134, 135, 136, 0,
	0, 0, 651, 284, 0, 285, 0, 0, 0, 0,
	0, 0, 0, 0, 291, 293, 294, 0, 0, 292,
	94, 127, 0, 97, 0, 0, 353, 354, 295, 296,
	297, 0, 0, 98, 0, 0, 95, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 0, 0, 99, 100,
	0, 0, 0, 105, 0, 96, 0, 102, 0, 0,
	0, 0, 0, 101, 0, 106, 103,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 78, 3, 3, 3, 106, 98, 3,
	57, 59, 103, 101, 58, 102, 116, 104, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 385,
	87, 86, 88, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 108, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 97, 3, 109,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 79, 80, 81, 82, 83, 84, 85,
	89, 90, 91, 92, 93, 94, 95, 96, 99, 100,
	105, 107, 110, 111, 112, 113, 114, 115, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:365
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:370
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:371
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:375
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 26:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:400
		{
			setParseTree(yylex, nil)
		}
	case 27:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:406
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 28:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:414
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 29:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:418
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 30:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:424
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 31:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:431
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:437
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:441
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:447
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:451
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:458
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].setExprs)
			yyVAL.statement = ins
		}
	case 37:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:470
		{
			cols := make(Columns, 0, len(yyDollar[7].setExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].setExprs))
			for _, updateList := range yyDollar[7].setExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].setExprs)}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:482
		{
			yyVAL.str = InsertStr
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:486
		{
			yyVAL.str = ReplaceStr
		}
	case 40:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:492
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].setExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 41:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:498
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 42:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:502
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:506
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 44:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:510
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:515
		{
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:516
		{
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:520
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName.ToViewName()}
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:524
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName.ToViewName())
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:530
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:534
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:540
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:544
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:549
		{
			yyVAL.partitions = nil
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:553
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:559
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:563
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:567
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 58:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:571
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:577
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:581
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:587
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:591
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:595
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:601
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:605
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:609
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:613
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:619
		{
			yyVAL.str = SessionStr
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:623
		{
			yyVAL.str = GlobalStr
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:628
		{
			yyVAL.int = yyPosition(yylex)
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:634
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			if len(yyDollar[1].ddl.TableSpec.Constraints) > 0 {
				yyDollar[1].ddl.ConstraintAction = AddStr
			}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:642
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 73:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:648
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: yyDollar[4].colIdent, Using: yyDollar[5].colIdent, Type: yyDollar[2].str, Columns: yyDollar[9].indexColumns, Options: yyDollar[11].indexOptions}}
		}
	case 74:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:652
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[3].tableName.ToViewName(), ViewExpr: yyDollar[6].selStmt, SubStatementPositionStart: yyDollar[5].int, SubStatementPositionEnd: yyDollar[7].int - 1}
		}
	case 75:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:656
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[5].tableName.ToViewName(), ViewExpr: yyDollar[8].selStmt, SubStatementPositionStart: yyDollar[7].int, SubStatementPositionEnd: yyDollar[9].int - 1, OrReplace: true}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:660
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 77:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:664
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 78:
		yyDollar = yyS[yypt-15 : yypt+1]
//line sql.y:668
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[8].tableName, TriggerSpec: &TriggerSpec{Name: string(yyDollar[4].bytes), Time: yyDollar[5].str, Event: yyDollar[6].str, Order: yyDollar[12].triggerOrder, Body: yyDollar[14].statement}, SubStatementPositionStart: yyDollar[13].int, SubStatementPositionEnd: yyDollar[15].int - 1}
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:673
		{
			yyVAL.empty = struct{}{}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:677
		{
			yyVAL.empty = struct{}{}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:683
		{
			yyVAL.str = BeforeStr
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:687
		{
			yyVAL.str = AfterStr
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:693
		{
			yyVAL.str = InsertStr
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:697
		{
			yyVAL.str = UpdateStr
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:701
		{
			yyVAL.str = DeleteStr
		}
	case 86:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:706
		{
			yyVAL.triggerOrder = nil
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:710
		{
			yyVAL.triggerOrder = &TriggerOrder{PrecedesOrFollows: FollowsStr, OtherTriggerName: string(yyDollar[2].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:714
		{
			yyVAL.triggerOrder = &TriggerOrder{PrecedesOrFollows: PrecedesStr, OtherTriggerName: string(yyDollar[2].bytes)}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:720
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:730
		{
			yyVAL.statement = &BeginEndBlock{Statements: yyDollar[2].statements}
		}
	case 95:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:736
		{
			yyVAL.statement = &CaseStatement{Expr: yyDollar[2].expr, Cases: yyDollar[3].caseStatementCases}
		}
	case 96:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:740
		{
			yyVAL.statement = &CaseStatement{Expr: yyDollar[2].expr, Cases: yyDollar[3].caseStatementCases, Else: yyDollar[5].statements}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:746
		{
			yyVAL.caseStatementCases = []CaseStatementCase{yyDollar[1].caseStatementCase}
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:750
		{
			yyVAL.caseStatementCases = append(yyVAL.caseStatementCases, yyDollar[2].caseStatementCase)
		}
	case 99:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:756
		{
			yyVAL.caseStatementCase = CaseStatementCase{Case: yyDollar[2].expr, Statements: yyDollar[4].statements}
		}
	case 100:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:762
		{
			conds := []IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}
			yyVAL.statement = &IfStatement{Conditions: conds}
		}
	case 101:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:767
		{
			conds := []IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}
			yyVAL.statement = &IfStatement{Conditions: conds, Else: yyDollar[7].statements}
		}
	case 102:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:772
		{
			conds := yyDollar[6].ifStatementConditions
			conds = append([]IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}, conds...)
			yyVAL.statement = &IfStatement{Conditions: conds}
		}
	case 103:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:778
		{
			conds := yyDollar[6].ifStatementConditions
			conds = append([]IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}, conds...)
			yyVAL.statement = &IfStatement{Conditions: conds, Else: yyDollar[8].statements}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:786
		{
			yyVAL.ifStatementConditions = []IfStatementCondition{yyDollar[1].ifStatementCondition}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:790
		{
			yyVAL.ifStatementConditions = append(yyVAL.ifStatementConditions, yyDollar[2].ifStatementCondition)
		}
	case 106:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:796
		{
			yyVAL.ifStatementCondition = IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:802
		{
			yyVAL.statement = &Signal{SqlStateValue: string(yyDollar[2].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:806
		{
			yyVAL.statement = &Signal{SqlStateValue: string(yyDollar[2].bytes), Info: yyDollar[4].signalInfos}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:812
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:816
		{
			yyVAL.bytes = yyDollar[3].bytes
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:822
		{
			yyVAL.signalInfos = []SignalInfo{yyDollar[1].signalInfo}
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:826
		{
			yyVAL.signalInfos = append(yyVAL.signalInfos, yyDollar[3].signalInfo)
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:832
		{
			yyVAL.signalInfo = SignalInfo{Name: string(yyDollar[1].bytes), Value: yyDollar[3].expr.(*SQLVal)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:838
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:855
		{
			yyVAL.statements = Statements{yyDollar[1].statement}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:859
		{
			yyVAL.statements = append(yyVAL.statements, yyDollar[3].statement)
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:865
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:878
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:882
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:888
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:893
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:898
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:904
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:909
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:915
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 145:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:921
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName, IfNotExists: ne}
			setDDL(yylex, yyVAL.ddl)
		}
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:932
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:939
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:943
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:949
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:954
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:958
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:962
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:968
		{
			if err := yyDollar[2].columnType.merge(yyDollar[3].columnType); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:977
		{
			yyVAL.columnType = ColumnType{}
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:981
		{
			opt := ColumnType{NotNull: yyDollar[2].boolVal, sawnull: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:990
		{
			opt := ColumnType{Default: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:999
		{
			opt := ColumnType{OnUpdate: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1008
		{
			opt := ColumnType{Autoincrement: yyDollar[2].boolVal, sawai: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1017
		{
			opt := ColumnType{KeyOpt: yyDollar[2].colKeyOpt}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1026
		{
			opt := ColumnType{Comment: yyDollar[2].sqlVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1037
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1048
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1053
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1059
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1063
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1067
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1071
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1075
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1079
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1083
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1087
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1091
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1097
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1103
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1109
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1115
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1121
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1127
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1133
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1139
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1147
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1151
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1155
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1159
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1163
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 189:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1169
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 190:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1173
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1177
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1181
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1185
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 194:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1189
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 195:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1193
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1197
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1201
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 198:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1205
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Length: yyDollar[4].sqlVal}
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1209
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1213
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1217
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1221
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1225
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1229
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1233
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 206:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1237
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1241
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1245
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1249
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1253
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1257
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 212:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1261
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 213:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1266
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1272
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1276
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1280
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1284
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1288
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1292
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1296
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1300
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1306
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[1].bytes))
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1311
		{
			yyVAL.strs = append(yyDollar[1].strs, string(yyDollar[3].bytes))
		}
	case 224:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1316
		{
			yyVAL.sqlVal = nil
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1320
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 226:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1325
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 227:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1329
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 228:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1337
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1341
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 230:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1347
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 231:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1355
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1359
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 233:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1364
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1368
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1375
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1379
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1385
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1391
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1397
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 240:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1402
		{
			yyVAL.str = ""
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1406
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1410
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 243:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1415
		{
			yyVAL.str = ""
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1419
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1423
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1429
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1433
		{
			yyVAL.colKeyOpt = colKey
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1437
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1441
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1447
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 251:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1453
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1457
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 253:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1462
		{
			yyVAL.indexOptions = nil
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1466
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1472
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1476
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1482
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1486
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1491
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1497
		{
			yyVAL.str = ""
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1501
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1507
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1511
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1515
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1519
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1523
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1529
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1533
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1537
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1543
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1547
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 272:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1552
		{
			yyVAL.str = ""
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1556
		{
			yyVAL.str = yyDollar[1].str
		}
	case 274:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1561
		{
			yyVAL.str = ""
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1565
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1571
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1575
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1581
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal, Order: yyDollar[3].str}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1587
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1591
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 281:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1598
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 282:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1602
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 283:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1606
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 284:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1610
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 285:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1614
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[12].ReferenceAction, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1620
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1624
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1629
		{
			yyVAL.str = ""
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1633
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1637
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1643
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1649
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1655
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1659
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1663
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1667
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1671
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1676
		{
			yyVAL.str = ""
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1680
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1684
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1692
		{
			yyVAL.str = yyDollar[1].str
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1696
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1700
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1706
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1710
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1714
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1719
		{
			yyVAL.str = ""
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1723
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 312:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1734
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 313:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1738
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			ddl.Column = yyDollar[8].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 314:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1745
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 315:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1752
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 316:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1756
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: DropStr, Column: NewColIdent(string(yyDollar[7].bytes)), Table: yyDollar[4].tableName}
		}
	case 317:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1760
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 318:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1764
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: RenameStr, Table: yyDollar[4].tableName, Column: NewColIdent(string(yyDollar[7].bytes)), ToColumn: NewColIdent(string(yyDollar[9].bytes))}
		}
	case 319:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1768
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 320:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1773
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[7].str), Using: yyDollar[8].colIdent, Columns: yyDollar[10].indexColumns, Options: yyDollar[12].indexOptions}}
		}
	case 321:
		yyDollar = yyS[yypt-14 : yypt+1]
//line sql.y:1777
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[9].str), Type: yyDollar[7].str, Using: yyDollar[10].colIdent, Columns: yyDollar[12].indexColumns, Options: yyDollar[14].indexOptions}}
		}
	case 322:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1781
		{
			yyVAL.statement = &DDL{Action: AlterStr, ConstraintAction: DropStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[7].bytes)}}}}
		}
	case 323:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1786
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[7].colIdent}}
		}
	case 324:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1790
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: RenameStr, FromName: yyDollar[7].colIdent, ToName: yyDollar[9].colIdent}}
		}
	case 325:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1794
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ModifyStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 326:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1801
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ChangeStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, Column: NewColIdent(string(yyDollar[7].bytes)), ColumnOrder: yyDollar[9].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			yyVAL.statement = ddl
		}
	case 327:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1807
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 328:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1811
		{
			ddl := &DDL{Action: AlterStr, ConstraintAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddConstraint(yyDollar[6].constraintDefinition)
			yyVAL.statement = ddl
		}
	case 329:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1817
		{
			yyVAL.statement = &DDL{Action: AlterStr, ConstraintAction: DropStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[8].bytes), Details: &ForeignKeyDefinition{}}}}}
		}
	case 330:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1822
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, AutoIncSpec: &AutoIncSpec{Value: yyDollar[7].expr}}
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1827
		{
			yyVAL.columnOrder = nil
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1831
		{
			yyVAL.columnOrder = &ColumnOrder{First: true}
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1835
		{
			yyVAL.columnOrder = &ColumnOrder{AfterColumn: NewColIdent(string(yyDollar[2].bytes))}
		}
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1841
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 335:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1847
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 336:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1859
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 337:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1869
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 338:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1873
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 339:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1877
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 340:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1890
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 341:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1900
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 342:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1904
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1917
		{
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1919
		{
		}
	case 350:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1930
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1936
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1940
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 353:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1946
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 354:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1950
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1956
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1962
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 357:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1966
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 358:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1974
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 359:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1982
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[3].colIdent}}
		}
	case 360:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1986
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromViews: yyDollar[4].tableNames, IfExists: exists}
		}
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1994
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 362:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1998
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2002
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, TriggerSpec: &TriggerSpec{Name: string(yyDollar[4].bytes)}, IfExists: exists}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2012
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2016
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2021
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 367:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2027
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 368:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2032
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2036
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 370:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2040
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 371:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2044
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 372:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2049
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 373:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2053
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2057
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 375:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2061
		{
			yyVAL.statement = &Show{Type: CreateTriggerStr, Table: yyDollar[4].tableName}
		}
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2065
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2069
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2073
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2077
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 380:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2081
		{
			yyVAL.statement = &Show{Type: IndexStr, Table: yyDollar[4].tableName, Database: yyDollar[5].str, ShowIndexFilterOpt: yyDollar[6].expr}
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2085
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2089
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 383:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2093
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2097
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 385:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2101
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 386:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2106
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[6].showFilter, AsOf: yyDollar[5].expr}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 387:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2116
		{
			yyVAL.statement = &Show{Type: string(yyDollar[3].bytes), ShowTablesOpt: &ShowTablesOpt{DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}}
		}
	case 388:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2120
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2124
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 390:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2128
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2134
		{
			// Cannot dereference $3 directly, or else the parser stackcannot be pooled. See yyParsePooled
			cmp := yyDollar[3].expr.(*ComparisonExpr)
			cmp.Left = &ColName{Name: NewColIdent("collation")}
			var ex Expr = cmp
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &ex}
		}
	case 392:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2142
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2147
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2151
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 395:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2155
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2159
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2173
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2179
		{
			yyVAL.expr = &ComparisonExpr{Operator: LikeStr, Right: yyDollar[2].expr, Escape: yyDollar[3].expr}
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2185
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2189
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 401:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2195
		{
			yyVAL.str = ""
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2199
		{
			yyVAL.str = "full "
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2205
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2209
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 405:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2215
		{
			yyVAL.str = ""
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2219
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2223
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 408:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2229
		{
			yyVAL.showFilter = nil
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2233
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2237
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 411:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2243
		{
			yyVAL.showFilter = nil
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2247
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 413:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2253
		{
			yyVAL.str = ""
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2257
		{
			yyVAL.str = SessionStr
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2261
		{
			yyVAL.str = GlobalStr
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2267
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2271
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2277
		{
			yyVAL.statement = &Begin{}
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2281
		{
			yyVAL.statement = &Begin{}
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2287
		{
			yyVAL.statement = &Commit{}
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2293
		{
			yyVAL.statement = &Rollback{}
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2298
		{
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2299
		{
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2303
		{
			yyVAL.statement = &Explain{ExplainFormat: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2307
		{
			yyVAL.statement = &Explain{Analyze: true, ExplainFormat: TreeStr, Statement: yyDollar[3].selStmt}
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2313
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2321
		{
			yyVAL.str = ""
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2325
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2336
		{
			yyVAL.statement = &Show{Type: "columns", OnTable: yyDollar[2].tableName}
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2340
		{
			yyVAL.statement = &OtherRead{}
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2346
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2350
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2354
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2358
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2364
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 441:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2368
		{
			setAllowComments(yylex, true)
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2372
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 443:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2378
		{
			yyVAL.bytes2 = nil
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2382
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2388
		{
			yyVAL.str = UnionStr
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2392
		{
			yyVAL.str = UnionAllStr
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2396
		{
			yyVAL.str = UnionDistinctStr
		}
	case 448:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2401
		{
			yyVAL.str = ""
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2405
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2409
		{
			yyVAL.str = SQLCacheStr
		}
	case 451:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2414
		{
			yyVAL.str = ""
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2418
		{
			yyVAL.str = ""
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2422
		{
			yyVAL.str = DistinctStr
		}
	case 454:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2427
		{
			yyVAL.str = ""
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2431
		{
			yyVAL.str = StraightJoinHint
		}
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2436
		{
			yyVAL.selectExprs = nil
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2440
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2446
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2450
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2456
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2460
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, Over: yyDollar[2].over, As: yyDollar[3].colIdent}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2464
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 463:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2468
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 464:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2474
		{
			yyVAL.over = nil
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2478
		{
			yyVAL.over = &Over{WindowName: yyDollar[2].colIdent}
		}
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2482
		{
			yyVAL.over = &Over{OrderBy: yyDollar[3].orderBy}
		}
	case 467:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2486
		{
			yyVAL.over = &Over{PartitionBy: yyDollar[5].exprs, OrderBy: yyDollar[6].orderBy}
		}
	case 468:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2491
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2495
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2499
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2506
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 473:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2511
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2515
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2521
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2525
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2535
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2539
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2543
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2549
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2555
		{
			yyVAL.aliasedTableName = yyDollar[2].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
		}
	case 484:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2560
		{
			yyVAL.aliasedTableName = yyDollar[6].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
			yyVAL.aliasedTableName.Partitions = yyDollar[4].partitions
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2571
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Hints: yyDollar[1].indexHints}
		}
	case 486:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2575
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, Hints: yyDollar[4].indexHints}
		}
	case 487:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2579
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, As: yyDollar[5].tableIdent, Hints: yyDollar[6].indexHints}
		}
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2583
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2587
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[1].tableIdent, Hints: yyDollar[2].indexHints}
		}
	case 490:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2598
		{
			yyVAL.expr = nil
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2602
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2608
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2612
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2618
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2622
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 496:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2635
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 497:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2639
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 498:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2643
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2647
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2653
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 501:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2655
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 502:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2659
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2661
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 504:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2665
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2667
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 506:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2670
		{
			yyVAL.empty = struct{}{}
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2672
		{
			yyVAL.empty = struct{}{}
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2677
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2683
		{
			yyVAL.str = JoinStr
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2687
		{
			yyVAL.str = JoinStr
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2691
		{
			yyVAL.str = JoinStr
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2697
		{
			yyVAL.str = StraightJoinStr
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2703
		{
			yyVAL.str = LeftJoinStr
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2707
		{
			yyVAL.str = LeftJoinStr
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2711
		{
			yyVAL.str = RightJoinStr
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2715
		{
			yyVAL.str = RightJoinStr
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2721
		{
			yyVAL.str = NaturalJoinStr
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2725
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2735
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2739
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2745
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2749
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2755
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 525:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2760
		{
			yyVAL.indexHints = nil
		}
	case 526:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2764
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 527:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2768
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 528:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2772
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 529:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2777
		{
			yyVAL.expr = nil
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2781
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2787
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2791
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2795
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2799
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2803
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2807
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2811
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2817
		{
			yyVAL.str = ""
		}
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2821
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2827
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2831
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2837
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2841
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 544:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2845
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 545:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2849
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 546:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2853
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2857
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 548:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2861
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 549:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2865
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 550:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2869
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2873
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2879
		{
			yyVAL.str = IsNullStr
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2883
		{
			yyVAL.str = IsNotNullStr
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2887
		{
			yyVAL.str = IsTrueStr
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2891
		{
			yyVAL.str = IsNotTrueStr
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2895
		{
			yyVAL.str = IsFalseStr
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2899
		{
			yyVAL.str = IsNotFalseStr
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2905
		{
			yyVAL.str = EqualStr
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2909
		{
			yyVAL.str = LessThanStr
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2913
		{
			yyVAL.str = GreaterThanStr
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2917
		{
			yyVAL.str = LessEqualStr
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2921
		{
			yyVAL.str = GreaterEqualStr
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2925
		{
			yyVAL.str = NotEqualStr
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2929
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 565:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2934
		{
			yyVAL.expr = nil
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2938
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2944
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2948
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2952
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2958
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2964
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2968
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2974
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2978
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2982
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2986
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2990
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2994
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2998
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3002
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3006
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3010
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3014
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3018
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3022
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3026
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3030
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3034
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3038
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3042
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3046
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3050
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3054
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3058
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3062
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3066
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3074
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3088
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3092
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3096
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 605:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3114
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: yyDollar[3].str == DistinctStr, Exprs: yyDollar[4].selectExprs}
		}
	case 606:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3118
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 607:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3128
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 608:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3132
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3136
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema")}
		}
	case 610:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3140
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 611:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3144
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 612:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3148
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 613:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3152
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 614:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3156
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 615:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3160
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 616:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3164
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 617:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3168
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 618:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3172
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("first"), Exprs: yyDollar[3].selectExprs}
		}
	case 619:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3176
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 620:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3180
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 621:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3184
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3194
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3198
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3202
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3207
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3212
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 627:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3217
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3223
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3228
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3232
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_user")}
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3237
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3241
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3245
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3250
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3255
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3260
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 637:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3264
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 638:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3268
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3278
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 642:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3288
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 643:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3292
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 644:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3296
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 645:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3300
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 646:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3304
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 647:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3308
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 648:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3314
		{
			yyVAL.str = ""
		}
	case 649:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3318
		{
			yyVAL.str = BooleanModeStr
		}
	case 650:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3322
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 651:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3326
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3330
		{
			yyVAL.str = QueryExpansionStr
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3336
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3340
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3346
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3350
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3354
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3358
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3362
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3366
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3372
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3376
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3380
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 664:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3384
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3388
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3392
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3396
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 668:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3401
		{
			yyVAL.expr = nil
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3405
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 670:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3410
		{
			yyVAL.str = string("")
		}
	case 671:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3414
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3420
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 673:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3424
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 674:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3430
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 675:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3435
		{
			yyVAL.expr = nil
		}
	case 676:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3439
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3445
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 678:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3449
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 679:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3453
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3459
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3463
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3467
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3471
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3475
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3479
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3483
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3487
		{
			yyVAL.expr = &NullVal{}
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3493
		{
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 689:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3497
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 690:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3501
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 691:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3506
		{
			yyVAL.exprs = nil
		}
	case 692:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3510
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 693:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3515
		{
			yyVAL.expr = nil
		}
	case 694:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3519
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 695:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3524
		{
			yyVAL.orderBy = nil
		}
	case 696:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3528
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3534
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 698:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3538
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3544
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 700:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3549
		{
			yyVAL.str = AscScr
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3553
		{
			yyVAL.str = AscScr
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3557
		{
			yyVAL.str = DescScr
		}
	case 703:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3562
		{
			yyVAL.limit = nil
		}
	case 704:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3566
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 705:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3570
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 706:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3574
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 707:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3579
		{
			yyVAL.str = ""
		}
	case 708:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3583
		{
			yyVAL.str = ForUpdateStr
		}
	case 709:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3587
		{
			yyVAL.str = ShareModeStr
		}
	case 710:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3600
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3604
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 712:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3608
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 713:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3613
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 714:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3617
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 715:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3621
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3628
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 717:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3632
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 718:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3636
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 719:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3640
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 720:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3645
		{
			yyVAL.setExprs = nil
		}
	case 721:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3649
		{
			yyVAL.setExprs = yyDollar[5].setExprs
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3655
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 723:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3659
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3665
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3669
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 726:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3675
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3681
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3691
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 729:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3695
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 730:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3701
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: NewStrVal([]byte("on"))}
		}
	case 731:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3705
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: NewStrVal([]byte("off"))}
		}
	case 732:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3709
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 733:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3713
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 735:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3720
		{
			yyVAL.bytes = []byte("charset")
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3727
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3731
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3735
		{
			yyVAL.expr = &Default{}
		}
	case 742:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3744
		{
			yyVAL.byt = 0
		}
	case 743:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3746
		{
			yyVAL.byt = 1
		}
	case 744:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3749
		{
			yyVAL.byt = 0
		}
	case 745:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3751
		{
			yyVAL.byt = 1
		}
	case 746:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3754
		{
			yyVAL.str = ""
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3756
		{
			yyVAL.str = IgnoreStr
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3760
		{
			yyVAL.empty = struct{}{}
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3762
		{
			yyVAL.empty = struct{}{}
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3764
		{
			yyVAL.empty = struct{}{}
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3766
		{
			yyVAL.empty = struct{}{}
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3768
		{
			yyVAL.empty = struct{}{}
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3770
		{
			yyVAL.empty = struct{}{}
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3772
		{
			yyVAL.empty = struct{}{}
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3774
		{
			yyVAL.empty = struct{}{}
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3776
		{
			yyVAL.empty = struct{}{}
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3780
		{
			yyVAL.empty = struct{}{}
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3782
		{
			yyVAL.empty = struct{}{}
		}
	case 759:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3785
		{
			yyVAL.empty = struct{}{}
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3787
		{
			yyVAL.empty = struct{}{}
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3789
		{
			yyVAL.empty = struct{}{}
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3793
		{
			yyVAL.str = UniqueStr
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3795
		{
			yyVAL.str = FulltextStr
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3797
		{
			yyVAL.str = SpatialStr
		}
	case 765:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3800
		{
			yyVAL.str = ""
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3802
		{
			yyVAL.str = yyDollar[1].str
		}
	case 767:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3805
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 768:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3807
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3811
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3815
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3822
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3828
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3832
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3839
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1081:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4169
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1082:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4178
		{
			decNesting(yylex)
		}
	case 1083:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4183
		{
			skipToEnd(yylex)
		}
	case 1084:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4188
		{
			skipToEnd(yylex)
		}
	case 1085:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4192
		{
			skipToEnd(yylex)
		}
	case 1086:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4196
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
