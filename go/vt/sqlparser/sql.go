//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const VALUES = 57376
const LAST_INSERT_ID = 57377
const NEXT = 57378
const VALUE = 57379
const SHARE = 57380
const MODE = 57381
const SQL_NO_CACHE = 57382
const SQL_CACHE = 57383
const JOIN = 57384
const STRAIGHT_JOIN = 57385
const LEFT = 57386
const RIGHT = 57387
const INNER = 57388
const OUTER = 57389
const CROSS = 57390
const NATURAL = 57391
const USE = 57392
const FORCE = 57393
const ON = 57394
const USING = 57395
const ID = 57396
const HEX = 57397
const STRING = 57398
const INTEGRAL = 57399
const FLOAT = 57400
const HEXNUM = 57401
const VALUE_ARG = 57402
const LIST_ARG = 57403
const COMMENT = 57404
const COMMENT_KEYWORD = 57405
const BIT_LITERAL = 57406
const NULL = 57407
const TRUE = 57408
const FALSE = 57409
const OFF = 57410
const OR = 57411
const AND = 57412
const NOT = 57413
const BETWEEN = 57414
const CASE = 57415
const WHEN = 57416
const THEN = 57417
const ELSE = 57418
const END = 57419
const LE = 57420
const GE = 57421
const NE = 57422
const NULL_SAFE_EQUAL = 57423
const IS = 57424
const LIKE = 57425
const REGEXP = 57426
const IN = 57427
const SHIFT_LEFT = 57428
const SHIFT_RIGHT = 57429
const DIV = 57430
const MOD = 57431
const UNARY = 57432
const COLLATE = 57433
const BINARY = 57434
const UNDERSCORE_BINARY = 57435
const UNDERSCORE_UTF8MB4 = 57436
const INTERVAL = 57437
const JSON_EXTRACT_OP = 57438
const JSON_UNQUOTE_EXTRACT_OP = 57439
const CREATE = 57440
const ALTER = 57441
const DROP = 57442
const RENAME = 57443
const ANALYZE = 57444
const ADD = 57445
const FLUSH = 57446
const SCHEMA = 57447
const TABLE = 57448
const INDEX = 57449
const VIEW = 57450
const TO = 57451
const IGNORE = 57452
const IF = 57453
const UNIQUE = 57454
const PRIMARY = 57455
const COLUMN = 57456
const SPATIAL = 57457
const FULLTEXT = 57458
const KEY_BLOCK_SIZE = 57459
const CHECK = 57460
const ACTION = 57461
const CASCADE = 57462
const CONSTRAINT = 57463
const FOREIGN = 57464
const NO = 57465
const REFERENCES = 57466
const RESTRICT = 57467
const SHOW = 57468
const DESCRIBE = 57469
const EXPLAIN = 57470
const DATE = 57471
const ESCAPE = 57472
const REPAIR = 57473
const OPTIMIZE = 57474
const TRUNCATE = 57475
const MAXVALUE = 57476
const PARTITION = 57477
const REORGANIZE = 57478
const LESS = 57479
const THAN = 57480
const PROCEDURE = 57481
const TRIGGER = 57482
const VINDEX = 57483
const VINDEXES = 57484
const STATUS = 57485
const VARIABLES = 57486
const WARNINGS = 57487
const SEQUENCE = 57488
const BEGIN = 57489
const START = 57490
const TRANSACTION = 57491
const COMMIT = 57492
const ROLLBACK = 57493
const BIT = 57494
const TINYINT = 57495
const SMALLINT = 57496
const MEDIUMINT = 57497
const INT = 57498
const INTEGER = 57499
const BIGINT = 57500
const INTNUM = 57501
const UUID = 57502
const REAL = 57503
const DOUBLE = 57504
const FLOAT_TYPE = 57505
const DECIMAL = 57506
const NUMERIC = 57507
const TIME = 57508
const TIMESTAMP = 57509
const DATETIME = 57510
const YEAR = 57511
const CHAR = 57512
const VARCHAR = 57513
const BOOL = 57514
const CHARACTER = 57515
const VARBINARY = 57516
const NCHAR = 57517
const TEXT = 57518
const TINYTEXT = 57519
const MEDIUMTEXT = 57520
const LONGTEXT = 57521
const BLOB = 57522
const TINYBLOB = 57523
const MEDIUMBLOB = 57524
const LONGBLOB = 57525
const JSON = 57526
const ENUM = 57527
const GEOMETRY = 57528
const POINT = 57529
const LINESTRING = 57530
const POLYGON = 57531
const GEOMETRYCOLLECTION = 57532
const MULTIPOINT = 57533
const MULTILINESTRING = 57534
const MULTIPOLYGON = 57535
const NULLX = 57536
const AUTO_INCREMENT = 57537
const APPROXNUM = 57538
const SIGNED = 57539
const UNSIGNED = 57540
const ZEROFILL = 57541
const COLLATION = 57542
const DATABASES = 57543
const TABLES = 57544
const VITESS_METADATA = 57545
const VSCHEMA = 57546
const FULL = 57547
const PROCESSLIST = 57548
const COLUMNS = 57549
const FIELDS = 57550
const ENGINES = 57551
const PLUGINS = 57552
const NAMES = 57553
const CHARSET = 57554
const GLOBAL = 57555
const SESSION = 57556
const ISOLATION = 57557
const LEVEL = 57558
const READ = 57559
const WRITE = 57560
const ONLY = 57561
const REPEATABLE = 57562
const COMMITTED = 57563
const UNCOMMITTED = 57564
const SERIALIZABLE = 57565
const CURRENT_TIMESTAMP = 57566
const DATABASE = 57567
const CURRENT_DATE = 57568
const CURRENT_TIME = 57569
const LOCALTIME = 57570
const LOCALTIMESTAMP = 57571
const UTC_DATE = 57572
const UTC_TIME = 57573
const UTC_TIMESTAMP = 57574
const REPLACE = 57575
const CONVERT = 57576
const CAST = 57577
const SUBSTR = 57578
const SUBSTRING = 57579
const GROUP_CONCAT = 57580
const SEPARATOR = 57581
const TIMESTAMPADD = 57582
const TIMESTAMPDIFF = 57583
const MATCH = 57584
const AGAINST = 57585
const BOOLEAN = 57586
const LANGUAGE = 57587
const WITH = 57588
const QUERY = 57589
const EXPANSION = 57590
const UNUSED = 57591
const ARRAY = 57592
const CUME_DIST = 57593
const DESCRIPTION = 57594
const DENSE_RANK = 57595
const EMPTY = 57596
const EXCEPT = 57597
const FIRST_VALUE = 57598
const GROUPING = 57599
const GROUPS = 57600
const JSON_TABLE = 57601
const LAG = 57602
const LAST_VALUE = 57603
const LATERAL = 57604
const LEAD = 57605
const MEMBER = 57606
const NTH_VALUE = 57607
const NTILE = 57608
const OF = 57609
const OVER = 57610
const PERCENT_RANK = 57611
const RANK = 57612
const RECURSIVE = 57613
const ROW_NUMBER = 57614
const SYSTEM = 57615
const WINDOW = 57616
const ACTIVE = 57617
const ADMIN = 57618
const BUCKETS = 57619
const CLONE = 57620
const COMPONENT = 57621
const DEFINITION = 57622
const ENFORCED = 57623
const EXCLUDE = 57624
const FOLLOWING = 57625
const GEOMCOLLECTION = 57626
const GET_MASTER_PUBLIC_KEY = 57627
const HISTOGRAM = 57628
const HISTORY = 57629
const INACTIVE = 57630
const INVISIBLE = 57631
const LOCKED = 57632
const MASTER_COMPRESSION_ALGORITHMS = 57633
const MASTER_PUBLIC_KEY_PATH = 57634
const MASTER_TLS_CIPHERSUITES = 57635
const MASTER_ZSTD_COMPRESSION_LEVEL = 57636
const NESTED = 57637
const NETWORK_NAMESPACE = 57638
const NOWAIT = 57639
const NULLS = 57640
const OJ = 57641
const OLD = 57642
const OPTIONAL = 57643
const ORDINALITY = 57644
const ORGANIZATION = 57645
const OTHERS = 57646
const PATH = 57647
const PERSIST = 57648
const PERSIST_ONLY = 57649
const PRECEDING = 57650
const PRIVILEGE_CHECKS_USER = 57651
const PROCESS = 57652
const RANDOM = 57653
const REFERENCE = 57654
const REQUIRE_ROW_FORMAT = 57655
const RESOURCE = 57656
const RESPECT = 57657
const RESTART = 57658
const RETAIN = 57659
const REUSE = 57660
const ROLE = 57661
const SECONDARY = 57662
const SECONDARY_ENGINE = 57663
const SECONDARY_LOAD = 57664
const SECONDARY_UNLOAD = 57665
const SKIP = 57666
const SRID = 57667
const THREAD_PRIORITY = 57668
const TIES = 57669
const UNBOUNDED = 57670
const VCPU = 57671
const VISIBLE = 57672

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"UUID",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 29,
	-2, 4,
	-1, 31,
	125, 67,
	-2, 644,
	-1, 37,
	160, 310,
	161, 310,
	-2, 298,
	-1, 321,
	112, 654,
	-2, 650,
	-1, 322,
	112, 655,
	-2, 651,
	-1, 390,
	82, 903,
	-2, 65,
	-1, 391,
	82, 821,
	-2, 66,
	-1, 396,
	82, 790,
	-2, 613,
	-1, 398,
	82, 851,
	-2, 615,
	-1, 694,
	1, 364,
	5, 364,
	12, 364,
	13, 364,
	14, 364,
	15, 364,
	17, 364,
	19, 364,
	30, 364,
	31, 364,
	42, 364,
	43, 364,
	44, 364,
	45, 364,
	46, 364,
	48, 364,
	49, 364,
	52, 364,
	53, 364,
	55, 364,
	56, 364,
	348, 364,
	-2, 382,
	-1, 697,
	53, 46,
	55, 46,
	-2, 50,
	-1, 848,
	112, 657,
	-2, 653,
	-1, 1086,
	5, 30,
	-2, 449,
	-1, 1117,
	5, 29,
	-2, 587,
	-1, 1192,
	5, 29,
	-2, 72,
	-1, 1370,
	5, 30,
	-2, 588,
	-1, 1425,
	5, 29,
	-2, 590,
	-1, 1497,
	5, 30,
	-2, 591,
}

const yyPrivate = 57344

const yyLast = 15980

var yyAct = [...]int{

	322, 1530, 1520, 1332, 1485, 1217, 326, 1390, 650, 1405,
	1437, 1270, 960, 1120, 1138, 1304, 933, 521, 1121, 956,
	1015, 1267, 649, 3, 300, 1052, 1271, 969, 339, 352,
	550, 797, 811, 931, 959, 1283, 95, 1242, 1165, 95,
	873, 1195, 1194, 1144, 1185, 95, 973, 328, 886, 710,
	920, 1277, 57, 1080, 899, 315, 935, 690, 1001, 395,
	850, 909, 290, 581, 691, 587, 709, 95, 400, 384,
	913, 1011, 95, 593, 299, 389, 353, 51, 324, 602,
	309, 381, 386, 95, 699, 56, 95, 1523, 61, 1034,
	1507, 665, 95, 1518, 1495, 1515, 1333, 1506, 1494, 1259,
	1362, 530, 554, 1033, 711, 664, 712, 292, 293, 294,
	295, 1298, 313, 298, 63, 64, 65, 66, 67, 1299,
	1300, 552, 90, 86, 87, 88, 1153, 950, 51, 1152,
	297, 1038, 1154, 951, 952, 82, 305, 84, 575, 296,
	1032, 1176, 1463, 615, 614, 624, 625, 617, 618, 619,
	620, 621, 622, 623, 616, 994, 364, 626, 370, 371,
	368, 369, 367, 366, 365, 1412, 1002, 1219, 556, 1353,
	558, 570, 372, 373, 289, 571, 568, 569, 910, 80,
	24, 25, 52, 27, 28, 1351, 563, 564, 573, 392,
	1029, 1026, 1027, 785, 1025, 1221, 782, 1517, 574, 43,
	784, 555, 557, 1486, 29, 48, 49, 1514, 1216, 914,
	1481, 974, 1538, 540, 527, 904, 84, 1139, 1141, 990,
	986, 1220, 1402, 1534, 38, 1438, 1036, 1039, 54, 75,
	76, 83, 1222, 786, 525, 783, 77, 789, 1440, 79,
	78, 976, 89, 987, 1293, 1292, 1291, 976, 524, 531,
	266, 85, 1046, 638, 639, 1045, 1470, 992, 1373, 984,
	1213, 1229, 1149, 1096, 1031, 985, 1215, 95, 1106, 1074,
	400, 822, 400, 1093, 400, 400, 1166, 400, 705, 400,
	606, 546, 957, 1314, 626, 400, 1030, 553, 946, 31,
	32, 34, 33, 36, 1140, 50, 616, 812, 1002, 626,
	976, 819, 559, 522, 560, 561, 1439, 562, 70, 565,
	1493, 816, 995, 1464, 1243, 576, 400, 37, 44, 45,
	991, 989, 46, 47, 35, 1035, 1401, 1054, 590, 522,
	1532, 599, 601, 1533, 1315, 1531, 520, 975, 39, 40,
	1037, 41, 42, 975, 71, 1479, 551, 601, 551, 74,
	551, 551, 1245, 551, 536, 551, 589, 584, 588, 577,
	578, 551, 1214, 1452, 1212, 638, 639, 1281, 1261, 1209,
	857, 636, 713, 900, 607, 638, 639, 777, 813, 95,
	95, 95, 51, 1202, 855, 856, 854, 1247, 400, 1251,
	1539, 1246, 539, 1244, 400, 591, 975, 635, 1249, 1169,
	637, 972, 970, 988, 971, 1053, 900, 1248, 1103, 651,
	968, 974, 596, 689, 1499, 526, 54, 533, 662, 534,
	1250, 1252, 535, 1396, 53, 1395, 853, 694, 648, 1540,
	652, 653, 654, 655, 656, 657, 658, 659, 660, 1189,
	663, 666, 666, 666, 672, 666, 666, 672, 666, 680,
	681, 682, 683, 684, 685, 1188, 695, 668, 670, 81,
	674, 676, 698, 679, 1071, 1072, 1073, 703, 1177, 1480,
	707, 667, 669, 671, 673, 675, 677, 678, 874, 1201,
	875, 542, 543, 544, 1206, 1203, 1196, 1204, 1200, 1419,
	1197, 528, 529, 1198, 1199, 614, 624, 625, 617, 618,
	619, 620, 621, 622, 623, 616, 22, 1205, 626, 392,
	600, 599, 1155, 1393, 1156, 579, 1091, 1263, 1090, 1226,
	1186, 95, 600, 599, 378, 379, 95, 601, 1174, 1365,
	95, 1057, 95, 400, 1477, 600, 599, 95, 1323, 601,
	95, 522, 1449, 95, 1443, 1516, 580, 95, 522, 400,
	400, 1335, 601, 821, 400, 400, 400, 95, 400, 400,
	1092, 1328, 319, 781, 400, 400, 304, 615, 614, 624,
	625, 617, 618, 619, 620, 621, 622, 623, 616, 800,
	801, 626, 1502, 580, 802, 803, 804, 1326, 806, 807,
	820, 1443, 1489, 400, 808, 809, 825, 826, 95, 840,
	842, 843, 1443, 580, 400, 841, 799, 600, 599, 551,
	600, 599, 1443, 1471, 827, 619, 620, 621, 622, 623,
	616, 790, 1166, 626, 601, 551, 551, 601, 814, 1448,
	551, 551, 551, 1161, 551, 551, 1443, 1442, 846, 851,
	551, 551, 1388, 1387, 600, 599, 876, 796, 400, 342,
	341, 344, 345, 346, 347, 837, 838, 852, 343, 348,
	795, 601, 1375, 580, 890, 893, 848, 1372, 580, 1447,
	901, 24, 829, 1321, 1320, 884, 1317, 1318, 1317, 1316,
	1446, 400, 400, 844, 917, 580, 1087, 580, 95, 882,
	580, 58, 778, 776, 774, 1115, 95, 95, 701, 1116,
	95, 95, 720, 719, 95, 95, 95, 400, 651, 548,
	541, 888, 889, 24, 51, 1311, 977, 877, 878, 54,
	400, 1268, 880, 1145, 1280, 916, 1280, 1145, 847, 652,
	940, 1087, 700, 941, 897, 882, 1368, 943, 964, 1451,
	702, 1424, 704, 694, 1232, 917, 1319, 694, 1157, 949,
	917, 694, 922, 925, 926, 927, 923, 351, 924, 928,
	701, 54, 1284, 1285, 24, 799, 917, 1087, 939, 955,
	1280, 1109, 932, 1108, 944, 948, 695, 400, 1050, 400,
	695, 700, 947, 95, 95, 95, 95, 95, 1087, 95,
	95, 706, 823, 95, 1017, 788, 1003, 1004, 1005, 306,
	54, 1508, 702, 1218, 700, 1407, 828, 1021, 996, 1023,
	1380, 95, 54, 95, 95, 1016, 1309, 1160, 95, 1012,
	922, 925, 926, 927, 923, 394, 924, 928, 392, 1284,
	1285, 1525, 885, 887, 1007, 1006, 892, 895, 896, 1408,
	1019, 961, 1013, 1014, 1521, 835, 1287, 54, 1268, 1190,
	817, 792, 1512, 551, 1062, 551, 1134, 1132, 926, 927,
	1290, 908, 1133, 911, 912, 881, 883, 1289, 617, 618,
	619, 620, 621, 622, 623, 616, 1060, 1061, 626, 588,
	1130, 1129, 848, 1128, 851, 1131, 310, 311, 1505, 1063,
	1228, 1064, 640, 641, 642, 643, 644, 645, 646, 647,
	1059, 1510, 852, 615, 614, 624, 625, 617, 618, 619,
	620, 621, 622, 623, 616, 1076, 1069, 626, 95, 95,
	95, 95, 95, 1122, 1075, 1068, 1181, 594, 595, 718,
	95, 549, 1422, 95, 582, 1366, 1117, 95, 1085, 1173,
	1172, 95, 1084, 592, 847, 1168, 583, 1162, 1403, 1022,
	791, 594, 595, 1102, 1020, 884, 1104, 1081, 930, 301,
	400, 307, 308, 1067, 1457, 694, 694, 694, 694, 694,
	302, 1066, 1158, 58, 1146, 1123, 1456, 1410, 1126, 1135,
	694, 1145, 572, 1124, 1125, 1147, 1127, 1148, 694, 1097,
	1118, 1119, 1094, 1143, 695, 695, 695, 695, 695, 1150,
	1527, 1526, 62, 810, 597, 1527, 1467, 1171, 818, 932,
	60, 1142, 1167, 1070, 55, 1, 1519, 695, 1163, 1164,
	400, 1180, 1334, 1182, 1183, 1184, 1404, 394, 1028, 394,
	1484, 394, 394, 1436, 394, 1303, 394, 967, 958, 69,
	519, 68, 394, 1192, 1478, 997, 998, 999, 1000, 966,
	400, 95, 1187, 965, 982, 73, 1178, 1179, 981, 978,
	1175, 1008, 1009, 1010, 993, 980, 95, 979, 1208, 1207,
	983, 728, 726, 604, 727, 400, 1100, 725, 724, 730,
	1223, 961, 729, 722, 1225, 723, 277, 1193, 387, 929,
	714, 1018, 1083, 598, 72, 1211, 1400, 51, 1210, 1024,
	1086, 1088, 815, 1089, 566, 567, 279, 634, 1095, 1065,
	1227, 1098, 1099, 1151, 393, 1275, 824, 1105, 586, 400,
	400, 1107, 1122, 1455, 1110, 1111, 551, 1112, 1113, 1269,
	1254, 1236, 1253, 1409, 1101, 661, 1241, 1235, 1062, 898,
	327, 1274, 839, 400, 340, 394, 1272, 1137, 337, 338,
	830, 715, 1114, 1260, 608, 325, 317, 693, 400, 1262,
	400, 400, 1288, 686, 1279, 921, 848, 919, 918, 793,
	382, 849, 1302, 696, 858, 859, 860, 861, 862, 863,
	864, 865, 866, 867, 868, 869, 870, 871, 872, 1306,
	1297, 95, 1301, 1273, 1294, 51, 1234, 1295, 1312, 1313,
	1310, 1296, 1307, 1308, 1286, 1282, 692, 1231, 1361, 92,
	1462, 95, 1324, 834, 26, 59, 312, 400, 291, 19,
	400, 400, 400, 95, 18, 17, 20, 16, 1264, 905,
	400, 15, 14, 95, 537, 30, 21, 13, 12, 11,
	383, 10, 9, 8, 7, 523, 6, 5, 4, 303,
	23, 1340, 2, 0, 0, 0, 532, 0, 1325, 538,
	0, 0, 0, 0, 0, 545, 1342, 0, 1349, 0,
	0, 1327, 0, 0, 1330, 1341, 0, 0, 0, 961,
	694, 961, 0, 0, 0, 0, 0, 1122, 0, 0,
	394, 1367, 0, 0, 0, 0, 0, 0, 0, 1377,
	1240, 0, 400, 0, 0, 0, 394, 394, 0, 695,
	400, 394, 394, 394, 1158, 394, 394, 0, 0, 1363,
	1386, 394, 394, 400, 0, 0, 0, 0, 0, 651,
	0, 0, 1376, 0, 400, 0, 1360, 1378, 0, 0,
	1379, 1398, 0, 1381, 0, 0, 0, 0, 0, 0,
	831, 1234, 0, 1397, 0, 0, 0, 0, 0, 0,
	0, 604, 0, 0, 394, 0, 0, 0, 1382, 1383,
	1384, 0, 0, 400, 400, 1392, 400, 1394, 0, 0,
	0, 400, 0, 400, 400, 400, 95, 1399, 1431, 400,
	1432, 1433, 1434, 0, 1425, 1423, 0, 0, 1272, 551,
	0, 1430, 1435, 0, 1441, 879, 1411, 0, 400, 95,
	0, 0, 1444, 0, 1445, 1453, 0, 0, 1077, 1078,
	1079, 902, 0, 961, 0, 624, 625, 617, 618, 619,
	620, 621, 622, 623, 616, 0, 1468, 626, 906, 907,
	547, 0, 0, 0, 400, 1273, 0, 1476, 1426, 1469,
	1475, 1343, 400, 400, 1272, 1406, 0, 0, 1345, 0,
	0, 1487, 0, 0, 394, 1488, 1491, 0, 0, 1354,
	1355, 400, 0, 0, 1122, 0, 0, 394, 0, 0,
	1450, 1496, 95, 0, 0, 0, 0, 400, 0, 1369,
	1370, 1371, 0, 1374, 0, 1504, 0, 0, 0, 585,
	0, 1273, 0, 51, 0, 0, 0, 1509, 1511, 400,
	1385, 1483, 1490, 651, 0, 0, 1513, 0, 0, 0,
	0, 0, 1524, 0, 0, 0, 0, 0, 0, 1535,
	0, 0, 0, 0, 394, 93, 394, 0, 288, 0,
	0, 0, 0, 0, 93, 0, 0, 0, 0, 1170,
	0, 0, 688, 0, 697, 0, 1346, 1347, 0, 1348,
	0, 0, 1350, 316, 1352, 580, 385, 0, 0, 0,
	0, 93, 0, 1406, 961, 0, 0, 1418, 0, 0,
	394, 0, 93, 0, 0, 93, 0, 0, 0, 0,
	0, 93, 0, 0, 1522, 0, 0, 0, 0, 0,
	274, 0, 615, 614, 624, 625, 617, 618, 619, 620,
	621, 622, 623, 616, 0, 0, 626, 0, 1389, 0,
	0, 0, 0, 0, 284, 0, 0, 0, 0, 1458,
	1459, 1460, 1461, 0, 0, 0, 1465, 1466, 0, 0,
	0, 0, 0, 0, 1238, 1239, 0, 0, 1472, 1473,
	1474, 0, 0, 0, 0, 0, 1255, 1256, 1359, 1257,
	1258, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	746, 1265, 1266, 0, 902, 267, 0, 0, 1492, 0,
	0, 0, 270, 0, 0, 1497, 0, 0, 0, 0,
	278, 273, 0, 0, 721, 0, 0, 0, 0, 775,
	1501, 0, 0, 779, 0, 780, 0, 0, 0, 0,
	787, 0, 0, 383, 0, 0, 794, 394, 0, 0,
	0, 0, 0, 276, 0, 0, 0, 0, 0, 283,
	805, 0, 615, 614, 624, 625, 617, 618, 619, 620,
	621, 622, 623, 616, 1536, 1537, 626, 0, 734, 0,
	0, 0, 0, 0, 0, 0, 0, 268, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 836, 0, 0, 0, 0, 0, 1191, 0, 0,
	0, 0, 0, 0, 280, 271, 747, 281, 282, 287,
	0, 0, 0, 272, 275, 0, 269, 286, 285, 0,
	1344, 0, 0, 0, 0, 0, 0, 394, 0, 760,
	763, 764, 765, 766, 767, 768, 0, 731, 769, 770,
	771, 772, 773, 748, 749, 750, 751, 732, 733, 761,
	0, 735, 394, 736, 737, 738, 739, 740, 741, 742,
	743, 744, 745, 752, 753, 754, 755, 756, 757, 758,
	759, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 915, 0, 0, 394, 0, 0, 0, 0, 0,
	0, 0, 0, 902, 942, 0, 1276, 1278, 93, 93,
	93, 0, 1237, 0, 0, 0, 0, 0, 0, 0,
	0, 1364, 0, 0, 0, 0, 0, 0, 0, 0,
	1278, 762, 615, 614, 624, 625, 617, 618, 619, 620,
	621, 622, 623, 616, 0, 394, 626, 394, 1305, 1413,
	1414, 1415, 1416, 1417, 0, 0, 0, 1420, 1421, 615,
	614, 624, 625, 617, 618, 619, 620, 621, 622, 623,
	616, 0, 0, 626, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1040, 1041, 1042, 1043,
	1044, 0, 1047, 1048, 0, 0, 1049, 0, 0, 0,
	0, 0, 0, 0, 1331, 0, 0, 1336, 1337, 1338,
	0, 0, 0, 0, 1051, 0, 610, 394, 613, 0,
	0, 1058, 0, 0, 627, 628, 629, 630, 631, 632,
	633, 0, 611, 612, 609, 615, 614, 624, 625, 617,
	618, 619, 620, 621, 622, 623, 616, 0, 0, 626,
	93, 0, 0, 0, 0, 93, 0, 0, 0, 93,
	0, 93, 0, 1358, 0, 0, 93, 0, 902, 93,
	0, 0, 93, 0, 0, 0, 798, 0, 1082, 0,
	0, 0, 0, 0, 0, 0, 93, 0, 0, 394,
	0, 0, 0, 0, 0, 0, 0, 1391, 615, 614,
	624, 625, 617, 618, 619, 620, 621, 622, 623, 616,
	394, 0, 626, 0, 0, 1528, 0, 0, 0, 0,
	0, 394, 1357, 0, 0, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 798, 615, 614, 624,
	625, 617, 618, 619, 620, 621, 622, 623, 616, 0,
	0, 626, 0, 0, 0, 0, 0, 0, 0, 0,
	1427, 1428, 0, 1429, 0, 0, 0, 0, 1391, 0,
	1391, 1391, 1391, 0, 0, 0, 1305, 0, 0, 0,
	0, 0, 0, 316, 316, 0, 0, 316, 316, 316,
	0, 0, 0, 903, 0, 1391, 615, 614, 624, 625,
	617, 618, 619, 620, 621, 622, 623, 616, 0, 1356,
	626, 0, 316, 316, 316, 316, 0, 93, 0, 0,
	0, 0, 0, 0, 0, 93, 937, 0, 0, 93,
	93, 1482, 0, 93, 945, 798, 0, 0, 0, 394,
	394, 0, 615, 614, 624, 625, 617, 618, 619, 620,
	621, 622, 623, 616, 1224, 902, 626, 0, 1498, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1230,
	0, 0, 0, 0, 1503, 0, 0, 0, 0, 0,
	0, 0, 0, 615, 614, 624, 625, 617, 618, 619,
	620, 621, 622, 623, 616, 0, 1391, 626, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 93, 93, 93, 93, 0, 93, 93,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 0, 1055, 1056, 0, 0, 0, 93, 0, 0,
	0, 0, 798, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1322, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	316, 0, 0, 0, 1329, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1339, 316, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 903, 93, 93, 93,
	93, 93, 0, 0, 0, 0, 0, 0, 0, 1136,
	0, 0, 93, 0, 0, 0, 937, 0, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 316, 0, 0, 0, 0,
	0, 0, 1454, 0, 0, 0, 0, 316, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 798, 0, 0, 0,
	0, 0, 0, 0, 0, 903, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1500, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	903, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 937, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 93, 0,
	0, 505, 493, 0, 450, 508, 424, 440, 517, 441,
	444, 481, 409, 463, 179, 438, 0, 428, 404, 434,
	405, 426, 452, 125, 456, 423, 495, 466, 507, 151,
	515, 153, 472, 0, 225, 167, 0, 0, 454, 497,
	461, 490, 449, 482, 414, 471, 509, 439, 479, 510,
	0, 0, 0, 399, 0, 962, 963, 903, 0, 0,
	0, 0, 115, 0, 476, 504, 436, 478, 480, 403,
	473, 93, 407, 410, 516, 500, 431, 432, 1159, 0,
	0, 0, 0, 0, 0, 453, 462, 487, 447, 0,
	0, 0, 0, 0, 0, 0, 0, 429, 0, 470,
	0, 0, 0, 411, 408, 0, 0, 451, 0, 0,
	0, 413, 0, 430, 488, 0, 401, 133, 492, 499,
	448, 255, 503, 446, 445, 506, 198, 0, 229, 136,
	150, 111, 97, 107, 0, 135, 176, 205, 209, 496,
	427, 435, 119, 433, 207, 186, 245, 469, 188, 206,
	154, 235, 199, 244, 256, 257, 232, 253, 261, 222,
	100, 231, 243, 116, 217, 102, 241, 228, 165, 145,
	146, 101, 0, 514, 203, 124, 131, 121, 178, 238,
	239, 120, 264, 108, 252, 104, 109, 251, 172, 234,
	242, 166, 159, 103, 240, 164, 158, 149, 128, 138,
	196, 156, 197, 139, 169, 168, 170, 0, 406, 0,
	226, 248, 265, 113, 422, 233, 259, 260, 0, 0,
	114, 132, 127, 195, 171, 110, 141, 223, 148, 155,
	202, 263, 185, 208, 117, 247, 224, 418, 421, 416,
	417, 464, 465, 511, 512, 513, 489, 412, 0, 419,
	420, 0, 494, 501, 502, 468, 96, 105, 152, 262,
	200, 130, 249, 402, 415, 123, 425, 0, 0, 437,
	442, 443, 455, 457, 458, 459, 460, 467, 474, 475,
	477, 483, 484, 485, 486, 491, 498, 518, 98, 99,
	106, 112, 118, 122, 126, 129, 134, 137, 140, 142,
	143, 144, 147, 157, 160, 161, 162, 163, 173, 174,
	175, 177, 180, 181, 182, 183, 184, 187, 189, 190,
	191, 192, 193, 194, 201, 204, 210, 211, 212, 213,
	214, 215, 216, 218, 219, 220, 221, 227, 230, 236,
	237, 246, 254, 258, 505, 493, 0, 450, 508, 424,
	440, 517, 441, 444, 481, 409, 463, 179, 438, 0,
	428, 404, 434, 405, 426, 452, 125, 456, 423, 495,
	466, 507, 151, 515, 153, 472, 0, 225, 167, 0,
	0, 454, 497, 461, 490, 449, 482, 414, 471, 509,
	439, 479, 510, 0, 0, 0, 399, 0, 962, 963,
	0, 0, 0, 0, 0, 115, 0, 476, 504, 436,
	478, 480, 403, 473, 0, 407, 410, 516, 500, 431,
	432, 0, 0, 0, 0, 0, 0, 0, 453, 462,
	487, 447, 0, 0, 0, 0, 0, 0, 0, 0,
	429, 0, 470, 0, 0, 0, 411, 408, 0, 0,
	451, 0, 0, 0, 413, 0, 430, 488, 0, 401,
	133, 492, 499, 448, 255, 503, 446, 445, 506, 198,
	0, 229, 136, 150, 111, 97, 107, 0, 135, 176,
	205, 209, 496, 427, 435, 119, 433, 207, 186, 245,
	469, 188, 206, 154, 235, 199, 244, 256, 257, 232,
	253, 261, 222, 100, 231, 243, 116, 217, 102, 241,
	228, 165, 145, 146, 101, 0, 514, 203, 124, 131,
	121, 178, 238, 239, 120, 264, 108, 252, 104, 109,
	251, 172, 234, 242, 166, 159, 103, 240, 164, 158,
	149, 128, 138, 196, 156, 197, 139, 169, 168, 170,
	0, 406, 0, 226, 248, 265, 113, 422, 233, 259,
	260, 0, 0, 114, 132, 127, 195, 171, 110, 141,
	223, 148, 155, 202, 263, 185, 208, 117, 247, 224,
	418, 421, 416, 417, 464, 465, 511, 512, 513, 489,
	412, 0, 419, 420, 0, 494, 501, 502, 468, 96,
	105, 152, 262, 200, 130, 249, 402, 415, 123, 425,
	0, 0, 437, 442, 443, 455, 457, 458, 459, 460,
	467, 474, 475, 477, 483, 484, 485, 486, 491, 498,
	518, 98, 99, 106, 112, 118, 122, 126, 129, 134,
	137, 140, 142, 143, 144, 147, 157, 160, 161, 162,
	163, 173, 174, 175, 177, 180, 181, 182, 183, 184,
	187, 189, 190, 191, 192, 193, 194, 201, 204, 210,
	211, 212, 213, 214, 215, 216, 218, 219, 220, 221,
	227, 230, 236, 237, 246, 254, 258, 505, 493, 0,
	450, 508, 424, 440, 517, 441, 444, 481, 409, 463,
	179, 438, 0, 428, 404, 434, 405, 426, 452, 125,
	456, 423, 495, 466, 507, 151, 515, 153, 472, 0,
	225, 167, 0, 0, 454, 497, 461, 490, 449, 482,
	414, 471, 509, 439, 479, 510, 54, 0, 0, 399,
	0, 0, 0, 0, 0, 0, 0, 0, 115, 0,
	476, 504, 436, 478, 480, 403, 473, 0, 407, 410,
	516, 500, 431, 432, 0, 0, 0, 0, 0, 0,
	0, 453, 462, 487, 447, 0, 0, 0, 0, 0,
	0, 0, 0, 429, 0, 470, 0, 0, 0, 411,
	408, 0, 0, 451, 0, 0, 0, 413, 0, 430,
	488, 0, 401, 133, 492, 499, 448, 255, 503, 446,
	445, 506, 198, 0, 229, 136, 150, 111, 97, 107,
	0, 135, 176, 205, 209, 496, 427, 435, 119, 433,
	207, 186, 245, 469, 188, 206, 154, 235, 199, 244,
	256, 257, 232, 253, 261, 222, 100, 231, 243, 116,
	217, 102, 241, 228, 165, 145, 146, 101, 0, 514,
	203, 124, 131, 121, 178, 238, 239, 120, 264, 108,
	252, 104, 109, 251, 172, 234, 242, 166, 159, 103,
	240, 164, 158, 149, 128, 138, 196, 156, 197, 139,
	169, 168, 170, 0, 406, 0, 226, 248, 265, 113,
	422, 233, 259, 260, 0, 0, 114, 132, 127, 195,
	171, 110, 141, 223, 148, 155, 202, 263, 185, 208,
	117, 247, 224, 418, 421, 416, 417, 464, 465, 511,
	512, 513, 489, 412, 0, 419, 420, 0, 494, 501,
	502, 468, 96, 105, 152, 262, 200, 130, 249, 402,
	415, 123, 425, 0, 0, 437, 442, 443, 455, 457,
	458, 459, 460, 467, 474, 475, 477, 483, 484, 485,
	486, 491, 498, 518, 98, 99, 106, 112, 118, 122,
	126, 129, 134, 137, 140, 142, 143, 144, 147, 157,
	160, 161, 162, 163, 173, 174, 175, 177, 180, 181,
	182, 183, 184, 187, 189, 190, 191, 192, 193, 194,
	201, 204, 210, 211, 212, 213, 214, 215, 216, 218,
	219, 220, 221, 227, 230, 236, 237, 246, 254, 258,
	505, 493, 0, 450, 508, 424, 440, 517, 441, 444,
	481, 409, 463, 179, 438, 0, 428, 404, 434, 405,
	426, 452, 125, 456, 423, 495, 466, 507, 151, 515,
	153, 472, 0, 225, 167, 0, 0, 454, 497, 461,
	490, 449, 482, 414, 471, 509, 439, 479, 510, 0,
	0, 0, 399, 0, 0, 0, 0, 0, 0, 0,
	0, 115, 0, 476, 504, 436, 478, 480, 403, 473,
	0, 407, 410, 516, 500, 431, 432, 0, 0, 0,
	0, 0, 0, 0, 453, 462, 487, 447, 0, 0,
	0, 0, 0, 0, 1233, 0, 429, 0, 470, 0,
	0, 0, 411, 408, 0, 0, 451, 0, 0, 0,
	413, 0, 430, 488, 0, 401, 133, 492, 499, 448,
	255, 503, 446, 445, 506, 198, 0, 229, 136, 150,
	111, 97, 107, 0, 135, 176, 205, 209, 496, 427,
	435, 119, 433, 207, 186, 245, 469, 188, 206, 154,
	235, 199, 244, 256, 257, 232, 253, 261, 222, 100,
	231, 243, 116, 217, 102, 241, 228, 165, 145, 146,
	101, 0, 514, 203, 124, 131, 121, 178, 238, 239,
	120, 264, 108, 252, 104, 109, 251, 172, 234, 242,
	166, 159, 103, 240, 164, 158, 149, 128, 138, 196,
	156, 197, 139, 169, 168, 170, 0, 406, 0, 226,
	248, 265, 113, 422, 233, 259, 260, 0, 0, 114,
	132, 127, 195, 171, 110, 141, 223, 148, 155, 202,
	263, 185, 208, 117, 247, 224, 418, 421, 416, 417,
	464, 465, 511, 512, 513, 489, 412, 0, 419, 420,
	0, 494, 501, 502, 468, 96, 105, 152, 262, 200,
	130, 249, 402, 415, 123, 425, 0, 0, 437, 442,
	443, 455, 457, 458, 459, 460, 467, 474, 475, 477,
	483, 484, 485, 486, 491, 498, 518, 98, 99, 106,
	112, 118, 122, 126, 129, 134, 137, 140, 142, 143,
	144, 147, 157, 160, 161, 162, 163, 173, 174, 175,
	177, 180, 181, 182, 183, 184, 187, 189, 190, 191,
	192, 193, 194, 201, 204, 210, 211, 212, 213, 214,
	215, 216, 218, 219, 220, 221, 227, 230, 236, 237,
	246, 254, 258, 505, 493, 0, 450, 508, 424, 440,
	517, 441, 444, 481, 409, 463, 179, 438, 0, 428,
	404, 434, 405, 426, 452, 125, 456, 423, 495, 466,
	507, 151, 515, 153, 472, 0, 225, 167, 0, 0,
	454, 497, 461, 490, 449, 482, 414, 471, 509, 439,
	479, 510, 0, 0, 0, 94, 0, 0, 0, 0,
	0, 0, 0, 0, 115, 0, 476, 504, 436, 478,
	480, 403, 473, 0, 407, 410, 516, 500, 431, 432,
	0, 0, 0, 0, 0, 0, 0, 453, 462, 487,
	447, 0, 0, 0, 0, 0, 0, 946, 0, 429,
	0, 470, 0, 0, 0, 411, 408, 0, 0, 451,
	0, 0, 0, 413, 0, 430, 488, 0, 401, 133,
	492, 499, 448, 255, 503, 446, 445, 506, 198, 0,
	229, 136, 150, 111, 97, 107, 0, 135, 176, 205,
	209, 496, 427, 435, 119, 433, 207, 186, 245, 469,
	188, 206, 154, 235, 199, 244, 256, 257, 232, 253,
	261, 222, 100, 231, 243, 116, 217, 102, 241, 228,
	165, 145, 146, 101, 0, 514, 203, 124, 131, 121,
	178, 238, 239, 120, 264, 108, 252, 104, 109, 251,
	172, 234, 242, 166, 159, 103, 240, 164, 158, 149,
	128, 138, 196, 156, 197, 139, 169, 168, 170, 0,
	406, 0, 226, 248, 265, 113, 422, 233, 259, 260,
	0, 0, 114, 132, 127, 195, 171, 110, 141, 223,
	148, 155, 202, 263, 185, 208, 117, 247, 224, 418,
	421, 416, 417, 464, 465, 511, 512, 513, 489, 412,
	0, 419, 420, 0, 494, 501, 502, 468, 96, 105,
	152, 262, 200, 130, 249, 402, 415, 123, 425, 0,
	0, 437, 442, 443, 455, 457, 458, 459, 460, 467,
	474, 475, 477, 483, 484, 485, 486, 491, 498, 518,
	98, 99, 106, 112, 118, 122, 126, 129, 134, 137,
	140, 142, 143, 144, 147, 157, 160, 161, 162, 163,
	173, 174, 175, 177, 180, 181, 182, 183, 184, 187,
	189, 190, 191, 192, 193, 194, 201, 204, 210, 211,
	212, 213, 214, 215, 216, 218, 219, 220, 221, 227,
	230, 236, 237, 246, 254, 258, 505, 493, 0, 450,
	508, 424, 440, 517, 441, 444, 481, 409, 463, 179,
	438, 0, 428, 404, 434, 405, 426, 452, 125, 456,
	423, 495, 466, 507, 151, 515, 153, 472, 0, 225,
	167, 0, 0, 454, 497, 461, 490, 449, 482, 414,
	471, 509, 439, 479, 510, 0, 0, 0, 321, 0,
	0, 0, 0, 0, 0, 0, 0, 115, 0, 476,
	504, 436, 478, 480, 403, 473, 0, 407, 410, 516,
	500, 431, 432, 0, 0, 0, 0, 0, 0, 0,
	453, 462, 487, 447, 0, 0, 0, 0, 0, 0,
	845, 0, 429, 0, 470, 0, 0, 0, 411, 408,
	0, 0, 451, 0, 0, 0, 413, 0, 430, 488,
	0, 401, 133, 492, 499, 448, 255, 503, 446, 445,
	506, 198, 0, 229, 136, 150, 111, 97, 107, 0,
	135, 176, 205, 209, 496, 427, 435, 119, 433, 207,
	186, 245, 469, 188, 206, 154, 235, 199, 244, 256,
	257, 232, 253, 261, 222, 100, 231, 243, 116, 217,
	102, 241, 228, 165, 145, 146, 101, 0, 514, 203,
	124, 131, 121, 178, 238, 239, 120, 264, 108, 252,
	104, 109, 251, 172, 234, 242, 166, 159, 103, 240,
	164, 158, 149, 128, 138, 196, 156, 197, 139, 169,
	168, 170, 0, 406, 0, 226, 248, 265, 113, 422,
	233, 259, 260, 0, 0, 114, 132, 127, 195, 171,
	110, 141, 223, 148, 155, 202, 263, 185, 208, 117,
	247, 224, 418, 421, 416, 417, 464, 465, 511, 512,
	513, 489, 412, 0, 419, 420, 0, 494, 501, 502,
	468, 96, 105, 152, 262, 200, 130, 249, 402, 415,
	123, 425, 0, 0, 437, 442, 443, 455, 457, 458,
	459, 460, 467, 474, 475, 477, 483, 484, 485, 486,
	491, 498, 518, 98, 99, 106, 112, 118, 122, 126,
	129, 134, 137, 140, 142, 143, 144, 147, 157, 160,
	161, 162, 163, 173, 174, 175, 177, 180, 181, 182,
	183, 184, 187, 189, 190, 191, 192, 193, 194, 201,
	204, 210, 211, 212, 213, 214, 215, 216, 218, 219,
	220, 221, 227, 230, 236, 237, 246, 254, 258, 505,
	493, 0, 450, 508, 424, 440, 517, 441, 444, 481,
	409, 463, 179, 438, 0, 428, 404, 434, 405, 426,
	452, 125, 456, 423, 495, 466, 507, 151, 515, 153,
	472, 0, 225, 167, 0, 0, 454, 497, 461, 490,
	449, 482, 414, 471, 509, 439, 479, 510, 0, 0,
	0, 399, 0, 0, 0, 0, 0, 0, 0, 0,
	115, 0, 476, 504, 436, 478, 480, 403, 473, 0,
	407, 410, 516, 500, 431, 432, 0, 0, 0, 0,
	0, 0, 0, 453, 462, 487, 447, 0, 0, 0,
	0, 0, 0, 0, 0, 429, 0, 470, 0, 0,
	0, 411, 408, 0, 0, 451, 0, 0, 0, 413,
	0, 430, 488, 0, 401, 133, 492, 499, 448, 255,
	503, 446, 445, 506, 198, 0, 229, 136, 150, 111,
	97, 107, 0, 135, 176, 205, 209, 496, 427, 435,
	119, 433, 207, 186, 245, 469, 188, 206, 154, 235,
	199, 244, 256, 257, 232, 253, 261, 222, 100, 231,
	243, 116, 217, 102, 241, 228, 165, 145, 146, 101,
	0, 514, 203, 124, 131, 121, 178, 238, 239, 120,
	264, 108, 252, 104, 109, 251, 172, 234, 242, 166,
	159, 103, 240, 164, 158, 149, 128, 138, 196, 156,
	197, 139, 169, 168, 170, 0, 406, 0, 226, 248,
	265, 113, 422, 233, 259, 260, 0, 0, 114, 132,
	127, 195, 171, 110, 141, 223, 148, 155, 202, 263,
	185, 208, 117, 247, 224, 418, 421, 416, 417, 464,
	465, 511, 512, 513, 489, 412, 0, 419, 420, 0,
	494, 501, 502, 468, 96, 105, 152, 262, 200, 130,
	249, 402, 415, 123, 425, 0, 0, 437, 442, 443,
	455, 457, 458, 459, 460, 467, 474, 475, 477, 483,
	484, 485, 486, 491, 498, 518, 98, 99, 106, 112,
	118, 122, 126, 129, 134, 137, 140, 142, 143, 144,
	147, 157, 160, 161, 162, 163, 173, 174, 175, 177,
	180, 181, 182, 183, 184, 187, 189, 190, 191, 192,
	193, 194, 201, 204, 210, 211, 212, 213, 214, 215,
	216, 218, 219, 220, 221, 227, 230, 236, 237, 246,
	254, 258, 505, 493, 0, 450, 508, 424, 440, 517,
	441, 444, 481, 409, 463, 179, 438, 0, 428, 404,
	434, 405, 426, 452, 125, 456, 423, 495, 466, 507,
	151, 515, 153, 472, 0, 225, 167, 0, 0, 454,
	497, 461, 490, 449, 482, 414, 471, 509, 439, 479,
	510, 0, 0, 0, 321, 0, 0, 0, 0, 0,
	0, 0, 0, 115, 0, 476, 504, 436, 478, 480,
	403, 473, 0, 407, 410, 516, 500, 431, 432, 0,
	0, 0, 0, 0, 0, 0, 453, 462, 487, 447,
	0, 0, 0, 0, 0, 0, 0, 0, 429, 0,
	470, 0, 0, 0, 411, 408, 0, 0, 451, 0,
	0, 0, 413, 0, 430, 488, 0, 401, 133, 492,
	499, 448, 255, 503, 446, 445, 506, 198, 0, 229,
	136, 150, 111, 97, 107, 0, 135, 176, 205, 209,
	496, 427, 435, 119, 433, 207, 186, 245, 469, 188,
	206, 154, 235, 199, 244, 256, 257, 232, 253, 261,
	222, 100, 231, 243, 116, 217, 102, 241, 228, 165,
	145, 146, 101, 0, 514, 203, 124, 131, 121, 178,
	238, 239, 120, 264, 108, 252, 104, 109, 251, 172,
	234, 242, 166, 159, 103, 240, 164, 158, 149, 128,
	138, 196, 156, 197, 139, 169, 168, 170, 0, 406,
	0, 226, 248, 265, 113, 422, 233, 259, 260, 0,
	0, 114, 132, 127, 195, 171, 110, 141, 223, 148,
	155, 202, 263, 185, 208, 117, 247, 224, 418, 421,
	416, 417, 464, 465, 511, 512, 513, 489, 412, 0,
	419, 420, 0, 494, 501, 502, 468, 96, 105, 152,
	262, 200, 130, 249, 402, 415, 123, 425, 0, 0,
	437, 442, 443, 455, 457, 458, 459, 460, 467, 474,
	475, 477, 483, 484, 485, 486, 491, 498, 518, 98,
	99, 106, 112, 118, 122, 126, 129, 134, 137, 140,
	142, 143, 144, 147, 157, 160, 161, 162, 163, 173,
	174, 175, 177, 180, 181, 182, 183, 184, 187, 189,
	190, 191, 192, 193, 194, 201, 204, 210, 211, 212,
	213, 214, 215, 216, 218, 219, 220, 221, 227, 230,
	236, 237, 246, 254, 258, 505, 493, 0, 450, 508,
	424, 440, 517, 441, 444, 481, 409, 463, 179, 438,
	0, 428, 404, 434, 405, 426, 452, 125, 456, 423,
	495, 466, 507, 151, 515, 153, 472, 0, 225, 167,
	0, 0, 454, 497, 461, 490, 449, 482, 414, 471,
	509, 439, 479, 510, 0, 0, 0, 399, 0, 0,
	0, 0, 0, 0, 0, 0, 115, 0, 476, 504,
	436, 478, 480, 403, 473, 0, 407, 410, 516, 500,
	431, 432, 0, 0, 0, 0, 0, 0, 0, 453,
	462, 487, 447, 0, 0, 0, 0, 0, 0, 0,
	0, 429, 0, 470, 0, 0, 0, 411, 408, 0,
	0, 451, 0, 0, 0, 413, 0, 430, 488, 0,
	401, 133, 492, 499, 448, 255, 503, 446, 445, 506,
	198, 0, 229, 136, 150, 111, 97, 107, 0, 135,
	176, 205, 209, 496, 427, 435, 119, 433, 207, 186,
	245, 469, 188, 206, 154, 235, 199, 244, 256, 257,
	232, 253, 261, 222, 100, 231, 243, 116, 217, 102,
	241, 228, 165, 145, 146, 101, 0, 514, 203, 124,
	131, 121, 178, 238, 239, 120, 264, 108, 252, 104,
	397, 251, 172, 234, 242, 166, 159, 103, 240, 164,
	158, 149, 128, 138, 196, 156, 197, 139, 169, 168,
	170, 0, 406, 0, 226, 248, 265, 113, 422, 233,
	259, 260, 0, 0, 114, 132, 127, 195, 398, 396,
	141, 223, 148, 155, 202, 263, 185, 208, 117, 247,
	224, 418, 421, 416, 417, 464, 465, 511, 512, 513,
	489, 412, 0, 419, 420, 0, 494, 501, 502, 468,
	96, 105, 152, 262, 200, 130, 249, 402, 415, 123,
	425, 0, 0, 437, 442, 443, 455, 457, 458, 459,
	460, 467, 474, 475, 477, 483, 484, 485, 486, 491,
	498, 518, 98, 99, 106, 112, 118, 122, 126, 129,
	134, 137, 140, 142, 143, 144, 147, 157, 160, 161,
	162, 163, 173, 174, 175, 177, 180, 181, 182, 183,
	184, 187, 189, 190, 191, 192, 193, 194, 201, 204,
	210, 211, 212, 213, 214, 215, 216, 218, 219, 220,
	221, 227, 230, 236, 237, 246, 254, 258, 505, 493,
	0, 450, 508, 424, 440, 517, 441, 444, 481, 409,
	463, 179, 438, 0, 428, 404, 434, 405, 426, 452,
	125, 456, 423, 495, 466, 507, 151, 515, 153, 472,
	0, 225, 167, 0, 0, 454, 497, 461, 490, 449,
	482, 414, 471, 509, 439, 479, 510, 0, 0, 0,
	94, 0, 0, 0, 0, 0, 0, 0, 0, 115,
	0, 476, 504, 436, 478, 480, 403, 473, 0, 407,
	410, 516, 500, 431, 432, 0, 0, 0, 0, 0,
	0, 0, 453, 462, 487, 447, 0, 0, 0, 0,
	0, 0, 0, 0, 429, 0, 470, 0, 0, 0,
	411, 408, 0, 0, 451, 0, 0, 0, 413, 0,
	430, 488, 0, 401, 133, 492, 499, 448, 255, 503,
	446, 445, 506, 198, 0, 229, 136, 150, 111, 97,
	107, 0, 135, 176, 205, 209, 496, 427, 435, 119,
	433, 207, 186, 245, 469, 188, 206, 154, 235, 199,
	244, 256, 257, 232, 253, 261, 222, 100, 231, 243,
	116, 217, 102, 241, 228, 165, 145, 146, 101, 0,
	514, 203, 124, 131, 121, 178, 238, 239, 120, 264,
	108, 252, 104, 109, 251, 172, 234, 242, 166, 159,
	103, 240, 164, 158, 149, 128, 138, 196, 156, 197,
	139, 169, 168, 170, 0, 406, 0, 226, 248, 265,
	113, 422, 233, 259, 260, 0, 0, 114, 132, 127,
	195, 171, 110, 141, 223, 148, 155, 202, 263, 185,
	208, 117, 247, 224, 418, 421, 416, 417, 464, 465,
	511, 512, 513, 489, 412, 0, 419, 420, 0, 494,
	501, 502, 468, 96, 105, 152, 262, 200, 130, 249,
	402, 415, 123, 425, 0, 0, 437, 442, 443, 455,
	457, 458, 459, 460, 467, 474, 475, 477, 483, 484,
	485, 486, 491, 498, 518, 98, 99, 106, 112, 118,
	122, 126, 129, 134, 137, 140, 142, 143, 144, 147,
	157, 160, 161, 162, 163, 173, 174, 175, 177, 180,
	181, 182, 183, 184, 187, 189, 190, 191, 192, 193,
	194, 201, 204, 210, 211, 212, 213, 214, 215, 216,
	218, 219, 220, 221, 227, 230, 236, 237, 246, 254,
	258, 505, 493, 0, 450, 508, 424, 440, 517, 441,
	444, 481, 409, 463, 179, 438, 0, 428, 404, 434,
	405, 426, 452, 125, 456, 423, 495, 466, 507, 151,
	515, 153, 472, 0, 225, 167, 0, 0, 454, 497,
	461, 490, 449, 482, 414, 471, 509, 439, 479, 510,
	0, 0, 0, 399, 0, 0, 0, 0, 0, 0,
	0, 0, 115, 0, 476, 504, 436, 478, 480, 403,
	473, 0, 407, 410, 516, 500, 431, 432, 0, 0,
	0, 0, 0, 0, 0, 453, 462, 487, 447, 0,
	0, 0, 0, 0, 0, 0, 0, 429, 0, 470,
	0, 0, 0, 411, 408, 0, 0, 451, 0, 0,
	0, 413, 0, 430, 488, 0, 401, 133, 492, 499,
	448, 255, 503, 446, 445, 506, 198, 0, 229, 136,
	150, 111, 97, 107, 0, 135, 176, 205, 209, 496,
	427, 435, 119, 433, 207, 186, 245, 469, 188, 206,
	154, 235, 199, 244, 256, 257, 232, 253, 261, 222,
	100, 231, 708, 116, 217, 102, 241, 228, 165, 145,
	146, 101, 0, 514, 203, 124, 131, 121, 178, 238,
	239, 120, 264, 108, 252, 104, 397, 251, 172, 234,
	242, 166, 159, 103, 240, 164, 158, 149, 128, 138,
	196, 156, 197, 139, 169, 168, 170, 0, 406, 0,
	226, 248, 265, 113, 422, 233, 259, 260, 0, 0,
	114, 132, 127, 195, 398, 396, 141, 223, 148, 155,
	202, 263, 185, 208, 117, 247, 224, 418, 421, 416,
	417, 464, 465, 511, 512, 513, 489, 412, 0, 419,
	420, 0, 494, 501, 502, 468, 96, 105, 152, 262,
	200, 130, 249, 402, 415, 123, 425, 0, 0, 437,
	442, 443, 455, 457, 458, 459, 460, 467, 474, 475,
	477, 483, 484, 485, 486, 491, 498, 518, 98, 99,
	106, 112, 118, 122, 126, 129, 134, 137, 140, 142,
	143, 144, 147, 157, 160, 161, 162, 163, 173, 174,
	175, 177, 180, 181, 182, 183, 184, 187, 189, 190,
	191, 192, 193, 194, 201, 204, 210, 211, 212, 213,
	214, 215, 216, 218, 219, 220, 221, 227, 230, 236,
	237, 246, 254, 258, 505, 493, 0, 450, 508, 424,
	440, 517, 441, 444, 481, 409, 463, 179, 438, 0,
	428, 404, 434, 405, 426, 452, 125, 456, 423, 495,
	466, 507, 151, 515, 153, 472, 0, 225, 167, 0,
	0, 454, 497, 461, 490, 449, 482, 414, 471, 509,
	439, 479, 510, 0, 0, 0, 399, 0, 0, 0,
	0, 0, 0, 0, 0, 115, 0, 476, 504, 436,
	478, 480, 403, 473, 0, 407, 410, 516, 500, 431,
	432, 0, 0, 0, 0, 0, 0, 0, 453, 462,
	487, 447, 0, 0, 0, 0, 0, 0, 0, 0,
	429, 0, 470, 0, 0, 0, 411, 408, 0, 0,
	451, 0, 0, 0, 413, 0, 430, 488, 0, 401,
	133, 492, 499, 448, 255, 503, 446, 445, 506, 198,
	0, 229, 136, 150, 111, 97, 107, 0, 135, 176,
	205, 209, 496, 427, 435, 119, 433, 207, 186, 245,
	469, 188, 206, 154, 235, 199, 244, 256, 257, 232,
	253, 261, 222, 100, 231, 388, 116, 217, 102, 241,
	228, 165, 145, 146, 101, 0, 514, 203, 124, 131,
	121, 178, 238, 239, 120, 264, 108, 252, 104, 397,
	251, 172, 234, 242, 166, 159, 103, 240, 164, 158,
	149, 128, 138, 196, 156, 197, 139, 169, 168, 170,
	0, 406, 0, 226, 248, 265, 113, 422, 233, 259,
	260, 0, 0, 114, 132, 127, 195, 398, 396, 391,
	390, 148, 155, 202, 263, 185, 208, 117, 247, 224,
	418, 421, 416, 417, 464, 465, 511, 512, 513, 489,
	412, 0, 419, 420, 0, 494, 501, 502, 468, 96,
	105, 152, 262, 200, 130, 249, 402, 415, 123, 425,
	0, 0, 437, 442, 443, 455, 457, 458, 459, 460,
	467, 474, 475, 477, 483, 484, 485, 486, 491, 498,
	518, 98, 99, 106, 112, 118, 122, 126, 129, 134,
	137, 140, 142, 143, 144, 147, 157, 160, 161, 162,
	163, 173, 174, 175, 177, 180, 181, 182, 183, 184,
	187, 189, 190, 191, 192, 193, 194, 201, 204, 210,
	211, 212, 213, 214, 215, 216, 218, 219, 220, 221,
	227, 230, 236, 237, 246, 254, 258, 179, 0, 0,
	0, 0, 323, 0, 0, 0, 125, 0, 320, 0,
	0, 0, 151, 363, 153, 0, 0, 225, 167, 0,
	0, 0, 0, 354, 355, 0, 0, 0, 0, 0,
	0, 953, 0, 54, 0, 0, 321, 342, 341, 344,
	345, 346, 347, 0, 0, 115, 343, 348, 349, 350,
	954, 0, 0, 318, 335, 0, 362, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 332, 333, 0, 0,
	0, 0, 376, 0, 334, 0, 0, 329, 330, 331,
	336, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 0, 0, 0, 255, 0, 0, 374, 0, 198,
	0, 229, 136, 150, 111, 97, 107, 0, 135, 176,
	205, 209, 0, 0, 0, 119, 0, 207, 186, 245,
	0, 188, 206, 154, 235, 199, 244, 256, 257, 232,
	253, 261, 222, 100, 231, 243, 116, 217, 102, 241,
	228, 165, 145, 146, 101, 0, 250, 203, 124, 131,
	121, 178, 238, 239, 120, 264, 108, 252, 104, 109,
	251, 172, 234, 242, 166, 159, 103, 240, 164, 158,
	149, 128, 138, 196, 156, 197, 139, 169, 168, 170,
	0, 0, 0, 226, 248, 265, 113, 0, 233, 259,
	260, 0, 0, 114, 132, 127, 195, 171, 110, 141,
	223, 148, 155, 202, 263, 185, 208, 117, 247, 224,
	364, 375, 370, 371, 368, 369, 367, 366, 365, 377,
	356, 357, 358, 359, 361, 0, 372, 373, 360, 96,
	105, 152, 262, 200, 130, 249, 0, 0, 123, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 99, 106, 112, 118, 122, 126, 129, 134,
	137, 140, 142, 143, 144, 147, 157, 160, 161, 162,
	163, 173, 174, 175, 177, 180, 181, 182, 183, 184,
	187, 189, 190, 191, 192, 193, 194, 201, 204, 210,
	211, 212, 213, 214, 215, 216, 218, 219, 220, 221,
	227, 230, 236, 237, 246, 254, 258, 179, 0, 0,
	0, 0, 323, 0, 0, 0, 125, 0, 320, 0,
	0, 0, 151, 363, 153, 0, 0, 225, 167, 0,
	0, 0, 0, 354, 355, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 580, 321, 342, 341, 344,
	345, 346, 347, 0, 0, 115, 343, 348, 349, 350,
	0, 0, 0, 318, 335, 0, 362, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 332, 333, 0, 0,
	0, 0, 376, 0, 334, 0, 0, 329, 330, 331,
	336, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 0, 0, 0, 255, 0, 0, 374, 0, 198,
	0, 229, 136, 150, 111, 97, 107, 0, 135, 176,
	205, 209, 0, 0, 0, 119, 0, 207, 186, 245,
	0, 188, 206, 154, 235, 199, 244, 256, 257, 232,
	253, 261, 222, 100, 231, 243, 116, 217, 102, 241,
	228, 165, 145, 146, 101, 0, 250, 203, 124, 131,
	121, 178, 238, 239, 120, 264, 108, 252, 104, 109,
	251, 172, 234, 242, 166, 159, 103, 240, 164, 158,
	149, 128, 138, 196, 156, 197, 139, 169, 168, 170,
	0, 0, 0, 226, 248, 265, 113, 0, 233, 259,
	260, 0, 0, 114, 132, 127, 195, 171, 110, 141,
	223, 148, 155, 202, 263, 185, 208, 117, 247, 224,
	364, 375, 370, 371, 368, 369, 367, 366, 365, 377,
	356, 357, 358, 359, 361, 0, 372, 373, 360, 96,
	105, 152, 262, 200, 130, 249, 0, 0, 123, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 99, 106, 112, 118, 122, 126, 129, 134,
	137, 140, 142, 143, 144, 147, 157, 160, 161, 162,
	163, 173, 174, 175, 177, 180, 181, 182, 183, 184,
	187, 189, 190, 191, 192, 193, 194, 201, 204, 210,
	211, 212, 213, 214, 215, 216, 218, 219, 220, 221,
	227, 230, 236, 237, 246, 254, 258, 179, 0, 0,
	0, 0, 323, 0, 0, 0, 125, 0, 320, 0,
	0, 0, 151, 363, 153, 0, 0, 225, 167, 0,
	0, 0, 0, 354, 355, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 0, 321, 342, 341, 344,
	345, 346, 347, 0, 0, 115, 343, 348, 349, 350,
	0, 0, 0, 318, 335, 0, 362, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 332, 333, 314, 0,
	0, 0, 376, 0, 334, 0, 0, 329, 330, 331,
	336, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 0, 0, 0, 255, 0, 0, 374, 0, 198,
	0, 229, 136, 150, 111, 97, 107, 0, 135, 176,
	205, 209, 0, 0, 0, 119, 0, 207, 186, 245,
	0, 188, 206, 154, 235, 199, 244, 256, 257, 232,
	253, 261, 222, 100, 231, 243, 116, 217, 102, 241,
	228, 165, 145, 146, 101, 0, 250, 203, 124, 131,
	121, 178, 238, 239, 120, 264, 108, 252, 104, 109,
	251, 172, 234, 242, 166, 159, 103, 240, 164, 158,
	149, 128, 138, 196, 156, 197, 139, 169, 168, 170,
	0, 0, 0, 226, 248, 265, 113, 0, 233, 259,
	260, 0, 0, 114, 132, 127, 195, 171, 110, 141,
	223, 148, 155, 202, 263, 185, 208, 117, 247, 224,
	364, 375, 370, 371, 368, 369, 367, 366, 365, 377,
	356, 357, 358, 359, 361, 0, 372, 373, 360, 96,
	105, 152, 262, 200, 130, 249, 0, 0, 123, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 99, 106, 112, 118, 122, 126, 129, 134,
	137, 140, 142, 143, 144, 147, 157, 160, 161, 162,
	163, 173, 174, 175, 177, 180, 181, 182, 183, 184,
	187, 189, 190, 191, 192, 193, 194, 201, 204, 210,
	211, 212, 213, 214, 215, 216, 218, 219, 220, 221,
	227, 230, 236, 237, 246, 254, 258, 179, 0, 0,
	0, 0, 323, 0, 0, 0, 125, 0, 320, 0,
	0, 0, 151, 363, 153, 0, 0, 225, 167, 0,
	0, 0, 0, 354, 355, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 0, 321, 342, 894, 344,
	345, 346, 347, 0, 0, 115, 343, 348, 349, 350,
	0, 0, 0, 318, 335, 0, 362, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 332, 333, 314, 0,
	0, 0, 376, 0, 334, 0, 0, 329, 330, 331,
	336, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 0, 0, 0, 255, 0, 0, 374, 0, 198,
	0, 229, 136, 150, 111, 97, 107, 0, 135, 176,
	205, 209, 0, 0, 0, 119, 0, 207, 186, 245,
	0, 188, 206, 154, 235, 199, 244, 256, 257, 232,
	253, 261, 222, 100, 231, 243, 116, 217, 102, 241,
	228, 165, 145, 146, 101, 0, 250, 203, 124, 131,
	121, 178, 238, 239, 120, 264, 108, 252, 104, 109,
	251, 172, 234, 242, 166, 159, 103, 240, 164, 158,
	149, 128, 138, 196, 156, 197, 139, 169, 168, 170,
	0, 0, 0, 226, 248, 265, 113, 0, 233, 259,
	260, 0, 0, 114, 132, 127, 195, 171, 110, 141,
	223, 148, 155, 202, 263, 185, 208, 117, 247, 224,
	364, 375, 370, 371, 368, 369, 367, 366, 365, 377,
	356, 357, 358, 359, 361, 0, 372, 373, 360, 96,
	105, 152, 262, 200, 130, 249, 0, 0, 123, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 99, 106, 112, 118, 122, 126, 129, 134,
	137, 140, 142, 143, 144, 147, 157, 160, 161, 162,
	163, 173, 174, 175, 177, 180, 181, 182, 183, 184,
	187, 189, 190, 191, 192, 193, 194, 201, 204, 210,
	211, 212, 213, 214, 215, 216, 218, 219, 220, 221,
	227, 230, 236, 237, 246, 254, 258, 179, 0, 0,
	0, 0, 323, 0, 0, 0, 125, 0, 320, 0,
	0, 0, 151, 363, 153, 0, 0, 225, 167, 0,
	0, 0, 0, 354, 355, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 0, 321, 342, 891, 344,
	345, 346, 347, 0, 0, 115, 343, 348, 349, 350,
	0, 0, 0, 318, 335, 0, 362, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 332, 333, 314, 0,
	0, 0, 376, 0, 334, 0, 0, 329, 330, 331,
	336, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 0, 0, 0, 255, 0, 0, 374, 0, 198,
	0, 229, 136, 150, 111, 97, 107, 0, 135, 176,
	205, 209, 0, 0, 0, 119, 0, 207, 186, 245,
	0, 188, 206, 154, 235, 199, 244, 256, 257, 232,
	253, 261, 222, 100, 231, 243, 116, 217, 102, 241,
	228, 165, 145, 146, 101, 0, 250, 203, 124, 131,
	121, 178, 238, 239, 120, 264, 108, 252, 104, 109,
	251, 172, 234, 242, 166, 159, 103, 240, 164, 158,
	149, 128, 138, 196, 156, 197, 139, 169, 168, 170,
	0, 0, 0, 226, 248, 265, 113, 0, 233, 259,
	260, 0, 0, 114, 132, 127, 195, 171, 110, 141,
	223, 148, 155, 202, 263, 185, 208, 117, 247, 224,
	364, 375, 370, 371, 368, 369, 367, 366, 365, 377,
	356, 357, 358, 359, 361, 0, 372, 373, 360, 96,
	105, 152, 262, 200, 130, 249, 0, 0, 123, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 99, 106, 112, 118, 122, 126, 129, 134,
	137, 140, 142, 143, 144, 147, 157, 160, 161, 162,
	163, 173, 174, 175, 177, 180, 181, 182, 183, 184,
	187, 189, 190, 191, 192, 193, 194, 201, 204, 210,
	211, 212, 213, 214, 215, 216, 218, 219, 220, 221,
	227, 230, 236, 237, 246, 254, 258, 24, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 179,
	0, 0, 0, 0, 323, 0, 0, 0, 125, 0,
	320, 0, 0, 0, 151, 363, 153, 0, 0, 225,
	167, 0, 0, 0, 0, 354, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 0, 321, 342,
	341, 344, 345, 346, 347, 0, 0, 115, 343, 348,
	349, 350, 0, 0, 0, 318, 335, 0, 362, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 332, 333,
	0, 0, 0, 0, 376, 0, 334, 0, 0, 329,
	330, 331, 336, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 0, 0, 0, 255, 0, 0, 374,
	0, 198, 0, 229, 136, 150, 111, 97, 107, 0,
	135, 176, 205, 209, 0, 0, 0, 119, 0, 207,
	186, 245, 0, 188, 206, 154, 235, 199, 244, 256,
	257, 232, 253, 261, 222, 100, 231, 243, 116, 217,
	102, 241, 228, 165, 145, 146, 101, 0, 250, 203,
	124, 131, 121, 178, 238, 239, 120, 264, 108, 252,
	104, 109, 251, 172, 234, 242, 166, 159, 103, 240,
	164, 158, 149, 128, 138, 196, 156, 197, 139, 169,
	168, 170, 0, 0, 0, 226, 248, 265, 113, 0,
	233, 259, 260, 0, 0, 114, 132, 127, 195, 171,
	110, 141, 223, 148, 155, 202, 263, 185, 208, 117,
	247, 224, 364, 375, 370, 371, 368, 369, 367, 366,
	365, 377, 356, 357, 358, 359, 361, 0, 372, 373,
	360, 96, 105, 152, 262, 200, 130, 249, 0, 0,
	123, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 98, 99, 106, 112, 118, 122, 126,
	129, 134, 137, 140, 142, 143, 144, 147, 157, 160,
	161, 162, 163, 173, 174, 175, 177, 180, 181, 182,
	183, 184, 187, 189, 190, 191, 192, 193, 194, 201,
	204, 210, 211, 212, 213, 214, 215, 216, 218, 219,
	220, 221, 227, 230, 236, 237, 246, 254, 258, 179,
	0, 0, 0, 0, 323, 0, 0, 0, 125, 0,
	320, 0, 0, 0, 151, 363, 153, 0, 0, 225,
	167, 0, 0, 0, 0, 354, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 0, 321, 342,
	341, 344, 345, 346, 347, 0, 0, 115, 343, 348,
	349, 350, 0, 0, 0, 318, 335, 0, 362, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 332, 333,
	0, 0, 0, 0, 376, 0, 334, 0, 0, 329,
	330, 331, 336, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 0, 0, 0, 255, 0, 0, 374,
	0, 198, 0, 229, 136, 150, 111, 97, 107, 0,
	135, 176, 205, 209, 0, 0, 0, 119, 0, 207,
	186, 245, 0, 188, 206, 154, 235, 199, 244, 256,
	257, 232, 253, 261, 222, 100, 231, 243, 116, 217,
	102, 241, 228, 165, 145, 146, 101, 0, 250, 203,
	124, 131, 121, 178, 238, 239, 120, 264, 108, 252,
	104, 109, 251, 172, 234, 242, 166, 159, 103, 240,
	164, 158, 149, 128, 138, 196, 156, 197, 139, 169,
	168, 170, 0, 0, 0, 226, 248, 265, 113, 0,
	233, 259, 260, 0, 0, 114, 132, 127, 195, 171,
	110, 141, 223, 148, 155, 202, 263, 185, 208, 117,
	247, 224, 364, 375, 370, 371, 368, 369, 367, 366,
	365, 377, 356, 357, 358, 359, 361, 0, 372, 373,
	360, 96, 105, 152, 262, 200, 130, 249, 0, 0,
	123, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 98, 99, 106, 112, 118, 122, 126,
	129, 134, 137, 140, 142, 143, 144, 147, 157, 160,
	161, 162, 163, 173, 174, 175, 177, 180, 181, 182,
	183, 184, 187, 189, 190, 191, 192, 193, 194, 201,
	204, 210, 211, 212, 213, 214, 215, 216, 218, 219,
	220, 221, 227, 230, 236, 237, 246, 254, 258, 179,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	0, 0, 0, 0, 151, 363, 153, 0, 0, 225,
	167, 0, 0, 0, 0, 354, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 0, 321, 342,
	341, 344, 345, 346, 347, 0, 0, 115, 343, 348,
	349, 350, 0, 0, 0, 0, 335, 0, 362, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 332, 333,
	0, 0, 0, 0, 376, 0, 334, 0, 0, 329,
	330, 331, 336, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 0, 0, 0, 255, 0, 0, 374,
	0, 198, 0, 229, 136, 150, 111, 97, 107, 0,
	135, 176, 205, 209, 0, 0, 0, 119, 0, 207,
	186, 245, 1529, 188, 206, 154, 235, 199, 244, 256,
	257, 232, 253, 261, 222, 100, 231, 243, 116, 217,
	102, 241, 228, 165, 145, 146, 101, 0, 250, 203,
	124, 131, 121, 178, 238, 239, 120, 264, 108, 252,
	104, 109, 251, 172, 234, 242, 166, 159, 103, 240,
	164, 158, 149, 128, 138, 196, 156, 197, 139, 169,
	168, 170, 0, 0, 0, 226, 248, 265, 113, 0,
	233, 259, 260, 0, 0, 114, 132, 127, 195, 171,
	110, 141, 223, 148, 155, 202, 263, 185, 208, 117,
	247, 224, 364, 375, 370, 371, 368, 369, 367, 366,
	365, 377, 356, 357, 358, 359, 361, 0, 372, 373,
	360, 96, 105, 152, 262, 200, 130, 249, 0, 0,
	123, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 98, 99, 106, 112, 118, 122, 126,
	129, 134, 137, 140, 142, 143, 144, 147, 157, 160,
	161, 162, 163, 173, 174, 175, 177, 180, 181, 182,
	183, 184, 187, 189, 190, 191, 192, 193, 194, 201,
	204, 210, 211, 212, 213, 214, 215, 216, 218, 219,
	220, 221, 227, 230, 236, 237, 246, 254, 258, 179,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	0, 0, 0, 0, 151, 363, 153, 0, 0, 225,
	167, 0, 0, 0, 0, 354, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 580, 321, 342,
	341, 344, 345, 346, 347, 0, 0, 115, 343, 348,
	349, 350, 0, 0, 0, 0, 335, 0, 362, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 332, 333,
	0, 0, 0, 0, 376, 0, 334, 0, 0, 329,
	330, 331, 336, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 0, 0, 0, 255, 0, 0, 374,
	0, 198, 0, 229, 136, 150, 111, 97, 107, 0,
	135, 176, 205, 209, 0, 0, 0, 119, 0, 207,
	186, 245, 0, 188, 206, 154, 235, 199, 244, 256,
	257, 232, 253, 261, 222, 100, 231, 243, 116, 217,
	102, 241, 228, 165, 145, 146, 101, 0, 250, 203,
	124, 131, 121, 178, 238, 239, 120, 264, 108, 252,
	104, 109, 251, 172, 234, 242, 166, 159, 103, 240,
	164, 158, 149, 128, 138, 196, 156, 197, 139, 169,
	168, 170, 0, 0, 0, 226, 248, 265, 113, 0,
	233, 259, 260, 0, 0, 114, 132, 127, 195, 171,
	110, 141, 223, 148, 155, 202, 263, 185, 208, 117,
	247, 224, 364, 375, 370, 371, 368, 369, 367, 366,
	365, 377, 356, 357, 358, 359, 361, 0, 372, 373,
	360, 96, 105, 152, 262, 200, 130, 249, 0, 0,
	123, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 98, 99, 106, 112, 118, 122, 126,
	129, 134, 137, 140, 142, 143, 144, 147, 157, 160,
	161, 162, 163, 173, 174, 175, 177, 180, 181, 182,
	183, 184, 187, 189, 190, 191, 192, 193, 194, 201,
	204, 210, 211, 212, 213, 214, 215, 216, 218, 219,
	220, 221, 227, 230, 236, 237, 246, 254, 258, 179,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	0, 0, 0, 0, 151, 363, 153, 0, 0, 225,
	167, 0, 0, 0, 0, 354, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 0, 321, 342,
	341, 344, 345, 346, 347, 0, 0, 115, 343, 348,
	349, 350, 0, 0, 0, 0, 335, 0, 362, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 332, 333,
	0, 0, 0, 0, 376, 0, 334, 0, 0, 329,
	330, 331, 336, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 0, 0, 0, 255, 0, 0, 374,
	0, 198, 0, 229, 136, 150, 111, 97, 107, 0,
	135, 176, 205, 209, 0, 0, 0, 119, 0, 207,
	186, 245, 0, 188, 206, 154, 235, 199, 244, 256,
	257, 232, 253, 261, 222, 100, 231, 243, 116, 217,
	102, 241, 228, 165, 145, 146, 101, 0, 250, 203,
	124, 131, 121, 178, 238, 239, 120, 264, 108, 252,
	104, 109, 251, 172, 234, 242, 166, 159, 103, 240,
	164, 158, 149, 128, 138, 196, 156, 197, 139, 169,
	168, 170, 0, 0, 0, 226, 248, 265, 113, 0,
	233, 259, 260, 0, 0, 114, 132, 127, 195, 171,
	110, 141, 223, 148, 155, 202, 263, 185, 208, 117,
	247, 224, 364, 375, 370, 371, 368, 369, 367, 366,
	365, 377, 356, 357, 358, 359, 361, 0, 372, 373,
	360, 96, 105, 152, 262, 200, 130, 249, 0, 0,
	123, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 98, 99, 106, 112, 118, 122, 126,
	129, 134, 137, 140, 142, 143, 144, 147, 157, 160,
	161, 162, 163, 173, 174, 175, 177, 180, 181, 182,
	183, 184, 187, 189, 190, 191, 192, 193, 194, 201,
	204, 210, 211, 212, 213, 214, 215, 216, 218, 219,
	220, 221, 227, 230, 236, 237, 246, 254, 258, 179,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	0, 0, 0, 0, 151, 0, 153, 0, 0, 225,
	167, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 399, 0,
	0, 0, 0, 0, 0, 0, 0, 115, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 615, 614, 624, 625, 617, 618,
	619, 620, 621, 622, 623, 616, 0, 0, 626, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 0, 0, 0, 255, 0, 0, 0,
	0, 198, 0, 229, 136, 150, 111, 97, 107, 0,
	135, 176, 205, 209, 0, 0, 0, 119, 0, 207,
	186, 245, 0, 188, 206, 154, 235, 199, 244, 256,
	257, 232, 253, 261, 222, 100, 231, 243, 116, 217,
	102, 241, 228, 165, 145, 146, 101, 0, 250, 203,
	124, 131, 121, 178, 238, 239, 120, 264, 108, 252,
	104, 109, 251, 172, 234, 242, 166, 159, 103, 240,
	164, 158, 149, 128, 138, 196, 156, 197, 139, 169,
	168, 170, 0, 0, 0, 226, 248, 265, 113, 0,
	233, 259, 260, 0, 0, 114, 132, 127, 195, 171,
	110, 141, 223, 148, 155, 202, 263, 185, 208, 117,
	247, 224, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 105, 152, 262, 200, 130, 249, 0, 0,
	123, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 98, 99, 106, 112, 118, 122, 126,
	129, 134, 137, 140, 142, 143, 144, 147, 157, 160,
	161, 162, 163, 173, 174, 175, 177, 180, 181, 182,
	183, 184, 187, 189, 190, 191, 192, 193, 194, 201,
	204, 210, 211, 212, 213, 214, 215, 216, 218, 219,
	220, 221, 227, 230, 236, 237, 246, 254, 258, 179,
	0, 0, 0, 603, 0, 0, 0, 0, 125, 0,
	0, 0, 0, 0, 151, 0, 153, 0, 0, 225,
	167, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 399, 0,
	605, 0, 0, 0, 0, 0, 0, 115, 0, 0,
	0, 0, 0, 600, 599, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	601, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 0, 0, 0, 255, 0, 0, 0,
	0, 198, 0, 229, 136, 150, 111, 97, 107, 0,
	135, 176, 205, 209, 0, 0, 0, 119, 0, 207,
	186, 245, 0, 188, 206, 154, 235, 199, 244, 256,
	257, 232, 253, 261, 222, 100, 231, 243, 116, 217,
	102, 241, 228, 165, 145, 146, 101, 0, 250, 203,
	124, 131, 121, 178, 238, 239, 120, 264, 108, 252,
	104, 109, 251, 172, 234, 242, 166, 159, 103, 240,
	164, 158, 149, 128, 138, 196, 156, 197, 139, 169,
	168, 170, 0, 0, 0, 226, 248, 265, 113, 0,
	233, 259, 260, 0, 0, 114, 132, 127, 195, 171,
	110, 141, 223, 148, 155, 202, 263, 185, 208, 117,
	247, 224, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 105, 152, 262, 200, 130, 249, 0, 0,
	123, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 98, 99, 106, 112, 118, 122, 126,
	129, 134, 137, 140, 142, 143, 144, 147, 157, 160,
	161, 162, 163, 173, 174, 175, 177, 180, 181, 182,
	183, 184, 187, 189, 190, 191, 192, 193, 194, 201,
	204, 210, 211, 212, 213, 214, 215, 216, 218, 219,
	220, 221, 227, 230, 236, 237, 246, 254, 258, 179,
	0, 0, 0, 936, 0, 0, 0, 0, 125, 0,
	0, 0, 0, 0, 151, 0, 153, 0, 0, 225,
	167, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 0,
	938, 0, 0, 0, 0, 0, 0, 115, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 0, 0, 0, 255, 0, 0, 0,
	0, 198, 0, 229, 136, 150, 111, 97, 107, 0,
	135, 176, 205, 209, 0, 0, 0, 119, 0, 207,
	186, 245, 0, 188, 206, 154, 235, 199, 244, 256,
	257, 232, 253, 261, 222, 100, 231, 243, 116, 217,
	102, 241, 228, 165, 145, 146, 101, 0, 250, 203,
	124, 131, 121, 178, 238, 239, 120, 264, 108, 252,
	104, 109, 251, 172, 234, 242, 166, 159, 103, 240,
	164, 158, 149, 128, 138, 196, 156, 197, 139, 169,
	168, 170, 0, 0, 0, 226, 248, 265, 113, 0,
	233, 259, 260, 0, 0, 114, 132, 127, 195, 171,
	110, 141, 223, 148, 155, 202, 263, 185, 208, 117,
	247, 224, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 105, 152, 262, 200, 130, 249, 0, 0,
	123, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 98, 99, 106, 112, 118, 122, 126,
	129, 134, 137, 140, 142, 143, 144, 147, 157, 160,
	161, 162, 163, 173, 174, 175, 177, 180, 181, 182,
	183, 184, 187, 189, 190, 191, 192, 193, 194, 201,
	204, 210, 211, 212, 213, 214, 215, 216, 218, 219,
	220, 221, 227, 230, 236, 237, 246, 254, 258, 24,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 179, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 0, 0, 0, 0, 151, 0, 153, 0,
	0, 225, 167, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 54, 0, 0,
	399, 0, 0, 0, 0, 0, 0, 0, 0, 115,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 133, 0, 0, 0, 255, 0,
	0, 0, 0, 198, 0, 229, 136, 150, 111, 97,
	107, 0, 135, 176, 205, 209, 0, 0, 0, 119,
	0, 207, 186, 245, 0, 188, 206, 154, 235, 199,
	244, 256, 257, 232, 253, 261, 222, 100, 231, 243,
	116, 217, 102, 241, 228, 165, 145, 146, 101, 0,
	250, 203, 124, 131, 121, 178, 238, 239, 120, 264,
	108, 252, 104, 109, 251, 172, 234, 242, 166, 159,
	103, 240, 164, 158, 149, 128, 138, 196, 156, 197,
	139, 169, 168, 170, 0, 0, 0, 226, 248, 265,
	113, 0, 233, 259, 260, 0, 0, 114, 132, 127,
	195, 171, 110, 141, 223, 148, 155, 202, 263, 185,
	208, 117, 247, 224, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 105, 152, 262, 200, 130, 249,
	0, 0, 123, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 98, 99, 106, 112, 118,
	122, 126, 129, 134, 137, 140, 142, 143, 144, 147,
	157, 160, 161, 162, 163, 173, 174, 175, 177, 180,
	181, 182, 183, 184, 187, 189, 190, 191, 192, 193,
	194, 201, 204, 210, 211, 212, 213, 214, 215, 216,
	218, 219, 220, 221, 227, 230, 236, 237, 246, 254,
	258, 24, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 179, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 0, 0, 0, 0, 151, 0,
	153, 0, 0, 225, 167, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 54,
	0, 0, 94, 0, 0, 0, 0, 0, 0, 0,
	0, 115, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 0, 0, 0,
	255, 0, 0, 0, 0, 198, 0, 229, 136, 150,
	111, 97, 107, 0, 135, 176, 205, 209, 0, 0,
	0, 119, 0, 207, 186, 245, 0, 188, 206, 154,
	235, 199, 244, 256, 257, 232, 253, 261, 222, 100,
	231, 243, 116, 217, 102, 241, 228, 165, 145, 146,
	101, 0, 250, 203, 124, 131, 121, 178, 238, 239,
	120, 264, 108, 252, 104, 109, 251, 172, 234, 242,
	166, 159, 103, 240, 164, 158, 149, 128, 138, 196,
	156, 197, 139, 169, 168, 170, 0, 0, 0, 226,
	248, 265, 113, 0, 233, 259, 260, 0, 0, 114,
	132, 127, 195, 171, 110, 141, 223, 148, 155, 202,
	263, 185, 208, 117, 247, 224, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 105, 152, 262, 200,
	130, 249, 0, 0, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 99, 106,
	112, 118, 122, 126, 129, 134, 137, 140, 142, 143,
	144, 147, 157, 160, 161, 162, 163, 173, 174, 175,
	177, 180, 181, 182, 183, 184, 187, 189, 190, 191,
	192, 193, 194, 201, 204, 210, 211, 212, 213, 214,
	215, 216, 218, 219, 220, 221, 227, 230, 236, 237,
	246, 254, 258, 179, 0, 0, 0, 936, 0, 0,
	0, 0, 125, 0, 0, 0, 0, 0, 151, 0,
	153, 0, 0, 225, 167, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 0, 938, 0, 0, 0, 0, 0,
	0, 115, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 0, 0, 0,
	255, 0, 0, 0, 0, 198, 0, 229, 136, 150,
	111, 97, 107, 0, 135, 176, 205, 209, 0, 0,
	0, 119, 0, 207, 186, 245, 0, 934, 206, 154,
	235, 199, 244, 256, 257, 232, 253, 261, 222, 100,
	231, 243, 116, 217, 102, 241, 228, 165, 145, 146,
	101, 0, 250, 203, 124, 131, 121, 178, 238, 239,
	120, 264, 108, 252, 104, 109, 251, 172, 234, 242,
	166, 159, 103, 240, 164, 158, 149, 128, 138, 196,
	156, 197, 139, 169, 168, 170, 0, 0, 0, 226,
	248, 265, 113, 0, 233, 259, 260, 0, 0, 114,
	132, 127, 195, 171, 110, 141, 223, 148, 155, 202,
	263, 185, 208, 117, 247, 224, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 105, 152, 262, 200,
	130, 249, 0, 0, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 99, 106,
	112, 118, 122, 126, 129, 134, 137, 140, 142, 143,
	144, 147, 157, 160, 161, 162, 163, 173, 174, 175,
	177, 180, 181, 182, 183, 184, 187, 189, 190, 191,
	192, 193, 194, 201, 204, 210, 211, 212, 213, 214,
	215, 216, 218, 219, 220, 221, 227, 230, 236, 237,
	246, 254, 258, 179, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 0, 0, 0, 0, 151, 0,
	153, 0, 0, 225, 167, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 399, 0, 0, 832, 0, 0, 833, 0,
	0, 115, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 0, 0, 0,
	255, 0, 0, 0, 0, 198, 0, 229, 136, 150,
	111, 97, 107, 0, 135, 176, 205, 209, 0, 0,
	0, 119, 0, 207, 186, 245, 0, 188, 206, 154,
	235, 199, 244, 256, 257, 232, 253, 261, 222, 100,
	231, 243, 116, 217, 102, 241, 228, 165, 145, 146,
	101, 0, 250, 203, 124, 131, 121, 178, 238, 239,
	120, 264, 108, 252, 104, 109, 251, 172, 234, 242,
	166, 159, 103, 240, 164, 158, 149, 128, 138, 196,
	156, 197, 139, 169, 168, 170, 0, 0, 0, 226,
	248, 265, 113, 0, 233, 259, 260, 0, 0, 114,
	132, 127, 195, 171, 110, 141, 223, 148, 155, 202,
	263, 185, 208, 117, 247, 224, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 105, 152, 262, 200,
	130, 249, 0, 0, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 99, 106,
	112, 118, 122, 126, 129, 134, 137, 140, 142, 143,
	144, 147, 157, 160, 161, 162, 163, 173, 174, 175,
	177, 180, 181, 182, 183, 184, 187, 189, 190, 191,
	192, 193, 194, 201, 204, 210, 211, 212, 213, 214,
	215, 216, 218, 219, 220, 221, 227, 230, 236, 237,
	246, 254, 258, 179, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 717, 0, 0, 0, 151, 0,
	153, 0, 0, 225, 167, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 399, 0, 716, 0, 0, 0, 0, 0,
	0, 115, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 0, 0, 0,
	255, 0, 0, 0, 0, 198, 0, 229, 136, 150,
	111, 97, 107, 0, 135, 176, 205, 209, 0, 0,
	0, 119, 0, 207, 186, 245, 0, 188, 206, 154,
	235, 199, 244, 256, 257, 232, 253, 261, 222, 100,
	231, 243, 116, 217, 102, 241, 228, 165, 145, 146,
	101, 0, 250, 203, 124, 131, 121, 178, 238, 239,
	120, 264, 108, 252, 104, 109, 251, 172, 234, 242,
	166, 159, 103, 240, 164, 158, 149, 128, 138, 196,
	156, 197, 139, 169, 168, 170, 0, 0, 0, 226,
	248, 265, 113, 0, 233, 259, 260, 0, 0, 114,
	132, 127, 195, 171, 110, 141, 223, 148, 155, 202,
	263, 185, 208, 117, 247, 224, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 105, 152, 262, 200,
	130, 249, 0, 0, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 99, 106,
	112, 118, 122, 126, 129, 134, 137, 140, 142, 143,
	144, 147, 157, 160, 161, 162, 163, 173, 174, 175,
	177, 180, 181, 182, 183, 184, 187, 189, 190, 191,
	192, 193, 194, 201, 204, 210, 211, 212, 213, 214,
	215, 216, 218, 219, 220, 221, 227, 230, 236, 237,
	246, 254, 258, 179, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 0, 0, 0, 0, 151, 0,
	153, 0, 0, 225, 167, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 54,
	0, 0, 94, 0, 0, 0, 0, 0, 0, 0,
	0, 115, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 0, 0, 0,
	255, 0, 0, 0, 0, 198, 0, 229, 136, 150,
	111, 97, 107, 0, 135, 176, 205, 209, 0, 0,
	0, 119, 0, 207, 186, 245, 0, 188, 206, 154,
	235, 199, 244, 256, 257, 232, 253, 261, 222, 100,
	231, 243, 116, 217, 102, 241, 228, 165, 145, 146,
	101, 0, 250, 203, 124, 131, 121, 178, 238, 239,
	120, 264, 108, 252, 104, 109, 251, 172, 234, 242,
	166, 159, 103, 240, 164, 158, 149, 128, 138, 196,
	156, 197, 139, 169, 168, 170, 0, 0, 0, 226,
	248, 265, 113, 0, 233, 259, 260, 0, 0, 114,
	132, 127, 195, 171, 110, 141, 223, 148, 155, 202,
	263, 185, 208, 117, 247, 224, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 105, 152, 262, 200,
	130, 249, 0, 0, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 99, 106,
	112, 118, 122, 126, 129, 134, 137, 140, 142, 143,
	144, 147, 157, 160, 161, 162, 163, 173, 174, 175,
	177, 180, 181, 182, 183, 184, 187, 189, 190, 191,
	192, 193, 194, 201, 204, 210, 211, 212, 213, 214,
	215, 216, 218, 219, 220, 221, 227, 230, 236, 237,
	246, 254, 258, 179, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 0, 0, 0, 0, 151, 0,
	153, 0, 0, 225, 167, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 0, 938, 0, 0, 0, 0, 0,
	0, 115, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 0, 0, 0,
	255, 0, 0, 0, 0, 198, 0, 229, 136, 150,
	111, 97, 107, 0, 135, 176, 205, 209, 0, 0,
	0, 119, 0, 207, 186, 245, 0, 188, 206, 154,
	235, 199, 244, 256, 257, 232, 253, 261, 222, 100,
	231, 243, 116, 217, 102, 241, 228, 165, 145, 146,
	101, 0, 250, 203, 124, 131, 121, 178, 238, 239,
	120, 264, 108, 252, 104, 109, 251, 172, 234, 242,
	166, 159, 103, 240, 164, 158, 149, 128, 138, 196,
	156, 197, 139, 169, 168, 170, 0, 0, 0, 226,
	248, 265, 113, 0, 233, 259, 260, 0, 0, 114,
	132, 127, 195, 171, 110, 141, 223, 148, 155, 202,
	263, 185, 208, 117, 247, 224, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 105, 152, 262, 200,
	130, 249, 0, 0, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 99, 106,
	112, 118, 122, 126, 129, 134, 137, 140, 142, 143,
	144, 147, 157, 160, 161, 162, 163, 173, 174, 175,
	177, 180, 181, 182, 183, 184, 187, 189, 190, 191,
	192, 193, 194, 201, 204, 210, 211, 212, 213, 214,
	215, 216, 218, 219, 220, 221, 227, 230, 236, 237,
	246, 254, 258, 179, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 0, 0, 0, 0, 151, 0,
	153, 0, 0, 225, 167, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 399, 0, 605, 0, 0, 0, 0, 0,
	0, 115, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 0, 0, 0,
	255, 0, 0, 0, 0, 198, 0, 229, 136, 150,
	111, 97, 107, 0, 135, 176, 205, 209, 0, 0,
	0, 119, 0, 207, 186, 245, 0, 188, 206, 154,
	235, 199, 244, 256, 257, 232, 253, 261, 222, 100,
	231, 243, 116, 217, 102, 241, 228, 165, 145, 146,
	101, 0, 250, 203, 124, 131, 121, 178, 238, 239,
	120, 264, 108, 252, 104, 109, 251, 172, 234, 242,
	166, 159, 103, 240, 164, 158, 149, 128, 138, 196,
	156, 197, 139, 169, 168, 170, 0, 0, 0, 226,
	248, 265, 113, 0, 233, 259, 260, 0, 0, 114,
	132, 127, 195, 171, 110, 141, 223, 148, 155, 202,
	263, 185, 208, 117, 247, 224, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 105, 152, 262, 200,
	130, 249, 0, 0, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 99, 106,
	112, 118, 122, 126, 129, 134, 137, 140, 142, 143,
	144, 147, 157, 160, 161, 162, 163, 173, 174, 175,
	177, 180, 181, 182, 183, 184, 187, 189, 190, 191,
	192, 193, 194, 201, 204, 210, 211, 212, 213, 214,
	215, 216, 218, 219, 220, 221, 227, 230, 236, 237,
	246, 254, 258, 179, 0, 0, 0, 0, 0, 0,
	0, 687, 125, 0, 0, 0, 0, 0, 151, 0,
	153, 0, 0, 225, 167, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 0, 0, 0, 0, 0, 0, 0,
	0, 115, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 0, 0, 0,
	255, 0, 0, 0, 0, 198, 0, 229, 136, 150,
	111, 97, 107, 0, 135, 176, 205, 209, 0, 0,
	0, 119, 0, 207, 186, 245, 0, 188, 206, 154,
	235, 199, 244, 256, 257, 232, 253, 261, 222, 100,
	231, 243, 116, 217, 102, 241, 228, 165, 145, 146,
	101, 0, 250, 203, 124, 131, 121, 178, 238, 239,
	120, 264, 108, 252, 104, 109, 251, 172, 234, 242,
	166, 159, 103, 240, 164, 158, 149, 128, 138, 196,
	156, 197, 139, 169, 168, 170, 0, 0, 0, 226,
	248, 265, 113, 0, 233, 259, 260, 0, 0, 114,
	132, 127, 195, 171, 110, 141, 223, 148, 155, 202,
	263, 185, 208, 117, 247, 224, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 105, 152, 262, 200,
	130, 249, 0, 0, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 99, 106,
	112, 118, 122, 126, 129, 134, 137, 140, 142, 143,
	144, 147, 157, 160, 161, 162, 163, 173, 174, 175,
	177, 180, 181, 182, 183, 184, 187, 189, 190, 191,
	192, 193, 194, 201, 204, 210, 211, 212, 213, 214,
	215, 216, 218, 219, 220, 221, 227, 230, 236, 237,
	246, 254, 258, 380, 0, 0, 0, 0, 0, 0,
	179, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 0, 0, 0, 0, 151, 0, 153, 0, 0,
	225, 167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	0, 0, 0, 0, 0, 0, 0, 0, 115, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 0, 0, 0, 255, 0, 0,
	0, 0, 198, 0, 229, 136, 150, 111, 97, 107,
	0, 135, 176, 205, 209, 0, 0, 0, 119, 0,
	207, 186, 245, 0, 188, 206, 154, 235, 199, 244,
	256, 257, 232, 253, 261, 222, 100, 231, 243, 116,
	217, 102, 241, 228, 165, 145, 146, 101, 0, 250,
	203, 124, 131, 121, 178, 238, 239, 120, 264, 108,
	252, 104, 109, 251, 172, 234, 242, 166, 159, 103,
	240, 164, 158, 149, 128, 138, 196, 156, 197, 139,
	169, 168, 170, 0, 0, 0, 226, 248, 265, 113,
	0, 233, 259, 260, 0, 0, 114, 132, 127, 195,
	171, 110, 141, 223, 148, 155, 202, 263, 185, 208,
	117, 247, 224, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 105, 152, 262, 200, 130, 249, 0,
	0, 123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 99, 106, 112, 118, 122,
	126, 129, 134, 137, 140, 142, 143, 144, 147, 157,
	160, 161, 162, 163, 173, 174, 175, 177, 180, 181,
	182, 183, 184, 187, 189, 190, 191, 192, 193, 194,
	201, 204, 210, 211, 212, 213, 214, 215, 216, 218,
	219, 220, 221, 227, 230, 236, 237, 246, 254, 258,
	179, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 0, 0, 0, 0, 151, 0, 153, 0, 0,
	225, 167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	0, 0, 0, 0, 0, 0, 0, 0, 115, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 0, 91, 0, 255, 0, 0,
	0, 0, 198, 0, 229, 136, 150, 111, 97, 107,
	0, 135, 176, 205, 209, 0, 0, 0, 119, 0,
	207, 186, 245, 0, 188, 206, 154, 235, 199, 244,
	256, 257, 232, 253, 261, 222, 100, 231, 243, 116,
	217, 102, 241, 228, 165, 145, 146, 101, 0, 250,
	203, 124, 131, 121, 178, 238, 239, 120, 264, 108,
	252, 104, 109, 251, 172, 234, 242, 166, 159, 103,
	240, 164, 158, 149, 128, 138, 196, 156, 197, 139,
	169, 168, 170, 0, 0, 0, 226, 248, 265, 113,
	0, 233, 259, 260, 0, 0, 114, 132, 127, 195,
	171, 110, 141, 223, 148, 155, 202, 263, 185, 208,
	117, 247, 224, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 105, 152, 262, 200, 130, 249, 0,
	0, 123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 99, 106, 112, 118, 122,
	126, 129, 134, 137, 140, 142, 143, 144, 147, 157,
	160, 161, 162, 163, 173, 174, 175, 177, 180, 181,
	182, 183, 184, 187, 189, 190, 191, 192, 193, 194,
	201, 204, 210, 211, 212, 213, 214, 215, 216, 218,
	219, 220, 221, 227, 230, 236, 237, 246, 254, 258,
	179, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 0, 0, 0, 0, 151, 0, 153, 0, 0,
	225, 167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 399,
	0, 0, 0, 0, 0, 0, 0, 0, 115, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 0, 0, 0, 255, 0, 0,
	0, 0, 198, 0, 229, 136, 150, 111, 97, 107,
	0, 135, 176, 205, 209, 0, 0, 0, 119, 0,
	207, 186, 245, 0, 188, 206, 154, 235, 199, 244,
	256, 257, 232, 253, 261, 222, 100, 231, 243, 116,
	217, 102, 241, 228, 165, 145, 146, 101, 0, 250,
	203, 124, 131, 121, 178, 238, 239, 120, 264, 108,
	252, 104, 109, 251, 172, 234, 242, 166, 159, 103,
	240, 164, 158, 149, 128, 138, 196, 156, 197, 139,
	169, 168, 170, 0, 0, 0, 226, 248, 265, 113,
	0, 233, 259, 260, 0, 0, 114, 132, 127, 195,
	171, 110, 141, 223, 148, 155, 202, 263, 185, 208,
	117, 247, 224, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 105, 152, 262, 200, 130, 249, 0,
	0, 123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 99, 106, 112, 118, 122,
	126, 129, 134, 137, 140, 142, 143, 144, 147, 157,
	160, 161, 162, 163, 173, 174, 175, 177, 180, 181,
	182, 183, 184, 187, 189, 190, 191, 192, 193, 194,
	201, 204, 210, 211, 212, 213, 214, 215, 216, 218,
	219, 220, 221, 227, 230, 236, 237, 246, 254, 258,
	179, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 0, 0, 0, 0, 151, 0, 153, 0, 0,
	225, 167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	0, 0, 0, 0, 0, 0, 0, 0, 115, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 0, 0, 0, 255, 0, 0,
	0, 0, 198, 0, 229, 136, 150, 111, 97, 107,
	0, 135, 176, 205, 209, 0, 0, 0, 119, 0,
	207, 186, 245, 0, 188, 206, 154, 235, 199, 244,
	256, 257, 232, 253, 261, 222, 100, 231, 243, 116,
	217, 102, 241, 228, 165, 145, 146, 101, 0, 250,
	203, 124, 131, 121, 178, 238, 239, 120, 264, 108,
	252, 104, 109, 251, 172, 234, 242, 166, 159, 103,
	240, 164, 158, 149, 128, 138, 196, 156, 197, 139,
	169, 168, 170, 0, 0, 0, 226, 248, 265, 113,
	0, 233, 259, 260, 0, 0, 114, 132, 127, 195,
	171, 110, 141, 223, 148, 155, 202, 263, 185, 208,
	117, 247, 224, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 105, 152, 262, 200, 130, 249, 0,
	0, 123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 99, 106, 112, 118, 122,
	126, 129, 134, 137, 140, 142, 143, 144, 147, 157,
	160, 161, 162, 163, 173, 174, 175, 177, 180, 181,
	182, 183, 184, 187, 189, 190, 191, 192, 193, 194,
	201, 204, 210, 211, 212, 213, 214, 215, 216, 218,
	219, 220, 221, 227, 230, 236, 237, 246, 254, 258,
	179, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 0, 0, 0, 0, 151, 0, 153, 0, 0,
	225, 167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 321,
	0, 0, 0, 0, 0, 0, 0, 0, 115, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 0, 0, 0, 255, 0, 0,
	0, 0, 198, 0, 229, 136, 150, 111, 97, 107,
	0, 135, 176, 205, 209, 0, 0, 0, 119, 0,
	207, 186, 245, 0, 188, 206, 154, 235, 199, 244,
	256, 257, 232, 253, 261, 222, 100, 231, 243, 116,
	217, 102, 241, 228, 165, 145, 146, 101, 0, 250,
	203, 124, 131, 121, 178, 238, 239, 120, 264, 108,
	252, 104, 109, 251, 172, 234, 242, 166, 159, 103,
	240, 164, 158, 149, 128, 138, 196, 156, 197, 139,
	169, 168, 170, 0, 0, 0, 226, 248, 265, 113,
	0, 233, 259, 260, 0, 0, 114, 132, 127, 195,
	171, 110, 141, 223, 148, 155, 202, 263, 185, 208,
	117, 247, 224, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 105, 152, 262, 200, 130, 249, 0,
	0, 123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 99, 106, 112, 118, 122,
	126, 129, 134, 137, 140, 142, 143, 144, 147, 157,
	160, 161, 162, 163, 173, 174, 175, 177, 180, 181,
	182, 183, 184, 187, 189, 190, 191, 192, 193, 194,
	201, 204, 210, 211, 212, 213, 214, 215, 216, 218,
	219, 220, 221, 227, 230, 236, 237, 246, 254, 258,
}
var yyPact = [...]int{

	174, -1000, -263, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 958, 1005, -1000, -1000, -1000, -1000, -1000, -1000,
	254, 107, 10, 128, 0, 14642, 127, 1567, 15302, -1000,
	8, -1000, -1000, -1000, 15302, -1000, -1000, -1000, -80, -89,
	-1000, 758, -1000, -1000, -1000, -1000, -1000, 942, 954, 793,
	941, 846, -1000, 7669, 89, 89, 14312, 6679, -1000, -1000,
	246, 15302, 124, 109, 86, 86, 86, -1000, -1000, -1000,
	-149, 126, 15302, 302, -1000, 15302, 85, 653, 85, 85,
	85, 15302, -1000, 169, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 15302, 652, 901, 3592,
	45, 3592, -1000, 3592, 3592, -1000, 3592, 26, 3592, -48,
	970, 27, -21, -1000, 3592, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 490,
	915, 9001, 9001, 958, -1000, 758, -1000, -1000, -1000, 907,
	-1000, -1000, 347, 993, -1000, 10651, 168, -1000, 9001, 1912,
	746, -1000, -1000, 746, -1000, -1000, 140, -1000, -1000, 9991,
	9991, 9991, 9991, 9991, 9991, 9991, 9991, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 746, -1000, 8671, 746, 746, 746, 746, 746, 746,
	746, 746, 9001, 746, 746, 746, 746, 746, 746, 746,
	746, 746, 746, 746, 746, 746, 746, 746, 13975, 12985,
	15302, 749, 687, -1000, -1000, 166, 736, 6336, -128, -1000,
	-1000, -1000, 290, 12655, -1000, -1000, -1000, 899, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 647,
	15302, -1000, 1640, -1000, 637, 15302, 636, 303, 635, 15302,
	-1000, 15302, 3592, 38, 77, 70, 15302, 740, 111, 15302,
	927, 799, 15302, 603, 590, -1000, 5993, -1000, 3592, 3592,
	-1000, -1000, -1000, 3592, 3592, 3592, 15302, 3592, 3592, -1000,
	-1000, -1000, -1000, 3592, 3592, -1000, 992, 286, -1000, -1000,
	-1000, -1000, 9001, 221, -1000, 798, -1000, -1000, -1000, -1000,
	-1000, -1000, 999, 209, 535, 159, 737, -1000, 572, 942,
	490, 846, 12325, 802, -1000, -1000, -1000, 15302, -1000, 9001,
	9001, 531, -1000, 13645, -1000, -1000, 4621, 243, 9991, 362,
	294, 9991, 9991, 9991, 9991, 9991, 9991, 9991, 9991, 9991,
	9991, 9991, 9991, 9991, 9991, 9991, 421, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 589, -1000, 758, 591, 591,
	177, 177, 177, 177, 177, 177, 177, 10321, 931, 490,
	634, 450, 8671, 7669, 7669, 9001, 9001, 8329, 7999, 7669,
	931, 295, 450, 15632, -1000, -1000, 9661, -1000, -1000, -1000,
	-1000, -1000, 490, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	14972, 14972, 7669, 7669, 7669, 7669, 57, 15302, -1000, 695,
	778, -1000, -1000, -1000, 936, 11665, 11995, 57, 677, 12985,
	15302, -1000, -1000, 12985, 15302, 4278, 5650, 736, -128, 694,
	-1000, -106, -102, 7009, 175, -1000, -1000, -1000, -1000, 3249,
	272, 660, 191, -1000, -60, -1000, -1000, -1000, -1000, 754,
	-1000, -1000, 754, 754, 754, 754, -24, -24, -24, -24,
	-1000, -1000, -1000, -1000, -1000, 781, 780, -1000, 754, 754,
	754, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 765,
	765, 765, 761, 761, 787, 932, 3592, 926, 3592, -1000,
	74, -1000, 15302, 15302, 15302, 15302, 15302, 135, 15302, 15302,
	726, -1000, 15302, 723, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	15302, 315, 15302, 15302, 450, -1000, 472, 15302, -1000, 862,
	9001, 9001, 5307, 9001, -1000, -1000, -1000, 915, -1000, 931,
	952, -1000, 891, 882, 7669, -1000, -1000, 243, 258, -1000,
	-1000, 396, -1000, -1000, -1000, -1000, 157, 746, -1000, 2119,
	-1000, -1000, -1000, -1000, 362, 9991, 9991, 9991, 810, 2119,
	1975, 1330, 401, 177, 516, 516, 192, 192, 192, 192,
	192, 771, 771, -1000, -1000, -1000, 490, -1000, -1000, -1000,
	7669, -1000, 9001, -1000, 490, 631, -1000, 631, 463, 538,
	262, 981, 631, 252, 978, 631, 631, 7669, 328, -1000,
	9001, 490, -1000, 156, -1000, 1509, 718, 716, 631, 490,
	712, 631, 631, 665, 746, -1000, 15632, 12985, 12985, 12985,
	12985, 12985, -1000, 841, 839, -1000, 838, 815, 814, 15302,
	-1000, 629, 11665, 167, 746, -1000, 13315, -1000, -1000, 969,
	12985, 711, -1000, 711, -1000, 150, -1000, -1000, 694, -128,
	-108, -1000, -1000, -1000, -1000, 450, -1000, 455, 693, 2906,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 763, 576, -1000,
	919, 213, 219, 565, 917, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 331, 9991, 998, -1000, 912,
	-1000, 911, 469, -75, -1000, -1000, 408, -24, -24, -1000,
	-1000, 175, 896, 175, 175, 175, 461, 461, -1000, -1000,
	-1000, -1000, 395, -1000, -1000, -1000, 379, -1000, 797, 14972,
	758, -1000, -1000, -1000, -1000, 355, 355, 238, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 56,
	750, -1000, -1000, -1000, -1000, 9, 37, 106, -1000, 3592,
	15302, 286, -1000, 460, 9001, -1000, -1000, -1000, -1000, 851,
	450, 450, 149, -1000, -1000, 15302, -1000, -1000, -1000, -1000,
	733, -1000, -1000, -1000, 3935, 7669, -1000, 810, 2119, 1809,
	-1000, 9991, 9991, -1000, 490, 450, -1000, 7669, -1000, -1000,
	206, 421, 206, 9991, 9991, -1000, 9991, 9991, -1000, -161,
	676, 287, -1000, 9001, 438, -1000, 5307, -1000, 9991, 9991,
	-1000, -1000, -1000, -1000, 796, 15632, 746, -1000, 11323, 14972,
	715, -1000, 285, 778, 777, 794, 710, -1000, -1000, -1000,
	-1000, 825, -1000, 818, -1000, -1000, -1000, -1000, -1000, 122,
	121, 120, 14972, -1000, 958, 9001, 711, -1000, -1000, 189,
	-1000, -1000, -123, -119, -1000, -1000, -1000, 3249, -1000, 3249,
	14972, 72, -1000, 565, 565, -1000, -1000, -1000, 762, -1000,
	2119, -85, -1000, -1000, -1000, -1000, -1000, 659, 175, 175,
	-1000, 226, -1000, -1000, -1000, 623, -1000, 621, 691, 618,
	15302, -1000, -1000, -1000, 484, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 530, -1000, 504,
	15302, -1000, -1000, -1000, -1000, -1000, 14972, -167, 494, 14972,
	14972, 14972, 15302, -1000, -1000, 315, -1000, 450, -1000, 4964,
	-1000, 969, 12985, -1000, -1000, 490, -1000, 9991, 2119, 2119,
	-1000, -1000, 490, 754, 754, -1000, 754, 761, -1000, 754,
	11, 754, -5, 490, 490, 2160, 2073, 2014, 1639, 746,
	-156, -1000, 450, 9001, -1000, 1836, 474, -1000, 908, 669,
	681, -1000, -1000, 7339, 490, 612, 146, 607, -1000, 958,
	15632, 9001, -1000, -1000, 9001, 756, -1000, 9001, -1000, -1000,
	-1000, 746, 746, 746, 607, 942, 450, -1000, -1000, -1000,
	-1000, 2906, -1000, 587, -1000, 754, -1000, -1000, -1000, 14972,
	-1000, -1000, -1000, -1000, -1000, -1000, -24, 454, -24, 365,
	-1000, 363, 3592, 491, -1000, -1000, -1000, -1000, 200, -1000,
	-1000, 922, -1000, 4964, -1000, -1000, 751, 786, -1000, -1000,
	-1000, 964, 690, -1000, 2119, -1000, -1000, 108, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 9991, 9991, 9991, 9991,
	9991, 490, 430, 450, 9991, 9991, 904, -1000, 746, -1000,
	-1000, 707, 14972, 14972, -1000, 14972, 942, -1000, 450, 450,
	14972, 450, 14972, 14972, 14972, 10981, -1000, 172, 14972, -1000,
	581, -1000, 175, -1000, 175, 624, 613, -1000, 573, -1000,
	485, -1000, -1000, 746, 684, -1000, 281, 14972, 15302, 962,
	948, -1000, -1000, 1509, 1509, 1509, 1509, 50, -1000, -1000,
	1509, 1509, 997, -1000, 746, -1000, 758, 144, -1000, -1000,
	-1000, 557, 547, 547, 547, 167, 172, -1000, 477, 263,
	410, -1000, 69, 14972, -1000, -1000, -1000, -1000, -1000, -1000,
	51, 4964, 3249, 536, -1000, -1000, 9001, 9001, -1000, -1000,
	-1000, -1000, 490, 49, -170, -1000, -1000, 15632, 681, 490,
	14972, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 354, -1000,
	-1000, 15302, -1000, -1000, 527, -1000, 14972, -1000, -1000, 750,
	450, 680, -1000, 849, -165, -175, 671, -1000, -1000, -1000,
	747, -1000, 51, 867, -167, -1000, 813, -1000, 14972, -1000,
	53, -1000, -168, 489, 42, -171, 792, 746, -178, 779,
	-1000, 991, 9331, -1000, -1000, 996, 193, 193, 1509, 490,
	-1000, -1000, -1000, 76, 361, -1000, -1000, -1000, -1000, -1000,
	-1000,
}
var yyPgo = [...]int{

	0, 1252, 22, 506, 1250, 1249, 1248, 1247, 1246, 1244,
	1243, 1242, 1241, 1239, 1238, 1237, 1236, 1235, 1234, 1232,
	1231, 1227, 1226, 1225, 1224, 1219, 88, 1216, 1215, 1214,
	73, 1213, 80, 1210, 1208, 53, 178, 61, 48, 55,
	1207, 33, 57, 64, 1206, 35, 1205, 1204, 81, 1170,
	1169, 1168, 50, 1167, 1165, 1173, 1163, 69, 1157, 14,
	43, 1156, 1155, 1154, 1152, 78, 562, 1150, 1149, 28,
	1148, 1144, 91, 1142, 60, 8, 11, 29, 26, 1140,
	47, 6, 1139, 54, 1135, 1134, 1133, 1123, 52, 1118,
	65, 1116, 24, 63, 1115, 7, 70, 51, 21, 13,
	82, 66, 1114, 18, 75, 49, 1113, 1109, 459, 42,
	1107, 1106, 32, 1105, 1104, 25, 1102, 392, 415, 1099,
	1098, 1096, 1095, 1094, 59, 0, 757, 121, 79, 1093,
	1091, 1090, 1499, 31, 56, 16, 1089, 62, 30, 40,
	1088, 1086, 37, 1085, 1083, 1082, 1079, 1078, 1077, 1074,
	1072, 1071, 312, 1070, 1067, 1065, 58, 19, 1064, 1060,
	71, 20, 1059, 1058, 1055, 1054, 44, 17, 1053, 1049,
	46, 38, 1044, 1041, 1040, 1039, 1038, 34, 12, 1037,
	15, 1035, 10, 1033, 27, 1030, 4, 1028, 9, 1026,
	3, 1022, 5, 41, 1, 1016, 2, 1015, 1014, 76,
	215, 84, 1002, 105,
}
var yyR1 = [...]int{

	0, 197, 198, 198, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 6, 3, 4,
	4, 5, 5, 7, 7, 29, 29, 8, 9, 9,
	9, 9, 201, 201, 50, 50, 48, 48, 49, 49,
	96, 96, 10, 10, 10, 10, 101, 101, 105, 105,
	105, 106, 106, 106, 106, 140, 140, 164, 164, 11,
	11, 11, 11, 11, 11, 192, 192, 191, 190, 190,
	189, 189, 188, 17, 173, 175, 175, 174, 174, 174,
	174, 167, 144, 144, 144, 144, 144, 144, 144, 143,
	143, 143, 143, 143, 147, 147, 148, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 146, 146, 146, 146,
	146, 149, 149, 149, 149, 149, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 151, 151, 151, 151, 151, 151, 151, 151, 166,
	166, 152, 152, 160, 160, 161, 161, 161, 158, 158,
	159, 159, 162, 162, 154, 155, 163, 156, 156, 156,
	157, 157, 157, 165, 165, 165, 165, 153, 168, 168,
	183, 183, 182, 182, 182, 172, 172, 179, 179, 179,
	179, 179, 170, 170, 171, 171, 181, 181, 180, 169,
	169, 184, 184, 184, 184, 195, 196, 194, 194, 194,
	194, 194, 176, 176, 176, 177, 177, 177, 178, 178,
	178, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	109, 109, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 187, 185, 185, 186, 186, 13, 18, 18,
	14, 14, 14, 14, 14, 15, 15, 19, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 113, 113, 111, 111,
	114, 114, 112, 112, 112, 115, 115, 115, 116, 116,
	141, 141, 141, 21, 21, 23, 23, 24, 25, 22,
	22, 22, 22, 22, 22, 22, 22, 16, 202, 26,
	27, 27, 28, 28, 28, 32, 32, 32, 30, 30,
	30, 31, 31, 37, 37, 36, 36, 38, 38, 38,
	38, 129, 129, 129, 128, 128, 40, 40, 41, 41,
	42, 42, 43, 43, 43, 43, 58, 58, 95, 95,
	97, 97, 44, 44, 44, 44, 45, 45, 46, 46,
	47, 47, 136, 136, 135, 135, 135, 134, 134, 51,
	51, 51, 53, 52, 52, 52, 52, 54, 54, 56,
	56, 55, 55, 57, 59, 59, 59, 59, 60, 60,
	39, 39, 39, 39, 39, 39, 39, 110, 110, 62,
	62, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 73, 73, 73, 73, 73, 73, 63, 63, 63,
	63, 63, 63, 63, 35, 35, 74, 74, 74, 80,
	75, 75, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 70, 70, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 203, 203, 72, 71, 71,
	71, 71, 71, 71, 33, 33, 33, 33, 33, 139,
	139, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 84, 84, 34, 34, 82, 82,
	83, 85, 85, 81, 81, 81, 65, 65, 65, 65,
	65, 65, 65, 65, 67, 67, 67, 86, 86, 87,
	87, 88, 88, 89, 89, 90, 91, 91, 91, 92,
	92, 92, 92, 93, 93, 93, 64, 64, 64, 64,
	64, 64, 94, 94, 94, 94, 98, 98, 76, 76,
	78, 78, 77, 79, 99, 99, 103, 100, 100, 104,
	104, 104, 104, 102, 102, 102, 131, 131, 131, 107,
	107, 117, 117, 118, 118, 108, 108, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 121, 121, 120,
	120, 120, 122, 122, 123, 123, 123, 123, 130, 130,
	126, 126, 127, 127, 132, 132, 133, 133, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 199, 200, 137, 138,
	138, 138,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 4, 6, 7, 5, 10, 1,
	3, 1, 3, 7, 8, 1, 1, 9, 8, 7,
	6, 6, 1, 1, 1, 3, 1, 3, 1, 3,
	0, 4, 3, 4, 5, 4, 1, 3, 3, 2,
	2, 2, 2, 2, 1, 1, 1, 0, 2, 2,
	2, 8, 6, 5, 5, 0, 2, 1, 0, 2,
	1, 3, 3, 4, 4, 2, 4, 1, 3, 3,
	3, 2, 1, 2, 2, 2, 2, 2, 2, 3,
	1, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 1, 4, 4, 2, 2,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 6,
	6, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 1,
	0, 1, 1, 2, 2, 3, 1, 0, 3, 3,
	0, 2, 2, 2, 1, 2, 1, 2, 5, 4,
	1, 2, 2, 3, 2, 0, 1, 2, 3, 3,
	2, 2, 1, 1, 0, 1, 1, 3, 2, 3,
	1, 10, 11, 11, 12, 3, 3, 1, 1, 2,
	2, 2, 0, 1, 3, 1, 2, 3, 1, 1,
	1, 6, 10, 8, 7, 7, 7, 9, 7, 7,
	4, 5, 7, 5, 5, 5, 12, 7, 5, 9,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 7, 1, 3, 8, 8, 3, 3, 5,
	4, 6, 4, 4, 4, 3, 2, 3, 4, 4,
	3, 4, 4, 4, 4, 4, 4, 3, 2, 3,
	3, 2, 3, 4, 3, 7, 5, 4, 2, 4,
	4, 3, 3, 5, 2, 3, 1, 1, 0, 1,
	1, 1, 0, 2, 2, 0, 2, 2, 0, 2,
	0, 1, 1, 2, 1, 1, 2, 1, 1, 2,
	2, 2, 2, 2, 2, 3, 3, 2, 0, 2,
	0, 2, 1, 2, 2, 0, 1, 1, 0, 1,
	1, 0, 1, 0, 1, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 1, 0, 2, 1, 3,
	1, 1, 1, 3, 1, 3, 3, 7, 1, 3,
	1, 3, 4, 4, 4, 3, 2, 4, 0, 1,
	0, 2, 0, 1, 0, 1, 2, 1, 1, 1,
	2, 2, 1, 2, 3, 2, 3, 2, 2, 2,
	1, 1, 3, 3, 0, 5, 5, 5, 0, 2,
	1, 3, 3, 2, 3, 1, 2, 0, 3, 1,
	1, 3, 3, 4, 4, 5, 3, 4, 5, 6,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 2, 2, 2, 2, 2, 3,
	1, 1, 1, 1, 5, 6, 4, 4, 6, 6,
	6, 8, 8, 8, 8, 9, 7, 5, 4, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 8, 8, 0, 2, 3, 4, 4,
	4, 4, 4, 4, 0, 3, 4, 7, 3, 1,
	1, 2, 3, 3, 1, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 0, 3, 0,
	2, 0, 3, 1, 3, 2, 0, 1, 1, 0,
	2, 4, 4, 0, 2, 4, 2, 1, 3, 5,
	4, 6, 1, 3, 3, 5, 0, 5, 1, 3,
	1, 2, 3, 1, 1, 3, 3, 1, 3, 3,
	3, 3, 3, 1, 2, 1, 1, 1, 1, 1,
	1, 0, 2, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 0, 1, 1, 1, 0, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
	1, 1,
}
var yyChk = [...]int{

	-1000, -197, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -19, -20, -21, -23, -24, -25,
	-22, -16, -3, -4, 6, 7, -29, 9, 10, 30,
	-17, 115, 116, 118, 117, 150, 119, 143, 50, 164,
	165, 167, 168, 25, 144, 145, 148, 149, 31, 32,
	121, -199, 8, 250, 54, -198, 348, -88, 15, -28,
	5, -26, -202, -26, -26, -26, -26, -26, -173, -175,
	54, 90, -123, -164, 242, 122, 123, 129, 133, 132,
	72, -108, 125, 221, 127, 123, 123, 124, 125, 242,
	122, 123, -55, -132, 57, -125, 260, 136, 292, 293,
	164, 175, 169, 197, 189, 261, 294, 137, 187, 190,
	229, 135, 295, 217, 224, 66, 167, 238, 296, 146,
	185, 181, 297, 269, 179, 27, 298, 226, 202, 299,
	265, 180, 225, 121, 300, 139, 133, 301, 203, 207,
	302, 230, 303, 304, 305, 173, 174, 306, 232, 201,
	134, 33, 262, 35, 154, 233, 205, 307, 200, 196,
	308, 309, 310, 311, 199, 172, 195, 39, 209, 208,
	210, 228, 192, 312, 313, 314, 140, 315, 182, 18,
	316, 317, 318, 319, 320, 236, 149, 321, 152, 322,
	323, 324, 325, 326, 327, 227, 204, 206, 130, 156,
	264, 328, 234, 178, 329, 141, 153, 148, 237, 142,
	330, 331, 332, 333, 334, 335, 336, 168, 337, 338,
	339, 340, 163, 231, 240, 38, 214, 341, 171, 132,
	342, 165, 160, 219, 193, 155, 343, 344, 183, 184,
	198, 170, 194, 166, 157, 150, 345, 239, 215, 266,
	177, 191, 188, 161, 346, 125, 158, 159, 347, 220,
	221, 162, 263, 235, 186, 216, 123, 108, 190, 229,
	115, 218, 226, 124, 33, 227, 156, -141, 123, -111,
	217, 220, 221, 162, 57, 231, 230, 222, -132, 166,
	-137, -55, -137, -137, -137, -137, 219, 219, -137, -2,
	-92, 17, 16, -5, -3, -199, 6, 20, 21, -32,
	40, 41, -27, -38, 99, -39, -132, -61, 74, -66,
	29, 57, -125, 23, -65, -62, -81, -79, -80, 108,
	109, 110, 97, 98, 105, 75, 111, -70, -68, -69,
	-71, 59, 58, 67, 60, 61, 62, 63, 68, 69,
	70, -126, -77, -199, 44, 45, 251, 252, 253, 254,
	259, 255, 77, 34, 241, 249, 248, 247, 245, 246,
	243, 244, 257, 258, 128, 242, 103, 250, -108, -108,
	11, -48, -49, -55, -57, -132, -100, -140, 166, -104,
	231, 230, -127, -102, -126, -124, 229, 190, 228, 57,
	-125, 120, 267, 73, 22, 24, 212, 76, 108, 16,
	77, 107, 251, 115, 48, 268, 243, 244, 241, 253,
	254, 242, 218, 29, 10, 270, 25, 144, 21, 101,
	117, 80, 81, 147, 23, 145, 70, 273, 19, 51,
	11, 13, 274, 275, 14, 128, 127, 92, 124, 46,
	8, 111, 26, 89, 42, 276, 28, 277, 278, 279,
	280, 44, 90, 17, 245, 246, 31, 281, 259, 151,
	103, 49, 36, 74, 282, 283, 68, 284, 71, 52,
	72, 15, 47, 285, 286, 287, 288, 91, 118, 250,
	45, 289, 122, 6, 256, 30, 143, 43, 290, 123,
	79, 257, 258, 126, 69, 5, 129, 32, 9, 50,
	53, 247, 248, 249, 177, 34, 78, 12, 291, -174,
	90, -167, 57, -55, 124, 125, -118, 128, -118, -118,
	250, 123, -55, 115, 117, 120, 52, -18, -55, -117,
	128, 57, -117, -117, -117, -55, 112, -55, 57, 30,
	-138, -199, -127, 242, 57, 156, 123, 157, 125, -138,
	-138, -138, -138, 160, 161, -138, -114, -113, 224, 225,
	219, 223, 12, 161, 219, 159, -138, -137, -137, -200,
	56, -93, 19, 31, -39, -132, -89, -90, -39, -88,
	-2, -26, 36, -30, 20, 21, 65, 11, -129, 73,
	72, 89, -128, 22, -126, 59, 112, -39, -63, 92,
	74, 90, 91, 76, 94, 93, 104, 97, 98, 99,
	100, 101, 102, 103, 95, 96, 107, 82, 83, 84,
	85, 86, 87, 88, -110, -199, -80, -199, 113, 114,
	-66, -66, -66, -66, -66, -66, -66, -66, -199, -2,
	-75, -39, -199, -199, -199, -199, -199, -199, -199, -199,
	-199, -84, -39, -199, -203, -72, -199, -203, -72, -203,
	-72, -203, -199, -203, -72, -203, -72, -203, -203, -72,
	-199, -199, -199, -199, -199, -199, -56, 26, -55, -41,
	-42, -43, -44, -58, -80, -199, -55, -55, -48, -201,
	55, 11, 53, -201, 55, 112, 55, -100, 166, -101,
	-105, 232, 234, 82, -131, -126, 59, 29, 30, 56,
	55, -55, -144, -143, -147, -148, -150, -149, -151, -145,
	-146, 177, 187, 188, 108, 191, 193, 194, 195, 196,
	197, 198, 199, 200, 201, 202, 30, 146, 183, 184,
	185, 186, 203, 204, 205, 206, 207, 208, 209, 210,
	169, 189, 261, 170, 171, 172, 173, 174, 175, 178,
	179, 180, 181, 182, 57, -55, 57, 74, 57, -55,
	-55, -138, 158, 158, 123, 123, 163, -55, 55, 126,
	-48, 23, 52, -50, -55, 57, 57, -133, -132, -124,
	-138, -138, -138, -138, -138, -55, -138, -138, -138, -138,
	11, -112, 11, 92, -39, -116, 90, 52, 9, 92,
	55, 18, 112, 55, -91, 24, 25, -92, -200, -32,
	-67, -126, 60, 63, -31, 43, -55, -39, -39, -73,
	68, 74, 69, 70, -128, 99, -133, -127, -124, -66,
	-74, -77, -80, 64, 92, 90, 91, 76, -66, -66,
	-66, -66, -66, -66, -66, -66, -66, -66, -66, -66,
	-66, -66, -66, -139, 57, 59, 57, -65, -65, -126,
	-30, -200, 55, -200, -2, -36, -38, -36, -39, -39,
	-81, 59, -36, -81, 59, -36, -36, -30, -82, -83,
	78, -81, -126, -132, -200, -66, -126, -126, -36, -37,
	-36, -36, -36, -96, 152, -55, 30, 55, -51, -53,
	-52, -54, 42, 46, 48, 43, 44, 45, 49, -136,
	22, -41, -199, -135, 152, -134, 22, -132, 59, -96,
	53, -41, -55, -41, -57, -132, 99, -104, -101, 55,
	233, 235, 236, 52, 71, -39, -157, 107, -176, -177,
	-178, -127, 59, 60, -167, -168, -169, -179, 138, -184,
	130, 132, 129, -170, 139, 124, 28, 56, -162, -154,
	-155, -163, -165, -153, 68, 74, 29, 52, 212, 130,
	28, 129, 66, -158, 215, -152, 54, -152, -152, -152,
	-152, -156, 190, -156, -156, -156, 54, 54, -152, -152,
	-152, -160, 54, -160, -160, -161, 54, -161, -130, 53,
	22, -138, 23, -138, -119, 120, 117, 118, -187, 116,
	212, 190, 66, 29, 15, 251, 152, 266, 57, 153,
	-55, -55, -55, -55, -55, 120, 117, -55, -55, -55,
	55, -55, -115, 90, 12, -132, -132, 59, -55, 38,
	-39, -39, -133, -90, -93, -107, 19, 11, 34, 34,
	-36, 68, 69, 70, 112, -199, -74, -66, -66, -66,
	-35, 147, 73, -200, -37, -39, -200, 55, -200, -200,
	55, 53, 22, 11, 11, -200, 11, 11, -200, -200,
	-36, -85, -83, 80, -39, -200, 112, -200, 55, 55,
	-200, -200, -200, -200, -64, 30, 34, -2, -199, -199,
	-99, -103, -81, -42, -43, -43, -42, -43, 42, 42,
	42, 47, 42, 47, 42, -52, -132, -200, -59, 50,
	127, 51, -199, -134, -60, 12, -41, -60, -60, 112,
	-105, -106, 237, 234, 240, 57, 59, 55, -178, 82,
	54, 57, 28, -170, -170, -171, 57, -171, 28, 68,
	-66, 9, 28, 28, 59, -159, 216, 60, -156, -156,
	-157, 30, -157, -157, -157, -166, 59, -166, 60, 60,
	52, -126, -2, -137, -109, -193, 131, 135, 138, 139,
	133, 124, 28, 130, 132, 152, 129, -109, -193, 131,
	-120, -122, 126, 22, 124, 28, 152, -192, 53, 158,
	212, 158, 126, -138, -55, -112, 59, -39, 39, 112,
	-55, -40, 11, 99, -127, -37, -35, 73, -66, -66,
	-200, -38, -142, 108, 187, 146, 185, 181, 201, 192,
	214, 183, 215, -139, -142, -66, -66, -66, -66, 260,
	-88, 81, -39, 79, -127, -66, -66, -98, 52, -99,
	-76, -78, -77, -199, -2, -94, -126, -97, -126, -60,
	55, 82, -46, -45, 52, 53, -47, 52, -45, 42,
	42, 124, 124, 124, -97, -88, -39, -60, 234, 238,
	239, -177, -178, -181, -180, -126, -184, -171, -171, 54,
	-69, 56, -157, -157, 57, 108, 56, 55, 56, 55,
	56, 55, -55, 54, -167, -137, 57, -137, 57, -55,
	-137, -126, -190, 263, -191, 57, -126, -126, -126, -55,
	-115, -60, -41, -200, -66, -200, -152, -152, -152, -161,
	-152, 174, -152, 174, -200, -200, 19, 19, 19, 19,
	-199, -34, 256, -39, 55, 55, 27, -98, 55, -200,
	-200, -200, 55, 112, -200, 55, -88, -103, -39, -39,
	54, -39, -199, -199, -199, -200, -92, 56, 55, -152,
	-95, -126, -156, 59, -156, 60, 60, -138, -167, -137,
	-121, 126, 22, 26, -189, -188, -127, 54, 53, -86,
	13, -156, 57, -66, -66, -66, -66, -66, -200, 59,
	-66, -66, 28, -78, 34, -2, -199, -126, -126, -126,
	-92, -95, -95, -95, -95, -135, -183, -182, 53, 134,
	66, -180, 56, 55, -157, -157, 56, 56, 56, 57,
	-199, 55, 82, -95, -55, -87, 14, 16, -200, -200,
	-200, -200, -33, 92, 263, -200, -200, 9, -76, -2,
	112, 56, -200, -200, -200, -59, -182, 57, -172, 82,
	59, 141, -126, -137, -185, -186, 152, -188, -178, 56,
	-39, -75, -200, 261, 49, 264, -99, -200, -126, 60,
	-55, -200, 55, -126, -192, 39, 262, 265, 54, -186,
	34, -190, 39, -95, 154, 263, 56, 155, 264, -195,
	-196, 52, -199, 265, -196, 52, 10, 9, -66, 151,
	-194, 142, 137, 140, 30, -194, -200, -200, 136, 29,
	68,
}
var yyDef = [...]int{

	23, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 571, 0, 328, 328, 328, 328, 328, 328,
	0, -2, 625, 0, 0, 0, 0, -2, 314, 315,
	0, 317, 318, 948, 948, 948, 948, 948, 0, 0,
	948, 0, 35, 36, 946, 1, 3, 579, 0, 0,
	332, 335, 330, 0, 625, 625, 0, 0, 69, 70,
	0, 0, 0, 0, 623, 623, 623, 645, 646, 647,
	0, 0, 0, 0, 626, 0, 621, 0, 621, 621,
	621, 0, 266, 401, 654, 655, 776, 777, 778, 779,
	780, 781, 782, 783, 784, 785, 786, 787, 788, 789,
	790, 791, 792, 793, 794, 795, 796, 797, 798, 799,
	800, 801, 802, 803, 804, 805, 806, 807, 808, 809,
	810, 811, 812, 813, 814, 815, 816, 817, 818, 819,
	820, 821, 822, 823, 824, 825, 826, 827, 828, 829,
	830, 831, 832, 833, 834, 835, 836, 837, 838, 839,
	840, 841, 842, 843, 844, 845, 846, 847, 848, 849,
	850, 851, 852, 853, 854, 855, 856, 857, 858, 859,
	860, 861, 862, 863, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 873, 874, 875, 876, 877, 878, 879,
	880, 881, 882, 883, 884, 885, 886, 887, 888, 889,
	890, 891, 892, 893, 894, 895, 896, 897, 898, 899,
	900, 901, 902, 903, 904, 905, 906, 907, 908, 909,
	910, 911, 912, 913, 914, 915, 916, 917, 918, 919,
	920, 921, 922, 923, 924, 925, 926, 927, 928, 929,
	930, 931, 932, 933, 934, 935, 936, 937, 938, 939,
	940, 941, 942, 943, 944, 945, 0, 0, 0, 949,
	0, 949, 278, 949, 949, 281, 949, 0, 949, 0,
	288, 0, 0, 294, 949, 311, 312, 299, 313, 316,
	319, 320, 321, 322, 323, 324, 948, 948, 327, 29,
	583, 0, 0, 571, 31, 0, 328, 333, 334, 338,
	336, 337, 329, 0, 347, 351, 0, 410, 0, 415,
	417, -2, -2, 0, 452, 453, 454, 455, 456, 0,
	0, 0, 0, 0, 0, 0, 0, 480, 481, 482,
	483, 556, 557, 558, 559, 560, 561, 562, 563, 419,
	420, 553, 603, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 544, 0, 515, 515, 515, 515, 515, 515,
	515, 515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 46, 48, 401, 52, 0, 923, 607,
	-2, -2, 0, 0, 652, 653, -2, 789, -2, 650,
	651, 658, 659, 660, 661, 662, 663, 664, 665, 666,
	667, 668, 669, 670, 671, 672, 673, 674, 675, 676,
	677, 678, 679, 680, 681, 682, 683, 684, 685, 686,
	687, 688, 689, 690, 691, 692, 693, 694, 695, 696,
	697, 698, 699, 700, 701, 702, 703, 704, 705, 706,
	707, 708, 709, 710, 711, 712, 713, 714, 715, 716,
	717, 718, 719, 720, 721, 722, 723, 724, 725, 726,
	727, 728, 729, 730, 731, 732, 733, 734, 735, 736,
	737, 738, 739, 740, 741, 742, 743, 744, 745, 746,
	747, 748, 749, 750, 751, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 762, 763, 764, 765, 766,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 0,
	0, 87, 0, 85, 0, 0, 0, 0, 0, 0,
	68, 0, 949, 0, 0, 0, 0, 257, 0, 0,
	0, 0, 0, 0, 0, 265, 0, 267, 949, 949,
	270, 950, 951, 949, 949, 949, 0, 949, 949, 277,
	279, 280, 282, 949, 949, 284, 0, 302, 300, 301,
	296, 297, 0, 308, 291, 292, 295, 325, 326, 30,
	947, 24, 0, 0, 580, 0, 572, 573, 576, 579,
	29, 335, 0, 341, 339, 340, 331, 0, 348, 0,
	0, 0, 352, 0, 354, 355, 0, 413, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 437, 438, 439,
	440, 441, 442, 443, 416, 0, 430, 0, 0, 0,
	472, 473, 474, 475, 476, 477, 478, 0, 338, 29,
	0, 450, 0, 0, 0, 0, 0, 0, 0, 0,
	338, 0, 545, 0, 499, 507, 0, 500, 508, 501,
	509, 502, 0, 503, 510, 504, 511, 505, 506, 512,
	0, 0, 0, 343, 0, 0, 50, 0, 400, 0,
	358, 360, 361, 362, -2, 0, 384, -2, 0, 0,
	0, 42, 43, 0, 0, 0, 0, 53, 923, 55,
	56, 0, 0, 0, 170, 616, 617, 618, 614, 212,
	0, 0, 91, 92, 158, 100, 101, 102, 103, 151,
	105, 106, 151, 151, 151, 151, 167, 167, 167, 167,
	134, 135, 136, 137, 138, 0, 0, 121, 151, 151,
	151, 125, 141, 142, 143, 144, 145, 146, 147, 148,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 153,
	153, 153, 155, 155, 648, 0, 949, 0, 949, 83,
	0, 230, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 622, 0, 262, 44, 263, 264, 402, 656, 657,
	268, 269, 271, 272, 273, 274, 275, 276, 283, 287,
	0, 305, 0, 0, 289, 290, 0, 0, 584, 0,
	0, 0, 0, 0, 575, 577, 578, 583, 32, 338,
	0, 564, 0, 0, 0, 342, 27, 411, 412, 414,
	431, 0, 433, 435, 353, 349, 0, 554, -2, 421,
	422, 446, 447, 448, 0, 0, 0, 0, 444, 426,
	0, 457, 458, 459, 460, 461, 462, 463, 464, 465,
	466, 467, 468, 471, 529, 530, 0, 469, 470, 479,
	343, 449, 0, 602, 29, 0, 345, 0, 0, 0,
	454, 556, 0, 454, 556, 0, 0, 0, 551, 548,
	0, 0, 553, 0, 516, 0, 0, 0, 0, 0,
	344, 0, 0, 0, 0, 399, 0, 0, 0, 0,
	0, 0, 389, 0, 0, 392, 0, 0, 0, 0,
	383, 0, 0, 404, 868, 385, 0, 387, 388, 408,
	0, 408, 47, 408, 49, 0, 403, 608, 54, 0,
	0, 59, 60, 609, 610, 611, 612, 0, 84, 213,
	215, 218, 219, 220, 88, 89, 90, 0, 0, 200,
	0, 0, 194, 194, 0, 192, 193, 86, 93, 94,
	95, 96, 97, 98, 162, 0, 0, 0, 166, 0,
	174, 176, 0, 160, 159, 104, 0, 167, 167, 128,
	129, 170, 0, 170, 170, 170, 0, 0, 122, 123,
	124, 116, 0, 117, 118, 119, 0, 120, 0, 0,
	0, 73, 624, 74, 948, 240, 240, 639, 231, 627,
	628, 629, 630, 631, 632, 633, 634, 635, 636, 0,
	75, 233, 235, 234, 238, 0, 0, 0, 258, 949,
	0, 302, 286, 0, 0, 303, 304, 309, 293, 0,
	581, 582, 0, 574, 25, 0, 619, 620, 565, 566,
	356, 432, 434, 436, 0, 343, 423, 444, 427, 0,
	424, 0, 0, 418, 0, 451, -2, 0, 486, 487,
	0, 0, 0, 0, 0, 522, 0, 0, 523, 0,
	571, 0, 549, 0, 0, 498, 0, 517, 0, 0,
	518, 519, 520, 521, 596, 0, 0, -2, 0, 0,
	408, 604, 0, 359, 378, 380, 0, 375, 390, 391,
	393, 0, 395, 0, 397, 398, 363, 365, 366, 0,
	0, 0, 0, 386, 571, 0, 408, 40, 41, 0,
	57, 58, 0, 0, 64, 171, 172, 0, 216, 0,
	0, 0, 187, 194, 194, 190, 195, 191, 0, 163,
	164, 0, 173, 175, 177, 99, 161, 0, 170, 170,
	130, 0, 131, 132, 133, 0, 149, 0, 0, 0,
	0, 649, -2, 221, 0, 948, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 251, 0, 948, 0,
	0, 948, 640, 641, 642, 643, 0, 78, 0, 0,
	0, 0, 0, 261, 45, 305, 306, 307, 585, 0,
	26, 408, 0, 350, 555, 0, 425, 0, 445, 428,
	484, 346, 0, 151, 151, 534, 151, 155, 537, 151,
	539, 151, 542, 0, 0, 0, 0, 0, 0, 0,
	546, 497, 552, 0, 554, 0, 0, 33, 0, 596,
	586, 598, 600, 0, 29, 0, 592, 0, 370, 571,
	0, 0, 372, 379, 0, 0, 373, 0, 374, 394,
	396, 0, 0, 0, 0, 579, 409, 39, 61, 62,
	63, 214, 217, 0, 196, 151, 199, 188, 189, 0,
	165, 152, 126, 127, 168, 169, 167, 0, 167, 0,
	156, 0, 949, 0, 948, 224, 225, 226, 0, 228,
	229, 0, 232, 0, 76, 77, 0, 0, 237, 259,
	285, 567, 357, 485, 429, 488, 531, 167, 535, 536,
	538, 540, 541, 543, 490, 489, 0, 0, 0, 0,
	0, 0, 0, 550, 0, 0, 0, 34, 0, 601,
	-2, 0, 0, 0, 51, 0, 579, 605, 606, 376,
	0, 381, 0, 0, 0, 384, 38, 179, 0, 198,
	0, 368, 170, 150, 170, 0, 0, 71, 0, 223,
	0, 637, 638, 0, 79, 80, 0, 0, 0, 569,
	0, 532, 533, 0, 0, 0, 0, 524, 496, 547,
	0, 0, 0, 599, 0, -2, 0, 594, 593, 371,
	37, 0, 0, 0, 0, 404, 178, 180, 0, 185,
	0, 197, 0, 0, 139, 140, 154, 157, 948, 227,
	0, 0, 0, 0, 239, 28, 0, 0, 491, 493,
	492, 494, 0, 0, 0, 513, 514, 0, 589, 29,
	0, 377, 405, 406, 407, 367, 181, 182, 0, 186,
	184, 0, 369, 222, 0, 253, 0, 81, 82, 75,
	570, 568, 495, 0, 0, 0, 597, -2, 595, 183,
	0, 252, 0, 0, 78, 525, 0, 528, 0, 254,
	0, 236, 526, 0, 0, 0, 201, 0, 0, 202,
	203, 0, 0, 527, 204, 0, 0, 0, 0, 0,
	205, 207, 208, 0, 0, 206, 255, 256, 209, 210,
	211,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 75, 3, 3, 3, 102, 94, 3,
	54, 56, 99, 97, 55, 98, 112, 100, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 348,
	83, 82, 84, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 104, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 93, 3, 105,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	76, 77, 78, 79, 80, 81, 85, 86, 87, 88,
	89, 90, 91, 92, 95, 96, 101, 103, 106, 107,
	108, 109, 110, 111, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:324
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:329
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:330
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:334
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:356
		{
			setParseTree(yylex, nil)
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:362
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:370
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:374
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:380
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 28:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:387
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:393
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:397
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:403
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:407
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:414
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:426
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:438
		{
			yyVAL.str = InsertStr
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:442
		{
			yyVAL.str = ReplaceStr
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:448
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:454
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:458
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:462
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:466
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:471
		{
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:472
		{
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:476
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName.ToViewName()}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:480
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName.ToViewName())
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:486
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:490
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:496
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:500
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 50:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:505
		{
			yyVAL.partitions = nil
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:509
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:515
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:519
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:523
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:527
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:533
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:537
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:543
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:547
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:551
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:557
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:561
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:565
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:569
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:575
		{
			yyVAL.str = SessionStr
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:579
		{
			yyVAL.str = GlobalStr
		}
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:584
		{
			yyVAL.byt = 0
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:588
		{
			yyVAL.byt = 1
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:594
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:599
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 71:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:605
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 72:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:610
		{
			var orreplace bool = false
			if yyDollar[2].byt == 1 {
				orreplace = true
			}
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[4].tableName.ToViewName(), ViewExpr: yyDollar[6].selStmt, OrReplace: orreplace}
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:618
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 74:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:622
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:627
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:631
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:637
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:642
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:647
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:653
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:658
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:664
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:670
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName, IfNotExists: ne}
			setDDL(yylex, yyVAL.ddl)
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:681
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:688
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:692
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:698
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:703
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:707
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:711
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:717
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:723
		{
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:728
		{
			if yyDollar[1].columnType.sawnull {
				yylex.Error("cannot include NULL / NOT NULL more than once")
				return 1
			}
			yyDollar[1].columnType.NotNull = yyDollar[2].boolVal
			yyDollar[1].columnType.sawnull = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:738
		{
			if yyDollar[1].columnType.Default != nil {
				yylex.Error("cannot include DEFAULT more than once")
				return 1
			}
			yyDollar[1].columnType.Default = yyDollar[2].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:747
		{
			if yyDollar[1].columnType.OnUpdate != nil {
				yylex.Error("cannot include ON UPDATE more than once")
				return 1
			}
			yyDollar[1].columnType.OnUpdate = yyDollar[2].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:756
		{
			if yyDollar[1].columnType.sawai {
				yylex.Error("cannot include AUTO_INCREMENT more than once")
				return 1
			}
			yyDollar[1].columnType.Autoincrement = yyDollar[2].boolVal
			yyDollar[1].columnType.sawai = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:766
		{
			if yyDollar[1].columnType.KeyOpt != colKeyNone {
				yylex.Error("cannot include more than one key option for a column definition")
				return 1
			}
			yyDollar[1].columnType.KeyOpt = yyDollar[2].colKeyOpt
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:775
		{
			if yyDollar[1].columnType.Comment != nil {
				yylex.Error("cannot include more than one comment for a column definition")
				return 1
			}
			yyDollar[1].columnType.Comment = yyDollar[2].sqlVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:786
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:798
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:803
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:809
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:815
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:819
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:823
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:827
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:831
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:835
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:839
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:843
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:847
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:853
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:859
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:865
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:871
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:877
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:885
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:889
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:893
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:897
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:901
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:907
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:911
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:915
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:919
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:923
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:927
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:931
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:935
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:939
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:943
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:947
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:951
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:955
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:959
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 140:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:964
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:970
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:974
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:978
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:982
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:986
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:990
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:994
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:998
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1004
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1009
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1014
		{
			yyVAL.sqlVal = nil
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1018
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1023
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 154:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1027
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1035
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1039
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 157:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1045
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1053
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1057
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1062
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1066
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1073
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1077
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1083
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1089
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1095
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1100
		{
			yyVAL.str = ""
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1104
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1108
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1113
		{
			yyVAL.str = ""
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1117
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1121
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1127
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1131
		{
			yyVAL.colKeyOpt = colKey
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1135
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1139
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1145
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 178:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1151
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 179:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1155
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1161
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1165
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1171
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1175
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1180
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1186
		{
			yyVAL.str = ""
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1190
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1196
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1200
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1204
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1208
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1212
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1218
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1222
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1227
		{
			yyVAL.str = ""
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1231
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1237
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1241
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1247
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1253
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1257
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 201:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1264
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 202:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1268
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 203:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1272
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 204:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1276
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1282
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1288
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1294
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1298
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1302
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1306
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1310
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 212:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1315
		{
			yyVAL.str = ""
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1319
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1323
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1331
		{
			yyVAL.str = yyDollar[1].str
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1335
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1339
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1345
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1349
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1353
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 221:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1359
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 222:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1363
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			ddl.Column = yyDollar[8].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 223:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1370
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 224:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1377
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1381
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: DropStr, Column: NewColIdent(string(yyDollar[7].bytes)), Table: yyDollar[4].tableName}
		}
	case 226:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1385
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 227:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1389
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: RenameStr, Table: yyDollar[4].tableName, Column: NewColIdent(string(yyDollar[7].bytes)), ToColumn: NewColIdent(string(yyDollar[9].bytes))}
		}
	case 228:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1393
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 229:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1398
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 230:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1403
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 231:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1407
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 232:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1411
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 233:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1423
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 234:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1433
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 235:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1437
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 236:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1441
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 237:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1454
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 238:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1464
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 239:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1468
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 240:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1480
		{
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1482
		{
		}
	case 252:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1498
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1504
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1508
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 255:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1514
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 256:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1518
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1524
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1530
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 259:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1534
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1542
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 261:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1550
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1555
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromViews: yyDollar[4].tableNames, IfExists: exists}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1563
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1567
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1573
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1577
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1582
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1588
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1593
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1597
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1601
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1606
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1610
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1614
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1618
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1622
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1626
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1630
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1634
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1638
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1642
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1646
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1650
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1654
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1658
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 286:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1663
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1673
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1677
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1681
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1687
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1692
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1696
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1700
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1704
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1718
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1724
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1728
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1734
		{
			yyVAL.str = ""
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1738
		{
			yyVAL.str = "full "
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1744
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1748
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1754
		{
			yyVAL.str = ""
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1758
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1762
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1768
		{
			yyVAL.showFilter = nil
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1772
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1776
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1782
		{
			yyVAL.showFilter = nil
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1786
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1792
		{
			yyVAL.str = ""
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1796
		{
			yyVAL.str = SessionStr
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1800
		{
			yyVAL.str = GlobalStr
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1806
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1810
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1816
		{
			yyVAL.statement = &Begin{}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1820
		{
			yyVAL.statement = &Begin{}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1826
		{
			yyVAL.statement = &Commit{}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1832
		{
			yyVAL.statement = &Rollback{}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1838
		{
			yyVAL.statement = &OtherRead{}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1843
		{
			yyVAL.statement = &Show{Type: "columns", OnTable: yyDollar[2].tableName}
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1847
		{
			yyVAL.statement = &OtherRead{}
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1851
		{
			yyVAL.statement = &OtherRead{}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1855
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1859
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1863
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1867
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1873
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1877
		{
			setAllowComments(yylex, true)
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1881
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1887
		{
			yyVAL.bytes2 = nil
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1891
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1897
		{
			yyVAL.str = UnionStr
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1901
		{
			yyVAL.str = UnionAllStr
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1905
		{
			yyVAL.str = UnionDistinctStr
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1910
		{
			yyVAL.str = ""
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1914
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1918
		{
			yyVAL.str = SQLCacheStr
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1923
		{
			yyVAL.str = ""
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1927
		{
			yyVAL.str = ""
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1931
		{
			yyVAL.str = DistinctStr
		}
	case 341:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1936
		{
			yyVAL.str = ""
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1940
		{
			yyVAL.str = StraightJoinHint
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1945
		{
			yyVAL.selectExprs = nil
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1949
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1955
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1959
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1965
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1969
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1973
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 350:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1977
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 351:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1982
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1986
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1990
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1997
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2002
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2006
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2012
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2016
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2026
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2030
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2034
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2040
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2046
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 367:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2050
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2056
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2060
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2066
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2070
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 372:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2083
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 373:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2087
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2091
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2095
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2101
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2103
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 378:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2107
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2109
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2113
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2115
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 382:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2118
		{
			yyVAL.empty = struct{}{}
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2120
		{
			yyVAL.empty = struct{}{}
		}
	case 384:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2123
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2127
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2131
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2138
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2144
		{
			yyVAL.str = JoinStr
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2148
		{
			yyVAL.str = JoinStr
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2152
		{
			yyVAL.str = JoinStr
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2158
		{
			yyVAL.str = StraightJoinStr
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2164
		{
			yyVAL.str = LeftJoinStr
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2168
		{
			yyVAL.str = LeftJoinStr
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2172
		{
			yyVAL.str = RightJoinStr
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2176
		{
			yyVAL.str = RightJoinStr
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2182
		{
			yyVAL.str = NaturalJoinStr
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2186
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2196
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2200
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2206
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2210
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2216
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2221
		{
			yyVAL.indexHints = nil
		}
	case 405:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2225
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 406:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2229
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 407:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2233
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 408:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2238
		{
			yyVAL.expr = nil
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2242
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2248
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2252
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2256
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2260
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2264
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2268
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2272
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 417:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2278
		{
			yyVAL.str = ""
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2282
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2288
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2292
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2298
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2302
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 423:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2306
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 424:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2310
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 425:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2314
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2318
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 427:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2322
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 428:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2326
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 429:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2330
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2334
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2340
		{
			yyVAL.str = IsNullStr
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2344
		{
			yyVAL.str = IsNotNullStr
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2348
		{
			yyVAL.str = IsTrueStr
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2352
		{
			yyVAL.str = IsNotTrueStr
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2356
		{
			yyVAL.str = IsFalseStr
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2360
		{
			yyVAL.str = IsNotFalseStr
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2366
		{
			yyVAL.str = EqualStr
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2370
		{
			yyVAL.str = LessThanStr
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2374
		{
			yyVAL.str = GreaterThanStr
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2378
		{
			yyVAL.str = LessEqualStr
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2382
		{
			yyVAL.str = GreaterEqualStr
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2386
		{
			yyVAL.str = NotEqualStr
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2390
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2395
		{
			yyVAL.expr = nil
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2399
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2405
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2409
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2413
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2419
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2425
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2429
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2435
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2439
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2443
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2447
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2451
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2455
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2459
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2463
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2467
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2471
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2475
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2479
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2483
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2487
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2491
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2495
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2499
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2503
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2507
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2511
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2515
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2519
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2523
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2527
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2535
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2549
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2553
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2557
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 484:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2575
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: yyDollar[3].str == DistinctStr, Exprs: yyDollar[4].selectExprs}
		}
	case 485:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2579
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 486:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2589
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 487:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2593
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 488:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2597
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 489:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2601
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 490:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2605
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 491:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2609
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 492:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2613
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 493:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2617
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 494:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2621
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 495:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2625
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 496:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2629
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 497:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2633
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 498:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2637
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2647
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2651
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2655
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2660
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2665
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2670
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2676
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2681
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2686
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2690
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2694
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2699
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2704
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2709
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 513:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2713
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 514:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2717
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2727
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2737
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 519:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2741
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 520:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2745
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 521:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2749
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 522:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2753
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 523:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2757
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 524:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2763
		{
			yyVAL.str = ""
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2767
		{
			yyVAL.str = BooleanModeStr
		}
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2771
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 527:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2775
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2779
		{
			yyVAL.str = QueryExpansionStr
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2785
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2789
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2795
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2799
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2803
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2807
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2811
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2815
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2821
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2825
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2829
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2833
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2837
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2841
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2845
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 544:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2850
		{
			yyVAL.expr = nil
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2854
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 546:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2859
		{
			yyVAL.str = string("")
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2863
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2869
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2873
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 550:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2879
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 551:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2884
		{
			yyVAL.expr = nil
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2888
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2894
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2898
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 555:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2902
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2908
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2912
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2916
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2920
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2924
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2928
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2932
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2936
		{
			yyVAL.expr = &NullVal{}
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2942
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2951
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2955
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2960
		{
			yyVAL.exprs = nil
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2964
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2969
		{
			yyVAL.expr = nil
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2973
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 571:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2978
		{
			yyVAL.orderBy = nil
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2982
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2988
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2992
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2998
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 576:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3003
		{
			yyVAL.str = AscScr
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3007
		{
			yyVAL.str = AscScr
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3011
		{
			yyVAL.str = DescScr
		}
	case 579:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3016
		{
			yyVAL.limit = nil
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3020
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 581:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3024
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 582:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3028
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 583:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3033
		{
			yyVAL.str = ""
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3037
		{
			yyVAL.str = ForUpdateStr
		}
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3041
		{
			yyVAL.str = ShareModeStr
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3054
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3058
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3062
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 589:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3067
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 590:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3071
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 591:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3075
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3082
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3086
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3090
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 595:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3094
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 596:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3099
		{
			yyVAL.updateExprs = nil
		}
	case 597:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3103
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3109
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3113
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3119
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3123
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3129
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3135
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3145
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3149
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3155
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3161
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3165
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3171
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3175
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3179
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3183
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3190
		{
			yyVAL.bytes = []byte("charset")
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3197
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3201
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3205
		{
			yyVAL.expr = &Default{}
		}
	case 621:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3214
		{
			yyVAL.byt = 0
		}
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3216
		{
			yyVAL.byt = 1
		}
	case 623:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3219
		{
			yyVAL.byt = 0
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3221
		{
			yyVAL.byt = 1
		}
	case 625:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3224
		{
			yyVAL.str = ""
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3226
		{
			yyVAL.str = IgnoreStr
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3230
		{
			yyVAL.empty = struct{}{}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3232
		{
			yyVAL.empty = struct{}{}
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3234
		{
			yyVAL.empty = struct{}{}
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3236
		{
			yyVAL.empty = struct{}{}
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3238
		{
			yyVAL.empty = struct{}{}
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3240
		{
			yyVAL.empty = struct{}{}
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3242
		{
			yyVAL.empty = struct{}{}
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3244
		{
			yyVAL.empty = struct{}{}
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3246
		{
			yyVAL.empty = struct{}{}
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3248
		{
			yyVAL.empty = struct{}{}
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3252
		{
			yyVAL.empty = struct{}{}
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3254
		{
			yyVAL.empty = struct{}{}
		}
	case 639:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3257
		{
			yyVAL.empty = struct{}{}
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3259
		{
			yyVAL.empty = struct{}{}
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3261
		{
			yyVAL.empty = struct{}{}
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3265
		{
			yyVAL.empty = struct{}{}
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3267
		{
			yyVAL.empty = struct{}{}
		}
	case 644:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3270
		{
			yyVAL.empty = struct{}{}
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3272
		{
			yyVAL.empty = struct{}{}
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3274
		{
			yyVAL.empty = struct{}{}
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3276
		{
			yyVAL.empty = struct{}{}
		}
	case 648:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3279
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3281
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3285
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3289
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3296
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3302
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3306
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3313
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3627
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3636
		{
			decNesting(yylex)
		}
	case 948:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3641
		{
			skipToEnd(yylex)
		}
	case 949:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3646
		{
			skipToEnd(yylex)
		}
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3650
		{
			skipToEnd(yylex)
		}
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3654
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
