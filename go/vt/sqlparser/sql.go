// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func yyPosition(yylex interface{}) int {
	return yylex.(*Tokenizer).Position
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:57
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	int                   int
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	statements            Statements
	partitions            Partitions
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	joinCondition         JoinCondition
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	asOf                  *AsOf
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	sqlVal                *SQLVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	setExprs              SetExprs
	setExpr               *SetExpr
	colIdent              ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	TableSpec             *TableSpec
	columnType            ColumnType
	columnOrder           *ColumnOrder
	triggerOrder          *TriggerOrder
	colKeyOpt             ColumnKeyOption
	optVal                Expr
	LengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexInfo             *IndexInfo
	indexOption           *IndexOption
	indexOptions          []*IndexOption
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	constraintDefinition  *ConstraintDefinition
	constraintInfo        ConstraintInfo
	ReferenceAction       ReferenceAction
	partDefs              []*PartitionDefinition
	partDef               *PartitionDefinition
	partSpec              *PartitionSpec
	vindexParam           VindexParam
	vindexParams          []VindexParam
	showFilter            *ShowFilter
	optLike               *OptLike
	caseStatementCases    []CaseStatementCase
	caseStatementCase     CaseStatementCase
	ifStatementConditions []IfStatementCondition
	ifStatementCondition  IfStatementCondition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const UNLOCK = 57373
const KEYS = 57374
const UNIQUE = 57375
const KEY = 57376
const SYSTEM_TIME = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const INTEGRAL = 57401
const FLOAT = 57402
const HEXNUM = 57403
const VALUE_ARG = 57404
const LIST_ARG = 57405
const COMMENT = 57406
const COMMENT_KEYWORD = 57407
const BIT_LITERAL = 57408
const NULL = 57409
const TRUE = 57410
const FALSE = 57411
const OFF = 57412
const OR = 57413
const AND = 57414
const NOT = 57415
const BETWEEN = 57416
const CASE = 57417
const WHEN = 57418
const THEN = 57419
const ELSE = 57420
const ELSEIF = 57421
const END = 57422
const LE = 57423
const GE = 57424
const NE = 57425
const NULL_SAFE_EQUAL = 57426
const IS = 57427
const LIKE = 57428
const REGEXP = 57429
const IN = 57430
const SHIFT_LEFT = 57431
const SHIFT_RIGHT = 57432
const DIV = 57433
const MOD = 57434
const UNARY = 57435
const COLLATE = 57436
const BINARY = 57437
const UNDERSCORE_BINARY = 57438
const UNDERSCORE_UTF8MB4 = 57439
const INTERVAL = 57440
const JSON_EXTRACT_OP = 57441
const JSON_UNQUOTE_EXTRACT_OP = 57442
const CREATE = 57443
const ALTER = 57444
const DROP = 57445
const RENAME = 57446
const ANALYZE = 57447
const ADD = 57448
const FLUSH = 57449
const MODIFY = 57450
const CHANGE = 57451
const SCHEMA = 57452
const TABLE = 57453
const INDEX = 57454
const INDEXES = 57455
const VIEW = 57456
const TO = 57457
const IGNORE = 57458
const IF = 57459
const PRIMARY = 57460
const COLUMN = 57461
const SPATIAL = 57462
const FULLTEXT = 57463
const KEY_BLOCK_SIZE = 57464
const CHECK = 57465
const ACTION = 57466
const CASCADE = 57467
const CONSTRAINT = 57468
const FOREIGN = 57469
const NO = 57470
const REFERENCES = 57471
const RESTRICT = 57472
const FIRST = 57473
const AFTER = 57474
const SHOW = 57475
const DESCRIBE = 57476
const EXPLAIN = 57477
const DATE = 57478
const ESCAPE = 57479
const REPAIR = 57480
const OPTIMIZE = 57481
const TRUNCATE = 57482
const FORMAT = 57483
const MAXVALUE = 57484
const PARTITION = 57485
const REORGANIZE = 57486
const LESS = 57487
const THAN = 57488
const PROCEDURE = 57489
const TRIGGER = 57490
const VINDEX = 57491
const VINDEXES = 57492
const STATUS = 57493
const VARIABLES = 57494
const WARNINGS = 57495
const SEQUENCE = 57496
const EACH = 57497
const ROW = 57498
const BEFORE = 57499
const FOLLOWS = 57500
const PRECEDES = 57501
const DEFINER = 57502
const BEGIN = 57503
const START = 57504
const TRANSACTION = 57505
const COMMIT = 57506
const ROLLBACK = 57507
const BIT = 57508
const TINYINT = 57509
const SMALLINT = 57510
const MEDIUMINT = 57511
const INT = 57512
const INTEGER = 57513
const BIGINT = 57514
const INTNUM = 57515
const REAL = 57516
const DOUBLE = 57517
const FLOAT_TYPE = 57518
const DECIMAL = 57519
const NUMERIC = 57520
const DEC = 57521
const FIXED = 57522
const PRECISION = 57523
const TIME = 57524
const TIMESTAMP = 57525
const DATETIME = 57526
const YEAR = 57527
const CHAR = 57528
const VARCHAR = 57529
const BOOL = 57530
const CHARACTER = 57531
const VARBINARY = 57532
const NCHAR = 57533
const NVARCHAR = 57534
const NATIONAL = 57535
const VARYING = 57536
const TEXT = 57537
const TINYTEXT = 57538
const MEDIUMTEXT = 57539
const LONGTEXT = 57540
const LONG = 57541
const BLOB = 57542
const TINYBLOB = 57543
const MEDIUMBLOB = 57544
const LONGBLOB = 57545
const JSON = 57546
const ENUM = 57547
const GEOMETRY = 57548
const POINT = 57549
const LINESTRING = 57550
const POLYGON = 57551
const GEOMETRYCOLLECTION = 57552
const MULTIPOINT = 57553
const MULTILINESTRING = 57554
const MULTIPOLYGON = 57555
const NULLX = 57556
const AUTO_INCREMENT = 57557
const APPROXNUM = 57558
const SIGNED = 57559
const UNSIGNED = 57560
const ZEROFILL = 57561
const COLLATION = 57562
const DATABASES = 57563
const SCHEMAS = 57564
const TABLES = 57565
const VITESS_METADATA = 57566
const VSCHEMA = 57567
const FULL = 57568
const PROCESSLIST = 57569
const COLUMNS = 57570
const FIELDS = 57571
const ENGINES = 57572
const PLUGINS = 57573
const NAMES = 57574
const CHARSET = 57575
const GLOBAL = 57576
const SESSION = 57577
const ISOLATION = 57578
const LEVEL = 57579
const READ = 57580
const WRITE = 57581
const ONLY = 57582
const REPEATABLE = 57583
const COMMITTED = 57584
const UNCOMMITTED = 57585
const SERIALIZABLE = 57586
const CURRENT_TIMESTAMP = 57587
const DATABASE = 57588
const CURRENT_DATE = 57589
const CURRENT_TIME = 57590
const LOCALTIME = 57591
const LOCALTIMESTAMP = 57592
const UTC_DATE = 57593
const UTC_TIME = 57594
const UTC_TIMESTAMP = 57595
const REPLACE = 57596
const CONVERT = 57597
const CAST = 57598
const SUBSTR = 57599
const SUBSTRING = 57600
const GROUP_CONCAT = 57601
const SEPARATOR = 57602
const TIMESTAMPADD = 57603
const TIMESTAMPDIFF = 57604
const MATCH = 57605
const AGAINST = 57606
const BOOLEAN = 57607
const LANGUAGE = 57608
const WITH = 57609
const QUERY = 57610
const EXPANSION = 57611
const UNUSED = 57612
const ARRAY = 57613
const CUME_DIST = 57614
const DESCRIPTION = 57615
const DENSE_RANK = 57616
const EMPTY = 57617
const EXCEPT = 57618
const FIRST_VALUE = 57619
const GROUPING = 57620
const GROUPS = 57621
const JSON_TABLE = 57622
const LAG = 57623
const LAST_VALUE = 57624
const LATERAL = 57625
const LEAD = 57626
const MEMBER = 57627
const NTH_VALUE = 57628
const NTILE = 57629
const OF = 57630
const OVER = 57631
const PERCENT_RANK = 57632
const RANK = 57633
const RECURSIVE = 57634
const ROW_NUMBER = 57635
const SYSTEM = 57636
const WINDOW = 57637
const ACTIVE = 57638
const ADMIN = 57639
const BUCKETS = 57640
const CLONE = 57641
const COMPONENT = 57642
const DEFINITION = 57643
const ENFORCED = 57644
const EXCLUDE = 57645
const FOLLOWING = 57646
const GEOMCOLLECTION = 57647
const GET_MASTER_PUBLIC_KEY = 57648
const HISTOGRAM = 57649
const HISTORY = 57650
const INACTIVE = 57651
const INVISIBLE = 57652
const LOCKED = 57653
const MASTER_COMPRESSION_ALGORITHMS = 57654
const MASTER_PUBLIC_KEY_PATH = 57655
const MASTER_TLS_CIPHERSUITES = 57656
const MASTER_ZSTD_COMPRESSION_LEVEL = 57657
const NESTED = 57658
const NETWORK_NAMESPACE = 57659
const NOWAIT = 57660
const NULLS = 57661
const OJ = 57662
const OLD = 57663
const OPTIONAL = 57664
const ORDINALITY = 57665
const ORGANIZATION = 57666
const OTHERS = 57667
const PATH = 57668
const PERSIST = 57669
const PERSIST_ONLY = 57670
const PRECEDING = 57671
const PRIVILEGE_CHECKS_USER = 57672
const PROCESS = 57673
const RANDOM = 57674
const REFERENCE = 57675
const REQUIRE_ROW_FORMAT = 57676
const RESOURCE = 57677
const RESPECT = 57678
const RESTART = 57679
const RETAIN = 57680
const REUSE = 57681
const ROLE = 57682
const SECONDARY = 57683
const SECONDARY_ENGINE = 57684
const SECONDARY_LOAD = 57685
const SECONDARY_UNLOAD = 57686
const SKIP = 57687
const SRID = 57688
const THREAD_PRIORITY = 57689
const TIES = 57690
const UNBOUNDED = 57691
const VCPU = 57692
const VISIBLE = 57693

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"UNIQUE",
	"KEY",
	"SYSTEM_TIME",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"ELSEIF",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"MODIFY",
	"CHANGE",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"INDEXES",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"FIRST",
	"AFTER",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"FORMAT",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"EACH",
	"ROW",
	"BEFORE",
	"FOLLOWS",
	"PRECEDES",
	"DEFINER",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DEC",
	"FIXED",
	"PRECISION",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NATIONAL",
	"VARYING",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"LONG",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 31,
	-2, 4,
	-1, 33,
	165, 78,
	-2, 737,
	-1, 41,
	168, 389,
	169, 389,
	-2, 377,
	-1, 48,
	1, 1040,
	369, 1040,
	-2, 408,
	-1, 334,
	115, 745,
	-2, 741,
	-1, 335,
	115, 746,
	-2, 742,
	-1, 405,
	85, 996,
	115, 996,
	-2, 67,
	-1, 406,
	85, 914,
	115, 914,
	-2, 68,
	-1, 411,
	85, 883,
	115, 883,
	-2, 705,
	-1, 413,
	85, 944,
	115, 944,
	-2, 707,
	-1, 598,
	5, 31,
	-2, 402,
	-1, 602,
	5, 31,
	-2, 401,
	-1, 729,
	1, 453,
	5, 453,
	12, 453,
	13, 453,
	14, 453,
	15, 453,
	17, 453,
	19, 453,
	29, 453,
	30, 453,
	44, 453,
	45, 453,
	46, 453,
	47, 453,
	48, 453,
	50, 453,
	51, 453,
	54, 453,
	55, 453,
	57, 453,
	58, 453,
	369, 453,
	-2, 478,
	-1, 732,
	55, 48,
	57, 48,
	-2, 52,
	-1, 895,
	115, 748,
	-2, 744,
	-1, 1098,
	56, 321,
	59, 321,
	-2, 286,
	-1, 1147,
	5, 32,
	-2, 542,
	-1, 1178,
	5, 31,
	-2, 682,
	-1, 1271,
	5, 31,
	-2, 69,
	-1, 1380,
	1, 497,
	5, 497,
	12, 497,
	13, 497,
	14, 497,
	15, 497,
	17, 497,
	19, 497,
	29, 497,
	30, 497,
	44, 497,
	45, 497,
	46, 497,
	47, 497,
	48, 497,
	50, 497,
	51, 497,
	54, 497,
	55, 497,
	57, 497,
	58, 497,
	369, 497,
	-2, 478,
	-1, 1483,
	5, 32,
	-2, 683,
	-1, 1513,
	5, 31,
	-2, 69,
	-1, 1551,
	5, 31,
	-2, 685,
	-1, 1637,
	5, 32,
	-2, 686,
	-1, 1687,
	369, 108,
	-2, 31,
}

const yyPrivate = 57344

const yyLast = 17661

var yyAct = [...]int{

	366, 54, 1686, 1741, 1719, 1710, 1681, 1641, 1694, 1682,
	1447, 1691, 8, 1625, 1690, 7, 1689, 6, 1316, 1685,
	335, 683, 1071, 1531, 1393, 1069, 1565, 1688, 5, 401,
	1496, 365, 1360, 1642, 1516, 982, 871, 1013, 1394, 1226,
	980, 313, 984, 352, 1361, 1026, 1357, 1022, 1371, 1204,
	1012, 976, 302, 1367, 86, 54, 416, 1047, 1333, 933,
	101, 1064, 1286, 101, 920, 1093, 1263, 318, 745, 101,
	443, 967, 848, 978, 1292, 956, 1019, 1059, 725, 1293,
	948, 897, 64, 620, 614, 744, 404, 328, 726, 960,
	1034, 399, 626, 337, 101, 635, 1761, 322, 422, 101,
	447, 101, 303, 304, 832, 396, 307, 734, 1757, 1752,
	1744, 1736, 101, 1735, 434, 1007, 1705, 63, 101, 1289,
	1698, 68, 339, 1652, 1680, 1635, 1669, 1448, 1651, 1350,
	326, 1475, 1634, 699, 421, 26, 1388, 55, 29, 30,
	445, 1001, 700, 96, 92, 93, 570, 94, 332, 70,
	71, 72, 73, 74, 1601, 648, 647, 657, 658, 650,
	651, 652, 653, 654, 655, 656, 649, 1002, 1003, 659,
	379, 595, 385, 386, 383, 384, 382, 381, 380, 306,
	1687, 3, 424, 305, 426, 61, 387, 388, 1389, 1390,
	26, 1246, 55, 29, 30, 1213, 1033, 407, 1212, 1538,
	746, 1214, 747, 588, 341, 1318, 1035, 589, 586, 587,
	310, 957, 312, 31, 569, 572, 1048, 1238, 574, 1053,
	1466, 1048, 1243, 1242, 1039, 1041, 1464, 1040, 297, 1655,
	1656, 1078, 593, 1643, 1619, 308, 861, 55, 29, 30,
	61, 1320, 862, 1239, 594, 1668, 1035, 299, 581, 582,
	859, 571, 573, 425, 1679, 1626, 1077, 1244, 31, 1236,
	1315, 961, 1060, 1695, 1617, 1237, 1739, 1742, 1738, 1517,
	1518, 1319, 1027, 1724, 860, 444, 1762, 444, 444, 95,
	1297, 1759, 444, 300, 444, 863, 1753, 1745, 423, 431,
	444, 312, 101, 1714, 1526, 434, 1277, 434, 434, 54,
	54, 824, 434, 816, 434, 26, 1203, 55, 29, 30,
	434, 1202, 1525, 599, 1201, 601, 1025, 1029, 1696, 54,
	419, 311, 951, 608, 1241, 271, 600, 91, 31, 1608,
	88, 101, 985, 987, 668, 1029, 1121, 670, 1486, 1120,
	1566, 1217, 417, 1602, 671, 672, 1048, 575, 576, 434,
	568, 1209, 580, 1568, 583, 61, 1136, 869, 604, 605,
	596, 1253, 1677, 1633, 753, 681, 740, 685, 686, 687,
	688, 689, 690, 691, 692, 693, 694, 695, 1695, 698,
	701, 701, 701, 707, 701, 701, 707, 701, 715, 716,
	717, 718, 719, 720, 26, 730, 55, 29, 30, 622,
	56, 1038, 617, 621, 1062, 613, 1712, 1677, 639, 1713,
	439, 1711, 1028, 986, 101, 101, 101, 31, 1023, 640,
	1024, 1240, 1524, 1412, 1567, 1312, 1021, 1027, 649, 434,
	1028, 659, 742, 1696, 90, 89, 101, 1029, 1008, 1029,
	434, 624, 444, 444, 61, 659, 997, 101, 1157, 1029,
	866, 101, 854, 849, 684, 56, 101, 1154, 1086, 578,
	101, 632, 434, 434, 1227, 697, 634, 1695, 724, 610,
	1615, 611, 1760, 904, 612, 1413, 1590, 1677, 634, 598,
	602, 430, 748, 26, 1288, 55, 29, 30, 902, 903,
	901, 673, 674, 675, 676, 677, 678, 679, 680, 623,
	56, 733, 603, 633, 632, 738, 31, 26, 590, 55,
	29, 30, 835, 836, 702, 704, 706, 708, 710, 712,
	713, 634, 1696, 703, 705, 407, 709, 711, 88, 714,
	31, 77, 1028, 61, 1028, 1311, 825, 850, 427, 1308,
	834, 669, 1087, 579, 1028, 417, 949, 682, 1153, 1352,
	1301, 1297, 1751, 671, 672, 1298, 1695, 61, 1305, 1307,
	1732, 1756, 671, 672, 818, 1287, 1677, 309, 78, 81,
	56, 444, 444, 1334, 444, 1302, 435, 436, 437, 415,
	1695, 1400, 444, 444, 629, 1743, 1748, 1742, 1747, 592,
	1639, 434, 434, 101, 434, 101, 1666, 1511, 101, 729,
	633, 632, 434, 434, 652, 653, 654, 655, 656, 649,
	444, 1696, 659, 1510, 949, 1336, 1165, 1152, 634, 1151,
	633, 632, 83, 85, 1029, 1616, 80, 1755, 1268, 101,
	434, 606, 90, 89, 101, 1696, 633, 632, 634, 393,
	394, 839, 840, 1720, 842, 1728, 434, 1727, 61, 872,
	873, 101, 845, 846, 634, 1677, 1338, 434, 900, 56,
	1725, 1342, 1266, 1337, 874, 1335, 1247, 837, 838, 1665,
	1340, 54, 87, 1545, 898, 887, 889, 890, 851, 1677,
	858, 888, 24, 1339, 1508, 921, 685, 922, 650, 651,
	652, 653, 654, 655, 656, 649, 1341, 1343, 659, 633,
	632, 434, 1726, 1427, 648, 647, 657, 658, 650, 651,
	652, 653, 654, 655, 656, 649, 1405, 634, 659, 1028,
	884, 885, 876, 1264, 1095, 1301, 1297, 1133, 1134, 1135,
	1298, 979, 891, 1299, 1300, 730, 434, 434, 1613, 730,
	895, 852, 1584, 101, 893, 1215, 1227, 1216, 56, 317,
	1302, 101, 101, 868, 1430, 101, 101, 417, 82, 101,
	101, 101, 1094, 633, 632, 924, 925, 1581, 633, 632,
	1734, 417, 56, 684, 927, 1721, 434, 936, 937, 1522,
	894, 634, 1560, 1670, 1502, 1667, 634, 1450, 946, 1445,
	896, 1441, 867, 905, 906, 907, 908, 909, 910, 911,
	912, 913, 914, 915, 916, 917, 918, 919, 992, 633,
	632, 1438, 994, 1017, 938, 941, 1647, 607, 444, 1436,
	444, 950, 990, 1435, 633, 632, 1284, 634, 998, 999,
	1720, 995, 1049, 1050, 1051, 1052, 1006, 101, 434, 1472,
	434, 834, 634, 1283, 101, 101, 1222, 899, 101, 1084,
	952, 682, 1502, 1644, 895, 1083, 1036, 1037, 1010, 1042,
	1043, 1044, 1045, 1046, 407, 923, 931, 856, 101, 831,
	101, 101, 830, 1066, 1067, 1068, 101, 1056, 1057, 1058,
	101, 101, 101, 101, 101, 822, 1061, 1063, 1073, 820,
	1075, 1560, 1629, 607, 1009, 1137, 1014, 819, 932, 934,
	1502, 1618, 1579, 940, 943, 944, 945, 1560, 1609, 1560,
	1571, 682, 1560, 607, 1502, 1501, 648, 647, 657, 658,
	650, 651, 652, 653, 654, 655, 656, 649, 817, 955,
	659, 958, 959, 898, 441, 729, 1488, 607, 1575, 729,
	1485, 607, 1574, 729, 1420, 1419, 875, 1416, 1417, 26,
	736, 55, 29, 30, 1125, 1123, 1124, 1406, 621, 1126,
	1030, 1179, 1180, 1416, 1415, 730, 730, 730, 730, 730,
	895, 1142, 31, 1205, 1010, 964, 607, 633, 632, 26,
	979, 65, 1197, 1138, 1354, 101, 101, 101, 101, 101,
	1148, 607, 730, 1181, 737, 634, 739, 101, 1358, 61,
	101, 741, 1176, 1145, 101, 928, 930, 929, 607, 1177,
	894, 935, 101, 756, 755, 741, 929, 1146, 964, 1205,
	1200, 963, 1695, 1148, 1481, 1589, 1199, 1716, 1164, 61,
	736, 26, 964, 434, 1324, 1418, 991, 1166, 735, 1218,
	1000, 1148, 1207, 1182, 1208, 1170, 1185, 1194, 26, 964,
	1219, 1139, 1140, 1141, 1183, 1184, 1169, 1186, 355, 354,
	357, 358, 359, 360, 741, 1206, 1228, 356, 361, 1210,
	1224, 1225, 54, 1082, 737, 735, 735, 1696, 1550, 870,
	1148, 61, 444, 823, 444, 444, 407, 319, 61, 1653,
	1645, 434, 1582, 1132, 1248, 1249, 1533, 1512, 61, 1035,
	1491, 1255, 434, 101, 434, 434, 899, 1065, 1399, 1372,
	1373, 1262, 1060, 969, 972, 973, 974, 970, 1221, 971,
	975, 1677, 1265, 1372, 1373, 882, 1055, 1054, 1317, 1250,
	1251, 1252, 1254, 1070, 1534, 1282, 1702, 61, 1700, 1683,
	1267, 1178, 1378, 1424, 1294, 1306, 1310, 1375, 101, 1358,
	1291, 1269, 1278, 1014, 1280, 1281, 855, 434, 1162, 827,
	931, 1285, 1377, 1256, 1188, 1258, 1259, 1260, 1261, 729,
	729, 729, 729, 729, 1303, 1296, 1313, 1314, 1363, 1304,
	54, 1187, 323, 324, 729, 647, 657, 658, 650, 651,
	652, 653, 654, 655, 656, 649, 729, 1662, 659, 1650,
	434, 434, 1382, 1383, 1384, 1328, 1359, 1660, 1332, 1362,
	1191, 1189, 1345, 1327, 56, 1192, 1190, 1344, 434, 1131,
	1321, 364, 969, 972, 973, 974, 970, 1122, 971, 975,
	1193, 1369, 973, 974, 1376, 1381, 1130, 1548, 434, 434,
	1440, 434, 434, 1290, 1229, 1351, 1144, 1404, 1403, 1223,
	615, 1379, 1271, 1353, 1147, 1149, 1387, 1150, 1392, 1257,
	1529, 616, 754, 1156, 1397, 1398, 1159, 1160, 1161, 1391,
	1396, 627, 628, 1167, 442, 1168, 1479, 1326, 1171, 1172,
	1074, 1173, 1174, 872, 873, 826, 1272, 1385, 1090, 625,
	101, 977, 1330, 1386, 1422, 1423, 409, 815, 101, 407,
	1578, 1196, 314, 1346, 1347, 1129, 1348, 1349, 1409, 627,
	628, 320, 321, 1128, 1595, 432, 315, 65, 1355, 1356,
	1594, 1536, 1205, 1704, 1703, 730, 1158, 434, 1155, 847,
	101, 434, 630, 1703, 1433, 1704, 434, 1605, 1402, 434,
	434, 434, 865, 67, 1410, 101, 1432, 1380, 1426, 1431,
	1434, 1473, 1274, 1275, 1276, 69, 47, 1437, 1326, 1014,
	1364, 1014, 62, 1, 1407, 1408, 1295, 1449, 1530, 1103,
	1444, 1411, 1624, 1454, 1020, 1011, 1428, 76, 1414, 414,
	75, 1614, 1085, 577, 1520, 279, 1018, 1401, 1234, 1233,
	1230, 1245, 1032, 1232, 1231, 1235, 762, 760, 1455, 761,
	1462, 759, 764, 434, 434, 434, 1480, 763, 1031, 758,
	282, 402, 434, 749, 1498, 1499, 1494, 631, 84, 48,
	434, 1523, 1309, 1097, 54, 1459, 1460, 1500, 1461, 1219,
	1504, 1463, 1495, 1465, 79, 853, 584, 585, 1429, 284,
	667, 1127, 1476, 1211, 408, 101, 1505, 1365, 1654, 619,
	1593, 684, 1489, 1535, 1163, 696, 947, 340, 886, 1519,
	1490, 353, 350, 1492, 351, 1089, 877, 1175, 1331, 434,
	641, 338, 330, 1507, 728, 1509, 721, 968, 1457, 1527,
	1521, 966, 1363, 1396, 965, 1552, 1503, 1515, 828, 397,
	1374, 1370, 727, 1323, 591, 298, 446, 1474, 446, 446,
	1600, 881, 1528, 446, 28, 446, 434, 434, 66, 434,
	325, 446, 434, 1362, 101, 19, 101, 18, 1537, 17,
	597, 20, 1557, 434, 21, 1506, 1549, 22, 16, 729,
	1588, 1556, 1014, 434, 1558, 1564, 1577, 1576, 1559, 15,
	1570, 1569, 14, 428, 32, 36, 35, 434, 34, 10,
	637, 1363, 1273, 54, 434, 101, 1076, 1740, 1718, 1693,
	1583, 1692, 23, 1587, 1591, 13, 12, 11, 9, 1580,
	1671, 4, 316, 25, 2, 0, 0, 0, 0, 0,
	1586, 434, 1362, 1606, 0, 0, 0, 0, 0, 1532,
	0, 1612, 0, 0, 0, 1610, 0, 0, 0, 0,
	0, 0, 0, 434, 1513, 0, 0, 1621, 0, 1622,
	434, 434, 0, 1627, 0, 0, 0, 1631, 1539, 1540,
	1541, 1542, 1543, 1572, 409, 1573, 1546, 1547, 1628, 434,
	750, 0, 1620, 0, 0, 1636, 0, 0, 101, 0,
	1623, 814, 0, 0, 0, 0, 0, 434, 1649, 0,
	1456, 0, 1657, 0, 0, 0, 1458, 0, 0, 0,
	1661, 1659, 0, 446, 446, 1551, 434, 1467, 1468, 1612,
	1658, 0, 0, 1672, 434, 1678, 1673, 1664, 54, 1676,
	1697, 1675, 1630, 684, 1663, 0, 1482, 1483, 1484, 1701,
	1487, 1699, 1674, 0, 1684, 0, 0, 0, 0, 0,
	0, 0, 1493, 0, 0, 0, 54, 0, 1717, 0,
	1715, 0, 657, 658, 650, 651, 652, 653, 654, 655,
	656, 649, 54, 1729, 659, 0, 0, 0, 407, 54,
	1532, 1014, 0, 1607, 0, 54, 54, 54, 1717, 1717,
	54, 1731, 0, 0, 1749, 54, 0, 1717, 1733, 54,
	0, 0, 0, 54, 1737, 1717, 54, 0, 54, 1746,
	1717, 0, 54, 0, 1717, 0, 0, 0, 1754, 0,
	0, 0, 0, 0, 0, 1758, 0, 0, 0, 0,
	0, 0, 0, 1706, 1707, 0, 0, 0, 0, 0,
	0, 0, 446, 446, 0, 446, 0, 1544, 0, 0,
	0, 0, 0, 446, 446, 0, 0, 0, 1730, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1561,
	0, 1562, 1563, 0, 0, 0, 0, 0, 0, 0,
	1750, 446, 0, 0, 0, 731, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1708, 878, 0, 0,
	0, 0, 0, 26, 27, 55, 29, 30, 637, 0,
	0, 446, 1596, 1597, 1598, 1599, 0, 0, 0, 1603,
	1604, 0, 60, 0, 0, 98, 31, 51, 52, 0,
	0, 0, 0, 0, 301, 0, 0, 0, 784, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 42,
	0, 0, 926, 61, 0, 0, 0, 0, 0, 398,
	0, 0, 0, 0, 418, 618, 420, 0, 0, 0,
	409, 0, 0, 1632, 0, 0, 0, 429, 0, 0,
	1637, 0, 0, 438, 0, 0, 0, 953, 954, 0,
	0, 0, 0, 0, 0, 0, 0, 1646, 0, 0,
	0, 0, 0, 0, 0, 99, 0, 0, 296, 0,
	0, 0, 0, 409, 99, 33, 57, 38, 37, 40,
	771, 53, 0, 0, 0, 446, 0, 446, 0, 0,
	0, 0, 0, 0, 0, 0, 329, 0, 0, 400,
	410, 0, 0, 0, 99, 0, 99, 41, 59, 58,
	0, 0, 49, 50, 39, 0, 0, 99, 0, 0,
	0, 0, 785, 99, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 43, 44, 0, 45, 46,
	0, 1722, 1723, 0, 0, 0, 0, 0, 0, 446,
	0, 446, 798, 801, 802, 803, 804, 805, 806, 0,
	807, 808, 809, 810, 811, 812, 813, 1109, 786, 787,
	788, 789, 765, 769, 799, 766, 772, 768, 770, 767,
	1108, 773, 774, 775, 776, 777, 778, 779, 780, 781,
	782, 783, 790, 791, 792, 793, 794, 795, 796, 797,
	607, 446, 0, 0, 0, 0, 977, 0, 0, 0,
	0, 1113, 0, 0, 0, 0, 0, 440, 0, 0,
	1107, 0, 0, 0, 0, 0, 0, 0, 56, 0,
	0, 0, 0, 0, 0, 0, 985, 987, 648, 647,
	657, 658, 650, 651, 652, 653, 654, 655, 656, 649,
	0, 800, 659, 0, 0, 0, 609, 0, 0, 0,
	0, 1478, 0, 0, 0, 0, 292, 0, 0, 0,
	0, 1104, 1099, 1100, 0, 1098, 0, 1101, 1102, 1477,
	648, 647, 657, 658, 650, 651, 652, 653, 654, 655,
	656, 649, 0, 289, 659, 409, 0, 99, 0, 0,
	648, 647, 657, 658, 650, 651, 652, 653, 654, 655,
	656, 649, 1111, 1114, 659, 0, 0, 986, 648, 647,
	657, 658, 650, 651, 652, 653, 654, 655, 656, 649,
	0, 0, 659, 0, 0, 0, 99, 0, 0, 723,
	0, 732, 0, 0, 446, 272, 0, 0, 0, 0,
	0, 0, 275, 0, 0, 0, 0, 0, 1106, 0,
	0, 757, 283, 290, 291, 1329, 0, 0, 0, 0,
	0, 0, 821, 0, 0, 0, 398, 0, 0, 0,
	0, 829, 0, 0, 1105, 0, 648, 647, 657, 658,
	650, 651, 652, 653, 654, 655, 656, 649, 281, 0,
	659, 0, 1270, 0, 288, 0, 0, 0, 0, 0,
	1471, 0, 0, 446, 0, 446, 446, 0, 0, 99,
	99, 99, 0, 0, 1110, 0, 0, 0, 410, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1112,
	273, 99, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 1470, 0, 0, 99, 0, 0, 0,
	0, 99, 0, 0, 0, 833, 0, 0, 446, 0,
	0, 285, 276, 277, 0, 286, 287, 295, 0, 0,
	0, 278, 280, 0, 274, 294, 293, 648, 647, 657,
	658, 650, 651, 652, 653, 654, 655, 656, 649, 0,
	0, 659, 0, 0, 0, 0, 0, 0, 409, 0,
	0, 1366, 1368, 0, 0, 0, 0, 0, 841, 0,
	843, 0, 0, 844, 0, 0, 0, 1469, 0, 1368,
	648, 647, 657, 658, 650, 651, 652, 653, 654, 655,
	656, 649, 0, 0, 659, 0, 0, 0, 0, 446,
	446, 0, 446, 1395, 857, 0, 0, 0, 0, 864,
	643, 0, 646, 0, 0, 0, 0, 0, 0, 660,
	661, 662, 663, 664, 665, 666, 883, 644, 645, 642,
	648, 647, 657, 658, 650, 651, 652, 653, 654, 655,
	656, 649, 0, 0, 659, 0, 0, 0, 99, 0,
	99, 1143, 0, 99, 648, 647, 657, 658, 650, 651,
	652, 653, 654, 655, 656, 649, 0, 0, 659, 0,
	0, 0, 648, 647, 657, 658, 650, 651, 652, 653,
	654, 655, 656, 649, 99, 0, 659, 0, 1439, 99,
	0, 0, 1443, 0, 0, 0, 0, 1446, 0, 0,
	1451, 1452, 1453, 0, 0, 0, 99, 0, 0, 0,
	0, 0, 0, 0, 0, 833, 0, 0, 962, 648,
	647, 657, 658, 650, 651, 652, 653, 654, 655, 656,
	649, 993, 0, 659, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 329, 1497, 1497, 1497, 329, 329, 329,
	329, 0, 0, 446, 410, 0, 0, 0, 0, 0,
	0, 1497, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 329, 329, 329, 329, 0, 99, 0,
	0, 0, 0, 0, 0, 0, 99, 988, 0, 0,
	99, 99, 1072, 0, 99, 996, 833, 410, 0, 1079,
	1080, 0, 0, 1081, 0, 0, 0, 0, 0, 833,
	446, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1088, 0, 0, 0, 0, 0, 0,
	0, 1096, 0, 0, 0, 1115, 1116, 1117, 1118, 1119,
	0, 0, 0, 0, 0, 0, 0, 1553, 1554, 0,
	1555, 0, 0, 1497, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1395, 0, 0, 0, 0, 0,
	0, 0, 99, 0, 1395, 0, 0, 0, 0, 99,
	99, 0, 0, 99, 0, 0, 0, 0, 1585, 0,
	0, 0, 0, 0, 0, 1497, 0, 0, 0, 0,
	0, 0, 0, 99, 0, 1091, 1092, 0, 0, 0,
	0, 99, 0, 0, 0, 99, 99, 99, 99, 99,
	0, 0, 1611, 0, 0, 833, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 329, 0, 0,
	0, 0, 0, 0, 1395, 0, 0, 0, 0, 0,
	0, 446, 446, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 409, 0, 0,
	1638, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 329, 0, 0, 0, 0, 1648, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 0, 0, 0, 0, 1395, 0, 0,
	0, 0, 0, 0, 0, 1497, 0, 0, 0, 410,
	99, 99, 99, 99, 99, 0, 0, 0, 0, 0,
	0, 0, 1195, 0, 0, 99, 0, 0, 0, 988,
	0, 0, 0, 0, 0, 0, 0, 99, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1279, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1322, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 329, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 329, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 410, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1421, 0, 0, 0, 0,
	0, 0, 0, 1425, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1442, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 0, 0, 0, 0,
	0, 0, 0, 99, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1514, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1592, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 988,
	0, 988, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 0, 0, 1640, 0, 0, 0, 0, 0, 0,
	0, 555, 543, 0, 500, 558, 472, 490, 566, 491,
	494, 531, 457, 513, 185, 488, 0, 476, 452, 483,
	453, 474, 502, 131, 471, 545, 516, 557, 157, 556,
	506, 0, 564, 159, 522, 0, 231, 173, 0, 0,
	504, 547, 511, 540, 499, 532, 462, 521, 559, 489,
	529, 560, 0, 0, 0, 433, 0, 1015, 1016, 0,
	0, 410, 0, 0, 121, 0, 526, 554, 485, 528,
	530, 451, 523, 99, 455, 458, 565, 550, 479, 480,
	481, 1220, 0, 0, 0, 0, 0, 0, 503, 512,
	537, 497, 0, 0, 0, 0, 0, 0, 0, 0,
	477, 0, 520, 0, 0, 0, 459, 456, 0, 0,
	501, 0, 0, 0, 461, 0, 478, 538, 0, 448,
	139, 0, 0, 542, 549, 498, 0, 260, 553, 496,
	495, 204, 0, 235, 142, 156, 117, 103, 113, 0,
	141, 182, 211, 215, 486, 449, 546, 475, 484, 125,
	482, 213, 192, 251, 0, 519, 194, 212, 160, 241,
	205, 250, 261, 262, 238, 258, 266, 228, 0, 0,
	0, 0, 0, 0, 106, 237, 249, 122, 223, 108,
	247, 234, 171, 151, 152, 107, 0, 209, 130, 137,
	127, 184, 0, 0, 0, 244, 245, 126, 269, 114,
	257, 110, 115, 256, 178, 0, 0, 0, 240, 248,
	172, 165, 0, 109, 246, 170, 164, 155, 134, 144,
	202, 162, 203, 145, 175, 174, 176, 0, 454, 0,
	232, 254, 270, 119, 470, 0, 239, 264, 265, 0,
	0, 120, 138, 133, 201, 177, 116, 147, 229, 154,
	161, 208, 268, 191, 214, 123, 253, 230, 466, 469,
	464, 465, 514, 515, 561, 562, 563, 539, 460, 0,
	467, 468, 0, 544, 551, 552, 518, 102, 111, 158,
	267, 206, 136, 255, 450, 463, 129, 473, 0, 0,
	487, 492, 493, 505, 507, 508, 509, 510, 517, 524,
	525, 527, 533, 534, 535, 536, 541, 548, 567, 104,
	105, 112, 118, 124, 128, 132, 135, 140, 143, 146,
	148, 149, 150, 153, 163, 166, 167, 168, 169, 179,
	180, 181, 183, 186, 187, 188, 189, 190, 193, 195,
	196, 197, 198, 199, 200, 207, 210, 216, 217, 218,
	219, 220, 221, 222, 224, 225, 226, 227, 233, 236,
	242, 243, 252, 259, 263, 555, 543, 0, 500, 558,
	472, 490, 566, 491, 494, 531, 457, 513, 185, 488,
	0, 476, 452, 483, 453, 474, 502, 131, 471, 545,
	516, 557, 157, 556, 506, 0, 564, 159, 522, 0,
	231, 173, 0, 0, 504, 547, 511, 540, 499, 532,
	462, 521, 559, 489, 529, 560, 0, 0, 0, 433,
	0, 1015, 1016, 0, 0, 0, 0, 0, 121, 0,
	526, 554, 485, 528, 530, 451, 523, 0, 455, 458,
	565, 550, 479, 480, 481, 0, 0, 0, 0, 0,
	0, 0, 503, 512, 537, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 477, 0, 520, 0, 0, 0,
	459, 456, 0, 0, 501, 0, 0, 0, 461, 0,
	478, 538, 0, 448, 139, 0, 0, 542, 549, 498,
	0, 260, 553, 496, 495, 204, 0, 235, 142, 156,
	117, 103, 113, 0, 141, 182, 211, 215, 486, 449,
	546, 475, 484, 125, 482, 213, 192, 251, 0, 519,
	194, 212, 160, 241, 205, 250, 261, 262, 238, 258,
	266, 228, 0, 0, 0, 0, 0, 0, 106, 237,
	249, 122, 223, 108, 247, 234, 171, 151, 152, 107,
	0, 209, 130, 137, 127, 184, 0, 0, 0, 244,
	245, 126, 269, 114, 257, 110, 115, 256, 178, 0,
	0, 0, 240, 248, 172, 165, 0, 109, 246, 170,
	164, 155, 134, 144, 202, 162, 203, 145, 175, 174,
	176, 0, 454, 0, 232, 254, 270, 119, 470, 0,
	239, 264, 265, 0, 0, 120, 138, 133, 201, 177,
	116, 147, 229, 154, 161, 208, 268, 191, 214, 123,
	253, 230, 466, 469, 464, 465, 514, 515, 561, 562,
	563, 539, 460, 0, 467, 468, 0, 544, 551, 552,
	518, 102, 111, 158, 267, 206, 136, 255, 450, 463,
	129, 473, 0, 0, 487, 492, 493, 505, 507, 508,
	509, 510, 517, 524, 525, 527, 533, 534, 535, 536,
	541, 548, 567, 104, 105, 112, 118, 124, 128, 132,
	135, 140, 143, 146, 148, 149, 150, 153, 163, 166,
	167, 168, 169, 179, 180, 181, 183, 186, 187, 188,
	189, 190, 193, 195, 196, 197, 198, 199, 200, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 252, 259, 263, 555,
	543, 0, 500, 558, 472, 490, 566, 491, 494, 531,
	457, 513, 185, 488, 0, 476, 452, 483, 453, 474,
	502, 131, 471, 545, 516, 557, 157, 556, 506, 0,
	564, 159, 522, 0, 231, 173, 0, 0, 504, 547,
	511, 540, 499, 532, 462, 521, 559, 489, 529, 560,
	0, 0, 0, 433, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 526, 554, 485, 528, 530, 451,
	523, 0, 455, 458, 565, 550, 479, 480, 481, 0,
	0, 0, 0, 0, 0, 0, 503, 512, 537, 497,
	0, 0, 0, 0, 0, 0, 1325, 0, 477, 0,
	520, 0, 0, 0, 459, 456, 0, 0, 501, 0,
	0, 0, 461, 0, 478, 538, 0, 448, 139, 0,
	0, 542, 549, 498, 0, 260, 553, 496, 495, 204,
	0, 235, 142, 156, 117, 103, 113, 0, 141, 182,
	211, 215, 486, 449, 546, 475, 484, 125, 482, 213,
	192, 251, 0, 519, 194, 212, 160, 241, 205, 250,
	261, 262, 238, 258, 266, 228, 0, 0, 0, 0,
	0, 0, 106, 237, 249, 122, 223, 108, 247, 234,
	171, 151, 152, 107, 0, 209, 130, 137, 127, 184,
	0, 0, 0, 244, 245, 126, 269, 114, 257, 110,
	115, 256, 178, 0, 0, 0, 240, 248, 172, 165,
	0, 109, 246, 170, 164, 155, 134, 144, 202, 162,
	203, 145, 175, 174, 176, 0, 454, 0, 232, 254,
	270, 119, 470, 0, 239, 264, 265, 0, 0, 120,
	138, 133, 201, 177, 116, 147, 229, 154, 161, 208,
	268, 191, 214, 123, 253, 230, 466, 469, 464, 465,
	514, 515, 561, 562, 563, 539, 460, 0, 467, 468,
	0, 544, 551, 552, 518, 102, 111, 158, 267, 206,
	136, 255, 450, 463, 129, 473, 0, 0, 487, 492,
	493, 505, 507, 508, 509, 510, 517, 524, 525, 527,
	533, 534, 535, 536, 541, 548, 567, 104, 105, 112,
	118, 124, 128, 132, 135, 140, 143, 146, 148, 149,
	150, 153, 163, 166, 167, 168, 169, 179, 180, 181,
	183, 186, 187, 188, 189, 190, 193, 195, 196, 197,
	198, 199, 200, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	252, 259, 263, 555, 543, 0, 500, 558, 472, 490,
	566, 491, 494, 531, 457, 513, 185, 488, 0, 476,
	452, 483, 453, 474, 502, 131, 471, 545, 516, 557,
	157, 556, 506, 0, 564, 159, 522, 0, 231, 173,
	0, 0, 504, 547, 511, 540, 499, 532, 462, 521,
	559, 489, 529, 560, 61, 0, 0, 433, 0, 0,
	0, 0, 0, 0, 0, 0, 121, 0, 526, 554,
	485, 528, 530, 451, 523, 0, 455, 458, 565, 550,
	479, 480, 481, 0, 0, 0, 0, 0, 0, 0,
	503, 512, 537, 497, 0, 0, 0, 0, 0, 0,
	0, 0, 477, 0, 520, 0, 0, 0, 459, 456,
	0, 0, 501, 0, 0, 0, 461, 0, 478, 538,
	0, 448, 139, 0, 0, 542, 549, 498, 0, 260,
	553, 496, 495, 204, 0, 235, 142, 156, 117, 103,
	113, 0, 141, 182, 211, 215, 486, 449, 546, 475,
	484, 125, 482, 213, 192, 251, 0, 519, 194, 212,
	160, 241, 205, 250, 261, 262, 238, 258, 266, 228,
	0, 0, 0, 0, 0, 0, 106, 237, 249, 122,
	223, 108, 247, 234, 171, 151, 152, 107, 0, 209,
	130, 137, 127, 184, 0, 0, 0, 244, 245, 126,
	269, 114, 257, 110, 115, 256, 178, 0, 0, 0,
	240, 248, 172, 165, 0, 109, 246, 170, 164, 155,
	134, 144, 202, 162, 203, 145, 175, 174, 176, 0,
	454, 0, 232, 254, 270, 119, 470, 0, 239, 264,
	265, 0, 0, 120, 138, 133, 201, 177, 116, 147,
	229, 154, 161, 208, 268, 191, 214, 123, 253, 230,
	466, 469, 464, 465, 514, 515, 561, 562, 563, 539,
	460, 0, 467, 468, 0, 544, 551, 552, 518, 102,
	111, 158, 267, 206, 136, 255, 450, 463, 129, 473,
	0, 0, 487, 492, 493, 505, 507, 508, 509, 510,
	517, 524, 525, 527, 533, 534, 535, 536, 541, 548,
	567, 104, 105, 112, 118, 124, 128, 132, 135, 140,
	143, 146, 148, 149, 150, 153, 163, 166, 167, 168,
	169, 179, 180, 181, 183, 186, 187, 188, 189, 190,
	193, 195, 196, 197, 198, 199, 200, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 224, 225, 226, 227,
	233, 236, 242, 243, 252, 259, 263, 555, 543, 0,
	500, 558, 472, 490, 566, 491, 494, 531, 457, 513,
	185, 488, 0, 476, 452, 483, 453, 474, 502, 131,
	471, 545, 516, 557, 157, 556, 506, 0, 564, 159,
	522, 0, 231, 173, 0, 0, 504, 547, 511, 540,
	499, 532, 462, 521, 559, 489, 529, 560, 0, 0,
	0, 100, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 526, 554, 485, 528, 530, 451, 523, 0,
	455, 458, 565, 550, 479, 480, 481, 0, 0, 0,
	0, 0, 0, 0, 503, 512, 537, 497, 0, 0,
	0, 0, 0, 0, 997, 0, 477, 0, 520, 0,
	0, 0, 459, 456, 0, 0, 501, 0, 0, 0,
	461, 0, 478, 538, 0, 448, 139, 0, 0, 542,
	549, 498, 0, 260, 553, 496, 495, 204, 0, 235,
	142, 156, 117, 103, 113, 0, 141, 182, 211, 215,
	486, 449, 546, 475, 484, 125, 482, 213, 192, 251,
	0, 519, 194, 212, 160, 241, 205, 250, 261, 262,
	238, 258, 266, 228, 0, 0, 0, 0, 0, 0,
	106, 237, 249, 122, 223, 108, 247, 234, 171, 151,
	152, 107, 0, 209, 130, 137, 127, 184, 0, 0,
	0, 244, 245, 126, 269, 114, 257, 110, 115, 256,
	178, 0, 0, 0, 240, 248, 172, 165, 0, 109,
	246, 170, 164, 155, 134, 144, 202, 162, 203, 145,
	175, 174, 176, 0, 454, 0, 232, 254, 270, 119,
	470, 0, 239, 264, 265, 0, 0, 120, 138, 133,
	201, 177, 116, 147, 229, 154, 161, 208, 268, 191,
	214, 123, 253, 230, 466, 469, 464, 465, 514, 515,
	561, 562, 563, 539, 460, 0, 467, 468, 0, 544,
	551, 552, 518, 102, 111, 158, 267, 206, 136, 255,
	450, 463, 129, 473, 0, 0, 487, 492, 493, 505,
	507, 508, 509, 510, 517, 524, 525, 527, 533, 534,
	535, 536, 541, 548, 567, 104, 105, 112, 118, 124,
	128, 132, 135, 140, 143, 146, 148, 149, 150, 153,
	163, 166, 167, 168, 169, 179, 180, 181, 183, 186,
	187, 188, 189, 190, 193, 195, 196, 197, 198, 199,
	200, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	224, 225, 226, 227, 233, 236, 242, 243, 252, 259,
	263, 555, 543, 0, 500, 558, 472, 490, 566, 491,
	494, 531, 457, 513, 185, 488, 0, 476, 452, 483,
	453, 474, 502, 131, 471, 545, 516, 557, 157, 556,
	506, 0, 564, 159, 522, 0, 231, 173, 0, 0,
	504, 547, 511, 540, 499, 532, 462, 521, 559, 489,
	529, 560, 0, 0, 0, 334, 0, 0, 0, 0,
	0, 0, 0, 0, 121, 0, 526, 554, 485, 528,
	530, 451, 523, 0, 455, 458, 565, 550, 479, 480,
	481, 0, 0, 0, 0, 0, 0, 0, 503, 512,
	537, 497, 0, 0, 0, 0, 0, 0, 892, 0,
	477, 0, 520, 0, 0, 0, 459, 456, 0, 0,
	501, 0, 0, 0, 461, 0, 478, 538, 0, 448,
	139, 0, 0, 542, 549, 498, 0, 260, 553, 496,
	495, 204, 0, 235, 142, 156, 117, 103, 113, 0,
	141, 182, 211, 215, 486, 449, 546, 475, 484, 125,
	482, 213, 192, 251, 0, 519, 194, 212, 160, 241,
	205, 250, 261, 262, 238, 258, 266, 228, 0, 0,
	0, 0, 0, 0, 106, 237, 249, 122, 223, 108,
	247, 234, 171, 151, 152, 107, 0, 209, 130, 137,
	127, 184, 0, 0, 0, 244, 245, 126, 269, 114,
	257, 110, 115, 256, 178, 0, 0, 0, 240, 248,
	172, 165, 0, 109, 246, 170, 164, 155, 134, 144,
	202, 162, 203, 145, 175, 174, 176, 0, 454, 0,
	232, 254, 270, 119, 470, 0, 239, 264, 265, 0,
	0, 120, 138, 133, 201, 177, 116, 147, 229, 154,
	161, 208, 268, 191, 214, 123, 253, 230, 466, 469,
	464, 465, 514, 515, 561, 562, 563, 539, 460, 0,
	467, 468, 0, 544, 551, 552, 518, 102, 111, 158,
	267, 206, 136, 255, 450, 463, 129, 473, 0, 0,
	487, 492, 493, 505, 507, 508, 509, 510, 517, 524,
	525, 527, 533, 534, 535, 536, 541, 548, 567, 104,
	105, 112, 118, 124, 128, 132, 135, 140, 143, 146,
	148, 149, 150, 153, 163, 166, 167, 168, 169, 179,
	180, 181, 183, 186, 187, 188, 189, 190, 193, 195,
	196, 197, 198, 199, 200, 207, 210, 216, 217, 218,
	219, 220, 221, 222, 224, 225, 226, 227, 233, 236,
	242, 243, 252, 259, 263, 555, 543, 0, 500, 558,
	472, 490, 566, 491, 494, 531, 457, 513, 185, 488,
	0, 476, 452, 483, 453, 474, 502, 131, 471, 545,
	516, 557, 157, 556, 506, 0, 564, 159, 522, 0,
	231, 173, 0, 0, 504, 547, 511, 540, 499, 532,
	462, 521, 559, 489, 529, 560, 0, 0, 0, 433,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 0,
	526, 554, 485, 528, 530, 451, 523, 0, 455, 458,
	565, 550, 479, 480, 481, 0, 0, 0, 0, 0,
	0, 0, 503, 512, 537, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 477, 0, 520, 0, 0, 0,
	459, 456, 0, 0, 501, 0, 0, 0, 461, 0,
	478, 538, 0, 448, 139, 0, 0, 542, 549, 498,
	0, 260, 553, 496, 495, 204, 0, 235, 142, 156,
	117, 103, 113, 0, 141, 182, 211, 215, 486, 449,
	546, 475, 484, 125, 482, 213, 192, 251, 0, 519,
	194, 212, 160, 241, 205, 250, 261, 262, 238, 258,
	266, 228, 0, 0, 0, 0, 0, 0, 106, 237,
	249, 122, 223, 108, 247, 234, 171, 151, 152, 107,
	0, 209, 130, 137, 127, 184, 0, 0, 0, 244,
	245, 126, 269, 114, 257, 110, 115, 256, 178, 0,
	0, 0, 240, 248, 172, 165, 0, 109, 246, 170,
	164, 155, 134, 144, 202, 162, 203, 145, 175, 174,
	176, 0, 454, 0, 232, 254, 270, 119, 470, 0,
	239, 264, 265, 0, 0, 120, 138, 133, 201, 177,
	116, 147, 229, 154, 161, 208, 268, 191, 214, 123,
	253, 230, 466, 469, 464, 465, 514, 515, 561, 562,
	563, 539, 460, 0, 467, 468, 0, 544, 551, 552,
	518, 102, 111, 158, 267, 206, 136, 255, 450, 463,
	129, 473, 0, 0, 487, 492, 493, 505, 507, 508,
	509, 510, 517, 524, 525, 527, 533, 534, 535, 536,
	541, 548, 567, 104, 105, 112, 118, 124, 128, 132,
	135, 140, 143, 146, 148, 149, 150, 153, 163, 166,
	167, 168, 169, 179, 180, 181, 183, 186, 187, 188,
	189, 190, 193, 195, 196, 197, 198, 199, 200, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 252, 259, 263, 555,
	543, 0, 500, 558, 472, 490, 566, 491, 494, 531,
	457, 513, 185, 488, 0, 476, 452, 483, 453, 474,
	502, 131, 471, 545, 516, 557, 157, 556, 506, 0,
	564, 159, 522, 0, 231, 173, 0, 0, 504, 547,
	511, 540, 499, 532, 462, 521, 559, 489, 529, 560,
	0, 0, 0, 334, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 526, 554, 485, 528, 530, 451,
	523, 0, 455, 458, 565, 550, 479, 480, 481, 0,
	0, 0, 0, 0, 0, 0, 503, 512, 537, 497,
	0, 0, 0, 0, 0, 0, 0, 0, 477, 0,
	520, 0, 0, 0, 459, 456, 0, 0, 501, 0,
	0, 0, 461, 0, 478, 538, 0, 448, 139, 0,
	0, 542, 549, 498, 0, 260, 553, 496, 495, 204,
	0, 235, 142, 156, 117, 103, 113, 0, 141, 182,
	211, 215, 486, 449, 546, 475, 484, 125, 482, 213,
	192, 251, 0, 519, 194, 212, 160, 241, 205, 250,
	261, 262, 238, 258, 266, 228, 0, 0, 0, 0,
	0, 0, 106, 237, 249, 122, 223, 108, 247, 234,
	171, 151, 152, 107, 0, 209, 130, 137, 127, 184,
	0, 0, 0, 244, 245, 126, 269, 114, 257, 110,
	115, 256, 178, 0, 0, 0, 240, 248, 172, 165,
	0, 109, 246, 170, 164, 155, 134, 144, 202, 162,
	203, 145, 175, 174, 176, 0, 454, 0, 232, 254,
	270, 119, 470, 0, 239, 264, 265, 0, 0, 120,
	138, 133, 201, 177, 116, 147, 229, 154, 161, 208,
	268, 191, 214, 123, 253, 230, 466, 469, 464, 465,
	514, 515, 561, 562, 563, 539, 460, 0, 467, 468,
	0, 544, 551, 552, 518, 102, 111, 158, 267, 206,
	136, 255, 450, 463, 129, 473, 0, 0, 487, 492,
	493, 505, 507, 508, 509, 510, 517, 524, 525, 527,
	533, 534, 535, 536, 541, 548, 567, 104, 105, 112,
	118, 124, 128, 132, 135, 140, 143, 146, 148, 149,
	150, 153, 163, 166, 167, 168, 169, 179, 180, 181,
	183, 186, 187, 188, 189, 190, 193, 195, 196, 197,
	198, 199, 200, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	252, 259, 263, 555, 543, 0, 500, 558, 472, 490,
	566, 491, 494, 531, 457, 513, 185, 488, 0, 476,
	452, 483, 453, 474, 502, 131, 471, 545, 516, 557,
	157, 556, 506, 0, 564, 159, 522, 0, 231, 173,
	0, 0, 504, 547, 511, 540, 499, 532, 462, 521,
	559, 489, 529, 560, 0, 0, 0, 100, 0, 0,
	0, 0, 0, 0, 0, 0, 121, 0, 526, 554,
	485, 528, 530, 451, 523, 0, 455, 458, 565, 550,
	479, 480, 481, 0, 0, 0, 0, 0, 0, 0,
	503, 512, 537, 497, 0, 0, 0, 0, 0, 0,
	0, 0, 477, 0, 520, 0, 0, 0, 459, 456,
	0, 0, 501, 0, 0, 0, 461, 0, 478, 538,
	0, 448, 139, 0, 0, 542, 549, 498, 0, 260,
	553, 496, 495, 204, 0, 235, 142, 156, 117, 103,
	113, 0, 141, 182, 211, 215, 486, 449, 546, 475,
	484, 125, 482, 213, 192, 251, 0, 519, 194, 212,
	160, 241, 205, 250, 261, 262, 238, 258, 266, 228,
	0, 0, 0, 0, 0, 0, 106, 237, 249, 122,
	223, 108, 247, 234, 171, 151, 152, 107, 0, 209,
	130, 137, 127, 184, 0, 0, 0, 244, 245, 126,
	269, 114, 257, 110, 115, 256, 178, 0, 0, 0,
	240, 248, 172, 165, 0, 109, 246, 170, 164, 155,
	134, 144, 202, 162, 203, 145, 175, 174, 176, 0,
	454, 0, 232, 254, 270, 119, 470, 0, 239, 264,
	265, 0, 0, 120, 138, 133, 201, 177, 116, 147,
	229, 154, 161, 208, 268, 191, 214, 123, 253, 230,
	466, 469, 464, 465, 514, 515, 561, 562, 563, 539,
	460, 0, 467, 468, 0, 544, 551, 552, 518, 102,
	111, 158, 267, 206, 136, 255, 450, 463, 129, 473,
	0, 0, 487, 492, 493, 505, 507, 508, 509, 510,
	517, 524, 525, 527, 533, 534, 535, 536, 541, 548,
	567, 104, 105, 112, 118, 124, 128, 132, 135, 140,
	143, 146, 148, 149, 150, 153, 163, 166, 167, 168,
	169, 179, 180, 181, 183, 186, 187, 188, 189, 190,
	193, 195, 196, 197, 198, 199, 200, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 224, 225, 226, 227,
	233, 236, 242, 243, 252, 259, 263, 185, 0, 0,
	0, 0, 336, 0, 0, 0, 131, 333, 0, 0,
	0, 157, 0, 0, 0, 378, 159, 0, 0, 231,
	173, 0, 0, 0, 0, 367, 368, 0, 0, 0,
	0, 0, 0, 1004, 0, 61, 0, 0, 334, 355,
	354, 357, 358, 359, 360, 0, 0, 121, 356, 361,
	362, 363, 1005, 0, 0, 331, 348, 0, 377, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 345,
	346, 0, 0, 0, 0, 391, 0, 347, 0, 0,
	342, 343, 344, 349, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 0, 369, 0, 0, 0,
	260, 0, 0, 389, 204, 0, 235, 142, 156, 117,
	103, 113, 0, 141, 182, 211, 215, 375, 0, 0,
	0, 0, 125, 0, 213, 192, 251, 0, 0, 194,
	212, 160, 241, 205, 250, 261, 262, 238, 258, 266,
	228, 0, 0, 0, 0, 0, 0, 106, 237, 249,
	122, 223, 108, 247, 234, 171, 151, 152, 107, 0,
	209, 130, 137, 127, 184, 0, 0, 0, 244, 245,
	126, 269, 114, 257, 110, 115, 256, 178, 0, 0,
	0, 240, 248, 172, 165, 0, 109, 246, 170, 164,
	155, 134, 144, 202, 162, 203, 145, 175, 174, 176,
	0, 0, 0, 232, 254, 270, 119, 0, 0, 239,
	264, 265, 0, 0, 120, 138, 133, 201, 177, 116,
	147, 229, 154, 161, 208, 268, 191, 214, 123, 253,
	230, 379, 390, 385, 386, 383, 384, 382, 381, 380,
	392, 370, 371, 372, 373, 376, 0, 387, 388, 374,
	102, 111, 158, 267, 206, 136, 255, 0, 0, 129,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 105, 112, 118, 124, 128, 132, 135,
	140, 143, 146, 148, 149, 150, 153, 163, 166, 167,
	168, 169, 179, 180, 181, 183, 186, 187, 188, 189,
	190, 193, 195, 196, 197, 198, 199, 200, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 224, 225, 226,
	227, 233, 236, 242, 243, 252, 259, 263, 185, 0,
	0, 0, 0, 336, 0, 0, 0, 131, 333, 0,
	0, 0, 157, 0, 0, 0, 378, 159, 0, 0,
	231, 173, 0, 0, 0, 0, 367, 368, 0, 0,
	0, 0, 0, 0, 0, 0, 61, 0, 607, 334,
	355, 354, 357, 358, 359, 360, 0, 0, 121, 356,
	361, 362, 363, 0, 0, 0, 331, 348, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	345, 346, 0, 0, 0, 0, 391, 0, 347, 0,
	0, 342, 343, 344, 349, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 0, 0, 369, 0, 0,
	0, 260, 0, 0, 389, 204, 0, 235, 142, 156,
	117, 103, 113, 0, 141, 182, 211, 215, 375, 0,
	0, 0, 0, 125, 0, 213, 192, 251, 0, 0,
	194, 212, 160, 241, 205, 250, 261, 262, 238, 258,
	266, 228, 0, 0, 0, 0, 0, 0, 106, 237,
	249, 122, 223, 108, 247, 234, 171, 151, 152, 107,
	0, 209, 130, 137, 127, 184, 0, 0, 0, 244,
	245, 126, 269, 114, 257, 110, 115, 256, 178, 0,
	0, 0, 240, 248, 172, 165, 0, 109, 246, 170,
	164, 155, 134, 144, 202, 162, 203, 145, 175, 174,
	176, 0, 0, 0, 232, 254, 270, 119, 0, 0,
	239, 264, 265, 0, 0, 120, 138, 133, 201, 177,
	116, 147, 229, 154, 161, 208, 268, 191, 214, 123,
	253, 230, 379, 390, 385, 386, 383, 384, 382, 381,
	380, 392, 370, 371, 372, 373, 376, 0, 387, 388,
	374, 102, 111, 158, 267, 206, 136, 255, 0, 0,
	129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 105, 112, 118, 124, 128, 132,
	135, 140, 143, 146, 148, 149, 150, 153, 163, 166,
	167, 168, 169, 179, 180, 181, 183, 186, 187, 188,
	189, 190, 193, 195, 196, 197, 198, 199, 200, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 252, 259, 263, 185,
	0, 0, 0, 0, 336, 0, 0, 0, 131, 333,
	0, 0, 0, 157, 0, 0, 0, 378, 159, 0,
	0, 231, 173, 0, 0, 0, 0, 367, 368, 0,
	0, 0, 0, 0, 0, 0, 0, 61, 0, 0,
	334, 355, 354, 357, 358, 359, 360, 0, 0, 121,
	356, 361, 362, 363, 0, 0, 0, 331, 348, 0,
	377, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 345, 346, 327, 0, 0, 0, 391, 0, 347,
	0, 0, 342, 343, 344, 349, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 0, 369, 0,
	0, 0, 260, 0, 0, 389, 204, 0, 235, 142,
	156, 117, 103, 113, 0, 141, 182, 211, 215, 375,
	0, 0, 0, 0, 125, 0, 213, 192, 251, 0,
	0, 194, 212, 160, 241, 205, 250, 261, 262, 238,
	258, 266, 228, 0, 0, 0, 0, 0, 0, 106,
	237, 249, 122, 223, 108, 247, 234, 171, 151, 152,
	107, 0, 209, 130, 137, 127, 184, 0, 0, 0,
	244, 245, 126, 269, 114, 257, 110, 115, 256, 178,
	0, 0, 0, 240, 248, 172, 165, 0, 109, 246,
	170, 164, 155, 134, 144, 202, 162, 203, 145, 175,
	174, 176, 0, 0, 0, 232, 254, 270, 119, 0,
	0, 239, 264, 265, 0, 0, 120, 138, 133, 201,
	177, 116, 147, 229, 154, 161, 208, 268, 191, 214,
	123, 253, 230, 379, 390, 385, 386, 383, 384, 382,
	381, 380, 392, 370, 371, 372, 373, 376, 0, 387,
	388, 374, 102, 111, 158, 267, 206, 136, 255, 0,
	0, 129, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 105, 112, 118, 124, 128,
	132, 135, 140, 143, 146, 148, 149, 150, 153, 163,
	166, 167, 168, 169, 179, 180, 181, 183, 186, 187,
	188, 189, 190, 193, 195, 196, 197, 198, 199, 200,
	207, 210, 216, 217, 218, 219, 220, 221, 222, 224,
	225, 226, 227, 233, 236, 242, 243, 252, 259, 263,
	185, 0, 0, 0, 0, 336, 0, 0, 0, 131,
	333, 0, 0, 0, 157, 0, 0, 0, 378, 159,
	0, 0, 231, 173, 0, 0, 0, 0, 367, 368,
	0, 0, 0, 0, 0, 0, 0, 0, 61, 0,
	0, 334, 355, 942, 357, 358, 359, 360, 0, 0,
	121, 356, 361, 362, 363, 0, 0, 0, 331, 348,
	0, 377, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 345, 346, 327, 0, 0, 0, 391, 0,
	347, 0, 0, 342, 343, 344, 349, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 0, 0, 369,
	0, 0, 0, 260, 0, 0, 389, 204, 0, 235,
	142, 156, 117, 103, 113, 0, 141, 182, 211, 215,
	375, 0, 0, 0, 0, 125, 0, 213, 192, 251,
	0, 0, 194, 212, 160, 241, 205, 250, 261, 262,
	238, 258, 266, 228, 0, 0, 0, 0, 0, 0,
	106, 237, 249, 122, 223, 108, 247, 234, 171, 151,
	152, 107, 0, 209, 130, 137, 127, 184, 0, 0,
	0, 244, 245, 126, 269, 114, 257, 110, 115, 256,
	178, 0, 0, 0, 240, 248, 172, 165, 0, 109,
	246, 170, 164, 155, 134, 144, 202, 162, 203, 145,
	175, 174, 176, 0, 0, 0, 232, 254, 270, 119,
	0, 0, 239, 264, 265, 0, 0, 120, 138, 133,
	201, 177, 116, 147, 229, 154, 161, 208, 268, 191,
	214, 123, 253, 230, 379, 390, 385, 386, 383, 384,
	382, 381, 380, 392, 370, 371, 372, 373, 376, 0,
	387, 388, 374, 102, 111, 158, 267, 206, 136, 255,
	0, 0, 129, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 105, 112, 118, 124,
	128, 132, 135, 140, 143, 146, 148, 149, 150, 153,
	163, 166, 167, 168, 169, 179, 180, 181, 183, 186,
	187, 188, 189, 190, 193, 195, 196, 197, 198, 199,
	200, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	224, 225, 226, 227, 233, 236, 242, 243, 252, 259,
	263, 185, 0, 0, 0, 0, 336, 0, 0, 0,
	131, 333, 0, 0, 0, 157, 0, 0, 0, 378,
	159, 0, 0, 231, 173, 0, 0, 0, 0, 367,
	368, 0, 0, 0, 0, 0, 0, 0, 0, 61,
	0, 0, 334, 355, 939, 357, 358, 359, 360, 0,
	0, 121, 356, 361, 362, 363, 0, 0, 0, 331,
	348, 0, 377, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 345, 346, 327, 0, 0, 0, 391,
	0, 347, 0, 0, 342, 343, 344, 349, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 0, 0,
	369, 0, 0, 0, 260, 0, 0, 389, 204, 0,
	235, 142, 156, 117, 103, 113, 0, 141, 182, 211,
	215, 375, 0, 0, 0, 0, 125, 0, 213, 192,
	251, 0, 0, 194, 212, 160, 241, 205, 250, 261,
	262, 238, 258, 266, 228, 0, 0, 0, 0, 0,
	0, 106, 237, 249, 122, 223, 108, 247, 234, 171,
	151, 152, 107, 0, 209, 130, 137, 127, 184, 0,
	0, 0, 244, 245, 126, 269, 114, 257, 110, 115,
	256, 178, 0, 0, 0, 240, 248, 172, 165, 0,
	109, 246, 170, 164, 155, 134, 144, 202, 162, 203,
	145, 175, 174, 176, 0, 0, 0, 232, 254, 270,
	119, 0, 0, 239, 264, 265, 0, 0, 120, 138,
	133, 201, 177, 116, 147, 229, 154, 161, 208, 268,
	191, 214, 123, 253, 230, 379, 390, 385, 386, 383,
	384, 382, 381, 380, 392, 370, 371, 372, 373, 376,
	0, 387, 388, 374, 102, 111, 158, 267, 206, 136,
	255, 0, 0, 129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 105, 112, 118,
	124, 128, 132, 135, 140, 143, 146, 148, 149, 150,
	153, 163, 166, 167, 168, 169, 179, 180, 181, 183,
	186, 187, 188, 189, 190, 193, 195, 196, 197, 198,
	199, 200, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 224, 225, 226, 227, 233, 236, 242, 243, 252,
	259, 263, 26, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 0, 0, 0, 0, 336,
	0, 0, 0, 131, 333, 0, 0, 0, 157, 0,
	0, 0, 378, 159, 0, 0, 231, 173, 0, 0,
	0, 0, 367, 368, 0, 0, 0, 0, 0, 0,
	0, 0, 61, 0, 0, 334, 355, 354, 357, 358,
	359, 360, 0, 0, 121, 356, 361, 362, 363, 0,
	0, 0, 331, 348, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 345, 346, 0, 0,
	0, 0, 391, 0, 347, 0, 0, 342, 343, 344,
	349, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 0, 0, 369, 0, 0, 0, 260, 0, 0,
	389, 204, 0, 235, 142, 156, 117, 103, 113, 0,
	141, 182, 211, 215, 375, 0, 0, 0, 0, 125,
	0, 213, 192, 251, 0, 0, 194, 212, 160, 241,
	205, 250, 261, 262, 238, 258, 266, 228, 0, 0,
	0, 0, 0, 0, 106, 237, 249, 122, 223, 108,
	247, 234, 171, 151, 152, 107, 0, 209, 130, 137,
	127, 184, 0, 0, 0, 244, 245, 126, 269, 114,
	257, 110, 115, 256, 178, 0, 0, 0, 240, 248,
	172, 165, 0, 109, 246, 170, 164, 155, 134, 144,
	202, 162, 203, 145, 175, 174, 176, 0, 0, 0,
	232, 254, 270, 119, 0, 0, 239, 264, 265, 0,
	0, 120, 138, 133, 201, 177, 116, 147, 229, 154,
	161, 208, 268, 191, 214, 123, 253, 230, 379, 390,
	385, 386, 383, 384, 382, 381, 380, 392, 370, 371,
	372, 373, 376, 0, 387, 388, 374, 102, 111, 158,
	267, 206, 136, 255, 0, 0, 129, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	105, 112, 118, 124, 128, 132, 135, 140, 143, 146,
	148, 149, 150, 153, 163, 166, 167, 168, 169, 179,
	180, 181, 183, 186, 187, 188, 189, 190, 193, 195,
	196, 197, 198, 199, 200, 207, 210, 216, 217, 218,
	219, 220, 221, 222, 224, 225, 226, 227, 233, 236,
	242, 243, 252, 259, 263, 185, 0, 0, 0, 0,
	336, 0, 0, 0, 131, 333, 0, 0, 0, 157,
	0, 0, 0, 378, 159, 0, 0, 231, 173, 0,
	0, 0, 0, 367, 368, 0, 0, 0, 0, 0,
	0, 0, 0, 61, 0, 0, 334, 355, 354, 357,
	358, 359, 360, 0, 0, 121, 356, 361, 362, 363,
	0, 0, 0, 331, 348, 0, 377, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 345, 346, 0,
	0, 0, 0, 391, 0, 347, 0, 0, 342, 343,
	344, 349, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 0, 369, 0, 0, 0, 260, 0,
	0, 389, 204, 0, 235, 142, 156, 117, 103, 113,
	0, 141, 182, 211, 215, 375, 0, 0, 0, 0,
	125, 0, 213, 192, 251, 0, 0, 194, 212, 160,
	241, 205, 250, 261, 262, 238, 258, 266, 228, 0,
	0, 0, 0, 0, 0, 106, 237, 249, 122, 223,
	108, 247, 234, 171, 151, 152, 107, 0, 209, 130,
	137, 127, 184, 0, 0, 0, 244, 245, 126, 269,
	114, 257, 110, 115, 256, 178, 0, 0, 0, 240,
	248, 172, 165, 0, 109, 246, 170, 164, 155, 134,
	144, 202, 162, 203, 145, 175, 174, 176, 0, 0,
	0, 232, 254, 270, 119, 0, 0, 239, 264, 265,
	0, 0, 120, 138, 133, 201, 177, 116, 147, 229,
	154, 161, 208, 268, 191, 214, 123, 253, 230, 379,
	390, 385, 386, 383, 384, 382, 381, 380, 392, 370,
	371, 372, 373, 376, 0, 387, 388, 374, 102, 111,
	158, 267, 206, 136, 255, 0, 0, 129, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 105, 112, 118, 124, 128, 132, 135, 140, 143,
	146, 148, 149, 150, 153, 163, 166, 167, 168, 169,
	179, 180, 181, 183, 186, 187, 188, 189, 190, 193,
	195, 196, 197, 198, 199, 200, 207, 210, 216, 217,
	218, 219, 220, 221, 222, 224, 225, 226, 227, 233,
	236, 242, 243, 252, 259, 263, 185, 0, 0, 0,
	0, 0, 0, 0, 0, 131, 0, 0, 0, 0,
	157, 0, 0, 0, 378, 159, 0, 0, 231, 173,
	0, 0, 0, 0, 367, 368, 0, 0, 0, 0,
	0, 0, 0, 0, 61, 0, 0, 334, 355, 354,
	357, 358, 359, 360, 0, 0, 121, 356, 361, 362,
	363, 0, 0, 0, 0, 348, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 345, 346,
	0, 0, 0, 0, 391, 0, 347, 0, 0, 342,
	343, 344, 349, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 0, 369, 0, 0, 0, 260,
	0, 0, 389, 204, 0, 235, 142, 156, 117, 103,
	113, 0, 141, 182, 211, 215, 375, 0, 0, 0,
	0, 125, 0, 213, 192, 251, 0, 1709, 194, 212,
	160, 241, 205, 250, 261, 262, 238, 258, 266, 228,
	0, 0, 0, 0, 0, 0, 106, 237, 249, 122,
	223, 108, 247, 234, 171, 151, 152, 107, 0, 209,
	130, 137, 127, 184, 0, 0, 0, 244, 245, 126,
	269, 114, 257, 110, 115, 256, 178, 0, 0, 0,
	240, 248, 172, 165, 0, 109, 246, 170, 164, 155,
	134, 144, 202, 162, 203, 145, 175, 174, 176, 0,
	0, 0, 232, 254, 270, 119, 0, 0, 239, 264,
	265, 0, 0, 120, 138, 133, 201, 177, 116, 147,
	229, 154, 161, 208, 268, 191, 214, 123, 253, 230,
	379, 390, 385, 386, 383, 384, 382, 381, 380, 392,
	370, 371, 372, 373, 376, 0, 387, 388, 374, 102,
	111, 158, 267, 206, 136, 255, 0, 0, 129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 105, 112, 118, 124, 128, 132, 135, 140,
	143, 146, 148, 149, 150, 153, 163, 166, 167, 168,
	169, 179, 180, 181, 183, 186, 187, 188, 189, 190,
	193, 195, 196, 197, 198, 199, 200, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 224, 225, 226, 227,
	233, 236, 242, 243, 252, 259, 263, 185, 0, 0,
	0, 0, 0, 0, 0, 0, 131, 0, 0, 0,
	0, 157, 0, 0, 0, 378, 159, 0, 0, 231,
	173, 0, 0, 0, 0, 367, 368, 0, 0, 0,
	0, 0, 0, 0, 0, 61, 0, 607, 334, 355,
	354, 357, 358, 359, 360, 0, 0, 121, 356, 361,
	362, 363, 0, 0, 0, 0, 348, 0, 377, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 345,
	346, 0, 0, 0, 0, 391, 0, 347, 0, 0,
	342, 343, 344, 349, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 0, 369, 0, 0, 0,
	260, 0, 0, 389, 204, 0, 235, 142, 156, 117,
	103, 113, 0, 141, 182, 211, 215, 375, 0, 0,
	0, 0, 125, 0, 213, 192, 251, 0, 0, 194,
	212, 160, 241, 205, 250, 261, 262, 238, 258, 266,
	228, 0, 0, 0, 0, 0, 0, 106, 237, 249,
	122, 223, 108, 247, 234, 171, 151, 152, 107, 0,
	209, 130, 137, 127, 184, 0, 0, 0, 244, 245,
	126, 269, 114, 257, 110, 115, 256, 178, 0, 0,
	0, 240, 248, 172, 165, 0, 109, 246, 170, 164,
	155, 134, 144, 202, 162, 203, 145, 175, 174, 176,
	0, 0, 0, 232, 254, 270, 119, 0, 0, 239,
	264, 265, 0, 0, 120, 138, 133, 201, 177, 116,
	147, 229, 154, 161, 208, 268, 191, 214, 123, 253,
	230, 379, 390, 385, 386, 383, 384, 382, 381, 380,
	392, 370, 371, 372, 373, 376, 0, 387, 388, 374,
	102, 111, 158, 267, 206, 136, 255, 0, 0, 129,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 105, 112, 118, 124, 128, 132, 135,
	140, 143, 146, 148, 149, 150, 153, 163, 166, 167,
	168, 169, 179, 180, 181, 183, 186, 187, 188, 189,
	190, 193, 195, 196, 197, 198, 199, 200, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 224, 225, 226,
	227, 233, 236, 242, 243, 252, 259, 263, 185, 0,
	0, 0, 0, 0, 0, 0, 0, 131, 0, 0,
	0, 0, 157, 0, 0, 0, 378, 159, 0, 0,
	231, 173, 0, 0, 0, 0, 367, 368, 0, 0,
	0, 0, 0, 0, 0, 0, 61, 0, 0, 334,
	355, 354, 357, 358, 359, 360, 0, 0, 121, 356,
	361, 362, 363, 0, 0, 0, 0, 348, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	345, 346, 0, 0, 0, 0, 391, 0, 347, 0,
	0, 342, 343, 344, 349, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 0, 0, 369, 0, 0,
	0, 260, 0, 0, 389, 204, 0, 235, 142, 156,
	117, 103, 113, 0, 141, 182, 211, 215, 375, 0,
	0, 0, 0, 125, 0, 213, 192, 251, 0, 0,
	194, 212, 160, 241, 205, 250, 261, 262, 238, 258,
	266, 228, 0, 0, 0, 0, 0, 0, 106, 237,
	249, 122, 223, 108, 247, 234, 171, 151, 152, 107,
	0, 209, 130, 137, 127, 184, 0, 0, 0, 244,
	245, 126, 269, 114, 257, 110, 115, 256, 178, 0,
	0, 0, 240, 248, 172, 165, 0, 109, 246, 170,
	164, 155, 134, 144, 202, 162, 203, 145, 175, 174,
	176, 0, 0, 0, 232, 254, 270, 119, 0, 0,
	239, 264, 265, 0, 0, 120, 138, 133, 201, 177,
	116, 147, 229, 154, 161, 208, 268, 191, 214, 123,
	253, 230, 379, 390, 385, 386, 383, 384, 382, 381,
	380, 392, 370, 371, 372, 373, 376, 0, 387, 388,
	374, 102, 111, 158, 267, 206, 136, 255, 0, 0,
	129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 105, 112, 118, 124, 128, 132,
	135, 140, 143, 146, 148, 149, 150, 153, 163, 166,
	167, 168, 169, 179, 180, 181, 183, 186, 187, 188,
	189, 190, 193, 195, 196, 197, 198, 199, 200, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 252, 259, 263, 185,
	0, 0, 0, 0, 0, 0, 0, 0, 131, 0,
	0, 0, 0, 157, 0, 0, 0, 0, 159, 0,
	0, 231, 173, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	433, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 648, 647, 657,
	658, 650, 651, 652, 653, 654, 655, 656, 649, 0,
	0, 659, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 0, 0, 0,
	0, 0, 260, 0, 0, 0, 204, 0, 235, 142,
	156, 117, 103, 113, 0, 141, 182, 211, 215, 0,
	0, 0, 0, 0, 125, 0, 213, 192, 251, 0,
	0, 194, 212, 160, 241, 205, 250, 261, 262, 238,
	258, 266, 228, 0, 0, 0, 0, 0, 0, 106,
	237, 249, 122, 223, 108, 247, 234, 171, 151, 152,
	107, 0, 209, 130, 137, 127, 184, 0, 0, 0,
	244, 245, 126, 269, 114, 257, 110, 115, 256, 178,
	0, 0, 0, 240, 248, 172, 165, 0, 109, 246,
	170, 164, 155, 134, 144, 202, 162, 203, 145, 175,
	174, 176, 0, 0, 0, 232, 254, 270, 119, 0,
	0, 239, 264, 265, 0, 0, 120, 138, 133, 201,
	177, 116, 147, 229, 154, 161, 208, 268, 191, 214,
	123, 253, 230, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 111, 158, 267, 206, 136, 255, 0,
	0, 129, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 105, 112, 118, 124, 128,
	132, 135, 140, 143, 146, 148, 149, 150, 153, 163,
	166, 167, 168, 169, 179, 180, 181, 183, 186, 187,
	188, 189, 190, 193, 195, 196, 197, 198, 199, 200,
	207, 210, 216, 217, 218, 219, 220, 221, 222, 224,
	225, 226, 227, 233, 236, 242, 243, 252, 259, 263,
	185, 0, 0, 0, 983, 0, 0, 0, 0, 131,
	0, 0, 0, 0, 157, 0, 0, 0, 0, 159,
	0, 0, 231, 173, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 985, 987, 0, 0, 0, 0,
	0, 100, 0, 989, 0, 0, 0, 0, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 0, 0, 0,
	0, 0, 0, 260, 0, 986, 0, 204, 0, 235,
	142, 156, 117, 103, 113, 0, 141, 182, 211, 215,
	0, 0, 0, 0, 0, 125, 0, 213, 192, 251,
	0, 0, 194, 212, 160, 241, 205, 250, 261, 262,
	238, 258, 266, 228, 0, 0, 0, 0, 0, 0,
	106, 237, 249, 122, 223, 108, 247, 234, 171, 151,
	152, 107, 0, 209, 130, 137, 127, 184, 0, 0,
	0, 244, 245, 126, 269, 114, 257, 110, 115, 256,
	178, 0, 0, 0, 240, 248, 172, 165, 0, 109,
	246, 170, 164, 155, 134, 144, 202, 162, 203, 145,
	175, 174, 176, 0, 0, 0, 232, 254, 270, 119,
	0, 0, 239, 264, 265, 0, 0, 120, 138, 133,
	201, 177, 116, 147, 229, 154, 161, 208, 268, 191,
	214, 123, 253, 230, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 102, 111, 158, 267, 206, 136, 255,
	0, 0, 129, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 105, 112, 118, 124,
	128, 132, 135, 140, 143, 146, 148, 149, 150, 153,
	163, 166, 167, 168, 169, 179, 180, 181, 183, 186,
	187, 188, 189, 190, 193, 195, 196, 197, 198, 199,
	200, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	224, 225, 226, 227, 233, 236, 242, 243, 252, 259,
	263, 185, 0, 0, 0, 983, 0, 0, 0, 0,
	131, 0, 0, 0, 0, 157, 0, 0, 0, 0,
	159, 0, 0, 231, 173, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 985, 987, 0, 0, 0,
	0, 0, 100, 0, 989, 0, 0, 0, 0, 0,
	0, 121, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 0, 0,
	0, 0, 0, 0, 260, 0, 986, 0, 204, 0,
	235, 142, 156, 117, 103, 113, 0, 141, 182, 211,
	215, 0, 0, 0, 0, 0, 125, 0, 213, 192,
	251, 0, 0, 981, 212, 160, 241, 205, 250, 261,
	262, 238, 258, 266, 228, 0, 0, 0, 0, 0,
	0, 106, 237, 249, 122, 223, 108, 247, 234, 171,
	151, 152, 107, 0, 209, 130, 137, 127, 184, 0,
	0, 0, 244, 245, 126, 269, 114, 257, 110, 115,
	256, 178, 0, 0, 0, 240, 248, 172, 165, 0,
	109, 246, 170, 164, 155, 134, 144, 202, 162, 203,
	145, 175, 174, 176, 0, 0, 0, 232, 254, 270,
	119, 0, 0, 239, 264, 265, 0, 0, 120, 138,
	133, 201, 177, 116, 147, 229, 154, 161, 208, 268,
	191, 214, 123, 253, 230, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 111, 158, 267, 206, 136,
	255, 0, 0, 129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 105, 112, 118,
	124, 128, 132, 135, 140, 143, 146, 148, 149, 150,
	153, 163, 166, 167, 168, 169, 179, 180, 181, 183,
	186, 187, 188, 189, 190, 193, 195, 196, 197, 198,
	199, 200, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 224, 225, 226, 227, 233, 236, 242, 243, 252,
	259, 263, 185, 0, 0, 0, 636, 0, 0, 0,
	0, 131, 0, 0, 0, 0, 157, 0, 0, 0,
	0, 159, 0, 0, 231, 173, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 433, 0, 638, 0, 0, 0, 0,
	0, 0, 121, 0, 0, 0, 0, 0, 633, 632,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 634, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
	0, 0, 0, 0, 0, 260, 0, 0, 0, 204,
	0, 235, 142, 156, 117, 103, 113, 0, 141, 182,
	211, 215, 0, 0, 0, 0, 0, 125, 0, 213,
	192, 251, 0, 0, 194, 212, 160, 241, 205, 250,
	261, 262, 238, 258, 266, 228, 0, 0, 0, 0,
	0, 0, 106, 237, 249, 122, 223, 108, 247, 234,
	171, 151, 152, 107, 0, 209, 130, 137, 127, 184,
	0, 0, 0, 244, 245, 126, 269, 114, 257, 110,
	115, 256, 178, 0, 0, 0, 240, 248, 172, 165,
	0, 109, 246, 170, 164, 155, 134, 144, 202, 162,
	203, 145, 175, 174, 176, 0, 0, 0, 232, 254,
	270, 119, 0, 0, 239, 264, 265, 0, 0, 120,
	138, 133, 201, 177, 116, 147, 229, 154, 161, 208,
	268, 191, 214, 123, 253, 230, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 102, 111, 158, 267, 206,
	136, 255, 0, 0, 129, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 105, 112,
	118, 124, 128, 132, 135, 140, 143, 146, 148, 149,
	150, 153, 163, 166, 167, 168, 169, 179, 180, 181,
	183, 186, 187, 188, 189, 190, 193, 195, 196, 197,
	198, 199, 200, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	252, 259, 263, 26, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 0, 0, 0, 0,
	0, 0, 0, 0, 131, 0, 0, 0, 0, 157,
	0, 0, 0, 0, 159, 0, 0, 231, 173, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 61, 0, 0, 433, 0, 0, 0,
	0, 0, 0, 0, 0, 121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 0, 0, 0, 0, 0, 260, 0,
	0, 0, 204, 0, 235, 142, 156, 117, 103, 113,
	0, 141, 182, 211, 215, 0, 0, 0, 0, 0,
	125, 0, 213, 192, 251, 0, 0, 194, 212, 160,
	241, 205, 250, 261, 262, 238, 258, 266, 228, 0,
	0, 0, 0, 0, 0, 106, 237, 249, 122, 223,
	108, 247, 234, 171, 151, 152, 107, 0, 209, 130,
	137, 127, 184, 0, 0, 0, 244, 245, 126, 269,
	114, 257, 110, 115, 256, 178, 0, 0, 0, 240,
	248, 172, 165, 0, 109, 246, 170, 164, 155, 134,
	144, 202, 162, 203, 145, 175, 174, 176, 0, 0,
	0, 232, 254, 270, 119, 0, 0, 239, 264, 265,
	0, 0, 120, 138, 133, 201, 177, 116, 147, 229,
	154, 161, 208, 268, 191, 214, 123, 253, 230, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 102, 111,
	158, 267, 206, 136, 255, 0, 0, 129, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 105, 112, 118, 124, 128, 132, 135, 140, 143,
	146, 148, 149, 150, 153, 163, 166, 167, 168, 169,
	179, 180, 181, 183, 186, 187, 188, 189, 190, 193,
	195, 196, 197, 198, 199, 200, 207, 210, 216, 217,
	218, 219, 220, 221, 222, 224, 225, 226, 227, 233,
	236, 242, 243, 252, 259, 263, 185, 0, 0, 0,
	0, 0, 0, 0, 0, 131, 0, 0, 0, 0,
	157, 0, 0, 0, 0, 159, 0, 0, 231, 173,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 100, 0, 989,
	0, 0, 0, 0, 0, 0, 121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 0, 0, 0, 0, 0, 260,
	0, 0, 0, 204, 0, 235, 142, 156, 117, 103,
	113, 0, 141, 182, 211, 215, 0, 0, 0, 0,
	0, 125, 0, 213, 192, 251, 0, 0, 194, 212,
	160, 241, 205, 250, 261, 262, 238, 258, 266, 228,
	0, 0, 0, 0, 0, 0, 106, 237, 249, 122,
	223, 108, 247, 234, 171, 151, 152, 107, 0, 209,
	130, 137, 127, 184, 0, 0, 0, 244, 245, 126,
	269, 114, 257, 110, 115, 256, 178, 0, 0, 0,
	240, 248, 172, 165, 0, 109, 246, 170, 164, 155,
	134, 144, 202, 162, 203, 145, 175, 174, 176, 0,
	0, 0, 232, 254, 270, 119, 0, 0, 239, 264,
	265, 0, 0, 120, 138, 133, 201, 177, 116, 147,
	229, 154, 161, 208, 268, 191, 214, 123, 253, 230,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	111, 158, 267, 206, 136, 255, 0, 0, 129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1198, 0, 0, 0, 0, 0, 0,
	0, 104, 105, 112, 118, 124, 128, 132, 135, 140,
	143, 146, 148, 149, 150, 153, 163, 166, 167, 168,
	169, 179, 180, 181, 183, 186, 187, 188, 189, 190,
	193, 195, 196, 197, 198, 199, 200, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 224, 225, 226, 227,
	233, 236, 242, 243, 252, 259, 263, 26, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	0, 0, 0, 0, 0, 0, 0, 0, 131, 0,
	0, 0, 0, 157, 0, 0, 0, 0, 159, 0,
	0, 231, 173, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 61, 0, 0,
	100, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 0, 0, 0,
	0, 0, 260, 0, 0, 0, 204, 0, 235, 142,
	156, 117, 103, 113, 0, 141, 182, 211, 215, 0,
	0, 0, 0, 0, 125, 0, 213, 192, 251, 0,
	0, 194, 212, 160, 241, 205, 250, 261, 262, 238,
	258, 266, 228, 0, 0, 0, 0, 0, 0, 106,
	237, 249, 122, 223, 108, 247, 234, 171, 151, 152,
	107, 0, 209, 130, 137, 127, 184, 0, 0, 0,
	244, 245, 126, 269, 114, 257, 110, 115, 256, 178,
	0, 0, 0, 240, 248, 172, 165, 0, 109, 246,
	170, 164, 155, 134, 144, 202, 162, 203, 145, 175,
	174, 176, 0, 0, 0, 232, 254, 270, 119, 0,
	0, 239, 264, 265, 0, 0, 120, 138, 133, 201,
	177, 116, 147, 229, 154, 161, 208, 268, 191, 214,
	123, 253, 230, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 111, 158, 267, 206, 136, 255, 0,
	0, 129, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 105, 112, 118, 124, 128,
	132, 135, 140, 143, 146, 148, 149, 150, 153, 163,
	166, 167, 168, 169, 179, 180, 181, 183, 186, 187,
	188, 189, 190, 193, 195, 196, 197, 198, 199, 200,
	207, 210, 216, 217, 218, 219, 220, 221, 222, 224,
	225, 226, 227, 233, 236, 242, 243, 252, 259, 263,
	185, 0, 0, 0, 0, 0, 0, 0, 0, 131,
	0, 0, 0, 0, 157, 0, 0, 0, 0, 159,
	0, 0, 231, 173, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 433, 0, 0, 879, 0, 0, 880, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 0, 0, 0,
	0, 0, 0, 260, 0, 0, 0, 204, 0, 235,
	142, 156, 117, 103, 113, 0, 141, 182, 211, 215,
	0, 0, 0, 0, 0, 125, 0, 213, 192, 251,
	0, 0, 194, 212, 160, 241, 205, 250, 261, 262,
	238, 258, 266, 228, 0, 0, 0, 0, 0, 0,
	106, 237, 249, 122, 223, 108, 247, 234, 171, 151,
	152, 107, 0, 209, 130, 137, 127, 184, 0, 0,
	0, 244, 245, 126, 269, 114, 257, 110, 115, 256,
	178, 0, 0, 0, 240, 248, 172, 165, 0, 109,
	246, 170, 164, 155, 134, 144, 202, 162, 203, 145,
	175, 174, 176, 0, 0, 0, 232, 254, 270, 119,
	0, 0, 239, 264, 265, 0, 0, 120, 138, 133,
	201, 177, 116, 147, 229, 154, 161, 208, 268, 191,
	214, 123, 253, 230, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 102, 111, 158, 267, 206, 136, 255,
	0, 0, 129, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 105, 112, 118, 124,
	128, 132, 135, 140, 143, 146, 148, 149, 150, 153,
	163, 166, 167, 168, 169, 179, 180, 181, 183, 186,
	187, 188, 189, 190, 193, 195, 196, 197, 198, 199,
	200, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	224, 225, 226, 227, 233, 236, 242, 243, 252, 259,
	263, 185, 0, 0, 0, 0, 0, 0, 0, 0,
	131, 752, 0, 0, 0, 157, 0, 0, 0, 0,
	159, 0, 0, 231, 173, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 433, 0, 751, 0, 0, 0, 0, 0,
	0, 121, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 0, 0,
	0, 0, 0, 0, 260, 0, 0, 0, 204, 0,
	235, 142, 156, 117, 103, 113, 0, 141, 182, 211,
	215, 0, 0, 0, 0, 0, 125, 0, 213, 192,
	251, 0, 0, 194, 212, 160, 241, 205, 250, 261,
	262, 238, 258, 266, 228, 0, 0, 0, 0, 0,
	0, 106, 237, 249, 122, 223, 108, 247, 234, 171,
	151, 152, 107, 0, 209, 130, 137, 127, 184, 0,
	0, 0, 244, 245, 126, 269, 114, 257, 110, 115,
	256, 178, 0, 0, 0, 240, 248, 172, 165, 0,
	109, 246, 170, 164, 155, 134, 144, 202, 162, 203,
	145, 175, 174, 176, 0, 0, 0, 232, 254, 270,
	119, 0, 0, 239, 264, 265, 0, 0, 120, 138,
	133, 201, 177, 116, 147, 229, 154, 161, 208, 268,
	191, 214, 123, 253, 230, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 111, 158, 267, 206, 136,
	255, 0, 0, 129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 105, 112, 118,
	124, 128, 132, 135, 140, 143, 146, 148, 149, 150,
	153, 163, 166, 167, 168, 169, 179, 180, 181, 183,
	186, 187, 188, 189, 190, 193, 195, 196, 197, 198,
	199, 200, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 224, 225, 226, 227, 233, 236, 242, 243, 252,
	259, 263, 185, 0, 0, 0, 0, 0, 0, 0,
	0, 131, 0, 0, 0, 0, 157, 0, 0, 0,
	0, 159, 0, 0, 231, 173, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 0, 989, 0, 0, 0, 0,
	0, 0, 121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
	0, 0, 0, 0, 0, 260, 0, 0, 0, 204,
	0, 235, 142, 156, 117, 103, 113, 0, 141, 182,
	211, 215, 0, 0, 0, 0, 0, 125, 0, 213,
	192, 251, 0, 0, 194, 212, 160, 241, 205, 250,
	261, 262, 238, 258, 266, 228, 0, 0, 0, 0,
	0, 0, 106, 237, 249, 122, 223, 108, 247, 234,
	171, 151, 152, 107, 0, 209, 130, 137, 127, 184,
	0, 0, 0, 244, 245, 126, 269, 114, 257, 110,
	115, 256, 178, 0, 0, 0, 240, 248, 172, 165,
	0, 109, 246, 170, 164, 155, 134, 144, 202, 162,
	203, 145, 175, 174, 176, 0, 0, 0, 232, 254,
	270, 119, 0, 0, 239, 264, 265, 0, 0, 120,
	138, 133, 201, 177, 116, 147, 229, 154, 161, 208,
	268, 191, 214, 123, 253, 230, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 102, 111, 158, 267, 206,
	136, 255, 0, 0, 129, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 105, 112,
	118, 124, 128, 132, 135, 140, 143, 146, 148, 149,
	150, 153, 163, 166, 167, 168, 169, 179, 180, 181,
	183, 186, 187, 188, 189, 190, 193, 195, 196, 197,
	198, 199, 200, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	252, 259, 263, 185, 0, 0, 0, 0, 0, 0,
	0, 0, 131, 0, 0, 0, 0, 157, 0, 0,
	0, 0, 159, 0, 0, 231, 173, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 61, 0, 0, 100, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	0, 0, 0, 0, 0, 0, 260, 0, 0, 0,
	204, 0, 235, 142, 156, 117, 103, 113, 0, 141,
	182, 211, 215, 0, 0, 0, 0, 0, 125, 0,
	213, 192, 251, 0, 0, 194, 212, 160, 241, 205,
	250, 261, 262, 238, 258, 266, 228, 0, 0, 0,
	0, 0, 0, 106, 237, 249, 122, 223, 108, 247,
	234, 171, 151, 152, 107, 0, 209, 130, 137, 127,
	184, 0, 0, 0, 244, 245, 126, 269, 114, 257,
	110, 115, 256, 178, 0, 0, 0, 240, 248, 172,
	165, 0, 109, 246, 170, 164, 155, 134, 144, 202,
	162, 203, 145, 175, 174, 176, 0, 0, 0, 232,
	254, 270, 119, 0, 0, 239, 264, 265, 0, 0,
	120, 138, 133, 201, 177, 116, 147, 229, 154, 161,
	208, 268, 191, 214, 123, 253, 230, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 102, 111, 158, 267,
	206, 136, 255, 0, 0, 129, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 105,
	112, 118, 124, 128, 132, 135, 140, 143, 146, 148,
	149, 150, 153, 163, 166, 167, 168, 169, 179, 180,
	181, 183, 186, 187, 188, 189, 190, 193, 195, 196,
	197, 198, 199, 200, 207, 210, 216, 217, 218, 219,
	220, 221, 222, 224, 225, 226, 227, 233, 236, 242,
	243, 252, 259, 263, 185, 0, 0, 0, 0, 0,
	0, 0, 0, 131, 0, 0, 0, 0, 157, 0,
	0, 0, 0, 159, 0, 0, 231, 173, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 433, 0, 638, 0, 0,
	0, 0, 0, 0, 121, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 0, 0, 0, 0, 0, 0, 260, 0, 0,
	0, 204, 0, 235, 142, 156, 117, 103, 113, 0,
	141, 182, 211, 215, 0, 0, 0, 0, 0, 125,
	0, 213, 192, 251, 0, 0, 194, 212, 160, 241,
	205, 250, 261, 262, 238, 258, 266, 228, 0, 0,
	0, 0, 0, 0, 106, 237, 249, 122, 223, 108,
	247, 234, 171, 151, 152, 107, 0, 209, 130, 137,
	127, 184, 0, 0, 0, 244, 245, 126, 269, 114,
	257, 110, 115, 256, 178, 0, 0, 0, 240, 248,
	172, 165, 0, 109, 246, 170, 164, 155, 134, 144,
	202, 162, 203, 145, 175, 174, 176, 0, 0, 0,
	232, 254, 270, 119, 0, 0, 239, 264, 265, 0,
	0, 120, 138, 133, 201, 177, 116, 147, 229, 154,
	161, 208, 268, 191, 214, 123, 253, 230, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 102, 111, 158,
	267, 206, 136, 255, 0, 0, 129, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	105, 112, 118, 124, 128, 132, 135, 140, 143, 146,
	148, 149, 150, 153, 163, 166, 167, 168, 169, 179,
	180, 181, 183, 186, 187, 188, 189, 190, 193, 195,
	196, 197, 198, 199, 200, 207, 210, 216, 217, 218,
	219, 220, 221, 222, 224, 225, 226, 227, 233, 236,
	242, 243, 252, 259, 263, 185, 0, 0, 0, 0,
	0, 0, 0, 722, 131, 0, 0, 0, 0, 157,
	0, 0, 0, 0, 159, 0, 0, 231, 173, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 100, 0, 0, 0,
	0, 0, 0, 0, 0, 121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 0, 0, 0, 0, 0, 260, 0,
	0, 0, 204, 0, 235, 142, 156, 117, 103, 113,
	0, 141, 182, 211, 215, 0, 0, 0, 0, 0,
	125, 0, 213, 192, 251, 0, 0, 194, 212, 160,
	241, 205, 250, 261, 262, 238, 258, 266, 228, 0,
	0, 0, 0, 0, 0, 106, 237, 249, 122, 223,
	108, 247, 234, 171, 151, 152, 107, 0, 209, 130,
	137, 127, 184, 0, 0, 0, 244, 245, 126, 269,
	114, 257, 110, 115, 256, 178, 0, 0, 0, 240,
	248, 172, 165, 0, 109, 246, 170, 164, 155, 134,
	144, 202, 162, 203, 145, 175, 174, 176, 0, 0,
	0, 232, 254, 270, 119, 0, 0, 239, 264, 265,
	0, 0, 120, 138, 133, 201, 177, 116, 147, 229,
	154, 161, 208, 268, 191, 214, 123, 253, 230, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 102, 111,
	158, 267, 206, 136, 255, 0, 0, 129, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 105, 112, 118, 124, 128, 132, 135, 140, 143,
	146, 148, 149, 150, 153, 163, 166, 167, 168, 169,
	179, 180, 181, 183, 186, 187, 188, 189, 190, 193,
	195, 196, 197, 198, 199, 200, 207, 210, 216, 217,
	218, 219, 220, 221, 222, 224, 225, 226, 227, 233,
	236, 242, 243, 252, 259, 263, 395, 0, 0, 0,
	0, 0, 0, 185, 0, 0, 0, 0, 0, 0,
	0, 0, 131, 0, 0, 0, 0, 157, 0, 0,
	0, 0, 159, 0, 0, 231, 173, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 100, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	0, 0, 0, 0, 0, 0, 260, 0, 0, 0,
	204, 0, 235, 142, 156, 117, 103, 113, 0, 141,
	182, 211, 215, 0, 0, 0, 0, 0, 125, 0,
	213, 192, 251, 0, 0, 194, 212, 160, 241, 205,
	250, 261, 262, 238, 258, 266, 228, 0, 0, 0,
	0, 0, 0, 106, 237, 249, 122, 223, 108, 247,
	234, 171, 151, 152, 107, 0, 209, 130, 137, 127,
	184, 0, 0, 0, 244, 245, 126, 269, 114, 257,
	110, 115, 256, 178, 0, 0, 0, 240, 248, 172,
	165, 0, 109, 246, 170, 164, 155, 134, 144, 202,
	162, 203, 145, 175, 174, 176, 0, 0, 0, 232,
	254, 270, 119, 0, 0, 239, 264, 265, 0, 0,
	120, 138, 133, 201, 177, 116, 147, 229, 154, 161,
	208, 268, 191, 214, 123, 253, 230, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 102, 111, 158, 267,
	206, 136, 255, 0, 0, 129, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 105,
	112, 118, 124, 128, 132, 135, 140, 143, 146, 148,
	149, 150, 153, 163, 166, 167, 168, 169, 179, 180,
	181, 183, 186, 187, 188, 189, 190, 193, 195, 196,
	197, 198, 199, 200, 207, 210, 216, 217, 218, 219,
	220, 221, 222, 224, 225, 226, 227, 233, 236, 242,
	243, 252, 259, 263, 185, 0, 0, 0, 0, 0,
	0, 0, 0, 131, 0, 0, 0, 0, 157, 0,
	0, 0, 0, 159, 0, 0, 231, 173, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 100, 0, 0, 0, 0,
	0, 0, 0, 0, 121, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 0, 0, 0, 97, 0, 0, 260, 0, 0,
	0, 204, 0, 235, 142, 156, 117, 103, 113, 0,
	141, 182, 211, 215, 0, 0, 0, 0, 0, 125,
	0, 213, 192, 251, 0, 0, 194, 212, 160, 241,
	205, 250, 261, 262, 238, 258, 266, 228, 0, 0,
	0, 0, 0, 0, 106, 237, 249, 122, 223, 108,
	247, 234, 171, 151, 152, 107, 0, 209, 130, 137,
	127, 184, 0, 0, 0, 244, 245, 126, 269, 114,
	257, 110, 115, 256, 178, 0, 0, 0, 240, 248,
	172, 165, 0, 109, 246, 170, 164, 155, 134, 144,
	202, 162, 203, 145, 175, 174, 176, 0, 0, 0,
	232, 254, 270, 119, 0, 0, 239, 264, 265, 0,
	0, 120, 138, 133, 201, 177, 116, 147, 229, 154,
	161, 208, 268, 191, 214, 123, 253, 230, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 102, 111, 158,
	267, 206, 136, 255, 0, 0, 129, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	105, 112, 118, 124, 128, 132, 135, 140, 143, 146,
	148, 149, 150, 153, 163, 166, 167, 168, 169, 179,
	180, 181, 183, 186, 187, 188, 189, 190, 193, 195,
	196, 197, 198, 199, 200, 207, 210, 216, 217, 218,
	219, 220, 221, 222, 224, 225, 226, 227, 233, 236,
	242, 243, 252, 259, 263, 185, 0, 0, 0, 0,
	0, 0, 0, 0, 131, 0, 0, 0, 0, 157,
	0, 0, 0, 0, 159, 0, 0, 231, 173, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 433, 0, 0, 0,
	0, 0, 0, 0, 0, 121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 0, 0, 0, 0, 0, 260, 0,
	0, 0, 204, 0, 235, 142, 156, 117, 103, 113,
	0, 141, 182, 211, 215, 0, 0, 0, 0, 0,
	125, 0, 213, 192, 251, 0, 0, 194, 212, 160,
	241, 205, 250, 261, 262, 238, 258, 266, 228, 0,
	0, 0, 0, 0, 0, 106, 237, 249, 122, 223,
	108, 247, 234, 171, 151, 152, 107, 0, 209, 130,
	137, 127, 184, 0, 0, 0, 244, 245, 126, 269,
	114, 257, 110, 115, 256, 178, 0, 0, 0, 240,
	248, 172, 165, 0, 109, 246, 170, 164, 155, 134,
	144, 202, 162, 203, 145, 175, 174, 176, 0, 0,
	0, 232, 254, 270, 119, 0, 0, 239, 264, 265,
	0, 0, 120, 138, 133, 201, 177, 116, 147, 229,
	154, 161, 208, 268, 191, 214, 123, 253, 230, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 102, 111,
	158, 267, 206, 136, 255, 0, 0, 129, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 105, 112, 118, 124, 128, 132, 135, 140, 143,
	146, 148, 149, 150, 153, 163, 166, 167, 168, 169,
	179, 180, 181, 183, 186, 187, 188, 189, 190, 193,
	195, 196, 197, 198, 199, 200, 207, 210, 216, 217,
	218, 219, 220, 221, 222, 224, 225, 226, 227, 233,
	236, 242, 243, 252, 259, 263, 185, 0, 0, 0,
	0, 0, 0, 0, 0, 131, 0, 0, 0, 0,
	157, 0, 0, 0, 0, 159, 0, 0, 231, 173,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 100, 0, 0,
	0, 0, 0, 0, 0, 0, 121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 0, 0, 0, 0, 0, 260,
	0, 0, 0, 204, 0, 235, 142, 156, 117, 103,
	113, 0, 141, 182, 211, 215, 0, 0, 0, 0,
	0, 125, 0, 213, 192, 251, 0, 0, 194, 212,
	160, 241, 205, 250, 261, 262, 238, 258, 266, 228,
	0, 0, 0, 0, 0, 0, 106, 237, 249, 122,
	223, 108, 247, 234, 171, 151, 152, 107, 0, 209,
	130, 137, 127, 184, 0, 0, 0, 244, 245, 126,
	269, 114, 257, 110, 115, 256, 178, 0, 0, 0,
	240, 248, 172, 165, 0, 109, 246, 170, 164, 155,
	134, 144, 202, 162, 203, 145, 175, 174, 176, 0,
	0, 0, 232, 254, 270, 119, 0, 0, 239, 264,
	265, 0, 0, 120, 138, 133, 201, 177, 116, 147,
	229, 154, 161, 208, 268, 191, 214, 123, 253, 230,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	111, 158, 267, 206, 136, 255, 0, 0, 129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 105, 112, 118, 124, 128, 132, 135, 140,
	143, 146, 148, 149, 150, 153, 163, 166, 167, 168,
	169, 179, 180, 181, 183, 186, 187, 188, 189, 190,
	193, 195, 196, 197, 198, 199, 200, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 224, 225, 226, 227,
	233, 236, 242, 243, 252, 259, 263, 185, 0, 0,
	0, 0, 0, 0, 0, 0, 131, 0, 0, 0,
	0, 157, 0, 0, 0, 0, 159, 0, 0, 231,
	173, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 334, 0,
	0, 0, 0, 0, 0, 0, 0, 121, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 0, 0, 0, 0, 0,
	260, 0, 0, 0, 204, 0, 235, 142, 156, 117,
	103, 113, 0, 141, 182, 211, 215, 0, 0, 0,
	0, 0, 125, 0, 213, 192, 251, 0, 0, 194,
	212, 160, 241, 205, 250, 261, 262, 238, 258, 266,
	228, 0, 0, 0, 0, 0, 0, 106, 237, 249,
	122, 223, 108, 247, 234, 171, 151, 152, 107, 0,
	209, 130, 137, 127, 184, 0, 0, 0, 244, 245,
	126, 269, 114, 257, 110, 412, 256, 178, 0, 0,
	0, 240, 248, 172, 165, 0, 109, 246, 170, 164,
	155, 134, 144, 202, 162, 203, 145, 175, 174, 176,
	0, 0, 0, 232, 254, 270, 119, 0, 0, 239,
	264, 265, 0, 0, 120, 138, 133, 201, 413, 411,
	147, 229, 154, 161, 208, 268, 191, 214, 123, 253,
	230, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	102, 111, 158, 267, 206, 136, 255, 0, 0, 129,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 105, 112, 118, 124, 128, 132, 135,
	140, 143, 146, 148, 149, 150, 153, 163, 166, 167,
	168, 169, 179, 180, 181, 183, 186, 187, 188, 189,
	190, 193, 195, 196, 197, 198, 199, 200, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 224, 225, 226,
	227, 233, 236, 242, 243, 252, 259, 263, 185, 0,
	0, 0, 0, 0, 0, 0, 0, 131, 0, 0,
	0, 0, 157, 0, 0, 0, 0, 159, 0, 0,
	231, 173, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 334,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 0, 0, 0, 0, 0,
	0, 260, 0, 0, 0, 204, 0, 235, 142, 156,
	117, 103, 113, 0, 141, 182, 211, 215, 0, 0,
	0, 0, 0, 125, 0, 213, 192, 251, 0, 0,
	194, 212, 160, 241, 205, 250, 261, 262, 238, 258,
	266, 228, 0, 0, 0, 0, 0, 0, 106, 237,
	249, 122, 223, 108, 247, 234, 171, 151, 152, 107,
	0, 209, 130, 137, 127, 184, 0, 0, 0, 244,
	245, 126, 269, 114, 257, 110, 115, 256, 178, 0,
	0, 0, 240, 248, 172, 165, 0, 109, 246, 170,
	164, 155, 134, 144, 202, 162, 203, 145, 175, 174,
	176, 0, 0, 0, 232, 254, 270, 119, 0, 0,
	239, 264, 265, 0, 0, 120, 138, 133, 201, 177,
	116, 147, 229, 154, 161, 208, 268, 191, 214, 123,
	253, 230, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 102, 111, 158, 267, 206, 136, 255, 0, 0,
	129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 105, 112, 118, 124, 128, 132,
	135, 140, 143, 146, 148, 149, 150, 153, 163, 166,
	167, 168, 169, 179, 180, 181, 183, 186, 187, 188,
	189, 190, 193, 195, 196, 197, 198, 199, 200, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 252, 259, 263, 185,
	0, 0, 0, 0, 0, 0, 0, 0, 131, 0,
	0, 0, 0, 157, 0, 0, 0, 0, 159, 0,
	0, 231, 173, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	334, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 0, 0, 0,
	0, 0, 260, 0, 0, 0, 204, 0, 235, 142,
	156, 117, 103, 113, 0, 141, 182, 211, 215, 0,
	0, 0, 0, 0, 125, 0, 213, 192, 251, 0,
	0, 194, 212, 160, 241, 205, 250, 261, 262, 238,
	258, 266, 228, 0, 0, 0, 0, 0, 0, 106,
	237, 743, 122, 223, 108, 247, 234, 171, 151, 152,
	107, 0, 209, 130, 137, 127, 184, 0, 0, 0,
	244, 245, 126, 269, 114, 257, 110, 412, 256, 178,
	0, 0, 0, 240, 248, 172, 165, 0, 109, 246,
	170, 164, 155, 134, 144, 202, 162, 203, 145, 175,
	174, 176, 0, 0, 0, 232, 254, 270, 119, 0,
	0, 239, 264, 265, 0, 0, 120, 138, 133, 201,
	413, 411, 147, 229, 154, 161, 208, 268, 191, 214,
	123, 253, 230, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 111, 158, 267, 206, 136, 255, 0,
	0, 129, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 105, 112, 118, 124, 128,
	132, 135, 140, 143, 146, 148, 149, 150, 153, 163,
	166, 167, 168, 169, 179, 180, 181, 183, 186, 187,
	188, 189, 190, 193, 195, 196, 197, 198, 199, 200,
	207, 210, 216, 217, 218, 219, 220, 221, 222, 224,
	225, 226, 227, 233, 236, 242, 243, 252, 259, 263,
	185, 0, 0, 0, 0, 0, 0, 0, 0, 131,
	0, 0, 0, 0, 157, 0, 0, 0, 0, 159,
	0, 0, 231, 173, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 334, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 0, 0, 0,
	0, 0, 0, 260, 0, 0, 0, 204, 0, 235,
	142, 156, 117, 103, 113, 0, 141, 182, 211, 215,
	0, 0, 0, 0, 0, 125, 0, 213, 192, 251,
	0, 0, 194, 212, 160, 241, 205, 250, 261, 262,
	238, 258, 266, 228, 0, 0, 0, 0, 0, 0,
	106, 237, 403, 122, 223, 108, 247, 234, 171, 151,
	152, 107, 0, 209, 130, 137, 127, 184, 0, 0,
	0, 244, 245, 126, 269, 114, 257, 110, 412, 256,
	178, 0, 0, 0, 240, 248, 172, 165, 0, 109,
	246, 170, 164, 155, 134, 144, 202, 162, 203, 145,
	175, 174, 176, 0, 0, 0, 232, 254, 270, 119,
	0, 0, 239, 264, 265, 0, 0, 120, 138, 133,
	201, 413, 411, 406, 405, 154, 161, 208, 268, 191,
	214, 123, 253, 230, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 102, 111, 158, 267, 206, 136, 255,
	0, 0, 129, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 105, 112, 118, 124,
	128, 132, 135, 140, 143, 146, 148, 149, 150, 153,
	163, 166, 167, 168, 169, 179, 180, 181, 183, 186,
	187, 188, 189, 190, 193, 195, 196, 197, 198, 199,
	200, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	224, 225, 226, 227, 233, 236, 242, 243, 252, 259,
	263,
}
var yyPact = [...]int{

	1847, -1000, -252, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1302, 1338, -1000, -1000, -1000, -1000,
	-1000, -1000, 475, 495, -1000, -1000, -1000, 199, 16, 15186,
	197, 2124, 15888, -1000, 48, -1000, -1000, 125, 15888, -1000,
	-1000, -57, -61, -1000, 1025, -1000, -1000, 79, -1000, -1000,
	-1000, -1000, -1000, -1000, 1285, 1300, 1081, 1291, 1140, -1000,
	7421, 158, 158, 14835, 17292, -1000, -1000, 486, 15888, 191,
	15888, -137, 154, 154, 88, 154, -1000, 453, -1000, -1000,
	-1000, 15888, 155, 15537, 155, 155, 155, 15888, -1000, 295,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 15888, 875, 1245, 4548, 87, 4548, 4548, -1000, 448,
	-1000, 4548, 80, 4548, -37, 496, 63, 4, -1000, 4548,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 129, 1025,
	417, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 835, 195,
	15888, 351, -1000, 1231, 8837, 8837, 1302, -1000, 1025, -1000,
	-1000, -1000, 1251, -1000, -1000, 517, 1321, -1000, 11294, 293,
	-1000, 8837, 2374, 1032, -1000, -1000, 1032, -1000, -1000, 228,
	-1000, -1000, 9890, 9890, 9890, 9890, 9890, 9890, 9890, 9890,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1032, -1000, 8486, 1032, 1032, 1032,
	1032, 1032, 1032, 1032, 1032, 1032, 1032, 8837, 1032, 1032,
	1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
	1032, 1032, 1032, 14477, 13775, 15888, 1019, 939, -1000, -1000,
	251, 958, 16941, -53, -1000, -1000, -1000, 397, 13073, -1000,
	249, -1000, 1233, -1000, 956, 15888, -1000, 1859, -1000, 15537,
	1275, 172, 869, 488, 838, 830, 15888, 826, 1026, 169,
	15888, 1262, 1105, -1000, -1000, 15888, 813, 810, -1000, 6368,
	-1000, 4548, 4548, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 154, 154,
	4548, 4548, 15888, 4548, 15888, -1000, -1000, 15888, -1000, -1000,
	-1000, 4548, 4548, -1000, 1318, 442, -1000, -1000, -1000, -1000,
	8837, -1000, 9890, 359, -1000, 1102, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 808, -1000, -1000, -1000, -1000, 15888, 4548,
	84, 108, 114, 15888, -1000, 1333, 355, 735, 242, 1022,
	-1000, 625, 1285, 835, 1140, 12722, 1080, -1000, -1000, -1000,
	15888, -1000, 8837, 8837, 605, -1000, 14126, -1000, -1000, 5276,
	374, 9890, 592, 395, 9890, 9890, 9890, 9890, 9890, 9890,
	9890, 9890, 9890, 9890, 9890, 9890, 9890, 9890, 9890, 626,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 806, -1000,
	1025, 998, 998, 335, 335, 335, 335, 335, 335, 335,
	10241, 1289, 835, 950, 429, 8486, 7421, 7421, 835, 8837,
	8837, 8123, 7772, 7421, 7421, 1289, 466, 429, 16590, -1000,
	-1000, 9539, -1000, -1000, -1000, -1000, -1000, 835, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 15537, 15537, 7421, 7421, 7421,
	7421, 101, 15888, -1000, 992, 1178, -1000, -1000, -1000, 1269,
	12371, 10943, 101, 981, 13775, 15888, -1000, -1000, 13775, 15888,
	4912, 16239, 958, -53, 983, -1000, -113, -89, 6719, 328,
	-1000, -1000, -1000, 6004, -1000, 3820, 283, 902, -1000, -39,
	-1000, -1000, -1000, 1043, -1000, 1043, 190, 21, 1043, 1043,
	1043, 1043, 1043, 10, 10, 10, 10, 15, -1000, -1000,
	-1000, -1000, -1000, 1071, 1070, -1000, 1043, 1043, 1043, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1056, 206, 1056,
	1051, 1051, 1051, 1051, 1078, -1000, 15888, 4548, 1257, 4548,
	82, -1000, -1000, 15888, 15888, 1018, -1000, 15888, 1016, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 796, 790, -1000,
	-1000, -1000, -1000, -1000, 447, -1000, -1000, 15888, 1266, 15888,
	15888, 429, 608, -1000, 663, 15888, -1000, 2042, -1000, 15888,
	15888, 15888, 15888, 15888, 216, -1000, 1187, 8837, 8837, 6004,
	8837, -1000, -1000, -1000, 1231, -1000, 1289, 1294, -1000, 1200,
	1183, 7421, -1000, -1000, 374, 386, -1000, -1000, 657, -1000,
	-1000, -1000, -1000, 241, 1032, -1000, 2463, -1000, -1000, -1000,
	-1000, 592, 9890, 9890, 9890, 608, 2463, 2416, 1614, 1088,
	335, 502, 502, 321, 321, 321, 321, 321, 588, 588,
	-1000, -1000, -1000, 835, -1000, -1000, -1000, 7421, -1000, 8837,
	-1000, 835, 933, -1000, 933, -1000, 562, 526, 446, 1317,
	933, 437, 1315, 933, 933, 933, 7421, 534, -1000, 8837,
	835, -1000, 2032, 999, 988, 933, 835, 984, 933, 933,
	973, 1032, -1000, 16239, 13775, 13775, 13775, 13775, 13775, -1000,
	1137, 1120, -1000, 1167, 1166, 1186, 15888, -1000, 918, 12371,
	-1000, 1032, -1000, 12008, 280, 185, 182, 177, -1000, -1000,
	1310, 13775, 961, -1000, 961, -1000, 236, -1000, -1000, 983,
	-53, -60, -1000, -1000, -1000, -1000, 429, -1000, 686, -1000,
	226, 982, 3456, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1062, 787, -1000, 1215, 301, 405, 687, 1210, -1000, -1000,
	-1000, 189, -45, -1000, -1000, 604, 10, 10, 1043, 1043,
	150, 1043, -1000, 10, -1000, -1000, -1000, 328, 1230, 328,
	328, 328, 328, 10, 662, 662, -1000, -1000, -1000, -1000,
	600, -1000, 1056, -1000, -1000, 566, -1000, -1000, -1000, 1097,
	15537, 1025, 1264, -1000, -1000, -1000, 1344, -1000, -1000, 164,
	-1000, 4548, 15888, 4548, 4548, 1310, 784, 767, 442, 472,
	-186, -1000, -1000, -1000, 9890, -1000, -1000, -1000, 590, 415,
	403, 144, 144, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 100, 1073, -1000, -1000, -1000, -1000,
	39, 75, 1179, 429, 429, -1000, -1000, 15888, -1000, -1000,
	-1000, -1000, 1023, -1000, -1000, -1000, 4184, 7421, -1000, 608,
	2463, 2180, -1000, 9890, -1000, 835, 429, -1000, 7421, -1000,
	-1000, 462, 626, 462, 9890, 9890, -1000, 9890, 9890, -1000,
	-152, -1000, 966, 465, -1000, 8837, 903, -1000, -1000, 9890,
	9890, -1000, -1000, -1000, -1000, 1095, 16239, 1032, -1000, 11657,
	15537, 1007, 1178, 1055, 1093, 1069, -1000, -1000, -1000, -1000,
	1118, -1000, 1098, -1000, -1000, -1000, -1000, 15537, 9890, 280,
	-1000, 1032, 1032, 1032, 1302, 8837, 961, -1000, -1000, 344,
	-1000, -1000, -119, -71, -1000, -1000, -1000, 5640, 3820, -1000,
	3820, 15537, 128, -1000, 687, 687, -1000, -1000, -1000, 1052,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 511, 9890, 1329,
	-1000, 1214, -1000, 1213, 655, -1000, -1000, 899, 328, 328,
	10, -1000, -1000, 1043, -1000, 328, -1000, 364, -1000, -1000,
	-1000, -1000, 328, 906, -1000, 890, 978, -1000, 887, 15888,
	-1000, -1000, -1000, 1089, -1000, -1000, -1000, 15888, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 472, -1000, 642, 8837, 9890,
	2463, -1000, 698, -1000, 687, 297, -1000, -1000, -1000, 764,
	1210, -1000, -1000, 760, -1000, 752, 15537, 1206, 732, 15888,
	15537, -1000, -1000, 712, 730, 15537, -157, 728, 15537, 15537,
	15537, -1000, -1000, 1310, 13775, -1000, -1000, 835, -1000, 9890,
	2463, -1000, -1000, 835, 1043, 1043, -1000, 1043, 1051, -1000,
	1043, 38, 1043, 32, 835, 835, 2398, 2324, 2281, 820,
	1032, -146, -1000, 429, 8837, 2112, 2094, -1000, 1249, 944,
	967, -1000, -1000, 7070, 835, 883, 223, 879, -1000, 1302,
	-1000, -1000, 8837, 1044, -1000, 8837, -1000, -1000, -1000, 879,
	2074, -1000, 15537, 15537, 15537, 1285, 429, -1000, -1000, -1000,
	-1000, 3456, -1000, 857, -1000, 1043, -1000, -1000, -1000, 15537,
	-1000, 2463, -92, -1000, -1000, -1000, -1000, -1000, -1000, 328,
	-1000, -1000, -1000, -1000, -1000, 10, 623, 10, 551, -1000,
	535, 1041, -1000, 1025, 15888, -1000, -1000, -1000, 429, 2463,
	712, 121, -1000, 1078, 301, 128, -1000, -1000, -1000, -1000,
	720, 290, -1000, 162, 121, 712, 1234, -1000, 5640, -1000,
	-1000, 1040, 1079, -1000, 1308, 975, -1000, 2463, -1000, -1000,
	140, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 9890,
	9890, 9890, 9890, 9890, 835, 612, 429, 9890, 9890, 1203,
	-1000, 1032, -1000, -1000, 1042, 15537, 15537, -1000, 15537, 1285,
	429, 15537, 429, 10592, -1000, 13424, 855, -1000, 855, 855,
	-1000, 285, 15537, 1259, 852, -1000, -1000, 328, -1000, 328,
	884, 880, 15537, -1000, 1281, 844, -1000, -1000, 708, 1036,
	687, -1000, -1000, 683, -1000, -1000, 15537, -1000, 121, 1032,
	968, -1000, 391, 15537, 15888, 1306, 1298, -1000, -1000, 2032,
	2032, 2032, 2032, 59, -1000, -1000, 2032, 2032, 1328, -1000,
	1032, -1000, 1025, 214, -1000, -1000, -1000, 850, -1000, 280,
	15537, -1000, -1000, -1000, 285, -1000, 679, 385, 564, -1000,
	-1000, 118, -1000, -1000, -1000, -1000, 843, -1000, 62, -1000,
	-1000, -1000, 15537, 1078, -1000, -1000, -1000, -1000, 95, 5640,
	3820, 834, -1000, -1000, 8837, 8837, -1000, -1000, -1000, -1000,
	835, 81, -160, -1000, -1000, 16239, 967, 835, 15537, -1000,
	-1000, -1000, -1000, -1000, 528, -1000, -1000, 15888, 285, 60,
	-1000, 795, 1034, -1000, 759, -1000, 15537, -1000, -1000, 1073,
	429, 959, -1000, 1158, -155, -163, 958, -1000, -1000, -1000,
	1033, -1000, 285, 54, 285, 15537, -1000, 95, 1171, -157,
	-1000, 1156, -1000, 15537, -1000, 610, 537, -1000, 727, -1000,
	83, -1000, -158, 725, 229, -1000, -1000, 285, 91, -161,
	1085, -1000, -1000, -1000, -1000, -1000, -1000, 299, -1000, 1032,
	-166, 1084, 1082, 1314, -1000, -253, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 8837, 8837, 9188, -1000, -1000,
	1326, -1000, 1323, 264, 264, 943, 750, 694, 2032, 835,
	-1000, -1000, -1000, 132, 632, -1000, -1000, -1000, 563, -1000,
	8837, 299, -1000, -1000, -1000, -1000, -1000, 481, 299, -1000,
	689, -256, -1000, -258, 299, 184, 501, -259, 153, 299,
	504, -1000, 8837, 473, 299, -1000, -260, 152, 299, -1000,
	546, -1000, 477, -1000, -261, 299, 147, 388, -273, -1000,
	142, 299, -1000,
}
var yyPgo = [...]int{

	0, 1574, 180, 682, 1573, 1572, 1571, 27, 16, 14,
	11, 1570, 1568, 1567, 1566, 1565, 1562, 8, 2, 1561,
	1559, 19, 1558, 4, 1557, 3, 1556, 1552, 1549, 1548,
	1546, 1545, 1544, 1543, 1542, 1539, 1528, 1527, 1524, 1521,
	1520, 1519, 1517, 1515, 121, 1510, 1508, 1504, 92, 1501,
	97, 1500, 1497, 1495, 65, 211, 75, 59, 87, 1494,
	1493, 73, 78, 88, 1492, 48, 1491, 1490, 105, 1489,
	1488, 1484, 71, 1481, 1477, 1835, 1476, 91, 1474, 40,
	35, 49, 1472, 1471, 1470, 1467, 93, 148, 1466, 1465,
	1464, 43, 1462, 1461, 142, 1458, 81, 21, 32, 31,
	44, 1457, 204, 122, 1456, 80, 1455, 1454, 1453, 1450,
	82, 1449, 34, 1448, 83, 22, 36, 41, 84, 1447,
	30, 89, 53, 46, 29, 85, 1444, 86, 68, 1443,
	1441, 567, 1440, 1439, 72, 1437, 1436, 62, 1435, 481,
	98, 54, 1434, 1423, 1422, 1421, 51, 74, 1419, 1418,
	52, 70, 100, 20, 1221, 140, 95, 1417, 25, 1413,
	1915, 104, 42, 64, 1411, 1410, 58, 1409, 1408, 1407,
	1402, 1401, 1399, 1397, 1396, 90, 1395, 1394, 1393, 57,
	115, 1392, 1391, 77, 61, 1390, 1389, 1388, 66, 56,
	1386, 76, 45, 1385, 1384, 1383, 1382, 39, 1381, 1380,
	1379, 1377, 1375, 50, 37, 1374, 38, 24, 26, 33,
	7, 47, 1372, 13, 1369, 23, 1368, 10, 1367, 18,
	79, 5, 6, 9, 1366, 1363, 1362, 0, 322, 107,
	1356, 1355, 133,
}
var yyR1 = [...]int{

	0, 225, 226, 226, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 6,
	3, 4, 4, 5, 5, 7, 7, 47, 47, 8,
	9, 9, 9, 9, 229, 229, 70, 70, 68, 68,
	69, 69, 121, 121, 10, 10, 10, 10, 125, 125,
	128, 128, 128, 129, 129, 129, 129, 164, 164, 115,
	12, 12, 12, 12, 12, 12, 12, 12, 149, 149,
	26, 26, 27, 27, 27, 113, 113, 113, 11, 11,
	11, 11, 11, 17, 19, 19, 22, 22, 23, 20,
	20, 20, 20, 24, 24, 25, 21, 21, 18, 18,
	18, 18, 18, 18, 18, 18, 219, 219, 218, 217,
	217, 216, 216, 215, 32, 199, 201, 201, 200, 200,
	200, 200, 189, 168, 168, 168, 168, 168, 168, 168,
	167, 167, 167, 167, 171, 171, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 170, 170, 170, 170, 170,
	170, 170, 170, 172, 172, 172, 172, 172, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 174, 174, 174, 174, 174, 174, 174,
	174, 188, 188, 175, 175, 183, 183, 184, 184, 184,
	181, 181, 182, 182, 185, 185, 177, 178, 186, 179,
	179, 179, 180, 180, 180, 187, 187, 187, 187, 176,
	190, 190, 210, 210, 209, 209, 208, 208, 208, 198,
	198, 205, 205, 205, 205, 205, 193, 193, 193, 192,
	192, 194, 194, 197, 197, 207, 207, 206, 191, 191,
	211, 211, 211, 211, 211, 195, 195, 196, 196, 196,
	222, 223, 221, 221, 221, 221, 221, 202, 202, 202,
	203, 203, 203, 204, 204, 204, 224, 224, 28, 28,
	28, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 112,
	112, 112, 30, 31, 31, 31, 31, 31, 31, 31,
	31, 147, 147, 220, 220, 220, 220, 220, 214, 212,
	212, 213, 213, 13, 33, 33, 14, 14, 14, 14,
	14, 15, 15, 34, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 35, 59, 135, 135, 133, 133, 136,
	136, 134, 134, 134, 137, 137, 137, 138, 138, 165,
	165, 165, 36, 36, 41, 41, 42, 43, 148, 148,
	39, 39, 40, 40, 40, 40, 53, 53, 230, 230,
	38, 38, 37, 37, 37, 37, 16, 231, 44, 45,
	45, 46, 46, 46, 50, 50, 50, 48, 48, 48,
	49, 49, 56, 56, 55, 55, 57, 57, 57, 57,
	157, 157, 157, 156, 156, 60, 60, 61, 61, 62,
	62, 63, 63, 63, 63, 78, 78, 79, 79, 79,
	79, 79, 89, 89, 120, 120, 122, 122, 64, 64,
	64, 64, 65, 65, 66, 66, 67, 67, 146, 146,
	162, 162, 71, 71, 71, 73, 72, 72, 72, 72,
	74, 74, 76, 76, 75, 75, 77, 80, 80, 80,
	80, 81, 81, 58, 58, 58, 58, 58, 58, 58,
	132, 132, 83, 83, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 95, 95, 95, 95, 95, 95,
	84, 84, 84, 84, 84, 84, 84, 54, 54, 96,
	96, 96, 102, 97, 97, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 92, 92, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 91, 91, 91, 91, 91, 91,
	91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
	232, 232, 94, 93, 93, 93, 93, 93, 93, 51,
	51, 51, 51, 51, 163, 163, 166, 166, 166, 166,
	166, 166, 166, 166, 166, 166, 166, 166, 166, 106,
	106, 52, 52, 104, 104, 105, 107, 107, 103, 103,
	103, 86, 86, 86, 86, 86, 86, 86, 86, 88,
	88, 88, 108, 108, 109, 109, 110, 110, 111, 111,
	114, 116, 116, 116, 117, 117, 117, 117, 118, 118,
	118, 85, 85, 85, 85, 85, 85, 119, 119, 119,
	119, 123, 123, 98, 98, 100, 100, 99, 101, 124,
	124, 127, 127, 127, 127, 126, 126, 126, 159, 159,
	159, 130, 130, 139, 139, 140, 140, 131, 131, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 145,
	145, 144, 144, 144, 141, 141, 141, 142, 142, 158,
	158, 154, 154, 155, 155, 160, 160, 161, 161, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 227, 228,
	150, 151, 151, 151,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 4, 6, 7, 5,
	10, 1, 3, 1, 3, 7, 8, 1, 1, 9,
	8, 7, 6, 6, 1, 1, 1, 3, 1, 3,
	1, 3, 0, 4, 3, 4, 5, 4, 1, 3,
	3, 2, 2, 2, 2, 2, 1, 1, 1, 0,
	2, 2, 11, 7, 9, 5, 5, 15, 0, 3,
	1, 1, 1, 1, 1, 0, 2, 2, 1, 1,
	1, 1, 1, 4, 5, 8, 1, 2, 5, 7,
	10, 8, 11, 1, 2, 5, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 0,
	2, 1, 3, 3, 4, 4, 2, 4, 1, 3,
	3, 3, 3, 0, 2, 2, 2, 2, 2, 2,
	3, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 3, 2, 2,
	2, 2, 2, 1, 2, 2, 2, 1, 4, 4,
	3, 3, 2, 4, 5, 2, 3, 4, 2, 2,
	3, 3, 3, 3, 3, 4, 1, 1, 1, 1,
	1, 6, 6, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 3, 0, 5, 0, 3, 5,
	0, 1, 0, 1, 1, 2, 2, 3, 1, 0,
	3, 3, 0, 2, 2, 2, 1, 2, 1, 2,
	5, 4, 0, 1, 1, 2, 2, 3, 2, 0,
	1, 2, 3, 3, 2, 2, 1, 1, 1, 1,
	1, 0, 1, 0, 1, 1, 3, 3, 3, 1,
	10, 11, 11, 12, 12, 1, 1, 0, 2, 2,
	3, 3, 1, 1, 2, 2, 2, 0, 1, 3,
	1, 2, 3, 1, 1, 1, 0, 2, 1, 1,
	1, 6, 10, 9, 7, 7, 7, 9, 7, 12,
	14, 7, 7, 9, 9, 10, 5, 6, 8, 0,
	1, 2, 4, 7, 5, 5, 5, 12, 7, 5,
	9, 0, 1, 1, 1, 1, 1, 1, 7, 1,
	3, 8, 8, 3, 3, 5, 4, 6, 4, 4,
	4, 3, 2, 3, 4, 4, 3, 6, 6, 4,
	4, 4, 4, 4, 3, 3, 2, 6, 2, 3,
	4, 3, 7, 6, 4, 2, 4, 3, 4, 3,
	3, 5, 2, 3, 3, 1, 1, 0, 1, 1,
	1, 0, 2, 2, 0, 2, 2, 0, 2, 0,
	1, 1, 2, 1, 1, 2, 1, 1, 1, 1,
	3, 3, 1, 1, 1, 1, 0, 3, 1, 1,
	2, 2, 2, 2, 3, 3, 2, 0, 2, 0,
	2, 1, 2, 2, 0, 1, 1, 0, 1, 1,
	0, 1, 0, 1, 1, 3, 1, 2, 3, 5,
	0, 1, 2, 1, 1, 0, 2, 1, 3, 1,
	1, 1, 3, 1, 3, 2, 6, 1, 4, 6,
	3, 2, 0, 3, 1, 3, 1, 3, 4, 4,
	4, 3, 2, 4, 0, 1, 0, 2, 0, 1,
	1, 1, 1, 2, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 1, 1, 3, 3, 0, 5, 5,
	5, 0, 2, 1, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	2, 2, 3, 1, 1, 1, 1, 5, 6, 4,
	4, 3, 6, 6, 6, 8, 8, 8, 8, 9,
	4, 7, 5, 4, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 8, 8,
	0, 2, 3, 4, 4, 4, 4, 4, 4, 0,
	3, 4, 7, 3, 1, 1, 2, 3, 3, 1,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 0, 3, 0, 2, 0, 3, 1, 3,
	2, 0, 1, 1, 0, 2, 4, 4, 0, 2,
	4, 2, 1, 3, 5, 4, 6, 1, 3, 3,
	5, 0, 5, 1, 3, 1, 2, 3, 1, 1,
	3, 3, 3, 3, 3, 1, 2, 1, 1, 1,
	1, 1, 1, 0, 2, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 1, 0, 1, 0,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -225, -1, -2, -6, -7, -8, -9, -10, -12,
	-28, -13, -14, -15, -34, -35, -36, -41, -42, -43,
	-39, -38, -37, -16, -3, -4, 6, 7, -47, 9,
	10, 29, -32, 118, -29, -30, -31, 121, 120, 157,
	122, 150, 52, 178, 179, 181, 182, -230, -148, 155,
	156, 30, 31, 124, -227, 8, 271, 119, 152, 151,
	25, 56, -226, 369, -110, 15, -46, 5, -44, -231,
	-44, -44, -44, -44, -44, -199, -201, 56, 93, -142,
	131, 74, 263, 127, -149, 128, -141, 177, 33, 138,
	137, 128, 128, 129, 131, 263, 127, 128, -75, -160,
	59, -153, 281, 141, 313, 314, 178, 189, 183, 217,
	205, 282, 315, 142, 203, 206, 250, 140, 316, 237,
	245, 68, 181, 259, 317, 153, 201, 194, 318, 290,
	192, 27, 319, 247, 222, 320, 286, 193, 246, 124,
	321, 144, 138, 322, 223, 227, 323, 251, 324, 325,
	326, 187, 188, 327, 253, 221, 139, 32, 283, 37,
	162, 254, 225, 328, 220, 215, 329, 330, 331, 332,
	219, 186, 214, 41, 229, 228, 230, 249, 208, 333,
	334, 335, 145, 336, 195, 18, 337, 338, 339, 340,
	341, 257, 156, 342, 160, 343, 344, 345, 346, 347,
	348, 248, 224, 226, 135, 164, 285, 349, 255, 191,
	350, 146, 161, 155, 258, 147, 351, 352, 353, 354,
	355, 356, 357, 182, 358, 359, 360, 361, 171, 252,
	261, 40, 234, 362, 185, 137, 363, 179, 168, 240,
	212, 163, 364, 365, 199, 200, 218, 184, 213, 180,
	165, 157, 366, 260, 235, 287, 207, 204, 169, 367,
	131, 166, 167, 368, 241, 242, 170, 284, 256, 202,
	236, 128, 111, 206, 250, 118, 238, 239, 247, -193,
	248, 164, -165, 128, -133, 237, 241, 242, 170, 59,
	129, 130, 32, 252, 251, 243, -160, 180, -53, 122,
	158, -75, -150, -150, -150, 240, 240, -150, -2, -131,
	131, 242, 133, -117, 17, 16, -5, -3, -227, 6,
	20, 21, -50, 42, 43, -45, -57, 102, -58, -160,
	-82, 76, -87, 28, 59, -153, 23, -86, -83, -103,
	-101, -102, 111, 112, 113, 100, 101, 108, 77, 114,
	-92, -90, -91, -93, 61, 60, 69, 62, 63, 64,
	65, 70, 71, 72, -154, -99, -227, 46, 47, 127,
	272, 273, 274, 275, 280, 148, 276, 79, 36, 262,
	270, 269, 268, 266, 267, 264, 265, 278, 279, 134,
	263, 106, 271, -131, -131, 11, -68, -69, -75, -77,
	-160, -124, -164, 180, -127, 252, 251, -103, -126, -154,
	-160, 250, 206, 249, -200, 93, -189, 59, -75, 129,
	-75, 271, -140, 134, -140, 165, -140, 85, -33, -75,
	-139, 134, -154, 59, -153, -139, -139, -139, -75, 115,
	-75, 59, 29, -151, -227, -155, -154, -152, 123, 149,
	288, 75, 22, 24, 232, 78, 111, 16, 79, 110,
	272, 118, 50, 289, 264, 265, 262, 274, 275, 263,
	238, 28, 10, 291, 25, 151, 21, 104, 120, 82,
	83, 84, 154, 23, 152, 72, 148, 294, 19, 53,
	11, 13, 295, 296, 14, 134, 133, 95, 129, 48,
	8, 114, 26, 92, 44, 297, 34, 298, 299, 300,
	301, 46, 93, 17, 266, 267, 30, 302, 280, 159,
	106, 51, 38, 76, 303, 304, 70, 305, 73, 54,
	74, 15, 49, 306, 307, 308, 309, 94, 121, 271,
	47, 310, 127, 6, 277, 29, 150, 45, 311, 128,
	81, 278, 279, 132, 71, 5, 33, 31, 9, 52,
	55, 268, 269, 270, 36, 80, 12, 312, 263, 127,
	59, 164, 128, 165, 131, -151, -151, -195, 11, 95,
	-151, 168, 169, -151, -136, -135, 245, 246, 240, 244,
	12, -59, 93, 169, 240, 167, -151, -40, -2, -9,
	-7, -8, -2, 85, -150, -150, -228, 58, 128, -75,
	118, 120, 123, 54, -118, 19, 30, -58, -160, -111,
	-114, -58, -110, -2, -44, 38, -48, 20, 21, 67,
	11, -157, 75, 74, 92, -156, 22, -154, 61, 115,
	-58, -84, 95, 76, 93, 94, 78, 97, 96, 107,
	100, 101, 102, 103, 104, 105, 106, 98, 99, 110,
	85, 86, 87, 88, 89, 90, 91, -132, -227, -102,
	-227, 116, 117, -87, -87, -87, -87, -87, -87, -87,
	-87, -227, -2, -97, -58, -227, -227, -227, -227, -227,
	-227, -227, -227, -227, -227, -227, -106, -58, -227, -232,
	-94, -227, -232, -94, -232, -94, -232, -227, -232, -94,
	-232, -94, -232, -232, -94, -227, -227, -227, -227, -227,
	-227, -76, 26, -75, -61, -62, -63, -64, -78, -102,
	-227, -75, -75, -68, -229, 57, 11, 55, -229, 57,
	115, 57, -124, 180, -125, -128, 253, 255, 85, -159,
	-154, 61, 28, 115, 29, 58, 57, -75, -167, -171,
	-173, -172, -174, -169, -170, 203, 206, 210, 208, 204,
	209, 111, 207, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 29, 153, 199, 200, 201, 202,
	223, 224, 225, 226, 227, 228, 229, 230, 183, 205,
	282, 184, 185, 186, 187, 188, 189, 191, 192, 193,
	194, 195, 196, 197, -154, 22, 131, 59, 76, 59,
	59, -75, 59, 57, 132, -68, 23, 54, -70, -75,
	59, 59, -161, -160, -152, -151, -151, -140, -140, -151,
	-151, -75, -151, -75, -75, -151, -151, 11, -134, 11,
	95, -58, -87, -138, 93, 54, 59, -75, -151, 166,
	166, 128, 128, 171, -75, 9, 95, 57, 18, 115,
	57, -116, 24, 25, -117, -228, -50, -88, -154, 62,
	65, -49, 45, -75, -58, -58, -95, 70, 76, 71,
	72, -156, 102, -161, -155, -152, -87, -96, -99, -102,
	66, 95, 93, 94, 78, -87, -87, -87, -87, -87,
	-87, -87, -87, -87, -87, -87, -87, -87, -87, -87,
	-163, 59, 61, 59, -86, -86, -154, -48, -228, 57,
	-228, -2, -55, -57, -55, -228, -58, -58, -103, 61,
	-55, -103, 61, -55, -55, -55, -48, -104, -105, 80,
	-103, -228, -87, -154, -154, -55, -56, -55, -55, -55,
	-121, 160, -75, 29, 57, -71, -73, -72, -74, 44,
	48, 50, 45, 46, 47, 51, -146, 22, -61, -227,
	-79, 160, -80, 22, -162, 52, 133, 53, -160, 61,
	-121, 55, -61, -75, -61, -77, -160, 102, -127, -125,
	57, 254, 256, 257, 54, 73, -58, -180, 110, -155,
	-161, -202, -203, -204, -155, 61, 62, -189, -190, -191,
	-205, 143, -211, 135, 137, 33, -192, 144, 129, 34,
	58, -168, -181, 235, -175, 56, -175, -175, 211, 203,
	206, 204, -175, -175, -175, -175, -175, -179, 206, -179,
	-179, -179, -179, 204, 56, 56, -175, -175, -175, -183,
	56, -183, 198, -183, -184, 56, -184, -184, -184, -158,
	55, -115, -75, -151, 23, -151, -26, 174, 149, -75,
	-75, -75, 57, 59, 59, -196, 11, 95, -75, -89,
	22, -160, -160, -54, 154, 61, -75, -143, 123, 120,
	121, 125, 126, -214, 119, 232, 206, 68, 28, 15,
	272, 160, 287, 59, 161, -75, -75, -75, -75, -75,
	123, 120, 40, -58, -58, -114, -118, -130, 19, 11,
	36, 36, -55, 70, 71, 72, 115, -227, -96, -87,
	-87, -87, -54, 75, -228, -56, -58, -228, 57, -228,
	-228, 57, 55, 22, 11, 11, -228, 11, 11, -228,
	-228, -228, -55, -107, -105, 82, -58, -228, -228, 57,
	57, -228, -228, -228, -228, -85, 29, 36, -2, -227,
	-227, -124, -62, -63, -63, -62, -63, 44, 44, 44,
	49, 44, 49, 44, -72, -160, -228, -227, 305, -162,
	-80, 129, 129, 129, -81, 12, -61, -81, -81, 115,
	-128, -129, 258, 255, 261, 59, 61, 115, 57, -204,
	85, 56, 59, 34, -192, -192, -197, 59, -197, 34,
	-185, -177, -178, -186, -187, -176, 70, 76, 28, 54,
	232, 135, 34, 33, 68, -182, 236, 62, -179, -179,
	-175, -175, -175, 211, -175, -179, -180, 29, -180, -180,
	-180, -180, -179, -188, 61, -188, 62, -183, 62, 54,
	-154, -2, 22, -27, 8, 9, 10, 132, -151, -75,
	-151, -151, -81, 59, 59, -134, -137, 93, 12, 305,
	-87, -150, -147, -220, -192, -224, -191, 136, 140, 143,
	144, 135, 160, -147, -220, 143, -192, 144, 136, -144,
	-192, 132, 22, -147, -147, 160, -219, 55, 166, 232,
	166, 41, -75, -60, 11, 102, -155, -56, -54, 75,
	-87, -228, -57, -166, 111, 203, 153, 201, 194, 221,
	208, 234, 199, 235, -163, -166, -87, -87, -87, -87,
	281, -110, 84, -58, 81, -87, -87, -123, 54, -124,
	-98, -100, -99, -227, -2, -119, -154, -122, -154, -81,
	-66, -65, 54, 55, -67, 54, -65, 44, 44, -122,
	-87, -80, -227, -227, -227, -110, -58, -81, 255, 259,
	260, -203, -204, -207, -206, -154, -211, -197, -197, 56,
	70, -87, 9, 34, 34, 61, 58, -180, -180, -179,
	-175, -180, 59, 111, -180, 58, 57, 58, 57, 58,
	57, -75, -115, -115, 54, -75, -137, 61, -58, -87,
	56, -189, -150, -197, -141, 59, 59, -150, 59, -154,
	34, 59, -75, -154, -189, 59, -154, -217, 284, -218,
	59, -154, -154, -154, -81, -61, -228, -87, -228, -175,
	-175, -175, -184, -175, 188, -175, 188, -228, -228, 19,
	19, 19, 19, -227, -52, 277, -58, 57, 57, 27,
	-123, 57, -228, -228, -228, 57, 115, -228, 57, -110,
	-58, 56, -58, -228, -80, -146, -120, -154, -120, -120,
	-117, 58, 57, -175, -120, -91, -180, -179, 61, -179,
	62, 62, 56, -2, -75, -189, -112, 148, 149, -158,
	-194, -192, 59, -145, 132, 22, 132, -112, -189, 26,
	-216, -215, -155, 56, 55, -108, 13, -179, 59, -87,
	-87, -87, -87, -87, -228, 61, -87, -87, 34, -100,
	36, -2, -227, -154, -154, -154, -117, -120, -79, -162,
	57, -228, -228, -228, -209, -208, 55, 139, 68, -206,
	-116, 58, -180, -180, 58, 58, -207, -115, 19, 58,
	-150, 59, 56, -197, 59, -154, -150, -112, -227, 57,
	85, -120, -75, -109, 14, 16, -228, -228, -228, -228,
	-51, 95, 284, -228, -228, 9, -98, -2, 115, 58,
	-80, -154, -208, 59, -198, 85, 61, 146, 58, 172,
	-150, -207, -158, -150, -212, -213, 160, -215, -204, 58,
	-58, -97, -228, 282, 51, 285, -124, -228, -154, 62,
	-75, -210, -209, 173, 58, 56, -228, 57, -154, -219,
	41, 283, 286, 56, -113, 175, 176, -210, -207, -213,
	36, -217, 41, -120, -115, 59, 59, 58, 162, 284,
	58, -11, -17, -10, -7, -8, -9, 178, -210, 163,
	285, -222, -223, 54, -115, -21, -18, -2, -7, -8,
	-9, -10, -19, -20, -17, 79, 134, -227, 286, -223,
	54, -222, 54, 10, 9, 369, -58, -58, -87, 159,
	-221, 147, 142, 145, 29, -221, 84, -18, -22, -23,
	80, 81, -228, -228, 141, 28, 70, 84, 82, -23,
	-58, -21, 79, -21, 81, 369, 369, -21, 84, 82,
	-24, -25, 83, 84, 369, 134, -21, 84, 82, -25,
	-58, 79, 369, 134, -21, 81, 84, 369, -21, 134,
	84, 369, 134,
}
var yyDef = [...]int{

	25, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 666, 0, 417, 417, 417, 417,
	417, 417, 0, -2, 288, 289, 290, 0, 0, 0,
	0, -2, 393, 394, 0, 396, 397, 406, -2, 1040,
	1040, 0, 0, 1040, 0, 37, 38, 717, 409, 398,
	399, 1038, 1, 3, 674, 0, 0, 421, 424, 419,
	0, 717, 717, 0, 0, 70, 71, 0, 0, 0,
	0, 0, 715, 715, 0, 715, 738, 0, 734, 735,
	736, 0, 713, 0, 713, 713, 713, 0, 342, 494,
	745, 746, 869, 870, 871, 872, 873, 874, 875, 876,
	877, 878, 879, 880, 881, 882, 883, 884, 885, 886,
	887, 888, 889, 890, 891, 892, 893, 894, 895, 896,
	897, 898, 899, 900, 901, 902, 903, 904, 905, 906,
	907, 908, 909, 910, 911, 912, 913, 914, 915, 916,
	917, 918, 919, 920, 921, 922, 923, 924, 925, 926,
	927, 928, 929, 930, 931, 932, 933, 934, 935, 936,
	937, 938, 939, 940, 941, 942, 943, 944, 945, 946,
	947, 948, 949, 950, 951, 952, 953, 954, 955, 956,
	957, 958, 959, 960, 961, 962, 963, 964, 965, 966,
	967, 968, 969, 970, 971, 972, 973, 974, 975, 976,
	977, 978, 979, 980, 981, 982, 983, 984, 985, 986,
	987, 988, 989, 990, 991, 992, 993, 994, 995, 996,
	997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006,
	1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016,
	1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026,
	1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036,
	1037, 0, 0, 0, 1041, 0, 1041, 1041, 356, 0,
	358, 1041, 0, 1041, 0, 365, 0, 0, 372, 1041,
	246, 247, 248, 390, 391, 378, 392, 395, 0, 0,
	0, 410, 411, 412, 413, 1040, 1040, 416, 31, 0,
	0, 0, 718, 678, 0, 0, 666, 33, 0, 417,
	422, 423, 427, 425, 426, 418, 0, 436, 440, 0,
	503, 0, 508, 510, -2, -2, 0, 545, 546, 547,
	548, 549, 0, 0, 0, 0, 0, 0, 0, 0,
	573, 574, 575, 576, 651, 652, 653, 654, 655, 656,
	657, 658, 512, 513, 648, 698, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 639, 0, 610,
	610, 610, 610, 610, 610, 610, 610, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 48, 50,
	494, 54, 0, 1016, 699, -2, -2, 0, 0, 648,
	0, -2, 882, -2, 0, 0, 128, 0, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 333, 0,
	0, 0, 0, 741, 742, 0, 0, 0, 341, 0,
	343, 1041, 1041, 346, 1042, 1043, 743, 744, 749, 750,
	751, 752, 753, 754, 755, 756, 757, 758, 759, 760,
	761, 762, 763, 764, 765, 766, 767, 768, 769, 770,
	771, 772, 773, 774, 775, 776, 777, 778, 779, 780,
	781, 782, 783, 784, 785, 786, 787, 788, 789, 790,
	791, 792, 793, 794, 795, 796, 797, 798, 799, 800,
	801, 802, 803, 804, 805, 806, 807, 808, 809, 810,
	811, 812, 813, 814, 815, 816, 817, 818, 819, 820,
	821, 822, 823, 824, 825, 826, 827, 828, 829, 830,
	831, 832, 833, 834, 835, 836, 837, 838, 839, 840,
	841, 842, 843, 844, 845, 846, 847, 848, 849, 850,
	851, 852, 853, 854, 855, 856, 857, 858, 859, 860,
	861, 862, 863, 864, 865, 866, 867, 868, 715, 715,
	1041, 1041, 0, 1041, 0, 354, 355, 0, 265, 266,
	359, 1041, 1041, 361, 0, 381, 379, 380, 375, 376,
	0, 367, 0, 387, 369, 370, 373, 400, -2, 403,
	404, 405, -2, 0, 414, 415, 32, 1039, 0, 1041,
	0, 0, 0, 0, 26, 0, 0, 675, 0, 667,
	668, 671, 674, 31, 424, 0, 430, 428, 429, 420,
	0, 437, 0, 0, 0, 441, 0, 443, 444, 0,
	506, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	530, 531, 532, 533, 534, 535, 536, 509, 0, 523,
	0, 0, 0, 565, 566, 567, 568, 569, 570, 571,
	0, 427, 31, 0, 543, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 427, 0, 640, 0, 594,
	602, 0, 595, 603, 596, 604, 597, 0, 598, 605,
	599, 606, 600, 601, 607, 0, 0, 0, 432, 0,
	0, 52, 0, 493, 0, 447, 449, 450, 451, -2,
	0, 497, -2, 0, 0, 0, 44, 45, 0, 0,
	0, 0, 55, 1016, 57, 58, 0, 0, 0, 222,
	708, 709, 710, 0, 706, 277, 0, 0, 133, 210,
	141, 142, 143, 203, 145, 203, 203, 0, 203, 203,
	203, 203, 203, 219, 219, 219, 219, 219, 186, 187,
	188, 189, 190, 0, 0, 163, 203, 203, 203, 167,
	193, 194, 195, 196, 197, 198, 199, 200, 146, 147,
	148, 149, 150, 151, 152, 153, 154, 205, 205, 205,
	207, 207, 207, 207, 739, 69, 0, 1041, 0, 1041,
	0, 124, 79, 0, 0, 336, 714, 0, 338, 46,
	339, 340, 495, 747, 748, 344, 345, 0, 0, 349,
	350, 351, 352, 353, 267, 360, 364, 0, 462, 0,
	0, 366, 537, 368, 0, 0, 407, 0, 312, 0,
	0, 0, 0, 0, 0, 679, 0, 0, 0, 0,
	0, 670, 672, 673, 678, 34, 427, 0, 659, 0,
	0, 0, 431, 29, 504, 505, 507, 524, 0, 526,
	528, 442, 438, 0, 649, -2, 514, 515, 539, 540,
	541, 0, 0, 0, 0, 537, 519, 0, 550, 551,
	552, 553, 554, 555, 556, 557, 558, 559, 560, 561,
	564, 624, 625, 0, 562, 563, 572, 432, 542, 0,
	697, 31, 0, 434, 0, 581, 0, 0, 547, 651,
	0, 547, 651, 0, 0, 0, 0, 646, 643, 0,
	0, 611, 0, 0, 0, 0, 0, 433, 0, 0,
	0, 0, 492, 0, 0, 0, 0, 0, 0, 482,
	0, 0, 485, 0, 0, 0, 0, 479, 0, 0,
	455, 961, 457, 0, 497, 0, 0, 0, 480, 481,
	501, 0, 501, 49, 501, 51, 0, 496, 700, 56,
	0, 0, 61, 62, 701, 702, 703, 704, 0, 649,
	0, 125, 278, 280, 283, 284, 285, 129, 130, 131,
	0, 0, 259, 0, 0, 253, 253, 0, 249, 250,
	127, 132, 212, 211, 144, 0, 219, 219, 203, 203,
	203, 203, 172, 219, 175, 178, 179, 222, 0, 222,
	222, 222, 222, 219, 0, 0, 164, 165, 166, 155,
	0, 156, 205, 158, 159, 0, 160, 161, 162, 0,
	0, 0, 0, 75, 716, 76, 0, 80, 81, 0,
	334, 1041, 0, 1041, 1041, 501, 0, 0, 381, 384,
	0, 382, 383, 374, 0, 388, 371, 1040, -2, 321,
	731, 321, 321, 306, 719, 720, 721, 722, 723, 724,
	725, 726, 727, 728, 0, 116, 314, 316, 315, 319,
	0, 0, 0, 676, 677, 669, 27, 0, 711, 712,
	660, 661, 445, 525, 527, 529, 0, 432, 516, 537,
	520, 0, 517, 0, 511, 0, 544, -2, 0, 579,
	580, 0, 0, 0, 0, 0, 617, 0, 0, 618,
	0, 590, 666, 0, 644, 0, 0, 593, 612, 0,
	0, 613, 614, 615, 616, 691, 0, 0, -2, 0,
	0, 501, 448, 474, 476, 0, 471, 483, 484, 486,
	0, 488, 0, 490, 491, 452, 454, 0, 0, 497,
	461, 0, 0, 0, 666, 0, 501, 42, 43, 0,
	59, 60, 0, 0, 66, 223, 224, 0, 0, 281,
	0, 0, 0, 241, 253, 253, 244, 254, 245, 0,
	134, 135, 136, 137, 138, 139, 214, 0, 0, 0,
	218, 0, 226, 228, 0, 140, 213, 0, 222, 222,
	219, 170, 171, 203, 176, 222, 180, 0, 181, 182,
	183, 184, 222, 0, 201, 0, 0, 157, 0, 0,
	740, -2, 69, 0, 82, 83, 84, 0, 337, 47,
	347, 348, 357, 268, 269, 384, 363, 0, 0, 0,
	538, 291, 0, 1040, 253, 0, 307, 322, 323, 324,
	325, 326, 327, 0, 1040, 324, 0, 325, 0, 0,
	0, 732, 733, 0, 0, 0, 119, 0, 0, 0,
	0, 680, 28, 501, 0, 439, 650, 0, 518, 0,
	521, 577, 435, 0, 203, 203, 629, 203, 207, 632,
	203, 634, 203, 637, 0, 0, 0, 0, 0, 0,
	0, 641, 592, 647, 0, 0, 0, 35, 0, 691,
	681, 693, 695, 0, 31, 0, 687, 0, 466, 666,
	468, 475, 0, 0, 469, 0, 470, 487, 489, 0,
	-2, 460, 0, 0, 0, 674, 502, 41, 63, 64,
	65, 279, 282, 0, 255, 203, 258, 242, 243, 0,
	215, 216, 0, 225, 227, 229, 204, 168, 169, 222,
	177, 173, 220, 221, 185, 219, 0, 219, 0, 208,
	0, 0, 73, 0, 0, 335, 362, 385, 386, 463,
	0, 309, 294, 739, 251, 287, 295, 296, 301, 302,
	0, 0, 298, 0, 309, 0, 0, 313, 0, 117,
	118, 0, 0, 318, 662, 446, 578, 522, 582, 626,
	219, 630, 631, 633, 635, 636, 638, 584, 583, 0,
	0, 0, 0, 0, 0, 0, 645, 0, 0, 0,
	36, 0, 696, -2, 0, 0, 0, 53, 0, 674,
	472, 0, 477, 497, 458, 0, 0, 464, 0, 0,
	40, 231, 0, 671, 0, 217, 174, 222, 202, 222,
	0, 0, 0, -2, 0, 0, 1040, 310, 0, 0,
	253, 252, 308, 0, 729, 730, 0, 1040, 309, 0,
	120, 121, 0, 0, 0, 664, 0, 627, 628, 0,
	0, 0, 0, 619, 591, 642, 0, 0, 0, 694,
	0, -2, 0, 689, 688, 467, 39, 0, 456, 497,
	0, 498, 499, 500, 230, 234, 0, 239, 0, 256,
	257, 0, 191, 192, 206, 209, 0, 74, 0, 1040,
	293, 311, 0, 739, 297, 303, 304, 1040, 0, 0,
	0, 0, 320, 30, 0, 0, 585, 587, 586, 588,
	0, 0, 0, 608, 609, 0, 684, 31, 0, 473,
	459, 465, 235, 236, 0, 240, 238, 0, 232, 0,
	292, 0, 0, 305, 0, 329, 0, 122, 123, 116,
	665, 663, 589, 0, 0, 0, 692, -2, 690, 237,
	0, 72, 233, 85, 232, 0, 328, 0, 0, 119,
	620, 0, 623, 0, 69, 0, 0, 299, 0, 330,
	0, 317, 621, 0, 0, 86, 87, 232, 0, 0,
	260, 69, 88, 89, 90, 91, 92, 0, 300, 0,
	0, 261, 262, 0, 77, 0, 106, -2, 109, 110,
	111, 112, 113, 114, 115, 0, 0, 0, 622, 263,
	0, 264, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 272, 273, 0, 0, 271, 93, 107, 0, 96,
	0, 0, 331, 332, 274, 275, 276, 0, 0, 97,
	0, 0, 94, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 0, 0, 98, 99, 0, 0, 0, 104,
	0, 95, 0, 101, 0, 0, 0, 0, 0, 100,
	0, 105, 102,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 77, 3, 3, 3, 105, 97, 3,
	56, 58, 102, 100, 57, 101, 115, 103, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 369,
	86, 85, 87, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 107, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 96, 3, 108,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 78, 79, 80, 81, 82, 83, 84, 88,
	89, 90, 91, 92, 93, 94, 95, 98, 99, 104,
	106, 109, 110, 111, 112, 113, 114, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:351
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:356
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:357
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:361
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:385
		{
			setParseTree(yylex, nil)
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:391
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 27:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:399
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 28:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:403
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 29:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:409
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 30:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:416
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:422
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:426
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:432
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:436
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 35:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:443
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].setExprs)
			yyVAL.statement = ins
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:455
		{
			cols := make(Columns, 0, len(yyDollar[7].setExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].setExprs))
			for _, updateList := range yyDollar[7].setExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].setExprs)}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:467
		{
			yyVAL.str = InsertStr
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:471
		{
			yyVAL.str = ReplaceStr
		}
	case 39:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:477
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].setExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:483
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:487
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:491
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:495
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:500
		{
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:501
		{
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:505
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName.ToViewName()}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:509
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName.ToViewName())
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:515
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:519
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:525
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:529
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:534
		{
			yyVAL.partitions = nil
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:538
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:544
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:548
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:552
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:556
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:562
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:566
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:572
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:576
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:580
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:586
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:590
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:594
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:598
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:604
		{
			yyVAL.str = SessionStr
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:608
		{
			yyVAL.str = GlobalStr
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:613
		{
			yyVAL.int = yyPosition(yylex)
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:619
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			if len(yyDollar[1].ddl.TableSpec.Constraints) > 0 {
				yyDollar[1].ddl.ConstraintAction = AddStr
			}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:627
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 72:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:633
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: yyDollar[4].colIdent, Using: yyDollar[5].colIdent, Type: yyDollar[2].str, Columns: yyDollar[9].indexColumns, Options: yyDollar[11].indexOptions}}
		}
	case 73:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:637
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[3].tableName.ToViewName(), ViewExpr: yyDollar[6].selStmt, SubStatementPositionStart: yyDollar[5].int, SubStatementPositionEnd: yyDollar[7].int - 1}
		}
	case 74:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:641
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[5].tableName.ToViewName(), ViewExpr: yyDollar[8].selStmt, SubStatementPositionStart: yyDollar[7].int, SubStatementPositionEnd: yyDollar[9].int - 1, OrReplace: true}
		}
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:645
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:649
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 77:
		yyDollar = yyS[yypt-15 : yypt+1]
//line sql.y:653
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[8].tableName, TriggerSpec: &TriggerSpec{Name: string(yyDollar[4].bytes), Time: yyDollar[5].str, Event: yyDollar[6].str, Order: yyDollar[12].triggerOrder, Body: yyDollar[14].statement}}
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:658
		{
			yyVAL.empty = struct{}{}
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:662
		{
			yyVAL.empty = struct{}{}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:668
		{
			yyVAL.str = BeforeStr
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:672
		{
			yyVAL.str = AfterStr
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:678
		{
			yyVAL.str = InsertStr
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:682
		{
			yyVAL.str = UpdateStr
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:686
		{
			yyVAL.str = DeleteStr
		}
	case 85:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:691
		{
			yyVAL.triggerOrder = nil
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:695
		{
			yyVAL.triggerOrder = &TriggerOrder{PrecedesOrFollows: FollowsStr, OtherTriggerName: string(yyDollar[2].bytes)}
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:699
		{
			yyVAL.triggerOrder = &TriggerOrder{PrecedesOrFollows: PrecedesStr, OtherTriggerName: string(yyDollar[2].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:705
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:715
		{
			yyVAL.statement = &BeginEndBlock{Statements: yyDollar[2].statements}
		}
	case 94:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:721
		{
			yyVAL.statement = &CaseStatement{Expr: yyDollar[2].expr, Cases: yyDollar[3].caseStatementCases}
		}
	case 95:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:725
		{
			yyVAL.statement = &CaseStatement{Expr: yyDollar[2].expr, Cases: yyDollar[3].caseStatementCases, Else: yyDollar[5].statements}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:731
		{
			yyVAL.caseStatementCases = []CaseStatementCase{yyDollar[1].caseStatementCase}
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:735
		{
			yyVAL.caseStatementCases = append(yyVAL.caseStatementCases, yyDollar[2].caseStatementCase)
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:741
		{
			yyVAL.caseStatementCase = CaseStatementCase{Case: yyDollar[2].expr, Statements: yyDollar[4].statements}
		}
	case 99:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:747
		{
			conds := []IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}
			yyVAL.statement = &IfStatement{Conditions: conds}
		}
	case 100:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:752
		{
			conds := []IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}
			yyVAL.statement = &IfStatement{Conditions: conds, Else: yyDollar[7].statements}
		}
	case 101:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:757
		{
			conds := yyDollar[6].ifStatementConditions
			conds = append([]IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}, conds...)
			yyVAL.statement = &IfStatement{Conditions: conds}
		}
	case 102:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:763
		{
			conds := yyDollar[6].ifStatementConditions
			conds = append([]IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}, conds...)
			yyVAL.statement = &IfStatement{Conditions: conds, Else: yyDollar[8].statements}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:771
		{
			yyVAL.ifStatementConditions = []IfStatementCondition{yyDollar[1].ifStatementCondition}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:775
		{
			yyVAL.ifStatementConditions = append(yyVAL.ifStatementConditions, yyDollar[2].ifStatementCondition)
		}
	case 105:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:781
		{
			yyVAL.ifStatementCondition = IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:787
		{
			yyVAL.statements = Statements{yyDollar[1].statement}
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:791
		{
			yyVAL.statements = append(yyVAL.statements, yyDollar[3].statement)
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:797
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:809
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:813
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:819
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:824
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:829
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:835
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:840
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:846
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:852
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName, IfNotExists: ne}
			setDDL(yylex, yyVAL.ddl)
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:863
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:870
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:874
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:880
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:885
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:889
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:893
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:899
		{
			if err := yyDollar[2].columnType.merge(yyDollar[3].columnType); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:908
		{
			yyVAL.columnType = ColumnType{}
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:912
		{
			opt := ColumnType{NotNull: yyDollar[2].boolVal, sawnull: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:921
		{
			opt := ColumnType{Default: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:930
		{
			opt := ColumnType{OnUpdate: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:939
		{
			opt := ColumnType{Autoincrement: yyDollar[2].boolVal, sawai: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:948
		{
			opt := ColumnType{KeyOpt: yyDollar[2].colKeyOpt}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:957
		{
			opt := ColumnType{Comment: yyDollar[2].sqlVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:968
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:979
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:984
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:990
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:994
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:998
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1002
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1006
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1010
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1014
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1018
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1022
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1028
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1034
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1040
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1046
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1052
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1058
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1064
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1070
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1078
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1082
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1086
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1090
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1094
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 168:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1100
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1104
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1108
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1112
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1116
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 173:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1120
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 174:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1124
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1128
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1132
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 177:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1136
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Length: yyDollar[4].sqlVal}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1140
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1144
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1148
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1152
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1156
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1160
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1164
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 185:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1168
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1172
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1176
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1180
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1184
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1188
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 191:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1192
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 192:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1197
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1203
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1207
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1211
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1215
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1219
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1223
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1227
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1231
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1237
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[1].bytes))
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1242
		{
			yyVAL.strs = append(yyDollar[1].strs, string(yyDollar[3].bytes))
		}
	case 203:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1247
		{
			yyVAL.sqlVal = nil
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1251
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 205:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1256
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 206:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1260
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 207:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1268
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1272
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 209:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1278
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 210:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1286
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1290
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 212:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1295
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1299
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1306
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1310
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1316
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1322
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1328
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 219:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1333
		{
			yyVAL.str = ""
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1337
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1341
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 222:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1346
		{
			yyVAL.str = ""
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1350
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1354
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1360
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1364
		{
			yyVAL.colKeyOpt = colKey
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1368
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1372
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1378
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 230:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1384
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1388
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 232:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1393
		{
			yyVAL.indexOptions = nil
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1397
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1403
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1407
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1413
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1417
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1422
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1428
		{
			yyVAL.str = ""
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1432
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1438
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1442
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1446
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1450
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1454
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1460
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1464
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1468
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1474
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1478
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 251:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1483
		{
			yyVAL.str = ""
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1487
		{
			yyVAL.str = yyDollar[1].str
		}
	case 253:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1492
		{
			yyVAL.str = ""
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1496
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1502
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1506
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1512
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal, Order: yyDollar[3].str}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1518
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1522
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 260:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1529
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 261:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1533
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 262:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1537
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 263:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1541
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 264:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1545
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[12].ReferenceAction, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1551
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1555
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 267:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1560
		{
			yyVAL.str = ""
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1564
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1568
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1574
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1580
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1586
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1590
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1594
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1598
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1602
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 277:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1607
		{
			yyVAL.str = ""
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1611
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1615
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1623
		{
			yyVAL.str = yyDollar[1].str
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1627
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1631
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1637
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1641
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1645
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 286:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1650
		{
			yyVAL.str = ""
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1654
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 291:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1665
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 292:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1669
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			ddl.Column = yyDollar[8].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 293:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1676
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 294:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1683
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 295:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1687
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: DropStr, Column: NewColIdent(string(yyDollar[7].bytes)), Table: yyDollar[4].tableName}
		}
	case 296:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1691
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 297:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1695
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: RenameStr, Table: yyDollar[4].tableName, Column: NewColIdent(string(yyDollar[7].bytes)), ToColumn: NewColIdent(string(yyDollar[9].bytes))}
		}
	case 298:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1699
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 299:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1704
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[7].str), Using: yyDollar[8].colIdent, Columns: yyDollar[10].indexColumns, Options: yyDollar[12].indexOptions}}
		}
	case 300:
		yyDollar = yyS[yypt-14 : yypt+1]
//line sql.y:1708
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[9].str), Type: yyDollar[7].str, Using: yyDollar[10].colIdent, Columns: yyDollar[12].indexColumns, Options: yyDollar[14].indexOptions}}
		}
	case 301:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1712
		{
			yyVAL.statement = &DDL{Action: AlterStr, ConstraintAction: DropStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[7].bytes)}}}}
		}
	case 302:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1717
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[7].colIdent}}
		}
	case 303:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1721
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: RenameStr, FromName: yyDollar[7].colIdent, ToName: yyDollar[9].colIdent}}
		}
	case 304:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1725
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ModifyStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 305:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1732
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ChangeStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, Column: NewColIdent(string(yyDollar[7].bytes)), ColumnOrder: yyDollar[9].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			yyVAL.statement = ddl
		}
	case 306:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1738
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 307:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1742
		{
			ddl := &DDL{Action: AlterStr, ConstraintAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddConstraint(yyDollar[6].constraintDefinition)
			yyVAL.statement = ddl
		}
	case 308:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1748
		{
			yyVAL.statement = &DDL{Action: AlterStr, ConstraintAction: DropStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[8].bytes), Details: &ForeignKeyDefinition{}}}}}
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1754
		{
			yyVAL.columnOrder = nil
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1758
		{
			yyVAL.columnOrder = &ColumnOrder{First: true}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1762
		{
			yyVAL.columnOrder = &ColumnOrder{AfterColumn: NewColIdent(string(yyDollar[2].bytes))}
		}
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1768
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 313:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1774
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 314:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1786
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 315:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1796
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 316:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1800
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 317:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1804
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 318:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1817
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 319:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1827
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 320:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1831
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1844
		{
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1846
		{
		}
	case 328:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1857
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1863
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1867
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 331:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1873
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 332:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1877
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1883
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1889
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 335:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1893
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 336:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1901
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 337:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1909
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[3].colIdent}}
		}
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1913
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromViews: yyDollar[4].tableNames, IfExists: exists}
		}
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1921
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 340:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1925
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1931
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1935
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1940
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 344:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1946
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 345:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1951
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1955
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 347:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1959
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 348:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1963
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 349:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1968
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 350:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1972
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 351:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1976
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 352:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1980
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 353:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1984
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1988
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1992
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1996
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 357:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2000
		{
			yyVAL.statement = &Show{Type: IndexStr, Table: yyDollar[4].tableName, Database: yyDollar[5].str, ShowIndexFilterOpt: yyDollar[6].expr}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2004
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2008
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 360:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2012
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2016
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 362:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2020
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 363:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2025
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[6].showFilter, AsOf: yyDollar[5].expr}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 364:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2035
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2039
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 366:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2043
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2049
		{
			// Cannot dereference $3 directly, or else the parser stackcannot be pooled. See yyParsePooled
			cmp := yyDollar[3].expr.(*ComparisonExpr)
			cmp.Left = &ColName{Name: NewColIdent("collation")}
			var ex Expr = cmp
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &ex}
		}
	case 368:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2057
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2062
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2066
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 371:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2070
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2074
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2088
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2094
		{
			yyVAL.expr = &ComparisonExpr{Operator: LikeStr, Right: yyDollar[2].expr, Escape: yyDollar[3].expr}
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2100
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2104
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 377:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2110
		{
			yyVAL.str = ""
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2114
		{
			yyVAL.str = "full "
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2120
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2124
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2130
		{
			yyVAL.str = ""
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2134
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2138
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 384:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2144
		{
			yyVAL.showFilter = nil
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2148
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2152
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 387:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2158
		{
			yyVAL.showFilter = nil
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2162
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2168
		{
			yyVAL.str = ""
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2172
		{
			yyVAL.str = SessionStr
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2176
		{
			yyVAL.str = GlobalStr
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2182
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2186
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2192
		{
			yyVAL.statement = &Begin{}
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2196
		{
			yyVAL.statement = &Begin{}
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2202
		{
			yyVAL.statement = &Commit{}
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2208
		{
			yyVAL.statement = &Rollback{}
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2213
		{
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2214
		{
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2218
		{
			yyVAL.statement = &Explain{ExplainFormat: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2222
		{
			yyVAL.statement = &Explain{Analyze: true, ExplainFormat: TreeStr, Statement: yyDollar[3].selStmt}
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2228
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 406:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2236
		{
			yyVAL.str = ""
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2240
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2251
		{
			yyVAL.statement = &Show{Type: "columns", OnTable: yyDollar[2].tableName}
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2255
		{
			yyVAL.statement = &OtherRead{}
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2261
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2265
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2269
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2273
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2279
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 417:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2283
		{
			setAllowComments(yylex, true)
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2287
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 419:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2293
		{
			yyVAL.bytes2 = nil
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2297
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2303
		{
			yyVAL.str = UnionStr
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2307
		{
			yyVAL.str = UnionAllStr
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2311
		{
			yyVAL.str = UnionDistinctStr
		}
	case 424:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2316
		{
			yyVAL.str = ""
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2320
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2324
		{
			yyVAL.str = SQLCacheStr
		}
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2329
		{
			yyVAL.str = ""
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2333
		{
			yyVAL.str = ""
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2337
		{
			yyVAL.str = DistinctStr
		}
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2342
		{
			yyVAL.str = ""
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2346
		{
			yyVAL.str = StraightJoinHint
		}
	case 432:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2351
		{
			yyVAL.selectExprs = nil
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2355
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2361
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2365
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2371
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2375
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2379
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 439:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2383
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 440:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2388
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2392
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2396
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2403
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 445:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2408
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2412
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2418
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2422
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2432
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2436
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2440
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2446
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2452
		{
			yyVAL.aliasedTableName = yyDollar[2].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
		}
	case 456:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2457
		{
			yyVAL.aliasedTableName = yyDollar[6].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
			yyVAL.aliasedTableName.Partitions = yyDollar[4].partitions
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2468
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Hints: yyDollar[1].indexHints}
		}
	case 458:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2472
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, Hints: yyDollar[4].indexHints}
		}
	case 459:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2476
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, As: yyDollar[5].tableIdent, Hints: yyDollar[6].indexHints}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2480
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2484
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[1].tableIdent, Hints: yyDollar[2].indexHints}
		}
	case 462:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2495
		{
			yyVAL.expr = nil
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2499
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2505
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2509
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2515
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2519
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 468:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2532
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2536
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2540
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2544
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2550
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 473:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2552
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 474:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2556
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2558
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 476:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2562
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2564
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 478:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2567
		{
			yyVAL.empty = struct{}{}
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2569
		{
			yyVAL.empty = struct{}{}
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2574
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2580
		{
			yyVAL.str = JoinStr
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2584
		{
			yyVAL.str = JoinStr
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2588
		{
			yyVAL.str = JoinStr
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2594
		{
			yyVAL.str = StraightJoinStr
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2600
		{
			yyVAL.str = LeftJoinStr
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2604
		{
			yyVAL.str = LeftJoinStr
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2608
		{
			yyVAL.str = RightJoinStr
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2612
		{
			yyVAL.str = RightJoinStr
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2618
		{
			yyVAL.str = NaturalJoinStr
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2622
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2632
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2636
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2642
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2646
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2652
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 497:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2657
		{
			yyVAL.indexHints = nil
		}
	case 498:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2661
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 499:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2665
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 500:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2669
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 501:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2674
		{
			yyVAL.expr = nil
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2678
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2684
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2688
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2692
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2696
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2700
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2704
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2708
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 510:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2714
		{
			yyVAL.str = ""
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2718
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2724
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2728
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2734
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2738
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 516:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2742
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 517:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2746
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 518:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2750
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2754
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 520:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2758
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 521:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2762
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 522:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2766
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2770
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2776
		{
			yyVAL.str = IsNullStr
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2780
		{
			yyVAL.str = IsNotNullStr
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2784
		{
			yyVAL.str = IsTrueStr
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2788
		{
			yyVAL.str = IsNotTrueStr
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2792
		{
			yyVAL.str = IsFalseStr
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2796
		{
			yyVAL.str = IsNotFalseStr
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2802
		{
			yyVAL.str = EqualStr
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2806
		{
			yyVAL.str = LessThanStr
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2810
		{
			yyVAL.str = GreaterThanStr
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2814
		{
			yyVAL.str = LessEqualStr
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2818
		{
			yyVAL.str = GreaterEqualStr
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2822
		{
			yyVAL.str = NotEqualStr
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2826
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 537:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2831
		{
			yyVAL.expr = nil
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2835
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2841
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2845
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2849
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2855
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2861
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2865
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2871
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2875
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2879
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2883
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2887
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2891
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2895
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2899
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2903
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2907
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2911
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2915
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2919
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2923
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2927
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2931
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2935
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2939
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2943
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2947
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2951
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2955
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2959
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2963
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2971
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2985
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2989
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2993
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 577:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3011
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: yyDollar[3].str == DistinctStr, Exprs: yyDollar[4].selectExprs}
		}
	case 578:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3015
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 579:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3025
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 580:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3029
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3033
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema")}
		}
	case 582:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3037
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 583:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3041
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 584:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3045
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 585:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3049
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 586:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3053
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 587:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3057
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 588:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3061
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 589:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3065
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 590:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3069
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("first"), Exprs: yyDollar[3].selectExprs}
		}
	case 591:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3073
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 592:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3077
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 593:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3081
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3091
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3095
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3099
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3104
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3109
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3114
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3120
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3125
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3130
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3134
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3138
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3143
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3148
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3153
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 608:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3157
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 609:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3161
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3171
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 613:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3181
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 614:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3185
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 615:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3189
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 616:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3193
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 617:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3197
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 618:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3201
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 619:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3207
		{
			yyVAL.str = ""
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3211
		{
			yyVAL.str = BooleanModeStr
		}
	case 621:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3215
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 622:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3219
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3223
		{
			yyVAL.str = QueryExpansionStr
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3229
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3233
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3239
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3243
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3247
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3251
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3255
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3259
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3265
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3269
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3273
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3277
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3281
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3285
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3289
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 639:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3294
		{
			yyVAL.expr = nil
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3298
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 641:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3303
		{
			yyVAL.str = string("")
		}
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3307
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3313
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3317
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 645:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3323
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 646:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3328
		{
			yyVAL.expr = nil
		}
	case 647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3332
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3338
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 649:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3342
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 650:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3346
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3352
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3356
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3360
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3364
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3368
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3372
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3376
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3380
		{
			yyVAL.expr = &NullVal{}
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3386
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3395
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3399
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 662:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3404
		{
			yyVAL.exprs = nil
		}
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3408
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 664:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3413
		{
			yyVAL.expr = nil
		}
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3417
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 666:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3422
		{
			yyVAL.orderBy = nil
		}
	case 667:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3426
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3432
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 669:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3436
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 670:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3442
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 671:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3447
		{
			yyVAL.str = AscScr
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3451
		{
			yyVAL.str = AscScr
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3455
		{
			yyVAL.str = DescScr
		}
	case 674:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3460
		{
			yyVAL.limit = nil
		}
	case 675:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3464
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 676:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3468
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 677:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3472
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 678:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3477
		{
			yyVAL.str = ""
		}
	case 679:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3481
		{
			yyVAL.str = ForUpdateStr
		}
	case 680:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3485
		{
			yyVAL.str = ShareModeStr
		}
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3498
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3502
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3506
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 684:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3511
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 685:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3515
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 686:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3519
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3526
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 688:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3530
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 689:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3534
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 690:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3538
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 691:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3543
		{
			yyVAL.setExprs = nil
		}
	case 692:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3547
		{
			yyVAL.setExprs = yyDollar[5].setExprs
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3553
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 694:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3557
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3563
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3567
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 697:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3573
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3579
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3589
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 700:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3593
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 701:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3599
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: NewStrVal([]byte("on"))}
		}
	case 702:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3603
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: NewStrVal([]byte("off"))}
		}
	case 703:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3607
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 704:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3611
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3618
		{
			yyVAL.bytes = []byte("charset")
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3625
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3629
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3633
		{
			yyVAL.expr = &Default{}
		}
	case 713:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3642
		{
			yyVAL.byt = 0
		}
	case 714:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3644
		{
			yyVAL.byt = 1
		}
	case 715:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3647
		{
			yyVAL.byt = 0
		}
	case 716:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3649
		{
			yyVAL.byt = 1
		}
	case 717:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3652
		{
			yyVAL.str = ""
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3654
		{
			yyVAL.str = IgnoreStr
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3658
		{
			yyVAL.empty = struct{}{}
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3660
		{
			yyVAL.empty = struct{}{}
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3662
		{
			yyVAL.empty = struct{}{}
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3664
		{
			yyVAL.empty = struct{}{}
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3666
		{
			yyVAL.empty = struct{}{}
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3668
		{
			yyVAL.empty = struct{}{}
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3670
		{
			yyVAL.empty = struct{}{}
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3672
		{
			yyVAL.empty = struct{}{}
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3674
		{
			yyVAL.empty = struct{}{}
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3676
		{
			yyVAL.empty = struct{}{}
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3680
		{
			yyVAL.empty = struct{}{}
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3682
		{
			yyVAL.empty = struct{}{}
		}
	case 731:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3685
		{
			yyVAL.empty = struct{}{}
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3687
		{
			yyVAL.empty = struct{}{}
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3689
		{
			yyVAL.empty = struct{}{}
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3693
		{
			yyVAL.str = UniqueStr
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3695
		{
			yyVAL.str = FulltextStr
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3697
		{
			yyVAL.str = SpatialStr
		}
	case 737:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3700
		{
			yyVAL.str = ""
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3702
		{
			yyVAL.str = yyDollar[1].str
		}
	case 739:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3705
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 740:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3707
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3711
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3715
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3722
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3728
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3732
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3739
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1038:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4054
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4063
		{
			decNesting(yylex)
		}
	case 1040:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4068
		{
			skipToEnd(yylex)
		}
	case 1041:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4073
		{
			skipToEnd(yylex)
		}
	case 1042:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4077
		{
			skipToEnd(yylex)
		}
	case 1043:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4081
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
