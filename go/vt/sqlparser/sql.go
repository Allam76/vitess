//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func yyPosition(yylex interface{}) int {
	return yylex.(*Tokenizer).Position
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:57
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	int                  int
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	columnOrder          *ColumnOrder
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const UNLOCK = 57373
const KEYS = 57374
const UNIQUE = 57375
const KEY = 57376
const VALUES = 57377
const LAST_INSERT_ID = 57378
const NEXT = 57379
const VALUE = 57380
const SHARE = 57381
const MODE = 57382
const SQL_NO_CACHE = 57383
const SQL_CACHE = 57384
const JOIN = 57385
const STRAIGHT_JOIN = 57386
const LEFT = 57387
const RIGHT = 57388
const INNER = 57389
const OUTER = 57390
const CROSS = 57391
const NATURAL = 57392
const USE = 57393
const FORCE = 57394
const ON = 57395
const USING = 57396
const ID = 57397
const HEX = 57398
const STRING = 57399
const INTEGRAL = 57400
const FLOAT = 57401
const HEXNUM = 57402
const VALUE_ARG = 57403
const LIST_ARG = 57404
const COMMENT = 57405
const COMMENT_KEYWORD = 57406
const BIT_LITERAL = 57407
const NULL = 57408
const TRUE = 57409
const FALSE = 57410
const OFF = 57411
const OR = 57412
const AND = 57413
const NOT = 57414
const BETWEEN = 57415
const CASE = 57416
const WHEN = 57417
const THEN = 57418
const ELSE = 57419
const END = 57420
const LE = 57421
const GE = 57422
const NE = 57423
const NULL_SAFE_EQUAL = 57424
const IS = 57425
const LIKE = 57426
const REGEXP = 57427
const IN = 57428
const SHIFT_LEFT = 57429
const SHIFT_RIGHT = 57430
const DIV = 57431
const MOD = 57432
const UNARY = 57433
const COLLATE = 57434
const BINARY = 57435
const UNDERSCORE_BINARY = 57436
const UNDERSCORE_UTF8MB4 = 57437
const INTERVAL = 57438
const JSON_EXTRACT_OP = 57439
const JSON_UNQUOTE_EXTRACT_OP = 57440
const CREATE = 57441
const ALTER = 57442
const DROP = 57443
const RENAME = 57444
const ANALYZE = 57445
const ADD = 57446
const FLUSH = 57447
const MODIFY = 57448
const CHANGE = 57449
const SCHEMA = 57450
const TABLE = 57451
const INDEX = 57452
const VIEW = 57453
const TO = 57454
const IGNORE = 57455
const IF = 57456
const PRIMARY = 57457
const COLUMN = 57458
const SPATIAL = 57459
const FULLTEXT = 57460
const KEY_BLOCK_SIZE = 57461
const CHECK = 57462
const ACTION = 57463
const CASCADE = 57464
const CONSTRAINT = 57465
const FOREIGN = 57466
const NO = 57467
const REFERENCES = 57468
const RESTRICT = 57469
const FIRST = 57470
const AFTER = 57471
const SHOW = 57472
const DESCRIBE = 57473
const EXPLAIN = 57474
const DATE = 57475
const ESCAPE = 57476
const REPAIR = 57477
const OPTIMIZE = 57478
const TRUNCATE = 57479
const FORMAT = 57480
const MAXVALUE = 57481
const PARTITION = 57482
const REORGANIZE = 57483
const LESS = 57484
const THAN = 57485
const PROCEDURE = 57486
const TRIGGER = 57487
const VINDEX = 57488
const VINDEXES = 57489
const STATUS = 57490
const VARIABLES = 57491
const WARNINGS = 57492
const SEQUENCE = 57493
const BEGIN = 57494
const START = 57495
const TRANSACTION = 57496
const COMMIT = 57497
const ROLLBACK = 57498
const BIT = 57499
const TINYINT = 57500
const SMALLINT = 57501
const MEDIUMINT = 57502
const INT = 57503
const INTEGER = 57504
const BIGINT = 57505
const INTNUM = 57506
const REAL = 57507
const DOUBLE = 57508
const FLOAT_TYPE = 57509
const DECIMAL = 57510
const NUMERIC = 57511
const TIME = 57512
const TIMESTAMP = 57513
const DATETIME = 57514
const YEAR = 57515
const CHAR = 57516
const VARCHAR = 57517
const BOOL = 57518
const CHARACTER = 57519
const VARBINARY = 57520
const NCHAR = 57521
const TEXT = 57522
const TINYTEXT = 57523
const MEDIUMTEXT = 57524
const LONGTEXT = 57525
const BLOB = 57526
const TINYBLOB = 57527
const MEDIUMBLOB = 57528
const LONGBLOB = 57529
const JSON = 57530
const ENUM = 57531
const GEOMETRY = 57532
const POINT = 57533
const LINESTRING = 57534
const POLYGON = 57535
const GEOMETRYCOLLECTION = 57536
const MULTIPOINT = 57537
const MULTILINESTRING = 57538
const MULTIPOLYGON = 57539
const NULLX = 57540
const AUTO_INCREMENT = 57541
const APPROXNUM = 57542
const SIGNED = 57543
const UNSIGNED = 57544
const ZEROFILL = 57545
const COLLATION = 57546
const DATABASES = 57547
const SCHEMAS = 57548
const TABLES = 57549
const VITESS_METADATA = 57550
const VSCHEMA = 57551
const FULL = 57552
const PROCESSLIST = 57553
const COLUMNS = 57554
const FIELDS = 57555
const ENGINES = 57556
const PLUGINS = 57557
const NAMES = 57558
const CHARSET = 57559
const GLOBAL = 57560
const SESSION = 57561
const ISOLATION = 57562
const LEVEL = 57563
const READ = 57564
const WRITE = 57565
const ONLY = 57566
const REPEATABLE = 57567
const COMMITTED = 57568
const UNCOMMITTED = 57569
const SERIALIZABLE = 57570
const CURRENT_TIMESTAMP = 57571
const DATABASE = 57572
const CURRENT_DATE = 57573
const CURRENT_TIME = 57574
const LOCALTIME = 57575
const LOCALTIMESTAMP = 57576
const UTC_DATE = 57577
const UTC_TIME = 57578
const UTC_TIMESTAMP = 57579
const REPLACE = 57580
const CONVERT = 57581
const CAST = 57582
const SUBSTR = 57583
const SUBSTRING = 57584
const GROUP_CONCAT = 57585
const SEPARATOR = 57586
const TIMESTAMPADD = 57587
const TIMESTAMPDIFF = 57588
const MATCH = 57589
const AGAINST = 57590
const BOOLEAN = 57591
const LANGUAGE = 57592
const WITH = 57593
const QUERY = 57594
const EXPANSION = 57595
const UNUSED = 57596
const ARRAY = 57597
const CUME_DIST = 57598
const DESCRIPTION = 57599
const DENSE_RANK = 57600
const EMPTY = 57601
const EXCEPT = 57602
const FIRST_VALUE = 57603
const GROUPING = 57604
const GROUPS = 57605
const JSON_TABLE = 57606
const LAG = 57607
const LAST_VALUE = 57608
const LATERAL = 57609
const LEAD = 57610
const MEMBER = 57611
const NTH_VALUE = 57612
const NTILE = 57613
const OF = 57614
const OVER = 57615
const PERCENT_RANK = 57616
const RANK = 57617
const RECURSIVE = 57618
const ROW_NUMBER = 57619
const SYSTEM = 57620
const WINDOW = 57621
const ACTIVE = 57622
const ADMIN = 57623
const BUCKETS = 57624
const CLONE = 57625
const COMPONENT = 57626
const DEFINITION = 57627
const ENFORCED = 57628
const EXCLUDE = 57629
const FOLLOWING = 57630
const GEOMCOLLECTION = 57631
const GET_MASTER_PUBLIC_KEY = 57632
const HISTOGRAM = 57633
const HISTORY = 57634
const INACTIVE = 57635
const INVISIBLE = 57636
const LOCKED = 57637
const MASTER_COMPRESSION_ALGORITHMS = 57638
const MASTER_PUBLIC_KEY_PATH = 57639
const MASTER_TLS_CIPHERSUITES = 57640
const MASTER_ZSTD_COMPRESSION_LEVEL = 57641
const NESTED = 57642
const NETWORK_NAMESPACE = 57643
const NOWAIT = 57644
const NULLS = 57645
const OJ = 57646
const OLD = 57647
const OPTIONAL = 57648
const ORDINALITY = 57649
const ORGANIZATION = 57650
const OTHERS = 57651
const PATH = 57652
const PERSIST = 57653
const PERSIST_ONLY = 57654
const PRECEDING = 57655
const PRIVILEGE_CHECKS_USER = 57656
const PROCESS = 57657
const RANDOM = 57658
const REFERENCE = 57659
const REQUIRE_ROW_FORMAT = 57660
const RESOURCE = 57661
const RESPECT = 57662
const RESTART = 57663
const RETAIN = 57664
const REUSE = 57665
const ROLE = 57666
const SECONDARY = 57667
const SECONDARY_ENGINE = 57668
const SECONDARY_LOAD = 57669
const SECONDARY_UNLOAD = 57670
const SKIP = 57671
const SRID = 57672
const THREAD_PRIORITY = 57673
const TIES = 57674
const UNBOUNDED = 57675
const VCPU = 57676
const VISIBLE = 57677

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"UNIQUE",
	"KEY",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"MODIFY",
	"CHANGE",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"FIRST",
	"AFTER",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"FORMAT",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 31,
	-2, 4,
	-1, 41,
	165, 320,
	166, 320,
	-2, 308,
	-1, 48,
	1, 969,
	353, 969,
	-2, 339,
	-1, 329,
	113, 675,
	-2, 671,
	-1, 330,
	113, 676,
	-2, 672,
	-1, 399,
	83, 925,
	-2, 67,
	-1, 400,
	83, 843,
	-2, 68,
	-1, 405,
	83, 812,
	-2, 634,
	-1, 407,
	83, 873,
	-2, 636,
	-1, 584,
	5, 31,
	-2, 333,
	-1, 588,
	5, 31,
	-2, 332,
	-1, 714,
	1, 384,
	5, 384,
	12, 384,
	13, 384,
	14, 384,
	15, 384,
	17, 384,
	19, 384,
	29, 384,
	30, 384,
	43, 384,
	44, 384,
	45, 384,
	46, 384,
	47, 384,
	49, 384,
	50, 384,
	53, 384,
	54, 384,
	56, 384,
	57, 384,
	353, 384,
	-2, 402,
	-1, 717,
	54, 48,
	56, 48,
	-2, 52,
	-1, 868,
	113, 678,
	-2, 674,
	-1, 1098,
	5, 32,
	-2, 469,
	-1, 1130,
	5, 31,
	-2, 608,
	-1, 1214,
	5, 31,
	-2, 69,
	-1, 1406,
	5, 32,
	-2, 609,
	-1, 1435,
	5, 31,
	-2, 69,
	-1, 1467,
	5, 31,
	-2, 611,
	-1, 1545,
	5, 32,
	-2, 612,
}

const yyPrivate = 57344

const yyLast = 16447

var yyAct = [...]int{

	330, 1568, 1533, 1370, 1578, 1250, 334, 1426, 1133, 669,
	1447, 981, 1151, 1479, 1297, 1437, 1331, 954, 360, 308,
	1134, 347, 1294, 1022, 1298, 1027, 952, 1008, 990, 64,
	531, 1178, 977, 980, 893, 1304, 1310, 1039, 822, 1269,
	98, 906, 711, 98, 1092, 716, 404, 807, 930, 98,
	1207, 1226, 920, 730, 870, 710, 600, 606, 941, 1225,
	729, 1018, 393, 398, 612, 621, 556, 934, 317, 390,
	956, 332, 537, 395, 98, 409, 994, 719, 63, 98,
	7, 98, 763, 6, 1571, 95, 685, 5, 1555, 98,
	554, 1566, 1543, 1563, 296, 98, 1371, 1554, 1286, 68,
	684, 1542, 1398, 26, 297, 55, 29, 30, 536, 85,
	1157, 1166, 321, 1325, 1165, 972, 973, 1167, 971, 392,
	559, 1326, 1327, 731, 533, 732, 535, 70, 71, 72,
	73, 74, 576, 301, 542, 581, 577, 574, 575, 300,
	549, 401, 1198, 1001, 1009, 1454, 1389, 1252, 1387, 81,
	292, 579, 61, 1254, 298, 299, 539, 540, 302, 832,
	668, 3, 751, 1510, 634, 633, 643, 644, 636, 637,
	638, 639, 640, 641, 642, 635, 835, 373, 645, 379,
	380, 377, 378, 376, 375, 374, 925, 558, 561, 305,
	563, 307, 1565, 381, 382, 580, 93, 89, 90, 91,
	1253, 83, 84, 764, 80, 569, 570, 1562, 1528, 1534,
	87, 86, 1249, 935, 995, 303, 1586, 1227, 836, 538,
	1582, 1152, 1154, 560, 562, 1438, 1439, 777, 780, 781,
	782, 783, 784, 785, 834, 786, 787, 788, 789, 790,
	765, 766, 767, 768, 749, 750, 778, 544, 752, 1270,
	753, 754, 755, 756, 757, 758, 759, 760, 761, 762,
	769, 770, 771, 772, 773, 774, 775, 776, 294, 98,
	1216, 833, 409, 1442, 409, 409, 307, 409, 409, 1480,
	409, 1009, 409, 799, 793, 1320, 997, 306, 409, 997,
	1272, 1319, 1482, 1318, 534, 594, 1070, 268, 88, 1069,
	1153, 993, 997, 295, 657, 658, 98, 1190, 1517, 557,
	1179, 1409, 1195, 1194, 551, 1256, 1162, 1541, 92, 779,
	1119, 1086, 842, 82, 409, 1274, 532, 1278, 1108, 1273,
	1580, 1271, 1191, 1581, 1105, 1579, 1276, 725, 1511, 625,
	550, 608, 1058, 978, 645, 1275, 1196, 1346, 1188, 967,
	635, 595, 56, 645, 1189, 1057, 839, 599, 1277, 1279,
	618, 1481, 827, 532, 564, 565, 620, 566, 567, 1288,
	568, 823, 571, 1041, 585, 1526, 620, 587, 582, 996,
	1441, 586, 996, 77, 1499, 1062, 1308, 795, 98, 98,
	98, 733, 1237, 1233, 1056, 996, 530, 409, 1347, 589,
	991, 841, 992, 409, 921, 590, 591, 1337, 989, 995,
	304, 1193, 1244, 615, 610, 709, 1547, 1587, 327, 78,
	596, 921, 597, 1116, 1246, 598, 877, 1002, 1433, 1432,
	24, 657, 658, 708, 543, 717, 1211, 657, 658, 840,
	875, 876, 874, 1210, 1053, 1048, 1049, 1199, 1047, 1524,
	1050, 1051, 1040, 824, 584, 588, 619, 618, 1588, 718,
	1527, 688, 690, 401, 694, 696, 894, 699, 895, 723,
	727, 619, 618, 620, 609, 687, 689, 691, 693, 695,
	697, 698, 387, 388, 1060, 1063, 1232, 1168, 620, 1169,
	592, 1234, 1227, 1235, 1231, 1192, 1228, 312, 1461, 1229,
	1230, 634, 633, 643, 644, 636, 637, 638, 639, 640,
	641, 642, 635, 619, 618, 645, 1236, 1245, 1430, 1243,
	1290, 1055, 1342, 1240, 845, 846, 546, 547, 548, 1222,
	620, 98, 636, 637, 638, 639, 640, 641, 642, 635,
	1208, 98, 645, 1054, 98, 1044, 1359, 98, 1103, 532,
	1102, 98, 1104, 409, 409, 1083, 1084, 1085, 1093, 61,
	409, 409, 98, 409, 409, 1485, 1564, 619, 618, 873,
	409, 409, 1494, 619, 618, 1493, 741, 638, 639, 640,
	641, 642, 635, 1059, 620, 645, 797, 1550, 593, 392,
	620, 532, 804, 1485, 1537, 98, 409, 809, 1061, 1373,
	98, 1485, 593, 619, 618, 1485, 1518, 816, 860, 862,
	863, 1368, 409, 800, 861, 1485, 1484, 98, 1424, 1423,
	620, 1411, 593, 409, 1408, 593, 1307, 1364, 847, 1362,
	812, 813, 1353, 1352, 1349, 1350, 361, 54, 1349, 1348,
	830, 1179, 1174, 810, 811, 837, 1037, 871, 938, 593,
	814, 815, 1036, 817, 818, 1099, 593, 593, 26, 896,
	819, 820, 856, 902, 593, 902, 829, 409, 806, 805,
	796, 794, 868, 866, 791, 740, 739, 65, 552, 849,
	545, 1128, 1491, 910, 913, 1489, 831, 1129, 864, 1488,
	922, 54, 867, 721, 721, 350, 349, 352, 353, 354,
	355, 409, 409, 313, 351, 356, 26, 61, 98, 1295,
	1343, 998, 1307, 961, 937, 720, 98, 98, 1099, 1259,
	98, 98, 1404, 1158, 98, 98, 98, 409, 26, 897,
	898, 1158, 900, 1498, 938, 1466, 722, 722, 724, 720,
	409, 938, 1351, 1170, 970, 918, 962, 1099, 1122, 1121,
	964, 1035, 720, 936, 726, 61, 659, 660, 661, 662,
	663, 664, 665, 666, 1099, 843, 963, 938, 798, 314,
	61, 985, 809, 1556, 1251, 1307, 1449, 61, 1003, 1416,
	1023, 1336, 1010, 1011, 1012, 960, 1173, 965, 1019, 969,
	968, 1014, 931, 401, 98, 409, 848, 409, 1013, 98,
	98, 1311, 1312, 98, 1450, 1026, 982, 1573, 1569, 943,
	946, 947, 948, 944, 1024, 945, 949, 1314, 61, 1311,
	1312, 1295, 98, 1212, 98, 98, 828, 802, 1147, 98,
	947, 948, 904, 98, 98, 98, 98, 98, 1145, 1028,
	855, 1143, 1317, 1146, 1032, 1033, 1144, 1316, 1034, 1020,
	1021, 1142, 1141, 318, 319, 901, 903, 643, 644, 636,
	637, 638, 639, 640, 641, 642, 635, 1038, 1560, 645,
	1553, 1255, 1071, 1558, 1045, 613, 614, 1081, 1064, 1065,
	1066, 1067, 1068, 1080, 1464, 1029, 1341, 1031, 1340, 868,
	1074, 1181, 611, 871, 1175, 601, 943, 946, 947, 948,
	944, 1075, 945, 949, 1076, 1445, 602, 1203, 555, 867,
	555, 555, 738, 555, 555, 553, 555, 336, 555, 1402,
	1030, 801, 1215, 951, 555, 613, 614, 1079, 792, 1088,
	54, 54, 315, 316, 309, 1078, 1504, 310, 65, 98,
	98, 98, 98, 98, 1135, 1503, 1452, 1158, 578, 1096,
	54, 98, 1575, 1574, 98, 1109, 1106, 821, 98, 616,
	1575, 1514, 98, 1339, 838, 654, 67, 69, 656, 47,
	62, 1, 1115, 1567, 1372, 1446, 1052, 1532, 1478, 1330,
	988, 409, 1137, 1138, 979, 1140, 76, 529, 1159, 75,
	1525, 359, 1171, 987, 1136, 986, 667, 1139, 671, 672,
	673, 674, 675, 676, 677, 678, 679, 680, 1148, 683,
	686, 686, 686, 692, 686, 686, 692, 686, 700, 701,
	702, 703, 704, 705, 1163, 715, 1180, 409, 1156, 1186,
	1185, 1182, 1200, 1201, 1197, 409, 98, 409, 409, 1000,
	1184, 1202, 1183, 1204, 1205, 1206, 869, 982, 1187, 878,
	879, 880, 881, 882, 883, 884, 885, 886, 887, 888,
	889, 890, 891, 892, 746, 1209, 403, 744, 745, 1176,
	1177, 743, 748, 1160, 747, 1161, 999, 1221, 98, 742,
	280, 1218, 396, 1095, 734, 1025, 617, 409, 48, 950,
	1440, 1098, 1100, 1241, 1101, 1130, 79, 1242, 1046, 1107,
	1239, 826, 1110, 1111, 1112, 926, 572, 573, 1238, 1118,
	1247, 1248, 282, 1120, 904, 653, 1123, 1124, 1077, 1125,
	1126, 1164, 402, 1257, 1302, 1217, 844, 1219, 1220, 605,
	1502, 1451, 409, 409, 1263, 1135, 1262, 1296, 1280, 1150,
	1114, 1268, 681, 1287, 1281, 919, 335, 859, 1299, 348,
	345, 1224, 346, 1261, 850, 1127, 409, 627, 333, 325,
	713, 706, 942, 940, 939, 803, 868, 1074, 391, 1313,
	1309, 409, 712, 409, 409, 1258, 1315, 1004, 1005, 1006,
	1007, 293, 1397, 1509, 1329, 854, 1291, 1322, 1214, 555,
	555, 1321, 28, 1015, 1016, 1017, 555, 555, 66, 555,
	555, 320, 19, 1333, 1328, 18, 555, 555, 1334, 1335,
	17, 583, 20, 98, 21, 22, 16, 98, 633, 643,
	644, 636, 637, 638, 639, 640, 641, 642, 635, 15,
	14, 645, 555, 1344, 1345, 541, 32, 982, 36, 982,
	1355, 1356, 98, 35, 1306, 34, 10, 23, 13, 655,
	409, 12, 11, 409, 409, 409, 1360, 409, 1354, 1358,
	98, 9, 1357, 403, 8, 403, 403, 4, 403, 403,
	1324, 403, 311, 403, 25, 2, 0, 0, 1367, 403,
	0, 0, 0, 1267, 0, 0, 1378, 1365, 0, 0,
	0, 0, 1301, 54, 1089, 1090, 1091, 0, 1385, 0,
	0, 0, 0, 0, 0, 0, 714, 0, 671, 0,
	0, 0, 0, 0, 1135, 623, 0, 0, 0, 1403,
	0, 0, 0, 1261, 0, 323, 0, 0, 1413, 409,
	0, 1361, 0, 0, 0, 0, 1412, 409, 0, 0,
	1171, 0, 1422, 0, 1363, 0, 0, 1366, 0, 0,
	0, 0, 953, 0, 0, 409, 715, 0, 0, 0,
	715, 1428, 0, 0, 0, 0, 0, 0, 0, 1377,
	0, 0, 409, 0, 0, 0, 1429, 0, 1431, 0,
	0, 0, 0, 1443, 0, 0, 0, 0, 403, 0,
	1436, 0, 0, 0, 735, 982, 0, 0, 0, 1444,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 409,
	409, 1453, 409, 0, 0, 0, 0, 409, 0, 409,
	409, 409, 98, 1299, 1473, 409, 1474, 1475, 1476, 1465,
	0, 555, 1472, 555, 0, 0, 0, 0, 1448, 1477,
	0, 1483, 0, 0, 0, 1434, 0, 0, 0, 1379,
	409, 98, 0, 0, 0, 0, 1381, 1500, 0, 0,
	1496, 1490, 1486, 0, 1487, 905, 907, 1390, 1391, 912,
	915, 916, 917, 0, 0, 0, 0, 0, 0, 0,
	0, 1515, 0, 0, 0, 1299, 409, 1405, 1406, 1407,
	1522, 1410, 1523, 0, 0, 929, 1501, 932, 933, 409,
	409, 0, 0, 0, 1087, 0, 0, 0, 1421, 1535,
	0, 1536, 1265, 1266, 1539, 0, 0, 1435, 409, 0,
	0, 1135, 0, 1544, 1282, 1283, 0, 1284, 1285, 98,
	0, 0, 0, 0, 0, 409, 0, 0, 0, 0,
	1292, 1293, 1492, 1552, 403, 403, 872, 0, 1495, 0,
	0, 403, 403, 1557, 403, 403, 1559, 409, 0, 0,
	0, 403, 403, 0, 1561, 1448, 982, 0, 1467, 1572,
	0, 1131, 1132, 0, 1548, 715, 715, 715, 715, 715,
	1583, 0, 0, 0, 1460, 0, 0, 403, 0, 0,
	953, 0, 1155, 0, 0, 0, 1530, 0, 715, 0,
	0, 1531, 0, 851, 0, 0, 0, 0, 0, 1338,
	0, 0, 0, 0, 623, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1516,
	0, 0, 0, 714, 0, 603, 607, 714, 0, 0,
	0, 714, 1505, 1506, 1507, 1508, 0, 1082, 0, 1512,
	1513, 0, 626, 0, 0, 0, 0, 0, 899, 0,
	0, 1519, 1520, 1521, 54, 0, 0, 0, 0, 0,
	0, 555, 0, 555, 555, 923, 0, 0, 0, 0,
	0, 0, 0, 1380, 0, 0, 0, 670, 0, 0,
	0, 0, 927, 928, 0, 0, 1540, 682, 1382, 1383,
	0, 1384, 0, 1545, 1386, 0, 1388, 0, 0, 0,
	0, 1113, 0, 0, 0, 0, 0, 0, 403, 1549,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 403, 0, 0, 26, 27, 55, 29, 30, 0,
	0, 0, 0, 0, 0, 0, 0, 604, 0, 0,
	0, 0, 0, 60, 0, 0, 0, 31, 51, 52,
	1425, 0, 0, 1584, 1585, 0, 1300, 0, 54, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 42,
	0, 0, 0, 61, 0, 0, 403, 96, 403, 0,
	291, 0, 872, 0, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1455, 1456, 1457, 1458, 1459, 0, 0, 324, 1462,
	1463, 394, 0, 0, 0, 0, 96, 0, 96, 0,
	0, 0, 0, 0, 403, 0, 96, 0, 0, 0,
	0, 0, 96, 0, 33, 57, 38, 37, 40, 0,
	53, 0, 0, 0, 0, 0, 714, 714, 714, 714,
	714, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 714, 0, 0, 0, 41, 59, 58, 0, 714,
	49, 50, 39, 0, 0, 0, 277, 0, 0, 0,
	0, 0, 0, 0, 0, 593, 715, 43, 44, 0,
	45, 46, 0, 0, 825, 0, 0, 0, 0, 0,
	0, 0, 287, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1396, 0, 0, 0, 0, 0, 923,
	0, 0, 634, 633, 643, 644, 636, 637, 638, 639,
	640, 641, 642, 635, 857, 858, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 1418, 1419, 1420, 0, 0,
	0, 0, 0, 269, 0, 1401, 0, 0, 0, 0,
	272, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	281, 276, 0, 56, 0, 0, 0, 0, 0, 1576,
	0, 555, 0, 54, 0, 0, 0, 670, 0, 0,
	908, 909, 0, 634, 633, 643, 644, 636, 637, 638,
	639, 640, 641, 642, 635, 279, 96, 645, 1213, 0,
	0, 286, 1400, 0, 0, 0, 403, 0, 403, 403,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1300, 0, 0, 1468, 0, 0, 0, 270, 0,
	0, 0, 0, 96, 0, 0, 0, 0, 0, 976,
	634, 633, 643, 644, 636, 637, 638, 639, 640, 641,
	642, 635, 0, 0, 645, 283, 273, 274, 403, 284,
	285, 290, 1497, 0, 0, 275, 278, 0, 271, 289,
	288, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1300, 0, 54, 0, 0, 0, 0,
	0, 403, 0, 0, 0, 0, 0, 0, 0, 0,
	923, 0, 0, 1303, 1305, 0, 0, 0, 0, 1395,
	0, 0, 0, 0, 0, 96, 96, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1305, 0, 0,
	0, 0, 0, 0, 1394, 0, 0, 0, 0, 0,
	0, 0, 403, 0, 403, 1332, 1072, 1073, 0, 607,
	629, 0, 632, 0, 1393, 0, 0, 714, 646, 647,
	648, 649, 650, 651, 652, 0, 630, 631, 628, 634,
	633, 643, 644, 636, 637, 638, 639, 640, 641, 642,
	635, 0, 1570, 645, 634, 633, 643, 644, 636, 637,
	638, 639, 640, 641, 642, 635, 0, 0, 645, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1097, 634,
	633, 643, 644, 636, 637, 638, 639, 640, 641, 642,
	635, 1369, 0, 645, 1374, 1375, 1376, 1117, 403, 634,
	633, 643, 644, 636, 637, 638, 639, 640, 641, 642,
	635, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1392, 0, 0, 0, 0, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 0,
	0, 96, 0, 0, 96, 0, 0, 0, 808, 923,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	1264, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	403, 0, 0, 0, 0, 0, 0, 0, 1427, 0,
	634, 633, 643, 644, 636, 637, 638, 639, 640, 641,
	642, 635, 96, 0, 645, 0, 403, 96, 634, 633,
	643, 644, 636, 637, 638, 639, 640, 641, 642, 635,
	1094, 0, 645, 403, 96, 0, 0, 1223, 0, 0,
	0, 0, 0, 808, 0, 0, 0, 0, 0, 0,
	634, 633, 643, 644, 636, 637, 638, 639, 640, 641,
	642, 635, 0, 0, 645, 0, 0, 0, 0, 0,
	1469, 1470, 0, 1471, 0, 0, 0, 0, 1427, 0,
	1427, 1427, 1427, 0, 0, 0, 1332, 0, 0, 0,
	324, 324, 0, 0, 324, 324, 324, 324, 0, 0,
	0, 924, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1427, 1289, 0, 0, 0, 0, 0, 0, 0,
	324, 324, 324, 324, 0, 96, 0, 0, 0, 0,
	0, 0, 0, 96, 958, 0, 0, 96, 96, 0,
	0, 96, 966, 808, 0, 0, 0, 1529, 0, 0,
	0, 0, 0, 0, 1323, 0, 0, 0, 0, 0,
	403, 403, 0, 634, 633, 643, 644, 636, 637, 638,
	639, 640, 641, 642, 635, 0, 923, 645, 0, 1546,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1551, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 0, 96, 96, 1427, 0,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	0, 1042, 1043, 0, 0, 0, 96, 0, 0, 0,
	96, 96, 96, 96, 96, 0, 0, 0, 0, 0,
	808, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 324, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1399, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 670, 0, 0, 0,
	0, 0, 0, 0, 1414, 0, 0, 1415, 0, 0,
	1417, 0, 0, 0, 0, 0, 0, 0, 324, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 324, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 924, 96, 96, 96, 96,
	96, 0, 0, 0, 0, 0, 0, 0, 1149, 0,
	0, 96, 0, 0, 0, 958, 0, 0, 0, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 0, 0, 1538,
	670, 0, 0, 0, 0, 324, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 324, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 808, 0, 0,
	0, 0, 0, 0, 0, 0, 924, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 0, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 924, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 958,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 516, 504, 0, 461, 519, 434, 451,
	527, 452, 455, 492, 419, 474, 182, 449, 96, 438,
	414, 444, 415, 436, 463, 128, 433, 506, 477, 518,
	154, 517, 467, 525, 156, 483, 0, 228, 170, 0,
	0, 465, 508, 472, 501, 460, 493, 424, 482, 520,
	450, 490, 521, 0, 0, 0, 408, 0, 983, 984,
	0, 0, 0, 0, 0, 118, 0, 487, 515, 446,
	489, 491, 413, 484, 0, 417, 420, 526, 511, 441,
	442, 1172, 924, 0, 0, 0, 0, 0, 464, 473,
	498, 458, 0, 0, 0, 0, 96, 0, 0, 0,
	439, 0, 481, 0, 0, 0, 421, 418, 0, 0,
	462, 0, 0, 0, 423, 0, 440, 499, 0, 410,
	136, 0, 0, 503, 510, 459, 257, 514, 457, 456,
	201, 0, 232, 139, 153, 114, 100, 110, 0, 138,
	179, 208, 212, 447, 411, 507, 437, 445, 122, 443,
	210, 189, 248, 0, 480, 191, 209, 157, 238, 202,
	247, 258, 259, 235, 255, 263, 225, 103, 234, 246,
	119, 220, 105, 244, 231, 168, 148, 149, 104, 0,
	206, 127, 134, 124, 181, 241, 242, 123, 266, 111,
	254, 107, 112, 253, 175, 237, 245, 169, 162, 106,
	243, 167, 161, 152, 131, 141, 199, 159, 200, 142,
	172, 171, 173, 0, 416, 0, 229, 251, 267, 116,
	432, 0, 236, 261, 262, 0, 0, 117, 135, 130,
	198, 174, 113, 144, 226, 151, 158, 205, 265, 188,
	211, 120, 250, 227, 428, 431, 426, 427, 475, 476,
	522, 523, 524, 500, 422, 0, 429, 430, 0, 505,
	512, 513, 479, 99, 108, 155, 264, 203, 133, 252,
	412, 425, 126, 435, 0, 0, 448, 453, 454, 466,
	468, 469, 470, 471, 478, 485, 486, 488, 494, 495,
	496, 497, 502, 509, 528, 101, 102, 109, 115, 121,
	125, 129, 132, 137, 140, 143, 145, 146, 147, 150,
	160, 163, 164, 165, 166, 176, 177, 178, 180, 183,
	184, 185, 186, 187, 190, 192, 193, 194, 195, 196,
	197, 204, 207, 213, 214, 215, 216, 217, 218, 219,
	221, 222, 223, 224, 230, 233, 239, 240, 249, 256,
	260, 516, 504, 0, 461, 519, 434, 451, 527, 452,
	455, 492, 419, 474, 182, 449, 0, 438, 414, 444,
	415, 436, 463, 128, 433, 506, 477, 518, 154, 517,
	467, 525, 156, 483, 0, 228, 170, 0, 0, 465,
	508, 472, 501, 460, 493, 424, 482, 520, 450, 490,
	521, 0, 0, 0, 408, 0, 983, 984, 0, 0,
	0, 0, 0, 118, 0, 487, 515, 446, 489, 491,
	413, 484, 0, 417, 420, 526, 511, 441, 442, 0,
	0, 0, 0, 0, 0, 0, 464, 473, 498, 458,
	0, 0, 0, 0, 0, 0, 0, 0, 439, 0,
	481, 0, 0, 0, 421, 418, 0, 0, 462, 0,
	0, 0, 423, 0, 440, 499, 0, 410, 136, 0,
	0, 503, 510, 459, 257, 514, 457, 456, 201, 0,
	232, 139, 153, 114, 100, 110, 0, 138, 179, 208,
	212, 447, 411, 507, 437, 445, 122, 443, 210, 189,
	248, 0, 480, 191, 209, 157, 238, 202, 247, 258,
	259, 235, 255, 263, 225, 103, 234, 246, 119, 220,
	105, 244, 231, 168, 148, 149, 104, 0, 206, 127,
	134, 124, 181, 241, 242, 123, 266, 111, 254, 107,
	112, 253, 175, 237, 245, 169, 162, 106, 243, 167,
	161, 152, 131, 141, 199, 159, 200, 142, 172, 171,
	173, 0, 416, 0, 229, 251, 267, 116, 432, 0,
	236, 261, 262, 0, 0, 117, 135, 130, 198, 174,
	113, 144, 226, 151, 158, 205, 265, 188, 211, 120,
	250, 227, 428, 431, 426, 427, 475, 476, 522, 523,
	524, 500, 422, 0, 429, 430, 0, 505, 512, 513,
	479, 99, 108, 155, 264, 203, 133, 252, 412, 425,
	126, 435, 0, 0, 448, 453, 454, 466, 468, 469,
	470, 471, 478, 485, 486, 488, 494, 495, 496, 497,
	502, 509, 528, 101, 102, 109, 115, 121, 125, 129,
	132, 137, 140, 143, 145, 146, 147, 150, 160, 163,
	164, 165, 166, 176, 177, 178, 180, 183, 184, 185,
	186, 187, 190, 192, 193, 194, 195, 196, 197, 204,
	207, 213, 214, 215, 216, 217, 218, 219, 221, 222,
	223, 224, 230, 233, 239, 240, 249, 256, 260, 516,
	504, 0, 461, 519, 434, 451, 527, 452, 455, 492,
	419, 474, 182, 449, 0, 438, 414, 444, 415, 436,
	463, 128, 433, 506, 477, 518, 154, 517, 467, 525,
	156, 483, 0, 228, 170, 0, 0, 465, 508, 472,
	501, 460, 493, 424, 482, 520, 450, 490, 521, 61,
	0, 0, 408, 0, 0, 0, 0, 0, 0, 0,
	0, 118, 0, 487, 515, 446, 489, 491, 413, 484,
	0, 417, 420, 526, 511, 441, 442, 0, 0, 0,
	0, 0, 0, 0, 464, 473, 498, 458, 0, 0,
	0, 0, 0, 0, 0, 0, 439, 0, 481, 0,
	0, 0, 421, 418, 0, 0, 462, 0, 0, 0,
	423, 0, 440, 499, 0, 410, 136, 0, 0, 503,
	510, 459, 257, 514, 457, 456, 201, 0, 232, 139,
	153, 114, 100, 110, 0, 138, 179, 208, 212, 447,
	411, 507, 437, 445, 122, 443, 210, 189, 248, 0,
	480, 191, 209, 157, 238, 202, 247, 258, 259, 235,
	255, 263, 225, 103, 234, 246, 119, 220, 105, 244,
	231, 168, 148, 149, 104, 0, 206, 127, 134, 124,
	181, 241, 242, 123, 266, 111, 254, 107, 112, 253,
	175, 237, 245, 169, 162, 106, 243, 167, 161, 152,
	131, 141, 199, 159, 200, 142, 172, 171, 173, 0,
	416, 0, 229, 251, 267, 116, 432, 0, 236, 261,
	262, 0, 0, 117, 135, 130, 198, 174, 113, 144,
	226, 151, 158, 205, 265, 188, 211, 120, 250, 227,
	428, 431, 426, 427, 475, 476, 522, 523, 524, 500,
	422, 0, 429, 430, 0, 505, 512, 513, 479, 99,
	108, 155, 264, 203, 133, 252, 412, 425, 126, 435,
	0, 0, 448, 453, 454, 466, 468, 469, 470, 471,
	478, 485, 486, 488, 494, 495, 496, 497, 502, 509,
	528, 101, 102, 109, 115, 121, 125, 129, 132, 137,
	140, 143, 145, 146, 147, 150, 160, 163, 164, 165,
	166, 176, 177, 178, 180, 183, 184, 185, 186, 187,
	190, 192, 193, 194, 195, 196, 197, 204, 207, 213,
	214, 215, 216, 217, 218, 219, 221, 222, 223, 224,
	230, 233, 239, 240, 249, 256, 260, 516, 504, 0,
	461, 519, 434, 451, 527, 452, 455, 492, 419, 474,
	182, 449, 0, 438, 414, 444, 415, 436, 463, 128,
	433, 506, 477, 518, 154, 517, 467, 525, 156, 483,
	0, 228, 170, 0, 0, 465, 508, 472, 501, 460,
	493, 424, 482, 520, 450, 490, 521, 0, 0, 0,
	408, 0, 0, 0, 0, 0, 0, 0, 0, 118,
	0, 487, 515, 446, 489, 491, 413, 484, 0, 417,
	420, 526, 511, 441, 442, 0, 0, 0, 0, 0,
	0, 0, 464, 473, 498, 458, 0, 0, 0, 0,
	0, 0, 1260, 0, 439, 0, 481, 0, 0, 0,
	421, 418, 0, 0, 462, 0, 0, 0, 423, 0,
	440, 499, 0, 410, 136, 0, 0, 503, 510, 459,
	257, 514, 457, 456, 201, 0, 232, 139, 153, 114,
	100, 110, 0, 138, 179, 208, 212, 447, 411, 507,
	437, 445, 122, 443, 210, 189, 248, 0, 480, 191,
	209, 157, 238, 202, 247, 258, 259, 235, 255, 263,
	225, 103, 234, 246, 119, 220, 105, 244, 231, 168,
	148, 149, 104, 0, 206, 127, 134, 124, 181, 241,
	242, 123, 266, 111, 254, 107, 112, 253, 175, 237,
	245, 169, 162, 106, 243, 167, 161, 152, 131, 141,
	199, 159, 200, 142, 172, 171, 173, 0, 416, 0,
	229, 251, 267, 116, 432, 0, 236, 261, 262, 0,
	0, 117, 135, 130, 198, 174, 113, 144, 226, 151,
	158, 205, 265, 188, 211, 120, 250, 227, 428, 431,
	426, 427, 475, 476, 522, 523, 524, 500, 422, 0,
	429, 430, 0, 505, 512, 513, 479, 99, 108, 155,
	264, 203, 133, 252, 412, 425, 126, 435, 0, 0,
	448, 453, 454, 466, 468, 469, 470, 471, 478, 485,
	486, 488, 494, 495, 496, 497, 502, 509, 528, 101,
	102, 109, 115, 121, 125, 129, 132, 137, 140, 143,
	145, 146, 147, 150, 160, 163, 164, 165, 166, 176,
	177, 178, 180, 183, 184, 185, 186, 187, 190, 192,
	193, 194, 195, 196, 197, 204, 207, 213, 214, 215,
	216, 217, 218, 219, 221, 222, 223, 224, 230, 233,
	239, 240, 249, 256, 260, 516, 504, 0, 461, 519,
	434, 451, 527, 452, 455, 492, 419, 474, 182, 449,
	0, 438, 414, 444, 415, 436, 463, 128, 433, 506,
	477, 518, 154, 517, 467, 525, 156, 483, 0, 228,
	170, 0, 0, 465, 508, 472, 501, 460, 493, 424,
	482, 520, 450, 490, 521, 0, 0, 0, 97, 0,
	0, 0, 0, 0, 0, 0, 0, 118, 0, 487,
	515, 446, 489, 491, 413, 484, 0, 417, 420, 526,
	511, 441, 442, 0, 0, 0, 0, 0, 0, 0,
	464, 473, 498, 458, 0, 0, 0, 0, 0, 0,
	967, 0, 439, 0, 481, 0, 0, 0, 421, 418,
	0, 0, 462, 0, 0, 0, 423, 0, 440, 499,
	0, 410, 136, 0, 0, 503, 510, 459, 257, 514,
	457, 456, 201, 0, 232, 139, 153, 114, 100, 110,
	0, 138, 179, 208, 212, 447, 411, 507, 437, 445,
	122, 443, 210, 189, 248, 0, 480, 191, 209, 157,
	238, 202, 247, 258, 259, 235, 255, 263, 225, 103,
	234, 246, 119, 220, 105, 244, 231, 168, 148, 149,
	104, 0, 206, 127, 134, 124, 181, 241, 242, 123,
	266, 111, 254, 107, 112, 253, 175, 237, 245, 169,
	162, 106, 243, 167, 161, 152, 131, 141, 199, 159,
	200, 142, 172, 171, 173, 0, 416, 0, 229, 251,
	267, 116, 432, 0, 236, 261, 262, 0, 0, 117,
	135, 130, 198, 174, 113, 144, 226, 151, 158, 205,
	265, 188, 211, 120, 250, 227, 428, 431, 426, 427,
	475, 476, 522, 523, 524, 500, 422, 0, 429, 430,
	0, 505, 512, 513, 479, 99, 108, 155, 264, 203,
	133, 252, 412, 425, 126, 435, 0, 0, 448, 453,
	454, 466, 468, 469, 470, 471, 478, 485, 486, 488,
	494, 495, 496, 497, 502, 509, 528, 101, 102, 109,
	115, 121, 125, 129, 132, 137, 140, 143, 145, 146,
	147, 150, 160, 163, 164, 165, 166, 176, 177, 178,
	180, 183, 184, 185, 186, 187, 190, 192, 193, 194,
	195, 196, 197, 204, 207, 213, 214, 215, 216, 217,
	218, 219, 221, 222, 223, 224, 230, 233, 239, 240,
	249, 256, 260, 516, 504, 0, 461, 519, 434, 451,
	527, 452, 455, 492, 419, 474, 182, 449, 0, 438,
	414, 444, 415, 436, 463, 128, 433, 506, 477, 518,
	154, 517, 467, 525, 156, 483, 0, 228, 170, 0,
	0, 465, 508, 472, 501, 460, 493, 424, 482, 520,
	450, 490, 521, 0, 0, 0, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 118, 0, 487, 515, 446,
	489, 491, 413, 484, 0, 417, 420, 526, 511, 441,
	442, 0, 0, 0, 0, 0, 0, 0, 464, 473,
	498, 458, 0, 0, 0, 0, 0, 0, 865, 0,
	439, 0, 481, 0, 0, 0, 421, 418, 0, 0,
	462, 0, 0, 0, 423, 0, 440, 499, 0, 410,
	136, 0, 0, 503, 510, 459, 257, 514, 457, 456,
	201, 0, 232, 139, 153, 114, 100, 110, 0, 138,
	179, 208, 212, 447, 411, 507, 437, 445, 122, 443,
	210, 189, 248, 0, 480, 191, 209, 157, 238, 202,
	247, 258, 259, 235, 255, 263, 225, 103, 234, 246,
	119, 220, 105, 244, 231, 168, 148, 149, 104, 0,
	206, 127, 134, 124, 181, 241, 242, 123, 266, 111,
	254, 107, 112, 253, 175, 237, 245, 169, 162, 106,
	243, 167, 161, 152, 131, 141, 199, 159, 200, 142,
	172, 171, 173, 0, 416, 0, 229, 251, 267, 116,
	432, 0, 236, 261, 262, 0, 0, 117, 135, 130,
	198, 174, 113, 144, 226, 151, 158, 205, 265, 188,
	211, 120, 250, 227, 428, 431, 426, 427, 475, 476,
	522, 523, 524, 500, 422, 0, 429, 430, 0, 505,
	512, 513, 479, 99, 108, 155, 264, 203, 133, 252,
	412, 425, 126, 435, 0, 0, 448, 453, 454, 466,
	468, 469, 470, 471, 478, 485, 486, 488, 494, 495,
	496, 497, 502, 509, 528, 101, 102, 109, 115, 121,
	125, 129, 132, 137, 140, 143, 145, 146, 147, 150,
	160, 163, 164, 165, 166, 176, 177, 178, 180, 183,
	184, 185, 186, 187, 190, 192, 193, 194, 195, 196,
	197, 204, 207, 213, 214, 215, 216, 217, 218, 219,
	221, 222, 223, 224, 230, 233, 239, 240, 249, 256,
	260, 516, 504, 0, 461, 519, 434, 451, 527, 452,
	455, 492, 419, 474, 182, 449, 0, 438, 414, 444,
	415, 436, 463, 128, 433, 506, 477, 518, 154, 517,
	467, 525, 156, 483, 0, 228, 170, 0, 0, 465,
	508, 472, 501, 460, 493, 424, 482, 520, 450, 490,
	521, 0, 0, 0, 408, 0, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 487, 515, 446, 489, 491,
	413, 484, 0, 417, 420, 526, 511, 441, 442, 0,
	0, 0, 0, 0, 0, 0, 464, 473, 498, 458,
	0, 0, 0, 0, 0, 0, 0, 0, 439, 0,
	481, 0, 0, 0, 421, 418, 0, 0, 462, 0,
	0, 0, 423, 0, 440, 499, 0, 410, 136, 0,
	0, 503, 510, 459, 257, 514, 457, 456, 201, 0,
	232, 139, 153, 114, 100, 110, 0, 138, 179, 208,
	212, 447, 411, 507, 437, 445, 122, 443, 210, 189,
	248, 0, 480, 191, 209, 157, 238, 202, 247, 258,
	259, 235, 255, 263, 225, 103, 234, 246, 119, 220,
	105, 244, 231, 168, 148, 149, 104, 0, 206, 127,
	134, 124, 181, 241, 242, 123, 266, 111, 254, 107,
	112, 253, 175, 237, 245, 169, 162, 106, 243, 167,
	161, 152, 131, 141, 199, 159, 200, 142, 172, 171,
	173, 0, 416, 0, 229, 251, 267, 116, 432, 0,
	236, 261, 262, 0, 0, 117, 135, 130, 198, 174,
	113, 144, 226, 151, 158, 205, 265, 188, 211, 120,
	250, 227, 428, 431, 426, 427, 475, 476, 522, 523,
	524, 500, 422, 0, 429, 430, 0, 505, 512, 513,
	479, 99, 108, 155, 264, 203, 133, 252, 412, 425,
	126, 435, 0, 0, 448, 453, 454, 466, 468, 469,
	470, 471, 478, 485, 486, 488, 494, 495, 496, 497,
	502, 509, 528, 101, 102, 109, 115, 121, 125, 129,
	132, 137, 140, 143, 145, 146, 147, 150, 160, 163,
	164, 165, 166, 176, 177, 178, 180, 183, 184, 185,
	186, 187, 190, 192, 193, 194, 195, 196, 197, 204,
	207, 213, 214, 215, 216, 217, 218, 219, 221, 222,
	223, 224, 230, 233, 239, 240, 249, 256, 260, 516,
	504, 0, 461, 519, 434, 451, 527, 452, 455, 492,
	419, 474, 182, 449, 0, 438, 414, 444, 415, 436,
	463, 128, 433, 506, 477, 518, 154, 517, 467, 525,
	156, 483, 0, 228, 170, 0, 0, 465, 508, 472,
	501, 460, 493, 424, 482, 520, 450, 490, 521, 0,
	0, 0, 329, 0, 0, 0, 0, 0, 0, 0,
	0, 118, 0, 487, 515, 446, 489, 491, 413, 484,
	0, 417, 420, 526, 511, 441, 442, 0, 0, 0,
	0, 0, 0, 0, 464, 473, 498, 458, 0, 0,
	0, 0, 0, 0, 0, 0, 439, 0, 481, 0,
	0, 0, 421, 418, 0, 0, 462, 0, 0, 0,
	423, 0, 440, 499, 0, 410, 136, 0, 0, 503,
	510, 459, 257, 514, 457, 456, 201, 0, 232, 139,
	153, 114, 100, 110, 0, 138, 179, 208, 212, 447,
	411, 507, 437, 445, 122, 443, 210, 189, 248, 0,
	480, 191, 209, 157, 238, 202, 247, 258, 259, 235,
	255, 263, 225, 103, 234, 246, 119, 220, 105, 244,
	231, 168, 148, 149, 104, 0, 206, 127, 134, 124,
	181, 241, 242, 123, 266, 111, 254, 107, 112, 253,
	175, 237, 245, 169, 162, 106, 243, 167, 161, 152,
	131, 141, 199, 159, 200, 142, 172, 171, 173, 0,
	416, 0, 229, 251, 267, 116, 432, 0, 236, 261,
	262, 0, 0, 117, 135, 130, 198, 174, 113, 144,
	226, 151, 158, 205, 265, 188, 211, 120, 250, 227,
	428, 431, 426, 427, 475, 476, 522, 523, 524, 500,
	422, 0, 429, 430, 0, 505, 512, 513, 479, 99,
	108, 155, 264, 203, 133, 252, 412, 425, 126, 435,
	0, 0, 448, 453, 454, 466, 468, 469, 470, 471,
	478, 485, 486, 488, 494, 495, 496, 497, 502, 509,
	528, 101, 102, 109, 115, 121, 125, 129, 132, 137,
	140, 143, 145, 146, 147, 150, 160, 163, 164, 165,
	166, 176, 177, 178, 180, 183, 184, 185, 186, 187,
	190, 192, 193, 194, 195, 196, 197, 204, 207, 213,
	214, 215, 216, 217, 218, 219, 221, 222, 223, 224,
	230, 233, 239, 240, 249, 256, 260, 516, 504, 0,
	461, 519, 434, 451, 527, 452, 455, 492, 419, 474,
	182, 449, 0, 438, 414, 444, 415, 436, 463, 128,
	433, 506, 477, 518, 154, 517, 467, 525, 156, 483,
	0, 228, 170, 0, 0, 465, 508, 472, 501, 460,
	493, 424, 482, 520, 450, 490, 521, 0, 0, 0,
	408, 0, 0, 0, 0, 0, 0, 0, 0, 118,
	0, 487, 515, 446, 489, 491, 413, 484, 0, 417,
	420, 526, 511, 441, 442, 0, 0, 0, 0, 0,
	0, 0, 464, 473, 498, 458, 0, 0, 0, 0,
	0, 0, 0, 0, 439, 0, 481, 0, 0, 0,
	421, 418, 0, 0, 462, 0, 0, 0, 423, 0,
	440, 499, 0, 410, 136, 0, 0, 503, 510, 459,
	257, 514, 457, 456, 201, 0, 232, 139, 153, 114,
	100, 110, 0, 138, 179, 208, 212, 447, 411, 507,
	437, 445, 122, 443, 210, 189, 248, 0, 480, 191,
	209, 157, 238, 202, 247, 258, 259, 235, 255, 263,
	225, 103, 234, 246, 119, 220, 105, 244, 231, 168,
	148, 149, 104, 0, 206, 127, 134, 124, 181, 241,
	242, 123, 266, 111, 254, 107, 406, 253, 175, 237,
	245, 169, 162, 106, 243, 167, 161, 152, 131, 141,
	199, 159, 200, 142, 172, 171, 173, 0, 416, 0,
	229, 251, 267, 116, 432, 0, 236, 261, 262, 0,
	0, 117, 135, 130, 198, 407, 405, 144, 226, 151,
	158, 205, 265, 188, 211, 120, 250, 227, 428, 431,
	426, 427, 475, 476, 522, 523, 524, 500, 422, 0,
	429, 430, 0, 505, 512, 513, 479, 99, 108, 155,
	264, 203, 133, 252, 412, 425, 126, 435, 0, 0,
	448, 453, 454, 466, 468, 469, 470, 471, 478, 485,
	486, 488, 494, 495, 496, 497, 502, 509, 528, 101,
	102, 109, 115, 121, 125, 129, 132, 137, 140, 143,
	145, 146, 147, 150, 160, 163, 164, 165, 166, 176,
	177, 178, 180, 183, 184, 185, 186, 187, 190, 192,
	193, 194, 195, 196, 197, 204, 207, 213, 214, 215,
	216, 217, 218, 219, 221, 222, 223, 224, 230, 233,
	239, 240, 249, 256, 260, 516, 504, 0, 461, 519,
	434, 451, 527, 452, 455, 492, 419, 474, 182, 449,
	0, 438, 414, 444, 415, 436, 463, 128, 433, 506,
	477, 518, 154, 517, 467, 525, 156, 483, 0, 228,
	170, 0, 0, 465, 508, 472, 501, 460, 493, 424,
	482, 520, 450, 490, 521, 0, 0, 0, 97, 0,
	0, 0, 0, 0, 0, 0, 0, 118, 0, 487,
	515, 446, 489, 491, 413, 484, 0, 417, 420, 526,
	511, 441, 442, 0, 0, 0, 0, 0, 0, 0,
	464, 473, 498, 458, 0, 0, 0, 0, 0, 0,
	0, 0, 439, 0, 481, 0, 0, 0, 421, 418,
	0, 0, 462, 0, 0, 0, 423, 0, 440, 499,
	0, 410, 136, 0, 0, 503, 510, 459, 257, 514,
	457, 456, 201, 0, 232, 139, 153, 114, 100, 110,
	0, 138, 179, 208, 212, 447, 411, 507, 437, 445,
	122, 443, 210, 189, 248, 0, 480, 191, 209, 157,
	238, 202, 247, 258, 259, 235, 255, 263, 225, 103,
	234, 246, 119, 220, 105, 244, 231, 168, 148, 149,
	104, 0, 206, 127, 134, 124, 181, 241, 242, 123,
	266, 111, 254, 107, 112, 253, 175, 237, 245, 169,
	162, 106, 243, 167, 161, 152, 131, 141, 199, 159,
	200, 142, 172, 171, 173, 0, 416, 0, 229, 251,
	267, 116, 432, 0, 236, 261, 262, 0, 0, 117,
	135, 130, 198, 174, 113, 144, 226, 151, 158, 205,
	265, 188, 211, 120, 250, 227, 428, 431, 426, 427,
	475, 476, 522, 523, 524, 500, 422, 0, 429, 430,
	0, 505, 512, 513, 479, 99, 108, 155, 264, 203,
	133, 252, 412, 425, 126, 435, 0, 0, 448, 453,
	454, 466, 468, 469, 470, 471, 478, 485, 486, 488,
	494, 495, 496, 497, 502, 509, 528, 101, 102, 109,
	115, 121, 125, 129, 132, 137, 140, 143, 145, 146,
	147, 150, 160, 163, 164, 165, 166, 176, 177, 178,
	180, 183, 184, 185, 186, 187, 190, 192, 193, 194,
	195, 196, 197, 204, 207, 213, 214, 215, 216, 217,
	218, 219, 221, 222, 223, 224, 230, 233, 239, 240,
	249, 256, 260, 516, 504, 0, 461, 519, 434, 451,
	527, 452, 455, 492, 419, 474, 182, 449, 0, 438,
	414, 444, 415, 436, 463, 128, 433, 506, 477, 518,
	154, 517, 467, 525, 156, 483, 0, 228, 170, 0,
	0, 465, 508, 472, 501, 460, 493, 424, 482, 520,
	450, 490, 521, 0, 0, 0, 408, 0, 0, 0,
	0, 0, 0, 0, 0, 118, 0, 487, 515, 446,
	489, 491, 413, 484, 0, 417, 420, 526, 511, 441,
	442, 0, 0, 0, 0, 0, 0, 0, 464, 473,
	498, 458, 0, 0, 0, 0, 0, 0, 0, 0,
	439, 0, 481, 0, 0, 0, 421, 418, 0, 0,
	462, 0, 0, 0, 423, 0, 440, 499, 0, 410,
	136, 0, 0, 503, 510, 459, 257, 514, 457, 456,
	201, 0, 232, 139, 153, 114, 100, 110, 0, 138,
	179, 208, 212, 447, 411, 507, 437, 445, 122, 443,
	210, 189, 248, 0, 480, 191, 209, 157, 238, 202,
	247, 258, 259, 235, 255, 263, 225, 103, 234, 728,
	119, 220, 105, 244, 231, 168, 148, 149, 104, 0,
	206, 127, 134, 124, 181, 241, 242, 123, 266, 111,
	254, 107, 406, 253, 175, 237, 245, 169, 162, 106,
	243, 167, 161, 152, 131, 141, 199, 159, 200, 142,
	172, 171, 173, 0, 416, 0, 229, 251, 267, 116,
	432, 0, 236, 261, 262, 0, 0, 117, 135, 130,
	198, 407, 405, 144, 226, 151, 158, 205, 265, 188,
	211, 120, 250, 227, 428, 431, 426, 427, 475, 476,
	522, 523, 524, 500, 422, 0, 429, 430, 0, 505,
	512, 513, 479, 99, 108, 155, 264, 203, 133, 252,
	412, 425, 126, 435, 0, 0, 448, 453, 454, 466,
	468, 469, 470, 471, 478, 485, 486, 488, 494, 495,
	496, 497, 502, 509, 528, 101, 102, 109, 115, 121,
	125, 129, 132, 137, 140, 143, 145, 146, 147, 150,
	160, 163, 164, 165, 166, 176, 177, 178, 180, 183,
	184, 185, 186, 187, 190, 192, 193, 194, 195, 196,
	197, 204, 207, 213, 214, 215, 216, 217, 218, 219,
	221, 222, 223, 224, 230, 233, 239, 240, 249, 256,
	260, 516, 504, 0, 461, 519, 434, 451, 527, 452,
	455, 492, 419, 474, 182, 449, 0, 438, 414, 444,
	415, 436, 463, 128, 433, 506, 477, 518, 154, 517,
	467, 525, 156, 483, 0, 228, 170, 0, 0, 465,
	508, 472, 501, 460, 493, 424, 482, 520, 450, 490,
	521, 0, 0, 0, 408, 0, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 487, 515, 446, 489, 491,
	413, 484, 0, 417, 420, 526, 511, 441, 442, 0,
	0, 0, 0, 0, 0, 0, 464, 473, 498, 458,
	0, 0, 0, 0, 0, 0, 0, 0, 439, 0,
	481, 0, 0, 0, 421, 418, 0, 0, 462, 0,
	0, 0, 423, 0, 440, 499, 0, 410, 136, 0,
	0, 503, 510, 459, 257, 514, 457, 456, 201, 0,
	232, 139, 153, 114, 100, 110, 0, 138, 179, 208,
	212, 447, 411, 507, 437, 445, 122, 443, 210, 189,
	248, 0, 480, 191, 209, 157, 238, 202, 247, 258,
	259, 235, 255, 263, 225, 103, 234, 397, 119, 220,
	105, 244, 231, 168, 148, 149, 104, 0, 206, 127,
	134, 124, 181, 241, 242, 123, 266, 111, 254, 107,
	406, 253, 175, 237, 245, 169, 162, 106, 243, 167,
	161, 152, 131, 141, 199, 159, 200, 142, 172, 171,
	173, 0, 416, 0, 229, 251, 267, 116, 432, 0,
	236, 261, 262, 0, 0, 117, 135, 130, 198, 407,
	405, 400, 399, 151, 158, 205, 265, 188, 211, 120,
	250, 227, 428, 431, 426, 427, 475, 476, 522, 523,
	524, 500, 422, 0, 429, 430, 0, 505, 512, 513,
	479, 99, 108, 155, 264, 203, 133, 252, 412, 425,
	126, 435, 0, 0, 448, 453, 454, 466, 468, 469,
	470, 471, 478, 485, 486, 488, 494, 495, 496, 497,
	502, 509, 528, 101, 102, 109, 115, 121, 125, 129,
	132, 137, 140, 143, 145, 146, 147, 150, 160, 163,
	164, 165, 166, 176, 177, 178, 180, 183, 184, 185,
	186, 187, 190, 192, 193, 194, 195, 196, 197, 204,
	207, 213, 214, 215, 216, 217, 218, 219, 221, 222,
	223, 224, 230, 233, 239, 240, 249, 256, 260, 182,
	0, 0, 0, 0, 331, 0, 0, 0, 128, 328,
	0, 0, 0, 154, 0, 0, 372, 156, 0, 0,
	228, 170, 0, 0, 0, 0, 362, 363, 0, 0,
	0, 0, 0, 0, 974, 0, 61, 0, 0, 329,
	350, 349, 352, 353, 354, 355, 0, 0, 118, 351,
	356, 357, 358, 975, 0, 0, 326, 343, 0, 371,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 340,
	341, 0, 0, 0, 0, 385, 0, 342, 0, 0,
	337, 338, 339, 344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 0, 0, 0, 0, 0, 257,
	0, 0, 383, 201, 0, 232, 139, 153, 114, 100,
	110, 0, 138, 179, 208, 212, 369, 0, 0, 0,
	0, 122, 0, 210, 189, 248, 0, 0, 191, 209,
	157, 238, 202, 247, 258, 259, 235, 255, 263, 225,
	103, 234, 246, 119, 220, 105, 244, 231, 168, 148,
	149, 104, 0, 206, 127, 134, 124, 181, 241, 242,
	123, 266, 111, 254, 107, 112, 253, 175, 237, 245,
	169, 162, 106, 243, 167, 161, 152, 131, 141, 199,
	159, 200, 142, 172, 171, 173, 0, 0, 0, 229,
	251, 267, 116, 0, 0, 236, 261, 262, 0, 0,
	117, 135, 130, 198, 174, 113, 144, 226, 151, 158,
	205, 265, 188, 211, 120, 250, 227, 373, 384, 379,
	380, 377, 378, 376, 375, 374, 386, 364, 365, 366,
	367, 370, 0, 381, 382, 368, 99, 108, 155, 264,
	203, 133, 252, 0, 0, 126, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 102,
	109, 115, 121, 125, 129, 132, 137, 140, 143, 145,
	146, 147, 150, 160, 163, 164, 165, 166, 176, 177,
	178, 180, 183, 184, 185, 186, 187, 190, 192, 193,
	194, 195, 196, 197, 204, 207, 213, 214, 215, 216,
	217, 218, 219, 221, 222, 223, 224, 230, 233, 239,
	240, 249, 256, 260, 182, 0, 0, 0, 0, 331,
	0, 0, 0, 128, 328, 0, 0, 0, 154, 0,
	0, 372, 156, 0, 0, 228, 170, 0, 0, 0,
	0, 362, 363, 0, 0, 0, 0, 0, 0, 0,
	0, 61, 0, 593, 329, 350, 349, 352, 353, 354,
	355, 0, 0, 118, 351, 356, 357, 358, 0, 0,
	0, 326, 343, 0, 371, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 340, 341, 0, 0, 0, 0,
	385, 0, 342, 0, 0, 337, 338, 339, 344, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 0,
	0, 0, 0, 0, 257, 0, 0, 383, 201, 0,
	232, 139, 153, 114, 100, 110, 0, 138, 179, 208,
	212, 369, 0, 0, 0, 0, 122, 0, 210, 189,
	248, 0, 0, 191, 209, 157, 238, 202, 247, 258,
	259, 235, 255, 263, 225, 103, 234, 246, 119, 220,
	105, 244, 231, 168, 148, 149, 104, 0, 206, 127,
	134, 124, 181, 241, 242, 123, 266, 111, 254, 107,
	112, 253, 175, 237, 245, 169, 162, 106, 243, 167,
	161, 152, 131, 141, 199, 159, 200, 142, 172, 171,
	173, 0, 0, 0, 229, 251, 267, 116, 0, 0,
	236, 261, 262, 0, 0, 117, 135, 130, 198, 174,
	113, 144, 226, 151, 158, 205, 265, 188, 211, 120,
	250, 227, 373, 384, 379, 380, 377, 378, 376, 375,
	374, 386, 364, 365, 366, 367, 370, 0, 381, 382,
	368, 99, 108, 155, 264, 203, 133, 252, 0, 0,
	126, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 102, 109, 115, 121, 125, 129,
	132, 137, 140, 143, 145, 146, 147, 150, 160, 163,
	164, 165, 166, 176, 177, 178, 180, 183, 184, 185,
	186, 187, 190, 192, 193, 194, 195, 196, 197, 204,
	207, 213, 214, 215, 216, 217, 218, 219, 221, 222,
	223, 224, 230, 233, 239, 240, 249, 256, 260, 182,
	0, 0, 0, 0, 331, 0, 0, 0, 128, 328,
	0, 0, 0, 154, 0, 0, 372, 156, 0, 0,
	228, 170, 0, 0, 0, 0, 362, 363, 0, 0,
	0, 0, 0, 0, 0, 0, 61, 0, 0, 329,
	350, 349, 352, 353, 354, 355, 0, 0, 118, 351,
	356, 357, 358, 0, 0, 0, 326, 343, 0, 371,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 340,
	341, 322, 0, 0, 0, 385, 0, 342, 0, 0,
	337, 338, 339, 344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 0, 0, 0, 0, 0, 257,
	0, 0, 383, 201, 0, 232, 139, 153, 114, 100,
	110, 0, 138, 179, 208, 212, 369, 0, 0, 0,
	0, 122, 0, 210, 189, 248, 0, 0, 191, 209,
	157, 238, 202, 247, 258, 259, 235, 255, 263, 225,
	103, 234, 246, 119, 220, 105, 244, 231, 168, 148,
	149, 104, 0, 206, 127, 134, 124, 181, 241, 242,
	123, 266, 111, 254, 107, 112, 253, 175, 237, 245,
	169, 162, 106, 243, 167, 161, 152, 131, 141, 199,
	159, 200, 142, 172, 171, 173, 0, 0, 0, 229,
	251, 267, 116, 0, 0, 236, 261, 262, 0, 0,
	117, 135, 130, 198, 174, 113, 144, 226, 151, 158,
	205, 265, 188, 211, 120, 250, 227, 373, 384, 379,
	380, 377, 378, 376, 375, 374, 386, 364, 365, 366,
	367, 370, 0, 381, 382, 368, 99, 108, 155, 264,
	203, 133, 252, 0, 0, 126, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 102,
	109, 115, 121, 125, 129, 132, 137, 140, 143, 145,
	146, 147, 150, 160, 163, 164, 165, 166, 176, 177,
	178, 180, 183, 184, 185, 186, 187, 190, 192, 193,
	194, 195, 196, 197, 204, 207, 213, 214, 215, 216,
	217, 218, 219, 221, 222, 223, 224, 230, 233, 239,
	240, 249, 256, 260, 182, 0, 0, 0, 0, 331,
	0, 0, 0, 128, 328, 0, 0, 0, 154, 0,
	0, 372, 156, 0, 0, 228, 170, 0, 0, 0,
	0, 362, 363, 0, 0, 0, 0, 0, 0, 0,
	0, 61, 0, 0, 329, 350, 914, 352, 353, 354,
	355, 0, 0, 118, 351, 356, 357, 358, 0, 0,
	0, 326, 343, 0, 371, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 340, 341, 322, 0, 0, 0,
	385, 0, 342, 0, 0, 337, 338, 339, 344, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 0,
	0, 0, 0, 0, 257, 0, 0, 383, 201, 0,
	232, 139, 153, 114, 100, 110, 0, 138, 179, 208,
	212, 369, 0, 0, 0, 0, 122, 0, 210, 189,
	248, 0, 0, 191, 209, 157, 238, 202, 247, 258,
	259, 235, 255, 263, 225, 103, 234, 246, 119, 220,
	105, 244, 231, 168, 148, 149, 104, 0, 206, 127,
	134, 124, 181, 241, 242, 123, 266, 111, 254, 107,
	112, 253, 175, 237, 245, 169, 162, 106, 243, 167,
	161, 152, 131, 141, 199, 159, 200, 142, 172, 171,
	173, 0, 0, 0, 229, 251, 267, 116, 0, 0,
	236, 261, 262, 0, 0, 117, 135, 130, 198, 174,
	113, 144, 226, 151, 158, 205, 265, 188, 211, 120,
	250, 227, 373, 384, 379, 380, 377, 378, 376, 375,
	374, 386, 364, 365, 366, 367, 370, 0, 381, 382,
	368, 99, 108, 155, 264, 203, 133, 252, 0, 0,
	126, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 102, 109, 115, 121, 125, 129,
	132, 137, 140, 143, 145, 146, 147, 150, 160, 163,
	164, 165, 166, 176, 177, 178, 180, 183, 184, 185,
	186, 187, 190, 192, 193, 194, 195, 196, 197, 204,
	207, 213, 214, 215, 216, 217, 218, 219, 221, 222,
	223, 224, 230, 233, 239, 240, 249, 256, 260, 182,
	0, 0, 0, 0, 331, 0, 0, 0, 128, 328,
	0, 0, 0, 154, 0, 0, 372, 156, 0, 0,
	228, 170, 0, 0, 0, 0, 362, 363, 0, 0,
	0, 0, 0, 0, 0, 0, 61, 0, 0, 329,
	350, 911, 352, 353, 354, 355, 0, 0, 118, 351,
	356, 357, 358, 0, 0, 0, 326, 343, 0, 371,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 340,
	341, 322, 0, 0, 0, 385, 0, 342, 0, 0,
	337, 338, 339, 344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 0, 0, 0, 0, 0, 257,
	0, 0, 383, 201, 0, 232, 139, 153, 114, 100,
	110, 0, 138, 179, 208, 212, 369, 0, 0, 0,
	0, 122, 0, 210, 189, 248, 0, 0, 191, 209,
	157, 238, 202, 247, 258, 259, 235, 255, 263, 225,
	103, 234, 246, 119, 220, 105, 244, 231, 168, 148,
	149, 104, 0, 206, 127, 134, 124, 181, 241, 242,
	123, 266, 111, 254, 107, 112, 253, 175, 237, 245,
	169, 162, 106, 243, 167, 161, 152, 131, 141, 199,
	159, 200, 142, 172, 171, 173, 0, 0, 0, 229,
	251, 267, 116, 0, 0, 236, 261, 262, 0, 0,
	117, 135, 130, 198, 174, 113, 144, 226, 151, 158,
	205, 265, 188, 211, 120, 250, 227, 373, 384, 379,
	380, 377, 378, 376, 375, 374, 386, 364, 365, 366,
	367, 370, 0, 381, 382, 368, 99, 108, 155, 264,
	203, 133, 252, 0, 0, 126, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 102,
	109, 115, 121, 125, 129, 132, 137, 140, 143, 145,
	146, 147, 150, 160, 163, 164, 165, 166, 176, 177,
	178, 180, 183, 184, 185, 186, 187, 190, 192, 193,
	194, 195, 196, 197, 204, 207, 213, 214, 215, 216,
	217, 218, 219, 221, 222, 223, 224, 230, 233, 239,
	240, 249, 256, 260, 26, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 182, 0, 0, 0,
	0, 331, 0, 0, 0, 128, 328, 0, 0, 0,
	154, 0, 0, 372, 156, 0, 0, 228, 170, 0,
	0, 0, 0, 362, 363, 0, 0, 0, 0, 0,
	0, 0, 0, 61, 0, 0, 329, 350, 349, 352,
	353, 354, 355, 0, 0, 118, 351, 356, 357, 358,
	0, 0, 0, 326, 343, 0, 371, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 340, 341, 0, 0,
	0, 0, 385, 0, 342, 0, 0, 337, 338, 339,
	344, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	136, 0, 0, 0, 0, 0, 257, 0, 0, 383,
	201, 0, 232, 139, 153, 114, 100, 110, 0, 138,
	179, 208, 212, 369, 0, 0, 0, 0, 122, 0,
	210, 189, 248, 0, 0, 191, 209, 157, 238, 202,
	247, 258, 259, 235, 255, 263, 225, 103, 234, 246,
	119, 220, 105, 244, 231, 168, 148, 149, 104, 0,
	206, 127, 134, 124, 181, 241, 242, 123, 266, 111,
	254, 107, 112, 253, 175, 237, 245, 169, 162, 106,
	243, 167, 161, 152, 131, 141, 199, 159, 200, 142,
	172, 171, 173, 0, 0, 0, 229, 251, 267, 116,
	0, 0, 236, 261, 262, 0, 0, 117, 135, 130,
	198, 174, 113, 144, 226, 151, 158, 205, 265, 188,
	211, 120, 250, 227, 373, 384, 379, 380, 377, 378,
	376, 375, 374, 386, 364, 365, 366, 367, 370, 0,
	381, 382, 368, 99, 108, 155, 264, 203, 133, 252,
	0, 0, 126, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 102, 109, 115, 121,
	125, 129, 132, 137, 140, 143, 145, 146, 147, 150,
	160, 163, 164, 165, 166, 176, 177, 178, 180, 183,
	184, 185, 186, 187, 190, 192, 193, 194, 195, 196,
	197, 204, 207, 213, 214, 215, 216, 217, 218, 219,
	221, 222, 223, 224, 230, 233, 239, 240, 249, 256,
	260, 182, 0, 0, 0, 0, 331, 0, 0, 0,
	128, 328, 0, 0, 0, 154, 0, 0, 372, 156,
	0, 0, 228, 170, 0, 0, 0, 0, 362, 363,
	0, 0, 0, 0, 0, 0, 0, 0, 61, 0,
	0, 329, 350, 349, 352, 353, 354, 355, 0, 0,
	118, 351, 356, 357, 358, 0, 0, 0, 326, 343,
	0, 371, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 340, 341, 0, 0, 0, 0, 385, 0, 342,
	0, 0, 337, 338, 339, 344, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 136, 0, 0, 0, 0,
	0, 257, 0, 0, 383, 201, 0, 232, 139, 153,
	114, 100, 110, 0, 138, 179, 208, 212, 369, 0,
	0, 0, 0, 122, 0, 210, 189, 248, 0, 0,
	191, 209, 157, 238, 202, 247, 258, 259, 235, 255,
	263, 225, 103, 234, 246, 119, 220, 105, 244, 231,
	168, 148, 149, 104, 0, 206, 127, 134, 124, 181,
	241, 242, 123, 266, 111, 254, 107, 112, 253, 175,
	237, 245, 169, 162, 106, 243, 167, 161, 152, 131,
	141, 199, 159, 200, 142, 172, 171, 173, 0, 0,
	0, 229, 251, 267, 116, 0, 0, 236, 261, 262,
	0, 0, 117, 135, 130, 198, 174, 113, 144, 226,
	151, 158, 205, 265, 188, 211, 120, 250, 227, 373,
	384, 379, 380, 377, 378, 376, 375, 374, 386, 364,
	365, 366, 367, 370, 0, 381, 382, 368, 99, 108,
	155, 264, 203, 133, 252, 0, 0, 126, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 102, 109, 115, 121, 125, 129, 132, 137, 140,
	143, 145, 146, 147, 150, 160, 163, 164, 165, 166,
	176, 177, 178, 180, 183, 184, 185, 186, 187, 190,
	192, 193, 194, 195, 196, 197, 204, 207, 213, 214,
	215, 216, 217, 218, 219, 221, 222, 223, 224, 230,
	233, 239, 240, 249, 256, 260, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 0, 0, 0, 0,
	154, 0, 0, 372, 156, 0, 0, 228, 170, 0,
	0, 0, 0, 362, 363, 0, 0, 0, 0, 0,
	0, 0, 0, 61, 0, 0, 329, 350, 349, 352,
	353, 354, 355, 0, 0, 118, 351, 356, 357, 358,
	0, 0, 0, 0, 343, 0, 371, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 340, 341, 0, 0,
	0, 0, 385, 0, 342, 0, 0, 337, 338, 339,
	344, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	136, 0, 0, 0, 0, 0, 257, 0, 0, 383,
	201, 0, 232, 139, 153, 114, 100, 110, 0, 138,
	179, 208, 212, 369, 0, 0, 0, 0, 122, 0,
	210, 189, 248, 0, 1577, 191, 209, 157, 238, 202,
	247, 258, 259, 235, 255, 263, 225, 103, 234, 246,
	119, 220, 105, 244, 231, 168, 148, 149, 104, 0,
	206, 127, 134, 124, 181, 241, 242, 123, 266, 111,
	254, 107, 112, 253, 175, 237, 245, 169, 162, 106,
	243, 167, 161, 152, 131, 141, 199, 159, 200, 142,
	172, 171, 173, 0, 0, 0, 229, 251, 267, 116,
	0, 0, 236, 261, 262, 0, 0, 117, 135, 130,
	198, 174, 113, 144, 226, 151, 158, 205, 265, 188,
	211, 120, 250, 227, 373, 384, 379, 380, 377, 378,
	376, 375, 374, 386, 364, 365, 366, 367, 370, 0,
	381, 382, 368, 99, 108, 155, 264, 203, 133, 252,
	0, 0, 126, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 102, 109, 115, 121,
	125, 129, 132, 137, 140, 143, 145, 146, 147, 150,
	160, 163, 164, 165, 166, 176, 177, 178, 180, 183,
	184, 185, 186, 187, 190, 192, 193, 194, 195, 196,
	197, 204, 207, 213, 214, 215, 216, 217, 218, 219,
	221, 222, 223, 224, 230, 233, 239, 240, 249, 256,
	260, 182, 0, 0, 0, 0, 0, 0, 0, 0,
	128, 0, 0, 0, 0, 154, 0, 0, 372, 156,
	0, 0, 228, 170, 0, 0, 0, 0, 362, 363,
	0, 0, 0, 0, 0, 0, 0, 0, 61, 0,
	593, 329, 350, 349, 352, 353, 354, 355, 0, 0,
	118, 351, 356, 357, 358, 0, 0, 0, 0, 343,
	0, 371, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 340, 341, 0, 0, 0, 0, 385, 0, 342,
	0, 0, 337, 338, 339, 344, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 136, 0, 0, 0, 0,
	0, 257, 0, 0, 383, 201, 0, 232, 139, 153,
	114, 100, 110, 0, 138, 179, 208, 212, 369, 0,
	0, 0, 0, 122, 0, 210, 189, 248, 0, 0,
	191, 209, 157, 238, 202, 247, 258, 259, 235, 255,
	263, 225, 103, 234, 246, 119, 220, 105, 244, 231,
	168, 148, 149, 104, 0, 206, 127, 134, 124, 181,
	241, 242, 123, 266, 111, 254, 107, 112, 253, 175,
	237, 245, 169, 162, 106, 243, 167, 161, 152, 131,
	141, 199, 159, 200, 142, 172, 171, 173, 0, 0,
	0, 229, 251, 267, 116, 0, 0, 236, 261, 262,
	0, 0, 117, 135, 130, 198, 174, 113, 144, 226,
	151, 158, 205, 265, 188, 211, 120, 250, 227, 373,
	384, 379, 380, 377, 378, 376, 375, 374, 386, 364,
	365, 366, 367, 370, 0, 381, 382, 368, 99, 108,
	155, 264, 203, 133, 252, 0, 0, 126, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 102, 109, 115, 121, 125, 129, 132, 137, 140,
	143, 145, 146, 147, 150, 160, 163, 164, 165, 166,
	176, 177, 178, 180, 183, 184, 185, 186, 187, 190,
	192, 193, 194, 195, 196, 197, 204, 207, 213, 214,
	215, 216, 217, 218, 219, 221, 222, 223, 224, 230,
	233, 239, 240, 249, 256, 260, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 0, 0, 0, 0,
	154, 0, 0, 372, 156, 0, 0, 228, 170, 0,
	0, 0, 0, 362, 363, 0, 0, 0, 0, 0,
	0, 0, 0, 61, 0, 0, 329, 350, 349, 352,
	353, 354, 355, 0, 0, 118, 351, 356, 357, 358,
	0, 0, 0, 0, 343, 0, 371, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 340, 341, 0, 0,
	0, 0, 385, 0, 342, 0, 0, 337, 338, 339,
	344, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	136, 0, 0, 0, 0, 0, 257, 0, 0, 383,
	201, 0, 232, 139, 153, 114, 100, 110, 0, 138,
	179, 208, 212, 369, 0, 0, 0, 0, 122, 0,
	210, 189, 248, 0, 0, 191, 209, 157, 238, 202,
	247, 258, 259, 235, 255, 263, 225, 103, 234, 246,
	119, 220, 105, 244, 231, 168, 148, 149, 104, 0,
	206, 127, 134, 124, 181, 241, 242, 123, 266, 111,
	254, 107, 112, 253, 175, 237, 245, 169, 162, 106,
	243, 167, 161, 152, 131, 141, 199, 159, 200, 142,
	172, 171, 173, 0, 0, 0, 229, 251, 267, 116,
	0, 0, 236, 261, 262, 0, 0, 117, 135, 130,
	198, 174, 113, 144, 226, 151, 158, 205, 265, 188,
	211, 120, 250, 227, 373, 384, 379, 380, 377, 378,
	376, 375, 374, 386, 364, 365, 366, 367, 370, 0,
	381, 382, 368, 99, 108, 155, 264, 203, 133, 252,
	0, 0, 126, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 102, 109, 115, 121,
	125, 129, 132, 137, 140, 143, 145, 146, 147, 150,
	160, 163, 164, 165, 166, 176, 177, 178, 180, 183,
	184, 185, 186, 187, 190, 192, 193, 194, 195, 196,
	197, 204, 207, 213, 214, 215, 216, 217, 218, 219,
	221, 222, 223, 224, 230, 233, 239, 240, 249, 256,
	260, 182, 0, 0, 0, 0, 0, 0, 0, 0,
	128, 0, 0, 0, 0, 154, 0, 0, 0, 156,
	0, 0, 228, 170, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 408, 0, 0, 0, 0, 0, 0, 0, 0,
	118, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 634, 633, 643,
	644, 636, 637, 638, 639, 640, 641, 642, 635, 0,
	0, 645, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 136, 0, 0, 0, 0,
	0, 257, 0, 0, 0, 201, 0, 232, 139, 153,
	114, 100, 110, 0, 138, 179, 208, 212, 0, 0,
	0, 0, 0, 122, 0, 210, 189, 248, 0, 0,
	191, 209, 157, 238, 202, 247, 258, 259, 235, 255,
	263, 225, 103, 234, 246, 119, 220, 105, 244, 231,
	168, 148, 149, 104, 0, 206, 127, 134, 124, 181,
	241, 242, 123, 266, 111, 254, 107, 112, 253, 175,
	237, 245, 169, 162, 106, 243, 167, 161, 152, 131,
	141, 199, 159, 200, 142, 172, 171, 173, 0, 0,
	0, 229, 251, 267, 116, 0, 0, 236, 261, 262,
	0, 0, 117, 135, 130, 198, 174, 113, 144, 226,
	151, 158, 205, 265, 188, 211, 120, 250, 227, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 108,
	155, 264, 203, 133, 252, 0, 0, 126, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 102, 109, 115, 121, 125, 129, 132, 137, 140,
	143, 145, 146, 147, 150, 160, 163, 164, 165, 166,
	176, 177, 178, 180, 183, 184, 185, 186, 187, 190,
	192, 193, 194, 195, 196, 197, 204, 207, 213, 214,
	215, 216, 217, 218, 219, 221, 222, 223, 224, 230,
	233, 239, 240, 249, 256, 260, 182, 0, 0, 0,
	622, 0, 0, 0, 0, 128, 0, 0, 0, 0,
	154, 0, 0, 0, 156, 0, 0, 228, 170, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 408, 0, 624, 0,
	0, 0, 0, 0, 0, 118, 0, 0, 0, 0,
	0, 619, 618, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 620, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	136, 0, 0, 0, 0, 0, 257, 0, 0, 0,
	201, 0, 232, 139, 153, 114, 100, 110, 0, 138,
	179, 208, 212, 0, 0, 0, 0, 0, 122, 0,
	210, 189, 248, 0, 0, 191, 209, 157, 238, 202,
	247, 258, 259, 235, 255, 263, 225, 103, 234, 246,
	119, 220, 105, 244, 231, 168, 148, 149, 104, 0,
	206, 127, 134, 124, 181, 241, 242, 123, 266, 111,
	254, 107, 112, 253, 175, 237, 245, 169, 162, 106,
	243, 167, 161, 152, 131, 141, 199, 159, 200, 142,
	172, 171, 173, 0, 0, 0, 229, 251, 267, 116,
	0, 0, 236, 261, 262, 0, 0, 117, 135, 130,
	198, 174, 113, 144, 226, 151, 158, 205, 265, 188,
	211, 120, 250, 227, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 108, 155, 264, 203, 133, 252,
	0, 0, 126, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 102, 109, 115, 121,
	125, 129, 132, 137, 140, 143, 145, 146, 147, 150,
	160, 163, 164, 165, 166, 176, 177, 178, 180, 183,
	184, 185, 186, 187, 190, 192, 193, 194, 195, 196,
	197, 204, 207, 213, 214, 215, 216, 217, 218, 219,
	221, 222, 223, 224, 230, 233, 239, 240, 249, 256,
	260, 182, 0, 0, 0, 957, 0, 0, 0, 0,
	128, 0, 0, 0, 0, 154, 0, 0, 0, 156,
	0, 0, 228, 170, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 0, 959, 0, 0, 0, 0, 0, 0,
	118, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 136, 0, 0, 0, 0,
	0, 257, 0, 0, 0, 201, 0, 232, 139, 153,
	114, 100, 110, 0, 138, 179, 208, 212, 0, 0,
	0, 0, 0, 122, 0, 210, 189, 248, 0, 0,
	191, 209, 157, 238, 202, 247, 258, 259, 235, 255,
	263, 225, 103, 234, 246, 119, 220, 105, 244, 231,
	168, 148, 149, 104, 0, 206, 127, 134, 124, 181,
	241, 242, 123, 266, 111, 254, 107, 112, 253, 175,
	237, 245, 169, 162, 106, 243, 167, 161, 152, 131,
	141, 199, 159, 200, 142, 172, 171, 173, 0, 0,
	0, 229, 251, 267, 116, 0, 0, 236, 261, 262,
	0, 0, 117, 135, 130, 198, 174, 113, 144, 226,
	151, 158, 205, 265, 188, 211, 120, 250, 227, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 108,
	155, 264, 203, 133, 252, 0, 0, 126, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 102, 109, 115, 121, 125, 129, 132, 137, 140,
	143, 145, 146, 147, 150, 160, 163, 164, 165, 166,
	176, 177, 178, 180, 183, 184, 185, 186, 187, 190,
	192, 193, 194, 195, 196, 197, 204, 207, 213, 214,
	215, 216, 217, 218, 219, 221, 222, 223, 224, 230,
	233, 239, 240, 249, 256, 260, 26, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 182, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 0, 0,
	0, 0, 154, 0, 0, 0, 156, 0, 0, 228,
	170, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 61, 0, 0, 408, 0,
	0, 0, 0, 0, 0, 0, 0, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 136, 0, 0, 0, 0, 0, 257, 0,
	0, 0, 201, 0, 232, 139, 153, 114, 100, 110,
	0, 138, 179, 208, 212, 0, 0, 0, 0, 0,
	122, 0, 210, 189, 248, 0, 0, 191, 209, 157,
	238, 202, 247, 258, 259, 235, 255, 263, 225, 103,
	234, 246, 119, 220, 105, 244, 231, 168, 148, 149,
	104, 0, 206, 127, 134, 124, 181, 241, 242, 123,
	266, 111, 254, 107, 112, 253, 175, 237, 245, 169,
	162, 106, 243, 167, 161, 152, 131, 141, 199, 159,
	200, 142, 172, 171, 173, 0, 0, 0, 229, 251,
	267, 116, 0, 0, 236, 261, 262, 0, 0, 117,
	135, 130, 198, 174, 113, 144, 226, 151, 158, 205,
	265, 188, 211, 120, 250, 227, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 108, 155, 264, 203,
	133, 252, 0, 0, 126, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 102, 109,
	115, 121, 125, 129, 132, 137, 140, 143, 145, 146,
	147, 150, 160, 163, 164, 165, 166, 176, 177, 178,
	180, 183, 184, 185, 186, 187, 190, 192, 193, 194,
	195, 196, 197, 204, 207, 213, 214, 215, 216, 217,
	218, 219, 221, 222, 223, 224, 230, 233, 239, 240,
	249, 256, 260, 26, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 182, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 0, 0, 0, 0, 154,
	0, 0, 0, 156, 0, 0, 228, 170, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 61, 0, 0, 97, 0, 0, 0, 0,
	0, 0, 0, 0, 118, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 136,
	0, 0, 0, 0, 0, 257, 0, 0, 0, 201,
	0, 232, 139, 153, 114, 100, 110, 0, 138, 179,
	208, 212, 0, 0, 0, 0, 0, 122, 0, 210,
	189, 248, 0, 0, 191, 209, 157, 238, 202, 247,
	258, 259, 235, 255, 263, 225, 103, 234, 246, 119,
	220, 105, 244, 231, 168, 148, 149, 104, 0, 206,
	127, 134, 124, 181, 241, 242, 123, 266, 111, 254,
	107, 112, 253, 175, 237, 245, 169, 162, 106, 243,
	167, 161, 152, 131, 141, 199, 159, 200, 142, 172,
	171, 173, 0, 0, 0, 229, 251, 267, 116, 0,
	0, 236, 261, 262, 0, 0, 117, 135, 130, 198,
	174, 113, 144, 226, 151, 158, 205, 265, 188, 211,
	120, 250, 227, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 108, 155, 264, 203, 133, 252, 0,
	0, 126, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 102, 109, 115, 121, 125,
	129, 132, 137, 140, 143, 145, 146, 147, 150, 160,
	163, 164, 165, 166, 176, 177, 178, 180, 183, 184,
	185, 186, 187, 190, 192, 193, 194, 195, 196, 197,
	204, 207, 213, 214, 215, 216, 217, 218, 219, 221,
	222, 223, 224, 230, 233, 239, 240, 249, 256, 260,
	182, 0, 0, 0, 957, 0, 0, 0, 0, 128,
	0, 0, 0, 0, 154, 0, 0, 0, 156, 0,
	0, 228, 170, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 0, 959, 0, 0, 0, 0, 0, 0, 118,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 0, 0, 0, 0, 0,
	257, 0, 0, 0, 201, 0, 232, 139, 153, 114,
	100, 110, 0, 138, 179, 208, 212, 0, 0, 0,
	0, 0, 122, 0, 210, 189, 248, 0, 0, 955,
	209, 157, 238, 202, 247, 258, 259, 235, 255, 263,
	225, 103, 234, 246, 119, 220, 105, 244, 231, 168,
	148, 149, 104, 0, 206, 127, 134, 124, 181, 241,
	242, 123, 266, 111, 254, 107, 112, 253, 175, 237,
	245, 169, 162, 106, 243, 167, 161, 152, 131, 141,
	199, 159, 200, 142, 172, 171, 173, 0, 0, 0,
	229, 251, 267, 116, 0, 0, 236, 261, 262, 0,
	0, 117, 135, 130, 198, 174, 113, 144, 226, 151,
	158, 205, 265, 188, 211, 120, 250, 227, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 108, 155,
	264, 203, 133, 252, 0, 0, 126, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	102, 109, 115, 121, 125, 129, 132, 137, 140, 143,
	145, 146, 147, 150, 160, 163, 164, 165, 166, 176,
	177, 178, 180, 183, 184, 185, 186, 187, 190, 192,
	193, 194, 195, 196, 197, 204, 207, 213, 214, 215,
	216, 217, 218, 219, 221, 222, 223, 224, 230, 233,
	239, 240, 249, 256, 260, 182, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 0, 0, 0, 0, 154,
	0, 0, 0, 156, 0, 0, 228, 170, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 408, 0, 0, 852, 0,
	0, 853, 0, 0, 118, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 136,
	0, 0, 0, 0, 0, 257, 0, 0, 0, 201,
	0, 232, 139, 153, 114, 100, 110, 0, 138, 179,
	208, 212, 0, 0, 0, 0, 0, 122, 0, 210,
	189, 248, 0, 0, 191, 209, 157, 238, 202, 247,
	258, 259, 235, 255, 263, 225, 103, 234, 246, 119,
	220, 105, 244, 231, 168, 148, 149, 104, 0, 206,
	127, 134, 124, 181, 241, 242, 123, 266, 111, 254,
	107, 112, 253, 175, 237, 245, 169, 162, 106, 243,
	167, 161, 152, 131, 141, 199, 159, 200, 142, 172,
	171, 173, 0, 0, 0, 229, 251, 267, 116, 0,
	0, 236, 261, 262, 0, 0, 117, 135, 130, 198,
	174, 113, 144, 226, 151, 158, 205, 265, 188, 211,
	120, 250, 227, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 108, 155, 264, 203, 133, 252, 0,
	0, 126, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 102, 109, 115, 121, 125,
	129, 132, 137, 140, 143, 145, 146, 147, 150, 160,
	163, 164, 165, 166, 176, 177, 178, 180, 183, 184,
	185, 186, 187, 190, 192, 193, 194, 195, 196, 197,
	204, 207, 213, 214, 215, 216, 217, 218, 219, 221,
	222, 223, 224, 230, 233, 239, 240, 249, 256, 260,
	182, 0, 0, 0, 0, 0, 0, 0, 0, 128,
	737, 0, 0, 0, 154, 0, 0, 0, 156, 0,
	0, 228, 170, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	408, 0, 736, 0, 0, 0, 0, 0, 0, 118,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 0, 0, 0, 0, 0,
	257, 0, 0, 0, 201, 0, 232, 139, 153, 114,
	100, 110, 0, 138, 179, 208, 212, 0, 0, 0,
	0, 0, 122, 0, 210, 189, 248, 0, 0, 191,
	209, 157, 238, 202, 247, 258, 259, 235, 255, 263,
	225, 103, 234, 246, 119, 220, 105, 244, 231, 168,
	148, 149, 104, 0, 206, 127, 134, 124, 181, 241,
	242, 123, 266, 111, 254, 107, 112, 253, 175, 237,
	245, 169, 162, 106, 243, 167, 161, 152, 131, 141,
	199, 159, 200, 142, 172, 171, 173, 0, 0, 0,
	229, 251, 267, 116, 0, 0, 236, 261, 262, 0,
	0, 117, 135, 130, 198, 174, 113, 144, 226, 151,
	158, 205, 265, 188, 211, 120, 250, 227, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 108, 155,
	264, 203, 133, 252, 0, 0, 126, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	102, 109, 115, 121, 125, 129, 132, 137, 140, 143,
	145, 146, 147, 150, 160, 163, 164, 165, 166, 176,
	177, 178, 180, 183, 184, 185, 186, 187, 190, 192,
	193, 194, 195, 196, 197, 204, 207, 213, 214, 215,
	216, 217, 218, 219, 221, 222, 223, 224, 230, 233,
	239, 240, 249, 256, 260, 182, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 0, 0, 0, 0, 154,
	0, 0, 0, 156, 0, 0, 228, 170, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 61, 0, 0, 97, 0, 0, 0, 0,
	0, 0, 0, 0, 118, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 136,
	0, 0, 0, 0, 0, 257, 0, 0, 0, 201,
	0, 232, 139, 153, 114, 100, 110, 0, 138, 179,
	208, 212, 0, 0, 0, 0, 0, 122, 0, 210,
	189, 248, 0, 0, 191, 209, 157, 238, 202, 247,
	258, 259, 235, 255, 263, 225, 103, 234, 246, 119,
	220, 105, 244, 231, 168, 148, 149, 104, 0, 206,
	127, 134, 124, 181, 241, 242, 123, 266, 111, 254,
	107, 112, 253, 175, 237, 245, 169, 162, 106, 243,
	167, 161, 152, 131, 141, 199, 159, 200, 142, 172,
	171, 173, 0, 0, 0, 229, 251, 267, 116, 0,
	0, 236, 261, 262, 0, 0, 117, 135, 130, 198,
	174, 113, 144, 226, 151, 158, 205, 265, 188, 211,
	120, 250, 227, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 108, 155, 264, 203, 133, 252, 0,
	0, 126, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 102, 109, 115, 121, 125,
	129, 132, 137, 140, 143, 145, 146, 147, 150, 160,
	163, 164, 165, 166, 176, 177, 178, 180, 183, 184,
	185, 186, 187, 190, 192, 193, 194, 195, 196, 197,
	204, 207, 213, 214, 215, 216, 217, 218, 219, 221,
	222, 223, 224, 230, 233, 239, 240, 249, 256, 260,
	182, 0, 0, 0, 0, 0, 0, 0, 0, 128,
	0, 0, 0, 0, 154, 0, 0, 0, 156, 0,
	0, 228, 170, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 0, 959, 0, 0, 0, 0, 0, 0, 118,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 0, 0, 0, 0, 0,
	257, 0, 0, 0, 201, 0, 232, 139, 153, 114,
	100, 110, 0, 138, 179, 208, 212, 0, 0, 0,
	0, 0, 122, 0, 210, 189, 248, 0, 0, 191,
	209, 157, 238, 202, 247, 258, 259, 235, 255, 263,
	225, 103, 234, 246, 119, 220, 105, 244, 231, 168,
	148, 149, 104, 0, 206, 127, 134, 124, 181, 241,
	242, 123, 266, 111, 254, 107, 112, 253, 175, 237,
	245, 169, 162, 106, 243, 167, 161, 152, 131, 141,
	199, 159, 200, 142, 172, 171, 173, 0, 0, 0,
	229, 251, 267, 116, 0, 0, 236, 261, 262, 0,
	0, 117, 135, 130, 198, 174, 113, 144, 226, 151,
	158, 205, 265, 188, 211, 120, 250, 227, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 108, 155,
	264, 203, 133, 252, 0, 0, 126, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	102, 109, 115, 121, 125, 129, 132, 137, 140, 143,
	145, 146, 147, 150, 160, 163, 164, 165, 166, 176,
	177, 178, 180, 183, 184, 185, 186, 187, 190, 192,
	193, 194, 195, 196, 197, 204, 207, 213, 214, 215,
	216, 217, 218, 219, 221, 222, 223, 224, 230, 233,
	239, 240, 249, 256, 260, 182, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 0, 0, 0, 0, 154,
	0, 0, 0, 156, 0, 0, 228, 170, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 408, 0, 624, 0, 0,
	0, 0, 0, 0, 118, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 136,
	0, 0, 0, 0, 0, 257, 0, 0, 0, 201,
	0, 232, 139, 153, 114, 100, 110, 0, 138, 179,
	208, 212, 0, 0, 0, 0, 0, 122, 0, 210,
	189, 248, 0, 0, 191, 209, 157, 238, 202, 247,
	258, 259, 235, 255, 263, 225, 103, 234, 246, 119,
	220, 105, 244, 231, 168, 148, 149, 104, 0, 206,
	127, 134, 124, 181, 241, 242, 123, 266, 111, 254,
	107, 112, 253, 175, 237, 245, 169, 162, 106, 243,
	167, 161, 152, 131, 141, 199, 159, 200, 142, 172,
	171, 173, 0, 0, 0, 229, 251, 267, 116, 0,
	0, 236, 261, 262, 0, 0, 117, 135, 130, 198,
	174, 113, 144, 226, 151, 158, 205, 265, 188, 211,
	120, 250, 227, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 108, 155, 264, 203, 133, 252, 0,
	0, 126, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 102, 109, 115, 121, 125,
	129, 132, 137, 140, 143, 145, 146, 147, 150, 160,
	163, 164, 165, 166, 176, 177, 178, 180, 183, 184,
	185, 186, 187, 190, 192, 193, 194, 195, 196, 197,
	204, 207, 213, 214, 215, 216, 217, 218, 219, 221,
	222, 223, 224, 230, 233, 239, 240, 249, 256, 260,
	182, 0, 0, 0, 0, 0, 0, 0, 707, 128,
	0, 0, 0, 0, 154, 0, 0, 0, 156, 0,
	0, 228, 170, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 0, 0, 0, 0, 0, 0, 0, 0, 118,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 0, 0, 0, 0, 0,
	257, 0, 0, 0, 201, 0, 232, 139, 153, 114,
	100, 110, 0, 138, 179, 208, 212, 0, 0, 0,
	0, 0, 122, 0, 210, 189, 248, 0, 0, 191,
	209, 157, 238, 202, 247, 258, 259, 235, 255, 263,
	225, 103, 234, 246, 119, 220, 105, 244, 231, 168,
	148, 149, 104, 0, 206, 127, 134, 124, 181, 241,
	242, 123, 266, 111, 254, 107, 112, 253, 175, 237,
	245, 169, 162, 106, 243, 167, 161, 152, 131, 141,
	199, 159, 200, 142, 172, 171, 173, 0, 0, 0,
	229, 251, 267, 116, 0, 0, 236, 261, 262, 0,
	0, 117, 135, 130, 198, 174, 113, 144, 226, 151,
	158, 205, 265, 188, 211, 120, 250, 227, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 108, 155,
	264, 203, 133, 252, 0, 0, 126, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	102, 109, 115, 121, 125, 129, 132, 137, 140, 143,
	145, 146, 147, 150, 160, 163, 164, 165, 166, 176,
	177, 178, 180, 183, 184, 185, 186, 187, 190, 192,
	193, 194, 195, 196, 197, 204, 207, 213, 214, 215,
	216, 217, 218, 219, 221, 222, 223, 224, 230, 233,
	239, 240, 249, 256, 260, 389, 0, 0, 0, 0,
	0, 0, 182, 0, 0, 0, 0, 0, 0, 0,
	0, 128, 0, 0, 0, 0, 154, 0, 0, 0,
	156, 0, 0, 228, 170, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 0, 0, 0, 0, 0, 0, 0,
	0, 118, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 136, 0, 0, 0,
	0, 0, 257, 0, 0, 0, 201, 0, 232, 139,
	153, 114, 100, 110, 0, 138, 179, 208, 212, 0,
	0, 0, 0, 0, 122, 0, 210, 189, 248, 0,
	0, 191, 209, 157, 238, 202, 247, 258, 259, 235,
	255, 263, 225, 103, 234, 246, 119, 220, 105, 244,
	231, 168, 148, 149, 104, 0, 206, 127, 134, 124,
	181, 241, 242, 123, 266, 111, 254, 107, 112, 253,
	175, 237, 245, 169, 162, 106, 243, 167, 161, 152,
	131, 141, 199, 159, 200, 142, 172, 171, 173, 0,
	0, 0, 229, 251, 267, 116, 0, 0, 236, 261,
	262, 0, 0, 117, 135, 130, 198, 174, 113, 144,
	226, 151, 158, 205, 265, 188, 211, 120, 250, 227,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	108, 155, 264, 203, 133, 252, 0, 0, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 102, 109, 115, 121, 125, 129, 132, 137,
	140, 143, 145, 146, 147, 150, 160, 163, 164, 165,
	166, 176, 177, 178, 180, 183, 184, 185, 186, 187,
	190, 192, 193, 194, 195, 196, 197, 204, 207, 213,
	214, 215, 216, 217, 218, 219, 221, 222, 223, 224,
	230, 233, 239, 240, 249, 256, 260, 182, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 0, 0, 0,
	0, 154, 0, 0, 0, 156, 0, 0, 228, 170,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 0, 0,
	0, 0, 0, 0, 0, 0, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 136, 0, 0, 0, 94, 0, 257, 0, 0,
	0, 201, 0, 232, 139, 153, 114, 100, 110, 0,
	138, 179, 208, 212, 0, 0, 0, 0, 0, 122,
	0, 210, 189, 248, 0, 0, 191, 209, 157, 238,
	202, 247, 258, 259, 235, 255, 263, 225, 103, 234,
	246, 119, 220, 105, 244, 231, 168, 148, 149, 104,
	0, 206, 127, 134, 124, 181, 241, 242, 123, 266,
	111, 254, 107, 112, 253, 175, 237, 245, 169, 162,
	106, 243, 167, 161, 152, 131, 141, 199, 159, 200,
	142, 172, 171, 173, 0, 0, 0, 229, 251, 267,
	116, 0, 0, 236, 261, 262, 0, 0, 117, 135,
	130, 198, 174, 113, 144, 226, 151, 158, 205, 265,
	188, 211, 120, 250, 227, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 108, 155, 264, 203, 133,
	252, 0, 0, 126, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 102, 109, 115,
	121, 125, 129, 132, 137, 140, 143, 145, 146, 147,
	150, 160, 163, 164, 165, 166, 176, 177, 178, 180,
	183, 184, 185, 186, 187, 190, 192, 193, 194, 195,
	196, 197, 204, 207, 213, 214, 215, 216, 217, 218,
	219, 221, 222, 223, 224, 230, 233, 239, 240, 249,
	256, 260, 182, 0, 0, 0, 0, 0, 0, 0,
	0, 128, 0, 0, 0, 0, 154, 0, 0, 0,
	156, 0, 0, 228, 170, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 408, 0, 0, 0, 0, 0, 0, 0,
	0, 118, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 136, 0, 0, 0,
	0, 0, 257, 0, 0, 0, 201, 0, 232, 139,
	153, 114, 100, 110, 0, 138, 179, 208, 212, 0,
	0, 0, 0, 0, 122, 0, 210, 189, 248, 0,
	0, 191, 209, 157, 238, 202, 247, 258, 259, 235,
	255, 263, 225, 103, 234, 246, 119, 220, 105, 244,
	231, 168, 148, 149, 104, 0, 206, 127, 134, 124,
	181, 241, 242, 123, 266, 111, 254, 107, 112, 253,
	175, 237, 245, 169, 162, 106, 243, 167, 161, 152,
	131, 141, 199, 159, 200, 142, 172, 171, 173, 0,
	0, 0, 229, 251, 267, 116, 0, 0, 236, 261,
	262, 0, 0, 117, 135, 130, 198, 174, 113, 144,
	226, 151, 158, 205, 265, 188, 211, 120, 250, 227,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	108, 155, 264, 203, 133, 252, 0, 0, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 102, 109, 115, 121, 125, 129, 132, 137,
	140, 143, 145, 146, 147, 150, 160, 163, 164, 165,
	166, 176, 177, 178, 180, 183, 184, 185, 186, 187,
	190, 192, 193, 194, 195, 196, 197, 204, 207, 213,
	214, 215, 216, 217, 218, 219, 221, 222, 223, 224,
	230, 233, 239, 240, 249, 256, 260, 182, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 0, 0, 0,
	0, 154, 0, 0, 0, 156, 0, 0, 228, 170,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 0, 0,
	0, 0, 0, 0, 0, 0, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 136, 0, 0, 0, 0, 0, 257, 0, 0,
	0, 201, 0, 232, 139, 153, 114, 100, 110, 0,
	138, 179, 208, 212, 0, 0, 0, 0, 0, 122,
	0, 210, 189, 248, 0, 0, 191, 209, 157, 238,
	202, 247, 258, 259, 235, 255, 263, 225, 103, 234,
	246, 119, 220, 105, 244, 231, 168, 148, 149, 104,
	0, 206, 127, 134, 124, 181, 241, 242, 123, 266,
	111, 254, 107, 112, 253, 175, 237, 245, 169, 162,
	106, 243, 167, 161, 152, 131, 141, 199, 159, 200,
	142, 172, 171, 173, 0, 0, 0, 229, 251, 267,
	116, 0, 0, 236, 261, 262, 0, 0, 117, 135,
	130, 198, 174, 113, 144, 226, 151, 158, 205, 265,
	188, 211, 120, 250, 227, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 108, 155, 264, 203, 133,
	252, 0, 0, 126, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 102, 109, 115,
	121, 125, 129, 132, 137, 140, 143, 145, 146, 147,
	150, 160, 163, 164, 165, 166, 176, 177, 178, 180,
	183, 184, 185, 186, 187, 190, 192, 193, 194, 195,
	196, 197, 204, 207, 213, 214, 215, 216, 217, 218,
	219, 221, 222, 223, 224, 230, 233, 239, 240, 249,
	256, 260, 182, 0, 0, 0, 0, 0, 0, 0,
	0, 128, 0, 0, 0, 0, 154, 0, 0, 0,
	156, 0, 0, 228, 170, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 329, 0, 0, 0, 0, 0, 0, 0,
	0, 118, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 136, 0, 0, 0,
	0, 0, 257, 0, 0, 0, 201, 0, 232, 139,
	153, 114, 100, 110, 0, 138, 179, 208, 212, 0,
	0, 0, 0, 0, 122, 0, 210, 189, 248, 0,
	0, 191, 209, 157, 238, 202, 247, 258, 259, 235,
	255, 263, 225, 103, 234, 246, 119, 220, 105, 244,
	231, 168, 148, 149, 104, 0, 206, 127, 134, 124,
	181, 241, 242, 123, 266, 111, 254, 107, 112, 253,
	175, 237, 245, 169, 162, 106, 243, 167, 161, 152,
	131, 141, 199, 159, 200, 142, 172, 171, 173, 0,
	0, 0, 229, 251, 267, 116, 0, 0, 236, 261,
	262, 0, 0, 117, 135, 130, 198, 174, 113, 144,
	226, 151, 158, 205, 265, 188, 211, 120, 250, 227,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	108, 155, 264, 203, 133, 252, 0, 0, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 102, 109, 115, 121, 125, 129, 132, 137,
	140, 143, 145, 146, 147, 150, 160, 163, 164, 165,
	166, 176, 177, 178, 180, 183, 184, 185, 186, 187,
	190, 192, 193, 194, 195, 196, 197, 204, 207, 213,
	214, 215, 216, 217, 218, 219, 221, 222, 223, 224,
	230, 233, 239, 240, 249, 256, 260,
}
var yyPact = [...]int{

	1728, -1000, -275, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 923, 961, -1000, -1000, -1000, -1000,
	-1000, -1000, 328, 76, -1000, -1000, -1000, 172, 71, 15089,
	171, 1854, 15759, -1000, -21, -1000, -1000, 148, 15759, -1000,
	-1000, -85, -91, -1000, 722, -1000, -1000, 61, -1000, -1000,
	-1000, -1000, -1000, -1000, 917, 921, 763, 912, 812, -1000,
	8011, 146, 146, 14754, 7006, -1000, -1000, 305, 15759, 167,
	15759, -147, 88, 88, 88, -1000, -1000, -1000, 15759, 116,
	622, 116, 116, 116, 15759, -1000, 227, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 15759, 620,
	886, 3874, 62, 3874, 3874, -1000, 3874, 3874, -1000, 3874,
	40, 3874, -92, 936, -15, -29, -1000, 3874, -1000, -1000,
	-1000, -1000, -1000, 97, 722, 316, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 600, 169, 15759, 304, -1000, 876, 9363,
	9363, 923, -1000, 722, -1000, -1000, -1000, 855, -1000, -1000,
	347, 948, -1000, 11038, 226, -1000, 9363, 2095, 715, -1000,
	-1000, 715, -1000, -1000, 190, -1000, -1000, 10368, 10368, 10368,
	10368, 10368, 10368, 10368, 10368, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 715,
	-1000, 9028, 715, 715, 715, 715, 715, 715, 715, 715,
	715, 9363, 715, 715, 715, 715, 715, 715, 715, 715,
	715, 715, 715, 715, 715, 715, 715, 14412, 13407, 15759,
	683, 682, -1000, -1000, 224, 698, 6658, -114, -1000, -1000,
	-1000, 308, 13072, -1000, -1000, -1000, 883, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 619,
	15759, -1000, 53, -1000, 616, 906, 156, 613, 312, 612,
	15759, 712, 154, 15759, 898, 774, 15759, 611, 610, -1000,
	6310, -1000, 3874, 3874, -1000, -1000, -1000, 88, 88, 3874,
	3874, 15759, 3874, 3874, -1000, -1000, -1000, -1000, -1000, 3874,
	3874, -1000, 946, 360, -1000, -1000, -1000, -1000, 9363, 271,
	-1000, 773, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 608,
	-1000, -1000, -1000, -1000, 15759, 3874, -4, 108, 50, 15759,
	-1000, 955, 263, 383, 209, 709, -1000, 500, 917, 600,
	812, 12737, 796, -1000, -1000, -1000, 15759, -1000, 9363, 9363,
	539, -1000, 14077, -1000, -1000, 4918, 276, 10368, 504, 349,
	10368, 10368, 10368, 10368, 10368, 10368, 10368, 10368, 10368, 10368,
	10368, 10368, 10368, 10368, 10368, 408, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 601, -1000, 722, 636, 636, 236,
	236, 236, 236, 236, 236, 236, 10703, 905, 600, 607,
	398, 9028, 8011, 8011, 9363, 9363, 8681, 8346, 8011, 8011,
	905, 325, 398, 16094, -1000, -1000, 10033, -1000, -1000, -1000,
	-1000, -1000, 600, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	15424, 15424, 8011, 8011, 8011, 8011, 56, 15759, -1000, 685,
	853, -1000, -1000, -1000, 901, 12067, 12402, 56, 659, 13407,
	15759, -1000, -1000, 13407, 15759, 4570, 5962, 698, -114, 688,
	-1000, -120, -125, 7341, 235, -1000, -1000, -1000, -1000, 3526,
	268, 654, -1000, -76, -1000, -1000, -1000, 723, -1000, 723,
	723, 723, 723, -50, -50, -50, -50, -1000, -1000, -1000,
	-1000, -1000, 743, 736, -1000, 723, 723, 723, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 733, 733, 733, 725,
	725, 751, -1000, 15759, 3874, 897, 3874, -1000, 15759, 15759,
	696, -1000, 15759, 695, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 594, 588, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 15759, 361, 15759, 15759, 398, -1000, 485, 15759, -1000,
	327, -1000, 15759, 15759, 15759, 15759, 15759, 178, -1000, 833,
	9363, 9363, 5614, 9363, -1000, -1000, -1000, 876, -1000, 905,
	916, -1000, 848, 842, 8011, -1000, -1000, 276, 286, -1000,
	-1000, 486, -1000, -1000, -1000, -1000, 208, 715, -1000, 2399,
	-1000, -1000, -1000, -1000, 504, 10368, 10368, 10368, 407, 2399,
	2286, 761, 1123, 236, 477, 477, 245, 245, 245, 245,
	245, 434, 434, -1000, -1000, -1000, 600, -1000, -1000, -1000,
	8011, -1000, 9363, -1000, 600, 599, -1000, 599, 494, 530,
	323, 945, 599, 317, 944, 599, 599, 599, 8011, 342,
	-1000, 9363, 600, -1000, 207, -1000, 1838, 693, 692, 599,
	600, 691, 599, 599, 652, 715, -1000, 16094, 13407, 13407,
	13407, 13407, 13407, -1000, 809, 808, -1000, 798, 795, 785,
	15759, -1000, 592, 12067, 170, 715, -1000, 13742, -1000, -1000,
	935, 13407, 711, -1000, 711, -1000, 203, -1000, -1000, 688,
	-114, -128, -1000, -1000, -1000, -1000, 398, -1000, 429, 687,
	3178, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 731, 584,
	-1000, 860, 255, 252, 583, 857, -1000, -1000, -1000, 279,
	-78, -1000, -1000, 386, -50, -50, -1000, -1000, 235, 878,
	235, 235, 235, 480, 480, -1000, -1000, -1000, -1000, 382,
	-1000, -1000, -1000, 375, -1000, 770, 15424, 722, 900, -1000,
	-1000, -1000, 141, -1000, 3874, 15759, 3874, 3874, 360, -1000,
	469, 9363, -1000, -1000, -1000, -1000, -1000, 359, 359, 390,
	84, 84, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 55, 720, -1000, -1000, -1000, -1000, -16,
	-10, 831, 398, 398, 202, -1000, -1000, 15759, -1000, -1000,
	-1000, -1000, 708, -1000, -1000, -1000, 4222, 8011, -1000, 407,
	2399, 2236, -1000, 10368, 10368, -1000, 600, 398, -1000, 8011,
	-1000, -1000, 140, 408, 140, 10368, 10368, -1000, 10368, 10368,
	-1000, -167, -1000, 662, 287, -1000, 9363, 440, -1000, 5614,
	-1000, 10368, 10368, -1000, -1000, -1000, -1000, 768, 16094, 715,
	-1000, 11720, 15424, 719, -1000, 303, 853, 748, 764, 766,
	-1000, -1000, -1000, -1000, 804, -1000, 799, -1000, -1000, -1000,
	-1000, -1000, 166, 164, 158, 15424, -1000, 923, 9363, 711,
	-1000, -1000, 249, -1000, -1000, -126, -122, -1000, -1000, -1000,
	3526, -1000, 3526, 15424, 73, -1000, 583, 583, -1000, -1000,
	-1000, 726, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 338,
	10368, 954, -1000, 854, -1000, 852, 462, -1000, -1000, 653,
	235, 235, -1000, 289, -1000, -1000, -1000, 582, -1000, 578,
	686, 576, 15759, -1000, -1000, -1000, 15759, -1000, -1000, -1000,
	-1000, 361, -1000, 398, -1000, 491, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 571, -1000,
	569, 15759, -1000, -1000, -1000, -1000, -1000, 533, 553, 15424,
	-172, 541, 15424, 15424, 15424, -1000, 5266, -1000, 935, 13407,
	-1000, -1000, 600, -1000, 10368, 2399, 2399, -1000, -1000, 600,
	723, 723, -1000, 723, 725, -1000, 723, -31, 723, -33,
	600, 600, 2254, 2155, 2135, 2110, 715, -159, -1000, 398,
	9363, -1000, 1966, 1909, -1000, 892, 656, 666, -1000, -1000,
	7676, 600, 568, 198, 565, -1000, 923, 16094, 9363, -1000,
	-1000, 9363, 724, -1000, 9363, -1000, -1000, -1000, 715, 715,
	715, 565, 917, 398, -1000, -1000, -1000, -1000, 3178, -1000,
	562, -1000, 723, -1000, -1000, -1000, 15424, -1000, 2399, -69,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -50, 458,
	-50, 368, -1000, 367, 3874, -1000, 722, -1000, -1000, 533,
	80, -1000, -1000, -1000, 251, -1000, -1000, 80, 533, 879,
	-1000, 5266, -1000, -1000, 721, 750, -1000, 933, 678, -1000,
	2399, -1000, -1000, 87, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 10368, 10368, 10368, 10368, 10368, 600, 438, 398,
	10368, 10368, 850, -1000, 715, -1000, -1000, 700, 15424, 15424,
	-1000, 15424, 917, -1000, 398, 398, 15424, 398, 15424, 15424,
	15424, 11373, -1000, 225, 15424, -1000, 559, -1000, -1000, 235,
	-1000, 235, 632, 628, -1000, -1000, 625, -1000, -1000, 517,
	514, -1000, -1000, -1000, 80, 715, 677, -1000, 301, 15424,
	15759, 931, 920, -1000, -1000, 1838, 1838, 1838, 1838, 70,
	-1000, -1000, 1838, 1838, 952, -1000, 715, -1000, 722, 195,
	-1000, -1000, -1000, 549, 545, 545, 545, 170, 225, -1000,
	391, 292, 400, -1000, 65, 15424, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 52, 5266, 3526,
	537, -1000, -1000, 9363, 9363, -1000, -1000, -1000, -1000, 600,
	51, -177, -1000, -1000, 16094, 666, 600, 15424, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 355, -1000, -1000, 15759, -1000,
	-1000, -1000, 531, -1000, 15424, -1000, -1000, 720, 398, 609,
	-1000, 830, -170, -182, 570, -1000, -1000, -1000, 718, -1000,
	52, 838, -172, -1000, 828, -1000, 15424, -1000, 48, -1000,
	-175, 509, 32, -178, 755, 715, -186, 754, -1000, 943,
	9698, -1000, -1000, 951, 191, 191, 1838, 600, -1000, -1000,
	-1000, 78, 389, -1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1275, 160, 430, 1274, 1272, 1267, 87, 83, 80,
	1264, 1261, 1252, 1251, 1248, 1247, 1246, 1245, 1243, 1238,
	1236, 1235, 1230, 1229, 1216, 1215, 1214, 1212, 1211, 1210,
	1205, 1202, 99, 1201, 1198, 1192, 64, 1185, 68, 1183,
	1182, 1181, 44, 792, 48, 41, 1325, 1175, 26, 55,
	42, 1172, 36, 1170, 1169, 69, 1168, 1165, 1164, 58,
	1163, 1162, 45, 1161, 62, 1160, 12, 110, 1159, 1158,
	1157, 1155, 71, 418, 1154, 1152, 21, 1150, 1149, 86,
	1147, 54, 9, 14, 18, 24, 1146, 917, 6, 1145,
	52, 1142, 1140, 1131, 1130, 29, 1129, 15, 57, 25,
	1126, 19, 56, 1124, 7, 67, 35, 22, 8, 73,
	60, 1122, 20, 63, 53, 1121, 1118, 410, 1115, 1112,
	38, 1107, 1106, 37, 1101, 434, 72, 1098, 1097, 1096,
	1093, 1090, 1089, 59, 1088, 104, 90, 46, 0, 991,
	66, 65, 1086, 1085, 1084, 1747, 47, 70, 17, 34,
	1082, 1080, 39, 1079, 1076, 1074, 1072, 1071, 1068, 1067,
	1064, 427, 1048, 1042, 1040, 27, 32, 1039, 1034, 61,
	23, 1031, 1030, 1029, 50, 30, 995, 993, 76, 31,
	990, 989, 987, 986, 984, 33, 11, 980, 16, 979,
	13, 978, 28, 977, 2, 976, 10, 975, 3, 974,
	5, 51, 4, 973, 1, 971, 970, 636, 186, 77,
	969, 967, 100,
}
var yyR1 = [...]int{

	0, 205, 206, 206, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 6,
	3, 4, 4, 5, 5, 7, 7, 35, 35, 8,
	9, 9, 9, 9, 209, 209, 57, 57, 55, 55,
	56, 56, 105, 105, 10, 10, 10, 10, 110, 110,
	114, 114, 114, 115, 115, 115, 115, 150, 150, 99,
	11, 11, 11, 11, 11, 11, 11, 200, 200, 199,
	198, 198, 197, 197, 196, 20, 181, 183, 183, 182,
	182, 182, 182, 175, 154, 154, 154, 154, 154, 154,
	154, 153, 153, 153, 153, 157, 157, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 156, 156, 156, 156,
	156, 158, 158, 158, 158, 158, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 160, 160, 160, 160, 160, 160, 160, 160, 174,
	174, 161, 161, 169, 169, 170, 170, 170, 167, 167,
	168, 168, 171, 171, 163, 164, 172, 165, 165, 165,
	166, 166, 166, 173, 173, 173, 173, 162, 176, 176,
	191, 191, 190, 190, 190, 180, 180, 187, 187, 187,
	187, 187, 178, 178, 179, 179, 189, 189, 188, 177,
	177, 192, 192, 192, 192, 203, 204, 202, 202, 202,
	202, 202, 184, 184, 184, 185, 185, 185, 186, 186,
	186, 16, 16, 16, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 97, 97, 97, 18,
	19, 19, 19, 19, 19, 19, 19, 19, 133, 133,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	195, 193, 193, 194, 194, 12, 21, 21, 13, 13,
	13, 13, 13, 14, 14, 22, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 121, 121, 119, 119,
	122, 122, 120, 120, 120, 123, 123, 123, 124, 124,
	151, 151, 151, 24, 24, 29, 29, 30, 31, 134,
	134, 27, 27, 28, 28, 28, 28, 41, 41, 210,
	210, 26, 26, 25, 25, 25, 25, 15, 211, 32,
	33, 33, 34, 34, 34, 38, 38, 38, 36, 36,
	36, 37, 37, 44, 44, 43, 43, 45, 45, 45,
	45, 142, 142, 142, 141, 141, 47, 47, 48, 48,
	49, 49, 50, 50, 50, 50, 65, 65, 104, 104,
	106, 106, 51, 51, 51, 51, 52, 52, 53, 53,
	54, 54, 132, 132, 148, 148, 148, 147, 147, 58,
	58, 58, 60, 59, 59, 59, 59, 61, 61, 63,
	63, 62, 62, 64, 66, 66, 66, 66, 67, 67,
	46, 46, 46, 46, 46, 46, 46, 118, 118, 69,
	69, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 80, 80, 80, 80, 80, 80, 70, 70, 70,
	70, 70, 70, 70, 42, 42, 81, 81, 81, 87,
	82, 82, 73, 73, 73, 73, 73, 73, 73, 73,
	73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
	73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
	73, 73, 73, 73, 77, 77, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 76, 76, 212, 212, 79, 78,
	78, 78, 78, 78, 78, 39, 39, 39, 39, 39,
	149, 149, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 91, 91, 40, 40, 89,
	89, 90, 92, 92, 88, 88, 88, 72, 72, 72,
	72, 72, 72, 72, 72, 74, 74, 74, 93, 93,
	94, 94, 95, 95, 96, 96, 98, 100, 100, 100,
	101, 101, 101, 101, 102, 102, 102, 71, 71, 71,
	71, 71, 71, 103, 103, 103, 103, 107, 107, 83,
	83, 85, 85, 84, 86, 108, 108, 112, 109, 109,
	113, 113, 113, 113, 111, 111, 111, 144, 144, 144,
	116, 116, 125, 125, 126, 126, 117, 117, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 131, 131,
	130, 130, 130, 128, 128, 129, 129, 129, 129, 143,
	143, 139, 139, 140, 140, 145, 145, 146, 146, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 207, 208, 135,
	136, 136, 136,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 4, 6, 7, 5,
	10, 1, 3, 1, 3, 7, 8, 1, 1, 9,
	8, 7, 6, 6, 1, 1, 1, 3, 1, 3,
	1, 3, 0, 4, 3, 4, 5, 4, 1, 3,
	3, 2, 2, 2, 2, 2, 1, 1, 1, 0,
	2, 2, 8, 7, 9, 5, 5, 0, 2, 1,
	0, 2, 1, 3, 3, 4, 4, 2, 4, 1,
	3, 3, 3, 3, 0, 2, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 1, 4, 4, 2, 2,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 6,
	6, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 1,
	0, 1, 1, 2, 2, 3, 1, 0, 3, 3,
	0, 2, 2, 2, 1, 2, 1, 2, 5, 4,
	1, 2, 2, 3, 2, 0, 1, 2, 3, 3,
	2, 2, 1, 1, 0, 1, 1, 3, 2, 3,
	1, 10, 11, 11, 12, 3, 3, 1, 1, 2,
	2, 2, 0, 1, 3, 1, 2, 3, 1, 1,
	1, 1, 1, 1, 6, 10, 9, 7, 7, 7,
	9, 7, 7, 9, 10, 5, 0, 1, 2, 4,
	7, 5, 5, 5, 12, 7, 5, 9, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	7, 1, 3, 8, 8, 3, 3, 5, 4, 6,
	4, 4, 4, 3, 2, 3, 4, 4, 3, 6,
	6, 4, 4, 4, 4, 4, 3, 3, 2, 3,
	3, 2, 3, 4, 3, 7, 5, 4, 2, 4,
	4, 3, 3, 5, 2, 3, 1, 1, 0, 1,
	1, 1, 0, 2, 2, 0, 2, 2, 0, 2,
	0, 1, 1, 2, 1, 1, 2, 1, 1, 1,
	1, 3, 3, 1, 1, 1, 1, 0, 3, 1,
	1, 2, 2, 2, 2, 3, 3, 2, 0, 2,
	0, 2, 1, 2, 2, 0, 1, 1, 0, 1,
	1, 0, 1, 0, 1, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 1, 0, 2, 1, 3,
	1, 1, 1, 3, 1, 3, 3, 7, 1, 3,
	1, 3, 4, 4, 4, 3, 2, 4, 0, 1,
	0, 2, 0, 1, 0, 1, 2, 1, 1, 1,
	2, 2, 1, 2, 3, 2, 3, 2, 2, 2,
	1, 1, 3, 3, 0, 5, 5, 5, 0, 2,
	1, 3, 3, 2, 3, 1, 2, 0, 3, 1,
	1, 3, 3, 4, 4, 5, 3, 4, 5, 6,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 2, 2, 2, 2, 2, 3,
	1, 1, 1, 1, 5, 6, 4, 4, 6, 6,
	6, 8, 8, 8, 8, 9, 4, 7, 5, 4,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 8, 8, 0, 2, 3, 4,
	4, 4, 4, 4, 4, 0, 3, 4, 7, 3,
	1, 1, 2, 3, 3, 1, 2, 2, 1, 2,
	1, 2, 2, 1, 2, 0, 1, 0, 2, 1,
	2, 4, 0, 2, 1, 3, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 0, 3,
	0, 2, 0, 3, 1, 3, 2, 0, 1, 1,
	0, 2, 4, 4, 0, 2, 4, 2, 1, 3,
	5, 4, 6, 1, 3, 3, 5, 0, 5, 1,
	3, 1, 2, 3, 1, 1, 3, 3, 1, 3,
	3, 3, 3, 3, 1, 2, 1, 1, 1, 1,
	1, 1, 0, 2, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 0, 1, 1, 1, 0,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 1, 1,
}
var yyChk = [...]int{

	-1000, -205, -1, -2, -6, -7, -8, -9, -10, -11,
	-16, -12, -13, -14, -22, -23, -24, -29, -30, -31,
	-27, -26, -25, -15, -3, -4, 6, 7, -35, 9,
	10, 29, -20, 116, -17, -18, -19, 119, 118, 154,
	120, 147, 51, 169, 170, 172, 173, -210, -134, 152,
	153, 30, 31, 122, -207, 8, 255, 117, 149, 148,
	25, 55, -206, 353, -95, 15, -34, 5, -32, -211,
	-32, -32, -32, -32, -32, -181, -183, 55, 91, -129,
	128, 73, 247, 125, 126, 33, 135, 134, 126, 126,
	127, 128, 247, 125, 126, -62, -145, 58, -138, 265,
	138, 297, 298, 169, 180, 174, 201, 193, 266, 299,
	139, 191, 194, 234, 137, 300, 221, 229, 67, 172,
	243, 301, 150, 189, 185, 302, 274, 183, 27, 303,
	231, 206, 304, 270, 184, 230, 122, 305, 141, 135,
	306, 207, 211, 307, 235, 308, 309, 310, 178, 179,
	311, 237, 205, 136, 32, 267, 36, 159, 238, 209,
	312, 204, 200, 313, 314, 315, 316, 203, 177, 199,
	40, 213, 212, 214, 233, 196, 317, 318, 319, 142,
	320, 186, 18, 321, 322, 323, 324, 325, 241, 153,
	326, 157, 327, 328, 329, 330, 331, 332, 232, 208,
	210, 132, 161, 269, 333, 239, 182, 334, 143, 158,
	152, 242, 144, 335, 336, 337, 338, 339, 340, 341,
	173, 342, 343, 344, 345, 168, 236, 245, 39, 218,
	346, 176, 134, 347, 170, 165, 224, 197, 160, 348,
	349, 187, 188, 202, 175, 198, 171, 162, 154, 350,
	244, 219, 271, 195, 192, 166, 351, 128, 163, 164,
	352, 225, 226, 167, 268, 240, 190, 220, 126, 109,
	194, 234, 116, 222, 223, 231, 127, 32, 232, 161,
	-151, 126, -119, 221, 225, 226, 167, 58, 236, 235,
	227, -145, 171, -41, 120, 155, -62, -135, -135, -135,
	224, 224, -135, -2, -117, 128, 226, 130, -101, 17,
	16, -5, -3, -207, 6, 20, 21, -38, 41, 42,
	-33, -45, 100, -46, -145, -68, 75, -73, 28, 58,
	-138, 23, -72, -69, -88, -86, -87, 109, 110, 111,
	98, 99, 106, 76, 112, -77, -75, -76, -78, 60,
	59, 68, 61, 62, 63, 64, 69, 70, 71, -139,
	-84, -207, 45, 46, 256, 257, 258, 259, 264, 145,
	260, 78, 35, 246, 254, 253, 252, 250, 251, 248,
	249, 262, 263, 131, 247, 104, 255, -117, -117, 11,
	-55, -56, -62, -64, -145, -109, -150, 171, -113, 236,
	235, -140, -111, -139, -137, 234, 194, 233, 58, -138,
	121, 146, 272, 74, 22, 24, 216, 77, 109, 16,
	78, 108, 256, 116, 49, 273, 248, 249, 246, 258,
	259, 247, 222, 28, 10, 275, 25, 148, 21, 102,
	118, 81, 82, 151, 23, 149, 71, 145, 278, 19,
	52, 11, 13, 279, 280, 14, 131, 130, 93, 127,
	47, 8, 112, 26, 90, 43, 281, 34, 282, 283,
	284, 285, 45, 91, 17, 250, 251, 30, 286, 264,
	156, 104, 50, 37, 75, 287, 288, 69, 289, 72,
	53, 73, 15, 48, 290, 291, 292, 293, 92, 119,
	255, 46, 294, 125, 6, 261, 29, 147, 44, 295,
	126, 80, 262, 263, 129, 70, 5, 33, 31, 9,
	51, 54, 252, 253, 254, 35, 79, 12, 296, -182,
	91, -175, 58, -62, 127, -62, 255, -126, 131, -126,
	-126, -21, -62, -125, 131, 58, -125, -125, -125, -62,
	113, -62, 58, 29, -136, -207, -140, 247, 125, 58,
	161, 126, 162, 128, -136, -136, -136, -136, -136, 165,
	166, -136, -122, -121, 229, 230, 224, 228, 12, 166,
	224, 164, -136, -28, -2, -9, -7, -8, -2, 83,
	-135, -135, -208, 57, 126, -62, 116, 118, 121, 53,
	-102, 19, 30, -46, -145, -96, -98, -46, -95, -2,
	-32, 37, -36, 20, 21, 66, 11, -142, 74, 73,
	90, -141, 22, -139, 60, 113, -46, -70, 93, 75,
	91, 92, 77, 95, 94, 105, 98, 99, 100, 101,
	102, 103, 104, 96, 97, 108, 83, 84, 85, 86,
	87, 88, 89, -118, -207, -87, -207, 114, 115, -73,
	-73, -73, -73, -73, -73, -73, -73, -207, -2, -82,
	-46, -207, -207, -207, -207, -207, -207, -207, -207, -207,
	-207, -91, -46, -207, -212, -79, -207, -212, -79, -212,
	-79, -212, -207, -212, -79, -212, -79, -212, -212, -79,
	-207, -207, -207, -207, -207, -207, -63, 26, -62, -48,
	-49, -50, -51, -65, -87, -207, -62, -62, -55, -209,
	56, 11, 54, -209, 56, 113, 56, -109, 171, -110,
	-114, 237, 239, 83, -144, -139, 60, 28, 29, 57,
	56, -62, -153, -157, -159, -158, -160, -155, -156, 191,
	192, 109, 195, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 29, 150, 187, 188, 189, 190, 207,
	208, 209, 210, 211, 212, 213, 214, 174, 193, 266,
	175, 176, 177, 178, 179, 180, 182, 183, 184, 185,
	186, 58, 22, 128, 58, 75, 58, -62, 56, 129,
	-55, 23, 53, -57, -62, 58, 58, -146, -145, -137,
	-136, -136, -126, -126, -136, -136, -62, -136, -136, -136,
	-136, 11, -120, 11, 93, -46, -124, 91, 53, 58,
	-62, -136, 163, 163, 126, 126, 168, -62, 9, 93,
	56, 18, 113, 56, -100, 24, 25, -101, -208, -38,
	-74, -139, 61, 64, -37, 44, -62, -46, -46, -80,
	69, 75, 70, 71, -141, 100, -146, -140, -137, -73,
	-81, -84, -87, 65, 93, 91, 92, 77, -73, -73,
	-73, -73, -73, -73, -73, -73, -73, -73, -73, -73,
	-73, -73, -73, -149, 58, 60, 58, -72, -72, -139,
	-36, -208, 56, -208, -2, -43, -45, -43, -46, -46,
	-88, 60, -43, -88, 60, -43, -43, -43, -36, -89,
	-90, 79, -88, -139, -145, -208, -73, -139, -139, -43,
	-44, -43, -43, -43, -105, 157, -62, 29, 56, -58,
	-60, -59, -61, 43, 47, 49, 44, 45, 46, 50,
	-132, 22, -48, -207, -148, 157, -147, 22, -145, 60,
	-105, 54, -48, -62, -48, -64, -145, 100, -113, -110,
	56, 238, 240, 241, 53, 72, -46, -166, 108, -184,
	-185, -186, -140, 60, 61, -175, -176, -177, -187, 140,
	-192, 132, 134, 33, -178, 141, 127, 34, 57, -154,
	-167, 219, -161, 55, -161, -161, -161, -161, -165, 194,
	-165, -165, -165, 55, 55, -161, -161, -161, -169, 55,
	-169, -169, -170, 55, -170, -143, 54, -99, -62, -136,
	23, -136, -62, -62, -62, 56, 58, 58, -62, -123,
	91, 12, -145, -145, 60, -62, -127, 121, 118, 119,
	123, 124, -195, 117, 216, 194, 67, 28, 15, 256,
	157, 271, 58, 158, -62, -62, -62, -62, -62, 121,
	118, 39, -46, -46, -146, -98, -102, -116, 19, 11,
	35, 35, -43, 69, 70, 71, 113, -207, -81, -73,
	-73, -73, -42, 151, 74, -208, -44, -46, -208, 56,
	-208, -208, 56, 54, 22, 11, 11, -208, 11, 11,
	-208, -208, -208, -43, -92, -90, 81, -46, -208, 113,
	-208, 56, 56, -208, -208, -208, -208, -71, 29, 35,
	-2, -207, -207, -108, -112, -88, -49, -50, -50, -49,
	-50, 43, 43, 43, 48, 43, 48, 43, -59, -145,
	-208, -66, 51, 130, 52, -207, -147, -67, 12, -48,
	-67, -67, 113, -114, -115, 242, 239, 245, 58, 60,
	56, -186, 83, 55, 58, 34, -178, -178, -179, 58,
	-179, 34, -171, -163, -164, -172, -173, -162, 69, 75,
	28, 53, 216, 132, 34, 33, 67, -168, 220, 61,
	-165, -165, -166, 29, -166, -166, -166, -174, 60, -174,
	61, 61, 53, -139, -2, 22, 129, -136, -62, -136,
	-136, -120, 60, -46, -135, -133, -201, 133, 137, 140,
	141, 135, 127, 34, 132, 134, 157, 33, -133, -201,
	133, -130, -128, 129, 22, 127, 34, -133, -133, 157,
	-200, 54, 163, 216, 163, 40, 113, -62, -47, 11,
	100, -140, -44, -42, 74, -73, -73, -208, -45, -152,
	109, 191, 150, 189, 185, 205, 196, 218, 187, 219,
	-149, -152, -73, -73, -73, -73, 265, -95, 82, -46,
	80, -140, -73, -73, -107, 53, -108, -83, -85, -84,
	-207, -2, -103, -139, -106, -139, -67, 56, 83, -53,
	-52, 53, 54, -54, 53, -52, 43, 43, 127, 127,
	127, -106, -95, -46, -67, 239, 243, 244, -185, -186,
	-189, -188, -139, -192, -179, -179, 55, 69, -73, 9,
	34, 34, 60, 57, -166, -166, 58, 109, 57, 56,
	57, 56, 57, 56, -62, -99, -99, -62, -123, 55,
	-175, -135, 58, -135, 58, -62, -135, -175, 58, -139,
	-198, 268, -199, 58, -139, -139, -139, -67, -48, -208,
	-73, -208, -161, -161, -161, -170, -161, 179, -161, 179,
	-208, -208, 19, 19, 19, 19, -207, -40, 261, -46,
	56, 56, 27, -107, 56, -208, -208, -208, 56, 113,
	-208, 56, -95, -112, -46, -46, 55, -46, -207, -207,
	-207, -208, -101, 57, 56, -161, -104, -139, -76, -165,
	60, -165, 61, 61, -136, -2, -175, -97, 145, 146,
	-131, 129, 22, -97, -175, 26, -197, -196, -140, 55,
	54, -93, 13, -165, 58, -73, -73, -73, -73, -73,
	-208, 60, -73, -73, 34, -85, 35, -2, -207, -139,
	-139, -139, -101, -104, -104, -104, -104, -148, -191, -190,
	54, 136, 67, -188, 57, 56, -166, -166, 57, 57,
	-99, 57, -135, 58, 58, -135, -97, -207, 56, 83,
	-104, -62, -94, 14, 16, -208, -208, -208, -208, -39,
	93, 268, -208, -208, 9, -83, -2, 113, 57, -208,
	-208, -208, -66, -190, 58, -180, 83, 60, 143, -139,
	-135, -135, -193, -194, 157, -196, -186, 57, -46, -82,
	-208, 266, 50, 269, -108, -208, -139, 61, -62, -208,
	56, -139, -200, 40, 267, 270, 55, -194, 35, -198,
	40, -104, 159, 268, 57, 160, 269, -203, -204, 53,
	-207, 270, -204, 53, 10, 9, -73, 156, -202, 144,
	139, 142, 29, -202, -208, -208, 138, 28, 69,
}
var yyDef = [...]int{

	25, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 592, 0, 348, 348, 348, 348,
	348, 348, 0, 665, 221, 222, 223, 0, 0, 0,
	0, -2, 324, 325, 0, 327, 328, 337, -2, 969,
	969, 0, 0, 969, 0, 37, 38, 646, 340, 329,
	330, 967, 1, 3, 600, 0, 0, 352, 355, 350,
	0, 646, 646, 0, 0, 70, 71, 0, 0, 0,
	0, 0, 644, 644, 644, 666, 667, 668, 0, 642,
	0, 642, 642, 642, 0, 274, 421, 675, 676, 798,
	799, 800, 801, 802, 803, 804, 805, 806, 807, 808,
	809, 810, 811, 812, 813, 814, 815, 816, 817, 818,
	819, 820, 821, 822, 823, 824, 825, 826, 827, 828,
	829, 830, 831, 832, 833, 834, 835, 836, 837, 838,
	839, 840, 841, 842, 843, 844, 845, 846, 847, 848,
	849, 850, 851, 852, 853, 854, 855, 856, 857, 858,
	859, 860, 861, 862, 863, 864, 865, 866, 867, 868,
	869, 870, 871, 872, 873, 874, 875, 876, 877, 878,
	879, 880, 881, 882, 883, 884, 885, 886, 887, 888,
	889, 890, 891, 892, 893, 894, 895, 896, 897, 898,
	899, 900, 901, 902, 903, 904, 905, 906, 907, 908,
	909, 910, 911, 912, 913, 914, 915, 916, 917, 918,
	919, 920, 921, 922, 923, 924, 925, 926, 927, 928,
	929, 930, 931, 932, 933, 934, 935, 936, 937, 938,
	939, 940, 941, 942, 943, 944, 945, 946, 947, 948,
	949, 950, 951, 952, 953, 954, 955, 956, 957, 958,
	959, 960, 961, 962, 963, 964, 965, 966, 0, 0,
	0, 970, 0, 970, 970, 288, 970, 970, 291, 970,
	0, 970, 0, 298, 0, 0, 304, 970, 321, 322,
	309, 323, 326, 0, 0, 0, 341, 342, 343, 344,
	969, 969, 347, 31, 0, 0, 0, 647, 604, 0,
	0, 592, 33, 0, 348, 353, 354, 358, 356, 357,
	349, 0, 367, 371, 0, 430, 0, 435, 437, -2,
	-2, 0, 472, 473, 474, 475, 476, 0, 0, 0,
	0, 0, 0, 0, 0, 500, 501, 502, 503, 577,
	578, 579, 580, 581, 582, 583, 584, 439, 440, 574,
	624, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 565, 0, 536, 536, 536, 536, 536, 536, 536,
	536, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 48, 50, 421, 54, 0, 945, 628, -2,
	-2, 0, 0, 673, 674, -2, 811, -2, 671, 672,
	679, 680, 681, 682, 683, 684, 685, 686, 687, 688,
	689, 690, 691, 692, 693, 694, 695, 696, 697, 698,
	699, 700, 701, 702, 703, 704, 705, 706, 707, 708,
	709, 710, 711, 712, 713, 714, 715, 716, 717, 718,
	719, 720, 721, 722, 723, 724, 725, 726, 727, 728,
	729, 730, 731, 732, 733, 734, 735, 736, 737, 738,
	739, 740, 741, 742, 743, 744, 745, 746, 747, 748,
	749, 750, 751, 752, 753, 754, 755, 756, 757, 758,
	759, 760, 761, 762, 763, 764, 765, 766, 767, 768,
	769, 770, 771, 772, 773, 774, 775, 776, 777, 778,
	779, 780, 781, 782, 783, 784, 785, 786, 787, 788,
	789, 790, 791, 792, 793, 794, 795, 796, 797, 0,
	0, 89, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 265, 0, 0, 0, 0, 0, 0, 0, 273,
	0, 275, 970, 970, 278, 971, 972, 644, 644, 970,
	970, 0, 970, 970, 286, 287, 289, 290, 292, 970,
	970, 294, 0, 312, 310, 311, 306, 307, 0, 318,
	301, 302, 305, 331, -2, 334, 335, 336, -2, 0,
	345, 346, 32, 968, 0, 970, 0, 0, 0, 0,
	26, 0, 0, 601, 0, 593, 594, 597, 600, 31,
	355, 0, 361, 359, 360, 351, 0, 368, 0, 0,
	0, 372, 0, 374, 375, 0, 433, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 457, 458, 459, 460,
	461, 462, 463, 436, 0, 450, 0, 0, 0, 492,
	493, 494, 495, 496, 497, 498, 0, 358, 31, 0,
	470, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	358, 0, 566, 0, 520, 528, 0, 521, 529, 522,
	530, 523, 0, 524, 531, 525, 532, 526, 527, 533,
	0, 0, 0, 363, 0, 0, 52, 0, 420, 0,
	378, 380, 381, 382, -2, 0, 404, -2, 0, 0,
	0, 44, 45, 0, 0, 0, 0, 55, 945, 57,
	58, 0, 0, 0, 170, 637, 638, 639, 635, 212,
	0, 0, 94, 158, 102, 103, 104, 151, 106, 151,
	151, 151, 151, 167, 167, 167, 167, 134, 135, 136,
	137, 138, 0, 0, 121, 151, 151, 151, 125, 141,
	142, 143, 144, 145, 146, 147, 148, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 153, 153, 153, 155,
	155, 669, 69, 0, 970, 0, 970, 85, 0, 0,
	268, 643, 0, 270, 46, 271, 272, 422, 677, 678,
	276, 277, 0, 0, 281, 282, 283, 284, 285, 293,
	297, 0, 315, 0, 0, 299, 300, 0, 0, 338,
	0, 239, 0, 0, 0, 0, 0, 0, 605, 0,
	0, 0, 0, 0, 596, 598, 599, 604, 34, 358,
	0, 585, 0, 0, 0, 362, 29, 431, 432, 434,
	451, 0, 453, 455, 373, 369, 0, 575, -2, 441,
	442, 466, 467, 468, 0, 0, 0, 0, 464, 446,
	0, 477, 478, 479, 480, 481, 482, 483, 484, 485,
	486, 487, 488, 491, 550, 551, 0, 489, 490, 499,
	363, 469, 0, 623, 31, 0, 365, 0, 0, 0,
	474, 577, 0, 474, 577, 0, 0, 0, 0, 572,
	569, 0, 0, 574, 0, 537, 0, 0, 0, 0,
	0, 364, 0, 0, 0, 0, 419, 0, 0, 0,
	0, 0, 0, 409, 0, 0, 412, 0, 0, 0,
	0, 403, 0, 0, 424, 890, 405, 0, 407, 408,
	428, 0, 428, 49, 428, 51, 0, 423, 629, 56,
	0, 0, 61, 62, 630, 631, 632, 633, 0, 86,
	213, 215, 218, 219, 220, 90, 91, 92, 0, 0,
	200, 0, 0, 194, 194, 0, 192, 193, 88, 93,
	160, 159, 105, 0, 167, 167, 128, 129, 170, 0,
	170, 170, 170, 0, 0, 122, 123, 124, 116, 0,
	117, 118, 119, 0, 120, 0, 0, 0, 0, 75,
	645, 76, 0, 266, 970, 0, 970, 970, 312, 296,
	0, 0, 313, 314, 319, 303, 969, 248, 248, 660,
	248, 248, 235, 648, 649, 650, 651, 652, 653, 654,
	655, 656, 657, 0, 77, 241, 243, 242, 246, 0,
	0, 0, 602, 603, 0, 595, 27, 0, 640, 641,
	586, 587, 376, 452, 454, 456, 0, 363, 443, 464,
	447, 0, 444, 0, 0, 438, 0, 471, -2, 0,
	506, 507, 0, 0, 0, 0, 0, 543, 0, 0,
	544, 0, 516, 592, 0, 570, 0, 0, 519, 0,
	538, 0, 0, 539, 540, 541, 542, 617, 0, 0,
	-2, 0, 0, 428, 625, 0, 379, 398, 400, 0,
	395, 410, 411, 413, 0, 415, 0, 417, 418, 383,
	385, 386, 0, 0, 0, 0, 406, 592, 0, 428,
	42, 43, 0, 59, 60, 0, 0, 66, 171, 172,
	0, 216, 0, 0, 0, 187, 194, 194, 190, 195,
	191, 0, 95, 96, 97, 98, 99, 100, 162, 0,
	0, 0, 166, 0, 174, 176, 0, 101, 161, 0,
	170, 170, 130, 0, 131, 132, 133, 0, 149, 0,
	0, 0, 0, 670, -2, 69, 0, 269, 47, 279,
	280, 315, 316, 317, 224, 0, 969, 249, 250, 251,
	252, 253, 254, 255, 256, 257, 258, 259, 0, 969,
	0, 0, 969, 661, 662, 663, 664, 0, 0, 0,
	80, 0, 0, 0, 0, 606, 0, 28, 428, 0,
	370, 576, 0, 445, 0, 465, 448, 504, 366, 0,
	151, 151, 555, 151, 155, 558, 151, 560, 151, 563,
	0, 0, 0, 0, 0, 0, 0, 567, 518, 573,
	0, 575, 0, 0, 35, 0, 617, 607, 619, 621,
	0, 31, 0, 613, 0, 390, 592, 0, 0, 392,
	399, 0, 0, 393, 0, 394, 414, 416, 0, 0,
	0, 0, 600, 429, 41, 63, 64, 65, 214, 217,
	0, 196, 151, 199, 188, 189, 0, 163, 164, 0,
	173, 175, 177, 152, 126, 127, 168, 169, 167, 0,
	167, 0, 156, 0, 970, 73, 0, 267, 295, 0,
	236, 227, 228, 229, 0, 231, 232, 236, 0, 0,
	240, 0, 78, 79, 0, 0, 245, 588, 377, 505,
	449, 508, 552, 167, 556, 557, 559, 561, 562, 564,
	510, 509, 0, 0, 0, 0, 0, 0, 0, 571,
	0, 0, 0, 36, 0, 622, -2, 0, 0, 0,
	53, 0, 600, 626, 627, 396, 0, 401, 0, 0,
	0, 404, 40, 179, 0, 198, 0, 388, 165, 170,
	150, 170, 0, 0, 72, -2, 0, 969, 237, 0,
	0, 658, 659, 969, 236, 0, 81, 82, 0, 0,
	0, 590, 0, 553, 554, 0, 0, 0, 0, 545,
	517, 568, 0, 0, 0, 620, 0, -2, 0, 615,
	614, 391, 39, 0, 0, 0, 0, 424, 178, 180,
	0, 185, 0, 197, 0, 0, 139, 140, 154, 157,
	74, 969, 226, 238, 230, 233, 969, 0, 0, 0,
	0, 247, 30, 0, 0, 511, 513, 512, 514, 0,
	0, 0, 534, 535, 0, 610, 31, 0, 397, 425,
	426, 427, 387, 181, 182, 0, 186, 184, 0, 389,
	225, 234, 0, 261, 0, 83, 84, 77, 591, 589,
	515, 0, 0, 0, 618, -2, 616, 183, 0, 260,
	0, 0, 80, 546, 0, 549, 0, 262, 0, 244,
	547, 0, 0, 0, 201, 0, 0, 202, 203, 0,
	0, 548, 204, 0, 0, 0, 0, 0, 205, 207,
	208, 0, 0, 206, 263, 264, 209, 210, 211,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 76, 3, 3, 3, 103, 95, 3,
	55, 57, 100, 98, 56, 99, 113, 101, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 353,
	84, 83, 85, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 94, 3, 106,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 77, 78, 79, 80, 81, 82, 86, 87, 88,
	89, 90, 91, 92, 93, 96, 97, 102, 104, 107,
	108, 109, 110, 111, 112, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:335
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:340
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:341
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:345
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:369
		{
			setParseTree(yylex, nil)
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:375
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 27:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:383
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 28:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:387
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 29:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:393
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 30:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:400
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:406
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:410
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:416
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:420
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 35:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:427
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:439
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:451
		{
			yyVAL.str = InsertStr
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:455
		{
			yyVAL.str = ReplaceStr
		}
	case 39:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:461
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:467
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:471
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:475
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:479
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:484
		{
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:485
		{
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:489
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName.ToViewName()}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:493
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName.ToViewName())
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:499
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:503
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:509
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:513
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:518
		{
			yyVAL.partitions = nil
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:522
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:528
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:532
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:536
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:540
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:546
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:550
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:556
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:560
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:564
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:570
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:574
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:578
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:582
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:588
		{
			yyVAL.str = SessionStr
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:592
		{
			yyVAL.str = GlobalStr
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:597
		{
			yyVAL.int = yyPosition(yylex)
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:603
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:608
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 72:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:614
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 73:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:619
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[3].tableName.ToViewName(), ViewExpr: yyDollar[6].selStmt, ViewSelectPositionStart: yyDollar[5].int, ViewSelectPositionEnd: yyDollar[7].int - 1}
		}
	case 74:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:623
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[5].tableName.ToViewName(), ViewExpr: yyDollar[8].selStmt, ViewSelectPositionStart: yyDollar[7].int, ViewSelectPositionEnd: yyDollar[9].int - 1, OrReplace: true}
		}
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:627
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:631
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:636
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:640
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:646
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:651
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:656
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:662
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:667
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:673
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:679
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName, IfNotExists: ne}
			setDDL(yylex, yyVAL.ddl)
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:690
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:697
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:701
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:707
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:712
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:716
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:720
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:726
		{
			if err := yyDollar[2].columnType.merge(yyDollar[3].columnType); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:735
		{
			yyVAL.columnType = ColumnType{}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:739
		{
			opt := ColumnType{NotNull: yyDollar[2].boolVal, sawnull: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:748
		{
			opt := ColumnType{Default: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:757
		{
			opt := ColumnType{OnUpdate: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:766
		{
			opt := ColumnType{Autoincrement: yyDollar[2].boolVal, sawai: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:775
		{
			opt := ColumnType{KeyOpt: yyDollar[2].colKeyOpt}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:784
		{
			opt := ColumnType{Comment: yyDollar[2].sqlVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:795
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:806
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:811
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:817
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:821
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:825
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:829
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:833
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:837
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:841
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:845
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:849
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:855
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:861
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:867
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:873
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:879
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:887
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:891
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:895
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:899
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:903
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:909
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:913
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:917
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:921
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:925
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:929
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:933
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:937
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:941
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:945
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:949
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:953
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:957
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:961
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 140:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:966
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:972
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:976
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:980
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:984
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:988
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:992
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:996
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1000
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1006
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1011
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1016
		{
			yyVAL.sqlVal = nil
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1020
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1025
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 154:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1029
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1037
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1041
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 157:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1047
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1055
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1059
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1064
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1068
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1075
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1079
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1085
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1091
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1097
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1102
		{
			yyVAL.str = ""
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1106
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1110
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1115
		{
			yyVAL.str = ""
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1119
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1123
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1129
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1133
		{
			yyVAL.colKeyOpt = colKey
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1137
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1141
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1147
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 178:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1153
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 179:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1157
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1163
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1167
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1173
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1177
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1182
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1188
		{
			yyVAL.str = ""
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1192
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1198
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1202
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1206
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1210
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1214
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1220
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1224
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1229
		{
			yyVAL.str = ""
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1233
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1239
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1243
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1249
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1255
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1259
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 201:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1266
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 202:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1270
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 203:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1274
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 204:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1278
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1284
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1290
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1296
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1300
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1304
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1308
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1312
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 212:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1317
		{
			yyVAL.str = ""
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1321
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1325
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1333
		{
			yyVAL.str = yyDollar[1].str
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1337
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1341
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1347
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1351
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1355
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 224:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1366
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1370
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			ddl.Column = yyDollar[8].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 226:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1377
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1384
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 228:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1388
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: DropStr, Column: NewColIdent(string(yyDollar[7].bytes)), Table: yyDollar[4].tableName}
		}
	case 229:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1392
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 230:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1396
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: RenameStr, Table: yyDollar[4].tableName, Column: NewColIdent(string(yyDollar[7].bytes)), ToColumn: NewColIdent(string(yyDollar[9].bytes))}
		}
	case 231:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1400
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 232:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1405
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 233:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1410
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ModifyStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 234:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1417
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ChangeStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, Column: NewColIdent(string(yyDollar[7].bytes)), ColumnOrder: yyDollar[9].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			yyVAL.statement = ddl
		}
	case 235:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1423
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 236:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1428
		{
			yyVAL.columnOrder = nil
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1432
		{
			yyVAL.columnOrder = &ColumnOrder{First: true}
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1436
		{
			yyVAL.columnOrder = &ColumnOrder{AfterColumn: NewColIdent(string(yyDollar[2].bytes))}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1442
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 240:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1448
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 241:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1460
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 242:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1470
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 243:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1474
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 244:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1478
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 245:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1491
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 246:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1501
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 247:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1505
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 248:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1518
		{
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1520
		{
		}
	case 260:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1536
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1542
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1546
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 263:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1552
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 264:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1556
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1562
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1568
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 267:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1572
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1580
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 269:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1588
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1593
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromViews: yyDollar[4].tableNames, IfExists: exists}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1601
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1605
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1611
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1615
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1620
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1626
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1631
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1635
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1639
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1643
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1648
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1652
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1656
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1660
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1664
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1668
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1672
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1676
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1680
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1684
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1688
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1692
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1696
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1700
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1704
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 296:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1709
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1719
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1723
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1727
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1733
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1738
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1742
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1746
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1750
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1764
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1770
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1774
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1780
		{
			yyVAL.str = ""
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1784
		{
			yyVAL.str = "full "
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1790
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1794
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1800
		{
			yyVAL.str = ""
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1804
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1808
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1814
		{
			yyVAL.showFilter = nil
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1818
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1822
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1828
		{
			yyVAL.showFilter = nil
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1832
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1838
		{
			yyVAL.str = ""
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1842
		{
			yyVAL.str = SessionStr
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1846
		{
			yyVAL.str = GlobalStr
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1852
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1856
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1862
		{
			yyVAL.statement = &Begin{}
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1866
		{
			yyVAL.statement = &Begin{}
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1872
		{
			yyVAL.statement = &Commit{}
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1878
		{
			yyVAL.statement = &Rollback{}
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1883
		{
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1884
		{
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1888
		{
			yyVAL.statement = &Explain{ExplainFormat: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1892
		{
			yyVAL.statement = &Explain{Analyze: true, ExplainFormat: TreeStr, Statement: yyDollar[3].selStmt}
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1898
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1906
		{
			yyVAL.str = ""
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1910
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1921
		{
			yyVAL.statement = &Show{Type: "columns", OnTable: yyDollar[2].tableName}
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1925
		{
			yyVAL.statement = &OtherRead{}
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1931
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1935
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1939
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1943
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1949
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1953
		{
			setAllowComments(yylex, true)
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1957
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1963
		{
			yyVAL.bytes2 = nil
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1967
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1973
		{
			yyVAL.str = UnionStr
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1977
		{
			yyVAL.str = UnionAllStr
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1981
		{
			yyVAL.str = UnionDistinctStr
		}
	case 355:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1986
		{
			yyVAL.str = ""
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1990
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1994
		{
			yyVAL.str = SQLCacheStr
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1999
		{
			yyVAL.str = ""
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2003
		{
			yyVAL.str = ""
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2007
		{
			yyVAL.str = DistinctStr
		}
	case 361:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2012
		{
			yyVAL.str = ""
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2016
		{
			yyVAL.str = StraightJoinHint
		}
	case 363:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2021
		{
			yyVAL.selectExprs = nil
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2025
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2031
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2035
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2041
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2045
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2049
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 370:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2053
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2058
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2062
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2066
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2073
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2078
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2082
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2088
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2092
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2102
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2106
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2110
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2116
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2122
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 387:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2126
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2132
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2136
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2142
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2146
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 392:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2159
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 393:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2163
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 394:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2167
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2171
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2177
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 397:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2179
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 398:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2183
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2185
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 400:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2189
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2191
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2194
		{
			yyVAL.empty = struct{}{}
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2196
		{
			yyVAL.empty = struct{}{}
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2199
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2203
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2207
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2214
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2220
		{
			yyVAL.str = JoinStr
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2224
		{
			yyVAL.str = JoinStr
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2228
		{
			yyVAL.str = JoinStr
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2234
		{
			yyVAL.str = StraightJoinStr
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2240
		{
			yyVAL.str = LeftJoinStr
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2244
		{
			yyVAL.str = LeftJoinStr
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2248
		{
			yyVAL.str = RightJoinStr
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2252
		{
			yyVAL.str = RightJoinStr
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2258
		{
			yyVAL.str = NaturalJoinStr
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2262
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2272
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2276
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2282
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2286
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2292
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 424:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2297
		{
			yyVAL.indexHints = nil
		}
	case 425:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2301
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 426:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2305
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 427:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2309
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 428:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2314
		{
			yyVAL.expr = nil
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2318
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2324
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2328
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2332
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2336
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2340
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2344
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2348
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 437:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2354
		{
			yyVAL.str = ""
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2358
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2364
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2368
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2374
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2378
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 443:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2382
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 444:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2386
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 445:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2390
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2394
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 447:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2398
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 448:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2402
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 449:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2406
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2410
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2416
		{
			yyVAL.str = IsNullStr
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2420
		{
			yyVAL.str = IsNotNullStr
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2424
		{
			yyVAL.str = IsTrueStr
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2428
		{
			yyVAL.str = IsNotTrueStr
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2432
		{
			yyVAL.str = IsFalseStr
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2436
		{
			yyVAL.str = IsNotFalseStr
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2442
		{
			yyVAL.str = EqualStr
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2446
		{
			yyVAL.str = LessThanStr
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2450
		{
			yyVAL.str = GreaterThanStr
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2454
		{
			yyVAL.str = LessEqualStr
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2458
		{
			yyVAL.str = GreaterEqualStr
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2462
		{
			yyVAL.str = NotEqualStr
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2466
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 464:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2471
		{
			yyVAL.expr = nil
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2475
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2481
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2485
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2489
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2495
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2501
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2505
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2511
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2515
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2519
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2523
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2527
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2531
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2535
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2539
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2543
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2547
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2551
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2555
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2559
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2563
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2567
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2571
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2575
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2579
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2583
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2587
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2591
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2595
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2599
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2603
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2611
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2625
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2629
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2633
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 504:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2651
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: yyDollar[3].str == DistinctStr, Exprs: yyDollar[4].selectExprs}
		}
	case 505:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2655
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 506:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2665
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 507:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2669
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 508:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2673
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 509:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2677
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 510:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2681
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 511:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2685
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 512:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2689
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 513:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2693
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 514:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2697
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 515:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2701
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 516:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2705
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("first"), Exprs: yyDollar[3].selectExprs}
		}
	case 517:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2709
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 518:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2713
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 519:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2717
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2727
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2731
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2735
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2740
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2745
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2750
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2756
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2761
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2766
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2770
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2774
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2779
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2784
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2789
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 534:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2793
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 535:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2797
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2807
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 539:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2817
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 540:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2821
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 541:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2825
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 542:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2829
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 543:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2833
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 544:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2837
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 545:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2843
		{
			yyVAL.str = ""
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2847
		{
			yyVAL.str = BooleanModeStr
		}
	case 547:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2851
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 548:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2855
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2859
		{
			yyVAL.str = QueryExpansionStr
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2865
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2869
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2875
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2879
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2883
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2887
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2891
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2895
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2901
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2905
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2909
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2913
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2917
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2921
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2925
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 565:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2930
		{
			yyVAL.expr = nil
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2934
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2939
		{
			yyVAL.str = string("")
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2943
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2949
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2953
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 571:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2959
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 572:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2964
		{
			yyVAL.expr = nil
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2968
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2974
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2978
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 576:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2982
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2988
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2992
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2996
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3000
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3004
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3008
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3012
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3016
		{
			yyVAL.expr = &NullVal{}
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3022
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3031
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3035
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 588:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3040
		{
			yyVAL.exprs = nil
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3044
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3049
		{
			yyVAL.expr = nil
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3053
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3058
		{
			yyVAL.orderBy = nil
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3062
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3068
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3072
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3078
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 597:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3083
		{
			yyVAL.str = AscScr
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3087
		{
			yyVAL.str = AscScr
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3091
		{
			yyVAL.str = DescScr
		}
	case 600:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3096
		{
			yyVAL.limit = nil
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3100
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 602:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3104
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 603:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3108
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 604:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3113
		{
			yyVAL.str = ""
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3117
		{
			yyVAL.str = ForUpdateStr
		}
	case 606:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3121
		{
			yyVAL.str = ShareModeStr
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3134
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3138
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3142
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 610:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3147
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 611:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3151
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 612:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3155
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3162
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3166
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3170
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 616:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3174
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 617:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3179
		{
			yyVAL.updateExprs = nil
		}
	case 618:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3183
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3189
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3193
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3199
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3203
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3209
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3215
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3225
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3229
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3235
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3241
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3245
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3251
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3255
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3259
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3263
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3270
		{
			yyVAL.bytes = []byte("charset")
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3277
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3281
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3285
		{
			yyVAL.expr = &Default{}
		}
	case 642:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3294
		{
			yyVAL.byt = 0
		}
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3296
		{
			yyVAL.byt = 1
		}
	case 644:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3299
		{
			yyVAL.byt = 0
		}
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3301
		{
			yyVAL.byt = 1
		}
	case 646:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3304
		{
			yyVAL.str = ""
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3306
		{
			yyVAL.str = IgnoreStr
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3310
		{
			yyVAL.empty = struct{}{}
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3312
		{
			yyVAL.empty = struct{}{}
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3314
		{
			yyVAL.empty = struct{}{}
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3316
		{
			yyVAL.empty = struct{}{}
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3318
		{
			yyVAL.empty = struct{}{}
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3320
		{
			yyVAL.empty = struct{}{}
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3322
		{
			yyVAL.empty = struct{}{}
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3324
		{
			yyVAL.empty = struct{}{}
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3326
		{
			yyVAL.empty = struct{}{}
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3328
		{
			yyVAL.empty = struct{}{}
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3332
		{
			yyVAL.empty = struct{}{}
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3334
		{
			yyVAL.empty = struct{}{}
		}
	case 660:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3337
		{
			yyVAL.empty = struct{}{}
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3339
		{
			yyVAL.empty = struct{}{}
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3341
		{
			yyVAL.empty = struct{}{}
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3345
		{
			yyVAL.empty = struct{}{}
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3347
		{
			yyVAL.empty = struct{}{}
		}
	case 665:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3350
		{
			yyVAL.empty = struct{}{}
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3352
		{
			yyVAL.empty = struct{}{}
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3354
		{
			yyVAL.empty = struct{}{}
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3356
		{
			yyVAL.empty = struct{}{}
		}
	case 669:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3359
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 670:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3361
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3365
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3369
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3376
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3382
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3386
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3393
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3707
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3716
		{
			decNesting(yylex)
		}
	case 969:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3721
		{
			skipToEnd(yylex)
		}
	case 970:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3726
		{
			skipToEnd(yylex)
		}
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3730
		{
			skipToEnd(yylex)
		}
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3734
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
