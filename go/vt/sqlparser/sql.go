//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func yyPosition(yylex interface{}) int {
	return yylex.(*Tokenizer).Position
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:57
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	int                  int
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const UNLOCK = 57373
const KEYS = 57374
const UNIQUE = 57375
const KEY = 57376
const VALUES = 57377
const LAST_INSERT_ID = 57378
const NEXT = 57379
const VALUE = 57380
const SHARE = 57381
const MODE = 57382
const SQL_NO_CACHE = 57383
const SQL_CACHE = 57384
const JOIN = 57385
const STRAIGHT_JOIN = 57386
const LEFT = 57387
const RIGHT = 57388
const INNER = 57389
const OUTER = 57390
const CROSS = 57391
const NATURAL = 57392
const USE = 57393
const FORCE = 57394
const ON = 57395
const USING = 57396
const ID = 57397
const HEX = 57398
const STRING = 57399
const INTEGRAL = 57400
const FLOAT = 57401
const HEXNUM = 57402
const VALUE_ARG = 57403
const LIST_ARG = 57404
const COMMENT = 57405
const COMMENT_KEYWORD = 57406
const BIT_LITERAL = 57407
const NULL = 57408
const TRUE = 57409
const FALSE = 57410
const OFF = 57411
const OR = 57412
const AND = 57413
const NOT = 57414
const BETWEEN = 57415
const CASE = 57416
const WHEN = 57417
const THEN = 57418
const ELSE = 57419
const END = 57420
const LE = 57421
const GE = 57422
const NE = 57423
const NULL_SAFE_EQUAL = 57424
const IS = 57425
const LIKE = 57426
const REGEXP = 57427
const IN = 57428
const SHIFT_LEFT = 57429
const SHIFT_RIGHT = 57430
const DIV = 57431
const MOD = 57432
const UNARY = 57433
const COLLATE = 57434
const BINARY = 57435
const UNDERSCORE_BINARY = 57436
const UNDERSCORE_UTF8MB4 = 57437
const INTERVAL = 57438
const JSON_EXTRACT_OP = 57439
const JSON_UNQUOTE_EXTRACT_OP = 57440
const CREATE = 57441
const ALTER = 57442
const DROP = 57443
const RENAME = 57444
const ANALYZE = 57445
const ADD = 57446
const FLUSH = 57447
const SCHEMA = 57448
const TABLE = 57449
const INDEX = 57450
const VIEW = 57451
const TO = 57452
const IGNORE = 57453
const IF = 57454
const PRIMARY = 57455
const COLUMN = 57456
const SPATIAL = 57457
const FULLTEXT = 57458
const KEY_BLOCK_SIZE = 57459
const CHECK = 57460
const ACTION = 57461
const CASCADE = 57462
const CONSTRAINT = 57463
const FOREIGN = 57464
const NO = 57465
const REFERENCES = 57466
const RESTRICT = 57467
const SHOW = 57468
const DESCRIBE = 57469
const EXPLAIN = 57470
const DATE = 57471
const ESCAPE = 57472
const REPAIR = 57473
const OPTIMIZE = 57474
const TRUNCATE = 57475
const MAXVALUE = 57476
const PARTITION = 57477
const REORGANIZE = 57478
const LESS = 57479
const THAN = 57480
const PROCEDURE = 57481
const TRIGGER = 57482
const VINDEX = 57483
const VINDEXES = 57484
const STATUS = 57485
const VARIABLES = 57486
const WARNINGS = 57487
const SEQUENCE = 57488
const BEGIN = 57489
const START = 57490
const TRANSACTION = 57491
const COMMIT = 57492
const ROLLBACK = 57493
const BIT = 57494
const TINYINT = 57495
const SMALLINT = 57496
const MEDIUMINT = 57497
const INT = 57498
const INTEGER = 57499
const BIGINT = 57500
const INTNUM = 57501
const REAL = 57502
const DOUBLE = 57503
const FLOAT_TYPE = 57504
const DECIMAL = 57505
const NUMERIC = 57506
const TIME = 57507
const TIMESTAMP = 57508
const DATETIME = 57509
const YEAR = 57510
const CHAR = 57511
const VARCHAR = 57512
const BOOL = 57513
const CHARACTER = 57514
const VARBINARY = 57515
const NCHAR = 57516
const TEXT = 57517
const TINYTEXT = 57518
const MEDIUMTEXT = 57519
const LONGTEXT = 57520
const BLOB = 57521
const TINYBLOB = 57522
const MEDIUMBLOB = 57523
const LONGBLOB = 57524
const JSON = 57525
const ENUM = 57526
const GEOMETRY = 57527
const POINT = 57528
const LINESTRING = 57529
const POLYGON = 57530
const GEOMETRYCOLLECTION = 57531
const MULTIPOINT = 57532
const MULTILINESTRING = 57533
const MULTIPOLYGON = 57534
const NULLX = 57535
const AUTO_INCREMENT = 57536
const APPROXNUM = 57537
const SIGNED = 57538
const UNSIGNED = 57539
const ZEROFILL = 57540
const COLLATION = 57541
const DATABASES = 57542
const TABLES = 57543
const VITESS_METADATA = 57544
const VSCHEMA = 57545
const FULL = 57546
const PROCESSLIST = 57547
const COLUMNS = 57548
const FIELDS = 57549
const ENGINES = 57550
const PLUGINS = 57551
const NAMES = 57552
const CHARSET = 57553
const GLOBAL = 57554
const SESSION = 57555
const ISOLATION = 57556
const LEVEL = 57557
const READ = 57558
const WRITE = 57559
const ONLY = 57560
const REPEATABLE = 57561
const COMMITTED = 57562
const UNCOMMITTED = 57563
const SERIALIZABLE = 57564
const CURRENT_TIMESTAMP = 57565
const DATABASE = 57566
const CURRENT_DATE = 57567
const CURRENT_TIME = 57568
const LOCALTIME = 57569
const LOCALTIMESTAMP = 57570
const UTC_DATE = 57571
const UTC_TIME = 57572
const UTC_TIMESTAMP = 57573
const REPLACE = 57574
const CONVERT = 57575
const CAST = 57576
const SUBSTR = 57577
const SUBSTRING = 57578
const GROUP_CONCAT = 57579
const SEPARATOR = 57580
const TIMESTAMPADD = 57581
const TIMESTAMPDIFF = 57582
const MATCH = 57583
const AGAINST = 57584
const BOOLEAN = 57585
const LANGUAGE = 57586
const WITH = 57587
const QUERY = 57588
const EXPANSION = 57589
const UNUSED = 57590
const ARRAY = 57591
const CUME_DIST = 57592
const DESCRIPTION = 57593
const DENSE_RANK = 57594
const EMPTY = 57595
const EXCEPT = 57596
const FIRST_VALUE = 57597
const GROUPING = 57598
const GROUPS = 57599
const JSON_TABLE = 57600
const LAG = 57601
const LAST_VALUE = 57602
const LATERAL = 57603
const LEAD = 57604
const MEMBER = 57605
const NTH_VALUE = 57606
const NTILE = 57607
const OF = 57608
const OVER = 57609
const PERCENT_RANK = 57610
const RANK = 57611
const RECURSIVE = 57612
const ROW_NUMBER = 57613
const SYSTEM = 57614
const WINDOW = 57615
const ACTIVE = 57616
const ADMIN = 57617
const BUCKETS = 57618
const CLONE = 57619
const COMPONENT = 57620
const DEFINITION = 57621
const ENFORCED = 57622
const EXCLUDE = 57623
const FOLLOWING = 57624
const GEOMCOLLECTION = 57625
const GET_MASTER_PUBLIC_KEY = 57626
const HISTOGRAM = 57627
const HISTORY = 57628
const INACTIVE = 57629
const INVISIBLE = 57630
const LOCKED = 57631
const MASTER_COMPRESSION_ALGORITHMS = 57632
const MASTER_PUBLIC_KEY_PATH = 57633
const MASTER_TLS_CIPHERSUITES = 57634
const MASTER_ZSTD_COMPRESSION_LEVEL = 57635
const NESTED = 57636
const NETWORK_NAMESPACE = 57637
const NOWAIT = 57638
const NULLS = 57639
const OJ = 57640
const OLD = 57641
const OPTIONAL = 57642
const ORDINALITY = 57643
const ORGANIZATION = 57644
const OTHERS = 57645
const PATH = 57646
const PERSIST = 57647
const PERSIST_ONLY = 57648
const PRECEDING = 57649
const PRIVILEGE_CHECKS_USER = 57650
const PROCESS = 57651
const RANDOM = 57652
const REFERENCE = 57653
const REQUIRE_ROW_FORMAT = 57654
const RESOURCE = 57655
const RESPECT = 57656
const RESTART = 57657
const RETAIN = 57658
const REUSE = 57659
const ROLE = 57660
const SECONDARY = 57661
const SECONDARY_ENGINE = 57662
const SECONDARY_LOAD = 57663
const SECONDARY_UNLOAD = 57664
const SKIP = 57665
const SRID = 57666
const THREAD_PRIORITY = 57667
const TIES = 57668
const UNBOUNDED = 57669
const VCPU = 57670
const VISIBLE = 57671

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"UNIQUE",
	"KEY",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 29,
	-2, 4,
	-1, 37,
	160, 308,
	161, 308,
	-2, 296,
	-1, 320,
	113, 653,
	-2, 649,
	-1, 321,
	113, 654,
	-2, 650,
	-1, 389,
	83, 901,
	-2, 65,
	-1, 390,
	83, 819,
	-2, 66,
	-1, 395,
	83, 788,
	-2, 612,
	-1, 397,
	83, 849,
	-2, 614,
	-1, 692,
	1, 363,
	5, 363,
	12, 363,
	13, 363,
	14, 363,
	15, 363,
	17, 363,
	19, 363,
	29, 363,
	30, 363,
	43, 363,
	44, 363,
	45, 363,
	46, 363,
	47, 363,
	49, 363,
	50, 363,
	53, 363,
	54, 363,
	56, 363,
	57, 363,
	347, 363,
	-2, 381,
	-1, 695,
	54, 46,
	56, 46,
	-2, 50,
	-1, 844,
	113, 656,
	-2, 652,
	-1, 1069,
	5, 30,
	-2, 448,
	-1, 1100,
	5, 29,
	-2, 586,
	-1, 1184,
	5, 29,
	-2, 67,
	-1, 1370,
	5, 30,
	-2, 587,
	-1, 1399,
	5, 29,
	-2, 67,
	-1, 1427,
	5, 29,
	-2, 589,
	-1, 1500,
	5, 30,
	-2, 590,
}

const yyPrivate = 57344

const yyLast = 16015

var yyAct = [...]int{

	321, 1533, 1523, 1332, 1488, 1103, 291, 1210, 325, 1390,
	648, 1439, 1407, 956, 1263, 1121, 1002, 1297, 299, 929,
	548, 519, 1264, 983, 338, 1035, 955, 1104, 1127, 1260,
	1276, 997, 647, 3, 965, 1270, 96, 793, 58, 96,
	1235, 807, 1148, 869, 96, 1063, 882, 1188, 969, 1187,
	1177, 292, 293, 294, 905, 394, 297, 916, 906, 351,
	846, 579, 708, 895, 931, 993, 585, 909, 96, 399,
	707, 688, 591, 96, 600, 96, 352, 50, 308, 388,
	380, 385, 697, 298, 96, 383, 323, 96, 57, 62,
	1526, 1510, 1017, 96, 1521, 1498, 1518, 1333, 1509, 977,
	1497, 663, 1252, 689, 1362, 1016, 927, 524, 1292, 1293,
	1291, 312, 662, 952, 946, 64, 65, 66, 67, 68,
	91, 87, 88, 89, 552, 947, 948, 50, 79, 709,
	550, 710, 274, 1136, 573, 1021, 1135, 304, 83, 1137,
	85, 296, 295, 1168, 1015, 1466, 613, 612, 622, 623,
	615, 616, 617, 618, 619, 620, 621, 614, 284, 363,
	624, 369, 370, 367, 368, 366, 365, 364, 75, 1414,
	976, 984, 1353, 568, 1351, 371, 372, 569, 566, 567,
	1212, 289, 571, 561, 562, 1214, 780, 781, 778, 1520,
	554, 1517, 556, 572, 1012, 1009, 1010, 1489, 1008, 391,
	1209, 910, 1484, 970, 1541, 538, 1160, 1122, 1124, 267,
	526, 1165, 1164, 85, 1215, 972, 270, 785, 77, 78,
	779, 74, 553, 555, 278, 273, 782, 81, 80, 1019,
	1022, 1161, 84, 1213, 1404, 771, 1537, 1286, 90, 1149,
	972, 1285, 1440, 1284, 522, 1166, 529, 1158, 266, 86,
	1473, 1029, 1373, 1159, 1028, 1442, 276, 327, 1222, 1206,
	636, 637, 283, 1132, 1089, 1057, 1014, 96, 968, 972,
	399, 1208, 399, 1079, 399, 399, 818, 399, 703, 399,
	1076, 1236, 604, 544, 1123, 399, 942, 614, 1013, 268,
	624, 953, 557, 520, 558, 559, 815, 560, 624, 563,
	984, 520, 575, 576, 71, 574, 971, 551, 1163, 808,
	1496, 1037, 812, 599, 1467, 399, 280, 271, 1238, 281,
	282, 287, 1441, 1482, 1312, 272, 275, 1018, 269, 286,
	285, 971, 1254, 537, 518, 1455, 76, 588, 534, 1403,
	72, 587, 1020, 1274, 1535, 773, 549, 1536, 549, 1534,
	549, 549, 1240, 549, 1244, 549, 1239, 711, 1237, 896,
	971, 549, 1207, 1242, 1205, 966, 597, 967, 1202, 896,
	1303, 1086, 1241, 964, 970, 1313, 636, 637, 96, 96,
	96, 50, 599, 636, 637, 1243, 1245, 399, 594, 1162,
	1036, 809, 55, 399, 1502, 589, 633, 1199, 1195, 635,
	1397, 531, 849, 532, 598, 597, 533, 900, 613, 612,
	622, 623, 615, 616, 617, 618, 619, 620, 621, 614,
	1396, 599, 624, 540, 541, 542, 870, 646, 871, 650,
	651, 652, 653, 654, 655, 656, 657, 658, 1181, 661,
	664, 664, 664, 670, 664, 664, 670, 664, 678, 679,
	680, 681, 682, 683, 1180, 693, 598, 597, 525, 1169,
	696, 1064, 1483, 1256, 701, 22, 666, 668, 705, 672,
	674, 1421, 677, 599, 1394, 350, 853, 665, 667, 669,
	671, 673, 675, 676, 1230, 687, 1054, 1055, 1056, 1194,
	851, 852, 850, 1542, 1196, 1189, 1197, 1193, 82, 1190,
	821, 822, 1191, 1192, 613, 612, 622, 623, 615, 616,
	617, 618, 619, 620, 621, 614, 1198, 391, 624, 96,
	617, 618, 619, 620, 621, 614, 303, 1308, 624, 96,
	96, 399, 817, 1075, 1543, 96, 527, 528, 96, 1219,
	1138, 96, 1139, 1178, 393, 96, 1040, 399, 399, 598,
	597, 777, 399, 399, 399, 96, 399, 399, 1480, 1074,
	1452, 1073, 399, 399, 377, 378, 599, 796, 797, 578,
	816, 520, 798, 799, 800, 1335, 802, 803, 598, 597,
	634, 1451, 804, 805, 598, 597, 1323, 598, 597, 520,
	1328, 399, 836, 838, 839, 599, 96, 1326, 837, 1149,
	795, 599, 399, 1144, 599, 872, 823, 549, 792, 791,
	578, 341, 340, 343, 344, 345, 346, 774, 786, 772,
	342, 347, 769, 549, 549, 1445, 1519, 1449, 549, 549,
	549, 546, 549, 549, 1505, 578, 692, 539, 549, 549,
	1445, 1492, 842, 1445, 578, 318, 399, 613, 612, 622,
	623, 615, 616, 617, 618, 619, 620, 621, 614, 1448,
	844, 624, 1445, 1474, 886, 889, 1261, 847, 825, 1273,
	897, 918, 921, 922, 923, 919, 840, 920, 924, 399,
	399, 1277, 1278, 880, 1309, 1225, 96, 1445, 1444, 1388,
	1387, 1375, 578, 59, 96, 96, 1372, 578, 96, 96,
	1319, 1318, 96, 96, 96, 399, 577, 1315, 1316, 1128,
	881, 883, 50, 973, 888, 891, 892, 24, 399, 876,
	1315, 1314, 1273, 873, 874, 913, 578, 650, 1070, 578,
	1070, 893, 878, 578, 1070, 843, 718, 717, 24, 904,
	960, 907, 908, 878, 912, 393, 1426, 393, 1128, 393,
	393, 699, 393, 913, 393, 1368, 985, 986, 987, 795,
	393, 1098, 936, 935, 698, 1454, 55, 1099, 699, 913,
	928, 913, 96, 399, 693, 399, 1317, 944, 693, 96,
	96, 96, 96, 96, 943, 96, 96, 55, 940, 96,
	602, 24, 1273, 1004, 700, 1006, 702, 1140, 945, 1070,
	999, 1092, 1091, 1033, 937, 698, 704, 96, 939, 96,
	96, 700, 819, 698, 96, 615, 616, 617, 618, 619,
	620, 621, 614, 784, 305, 624, 55, 979, 980, 981,
	982, 995, 996, 1511, 1211, 391, 1409, 978, 1380, 998,
	55, 1302, 1143, 990, 991, 992, 1277, 1278, 957, 549,
	994, 549, 1365, 989, 988, 1410, 1045, 918, 921, 922,
	923, 919, 393, 920, 924, 848, 1001, 831, 713, 1528,
	1524, 1283, 1280, 55, 844, 622, 623, 615, 616, 617,
	618, 619, 620, 621, 614, 1047, 1046, 624, 1261, 1053,
	613, 612, 622, 623, 615, 616, 617, 618, 619, 620,
	621, 614, 1182, 813, 624, 788, 1282, 1115, 1113, 1112,
	847, 1059, 1116, 1114, 96, 96, 96, 96, 96, 1111,
	1058, 1105, 1117, 1515, 922, 923, 96, 309, 310, 96,
	1508, 1067, 1221, 96, 1042, 1513, 1052, 96, 1051, 1424,
	592, 593, 1100, 1307, 1306, 1151, 1145, 1173, 716, 843,
	547, 692, 1083, 580, 1366, 692, 399, 590, 1085, 692,
	1005, 880, 1405, 787, 581, 1185, 1130, 926, 1131, 1141,
	592, 593, 300, 770, 638, 639, 640, 641, 642, 643,
	644, 645, 1118, 306, 307, 1106, 1101, 1102, 1109, 1460,
	693, 693, 693, 693, 693, 301, 824, 1126, 59, 1459,
	1412, 1050, 399, 1170, 1171, 928, 393, 1125, 1133, 1049,
	1128, 570, 1150, 693, 1186, 1080, 1146, 1147, 1107, 1108,
	1077, 1110, 393, 393, 1530, 1529, 1530, 393, 393, 393,
	806, 393, 393, 399, 96, 1184, 595, 393, 393, 1470,
	1179, 1305, 814, 1129, 61, 63, 56, 1, 1522, 96,
	314, 1334, 1406, 1216, 1011, 877, 879, 1201, 399, 1200,
	1487, 1438, 1296, 963, 954, 70, 827, 517, 69, 1481,
	962, 961, 1156, 1155, 1152, 1167, 1218, 602, 975, 50,
	393, 1154, 1153, 1157, 724, 722, 957, 723, 721, 726,
	725, 974, 720, 277, 386, 712, 1000, 1172, 596, 1174,
	1175, 1176, 399, 399, 1262, 43, 1229, 1105, 848, 549,
	925, 1402, 1203, 1228, 73, 1204, 1247, 1234, 1246, 1007,
	811, 875, 1253, 564, 565, 279, 399, 1045, 632, 1048,
	1134, 392, 1272, 1268, 1267, 820, 584, 898, 1458, 1411,
	1281, 399, 1084, 399, 399, 844, 659, 894, 326, 835,
	339, 336, 337, 826, 902, 903, 1295, 1097, 1290, 1265,
	606, 1287, 324, 316, 691, 684, 1288, 1294, 917, 915,
	914, 692, 692, 692, 692, 692, 1266, 789, 50, 1299,
	393, 381, 1279, 96, 1275, 690, 692, 1224, 1227, 1300,
	1301, 1364, 1361, 393, 692, 1325, 1465, 830, 26, 60,
	311, 1321, 1322, 19, 96, 18, 17, 20, 1327, 1324,
	399, 1330, 16, 399, 399, 399, 96, 15, 14, 535,
	1257, 30, 21, 399, 13, 12, 96, 11, 10, 613,
	612, 622, 623, 615, 616, 617, 618, 619, 620, 621,
	614, 9, 8, 624, 1340, 7, 6, 5, 393, 4,
	393, 302, 845, 1341, 23, 854, 855, 856, 857, 858,
	859, 860, 861, 862, 863, 864, 865, 866, 867, 868,
	2, 957, 1349, 957, 0, 0, 0, 0, 0, 0,
	1066, 0, 1105, 0, 1310, 1311, 0, 0, 1069, 1071,
	0, 1072, 1367, 0, 393, 399, 1078, 0, 0, 1081,
	1082, 1377, 693, 399, 0, 1088, 0, 1386, 1141, 1090,
	901, 1376, 1093, 1094, 0, 1095, 1096, 0, 0, 0,
	0, 399, 0, 0, 0, 0, 0, 0, 0, 1360,
	1392, 1401, 1342, 0, 399, 1120, 1346, 1347, 1393, 1348,
	1395, 1398, 1350, 0, 1352, 1400, 0, 0, 0, 0,
	0, 582, 586, 1227, 0, 1399, 0, 0, 0, 0,
	0, 1382, 1383, 1384, 0, 0, 0, 0, 605, 0,
	0, 1413, 0, 399, 399, 0, 399, 0, 0, 583,
	0, 399, 0, 399, 399, 399, 96, 0, 898, 399,
	1433, 1425, 1434, 1435, 1436, 1432, 0, 549, 1389, 50,
	0, 0, 0, 649, 1427, 1437, 1443, 0, 0, 0,
	399, 96, 660, 0, 0, 94, 1450, 0, 288, 1456,
	0, 0, 0, 94, 0, 957, 0, 0, 1265, 0,
	0, 393, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1471, 0, 0, 315, 1266, 399, 384, 1428, 0,
	1479, 0, 94, 1478, 94, 399, 399, 0, 1486, 0,
	0, 1472, 0, 94, 1408, 0, 94, 1490, 0, 1491,
	0, 1494, 94, 0, 399, 1233, 1499, 1183, 0, 1105,
	0, 0, 1453, 692, 0, 96, 1265, 0, 0, 0,
	399, 0, 0, 0, 0, 0, 0, 1060, 1061, 1062,
	1507, 0, 0, 1266, 0, 50, 0, 1446, 393, 1447,
	1512, 1514, 399, 0, 0, 0, 0, 0, 0, 0,
	0, 1516, 0, 0, 0, 1527, 608, 0, 611, 0,
	0, 0, 1538, 393, 625, 626, 627, 628, 629, 630,
	631, 0, 609, 610, 607, 613, 612, 622, 623, 615,
	616, 617, 618, 619, 620, 621, 614, 0, 0, 624,
	0, 0, 0, 0, 0, 393, 0, 0, 0, 0,
	0, 0, 0, 0, 898, 0, 0, 1269, 1271, 0,
	0, 1359, 0, 1065, 0, 1408, 957, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1525, 0, 0,
	0, 1271, 0, 613, 612, 622, 623, 615, 616, 617,
	618, 619, 620, 621, 614, 0, 393, 624, 393, 1298,
	0, 810, 0, 613, 612, 622, 623, 615, 616, 617,
	618, 619, 620, 621, 614, 0, 1343, 624, 0, 0,
	0, 0, 0, 1345, 0, 0, 94, 0, 833, 834,
	0, 0, 0, 0, 1354, 1355, 613, 612, 622, 623,
	615, 616, 617, 618, 619, 620, 621, 614, 0, 0,
	624, 0, 0, 0, 1369, 1370, 1371, 0, 1374, 0,
	0, 0, 0, 0, 0, 1331, 0, 0, 1336, 1337,
	1338, 0, 0, 0, 0, 1385, 0, 0, 393, 0,
	0, 649, 0, 0, 884, 885, 0, 694, 0, 0,
	1231, 1232, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1248, 1249, 0, 1250, 1251, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1258, 1259, 0,
	0, 0, 0, 93, 0, 0, 0, 0, 0, 898,
	0, 290, 0, 0, 0, 0, 0, 94, 94, 94,
	0, 0, 951, 0, 0, 0, 0, 0, 0, 1420,
	393, 0, 0, 0, 0, 382, 0, 0, 1391, 0,
	521, 0, 523, 0, 0, 0, 0, 0, 0, 0,
	0, 530, 0, 0, 536, 0, 393, 0, 0, 0,
	543, 0, 0, 0, 0, 0, 1304, 0, 0, 393,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1461, 1462, 1463, 1464, 0, 0, 0,
	1468, 1469, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1475, 1476, 1477, 0, 0, 0, 1429, 1430,
	0, 1431, 0, 0, 0, 0, 1391, 0, 1391, 1391,
	1391, 0, 0, 0, 1298, 0, 0, 1043, 1044, 0,
	586, 0, 0, 1495, 0, 0, 1344, 1358, 0, 0,
	1500, 0, 0, 0, 0, 1391, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1504, 0, 0, 94, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 94,
	0, 0, 0, 0, 94, 0, 0, 94, 0, 0,
	94, 1485, 0, 0, 794, 0, 0, 0, 0, 1068,
	393, 393, 0, 0, 94, 0, 0, 1357, 0, 1539,
	1540, 0, 0, 0, 0, 0, 898, 1087, 0, 1501,
	741, 0, 613, 612, 622, 623, 615, 616, 617, 618,
	619, 620, 621, 614, 0, 1506, 624, 1356, 0, 0,
	0, 0, 0, 0, 545, 94, 0, 0, 0, 0,
	0, 0, 0, 0, 794, 0, 0, 1391, 612, 622,
	623, 615, 616, 617, 618, 619, 620, 621, 614, 0,
	0, 624, 1415, 1416, 1417, 1418, 1419, 0, 0, 0,
	1422, 1423, 613, 612, 622, 623, 615, 616, 617, 618,
	619, 620, 621, 614, 0, 0, 624, 0, 0, 0,
	729, 315, 315, 0, 0, 315, 315, 315, 0, 0,
	0, 899, 613, 612, 622, 623, 615, 616, 617, 618,
	619, 620, 621, 614, 0, 0, 624, 0, 0, 0,
	315, 315, 315, 315, 0, 94, 0, 742, 0, 0,
	0, 0, 0, 94, 933, 0, 0, 94, 94, 0,
	0, 94, 941, 794, 0, 686, 0, 695, 1220, 0,
	755, 758, 759, 760, 761, 762, 763, 0, 764, 765,
	766, 767, 768, 743, 744, 745, 746, 727, 728, 756,
	0, 730, 0, 731, 732, 733, 734, 735, 736, 737,
	738, 739, 740, 747, 748, 749, 750, 751, 752, 753,
	754, 0, 0, 0, 0, 0, 0, 1255, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 0, 0, 0, 0, 0, 0, 94, 94,
	94, 94, 94, 0, 94, 94, 0, 0, 94, 0,
	0, 1531, 0, 0, 0, 0, 0, 0, 0, 1289,
	0, 757, 0, 0, 0, 0, 94, 0, 1038, 1039,
	0, 0, 0, 94, 0, 0, 0, 0, 794, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	315, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 719, 24, 25, 51,
	27, 28, 0, 0, 0, 0, 775, 776, 0, 0,
	0, 0, 783, 0, 0, 382, 54, 0, 790, 0,
	29, 47, 48, 0, 0, 0, 315, 0, 0, 0,
	0, 0, 801, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 38, 315, 0, 0, 55, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 899, 94, 94, 94, 94, 94, 0, 0,
	0, 0, 0, 832, 0, 1119, 0, 1363, 94, 0,
	0, 0, 933, 0, 0, 0, 94, 649, 0, 0,
	0, 0, 0, 0, 0, 1378, 0, 0, 1379, 0,
	0, 1381, 0, 0, 0, 0, 0, 31, 32, 34,
	33, 36, 0, 49, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 37, 53, 44, 0, 0, 45,
	46, 35, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 39, 40, 0, 41, 42,
	0, 0, 0, 911, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 938, 0, 0, 0,
	0, 0, 0, 94, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 315, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	315, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 794,
	52, 0, 0, 0, 0, 0, 0, 0, 899, 1003,
	0, 0, 0, 0, 0, 0, 1023, 1024, 1025, 1026,
	1027, 0, 1030, 1031, 0, 0, 1032, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1493, 649, 0, 0, 1034, 0, 0, 0, 0, 0,
	0, 1041, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 899, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1217, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1223, 0, 0, 0,
	0, 0, 0, 0, 0, 933, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	899, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1320, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1339, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 504, 492, 0, 449, 507,
	423, 439, 515, 440, 443, 480, 408, 462, 180, 437,
	0, 427, 403, 433, 404, 425, 451, 126, 422, 494,
	465, 506, 152, 505, 455, 513, 154, 471, 0, 226,
	168, 0, 0, 453, 496, 460, 489, 448, 481, 413,
	470, 508, 438, 478, 509, 0, 0, 0, 398, 0,
	958, 959, 0, 0, 0, 0, 0, 116, 0, 475,
	503, 435, 477, 479, 402, 472, 0, 406, 409, 514,
	499, 430, 431, 1142, 0, 0, 0, 0, 0, 0,
	452, 461, 486, 446, 0, 0, 0, 0, 0, 0,
	0, 0, 428, 0, 469, 0, 0, 0, 410, 407,
	0, 0, 450, 0, 0, 0, 412, 0, 429, 487,
	0, 400, 134, 491, 498, 447, 255, 502, 445, 444,
	199, 0, 230, 137, 151, 112, 98, 108, 1457, 136,
	177, 206, 210, 495, 426, 434, 120, 432, 208, 187,
	246, 468, 189, 207, 155, 236, 200, 245, 256, 257,
	233, 253, 261, 223, 101, 232, 244, 117, 218, 103,
	242, 229, 166, 146, 147, 102, 0, 204, 125, 132,
	122, 179, 239, 240, 121, 264, 109, 252, 105, 110,
	251, 173, 235, 243, 167, 160, 104, 241, 165, 159,
	150, 129, 139, 197, 157, 198, 140, 170, 169, 171,
	0, 405, 1503, 227, 249, 265, 114, 421, 234, 259,
	260, 0, 0, 115, 133, 128, 196, 172, 111, 142,
	224, 149, 156, 203, 263, 186, 209, 118, 248, 225,
	417, 420, 415, 416, 463, 464, 510, 511, 512, 488,
	411, 0, 418, 419, 0, 493, 500, 501, 467, 97,
	106, 153, 262, 201, 131, 250, 401, 414, 124, 424,
	0, 0, 436, 441, 442, 454, 456, 457, 458, 459,
	466, 473, 474, 476, 482, 483, 484, 485, 490, 497,
	516, 99, 100, 107, 113, 119, 123, 127, 130, 135,
	138, 141, 143, 144, 145, 148, 158, 161, 162, 163,
	164, 174, 175, 176, 178, 181, 182, 183, 184, 185,
	188, 190, 191, 192, 193, 194, 195, 202, 205, 211,
	212, 213, 214, 215, 216, 217, 219, 220, 221, 222,
	228, 231, 237, 238, 247, 254, 258, 504, 492, 0,
	449, 507, 423, 439, 515, 440, 443, 480, 408, 462,
	180, 437, 0, 427, 403, 433, 404, 425, 451, 126,
	422, 494, 465, 506, 152, 505, 455, 513, 154, 471,
	0, 226, 168, 0, 0, 453, 496, 460, 489, 448,
	481, 413, 470, 508, 438, 478, 509, 0, 0, 0,
	398, 0, 958, 959, 0, 0, 0, 0, 0, 116,
	0, 475, 503, 435, 477, 479, 402, 472, 0, 406,
	409, 514, 499, 430, 431, 0, 0, 0, 0, 0,
	0, 0, 452, 461, 486, 446, 0, 0, 0, 0,
	0, 0, 0, 0, 428, 0, 469, 0, 0, 0,
	410, 407, 0, 0, 450, 0, 0, 0, 412, 0,
	429, 487, 0, 400, 134, 491, 498, 447, 255, 502,
	445, 444, 199, 0, 230, 137, 151, 112, 98, 108,
	0, 136, 177, 206, 210, 495, 426, 434, 120, 432,
	208, 187, 246, 468, 189, 207, 155, 236, 200, 245,
	256, 257, 233, 253, 261, 223, 101, 232, 244, 117,
	218, 103, 242, 229, 166, 146, 147, 102, 0, 204,
	125, 132, 122, 179, 239, 240, 121, 264, 109, 252,
	105, 110, 251, 173, 235, 243, 167, 160, 104, 241,
	165, 159, 150, 129, 139, 197, 157, 198, 140, 170,
	169, 171, 0, 405, 0, 227, 249, 265, 114, 421,
	234, 259, 260, 0, 0, 115, 133, 128, 196, 172,
	111, 142, 224, 149, 156, 203, 263, 186, 209, 118,
	248, 225, 417, 420, 415, 416, 463, 464, 510, 511,
	512, 488, 411, 0, 418, 419, 0, 493, 500, 501,
	467, 97, 106, 153, 262, 201, 131, 250, 401, 414,
	124, 424, 0, 0, 436, 441, 442, 454, 456, 457,
	458, 459, 466, 473, 474, 476, 482, 483, 484, 485,
	490, 497, 516, 99, 100, 107, 113, 119, 123, 127,
	130, 135, 138, 141, 143, 144, 145, 148, 158, 161,
	162, 163, 164, 174, 175, 176, 178, 181, 182, 183,
	184, 185, 188, 190, 191, 192, 193, 194, 195, 202,
	205, 211, 212, 213, 214, 215, 216, 217, 219, 220,
	221, 222, 228, 231, 237, 238, 247, 254, 258, 504,
	492, 0, 449, 507, 423, 439, 515, 440, 443, 480,
	408, 462, 180, 437, 0, 427, 403, 433, 404, 425,
	451, 126, 422, 494, 465, 506, 152, 505, 455, 513,
	154, 471, 0, 226, 168, 0, 0, 453, 496, 460,
	489, 448, 481, 413, 470, 508, 438, 478, 509, 55,
	0, 0, 398, 0, 0, 0, 0, 0, 0, 0,
	0, 116, 0, 475, 503, 435, 477, 479, 402, 472,
	0, 406, 409, 514, 499, 430, 431, 0, 0, 0,
	0, 0, 0, 0, 452, 461, 486, 446, 0, 0,
	0, 0, 0, 0, 0, 0, 428, 0, 469, 0,
	0, 0, 410, 407, 0, 0, 450, 0, 0, 0,
	412, 0, 429, 487, 0, 400, 134, 491, 498, 447,
	255, 502, 445, 444, 199, 0, 230, 137, 151, 112,
	98, 108, 0, 136, 177, 206, 210, 495, 426, 434,
	120, 432, 208, 187, 246, 468, 189, 207, 155, 236,
	200, 245, 256, 257, 233, 253, 261, 223, 101, 232,
	244, 117, 218, 103, 242, 229, 166, 146, 147, 102,
	0, 204, 125, 132, 122, 179, 239, 240, 121, 264,
	109, 252, 105, 110, 251, 173, 235, 243, 167, 160,
	104, 241, 165, 159, 150, 129, 139, 197, 157, 198,
	140, 170, 169, 171, 0, 405, 0, 227, 249, 265,
	114, 421, 234, 259, 260, 0, 0, 115, 133, 128,
	196, 172, 111, 142, 224, 149, 156, 203, 263, 186,
	209, 118, 248, 225, 417, 420, 415, 416, 463, 464,
	510, 511, 512, 488, 411, 0, 418, 419, 0, 493,
	500, 501, 467, 97, 106, 153, 262, 201, 131, 250,
	401, 414, 124, 424, 0, 0, 436, 441, 442, 454,
	456, 457, 458, 459, 466, 473, 474, 476, 482, 483,
	484, 485, 490, 497, 516, 99, 100, 107, 113, 119,
	123, 127, 130, 135, 138, 141, 143, 144, 145, 148,
	158, 161, 162, 163, 164, 174, 175, 176, 178, 181,
	182, 183, 184, 185, 188, 190, 191, 192, 193, 194,
	195, 202, 205, 211, 212, 213, 214, 215, 216, 217,
	219, 220, 221, 222, 228, 231, 237, 238, 247, 254,
	258, 504, 492, 0, 449, 507, 423, 439, 515, 440,
	443, 480, 408, 462, 180, 437, 0, 427, 403, 433,
	404, 425, 451, 126, 422, 494, 465, 506, 152, 505,
	455, 513, 154, 471, 0, 226, 168, 0, 0, 453,
	496, 460, 489, 448, 481, 413, 470, 508, 438, 478,
	509, 0, 0, 0, 398, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 0, 475, 503, 435, 477, 479,
	402, 472, 0, 406, 409, 514, 499, 430, 431, 0,
	0, 0, 0, 0, 0, 0, 452, 461, 486, 446,
	0, 0, 0, 0, 0, 0, 1226, 0, 428, 0,
	469, 0, 0, 0, 410, 407, 0, 0, 450, 0,
	0, 0, 412, 0, 429, 487, 0, 400, 134, 491,
	498, 447, 255, 502, 445, 444, 199, 0, 230, 137,
	151, 112, 98, 108, 0, 136, 177, 206, 210, 495,
	426, 434, 120, 432, 208, 187, 246, 468, 189, 207,
	155, 236, 200, 245, 256, 257, 233, 253, 261, 223,
	101, 232, 244, 117, 218, 103, 242, 229, 166, 146,
	147, 102, 0, 204, 125, 132, 122, 179, 239, 240,
	121, 264, 109, 252, 105, 110, 251, 173, 235, 243,
	167, 160, 104, 241, 165, 159, 150, 129, 139, 197,
	157, 198, 140, 170, 169, 171, 0, 405, 0, 227,
	249, 265, 114, 421, 234, 259, 260, 0, 0, 115,
	133, 128, 196, 172, 111, 142, 224, 149, 156, 203,
	263, 186, 209, 118, 248, 225, 417, 420, 415, 416,
	463, 464, 510, 511, 512, 488, 411, 0, 418, 419,
	0, 493, 500, 501, 467, 97, 106, 153, 262, 201,
	131, 250, 401, 414, 124, 424, 0, 0, 436, 441,
	442, 454, 456, 457, 458, 459, 466, 473, 474, 476,
	482, 483, 484, 485, 490, 497, 516, 99, 100, 107,
	113, 119, 123, 127, 130, 135, 138, 141, 143, 144,
	145, 148, 158, 161, 162, 163, 164, 174, 175, 176,
	178, 181, 182, 183, 184, 185, 188, 190, 191, 192,
	193, 194, 195, 202, 205, 211, 212, 213, 214, 215,
	216, 217, 219, 220, 221, 222, 228, 231, 237, 238,
	247, 254, 258, 504, 492, 0, 449, 507, 423, 439,
	515, 440, 443, 480, 408, 462, 180, 437, 0, 427,
	403, 433, 404, 425, 451, 126, 422, 494, 465, 506,
	152, 505, 455, 513, 154, 471, 0, 226, 168, 0,
	0, 453, 496, 460, 489, 448, 481, 413, 470, 508,
	438, 478, 509, 0, 0, 0, 95, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 0, 475, 503, 435,
	477, 479, 402, 472, 0, 406, 409, 514, 499, 430,
	431, 0, 0, 0, 0, 0, 0, 0, 452, 461,
	486, 446, 0, 0, 0, 0, 0, 0, 942, 0,
	428, 0, 469, 0, 0, 0, 410, 407, 0, 0,
	450, 0, 0, 0, 412, 0, 429, 487, 0, 400,
	134, 491, 498, 447, 255, 502, 445, 444, 199, 0,
	230, 137, 151, 112, 98, 108, 0, 136, 177, 206,
	210, 495, 426, 434, 120, 432, 208, 187, 246, 468,
	189, 207, 155, 236, 200, 245, 256, 257, 233, 253,
	261, 223, 101, 232, 244, 117, 218, 103, 242, 229,
	166, 146, 147, 102, 0, 204, 125, 132, 122, 179,
	239, 240, 121, 264, 109, 252, 105, 110, 251, 173,
	235, 243, 167, 160, 104, 241, 165, 159, 150, 129,
	139, 197, 157, 198, 140, 170, 169, 171, 0, 405,
	0, 227, 249, 265, 114, 421, 234, 259, 260, 0,
	0, 115, 133, 128, 196, 172, 111, 142, 224, 149,
	156, 203, 263, 186, 209, 118, 248, 225, 417, 420,
	415, 416, 463, 464, 510, 511, 512, 488, 411, 0,
	418, 419, 0, 493, 500, 501, 467, 97, 106, 153,
	262, 201, 131, 250, 401, 414, 124, 424, 0, 0,
	436, 441, 442, 454, 456, 457, 458, 459, 466, 473,
	474, 476, 482, 483, 484, 485, 490, 497, 516, 99,
	100, 107, 113, 119, 123, 127, 130, 135, 138, 141,
	143, 144, 145, 148, 158, 161, 162, 163, 164, 174,
	175, 176, 178, 181, 182, 183, 184, 185, 188, 190,
	191, 192, 193, 194, 195, 202, 205, 211, 212, 213,
	214, 215, 216, 217, 219, 220, 221, 222, 228, 231,
	237, 238, 247, 254, 258, 504, 492, 0, 449, 507,
	423, 439, 515, 440, 443, 480, 408, 462, 180, 437,
	0, 427, 403, 433, 404, 425, 451, 126, 422, 494,
	465, 506, 152, 505, 455, 513, 154, 471, 0, 226,
	168, 0, 0, 453, 496, 460, 489, 448, 481, 413,
	470, 508, 438, 478, 509, 0, 0, 0, 320, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 0, 475,
	503, 435, 477, 479, 402, 472, 0, 406, 409, 514,
	499, 430, 431, 0, 0, 0, 0, 0, 0, 0,
	452, 461, 486, 446, 0, 0, 0, 0, 0, 0,
	841, 0, 428, 0, 469, 0, 0, 0, 410, 407,
	0, 0, 450, 0, 0, 0, 412, 0, 429, 487,
	0, 400, 134, 491, 498, 447, 255, 502, 445, 444,
	199, 0, 230, 137, 151, 112, 98, 108, 0, 136,
	177, 206, 210, 495, 426, 434, 120, 432, 208, 187,
	246, 468, 189, 207, 155, 236, 200, 245, 256, 257,
	233, 253, 261, 223, 101, 232, 244, 117, 218, 103,
	242, 229, 166, 146, 147, 102, 0, 204, 125, 132,
	122, 179, 239, 240, 121, 264, 109, 252, 105, 110,
	251, 173, 235, 243, 167, 160, 104, 241, 165, 159,
	150, 129, 139, 197, 157, 198, 140, 170, 169, 171,
	0, 405, 0, 227, 249, 265, 114, 421, 234, 259,
	260, 0, 0, 115, 133, 128, 196, 172, 111, 142,
	224, 149, 156, 203, 263, 186, 209, 118, 248, 225,
	417, 420, 415, 416, 463, 464, 510, 511, 512, 488,
	411, 0, 418, 419, 0, 493, 500, 501, 467, 97,
	106, 153, 262, 201, 131, 250, 401, 414, 124, 424,
	0, 0, 436, 441, 442, 454, 456, 457, 458, 459,
	466, 473, 474, 476, 482, 483, 484, 485, 490, 497,
	516, 99, 100, 107, 113, 119, 123, 127, 130, 135,
	138, 141, 143, 144, 145, 148, 158, 161, 162, 163,
	164, 174, 175, 176, 178, 181, 182, 183, 184, 185,
	188, 190, 191, 192, 193, 194, 195, 202, 205, 211,
	212, 213, 214, 215, 216, 217, 219, 220, 221, 222,
	228, 231, 237, 238, 247, 254, 258, 504, 492, 0,
	449, 507, 423, 439, 515, 440, 443, 480, 408, 462,
	180, 437, 0, 427, 403, 433, 404, 425, 451, 126,
	422, 494, 465, 506, 152, 505, 455, 513, 154, 471,
	0, 226, 168, 0, 0, 453, 496, 460, 489, 448,
	481, 413, 470, 508, 438, 478, 509, 0, 0, 0,
	398, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	0, 475, 503, 435, 477, 479, 402, 472, 0, 406,
	409, 514, 499, 430, 431, 0, 0, 0, 0, 0,
	0, 0, 452, 461, 486, 446, 0, 0, 0, 0,
	0, 0, 0, 0, 428, 0, 469, 0, 0, 0,
	410, 407, 0, 0, 450, 0, 0, 0, 412, 0,
	429, 487, 0, 400, 134, 491, 498, 447, 255, 502,
	445, 444, 199, 0, 230, 137, 151, 112, 98, 108,
	0, 136, 177, 206, 210, 495, 426, 434, 120, 432,
	208, 187, 246, 468, 189, 207, 155, 236, 200, 245,
	256, 257, 233, 253, 261, 223, 101, 232, 244, 117,
	218, 103, 242, 229, 166, 146, 147, 102, 0, 204,
	125, 132, 122, 179, 239, 240, 121, 264, 109, 252,
	105, 110, 251, 173, 235, 243, 167, 160, 104, 241,
	165, 159, 150, 129, 139, 197, 157, 198, 140, 170,
	169, 171, 0, 405, 0, 227, 249, 265, 114, 421,
	234, 259, 260, 0, 0, 115, 133, 128, 196, 172,
	111, 142, 224, 149, 156, 203, 263, 186, 209, 118,
	248, 225, 417, 420, 415, 416, 463, 464, 510, 511,
	512, 488, 411, 0, 418, 419, 0, 493, 500, 501,
	467, 97, 106, 153, 262, 201, 131, 250, 401, 414,
	124, 424, 0, 0, 436, 441, 442, 454, 456, 457,
	458, 459, 466, 473, 474, 476, 482, 483, 484, 485,
	490, 497, 516, 99, 100, 107, 113, 119, 123, 127,
	130, 135, 138, 141, 143, 144, 145, 148, 158, 161,
	162, 163, 164, 174, 175, 176, 178, 181, 182, 183,
	184, 185, 188, 190, 191, 192, 193, 194, 195, 202,
	205, 211, 212, 213, 214, 215, 216, 217, 219, 220,
	221, 222, 228, 231, 237, 238, 247, 254, 258, 504,
	492, 0, 449, 507, 423, 439, 515, 440, 443, 480,
	408, 462, 180, 437, 0, 427, 403, 433, 404, 425,
	451, 126, 422, 494, 465, 506, 152, 505, 455, 513,
	154, 471, 0, 226, 168, 0, 0, 453, 496, 460,
	489, 448, 481, 413, 470, 508, 438, 478, 509, 0,
	0, 0, 320, 0, 0, 0, 0, 0, 0, 0,
	0, 116, 0, 475, 503, 435, 477, 479, 402, 472,
	0, 406, 409, 514, 499, 430, 431, 0, 0, 0,
	0, 0, 0, 0, 452, 461, 486, 446, 0, 0,
	0, 0, 0, 0, 0, 0, 428, 0, 469, 0,
	0, 0, 410, 407, 0, 0, 450, 0, 0, 0,
	412, 0, 429, 487, 0, 400, 134, 491, 498, 447,
	255, 502, 445, 444, 199, 0, 230, 137, 151, 112,
	98, 108, 0, 136, 177, 206, 210, 495, 426, 434,
	120, 432, 208, 187, 246, 468, 189, 207, 155, 236,
	200, 245, 256, 257, 233, 253, 261, 223, 101, 232,
	244, 117, 218, 103, 242, 229, 166, 146, 147, 102,
	0, 204, 125, 132, 122, 179, 239, 240, 121, 264,
	109, 252, 105, 110, 251, 173, 235, 243, 167, 160,
	104, 241, 165, 159, 150, 129, 139, 197, 157, 198,
	140, 170, 169, 171, 0, 405, 0, 227, 249, 265,
	114, 421, 234, 259, 260, 0, 0, 115, 133, 128,
	196, 172, 111, 142, 224, 149, 156, 203, 263, 186,
	209, 118, 248, 225, 417, 420, 415, 416, 463, 464,
	510, 511, 512, 488, 411, 0, 418, 419, 0, 493,
	500, 501, 467, 97, 106, 153, 262, 201, 131, 250,
	401, 414, 124, 424, 0, 0, 436, 441, 442, 454,
	456, 457, 458, 459, 466, 473, 474, 476, 482, 483,
	484, 485, 490, 497, 516, 99, 100, 107, 113, 119,
	123, 127, 130, 135, 138, 141, 143, 144, 145, 148,
	158, 161, 162, 163, 164, 174, 175, 176, 178, 181,
	182, 183, 184, 185, 188, 190, 191, 192, 193, 194,
	195, 202, 205, 211, 212, 213, 214, 215, 216, 217,
	219, 220, 221, 222, 228, 231, 237, 238, 247, 254,
	258, 504, 492, 0, 449, 507, 423, 439, 515, 440,
	443, 480, 408, 462, 180, 437, 0, 427, 403, 433,
	404, 425, 451, 126, 422, 494, 465, 506, 152, 505,
	455, 513, 154, 471, 0, 226, 168, 0, 0, 453,
	496, 460, 489, 448, 481, 413, 470, 508, 438, 478,
	509, 0, 0, 0, 398, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 0, 475, 503, 435, 477, 479,
	402, 472, 0, 406, 409, 514, 499, 430, 431, 0,
	0, 0, 0, 0, 0, 0, 452, 461, 486, 446,
	0, 0, 0, 0, 0, 0, 0, 0, 428, 0,
	469, 0, 0, 0, 410, 407, 0, 0, 450, 0,
	0, 0, 412, 0, 429, 487, 0, 400, 134, 491,
	498, 447, 255, 502, 445, 444, 199, 0, 230, 137,
	151, 112, 98, 108, 0, 136, 177, 206, 210, 495,
	426, 434, 120, 432, 208, 187, 246, 468, 189, 207,
	155, 236, 200, 245, 256, 257, 233, 253, 261, 223,
	101, 232, 244, 117, 218, 103, 242, 229, 166, 146,
	147, 102, 0, 204, 125, 132, 122, 179, 239, 240,
	121, 264, 109, 252, 105, 396, 251, 173, 235, 243,
	167, 160, 104, 241, 165, 159, 150, 129, 139, 197,
	157, 198, 140, 170, 169, 171, 0, 405, 0, 227,
	249, 265, 114, 421, 234, 259, 260, 0, 0, 115,
	133, 128, 196, 397, 395, 142, 224, 149, 156, 203,
	263, 186, 209, 118, 248, 225, 417, 420, 415, 416,
	463, 464, 510, 511, 512, 488, 411, 0, 418, 419,
	0, 493, 500, 501, 467, 97, 106, 153, 262, 201,
	131, 250, 401, 414, 124, 424, 0, 0, 436, 441,
	442, 454, 456, 457, 458, 459, 466, 473, 474, 476,
	482, 483, 484, 485, 490, 497, 516, 99, 100, 107,
	113, 119, 123, 127, 130, 135, 138, 141, 143, 144,
	145, 148, 158, 161, 162, 163, 164, 174, 175, 176,
	178, 181, 182, 183, 184, 185, 188, 190, 191, 192,
	193, 194, 195, 202, 205, 211, 212, 213, 214, 215,
	216, 217, 219, 220, 221, 222, 228, 231, 237, 238,
	247, 254, 258, 504, 492, 0, 449, 507, 423, 439,
	515, 440, 443, 480, 408, 462, 180, 437, 0, 427,
	403, 433, 404, 425, 451, 126, 422, 494, 465, 506,
	152, 505, 455, 513, 154, 471, 0, 226, 168, 0,
	0, 453, 496, 460, 489, 448, 481, 413, 470, 508,
	438, 478, 509, 0, 0, 0, 95, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 0, 475, 503, 435,
	477, 479, 402, 472, 0, 406, 409, 514, 499, 430,
	431, 0, 0, 0, 0, 0, 0, 0, 452, 461,
	486, 446, 0, 0, 0, 0, 0, 0, 0, 0,
	428, 0, 469, 0, 0, 0, 410, 407, 0, 0,
	450, 0, 0, 0, 412, 0, 429, 487, 0, 400,
	134, 491, 498, 447, 255, 502, 445, 444, 199, 0,
	230, 137, 151, 112, 98, 108, 0, 136, 177, 206,
	210, 495, 426, 434, 120, 432, 208, 187, 246, 468,
	189, 207, 155, 236, 200, 245, 256, 257, 233, 253,
	261, 223, 101, 232, 244, 117, 218, 103, 242, 229,
	166, 146, 147, 102, 0, 204, 125, 132, 122, 179,
	239, 240, 121, 264, 109, 252, 105, 110, 251, 173,
	235, 243, 167, 160, 104, 241, 165, 159, 150, 129,
	139, 197, 157, 198, 140, 170, 169, 171, 0, 405,
	0, 227, 249, 265, 114, 421, 234, 259, 260, 0,
	0, 115, 133, 128, 196, 172, 111, 142, 224, 149,
	156, 203, 263, 186, 209, 118, 248, 225, 417, 420,
	415, 416, 463, 464, 510, 511, 512, 488, 411, 0,
	418, 419, 0, 493, 500, 501, 467, 97, 106, 153,
	262, 201, 131, 250, 401, 414, 124, 424, 0, 0,
	436, 441, 442, 454, 456, 457, 458, 459, 466, 473,
	474, 476, 482, 483, 484, 485, 490, 497, 516, 99,
	100, 107, 113, 119, 123, 127, 130, 135, 138, 141,
	143, 144, 145, 148, 158, 161, 162, 163, 164, 174,
	175, 176, 178, 181, 182, 183, 184, 185, 188, 190,
	191, 192, 193, 194, 195, 202, 205, 211, 212, 213,
	214, 215, 216, 217, 219, 220, 221, 222, 228, 231,
	237, 238, 247, 254, 258, 504, 492, 0, 449, 507,
	423, 439, 515, 440, 443, 480, 408, 462, 180, 437,
	0, 427, 403, 433, 404, 425, 451, 126, 422, 494,
	465, 506, 152, 505, 455, 513, 154, 471, 0, 226,
	168, 0, 0, 453, 496, 460, 489, 448, 481, 413,
	470, 508, 438, 478, 509, 0, 0, 0, 398, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 0, 475,
	503, 435, 477, 479, 402, 472, 0, 406, 409, 514,
	499, 430, 431, 0, 0, 0, 0, 0, 0, 0,
	452, 461, 486, 446, 0, 0, 0, 0, 0, 0,
	0, 0, 428, 0, 469, 0, 0, 0, 410, 407,
	0, 0, 450, 0, 0, 0, 412, 0, 429, 487,
	0, 400, 134, 491, 498, 447, 255, 502, 445, 444,
	199, 0, 230, 137, 151, 112, 98, 108, 0, 136,
	177, 206, 210, 495, 426, 434, 120, 432, 208, 187,
	246, 468, 189, 207, 155, 236, 200, 245, 256, 257,
	233, 253, 261, 223, 101, 232, 706, 117, 218, 103,
	242, 229, 166, 146, 147, 102, 0, 204, 125, 132,
	122, 179, 239, 240, 121, 264, 109, 252, 105, 396,
	251, 173, 235, 243, 167, 160, 104, 241, 165, 159,
	150, 129, 139, 197, 157, 198, 140, 170, 169, 171,
	0, 405, 0, 227, 249, 265, 114, 421, 234, 259,
	260, 0, 0, 115, 133, 128, 196, 397, 395, 142,
	224, 149, 156, 203, 263, 186, 209, 118, 248, 225,
	417, 420, 415, 416, 463, 464, 510, 511, 512, 488,
	411, 0, 418, 419, 0, 493, 500, 501, 467, 97,
	106, 153, 262, 201, 131, 250, 401, 414, 124, 424,
	0, 0, 436, 441, 442, 454, 456, 457, 458, 459,
	466, 473, 474, 476, 482, 483, 484, 485, 490, 497,
	516, 99, 100, 107, 113, 119, 123, 127, 130, 135,
	138, 141, 143, 144, 145, 148, 158, 161, 162, 163,
	164, 174, 175, 176, 178, 181, 182, 183, 184, 185,
	188, 190, 191, 192, 193, 194, 195, 202, 205, 211,
	212, 213, 214, 215, 216, 217, 219, 220, 221, 222,
	228, 231, 237, 238, 247, 254, 258, 504, 492, 0,
	449, 507, 423, 439, 515, 440, 443, 480, 408, 462,
	180, 437, 0, 427, 403, 433, 404, 425, 451, 126,
	422, 494, 465, 506, 152, 505, 455, 513, 154, 471,
	0, 226, 168, 0, 0, 453, 496, 460, 489, 448,
	481, 413, 470, 508, 438, 478, 509, 0, 0, 0,
	398, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	0, 475, 503, 435, 477, 479, 402, 472, 0, 406,
	409, 514, 499, 430, 431, 0, 0, 0, 0, 0,
	0, 0, 452, 461, 486, 446, 0, 0, 0, 0,
	0, 0, 0, 0, 428, 0, 469, 0, 0, 0,
	410, 407, 0, 0, 450, 0, 0, 0, 412, 0,
	429, 487, 0, 400, 134, 491, 498, 447, 255, 502,
	445, 444, 199, 0, 230, 137, 151, 112, 98, 108,
	0, 136, 177, 206, 210, 495, 426, 434, 120, 432,
	208, 187, 246, 468, 189, 207, 155, 236, 200, 245,
	256, 257, 233, 253, 261, 223, 101, 232, 387, 117,
	218, 103, 242, 229, 166, 146, 147, 102, 0, 204,
	125, 132, 122, 179, 239, 240, 121, 264, 109, 252,
	105, 396, 251, 173, 235, 243, 167, 160, 104, 241,
	165, 159, 150, 129, 139, 197, 157, 198, 140, 170,
	169, 171, 0, 405, 0, 227, 249, 265, 114, 421,
	234, 259, 260, 0, 0, 115, 133, 128, 196, 397,
	395, 390, 389, 149, 156, 203, 263, 186, 209, 118,
	248, 225, 417, 420, 415, 416, 463, 464, 510, 511,
	512, 488, 411, 0, 418, 419, 0, 493, 500, 501,
	467, 97, 106, 153, 262, 201, 131, 250, 401, 414,
	124, 424, 0, 0, 436, 441, 442, 454, 456, 457,
	458, 459, 466, 473, 474, 476, 482, 483, 484, 485,
	490, 497, 516, 99, 100, 107, 113, 119, 123, 127,
	130, 135, 138, 141, 143, 144, 145, 148, 158, 161,
	162, 163, 164, 174, 175, 176, 178, 181, 182, 183,
	184, 185, 188, 190, 191, 192, 193, 194, 195, 202,
	205, 211, 212, 213, 214, 215, 216, 217, 219, 220,
	221, 222, 228, 231, 237, 238, 247, 254, 258, 180,
	0, 0, 0, 0, 322, 0, 0, 0, 126, 319,
	0, 0, 0, 152, 0, 0, 362, 154, 0, 0,
	226, 168, 0, 0, 0, 0, 353, 354, 0, 0,
	0, 0, 0, 0, 949, 0, 55, 0, 0, 320,
	341, 340, 343, 344, 345, 346, 0, 0, 116, 342,
	347, 348, 349, 950, 0, 0, 317, 334, 0, 361,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 331,
	332, 0, 0, 0, 0, 375, 0, 333, 0, 0,
	328, 329, 330, 335, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 134, 0, 0, 0, 255, 0, 0,
	373, 199, 0, 230, 137, 151, 112, 98, 108, 0,
	136, 177, 206, 210, 0, 0, 0, 120, 0, 208,
	187, 246, 0, 189, 207, 155, 236, 200, 245, 256,
	257, 233, 253, 261, 223, 101, 232, 244, 117, 218,
	103, 242, 229, 166, 146, 147, 102, 0, 204, 125,
	132, 122, 179, 239, 240, 121, 264, 109, 252, 105,
	110, 251, 173, 235, 243, 167, 160, 104, 241, 165,
	159, 150, 129, 139, 197, 157, 198, 140, 170, 169,
	171, 0, 0, 0, 227, 249, 265, 114, 0, 234,
	259, 260, 0, 0, 115, 133, 128, 196, 172, 111,
	142, 224, 149, 156, 203, 263, 186, 209, 118, 248,
	225, 363, 374, 369, 370, 367, 368, 366, 365, 364,
	376, 355, 356, 357, 358, 360, 0, 371, 372, 359,
	97, 106, 153, 262, 201, 131, 250, 0, 0, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 100, 107, 113, 119, 123, 127, 130,
	135, 138, 141, 143, 144, 145, 148, 158, 161, 162,
	163, 164, 174, 175, 176, 178, 181, 182, 183, 184,
	185, 188, 190, 191, 192, 193, 194, 195, 202, 205,
	211, 212, 213, 214, 215, 216, 217, 219, 220, 221,
	222, 228, 231, 237, 238, 247, 254, 258, 180, 0,
	0, 0, 0, 322, 0, 0, 0, 126, 319, 0,
	0, 0, 152, 0, 0, 362, 154, 0, 0, 226,
	168, 0, 0, 0, 0, 353, 354, 0, 0, 0,
	0, 0, 0, 0, 0, 55, 0, 578, 320, 341,
	340, 343, 344, 345, 346, 0, 0, 116, 342, 347,
	348, 349, 0, 0, 0, 317, 334, 0, 361, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 331, 332,
	0, 0, 0, 0, 375, 0, 333, 0, 0, 328,
	329, 330, 335, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 134, 0, 0, 0, 255, 0, 0, 373,
	199, 0, 230, 137, 151, 112, 98, 108, 0, 136,
	177, 206, 210, 0, 0, 0, 120, 0, 208, 187,
	246, 0, 189, 207, 155, 236, 200, 245, 256, 257,
	233, 253, 261, 223, 101, 232, 244, 117, 218, 103,
	242, 229, 166, 146, 147, 102, 0, 204, 125, 132,
	122, 179, 239, 240, 121, 264, 109, 252, 105, 110,
	251, 173, 235, 243, 167, 160, 104, 241, 165, 159,
	150, 129, 139, 197, 157, 198, 140, 170, 169, 171,
	0, 0, 0, 227, 249, 265, 114, 0, 234, 259,
	260, 0, 0, 115, 133, 128, 196, 172, 111, 142,
	224, 149, 156, 203, 263, 186, 209, 118, 248, 225,
	363, 374, 369, 370, 367, 368, 366, 365, 364, 376,
	355, 356, 357, 358, 360, 0, 371, 372, 359, 97,
	106, 153, 262, 201, 131, 250, 0, 0, 124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 100, 107, 113, 119, 123, 127, 130, 135,
	138, 141, 143, 144, 145, 148, 158, 161, 162, 163,
	164, 174, 175, 176, 178, 181, 182, 183, 184, 185,
	188, 190, 191, 192, 193, 194, 195, 202, 205, 211,
	212, 213, 214, 215, 216, 217, 219, 220, 221, 222,
	228, 231, 237, 238, 247, 254, 258, 180, 0, 0,
	0, 0, 322, 0, 0, 0, 126, 319, 0, 0,
	0, 152, 0, 0, 362, 154, 0, 0, 226, 168,
	0, 0, 0, 0, 353, 354, 0, 0, 0, 0,
	0, 0, 0, 0, 55, 0, 0, 320, 341, 340,
	343, 344, 345, 346, 0, 0, 116, 342, 347, 348,
	349, 0, 0, 0, 317, 334, 0, 361, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 331, 332, 313,
	0, 0, 0, 375, 0, 333, 0, 0, 328, 329,
	330, 335, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 134, 0, 0, 0, 255, 0, 0, 373, 199,
	0, 230, 137, 151, 112, 98, 108, 0, 136, 177,
	206, 210, 0, 0, 0, 120, 0, 208, 187, 246,
	0, 189, 207, 155, 236, 200, 245, 256, 257, 233,
	253, 261, 223, 101, 232, 244, 117, 218, 103, 242,
	229, 166, 146, 147, 102, 0, 204, 125, 132, 122,
	179, 239, 240, 121, 264, 109, 252, 105, 110, 251,
	173, 235, 243, 167, 160, 104, 241, 165, 159, 150,
	129, 139, 197, 157, 198, 140, 170, 169, 171, 0,
	0, 0, 227, 249, 265, 114, 0, 234, 259, 260,
	0, 0, 115, 133, 128, 196, 172, 111, 142, 224,
	149, 156, 203, 263, 186, 209, 118, 248, 225, 363,
	374, 369, 370, 367, 368, 366, 365, 364, 376, 355,
	356, 357, 358, 360, 0, 371, 372, 359, 97, 106,
	153, 262, 201, 131, 250, 0, 0, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 100, 107, 113, 119, 123, 127, 130, 135, 138,
	141, 143, 144, 145, 148, 158, 161, 162, 163, 164,
	174, 175, 176, 178, 181, 182, 183, 184, 185, 188,
	190, 191, 192, 193, 194, 195, 202, 205, 211, 212,
	213, 214, 215, 216, 217, 219, 220, 221, 222, 228,
	231, 237, 238, 247, 254, 258, 180, 0, 0, 0,
	0, 322, 0, 0, 0, 126, 319, 0, 0, 0,
	152, 0, 0, 362, 154, 0, 0, 226, 168, 0,
	0, 0, 0, 353, 354, 0, 0, 0, 0, 0,
	0, 0, 0, 55, 0, 0, 320, 341, 890, 343,
	344, 345, 346, 0, 0, 116, 342, 347, 348, 349,
	0, 0, 0, 317, 334, 0, 361, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 331, 332, 313, 0,
	0, 0, 375, 0, 333, 0, 0, 328, 329, 330,
	335, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	134, 0, 0, 0, 255, 0, 0, 373, 199, 0,
	230, 137, 151, 112, 98, 108, 0, 136, 177, 206,
	210, 0, 0, 0, 120, 0, 208, 187, 246, 0,
	189, 207, 155, 236, 200, 245, 256, 257, 233, 253,
	261, 223, 101, 232, 244, 117, 218, 103, 242, 229,
	166, 146, 147, 102, 0, 204, 125, 132, 122, 179,
	239, 240, 121, 264, 109, 252, 105, 110, 251, 173,
	235, 243, 167, 160, 104, 241, 165, 159, 150, 129,
	139, 197, 157, 198, 140, 170, 169, 171, 0, 0,
	0, 227, 249, 265, 114, 0, 234, 259, 260, 0,
	0, 115, 133, 128, 196, 172, 111, 142, 224, 149,
	156, 203, 263, 186, 209, 118, 248, 225, 363, 374,
	369, 370, 367, 368, 366, 365, 364, 376, 355, 356,
	357, 358, 360, 0, 371, 372, 359, 97, 106, 153,
	262, 201, 131, 250, 0, 0, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	100, 107, 113, 119, 123, 127, 130, 135, 138, 141,
	143, 144, 145, 148, 158, 161, 162, 163, 164, 174,
	175, 176, 178, 181, 182, 183, 184, 185, 188, 190,
	191, 192, 193, 194, 195, 202, 205, 211, 212, 213,
	214, 215, 216, 217, 219, 220, 221, 222, 228, 231,
	237, 238, 247, 254, 258, 180, 0, 0, 0, 0,
	322, 0, 0, 0, 126, 319, 0, 0, 0, 152,
	0, 0, 362, 154, 0, 0, 226, 168, 0, 0,
	0, 0, 353, 354, 0, 0, 0, 0, 0, 0,
	0, 0, 55, 0, 0, 320, 341, 887, 343, 344,
	345, 346, 0, 0, 116, 342, 347, 348, 349, 0,
	0, 0, 317, 334, 0, 361, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 331, 332, 313, 0, 0,
	0, 375, 0, 333, 0, 0, 328, 329, 330, 335,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 134,
	0, 0, 0, 255, 0, 0, 373, 199, 0, 230,
	137, 151, 112, 98, 108, 0, 136, 177, 206, 210,
	0, 0, 0, 120, 0, 208, 187, 246, 0, 189,
	207, 155, 236, 200, 245, 256, 257, 233, 253, 261,
	223, 101, 232, 244, 117, 218, 103, 242, 229, 166,
	146, 147, 102, 0, 204, 125, 132, 122, 179, 239,
	240, 121, 264, 109, 252, 105, 110, 251, 173, 235,
	243, 167, 160, 104, 241, 165, 159, 150, 129, 139,
	197, 157, 198, 140, 170, 169, 171, 0, 0, 0,
	227, 249, 265, 114, 0, 234, 259, 260, 0, 0,
	115, 133, 128, 196, 172, 111, 142, 224, 149, 156,
	203, 263, 186, 209, 118, 248, 225, 363, 374, 369,
	370, 367, 368, 366, 365, 364, 376, 355, 356, 357,
	358, 360, 0, 371, 372, 359, 97, 106, 153, 262,
	201, 131, 250, 0, 0, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 100,
	107, 113, 119, 123, 127, 130, 135, 138, 141, 143,
	144, 145, 148, 158, 161, 162, 163, 164, 174, 175,
	176, 178, 181, 182, 183, 184, 185, 188, 190, 191,
	192, 193, 194, 195, 202, 205, 211, 212, 213, 214,
	215, 216, 217, 219, 220, 221, 222, 228, 231, 237,
	238, 247, 254, 258, 24, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 180, 0, 0, 0,
	0, 322, 0, 0, 0, 126, 319, 0, 0, 0,
	152, 0, 0, 362, 154, 0, 0, 226, 168, 0,
	0, 0, 0, 353, 354, 0, 0, 0, 0, 0,
	0, 0, 0, 55, 0, 0, 320, 341, 340, 343,
	344, 345, 346, 0, 0, 116, 342, 347, 348, 349,
	0, 0, 0, 317, 334, 0, 361, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 331, 332, 0, 0,
	0, 0, 375, 0, 333, 0, 0, 328, 329, 330,
	335, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	134, 0, 0, 0, 255, 0, 0, 373, 199, 0,
	230, 137, 151, 112, 98, 108, 0, 136, 177, 206,
	210, 0, 0, 0, 120, 0, 208, 187, 246, 0,
	189, 207, 155, 236, 200, 245, 256, 257, 233, 253,
	261, 223, 101, 232, 244, 117, 218, 103, 242, 229,
	166, 146, 147, 102, 0, 204, 125, 132, 122, 179,
	239, 240, 121, 264, 109, 252, 105, 110, 251, 173,
	235, 243, 167, 160, 104, 241, 165, 159, 150, 129,
	139, 197, 157, 198, 140, 170, 169, 171, 0, 0,
	0, 227, 249, 265, 114, 0, 234, 259, 260, 0,
	0, 115, 133, 128, 196, 172, 111, 142, 224, 149,
	156, 203, 263, 186, 209, 118, 248, 225, 363, 374,
	369, 370, 367, 368, 366, 365, 364, 376, 355, 356,
	357, 358, 360, 0, 371, 372, 359, 97, 106, 153,
	262, 201, 131, 250, 0, 0, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	100, 107, 113, 119, 123, 127, 130, 135, 138, 141,
	143, 144, 145, 148, 158, 161, 162, 163, 164, 174,
	175, 176, 178, 181, 182, 183, 184, 185, 188, 190,
	191, 192, 193, 194, 195, 202, 205, 211, 212, 213,
	214, 215, 216, 217, 219, 220, 221, 222, 228, 231,
	237, 238, 247, 254, 258, 180, 0, 0, 0, 0,
	322, 0, 0, 0, 126, 319, 0, 0, 0, 152,
	0, 0, 362, 154, 0, 0, 226, 168, 0, 0,
	0, 0, 353, 354, 0, 0, 0, 0, 0, 0,
	0, 0, 55, 0, 0, 320, 341, 340, 343, 344,
	345, 346, 0, 0, 116, 342, 347, 348, 349, 0,
	0, 0, 317, 334, 0, 361, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 331, 332, 0, 0, 0,
	0, 375, 0, 333, 0, 0, 328, 329, 330, 335,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 134,
	0, 0, 0, 255, 0, 0, 373, 199, 0, 230,
	137, 151, 112, 98, 108, 0, 136, 177, 206, 210,
	0, 0, 0, 120, 0, 208, 187, 246, 0, 189,
	207, 155, 236, 200, 245, 256, 257, 233, 253, 261,
	223, 101, 232, 244, 117, 218, 103, 242, 229, 166,
	146, 147, 102, 0, 204, 125, 132, 122, 179, 239,
	240, 121, 264, 109, 252, 105, 110, 251, 173, 235,
	243, 167, 160, 104, 241, 165, 159, 150, 129, 139,
	197, 157, 198, 140, 170, 169, 171, 0, 0, 0,
	227, 249, 265, 114, 0, 234, 259, 260, 0, 0,
	115, 133, 128, 196, 172, 111, 142, 224, 149, 156,
	203, 263, 186, 209, 118, 248, 225, 363, 374, 369,
	370, 367, 368, 366, 365, 364, 376, 355, 356, 357,
	358, 360, 0, 371, 372, 359, 97, 106, 153, 262,
	201, 131, 250, 0, 0, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 100,
	107, 113, 119, 123, 127, 130, 135, 138, 141, 143,
	144, 145, 148, 158, 161, 162, 163, 164, 174, 175,
	176, 178, 181, 182, 183, 184, 185, 188, 190, 191,
	192, 193, 194, 195, 202, 205, 211, 212, 213, 214,
	215, 216, 217, 219, 220, 221, 222, 228, 231, 237,
	238, 247, 254, 258, 180, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 0, 0, 0, 152, 0,
	0, 362, 154, 0, 0, 226, 168, 0, 0, 0,
	0, 353, 354, 0, 0, 0, 0, 0, 0, 0,
	0, 55, 0, 0, 320, 341, 340, 343, 344, 345,
	346, 0, 0, 116, 342, 347, 348, 349, 0, 0,
	0, 0, 334, 0, 361, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 331, 332, 0, 0, 0, 0,
	375, 0, 333, 0, 0, 328, 329, 330, 335, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 134, 0,
	0, 0, 255, 0, 0, 373, 199, 0, 230, 137,
	151, 112, 98, 108, 0, 136, 177, 206, 210, 0,
	0, 0, 120, 0, 208, 187, 246, 1532, 189, 207,
	155, 236, 200, 245, 256, 257, 233, 253, 261, 223,
	101, 232, 244, 117, 218, 103, 242, 229, 166, 146,
	147, 102, 0, 204, 125, 132, 122, 179, 239, 240,
	121, 264, 109, 252, 105, 110, 251, 173, 235, 243,
	167, 160, 104, 241, 165, 159, 150, 129, 139, 197,
	157, 198, 140, 170, 169, 171, 0, 0, 0, 227,
	249, 265, 114, 0, 234, 259, 260, 0, 0, 115,
	133, 128, 196, 172, 111, 142, 224, 149, 156, 203,
	263, 186, 209, 118, 248, 225, 363, 374, 369, 370,
	367, 368, 366, 365, 364, 376, 355, 356, 357, 358,
	360, 0, 371, 372, 359, 97, 106, 153, 262, 201,
	131, 250, 0, 0, 124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 100, 107,
	113, 119, 123, 127, 130, 135, 138, 141, 143, 144,
	145, 148, 158, 161, 162, 163, 164, 174, 175, 176,
	178, 181, 182, 183, 184, 185, 188, 190, 191, 192,
	193, 194, 195, 202, 205, 211, 212, 213, 214, 215,
	216, 217, 219, 220, 221, 222, 228, 231, 237, 238,
	247, 254, 258, 180, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 0, 0, 0, 152, 0, 0,
	362, 154, 0, 0, 226, 168, 0, 0, 0, 0,
	353, 354, 0, 0, 0, 0, 0, 0, 0, 0,
	55, 0, 578, 320, 341, 340, 343, 344, 345, 346,
	0, 0, 116, 342, 347, 348, 349, 0, 0, 0,
	0, 334, 0, 361, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 331, 332, 0, 0, 0, 0, 375,
	0, 333, 0, 0, 328, 329, 330, 335, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 134, 0, 0,
	0, 255, 0, 0, 373, 199, 0, 230, 137, 151,
	112, 98, 108, 0, 136, 177, 206, 210, 0, 0,
	0, 120, 0, 208, 187, 246, 0, 189, 207, 155,
	236, 200, 245, 256, 257, 233, 253, 261, 223, 101,
	232, 244, 117, 218, 103, 242, 229, 166, 146, 147,
	102, 0, 204, 125, 132, 122, 179, 239, 240, 121,
	264, 109, 252, 105, 110, 251, 173, 235, 243, 167,
	160, 104, 241, 165, 159, 150, 129, 139, 197, 157,
	198, 140, 170, 169, 171, 0, 0, 0, 227, 249,
	265, 114, 0, 234, 259, 260, 0, 0, 115, 133,
	128, 196, 172, 111, 142, 224, 149, 156, 203, 263,
	186, 209, 118, 248, 225, 363, 374, 369, 370, 367,
	368, 366, 365, 364, 376, 355, 356, 357, 358, 360,
	0, 371, 372, 359, 97, 106, 153, 262, 201, 131,
	250, 0, 0, 124, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 100, 107, 113,
	119, 123, 127, 130, 135, 138, 141, 143, 144, 145,
	148, 158, 161, 162, 163, 164, 174, 175, 176, 178,
	181, 182, 183, 184, 185, 188, 190, 191, 192, 193,
	194, 195, 202, 205, 211, 212, 213, 214, 215, 216,
	217, 219, 220, 221, 222, 228, 231, 237, 238, 247,
	254, 258, 180, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 0, 0, 0, 152, 0, 0, 362,
	154, 0, 0, 226, 168, 0, 0, 0, 0, 353,
	354, 0, 0, 0, 0, 0, 0, 0, 0, 55,
	0, 0, 320, 341, 340, 343, 344, 345, 346, 0,
	0, 116, 342, 347, 348, 349, 0, 0, 0, 0,
	334, 0, 361, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 331, 332, 0, 0, 0, 0, 375, 0,
	333, 0, 0, 328, 329, 330, 335, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 134, 0, 0, 0,
	255, 0, 0, 373, 199, 0, 230, 137, 151, 112,
	98, 108, 0, 136, 177, 206, 210, 0, 0, 0,
	120, 0, 208, 187, 246, 0, 189, 207, 155, 236,
	200, 245, 256, 257, 233, 253, 261, 223, 101, 232,
	244, 117, 218, 103, 242, 229, 166, 146, 147, 102,
	0, 204, 125, 132, 122, 179, 239, 240, 121, 264,
	109, 252, 105, 110, 251, 173, 235, 243, 167, 160,
	104, 241, 165, 159, 150, 129, 139, 197, 157, 198,
	140, 170, 169, 171, 0, 0, 0, 227, 249, 265,
	114, 0, 234, 259, 260, 0, 0, 115, 133, 128,
	196, 172, 111, 142, 224, 149, 156, 203, 263, 186,
	209, 118, 248, 225, 363, 374, 369, 370, 367, 368,
	366, 365, 364, 376, 355, 356, 357, 358, 360, 0,
	371, 372, 359, 97, 106, 153, 262, 201, 131, 250,
	0, 0, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 100, 107, 113, 119,
	123, 127, 130, 135, 138, 141, 143, 144, 145, 148,
	158, 161, 162, 163, 164, 174, 175, 176, 178, 181,
	182, 183, 184, 185, 188, 190, 191, 192, 193, 194,
	195, 202, 205, 211, 212, 213, 214, 215, 216, 217,
	219, 220, 221, 222, 228, 231, 237, 238, 247, 254,
	258, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 0, 0, 0, 152, 0, 0, 0, 154,
	0, 0, 226, 168, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 398, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 613, 612, 622,
	623, 615, 616, 617, 618, 619, 620, 621, 614, 0,
	0, 624, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 134, 0, 0, 0, 255,
	0, 0, 0, 199, 0, 230, 137, 151, 112, 98,
	108, 0, 136, 177, 206, 210, 0, 0, 0, 120,
	0, 208, 187, 246, 0, 189, 207, 155, 236, 200,
	245, 256, 257, 233, 253, 261, 223, 101, 232, 244,
	117, 218, 103, 242, 229, 166, 146, 147, 102, 0,
	204, 125, 132, 122, 179, 239, 240, 121, 264, 109,
	252, 105, 110, 251, 173, 235, 243, 167, 160, 104,
	241, 165, 159, 150, 129, 139, 197, 157, 198, 140,
	170, 169, 171, 0, 0, 0, 227, 249, 265, 114,
	0, 234, 259, 260, 0, 0, 115, 133, 128, 196,
	172, 111, 142, 224, 149, 156, 203, 263, 186, 209,
	118, 248, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 106, 153, 262, 201, 131, 250, 0,
	0, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 100, 107, 113, 119, 123,
	127, 130, 135, 138, 141, 143, 144, 145, 148, 158,
	161, 162, 163, 164, 174, 175, 176, 178, 181, 182,
	183, 184, 185, 188, 190, 191, 192, 193, 194, 195,
	202, 205, 211, 212, 213, 214, 215, 216, 217, 219,
	220, 221, 222, 228, 231, 237, 238, 247, 254, 258,
	180, 0, 0, 0, 601, 0, 0, 0, 0, 126,
	0, 0, 0, 0, 152, 0, 0, 0, 154, 0,
	0, 226, 168, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	398, 0, 603, 0, 0, 0, 0, 0, 0, 116,
	0, 0, 0, 0, 0, 598, 597, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 599, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 134, 0, 0, 0, 255, 0,
	0, 0, 199, 0, 230, 137, 151, 112, 98, 108,
	0, 136, 177, 206, 210, 0, 0, 0, 120, 0,
	208, 187, 246, 0, 189, 207, 155, 236, 200, 245,
	256, 257, 233, 253, 261, 223, 101, 232, 244, 117,
	218, 103, 242, 229, 166, 146, 147, 102, 0, 204,
	125, 132, 122, 179, 239, 240, 121, 264, 109, 252,
	105, 110, 251, 173, 235, 243, 167, 160, 104, 241,
	165, 159, 150, 129, 139, 197, 157, 198, 140, 170,
	169, 171, 0, 0, 0, 227, 249, 265, 114, 0,
	234, 259, 260, 0, 0, 115, 133, 128, 196, 172,
	111, 142, 224, 149, 156, 203, 263, 186, 209, 118,
	248, 225, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 106, 153, 262, 201, 131, 250, 0, 0,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 100, 107, 113, 119, 123, 127,
	130, 135, 138, 141, 143, 144, 145, 148, 158, 161,
	162, 163, 164, 174, 175, 176, 178, 181, 182, 183,
	184, 185, 188, 190, 191, 192, 193, 194, 195, 202,
	205, 211, 212, 213, 214, 215, 216, 217, 219, 220,
	221, 222, 228, 231, 237, 238, 247, 254, 258, 180,
	0, 0, 0, 932, 0, 0, 0, 0, 126, 0,
	0, 0, 0, 152, 0, 0, 0, 154, 0, 0,
	226, 168, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 95,
	0, 934, 0, 0, 0, 0, 0, 0, 116, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 134, 0, 0, 0, 255, 0, 0,
	0, 199, 0, 230, 137, 151, 112, 98, 108, 0,
	136, 177, 206, 210, 0, 0, 0, 120, 0, 208,
	187, 246, 0, 189, 207, 155, 236, 200, 245, 256,
	257, 233, 253, 261, 223, 101, 232, 244, 117, 218,
	103, 242, 229, 166, 146, 147, 102, 0, 204, 125,
	132, 122, 179, 239, 240, 121, 264, 109, 252, 105,
	110, 251, 173, 235, 243, 167, 160, 104, 241, 165,
	159, 150, 129, 139, 197, 157, 198, 140, 170, 169,
	171, 0, 0, 0, 227, 249, 265, 114, 0, 234,
	259, 260, 0, 0, 115, 133, 128, 196, 172, 111,
	142, 224, 149, 156, 203, 263, 186, 209, 118, 248,
	225, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 106, 153, 262, 201, 131, 250, 0, 0, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 100, 107, 113, 119, 123, 127, 130,
	135, 138, 141, 143, 144, 145, 148, 158, 161, 162,
	163, 164, 174, 175, 176, 178, 181, 182, 183, 184,
	185, 188, 190, 191, 192, 193, 194, 195, 202, 205,
	211, 212, 213, 214, 215, 216, 217, 219, 220, 221,
	222, 228, 231, 237, 238, 247, 254, 258, 24, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	180, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 0, 0, 0, 152, 0, 0, 0, 154, 0,
	0, 226, 168, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 55, 0, 0,
	398, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 134, 0, 0, 0, 255, 0,
	0, 0, 199, 0, 230, 137, 151, 112, 98, 108,
	0, 136, 177, 206, 210, 0, 0, 0, 120, 0,
	208, 187, 246, 0, 189, 207, 155, 236, 200, 245,
	256, 257, 233, 253, 261, 223, 101, 232, 244, 117,
	218, 103, 242, 229, 166, 146, 147, 102, 0, 204,
	125, 132, 122, 179, 239, 240, 121, 264, 109, 252,
	105, 110, 251, 173, 235, 243, 167, 160, 104, 241,
	165, 159, 150, 129, 139, 197, 157, 198, 140, 170,
	169, 171, 0, 0, 0, 227, 249, 265, 114, 0,
	234, 259, 260, 0, 0, 115, 133, 128, 196, 172,
	111, 142, 224, 149, 156, 203, 263, 186, 209, 118,
	248, 225, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 106, 153, 262, 201, 131, 250, 0, 0,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 100, 107, 113, 119, 123, 127,
	130, 135, 138, 141, 143, 144, 145, 148, 158, 161,
	162, 163, 164, 174, 175, 176, 178, 181, 182, 183,
	184, 185, 188, 190, 191, 192, 193, 194, 195, 202,
	205, 211, 212, 213, 214, 215, 216, 217, 219, 220,
	221, 222, 228, 231, 237, 238, 247, 254, 258, 24,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 180, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 0, 0, 0, 152, 0, 0, 0, 154,
	0, 0, 226, 168, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 55, 0,
	0, 95, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 134, 0, 0, 0, 255,
	0, 0, 0, 199, 0, 230, 137, 151, 112, 98,
	108, 0, 136, 177, 206, 210, 0, 0, 0, 120,
	0, 208, 187, 246, 0, 189, 207, 155, 236, 200,
	245, 256, 257, 233, 253, 261, 223, 101, 232, 244,
	117, 218, 103, 242, 229, 166, 146, 147, 102, 0,
	204, 125, 132, 122, 179, 239, 240, 121, 264, 109,
	252, 105, 110, 251, 173, 235, 243, 167, 160, 104,
	241, 165, 159, 150, 129, 139, 197, 157, 198, 140,
	170, 169, 171, 0, 0, 0, 227, 249, 265, 114,
	0, 234, 259, 260, 0, 0, 115, 133, 128, 196,
	172, 111, 142, 224, 149, 156, 203, 263, 186, 209,
	118, 248, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 106, 153, 262, 201, 131, 250, 0,
	0, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 100, 107, 113, 119, 123,
	127, 130, 135, 138, 141, 143, 144, 145, 148, 158,
	161, 162, 163, 164, 174, 175, 176, 178, 181, 182,
	183, 184, 185, 188, 190, 191, 192, 193, 194, 195,
	202, 205, 211, 212, 213, 214, 215, 216, 217, 219,
	220, 221, 222, 228, 231, 237, 238, 247, 254, 258,
	180, 0, 0, 0, 932, 0, 0, 0, 0, 126,
	0, 0, 0, 0, 152, 0, 0, 0, 154, 0,
	0, 226, 168, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	95, 0, 934, 0, 0, 0, 0, 0, 0, 116,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 134, 0, 0, 0, 255, 0,
	0, 0, 199, 0, 230, 137, 151, 112, 98, 108,
	0, 136, 177, 206, 210, 0, 0, 0, 120, 0,
	208, 187, 246, 0, 930, 207, 155, 236, 200, 245,
	256, 257, 233, 253, 261, 223, 101, 232, 244, 117,
	218, 103, 242, 229, 166, 146, 147, 102, 0, 204,
	125, 132, 122, 179, 239, 240, 121, 264, 109, 252,
	105, 110, 251, 173, 235, 243, 167, 160, 104, 241,
	165, 159, 150, 129, 139, 197, 157, 198, 140, 170,
	169, 171, 0, 0, 0, 227, 249, 265, 114, 0,
	234, 259, 260, 0, 0, 115, 133, 128, 196, 172,
	111, 142, 224, 149, 156, 203, 263, 186, 209, 118,
	248, 225, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 106, 153, 262, 201, 131, 250, 0, 0,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 100, 107, 113, 119, 123, 127,
	130, 135, 138, 141, 143, 144, 145, 148, 158, 161,
	162, 163, 164, 174, 175, 176, 178, 181, 182, 183,
	184, 185, 188, 190, 191, 192, 193, 194, 195, 202,
	205, 211, 212, 213, 214, 215, 216, 217, 219, 220,
	221, 222, 228, 231, 237, 238, 247, 254, 258, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 0, 0, 152, 0, 0, 0, 154, 0, 0,
	226, 168, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 398,
	0, 0, 828, 0, 0, 829, 0, 0, 116, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 134, 0, 0, 0, 255, 0, 0,
	0, 199, 0, 230, 137, 151, 112, 98, 108, 0,
	136, 177, 206, 210, 0, 0, 0, 120, 0, 208,
	187, 246, 0, 189, 207, 155, 236, 200, 245, 256,
	257, 233, 253, 261, 223, 101, 232, 244, 117, 218,
	103, 242, 229, 166, 146, 147, 102, 0, 204, 125,
	132, 122, 179, 239, 240, 121, 264, 109, 252, 105,
	110, 251, 173, 235, 243, 167, 160, 104, 241, 165,
	159, 150, 129, 139, 197, 157, 198, 140, 170, 169,
	171, 0, 0, 0, 227, 249, 265, 114, 0, 234,
	259, 260, 0, 0, 115, 133, 128, 196, 172, 111,
	142, 224, 149, 156, 203, 263, 186, 209, 118, 248,
	225, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 106, 153, 262, 201, 131, 250, 0, 0, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 100, 107, 113, 119, 123, 127, 130,
	135, 138, 141, 143, 144, 145, 148, 158, 161, 162,
	163, 164, 174, 175, 176, 178, 181, 182, 183, 184,
	185, 188, 190, 191, 192, 193, 194, 195, 202, 205,
	211, 212, 213, 214, 215, 216, 217, 219, 220, 221,
	222, 228, 231, 237, 238, 247, 254, 258, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 715, 0,
	0, 0, 152, 0, 0, 0, 154, 0, 0, 226,
	168, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 398, 0,
	714, 0, 0, 0, 0, 0, 0, 116, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 134, 0, 0, 0, 255, 0, 0, 0,
	199, 0, 230, 137, 151, 112, 98, 108, 0, 136,
	177, 206, 210, 0, 0, 0, 120, 0, 208, 187,
	246, 0, 189, 207, 155, 236, 200, 245, 256, 257,
	233, 253, 261, 223, 101, 232, 244, 117, 218, 103,
	242, 229, 166, 146, 147, 102, 0, 204, 125, 132,
	122, 179, 239, 240, 121, 264, 109, 252, 105, 110,
	251, 173, 235, 243, 167, 160, 104, 241, 165, 159,
	150, 129, 139, 197, 157, 198, 140, 170, 169, 171,
	0, 0, 0, 227, 249, 265, 114, 0, 234, 259,
	260, 0, 0, 115, 133, 128, 196, 172, 111, 142,
	224, 149, 156, 203, 263, 186, 209, 118, 248, 225,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	106, 153, 262, 201, 131, 250, 0, 0, 124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 100, 107, 113, 119, 123, 127, 130, 135,
	138, 141, 143, 144, 145, 148, 158, 161, 162, 163,
	164, 174, 175, 176, 178, 181, 182, 183, 184, 185,
	188, 190, 191, 192, 193, 194, 195, 202, 205, 211,
	212, 213, 214, 215, 216, 217, 219, 220, 221, 222,
	228, 231, 237, 238, 247, 254, 258, 180, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 0, 0,
	0, 152, 0, 0, 0, 154, 0, 0, 226, 168,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 55, 0, 0, 95, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 134, 0, 0, 0, 255, 0, 0, 0, 199,
	0, 230, 137, 151, 112, 98, 108, 0, 136, 177,
	206, 210, 0, 0, 0, 120, 0, 208, 187, 246,
	0, 189, 207, 155, 236, 200, 245, 256, 257, 233,
	253, 261, 223, 101, 232, 244, 117, 218, 103, 242,
	229, 166, 146, 147, 102, 0, 204, 125, 132, 122,
	179, 239, 240, 121, 264, 109, 252, 105, 110, 251,
	173, 235, 243, 167, 160, 104, 241, 165, 159, 150,
	129, 139, 197, 157, 198, 140, 170, 169, 171, 0,
	0, 0, 227, 249, 265, 114, 0, 234, 259, 260,
	0, 0, 115, 133, 128, 196, 172, 111, 142, 224,
	149, 156, 203, 263, 186, 209, 118, 248, 225, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 106,
	153, 262, 201, 131, 250, 0, 0, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 100, 107, 113, 119, 123, 127, 130, 135, 138,
	141, 143, 144, 145, 148, 158, 161, 162, 163, 164,
	174, 175, 176, 178, 181, 182, 183, 184, 185, 188,
	190, 191, 192, 193, 194, 195, 202, 205, 211, 212,
	213, 214, 215, 216, 217, 219, 220, 221, 222, 228,
	231, 237, 238, 247, 254, 258, 180, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 0, 0, 0,
	152, 0, 0, 0, 154, 0, 0, 226, 168, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 95, 0, 934, 0,
	0, 0, 0, 0, 0, 116, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	134, 0, 0, 0, 255, 0, 0, 0, 199, 0,
	230, 137, 151, 112, 98, 108, 0, 136, 177, 206,
	210, 0, 0, 0, 120, 0, 208, 187, 246, 0,
	189, 207, 155, 236, 200, 245, 256, 257, 233, 253,
	261, 223, 101, 232, 244, 117, 218, 103, 242, 229,
	166, 146, 147, 102, 0, 204, 125, 132, 122, 179,
	239, 240, 121, 264, 109, 252, 105, 110, 251, 173,
	235, 243, 167, 160, 104, 241, 165, 159, 150, 129,
	139, 197, 157, 198, 140, 170, 169, 171, 0, 0,
	0, 227, 249, 265, 114, 0, 234, 259, 260, 0,
	0, 115, 133, 128, 196, 172, 111, 142, 224, 149,
	156, 203, 263, 186, 209, 118, 248, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 106, 153,
	262, 201, 131, 250, 0, 0, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	100, 107, 113, 119, 123, 127, 130, 135, 138, 141,
	143, 144, 145, 148, 158, 161, 162, 163, 164, 174,
	175, 176, 178, 181, 182, 183, 184, 185, 188, 190,
	191, 192, 193, 194, 195, 202, 205, 211, 212, 213,
	214, 215, 216, 217, 219, 220, 221, 222, 228, 231,
	237, 238, 247, 254, 258, 180, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 0, 0, 0, 0, 152,
	0, 0, 0, 154, 0, 0, 226, 168, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 398, 0, 603, 0, 0,
	0, 0, 0, 0, 116, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 134,
	0, 0, 0, 255, 0, 0, 0, 199, 0, 230,
	137, 151, 112, 98, 108, 0, 136, 177, 206, 210,
	0, 0, 0, 120, 0, 208, 187, 246, 0, 189,
	207, 155, 236, 200, 245, 256, 257, 233, 253, 261,
	223, 101, 232, 244, 117, 218, 103, 242, 229, 166,
	146, 147, 102, 0, 204, 125, 132, 122, 179, 239,
	240, 121, 264, 109, 252, 105, 110, 251, 173, 235,
	243, 167, 160, 104, 241, 165, 159, 150, 129, 139,
	197, 157, 198, 140, 170, 169, 171, 0, 0, 0,
	227, 249, 265, 114, 0, 234, 259, 260, 0, 0,
	115, 133, 128, 196, 172, 111, 142, 224, 149, 156,
	203, 263, 186, 209, 118, 248, 225, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 106, 153, 262,
	201, 131, 250, 0, 0, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 100,
	107, 113, 119, 123, 127, 130, 135, 138, 141, 143,
	144, 145, 148, 158, 161, 162, 163, 164, 174, 175,
	176, 178, 181, 182, 183, 184, 185, 188, 190, 191,
	192, 193, 194, 195, 202, 205, 211, 212, 213, 214,
	215, 216, 217, 219, 220, 221, 222, 228, 231, 237,
	238, 247, 254, 258, 180, 0, 0, 0, 0, 0,
	0, 0, 685, 126, 0, 0, 0, 0, 152, 0,
	0, 0, 154, 0, 0, 226, 168, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 95, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 134, 0,
	0, 0, 255, 0, 0, 0, 199, 0, 230, 137,
	151, 112, 98, 108, 0, 136, 177, 206, 210, 0,
	0, 0, 120, 0, 208, 187, 246, 0, 189, 207,
	155, 236, 200, 245, 256, 257, 233, 253, 261, 223,
	101, 232, 244, 117, 218, 103, 242, 229, 166, 146,
	147, 102, 0, 204, 125, 132, 122, 179, 239, 240,
	121, 264, 109, 252, 105, 110, 251, 173, 235, 243,
	167, 160, 104, 241, 165, 159, 150, 129, 139, 197,
	157, 198, 140, 170, 169, 171, 0, 0, 0, 227,
	249, 265, 114, 0, 234, 259, 260, 0, 0, 115,
	133, 128, 196, 172, 111, 142, 224, 149, 156, 203,
	263, 186, 209, 118, 248, 225, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 106, 153, 262, 201,
	131, 250, 0, 0, 124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 100, 107,
	113, 119, 123, 127, 130, 135, 138, 141, 143, 144,
	145, 148, 158, 161, 162, 163, 164, 174, 175, 176,
	178, 181, 182, 183, 184, 185, 188, 190, 191, 192,
	193, 194, 195, 202, 205, 211, 212, 213, 214, 215,
	216, 217, 219, 220, 221, 222, 228, 231, 237, 238,
	247, 254, 258, 379, 0, 0, 0, 0, 0, 0,
	180, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 0, 0, 0, 152, 0, 0, 0, 154, 0,
	0, 226, 168, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	95, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 134, 0, 0, 0, 255, 0,
	0, 0, 199, 0, 230, 137, 151, 112, 98, 108,
	0, 136, 177, 206, 210, 0, 0, 0, 120, 0,
	208, 187, 246, 0, 189, 207, 155, 236, 200, 245,
	256, 257, 233, 253, 261, 223, 101, 232, 244, 117,
	218, 103, 242, 229, 166, 146, 147, 102, 0, 204,
	125, 132, 122, 179, 239, 240, 121, 264, 109, 252,
	105, 110, 251, 173, 235, 243, 167, 160, 104, 241,
	165, 159, 150, 129, 139, 197, 157, 198, 140, 170,
	169, 171, 0, 0, 0, 227, 249, 265, 114, 0,
	234, 259, 260, 0, 0, 115, 133, 128, 196, 172,
	111, 142, 224, 149, 156, 203, 263, 186, 209, 118,
	248, 225, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 106, 153, 262, 201, 131, 250, 0, 0,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 100, 107, 113, 119, 123, 127,
	130, 135, 138, 141, 143, 144, 145, 148, 158, 161,
	162, 163, 164, 174, 175, 176, 178, 181, 182, 183,
	184, 185, 188, 190, 191, 192, 193, 194, 195, 202,
	205, 211, 212, 213, 214, 215, 216, 217, 219, 220,
	221, 222, 228, 231, 237, 238, 247, 254, 258, 180,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 0, 0, 152, 0, 0, 0, 154, 0, 0,
	226, 168, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 95,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 134, 0, 92, 0, 255, 0, 0,
	0, 199, 0, 230, 137, 151, 112, 98, 108, 0,
	136, 177, 206, 210, 0, 0, 0, 120, 0, 208,
	187, 246, 0, 189, 207, 155, 236, 200, 245, 256,
	257, 233, 253, 261, 223, 101, 232, 244, 117, 218,
	103, 242, 229, 166, 146, 147, 102, 0, 204, 125,
	132, 122, 179, 239, 240, 121, 264, 109, 252, 105,
	110, 251, 173, 235, 243, 167, 160, 104, 241, 165,
	159, 150, 129, 139, 197, 157, 198, 140, 170, 169,
	171, 0, 0, 0, 227, 249, 265, 114, 0, 234,
	259, 260, 0, 0, 115, 133, 128, 196, 172, 111,
	142, 224, 149, 156, 203, 263, 186, 209, 118, 248,
	225, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 106, 153, 262, 201, 131, 250, 0, 0, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 100, 107, 113, 119, 123, 127, 130,
	135, 138, 141, 143, 144, 145, 148, 158, 161, 162,
	163, 164, 174, 175, 176, 178, 181, 182, 183, 184,
	185, 188, 190, 191, 192, 193, 194, 195, 202, 205,
	211, 212, 213, 214, 215, 216, 217, 219, 220, 221,
	222, 228, 231, 237, 238, 247, 254, 258, 180, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 0,
	0, 0, 152, 0, 0, 0, 154, 0, 0, 226,
	168, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 398, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 134, 0, 0, 0, 255, 0, 0, 0,
	199, 0, 230, 137, 151, 112, 98, 108, 0, 136,
	177, 206, 210, 0, 0, 0, 120, 0, 208, 187,
	246, 0, 189, 207, 155, 236, 200, 245, 256, 257,
	233, 253, 261, 223, 101, 232, 244, 117, 218, 103,
	242, 229, 166, 146, 147, 102, 0, 204, 125, 132,
	122, 179, 239, 240, 121, 264, 109, 252, 105, 110,
	251, 173, 235, 243, 167, 160, 104, 241, 165, 159,
	150, 129, 139, 197, 157, 198, 140, 170, 169, 171,
	0, 0, 0, 227, 249, 265, 114, 0, 234, 259,
	260, 0, 0, 115, 133, 128, 196, 172, 111, 142,
	224, 149, 156, 203, 263, 186, 209, 118, 248, 225,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	106, 153, 262, 201, 131, 250, 0, 0, 124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 100, 107, 113, 119, 123, 127, 130, 135,
	138, 141, 143, 144, 145, 148, 158, 161, 162, 163,
	164, 174, 175, 176, 178, 181, 182, 183, 184, 185,
	188, 190, 191, 192, 193, 194, 195, 202, 205, 211,
	212, 213, 214, 215, 216, 217, 219, 220, 221, 222,
	228, 231, 237, 238, 247, 254, 258, 180, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 0, 0,
	0, 152, 0, 0, 0, 154, 0, 0, 226, 168,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 95, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 134, 0, 0, 0, 255, 0, 0, 0, 199,
	0, 230, 137, 151, 112, 98, 108, 0, 136, 177,
	206, 210, 0, 0, 0, 120, 0, 208, 187, 246,
	0, 189, 207, 155, 236, 200, 245, 256, 257, 233,
	253, 261, 223, 101, 232, 244, 117, 218, 103, 242,
	229, 166, 146, 147, 102, 0, 204, 125, 132, 122,
	179, 239, 240, 121, 264, 109, 252, 105, 110, 251,
	173, 235, 243, 167, 160, 104, 241, 165, 159, 150,
	129, 139, 197, 157, 198, 140, 170, 169, 171, 0,
	0, 0, 227, 249, 265, 114, 0, 234, 259, 260,
	0, 0, 115, 133, 128, 196, 172, 111, 142, 224,
	149, 156, 203, 263, 186, 209, 118, 248, 225, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 106,
	153, 262, 201, 131, 250, 0, 0, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 100, 107, 113, 119, 123, 127, 130, 135, 138,
	141, 143, 144, 145, 148, 158, 161, 162, 163, 164,
	174, 175, 176, 178, 181, 182, 183, 184, 185, 188,
	190, 191, 192, 193, 194, 195, 202, 205, 211, 212,
	213, 214, 215, 216, 217, 219, 220, 221, 222, 228,
	231, 237, 238, 247, 254, 258, 180, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 0, 0, 0,
	152, 0, 0, 0, 154, 0, 0, 226, 168, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 320, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	134, 0, 0, 0, 255, 0, 0, 0, 199, 0,
	230, 137, 151, 112, 98, 108, 0, 136, 177, 206,
	210, 0, 0, 0, 120, 0, 208, 187, 246, 0,
	189, 207, 155, 236, 200, 245, 256, 257, 233, 253,
	261, 223, 101, 232, 244, 117, 218, 103, 242, 229,
	166, 146, 147, 102, 0, 204, 125, 132, 122, 179,
	239, 240, 121, 264, 109, 252, 105, 110, 251, 173,
	235, 243, 167, 160, 104, 241, 165, 159, 150, 129,
	139, 197, 157, 198, 140, 170, 169, 171, 0, 0,
	0, 227, 249, 265, 114, 0, 234, 259, 260, 0,
	0, 115, 133, 128, 196, 172, 111, 142, 224, 149,
	156, 203, 263, 186, 209, 118, 248, 225, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 106, 153,
	262, 201, 131, 250, 0, 0, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	100, 107, 113, 119, 123, 127, 130, 135, 138, 141,
	143, 144, 145, 148, 158, 161, 162, 163, 164, 174,
	175, 176, 178, 181, 182, 183, 184, 185, 188, 190,
	191, 192, 193, 194, 195, 202, 205, 211, 212, 213,
	214, 215, 216, 217, 219, 220, 221, 222, 228, 231,
	237, 238, 247, 254, 258,
}
var yyPact = [...]int{

	2221, -1000, -259, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 983, 1039, -1000, -1000, -1000, -1000, -1000, -1000,
	249, 95, 12, 125, -3, 14681, 124, 100, 15339, -1000,
	15, -1000, -1000, 15339, -1000, -1000, -1000, -76, -77, -1000,
	785, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 955, 979,
	818, 963, 886, -1000, 7729, 85, 85, 14352, 6742, -1000,
	-1000, 243, 15339, 119, 15339, -142, 81, 81, 81, -1000,
	-1000, -1000, 122, 15339, 285, -1000, 15339, 76, 579, 76,
	76, 76, 15339, -1000, 170, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 15339, 573, 921, 3664,
	66, 3664, -1000, 3664, 3664, -1000, 3664, 23, 3664, -45,
	999, 21, -25, -1000, 3664, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 512, 934,
	9057, 9057, 983, -1000, 785, -1000, -1000, -1000, 920, -1000,
	-1000, 322, 1025, -1000, 10702, 169, -1000, 9057, 1451, 771,
	-1000, -1000, 771, -1000, -1000, 146, -1000, -1000, 10044, 10044,
	10044, 10044, 10044, 10044, 10044, 10044, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	771, -1000, 8728, 771, 771, 771, 771, 771, 771, 771,
	771, 9057, 771, 771, 771, 771, 771, 771, 771, 771,
	771, 771, 771, 771, 771, 771, 771, 14016, 13029, 15339,
	757, 740, -1000, -1000, 165, 750, 6400, -102, -1000, -1000,
	-1000, 274, 12700, -1000, -1000, -1000, 919, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 680, 15339, -1000,
	1921, -1000, 564, 951, 109, 561, 270, 559, 15339, 15339,
	3664, 30, 62, 63, 15339, 767, 90, 15339, 940, 852,
	15339, 551, 550, -1000, 6058, -1000, 3664, 3664, -1000, -1000,
	-1000, 3664, 3664, 3664, 15339, 3664, 3664, -1000, -1000, -1000,
	-1000, 3664, 3664, -1000, 1019, 298, -1000, -1000, -1000, -1000,
	9057, 221, -1000, 850, -1000, -1000, -1000, -1000, -1000, -1000,
	1033, 203, 514, 163, 756, -1000, 476, 955, 512, 886,
	12371, 823, -1000, -1000, -1000, 15339, -1000, 9057, 9057, 523,
	-1000, 13687, -1000, -1000, 4690, 223, 10044, 337, 399, 10044,
	10044, 10044, 10044, 10044, 10044, 10044, 10044, 10044, 10044, 10044,
	10044, 10044, 10044, 10044, 368, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 547, -1000, 785, 552, 552, 190, 190,
	190, 190, 190, 190, 190, 10373, 950, 512, 676, 331,
	8728, 7729, 7729, 9057, 9057, 8387, 8058, 7729, 950, 280,
	331, 15668, -1000, -1000, 9715, -1000, -1000, -1000, -1000, -1000,
	512, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 15010, 15010,
	7729, 7729, 7729, 7729, 49, 15339, -1000, 715, 814, -1000,
	-1000, -1000, 945, 11713, 12042, 49, 708, 13029, 15339, -1000,
	-1000, 13029, 15339, 4348, 5716, 750, -102, 742, -1000, -118,
	-109, 7071, 183, -1000, -1000, -1000, -1000, 3322, 235, 656,
	-1000, -44, -1000, -1000, -1000, 782, -1000, 782, 782, 782,
	782, -18, -18, -18, -18, -1000, -1000, -1000, -1000, -1000,
	799, 798, -1000, 782, 782, 782, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 795, 795, 795, 784, 784, 812,
	-1000, 15339, 3664, 937, 3664, -1000, 77, -1000, 15339, 15339,
	15339, 15339, 15339, 133, 15339, 15339, 749, -1000, 15339, 747,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 15339, 299, 15339, 15339,
	331, -1000, 486, 15339, -1000, 895, 9057, 9057, 5374, 9057,
	-1000, -1000, -1000, 934, -1000, 950, 990, -1000, 903, 901,
	7729, -1000, -1000, 223, 292, -1000, -1000, 417, -1000, -1000,
	-1000, -1000, 152, 771, -1000, 1529, -1000, -1000, -1000, -1000,
	337, 10044, 10044, 10044, 314, 1529, 1509, 779, 1893, 190,
	420, 420, 182, 182, 182, 182, 182, 717, 717, -1000,
	-1000, -1000, 512, -1000, -1000, -1000, 7729, -1000, 9057, -1000,
	512, 672, -1000, 672, 505, 511, 269, 1009, 672, 262,
	1004, 672, 672, 7729, 290, -1000, 9057, 512, -1000, 151,
	-1000, 553, 746, 745, 672, 512, 743, 672, 672, 732,
	771, -1000, 15668, 13029, 13029, 13029, 13029, 13029, -1000, 876,
	866, -1000, 865, 864, 879, 15339, -1000, 669, 11713, 156,
	771, -1000, 13358, -1000, -1000, 998, 13029, 697, -1000, 697,
	-1000, 150, -1000, -1000, 742, -102, -100, -1000, -1000, -1000,
	-1000, 331, -1000, 482, 741, 2980, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 787, 545, -1000, 912, 206, 181, 541,
	911, -1000, -1000, -1000, 178, -72, -1000, -1000, 398, -18,
	-18, -1000, -1000, 183, 918, 183, 183, 183, 483, 483,
	-1000, -1000, -1000, -1000, 393, -1000, -1000, -1000, 377, -1000,
	849, 15010, 785, 943, -1000, -1000, -1000, -1000, 364, 364,
	237, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 48, 780, -1000, -1000, -1000, -1000, 22, 27,
	87, -1000, 3664, 15339, 298, -1000, 479, 9057, -1000, -1000,
	-1000, -1000, 892, 331, 331, 145, -1000, -1000, 15339, -1000,
	-1000, -1000, -1000, 674, -1000, -1000, -1000, 4006, 7729, -1000,
	314, 1529, 410, -1000, 10044, 10044, -1000, 512, 331, -1000,
	7729, -1000, -1000, 172, 368, 172, 10044, 10044, -1000, 10044,
	10044, -1000, -157, 678, 250, -1000, 9057, 383, -1000, 5374,
	-1000, 10044, 10044, -1000, -1000, -1000, -1000, 835, 15668, 771,
	-1000, 11372, 15010, 736, -1000, 260, 814, 793, 819, 628,
	-1000, -1000, -1000, -1000, 863, -1000, 828, -1000, -1000, -1000,
	-1000, -1000, 118, 116, 112, 15010, -1000, 983, 9057, 697,
	-1000, -1000, 186, -1000, -1000, -123, -129, -1000, -1000, -1000,
	3322, -1000, 3322, 15010, 64, -1000, 541, 541, -1000, -1000,
	-1000, 786, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 301,
	10044, 1032, -1000, 910, -1000, 909, 467, -1000, -1000, 627,
	183, 183, -1000, 266, -1000, -1000, -1000, 664, -1000, 651,
	720, 644, 15339, -1000, -1000, -1000, -1000, 531, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	539, -1000, 532, 15339, -1000, -1000, -1000, -1000, -1000, 15010,
	-165, 517, 15010, 15010, 15010, 15339, -1000, -1000, 299, -1000,
	331, -1000, 5032, -1000, 998, 13029, -1000, -1000, 512, -1000,
	10044, 1529, 1529, -1000, -1000, 512, 782, 782, -1000, 782,
	784, -1000, 782, 0, 782, -2, 512, 512, 1948, 1918,
	1858, 1562, 771, -151, -1000, 331, 9057, -1000, 1135, 796,
	-1000, 927, 613, 699, -1000, -1000, 7400, 512, 640, 139,
	635, -1000, 983, 15668, 9057, -1000, -1000, 9057, 783, -1000,
	9057, -1000, -1000, -1000, 771, 771, 771, 635, 955, 331,
	-1000, -1000, -1000, -1000, 2980, -1000, 633, -1000, 782, -1000,
	-1000, -1000, 15010, -1000, 1529, -81, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -18, 414, -18, 359, -1000, 339,
	3664, -1000, 785, 513, -1000, -1000, -1000, -1000, 212, -1000,
	-1000, 936, -1000, 5032, -1000, -1000, 781, 801, -1000, -1000,
	-1000, 987, 713, -1000, 1529, -1000, -1000, 111, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 10044, 10044, 10044, 10044,
	10044, 512, 411, 331, 10044, 10044, 905, -1000, 771, -1000,
	-1000, 711, 15010, 15010, -1000, 15010, 955, -1000, 331, 331,
	15010, 331, 15010, 15010, 15010, 11031, -1000, 188, 15010, -1000,
	631, -1000, -1000, 183, -1000, 183, 602, 570, -1000, -1000,
	524, -1000, 502, -1000, -1000, 771, 709, -1000, 252, 15010,
	15339, 985, 973, -1000, -1000, 553, 553, 553, 553, 52,
	-1000, -1000, 553, 553, 1030, -1000, 771, -1000, 785, 137,
	-1000, -1000, -1000, 606, 587, 587, 587, 156, 188, -1000,
	500, 240, 402, -1000, 61, 15010, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 45, 5032, 3322, 584, -1000, -1000, 9057,
	9057, -1000, -1000, -1000, -1000, 512, 50, -168, -1000, -1000,
	15668, 699, 512, 15010, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 333, -1000, -1000, 15339, -1000, -1000, 578, -1000, 15010,
	-1000, -1000, 780, 331, 687, -1000, 890, -163, -173, 666,
	-1000, -1000, -1000, 778, -1000, 45, 900, -165, -1000, 883,
	-1000, 15010, -1000, 37, -1000, -166, 569, 34, -169, 817,
	771, -174, 816, -1000, 1015, 9386, -1000, -1000, 1017, 207,
	207, 553, 512, -1000, -1000, -1000, 68, 465, -1000, -1000,
	-1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1270, 32, 465, 1254, 1251, 1249, 1247, 1246, 1245,
	1242, 1241, 1228, 1227, 1225, 1224, 1222, 1221, 1219, 1218,
	1217, 1212, 1207, 1206, 1205, 1203, 89, 1200, 1199, 1198,
	72, 1197, 78, 1196, 1192, 45, 58, 54, 46, 1050,
	1187, 106, 71, 103, 1185, 30, 1184, 1182, 80, 1181,
	1177, 1170, 57, 1169, 1168, 1707, 1165, 85, 1164, 15,
	28, 1163, 1162, 1160, 1157, 86, 645, 1153, 1152, 24,
	1151, 1150, 101, 1149, 60, 10, 14, 59, 22, 1148,
	257, 8, 1147, 63, 1146, 1142, 1139, 1138, 38, 1136,
	66, 16, 1135, 18, 61, 1133, 9, 67, 35, 29,
	5, 81, 70, 1131, 27, 79, 62, 1130, 1129, 498,
	1128, 1125, 41, 1124, 1123, 25, 1120, 333, 458, 1119,
	1115, 1114, 1112, 1111, 1110, 49, 1105, 6, 20, 55,
	0, 475, 130, 74, 1098, 1096, 1095, 1379, 37, 64,
	19, 43, 1094, 1093, 40, 1092, 1091, 1090, 1089, 1088,
	1087, 1085, 1084, 99, 1083, 1082, 1081, 23, 113, 1078,
	1075, 65, 31, 1074, 1073, 1072, 50, 21, 1071, 1070,
	48, 42, 1069, 1068, 1067, 1065, 1064, 26, 13, 1063,
	17, 1062, 11, 1061, 34, 1060, 4, 1054, 12, 1052,
	3, 1051, 7, 47, 1, 1048, 2, 1047, 1046, 76,
	407, 82, 1045, 112,
}
var yyR1 = [...]int{

	0, 197, 198, 198, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 6, 3, 4,
	4, 5, 5, 7, 7, 29, 29, 8, 9, 9,
	9, 9, 201, 201, 50, 50, 48, 48, 49, 49,
	97, 97, 10, 10, 10, 10, 102, 102, 106, 106,
	106, 107, 107, 107, 107, 142, 142, 91, 11, 11,
	11, 11, 11, 11, 11, 192, 192, 191, 190, 190,
	189, 189, 188, 17, 173, 175, 175, 174, 174, 174,
	174, 167, 146, 146, 146, 146, 146, 146, 146, 145,
	145, 145, 145, 149, 149, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 148, 148, 148, 148, 148, 150,
	150, 150, 150, 150, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 152,
	152, 152, 152, 152, 152, 152, 152, 166, 166, 153,
	153, 161, 161, 162, 162, 162, 159, 159, 160, 160,
	163, 163, 155, 156, 164, 157, 157, 157, 158, 158,
	158, 165, 165, 165, 165, 154, 168, 168, 183, 183,
	182, 182, 182, 172, 172, 179, 179, 179, 179, 179,
	170, 170, 171, 171, 181, 181, 180, 169, 169, 184,
	184, 184, 184, 195, 196, 194, 194, 194, 194, 194,
	176, 176, 176, 177, 177, 177, 178, 178, 178, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 125, 125,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	187, 185, 185, 186, 186, 13, 18, 18, 14, 14,
	14, 14, 14, 15, 15, 19, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 113, 113, 111, 111, 114, 114,
	112, 112, 112, 115, 115, 115, 116, 116, 143, 143,
	143, 21, 21, 23, 23, 24, 25, 126, 126, 22,
	22, 22, 22, 22, 22, 22, 16, 202, 26, 27,
	27, 28, 28, 28, 32, 32, 32, 30, 30, 30,
	31, 31, 37, 37, 36, 36, 38, 38, 38, 38,
	134, 134, 134, 133, 133, 40, 40, 41, 41, 42,
	42, 43, 43, 43, 43, 58, 58, 96, 96, 98,
	98, 44, 44, 44, 44, 45, 45, 46, 46, 47,
	47, 124, 124, 140, 140, 140, 139, 139, 51, 51,
	51, 53, 52, 52, 52, 52, 54, 54, 56, 56,
	55, 55, 57, 59, 59, 59, 59, 60, 60, 39,
	39, 39, 39, 39, 39, 39, 110, 110, 62, 62,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	73, 73, 73, 73, 73, 73, 63, 63, 63, 63,
	63, 63, 63, 35, 35, 74, 74, 74, 80, 75,
	75, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 70, 70, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 203, 203, 72, 71, 71, 71,
	71, 71, 71, 33, 33, 33, 33, 33, 141, 141,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 84, 84, 34, 34, 82, 82, 83,
	85, 85, 81, 81, 81, 65, 65, 65, 65, 65,
	65, 65, 65, 67, 67, 67, 86, 86, 87, 87,
	88, 88, 89, 89, 90, 92, 92, 92, 93, 93,
	93, 93, 94, 94, 94, 64, 64, 64, 64, 64,
	64, 95, 95, 95, 95, 99, 99, 76, 76, 78,
	78, 77, 79, 100, 100, 104, 101, 101, 105, 105,
	105, 105, 103, 103, 103, 136, 136, 136, 108, 108,
	117, 117, 118, 118, 109, 109, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 123, 123, 122, 122,
	122, 120, 120, 121, 121, 121, 121, 135, 135, 131,
	131, 132, 132, 137, 137, 138, 138, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 199, 200, 127, 128, 128, 128,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 4, 6, 7, 5, 10, 1,
	3, 1, 3, 7, 8, 1, 1, 9, 8, 7,
	6, 6, 1, 1, 1, 3, 1, 3, 1, 3,
	0, 4, 3, 4, 5, 4, 1, 3, 3, 2,
	2, 2, 2, 2, 1, 1, 1, 0, 2, 2,
	8, 7, 9, 5, 5, 0, 2, 1, 0, 2,
	1, 3, 3, 4, 4, 2, 4, 1, 3, 3,
	3, 3, 0, 2, 2, 2, 2, 2, 2, 3,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 1, 4, 4, 2, 2, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 6, 6, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 1, 0, 1,
	1, 2, 2, 3, 1, 0, 3, 3, 0, 2,
	2, 2, 1, 2, 1, 2, 5, 4, 1, 2,
	2, 3, 2, 0, 1, 2, 3, 3, 2, 2,
	1, 1, 0, 1, 1, 3, 2, 3, 1, 10,
	11, 11, 12, 3, 3, 1, 1, 2, 2, 2,
	0, 1, 3, 1, 2, 3, 1, 1, 1, 6,
	10, 8, 7, 7, 7, 9, 7, 7, 4, 5,
	7, 5, 5, 5, 12, 7, 5, 9, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	7, 1, 3, 8, 8, 3, 3, 5, 4, 6,
	4, 4, 4, 3, 2, 3, 4, 4, 3, 4,
	4, 4, 4, 4, 4, 3, 2, 3, 3, 2,
	3, 4, 3, 7, 5, 4, 2, 4, 4, 3,
	3, 5, 2, 3, 1, 1, 0, 1, 1, 1,
	0, 2, 2, 0, 2, 2, 0, 2, 0, 1,
	1, 2, 1, 1, 2, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 3, 3, 2, 0, 2, 0,
	2, 1, 2, 2, 0, 1, 1, 0, 1, 1,
	0, 1, 0, 1, 1, 3, 1, 2, 3, 5,
	0, 1, 2, 1, 1, 0, 2, 1, 3, 1,
	1, 1, 3, 1, 3, 3, 7, 1, 3, 1,
	3, 4, 4, 4, 3, 2, 4, 0, 1, 0,
	2, 0, 1, 0, 1, 2, 1, 1, 1, 2,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 1,
	1, 3, 3, 0, 5, 5, 5, 0, 2, 1,
	3, 3, 2, 3, 1, 2, 0, 3, 1, 1,
	3, 3, 4, 4, 5, 3, 4, 5, 6, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 0, 2, 1, 1, 1, 3, 1,
	3, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 2, 2, 2, 2, 2, 3, 1,
	1, 1, 1, 5, 6, 4, 4, 6, 6, 6,
	8, 8, 8, 8, 9, 7, 5, 4, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 8, 8, 0, 2, 3, 4, 4, 4,
	4, 4, 4, 0, 3, 4, 7, 3, 1, 1,
	2, 3, 3, 1, 2, 2, 1, 2, 1, 2,
	2, 1, 2, 0, 1, 0, 2, 1, 2, 4,
	0, 2, 1, 3, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 0, 3, 0, 2,
	0, 3, 1, 3, 2, 0, 1, 1, 0, 2,
	4, 4, 0, 2, 4, 2, 1, 3, 5, 4,
	6, 1, 3, 3, 5, 0, 5, 1, 3, 1,
	2, 3, 1, 1, 3, 3, 1, 3, 3, 3,
	3, 3, 1, 2, 1, 1, 1, 1, 1, 1,
	0, 2, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 1, 0, 1, 1, 1, 0, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -197, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -19, -20, -21, -23, -24, -25,
	-22, -16, -3, -4, 6, 7, -29, 9, 10, 29,
	-17, 116, 117, 119, 118, 150, 120, 143, 51, 164,
	165, 167, 168, -126, 145, 148, 149, 30, 31, 122,
	-199, 8, 249, 144, 25, 55, -198, 347, -88, 15,
	-28, 5, -26, -202, -26, -26, -26, -26, -26, -173,
	-175, 55, 91, -121, 126, 73, 241, 123, 124, 33,
	133, 132, -109, 126, 220, 128, 124, 124, 125, 126,
	241, 123, 124, -55, -137, 58, -130, 259, 136, 291,
	292, 164, 175, 169, 196, 188, 260, 293, 137, 186,
	189, 228, 135, 294, 216, 223, 67, 167, 237, 295,
	146, 184, 180, 296, 268, 178, 27, 297, 225, 201,
	298, 264, 179, 224, 122, 299, 139, 133, 300, 202,
	206, 301, 229, 302, 303, 304, 173, 174, 305, 231,
	200, 134, 32, 261, 36, 154, 232, 204, 306, 199,
	195, 307, 308, 309, 310, 198, 172, 194, 40, 208,
	207, 209, 227, 191, 311, 312, 313, 140, 314, 181,
	18, 315, 316, 317, 318, 319, 235, 149, 320, 152,
	321, 322, 323, 324, 325, 326, 226, 203, 205, 130,
	156, 263, 327, 233, 177, 328, 141, 153, 148, 236,
	142, 329, 330, 331, 332, 333, 334, 335, 168, 336,
	337, 338, 339, 163, 230, 239, 39, 213, 340, 171,
	132, 341, 165, 160, 218, 192, 155, 342, 343, 182,
	183, 197, 170, 193, 166, 157, 150, 344, 238, 214,
	265, 190, 187, 161, 345, 126, 158, 159, 346, 219,
	220, 162, 262, 234, 185, 215, 124, 109, 189, 228,
	116, 217, 225, 125, 32, 226, 156, -143, 124, -111,
	216, 219, 220, 162, 58, 230, 229, 221, -137, 166,
	-55, -127, -127, -127, -127, 218, 218, -127, -2, -93,
	17, 16, -5, -3, -199, 6, 20, 21, -32, 41,
	42, -27, -38, 100, -39, -137, -61, 75, -66, 28,
	58, -130, 23, -65, -62, -81, -79, -80, 109, 110,
	111, 98, 99, 106, 76, 112, -70, -68, -69, -71,
	60, 59, 68, 61, 62, 63, 64, 69, 70, 71,
	-131, -77, -199, 45, 46, 250, 251, 252, 253, 258,
	254, 78, 35, 240, 248, 247, 246, 244, 245, 242,
	243, 256, 257, 129, 241, 104, 249, -109, -109, 11,
	-48, -49, -55, -57, -137, -101, -142, 166, -105, 230,
	229, -132, -103, -131, -129, 228, 189, 227, 58, -130,
	121, 266, 74, 22, 24, 211, 77, 109, 16, 78,
	108, 250, 116, 49, 267, 242, 243, 240, 252, 253,
	241, 217, 28, 10, 269, 25, 144, 21, 102, 118,
	81, 82, 147, 23, 145, 71, 272, 19, 52, 11,
	13, 273, 274, 14, 129, 128, 93, 125, 47, 8,
	112, 26, 90, 43, 275, 34, 276, 277, 278, 279,
	45, 91, 17, 244, 245, 30, 280, 258, 151, 104,
	50, 37, 75, 281, 282, 69, 283, 72, 53, 73,
	15, 48, 284, 285, 286, 287, 92, 119, 249, 46,
	288, 123, 6, 255, 29, 143, 44, 289, 124, 80,
	256, 257, 127, 70, 5, 33, 31, 9, 51, 54,
	246, 247, 248, 35, 79, 12, 290, -174, 91, -167,
	58, -55, 125, -55, 249, -118, 129, -118, -118, 124,
	-55, 116, 118, 121, 53, -18, -55, -117, 129, 58,
	-117, -117, -117, -55, 113, -55, 58, 29, -128, -199,
	-132, 241, 58, 156, 124, 157, 126, -128, -128, -128,
	-128, 160, 161, -128, -114, -113, 223, 224, 218, 222,
	12, 161, 218, 159, -128, -127, -127, -200, 57, -94,
	19, 30, -39, -137, -89, -90, -39, -88, -2, -26,
	37, -30, 20, 21, 66, 11, -134, 74, 73, 90,
	-133, 22, -131, 60, 113, -39, -63, 93, 75, 91,
	92, 77, 95, 94, 105, 98, 99, 100, 101, 102,
	103, 104, 96, 97, 108, 83, 84, 85, 86, 87,
	88, 89, -110, -199, -80, -199, 114, 115, -66, -66,
	-66, -66, -66, -66, -66, -66, -199, -2, -75, -39,
	-199, -199, -199, -199, -199, -199, -199, -199, -199, -84,
	-39, -199, -203, -72, -199, -203, -72, -203, -72, -203,
	-199, -203, -72, -203, -72, -203, -203, -72, -199, -199,
	-199, -199, -199, -199, -56, 26, -55, -41, -42, -43,
	-44, -58, -80, -199, -55, -55, -48, -201, 56, 11,
	54, -201, 56, 113, 56, -101, 166, -102, -106, 231,
	233, 83, -136, -131, 60, 28, 29, 57, 56, -55,
	-145, -149, -151, -150, -152, -147, -148, 186, 187, 109,
	190, 192, 193, 194, 195, 196, 197, 198, 199, 200,
	201, 29, 146, 182, 183, 184, 185, 202, 203, 204,
	205, 206, 207, 208, 209, 169, 188, 260, 170, 171,
	172, 173, 174, 175, 177, 178, 179, 180, 181, 58,
	22, 126, 58, 75, 58, -55, -55, -128, 158, 158,
	124, 124, 163, -55, 56, 127, -48, 23, 53, -50,
	-55, 58, 58, -138, -137, -129, -128, -128, -128, -128,
	-128, -55, -128, -128, -128, -128, 11, -112, 11, 93,
	-39, -116, 91, 53, 9, 93, 56, 18, 113, 56,
	-92, 24, 25, -93, -200, -32, -67, -131, 61, 64,
	-31, 44, -55, -39, -39, -73, 69, 75, 70, 71,
	-133, 100, -138, -132, -129, -66, -74, -77, -80, 65,
	93, 91, 92, 77, -66, -66, -66, -66, -66, -66,
	-66, -66, -66, -66, -66, -66, -66, -66, -66, -141,
	58, 60, 58, -65, -65, -131, -30, -200, 56, -200,
	-2, -36, -38, -36, -39, -39, -81, 60, -36, -81,
	60, -36, -36, -30, -82, -83, 79, -81, -131, -137,
	-200, -66, -131, -131, -36, -37, -36, -36, -36, -97,
	152, -55, 29, 56, -51, -53, -52, -54, 43, 47,
	49, 44, 45, 46, 50, -124, 22, -41, -199, -140,
	152, -139, 22, -137, 60, -97, 54, -41, -55, -41,
	-57, -137, 100, -105, -102, 56, 232, 234, 235, 53,
	72, -39, -158, 108, -176, -177, -178, -132, 60, 61,
	-167, -168, -169, -179, 138, -184, 130, 132, 33, -170,
	139, 125, 34, 57, -146, -159, 214, -153, 55, -153,
	-153, -153, -153, -157, 189, -157, -157, -157, 55, 55,
	-153, -153, -153, -161, 55, -161, -161, -162, 55, -162,
	-135, 54, -91, -55, -128, 23, -128, -119, 121, 118,
	119, -187, 117, 211, 189, 67, 28, 15, 250, 152,
	265, 58, 153, -55, -55, -55, -55, -55, 121, 118,
	-55, -55, -55, 56, -55, -115, 91, 12, -137, -137,
	60, -55, 39, -39, -39, -138, -90, -94, -108, 19,
	11, 35, 35, -36, 69, 70, 71, 113, -199, -74,
	-66, -66, -66, -35, 147, 74, -200, -37, -39, -200,
	56, -200, -200, 56, 54, 22, 11, 11, -200, 11,
	11, -200, -200, -36, -85, -83, 81, -39, -200, 113,
	-200, 56, 56, -200, -200, -200, -200, -64, 29, 35,
	-2, -199, -199, -100, -104, -81, -42, -43, -43, -42,
	-43, 43, 43, 43, 48, 43, 48, 43, -52, -137,
	-200, -59, 51, 128, 52, -199, -139, -60, 12, -41,
	-60, -60, 113, -106, -107, 236, 233, 239, 58, 60,
	56, -178, 83, 55, 58, 34, -170, -170, -171, 58,
	-171, 34, -163, -155, -156, -164, -165, -154, 69, 75,
	28, 53, 211, 130, 34, 33, 67, -160, 215, 61,
	-157, -157, -158, 29, -158, -158, -158, -166, 60, -166,
	61, 61, 53, -131, -2, 22, -127, -125, -193, 131,
	135, 138, 139, 133, 125, 34, 130, 132, 152, 33,
	-125, -193, 131, -122, -120, 127, 22, 125, 34, 152,
	-192, 54, 158, 211, 158, 127, -128, -55, -112, 60,
	-39, 40, 113, -55, -40, 11, 100, -132, -37, -35,
	74, -66, -66, -200, -38, -144, 109, 186, 146, 184,
	180, 200, 191, 213, 182, 214, -141, -144, -66, -66,
	-66, -66, 259, -88, 82, -39, 80, -132, -66, -66,
	-99, 53, -100, -76, -78, -77, -199, -2, -95, -131,
	-98, -131, -60, 56, 83, -46, -45, 53, 54, -47,
	53, -45, 43, 43, 125, 125, 125, -98, -88, -39,
	-60, 233, 237, 238, -177, -178, -181, -180, -131, -184,
	-171, -171, 55, 69, -66, 9, 34, 34, 60, 57,
	-158, -158, 58, 109, 57, 56, 57, 56, 57, 56,
	-55, -91, -91, 55, -167, -127, 58, -127, 58, -55,
	-127, -131, -190, 262, -191, 58, -131, -131, -131, -55,
	-115, -60, -41, -200, -66, -200, -153, -153, -153, -162,
	-153, 174, -153, 174, -200, -200, 19, 19, 19, 19,
	-199, -34, 255, -39, 56, 56, 27, -99, 56, -200,
	-200, -200, 56, 113, -200, 56, -88, -104, -39, -39,
	55, -39, -199, -199, -199, -200, -93, 57, 56, -153,
	-96, -131, -69, -157, 60, -157, 61, 61, -128, -2,
	-167, -127, -123, 127, 22, 26, -189, -188, -132, 55,
	54, -86, 13, -157, 58, -66, -66, -66, -66, -66,
	-200, 60, -66, -66, 34, -78, 35, -2, -199, -131,
	-131, -131, -93, -96, -96, -96, -96, -140, -183, -182,
	54, 134, 67, -180, 57, 56, -158, -158, 57, 57,
	-91, 57, 58, -199, 56, 83, -96, -55, -87, 14,
	16, -200, -200, -200, -200, -33, 93, 262, -200, -200,
	9, -76, -2, 113, 57, -200, -200, -200, -59, -182,
	58, -172, 83, 60, 141, -131, -127, -185, -186, 152,
	-188, -178, 57, -39, -75, -200, 260, 50, 263, -100,
	-200, -131, 61, -55, -200, 56, -131, -192, 40, 261,
	264, 55, -186, 35, -190, 40, -96, 154, 262, 57,
	155, 263, -195, -196, 53, -199, 264, -196, 53, 10,
	9, -66, 151, -194, 142, 137, 140, 29, -194, -200,
	-200, 136, 28, 69,
}
var yyDef = [...]int{

	23, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 570, 0, 327, 327, 327, 327, 327, 327,
	0, 643, 624, 0, 0, 0, 0, -2, 312, 313,
	0, 315, 316, 945, 945, 945, 945, 0, 0, 945,
	0, 35, 36, 317, 318, 943, 1, 3, 578, 0,
	0, 331, 334, 329, 0, 624, 624, 0, 0, 68,
	69, 0, 0, 0, 0, 0, 622, 622, 622, 644,
	645, 646, 0, 0, 0, 625, 0, 620, 0, 620,
	620, 620, 0, 264, 400, 653, 654, 774, 775, 776,
	777, 778, 779, 780, 781, 782, 783, 784, 785, 786,
	787, 788, 789, 790, 791, 792, 793, 794, 795, 796,
	797, 798, 799, 800, 801, 802, 803, 804, 805, 806,
	807, 808, 809, 810, 811, 812, 813, 814, 815, 816,
	817, 818, 819, 820, 821, 822, 823, 824, 825, 826,
	827, 828, 829, 830, 831, 832, 833, 834, 835, 836,
	837, 838, 839, 840, 841, 842, 843, 844, 845, 846,
	847, 848, 849, 850, 851, 852, 853, 854, 855, 856,
	857, 858, 859, 860, 861, 862, 863, 864, 865, 866,
	867, 868, 869, 870, 871, 872, 873, 874, 875, 876,
	877, 878, 879, 880, 881, 882, 883, 884, 885, 886,
	887, 888, 889, 890, 891, 892, 893, 894, 895, 896,
	897, 898, 899, 900, 901, 902, 903, 904, 905, 906,
	907, 908, 909, 910, 911, 912, 913, 914, 915, 916,
	917, 918, 919, 920, 921, 922, 923, 924, 925, 926,
	927, 928, 929, 930, 931, 932, 933, 934, 935, 936,
	937, 938, 939, 940, 941, 942, 0, 0, 0, 946,
	0, 946, 276, 946, 946, 279, 946, 0, 946, 0,
	286, 0, 0, 292, 946, 309, 310, 297, 311, 314,
	319, 320, 321, 322, 323, 945, 945, 326, 29, 582,
	0, 0, 570, 31, 0, 327, 332, 333, 337, 335,
	336, 328, 0, 346, 350, 0, 409, 0, 414, 416,
	-2, -2, 0, 451, 452, 453, 454, 455, 0, 0,
	0, 0, 0, 0, 0, 0, 479, 480, 481, 482,
	555, 556, 557, 558, 559, 560, 561, 562, 418, 419,
	552, 602, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 543, 0, 514, 514, 514, 514, 514, 514, 514,
	514, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 46, 48, 400, 52, 0, 921, 606, -2,
	-2, 0, 0, 651, 652, -2, 787, -2, 649, 650,
	657, 658, 659, 660, 661, 662, 663, 664, 665, 666,
	667, 668, 669, 670, 671, 672, 673, 674, 675, 676,
	677, 678, 679, 680, 681, 682, 683, 684, 685, 686,
	687, 688, 689, 690, 691, 692, 693, 694, 695, 696,
	697, 698, 699, 700, 701, 702, 703, 704, 705, 706,
	707, 708, 709, 710, 711, 712, 713, 714, 715, 716,
	717, 718, 719, 720, 721, 722, 723, 724, 725, 726,
	727, 728, 729, 730, 731, 732, 733, 734, 735, 736,
	737, 738, 739, 740, 741, 742, 743, 744, 745, 746,
	747, 748, 749, 750, 751, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 762, 763, 764, 765, 766,
	767, 768, 769, 770, 771, 772, 773, 0, 0, 87,
	0, 85, 0, 0, 0, 0, 0, 0, 0, 0,
	946, 0, 0, 0, 0, 255, 0, 0, 0, 0,
	0, 0, 0, 263, 0, 265, 946, 946, 268, 947,
	948, 946, 946, 946, 0, 946, 946, 275, 277, 278,
	280, 946, 946, 282, 0, 300, 298, 299, 294, 295,
	0, 306, 289, 290, 293, 324, 325, 30, 944, 24,
	0, 0, 579, 0, 571, 572, 575, 578, 29, 334,
	0, 340, 338, 339, 330, 0, 347, 0, 0, 0,
	351, 0, 353, 354, 0, 412, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 436, 437, 438, 439, 440,
	441, 442, 415, 0, 429, 0, 0, 0, 471, 472,
	473, 474, 475, 476, 477, 0, 337, 29, 0, 449,
	0, 0, 0, 0, 0, 0, 0, 0, 337, 0,
	544, 0, 498, 506, 0, 499, 507, 500, 508, 501,
	0, 502, 509, 503, 510, 504, 505, 511, 0, 0,
	0, 342, 0, 0, 50, 0, 399, 0, 357, 359,
	360, 361, -2, 0, 383, -2, 0, 0, 0, 42,
	43, 0, 0, 0, 0, 53, 921, 55, 56, 0,
	0, 0, 168, 615, 616, 617, 613, 210, 0, 0,
	92, 156, 100, 101, 102, 149, 104, 149, 149, 149,
	149, 165, 165, 165, 165, 132, 133, 134, 135, 136,
	0, 0, 119, 149, 149, 149, 123, 139, 140, 141,
	142, 143, 144, 145, 146, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 151, 151, 151, 153, 153, 647,
	67, 0, 946, 0, 946, 83, 0, 228, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 621, 0, 260,
	44, 261, 262, 401, 655, 656, 266, 267, 269, 270,
	271, 272, 273, 274, 281, 285, 0, 303, 0, 0,
	287, 288, 0, 0, 583, 0, 0, 0, 0, 0,
	574, 576, 577, 582, 32, 337, 0, 563, 0, 0,
	0, 341, 27, 410, 411, 413, 430, 0, 432, 434,
	352, 348, 0, 553, -2, 420, 421, 445, 446, 447,
	0, 0, 0, 0, 443, 425, 0, 456, 457, 458,
	459, 460, 461, 462, 463, 464, 465, 466, 467, 470,
	528, 529, 0, 468, 469, 478, 342, 448, 0, 601,
	29, 0, 344, 0, 0, 0, 453, 555, 0, 453,
	555, 0, 0, 0, 550, 547, 0, 0, 552, 0,
	515, 0, 0, 0, 0, 0, 343, 0, 0, 0,
	0, 398, 0, 0, 0, 0, 0, 0, 388, 0,
	0, 391, 0, 0, 0, 0, 382, 0, 0, 403,
	866, 384, 0, 386, 387, 407, 0, 407, 47, 407,
	49, 0, 402, 607, 54, 0, 0, 59, 60, 608,
	609, 610, 611, 0, 84, 211, 213, 216, 217, 218,
	88, 89, 90, 0, 0, 198, 0, 0, 192, 192,
	0, 190, 191, 86, 91, 158, 157, 103, 0, 165,
	165, 126, 127, 168, 0, 168, 168, 168, 0, 0,
	120, 121, 122, 114, 0, 115, 116, 117, 0, 118,
	0, 0, 0, 0, 73, 623, 74, 945, 238, 238,
	638, 229, 626, 627, 628, 629, 630, 631, 632, 633,
	634, 635, 0, 75, 231, 233, 232, 236, 0, 0,
	0, 256, 946, 0, 300, 284, 0, 0, 301, 302,
	307, 291, 0, 580, 581, 0, 573, 25, 0, 618,
	619, 564, 565, 355, 431, 433, 435, 0, 342, 422,
	443, 426, 0, 423, 0, 0, 417, 0, 450, -2,
	0, 485, 486, 0, 0, 0, 0, 0, 521, 0,
	0, 522, 0, 570, 0, 548, 0, 0, 497, 0,
	516, 0, 0, 517, 518, 519, 520, 595, 0, 0,
	-2, 0, 0, 407, 603, 0, 358, 377, 379, 0,
	374, 389, 390, 392, 0, 394, 0, 396, 397, 362,
	364, 365, 0, 0, 0, 0, 385, 570, 0, 407,
	40, 41, 0, 57, 58, 0, 0, 64, 169, 170,
	0, 214, 0, 0, 0, 185, 192, 192, 188, 193,
	189, 0, 93, 94, 95, 96, 97, 98, 160, 0,
	0, 0, 164, 0, 172, 174, 0, 99, 159, 0,
	168, 168, 128, 0, 129, 130, 131, 0, 147, 0,
	0, 0, 0, 648, -2, 67, 219, 0, 945, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	0, 945, 0, 0, 945, 639, 640, 641, 642, 0,
	78, 0, 0, 0, 0, 0, 259, 45, 303, 304,
	305, 584, 0, 26, 407, 0, 349, 554, 0, 424,
	0, 444, 427, 483, 345, 0, 149, 149, 533, 149,
	153, 536, 149, 538, 149, 541, 0, 0, 0, 0,
	0, 0, 0, 545, 496, 551, 0, 553, 0, 0,
	33, 0, 595, 585, 597, 599, 0, 29, 0, 591,
	0, 369, 570, 0, 0, 371, 378, 0, 0, 372,
	0, 373, 393, 395, 0, 0, 0, 0, 578, 408,
	39, 61, 62, 63, 212, 215, 0, 194, 149, 197,
	186, 187, 0, 161, 162, 0, 171, 173, 175, 150,
	124, 125, 166, 167, 165, 0, 165, 0, 154, 0,
	946, 71, 0, 0, 945, 222, 223, 224, 0, 226,
	227, 0, 230, 0, 76, 77, 0, 0, 235, 257,
	283, 566, 356, 484, 428, 487, 530, 165, 534, 535,
	537, 539, 540, 542, 489, 488, 0, 0, 0, 0,
	0, 0, 0, 549, 0, 0, 0, 34, 0, 600,
	-2, 0, 0, 0, 51, 0, 578, 604, 605, 375,
	0, 380, 0, 0, 0, 383, 38, 177, 0, 196,
	0, 367, 163, 168, 148, 168, 0, 0, 70, -2,
	0, 221, 0, 636, 637, 0, 79, 80, 0, 0,
	0, 568, 0, 531, 532, 0, 0, 0, 0, 523,
	495, 546, 0, 0, 0, 598, 0, -2, 0, 593,
	592, 370, 37, 0, 0, 0, 0, 403, 176, 178,
	0, 183, 0, 195, 0, 0, 137, 138, 152, 155,
	72, 945, 225, 0, 0, 0, 0, 237, 28, 0,
	0, 490, 492, 491, 493, 0, 0, 0, 512, 513,
	0, 588, 29, 0, 376, 404, 405, 406, 366, 179,
	180, 0, 184, 182, 0, 368, 220, 0, 251, 0,
	81, 82, 75, 569, 567, 494, 0, 0, 0, 596,
	-2, 594, 181, 0, 250, 0, 0, 78, 524, 0,
	527, 0, 252, 0, 234, 525, 0, 0, 0, 199,
	0, 0, 200, 201, 0, 0, 526, 202, 0, 0,
	0, 0, 0, 203, 205, 206, 0, 0, 204, 253,
	254, 207, 208, 209,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 76, 3, 3, 3, 103, 95, 3,
	55, 57, 100, 98, 56, 99, 113, 101, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 347,
	84, 83, 85, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 94, 3, 106,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 77, 78, 79, 80, 81, 82, 86, 87, 88,
	89, 90, 91, 92, 93, 96, 97, 102, 104, 107,
	108, 109, 110, 111, 112, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:330
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:335
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:336
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:340
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:362
		{
			setParseTree(yylex, nil)
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:368
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:376
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:380
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:386
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 28:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:393
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:399
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:403
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:409
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:413
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:420
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:432
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:444
		{
			yyVAL.str = InsertStr
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:448
		{
			yyVAL.str = ReplaceStr
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:454
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:460
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:464
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:468
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:472
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:477
		{
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:478
		{
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:482
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName.ToViewName()}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:486
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName.ToViewName())
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:492
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:496
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:502
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:506
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 50:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:511
		{
			yyVAL.partitions = nil
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:515
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:521
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:525
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:529
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:533
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:539
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:543
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:549
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:553
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:557
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:563
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:567
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:571
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:575
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:581
		{
			yyVAL.str = SessionStr
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:585
		{
			yyVAL.str = GlobalStr
		}
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:590
		{
			yyVAL.int = yyPosition(yylex)
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:596
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:601
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 70:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:607
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 71:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:612
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[3].tableName.ToViewName(), ViewExpr: yyDollar[6].selStmt, ViewSelectPositionStart: yyDollar[5].int, ViewSelectPositionEnd: yyDollar[7].int - 1}
		}
	case 72:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:616
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[5].tableName.ToViewName(), ViewExpr: yyDollar[8].selStmt, ViewSelectPositionStart: yyDollar[7].int, ViewSelectPositionEnd: yyDollar[9].int - 1, OrReplace: true}
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:620
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 74:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:624
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:629
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:633
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:639
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:644
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:649
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:655
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:660
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:666
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:672
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName, IfNotExists: ne}
			setDDL(yylex, yyVAL.ddl)
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:683
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:690
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:694
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:700
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:705
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:709
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:713
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:719
		{
			if err := yyDollar[2].columnType.merge(yyDollar[3].columnType); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:728
		{
			yyVAL.columnType = ColumnType{}
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:732
		{
			opt := ColumnType{NotNull: yyDollar[2].boolVal, sawnull: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:741
		{
			opt := ColumnType{Default: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:750
		{
			opt := ColumnType{OnUpdate: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:759
		{
			opt := ColumnType{Autoincrement: yyDollar[2].boolVal, sawai: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:768
		{
			opt := ColumnType{KeyOpt: yyDollar[2].colKeyOpt}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:777
		{
			opt := ColumnType{Comment: yyDollar[2].sqlVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:788
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:799
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:804
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:810
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:814
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:818
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:822
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:826
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:830
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:834
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:838
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:842
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:848
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:854
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:860
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:866
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:872
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:880
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:884
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:888
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:892
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:896
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:902
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:906
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:910
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:914
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:918
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:922
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:926
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:930
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:934
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:938
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:942
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:946
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:950
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:954
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 138:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:959
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:965
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:969
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:973
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:977
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:981
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:985
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:989
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:993
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:999
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1004
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1009
		{
			yyVAL.sqlVal = nil
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1013
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1018
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 152:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1022
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1030
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1034
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 155:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1040
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1048
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1052
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1057
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1061
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1068
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1072
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1078
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1084
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1090
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1095
		{
			yyVAL.str = ""
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1099
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1103
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1108
		{
			yyVAL.str = ""
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1112
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1116
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1122
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1126
		{
			yyVAL.colKeyOpt = colKey
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1130
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1134
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1140
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1146
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 177:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1150
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1156
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1160
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1166
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1170
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1175
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1181
		{
			yyVAL.str = ""
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1185
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1191
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1195
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1199
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1203
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1207
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1213
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1217
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1222
		{
			yyVAL.str = ""
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1226
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1232
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1236
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1242
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1248
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1252
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 199:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1259
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 200:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1263
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 201:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1267
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 202:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1271
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1277
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1283
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1289
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1293
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1297
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1301
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1305
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 210:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1310
		{
			yyVAL.str = ""
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1314
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1318
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1326
		{
			yyVAL.str = yyDollar[1].str
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1330
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1334
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1340
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1344
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1348
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 219:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1354
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 220:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1358
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			ddl.Column = yyDollar[8].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 221:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1365
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 222:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1372
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 223:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1376
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: DropStr, Column: NewColIdent(string(yyDollar[7].bytes)), Table: yyDollar[4].tableName}
		}
	case 224:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1380
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1384
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: RenameStr, Table: yyDollar[4].tableName, Column: NewColIdent(string(yyDollar[7].bytes)), ToColumn: NewColIdent(string(yyDollar[9].bytes))}
		}
	case 226:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1388
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1393
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 228:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1398
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 229:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1402
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 230:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1406
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 231:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1418
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 232:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1428
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 233:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1432
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 234:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1436
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 235:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1449
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 236:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1459
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 237:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1463
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 238:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1475
		{
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1477
		{
		}
	case 250:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1493
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1499
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1503
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 253:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1509
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 254:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1513
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1519
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1525
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 257:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1529
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1537
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 259:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1545
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1550
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromViews: yyDollar[4].tableNames, IfExists: exists}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1558
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1562
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1568
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1572
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1577
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1583
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1588
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1592
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1596
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1601
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1605
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1609
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1613
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1617
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1621
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1625
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1629
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1633
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1637
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1641
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1645
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1649
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1653
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 284:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1658
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1668
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1672
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1676
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1682
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1687
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1691
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1695
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1699
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1713
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1719
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1723
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1729
		{
			yyVAL.str = ""
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1733
		{
			yyVAL.str = "full "
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1739
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1743
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1749
		{
			yyVAL.str = ""
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1753
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1757
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1763
		{
			yyVAL.showFilter = nil
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1767
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1771
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1777
		{
			yyVAL.showFilter = nil
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1781
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1787
		{
			yyVAL.str = ""
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1791
		{
			yyVAL.str = SessionStr
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1795
		{
			yyVAL.str = GlobalStr
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1801
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1805
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1811
		{
			yyVAL.statement = &Begin{}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1815
		{
			yyVAL.statement = &Begin{}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1821
		{
			yyVAL.statement = &Commit{}
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1827
		{
			yyVAL.statement = &Rollback{}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1832
		{
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1833
		{
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1838
		{
			yyVAL.statement = &Show{Type: "columns", OnTable: yyDollar[2].tableName}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1842
		{
			yyVAL.statement = &OtherRead{}
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1846
		{
			yyVAL.statement = &OtherRead{}
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1850
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1854
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1858
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1862
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1868
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1872
		{
			setAllowComments(yylex, true)
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1876
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1882
		{
			yyVAL.bytes2 = nil
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1886
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1892
		{
			yyVAL.str = UnionStr
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1896
		{
			yyVAL.str = UnionAllStr
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1900
		{
			yyVAL.str = UnionDistinctStr
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1905
		{
			yyVAL.str = ""
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1909
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1913
		{
			yyVAL.str = SQLCacheStr
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1918
		{
			yyVAL.str = ""
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1922
		{
			yyVAL.str = ""
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1926
		{
			yyVAL.str = DistinctStr
		}
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1931
		{
			yyVAL.str = ""
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1935
		{
			yyVAL.str = StraightJoinHint
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1940
		{
			yyVAL.selectExprs = nil
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1944
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1950
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1954
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1960
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1964
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1968
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 349:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1972
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1977
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1981
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1985
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1992
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 355:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1997
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2001
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2007
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2011
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2021
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2025
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2029
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2035
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2041
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 366:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2045
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2051
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2055
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2061
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2065
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 371:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2078
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 372:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2082
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 373:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2086
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2090
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2096
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2098
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 377:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2102
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2104
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2108
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2110
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2113
		{
			yyVAL.empty = struct{}{}
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2115
		{
			yyVAL.empty = struct{}{}
		}
	case 383:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2118
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2122
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2126
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2133
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2139
		{
			yyVAL.str = JoinStr
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2143
		{
			yyVAL.str = JoinStr
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2147
		{
			yyVAL.str = JoinStr
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2153
		{
			yyVAL.str = StraightJoinStr
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2159
		{
			yyVAL.str = LeftJoinStr
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2163
		{
			yyVAL.str = LeftJoinStr
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2167
		{
			yyVAL.str = RightJoinStr
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2171
		{
			yyVAL.str = RightJoinStr
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2177
		{
			yyVAL.str = NaturalJoinStr
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2181
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2191
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2195
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2201
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2205
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2211
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 403:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2216
		{
			yyVAL.indexHints = nil
		}
	case 404:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2220
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 405:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2224
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 406:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2228
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 407:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2233
		{
			yyVAL.expr = nil
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2237
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2243
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2247
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2251
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2255
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2259
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2263
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2267
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 416:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2273
		{
			yyVAL.str = ""
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2277
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2283
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2287
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2293
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2297
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 422:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2301
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 423:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2305
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 424:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2309
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2313
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 426:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2317
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 427:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2321
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 428:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2325
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2329
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2335
		{
			yyVAL.str = IsNullStr
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2339
		{
			yyVAL.str = IsNotNullStr
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2343
		{
			yyVAL.str = IsTrueStr
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2347
		{
			yyVAL.str = IsNotTrueStr
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2351
		{
			yyVAL.str = IsFalseStr
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2355
		{
			yyVAL.str = IsNotFalseStr
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2361
		{
			yyVAL.str = EqualStr
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2365
		{
			yyVAL.str = LessThanStr
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2369
		{
			yyVAL.str = GreaterThanStr
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2373
		{
			yyVAL.str = LessEqualStr
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2377
		{
			yyVAL.str = GreaterEqualStr
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2381
		{
			yyVAL.str = NotEqualStr
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2385
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 443:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2390
		{
			yyVAL.expr = nil
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2394
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2400
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2404
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2408
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2414
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2420
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2424
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2430
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2434
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2438
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2442
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2446
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2450
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2454
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2458
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2462
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2466
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2470
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2474
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2478
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2482
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2486
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2490
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2494
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2498
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2502
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2506
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2510
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2514
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2518
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2522
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2530
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2544
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2548
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2552
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 483:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2570
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: yyDollar[3].str == DistinctStr, Exprs: yyDollar[4].selectExprs}
		}
	case 484:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2574
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 485:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2584
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 486:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2588
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 487:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2592
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 488:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2596
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 489:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2600
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 490:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2604
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 491:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2608
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 492:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2612
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 493:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2616
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 494:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2620
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 495:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2624
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 496:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2628
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 497:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2632
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2642
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2646
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2650
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2655
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2660
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2665
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2671
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2676
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2681
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2685
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2689
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2694
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2699
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2704
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 512:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2708
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 513:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2712
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2722
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 517:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2732
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2736
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 519:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2740
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 520:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2744
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 521:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2748
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 522:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2752
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 523:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2758
		{
			yyVAL.str = ""
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2762
		{
			yyVAL.str = BooleanModeStr
		}
	case 525:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2766
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 526:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2770
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2774
		{
			yyVAL.str = QueryExpansionStr
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2780
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2784
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2790
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2794
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2798
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2802
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2806
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2810
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2816
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2820
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2824
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2828
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2832
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2836
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2840
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 543:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2845
		{
			yyVAL.expr = nil
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2849
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 545:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2854
		{
			yyVAL.str = string("")
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2858
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2864
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2868
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 549:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2874
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 550:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2879
		{
			yyVAL.expr = nil
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2883
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2889
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2893
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 554:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2897
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2903
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2907
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2911
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2915
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2919
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2923
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2927
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2931
		{
			yyVAL.expr = &NullVal{}
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2937
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2946
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2950
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 566:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2955
		{
			yyVAL.exprs = nil
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2959
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 568:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2964
		{
			yyVAL.expr = nil
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2968
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 570:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2973
		{
			yyVAL.orderBy = nil
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2977
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2983
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2987
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2993
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 575:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2998
		{
			yyVAL.str = AscScr
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3002
		{
			yyVAL.str = AscScr
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3006
		{
			yyVAL.str = DescScr
		}
	case 578:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3011
		{
			yyVAL.limit = nil
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3015
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 580:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3019
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 581:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3023
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 582:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3028
		{
			yyVAL.str = ""
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3032
		{
			yyVAL.str = ForUpdateStr
		}
	case 584:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3036
		{
			yyVAL.str = ShareModeStr
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3049
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3053
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3057
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 588:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3062
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 589:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3066
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 590:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3070
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3077
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3081
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3085
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 594:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3089
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 595:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3094
		{
			yyVAL.updateExprs = nil
		}
	case 596:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3098
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3104
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3108
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3114
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3118
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3124
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3130
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3140
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3144
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3150
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3156
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3160
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3166
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3170
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3174
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3178
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3185
		{
			yyVAL.bytes = []byte("charset")
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3192
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3196
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3200
		{
			yyVAL.expr = &Default{}
		}
	case 620:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3209
		{
			yyVAL.byt = 0
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3211
		{
			yyVAL.byt = 1
		}
	case 622:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3214
		{
			yyVAL.byt = 0
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3216
		{
			yyVAL.byt = 1
		}
	case 624:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3219
		{
			yyVAL.str = ""
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3221
		{
			yyVAL.str = IgnoreStr
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3225
		{
			yyVAL.empty = struct{}{}
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3227
		{
			yyVAL.empty = struct{}{}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3229
		{
			yyVAL.empty = struct{}{}
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3231
		{
			yyVAL.empty = struct{}{}
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3233
		{
			yyVAL.empty = struct{}{}
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3235
		{
			yyVAL.empty = struct{}{}
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3237
		{
			yyVAL.empty = struct{}{}
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3239
		{
			yyVAL.empty = struct{}{}
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3241
		{
			yyVAL.empty = struct{}{}
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3243
		{
			yyVAL.empty = struct{}{}
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3247
		{
			yyVAL.empty = struct{}{}
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3249
		{
			yyVAL.empty = struct{}{}
		}
	case 638:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3252
		{
			yyVAL.empty = struct{}{}
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3254
		{
			yyVAL.empty = struct{}{}
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3256
		{
			yyVAL.empty = struct{}{}
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3260
		{
			yyVAL.empty = struct{}{}
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3262
		{
			yyVAL.empty = struct{}{}
		}
	case 643:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3265
		{
			yyVAL.empty = struct{}{}
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3267
		{
			yyVAL.empty = struct{}{}
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3269
		{
			yyVAL.empty = struct{}{}
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3271
		{
			yyVAL.empty = struct{}{}
		}
	case 647:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3274
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 648:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3276
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3280
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3284
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3291
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3297
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3301
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3308
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3620
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3629
		{
			decNesting(yylex)
		}
	case 945:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3634
		{
			skipToEnd(yylex)
		}
	case 946:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3639
		{
			skipToEnd(yylex)
		}
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3643
		{
			skipToEnd(yylex)
		}
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3647
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
