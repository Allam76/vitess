//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func yyPosition(yylex interface{}) int {
	return yylex.(*Tokenizer).Position
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:57
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	int                  int
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	columnOrder          *ColumnOrder
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const UNLOCK = 57373
const KEYS = 57374
const UNIQUE = 57375
const KEY = 57376
const VALUES = 57377
const LAST_INSERT_ID = 57378
const NEXT = 57379
const VALUE = 57380
const SHARE = 57381
const MODE = 57382
const SQL_NO_CACHE = 57383
const SQL_CACHE = 57384
const JOIN = 57385
const STRAIGHT_JOIN = 57386
const LEFT = 57387
const RIGHT = 57388
const INNER = 57389
const OUTER = 57390
const CROSS = 57391
const NATURAL = 57392
const USE = 57393
const FORCE = 57394
const ON = 57395
const USING = 57396
const ID = 57397
const HEX = 57398
const STRING = 57399
const INTEGRAL = 57400
const FLOAT = 57401
const HEXNUM = 57402
const VALUE_ARG = 57403
const LIST_ARG = 57404
const COMMENT = 57405
const COMMENT_KEYWORD = 57406
const BIT_LITERAL = 57407
const NULL = 57408
const TRUE = 57409
const FALSE = 57410
const OFF = 57411
const OR = 57412
const AND = 57413
const NOT = 57414
const BETWEEN = 57415
const CASE = 57416
const WHEN = 57417
const THEN = 57418
const ELSE = 57419
const END = 57420
const LE = 57421
const GE = 57422
const NE = 57423
const NULL_SAFE_EQUAL = 57424
const IS = 57425
const LIKE = 57426
const REGEXP = 57427
const IN = 57428
const SHIFT_LEFT = 57429
const SHIFT_RIGHT = 57430
const DIV = 57431
const MOD = 57432
const UNARY = 57433
const COLLATE = 57434
const BINARY = 57435
const UNDERSCORE_BINARY = 57436
const UNDERSCORE_UTF8MB4 = 57437
const INTERVAL = 57438
const JSON_EXTRACT_OP = 57439
const JSON_UNQUOTE_EXTRACT_OP = 57440
const CREATE = 57441
const ALTER = 57442
const DROP = 57443
const RENAME = 57444
const ANALYZE = 57445
const ADD = 57446
const FLUSH = 57447
const SCHEMA = 57448
const TABLE = 57449
const INDEX = 57450
const VIEW = 57451
const TO = 57452
const IGNORE = 57453
const IF = 57454
const PRIMARY = 57455
const COLUMN = 57456
const SPATIAL = 57457
const FULLTEXT = 57458
const KEY_BLOCK_SIZE = 57459
const CHECK = 57460
const ACTION = 57461
const CASCADE = 57462
const CONSTRAINT = 57463
const FOREIGN = 57464
const NO = 57465
const REFERENCES = 57466
const RESTRICT = 57467
const FIRST = 57468
const AFTER = 57469
const SHOW = 57470
const DESCRIBE = 57471
const EXPLAIN = 57472
const DATE = 57473
const ESCAPE = 57474
const REPAIR = 57475
const OPTIMIZE = 57476
const TRUNCATE = 57477
const MAXVALUE = 57478
const PARTITION = 57479
const REORGANIZE = 57480
const LESS = 57481
const THAN = 57482
const PROCEDURE = 57483
const TRIGGER = 57484
const VINDEX = 57485
const VINDEXES = 57486
const STATUS = 57487
const VARIABLES = 57488
const WARNINGS = 57489
const SEQUENCE = 57490
const BEGIN = 57491
const START = 57492
const TRANSACTION = 57493
const COMMIT = 57494
const ROLLBACK = 57495
const BIT = 57496
const TINYINT = 57497
const SMALLINT = 57498
const MEDIUMINT = 57499
const INT = 57500
const INTEGER = 57501
const BIGINT = 57502
const INTNUM = 57503
const REAL = 57504
const DOUBLE = 57505
const FLOAT_TYPE = 57506
const DECIMAL = 57507
const NUMERIC = 57508
const TIME = 57509
const TIMESTAMP = 57510
const DATETIME = 57511
const YEAR = 57512
const CHAR = 57513
const VARCHAR = 57514
const BOOL = 57515
const CHARACTER = 57516
const VARBINARY = 57517
const NCHAR = 57518
const TEXT = 57519
const TINYTEXT = 57520
const MEDIUMTEXT = 57521
const LONGTEXT = 57522
const BLOB = 57523
const TINYBLOB = 57524
const MEDIUMBLOB = 57525
const LONGBLOB = 57526
const JSON = 57527
const ENUM = 57528
const GEOMETRY = 57529
const POINT = 57530
const LINESTRING = 57531
const POLYGON = 57532
const GEOMETRYCOLLECTION = 57533
const MULTIPOINT = 57534
const MULTILINESTRING = 57535
const MULTIPOLYGON = 57536
const NULLX = 57537
const AUTO_INCREMENT = 57538
const APPROXNUM = 57539
const SIGNED = 57540
const UNSIGNED = 57541
const ZEROFILL = 57542
const COLLATION = 57543
const DATABASES = 57544
const SCHEMAS = 57545
const TABLES = 57546
const VITESS_METADATA = 57547
const VSCHEMA = 57548
const FULL = 57549
const PROCESSLIST = 57550
const COLUMNS = 57551
const FIELDS = 57552
const ENGINES = 57553
const PLUGINS = 57554
const NAMES = 57555
const CHARSET = 57556
const GLOBAL = 57557
const SESSION = 57558
const ISOLATION = 57559
const LEVEL = 57560
const READ = 57561
const WRITE = 57562
const ONLY = 57563
const REPEATABLE = 57564
const COMMITTED = 57565
const UNCOMMITTED = 57566
const SERIALIZABLE = 57567
const CURRENT_TIMESTAMP = 57568
const DATABASE = 57569
const CURRENT_DATE = 57570
const CURRENT_TIME = 57571
const LOCALTIME = 57572
const LOCALTIMESTAMP = 57573
const UTC_DATE = 57574
const UTC_TIME = 57575
const UTC_TIMESTAMP = 57576
const REPLACE = 57577
const CONVERT = 57578
const CAST = 57579
const SUBSTR = 57580
const SUBSTRING = 57581
const GROUP_CONCAT = 57582
const SEPARATOR = 57583
const TIMESTAMPADD = 57584
const TIMESTAMPDIFF = 57585
const MATCH = 57586
const AGAINST = 57587
const BOOLEAN = 57588
const LANGUAGE = 57589
const WITH = 57590
const QUERY = 57591
const EXPANSION = 57592
const UNUSED = 57593
const ARRAY = 57594
const CUME_DIST = 57595
const DESCRIPTION = 57596
const DENSE_RANK = 57597
const EMPTY = 57598
const EXCEPT = 57599
const FIRST_VALUE = 57600
const GROUPING = 57601
const GROUPS = 57602
const JSON_TABLE = 57603
const LAG = 57604
const LAST_VALUE = 57605
const LATERAL = 57606
const LEAD = 57607
const MEMBER = 57608
const NTH_VALUE = 57609
const NTILE = 57610
const OF = 57611
const OVER = 57612
const PERCENT_RANK = 57613
const RANK = 57614
const RECURSIVE = 57615
const ROW_NUMBER = 57616
const SYSTEM = 57617
const WINDOW = 57618
const ACTIVE = 57619
const ADMIN = 57620
const BUCKETS = 57621
const CLONE = 57622
const COMPONENT = 57623
const DEFINITION = 57624
const ENFORCED = 57625
const EXCLUDE = 57626
const FOLLOWING = 57627
const GEOMCOLLECTION = 57628
const GET_MASTER_PUBLIC_KEY = 57629
const HISTOGRAM = 57630
const HISTORY = 57631
const INACTIVE = 57632
const INVISIBLE = 57633
const LOCKED = 57634
const MASTER_COMPRESSION_ALGORITHMS = 57635
const MASTER_PUBLIC_KEY_PATH = 57636
const MASTER_TLS_CIPHERSUITES = 57637
const MASTER_ZSTD_COMPRESSION_LEVEL = 57638
const NESTED = 57639
const NETWORK_NAMESPACE = 57640
const NOWAIT = 57641
const NULLS = 57642
const OJ = 57643
const OLD = 57644
const OPTIONAL = 57645
const ORDINALITY = 57646
const ORGANIZATION = 57647
const OTHERS = 57648
const PATH = 57649
const PERSIST = 57650
const PERSIST_ONLY = 57651
const PRECEDING = 57652
const PRIVILEGE_CHECKS_USER = 57653
const PROCESS = 57654
const RANDOM = 57655
const REFERENCE = 57656
const REQUIRE_ROW_FORMAT = 57657
const RESOURCE = 57658
const RESPECT = 57659
const RESTART = 57660
const RETAIN = 57661
const REUSE = 57662
const ROLE = 57663
const SECONDARY = 57664
const SECONDARY_ENGINE = 57665
const SECONDARY_LOAD = 57666
const SECONDARY_UNLOAD = 57667
const SKIP = 57668
const SRID = 57669
const THREAD_PRIORITY = 57670
const TIES = 57671
const UNBOUNDED = 57672
const VCPU = 57673
const VISIBLE = 57674

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"UNIQUE",
	"KEY",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"FIRST",
	"AFTER",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 29,
	-2, 4,
	-1, 39,
	162, 315,
	163, 315,
	-2, 303,
	-1, 324,
	113, 660,
	-2, 656,
	-1, 325,
	113, 661,
	-2, 657,
	-1, 393,
	83, 910,
	-2, 65,
	-1, 394,
	83, 828,
	-2, 66,
	-1, 399,
	83, 797,
	-2, 619,
	-1, 401,
	83, 858,
	-2, 621,
	-1, 699,
	1, 370,
	5, 370,
	12, 370,
	13, 370,
	14, 370,
	15, 370,
	17, 370,
	19, 370,
	29, 370,
	30, 370,
	43, 370,
	44, 370,
	45, 370,
	46, 370,
	47, 370,
	49, 370,
	50, 370,
	53, 370,
	54, 370,
	56, 370,
	57, 370,
	350, 370,
	-2, 388,
	-1, 702,
	54, 46,
	56, 46,
	-2, 50,
	-1, 851,
	113, 663,
	-2, 659,
	-1, 1076,
	5, 30,
	-2, 455,
	-1, 1107,
	5, 29,
	-2, 593,
	-1, 1191,
	5, 29,
	-2, 67,
	-1, 1377,
	5, 30,
	-2, 594,
	-1, 1406,
	5, 29,
	-2, 67,
	-1, 1436,
	5, 29,
	-2, 596,
	-1, 1511,
	5, 30,
	-2, 597,
}

const yyPrivate = 57344

const yyLast = 16052

var yyAct = [...]int{

	325, 1544, 1534, 322, 1499, 1341, 1223, 1110, 1416, 1448,
	655, 1270, 1128, 959, 291, 1009, 1397, 1304, 936, 303,
	654, 3, 1271, 342, 61, 329, 1111, 1267, 934, 1004,
	972, 962, 1277, 1155, 355, 1283, 889, 1019, 95, 792,
	398, 95, 912, 1242, 1070, 1201, 95, 806, 876, 1200,
	963, 525, 923, 938, 853, 902, 586, 1184, 715, 592,
	598, 292, 293, 294, 976, 1000, 297, 714, 607, 384,
	389, 95, 403, 298, 392, 60, 95, 695, 95, 387,
	916, 704, 312, 327, 1537, 670, 95, 907, 1521, 65,
	1532, 1509, 95, 990, 1036, 1529, 1342, 1520, 696, 669,
	1508, 1259, 1369, 530, 316, 552, 716, 1035, 717, 90,
	86, 87, 88, 1298, 1134, 67, 68, 69, 70, 71,
	953, 1477, 620, 619, 629, 630, 622, 623, 624, 625,
	626, 627, 628, 621, 1299, 1300, 631, 1040, 82, 574,
	954, 955, 300, 1243, 302, 367, 1034, 373, 374, 371,
	372, 370, 369, 368, 1143, 296, 295, 1142, 1175, 983,
	1144, 375, 376, 569, 274, 1423, 991, 570, 567, 568,
	1225, 554, 1360, 556, 1358, 289, 818, 572, 78, 550,
	562, 563, 1245, 1227, 815, 817, 1531, 1528, 977, 1500,
	284, 1222, 917, 1552, 1495, 1548, 1031, 1028, 1029, 573,
	1027, 1409, 1410, 1129, 1131, 553, 555, 538, 1193, 532,
	975, 979, 1413, 302, 784, 778, 1247, 819, 1251, 913,
	1246, 816, 1244, 1226, 1293, 1292, 1291, 1249, 80, 81,
	89, 77, 1449, 1038, 1041, 526, 1248, 84, 83, 301,
	528, 266, 580, 265, 979, 1451, 85, 548, 269, 1250,
	1252, 395, 1048, 979, 1484, 1047, 278, 273, 643, 644,
	1380, 1229, 1139, 1086, 1096, 1083, 95, 1064, 1156, 403,
	1033, 403, 403, 825, 403, 403, 710, 403, 611, 403,
	1130, 544, 960, 631, 621, 403, 949, 631, 807, 822,
	276, 551, 1032, 1478, 585, 811, 283, 984, 991, 606,
	1493, 95, 978, 1546, 605, 604, 1547, 973, 1545, 974,
	576, 577, 1450, 1507, 604, 971, 977, 1412, 1466, 403,
	1319, 606, 1219, 267, 1212, 1208, 828, 829, 537, 595,
	606, 594, 1037, 318, 1221, 978, 645, 646, 647, 648,
	649, 650, 651, 652, 978, 1261, 331, 1039, 526, 79,
	280, 270, 271, 1281, 281, 282, 287, 582, 74, 583,
	272, 275, 584, 268, 286, 285, 643, 644, 643, 644,
	808, 1320, 1021, 1167, 860, 605, 604, 718, 1172, 1171,
	903, 524, 95, 95, 95, 903, 578, 1093, 858, 859,
	857, 403, 606, 780, 75, 356, 52, 403, 1168, 596,
	619, 629, 630, 622, 623, 624, 625, 626, 627, 628,
	621, 694, 1173, 631, 1165, 299, 1207, 540, 541, 542,
	1166, 1209, 1202, 1210, 1206, 1220, 1203, 1218, 1310, 1204,
	1205, 1215, 620, 619, 629, 630, 622, 623, 624, 625,
	626, 627, 628, 621, 601, 1211, 631, 22, 52, 605,
	604, 1020, 1513, 703, 673, 675, 1263, 679, 681, 308,
	684, 712, 1061, 1062, 1063, 1404, 606, 708, 672, 674,
	676, 678, 680, 682, 683, 1170, 1082, 1403, 531, 1553,
	615, 877, 618, 878, 381, 382, 1188, 1071, 632, 633,
	634, 635, 636, 637, 638, 1187, 616, 617, 614, 620,
	619, 629, 630, 622, 623, 624, 625, 626, 627, 628,
	621, 307, 1494, 631, 1081, 1430, 1080, 1176, 557, 558,
	1554, 559, 560, 1401, 561, 95, 564, 605, 604, 58,
	1315, 1197, 575, 605, 604, 95, 1185, 1024, 95, 856,
	1145, 95, 1146, 1491, 606, 95, 824, 403, 403, 579,
	606, 1463, 403, 403, 403, 95, 403, 403, 1169, 533,
	534, 1462, 1332, 403, 403, 526, 843, 845, 846, 526,
	395, 354, 844, 622, 623, 624, 625, 626, 627, 628,
	621, 95, 403, 631, 823, 794, 95, 629, 630, 622,
	623, 624, 625, 626, 627, 628, 621, 1344, 403, 631,
	1337, 605, 604, 95, 1454, 1530, 1460, 785, 1335, 403,
	1516, 579, 1454, 1503, 830, 1454, 579, 852, 606, 1156,
	861, 862, 863, 864, 865, 866, 867, 868, 869, 870,
	871, 872, 873, 874, 875, 1454, 1485, 1458, 589, 593,
	1454, 1453, 1457, 397, 1395, 1394, 1382, 579, 1316, 854,
	1151, 849, 851, 403, 879, 612, 791, 624, 625, 626,
	627, 628, 621, 790, 549, 631, 549, 549, 781, 549,
	549, 779, 549, 641, 549, 908, 776, 847, 887, 832,
	549, 1379, 579, 831, 1326, 1325, 403, 403, 893, 896,
	656, 1322, 1323, 95, 904, 1322, 1321, 920, 579, 667,
	546, 95, 95, 706, 52, 95, 95, 1077, 579, 95,
	95, 95, 403, 539, 883, 885, 579, 725, 724, 640,
	1268, 980, 642, 1280, 1280, 403, 900, 880, 881, 699,
	943, 885, 705, 944, 1375, 1465, 920, 946, 1324, 1147,
	952, 1077, 884, 886, 1099, 1098, 707, 706, 709, 1135,
	653, 794, 657, 658, 659, 660, 661, 662, 663, 664,
	665, 62, 668, 671, 671, 671, 677, 671, 671, 677,
	671, 685, 686, 687, 688, 689, 690, 967, 700, 95,
	403, 951, 403, 942, 95, 95, 950, 1232, 95, 947,
	707, 850, 705, 920, 795, 796, 1017, 1135, 24, 797,
	798, 799, 1077, 801, 802, 1006, 95, 705, 95, 95,
	803, 804, 24, 95, 711, 826, 95, 95, 95, 95,
	95, 345, 344, 347, 348, 349, 350, 1435, 919, 814,
	346, 351, 1077, 992, 993, 994, 783, 58, 1002, 1003,
	397, 1280, 397, 397, 1522, 397, 397, 58, 397, 309,
	397, 1418, 985, 1387, 1224, 920, 397, 1005, 1309, 1150,
	1001, 58, 1067, 1068, 1069, 1052, 851, 1284, 1285, 1419,
	925, 928, 929, 930, 926, 996, 927, 931, 888, 890,
	1284, 1285, 895, 898, 899, 24, 1053, 1054, 995, 1008,
	609, 395, 854, 925, 928, 929, 930, 926, 58, 927,
	931, 1539, 1535, 838, 964, 809, 1287, 911, 1105, 914,
	915, 1268, 1066, 1189, 1106, 812, 787, 1124, 1290, 929,
	930, 95, 95, 95, 95, 95, 1074, 1122, 1289, 1119,
	1120, 1118, 1123, 95, 58, 1121, 95, 1107, 840, 841,
	95, 1526, 549, 549, 95, 1112, 1519, 549, 549, 549,
	1228, 549, 549, 313, 314, 1049, 887, 1092, 549, 549,
	1524, 855, 397, 403, 599, 600, 1059, 1073, 720, 1058,
	1433, 1314, 1136, 1313, 1158, 1076, 1078, 549, 1079, 1152,
	1180, 597, 723, 1085, 1125, 547, 1088, 1089, 1373, 1414,
	1012, 656, 1095, 1133, 891, 892, 1097, 786, 1113, 1100,
	1101, 1116, 1102, 1103, 1179, 850, 1181, 1182, 1183, 403,
	1157, 1140, 1192, 1148, 587, 933, 777, 403, 95, 304,
	1114, 1115, 1127, 1117, 1471, 588, 305, 1011, 62, 1013,
	1191, 1470, 986, 987, 988, 989, 599, 600, 52, 1153,
	1154, 1199, 310, 311, 1421, 1135, 571, 699, 997, 998,
	999, 699, 958, 657, 1186, 699, 95, 1060, 1087, 1137,
	1057, 1138, 1541, 1540, 1541, 403, 1196, 1084, 1056, 805,
	602, 1481, 1312, 821, 1214, 1238, 1239, 64, 1213, 66,
	1177, 1178, 59, 1, 1533, 1343, 1415, 1255, 1256, 1030,
	1257, 1258, 1498, 1447, 1303, 970, 935, 961, 73, 523,
	700, 72, 1265, 1266, 700, 1492, 969, 968, 1235, 403,
	403, 1163, 1236, 1269, 1241, 1260, 1162, 1159, 397, 397,
	1090, 1174, 982, 397, 397, 397, 1254, 397, 397, 1274,
	1253, 1112, 1161, 403, 397, 397, 1052, 851, 1160, 1164,
	731, 1272, 964, 729, 730, 728, 733, 732, 403, 981,
	403, 403, 1288, 397, 727, 277, 390, 1050, 1051, 1295,
	593, 719, 1240, 1007, 603, 1294, 45, 932, 1411, 834,
	1216, 1311, 76, 1217, 1026, 549, 810, 549, 565, 1301,
	609, 566, 1306, 397, 279, 639, 1055, 1307, 1308, 1141,
	95, 1317, 1318, 396, 95, 1275, 827, 1408, 591, 1469,
	1302, 1420, 1091, 666, 855, 901, 330, 1328, 1329, 842,
	343, 340, 341, 833, 1104, 613, 1334, 95, 328, 1075,
	320, 698, 691, 403, 882, 1279, 403, 403, 403, 1336,
	403, 924, 1339, 95, 1331, 922, 921, 1094, 788, 385,
	905, 1351, 1286, 1282, 1234, 697, 1065, 1231, 1368, 1476,
	837, 1297, 1333, 26, 63, 315, 19, 909, 910, 18,
	17, 1349, 20, 16, 1194, 15, 14, 699, 699, 699,
	699, 699, 535, 30, 34, 33, 1264, 1356, 32, 10,
	21, 13, 699, 397, 12, 11, 9, 8, 7, 6,
	699, 5, 4, 306, 23, 2, 397, 1374, 0, 0,
	0, 0, 403, 0, 1383, 0, 1112, 1384, 0, 0,
	403, 0, 1108, 1109, 0, 1393, 700, 700, 700, 700,
	700, 0, 0, 1350, 0, 0, 0, 964, 403, 964,
	1352, 935, 0, 1132, 0, 0, 1399, 0, 0, 700,
	0, 1361, 1362, 403, 0, 0, 1348, 0, 0, 0,
	1406, 397, 1148, 397, 0, 1198, 0, 0, 0, 0,
	0, 1376, 1377, 1378, 0, 1381, 0, 1424, 1425, 1426,
	1427, 1428, 0, 0, 0, 1431, 1432, 0, 0, 0,
	403, 403, 1392, 403, 1407, 0, 0, 0, 403, 0,
	403, 403, 403, 95, 0, 0, 403, 397, 1434, 1436,
	590, 0, 0, 1441, 1442, 52, 1443, 1444, 1445, 1234,
	1272, 1446, 549, 1452, 1455, 1400, 1456, 1402, 0, 403,
	95, 0, 1459, 1461, 0, 0, 0, 1262, 0, 0,
	0, 0, 0, 0, 0, 1467, 0, 0, 93, 0,
	0, 288, 0, 0, 0, 0, 93, 1482, 1422, 0,
	0, 0, 0, 0, 0, 403, 1429, 1490, 1483, 1489,
	0, 0, 0, 0, 0, 0, 403, 403, 319, 1296,
	1272, 388, 0, 0, 1501, 1497, 93, 0, 93, 0,
	701, 964, 1505, 0, 0, 403, 93, 0, 0, 1510,
	0, 905, 93, 0, 0, 0, 95, 0, 0, 0,
	0, 403, 1273, 0, 52, 0, 0, 1112, 0, 0,
	1518, 0, 1472, 1473, 1474, 1475, 0, 1502, 92, 1479,
	1480, 1523, 1417, 403, 1525, 0, 290, 0, 0, 0,
	0, 1486, 1487, 1488, 397, 0, 1538, 0, 0, 1527,
	1542, 1353, 1354, 1549, 1355, 0, 0, 1357, 0, 1359,
	0, 386, 0, 0, 0, 0, 527, 0, 529, 0,
	0, 0, 0, 0, 1506, 0, 536, 0, 0, 0,
	0, 1511, 543, 0, 0, 1405, 0, 0, 0, 699,
	1190, 0, 0, 0, 748, 0, 1515, 0, 397, 0,
	0, 0, 0, 0, 0, 0, 0, 1370, 0, 0,
	0, 0, 0, 1396, 0, 0, 0, 656, 0, 0,
	0, 0, 0, 0, 0, 1385, 0, 0, 1386, 0,
	0, 1388, 0, 0, 0, 0, 0, 0, 700, 0,
	1550, 1551, 0, 0, 0, 0, 397, 0, 0, 0,
	0, 0, 0, 0, 0, 1417, 964, 0, 0, 0,
	0, 0, 0, 0, 0, 1367, 0, 0, 0, 0,
	0, 0, 0, 0, 736, 0, 93, 0, 397, 579,
	0, 0, 0, 0, 0, 0, 0, 905, 0, 0,
	1276, 1278, 0, 0, 0, 0, 0, 1389, 1390, 1391,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 93, 0, 749, 1278, 0, 620, 619, 629, 630,
	622, 623, 624, 625, 626, 627, 628, 621, 0, 397,
	631, 397, 1305, 549, 0, 52, 762, 765, 766, 767,
	768, 769, 770, 0, 771, 772, 773, 774, 775, 750,
	751, 752, 753, 734, 735, 763, 545, 737, 0, 738,
	739, 740, 741, 742, 743, 744, 745, 746, 747, 754,
	755, 756, 757, 758, 759, 760, 761, 0, 0, 0,
	0, 1273, 0, 0, 1437, 0, 0, 0, 0, 0,
	0, 581, 93, 93, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1340, 0, 1372, 1345, 1346, 1347,
	0, 397, 0, 0, 1504, 656, 0, 0, 0, 0,
	1464, 0, 0, 0, 0, 0, 0, 0, 764, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1273, 0, 52, 620, 619, 629, 630, 622, 623,
	624, 625, 626, 627, 628, 621, 0, 0, 631, 0,
	0, 0, 905, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 693, 0, 702, 0, 0, 0, 0, 0,
	0, 0, 0, 397, 0, 0, 0, 0, 0, 0,
	0, 1398, 0, 24, 25, 53, 27, 28, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 397,
	0, 0, 57, 0, 0, 0, 29, 49, 50, 0,
	0, 0, 0, 0, 397, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 0, 1536, 40, 0,
	1371, 0, 58, 0, 0, 93, 0, 0, 93, 0,
	0, 93, 0, 0, 0, 793, 0, 0, 0, 0,
	0, 1438, 1439, 0, 1440, 93, 0, 0, 0, 1398,
	0, 1398, 1398, 1398, 0, 0, 0, 1305, 620, 619,
	629, 630, 622, 623, 624, 625, 626, 627, 628, 621,
	0, 93, 631, 0, 0, 0, 93, 0, 0, 0,
	1398, 0, 0, 31, 55, 36, 35, 38, 0, 51,
	0, 0, 0, 93, 0, 726, 0, 0, 0, 0,
	0, 0, 793, 0, 0, 782, 0, 0, 386, 0,
	0, 789, 39, 56, 46, 0, 1496, 47, 48, 37,
	0, 0, 0, 0, 0, 800, 0, 397, 397, 1366,
	0, 0, 0, 41, 42, 0, 43, 44, 0, 0,
	0, 0, 0, 905, 0, 1365, 1512, 0, 0, 319,
	319, 813, 0, 319, 319, 319, 820, 0, 0, 906,
	1364, 0, 1517, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 839, 0, 1363, 0, 0, 319, 319,
	319, 319, 0, 93, 1398, 0, 0, 0, 0, 0,
	0, 93, 940, 0, 0, 93, 93, 0, 0, 93,
	948, 793, 0, 0, 620, 619, 629, 630, 622, 623,
	624, 625, 626, 627, 628, 621, 0, 0, 631, 54,
	620, 619, 629, 630, 622, 623, 624, 625, 626, 627,
	628, 621, 0, 0, 631, 620, 619, 629, 630, 622,
	623, 624, 625, 626, 627, 628, 621, 0, 0, 631,
	620, 619, 629, 630, 622, 623, 624, 625, 626, 627,
	628, 621, 0, 918, 631, 0, 0, 0, 0, 93,
	0, 0, 0, 0, 93, 93, 945, 0, 93, 620,
	619, 629, 630, 622, 623, 624, 625, 626, 627, 628,
	621, 0, 0, 631, 0, 0, 93, 0, 1022, 1023,
	0, 0, 0, 93, 0, 0, 93, 93, 93, 93,
	93, 1237, 0, 0, 0, 0, 793, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 620, 619, 629, 630, 622, 623, 624, 625, 626,
	627, 628, 621, 0, 0, 631, 0, 0, 0, 1010,
	0, 0, 0, 0, 1014, 1015, 0, 0, 1016, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1072, 0, 319, 0, 1018, 0, 0, 0,
	0, 0, 0, 1025, 0, 0, 1042, 1043, 1044, 1045,
	1046, 319, 620, 619, 629, 630, 622, 623, 624, 625,
	626, 627, 628, 621, 0, 0, 631, 0, 0, 0,
	906, 93, 93, 93, 93, 93, 0, 0, 0, 0,
	0, 0, 0, 1126, 0, 0, 93, 0, 0, 0,
	940, 0, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 319, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 793, 1195, 0,
	0, 0, 0, 0, 0, 0, 906, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1230, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1327, 0, 0, 0, 1330, 0, 0, 0, 0, 0,
	0, 906, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1338, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 940, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 906, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	1468, 0, 0, 0, 0, 510, 498, 0, 455, 513,
	428, 445, 521, 446, 449, 486, 413, 468, 179, 443,
	0, 432, 408, 438, 409, 430, 457, 125, 427, 500,
	471, 512, 151, 511, 461, 519, 153, 477, 0, 225,
	167, 0, 0, 459, 502, 466, 495, 454, 487, 418,
	476, 514, 444, 484, 515, 0, 0, 0, 402, 0,
	965, 966, 0, 0, 0, 0, 0, 115, 0, 481,
	509, 440, 483, 485, 407, 478, 1514, 411, 414, 520,
	505, 435, 436, 1149, 0, 0, 0, 0, 0, 0,
	458, 467, 492, 452, 0, 0, 0, 0, 0, 0,
	0, 0, 433, 0, 475, 0, 0, 0, 415, 412,
	0, 0, 456, 0, 0, 0, 417, 0, 434, 493,
	0, 404, 133, 497, 504, 453, 254, 508, 451, 450,
	198, 0, 229, 136, 150, 111, 97, 107, 0, 135,
	176, 205, 209, 441, 405, 501, 431, 439, 119, 437,
	207, 186, 245, 474, 188, 206, 154, 235, 199, 244,
	255, 256, 232, 252, 260, 222, 100, 231, 243, 116,
	217, 102, 241, 228, 165, 145, 146, 101, 0, 203,
	124, 131, 121, 178, 238, 239, 120, 263, 108, 251,
	104, 109, 250, 172, 234, 242, 166, 159, 103, 240,
	164, 158, 149, 128, 138, 196, 156, 197, 139, 169,
	168, 170, 0, 410, 0, 226, 248, 264, 113, 426,
	0, 233, 258, 259, 0, 0, 114, 132, 127, 195,
	171, 110, 141, 223, 148, 155, 202, 262, 185, 208,
	117, 247, 224, 422, 425, 420, 421, 469, 470, 516,
	517, 518, 494, 416, 0, 423, 424, 0, 499, 506,
	507, 473, 96, 105, 152, 261, 200, 130, 249, 406,
	419, 123, 429, 0, 0, 442, 447, 448, 460, 462,
	463, 464, 465, 472, 479, 480, 482, 488, 489, 490,
	491, 496, 503, 522, 98, 99, 106, 112, 118, 122,
	126, 129, 134, 137, 140, 142, 143, 144, 147, 157,
	160, 161, 162, 163, 173, 174, 175, 177, 180, 181,
	182, 183, 184, 187, 189, 190, 191, 192, 193, 194,
	201, 204, 210, 211, 212, 213, 214, 215, 216, 218,
	219, 220, 221, 227, 230, 236, 237, 246, 253, 257,
	510, 498, 0, 455, 513, 428, 445, 521, 446, 449,
	486, 413, 468, 179, 443, 0, 432, 408, 438, 409,
	430, 457, 125, 427, 500, 471, 512, 151, 511, 461,
	519, 153, 477, 0, 225, 167, 0, 0, 459, 502,
	466, 495, 454, 487, 418, 476, 514, 444, 484, 515,
	0, 0, 0, 402, 0, 965, 966, 0, 0, 0,
	0, 0, 115, 0, 481, 509, 440, 483, 485, 407,
	478, 0, 411, 414, 520, 505, 435, 436, 0, 0,
	0, 0, 0, 0, 0, 458, 467, 492, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 433, 0, 475,
	0, 0, 0, 415, 412, 0, 0, 456, 0, 0,
	0, 417, 0, 434, 493, 0, 404, 133, 497, 504,
	453, 254, 508, 451, 450, 198, 0, 229, 136, 150,
	111, 97, 107, 0, 135, 176, 205, 209, 441, 405,
	501, 431, 439, 119, 437, 207, 186, 245, 474, 188,
	206, 154, 235, 199, 244, 255, 256, 232, 252, 260,
	222, 100, 231, 243, 116, 217, 102, 241, 228, 165,
	145, 146, 101, 0, 203, 124, 131, 121, 178, 238,
	239, 120, 263, 108, 251, 104, 109, 250, 172, 234,
	242, 166, 159, 103, 240, 164, 158, 149, 128, 138,
	196, 156, 197, 139, 169, 168, 170, 0, 410, 0,
	226, 248, 264, 113, 426, 0, 233, 258, 259, 0,
	0, 114, 132, 127, 195, 171, 110, 141, 223, 148,
	155, 202, 262, 185, 208, 117, 247, 224, 422, 425,
	420, 421, 469, 470, 516, 517, 518, 494, 416, 0,
	423, 424, 0, 499, 506, 507, 473, 96, 105, 152,
	261, 200, 130, 249, 406, 419, 123, 429, 0, 0,
	442, 447, 448, 460, 462, 463, 464, 465, 472, 479,
	480, 482, 488, 489, 490, 491, 496, 503, 522, 98,
	99, 106, 112, 118, 122, 126, 129, 134, 137, 140,
	142, 143, 144, 147, 157, 160, 161, 162, 163, 173,
	174, 175, 177, 180, 181, 182, 183, 184, 187, 189,
	190, 191, 192, 193, 194, 201, 204, 210, 211, 212,
	213, 214, 215, 216, 218, 219, 220, 221, 227, 230,
	236, 237, 246, 253, 257, 510, 498, 0, 455, 513,
	428, 445, 521, 446, 449, 486, 413, 468, 179, 443,
	0, 432, 408, 438, 409, 430, 457, 125, 427, 500,
	471, 512, 151, 511, 461, 519, 153, 477, 0, 225,
	167, 0, 0, 459, 502, 466, 495, 454, 487, 418,
	476, 514, 444, 484, 515, 58, 0, 0, 402, 0,
	0, 0, 0, 0, 0, 0, 0, 115, 0, 481,
	509, 440, 483, 485, 407, 478, 0, 411, 414, 520,
	505, 435, 436, 0, 0, 0, 0, 0, 0, 0,
	458, 467, 492, 452, 0, 0, 0, 0, 0, 0,
	0, 0, 433, 0, 475, 0, 0, 0, 415, 412,
	0, 0, 456, 0, 0, 0, 417, 0, 434, 493,
	0, 404, 133, 497, 504, 453, 254, 508, 451, 450,
	198, 0, 229, 136, 150, 111, 97, 107, 0, 135,
	176, 205, 209, 441, 405, 501, 431, 439, 119, 437,
	207, 186, 245, 474, 188, 206, 154, 235, 199, 244,
	255, 256, 232, 252, 260, 222, 100, 231, 243, 116,
	217, 102, 241, 228, 165, 145, 146, 101, 0, 203,
	124, 131, 121, 178, 238, 239, 120, 263, 108, 251,
	104, 109, 250, 172, 234, 242, 166, 159, 103, 240,
	164, 158, 149, 128, 138, 196, 156, 197, 139, 169,
	168, 170, 0, 410, 0, 226, 248, 264, 113, 426,
	0, 233, 258, 259, 0, 0, 114, 132, 127, 195,
	171, 110, 141, 223, 148, 155, 202, 262, 185, 208,
	117, 247, 224, 422, 425, 420, 421, 469, 470, 516,
	517, 518, 494, 416, 0, 423, 424, 0, 499, 506,
	507, 473, 96, 105, 152, 261, 200, 130, 249, 406,
	419, 123, 429, 0, 0, 442, 447, 448, 460, 462,
	463, 464, 465, 472, 479, 480, 482, 488, 489, 490,
	491, 496, 503, 522, 98, 99, 106, 112, 118, 122,
	126, 129, 134, 137, 140, 142, 143, 144, 147, 157,
	160, 161, 162, 163, 173, 174, 175, 177, 180, 181,
	182, 183, 184, 187, 189, 190, 191, 192, 193, 194,
	201, 204, 210, 211, 212, 213, 214, 215, 216, 218,
	219, 220, 221, 227, 230, 236, 237, 246, 253, 257,
	510, 498, 0, 455, 513, 428, 445, 521, 446, 449,
	486, 413, 468, 179, 443, 0, 432, 408, 438, 409,
	430, 457, 125, 427, 500, 471, 512, 151, 511, 461,
	519, 153, 477, 0, 225, 167, 0, 0, 459, 502,
	466, 495, 454, 487, 418, 476, 514, 444, 484, 515,
	0, 0, 0, 402, 0, 0, 0, 0, 0, 0,
	0, 0, 115, 0, 481, 509, 440, 483, 485, 407,
	478, 0, 411, 414, 520, 505, 435, 436, 0, 0,
	0, 0, 0, 0, 0, 458, 467, 492, 452, 0,
	0, 0, 0, 0, 0, 1233, 0, 433, 0, 475,
	0, 0, 0, 415, 412, 0, 0, 456, 0, 0,
	0, 417, 0, 434, 493, 0, 404, 133, 497, 504,
	453, 254, 508, 451, 450, 198, 0, 229, 136, 150,
	111, 97, 107, 0, 135, 176, 205, 209, 441, 405,
	501, 431, 439, 119, 437, 207, 186, 245, 474, 188,
	206, 154, 235, 199, 244, 255, 256, 232, 252, 260,
	222, 100, 231, 243, 116, 217, 102, 241, 228, 165,
	145, 146, 101, 0, 203, 124, 131, 121, 178, 238,
	239, 120, 263, 108, 251, 104, 109, 250, 172, 234,
	242, 166, 159, 103, 240, 164, 158, 149, 128, 138,
	196, 156, 197, 139, 169, 168, 170, 0, 410, 0,
	226, 248, 264, 113, 426, 0, 233, 258, 259, 0,
	0, 114, 132, 127, 195, 171, 110, 141, 223, 148,
	155, 202, 262, 185, 208, 117, 247, 224, 422, 425,
	420, 421, 469, 470, 516, 517, 518, 494, 416, 0,
	423, 424, 0, 499, 506, 507, 473, 96, 105, 152,
	261, 200, 130, 249, 406, 419, 123, 429, 0, 0,
	442, 447, 448, 460, 462, 463, 464, 465, 472, 479,
	480, 482, 488, 489, 490, 491, 496, 503, 522, 98,
	99, 106, 112, 118, 122, 126, 129, 134, 137, 140,
	142, 143, 144, 147, 157, 160, 161, 162, 163, 173,
	174, 175, 177, 180, 181, 182, 183, 184, 187, 189,
	190, 191, 192, 193, 194, 201, 204, 210, 211, 212,
	213, 214, 215, 216, 218, 219, 220, 221, 227, 230,
	236, 237, 246, 253, 257, 510, 498, 0, 455, 513,
	428, 445, 521, 446, 449, 486, 413, 468, 179, 443,
	0, 432, 408, 438, 409, 430, 457, 125, 427, 500,
	471, 512, 151, 511, 461, 519, 153, 477, 0, 225,
	167, 0, 0, 459, 502, 466, 495, 454, 487, 418,
	476, 514, 444, 484, 515, 0, 0, 0, 94, 0,
	0, 0, 0, 0, 0, 0, 0, 115, 0, 481,
	509, 440, 483, 485, 407, 478, 0, 411, 414, 520,
	505, 435, 436, 0, 0, 0, 0, 0, 0, 0,
	458, 467, 492, 452, 0, 0, 0, 0, 0, 0,
	949, 0, 433, 0, 475, 0, 0, 0, 415, 412,
	0, 0, 456, 0, 0, 0, 417, 0, 434, 493,
	0, 404, 133, 497, 504, 453, 254, 508, 451, 450,
	198, 0, 229, 136, 150, 111, 97, 107, 0, 135,
	176, 205, 209, 441, 405, 501, 431, 439, 119, 437,
	207, 186, 245, 474, 188, 206, 154, 235, 199, 244,
	255, 256, 232, 252, 260, 222, 100, 231, 243, 116,
	217, 102, 241, 228, 165, 145, 146, 101, 0, 203,
	124, 131, 121, 178, 238, 239, 120, 263, 108, 251,
	104, 109, 250, 172, 234, 242, 166, 159, 103, 240,
	164, 158, 149, 128, 138, 196, 156, 197, 139, 169,
	168, 170, 0, 410, 0, 226, 248, 264, 113, 426,
	0, 233, 258, 259, 0, 0, 114, 132, 127, 195,
	171, 110, 141, 223, 148, 155, 202, 262, 185, 208,
	117, 247, 224, 422, 425, 420, 421, 469, 470, 516,
	517, 518, 494, 416, 0, 423, 424, 0, 499, 506,
	507, 473, 96, 105, 152, 261, 200, 130, 249, 406,
	419, 123, 429, 0, 0, 442, 447, 448, 460, 462,
	463, 464, 465, 472, 479, 480, 482, 488, 489, 490,
	491, 496, 503, 522, 98, 99, 106, 112, 118, 122,
	126, 129, 134, 137, 140, 142, 143, 144, 147, 157,
	160, 161, 162, 163, 173, 174, 175, 177, 180, 181,
	182, 183, 184, 187, 189, 190, 191, 192, 193, 194,
	201, 204, 210, 211, 212, 213, 214, 215, 216, 218,
	219, 220, 221, 227, 230, 236, 237, 246, 253, 257,
	510, 498, 0, 455, 513, 428, 445, 521, 446, 449,
	486, 413, 468, 179, 443, 0, 432, 408, 438, 409,
	430, 457, 125, 427, 500, 471, 512, 151, 511, 461,
	519, 153, 477, 0, 225, 167, 0, 0, 459, 502,
	466, 495, 454, 487, 418, 476, 514, 444, 484, 515,
	0, 0, 0, 324, 0, 0, 0, 0, 0, 0,
	0, 0, 115, 0, 481, 509, 440, 483, 485, 407,
	478, 0, 411, 414, 520, 505, 435, 436, 0, 0,
	0, 0, 0, 0, 0, 458, 467, 492, 452, 0,
	0, 0, 0, 0, 0, 848, 0, 433, 0, 475,
	0, 0, 0, 415, 412, 0, 0, 456, 0, 0,
	0, 417, 0, 434, 493, 0, 404, 133, 497, 504,
	453, 254, 508, 451, 450, 198, 0, 229, 136, 150,
	111, 97, 107, 0, 135, 176, 205, 209, 441, 405,
	501, 431, 439, 119, 437, 207, 186, 245, 474, 188,
	206, 154, 235, 199, 244, 255, 256, 232, 252, 260,
	222, 100, 231, 243, 116, 217, 102, 241, 228, 165,
	145, 146, 101, 0, 203, 124, 131, 121, 178, 238,
	239, 120, 263, 108, 251, 104, 109, 250, 172, 234,
	242, 166, 159, 103, 240, 164, 158, 149, 128, 138,
	196, 156, 197, 139, 169, 168, 170, 0, 410, 0,
	226, 248, 264, 113, 426, 0, 233, 258, 259, 0,
	0, 114, 132, 127, 195, 171, 110, 141, 223, 148,
	155, 202, 262, 185, 208, 117, 247, 224, 422, 425,
	420, 421, 469, 470, 516, 517, 518, 494, 416, 0,
	423, 424, 0, 499, 506, 507, 473, 96, 105, 152,
	261, 200, 130, 249, 406, 419, 123, 429, 0, 0,
	442, 447, 448, 460, 462, 463, 464, 465, 472, 479,
	480, 482, 488, 489, 490, 491, 496, 503, 522, 98,
	99, 106, 112, 118, 122, 126, 129, 134, 137, 140,
	142, 143, 144, 147, 157, 160, 161, 162, 163, 173,
	174, 175, 177, 180, 181, 182, 183, 184, 187, 189,
	190, 191, 192, 193, 194, 201, 204, 210, 211, 212,
	213, 214, 215, 216, 218, 219, 220, 221, 227, 230,
	236, 237, 246, 253, 257, 510, 498, 0, 455, 513,
	428, 445, 521, 446, 449, 486, 413, 468, 179, 443,
	0, 432, 408, 438, 409, 430, 457, 125, 427, 500,
	471, 512, 151, 511, 461, 519, 153, 477, 0, 225,
	167, 0, 0, 459, 502, 466, 495, 454, 487, 418,
	476, 514, 444, 484, 515, 0, 0, 0, 402, 0,
	0, 0, 0, 0, 0, 0, 0, 115, 0, 481,
	509, 440, 483, 485, 407, 478, 0, 411, 414, 520,
	505, 435, 436, 0, 0, 0, 0, 0, 0, 0,
	458, 467, 492, 452, 0, 0, 0, 0, 0, 0,
	0, 0, 433, 0, 475, 0, 0, 0, 415, 412,
	0, 0, 456, 0, 0, 0, 417, 0, 434, 493,
	0, 404, 133, 497, 504, 453, 254, 508, 451, 450,
	198, 0, 229, 136, 150, 111, 97, 107, 0, 135,
	176, 205, 209, 441, 405, 501, 431, 439, 119, 437,
	207, 186, 245, 474, 188, 206, 154, 235, 199, 244,
	255, 256, 232, 252, 260, 222, 100, 231, 243, 116,
	217, 102, 241, 228, 165, 145, 146, 101, 0, 203,
	124, 131, 121, 178, 238, 239, 120, 263, 108, 251,
	104, 109, 250, 172, 234, 242, 166, 159, 103, 240,
	164, 158, 149, 128, 138, 196, 156, 197, 139, 169,
	168, 170, 0, 410, 0, 226, 248, 264, 113, 426,
	0, 233, 258, 259, 0, 0, 114, 132, 127, 195,
	171, 110, 141, 223, 148, 155, 202, 262, 185, 208,
	117, 247, 224, 422, 425, 420, 421, 469, 470, 516,
	517, 518, 494, 416, 0, 423, 424, 0, 499, 506,
	507, 473, 96, 105, 152, 261, 200, 130, 249, 406,
	419, 123, 429, 0, 0, 442, 447, 448, 460, 462,
	463, 464, 465, 472, 479, 480, 482, 488, 489, 490,
	491, 496, 503, 522, 98, 99, 106, 112, 118, 122,
	126, 129, 134, 137, 140, 142, 143, 144, 147, 157,
	160, 161, 162, 163, 173, 174, 175, 177, 180, 181,
	182, 183, 184, 187, 189, 190, 191, 192, 193, 194,
	201, 204, 210, 211, 212, 213, 214, 215, 216, 218,
	219, 220, 221, 227, 230, 236, 237, 246, 253, 257,
	510, 498, 0, 455, 513, 428, 445, 521, 446, 449,
	486, 413, 468, 179, 443, 0, 432, 408, 438, 409,
	430, 457, 125, 427, 500, 471, 512, 151, 511, 461,
	519, 153, 477, 0, 225, 167, 0, 0, 459, 502,
	466, 495, 454, 487, 418, 476, 514, 444, 484, 515,
	0, 0, 0, 324, 0, 0, 0, 0, 0, 0,
	0, 0, 115, 0, 481, 509, 440, 483, 485, 407,
	478, 0, 411, 414, 520, 505, 435, 436, 0, 0,
	0, 0, 0, 0, 0, 458, 467, 492, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 433, 0, 475,
	0, 0, 0, 415, 412, 0, 0, 456, 0, 0,
	0, 417, 0, 434, 493, 0, 404, 133, 497, 504,
	453, 254, 508, 451, 450, 198, 0, 229, 136, 150,
	111, 97, 107, 0, 135, 176, 205, 209, 441, 405,
	501, 431, 439, 119, 437, 207, 186, 245, 474, 188,
	206, 154, 235, 199, 244, 255, 256, 232, 252, 260,
	222, 100, 231, 243, 116, 217, 102, 241, 228, 165,
	145, 146, 101, 0, 203, 124, 131, 121, 178, 238,
	239, 120, 263, 108, 251, 104, 109, 250, 172, 234,
	242, 166, 159, 103, 240, 164, 158, 149, 128, 138,
	196, 156, 197, 139, 169, 168, 170, 0, 410, 0,
	226, 248, 264, 113, 426, 0, 233, 258, 259, 0,
	0, 114, 132, 127, 195, 171, 110, 141, 223, 148,
	155, 202, 262, 185, 208, 117, 247, 224, 422, 425,
	420, 421, 469, 470, 516, 517, 518, 494, 416, 0,
	423, 424, 0, 499, 506, 507, 473, 96, 105, 152,
	261, 200, 130, 249, 406, 419, 123, 429, 0, 0,
	442, 447, 448, 460, 462, 463, 464, 465, 472, 479,
	480, 482, 488, 489, 490, 491, 496, 503, 522, 98,
	99, 106, 112, 118, 122, 126, 129, 134, 137, 140,
	142, 143, 144, 147, 157, 160, 161, 162, 163, 173,
	174, 175, 177, 180, 181, 182, 183, 184, 187, 189,
	190, 191, 192, 193, 194, 201, 204, 210, 211, 212,
	213, 214, 215, 216, 218, 219, 220, 221, 227, 230,
	236, 237, 246, 253, 257, 510, 498, 0, 455, 513,
	428, 445, 521, 446, 449, 486, 413, 468, 179, 443,
	0, 432, 408, 438, 409, 430, 457, 125, 427, 500,
	471, 512, 151, 511, 461, 519, 153, 477, 0, 225,
	167, 0, 0, 459, 502, 466, 495, 454, 487, 418,
	476, 514, 444, 484, 515, 0, 0, 0, 402, 0,
	0, 0, 0, 0, 0, 0, 0, 115, 0, 481,
	509, 440, 483, 485, 407, 478, 0, 411, 414, 520,
	505, 435, 436, 0, 0, 0, 0, 0, 0, 0,
	458, 467, 492, 452, 0, 0, 0, 0, 0, 0,
	0, 0, 433, 0, 475, 0, 0, 0, 415, 412,
	0, 0, 456, 0, 0, 0, 417, 0, 434, 493,
	0, 404, 133, 497, 504, 453, 254, 508, 451, 450,
	198, 0, 229, 136, 150, 111, 97, 107, 0, 135,
	176, 205, 209, 441, 405, 501, 431, 439, 119, 437,
	207, 186, 245, 474, 188, 206, 154, 235, 199, 244,
	255, 256, 232, 252, 260, 222, 100, 231, 243, 116,
	217, 102, 241, 228, 165, 145, 146, 101, 0, 203,
	124, 131, 121, 178, 238, 239, 120, 263, 108, 251,
	104, 400, 250, 172, 234, 242, 166, 159, 103, 240,
	164, 158, 149, 128, 138, 196, 156, 197, 139, 169,
	168, 170, 0, 410, 0, 226, 248, 264, 113, 426,
	0, 233, 258, 259, 0, 0, 114, 132, 127, 195,
	401, 399, 141, 223, 148, 155, 202, 262, 185, 208,
	117, 247, 224, 422, 425, 420, 421, 469, 470, 516,
	517, 518, 494, 416, 0, 423, 424, 0, 499, 506,
	507, 473, 96, 105, 152, 261, 200, 130, 249, 406,
	419, 123, 429, 0, 0, 442, 447, 448, 460, 462,
	463, 464, 465, 472, 479, 480, 482, 488, 489, 490,
	491, 496, 503, 522, 98, 99, 106, 112, 118, 122,
	126, 129, 134, 137, 140, 142, 143, 144, 147, 157,
	160, 161, 162, 163, 173, 174, 175, 177, 180, 181,
	182, 183, 184, 187, 189, 190, 191, 192, 193, 194,
	201, 204, 210, 211, 212, 213, 214, 215, 216, 218,
	219, 220, 221, 227, 230, 236, 237, 246, 253, 257,
	510, 498, 0, 455, 513, 428, 445, 521, 446, 449,
	486, 413, 468, 179, 443, 0, 432, 408, 438, 409,
	430, 457, 125, 427, 500, 471, 512, 151, 511, 461,
	519, 153, 477, 0, 225, 167, 0, 0, 459, 502,
	466, 495, 454, 487, 418, 476, 514, 444, 484, 515,
	0, 0, 0, 94, 0, 0, 0, 0, 0, 0,
	0, 0, 115, 0, 481, 509, 440, 483, 485, 407,
	478, 0, 411, 414, 520, 505, 435, 436, 0, 0,
	0, 0, 0, 0, 0, 458, 467, 492, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 433, 0, 475,
	0, 0, 0, 415, 412, 0, 0, 456, 0, 0,
	0, 417, 0, 434, 493, 0, 404, 133, 497, 504,
	453, 254, 508, 451, 450, 198, 0, 229, 136, 150,
	111, 97, 107, 0, 135, 176, 205, 209, 441, 405,
	501, 431, 439, 119, 437, 207, 186, 245, 474, 188,
	206, 154, 235, 199, 244, 255, 256, 232, 252, 260,
	222, 100, 231, 243, 116, 217, 102, 241, 228, 165,
	145, 146, 101, 0, 203, 124, 131, 121, 178, 238,
	239, 120, 263, 108, 251, 104, 109, 250, 172, 234,
	242, 166, 159, 103, 240, 164, 158, 149, 128, 138,
	196, 156, 197, 139, 169, 168, 170, 0, 410, 0,
	226, 248, 264, 113, 426, 0, 233, 258, 259, 0,
	0, 114, 132, 127, 195, 171, 110, 141, 223, 148,
	155, 202, 262, 185, 208, 117, 247, 224, 422, 425,
	420, 421, 469, 470, 516, 517, 518, 494, 416, 0,
	423, 424, 0, 499, 506, 507, 473, 96, 105, 152,
	261, 200, 130, 249, 406, 419, 123, 429, 0, 0,
	442, 447, 448, 460, 462, 463, 464, 465, 472, 479,
	480, 482, 488, 489, 490, 491, 496, 503, 522, 98,
	99, 106, 112, 118, 122, 126, 129, 134, 137, 140,
	142, 143, 144, 147, 157, 160, 161, 162, 163, 173,
	174, 175, 177, 180, 181, 182, 183, 184, 187, 189,
	190, 191, 192, 193, 194, 201, 204, 210, 211, 212,
	213, 214, 215, 216, 218, 219, 220, 221, 227, 230,
	236, 237, 246, 253, 257, 510, 498, 0, 455, 513,
	428, 445, 521, 446, 449, 486, 413, 468, 179, 443,
	0, 432, 408, 438, 409, 430, 457, 125, 427, 500,
	471, 512, 151, 511, 461, 519, 153, 477, 0, 225,
	167, 0, 0, 459, 502, 466, 495, 454, 487, 418,
	476, 514, 444, 484, 515, 0, 0, 0, 402, 0,
	0, 0, 0, 0, 0, 0, 0, 115, 0, 481,
	509, 440, 483, 485, 407, 478, 0, 411, 414, 520,
	505, 435, 436, 0, 0, 0, 0, 0, 0, 0,
	458, 467, 492, 452, 0, 0, 0, 0, 0, 0,
	0, 0, 433, 0, 475, 0, 0, 0, 415, 412,
	0, 0, 456, 0, 0, 0, 417, 0, 434, 493,
	0, 404, 133, 497, 504, 453, 254, 508, 451, 450,
	198, 0, 229, 136, 150, 111, 97, 107, 0, 135,
	176, 205, 209, 441, 405, 501, 431, 439, 119, 437,
	207, 186, 245, 474, 188, 206, 154, 235, 199, 244,
	255, 256, 232, 252, 260, 222, 100, 231, 713, 116,
	217, 102, 241, 228, 165, 145, 146, 101, 0, 203,
	124, 131, 121, 178, 238, 239, 120, 263, 108, 251,
	104, 400, 250, 172, 234, 242, 166, 159, 103, 240,
	164, 158, 149, 128, 138, 196, 156, 197, 139, 169,
	168, 170, 0, 410, 0, 226, 248, 264, 113, 426,
	0, 233, 258, 259, 0, 0, 114, 132, 127, 195,
	401, 399, 141, 223, 148, 155, 202, 262, 185, 208,
	117, 247, 224, 422, 425, 420, 421, 469, 470, 516,
	517, 518, 494, 416, 0, 423, 424, 0, 499, 506,
	507, 473, 96, 105, 152, 261, 200, 130, 249, 406,
	419, 123, 429, 0, 0, 442, 447, 448, 460, 462,
	463, 464, 465, 472, 479, 480, 482, 488, 489, 490,
	491, 496, 503, 522, 98, 99, 106, 112, 118, 122,
	126, 129, 134, 137, 140, 142, 143, 144, 147, 157,
	160, 161, 162, 163, 173, 174, 175, 177, 180, 181,
	182, 183, 184, 187, 189, 190, 191, 192, 193, 194,
	201, 204, 210, 211, 212, 213, 214, 215, 216, 218,
	219, 220, 221, 227, 230, 236, 237, 246, 253, 257,
	510, 498, 0, 455, 513, 428, 445, 521, 446, 449,
	486, 413, 468, 179, 443, 0, 432, 408, 438, 409,
	430, 457, 125, 427, 500, 471, 512, 151, 511, 461,
	519, 153, 477, 0, 225, 167, 0, 0, 459, 502,
	466, 495, 454, 487, 418, 476, 514, 444, 484, 515,
	0, 0, 0, 402, 0, 0, 0, 0, 0, 0,
	0, 0, 115, 0, 481, 509, 440, 483, 485, 407,
	478, 0, 411, 414, 520, 505, 435, 436, 0, 0,
	0, 0, 0, 0, 0, 458, 467, 492, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 433, 0, 475,
	0, 0, 0, 415, 412, 0, 0, 456, 0, 0,
	0, 417, 0, 434, 493, 0, 404, 133, 497, 504,
	453, 254, 508, 451, 450, 198, 0, 229, 136, 150,
	111, 97, 107, 0, 135, 176, 205, 209, 441, 405,
	501, 431, 439, 119, 437, 207, 186, 245, 474, 188,
	206, 154, 235, 199, 244, 255, 256, 232, 252, 260,
	222, 100, 231, 391, 116, 217, 102, 241, 228, 165,
	145, 146, 101, 0, 203, 124, 131, 121, 178, 238,
	239, 120, 263, 108, 251, 104, 400, 250, 172, 234,
	242, 166, 159, 103, 240, 164, 158, 149, 128, 138,
	196, 156, 197, 139, 169, 168, 170, 0, 410, 0,
	226, 248, 264, 113, 426, 0, 233, 258, 259, 0,
	0, 114, 132, 127, 195, 401, 399, 394, 393, 148,
	155, 202, 262, 185, 208, 117, 247, 224, 422, 425,
	420, 421, 469, 470, 516, 517, 518, 494, 416, 0,
	423, 424, 0, 499, 506, 507, 473, 96, 105, 152,
	261, 200, 130, 249, 406, 419, 123, 429, 0, 0,
	442, 447, 448, 460, 462, 463, 464, 465, 472, 479,
	480, 482, 488, 489, 490, 491, 496, 503, 522, 98,
	99, 106, 112, 118, 122, 126, 129, 134, 137, 140,
	142, 143, 144, 147, 157, 160, 161, 162, 163, 173,
	174, 175, 177, 180, 181, 182, 183, 184, 187, 189,
	190, 191, 192, 193, 194, 201, 204, 210, 211, 212,
	213, 214, 215, 216, 218, 219, 220, 221, 227, 230,
	236, 237, 246, 253, 257, 179, 0, 0, 0, 0,
	326, 0, 0, 0, 125, 323, 0, 0, 0, 151,
	0, 0, 366, 153, 0, 0, 225, 167, 0, 0,
	0, 0, 357, 358, 0, 0, 0, 0, 0, 0,
	956, 0, 58, 0, 0, 324, 345, 344, 347, 348,
	349, 350, 0, 0, 115, 346, 351, 352, 353, 957,
	0, 0, 321, 338, 0, 365, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 335, 336, 0, 0, 0,
	0, 379, 0, 337, 0, 0, 332, 333, 334, 339,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 133,
	0, 0, 0, 254, 0, 0, 377, 198, 0, 229,
	136, 150, 111, 97, 107, 0, 135, 176, 205, 209,
	0, 0, 0, 0, 0, 119, 0, 207, 186, 245,
	0, 188, 206, 154, 235, 199, 244, 255, 256, 232,
	252, 260, 222, 100, 231, 243, 116, 217, 102, 241,
	228, 165, 145, 146, 101, 0, 203, 124, 131, 121,
	178, 238, 239, 120, 263, 108, 251, 104, 109, 250,
	172, 234, 242, 166, 159, 103, 240, 164, 158, 149,
	128, 138, 196, 156, 197, 139, 169, 168, 170, 0,
	0, 0, 226, 248, 264, 113, 0, 0, 233, 258,
	259, 0, 0, 114, 132, 127, 195, 171, 110, 141,
	223, 148, 155, 202, 262, 185, 208, 117, 247, 224,
	367, 378, 373, 374, 371, 372, 370, 369, 368, 380,
	359, 360, 361, 362, 364, 0, 375, 376, 363, 96,
	105, 152, 261, 200, 130, 249, 0, 0, 123, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 99, 106, 112, 118, 122, 126, 129, 134,
	137, 140, 142, 143, 144, 147, 157, 160, 161, 162,
	163, 173, 174, 175, 177, 180, 181, 182, 183, 184,
	187, 189, 190, 191, 192, 193, 194, 201, 204, 210,
	211, 212, 213, 214, 215, 216, 218, 219, 220, 221,
	227, 230, 236, 237, 246, 253, 257, 179, 0, 0,
	0, 0, 326, 0, 0, 0, 125, 323, 0, 0,
	0, 151, 0, 0, 366, 153, 0, 0, 225, 167,
	0, 0, 0, 0, 357, 358, 0, 0, 0, 0,
	0, 0, 0, 0, 58, 0, 579, 324, 345, 344,
	347, 348, 349, 350, 0, 0, 115, 346, 351, 352,
	353, 0, 0, 0, 321, 338, 0, 365, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 335, 336, 0,
	0, 0, 0, 379, 0, 337, 0, 0, 332, 333,
	334, 339, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 133, 0, 0, 0, 254, 0, 0, 377, 198,
	0, 229, 136, 150, 111, 97, 107, 0, 135, 176,
	205, 209, 0, 0, 0, 0, 0, 119, 0, 207,
	186, 245, 0, 188, 206, 154, 235, 199, 244, 255,
	256, 232, 252, 260, 222, 100, 231, 243, 116, 217,
	102, 241, 228, 165, 145, 146, 101, 0, 203, 124,
	131, 121, 178, 238, 239, 120, 263, 108, 251, 104,
	109, 250, 172, 234, 242, 166, 159, 103, 240, 164,
	158, 149, 128, 138, 196, 156, 197, 139, 169, 168,
	170, 0, 0, 0, 226, 248, 264, 113, 0, 0,
	233, 258, 259, 0, 0, 114, 132, 127, 195, 171,
	110, 141, 223, 148, 155, 202, 262, 185, 208, 117,
	247, 224, 367, 378, 373, 374, 371, 372, 370, 369,
	368, 380, 359, 360, 361, 362, 364, 0, 375, 376,
	363, 96, 105, 152, 261, 200, 130, 249, 0, 0,
	123, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 98, 99, 106, 112, 118, 122, 126,
	129, 134, 137, 140, 142, 143, 144, 147, 157, 160,
	161, 162, 163, 173, 174, 175, 177, 180, 181, 182,
	183, 184, 187, 189, 190, 191, 192, 193, 194, 201,
	204, 210, 211, 212, 213, 214, 215, 216, 218, 219,
	220, 221, 227, 230, 236, 237, 246, 253, 257, 179,
	0, 0, 0, 0, 326, 0, 0, 0, 125, 323,
	0, 0, 0, 151, 0, 0, 366, 153, 0, 0,
	225, 167, 0, 0, 0, 0, 357, 358, 0, 0,
	0, 0, 0, 0, 0, 0, 58, 0, 0, 324,
	345, 344, 347, 348, 349, 350, 0, 0, 115, 346,
	351, 352, 353, 0, 0, 0, 321, 338, 0, 365,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 335,
	336, 317, 0, 0, 0, 379, 0, 337, 0, 0,
	332, 333, 334, 339, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 0, 0, 0, 254, 0, 0,
	377, 198, 0, 229, 136, 150, 111, 97, 107, 0,
	135, 176, 205, 209, 0, 0, 0, 0, 0, 119,
	0, 207, 186, 245, 0, 188, 206, 154, 235, 199,
	244, 255, 256, 232, 252, 260, 222, 100, 231, 243,
	116, 217, 102, 241, 228, 165, 145, 146, 101, 0,
	203, 124, 131, 121, 178, 238, 239, 120, 263, 108,
	251, 104, 109, 250, 172, 234, 242, 166, 159, 103,
	240, 164, 158, 149, 128, 138, 196, 156, 197, 139,
	169, 168, 170, 0, 0, 0, 226, 248, 264, 113,
	0, 0, 233, 258, 259, 0, 0, 114, 132, 127,
	195, 171, 110, 141, 223, 148, 155, 202, 262, 185,
	208, 117, 247, 224, 367, 378, 373, 374, 371, 372,
	370, 369, 368, 380, 359, 360, 361, 362, 364, 0,
	375, 376, 363, 96, 105, 152, 261, 200, 130, 249,
	0, 0, 123, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 98, 99, 106, 112, 118,
	122, 126, 129, 134, 137, 140, 142, 143, 144, 147,
	157, 160, 161, 162, 163, 173, 174, 175, 177, 180,
	181, 182, 183, 184, 187, 189, 190, 191, 192, 193,
	194, 201, 204, 210, 211, 212, 213, 214, 215, 216,
	218, 219, 220, 221, 227, 230, 236, 237, 246, 253,
	257, 179, 0, 0, 0, 0, 326, 0, 0, 0,
	125, 323, 0, 0, 0, 151, 0, 0, 366, 153,
	0, 0, 225, 167, 0, 0, 0, 0, 357, 358,
	0, 0, 0, 0, 0, 0, 0, 0, 58, 0,
	0, 324, 345, 897, 347, 348, 349, 350, 0, 0,
	115, 346, 351, 352, 353, 0, 0, 0, 321, 338,
	0, 365, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 335, 336, 317, 0, 0, 0, 379, 0, 337,
	0, 0, 332, 333, 334, 339, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 133, 0, 0, 0, 254,
	0, 0, 377, 198, 0, 229, 136, 150, 111, 97,
	107, 0, 135, 176, 205, 209, 0, 0, 0, 0,
	0, 119, 0, 207, 186, 245, 0, 188, 206, 154,
	235, 199, 244, 255, 256, 232, 252, 260, 222, 100,
	231, 243, 116, 217, 102, 241, 228, 165, 145, 146,
	101, 0, 203, 124, 131, 121, 178, 238, 239, 120,
	263, 108, 251, 104, 109, 250, 172, 234, 242, 166,
	159, 103, 240, 164, 158, 149, 128, 138, 196, 156,
	197, 139, 169, 168, 170, 0, 0, 0, 226, 248,
	264, 113, 0, 0, 233, 258, 259, 0, 0, 114,
	132, 127, 195, 171, 110, 141, 223, 148, 155, 202,
	262, 185, 208, 117, 247, 224, 367, 378, 373, 374,
	371, 372, 370, 369, 368, 380, 359, 360, 361, 362,
	364, 0, 375, 376, 363, 96, 105, 152, 261, 200,
	130, 249, 0, 0, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 99, 106,
	112, 118, 122, 126, 129, 134, 137, 140, 142, 143,
	144, 147, 157, 160, 161, 162, 163, 173, 174, 175,
	177, 180, 181, 182, 183, 184, 187, 189, 190, 191,
	192, 193, 194, 201, 204, 210, 211, 212, 213, 214,
	215, 216, 218, 219, 220, 221, 227, 230, 236, 237,
	246, 253, 257, 179, 0, 0, 0, 0, 326, 0,
	0, 0, 125, 323, 0, 0, 0, 151, 0, 0,
	366, 153, 0, 0, 225, 167, 0, 0, 0, 0,
	357, 358, 0, 0, 0, 0, 0, 0, 0, 0,
	58, 0, 0, 324, 345, 894, 347, 348, 349, 350,
	0, 0, 115, 346, 351, 352, 353, 0, 0, 0,
	321, 338, 0, 365, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 335, 336, 317, 0, 0, 0, 379,
	0, 337, 0, 0, 332, 333, 334, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 0, 0,
	0, 254, 0, 0, 377, 198, 0, 229, 136, 150,
	111, 97, 107, 0, 135, 176, 205, 209, 0, 0,
	0, 0, 0, 119, 0, 207, 186, 245, 0, 188,
	206, 154, 235, 199, 244, 255, 256, 232, 252, 260,
	222, 100, 231, 243, 116, 217, 102, 241, 228, 165,
	145, 146, 101, 0, 203, 124, 131, 121, 178, 238,
	239, 120, 263, 108, 251, 104, 109, 250, 172, 234,
	242, 166, 159, 103, 240, 164, 158, 149, 128, 138,
	196, 156, 197, 139, 169, 168, 170, 0, 0, 0,
	226, 248, 264, 113, 0, 0, 233, 258, 259, 0,
	0, 114, 132, 127, 195, 171, 110, 141, 223, 148,
	155, 202, 262, 185, 208, 117, 247, 224, 367, 378,
	373, 374, 371, 372, 370, 369, 368, 380, 359, 360,
	361, 362, 364, 0, 375, 376, 363, 96, 105, 152,
	261, 200, 130, 249, 0, 0, 123, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	99, 106, 112, 118, 122, 126, 129, 134, 137, 140,
	142, 143, 144, 147, 157, 160, 161, 162, 163, 173,
	174, 175, 177, 180, 181, 182, 183, 184, 187, 189,
	190, 191, 192, 193, 194, 201, 204, 210, 211, 212,
	213, 214, 215, 216, 218, 219, 220, 221, 227, 230,
	236, 237, 246, 253, 257, 24, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 179, 0, 0,
	0, 0, 326, 0, 0, 0, 125, 323, 0, 0,
	0, 151, 0, 0, 366, 153, 0, 0, 225, 167,
	0, 0, 0, 0, 357, 358, 0, 0, 0, 0,
	0, 0, 0, 0, 58, 0, 0, 324, 345, 344,
	347, 348, 349, 350, 0, 0, 115, 346, 351, 352,
	353, 0, 0, 0, 321, 338, 0, 365, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 335, 336, 0,
	0, 0, 0, 379, 0, 337, 0, 0, 332, 333,
	334, 339, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 133, 0, 0, 0, 254, 0, 0, 377, 198,
	0, 229, 136, 150, 111, 97, 107, 0, 135, 176,
	205, 209, 0, 0, 0, 0, 0, 119, 0, 207,
	186, 245, 0, 188, 206, 154, 235, 199, 244, 255,
	256, 232, 252, 260, 222, 100, 231, 243, 116, 217,
	102, 241, 228, 165, 145, 146, 101, 0, 203, 124,
	131, 121, 178, 238, 239, 120, 263, 108, 251, 104,
	109, 250, 172, 234, 242, 166, 159, 103, 240, 164,
	158, 149, 128, 138, 196, 156, 197, 139, 169, 168,
	170, 0, 0, 0, 226, 248, 264, 113, 0, 0,
	233, 258, 259, 0, 0, 114, 132, 127, 195, 171,
	110, 141, 223, 148, 155, 202, 262, 185, 208, 117,
	247, 224, 367, 378, 373, 374, 371, 372, 370, 369,
	368, 380, 359, 360, 361, 362, 364, 0, 375, 376,
	363, 96, 105, 152, 261, 200, 130, 249, 0, 0,
	123, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 98, 99, 106, 112, 118, 122, 126,
	129, 134, 137, 140, 142, 143, 144, 147, 157, 160,
	161, 162, 163, 173, 174, 175, 177, 180, 181, 182,
	183, 184, 187, 189, 190, 191, 192, 193, 194, 201,
	204, 210, 211, 212, 213, 214, 215, 216, 218, 219,
	220, 221, 227, 230, 236, 237, 246, 253, 257, 179,
	0, 0, 0, 0, 326, 0, 0, 0, 125, 323,
	0, 0, 0, 151, 0, 0, 366, 153, 0, 0,
	225, 167, 0, 0, 0, 0, 357, 358, 0, 0,
	0, 0, 0, 0, 0, 0, 58, 0, 0, 324,
	345, 344, 347, 348, 349, 350, 0, 0, 115, 346,
	351, 352, 353, 0, 0, 0, 321, 338, 0, 365,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 335,
	336, 0, 0, 0, 0, 379, 0, 337, 0, 0,
	332, 333, 334, 339, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 0, 0, 0, 254, 0, 0,
	377, 198, 0, 229, 136, 150, 111, 97, 107, 0,
	135, 176, 205, 209, 0, 0, 0, 0, 0, 119,
	0, 207, 186, 245, 0, 188, 206, 154, 235, 199,
	244, 255, 256, 232, 252, 260, 222, 100, 231, 243,
	116, 217, 102, 241, 228, 165, 145, 146, 101, 0,
	203, 124, 131, 121, 178, 238, 239, 120, 263, 108,
	251, 104, 109, 250, 172, 234, 242, 166, 159, 103,
	240, 164, 158, 149, 128, 138, 196, 156, 197, 139,
	169, 168, 170, 0, 0, 0, 226, 248, 264, 113,
	0, 0, 233, 258, 259, 0, 0, 114, 132, 127,
	195, 171, 110, 141, 223, 148, 155, 202, 262, 185,
	208, 117, 247, 224, 367, 378, 373, 374, 371, 372,
	370, 369, 368, 380, 359, 360, 361, 362, 364, 0,
	375, 376, 363, 96, 105, 152, 261, 200, 130, 249,
	0, 0, 123, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 98, 99, 106, 112, 118,
	122, 126, 129, 134, 137, 140, 142, 143, 144, 147,
	157, 160, 161, 162, 163, 173, 174, 175, 177, 180,
	181, 182, 183, 184, 187, 189, 190, 191, 192, 193,
	194, 201, 204, 210, 211, 212, 213, 214, 215, 216,
	218, 219, 220, 221, 227, 230, 236, 237, 246, 253,
	257, 179, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 0, 0, 0, 151, 0, 0, 366, 153,
	0, 0, 225, 167, 0, 0, 0, 0, 357, 358,
	0, 0, 0, 0, 0, 0, 0, 0, 58, 0,
	0, 324, 345, 344, 347, 348, 349, 350, 0, 0,
	115, 346, 351, 352, 353, 0, 0, 0, 0, 338,
	0, 365, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 335, 336, 0, 0, 0, 0, 379, 0, 337,
	0, 0, 332, 333, 334, 339, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 133, 0, 0, 0, 254,
	0, 0, 377, 198, 0, 229, 136, 150, 111, 97,
	107, 0, 135, 176, 205, 209, 0, 0, 0, 0,
	0, 119, 0, 207, 186, 245, 1543, 188, 206, 154,
	235, 199, 244, 255, 256, 232, 252, 260, 222, 100,
	231, 243, 116, 217, 102, 241, 228, 165, 145, 146,
	101, 0, 203, 124, 131, 121, 178, 238, 239, 120,
	263, 108, 251, 104, 109, 250, 172, 234, 242, 166,
	159, 103, 240, 164, 158, 149, 128, 138, 196, 156,
	197, 139, 169, 168, 170, 0, 0, 0, 226, 248,
	264, 113, 0, 0, 233, 258, 259, 0, 0, 114,
	132, 127, 195, 171, 110, 141, 223, 148, 155, 202,
	262, 185, 208, 117, 247, 224, 367, 378, 373, 374,
	371, 372, 370, 369, 368, 380, 359, 360, 361, 362,
	364, 0, 375, 376, 363, 96, 105, 152, 261, 200,
	130, 249, 0, 0, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 99, 106,
	112, 118, 122, 126, 129, 134, 137, 140, 142, 143,
	144, 147, 157, 160, 161, 162, 163, 173, 174, 175,
	177, 180, 181, 182, 183, 184, 187, 189, 190, 191,
	192, 193, 194, 201, 204, 210, 211, 212, 213, 214,
	215, 216, 218, 219, 220, 221, 227, 230, 236, 237,
	246, 253, 257, 179, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 0, 0, 0, 151, 0, 0,
	366, 153, 0, 0, 225, 167, 0, 0, 0, 0,
	357, 358, 0, 0, 0, 0, 0, 0, 0, 0,
	58, 0, 579, 324, 345, 344, 347, 348, 349, 350,
	0, 0, 115, 346, 351, 352, 353, 0, 0, 0,
	0, 338, 0, 365, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 335, 336, 0, 0, 0, 0, 379,
	0, 337, 0, 0, 332, 333, 334, 339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 0, 0,
	0, 254, 0, 0, 377, 198, 0, 229, 136, 150,
	111, 97, 107, 0, 135, 176, 205, 209, 0, 0,
	0, 0, 0, 119, 0, 207, 186, 245, 0, 188,
	206, 154, 235, 199, 244, 255, 256, 232, 252, 260,
	222, 100, 231, 243, 116, 217, 102, 241, 228, 165,
	145, 146, 101, 0, 203, 124, 131, 121, 178, 238,
	239, 120, 263, 108, 251, 104, 109, 250, 172, 234,
	242, 166, 159, 103, 240, 164, 158, 149, 128, 138,
	196, 156, 197, 139, 169, 168, 170, 0, 0, 0,
	226, 248, 264, 113, 0, 0, 233, 258, 259, 0,
	0, 114, 132, 127, 195, 171, 110, 141, 223, 148,
	155, 202, 262, 185, 208, 117, 247, 224, 367, 378,
	373, 374, 371, 372, 370, 369, 368, 380, 359, 360,
	361, 362, 364, 0, 375, 376, 363, 96, 105, 152,
	261, 200, 130, 249, 0, 0, 123, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	99, 106, 112, 118, 122, 126, 129, 134, 137, 140,
	142, 143, 144, 147, 157, 160, 161, 162, 163, 173,
	174, 175, 177, 180, 181, 182, 183, 184, 187, 189,
	190, 191, 192, 193, 194, 201, 204, 210, 211, 212,
	213, 214, 215, 216, 218, 219, 220, 221, 227, 230,
	236, 237, 246, 253, 257, 179, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 0, 0, 0, 151,
	0, 0, 366, 153, 0, 0, 225, 167, 0, 0,
	0, 0, 357, 358, 0, 0, 0, 0, 0, 0,
	0, 0, 58, 0, 0, 324, 345, 344, 347, 348,
	349, 350, 0, 0, 115, 346, 351, 352, 353, 0,
	0, 0, 0, 338, 0, 365, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 335, 336, 0, 0, 0,
	0, 379, 0, 337, 0, 0, 332, 333, 334, 339,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 133,
	0, 0, 0, 254, 0, 0, 377, 198, 0, 229,
	136, 150, 111, 97, 107, 0, 135, 176, 205, 209,
	0, 0, 0, 0, 0, 119, 0, 207, 186, 245,
	0, 188, 206, 154, 235, 199, 244, 255, 256, 232,
	252, 260, 222, 100, 231, 243, 116, 217, 102, 241,
	228, 165, 145, 146, 101, 0, 203, 124, 131, 121,
	178, 238, 239, 120, 263, 108, 251, 104, 109, 250,
	172, 234, 242, 166, 159, 103, 240, 164, 158, 149,
	128, 138, 196, 156, 197, 139, 169, 168, 170, 0,
	0, 0, 226, 248, 264, 113, 0, 0, 233, 258,
	259, 0, 0, 114, 132, 127, 195, 171, 110, 141,
	223, 148, 155, 202, 262, 185, 208, 117, 247, 224,
	367, 378, 373, 374, 371, 372, 370, 369, 368, 380,
	359, 360, 361, 362, 364, 0, 375, 376, 363, 96,
	105, 152, 261, 200, 130, 249, 0, 0, 123, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 99, 106, 112, 118, 122, 126, 129, 134,
	137, 140, 142, 143, 144, 147, 157, 160, 161, 162,
	163, 173, 174, 175, 177, 180, 181, 182, 183, 184,
	187, 189, 190, 191, 192, 193, 194, 201, 204, 210,
	211, 212, 213, 214, 215, 216, 218, 219, 220, 221,
	227, 230, 236, 237, 246, 253, 257, 179, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 0, 0,
	0, 151, 0, 0, 0, 153, 0, 0, 225, 167,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 402, 0, 0,
	0, 0, 0, 0, 0, 0, 115, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 620, 619, 629, 630, 622, 623, 624,
	625, 626, 627, 628, 621, 0, 0, 631, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 133, 0, 0, 0, 254, 0, 0, 0, 198,
	0, 229, 136, 150, 111, 97, 107, 0, 135, 176,
	205, 209, 0, 0, 0, 0, 0, 119, 0, 207,
	186, 245, 0, 188, 206, 154, 235, 199, 244, 255,
	256, 232, 252, 260, 222, 100, 231, 243, 116, 217,
	102, 241, 228, 165, 145, 146, 101, 0, 203, 124,
	131, 121, 178, 238, 239, 120, 263, 108, 251, 104,
	109, 250, 172, 234, 242, 166, 159, 103, 240, 164,
	158, 149, 128, 138, 196, 156, 197, 139, 169, 168,
	170, 0, 0, 0, 226, 248, 264, 113, 0, 0,
	233, 258, 259, 0, 0, 114, 132, 127, 195, 171,
	110, 141, 223, 148, 155, 202, 262, 185, 208, 117,
	247, 224, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 105, 152, 261, 200, 130, 249, 0, 0,
	123, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 98, 99, 106, 112, 118, 122, 126,
	129, 134, 137, 140, 142, 143, 144, 147, 157, 160,
	161, 162, 163, 173, 174, 175, 177, 180, 181, 182,
	183, 184, 187, 189, 190, 191, 192, 193, 194, 201,
	204, 210, 211, 212, 213, 214, 215, 216, 218, 219,
	220, 221, 227, 230, 236, 237, 246, 253, 257, 179,
	0, 0, 0, 608, 0, 0, 0, 0, 125, 0,
	0, 0, 0, 151, 0, 0, 0, 153, 0, 0,
	225, 167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 402,
	0, 610, 0, 0, 0, 0, 0, 0, 115, 0,
	0, 0, 0, 0, 605, 604, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 606, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 0, 0, 0, 254, 0, 0,
	0, 198, 0, 229, 136, 150, 111, 97, 107, 0,
	135, 176, 205, 209, 0, 0, 0, 0, 0, 119,
	0, 207, 186, 245, 0, 188, 206, 154, 235, 199,
	244, 255, 256, 232, 252, 260, 222, 100, 231, 243,
	116, 217, 102, 241, 228, 165, 145, 146, 101, 0,
	203, 124, 131, 121, 178, 238, 239, 120, 263, 108,
	251, 104, 109, 250, 172, 234, 242, 166, 159, 103,
	240, 164, 158, 149, 128, 138, 196, 156, 197, 139,
	169, 168, 170, 0, 0, 0, 226, 248, 264, 113,
	0, 0, 233, 258, 259, 0, 0, 114, 132, 127,
	195, 171, 110, 141, 223, 148, 155, 202, 262, 185,
	208, 117, 247, 224, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 105, 152, 261, 200, 130, 249,
	0, 0, 123, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 98, 99, 106, 112, 118,
	122, 126, 129, 134, 137, 140, 142, 143, 144, 147,
	157, 160, 161, 162, 163, 173, 174, 175, 177, 180,
	181, 182, 183, 184, 187, 189, 190, 191, 192, 193,
	194, 201, 204, 210, 211, 212, 213, 214, 215, 216,
	218, 219, 220, 221, 227, 230, 236, 237, 246, 253,
	257, 179, 0, 0, 0, 939, 0, 0, 0, 0,
	125, 0, 0, 0, 0, 151, 0, 0, 0, 153,
	0, 0, 225, 167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 0, 941, 0, 0, 0, 0, 0, 0,
	115, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 133, 0, 0, 0, 254,
	0, 0, 0, 198, 0, 229, 136, 150, 111, 97,
	107, 0, 135, 176, 205, 209, 0, 0, 0, 0,
	0, 119, 0, 207, 186, 245, 0, 188, 206, 154,
	235, 199, 244, 255, 256, 232, 252, 260, 222, 100,
	231, 243, 116, 217, 102, 241, 228, 165, 145, 146,
	101, 0, 203, 124, 131, 121, 178, 238, 239, 120,
	263, 108, 251, 104, 109, 250, 172, 234, 242, 166,
	159, 103, 240, 164, 158, 149, 128, 138, 196, 156,
	197, 139, 169, 168, 170, 0, 0, 0, 226, 248,
	264, 113, 0, 0, 233, 258, 259, 0, 0, 114,
	132, 127, 195, 171, 110, 141, 223, 148, 155, 202,
	262, 185, 208, 117, 247, 224, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 105, 152, 261, 200,
	130, 249, 0, 0, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 99, 106,
	112, 118, 122, 126, 129, 134, 137, 140, 142, 143,
	144, 147, 157, 160, 161, 162, 163, 173, 174, 175,
	177, 180, 181, 182, 183, 184, 187, 189, 190, 191,
	192, 193, 194, 201, 204, 210, 211, 212, 213, 214,
	215, 216, 218, 219, 220, 221, 227, 230, 236, 237,
	246, 253, 257, 24, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 179, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 0, 0, 0, 151,
	0, 0, 0, 153, 0, 0, 225, 167, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 58, 0, 0, 402, 0, 0, 0, 0,
	0, 0, 0, 0, 115, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 133,
	0, 0, 0, 254, 0, 0, 0, 198, 0, 229,
	136, 150, 111, 97, 107, 0, 135, 176, 205, 209,
	0, 0, 0, 0, 0, 119, 0, 207, 186, 245,
	0, 188, 206, 154, 235, 199, 244, 255, 256, 232,
	252, 260, 222, 100, 231, 243, 116, 217, 102, 241,
	228, 165, 145, 146, 101, 0, 203, 124, 131, 121,
	178, 238, 239, 120, 263, 108, 251, 104, 109, 250,
	172, 234, 242, 166, 159, 103, 240, 164, 158, 149,
	128, 138, 196, 156, 197, 139, 169, 168, 170, 0,
	0, 0, 226, 248, 264, 113, 0, 0, 233, 258,
	259, 0, 0, 114, 132, 127, 195, 171, 110, 141,
	223, 148, 155, 202, 262, 185, 208, 117, 247, 224,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	105, 152, 261, 200, 130, 249, 0, 0, 123, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 99, 106, 112, 118, 122, 126, 129, 134,
	137, 140, 142, 143, 144, 147, 157, 160, 161, 162,
	163, 173, 174, 175, 177, 180, 181, 182, 183, 184,
	187, 189, 190, 191, 192, 193, 194, 201, 204, 210,
	211, 212, 213, 214, 215, 216, 218, 219, 220, 221,
	227, 230, 236, 237, 246, 253, 257, 24, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 179,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	0, 0, 0, 151, 0, 0, 0, 153, 0, 0,
	225, 167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 58, 0, 0, 94,
	0, 0, 0, 0, 0, 0, 0, 0, 115, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 0, 0, 0, 254, 0, 0,
	0, 198, 0, 229, 136, 150, 111, 97, 107, 0,
	135, 176, 205, 209, 0, 0, 0, 0, 0, 119,
	0, 207, 186, 245, 0, 188, 206, 154, 235, 199,
	244, 255, 256, 232, 252, 260, 222, 100, 231, 243,
	116, 217, 102, 241, 228, 165, 145, 146, 101, 0,
	203, 124, 131, 121, 178, 238, 239, 120, 263, 108,
	251, 104, 109, 250, 172, 234, 242, 166, 159, 103,
	240, 164, 158, 149, 128, 138, 196, 156, 197, 139,
	169, 168, 170, 0, 0, 0, 226, 248, 264, 113,
	0, 0, 233, 258, 259, 0, 0, 114, 132, 127,
	195, 171, 110, 141, 223, 148, 155, 202, 262, 185,
	208, 117, 247, 224, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 105, 152, 261, 200, 130, 249,
	0, 0, 123, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 98, 99, 106, 112, 118,
	122, 126, 129, 134, 137, 140, 142, 143, 144, 147,
	157, 160, 161, 162, 163, 173, 174, 175, 177, 180,
	181, 182, 183, 184, 187, 189, 190, 191, 192, 193,
	194, 201, 204, 210, 211, 212, 213, 214, 215, 216,
	218, 219, 220, 221, 227, 230, 236, 237, 246, 253,
	257, 179, 0, 0, 0, 939, 0, 0, 0, 0,
	125, 0, 0, 0, 0, 151, 0, 0, 0, 153,
	0, 0, 225, 167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 0, 941, 0, 0, 0, 0, 0, 0,
	115, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 133, 0, 0, 0, 254,
	0, 0, 0, 198, 0, 229, 136, 150, 111, 97,
	107, 0, 135, 176, 205, 209, 0, 0, 0, 0,
	0, 119, 0, 207, 186, 245, 0, 937, 206, 154,
	235, 199, 244, 255, 256, 232, 252, 260, 222, 100,
	231, 243, 116, 217, 102, 241, 228, 165, 145, 146,
	101, 0, 203, 124, 131, 121, 178, 238, 239, 120,
	263, 108, 251, 104, 109, 250, 172, 234, 242, 166,
	159, 103, 240, 164, 158, 149, 128, 138, 196, 156,
	197, 139, 169, 168, 170, 0, 0, 0, 226, 248,
	264, 113, 0, 0, 233, 258, 259, 0, 0, 114,
	132, 127, 195, 171, 110, 141, 223, 148, 155, 202,
	262, 185, 208, 117, 247, 224, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 105, 152, 261, 200,
	130, 249, 0, 0, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 99, 106,
	112, 118, 122, 126, 129, 134, 137, 140, 142, 143,
	144, 147, 157, 160, 161, 162, 163, 173, 174, 175,
	177, 180, 181, 182, 183, 184, 187, 189, 190, 191,
	192, 193, 194, 201, 204, 210, 211, 212, 213, 214,
	215, 216, 218, 219, 220, 221, 227, 230, 236, 237,
	246, 253, 257, 179, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 0, 0, 0, 151, 0, 0,
	0, 153, 0, 0, 225, 167, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 402, 0, 0, 835, 0, 0, 836,
	0, 0, 115, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 0, 0,
	0, 254, 0, 0, 0, 198, 0, 229, 136, 150,
	111, 97, 107, 0, 135, 176, 205, 209, 0, 0,
	0, 0, 0, 119, 0, 207, 186, 245, 0, 188,
	206, 154, 235, 199, 244, 255, 256, 232, 252, 260,
	222, 100, 231, 243, 116, 217, 102, 241, 228, 165,
	145, 146, 101, 0, 203, 124, 131, 121, 178, 238,
	239, 120, 263, 108, 251, 104, 109, 250, 172, 234,
	242, 166, 159, 103, 240, 164, 158, 149, 128, 138,
	196, 156, 197, 139, 169, 168, 170, 0, 0, 0,
	226, 248, 264, 113, 0, 0, 233, 258, 259, 0,
	0, 114, 132, 127, 195, 171, 110, 141, 223, 148,
	155, 202, 262, 185, 208, 117, 247, 224, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 105, 152,
	261, 200, 130, 249, 0, 0, 123, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	99, 106, 112, 118, 122, 126, 129, 134, 137, 140,
	142, 143, 144, 147, 157, 160, 161, 162, 163, 173,
	174, 175, 177, 180, 181, 182, 183, 184, 187, 189,
	190, 191, 192, 193, 194, 201, 204, 210, 211, 212,
	213, 214, 215, 216, 218, 219, 220, 221, 227, 230,
	236, 237, 246, 253, 257, 179, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 722, 0, 0, 0, 151,
	0, 0, 0, 153, 0, 0, 225, 167, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 402, 0, 721, 0, 0,
	0, 0, 0, 0, 115, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 133,
	0, 0, 0, 254, 0, 0, 0, 198, 0, 229,
	136, 150, 111, 97, 107, 0, 135, 176, 205, 209,
	0, 0, 0, 0, 0, 119, 0, 207, 186, 245,
	0, 188, 206, 154, 235, 199, 244, 255, 256, 232,
	252, 260, 222, 100, 231, 243, 116, 217, 102, 241,
	228, 165, 145, 146, 101, 0, 203, 124, 131, 121,
	178, 238, 239, 120, 263, 108, 251, 104, 109, 250,
	172, 234, 242, 166, 159, 103, 240, 164, 158, 149,
	128, 138, 196, 156, 197, 139, 169, 168, 170, 0,
	0, 0, 226, 248, 264, 113, 0, 0, 233, 258,
	259, 0, 0, 114, 132, 127, 195, 171, 110, 141,
	223, 148, 155, 202, 262, 185, 208, 117, 247, 224,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	105, 152, 261, 200, 130, 249, 0, 0, 123, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 99, 106, 112, 118, 122, 126, 129, 134,
	137, 140, 142, 143, 144, 147, 157, 160, 161, 162,
	163, 173, 174, 175, 177, 180, 181, 182, 183, 184,
	187, 189, 190, 191, 192, 193, 194, 201, 204, 210,
	211, 212, 213, 214, 215, 216, 218, 219, 220, 221,
	227, 230, 236, 237, 246, 253, 257, 179, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 0, 0,
	0, 151, 0, 0, 0, 153, 0, 0, 225, 167,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 58, 0, 0, 94, 0, 0,
	0, 0, 0, 0, 0, 0, 115, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 133, 0, 0, 0, 254, 0, 0, 0, 198,
	0, 229, 136, 150, 111, 97, 107, 0, 135, 176,
	205, 209, 0, 0, 0, 0, 0, 119, 0, 207,
	186, 245, 0, 188, 206, 154, 235, 199, 244, 255,
	256, 232, 252, 260, 222, 100, 231, 243, 116, 217,
	102, 241, 228, 165, 145, 146, 101, 0, 203, 124,
	131, 121, 178, 238, 239, 120, 263, 108, 251, 104,
	109, 250, 172, 234, 242, 166, 159, 103, 240, 164,
	158, 149, 128, 138, 196, 156, 197, 139, 169, 168,
	170, 0, 0, 0, 226, 248, 264, 113, 0, 0,
	233, 258, 259, 0, 0, 114, 132, 127, 195, 171,
	110, 141, 223, 148, 155, 202, 262, 185, 208, 117,
	247, 224, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 105, 152, 261, 200, 130, 249, 0, 0,
	123, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 98, 99, 106, 112, 118, 122, 126,
	129, 134, 137, 140, 142, 143, 144, 147, 157, 160,
	161, 162, 163, 173, 174, 175, 177, 180, 181, 182,
	183, 184, 187, 189, 190, 191, 192, 193, 194, 201,
	204, 210, 211, 212, 213, 214, 215, 216, 218, 219,
	220, 221, 227, 230, 236, 237, 246, 253, 257, 179,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	0, 0, 0, 151, 0, 0, 0, 153, 0, 0,
	225, 167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	0, 941, 0, 0, 0, 0, 0, 0, 115, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 0, 0, 0, 254, 0, 0,
	0, 198, 0, 229, 136, 150, 111, 97, 107, 0,
	135, 176, 205, 209, 0, 0, 0, 0, 0, 119,
	0, 207, 186, 245, 0, 188, 206, 154, 235, 199,
	244, 255, 256, 232, 252, 260, 222, 100, 231, 243,
	116, 217, 102, 241, 228, 165, 145, 146, 101, 0,
	203, 124, 131, 121, 178, 238, 239, 120, 263, 108,
	251, 104, 109, 250, 172, 234, 242, 166, 159, 103,
	240, 164, 158, 149, 128, 138, 196, 156, 197, 139,
	169, 168, 170, 0, 0, 0, 226, 248, 264, 113,
	0, 0, 233, 258, 259, 0, 0, 114, 132, 127,
	195, 171, 110, 141, 223, 148, 155, 202, 262, 185,
	208, 117, 247, 224, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 105, 152, 261, 200, 130, 249,
	0, 0, 123, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 98, 99, 106, 112, 118,
	122, 126, 129, 134, 137, 140, 142, 143, 144, 147,
	157, 160, 161, 162, 163, 173, 174, 175, 177, 180,
	181, 182, 183, 184, 187, 189, 190, 191, 192, 193,
	194, 201, 204, 210, 211, 212, 213, 214, 215, 216,
	218, 219, 220, 221, 227, 230, 236, 237, 246, 253,
	257, 179, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 0, 0, 0, 151, 0, 0, 0, 153,
	0, 0, 225, 167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 402, 0, 610, 0, 0, 0, 0, 0, 0,
	115, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 133, 0, 0, 0, 254,
	0, 0, 0, 198, 0, 229, 136, 150, 111, 97,
	107, 0, 135, 176, 205, 209, 0, 0, 0, 0,
	0, 119, 0, 207, 186, 245, 0, 188, 206, 154,
	235, 199, 244, 255, 256, 232, 252, 260, 222, 100,
	231, 243, 116, 217, 102, 241, 228, 165, 145, 146,
	101, 0, 203, 124, 131, 121, 178, 238, 239, 120,
	263, 108, 251, 104, 109, 250, 172, 234, 242, 166,
	159, 103, 240, 164, 158, 149, 128, 138, 196, 156,
	197, 139, 169, 168, 170, 0, 0, 0, 226, 248,
	264, 113, 0, 0, 233, 258, 259, 0, 0, 114,
	132, 127, 195, 171, 110, 141, 223, 148, 155, 202,
	262, 185, 208, 117, 247, 224, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 105, 152, 261, 200,
	130, 249, 0, 0, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 99, 106,
	112, 118, 122, 126, 129, 134, 137, 140, 142, 143,
	144, 147, 157, 160, 161, 162, 163, 173, 174, 175,
	177, 180, 181, 182, 183, 184, 187, 189, 190, 191,
	192, 193, 194, 201, 204, 210, 211, 212, 213, 214,
	215, 216, 218, 219, 220, 221, 227, 230, 236, 237,
	246, 253, 257, 179, 0, 0, 0, 0, 0, 0,
	0, 692, 125, 0, 0, 0, 0, 151, 0, 0,
	0, 153, 0, 0, 225, 167, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 0, 0, 0, 0, 0, 0,
	0, 0, 115, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 0, 0,
	0, 254, 0, 0, 0, 198, 0, 229, 136, 150,
	111, 97, 107, 0, 135, 176, 205, 209, 0, 0,
	0, 0, 0, 119, 0, 207, 186, 245, 0, 188,
	206, 154, 235, 199, 244, 255, 256, 232, 252, 260,
	222, 100, 231, 243, 116, 217, 102, 241, 228, 165,
	145, 146, 101, 0, 203, 124, 131, 121, 178, 238,
	239, 120, 263, 108, 251, 104, 109, 250, 172, 234,
	242, 166, 159, 103, 240, 164, 158, 149, 128, 138,
	196, 156, 197, 139, 169, 168, 170, 0, 0, 0,
	226, 248, 264, 113, 0, 0, 233, 258, 259, 0,
	0, 114, 132, 127, 195, 171, 110, 141, 223, 148,
	155, 202, 262, 185, 208, 117, 247, 224, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 105, 152,
	261, 200, 130, 249, 0, 0, 123, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	99, 106, 112, 118, 122, 126, 129, 134, 137, 140,
	142, 143, 144, 147, 157, 160, 161, 162, 163, 173,
	174, 175, 177, 180, 181, 182, 183, 184, 187, 189,
	190, 191, 192, 193, 194, 201, 204, 210, 211, 212,
	213, 214, 215, 216, 218, 219, 220, 221, 227, 230,
	236, 237, 246, 253, 257, 383, 0, 0, 0, 0,
	0, 0, 179, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 0, 0, 0, 151, 0, 0, 0,
	153, 0, 0, 225, 167, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 0, 0, 0, 0, 0, 0, 0,
	0, 115, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 0, 0, 0,
	254, 0, 0, 0, 198, 0, 229, 136, 150, 111,
	97, 107, 0, 135, 176, 205, 209, 0, 0, 0,
	0, 0, 119, 0, 207, 186, 245, 0, 188, 206,
	154, 235, 199, 244, 255, 256, 232, 252, 260, 222,
	100, 231, 243, 116, 217, 102, 241, 228, 165, 145,
	146, 101, 0, 203, 124, 131, 121, 178, 238, 239,
	120, 263, 108, 251, 104, 109, 250, 172, 234, 242,
	166, 159, 103, 240, 164, 158, 149, 128, 138, 196,
	156, 197, 139, 169, 168, 170, 0, 0, 0, 226,
	248, 264, 113, 0, 0, 233, 258, 259, 0, 0,
	114, 132, 127, 195, 171, 110, 141, 223, 148, 155,
	202, 262, 185, 208, 117, 247, 224, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 105, 152, 261,
	200, 130, 249, 0, 0, 123, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 98, 99,
	106, 112, 118, 122, 126, 129, 134, 137, 140, 142,
	143, 144, 147, 157, 160, 161, 162, 163, 173, 174,
	175, 177, 180, 181, 182, 183, 184, 187, 189, 190,
	191, 192, 193, 194, 201, 204, 210, 211, 212, 213,
	214, 215, 216, 218, 219, 220, 221, 227, 230, 236,
	237, 246, 253, 257, 179, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 0, 0, 0, 151, 0,
	0, 0, 153, 0, 0, 225, 167, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 0, 0, 0, 0, 0,
	0, 0, 0, 115, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 0,
	91, 0, 254, 0, 0, 0, 198, 0, 229, 136,
	150, 111, 97, 107, 0, 135, 176, 205, 209, 0,
	0, 0, 0, 0, 119, 0, 207, 186, 245, 0,
	188, 206, 154, 235, 199, 244, 255, 256, 232, 252,
	260, 222, 100, 231, 243, 116, 217, 102, 241, 228,
	165, 145, 146, 101, 0, 203, 124, 131, 121, 178,
	238, 239, 120, 263, 108, 251, 104, 109, 250, 172,
	234, 242, 166, 159, 103, 240, 164, 158, 149, 128,
	138, 196, 156, 197, 139, 169, 168, 170, 0, 0,
	0, 226, 248, 264, 113, 0, 0, 233, 258, 259,
	0, 0, 114, 132, 127, 195, 171, 110, 141, 223,
	148, 155, 202, 262, 185, 208, 117, 247, 224, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 105,
	152, 261, 200, 130, 249, 0, 0, 123, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	98, 99, 106, 112, 118, 122, 126, 129, 134, 137,
	140, 142, 143, 144, 147, 157, 160, 161, 162, 163,
	173, 174, 175, 177, 180, 181, 182, 183, 184, 187,
	189, 190, 191, 192, 193, 194, 201, 204, 210, 211,
	212, 213, 214, 215, 216, 218, 219, 220, 221, 227,
	230, 236, 237, 246, 253, 257, 179, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 0, 0, 0,
	151, 0, 0, 0, 153, 0, 0, 225, 167, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 402, 0, 0, 0,
	0, 0, 0, 0, 0, 115, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 0, 0, 0, 254, 0, 0, 0, 198, 0,
	229, 136, 150, 111, 97, 107, 0, 135, 176, 205,
	209, 0, 0, 0, 0, 0, 119, 0, 207, 186,
	245, 0, 188, 206, 154, 235, 199, 244, 255, 256,
	232, 252, 260, 222, 100, 231, 243, 116, 217, 102,
	241, 228, 165, 145, 146, 101, 0, 203, 124, 131,
	121, 178, 238, 239, 120, 263, 108, 251, 104, 109,
	250, 172, 234, 242, 166, 159, 103, 240, 164, 158,
	149, 128, 138, 196, 156, 197, 139, 169, 168, 170,
	0, 0, 0, 226, 248, 264, 113, 0, 0, 233,
	258, 259, 0, 0, 114, 132, 127, 195, 171, 110,
	141, 223, 148, 155, 202, 262, 185, 208, 117, 247,
	224, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 105, 152, 261, 200, 130, 249, 0, 0, 123,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 99, 106, 112, 118, 122, 126, 129,
	134, 137, 140, 142, 143, 144, 147, 157, 160, 161,
	162, 163, 173, 174, 175, 177, 180, 181, 182, 183,
	184, 187, 189, 190, 191, 192, 193, 194, 201, 204,
	210, 211, 212, 213, 214, 215, 216, 218, 219, 220,
	221, 227, 230, 236, 237, 246, 253, 257, 179, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 0,
	0, 0, 151, 0, 0, 0, 153, 0, 0, 225,
	167, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 0,
	0, 0, 0, 0, 0, 0, 0, 115, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 0, 0, 0, 254, 0, 0, 0,
	198, 0, 229, 136, 150, 111, 97, 107, 0, 135,
	176, 205, 209, 0, 0, 0, 0, 0, 119, 0,
	207, 186, 245, 0, 188, 206, 154, 235, 199, 244,
	255, 256, 232, 252, 260, 222, 100, 231, 243, 116,
	217, 102, 241, 228, 165, 145, 146, 101, 0, 203,
	124, 131, 121, 178, 238, 239, 120, 263, 108, 251,
	104, 109, 250, 172, 234, 242, 166, 159, 103, 240,
	164, 158, 149, 128, 138, 196, 156, 197, 139, 169,
	168, 170, 0, 0, 0, 226, 248, 264, 113, 0,
	0, 233, 258, 259, 0, 0, 114, 132, 127, 195,
	171, 110, 141, 223, 148, 155, 202, 262, 185, 208,
	117, 247, 224, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 105, 152, 261, 200, 130, 249, 0,
	0, 123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 99, 106, 112, 118, 122,
	126, 129, 134, 137, 140, 142, 143, 144, 147, 157,
	160, 161, 162, 163, 173, 174, 175, 177, 180, 181,
	182, 183, 184, 187, 189, 190, 191, 192, 193, 194,
	201, 204, 210, 211, 212, 213, 214, 215, 216, 218,
	219, 220, 221, 227, 230, 236, 237, 246, 253, 257,
	179, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 0, 0, 0, 151, 0, 0, 0, 153, 0,
	0, 225, 167, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	324, 0, 0, 0, 0, 0, 0, 0, 0, 115,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 133, 0, 0, 0, 254, 0,
	0, 0, 198, 0, 229, 136, 150, 111, 97, 107,
	0, 135, 176, 205, 209, 0, 0, 0, 0, 0,
	119, 0, 207, 186, 245, 0, 188, 206, 154, 235,
	199, 244, 255, 256, 232, 252, 260, 222, 100, 231,
	243, 116, 217, 102, 241, 228, 165, 145, 146, 101,
	0, 203, 124, 131, 121, 178, 238, 239, 120, 263,
	108, 251, 104, 109, 250, 172, 234, 242, 166, 159,
	103, 240, 164, 158, 149, 128, 138, 196, 156, 197,
	139, 169, 168, 170, 0, 0, 0, 226, 248, 264,
	113, 0, 0, 233, 258, 259, 0, 0, 114, 132,
	127, 195, 171, 110, 141, 223, 148, 155, 202, 262,
	185, 208, 117, 247, 224, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 105, 152, 261, 200, 130,
	249, 0, 0, 123, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 98, 99, 106, 112,
	118, 122, 126, 129, 134, 137, 140, 142, 143, 144,
	147, 157, 160, 161, 162, 163, 173, 174, 175, 177,
	180, 181, 182, 183, 184, 187, 189, 190, 191, 192,
	193, 194, 201, 204, 210, 211, 212, 213, 214, 215,
	216, 218, 219, 220, 221, 227, 230, 236, 237, 246,
	253, 257,
}
var yyPact = [...]int{

	1877, -1000, -275, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1013, 1072, -1000, -1000, -1000, -1000, -1000, -1000,
	303, 105, -1000, -1000, -1000, 122, -14, 14706, 119, 132,
	15370, -1000, 7, -1000, -1000, 15370, -1000, -1000, -1000, -65,
	-66, -1000, 806, -1000, -1000, 16, -1000, -1000, -1000, -1000,
	-1000, 1002, 1010, 843, 1022, 912, -1000, 7691, 85, 85,
	14374, 6695, -1000, -1000, 290, 15370, 115, 15370, -149, 80,
	80, 80, -1000, -1000, -1000, 15370, 78, 655, 78, 78,
	78, 15370, -1000, 168, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 15370, 642, 956, 3590, 47,
	3590, 3590, -1000, 3590, 3590, -1000, 3590, 18, 3590, -58,
	1034, 14, -22, -1000, 3590, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 492, 118,
	15370, 241, -1000, 995, 9031, 9031, 1013, -1000, 806, -1000,
	-1000, -1000, 944, -1000, -1000, 378, 1059, -1000, 10691, 165,
	-1000, 9031, 405, 782, -1000, -1000, 782, -1000, -1000, 144,
	-1000, -1000, 10027, 10027, 10027, 10027, 10027, 10027, 10027, 10027,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 782, -1000, 8699, 782, 782, 782,
	782, 782, 782, 782, 782, 9031, 782, 782, 782, 782,
	782, 782, 782, 782, 782, 782, 782, 782, 782, 782,
	782, 14035, 13039, 15370, 736, 692, -1000, -1000, 163, 758,
	6350, -128, -1000, -1000, -1000, 294, 12707, -1000, -1000, -1000,
	953, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 661, 15370, -1000, 1555, -1000, 618, 994,
	89, 613, 318, 610, 15370, 780, 87, 15370, 974, 863,
	15370, 605, 598, -1000, 6005, -1000, 3590, 3590, -1000, -1000,
	-1000, 3590, 3590, 3590, 15370, 3590, 3590, -1000, -1000, -1000,
	-1000, -1000, 3590, 3590, -1000, 1058, 277, -1000, -1000, -1000,
	-1000, 9031, 204, -1000, 862, -1000, -1000, -1000, -1000, -1000,
	15370, 3590, 24, 61, 52, 15370, -1000, 1064, 196, 528,
	160, 759, -1000, 302, 1002, 492, 912, 12375, 859, -1000,
	-1000, -1000, 15370, -1000, 9031, 9031, 497, -1000, 13703, -1000,
	-1000, 4625, 209, 10027, 474, 297, 10027, 10027, 10027, 10027,
	10027, 10027, 10027, 10027, 10027, 10027, 10027, 10027, 10027, 10027,
	10027, 423, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	596, -1000, 806, 762, 762, 175, 175, 175, 175, 175,
	175, 175, 10359, 1016, 492, 659, 231, 8699, 7691, 7691,
	9031, 9031, 8355, 8023, 7691, 1016, 301, 231, 15702, -1000,
	-1000, 9695, -1000, -1000, -1000, -1000, -1000, 492, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 15038, 15038, 7691, 7691, 7691,
	7691, 38, 15370, -1000, 799, 850, -1000, -1000, -1000, 993,
	11711, 12043, 38, 676, 13039, 15370, -1000, -1000, 13039, 15370,
	4280, 5660, 758, -128, 684, -1000, -115, -97, 7027, 174,
	-1000, -1000, -1000, -1000, 3245, 177, 664, -1000, -57, -1000,
	-1000, -1000, 797, -1000, 797, 797, 797, 797, -25, -25,
	-25, -25, -1000, -1000, -1000, -1000, -1000, 833, 820, -1000,
	797, 797, 797, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 805, 805, 805, 802, 802, 835, -1000, 15370, 3590,
	967, 3590, -1000, 15370, 15370, 751, -1000, 15370, 740, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 15370, 360, 15370, 15370, 231,
	-1000, 477, 15370, 79, -1000, 15370, 15370, 15370, 15370, 15370,
	134, -1000, 916, 9031, 9031, 5315, 9031, -1000, -1000, -1000,
	995, -1000, 1016, 1049, -1000, 934, 931, 7691, -1000, -1000,
	209, 240, -1000, -1000, 393, -1000, -1000, -1000, -1000, 154,
	782, -1000, 2095, -1000, -1000, -1000, -1000, 474, 10027, 10027,
	10027, 338, 2095, 2208, 491, 305, 175, 557, 557, 179,
	179, 179, 179, 179, 475, 475, -1000, -1000, -1000, 492,
	-1000, -1000, -1000, 7691, -1000, 9031, -1000, 492, 651, -1000,
	651, 460, 454, 254, 1056, 651, 252, 1047, 651, 651,
	7691, 306, -1000, 9031, 492, -1000, 151, -1000, 1612, 689,
	688, 651, 492, 685, 651, 651, 879, 782, -1000, 15702,
	13039, 13039, 13039, 13039, 13039, -1000, 888, 886, -1000, 887,
	884, 874, 15370, -1000, 641, 11711, 152, 782, -1000, 13371,
	-1000, -1000, 1033, 13039, 737, -1000, 737, -1000, 149, -1000,
	-1000, 684, -128, -82, -1000, -1000, -1000, -1000, 231, -1000,
	482, 683, 2900, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	804, 592, -1000, 945, 219, 210, 561, 940, -1000, -1000,
	-1000, 345, -59, -1000, -1000, 456, -25, -25, -1000, -1000,
	174, 951, 174, 174, 174, 476, 476, -1000, -1000, -1000,
	-1000, 434, -1000, -1000, -1000, 425, -1000, 860, 15038, 806,
	990, -1000, -1000, -1000, 81, -1000, 3590, 15370, 277, -1000,
	471, 9031, -1000, -1000, -1000, -1000, -1000, 291, 291, 300,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 37, 800, -1000, -1000, -1000, -1000, 10, 23, 910,
	231, 231, 148, -1000, -1000, 15370, -1000, -1000, -1000, -1000,
	776, -1000, -1000, -1000, 3935, 7691, -1000, 338, 2095, 2147,
	-1000, 10027, 10027, -1000, 492, 231, -1000, 7691, -1000, -1000,
	34, 423, 34, 10027, 10027, -1000, 10027, 10027, -1000, -161,
	746, 263, -1000, 9031, 376, -1000, 5315, -1000, 10027, 10027,
	-1000, -1000, -1000, -1000, 858, 15702, 782, -1000, 11367, 15038,
	785, -1000, 270, 850, 814, 853, 827, -1000, -1000, -1000,
	-1000, 885, -1000, 875, -1000, -1000, -1000, -1000, -1000, 101,
	100, 99, 15038, -1000, 1013, 9031, 737, -1000, -1000, 186,
	-1000, -1000, -123, -106, -1000, -1000, -1000, 3245, -1000, 3245,
	15038, 49, -1000, 561, 561, -1000, -1000, -1000, 803, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 359, 10027, 1063, -1000,
	939, -1000, 937, 470, -1000, -1000, 591, 174, 174, -1000,
	262, -1000, -1000, -1000, 639, -1000, 635, 682, 628, 15370,
	-1000, -1000, -1000, 15370, -1000, -1000, 360, -1000, 231, -1000,
	507, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 550, -1000, 542, 15370, -1000, -1000, -1000,
	-1000, -1000, 15038, -169, 539, 15038, 15038, 15038, -1000, 4970,
	-1000, 1033, 13039, -1000, -1000, 492, -1000, 10027, 2095, 2095,
	-1000, -1000, 492, 797, 797, -1000, 797, 802, -1000, 797,
	-2, 797, -4, 492, 492, 2066, 2051, 2036, 2020, 782,
	-156, -1000, 231, 9031, -1000, 1874, 1740, -1000, 961, 667,
	678, -1000, -1000, 7359, 492, 625, 147, 590, -1000, 1013,
	15702, 9031, -1000, -1000, 9031, 798, -1000, 9031, -1000, -1000,
	-1000, 782, 782, 782, 590, 1002, 231, -1000, -1000, -1000,
	-1000, 2900, -1000, 588, -1000, 797, -1000, -1000, -1000, 15038,
	-1000, 2095, -98, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -25, 463, -25, 416, -1000, 404, 3590, -1000, 806,
	-1000, -1000, 511, 58, -1000, -1000, -1000, 190, -1000, -1000,
	963, -1000, 4970, -1000, -1000, 796, 815, -1000, 1031, 680,
	-1000, 2095, -1000, -1000, 107, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 10027, 10027, 10027, 10027, 10027, 492, 455,
	231, 10027, 10027, 936, -1000, 782, -1000, -1000, 792, 15038,
	15038, -1000, 15038, 1002, -1000, 231, 231, 15038, 231, 15038,
	15038, 15038, 11023, -1000, 178, 15038, -1000, 584, -1000, -1000,
	174, -1000, 174, 585, 580, -1000, -1000, 549, -1000, -1000,
	503, 493, -1000, -1000, 782, 679, -1000, 235, 15038, 15370,
	1017, 1008, -1000, -1000, 1612, 1612, 1612, 1612, 28, -1000,
	-1000, 1612, 1612, 1062, -1000, 782, -1000, 806, 141, -1000,
	-1000, -1000, 579, 559, 559, 559, 152, 178, -1000, 485,
	217, 452, -1000, 53, 15038, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 35, 4970, 3245, 556, -1000, -1000,
	9031, 9031, -1000, -1000, -1000, -1000, 492, 50, -175, -1000,
	-1000, 15702, 678, 492, 15038, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 391, -1000, -1000, 15370, -1000, -1000, 554, -1000,
	15038, -1000, -1000, 800, 231, 675, -1000, 906, -167, -179,
	668, -1000, -1000, -1000, 789, -1000, 35, 925, -169, -1000,
	901, -1000, 15038, -1000, 31, -1000, -170, 548, 29, -176,
	849, 782, -183, 848, -1000, 1053, 9363, -1000, -1000, 1055,
	166, 166, 1612, 492, -1000, -1000, -1000, 57, 451, -1000,
	-1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1295, 20, 447, 1294, 1293, 1292, 1291, 1289, 1288,
	1287, 1286, 1285, 1284, 1281, 1280, 1279, 1278, 1275, 1274,
	1273, 1272, 1266, 1265, 1263, 1262, 1260, 1259, 1256, 89,
	1255, 1254, 1253, 60, 1250, 82, 1249, 1248, 44, 219,
	42, 36, 333, 1247, 28, 77, 98, 1245, 35, 1243,
	1242, 69, 1239, 1238, 1236, 52, 1235, 1231, 1480, 1222,
	79, 1221, 12, 114, 1220, 1218, 1215, 1214, 83, 3,
	1213, 1212, 23, 1211, 1210, 85, 1209, 54, 10, 11,
	34, 22, 1206, 346, 25, 1205, 55, 1203, 1202, 1201,
	1199, 24, 1198, 1197, 59, 15, 1196, 19, 56, 1195,
	16, 80, 32, 27, 7, 70, 67, 1193, 26, 74,
	58, 1189, 1186, 415, 1185, 1184, 47, 1181, 1178, 37,
	1176, 328, 478, 1174, 1173, 1172, 1170, 1168, 1167, 49,
	1166, 14, 247, 40, 0, 571, 179, 68, 1164, 1163,
	1161, 1400, 39, 53, 18, 48, 1156, 1155, 43, 1154,
	1149, 1147, 1146, 1145, 1144, 1143, 1140, 297, 1139, 1138,
	1132, 93, 13, 1122, 1121, 65, 29, 1117, 1116, 1111,
	57, 51, 1107, 1106, 64, 33, 1105, 1101, 1099, 1098,
	1097, 31, 50, 1095, 17, 1094, 9, 1093, 30, 1092,
	4, 1089, 8, 1086, 5, 1085, 6, 45, 1, 1084,
	2, 1083, 1082, 395, 87, 81, 1079, 99,
}
var yyR1 = [...]int{

	0, 201, 202, 202, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 6, 3, 4,
	4, 5, 5, 7, 7, 32, 32, 8, 9, 9,
	9, 9, 205, 205, 53, 53, 51, 51, 52, 52,
	101, 101, 10, 10, 10, 10, 106, 106, 110, 110,
	110, 111, 111, 111, 111, 146, 146, 95, 11, 11,
	11, 11, 11, 11, 11, 196, 196, 195, 194, 194,
	193, 193, 192, 20, 177, 179, 179, 178, 178, 178,
	178, 171, 150, 150, 150, 150, 150, 150, 150, 149,
	149, 149, 149, 153, 153, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 152, 152, 152, 152, 152, 154,
	154, 154, 154, 154, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 156,
	156, 156, 156, 156, 156, 156, 156, 170, 170, 157,
	157, 165, 165, 166, 166, 166, 163, 163, 164, 164,
	167, 167, 159, 160, 168, 161, 161, 161, 162, 162,
	162, 169, 169, 169, 169, 158, 172, 172, 187, 187,
	186, 186, 186, 176, 176, 183, 183, 183, 183, 183,
	174, 174, 175, 175, 185, 185, 184, 173, 173, 188,
	188, 188, 188, 199, 200, 198, 198, 198, 198, 198,
	180, 180, 180, 181, 181, 181, 182, 182, 182, 16,
	16, 16, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 93, 93, 93, 18, 19, 19, 19, 19,
	19, 19, 19, 19, 129, 129, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 191, 189, 189, 190,
	190, 12, 21, 21, 13, 13, 13, 13, 13, 14,
	14, 22, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 117, 117, 115, 115, 118, 118, 116, 116, 116,
	119, 119, 119, 120, 120, 147, 147, 147, 24, 24,
	26, 26, 27, 28, 130, 130, 25, 25, 25, 25,
	25, 25, 25, 15, 206, 29, 30, 30, 31, 31,
	31, 35, 35, 35, 33, 33, 33, 34, 34, 40,
	40, 39, 39, 41, 41, 41, 41, 138, 138, 138,
	137, 137, 43, 43, 44, 44, 45, 45, 46, 46,
	46, 46, 61, 61, 100, 100, 102, 102, 47, 47,
	47, 47, 48, 48, 49, 49, 50, 50, 128, 128,
	144, 144, 144, 143, 143, 54, 54, 54, 56, 55,
	55, 55, 55, 57, 57, 59, 59, 58, 58, 60,
	62, 62, 62, 62, 63, 63, 42, 42, 42, 42,
	42, 42, 42, 114, 114, 65, 65, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 76, 76, 76,
	76, 76, 76, 66, 66, 66, 66, 66, 66, 66,
	38, 38, 77, 77, 77, 83, 78, 78, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	73, 73, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 207, 207, 75, 74, 74, 74, 74, 74, 74,
	36, 36, 36, 36, 36, 145, 145, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	87, 87, 37, 37, 85, 85, 86, 88, 88, 84,
	84, 84, 68, 68, 68, 68, 68, 68, 68, 68,
	70, 70, 70, 89, 89, 90, 90, 91, 91, 92,
	92, 94, 96, 96, 96, 97, 97, 97, 97, 98,
	98, 98, 67, 67, 67, 67, 67, 67, 99, 99,
	99, 99, 103, 103, 79, 79, 81, 81, 80, 82,
	104, 104, 108, 105, 105, 109, 109, 109, 109, 107,
	107, 107, 140, 140, 140, 112, 112, 121, 121, 122,
	122, 113, 113, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 127, 127, 126, 126, 126, 124, 124,
	125, 125, 125, 125, 139, 139, 135, 135, 136, 136,
	141, 141, 142, 142, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 203, 204, 131, 132, 132, 132,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 4, 6, 7, 5, 10, 1,
	3, 1, 3, 7, 8, 1, 1, 9, 8, 7,
	6, 6, 1, 1, 1, 3, 1, 3, 1, 3,
	0, 4, 3, 4, 5, 4, 1, 3, 3, 2,
	2, 2, 2, 2, 1, 1, 1, 0, 2, 2,
	8, 7, 9, 5, 5, 0, 2, 1, 0, 2,
	1, 3, 3, 4, 4, 2, 4, 1, 3, 3,
	3, 3, 0, 2, 2, 2, 2, 2, 2, 3,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 1, 4, 4, 2, 2, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 6, 6, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 1, 0, 1,
	1, 2, 2, 3, 1, 0, 3, 3, 0, 2,
	2, 2, 1, 2, 1, 2, 5, 4, 1, 2,
	2, 3, 2, 0, 1, 2, 3, 3, 2, 2,
	1, 1, 0, 1, 1, 3, 2, 3, 1, 10,
	11, 11, 12, 3, 3, 1, 1, 2, 2, 2,
	0, 1, 3, 1, 2, 3, 1, 1, 1, 1,
	1, 1, 6, 10, 9, 7, 7, 7, 9, 7,
	7, 5, 0, 1, 2, 4, 7, 5, 5, 5,
	12, 7, 5, 9, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 7, 1, 3, 8,
	8, 3, 3, 5, 4, 6, 4, 4, 4, 3,
	2, 3, 4, 4, 3, 4, 4, 4, 4, 4,
	4, 3, 3, 2, 3, 3, 2, 3, 4, 3,
	7, 5, 4, 2, 4, 4, 3, 3, 5, 2,
	3, 1, 1, 0, 1, 1, 1, 0, 2, 2,
	0, 2, 2, 0, 2, 0, 1, 1, 2, 1,
	1, 2, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 3, 3, 2, 0, 2, 0, 2, 1, 2,
	2, 0, 1, 1, 0, 1, 1, 0, 1, 0,
	1, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 1, 0, 2, 1, 3, 1, 1, 1, 3,
	1, 3, 3, 7, 1, 3, 1, 3, 4, 4,
	4, 3, 2, 4, 0, 1, 0, 2, 0, 1,
	0, 1, 2, 1, 1, 1, 2, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 1, 1, 3, 3,
	0, 5, 5, 5, 0, 2, 1, 3, 3, 2,
	3, 1, 2, 0, 3, 1, 1, 3, 3, 4,
	4, 5, 3, 4, 5, 6, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	2, 2, 2, 2, 2, 3, 1, 1, 1, 1,
	5, 6, 4, 4, 6, 6, 6, 8, 8, 8,
	8, 9, 7, 5, 4, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 8,
	8, 0, 2, 3, 4, 4, 4, 4, 4, 4,
	0, 3, 4, 7, 3, 1, 1, 2, 3, 3,
	1, 2, 2, 1, 2, 1, 2, 2, 1, 2,
	0, 1, 0, 2, 1, 2, 4, 0, 2, 1,
	3, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 0, 3, 0, 2, 0, 3, 1,
	3, 2, 0, 1, 1, 0, 2, 4, 4, 0,
	2, 4, 2, 1, 3, 5, 4, 6, 1, 3,
	3, 5, 0, 5, 1, 3, 1, 2, 3, 1,
	1, 3, 3, 1, 3, 3, 3, 3, 3, 1,
	2, 1, 1, 1, 1, 1, 1, 0, 2, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	0, 1, 1, 1, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -201, -1, -2, -6, -7, -8, -9, -10, -11,
	-16, -12, -13, -14, -22, -23, -24, -26, -27, -28,
	-25, -15, -3, -4, 6, 7, -32, 9, 10, 29,
	-20, 116, -17, -18, -19, 119, 118, 152, 120, 145,
	51, 166, 167, 169, 170, -130, 147, 150, 151, 30,
	31, 122, -203, 8, 252, 117, 146, 25, 55, -202,
	350, -91, 15, -31, 5, -29, -206, -29, -29, -29,
	-29, -29, -177, -179, 55, 91, -125, 126, 73, 244,
	123, 124, 33, 133, 132, 124, 124, 125, 126, 244,
	123, 124, -58, -141, 58, -134, 262, 136, 294, 295,
	166, 177, 171, 198, 190, 263, 296, 137, 188, 191,
	231, 135, 297, 218, 226, 67, 169, 240, 298, 148,
	186, 182, 299, 271, 180, 27, 300, 228, 203, 301,
	267, 181, 227, 122, 302, 139, 133, 303, 204, 208,
	304, 232, 305, 306, 307, 175, 176, 308, 234, 202,
	134, 32, 264, 36, 156, 235, 206, 309, 201, 197,
	310, 311, 312, 313, 200, 174, 196, 40, 210, 209,
	211, 230, 193, 314, 315, 316, 140, 317, 183, 18,
	318, 319, 320, 321, 322, 238, 151, 323, 154, 324,
	325, 326, 327, 328, 329, 229, 205, 207, 130, 158,
	266, 330, 236, 179, 331, 141, 155, 150, 239, 142,
	332, 333, 334, 335, 336, 337, 338, 170, 339, 340,
	341, 342, 165, 233, 242, 39, 215, 343, 173, 132,
	344, 167, 162, 221, 194, 157, 345, 346, 184, 185,
	199, 172, 195, 168, 159, 152, 347, 241, 216, 268,
	192, 189, 163, 348, 126, 160, 161, 349, 222, 223,
	164, 265, 237, 187, 217, 124, 109, 191, 231, 116,
	219, 220, 228, 125, 32, 229, 158, -147, 124, -115,
	218, 222, 223, 164, 58, 233, 232, 224, -141, 168,
	-58, -131, -131, -131, -131, 221, 221, -131, -2, -113,
	126, 223, 128, -97, 17, 16, -5, -3, -203, 6,
	20, 21, -35, 41, 42, -30, -41, 100, -42, -141,
	-64, 75, -69, 28, 58, -134, 23, -68, -65, -84,
	-82, -83, 109, 110, 111, 98, 99, 106, 76, 112,
	-73, -71, -72, -74, 60, 59, 68, 61, 62, 63,
	64, 69, 70, 71, -135, -80, -203, 45, 46, 253,
	254, 255, 256, 261, 257, 78, 35, 243, 251, 250,
	249, 247, 248, 245, 246, 259, 260, 129, 244, 104,
	252, -113, -113, 11, -51, -52, -58, -60, -141, -105,
	-146, 168, -109, 233, 232, -136, -107, -135, -133, 231,
	191, 230, 58, -134, 121, 144, 269, 74, 22, 24,
	213, 77, 109, 16, 78, 108, 253, 116, 49, 270,
	245, 246, 243, 255, 256, 244, 219, 28, 10, 272,
	25, 146, 21, 102, 118, 81, 82, 149, 23, 147,
	71, 143, 275, 19, 52, 11, 13, 276, 277, 14,
	129, 128, 93, 125, 47, 8, 112, 26, 90, 43,
	278, 34, 279, 280, 281, 282, 45, 91, 17, 247,
	248, 30, 283, 261, 153, 104, 50, 37, 75, 284,
	285, 69, 286, 72, 53, 73, 15, 48, 287, 288,
	289, 290, 92, 119, 252, 46, 291, 123, 6, 258,
	29, 145, 44, 292, 124, 80, 259, 260, 127, 70,
	5, 33, 31, 9, 51, 54, 249, 250, 251, 35,
	79, 12, 293, -178, 91, -171, 58, -58, 125, -58,
	252, -122, 129, -122, -122, -21, -58, -121, 129, 58,
	-121, -121, -121, -58, 113, -58, 58, 29, -132, -203,
	-136, 244, 58, 158, 124, 159, 126, -132, -132, -132,
	-132, -132, 162, 163, -132, -118, -117, 226, 227, 221,
	225, 12, 163, 221, 161, -132, -131, -131, -204, 57,
	124, -58, 116, 118, 121, 53, -98, 19, 30, -42,
	-141, -92, -94, -42, -91, -2, -29, 37, -33, 20,
	21, 66, 11, -138, 74, 73, 90, -137, 22, -135,
	60, 113, -42, -66, 93, 75, 91, 92, 77, 95,
	94, 105, 98, 99, 100, 101, 102, 103, 104, 96,
	97, 108, 83, 84, 85, 86, 87, 88, 89, -114,
	-203, -83, -203, 114, 115, -69, -69, -69, -69, -69,
	-69, -69, -69, -203, -2, -78, -42, -203, -203, -203,
	-203, -203, -203, -203, -203, -203, -87, -42, -203, -207,
	-75, -203, -207, -75, -207, -75, -207, -203, -207, -75,
	-207, -75, -207, -207, -75, -203, -203, -203, -203, -203,
	-203, -59, 26, -58, -44, -45, -46, -47, -61, -83,
	-203, -58, -58, -51, -205, 56, 11, 54, -205, 56,
	113, 56, -105, 168, -106, -110, 234, 236, 83, -140,
	-135, 60, 28, 29, 57, 56, -58, -149, -153, -155,
	-154, -156, -151, -152, 188, 189, 109, 192, 194, 195,
	196, 197, 198, 199, 200, 201, 202, 203, 29, 148,
	184, 185, 186, 187, 204, 205, 206, 207, 208, 209,
	210, 211, 171, 190, 263, 172, 173, 174, 175, 176,
	177, 179, 180, 181, 182, 183, 58, 22, 126, 58,
	75, 58, -58, 56, 127, -51, 23, 53, -53, -58,
	58, 58, -142, -141, -133, -132, -132, -132, -132, -132,
	-58, -132, -132, -132, -132, 11, -116, 11, 93, -42,
	-120, 91, 53, -58, -132, 160, 160, 124, 124, 165,
	-58, 9, 93, 56, 18, 113, 56, -96, 24, 25,
	-97, -204, -35, -70, -135, 61, 64, -34, 44, -58,
	-42, -42, -76, 69, 75, 70, 71, -137, 100, -142,
	-136, -133, -69, -77, -80, -83, 65, 93, 91, 92,
	77, -69, -69, -69, -69, -69, -69, -69, -69, -69,
	-69, -69, -69, -69, -69, -69, -145, 58, 60, 58,
	-68, -68, -135, -33, -204, 56, -204, -2, -39, -41,
	-39, -42, -42, -84, 60, -39, -84, 60, -39, -39,
	-33, -85, -86, 79, -84, -135, -141, -204, -69, -135,
	-135, -39, -40, -39, -39, -39, -101, 154, -58, 29,
	56, -54, -56, -55, -57, 43, 47, 49, 44, 45,
	46, 50, -128, 22, -44, -203, -144, 154, -143, 22,
	-141, 60, -101, 54, -44, -58, -44, -60, -141, 100,
	-109, -106, 56, 235, 237, 238, 53, 72, -42, -162,
	108, -180, -181, -182, -136, 60, 61, -171, -172, -173,
	-183, 138, -188, 130, 132, 33, -174, 139, 125, 34,
	57, -150, -163, 216, -157, 55, -157, -157, -157, -157,
	-161, 191, -161, -161, -161, 55, 55, -157, -157, -157,
	-165, 55, -165, -165, -166, 55, -166, -139, 54, -95,
	-58, -132, 23, -132, -58, -58, -58, 56, -58, -119,
	91, 12, -141, -141, 60, -58, -123, 121, 118, 119,
	-191, 117, 213, 191, 67, 28, 15, 253, 154, 268,
	58, 155, -58, -58, -58, -58, -58, 121, 118, 39,
	-42, -42, -142, -94, -98, -112, 19, 11, 35, 35,
	-39, 69, 70, 71, 113, -203, -77, -69, -69, -69,
	-38, 149, 74, -204, -40, -42, -204, 56, -204, -204,
	56, 54, 22, 11, 11, -204, 11, 11, -204, -204,
	-39, -88, -86, 81, -42, -204, 113, -204, 56, 56,
	-204, -204, -204, -204, -67, 29, 35, -2, -203, -203,
	-104, -108, -84, -45, -46, -46, -45, -46, 43, 43,
	43, 48, 43, 48, 43, -55, -141, -204, -62, 51,
	128, 52, -203, -143, -63, 12, -44, -63, -63, 113,
	-110, -111, 239, 236, 242, 58, 60, 56, -182, 83,
	55, 58, 34, -174, -174, -175, 58, -175, 34, -167,
	-159, -160, -168, -169, -158, 69, 75, 28, 53, 213,
	130, 34, 33, 67, -164, 217, 61, -161, -161, -162,
	29, -162, -162, -162, -170, 60, -170, 61, 61, 53,
	-135, -2, 22, 127, -132, -58, -116, 60, -42, -131,
	-129, -197, 131, 135, 138, 139, 133, 125, 34, 130,
	132, 154, 33, -129, -197, 131, -126, -124, 127, 22,
	125, 34, 154, -196, 54, 160, 213, 160, 40, 113,
	-58, -43, 11, 100, -136, -40, -38, 74, -69, -69,
	-204, -41, -148, 109, 188, 148, 186, 182, 202, 193,
	215, 184, 216, -145, -148, -69, -69, -69, -69, 262,
	-91, 82, -42, 80, -136, -69, -69, -103, 53, -104,
	-79, -81, -80, -203, -2, -99, -135, -102, -135, -63,
	56, 83, -49, -48, 53, 54, -50, 53, -48, 43,
	43, 125, 125, 125, -102, -91, -42, -63, 236, 240,
	241, -181, -182, -185, -184, -135, -188, -175, -175, 55,
	69, -69, 9, 34, 34, 60, 57, -162, -162, 58,
	109, 57, 56, 57, 56, 57, 56, -58, -95, -95,
	-58, -119, 55, -171, -131, 58, -131, 58, -58, -131,
	-135, -194, 265, -195, 58, -135, -135, -135, -63, -44,
	-204, -69, -204, -157, -157, -157, -166, -157, 176, -157,
	176, -204, -204, 19, 19, 19, 19, -203, -37, 258,
	-42, 56, 56, 27, -103, 56, -204, -204, -204, 56,
	113, -204, 56, -91, -108, -42, -42, 55, -42, -203,
	-203, -203, -204, -97, 57, 56, -157, -100, -135, -72,
	-161, 60, -161, 61, 61, -132, -2, -171, -93, 143,
	144, -127, 127, 22, 26, -193, -192, -136, 55, 54,
	-89, 13, -161, 58, -69, -69, -69, -69, -69, -204,
	60, -69, -69, 34, -81, 35, -2, -203, -135, -135,
	-135, -97, -100, -100, -100, -100, -144, -187, -186, 54,
	134, 67, -184, 57, 56, -162, -162, 57, 57, -95,
	57, -131, 58, 58, -203, 56, 83, -100, -58, -90,
	14, 16, -204, -204, -204, -204, -36, 93, 265, -204,
	-204, 9, -79, -2, 113, 57, -204, -204, -204, -62,
	-186, 58, -176, 83, 60, 141, -135, -131, -189, -190,
	154, -192, -182, 57, -42, -78, -204, 263, 50, 266,
	-104, -204, -135, 61, -58, -204, 56, -135, -196, 40,
	264, 267, 55, -190, 35, -194, 40, -100, 156, 265,
	57, 157, 266, -199, -200, 53, -203, 267, -200, 53,
	10, 9, -69, 153, -198, 142, 137, 140, 29, -198,
	-204, -204, 136, 28, 69,
}
var yyDef = [...]int{

	23, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 577, 0, 334, 334, 334, 334, 334, 334,
	0, 650, 219, 220, 221, 0, 0, 0, 0, -2,
	319, 320, 0, 322, 323, 954, 954, 954, 954, 0,
	0, 954, 0, 35, 36, 631, 324, 325, 952, 1,
	3, 585, 0, 0, 338, 341, 336, 0, 631, 631,
	0, 0, 68, 69, 0, 0, 0, 0, 0, 629,
	629, 629, 651, 652, 653, 0, 627, 0, 627, 627,
	627, 0, 270, 407, 660, 661, 783, 784, 785, 786,
	787, 788, 789, 790, 791, 792, 793, 794, 795, 796,
	797, 798, 799, 800, 801, 802, 803, 804, 805, 806,
	807, 808, 809, 810, 811, 812, 813, 814, 815, 816,
	817, 818, 819, 820, 821, 822, 823, 824, 825, 826,
	827, 828, 829, 830, 831, 832, 833, 834, 835, 836,
	837, 838, 839, 840, 841, 842, 843, 844, 845, 846,
	847, 848, 849, 850, 851, 852, 853, 854, 855, 856,
	857, 858, 859, 860, 861, 862, 863, 864, 865, 866,
	867, 868, 869, 870, 871, 872, 873, 874, 875, 876,
	877, 878, 879, 880, 881, 882, 883, 884, 885, 886,
	887, 888, 889, 890, 891, 892, 893, 894, 895, 896,
	897, 898, 899, 900, 901, 902, 903, 904, 905, 906,
	907, 908, 909, 910, 911, 912, 913, 914, 915, 916,
	917, 918, 919, 920, 921, 922, 923, 924, 925, 926,
	927, 928, 929, 930, 931, 932, 933, 934, 935, 936,
	937, 938, 939, 940, 941, 942, 943, 944, 945, 946,
	947, 948, 949, 950, 951, 0, 0, 0, 955, 0,
	955, 955, 283, 955, 955, 286, 955, 0, 955, 0,
	293, 0, 0, 299, 955, 316, 317, 304, 318, 321,
	326, 327, 328, 329, 330, 954, 954, 333, 29, 0,
	0, 0, 632, 589, 0, 0, 577, 31, 0, 334,
	339, 340, 344, 342, 343, 335, 0, 353, 357, 0,
	416, 0, 421, 423, -2, -2, 0, 458, 459, 460,
	461, 462, 0, 0, 0, 0, 0, 0, 0, 0,
	486, 487, 488, 489, 562, 563, 564, 565, 566, 567,
	568, 569, 425, 426, 559, 609, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 550, 0, 521, 521, 521,
	521, 521, 521, 521, 521, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 46, 48, 407, 52,
	0, 930, 613, -2, -2, 0, 0, 658, 659, -2,
	796, -2, 656, 657, 664, 665, 666, 667, 668, 669,
	670, 671, 672, 673, 674, 675, 676, 677, 678, 679,
	680, 681, 682, 683, 684, 685, 686, 687, 688, 689,
	690, 691, 692, 693, 694, 695, 696, 697, 698, 699,
	700, 701, 702, 703, 704, 705, 706, 707, 708, 709,
	710, 711, 712, 713, 714, 715, 716, 717, 718, 719,
	720, 721, 722, 723, 724, 725, 726, 727, 728, 729,
	730, 731, 732, 733, 734, 735, 736, 737, 738, 739,
	740, 741, 742, 743, 744, 745, 746, 747, 748, 749,
	750, 751, 752, 753, 754, 755, 756, 757, 758, 759,
	760, 761, 762, 763, 764, 765, 766, 767, 768, 769,
	770, 771, 772, 773, 774, 775, 776, 777, 778, 779,
	780, 781, 782, 0, 0, 87, 0, 85, 0, 0,
	0, 0, 0, 0, 0, 261, 0, 0, 0, 0,
	0, 0, 0, 269, 0, 271, 955, 955, 274, 956,
	957, 955, 955, 955, 0, 955, 955, 281, 282, 284,
	285, 287, 955, 955, 289, 0, 307, 305, 306, 301,
	302, 0, 313, 296, 297, 300, 331, 332, 30, 953,
	0, 955, 0, 0, 0, 0, 24, 0, 0, 586,
	0, 578, 579, 582, 585, 29, 341, 0, 347, 345,
	346, 337, 0, 354, 0, 0, 0, 358, 0, 360,
	361, 0, 419, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 443, 444, 445, 446, 447, 448, 449, 422,
	0, 436, 0, 0, 0, 478, 479, 480, 481, 482,
	483, 484, 0, 344, 29, 0, 456, 0, 0, 0,
	0, 0, 0, 0, 0, 344, 0, 551, 0, 505,
	513, 0, 506, 514, 507, 515, 508, 0, 509, 516,
	510, 517, 511, 512, 518, 0, 0, 0, 349, 0,
	0, 50, 0, 406, 0, 364, 366, 367, 368, -2,
	0, 390, -2, 0, 0, 0, 42, 43, 0, 0,
	0, 0, 53, 930, 55, 56, 0, 0, 0, 168,
	622, 623, 624, 620, 210, 0, 0, 92, 156, 100,
	101, 102, 149, 104, 149, 149, 149, 149, 165, 165,
	165, 165, 132, 133, 134, 135, 136, 0, 0, 119,
	149, 149, 149, 123, 139, 140, 141, 142, 143, 144,
	145, 146, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 151, 151, 151, 153, 153, 654, 67, 0, 955,
	0, 955, 83, 0, 0, 264, 628, 0, 266, 44,
	267, 268, 408, 662, 663, 272, 273, 275, 276, 277,
	278, 279, 280, 288, 292, 0, 310, 0, 0, 294,
	295, 0, 0, 0, 235, 0, 0, 0, 0, 0,
	0, 590, 0, 0, 0, 0, 0, 581, 583, 584,
	589, 32, 344, 0, 570, 0, 0, 0, 348, 27,
	417, 418, 420, 437, 0, 439, 441, 359, 355, 0,
	560, -2, 427, 428, 452, 453, 454, 0, 0, 0,
	0, 450, 432, 0, 463, 464, 465, 466, 467, 468,
	469, 470, 471, 472, 473, 474, 477, 535, 536, 0,
	475, 476, 485, 349, 455, 0, 608, 29, 0, 351,
	0, 0, 0, 460, 562, 0, 460, 562, 0, 0,
	0, 557, 554, 0, 0, 559, 0, 522, 0, 0,
	0, 0, 0, 350, 0, 0, 0, 0, 405, 0,
	0, 0, 0, 0, 0, 395, 0, 0, 398, 0,
	0, 0, 0, 389, 0, 0, 410, 875, 391, 0,
	393, 394, 414, 0, 414, 47, 414, 49, 0, 409,
	614, 54, 0, 0, 59, 60, 615, 616, 617, 618,
	0, 84, 211, 213, 216, 217, 218, 88, 89, 90,
	0, 0, 198, 0, 0, 192, 192, 0, 190, 191,
	86, 91, 158, 157, 103, 0, 165, 165, 126, 127,
	168, 0, 168, 168, 168, 0, 0, 120, 121, 122,
	114, 0, 115, 116, 117, 0, 118, 0, 0, 0,
	0, 73, 630, 74, 0, 262, 955, 0, 307, 291,
	0, 0, 308, 309, 314, 298, 954, 244, 244, 645,
	231, 633, 634, 635, 636, 637, 638, 639, 640, 641,
	642, 0, 75, 237, 239, 238, 242, 0, 0, 0,
	587, 588, 0, 580, 25, 0, 625, 626, 571, 572,
	362, 438, 440, 442, 0, 349, 429, 450, 433, 0,
	430, 0, 0, 424, 0, 457, -2, 0, 492, 493,
	0, 0, 0, 0, 0, 528, 0, 0, 529, 0,
	577, 0, 555, 0, 0, 504, 0, 523, 0, 0,
	524, 525, 526, 527, 602, 0, 0, -2, 0, 0,
	414, 610, 0, 365, 384, 386, 0, 381, 396, 397,
	399, 0, 401, 0, 403, 404, 369, 371, 372, 0,
	0, 0, 0, 392, 577, 0, 414, 40, 41, 0,
	57, 58, 0, 0, 64, 169, 170, 0, 214, 0,
	0, 0, 185, 192, 192, 188, 193, 189, 0, 93,
	94, 95, 96, 97, 98, 160, 0, 0, 0, 164,
	0, 172, 174, 0, 99, 159, 0, 168, 168, 128,
	0, 129, 130, 131, 0, 147, 0, 0, 0, 0,
	655, -2, 67, 0, 265, 45, 310, 311, 312, 222,
	0, 954, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 0, 954, 0, 0, 954, 646, 647,
	648, 649, 0, 78, 0, 0, 0, 0, 591, 0,
	26, 414, 0, 356, 561, 0, 431, 0, 451, 434,
	490, 352, 0, 149, 149, 540, 149, 153, 543, 149,
	545, 149, 548, 0, 0, 0, 0, 0, 0, 0,
	552, 503, 558, 0, 560, 0, 0, 33, 0, 602,
	592, 604, 606, 0, 29, 0, 598, 0, 376, 577,
	0, 0, 378, 385, 0, 0, 379, 0, 380, 400,
	402, 0, 0, 0, 0, 585, 415, 39, 61, 62,
	63, 212, 215, 0, 194, 149, 197, 186, 187, 0,
	161, 162, 0, 171, 173, 175, 150, 124, 125, 166,
	167, 165, 0, 165, 0, 154, 0, 955, 71, 0,
	263, 290, 0, 232, 225, 226, 227, 0, 229, 230,
	0, 236, 0, 76, 77, 0, 0, 241, 573, 363,
	491, 435, 494, 537, 165, 541, 542, 544, 546, 547,
	549, 496, 495, 0, 0, 0, 0, 0, 0, 0,
	556, 0, 0, 0, 34, 0, 607, -2, 0, 0,
	0, 51, 0, 585, 611, 612, 382, 0, 387, 0,
	0, 0, 390, 38, 177, 0, 196, 0, 374, 163,
	168, 148, 168, 0, 0, 70, -2, 0, 954, 233,
	0, 0, 643, 644, 0, 79, 80, 0, 0, 0,
	575, 0, 538, 539, 0, 0, 0, 0, 530, 502,
	553, 0, 0, 0, 605, 0, -2, 0, 600, 599,
	377, 37, 0, 0, 0, 0, 410, 176, 178, 0,
	183, 0, 195, 0, 0, 137, 138, 152, 155, 72,
	954, 224, 234, 228, 0, 0, 0, 0, 243, 28,
	0, 0, 497, 499, 498, 500, 0, 0, 0, 519,
	520, 0, 595, 29, 0, 383, 411, 412, 413, 373,
	179, 180, 0, 184, 182, 0, 375, 223, 0, 257,
	0, 81, 82, 75, 576, 574, 501, 0, 0, 0,
	603, -2, 601, 181, 0, 256, 0, 0, 78, 531,
	0, 534, 0, 258, 0, 240, 532, 0, 0, 0,
	199, 0, 0, 200, 201, 0, 0, 533, 202, 0,
	0, 0, 0, 0, 203, 205, 206, 0, 0, 204,
	259, 260, 207, 208, 209,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 76, 3, 3, 3, 103, 95, 3,
	55, 57, 100, 98, 56, 99, 113, 101, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 350,
	84, 83, 85, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 94, 3, 106,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 77, 78, 79, 80, 81, 82, 86, 87, 88,
	89, 90, 91, 92, 93, 96, 97, 102, 104, 107,
	108, 109, 110, 111, 112, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:334
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:339
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:340
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:344
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:366
		{
			setParseTree(yylex, nil)
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:372
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:380
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:384
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:390
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 28:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:397
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:403
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:407
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:413
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:417
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:424
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:436
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:448
		{
			yyVAL.str = InsertStr
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:452
		{
			yyVAL.str = ReplaceStr
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:458
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:464
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:468
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:472
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:476
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:481
		{
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:482
		{
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:486
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName.ToViewName()}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:490
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName.ToViewName())
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:496
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:500
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:506
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:510
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 50:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:515
		{
			yyVAL.partitions = nil
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:519
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:525
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:529
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:533
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:537
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:543
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:547
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:553
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:557
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:561
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:567
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:571
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:575
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:579
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:585
		{
			yyVAL.str = SessionStr
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:589
		{
			yyVAL.str = GlobalStr
		}
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:594
		{
			yyVAL.int = yyPosition(yylex)
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:600
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:605
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 70:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:611
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 71:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:616
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[3].tableName.ToViewName(), ViewExpr: yyDollar[6].selStmt, ViewSelectPositionStart: yyDollar[5].int, ViewSelectPositionEnd: yyDollar[7].int - 1}
		}
	case 72:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:620
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[5].tableName.ToViewName(), ViewExpr: yyDollar[8].selStmt, ViewSelectPositionStart: yyDollar[7].int, ViewSelectPositionEnd: yyDollar[9].int - 1, OrReplace: true}
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:624
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 74:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:628
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:633
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:637
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:643
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:648
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:653
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:659
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:664
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:670
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:676
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName, IfNotExists: ne}
			setDDL(yylex, yyVAL.ddl)
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:687
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:694
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:698
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:704
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:709
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:713
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:717
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:723
		{
			if err := yyDollar[2].columnType.merge(yyDollar[3].columnType); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:732
		{
			yyVAL.columnType = ColumnType{}
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:736
		{
			opt := ColumnType{NotNull: yyDollar[2].boolVal, sawnull: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:745
		{
			opt := ColumnType{Default: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:754
		{
			opt := ColumnType{OnUpdate: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:763
		{
			opt := ColumnType{Autoincrement: yyDollar[2].boolVal, sawai: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:772
		{
			opt := ColumnType{KeyOpt: yyDollar[2].colKeyOpt}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:781
		{
			opt := ColumnType{Comment: yyDollar[2].sqlVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:792
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:803
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:808
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:814
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:818
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:822
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:826
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:830
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:834
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:838
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:842
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:846
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:852
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:858
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:864
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:870
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:876
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:884
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:888
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:892
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:896
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:900
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:906
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:910
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:914
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:918
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:922
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:926
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:930
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:934
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:938
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:942
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:946
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:950
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:954
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:958
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 138:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:963
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:969
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:973
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:977
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:981
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:985
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:989
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:993
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:997
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1003
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1008
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1013
		{
			yyVAL.sqlVal = nil
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1017
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1022
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 152:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1026
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1034
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1038
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 155:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1044
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1052
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1056
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1061
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1065
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1072
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1076
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1082
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1088
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1094
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1099
		{
			yyVAL.str = ""
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1103
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1107
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1112
		{
			yyVAL.str = ""
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1116
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1120
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1126
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1130
		{
			yyVAL.colKeyOpt = colKey
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1134
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1138
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1144
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1150
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 177:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1154
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1160
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1164
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1170
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1174
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1179
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1185
		{
			yyVAL.str = ""
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1189
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1195
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1199
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1203
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1207
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1211
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1217
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1221
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1226
		{
			yyVAL.str = ""
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1230
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1236
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1240
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1246
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1252
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1256
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 199:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1263
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 200:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1267
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 201:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1271
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 202:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1275
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1281
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1287
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1293
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1297
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1301
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1305
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1309
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 210:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1314
		{
			yyVAL.str = ""
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1318
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1322
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1330
		{
			yyVAL.str = yyDollar[1].str
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1334
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1338
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1344
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1348
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1352
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 222:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1363
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 223:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1367
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			ddl.Column = yyDollar[8].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 224:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1374
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 225:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1381
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 226:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1385
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: DropStr, Column: NewColIdent(string(yyDollar[7].bytes)), Table: yyDollar[4].tableName}
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1389
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 228:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1393
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: RenameStr, Table: yyDollar[4].tableName, Column: NewColIdent(string(yyDollar[7].bytes)), ToColumn: NewColIdent(string(yyDollar[9].bytes))}
		}
	case 229:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1397
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 230:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1402
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 231:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1407
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 232:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1412
		{
			yyVAL.columnOrder = nil
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1416
		{
			yyVAL.columnOrder = &ColumnOrder{First: true}
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1420
		{
			yyVAL.columnOrder = &ColumnOrder{AfterColumn: NewColIdent(string(yyDollar[2].bytes))}
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1426
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 236:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1432
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 237:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1444
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 238:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1454
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 239:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1458
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 240:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1462
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 241:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1475
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 242:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1485
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 243:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1489
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 244:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1502
		{
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1504
		{
		}
	case 256:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1520
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1526
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1530
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 259:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1536
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 260:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1540
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1546
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1552
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 263:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1556
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1564
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 265:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1572
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1577
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromViews: yyDollar[4].tableNames, IfExists: exists}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1585
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1589
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1595
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1599
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1604
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1610
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1615
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1619
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1623
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1628
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1632
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1636
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1640
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1644
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1648
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1652
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1656
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1660
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1664
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1668
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1672
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1676
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1680
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1684
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 291:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1689
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1699
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1703
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1707
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1713
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1718
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1722
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 298:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1726
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1730
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1744
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1750
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1754
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1760
		{
			yyVAL.str = ""
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1764
		{
			yyVAL.str = "full "
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1770
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1774
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1780
		{
			yyVAL.str = ""
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1784
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1788
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1794
		{
			yyVAL.showFilter = nil
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1798
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1802
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1808
		{
			yyVAL.showFilter = nil
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1812
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1818
		{
			yyVAL.str = ""
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1822
		{
			yyVAL.str = SessionStr
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1826
		{
			yyVAL.str = GlobalStr
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1832
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1836
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1842
		{
			yyVAL.statement = &Begin{}
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1846
		{
			yyVAL.statement = &Begin{}
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1852
		{
			yyVAL.statement = &Commit{}
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1858
		{
			yyVAL.statement = &Rollback{}
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1863
		{
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1864
		{
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1869
		{
			yyVAL.statement = &Show{Type: "columns", OnTable: yyDollar[2].tableName}
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1873
		{
			yyVAL.statement = &OtherRead{}
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1877
		{
			yyVAL.statement = &OtherRead{}
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1881
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1885
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1889
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1893
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1899
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1903
		{
			setAllowComments(yylex, true)
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1907
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1913
		{
			yyVAL.bytes2 = nil
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1917
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1923
		{
			yyVAL.str = UnionStr
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1927
		{
			yyVAL.str = UnionAllStr
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1931
		{
			yyVAL.str = UnionDistinctStr
		}
	case 341:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1936
		{
			yyVAL.str = ""
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1940
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1944
		{
			yyVAL.str = SQLCacheStr
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1949
		{
			yyVAL.str = ""
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1953
		{
			yyVAL.str = ""
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1957
		{
			yyVAL.str = DistinctStr
		}
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1962
		{
			yyVAL.str = ""
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1966
		{
			yyVAL.str = StraightJoinHint
		}
	case 349:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1971
		{
			yyVAL.selectExprs = nil
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1975
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1981
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1985
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1991
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1995
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1999
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 356:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2003
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 357:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2008
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2012
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2016
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2023
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2028
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2032
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2038
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2042
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2052
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2056
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2060
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2066
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2072
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 373:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2076
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2082
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2086
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2092
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2096
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 378:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2109
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2113
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 380:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2117
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2121
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2127
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 383:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2129
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 384:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2133
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2135
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 386:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2139
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2141
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 388:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2144
		{
			yyVAL.empty = struct{}{}
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2146
		{
			yyVAL.empty = struct{}{}
		}
	case 390:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2149
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2153
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2157
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2164
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2170
		{
			yyVAL.str = JoinStr
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2174
		{
			yyVAL.str = JoinStr
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2178
		{
			yyVAL.str = JoinStr
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2184
		{
			yyVAL.str = StraightJoinStr
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2190
		{
			yyVAL.str = LeftJoinStr
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2194
		{
			yyVAL.str = LeftJoinStr
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2198
		{
			yyVAL.str = RightJoinStr
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2202
		{
			yyVAL.str = RightJoinStr
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2208
		{
			yyVAL.str = NaturalJoinStr
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2212
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2222
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2226
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2232
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2236
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2242
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 410:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2247
		{
			yyVAL.indexHints = nil
		}
	case 411:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2251
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 412:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2255
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 413:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2259
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 414:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2264
		{
			yyVAL.expr = nil
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2268
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2274
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2278
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2282
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2286
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2290
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2294
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2298
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 423:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2304
		{
			yyVAL.str = ""
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2308
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2314
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2318
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2324
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2328
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 429:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2332
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 430:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2336
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 431:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2340
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2344
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 433:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2348
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 434:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2352
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 435:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2356
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2360
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2366
		{
			yyVAL.str = IsNullStr
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2370
		{
			yyVAL.str = IsNotNullStr
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2374
		{
			yyVAL.str = IsTrueStr
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2378
		{
			yyVAL.str = IsNotTrueStr
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2382
		{
			yyVAL.str = IsFalseStr
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2386
		{
			yyVAL.str = IsNotFalseStr
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2392
		{
			yyVAL.str = EqualStr
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2396
		{
			yyVAL.str = LessThanStr
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2400
		{
			yyVAL.str = GreaterThanStr
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2404
		{
			yyVAL.str = LessEqualStr
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2408
		{
			yyVAL.str = GreaterEqualStr
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2412
		{
			yyVAL.str = NotEqualStr
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2416
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 450:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2421
		{
			yyVAL.expr = nil
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2425
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2431
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2435
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2439
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2445
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2451
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2455
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2461
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2465
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2469
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2473
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2477
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2481
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2485
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2489
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2493
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2497
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2501
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2505
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2509
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2513
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2517
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2521
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2525
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2529
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2533
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2537
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2541
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2545
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2549
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2553
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2561
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2575
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2579
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2583
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 490:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2601
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: yyDollar[3].str == DistinctStr, Exprs: yyDollar[4].selectExprs}
		}
	case 491:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2605
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 492:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2615
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 493:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2619
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 494:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2623
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 495:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2627
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 496:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2631
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 497:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2635
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 498:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2639
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 499:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2643
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 500:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2647
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 501:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2651
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 502:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2655
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 503:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2659
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 504:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2663
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2673
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2677
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2681
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2686
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2691
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2696
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2702
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2707
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2712
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2716
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2720
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2725
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2730
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2735
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 519:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2739
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 520:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2743
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2753
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 524:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2763
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 525:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2767
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2771
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 527:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2775
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 528:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2779
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 529:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2783
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 530:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2789
		{
			yyVAL.str = ""
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2793
		{
			yyVAL.str = BooleanModeStr
		}
	case 532:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2797
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 533:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2801
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2805
		{
			yyVAL.str = QueryExpansionStr
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2811
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2815
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2821
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2825
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2829
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2833
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2837
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2841
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2847
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2851
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2855
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2859
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2863
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2867
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2871
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 550:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2876
		{
			yyVAL.expr = nil
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2880
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 552:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2885
		{
			yyVAL.str = string("")
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2889
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2895
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2899
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 556:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2905
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 557:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2910
		{
			yyVAL.expr = nil
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2914
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2920
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2924
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 561:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2928
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2934
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2938
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2942
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2946
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2950
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2954
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2958
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2962
		{
			yyVAL.expr = &NullVal{}
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2968
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2977
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2981
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 573:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2986
		{
			yyVAL.exprs = nil
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2990
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 575:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2995
		{
			yyVAL.expr = nil
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2999
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 577:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3004
		{
			yyVAL.orderBy = nil
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3008
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3014
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3018
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3024
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 582:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3029
		{
			yyVAL.str = AscScr
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3033
		{
			yyVAL.str = AscScr
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3037
		{
			yyVAL.str = DescScr
		}
	case 585:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3042
		{
			yyVAL.limit = nil
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3046
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 587:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3050
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3054
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 589:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3059
		{
			yyVAL.str = ""
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3063
		{
			yyVAL.str = ForUpdateStr
		}
	case 591:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3067
		{
			yyVAL.str = ShareModeStr
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3080
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3084
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3088
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 595:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3093
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 596:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3097
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 597:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3101
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3108
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3112
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3116
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 601:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3120
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 602:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3125
		{
			yyVAL.updateExprs = nil
		}
	case 603:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3129
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3135
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3139
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3145
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3149
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3155
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3161
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3171
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3175
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3181
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3187
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3191
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3197
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3201
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3205
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3209
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3216
		{
			yyVAL.bytes = []byte("charset")
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3223
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3227
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3231
		{
			yyVAL.expr = &Default{}
		}
	case 627:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3240
		{
			yyVAL.byt = 0
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3242
		{
			yyVAL.byt = 1
		}
	case 629:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3245
		{
			yyVAL.byt = 0
		}
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3247
		{
			yyVAL.byt = 1
		}
	case 631:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3250
		{
			yyVAL.str = ""
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3252
		{
			yyVAL.str = IgnoreStr
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3256
		{
			yyVAL.empty = struct{}{}
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3258
		{
			yyVAL.empty = struct{}{}
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3260
		{
			yyVAL.empty = struct{}{}
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3262
		{
			yyVAL.empty = struct{}{}
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3264
		{
			yyVAL.empty = struct{}{}
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3266
		{
			yyVAL.empty = struct{}{}
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3268
		{
			yyVAL.empty = struct{}{}
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3270
		{
			yyVAL.empty = struct{}{}
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3272
		{
			yyVAL.empty = struct{}{}
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3274
		{
			yyVAL.empty = struct{}{}
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3278
		{
			yyVAL.empty = struct{}{}
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3280
		{
			yyVAL.empty = struct{}{}
		}
	case 645:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3283
		{
			yyVAL.empty = struct{}{}
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3285
		{
			yyVAL.empty = struct{}{}
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3287
		{
			yyVAL.empty = struct{}{}
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3291
		{
			yyVAL.empty = struct{}{}
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3293
		{
			yyVAL.empty = struct{}{}
		}
	case 650:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3296
		{
			yyVAL.empty = struct{}{}
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3298
		{
			yyVAL.empty = struct{}{}
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3300
		{
			yyVAL.empty = struct{}{}
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3302
		{
			yyVAL.empty = struct{}{}
		}
	case 654:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3305
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3307
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3311
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3315
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3322
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3328
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3332
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3339
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3653
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3662
		{
			decNesting(yylex)
		}
	case 954:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3667
		{
			skipToEnd(yylex)
		}
	case 955:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3672
		{
			skipToEnd(yylex)
		}
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3676
		{
			skipToEnd(yylex)
		}
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3680
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
