// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func yyPosition(yylex interface{}) int {
	return yylex.(*Tokenizer).Position
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:57
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	int                  int
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	asOf                 *AsOf
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	columnOrder          *ColumnOrder
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const UNLOCK = 57373
const KEYS = 57374
const UNIQUE = 57375
const KEY = 57376
const SYSTEM_TIME = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const INTEGRAL = 57401
const FLOAT = 57402
const HEXNUM = 57403
const VALUE_ARG = 57404
const LIST_ARG = 57405
const COMMENT = 57406
const COMMENT_KEYWORD = 57407
const BIT_LITERAL = 57408
const NULL = 57409
const TRUE = 57410
const FALSE = 57411
const OFF = 57412
const OR = 57413
const AND = 57414
const NOT = 57415
const BETWEEN = 57416
const CASE = 57417
const WHEN = 57418
const THEN = 57419
const ELSE = 57420
const END = 57421
const LE = 57422
const GE = 57423
const NE = 57424
const NULL_SAFE_EQUAL = 57425
const IS = 57426
const LIKE = 57427
const REGEXP = 57428
const IN = 57429
const SHIFT_LEFT = 57430
const SHIFT_RIGHT = 57431
const DIV = 57432
const MOD = 57433
const UNARY = 57434
const COLLATE = 57435
const BINARY = 57436
const UNDERSCORE_BINARY = 57437
const UNDERSCORE_UTF8MB4 = 57438
const INTERVAL = 57439
const JSON_EXTRACT_OP = 57440
const JSON_UNQUOTE_EXTRACT_OP = 57441
const CREATE = 57442
const ALTER = 57443
const DROP = 57444
const RENAME = 57445
const ANALYZE = 57446
const ADD = 57447
const FLUSH = 57448
const MODIFY = 57449
const CHANGE = 57450
const SCHEMA = 57451
const TABLE = 57452
const INDEX = 57453
const INDEXES = 57454
const VIEW = 57455
const TO = 57456
const IGNORE = 57457
const IF = 57458
const PRIMARY = 57459
const COLUMN = 57460
const SPATIAL = 57461
const FULLTEXT = 57462
const KEY_BLOCK_SIZE = 57463
const CHECK = 57464
const ACTION = 57465
const CASCADE = 57466
const CONSTRAINT = 57467
const FOREIGN = 57468
const NO = 57469
const REFERENCES = 57470
const RESTRICT = 57471
const FIRST = 57472
const AFTER = 57473
const SHOW = 57474
const DESCRIBE = 57475
const EXPLAIN = 57476
const DATE = 57477
const ESCAPE = 57478
const REPAIR = 57479
const OPTIMIZE = 57480
const TRUNCATE = 57481
const FORMAT = 57482
const MAXVALUE = 57483
const PARTITION = 57484
const REORGANIZE = 57485
const LESS = 57486
const THAN = 57487
const PROCEDURE = 57488
const TRIGGER = 57489
const VINDEX = 57490
const VINDEXES = 57491
const STATUS = 57492
const VARIABLES = 57493
const WARNINGS = 57494
const SEQUENCE = 57495
const EACH = 57496
const ROW = 57497
const BEFORE = 57498
const FOLLOWS = 57499
const PRECEDES = 57500
const BEGIN = 57501
const START = 57502
const TRANSACTION = 57503
const COMMIT = 57504
const ROLLBACK = 57505
const BIT = 57506
const TINYINT = 57507
const SMALLINT = 57508
const MEDIUMINT = 57509
const INT = 57510
const INTEGER = 57511
const BIGINT = 57512
const INTNUM = 57513
const REAL = 57514
const DOUBLE = 57515
const FLOAT_TYPE = 57516
const DECIMAL = 57517
const NUMERIC = 57518
const DEC = 57519
const FIXED = 57520
const PRECISION = 57521
const TIME = 57522
const TIMESTAMP = 57523
const DATETIME = 57524
const YEAR = 57525
const CHAR = 57526
const VARCHAR = 57527
const BOOL = 57528
const CHARACTER = 57529
const VARBINARY = 57530
const NCHAR = 57531
const NVARCHAR = 57532
const NATIONAL = 57533
const VARYING = 57534
const TEXT = 57535
const TINYTEXT = 57536
const MEDIUMTEXT = 57537
const LONGTEXT = 57538
const LONG = 57539
const BLOB = 57540
const TINYBLOB = 57541
const MEDIUMBLOB = 57542
const LONGBLOB = 57543
const JSON = 57544
const ENUM = 57545
const GEOMETRY = 57546
const POINT = 57547
const LINESTRING = 57548
const POLYGON = 57549
const GEOMETRYCOLLECTION = 57550
const MULTIPOINT = 57551
const MULTILINESTRING = 57552
const MULTIPOLYGON = 57553
const NULLX = 57554
const AUTO_INCREMENT = 57555
const APPROXNUM = 57556
const SIGNED = 57557
const UNSIGNED = 57558
const ZEROFILL = 57559
const COLLATION = 57560
const DATABASES = 57561
const SCHEMAS = 57562
const TABLES = 57563
const VITESS_METADATA = 57564
const VSCHEMA = 57565
const FULL = 57566
const PROCESSLIST = 57567
const COLUMNS = 57568
const FIELDS = 57569
const ENGINES = 57570
const PLUGINS = 57571
const NAMES = 57572
const CHARSET = 57573
const GLOBAL = 57574
const SESSION = 57575
const ISOLATION = 57576
const LEVEL = 57577
const READ = 57578
const WRITE = 57579
const ONLY = 57580
const REPEATABLE = 57581
const COMMITTED = 57582
const UNCOMMITTED = 57583
const SERIALIZABLE = 57584
const CURRENT_TIMESTAMP = 57585
const DATABASE = 57586
const CURRENT_DATE = 57587
const CURRENT_TIME = 57588
const LOCALTIME = 57589
const LOCALTIMESTAMP = 57590
const UTC_DATE = 57591
const UTC_TIME = 57592
const UTC_TIMESTAMP = 57593
const REPLACE = 57594
const CONVERT = 57595
const CAST = 57596
const SUBSTR = 57597
const SUBSTRING = 57598
const GROUP_CONCAT = 57599
const SEPARATOR = 57600
const TIMESTAMPADD = 57601
const TIMESTAMPDIFF = 57602
const MATCH = 57603
const AGAINST = 57604
const BOOLEAN = 57605
const LANGUAGE = 57606
const WITH = 57607
const QUERY = 57608
const EXPANSION = 57609
const UNUSED = 57610
const ARRAY = 57611
const CUME_DIST = 57612
const DESCRIPTION = 57613
const DENSE_RANK = 57614
const EMPTY = 57615
const EXCEPT = 57616
const FIRST_VALUE = 57617
const GROUPING = 57618
const GROUPS = 57619
const JSON_TABLE = 57620
const LAG = 57621
const LAST_VALUE = 57622
const LATERAL = 57623
const LEAD = 57624
const MEMBER = 57625
const NTH_VALUE = 57626
const NTILE = 57627
const OF = 57628
const OVER = 57629
const PERCENT_RANK = 57630
const RANK = 57631
const RECURSIVE = 57632
const ROW_NUMBER = 57633
const SYSTEM = 57634
const WINDOW = 57635
const ACTIVE = 57636
const ADMIN = 57637
const BUCKETS = 57638
const CLONE = 57639
const COMPONENT = 57640
const DEFINITION = 57641
const ENFORCED = 57642
const EXCLUDE = 57643
const FOLLOWING = 57644
const GEOMCOLLECTION = 57645
const GET_MASTER_PUBLIC_KEY = 57646
const HISTOGRAM = 57647
const HISTORY = 57648
const INACTIVE = 57649
const INVISIBLE = 57650
const LOCKED = 57651
const MASTER_COMPRESSION_ALGORITHMS = 57652
const MASTER_PUBLIC_KEY_PATH = 57653
const MASTER_TLS_CIPHERSUITES = 57654
const MASTER_ZSTD_COMPRESSION_LEVEL = 57655
const NESTED = 57656
const NETWORK_NAMESPACE = 57657
const NOWAIT = 57658
const NULLS = 57659
const OJ = 57660
const OLD = 57661
const OPTIONAL = 57662
const ORDINALITY = 57663
const ORGANIZATION = 57664
const OTHERS = 57665
const PATH = 57666
const PERSIST = 57667
const PERSIST_ONLY = 57668
const PRECEDING = 57669
const PRIVILEGE_CHECKS_USER = 57670
const PROCESS = 57671
const RANDOM = 57672
const REFERENCE = 57673
const REQUIRE_ROW_FORMAT = 57674
const RESOURCE = 57675
const RESPECT = 57676
const RESTART = 57677
const RETAIN = 57678
const REUSE = 57679
const ROLE = 57680
const SECONDARY = 57681
const SECONDARY_ENGINE = 57682
const SECONDARY_LOAD = 57683
const SECONDARY_UNLOAD = 57684
const SKIP = 57685
const SRID = 57686
const THREAD_PRIORITY = 57687
const TIES = 57688
const UNBOUNDED = 57689
const VCPU = 57690
const VISIBLE = 57691

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"UNIQUE",
	"KEY",
	"SYSTEM_TIME",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"MODIFY",
	"CHANGE",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"INDEXES",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"FIRST",
	"AFTER",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"FORMAT",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"EACH",
	"ROW",
	"BEFORE",
	"FOLLOWS",
	"PRECEDES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DEC",
	"FIXED",
	"PRECISION",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NATIONAL",
	"VARYING",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"LONG",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 31,
	-2, 4,
	-1, 41,
	167, 362,
	168, 362,
	-2, 350,
	-1, 48,
	1, 1015,
	367, 1015,
	-2, 381,
	-1, 333,
	114, 721,
	-2, 717,
	-1, 334,
	114, 722,
	-2, 718,
	-1, 404,
	84, 971,
	-2, 67,
	-1, 405,
	84, 889,
	-2, 68,
	-1, 410,
	84, 858,
	-2, 681,
	-1, 412,
	84, 919,
	-2, 683,
	-1, 593,
	5, 31,
	-2, 375,
	-1, 597,
	5, 31,
	-2, 374,
	-1, 724,
	1, 426,
	5, 426,
	12, 426,
	13, 426,
	14, 426,
	15, 426,
	17, 426,
	19, 426,
	29, 426,
	30, 426,
	44, 426,
	45, 426,
	46, 426,
	47, 426,
	48, 426,
	50, 426,
	51, 426,
	54, 426,
	55, 426,
	57, 426,
	58, 426,
	367, 426,
	-2, 451,
	-1, 727,
	55, 48,
	57, 48,
	-2, 52,
	-1, 890,
	114, 724,
	-2, 720,
	-1, 1094,
	56, 294,
	59, 294,
	-2, 259,
	-1, 1144,
	5, 32,
	-2, 515,
	-1, 1176,
	5, 31,
	-2, 655,
	-1, 1270,
	5, 31,
	-2, 69,
	-1, 1380,
	1, 470,
	5, 470,
	12, 470,
	13, 470,
	14, 470,
	15, 470,
	17, 470,
	19, 470,
	29, 470,
	30, 470,
	44, 470,
	45, 470,
	46, 470,
	47, 470,
	48, 470,
	50, 470,
	51, 470,
	54, 470,
	55, 470,
	57, 470,
	58, 470,
	367, 470,
	-2, 451,
	-1, 1483,
	5, 32,
	-2, 656,
	-1, 1515,
	5, 31,
	-2, 69,
	-1, 1553,
	5, 31,
	-2, 658,
	-1, 1639,
	5, 32,
	-2, 659,
	-1, 1659,
	5, 31,
	-2, 86,
}

const yyPrivate = 57344

const yyLast = 17434

var yyAct = [...]int{

	334, 1689, 1676, 1643, 1677, 1447, 1393, 7, 1627, 6,
	1312, 1179, 1567, 1533, 1498, 678, 1008, 677, 3, 338,
	1064, 1358, 979, 1518, 562, 1066, 866, 1644, 364, 1225,
	1394, 977, 981, 312, 1359, 536, 1021, 351, 1017, 973,
	100, 1180, 86, 100, 1355, 1282, 975, 1371, 1007, 100,
	1330, 409, 1089, 64, 1059, 1288, 953, 1365, 843, 1262,
	915, 827, 1054, 1289, 964, 928, 740, 1014, 609, 954,
	721, 943, 307, 892, 100, 414, 615, 739, 403, 100,
	301, 100, 630, 365, 54, 1204, 398, 336, 720, 321,
	957, 100, 621, 414, 395, 400, 729, 100, 542, 406,
	694, 63, 1285, 1105, 1680, 5, 1042, 1656, 1675, 1637,
	1671, 68, 1448, 1655, 1347, 695, 1104, 1636, 1475, 541,
	741, 26, 742, 55, 29, 30, 1213, 565, 1388, 1212,
	302, 303, 1214, 998, 306, 305, 325, 304, 54, 70,
	71, 72, 73, 74, 95, 91, 92, 1109, 93, 590,
	317, 26, 27, 55, 29, 30, 1103, 1603, 643, 642,
	652, 653, 645, 646, 647, 648, 649, 650, 651, 644,
	60, 61, 654, 1245, 31, 51, 52, 1389, 1390, 999,
	1000, 1028, 544, 378, 546, 384, 385, 382, 383, 381,
	380, 379, 1314, 1540, 564, 567, 1030, 42, 569, 386,
	387, 61, 1004, 1030, 1043, 1466, 1100, 1095, 1096, 87,
	1094, 583, 1097, 1098, 1464, 584, 581, 582, 296, 816,
	309, 589, 311, 1055, 327, 1034, 1036, 1048, 1035, 1043,
	1621, 566, 568, 1646, 1647, 1580, 1674, 857, 588, 576,
	577, 1316, 854, 1670, 815, 1331, 856, 1107, 1110, 298,
	81, 1628, 1311, 958, 1519, 1520, 1619, 1315, 1697, 1022,
	1568, 1293, 33, 57, 38, 37, 40, 1024, 53, 543,
	550, 100, 1528, 1570, 414, 1693, 414, 414, 311, 94,
	858, 414, 1527, 414, 855, 299, 1273, 1333, 819, 414,
	810, 1203, 1102, 1202, 41, 59, 58, 982, 984, 49,
	50, 39, 83, 85, 603, 594, 80, 596, 1201, 539,
	100, 270, 89, 88, 90, 593, 597, 1117, 1101, 1005,
	1116, 43, 44, 1024, 45, 46, 1024, 1335, 414, 563,
	310, 1610, 1339, 1486, 1334, 618, 1332, 1318, 1043, 1154,
	84, 1337, 87, 1569, 1209, 1604, 1635, 666, 667, 1252,
	1165, 1226, 1133, 864, 1336, 735, 1033, 561, 1106, 561,
	561, 1023, 634, 1057, 561, 556, 561, 1338, 1340, 617,
	1237, 1412, 561, 1108, 1151, 1242, 1241, 983, 654, 994,
	644, 54, 54, 654, 56, 599, 600, 1691, 861, 849,
	1692, 1526, 1690, 100, 100, 100, 1238, 629, 628, 627,
	537, 54, 414, 595, 1617, 844, 1592, 1082, 414, 573,
	1243, 1284, 1235, 1308, 56, 629, 663, 1023, 1236, 665,
	1023, 948, 1413, 1297, 1293, 1024, 406, 1369, 1294, 549,
	619, 1301, 1303, 535, 1020, 1024, 743, 82, 585, 598,
	719, 1349, 1029, 666, 667, 89, 88, 676, 1298, 680,
	681, 682, 683, 684, 685, 686, 687, 688, 689, 690,
	537, 693, 696, 696, 696, 702, 696, 696, 702, 696,
	710, 711, 712, 713, 714, 715, 1240, 725, 666, 667,
	697, 699, 701, 703, 705, 707, 708, 1024, 845, 728,
	1083, 1283, 574, 733, 944, 698, 700, 737, 704, 706,
	944, 709, 1162, 643, 642, 652, 653, 645, 646, 647,
	648, 649, 650, 651, 644, 77, 899, 654, 587, 1023,
	812, 608, 1307, 552, 553, 554, 1304, 1400, 624, 1023,
	897, 898, 896, 627, 308, 1018, 100, 1019, 612, 616,
	414, 1150, 1641, 1016, 1022, 1513, 1512, 100, 61, 629,
	100, 78, 363, 100, 1618, 635, 1698, 100, 895, 414,
	414, 1090, 1267, 1149, 24, 1148, 414, 414, 100, 414,
	100, 1265, 1239, 100, 1130, 1131, 1132, 414, 414, 867,
	868, 1023, 628, 627, 605, 1246, 606, 1297, 1293, 607,
	679, 1547, 1294, 628, 627, 1295, 1296, 1510, 1699, 629,
	863, 692, 1427, 1405, 100, 414, 392, 393, 829, 100,
	629, 1263, 1298, 645, 646, 647, 648, 649, 650, 651,
	644, 414, 916, 654, 917, 1091, 100, 408, 1615, 628,
	627, 316, 414, 647, 648, 649, 650, 651, 644, 862,
	1586, 654, 561, 561, 820, 551, 629, 628, 627, 561,
	561, 869, 561, 1215, 1351, 1216, 628, 627, 1226, 889,
	561, 561, 832, 833, 629, 1583, 893, 537, 882, 884,
	885, 1524, 1430, 629, 883, 537, 414, 1450, 1562, 1672,
	354, 353, 356, 357, 358, 359, 890, 1445, 561, 355,
	360, 1504, 1669, 1651, 602, 602, 888, 26, 926, 1441,
	29, 30, 1504, 1648, 1562, 1631, 933, 936, 1438, 871,
	1436, 414, 414, 945, 886, 974, 1504, 1620, 100, 1562,
	1611, 1562, 1573, 1562, 602, 1581, 100, 100, 1435, 601,
	100, 100, 1504, 1503, 100, 100, 100, 414, 1488, 602,
	1485, 602, 1420, 1419, 1577, 982, 984, 61, 1280, 54,
	414, 927, 929, 1279, 919, 920, 935, 938, 939, 940,
	1221, 406, 1416, 1417, 680, 1416, 1415, 961, 602, 922,
	1145, 602, 1368, 1080, 1009, 1079, 989, 26, 924, 602,
	991, 918, 952, 941, 955, 956, 1012, 829, 643, 642,
	652, 653, 645, 646, 647, 648, 649, 650, 651, 644,
	1174, 851, 654, 826, 825, 813, 811, 1175, 558, 976,
	846, 100, 414, 725, 414, 995, 996, 725, 987, 100,
	100, 992, 545, 100, 731, 983, 408, 61, 408, 408,
	750, 749, 1576, 408, 1356, 408, 1406, 1368, 988, 1025,
	730, 408, 924, 100, 65, 100, 100, 1481, 1205, 26,
	731, 100, 879, 880, 26, 100, 100, 100, 100, 100,
	1061, 1062, 1063, 1205, 1591, 1056, 1058, 1321, 732, 961,
	734, 1418, 1217, 960, 997, 1044, 1045, 1046, 1047, 1552,
	632, 966, 969, 970, 971, 967, 1145, 968, 972, 889,
	1145, 1372, 1373, 961, 732, 561, 730, 561, 1168, 61,
	318, 961, 1167, 1078, 61, 679, 730, 736, 1368, 931,
	932, 865, 818, 1145, 61, 340, 890, 966, 969, 970,
	971, 967, 1657, 968, 972, 893, 1121, 642, 652, 653,
	645, 646, 647, 648, 649, 650, 651, 644, 1123, 1649,
	654, 1584, 1122, 1535, 1514, 1030, 1129, 1493, 1060, 1399,
	61, 1372, 1373, 1139, 408, 1055, 1220, 1050, 1049, 1313,
	745, 1065, 100, 100, 100, 100, 100, 1536, 1003, 1684,
	1135, 1682, 1678, 1134, 100, 1176, 1375, 100, 1356, 1142,
	1181, 100, 1272, 1268, 850, 822, 1191, 1189, 1378, 100,
	877, 1192, 1190, 1193, 926, 970, 971, 1377, 1188, 1187,
	322, 323, 1667, 1654, 1200, 1317, 1118, 1665, 414, 622,
	623, 1159, 1128, 1199, 1161, 1127, 1550, 1440, 1228, 1404,
	1403, 1222, 1256, 748, 1218, 559, 1479, 620, 610, 867,
	868, 1069, 1009, 1183, 1184, 1206, 1186, 1194, 1531, 611,
	870, 1177, 1178, 821, 1271, 725, 725, 725, 725, 725,
	1182, 1227, 1086, 1185, 622, 623, 1223, 1224, 974, 809,
	976, 1126, 1197, 1516, 1210, 313, 414, 319, 320, 1125,
	1597, 314, 725, 65, 1596, 1207, 1538, 1208, 414, 100,
	414, 414, 1205, 1155, 1270, 1686, 1685, 1119, 1120, 1152,
	616, 842, 808, 1072, 1073, 1074, 1686, 625, 1685, 923,
	925, 1607, 1402, 860, 67, 930, 69, 47, 62, 1,
	1264, 408, 408, 1291, 1449, 1532, 1099, 1626, 408, 408,
	1266, 408, 1015, 1006, 76, 100, 534, 75, 1616, 408,
	408, 1290, 1302, 1306, 414, 1081, 572, 1522, 1247, 1248,
	278, 1013, 1233, 1281, 1232, 1254, 1229, 1244, 1027, 1143,
	54, 1299, 1231, 1309, 1310, 1261, 1230, 408, 1323, 1300,
	1234, 561, 1292, 561, 561, 756, 754, 1278, 755, 1163,
	753, 758, 757, 873, 1287, 1026, 752, 281, 414, 414,
	401, 744, 626, 48, 632, 1525, 1357, 408, 1305, 1325,
	1352, 1324, 1093, 79, 1181, 1362, 848, 579, 414, 580,
	331, 1342, 1031, 1032, 1360, 1037, 1038, 1039, 1040, 1041,
	1341, 1329, 283, 1348, 662, 1124, 1211, 890, 414, 407,
	414, 414, 1381, 1051, 1052, 1053, 1363, 1121, 921, 614,
	1595, 1537, 1160, 1376, 691, 942, 1392, 339, 881, 352,
	349, 350, 1009, 1085, 1009, 1255, 946, 1257, 1258, 1259,
	1260, 664, 872, 1397, 1398, 1379, 1173, 636, 1385, 1361,
	1396, 54, 337, 950, 951, 1367, 1391, 329, 723, 100,
	716, 965, 963, 414, 100, 962, 823, 396, 1374, 1370,
	722, 1320, 586, 297, 1474, 1382, 1383, 1384, 1602, 408,
	876, 28, 1387, 66, 324, 19, 1422, 1423, 18, 17,
	592, 20, 408, 414, 21, 22, 100, 414, 16, 724,
	15, 14, 414, 547, 32, 414, 414, 414, 36, 414,
	1433, 35, 100, 34, 1431, 10, 1645, 1426, 1071, 814,
	23, 13, 12, 11, 1434, 9, 1658, 8, 4, 315,
	1141, 25, 2, 1323, 0, 1444, 0, 0, 1144, 1146,
	0, 1147, 0, 0, 0, 0, 1409, 1153, 0, 0,
	1156, 1157, 1158, 0, 408, 0, 408, 1164, 1455, 0,
	1432, 1166, 0, 0, 1169, 1170, 0, 1171, 1172, 0,
	0, 1437, 0, 414, 414, 414, 0, 1350, 1181, 0,
	1462, 0, 414, 0, 0, 0, 0, 1196, 1500, 1501,
	414, 0, 1480, 1496, 0, 725, 1454, 0, 1218, 0,
	1490, 0, 0, 0, 1506, 0, 1009, 408, 0, 1502,
	1497, 1489, 0, 0, 0, 0, 0, 0, 0, 0,
	1386, 1473, 0, 0, 0, 0, 0, 0, 0, 0,
	1507, 1515, 0, 0, 0, 0, 0, 0, 0, 414,
	1407, 1408, 0, 0, 1521, 0, 560, 1411, 0, 0,
	0, 0, 0, 0, 1414, 0, 1517, 0, 1529, 0,
	0, 1523, 0, 1534, 1396, 0, 1249, 1250, 1251, 1253,
	0, 1530, 0, 0, 0, 0, 414, 414, 0, 414,
	0, 0, 0, 0, 414, 0, 100, 0, 100, 0,
	0, 0, 1553, 0, 0, 414, 0, 54, 1559, 1428,
	1360, 0, 0, 946, 0, 414, 1551, 0, 0, 0,
	0, 1578, 1509, 1558, 1511, 0, 0, 1560, 0, 414,
	1561, 1566, 1572, 0, 0, 1571, 414, 100, 0, 0,
	0, 1579, 668, 669, 670, 671, 672, 673, 674, 675,
	1593, 0, 1585, 894, 1589, 0, 0, 0, 0, 0,
	408, 0, 0, 414, 1328, 1361, 0, 1539, 1554, 0,
	0, 0, 1609, 0, 1608, 0, 1476, 0, 0, 1614,
	0, 1360, 0, 0, 1612, 414, 679, 0, 0, 0,
	0, 1623, 414, 414, 1491, 0, 0, 1492, 0, 1582,
	1494, 0, 0, 0, 0, 1629, 1624, 0, 0, 1630,
	1588, 414, 1508, 1633, 0, 1590, 1534, 1009, 1269, 1638,
	100, 0, 0, 0, 0, 0, 0, 1181, 0, 414,
	408, 0, 408, 408, 0, 0, 1361, 0, 54, 0,
	0, 724, 1653, 0, 0, 724, 0, 726, 0, 724,
	414, 0, 1662, 1661, 0, 1660, 1663, 1614, 414, 1666,
	1664, 1478, 1622, 1659, 0, 0, 0, 0, 0, 0,
	1625, 0, 1668, 1673, 0, 0, 0, 0, 0, 0,
	1683, 1681, 0, 0, 0, 0, 408, 97, 1694, 0,
	0, 0, 0, 0, 0, 1410, 300, 0, 0, 643,
	642, 652, 653, 645, 646, 647, 648, 649, 650, 651,
	644, 0, 1574, 654, 1575, 0, 0, 0, 408, 613,
	0, 397, 0, 0, 0, 0, 538, 946, 540, 54,
	1364, 1366, 570, 571, 0, 0, 0, 575, 548, 578,
	0, 0, 0, 0, 555, 591, 1456, 0, 0, 0,
	1366, 0, 1458, 0, 0, 0, 0, 0, 1679, 98,
	0, 0, 295, 1467, 1468, 0, 0, 0, 98, 0,
	408, 0, 408, 1395, 1459, 1460, 0, 1461, 291, 0,
	1463, 0, 1465, 1482, 1483, 1484, 0, 1487, 847, 0,
	328, 0, 0, 399, 0, 0, 0, 0, 98, 0,
	98, 1495, 0, 0, 0, 288, 0, 0, 0, 0,
	98, 0, 894, 0, 0, 0, 98, 0, 0, 0,
	0, 1632, 679, 0, 0, 1424, 0, 652, 653, 645,
	646, 647, 648, 649, 650, 651, 644, 891, 1505, 654,
	900, 901, 902, 903, 904, 905, 906, 907, 908, 909,
	910, 911, 912, 913, 914, 1439, 271, 0, 0, 1443,
	0, 0, 0, 274, 1446, 0, 0, 1451, 1452, 1453,
	0, 408, 0, 282, 289, 290, 0, 724, 724, 724,
	724, 724, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 724, 0, 0, 0, 1546, 949, 0, 0,
	0, 0, 0, 0, 724, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 287, 0, 0, 557, 0,
	1563, 946, 1564, 1565, 0, 0, 0, 1472, 0, 0,
	0, 0, 0, 0, 0, 1499, 1499, 1499, 0, 0,
	0, 0, 0, 0, 408, 0, 0, 0, 0, 0,
	272, 0, 1499, 0, 0, 0, 0, 604, 0, 0,
	0, 0, 0, 1598, 1599, 1600, 1601, 0, 0, 0,
	1605, 1606, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 284, 275, 276, 0, 285, 286, 294, 0, 0,
	98, 277, 279, 0, 273, 293, 292, 0, 0, 0,
	0, 408, 0, 643, 642, 652, 653, 645, 646, 647,
	648, 649, 650, 651, 644, 830, 831, 654, 0, 0,
	0, 0, 834, 835, 1634, 837, 0, 0, 0, 98,
	0, 1639, 602, 840, 841, 0, 0, 0, 1555, 1556,
	718, 1557, 727, 0, 0, 0, 1499, 0, 1650, 0,
	0, 0, 0, 0, 0, 0, 0, 1395, 0, 0,
	0, 853, 0, 0, 0, 0, 0, 1395, 0, 643,
	642, 652, 653, 645, 646, 647, 648, 649, 650, 651,
	644, 1587, 1477, 654, 0, 0, 0, 0, 1499, 1471,
	0, 0, 0, 0, 0, 0, 0, 0, 1136, 1137,
	1138, 0, 0, 0, 0, 0, 0, 0, 0, 1695,
	1696, 0, 98, 98, 98, 1613, 0, 0, 0, 0,
	643, 642, 652, 653, 645, 646, 647, 648, 649, 650,
	651, 644, 0, 0, 654, 0, 0, 1395, 0, 0,
	0, 0, 0, 0, 408, 408, 1470, 643, 642, 652,
	653, 645, 646, 647, 648, 649, 650, 651, 644, 0,
	946, 654, 1469, 1640, 0, 643, 642, 652, 653, 645,
	646, 647, 648, 649, 650, 651, 644, 0, 0, 654,
	0, 1652, 0, 751, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 817, 0, 0, 397, 0, 0,
	824, 0, 1395, 0, 0, 0, 0, 0, 0, 0,
	1499, 0, 0, 0, 0, 836, 0, 838, 0, 0,
	839, 0, 643, 642, 652, 653, 645, 646, 647, 648,
	649, 650, 651, 644, 0, 0, 654, 724, 643, 642,
	652, 653, 645, 646, 647, 648, 649, 650, 651, 644,
	0, 852, 654, 0, 0, 98, 859, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 98, 0, 1068, 98,
	1070, 0, 98, 878, 0, 0, 828, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 638, 98, 641, 98,
	0, 1286, 98, 0, 655, 656, 657, 658, 659, 660,
	661, 0, 639, 640, 637, 643, 642, 652, 653, 645,
	646, 647, 648, 649, 650, 651, 644, 0, 0, 654,
	0, 0, 0, 98, 0, 0, 0, 0, 98, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1327, 0, 0, 0, 98, 0, 0, 0, 0,
	0, 0, 1343, 1344, 828, 1345, 1346, 0, 0, 1326,
	0, 0, 0, 0, 0, 959, 0, 0, 1353, 1354,
	0, 0, 0, 0, 0, 0, 0, 0, 990, 643,
	642, 652, 653, 645, 646, 647, 648, 649, 650, 651,
	644, 0, 0, 654, 1140, 0, 0, 0, 0, 1380,
	0, 328, 328, 0, 0, 0, 328, 328, 328, 328,
	0, 0, 0, 947, 643, 642, 652, 653, 645, 646,
	647, 648, 649, 650, 651, 644, 0, 0, 654, 0,
	0, 0, 328, 328, 328, 328, 0, 98, 1401, 0,
	0, 0, 0, 0, 0, 98, 985, 0, 0, 98,
	98, 0, 0, 98, 993, 828, 0, 0, 1067, 0,
	0, 0, 0, 0, 0, 0, 1075, 1076, 0, 0,
	1077, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1429, 0, 0, 0,
	1084, 0, 0, 0, 0, 0, 0, 0, 1092, 0,
	0, 0, 1111, 1112, 1113, 1114, 1115, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1457, 0, 0,
	98, 0, 0, 0, 1274, 0, 1276, 1277, 98, 98,
	0, 0, 98, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 0, 1087, 1088, 0, 778, 0, 0,
	98, 0, 0, 0, 98, 98, 98, 98, 98, 0,
	0, 0, 0, 0, 828, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 328, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 328, 0, 0, 0, 0, 0, 765, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 328, 0, 0, 0, 0, 0, 0, 0, 0,
	1541, 1542, 1543, 1544, 1545, 0, 0, 0, 1548, 1549,
	947, 98, 98, 98, 98, 98, 0, 0, 0, 0,
	779, 0, 0, 1195, 0, 0, 98, 0, 0, 0,
	985, 0, 0, 0, 0, 0, 0, 0, 98, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 792,
	795, 796, 797, 798, 799, 800, 1275, 801, 802, 803,
	804, 805, 806, 807, 0, 780, 781, 782, 783, 759,
	763, 793, 760, 766, 762, 764, 761, 0, 767, 768,
	769, 770, 771, 772, 773, 774, 775, 776, 777, 784,
	785, 786, 787, 788, 789, 790, 791, 0, 0, 0,
	0, 0, 1319, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 98, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 794, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 328, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 328, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1687, 0, 0, 0, 0, 828, 0, 0, 0, 0,
	0, 0, 0, 0, 947, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1421, 0, 0, 0,
	0, 1425, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1442, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 98, 0,
	0, 0, 0, 98, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 98, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 947, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1594, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 985, 0, 985, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 98, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1642, 0, 0,
	0, 0, 0, 0, 0, 521, 509, 0, 466, 524,
	439, 456, 532, 457, 460, 497, 424, 479, 184, 454,
	0, 443, 419, 449, 420, 441, 468, 130, 438, 511,
	482, 523, 156, 522, 472, 0, 530, 158, 488, 0,
	230, 172, 0, 0, 470, 513, 477, 506, 465, 498,
	429, 487, 525, 455, 495, 526, 0, 947, 0, 413,
	0, 1010, 1011, 0, 0, 0, 0, 0, 120, 98,
	492, 520, 451, 494, 496, 418, 489, 0, 422, 425,
	531, 516, 446, 447, 1219, 0, 0, 0, 0, 0,
	0, 469, 478, 503, 463, 0, 0, 0, 0, 0,
	0, 0, 0, 444, 0, 486, 0, 0, 0, 426,
	423, 0, 0, 467, 0, 0, 0, 428, 0, 445,
	504, 0, 415, 138, 0, 0, 508, 515, 464, 0,
	259, 519, 462, 461, 203, 0, 234, 141, 155, 116,
	102, 112, 0, 140, 181, 210, 214, 452, 416, 512,
	442, 450, 124, 448, 212, 191, 250, 0, 485, 193,
	211, 159, 240, 204, 249, 260, 261, 237, 257, 265,
	227, 0, 0, 0, 0, 0, 105, 236, 248, 121,
	222, 107, 246, 233, 170, 150, 151, 106, 0, 208,
	129, 136, 126, 183, 0, 0, 0, 243, 244, 125,
	268, 113, 256, 109, 114, 255, 177, 0, 0, 0,
	239, 247, 171, 164, 0, 108, 245, 169, 163, 154,
	133, 143, 201, 161, 202, 144, 174, 173, 175, 0,
	421, 0, 231, 253, 269, 118, 437, 0, 238, 263,
	264, 0, 0, 119, 137, 132, 200, 176, 115, 146,
	228, 153, 160, 207, 267, 190, 213, 122, 252, 229,
	433, 436, 431, 432, 480, 481, 527, 528, 529, 505,
	427, 0, 434, 435, 0, 510, 517, 518, 484, 101,
	110, 157, 266, 205, 135, 254, 417, 430, 128, 440,
	0, 0, 453, 458, 459, 471, 473, 474, 475, 476,
	483, 490, 491, 493, 499, 500, 501, 502, 507, 514,
	533, 103, 104, 111, 117, 123, 127, 131, 134, 139,
	142, 145, 147, 148, 149, 152, 162, 165, 166, 167,
	168, 178, 179, 180, 182, 185, 186, 187, 188, 189,
	192, 194, 195, 196, 197, 198, 199, 206, 209, 215,
	216, 217, 218, 219, 220, 221, 223, 224, 225, 226,
	232, 235, 241, 242, 251, 258, 262, 521, 509, 0,
	466, 524, 439, 456, 532, 457, 460, 497, 424, 479,
	184, 454, 0, 443, 419, 449, 420, 441, 468, 130,
	438, 511, 482, 523, 156, 522, 472, 0, 530, 158,
	488, 0, 230, 172, 0, 0, 470, 513, 477, 506,
	465, 498, 429, 487, 525, 455, 495, 526, 0, 0,
	0, 413, 0, 1010, 1011, 0, 0, 0, 0, 0,
	120, 0, 492, 520, 451, 494, 496, 418, 489, 0,
	422, 425, 531, 516, 446, 447, 0, 0, 0, 0,
	0, 0, 0, 469, 478, 503, 463, 0, 0, 0,
	0, 0, 0, 0, 0, 444, 0, 486, 0, 0,
	0, 426, 423, 0, 0, 467, 0, 0, 0, 428,
	0, 445, 504, 0, 415, 138, 0, 0, 508, 515,
	464, 0, 259, 519, 462, 461, 203, 0, 234, 141,
	155, 116, 102, 112, 0, 140, 181, 210, 214, 452,
	416, 512, 442, 450, 124, 448, 212, 191, 250, 0,
	485, 193, 211, 159, 240, 204, 249, 260, 261, 237,
	257, 265, 227, 0, 0, 0, 0, 0, 105, 236,
	248, 121, 222, 107, 246, 233, 170, 150, 151, 106,
	0, 208, 129, 136, 126, 183, 0, 0, 0, 243,
	244, 125, 268, 113, 256, 109, 114, 255, 177, 0,
	0, 0, 239, 247, 171, 164, 0, 108, 245, 169,
	163, 154, 133, 143, 201, 161, 202, 144, 174, 173,
	175, 0, 421, 0, 231, 253, 269, 118, 437, 0,
	238, 263, 264, 0, 0, 119, 137, 132, 200, 176,
	115, 146, 228, 153, 160, 207, 267, 190, 213, 122,
	252, 229, 433, 436, 431, 432, 480, 481, 527, 528,
	529, 505, 427, 0, 434, 435, 0, 510, 517, 518,
	484, 101, 110, 157, 266, 205, 135, 254, 417, 430,
	128, 440, 0, 0, 453, 458, 459, 471, 473, 474,
	475, 476, 483, 490, 491, 493, 499, 500, 501, 502,
	507, 514, 533, 103, 104, 111, 117, 123, 127, 131,
	134, 139, 142, 145, 147, 148, 149, 152, 162, 165,
	166, 167, 168, 178, 179, 180, 182, 185, 186, 187,
	188, 189, 192, 194, 195, 196, 197, 198, 199, 206,
	209, 215, 216, 217, 218, 219, 220, 221, 223, 224,
	225, 226, 232, 235, 241, 242, 251, 258, 262, 521,
	509, 0, 466, 524, 439, 456, 532, 457, 460, 497,
	424, 479, 184, 454, 0, 443, 419, 449, 420, 441,
	468, 130, 438, 511, 482, 523, 156, 522, 472, 0,
	530, 158, 488, 0, 230, 172, 0, 0, 470, 513,
	477, 506, 465, 498, 429, 487, 525, 455, 495, 526,
	0, 0, 0, 413, 0, 0, 0, 0, 0, 0,
	0, 0, 120, 0, 492, 520, 451, 494, 496, 418,
	489, 0, 422, 425, 531, 516, 446, 447, 0, 0,
	0, 0, 0, 0, 0, 469, 478, 503, 463, 0,
	0, 0, 0, 0, 0, 1322, 0, 444, 0, 486,
	0, 0, 0, 426, 423, 0, 0, 467, 0, 0,
	0, 428, 0, 445, 504, 0, 415, 138, 0, 0,
	508, 515, 464, 0, 259, 519, 462, 461, 203, 0,
	234, 141, 155, 116, 102, 112, 0, 140, 181, 210,
	214, 452, 416, 512, 442, 450, 124, 448, 212, 191,
	250, 0, 485, 193, 211, 159, 240, 204, 249, 260,
	261, 237, 257, 265, 227, 0, 0, 0, 0, 0,
	105, 236, 248, 121, 222, 107, 246, 233, 170, 150,
	151, 106, 0, 208, 129, 136, 126, 183, 0, 0,
	0, 243, 244, 125, 268, 113, 256, 109, 114, 255,
	177, 0, 0, 0, 239, 247, 171, 164, 0, 108,
	245, 169, 163, 154, 133, 143, 201, 161, 202, 144,
	174, 173, 175, 0, 421, 0, 231, 253, 269, 118,
	437, 0, 238, 263, 264, 0, 0, 119, 137, 132,
	200, 176, 115, 146, 228, 153, 160, 207, 267, 190,
	213, 122, 252, 229, 433, 436, 431, 432, 480, 481,
	527, 528, 529, 505, 427, 0, 434, 435, 0, 510,
	517, 518, 484, 101, 110, 157, 266, 205, 135, 254,
	417, 430, 128, 440, 0, 0, 453, 458, 459, 471,
	473, 474, 475, 476, 483, 490, 491, 493, 499, 500,
	501, 502, 507, 514, 533, 103, 104, 111, 117, 123,
	127, 131, 134, 139, 142, 145, 147, 148, 149, 152,
	162, 165, 166, 167, 168, 178, 179, 180, 182, 185,
	186, 187, 188, 189, 192, 194, 195, 196, 197, 198,
	199, 206, 209, 215, 216, 217, 218, 219, 220, 221,
	223, 224, 225, 226, 232, 235, 241, 242, 251, 258,
	262, 521, 509, 0, 466, 524, 439, 456, 532, 457,
	460, 497, 424, 479, 184, 454, 0, 443, 419, 449,
	420, 441, 468, 130, 438, 511, 482, 523, 156, 522,
	472, 0, 530, 158, 488, 0, 230, 172, 0, 0,
	470, 513, 477, 506, 465, 498, 429, 487, 525, 455,
	495, 526, 61, 0, 0, 413, 0, 0, 0, 0,
	0, 0, 0, 0, 120, 0, 492, 520, 451, 494,
	496, 418, 489, 0, 422, 425, 531, 516, 446, 447,
	0, 0, 0, 0, 0, 0, 0, 469, 478, 503,
	463, 0, 0, 0, 0, 0, 0, 0, 0, 444,
	0, 486, 0, 0, 0, 426, 423, 0, 0, 467,
	0, 0, 0, 428, 0, 445, 504, 0, 415, 138,
	0, 0, 508, 515, 464, 0, 259, 519, 462, 461,
	203, 0, 234, 141, 155, 116, 102, 112, 0, 140,
	181, 210, 214, 452, 416, 512, 442, 450, 124, 448,
	212, 191, 250, 0, 485, 193, 211, 159, 240, 204,
	249, 260, 261, 237, 257, 265, 227, 0, 0, 0,
	0, 0, 105, 236, 248, 121, 222, 107, 246, 233,
	170, 150, 151, 106, 0, 208, 129, 136, 126, 183,
	0, 0, 0, 243, 244, 125, 268, 113, 256, 109,
	114, 255, 177, 0, 0, 0, 239, 247, 171, 164,
	0, 108, 245, 169, 163, 154, 133, 143, 201, 161,
	202, 144, 174, 173, 175, 0, 421, 0, 231, 253,
	269, 118, 437, 0, 238, 263, 264, 0, 0, 119,
	137, 132, 200, 176, 115, 146, 228, 153, 160, 207,
	267, 190, 213, 122, 252, 229, 433, 436, 431, 432,
	480, 481, 527, 528, 529, 505, 427, 0, 434, 435,
	0, 510, 517, 518, 484, 101, 110, 157, 266, 205,
	135, 254, 417, 430, 128, 440, 0, 0, 453, 458,
	459, 471, 473, 474, 475, 476, 483, 490, 491, 493,
	499, 500, 501, 502, 507, 514, 533, 103, 104, 111,
	117, 123, 127, 131, 134, 139, 142, 145, 147, 148,
	149, 152, 162, 165, 166, 167, 168, 178, 179, 180,
	182, 185, 186, 187, 188, 189, 192, 194, 195, 196,
	197, 198, 199, 206, 209, 215, 216, 217, 218, 219,
	220, 221, 223, 224, 225, 226, 232, 235, 241, 242,
	251, 258, 262, 521, 509, 0, 466, 524, 439, 456,
	532, 457, 460, 497, 424, 479, 184, 454, 0, 443,
	419, 449, 420, 441, 468, 130, 438, 511, 482, 523,
	156, 522, 472, 0, 530, 158, 488, 0, 230, 172,
	0, 0, 470, 513, 477, 506, 465, 498, 429, 487,
	525, 455, 495, 526, 0, 0, 0, 99, 0, 0,
	0, 0, 0, 0, 0, 0, 120, 0, 492, 520,
	451, 494, 496, 418, 489, 0, 422, 425, 531, 516,
	446, 447, 0, 0, 0, 0, 0, 0, 0, 469,
	478, 503, 463, 0, 0, 0, 0, 0, 0, 994,
	0, 444, 0, 486, 0, 0, 0, 426, 423, 0,
	0, 467, 0, 0, 0, 428, 0, 445, 504, 0,
	415, 138, 0, 0, 508, 515, 464, 0, 259, 519,
	462, 461, 203, 0, 234, 141, 155, 116, 102, 112,
	0, 140, 181, 210, 214, 452, 416, 512, 442, 450,
	124, 448, 212, 191, 250, 0, 485, 193, 211, 159,
	240, 204, 249, 260, 261, 237, 257, 265, 227, 0,
	0, 0, 0, 0, 105, 236, 248, 121, 222, 107,
	246, 233, 170, 150, 151, 106, 0, 208, 129, 136,
	126, 183, 0, 0, 0, 243, 244, 125, 268, 113,
	256, 109, 114, 255, 177, 0, 0, 0, 239, 247,
	171, 164, 0, 108, 245, 169, 163, 154, 133, 143,
	201, 161, 202, 144, 174, 173, 175, 0, 421, 0,
	231, 253, 269, 118, 437, 0, 238, 263, 264, 0,
	0, 119, 137, 132, 200, 176, 115, 146, 228, 153,
	160, 207, 267, 190, 213, 122, 252, 229, 433, 436,
	431, 432, 480, 481, 527, 528, 529, 505, 427, 0,
	434, 435, 0, 510, 517, 518, 484, 101, 110, 157,
	266, 205, 135, 254, 417, 430, 128, 440, 0, 0,
	453, 458, 459, 471, 473, 474, 475, 476, 483, 490,
	491, 493, 499, 500, 501, 502, 507, 514, 533, 103,
	104, 111, 117, 123, 127, 131, 134, 139, 142, 145,
	147, 148, 149, 152, 162, 165, 166, 167, 168, 178,
	179, 180, 182, 185, 186, 187, 188, 189, 192, 194,
	195, 196, 197, 198, 199, 206, 209, 215, 216, 217,
	218, 219, 220, 221, 223, 224, 225, 226, 232, 235,
	241, 242, 251, 258, 262, 521, 509, 0, 466, 524,
	439, 456, 532, 457, 460, 497, 424, 479, 184, 454,
	0, 443, 419, 449, 420, 441, 468, 130, 438, 511,
	482, 523, 156, 522, 472, 0, 530, 158, 488, 0,
	230, 172, 0, 0, 470, 513, 477, 506, 465, 498,
	429, 487, 525, 455, 495, 526, 0, 0, 0, 333,
	0, 0, 0, 0, 0, 0, 0, 0, 120, 0,
	492, 520, 451, 494, 496, 418, 489, 0, 422, 425,
	531, 516, 446, 447, 0, 0, 0, 0, 0, 0,
	0, 469, 478, 503, 463, 0, 0, 0, 0, 0,
	0, 887, 0, 444, 0, 486, 0, 0, 0, 426,
	423, 0, 0, 467, 0, 0, 0, 428, 0, 445,
	504, 0, 415, 138, 0, 0, 508, 515, 464, 0,
	259, 519, 462, 461, 203, 0, 234, 141, 155, 116,
	102, 112, 0, 140, 181, 210, 214, 452, 416, 512,
	442, 450, 124, 448, 212, 191, 250, 0, 485, 193,
	211, 159, 240, 204, 249, 260, 261, 237, 257, 265,
	227, 0, 0, 0, 0, 0, 105, 236, 248, 121,
	222, 107, 246, 233, 170, 150, 151, 106, 0, 208,
	129, 136, 126, 183, 0, 0, 0, 243, 244, 125,
	268, 113, 256, 109, 114, 255, 177, 0, 0, 0,
	239, 247, 171, 164, 0, 108, 245, 169, 163, 154,
	133, 143, 201, 161, 202, 144, 174, 173, 175, 0,
	421, 0, 231, 253, 269, 118, 437, 0, 238, 263,
	264, 0, 0, 119, 137, 132, 200, 176, 115, 146,
	228, 153, 160, 207, 267, 190, 213, 122, 252, 229,
	433, 436, 431, 432, 480, 481, 527, 528, 529, 505,
	427, 0, 434, 435, 0, 510, 517, 518, 484, 101,
	110, 157, 266, 205, 135, 254, 417, 430, 128, 440,
	0, 0, 453, 458, 459, 471, 473, 474, 475, 476,
	483, 490, 491, 493, 499, 500, 501, 502, 507, 514,
	533, 103, 104, 111, 117, 123, 127, 131, 134, 139,
	142, 145, 147, 148, 149, 152, 162, 165, 166, 167,
	168, 178, 179, 180, 182, 185, 186, 187, 188, 189,
	192, 194, 195, 196, 197, 198, 199, 206, 209, 215,
	216, 217, 218, 219, 220, 221, 223, 224, 225, 226,
	232, 235, 241, 242, 251, 258, 262, 521, 509, 0,
	466, 524, 439, 456, 532, 457, 460, 497, 424, 479,
	184, 454, 0, 443, 419, 449, 420, 441, 468, 130,
	438, 511, 482, 523, 156, 522, 472, 0, 530, 158,
	488, 0, 230, 172, 0, 0, 470, 513, 477, 506,
	465, 498, 429, 487, 525, 455, 495, 526, 0, 0,
	0, 413, 0, 0, 0, 0, 0, 0, 0, 0,
	120, 0, 492, 520, 451, 494, 496, 418, 489, 0,
	422, 425, 531, 516, 446, 447, 0, 0, 0, 0,
	0, 0, 0, 469, 478, 503, 463, 0, 0, 0,
	0, 0, 0, 0, 0, 444, 0, 486, 0, 0,
	0, 426, 423, 0, 0, 467, 0, 0, 0, 428,
	0, 445, 504, 0, 415, 138, 0, 0, 508, 515,
	464, 0, 259, 519, 462, 461, 203, 0, 234, 141,
	155, 116, 102, 112, 0, 140, 181, 210, 214, 452,
	416, 512, 442, 450, 124, 448, 212, 191, 250, 0,
	485, 193, 211, 159, 240, 204, 249, 260, 261, 237,
	257, 265, 227, 0, 0, 0, 0, 0, 105, 236,
	248, 121, 222, 107, 246, 233, 170, 150, 151, 106,
	0, 208, 129, 136, 126, 183, 0, 0, 0, 243,
	244, 125, 268, 113, 256, 109, 114, 255, 177, 0,
	0, 0, 239, 247, 171, 164, 0, 108, 245, 169,
	163, 154, 133, 143, 201, 161, 202, 144, 174, 173,
	175, 0, 421, 0, 231, 253, 269, 118, 437, 0,
	238, 263, 264, 0, 0, 119, 137, 132, 200, 176,
	115, 146, 228, 153, 160, 207, 267, 190, 213, 122,
	252, 229, 433, 436, 431, 432, 480, 481, 527, 528,
	529, 505, 427, 0, 434, 435, 0, 510, 517, 518,
	484, 101, 110, 157, 266, 205, 135, 254, 417, 430,
	128, 440, 0, 0, 453, 458, 459, 471, 473, 474,
	475, 476, 483, 490, 491, 493, 499, 500, 501, 502,
	507, 514, 533, 103, 104, 111, 117, 123, 127, 131,
	134, 139, 142, 145, 147, 148, 149, 152, 162, 165,
	166, 167, 168, 178, 179, 180, 182, 185, 186, 187,
	188, 189, 192, 194, 195, 196, 197, 198, 199, 206,
	209, 215, 216, 217, 218, 219, 220, 221, 223, 224,
	225, 226, 232, 235, 241, 242, 251, 258, 262, 521,
	509, 0, 466, 524, 439, 456, 532, 457, 460, 497,
	424, 479, 184, 454, 0, 443, 419, 449, 420, 441,
	468, 130, 438, 511, 482, 523, 156, 522, 472, 0,
	530, 158, 488, 0, 230, 172, 0, 0, 470, 513,
	477, 506, 465, 498, 429, 487, 525, 455, 495, 526,
	0, 0, 0, 333, 0, 0, 0, 0, 0, 0,
	0, 0, 120, 0, 492, 520, 451, 494, 496, 418,
	489, 0, 422, 425, 531, 516, 446, 447, 0, 0,
	0, 0, 0, 0, 0, 469, 478, 503, 463, 0,
	0, 0, 0, 0, 0, 0, 0, 444, 0, 486,
	0, 0, 0, 426, 423, 0, 0, 467, 0, 0,
	0, 428, 0, 445, 504, 0, 415, 138, 0, 0,
	508, 515, 464, 0, 259, 519, 462, 461, 203, 0,
	234, 141, 155, 116, 102, 112, 0, 140, 181, 210,
	214, 452, 416, 512, 442, 450, 124, 448, 212, 191,
	250, 0, 485, 193, 211, 159, 240, 204, 249, 260,
	261, 237, 257, 265, 227, 0, 0, 0, 0, 0,
	105, 236, 248, 121, 222, 107, 246, 233, 170, 150,
	151, 106, 0, 208, 129, 136, 126, 183, 0, 0,
	0, 243, 244, 125, 268, 113, 256, 109, 114, 255,
	177, 0, 0, 0, 239, 247, 171, 164, 0, 108,
	245, 169, 163, 154, 133, 143, 201, 161, 202, 144,
	174, 173, 175, 0, 421, 0, 231, 253, 269, 118,
	437, 0, 238, 263, 264, 0, 0, 119, 137, 132,
	200, 176, 115, 146, 228, 153, 160, 207, 267, 190,
	213, 122, 252, 229, 433, 436, 431, 432, 480, 481,
	527, 528, 529, 505, 427, 0, 434, 435, 0, 510,
	517, 518, 484, 101, 110, 157, 266, 205, 135, 254,
	417, 430, 128, 440, 0, 0, 453, 458, 459, 471,
	473, 474, 475, 476, 483, 490, 491, 493, 499, 500,
	501, 502, 507, 514, 533, 103, 104, 111, 117, 123,
	127, 131, 134, 139, 142, 145, 147, 148, 149, 152,
	162, 165, 166, 167, 168, 178, 179, 180, 182, 185,
	186, 187, 188, 189, 192, 194, 195, 196, 197, 198,
	199, 206, 209, 215, 216, 217, 218, 219, 220, 221,
	223, 224, 225, 226, 232, 235, 241, 242, 251, 258,
	262, 521, 509, 0, 466, 524, 439, 456, 532, 457,
	460, 497, 424, 479, 184, 454, 0, 443, 419, 449,
	420, 441, 468, 130, 438, 511, 482, 523, 156, 522,
	472, 0, 530, 158, 488, 0, 230, 172, 0, 0,
	470, 513, 477, 506, 465, 498, 429, 487, 525, 455,
	495, 526, 0, 0, 0, 413, 0, 0, 0, 0,
	0, 0, 0, 0, 120, 0, 492, 520, 451, 494,
	496, 418, 489, 0, 422, 425, 531, 516, 446, 447,
	0, 0, 0, 0, 0, 0, 0, 469, 478, 503,
	463, 0, 0, 0, 0, 0, 0, 0, 0, 444,
	0, 486, 0, 0, 0, 426, 423, 0, 0, 467,
	0, 0, 0, 428, 0, 445, 504, 0, 415, 138,
	0, 0, 508, 515, 464, 0, 259, 519, 462, 461,
	203, 0, 234, 141, 155, 116, 102, 112, 0, 140,
	181, 210, 214, 452, 416, 512, 442, 450, 124, 448,
	212, 191, 250, 0, 485, 193, 211, 159, 240, 204,
	249, 260, 261, 237, 257, 265, 227, 0, 0, 0,
	0, 0, 105, 236, 248, 121, 222, 107, 246, 233,
	170, 150, 151, 106, 0, 208, 129, 136, 126, 183,
	0, 0, 0, 243, 244, 125, 268, 113, 256, 109,
	411, 255, 177, 0, 0, 0, 239, 247, 171, 164,
	0, 108, 245, 169, 163, 154, 133, 143, 201, 161,
	202, 144, 174, 173, 175, 0, 421, 0, 231, 253,
	269, 118, 437, 0, 238, 263, 264, 0, 0, 119,
	137, 132, 200, 412, 410, 146, 228, 153, 160, 207,
	267, 190, 213, 122, 252, 229, 433, 436, 431, 432,
	480, 481, 527, 528, 529, 505, 427, 0, 434, 435,
	0, 510, 517, 518, 484, 101, 110, 157, 266, 205,
	135, 254, 417, 430, 128, 440, 0, 0, 453, 458,
	459, 471, 473, 474, 475, 476, 483, 490, 491, 493,
	499, 500, 501, 502, 507, 514, 533, 103, 104, 111,
	117, 123, 127, 131, 134, 139, 142, 145, 147, 148,
	149, 152, 162, 165, 166, 167, 168, 178, 179, 180,
	182, 185, 186, 187, 188, 189, 192, 194, 195, 196,
	197, 198, 199, 206, 209, 215, 216, 217, 218, 219,
	220, 221, 223, 224, 225, 226, 232, 235, 241, 242,
	251, 258, 262, 521, 509, 0, 466, 524, 439, 456,
	532, 457, 460, 497, 424, 479, 184, 454, 0, 443,
	419, 449, 420, 441, 468, 130, 438, 511, 482, 523,
	156, 522, 472, 0, 530, 158, 488, 0, 230, 172,
	0, 0, 470, 513, 477, 506, 465, 498, 429, 487,
	525, 455, 495, 526, 0, 0, 0, 99, 0, 0,
	0, 0, 0, 0, 0, 0, 120, 0, 492, 520,
	451, 494, 496, 418, 489, 0, 422, 425, 531, 516,
	446, 447, 0, 0, 0, 0, 0, 0, 0, 469,
	478, 503, 463, 0, 0, 0, 0, 0, 0, 0,
	0, 444, 0, 486, 0, 0, 0, 426, 423, 0,
	0, 467, 0, 0, 0, 428, 0, 445, 504, 0,
	415, 138, 0, 0, 508, 515, 464, 0, 259, 519,
	462, 461, 203, 0, 234, 141, 155, 116, 102, 112,
	0, 140, 181, 210, 214, 452, 416, 512, 442, 450,
	124, 448, 212, 191, 250, 0, 485, 193, 211, 159,
	240, 204, 249, 260, 261, 237, 257, 265, 227, 0,
	0, 0, 0, 0, 105, 236, 248, 121, 222, 107,
	246, 233, 170, 150, 151, 106, 0, 208, 129, 136,
	126, 183, 0, 0, 0, 243, 244, 125, 268, 113,
	256, 109, 114, 255, 177, 0, 0, 0, 239, 247,
	171, 164, 0, 108, 245, 169, 163, 154, 133, 143,
	201, 161, 202, 144, 174, 173, 175, 0, 421, 0,
	231, 253, 269, 118, 437, 0, 238, 263, 264, 0,
	0, 119, 137, 132, 200, 176, 115, 146, 228, 153,
	160, 207, 267, 190, 213, 122, 252, 229, 433, 436,
	431, 432, 480, 481, 527, 528, 529, 505, 427, 0,
	434, 435, 0, 510, 517, 518, 484, 101, 110, 157,
	266, 205, 135, 254, 417, 430, 128, 440, 0, 0,
	453, 458, 459, 471, 473, 474, 475, 476, 483, 490,
	491, 493, 499, 500, 501, 502, 507, 514, 533, 103,
	104, 111, 117, 123, 127, 131, 134, 139, 142, 145,
	147, 148, 149, 152, 162, 165, 166, 167, 168, 178,
	179, 180, 182, 185, 186, 187, 188, 189, 192, 194,
	195, 196, 197, 198, 199, 206, 209, 215, 216, 217,
	218, 219, 220, 221, 223, 224, 225, 226, 232, 235,
	241, 242, 251, 258, 262, 521, 509, 0, 466, 524,
	439, 456, 532, 457, 460, 497, 424, 479, 184, 454,
	0, 443, 419, 449, 420, 441, 468, 130, 438, 511,
	482, 523, 156, 522, 472, 0, 530, 158, 488, 0,
	230, 172, 0, 0, 470, 513, 477, 506, 465, 498,
	429, 487, 525, 455, 495, 526, 0, 0, 0, 413,
	0, 0, 0, 0, 0, 0, 0, 0, 120, 0,
	492, 520, 451, 494, 496, 418, 489, 0, 422, 425,
	531, 516, 446, 447, 0, 0, 0, 0, 0, 0,
	0, 469, 478, 503, 463, 0, 0, 0, 0, 0,
	0, 0, 0, 444, 0, 486, 0, 0, 0, 426,
	423, 0, 0, 467, 0, 0, 0, 428, 0, 445,
	504, 0, 415, 138, 0, 0, 508, 515, 464, 0,
	259, 519, 462, 461, 203, 0, 234, 141, 155, 116,
	102, 112, 0, 140, 181, 210, 214, 452, 416, 512,
	442, 450, 124, 448, 212, 191, 250, 0, 485, 193,
	211, 159, 240, 204, 249, 260, 261, 237, 257, 265,
	227, 0, 0, 0, 0, 0, 105, 236, 738, 121,
	222, 107, 246, 233, 170, 150, 151, 106, 0, 208,
	129, 136, 126, 183, 0, 0, 0, 243, 244, 125,
	268, 113, 256, 109, 411, 255, 177, 0, 0, 0,
	239, 247, 171, 164, 0, 108, 245, 169, 163, 154,
	133, 143, 201, 161, 202, 144, 174, 173, 175, 0,
	421, 0, 231, 253, 269, 118, 437, 0, 238, 263,
	264, 0, 0, 119, 137, 132, 200, 412, 410, 146,
	228, 153, 160, 207, 267, 190, 213, 122, 252, 229,
	433, 436, 431, 432, 480, 481, 527, 528, 529, 505,
	427, 0, 434, 435, 0, 510, 517, 518, 484, 101,
	110, 157, 266, 205, 135, 254, 417, 430, 128, 440,
	0, 0, 453, 458, 459, 471, 473, 474, 475, 476,
	483, 490, 491, 493, 499, 500, 501, 502, 507, 514,
	533, 103, 104, 111, 117, 123, 127, 131, 134, 139,
	142, 145, 147, 148, 149, 152, 162, 165, 166, 167,
	168, 178, 179, 180, 182, 185, 186, 187, 188, 189,
	192, 194, 195, 196, 197, 198, 199, 206, 209, 215,
	216, 217, 218, 219, 220, 221, 223, 224, 225, 226,
	232, 235, 241, 242, 251, 258, 262, 521, 509, 0,
	466, 524, 439, 456, 532, 457, 460, 497, 424, 479,
	184, 454, 0, 443, 419, 449, 420, 441, 468, 130,
	438, 511, 482, 523, 156, 522, 472, 0, 530, 158,
	488, 0, 230, 172, 0, 0, 470, 513, 477, 506,
	465, 498, 429, 487, 525, 455, 495, 526, 0, 0,
	0, 413, 0, 0, 0, 0, 0, 0, 0, 0,
	120, 0, 492, 520, 451, 494, 496, 418, 489, 0,
	422, 425, 531, 516, 446, 447, 0, 0, 0, 0,
	0, 0, 0, 469, 478, 503, 463, 0, 0, 0,
	0, 0, 0, 0, 0, 444, 0, 486, 0, 0,
	0, 426, 423, 0, 0, 467, 0, 0, 0, 428,
	0, 445, 504, 0, 415, 138, 0, 0, 508, 515,
	464, 0, 259, 519, 462, 461, 203, 0, 234, 141,
	155, 116, 102, 112, 0, 140, 181, 210, 214, 452,
	416, 512, 442, 450, 124, 448, 212, 191, 250, 0,
	485, 193, 211, 159, 240, 204, 249, 260, 261, 237,
	257, 265, 227, 0, 0, 0, 0, 0, 105, 236,
	402, 121, 222, 107, 246, 233, 170, 150, 151, 106,
	0, 208, 129, 136, 126, 183, 0, 0, 0, 243,
	244, 125, 268, 113, 256, 109, 411, 255, 177, 0,
	0, 0, 239, 247, 171, 164, 0, 108, 245, 169,
	163, 154, 133, 143, 201, 161, 202, 144, 174, 173,
	175, 0, 421, 0, 231, 253, 269, 118, 437, 0,
	238, 263, 264, 0, 0, 119, 137, 132, 200, 412,
	410, 405, 404, 153, 160, 207, 267, 190, 213, 122,
	252, 229, 433, 436, 431, 432, 480, 481, 527, 528,
	529, 505, 427, 0, 434, 435, 0, 510, 517, 518,
	484, 101, 110, 157, 266, 205, 135, 254, 417, 430,
	128, 440, 0, 0, 453, 458, 459, 471, 473, 474,
	475, 476, 483, 490, 491, 493, 499, 500, 501, 502,
	507, 514, 533, 103, 104, 111, 117, 123, 127, 131,
	134, 139, 142, 145, 147, 148, 149, 152, 162, 165,
	166, 167, 168, 178, 179, 180, 182, 185, 186, 187,
	188, 189, 192, 194, 195, 196, 197, 198, 199, 206,
	209, 215, 216, 217, 218, 219, 220, 221, 223, 224,
	225, 226, 232, 235, 241, 242, 251, 258, 262, 184,
	0, 0, 0, 0, 335, 0, 0, 0, 130, 332,
	0, 0, 0, 156, 0, 0, 0, 377, 158, 0,
	0, 230, 172, 0, 0, 0, 0, 366, 367, 0,
	0, 0, 0, 0, 0, 1001, 0, 61, 0, 0,
	333, 354, 353, 356, 357, 358, 359, 0, 0, 120,
	355, 360, 361, 362, 1002, 0, 0, 330, 347, 0,
	376, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	344, 345, 0, 0, 0, 0, 390, 0, 346, 0,
	0, 341, 342, 343, 348, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 138, 0, 0, 368, 0, 0,
	0, 259, 0, 0, 388, 203, 0, 234, 141, 155,
	116, 102, 112, 0, 140, 181, 210, 214, 374, 0,
	0, 0, 0, 124, 0, 212, 191, 250, 0, 0,
	193, 211, 159, 240, 204, 249, 260, 261, 237, 257,
	265, 227, 0, 0, 0, 0, 0, 105, 236, 248,
	121, 222, 107, 246, 233, 170, 150, 151, 106, 0,
	208, 129, 136, 126, 183, 0, 0, 0, 243, 244,
	125, 268, 113, 256, 109, 114, 255, 177, 0, 0,
	0, 239, 247, 171, 164, 0, 108, 245, 169, 163,
	154, 133, 143, 201, 161, 202, 144, 174, 173, 175,
	0, 0, 0, 231, 253, 269, 118, 0, 0, 238,
	263, 264, 0, 0, 119, 137, 132, 200, 176, 115,
	146, 228, 153, 160, 207, 267, 190, 213, 122, 252,
	229, 378, 389, 384, 385, 382, 383, 381, 380, 379,
	391, 369, 370, 371, 372, 375, 0, 386, 387, 373,
	101, 110, 157, 266, 205, 135, 254, 0, 0, 128,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 103, 104, 111, 117, 123, 127, 131, 134,
	139, 142, 145, 147, 148, 149, 152, 162, 165, 166,
	167, 168, 178, 179, 180, 182, 185, 186, 187, 188,
	189, 192, 194, 195, 196, 197, 198, 199, 206, 209,
	215, 216, 217, 218, 219, 220, 221, 223, 224, 225,
	226, 232, 235, 241, 242, 251, 258, 262, 184, 0,
	0, 0, 0, 335, 0, 0, 0, 130, 332, 0,
	0, 0, 156, 0, 0, 0, 377, 158, 0, 0,
	230, 172, 0, 0, 0, 0, 366, 367, 0, 0,
	0, 0, 0, 0, 0, 0, 61, 0, 602, 333,
	354, 353, 356, 357, 358, 359, 0, 0, 120, 355,
	360, 361, 362, 0, 0, 0, 330, 347, 0, 376,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 344,
	345, 0, 0, 0, 0, 390, 0, 346, 0, 0,
	341, 342, 343, 348, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 138, 0, 0, 368, 0, 0, 0,
	259, 0, 0, 388, 203, 0, 234, 141, 155, 116,
	102, 112, 0, 140, 181, 210, 214, 374, 0, 0,
	0, 0, 124, 0, 212, 191, 250, 0, 0, 193,
	211, 159, 240, 204, 249, 260, 261, 237, 257, 265,
	227, 0, 0, 0, 0, 0, 105, 236, 248, 121,
	222, 107, 246, 233, 170, 150, 151, 106, 0, 208,
	129, 136, 126, 183, 0, 0, 0, 243, 244, 125,
	268, 113, 256, 109, 114, 255, 177, 0, 0, 0,
	239, 247, 171, 164, 0, 108, 245, 169, 163, 154,
	133, 143, 201, 161, 202, 144, 174, 173, 175, 0,
	0, 0, 231, 253, 269, 118, 0, 0, 238, 263,
	264, 0, 0, 119, 137, 132, 200, 176, 115, 146,
	228, 153, 160, 207, 267, 190, 213, 122, 252, 229,
	378, 389, 384, 385, 382, 383, 381, 380, 379, 391,
	369, 370, 371, 372, 375, 0, 386, 387, 373, 101,
	110, 157, 266, 205, 135, 254, 0, 0, 128, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 104, 111, 117, 123, 127, 131, 134, 139,
	142, 145, 147, 148, 149, 152, 162, 165, 166, 167,
	168, 178, 179, 180, 182, 185, 186, 187, 188, 189,
	192, 194, 195, 196, 197, 198, 199, 206, 209, 215,
	216, 217, 218, 219, 220, 221, 223, 224, 225, 226,
	232, 235, 241, 242, 251, 258, 262, 184, 0, 0,
	0, 0, 335, 0, 0, 0, 130, 332, 0, 0,
	0, 156, 0, 0, 0, 377, 158, 0, 0, 230,
	172, 0, 0, 0, 0, 366, 367, 0, 0, 0,
	0, 0, 0, 0, 0, 61, 0, 0, 333, 354,
	353, 356, 357, 358, 359, 0, 0, 120, 355, 360,
	361, 362, 0, 0, 0, 330, 347, 0, 376, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 344, 345,
	326, 0, 0, 0, 390, 0, 346, 0, 0, 341,
	342, 343, 348, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 0, 0, 368, 0, 0, 0, 259,
	0, 0, 388, 203, 0, 234, 141, 155, 116, 102,
	112, 0, 140, 181, 210, 214, 374, 0, 0, 0,
	0, 124, 0, 212, 191, 250, 0, 0, 193, 211,
	159, 240, 204, 249, 260, 261, 237, 257, 265, 227,
	0, 0, 0, 0, 0, 105, 236, 248, 121, 222,
	107, 246, 233, 170, 150, 151, 106, 0, 208, 129,
	136, 126, 183, 0, 0, 0, 243, 244, 125, 268,
	113, 256, 109, 114, 255, 177, 0, 0, 0, 239,
	247, 171, 164, 0, 108, 245, 169, 163, 154, 133,
	143, 201, 161, 202, 144, 174, 173, 175, 0, 0,
	0, 231, 253, 269, 118, 0, 0, 238, 263, 264,
	0, 0, 119, 137, 132, 200, 176, 115, 146, 228,
	153, 160, 207, 267, 190, 213, 122, 252, 229, 378,
	389, 384, 385, 382, 383, 381, 380, 379, 391, 369,
	370, 371, 372, 375, 0, 386, 387, 373, 101, 110,
	157, 266, 205, 135, 254, 0, 0, 128, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	103, 104, 111, 117, 123, 127, 131, 134, 139, 142,
	145, 147, 148, 149, 152, 162, 165, 166, 167, 168,
	178, 179, 180, 182, 185, 186, 187, 188, 189, 192,
	194, 195, 196, 197, 198, 199, 206, 209, 215, 216,
	217, 218, 219, 220, 221, 223, 224, 225, 226, 232,
	235, 241, 242, 251, 258, 262, 184, 0, 0, 0,
	0, 335, 0, 0, 0, 130, 332, 0, 0, 0,
	156, 0, 0, 0, 377, 158, 0, 0, 230, 172,
	0, 0, 0, 0, 366, 367, 0, 0, 0, 0,
	0, 0, 0, 0, 61, 0, 0, 333, 354, 937,
	356, 357, 358, 359, 0, 0, 120, 355, 360, 361,
	362, 0, 0, 0, 330, 347, 0, 376, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 344, 345, 326,
	0, 0, 0, 390, 0, 346, 0, 0, 341, 342,
	343, 348, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 138, 0, 0, 368, 0, 0, 0, 259, 0,
	0, 388, 203, 0, 234, 141, 155, 116, 102, 112,
	0, 140, 181, 210, 214, 374, 0, 0, 0, 0,
	124, 0, 212, 191, 250, 0, 0, 193, 211, 159,
	240, 204, 249, 260, 261, 237, 257, 265, 227, 0,
	0, 0, 0, 0, 105, 236, 248, 121, 222, 107,
	246, 233, 170, 150, 151, 106, 0, 208, 129, 136,
	126, 183, 0, 0, 0, 243, 244, 125, 268, 113,
	256, 109, 114, 255, 177, 0, 0, 0, 239, 247,
	171, 164, 0, 108, 245, 169, 163, 154, 133, 143,
	201, 161, 202, 144, 174, 173, 175, 0, 0, 0,
	231, 253, 269, 118, 0, 0, 238, 263, 264, 0,
	0, 119, 137, 132, 200, 176, 115, 146, 228, 153,
	160, 207, 267, 190, 213, 122, 252, 229, 378, 389,
	384, 385, 382, 383, 381, 380, 379, 391, 369, 370,
	371, 372, 375, 0, 386, 387, 373, 101, 110, 157,
	266, 205, 135, 254, 0, 0, 128, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 103,
	104, 111, 117, 123, 127, 131, 134, 139, 142, 145,
	147, 148, 149, 152, 162, 165, 166, 167, 168, 178,
	179, 180, 182, 185, 186, 187, 188, 189, 192, 194,
	195, 196, 197, 198, 199, 206, 209, 215, 216, 217,
	218, 219, 220, 221, 223, 224, 225, 226, 232, 235,
	241, 242, 251, 258, 262, 184, 0, 0, 0, 0,
	335, 0, 0, 0, 130, 332, 0, 0, 0, 156,
	0, 0, 0, 377, 158, 0, 0, 230, 172, 0,
	0, 0, 0, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 0, 61, 0, 0, 333, 354, 934, 356,
	357, 358, 359, 0, 0, 120, 355, 360, 361, 362,
	0, 0, 0, 330, 347, 0, 376, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 344, 345, 326, 0,
	0, 0, 390, 0, 346, 0, 0, 341, 342, 343,
	348, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	138, 0, 0, 368, 0, 0, 0, 259, 0, 0,
	388, 203, 0, 234, 141, 155, 116, 102, 112, 0,
	140, 181, 210, 214, 374, 0, 0, 0, 0, 124,
	0, 212, 191, 250, 0, 0, 193, 211, 159, 240,
	204, 249, 260, 261, 237, 257, 265, 227, 0, 0,
	0, 0, 0, 105, 236, 248, 121, 222, 107, 246,
	233, 170, 150, 151, 106, 0, 208, 129, 136, 126,
	183, 0, 0, 0, 243, 244, 125, 268, 113, 256,
	109, 114, 255, 177, 0, 0, 0, 239, 247, 171,
	164, 0, 108, 245, 169, 163, 154, 133, 143, 201,
	161, 202, 144, 174, 173, 175, 0, 0, 0, 231,
	253, 269, 118, 0, 0, 238, 263, 264, 0, 0,
	119, 137, 132, 200, 176, 115, 146, 228, 153, 160,
	207, 267, 190, 213, 122, 252, 229, 378, 389, 384,
	385, 382, 383, 381, 380, 379, 391, 369, 370, 371,
	372, 375, 0, 386, 387, 373, 101, 110, 157, 266,
	205, 135, 254, 0, 0, 128, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 103, 104,
	111, 117, 123, 127, 131, 134, 139, 142, 145, 147,
	148, 149, 152, 162, 165, 166, 167, 168, 178, 179,
	180, 182, 185, 186, 187, 188, 189, 192, 194, 195,
	196, 197, 198, 199, 206, 209, 215, 216, 217, 218,
	219, 220, 221, 223, 224, 225, 226, 232, 235, 241,
	242, 251, 258, 262, 26, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 184, 0, 0, 0,
	0, 335, 0, 0, 0, 130, 332, 0, 0, 0,
	156, 0, 0, 0, 377, 158, 0, 0, 230, 172,
	0, 0, 0, 0, 366, 367, 0, 0, 0, 0,
	0, 0, 0, 0, 61, 0, 0, 333, 354, 353,
	356, 357, 358, 359, 0, 0, 120, 355, 360, 361,
	362, 0, 0, 0, 330, 347, 0, 376, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 344, 345, 0,
	0, 0, 0, 390, 0, 346, 0, 0, 341, 342,
	343, 348, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 138, 0, 0, 368, 0, 0, 0, 259, 0,
	0, 388, 203, 0, 234, 141, 155, 116, 102, 112,
	0, 140, 181, 210, 214, 374, 0, 0, 0, 0,
	124, 0, 212, 191, 250, 0, 0, 193, 211, 159,
	240, 204, 249, 260, 261, 237, 257, 265, 227, 0,
	0, 0, 0, 0, 105, 236, 248, 121, 222, 107,
	246, 233, 170, 150, 151, 106, 0, 208, 129, 136,
	126, 183, 0, 0, 0, 243, 244, 125, 268, 113,
	256, 109, 114, 255, 177, 0, 0, 0, 239, 247,
	171, 164, 0, 108, 245, 169, 163, 154, 133, 143,
	201, 161, 202, 144, 174, 173, 175, 0, 0, 0,
	231, 253, 269, 118, 0, 0, 238, 263, 264, 0,
	0, 119, 137, 132, 200, 176, 115, 146, 228, 153,
	160, 207, 267, 190, 213, 122, 252, 229, 378, 389,
	384, 385, 382, 383, 381, 380, 379, 391, 369, 370,
	371, 372, 375, 0, 386, 387, 373, 101, 110, 157,
	266, 205, 135, 254, 0, 0, 128, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 103,
	104, 111, 117, 123, 127, 131, 134, 139, 142, 145,
	147, 148, 149, 152, 162, 165, 166, 167, 168, 178,
	179, 180, 182, 185, 186, 187, 188, 189, 192, 194,
	195, 196, 197, 198, 199, 206, 209, 215, 216, 217,
	218, 219, 220, 221, 223, 224, 225, 226, 232, 235,
	241, 242, 251, 258, 262, 184, 0, 0, 0, 0,
	335, 0, 0, 0, 130, 332, 0, 0, 0, 156,
	0, 0, 0, 377, 158, 0, 0, 230, 172, 0,
	0, 0, 0, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 0, 61, 0, 0, 333, 354, 353, 356,
	357, 358, 359, 0, 0, 120, 355, 360, 361, 362,
	0, 0, 0, 330, 347, 0, 376, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 344, 345, 0, 0,
	0, 0, 390, 0, 346, 0, 0, 341, 342, 343,
	348, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	138, 0, 0, 368, 0, 0, 0, 259, 0, 0,
	388, 203, 0, 234, 141, 155, 116, 102, 112, 0,
	140, 181, 210, 214, 374, 0, 0, 0, 0, 124,
	0, 212, 191, 250, 0, 0, 193, 211, 159, 240,
	204, 249, 260, 261, 237, 257, 265, 227, 0, 0,
	0, 0, 0, 105, 236, 248, 121, 222, 107, 246,
	233, 170, 150, 151, 106, 0, 208, 129, 136, 126,
	183, 0, 0, 0, 243, 244, 125, 268, 113, 256,
	109, 114, 255, 177, 0, 0, 0, 239, 247, 171,
	164, 0, 108, 245, 169, 163, 154, 133, 143, 201,
	161, 202, 144, 174, 173, 175, 0, 0, 0, 231,
	253, 269, 118, 0, 0, 238, 263, 264, 0, 0,
	119, 137, 132, 200, 176, 115, 146, 228, 153, 160,
	207, 267, 190, 213, 122, 252, 229, 378, 389, 384,
	385, 382, 383, 381, 380, 379, 391, 369, 370, 371,
	372, 375, 0, 386, 387, 373, 101, 110, 157, 266,
	205, 135, 254, 0, 0, 128, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 103, 104,
	111, 117, 123, 127, 131, 134, 139, 142, 145, 147,
	148, 149, 152, 162, 165, 166, 167, 168, 178, 179,
	180, 182, 185, 186, 187, 188, 189, 192, 194, 195,
	196, 197, 198, 199, 206, 209, 215, 216, 217, 218,
	219, 220, 221, 223, 224, 225, 226, 232, 235, 241,
	242, 251, 258, 262, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 130, 0, 0, 0, 0, 156, 0,
	0, 0, 377, 158, 0, 0, 230, 172, 0, 0,
	0, 0, 366, 367, 0, 0, 0, 0, 0, 0,
	0, 0, 61, 0, 0, 333, 354, 353, 356, 357,
	358, 359, 0, 0, 120, 355, 360, 361, 362, 0,
	0, 0, 0, 347, 0, 376, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 344, 345, 0, 0, 0,
	0, 390, 0, 346, 0, 0, 341, 342, 343, 348,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	0, 0, 368, 0, 0, 0, 259, 0, 0, 388,
	203, 0, 234, 141, 155, 116, 102, 112, 0, 140,
	181, 210, 214, 374, 0, 0, 0, 0, 124, 0,
	212, 191, 250, 0, 1688, 193, 211, 159, 240, 204,
	249, 260, 261, 237, 257, 265, 227, 0, 0, 0,
	0, 0, 105, 236, 248, 121, 222, 107, 246, 233,
	170, 150, 151, 106, 0, 208, 129, 136, 126, 183,
	0, 0, 0, 243, 244, 125, 268, 113, 256, 109,
	114, 255, 177, 0, 0, 0, 239, 247, 171, 164,
	0, 108, 245, 169, 163, 154, 133, 143, 201, 161,
	202, 144, 174, 173, 175, 0, 0, 0, 231, 253,
	269, 118, 0, 0, 238, 263, 264, 0, 0, 119,
	137, 132, 200, 176, 115, 146, 228, 153, 160, 207,
	267, 190, 213, 122, 252, 229, 378, 389, 384, 385,
	382, 383, 381, 380, 379, 391, 369, 370, 371, 372,
	375, 0, 386, 387, 373, 101, 110, 157, 266, 205,
	135, 254, 0, 0, 128, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 104, 111,
	117, 123, 127, 131, 134, 139, 142, 145, 147, 148,
	149, 152, 162, 165, 166, 167, 168, 178, 179, 180,
	182, 185, 186, 187, 188, 189, 192, 194, 195, 196,
	197, 198, 199, 206, 209, 215, 216, 217, 218, 219,
	220, 221, 223, 224, 225, 226, 232, 235, 241, 242,
	251, 258, 262, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 0, 0, 0, 0, 156, 0, 0,
	0, 377, 158, 0, 0, 230, 172, 0, 0, 0,
	0, 366, 367, 0, 0, 0, 0, 0, 0, 0,
	0, 61, 0, 602, 333, 354, 353, 356, 357, 358,
	359, 0, 0, 120, 355, 360, 361, 362, 0, 0,
	0, 0, 347, 0, 376, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 344, 345, 0, 0, 0, 0,
	390, 0, 346, 0, 0, 341, 342, 343, 348, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 0,
	0, 368, 0, 0, 0, 259, 0, 0, 388, 203,
	0, 234, 141, 155, 116, 102, 112, 0, 140, 181,
	210, 214, 374, 0, 0, 0, 0, 124, 0, 212,
	191, 250, 0, 0, 193, 211, 159, 240, 204, 249,
	260, 261, 237, 257, 265, 227, 0, 0, 0, 0,
	0, 105, 236, 248, 121, 222, 107, 246, 233, 170,
	150, 151, 106, 0, 208, 129, 136, 126, 183, 0,
	0, 0, 243, 244, 125, 268, 113, 256, 109, 114,
	255, 177, 0, 0, 0, 239, 247, 171, 164, 0,
	108, 245, 169, 163, 154, 133, 143, 201, 161, 202,
	144, 174, 173, 175, 0, 0, 0, 231, 253, 269,
	118, 0, 0, 238, 263, 264, 0, 0, 119, 137,
	132, 200, 176, 115, 146, 228, 153, 160, 207, 267,
	190, 213, 122, 252, 229, 378, 389, 384, 385, 382,
	383, 381, 380, 379, 391, 369, 370, 371, 372, 375,
	0, 386, 387, 373, 101, 110, 157, 266, 205, 135,
	254, 0, 0, 128, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 103, 104, 111, 117,
	123, 127, 131, 134, 139, 142, 145, 147, 148, 149,
	152, 162, 165, 166, 167, 168, 178, 179, 180, 182,
	185, 186, 187, 188, 189, 192, 194, 195, 196, 197,
	198, 199, 206, 209, 215, 216, 217, 218, 219, 220,
	221, 223, 224, 225, 226, 232, 235, 241, 242, 251,
	258, 262, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 130, 0, 0, 0, 0, 156, 0, 0, 0,
	377, 158, 0, 0, 230, 172, 0, 0, 0, 0,
	366, 367, 0, 0, 0, 0, 0, 0, 0, 0,
	61, 0, 0, 333, 354, 353, 356, 357, 358, 359,
	0, 0, 120, 355, 360, 361, 362, 0, 0, 0,
	0, 347, 0, 376, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 344, 345, 0, 0, 0, 0, 390,
	0, 346, 0, 0, 341, 342, 343, 348, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 138, 0, 0,
	368, 0, 0, 0, 259, 0, 0, 388, 203, 0,
	234, 141, 155, 116, 102, 112, 0, 140, 181, 210,
	214, 374, 0, 0, 0, 0, 124, 0, 212, 191,
	250, 0, 0, 193, 211, 159, 240, 204, 249, 260,
	261, 237, 257, 265, 227, 0, 0, 0, 0, 0,
	105, 236, 248, 121, 222, 107, 246, 233, 170, 150,
	151, 106, 0, 208, 129, 136, 126, 183, 0, 0,
	0, 243, 244, 125, 268, 113, 256, 109, 114, 255,
	177, 0, 0, 0, 239, 247, 171, 164, 0, 108,
	245, 169, 163, 154, 133, 143, 201, 161, 202, 144,
	174, 173, 175, 0, 0, 0, 231, 253, 269, 118,
	0, 0, 238, 263, 264, 0, 0, 119, 137, 132,
	200, 176, 115, 146, 228, 153, 160, 207, 267, 190,
	213, 122, 252, 229, 378, 389, 384, 385, 382, 383,
	381, 380, 379, 391, 369, 370, 371, 372, 375, 0,
	386, 387, 373, 101, 110, 157, 266, 205, 135, 254,
	0, 0, 128, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 103, 104, 111, 117, 123,
	127, 131, 134, 139, 142, 145, 147, 148, 149, 152,
	162, 165, 166, 167, 168, 178, 179, 180, 182, 185,
	186, 187, 188, 189, 192, 194, 195, 196, 197, 198,
	199, 206, 209, 215, 216, 217, 218, 219, 220, 221,
	223, 224, 225, 226, 232, 235, 241, 242, 251, 258,
	262, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	130, 0, 0, 0, 0, 156, 0, 0, 0, 0,
	158, 0, 0, 230, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 413, 0, 0, 0, 0, 0, 0, 0,
	0, 120, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 643, 642,
	652, 653, 645, 646, 647, 648, 649, 650, 651, 644,
	0, 0, 654, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 259, 0, 0, 0, 203, 0, 234,
	141, 155, 116, 102, 112, 0, 140, 181, 210, 214,
	0, 0, 0, 0, 0, 124, 0, 212, 191, 250,
	0, 0, 193, 211, 159, 240, 204, 249, 260, 261,
	237, 257, 265, 227, 0, 0, 0, 0, 0, 105,
	236, 248, 121, 222, 107, 246, 233, 170, 150, 151,
	106, 0, 208, 129, 136, 126, 183, 0, 0, 0,
	243, 244, 125, 268, 113, 256, 109, 114, 255, 177,
	0, 0, 0, 239, 247, 171, 164, 0, 108, 245,
	169, 163, 154, 133, 143, 201, 161, 202, 144, 174,
	173, 175, 0, 0, 0, 231, 253, 269, 118, 0,
	0, 238, 263, 264, 0, 0, 119, 137, 132, 200,
	176, 115, 146, 228, 153, 160, 207, 267, 190, 213,
	122, 252, 229, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 110, 157, 266, 205, 135, 254, 0,
	0, 128, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 103, 104, 111, 117, 123, 127,
	131, 134, 139, 142, 145, 147, 148, 149, 152, 162,
	165, 166, 167, 168, 178, 179, 180, 182, 185, 186,
	187, 188, 189, 192, 194, 195, 196, 197, 198, 199,
	206, 209, 215, 216, 217, 218, 219, 220, 221, 223,
	224, 225, 226, 232, 235, 241, 242, 251, 258, 262,
	184, 0, 0, 0, 980, 0, 0, 0, 0, 130,
	0, 0, 0, 0, 156, 0, 0, 0, 0, 158,
	0, 0, 230, 172, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 982, 984, 0, 0, 0, 0,
	0, 99, 0, 986, 0, 0, 0, 0, 0, 0,
	120, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 0, 0, 0,
	0, 0, 259, 0, 983, 0, 203, 0, 234, 141,
	155, 116, 102, 112, 0, 140, 181, 210, 214, 0,
	0, 0, 0, 0, 124, 0, 212, 191, 250, 0,
	0, 193, 211, 159, 240, 204, 249, 260, 261, 237,
	257, 265, 227, 0, 0, 0, 0, 0, 105, 236,
	248, 121, 222, 107, 246, 233, 170, 150, 151, 106,
	0, 208, 129, 136, 126, 183, 0, 0, 0, 243,
	244, 125, 268, 113, 256, 109, 114, 255, 177, 0,
	0, 0, 239, 247, 171, 164, 0, 108, 245, 169,
	163, 154, 133, 143, 201, 161, 202, 144, 174, 173,
	175, 0, 0, 0, 231, 253, 269, 118, 0, 0,
	238, 263, 264, 0, 0, 119, 137, 132, 200, 176,
	115, 146, 228, 153, 160, 207, 267, 190, 213, 122,
	252, 229, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 110, 157, 266, 205, 135, 254, 0, 0,
	128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 104, 111, 117, 123, 127, 131,
	134, 139, 142, 145, 147, 148, 149, 152, 162, 165,
	166, 167, 168, 178, 179, 180, 182, 185, 186, 187,
	188, 189, 192, 194, 195, 196, 197, 198, 199, 206,
	209, 215, 216, 217, 218, 219, 220, 221, 223, 224,
	225, 226, 232, 235, 241, 242, 251, 258, 262, 184,
	0, 0, 0, 980, 0, 0, 0, 0, 130, 0,
	0, 0, 0, 156, 0, 0, 0, 0, 158, 0,
	0, 230, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 982, 984, 0, 0, 0, 0, 0,
	99, 0, 986, 0, 0, 0, 0, 0, 0, 120,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 138, 0, 0, 0, 0, 0,
	0, 259, 0, 983, 0, 203, 0, 234, 141, 155,
	116, 102, 112, 0, 140, 181, 210, 214, 0, 0,
	0, 0, 0, 124, 0, 212, 191, 250, 0, 0,
	978, 211, 159, 240, 204, 249, 260, 261, 237, 257,
	265, 227, 0, 0, 0, 0, 0, 105, 236, 248,
	121, 222, 107, 246, 233, 170, 150, 151, 106, 0,
	208, 129, 136, 126, 183, 0, 0, 0, 243, 244,
	125, 268, 113, 256, 109, 114, 255, 177, 0, 0,
	0, 239, 247, 171, 164, 0, 108, 245, 169, 163,
	154, 133, 143, 201, 161, 202, 144, 174, 173, 175,
	0, 0, 0, 231, 253, 269, 118, 0, 0, 238,
	263, 264, 0, 0, 119, 137, 132, 200, 176, 115,
	146, 228, 153, 160, 207, 267, 190, 213, 122, 252,
	229, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 110, 157, 266, 205, 135, 254, 0, 0, 128,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 103, 104, 111, 117, 123, 127, 131, 134,
	139, 142, 145, 147, 148, 149, 152, 162, 165, 166,
	167, 168, 178, 179, 180, 182, 185, 186, 187, 188,
	189, 192, 194, 195, 196, 197, 198, 199, 206, 209,
	215, 216, 217, 218, 219, 220, 221, 223, 224, 225,
	226, 232, 235, 241, 242, 251, 258, 262, 184, 0,
	0, 0, 631, 0, 0, 0, 0, 130, 0, 0,
	0, 0, 156, 0, 0, 0, 0, 158, 0, 0,
	230, 172, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 413,
	0, 633, 0, 0, 0, 0, 0, 0, 120, 0,
	0, 0, 0, 0, 628, 627, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 629, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 138, 0, 0, 0, 0, 0, 0,
	259, 0, 0, 0, 203, 0, 234, 141, 155, 116,
	102, 112, 0, 140, 181, 210, 214, 0, 0, 0,
	0, 0, 124, 0, 212, 191, 250, 0, 0, 193,
	211, 159, 240, 204, 249, 260, 261, 237, 257, 265,
	227, 0, 0, 0, 0, 0, 105, 236, 248, 121,
	222, 107, 246, 233, 170, 150, 151, 106, 0, 208,
	129, 136, 126, 183, 0, 0, 0, 243, 244, 125,
	268, 113, 256, 109, 114, 255, 177, 0, 0, 0,
	239, 247, 171, 164, 0, 108, 245, 169, 163, 154,
	133, 143, 201, 161, 202, 144, 174, 173, 175, 0,
	0, 0, 231, 253, 269, 118, 0, 0, 238, 263,
	264, 0, 0, 119, 137, 132, 200, 176, 115, 146,
	228, 153, 160, 207, 267, 190, 213, 122, 252, 229,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	110, 157, 266, 205, 135, 254, 0, 0, 128, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 104, 111, 117, 123, 127, 131, 134, 139,
	142, 145, 147, 148, 149, 152, 162, 165, 166, 167,
	168, 178, 179, 180, 182, 185, 186, 187, 188, 189,
	192, 194, 195, 196, 197, 198, 199, 206, 209, 215,
	216, 217, 218, 219, 220, 221, 223, 224, 225, 226,
	232, 235, 241, 242, 251, 258, 262, 26, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 130, 0,
	0, 0, 0, 156, 0, 0, 0, 0, 158, 0,
	0, 230, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 61, 0, 0,
	413, 0, 0, 0, 0, 0, 0, 0, 0, 120,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 138, 0, 0, 0, 0, 0,
	0, 259, 0, 0, 0, 203, 0, 234, 141, 155,
	116, 102, 112, 0, 140, 181, 210, 214, 0, 0,
	0, 0, 0, 124, 0, 212, 191, 250, 0, 0,
	193, 211, 159, 240, 204, 249, 260, 261, 237, 257,
	265, 227, 0, 0, 0, 0, 0, 105, 236, 248,
	121, 222, 107, 246, 233, 170, 150, 151, 106, 0,
	208, 129, 136, 126, 183, 0, 0, 0, 243, 244,
	125, 268, 113, 256, 109, 114, 255, 177, 0, 0,
	0, 239, 247, 171, 164, 0, 108, 245, 169, 163,
	154, 133, 143, 201, 161, 202, 144, 174, 173, 175,
	0, 0, 0, 231, 253, 269, 118, 0, 0, 238,
	263, 264, 0, 0, 119, 137, 132, 200, 176, 115,
	146, 228, 153, 160, 207, 267, 190, 213, 122, 252,
	229, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 110, 157, 266, 205, 135, 254, 0, 0, 128,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 103, 104, 111, 117, 123, 127, 131, 134,
	139, 142, 145, 147, 148, 149, 152, 162, 165, 166,
	167, 168, 178, 179, 180, 182, 185, 186, 187, 188,
	189, 192, 194, 195, 196, 197, 198, 199, 206, 209,
	215, 216, 217, 218, 219, 220, 221, 223, 224, 225,
	226, 232, 235, 241, 242, 251, 258, 262, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 130, 0, 0,
	0, 0, 156, 0, 0, 0, 0, 158, 0, 0,
	230, 172, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	0, 986, 0, 0, 0, 0, 0, 0, 120, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 138, 0, 0, 0, 0, 0, 0,
	259, 0, 0, 0, 203, 0, 234, 141, 155, 116,
	102, 112, 0, 140, 181, 210, 214, 0, 0, 0,
	0, 0, 124, 0, 212, 191, 250, 0, 0, 193,
	211, 159, 240, 204, 249, 260, 261, 237, 257, 265,
	227, 0, 0, 0, 0, 0, 105, 236, 248, 121,
	222, 107, 246, 233, 170, 150, 151, 106, 0, 208,
	129, 136, 126, 183, 0, 0, 0, 243, 244, 125,
	268, 113, 256, 109, 114, 255, 177, 0, 0, 0,
	239, 247, 171, 164, 0, 108, 245, 169, 163, 154,
	133, 143, 201, 161, 202, 144, 174, 173, 175, 0,
	0, 0, 231, 253, 269, 118, 0, 0, 238, 263,
	264, 0, 0, 119, 137, 132, 200, 176, 115, 146,
	228, 153, 160, 207, 267, 190, 213, 122, 252, 229,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	110, 157, 266, 205, 135, 254, 0, 0, 128, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1198, 0, 0, 0, 0, 0, 0,
	0, 103, 104, 111, 117, 123, 127, 131, 134, 139,
	142, 145, 147, 148, 149, 152, 162, 165, 166, 167,
	168, 178, 179, 180, 182, 185, 186, 187, 188, 189,
	192, 194, 195, 196, 197, 198, 199, 206, 209, 215,
	216, 217, 218, 219, 220, 221, 223, 224, 225, 226,
	232, 235, 241, 242, 251, 258, 262, 26, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 130, 0,
	0, 0, 0, 156, 0, 0, 0, 0, 158, 0,
	0, 230, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 61, 0, 0,
	99, 0, 0, 0, 0, 0, 0, 0, 0, 120,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 138, 0, 0, 0, 0, 0,
	0, 259, 0, 0, 0, 203, 0, 234, 141, 155,
	116, 102, 112, 0, 140, 181, 210, 214, 0, 0,
	0, 0, 0, 124, 0, 212, 191, 250, 0, 0,
	193, 211, 159, 240, 204, 249, 260, 261, 237, 257,
	265, 227, 0, 0, 0, 0, 0, 105, 236, 248,
	121, 222, 107, 246, 233, 170, 150, 151, 106, 0,
	208, 129, 136, 126, 183, 0, 0, 0, 243, 244,
	125, 268, 113, 256, 109, 114, 255, 177, 0, 0,
	0, 239, 247, 171, 164, 0, 108, 245, 169, 163,
	154, 133, 143, 201, 161, 202, 144, 174, 173, 175,
	0, 0, 0, 231, 253, 269, 118, 0, 0, 238,
	263, 264, 0, 0, 119, 137, 132, 200, 176, 115,
	146, 228, 153, 160, 207, 267, 190, 213, 122, 252,
	229, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 110, 157, 266, 205, 135, 254, 0, 0, 128,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 103, 104, 111, 117, 123, 127, 131, 134,
	139, 142, 145, 147, 148, 149, 152, 162, 165, 166,
	167, 168, 178, 179, 180, 182, 185, 186, 187, 188,
	189, 192, 194, 195, 196, 197, 198, 199, 206, 209,
	215, 216, 217, 218, 219, 220, 221, 223, 224, 225,
	226, 232, 235, 241, 242, 251, 258, 262, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 130, 0, 0,
	0, 0, 156, 0, 0, 0, 0, 158, 0, 0,
	230, 172, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 413,
	0, 0, 874, 0, 0, 875, 0, 0, 120, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 138, 0, 0, 0, 0, 0, 0,
	259, 0, 0, 0, 203, 0, 234, 141, 155, 116,
	102, 112, 0, 140, 181, 210, 214, 0, 0, 0,
	0, 0, 124, 0, 212, 191, 250, 0, 0, 193,
	211, 159, 240, 204, 249, 260, 261, 237, 257, 265,
	227, 0, 0, 0, 0, 0, 105, 236, 248, 121,
	222, 107, 246, 233, 170, 150, 151, 106, 0, 208,
	129, 136, 126, 183, 0, 0, 0, 243, 244, 125,
	268, 113, 256, 109, 114, 255, 177, 0, 0, 0,
	239, 247, 171, 164, 0, 108, 245, 169, 163, 154,
	133, 143, 201, 161, 202, 144, 174, 173, 175, 0,
	0, 0, 231, 253, 269, 118, 0, 0, 238, 263,
	264, 0, 0, 119, 137, 132, 200, 176, 115, 146,
	228, 153, 160, 207, 267, 190, 213, 122, 252, 229,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	110, 157, 266, 205, 135, 254, 0, 0, 128, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 104, 111, 117, 123, 127, 131, 134, 139,
	142, 145, 147, 148, 149, 152, 162, 165, 166, 167,
	168, 178, 179, 180, 182, 185, 186, 187, 188, 189,
	192, 194, 195, 196, 197, 198, 199, 206, 209, 215,
	216, 217, 218, 219, 220, 221, 223, 224, 225, 226,
	232, 235, 241, 242, 251, 258, 262, 184, 0, 0,
	0, 0, 0, 0, 0, 0, 130, 747, 0, 0,
	0, 156, 0, 0, 0, 0, 158, 0, 0, 230,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 413, 0,
	746, 0, 0, 0, 0, 0, 0, 120, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 0, 0, 0, 0, 0, 0, 259,
	0, 0, 0, 203, 0, 234, 141, 155, 116, 102,
	112, 0, 140, 181, 210, 214, 0, 0, 0, 0,
	0, 124, 0, 212, 191, 250, 0, 0, 193, 211,
	159, 240, 204, 249, 260, 261, 237, 257, 265, 227,
	0, 0, 0, 0, 0, 105, 236, 248, 121, 222,
	107, 246, 233, 170, 150, 151, 106, 0, 208, 129,
	136, 126, 183, 0, 0, 0, 243, 244, 125, 268,
	113, 256, 109, 114, 255, 177, 0, 0, 0, 239,
	247, 171, 164, 0, 108, 245, 169, 163, 154, 133,
	143, 201, 161, 202, 144, 174, 173, 175, 0, 0,
	0, 231, 253, 269, 118, 0, 0, 238, 263, 264,
	0, 0, 119, 137, 132, 200, 176, 115, 146, 228,
	153, 160, 207, 267, 190, 213, 122, 252, 229, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 110,
	157, 266, 205, 135, 254, 0, 0, 128, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	103, 104, 111, 117, 123, 127, 131, 134, 139, 142,
	145, 147, 148, 149, 152, 162, 165, 166, 167, 168,
	178, 179, 180, 182, 185, 186, 187, 188, 189, 192,
	194, 195, 196, 197, 198, 199, 206, 209, 215, 216,
	217, 218, 219, 220, 221, 223, 224, 225, 226, 232,
	235, 241, 242, 251, 258, 262, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 130, 0, 0, 0, 0,
	156, 0, 0, 0, 0, 158, 0, 0, 230, 172,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 0, 986,
	0, 0, 0, 0, 0, 0, 120, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 138, 0, 0, 0, 0, 0, 0, 259, 0,
	0, 0, 203, 0, 234, 141, 155, 116, 102, 112,
	0, 140, 181, 210, 214, 0, 0, 0, 0, 0,
	124, 0, 212, 191, 250, 0, 0, 193, 211, 159,
	240, 204, 249, 260, 261, 237, 257, 265, 227, 0,
	0, 0, 0, 0, 105, 236, 248, 121, 222, 107,
	246, 233, 170, 150, 151, 106, 0, 208, 129, 136,
	126, 183, 0, 0, 0, 243, 244, 125, 268, 113,
	256, 109, 114, 255, 177, 0, 0, 0, 239, 247,
	171, 164, 0, 108, 245, 169, 163, 154, 133, 143,
	201, 161, 202, 144, 174, 173, 175, 0, 0, 0,
	231, 253, 269, 118, 0, 0, 238, 263, 264, 0,
	0, 119, 137, 132, 200, 176, 115, 146, 228, 153,
	160, 207, 267, 190, 213, 122, 252, 229, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 110, 157,
	266, 205, 135, 254, 0, 0, 128, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 103,
	104, 111, 117, 123, 127, 131, 134, 139, 142, 145,
	147, 148, 149, 152, 162, 165, 166, 167, 168, 178,
	179, 180, 182, 185, 186, 187, 188, 189, 192, 194,
	195, 196, 197, 198, 199, 206, 209, 215, 216, 217,
	218, 219, 220, 221, 223, 224, 225, 226, 232, 235,
	241, 242, 251, 258, 262, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 130, 0, 0, 0, 0, 156,
	0, 0, 0, 0, 158, 0, 0, 230, 172, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 61, 0, 0, 99, 0, 0, 0,
	0, 0, 0, 0, 0, 120, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	138, 0, 0, 0, 0, 0, 0, 259, 0, 0,
	0, 203, 0, 234, 141, 155, 116, 102, 112, 0,
	140, 181, 210, 214, 0, 0, 0, 0, 0, 124,
	0, 212, 191, 250, 0, 0, 193, 211, 159, 240,
	204, 249, 260, 261, 237, 257, 265, 227, 0, 0,
	0, 0, 0, 105, 236, 248, 121, 222, 107, 246,
	233, 170, 150, 151, 106, 0, 208, 129, 136, 126,
	183, 0, 0, 0, 243, 244, 125, 268, 113, 256,
	109, 114, 255, 177, 0, 0, 0, 239, 247, 171,
	164, 0, 108, 245, 169, 163, 154, 133, 143, 201,
	161, 202, 144, 174, 173, 175, 0, 0, 0, 231,
	253, 269, 118, 0, 0, 238, 263, 264, 0, 0,
	119, 137, 132, 200, 176, 115, 146, 228, 153, 160,
	207, 267, 190, 213, 122, 252, 229, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 110, 157, 266,
	205, 135, 254, 0, 0, 128, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 103, 104,
	111, 117, 123, 127, 131, 134, 139, 142, 145, 147,
	148, 149, 152, 162, 165, 166, 167, 168, 178, 179,
	180, 182, 185, 186, 187, 188, 189, 192, 194, 195,
	196, 197, 198, 199, 206, 209, 215, 216, 217, 218,
	219, 220, 221, 223, 224, 225, 226, 232, 235, 241,
	242, 251, 258, 262, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 130, 0, 0, 0, 0, 156, 0,
	0, 0, 0, 158, 0, 0, 230, 172, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 413, 0, 633, 0, 0,
	0, 0, 0, 0, 120, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	0, 0, 0, 0, 0, 0, 259, 0, 0, 0,
	203, 0, 234, 141, 155, 116, 102, 112, 0, 140,
	181, 210, 214, 0, 0, 0, 0, 0, 124, 0,
	212, 191, 250, 0, 0, 193, 211, 159, 240, 204,
	249, 260, 261, 237, 257, 265, 227, 0, 0, 0,
	0, 0, 105, 236, 248, 121, 222, 107, 246, 233,
	170, 150, 151, 106, 0, 208, 129, 136, 126, 183,
	0, 0, 0, 243, 244, 125, 268, 113, 256, 109,
	114, 255, 177, 0, 0, 0, 239, 247, 171, 164,
	0, 108, 245, 169, 163, 154, 133, 143, 201, 161,
	202, 144, 174, 173, 175, 0, 0, 0, 231, 253,
	269, 118, 0, 0, 238, 263, 264, 0, 0, 119,
	137, 132, 200, 176, 115, 146, 228, 153, 160, 207,
	267, 190, 213, 122, 252, 229, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 110, 157, 266, 205,
	135, 254, 0, 0, 128, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 104, 111,
	117, 123, 127, 131, 134, 139, 142, 145, 147, 148,
	149, 152, 162, 165, 166, 167, 168, 178, 179, 180,
	182, 185, 186, 187, 188, 189, 192, 194, 195, 196,
	197, 198, 199, 206, 209, 215, 216, 217, 218, 219,
	220, 221, 223, 224, 225, 226, 232, 235, 241, 242,
	251, 258, 262, 184, 0, 0, 0, 0, 0, 0,
	0, 717, 130, 0, 0, 0, 0, 156, 0, 0,
	0, 0, 158, 0, 0, 230, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 0, 0, 0, 0, 0,
	0, 0, 0, 120, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 0,
	0, 0, 0, 0, 0, 259, 0, 0, 0, 203,
	0, 234, 141, 155, 116, 102, 112, 0, 140, 181,
	210, 214, 0, 0, 0, 0, 0, 124, 0, 212,
	191, 250, 0, 0, 193, 211, 159, 240, 204, 249,
	260, 261, 237, 257, 265, 227, 0, 0, 0, 0,
	0, 105, 236, 248, 121, 222, 107, 246, 233, 170,
	150, 151, 106, 0, 208, 129, 136, 126, 183, 0,
	0, 0, 243, 244, 125, 268, 113, 256, 109, 114,
	255, 177, 0, 0, 0, 239, 247, 171, 164, 0,
	108, 245, 169, 163, 154, 133, 143, 201, 161, 202,
	144, 174, 173, 175, 0, 0, 0, 231, 253, 269,
	118, 0, 0, 238, 263, 264, 0, 0, 119, 137,
	132, 200, 176, 115, 146, 228, 153, 160, 207, 267,
	190, 213, 122, 252, 229, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 110, 157, 266, 205, 135,
	254, 0, 0, 128, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 103, 104, 111, 117,
	123, 127, 131, 134, 139, 142, 145, 147, 148, 149,
	152, 162, 165, 166, 167, 168, 178, 179, 180, 182,
	185, 186, 187, 188, 189, 192, 194, 195, 196, 197,
	198, 199, 206, 209, 215, 216, 217, 218, 219, 220,
	221, 223, 224, 225, 226, 232, 235, 241, 242, 251,
	258, 262, 394, 0, 0, 0, 0, 0, 0, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 130, 0,
	0, 0, 0, 156, 0, 0, 0, 0, 158, 0,
	0, 230, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 0, 0, 0, 0, 0, 0, 0, 0, 120,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 138, 0, 0, 0, 0, 0,
	0, 259, 0, 0, 0, 203, 0, 234, 141, 155,
	116, 102, 112, 0, 140, 181, 210, 214, 0, 0,
	0, 0, 0, 124, 0, 212, 191, 250, 0, 0,
	193, 211, 159, 240, 204, 249, 260, 261, 237, 257,
	265, 227, 0, 0, 0, 0, 0, 105, 236, 248,
	121, 222, 107, 246, 233, 170, 150, 151, 106, 0,
	208, 129, 136, 126, 183, 0, 0, 0, 243, 244,
	125, 268, 113, 256, 109, 114, 255, 177, 0, 0,
	0, 239, 247, 171, 164, 0, 108, 245, 169, 163,
	154, 133, 143, 201, 161, 202, 144, 174, 173, 175,
	0, 0, 0, 231, 253, 269, 118, 0, 0, 238,
	263, 264, 0, 0, 119, 137, 132, 200, 176, 115,
	146, 228, 153, 160, 207, 267, 190, 213, 122, 252,
	229, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 110, 157, 266, 205, 135, 254, 0, 0, 128,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 103, 104, 111, 117, 123, 127, 131, 134,
	139, 142, 145, 147, 148, 149, 152, 162, 165, 166,
	167, 168, 178, 179, 180, 182, 185, 186, 187, 188,
	189, 192, 194, 195, 196, 197, 198, 199, 206, 209,
	215, 216, 217, 218, 219, 220, 221, 223, 224, 225,
	226, 232, 235, 241, 242, 251, 258, 262, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 130, 0, 0,
	0, 0, 156, 0, 0, 0, 0, 158, 0, 0,
	230, 172, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	0, 0, 0, 0, 0, 0, 0, 0, 120, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 138, 0, 0, 0, 96, 0, 0,
	259, 0, 0, 0, 203, 0, 234, 141, 155, 116,
	102, 112, 0, 140, 181, 210, 214, 0, 0, 0,
	0, 0, 124, 0, 212, 191, 250, 0, 0, 193,
	211, 159, 240, 204, 249, 260, 261, 237, 257, 265,
	227, 0, 0, 0, 0, 0, 105, 236, 248, 121,
	222, 107, 246, 233, 170, 150, 151, 106, 0, 208,
	129, 136, 126, 183, 0, 0, 0, 243, 244, 125,
	268, 113, 256, 109, 114, 255, 177, 0, 0, 0,
	239, 247, 171, 164, 0, 108, 245, 169, 163, 154,
	133, 143, 201, 161, 202, 144, 174, 173, 175, 0,
	0, 0, 231, 253, 269, 118, 0, 0, 238, 263,
	264, 0, 0, 119, 137, 132, 200, 176, 115, 146,
	228, 153, 160, 207, 267, 190, 213, 122, 252, 229,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	110, 157, 266, 205, 135, 254, 0, 0, 128, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 104, 111, 117, 123, 127, 131, 134, 139,
	142, 145, 147, 148, 149, 152, 162, 165, 166, 167,
	168, 178, 179, 180, 182, 185, 186, 187, 188, 189,
	192, 194, 195, 196, 197, 198, 199, 206, 209, 215,
	216, 217, 218, 219, 220, 221, 223, 224, 225, 226,
	232, 235, 241, 242, 251, 258, 262, 184, 0, 0,
	0, 0, 0, 0, 0, 0, 130, 0, 0, 0,
	0, 156, 0, 0, 0, 0, 158, 0, 0, 230,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 413, 0,
	0, 0, 0, 0, 0, 0, 0, 120, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 0, 0, 0, 0, 0, 0, 259,
	0, 0, 0, 203, 0, 234, 141, 155, 116, 102,
	112, 0, 140, 181, 210, 214, 0, 0, 0, 0,
	0, 124, 0, 212, 191, 250, 0, 0, 193, 211,
	159, 240, 204, 249, 260, 261, 237, 257, 265, 227,
	0, 0, 0, 0, 0, 105, 236, 248, 121, 222,
	107, 246, 233, 170, 150, 151, 106, 0, 208, 129,
	136, 126, 183, 0, 0, 0, 243, 244, 125, 268,
	113, 256, 109, 114, 255, 177, 0, 0, 0, 239,
	247, 171, 164, 0, 108, 245, 169, 163, 154, 133,
	143, 201, 161, 202, 144, 174, 173, 175, 0, 0,
	0, 231, 253, 269, 118, 0, 0, 238, 263, 264,
	0, 0, 119, 137, 132, 200, 176, 115, 146, 228,
	153, 160, 207, 267, 190, 213, 122, 252, 229, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 110,
	157, 266, 205, 135, 254, 0, 0, 128, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	103, 104, 111, 117, 123, 127, 131, 134, 139, 142,
	145, 147, 148, 149, 152, 162, 165, 166, 167, 168,
	178, 179, 180, 182, 185, 186, 187, 188, 189, 192,
	194, 195, 196, 197, 198, 199, 206, 209, 215, 216,
	217, 218, 219, 220, 221, 223, 224, 225, 226, 232,
	235, 241, 242, 251, 258, 262, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 130, 0, 0, 0, 0,
	156, 0, 0, 0, 0, 158, 0, 0, 230, 172,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 0, 0,
	0, 0, 0, 0, 0, 0, 120, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 138, 0, 0, 0, 0, 0, 0, 259, 0,
	0, 0, 203, 0, 234, 141, 155, 116, 102, 112,
	0, 140, 181, 210, 214, 0, 0, 0, 0, 0,
	124, 0, 212, 191, 250, 0, 0, 193, 211, 159,
	240, 204, 249, 260, 261, 237, 257, 265, 227, 0,
	0, 0, 0, 0, 105, 236, 248, 121, 222, 107,
	246, 233, 170, 150, 151, 106, 0, 208, 129, 136,
	126, 183, 0, 0, 0, 243, 244, 125, 268, 113,
	256, 109, 114, 255, 177, 0, 0, 0, 239, 247,
	171, 164, 0, 108, 245, 169, 163, 154, 133, 143,
	201, 161, 202, 144, 174, 173, 175, 0, 0, 0,
	231, 253, 269, 118, 0, 0, 238, 263, 264, 0,
	0, 119, 137, 132, 200, 176, 115, 146, 228, 153,
	160, 207, 267, 190, 213, 122, 252, 229, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 110, 157,
	266, 205, 135, 254, 0, 0, 128, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 103,
	104, 111, 117, 123, 127, 131, 134, 139, 142, 145,
	147, 148, 149, 152, 162, 165, 166, 167, 168, 178,
	179, 180, 182, 185, 186, 187, 188, 189, 192, 194,
	195, 196, 197, 198, 199, 206, 209, 215, 216, 217,
	218, 219, 220, 221, 223, 224, 225, 226, 232, 235,
	241, 242, 251, 258, 262, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 130, 0, 0, 0, 0, 156,
	0, 0, 0, 0, 158, 0, 0, 230, 172, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 333, 0, 0, 0,
	0, 0, 0, 0, 0, 120, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	138, 0, 0, 0, 0, 0, 0, 259, 0, 0,
	0, 203, 0, 234, 141, 155, 116, 102, 112, 0,
	140, 181, 210, 214, 0, 0, 0, 0, 0, 124,
	0, 212, 191, 250, 0, 0, 193, 211, 159, 240,
	204, 249, 260, 261, 237, 257, 265, 227, 0, 0,
	0, 0, 0, 105, 236, 248, 121, 222, 107, 246,
	233, 170, 150, 151, 106, 0, 208, 129, 136, 126,
	183, 0, 0, 0, 243, 244, 125, 268, 113, 256,
	109, 114, 255, 177, 0, 0, 0, 239, 247, 171,
	164, 0, 108, 245, 169, 163, 154, 133, 143, 201,
	161, 202, 144, 174, 173, 175, 0, 0, 0, 231,
	253, 269, 118, 0, 0, 238, 263, 264, 0, 0,
	119, 137, 132, 200, 176, 115, 146, 228, 153, 160,
	207, 267, 190, 213, 122, 252, 229, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 110, 157, 266,
	205, 135, 254, 0, 0, 128, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 103, 104,
	111, 117, 123, 127, 131, 134, 139, 142, 145, 147,
	148, 149, 152, 162, 165, 166, 167, 168, 178, 179,
	180, 182, 185, 186, 187, 188, 189, 192, 194, 195,
	196, 197, 198, 199, 206, 209, 215, 216, 217, 218,
	219, 220, 221, 223, 224, 225, 226, 232, 235, 241,
	242, 251, 258, 262,
}
var yyPact = [...]int{

	145, -1000, -266, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1058, 1099, -1000, -1000, -1000, -1000,
	-1000, -1000, 459, 176, -1000, -1000, -1000, 187, 18, 16020,
	184, 1746, 16718, -1000, 40, -1000, -1000, 128, 16718, -1000,
	-1000, -101, -103, -1000, 848, -1000, -1000, 90, -1000, -1000,
	-1000, -1000, -1000, -1000, 1048, 1055, 894, 1047, 958, -1000,
	8299, 146, 146, 15671, 7252, -1000, -1000, 341, 16718, 181,
	16718, -150, 136, 136, 763, 136, -1000, -1000, -1000, -1000,
	16718, 137, 16369, 137, 137, 137, 16718, -1000, 251, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	16718, 749, 996, 4356, 68, 4356, 4356, -1000, 398, -1000,
	4356, 72, 4356, -27, 426, 70, -17, -1000, 4356, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 115, 848, 355,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 637, 177, 16718,
	467, -1000, 1009, 9707, 9707, 1058, -1000, 848, -1000, -1000,
	-1000, 989, -1000, -1000, 461, 1086, -1000, 12150, 248, -1000,
	9707, 2210, 858, -1000, -1000, 858, -1000, -1000, 232, -1000,
	-1000, 10754, 10754, 10754, 10754, 10754, 10754, 10754, 10754, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 858, -1000, 9358, 858, 858, 858, 858,
	858, 858, 858, 858, 858, 858, 9707, 858, 858, 858,
	858, 858, 858, 858, 858, 858, 858, 858, 858, 858,
	858, 858, 15315, 14617, 16718, 839, 813, -1000, -1000, 241,
	850, 6890, -131, -1000, -1000, -1000, 352, 13919, -1000, -1000,
	-1000, 994, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 773, 16718, -1000, 2538, -1000, 16369,
	1037, 160, 747, 444, 746, 71, 16718, 855, 157, 16718,
	1020, 931, 16718, 745, 744, -1000, 6528, -1000, 4356, 4356,
	-1000, -1000, -1000, 136, 136, 4356, 4356, 16718, 4356, 16718,
	-1000, -1000, 16718, -1000, -1000, -1000, 4356, 4356, -1000, 1080,
	394, -1000, -1000, -1000, -1000, 9707, -1000, 10754, 297, -1000,
	930, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 742, -1000,
	-1000, -1000, -1000, 16718, 4356, 77, 119, 110, 16718, -1000,
	1094, 294, 582, 239, 854, -1000, 555, 1048, 637, 958,
	13570, 945, -1000, -1000, -1000, 16718, -1000, 9707, 9707, 598,
	-1000, 14966, -1000, -1000, 5080, 306, 10754, 492, 438, 10754,
	10754, 10754, 10754, 10754, 10754, 10754, 10754, 10754, 10754, 10754,
	10754, 10754, 10754, 10754, 563, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 722, -1000, 848, 620, 620, 269, 269,
	269, 269, 269, 269, 269, 11103, 1034, 637, 721, 324,
	9358, 8299, 8299, 637, 9707, 9707, 8997, 8648, 8299, 8299,
	1034, 414, 324, 17067, -1000, -1000, 10405, -1000, -1000, -1000,
	-1000, -1000, 637, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	16369, 16369, 8299, 8299, 8299, 8299, 94, 16718, -1000, 844,
	873, -1000, -1000, -1000, 1036, 13221, 11801, 94, 783, 14617,
	16718, -1000, -1000, 14617, 16718, 4718, 6166, 850, -131, 817,
	-1000, -119, -75, 7601, 210, -1000, -1000, -1000, -1000, 3632,
	401, 781, -1000, -52, -1000, -1000, -1000, 889, -1000, 889,
	147, 24, 889, 889, 889, 889, 889, 0, 0, 0,
	0, 25, -1000, -1000, -1000, -1000, -1000, 902, 901, -1000,
	889, 889, 889, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 899, 167, 899, 892, 892, 892, 892, 906, -1000,
	16718, 4356, 1008, 4356, 1085, -1000, -1000, -1000, 16718, 16718,
	849, -1000, 16718, 846, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 716, 714, -1000, -1000, -1000, -1000, -1000, 396,
	-1000, -1000, 16718, 1030, 16718, 16718, 324, 408, -1000, 564,
	16718, -1000, 88, -1000, 16718, 16718, 16718, 16718, 16718, 198,
	-1000, 966, 9707, 9707, 5804, 9707, -1000, -1000, -1000, 1009,
	-1000, 1034, 1050, -1000, 979, 976, 8299, -1000, -1000, 306,
	458, -1000, -1000, 504, -1000, -1000, -1000, -1000, 238, 858,
	-1000, 2052, -1000, -1000, -1000, -1000, 492, 10754, 10754, 10754,
	408, 2052, 2319, 1730, 831, 269, 532, 532, 274, 274,
	274, 274, 274, 514, 514, -1000, -1000, -1000, 637, -1000,
	-1000, -1000, 8299, -1000, 9707, -1000, 637, 713, -1000, 713,
	-1000, 508, 519, 363, 1078, 713, 328, 1072, 713, 713,
	713, 8299, 420, -1000, 9707, 637, -1000, 236, -1000, 1974,
	845, 841, 713, 637, 833, 713, 713, 771, 858, -1000,
	17067, 14617, 14617, 14617, 14617, 14617, -1000, 955, 954, -1000,
	943, 942, 949, 16718, -1000, 710, 13221, -1000, 858, -1000,
	12860, 245, 180, 165, 163, -1000, -1000, 1070, 14617, 836,
	-1000, 836, -1000, 230, -1000, -1000, 817, -131, -127, -1000,
	-1000, -1000, -1000, 324, -1000, 594, 815, 3270, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 900, 701, -1000, 987, 233,
	292, 599, 984, -1000, -1000, -1000, 342, -61, -1000, -1000,
	523, 0, 0, 889, 889, 140, 889, -1000, 0, -1000,
	-1000, -1000, 210, 993, 210, 210, 210, 210, 0, 550,
	550, -1000, -1000, -1000, -1000, 509, -1000, 899, -1000, -1000,
	500, -1000, -1000, -1000, 929, 16369, 848, 1022, -1000, -1000,
	-1000, 928, -1000, -1000, -1000, 155, -1000, 4356, 16718, 4356,
	4356, 1070, 694, 689, 394, 399, -201, -1000, -1000, -1000,
	10754, -1000, -1000, -1000, 453, 289, 391, 126, 126, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	93, 904, -1000, -1000, -1000, -1000, 27, 76, 964, 324,
	324, 223, -1000, -1000, 16718, -1000, -1000, -1000, -1000, 856,
	-1000, -1000, -1000, 3994, 8299, -1000, 408, 2052, 2284, -1000,
	10754, -1000, 637, 324, -1000, 8299, -1000, -1000, 135, 563,
	135, 10754, 10754, -1000, 10754, 10754, -1000, -165, -1000, 829,
	358, -1000, 9707, 573, -1000, 5804, -1000, 10754, 10754, -1000,
	-1000, -1000, -1000, 924, 17067, 858, -1000, 12511, 16369, 851,
	-1000, 343, 873, 897, 922, 837, -1000, -1000, -1000, -1000,
	953, -1000, 944, -1000, -1000, -1000, -1000, 16369, 10754, 245,
	-1000, 858, 858, 858, 1058, 9707, 836, -1000, -1000, 278,
	-1000, -1000, -125, -80, -1000, -1000, -1000, 3632, -1000, 3632,
	16369, 116, -1000, 599, 599, -1000, -1000, -1000, 893, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 457, 10754, 1093, -1000,
	986, -1000, 985, 542, -1000, -1000, 778, 210, 210, 0,
	-1000, -1000, 889, -1000, 210, -1000, 312, -1000, -1000, -1000,
	-1000, 210, 708, -1000, 705, 814, -1000, 685, 16718, -1000,
	-1000, -1000, 16369, 16718, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 399, -1000, 541, 9707, 10754, 2052, -1000, 616, -1000,
	599, 309, -1000, -1000, -1000, 669, 984, -1000, -1000, 651,
	-1000, 649, 16369, 983, 640, 16718, 16369, -1000, -1000, 608,
	628, 16369, -170, 618, 16369, 16369, 16369, -1000, 5442, -1000,
	1070, 14617, -1000, -1000, 637, -1000, 10754, 2052, -1000, -1000,
	637, 889, 889, -1000, 889, 892, -1000, 889, 28, 889,
	19, 637, 637, 2143, 2127, 2070, 1908, 858, -157, -1000,
	324, 9707, -1000, 2025, 1604, -1000, 999, 780, 790, -1000,
	-1000, 7950, 637, 683, 219, 681, -1000, 1058, 17067, 9707,
	-1000, -1000, 9707, 891, -1000, 9707, -1000, -1000, -1000, 681,
	693, -1000, 16369, 16369, 16369, 1048, 324, -1000, -1000, -1000,
	-1000, 3270, -1000, 675, -1000, 889, -1000, -1000, -1000, 16369,
	-1000, 2052, -77, -1000, -1000, -1000, -1000, -1000, -1000, 210,
	-1000, -1000, -1000, -1000, -1000, 0, 536, 0, 484, -1000,
	483, 888, -1000, 848, 1044, -1000, -1000, -1000, 324, 2052,
	608, 107, -1000, 906, 233, 116, -1000, -1000, -1000, -1000,
	612, 260, -1000, 141, 107, 608, 1012, -1000, 5442, -1000,
	-1000, 887, 912, -1000, 1063, 812, -1000, 2052, -1000, -1000,
	134, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10754,
	10754, 10754, 10754, 10754, 637, 530, 324, 10754, 10754, 982,
	-1000, 858, -1000, -1000, 843, 16369, 16369, -1000, 16369, 1048,
	-1000, 324, 324, 16369, 324, 11452, -1000, 14268, 666, -1000,
	666, 666, -1000, 205, 16369, 1005, 664, -1000, -1000, 210,
	-1000, 210, 774, 686, 16369, -1000, 64, 667, -1000, -1000,
	606, 885, 599, -1000, -1000, 581, -1000, -1000, 16369, -1000,
	107, 858, 807, -1000, 322, 16369, 16718, 1060, 1054, -1000,
	-1000, 1974, 1974, 1974, 1974, 63, -1000, -1000, 1974, 1974,
	1092, -1000, 858, -1000, 848, 217, -1000, -1000, -1000, 662,
	-1000, 245, 16369, -1000, -1000, -1000, 205, -1000, 569, 320,
	493, -1000, -1000, 111, -1000, -1000, -1000, -1000, 659, -1000,
	58, -1000, -1000, -1000, 16369, 906, -1000, -1000, -1000, -1000,
	92, 5442, 3632, 647, -1000, -1000, 9707, 9707, -1000, -1000,
	-1000, -1000, 637, 66, -174, -1000, -1000, 17067, 790, 637,
	16369, -1000, -1000, -1000, -1000, -1000, 480, -1000, -1000, 16718,
	205, 59, -1000, 645, 883, -1000, 636, -1000, 16369, -1000,
	-1000, 904, 324, 785, -1000, 962, -168, -177, 715, -1000,
	-1000, -1000, 866, -1000, 205, 691, -1000, -1000, 205, 16369,
	-1000, 92, 971, -170, -1000, 961, -1000, 16369, -1000, -1000,
	-1000, -1000, -1000, 634, -1000, 82, -1000, -172, 621, 205,
	74, -175, 918, -1000, 858, -180, 917, 915, 1076, 10056,
	-1000, -1000, 1087, -1000, 1088, 246, 246, 1974, 637, -1000,
	-1000, -1000, 118, 528, -1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1342, 17, 564, 1341, 1339, 1338, 105, 9, 7,
	1337, 1336, 1335, 1333, 1332, 1331, 1330, 1329, 1328, 1326,
	1325, 1323, 1321, 1318, 1314, 1313, 1311, 1310, 1308, 1305,
	1304, 1301, 1300, 1299, 1298, 1295, 111, 1294, 1293, 1291,
	92, 1290, 89, 1288, 1284, 1283, 52, 69, 56, 65,
	224, 1282, 1281, 46, 88, 70, 1280, 47, 1279, 1278,
	94, 1277, 1276, 1275, 64, 1272, 1271, 1647, 1270, 86,
	1268, 31, 22, 85, 1267, 1262, 1257, 1256, 87, 1200,
	1252, 1243, 1241, 37, 1240, 1239, 115, 1238, 73, 15,
	21, 28, 34, 1237, 915, 19, 1235, 71, 1234, 1232,
	1231, 1230, 53, 1229, 23, 76, 25, 26, 33, 68,
	1226, 14, 90, 57, 44, 11, 95, 77, 1219, 41,
	78, 66, 1216, 1215, 534, 1214, 1212, 58, 1199, 1197,
	45, 1196, 429, 98, 42, 1193, 1192, 1188, 1185, 39,
	55, 1183, 80, 1456, 51, 0, 552, 24, 82, 1182,
	20, 1181, 1719, 61, 32, 60, 1180, 1177, 50, 1176,
	1175, 1172, 1171, 1170, 1168, 1166, 1165, 442, 1160, 1156,
	1152, 106, 202, 1148, 1147, 62, 54, 1146, 1144, 1142,
	59, 35, 1141, 67, 36, 1140, 1137, 1136, 1135, 29,
	1128, 1127, 1126, 1124, 1123, 48, 16, 1122, 30, 6,
	12, 27, 3, 38, 1117, 8, 1116, 13, 1115, 5,
	1114, 10, 63, 1, 2, 4, 1113, 1109, 1108, 83,
	421, 96, 1107, 1106, 100,
}
var yyR1 = [...]int{

	0, 217, 218, 218, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 6,
	3, 4, 4, 5, 5, 7, 7, 39, 39, 8,
	9, 9, 9, 9, 221, 221, 62, 62, 60, 60,
	61, 61, 112, 112, 10, 10, 10, 10, 117, 117,
	121, 121, 121, 122, 122, 122, 122, 156, 156, 106,
	12, 12, 12, 12, 12, 12, 12, 12, 17, 17,
	18, 18, 18, 19, 19, 19, 11, 11, 11, 211,
	211, 210, 209, 209, 208, 208, 207, 24, 191, 193,
	193, 192, 192, 192, 192, 181, 160, 160, 160, 160,
	160, 160, 160, 159, 159, 159, 159, 163, 163, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 162, 162,
	162, 162, 162, 162, 162, 162, 164, 164, 164, 164,
	164, 165, 165, 165, 165, 165, 165, 165, 165, 165,
	165, 165, 165, 165, 165, 165, 165, 165, 165, 165,
	165, 165, 165, 165, 165, 165, 166, 166, 166, 166,
	166, 166, 166, 166, 180, 180, 167, 167, 175, 175,
	176, 176, 176, 173, 173, 174, 174, 177, 177, 169,
	170, 178, 171, 171, 171, 172, 172, 172, 179, 179,
	179, 179, 168, 182, 182, 202, 202, 201, 201, 200,
	200, 200, 190, 190, 197, 197, 197, 197, 197, 185,
	185, 185, 184, 184, 186, 186, 189, 189, 199, 199,
	198, 183, 183, 203, 203, 203, 203, 203, 187, 187,
	188, 188, 188, 214, 215, 213, 213, 213, 213, 213,
	194, 194, 194, 195, 195, 195, 196, 196, 196, 216,
	216, 20, 20, 20, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 104, 104, 104, 22, 23, 23, 23, 23,
	23, 23, 23, 23, 140, 140, 212, 212, 212, 212,
	212, 206, 204, 204, 205, 205, 13, 25, 25, 14,
	14, 14, 14, 14, 15, 15, 26, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 51, 128, 128,
	126, 126, 129, 129, 127, 127, 127, 130, 130, 130,
	131, 131, 157, 157, 157, 28, 28, 33, 33, 34,
	35, 141, 141, 31, 31, 32, 32, 32, 32, 45,
	45, 222, 222, 30, 30, 29, 29, 29, 29, 16,
	223, 36, 37, 37, 38, 38, 38, 42, 42, 42,
	40, 40, 40, 41, 41, 48, 48, 47, 47, 49,
	49, 49, 49, 149, 149, 149, 148, 148, 52, 52,
	53, 53, 54, 54, 55, 55, 55, 55, 70, 70,
	71, 71, 71, 71, 71, 81, 81, 111, 111, 113,
	113, 56, 56, 56, 56, 57, 57, 58, 58, 59,
	59, 139, 139, 154, 154, 63, 63, 63, 65, 64,
	64, 64, 64, 66, 66, 68, 68, 67, 67, 69,
	72, 72, 72, 72, 73, 73, 50, 50, 50, 50,
	50, 50, 50, 125, 125, 75, 75, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 87, 87, 87,
	87, 87, 87, 76, 76, 76, 76, 76, 76, 76,
	46, 46, 88, 88, 88, 94, 89, 89, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	84, 84, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 224, 224, 86, 85, 85, 85, 85,
	85, 85, 43, 43, 43, 43, 43, 155, 155, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 98, 98, 44, 44, 96, 96, 97, 99,
	99, 95, 95, 95, 78, 78, 78, 78, 78, 78,
	78, 78, 80, 80, 80, 100, 100, 101, 101, 102,
	102, 103, 103, 105, 107, 107, 107, 108, 108, 108,
	108, 109, 109, 109, 77, 77, 77, 77, 77, 77,
	110, 110, 110, 110, 114, 114, 90, 90, 92, 92,
	91, 93, 115, 115, 119, 116, 116, 120, 120, 120,
	120, 118, 118, 118, 151, 151, 151, 123, 123, 132,
	132, 133, 133, 124, 124, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 138, 138, 137, 137, 137,
	134, 134, 134, 135, 135, 150, 150, 146, 146, 147,
	147, 152, 152, 153, 153, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 219, 220, 142, 143, 143, 143,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 4, 6, 7, 5,
	10, 1, 3, 1, 3, 7, 8, 1, 1, 9,
	8, 7, 6, 6, 1, 1, 1, 3, 1, 3,
	1, 3, 0, 4, 3, 4, 5, 4, 1, 3,
	3, 2, 2, 2, 2, 2, 1, 1, 1, 0,
	2, 2, 11, 7, 9, 5, 5, 12, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 0,
	2, 1, 0, 2, 1, 3, 3, 4, 4, 2,
	4, 1, 3, 3, 3, 3, 0, 2, 2, 2,
	2, 2, 2, 3, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	3, 2, 2, 2, 2, 2, 1, 2, 2, 2,
	1, 4, 4, 3, 3, 2, 4, 5, 2, 3,
	4, 2, 2, 3, 3, 3, 3, 3, 4, 1,
	1, 1, 1, 1, 6, 6, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 3, 0, 5,
	0, 3, 5, 0, 1, 0, 1, 1, 2, 2,
	3, 1, 0, 3, 3, 0, 2, 2, 2, 1,
	2, 1, 2, 5, 4, 0, 1, 1, 2, 2,
	3, 2, 0, 1, 2, 3, 3, 2, 2, 1,
	1, 1, 1, 1, 0, 1, 0, 1, 1, 3,
	3, 3, 1, 10, 11, 11, 12, 12, 1, 1,
	0, 2, 2, 3, 3, 1, 1, 2, 2, 2,
	0, 1, 3, 1, 2, 3, 1, 1, 1, 0,
	2, 1, 1, 1, 6, 10, 9, 7, 7, 7,
	9, 7, 12, 14, 7, 7, 9, 9, 10, 5,
	6, 8, 0, 1, 2, 4, 7, 5, 5, 5,
	12, 7, 5, 9, 0, 1, 1, 1, 1, 1,
	1, 7, 1, 3, 8, 8, 3, 3, 5, 4,
	6, 4, 4, 4, 3, 2, 3, 4, 4, 3,
	6, 6, 4, 4, 4, 4, 4, 3, 3, 2,
	6, 2, 3, 4, 3, 7, 6, 4, 2, 4,
	3, 4, 3, 3, 5, 2, 3, 3, 1, 1,
	0, 1, 1, 1, 0, 2, 2, 0, 2, 2,
	0, 2, 0, 1, 1, 2, 1, 1, 2, 1,
	1, 1, 1, 3, 3, 1, 1, 1, 1, 0,
	3, 1, 1, 2, 2, 2, 2, 3, 3, 2,
	0, 2, 0, 2, 1, 2, 2, 0, 1, 1,
	0, 1, 1, 0, 1, 0, 1, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 1, 0, 2,
	1, 3, 1, 1, 1, 3, 1, 3, 2, 6,
	1, 4, 6, 3, 2, 0, 3, 1, 3, 1,
	3, 4, 4, 4, 3, 2, 4, 0, 1, 0,
	2, 0, 1, 1, 1, 1, 2, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 1, 1, 3, 3,
	0, 5, 5, 5, 0, 2, 1, 3, 3, 2,
	3, 1, 2, 0, 3, 1, 1, 3, 3, 4,
	4, 5, 3, 4, 5, 6, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	2, 2, 2, 2, 2, 3, 1, 1, 1, 1,
	5, 6, 4, 4, 3, 6, 6, 6, 8, 8,
	8, 8, 9, 4, 7, 5, 4, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 8, 8, 0, 2, 3, 4, 4, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 2, 1, 2, 2,
	1, 2, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 0, 3, 0, 2, 0,
	3, 1, 3, 2, 0, 1, 1, 0, 2, 4,
	4, 0, 2, 4, 2, 1, 3, 5, 4, 6,
	1, 3, 3, 5, 0, 5, 1, 3, 1, 2,
	3, 1, 1, 3, 3, 1, 3, 3, 3, 3,
	3, 1, 2, 1, 1, 1, 1, 1, 1, 0,
	2, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 1, 0, 1, 0, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -217, -1, -2, -6, -7, -8, -9, -10, -12,
	-20, -13, -14, -15, -26, -27, -28, -33, -34, -35,
	-31, -30, -29, -16, -3, -4, 6, 7, -39, 9,
	10, 29, -24, 117, -21, -22, -23, 120, 119, 156,
	121, 149, 52, 176, 177, 179, 180, -222, -141, 154,
	155, 30, 31, 123, -219, 8, 269, 118, 151, 150,
	25, 56, -218, 367, -102, 15, -38, 5, -36, -223,
	-36, -36, -36, -36, -36, -191, -193, 56, 92, -135,
	130, 74, 261, 126, 164, 127, -134, 33, 137, 136,
	127, 127, 128, 130, 261, 126, 127, -67, -152, 59,
	-145, 279, 140, 311, 312, 176, 187, 181, 215, 203,
	280, 313, 141, 201, 204, 248, 139, 314, 235, 243,
	68, 179, 257, 315, 152, 199, 192, 316, 288, 190,
	27, 317, 245, 220, 318, 284, 191, 244, 123, 319,
	143, 137, 320, 221, 225, 321, 249, 322, 323, 324,
	185, 186, 325, 251, 219, 138, 32, 281, 37, 161,
	252, 223, 326, 218, 213, 327, 328, 329, 330, 217,
	184, 212, 41, 227, 226, 228, 247, 206, 331, 332,
	333, 144, 334, 193, 18, 335, 336, 337, 338, 339,
	255, 155, 340, 159, 341, 342, 343, 344, 345, 346,
	246, 222, 224, 134, 163, 283, 347, 253, 189, 348,
	145, 160, 154, 256, 146, 349, 350, 351, 352, 353,
	354, 355, 180, 356, 357, 358, 359, 170, 250, 259,
	40, 232, 360, 183, 136, 361, 177, 167, 238, 210,
	162, 362, 363, 197, 198, 216, 182, 211, 178, 164,
	156, 364, 258, 233, 285, 205, 202, 168, 365, 130,
	165, 166, 366, 239, 240, 169, 282, 254, 200, 234,
	127, 110, 204, 248, 117, 236, 237, 245, -185, 246,
	163, -157, 127, -126, 235, 239, 240, 169, 59, 128,
	129, 32, 250, 249, 241, -152, 178, -45, 121, 157,
	-67, -142, -142, -142, 238, 238, -142, -2, -124, 130,
	240, 132, -108, 17, 16, -5, -3, -219, 6, 20,
	21, -42, 42, 43, -37, -49, 101, -50, -152, -74,
	76, -79, 28, 59, -145, 23, -78, -75, -95, -93,
	-94, 110, 111, 112, 99, 100, 107, 77, 113, -84,
	-82, -83, -85, 61, 60, 69, 62, 63, 64, 65,
	70, 71, 72, -146, -91, -219, 46, 47, 126, 270,
	271, 272, 273, 278, 147, 274, 79, 36, 260, 268,
	267, 266, 264, 265, 262, 263, 276, 277, 133, 261,
	105, 269, -124, -124, 11, -60, -61, -67, -69, -152,
	-116, -156, 178, -120, 250, 249, -147, -118, -146, -144,
	248, 204, 247, 59, -145, 122, 148, 286, 75, 22,
	24, 230, 78, 110, 16, 79, 109, 270, 117, 50,
	287, 262, 263, 260, 272, 273, 261, 236, 28, 10,
	289, 25, 150, 21, 103, 119, 82, 83, 153, 23,
	151, 72, 147, 292, 19, 53, 11, 13, 293, 294,
	14, 133, 132, 94, 128, 48, 8, 113, 26, 91,
	44, 295, 34, 296, 297, 298, 299, 46, 92, 17,
	264, 265, 30, 300, 278, 158, 105, 51, 38, 76,
	301, 302, 70, 303, 73, 54, 74, 15, 49, 304,
	305, 306, 307, 93, 120, 269, 47, 308, 126, 6,
	275, 29, 149, 45, 309, 127, 81, 276, 277, 131,
	71, 5, 33, 31, 9, 52, 55, 266, 267, 268,
	36, 80, 12, 310, -192, 92, -181, 59, -67, 128,
	-67, 269, -133, 133, -133, 59, -133, -25, -67, -132,
	133, -146, -132, -132, -132, -67, 114, -67, 59, 29,
	-143, -219, -147, 261, 126, 59, 163, 127, 164, 130,
	-143, -143, -187, 11, 94, -143, 167, 168, -143, -129,
	-128, 243, 244, 238, 242, 12, -51, 92, 168, 238,
	166, -143, -32, -2, -9, -7, -8, -2, 84, -142,
	-142, -220, 58, 127, -67, 117, 119, 122, 54, -109,
	19, 30, -50, -152, -103, -105, -50, -102, -2, -36,
	38, -40, 20, 21, 67, 11, -149, 75, 74, 91,
	-148, 22, -146, 61, 114, -50, -76, 94, 76, 92,
	93, 78, 96, 95, 106, 99, 100, 101, 102, 103,
	104, 105, 97, 98, 109, 84, 85, 86, 87, 88,
	89, 90, -125, -219, -94, -219, 115, 116, -79, -79,
	-79, -79, -79, -79, -79, -79, -219, -2, -89, -50,
	-219, -219, -219, -219, -219, -219, -219, -219, -219, -219,
	-219, -98, -50, -219, -224, -86, -219, -224, -86, -224,
	-86, -224, -219, -224, -86, -224, -86, -224, -224, -86,
	-219, -219, -219, -219, -219, -219, -68, 26, -67, -53,
	-54, -55, -56, -70, -94, -219, -67, -67, -60, -221,
	57, 11, 55, -221, 57, 114, 57, -116, 178, -117,
	-121, 251, 253, 84, -151, -146, 61, 28, 29, 58,
	57, -67, -159, -163, -165, -164, -166, -161, -162, 201,
	204, 208, 206, 202, 207, 110, 205, 210, 211, 212,
	213, 214, 215, 216, 217, 218, 219, 220, 29, 152,
	197, 198, 199, 200, 221, 222, 223, 224, 225, 226,
	227, 228, 181, 203, 280, 182, 183, 184, 185, 186,
	187, 189, 190, 191, 192, 193, 194, 195, -146, 22,
	130, 59, 76, 59, -17, 173, 148, -67, 57, 131,
	-60, 23, 54, -62, -67, 59, 59, -153, -152, -144,
	-143, -143, -133, -133, -143, -143, -67, -143, -67, -67,
	-143, -143, 11, -127, 11, 94, -50, -79, -131, 92,
	54, 59, -67, -143, 165, 165, 127, 127, 170, -67,
	9, 94, 57, 18, 114, 57, -107, 24, 25, -108,
	-220, -42, -80, -146, 62, 65, -41, 45, -67, -50,
	-50, -87, 70, 76, 71, 72, -148, 101, -153, -147,
	-144, -79, -88, -91, -94, 66, 94, 92, 93, 78,
	-79, -79, -79, -79, -79, -79, -79, -79, -79, -79,
	-79, -79, -79, -79, -79, -155, 59, 61, 59, -78,
	-78, -146, -40, -220, 57, -220, -2, -47, -49, -47,
	-220, -50, -50, -95, 61, -47, -95, 61, -47, -47,
	-47, -40, -96, -97, 80, -95, -146, -152, -220, -79,
	-146, -146, -47, -48, -47, -47, -47, -112, 159, -67,
	29, 57, -63, -65, -64, -66, 44, 48, 50, 45,
	46, 47, 51, -139, 22, -53, -219, -71, 159, -72,
	22, -154, 52, 132, 53, -152, 61, -112, 55, -53,
	-67, -53, -69, -152, 101, -120, -117, 57, 252, 254,
	255, 54, 73, -50, -172, 109, -194, -195, -196, -147,
	61, 62, -181, -182, -183, -197, 142, -203, 134, 136,
	33, -184, 143, 128, 34, 58, -160, -173, 233, -167,
	56, -167, -167, 209, 201, 204, 202, -167, -167, -167,
	-167, -167, -171, 204, -171, -171, -171, -171, 202, 56,
	56, -167, -167, -167, -175, 56, -175, 196, -175, -176,
	56, -176, -176, -176, -150, 55, -106, -67, -143, 23,
	-143, -18, 8, 9, 10, -67, -67, -67, 57, 59,
	59, -188, 11, 94, -67, -81, 22, -152, -152, -46,
	153, 61, -67, -136, 122, 119, 120, 124, 125, -206,
	118, 230, 204, 68, 28, 15, 270, 159, 285, 59,
	160, -67, -67, -67, -67, -67, 122, 119, 40, -50,
	-50, -153, -105, -109, -123, 19, 11, 36, 36, -47,
	70, 71, 72, 114, -219, -88, -79, -79, -79, -46,
	75, -220, -48, -50, -220, 57, -220, -220, 57, 55,
	22, 11, 11, -220, 11, 11, -220, -220, -220, -47,
	-99, -97, 82, -50, -220, 114, -220, 57, 57, -220,
	-220, -220, -220, -77, 29, 36, -2, -219, -219, -115,
	-119, -95, -54, -55, -55, -54, -55, 44, 44, 44,
	49, 44, 49, 44, -64, -152, -220, -219, 303, -154,
	-72, 128, 128, 128, -73, 12, -53, -73, -73, 114,
	-121, -122, 256, 253, 259, 59, 61, 57, -196, 84,
	56, 59, 34, -184, -184, -189, 59, -189, 34, -177,
	-169, -170, -178, -179, -168, 70, 76, 28, 54, 230,
	134, 34, 33, 68, -174, 234, 62, -171, -171, -167,
	-167, -167, 209, -167, -171, -172, 29, -172, -172, -172,
	-172, -171, -180, 61, -180, 62, -175, 62, 54, -146,
	-2, 22, 54, 131, -143, -67, -143, -143, -73, 59,
	59, -127, -130, 92, 12, 303, -79, -142, -140, -212,
	-184, -216, -183, 135, 139, 142, 143, 134, 159, -140,
	-212, 142, -184, 143, 135, -137, -184, 131, 22, -140,
	-140, 159, -211, 55, 165, 230, 165, 41, 114, -67,
	-52, 11, 101, -147, -48, -46, 75, -79, -220, -49,
	-158, 110, 201, 152, 199, 192, 219, 206, 232, 197,
	233, -155, -158, -79, -79, -79, -79, 279, -102, 83,
	-50, 81, -147, -79, -79, -114, 54, -115, -90, -92,
	-91, -219, -2, -110, -146, -113, -146, -73, 57, 84,
	-58, -57, 54, 55, -59, 54, -57, 44, 44, -113,
	-79, -72, -219, -219, -219, -102, -50, -73, 253, 257,
	258, -195, -196, -199, -198, -146, -203, -189, -189, 56,
	70, -79, 9, 34, 34, 61, 58, -172, -172, -171,
	-167, -172, 59, 110, -172, 58, 57, 58, 57, 58,
	57, -67, -106, -106, -146, -67, -130, 61, -50, -79,
	56, -181, -142, -189, -134, 59, 59, -142, 59, -146,
	34, 59, -67, -146, -181, 59, -146, -209, 282, -210,
	59, -146, -146, -146, -73, -53, -220, -79, -220, -167,
	-167, -167, -176, -167, 186, -167, 186, -220, -220, 19,
	19, 19, 19, -219, -44, 275, -50, 57, 57, 27,
	-114, 57, -220, -220, -220, 57, 114, -220, 57, -102,
	-119, -50, -50, 56, -50, -220, -72, -139, -111, -146,
	-111, -111, -108, 58, 57, -167, -111, -83, -172, -171,
	61, -171, 62, 62, 56, -2, 19, -181, -104, 147,
	148, -150, -186, -184, 59, -138, 131, 22, 131, -104,
	-181, 26, -208, -207, -147, 56, 55, -100, 13, -171,
	59, -79, -79, -79, -79, -79, -220, 61, -79, -79,
	34, -92, 36, -2, -219, -146, -146, -146, -108, -111,
	-71, -154, 57, -220, -220, -220, -201, -200, 55, 138,
	68, -198, -107, 58, -172, -172, 58, 58, -199, -106,
	171, 58, -142, 59, 56, -189, 59, -146, -142, -104,
	-219, 57, 84, -111, -67, -101, 14, 16, -220, -220,
	-220, -220, -43, 94, 282, -220, -220, 9, -90, -2,
	114, 58, -72, -146, -200, 59, -190, 84, 61, 145,
	58, 172, -142, -199, -150, -142, -204, -205, 159, -207,
	-196, 58, -50, -89, -220, 280, 51, 283, -115, -220,
	-146, 62, -67, -202, -201, -19, 174, 175, 58, 56,
	-220, 57, -146, -211, 41, 281, 284, 56, -11, -2,
	-8, -9, -202, -199, -205, 36, -209, 41, -111, 58,
	161, 282, 58, -202, 162, 283, -214, -215, 54, -219,
	284, -215, 54, -214, 54, 10, 9, -79, 158, -213,
	146, 141, 144, 29, -213, -220, -220, 140, 28, 70,
}
var yyDef = [...]int{

	25, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 639, 0, 390, 390, 390, 390,
	390, 390, 0, 713, 261, 262, 263, 0, 0, 0,
	0, -2, 366, 367, 0, 369, 370, 379, -2, 1015,
	1015, 0, 0, 1015, 0, 37, 38, 693, 382, 371,
	372, 1013, 1, 3, 647, 0, 0, 394, 397, 392,
	0, 693, 693, 0, 0, 70, 71, 0, 0, 0,
	0, 0, 691, 691, 0, 691, 714, 710, 711, 712,
	0, 689, 0, 689, 689, 689, 0, 315, 467, 721,
	722, 844, 845, 846, 847, 848, 849, 850, 851, 852,
	853, 854, 855, 856, 857, 858, 859, 860, 861, 862,
	863, 864, 865, 866, 867, 868, 869, 870, 871, 872,
	873, 874, 875, 876, 877, 878, 879, 880, 881, 882,
	883, 884, 885, 886, 887, 888, 889, 890, 891, 892,
	893, 894, 895, 896, 897, 898, 899, 900, 901, 902,
	903, 904, 905, 906, 907, 908, 909, 910, 911, 912,
	913, 914, 915, 916, 917, 918, 919, 920, 921, 922,
	923, 924, 925, 926, 927, 928, 929, 930, 931, 932,
	933, 934, 935, 936, 937, 938, 939, 940, 941, 942,
	943, 944, 945, 946, 947, 948, 949, 950, 951, 952,
	953, 954, 955, 956, 957, 958, 959, 960, 961, 962,
	963, 964, 965, 966, 967, 968, 969, 970, 971, 972,
	973, 974, 975, 976, 977, 978, 979, 980, 981, 982,
	983, 984, 985, 986, 987, 988, 989, 990, 991, 992,
	993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002,
	1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012,
	0, 0, 0, 1016, 0, 1016, 1016, 329, 0, 331,
	1016, 0, 1016, 0, 338, 0, 0, 345, 1016, 219,
	220, 221, 363, 364, 351, 365, 368, 0, 0, 0,
	383, 384, 385, 386, 1015, 1015, 389, 31, 0, 0,
	0, 694, 651, 0, 0, 639, 33, 0, 390, 395,
	396, 400, 398, 399, 391, 0, 409, 413, 0, 476,
	0, 481, 483, -2, -2, 0, 518, 519, 520, 521,
	522, 0, 0, 0, 0, 0, 0, 0, 0, 546,
	547, 548, 549, 624, 625, 626, 627, 628, 629, 630,
	631, 485, 486, 621, 671, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 612, 0, 583, 583,
	583, 583, 583, 583, 583, 583, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 48, 50, 467,
	54, 0, 991, 675, -2, -2, 0, 0, 719, 720,
	-2, 857, -2, 717, 718, 725, 726, 727, 728, 729,
	730, 731, 732, 733, 734, 735, 736, 737, 738, 739,
	740, 741, 742, 743, 744, 745, 746, 747, 748, 749,
	750, 751, 752, 753, 754, 755, 756, 757, 758, 759,
	760, 761, 762, 763, 764, 765, 766, 767, 768, 769,
	770, 771, 772, 773, 774, 775, 776, 777, 778, 779,
	780, 781, 782, 783, 784, 785, 786, 787, 788, 789,
	790, 791, 792, 793, 794, 795, 796, 797, 798, 799,
	800, 801, 802, 803, 804, 805, 806, 807, 808, 809,
	810, 811, 812, 813, 814, 815, 816, 817, 818, 819,
	820, 821, 822, 823, 824, 825, 826, 827, 828, 829,
	830, 831, 832, 833, 834, 835, 836, 837, 838, 839,
	840, 841, 842, 843, 0, 0, 101, 0, 99, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 314, 0, 316, 1016, 1016,
	319, 1017, 1018, 691, 691, 1016, 1016, 0, 1016, 0,
	327, 328, 0, 238, 239, 332, 1016, 1016, 334, 0,
	354, 352, 353, 348, 349, 0, 340, 0, 360, 342,
	343, 346, 373, -2, 376, 377, 378, -2, 0, 387,
	388, 32, 1014, 0, 1016, 0, 0, 0, 0, 26,
	0, 0, 648, 0, 640, 641, 644, 647, 31, 397,
	0, 403, 401, 402, 393, 0, 410, 0, 0, 0,
	414, 0, 416, 417, 0, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 503, 504, 505, 506, 507,
	508, 509, 482, 0, 496, 0, 0, 0, 538, 539,
	540, 541, 542, 543, 544, 0, 400, 31, 0, 516,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	400, 0, 613, 0, 567, 575, 0, 568, 576, 569,
	577, 570, 0, 571, 578, 572, 579, 573, 574, 580,
	0, 0, 0, 405, 0, 0, 52, 0, 466, 0,
	420, 422, 423, 424, -2, 0, 470, -2, 0, 0,
	0, 44, 45, 0, 0, 0, 0, 55, 991, 57,
	58, 0, 0, 0, 195, 684, 685, 686, 682, 250,
	0, 0, 106, 183, 114, 115, 116, 176, 118, 176,
	176, 0, 176, 176, 176, 176, 176, 192, 192, 192,
	192, 192, 159, 160, 161, 162, 163, 0, 0, 136,
	176, 176, 176, 140, 166, 167, 168, 169, 170, 171,
	172, 173, 119, 120, 121, 122, 123, 124, 125, 126,
	127, 178, 178, 178, 180, 180, 180, 180, 715, 69,
	0, 1016, 0, 1016, 0, 78, 79, 97, 0, 0,
	309, 690, 0, 311, 46, 312, 313, 468, 723, 724,
	317, 318, 0, 0, 322, 323, 324, 325, 326, 240,
	333, 337, 0, 435, 0, 0, 339, 510, 341, 0,
	0, 380, 0, 285, 0, 0, 0, 0, 0, 0,
	652, 0, 0, 0, 0, 0, 643, 645, 646, 651,
	34, 400, 0, 632, 0, 0, 0, 404, 29, 477,
	478, 480, 497, 0, 499, 501, 415, 411, 0, 622,
	-2, 487, 488, 512, 513, 514, 0, 0, 0, 0,
	510, 492, 0, 523, 524, 525, 526, 527, 528, 529,
	530, 531, 532, 533, 534, 537, 597, 598, 0, 535,
	536, 545, 405, 515, 0, 670, 31, 0, 407, 0,
	554, 0, 0, 520, 624, 0, 520, 624, 0, 0,
	0, 0, 619, 616, 0, 0, 621, 0, 584, 0,
	0, 0, 0, 0, 406, 0, 0, 0, 0, 465,
	0, 0, 0, 0, 0, 0, 455, 0, 0, 458,
	0, 0, 0, 0, 452, 0, 0, 428, 936, 430,
	0, 470, 0, 0, 0, 453, 454, 474, 0, 474,
	49, 474, 51, 0, 469, 676, 56, 0, 0, 61,
	62, 677, 678, 679, 680, 0, 98, 251, 253, 256,
	257, 258, 102, 103, 104, 0, 0, 232, 0, 0,
	226, 226, 0, 222, 223, 100, 105, 185, 184, 117,
	0, 192, 192, 176, 176, 176, 176, 145, 192, 148,
	151, 152, 195, 0, 195, 195, 195, 195, 192, 0,
	0, 137, 138, 139, 128, 0, 129, 178, 131, 132,
	0, 133, 134, 135, 0, 0, 0, 0, 75, 692,
	76, 0, 80, 81, 82, 0, 307, 1016, 0, 1016,
	1016, 474, 0, 0, 354, 357, 0, 355, 356, 347,
	0, 361, 344, 1015, -2, 294, 707, 294, 294, 279,
	695, 696, 697, 698, 699, 700, 701, 702, 703, 704,
	0, 89, 287, 289, 288, 292, 0, 0, 0, 649,
	650, 0, 642, 27, 0, 687, 688, 633, 634, 418,
	498, 500, 502, 0, 405, 489, 510, 493, 0, 490,
	0, 484, 0, 517, -2, 0, 552, 553, 0, 0,
	0, 0, 0, 590, 0, 0, 591, 0, 563, 639,
	0, 617, 0, 0, 566, 0, 585, 0, 0, 586,
	587, 588, 589, 664, 0, 0, -2, 0, 0, 474,
	672, 0, 421, 447, 449, 0, 444, 456, 457, 459,
	0, 461, 0, 463, 464, 425, 427, 0, 0, 470,
	434, 0, 0, 0, 639, 0, 474, 42, 43, 0,
	59, 60, 0, 0, 66, 196, 197, 0, 254, 0,
	0, 0, 214, 226, 226, 217, 227, 218, 0, 107,
	108, 109, 110, 111, 112, 187, 0, 0, 0, 191,
	0, 199, 201, 0, 113, 186, 0, 195, 195, 192,
	143, 144, 176, 149, 195, 153, 0, 154, 155, 156,
	157, 195, 0, 174, 0, 0, 130, 0, 0, 716,
	-2, 69, 0, 0, 310, 47, 320, 321, 330, 241,
	242, 357, 336, 0, 0, 0, 511, 264, 0, 1015,
	226, 0, 280, 295, 296, 297, 298, 299, 300, 0,
	1015, 297, 0, 298, 0, 0, 0, 708, 709, 0,
	0, 0, 92, 0, 0, 0, 0, 653, 0, 28,
	474, 0, 412, 623, 0, 491, 0, 494, 550, 408,
	0, 176, 176, 602, 176, 180, 605, 176, 607, 176,
	610, 0, 0, 0, 0, 0, 0, 0, 614, 565,
	620, 0, 622, 0, 0, 35, 0, 664, 654, 666,
	668, 0, 31, 0, 660, 0, 439, 639, 0, 0,
	441, 448, 0, 0, 442, 0, 443, 460, 462, 0,
	-2, 433, 0, 0, 0, 647, 475, 41, 63, 64,
	65, 252, 255, 0, 228, 176, 231, 215, 216, 0,
	188, 189, 0, 198, 200, 202, 177, 141, 142, 195,
	150, 146, 193, 194, 158, 192, 0, 192, 0, 181,
	0, 0, 73, 0, 0, 308, 335, 358, 359, 436,
	0, 282, 267, 715, 224, 260, 268, 269, 274, 275,
	0, 0, 271, 0, 282, 0, 0, 286, 0, 90,
	91, 0, 0, 291, 635, 419, 551, 495, 555, 599,
	192, 603, 604, 606, 608, 609, 611, 557, 556, 0,
	0, 0, 0, 0, 0, 0, 618, 0, 0, 0,
	36, 0, 669, -2, 0, 0, 0, 53, 0, 647,
	673, 674, 445, 0, 450, 470, 431, 0, 0, 437,
	0, 0, 40, 204, 0, 644, 0, 190, 147, 195,
	175, 195, 0, 0, 0, -2, 0, 0, 1015, 283,
	0, 0, 226, 225, 281, 0, 705, 706, 0, 1015,
	282, 0, 93, 94, 0, 0, 0, 637, 0, 600,
	601, 0, 0, 0, 0, 592, 564, 615, 0, 0,
	0, 667, 0, -2, 0, 662, 661, 440, 39, 0,
	429, 470, 0, 471, 472, 473, 203, 207, 0, 212,
	0, 229, 230, 0, 164, 165, 179, 182, 0, 74,
	0, 1015, 266, 284, 0, 715, 270, 276, 277, 1015,
	0, 0, 0, 0, 293, 30, 0, 0, 558, 560,
	559, 561, 0, 0, 0, 581, 582, 0, 657, 31,
	0, 446, 432, 438, 208, 209, 0, 213, 211, 0,
	205, 83, 265, 0, 0, 278, 0, 302, 0, 95,
	96, 89, 638, 636, 562, 0, 0, 0, 665, -2,
	663, 210, 0, 72, 206, 0, 84, 85, 205, 0,
	301, 0, 0, 92, 593, 0, 596, 0, 77, -2,
	87, 88, 272, 0, 303, 0, 290, 594, 0, 205,
	0, 0, 233, 273, 0, 0, 234, 235, 0, 0,
	595, 236, 0, 237, 0, 0, 0, 0, 0, 243,
	245, 246, 0, 0, 244, 304, 305, 247, 248, 249,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 77, 3, 3, 3, 104, 96, 3,
	56, 58, 101, 99, 57, 100, 114, 102, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 367,
	85, 84, 86, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 106, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 95, 3, 107,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 78, 79, 80, 81, 82, 83, 87, 88,
	89, 90, 91, 92, 93, 94, 97, 98, 103, 105,
	108, 109, 110, 111, 112, 113, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:342
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:347
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:348
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:352
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:376
		{
			setParseTree(yylex, nil)
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:382
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 27:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:390
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 28:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:394
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 29:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:400
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 30:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:407
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:413
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:417
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:423
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:427
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 35:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:434
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:446
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:458
		{
			yyVAL.str = InsertStr
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:462
		{
			yyVAL.str = ReplaceStr
		}
	case 39:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:468
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:474
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:478
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:482
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:486
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:491
		{
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:492
		{
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:496
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName.ToViewName()}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:500
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName.ToViewName())
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:506
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:510
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:516
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:520
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:525
		{
			yyVAL.partitions = nil
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:529
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:535
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:539
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:543
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:547
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:553
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:557
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:563
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:567
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:571
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:577
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:581
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:585
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:589
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:595
		{
			yyVAL.str = SessionStr
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:599
		{
			yyVAL.str = GlobalStr
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:604
		{
			yyVAL.int = yyPosition(yylex)
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:610
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			if len(yyDollar[1].ddl.TableSpec.Constraints) > 0 {
				yyDollar[1].ddl.ConstraintAction = AddStr
			}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:618
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 72:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:624
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: yyDollar[4].colIdent, Using: yyDollar[5].colIdent, Type: yyDollar[2].str, Columns: yyDollar[9].indexColumns, Options: yyDollar[11].indexOptions}}
		}
	case 73:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:628
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[3].tableName.ToViewName(), ViewExpr: yyDollar[6].selStmt, ViewSelectPositionStart: yyDollar[5].int, ViewSelectPositionEnd: yyDollar[7].int - 1}
		}
	case 74:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:632
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[5].tableName.ToViewName(), ViewExpr: yyDollar[8].selStmt, ViewSelectPositionStart: yyDollar[7].int, ViewSelectPositionEnd: yyDollar[9].int - 1, OrReplace: true}
		}
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:636
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:640
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 77:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:644
		{
			yyVAL.statement = &DDL{Action: CreateStr, TableName: yyDollar[7].colIdent, TriggerSpec: &TriggerSpec{Name: yyDollar[3].bytes, Time: yyDollar[4].str, Event: yyDollar[5].str, Order: yyDollar[11].str, Body: yyDollar[12].statement}}
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:650
		{
			yyVAL.str = BeforeStr
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:654
		{
			yyVAL.str = AfterStr
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:660
		{
			yyVAL.str = TriggerInsertStr
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:664
		{
			yyVAL.str = TriggerUpdateStr
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:668
		{
			yyVAL.str = TriggerDeleteStr
		}
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:673
		{
			yyVAL.str = ""
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:677
		{
			yyVAL.str = FollowsStr
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:681
		{
			yyVAL.str = PrecedesStr
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:687
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:694
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:698
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:704
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:709
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:714
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:720
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:725
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:731
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:737
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName, IfNotExists: ne}
			setDDL(yylex, yyVAL.ddl)
		}
	case 98:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:748
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:755
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 100:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:759
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:765
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:770
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:774
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:778
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:784
		{
			if err := yyDollar[2].columnType.merge(yyDollar[3].columnType); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:793
		{
			yyVAL.columnType = ColumnType{}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:797
		{
			opt := ColumnType{NotNull: yyDollar[2].boolVal, sawnull: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:806
		{
			opt := ColumnType{Default: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:815
		{
			opt := ColumnType{OnUpdate: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:824
		{
			opt := ColumnType{Autoincrement: yyDollar[2].boolVal, sawai: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:833
		{
			opt := ColumnType{KeyOpt: yyDollar[2].colKeyOpt}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:842
		{
			opt := ColumnType{Comment: yyDollar[2].sqlVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:853
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:864
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:869
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:875
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:879
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:883
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:887
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:891
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:895
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:899
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:903
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:907
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:913
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:919
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:925
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:931
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:937
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:943
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:949
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:955
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:963
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:967
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:971
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:975
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:979
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:985
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:989
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:993
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:997
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1001
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1005
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 147:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1009
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1013
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1017
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 150:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1021
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Length: yyDollar[4].sqlVal}
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1025
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1029
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1033
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1037
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1041
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1045
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1049
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 158:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1053
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1057
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1061
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1065
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1069
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1073
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 164:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1077
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 165:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1082
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1088
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1092
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1096
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1100
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1104
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1108
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1112
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1116
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1122
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[1].bytes))
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1127
		{
			yyVAL.strs = append(yyDollar[1].strs, string(yyDollar[3].bytes))
		}
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1132
		{
			yyVAL.sqlVal = nil
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1136
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1141
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 179:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1145
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 180:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1153
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1157
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 182:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1163
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1171
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1175
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1180
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1184
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1191
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1195
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1201
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1207
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1213
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 192:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1218
		{
			yyVAL.str = ""
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1222
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1226
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1231
		{
			yyVAL.str = ""
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1235
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1239
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1245
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1249
		{
			yyVAL.colKeyOpt = colKey
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1253
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1257
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1263
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 203:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1269
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 204:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1273
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 205:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1278
		{
			yyVAL.indexOptions = nil
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1282
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1288
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1292
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1298
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1302
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1307
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 212:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1313
		{
			yyVAL.str = ""
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1317
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1323
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1327
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1331
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1335
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1339
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1345
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1349
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1353
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1359
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1363
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 224:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1368
		{
			yyVAL.str = ""
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1372
		{
			yyVAL.str = yyDollar[1].str
		}
	case 226:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1377
		{
			yyVAL.str = ""
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1381
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1387
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1391
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1397
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal, Order: yyDollar[3].str}
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1403
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1407
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 233:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1414
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 234:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1418
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 235:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1422
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 236:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1426
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 237:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1430
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[12].ReferenceAction, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1436
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1440
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 240:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1445
		{
			yyVAL.str = ""
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1449
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1453
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1459
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1465
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1471
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1475
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1479
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1483
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1487
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 250:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1492
		{
			yyVAL.str = ""
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1496
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1500
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1508
		{
			yyVAL.str = yyDollar[1].str
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1512
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1516
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1522
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1526
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1530
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 259:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1535
		{
			yyVAL.str = ""
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1539
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 264:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1550
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 265:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1554
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			ddl.Column = yyDollar[8].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 266:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1561
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 267:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1568
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 268:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1572
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: DropStr, Column: NewColIdent(string(yyDollar[7].bytes)), Table: yyDollar[4].tableName}
		}
	case 269:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1576
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 270:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1580
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: RenameStr, Table: yyDollar[4].tableName, Column: NewColIdent(string(yyDollar[7].bytes)), ToColumn: NewColIdent(string(yyDollar[9].bytes))}
		}
	case 271:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1584
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 272:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1589
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[7].str), Using: yyDollar[8].colIdent, Columns: yyDollar[10].indexColumns, Options: yyDollar[12].indexOptions}}
		}
	case 273:
		yyDollar = yyS[yypt-14 : yypt+1]
//line sql.y:1593
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[9].str), Type: yyDollar[7].str, Using: yyDollar[10].colIdent, Columns: yyDollar[12].indexColumns, Options: yyDollar[14].indexOptions}}
		}
	case 274:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1597
		{
			yyVAL.statement = &DDL{Action: AlterStr, ConstraintAction: DropStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[7].bytes)}}}}
		}
	case 275:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1602
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[7].colIdent}}
		}
	case 276:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1606
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: RenameStr, FromName: yyDollar[7].colIdent, ToName: yyDollar[9].colIdent}}
		}
	case 277:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1610
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ModifyStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 278:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1617
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ChangeStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, Column: NewColIdent(string(yyDollar[7].bytes)), ColumnOrder: yyDollar[9].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			yyVAL.statement = ddl
		}
	case 279:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1623
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 280:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1627
		{
			ddl := &DDL{Action: AlterStr, ConstraintAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddConstraint(yyDollar[6].constraintDefinition)
			yyVAL.statement = ddl
		}
	case 281:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1633
		{
			yyVAL.statement = &DDL{Action: AlterStr, ConstraintAction: DropStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[8].bytes), Details: &ForeignKeyDefinition{}}}}}
		}
	case 282:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1639
		{
			yyVAL.columnOrder = nil
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1643
		{
			yyVAL.columnOrder = &ColumnOrder{First: true}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1647
		{
			yyVAL.columnOrder = &ColumnOrder{AfterColumn: NewColIdent(string(yyDollar[2].bytes))}
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1653
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 286:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1659
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 287:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1671
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 288:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1681
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 289:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1685
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 290:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1689
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 291:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1702
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 292:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1712
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 293:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1716
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1729
		{
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1731
		{
		}
	case 301:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1742
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1748
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1752
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 304:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1758
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 305:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1762
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1768
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1774
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 308:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1778
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 309:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1786
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 310:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1794
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[3].colIdent}}
		}
	case 311:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1798
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromViews: yyDollar[4].tableNames, IfExists: exists}
		}
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1806
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1810
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1816
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1820
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1825
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 317:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1831
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1836
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1840
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 320:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1844
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 321:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1848
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 322:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1853
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 323:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1857
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 324:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1861
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 325:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1865
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1869
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1873
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1877
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1881
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 330:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1885
		{
			yyVAL.statement = &Show{Type: IndexStr, Table: yyDollar[4].tableName, Database: yyDollar[5].str, ShowIndexFilterOpt: yyDollar[6].expr}
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1889
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1893
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1897
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1901
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 335:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1905
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 336:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1910
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[6].showFilter, AsOf: yyDollar[5].expr}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 337:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1920
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1924
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1928
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1934
		{
			// Cannot dereference $3 directly, or else the parser stackcannot be pooled. See yyParsePooled
			cmp := yyDollar[3].expr.(*ComparisonExpr)
			cmp.Left = &ColName{Name: NewColIdent("collation")}
			var ex Expr = cmp
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &ex}
		}
	case 341:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1942
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1947
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1951
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 344:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1955
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1959
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1973
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1979
		{
			yyVAL.expr = &ComparisonExpr{Operator: LikeStr, Right: yyDollar[2].expr, Escape: yyDollar[3].expr}
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1985
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1989
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1995
		{
			yyVAL.str = ""
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1999
		{
			yyVAL.str = "full "
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2005
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2009
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2015
		{
			yyVAL.str = ""
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2019
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2023
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 357:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2029
		{
			yyVAL.showFilter = nil
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2033
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2037
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 360:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2043
		{
			yyVAL.showFilter = nil
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2047
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2053
		{
			yyVAL.str = ""
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2057
		{
			yyVAL.str = SessionStr
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2061
		{
			yyVAL.str = GlobalStr
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2067
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2071
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2077
		{
			yyVAL.statement = &Begin{}
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2081
		{
			yyVAL.statement = &Begin{}
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2087
		{
			yyVAL.statement = &Commit{}
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2093
		{
			yyVAL.statement = &Rollback{}
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2098
		{
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2099
		{
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2103
		{
			yyVAL.statement = &Explain{ExplainFormat: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2107
		{
			yyVAL.statement = &Explain{Analyze: true, ExplainFormat: TreeStr, Statement: yyDollar[3].selStmt}
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2113
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2121
		{
			yyVAL.str = ""
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2125
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2136
		{
			yyVAL.statement = &Show{Type: "columns", OnTable: yyDollar[2].tableName}
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2140
		{
			yyVAL.statement = &OtherRead{}
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2146
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2150
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2154
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2158
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2164
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 390:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2168
		{
			setAllowComments(yylex, true)
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2172
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2178
		{
			yyVAL.bytes2 = nil
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2182
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2188
		{
			yyVAL.str = UnionStr
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2192
		{
			yyVAL.str = UnionAllStr
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2196
		{
			yyVAL.str = UnionDistinctStr
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2201
		{
			yyVAL.str = ""
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2205
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2209
		{
			yyVAL.str = SQLCacheStr
		}
	case 400:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2214
		{
			yyVAL.str = ""
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2218
		{
			yyVAL.str = ""
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2222
		{
			yyVAL.str = DistinctStr
		}
	case 403:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2227
		{
			yyVAL.str = ""
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2231
		{
			yyVAL.str = StraightJoinHint
		}
	case 405:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2236
		{
			yyVAL.selectExprs = nil
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2240
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2246
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2250
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2256
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2260
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2264
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 412:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2268
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 413:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2273
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2277
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2281
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2288
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 418:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2293
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2297
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2303
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2307
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2317
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2321
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2325
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2331
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2337
		{
			yyVAL.aliasedTableName = yyDollar[2].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
		}
	case 429:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2342
		{
			yyVAL.aliasedTableName = yyDollar[6].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
			yyVAL.aliasedTableName.Partitions = yyDollar[4].partitions
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2353
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Hints: yyDollar[1].indexHints}
		}
	case 431:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2357
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, Hints: yyDollar[4].indexHints}
		}
	case 432:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2361
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, As: yyDollar[5].tableIdent, Hints: yyDollar[6].indexHints}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2365
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2369
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[1].tableIdent, Hints: yyDollar[2].indexHints}
		}
	case 435:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2380
		{
			yyVAL.expr = nil
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2384
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2390
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2394
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2400
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2404
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 441:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2417
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 442:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2421
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 443:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2425
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2429
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2435
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 446:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2437
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 447:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2441
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2443
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2447
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2449
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 451:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2452
		{
			yyVAL.empty = struct{}{}
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2454
		{
			yyVAL.empty = struct{}{}
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2459
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2465
		{
			yyVAL.str = JoinStr
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2469
		{
			yyVAL.str = JoinStr
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2473
		{
			yyVAL.str = JoinStr
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2479
		{
			yyVAL.str = StraightJoinStr
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2485
		{
			yyVAL.str = LeftJoinStr
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2489
		{
			yyVAL.str = LeftJoinStr
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2493
		{
			yyVAL.str = RightJoinStr
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2497
		{
			yyVAL.str = RightJoinStr
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2503
		{
			yyVAL.str = NaturalJoinStr
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2507
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2517
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2521
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2527
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2531
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2537
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 470:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2542
		{
			yyVAL.indexHints = nil
		}
	case 471:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2546
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 472:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2550
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 473:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2554
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 474:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2559
		{
			yyVAL.expr = nil
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2563
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2569
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2573
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2577
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2581
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2585
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2589
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2593
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 483:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2599
		{
			yyVAL.str = ""
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2603
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2609
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2613
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2619
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2623
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 489:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2627
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 490:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2631
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 491:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2635
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2639
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 493:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2643
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 494:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2647
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 495:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2651
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2655
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2661
		{
			yyVAL.str = IsNullStr
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2665
		{
			yyVAL.str = IsNotNullStr
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2669
		{
			yyVAL.str = IsTrueStr
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2673
		{
			yyVAL.str = IsNotTrueStr
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2677
		{
			yyVAL.str = IsFalseStr
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2681
		{
			yyVAL.str = IsNotFalseStr
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2687
		{
			yyVAL.str = EqualStr
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2691
		{
			yyVAL.str = LessThanStr
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2695
		{
			yyVAL.str = GreaterThanStr
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2699
		{
			yyVAL.str = LessEqualStr
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2703
		{
			yyVAL.str = GreaterEqualStr
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2707
		{
			yyVAL.str = NotEqualStr
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2711
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 510:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2716
		{
			yyVAL.expr = nil
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2720
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2726
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2730
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2734
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2740
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2746
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2750
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2756
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2760
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2764
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2768
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2772
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2776
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2780
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2784
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2788
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2792
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2796
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2800
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2804
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2808
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2812
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2816
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2820
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2824
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2828
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2832
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2836
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2840
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2844
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2848
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2856
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2870
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2874
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2878
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 550:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2896
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: yyDollar[3].str == DistinctStr, Exprs: yyDollar[4].selectExprs}
		}
	case 551:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2900
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 552:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2910
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 553:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2914
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2918
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema")}
		}
	case 555:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2922
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 556:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2926
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 557:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2930
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 558:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2934
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 559:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2938
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 560:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2942
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 561:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2946
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 562:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2950
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 563:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2954
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("first"), Exprs: yyDollar[3].selectExprs}
		}
	case 564:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2958
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 565:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2962
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 566:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2966
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2976
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2980
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2984
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2989
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2994
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2999
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3005
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3010
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3015
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3019
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3023
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3028
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3033
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3038
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 581:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3042
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 582:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3046
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3056
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 586:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3066
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 587:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3070
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3074
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 589:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3078
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 590:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3082
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 591:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3086
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3092
		{
			yyVAL.str = ""
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3096
		{
			yyVAL.str = BooleanModeStr
		}
	case 594:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3100
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 595:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3104
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3108
		{
			yyVAL.str = QueryExpansionStr
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3114
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3118
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3124
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3128
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3132
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3136
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3140
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3144
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3150
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3154
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3158
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3162
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3166
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3170
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3174
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 612:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3179
		{
			yyVAL.expr = nil
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3183
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 614:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3188
		{
			yyVAL.str = string("")
		}
	case 615:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3192
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3198
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3202
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 618:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3208
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 619:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3213
		{
			yyVAL.expr = nil
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3217
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3223
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3227
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 623:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3231
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3237
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3241
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3245
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3249
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3253
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3257
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3261
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3265
		{
			yyVAL.expr = &NullVal{}
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3271
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3280
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3284
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 635:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3289
		{
			yyVAL.exprs = nil
		}
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3293
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 637:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3298
		{
			yyVAL.expr = nil
		}
	case 638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3302
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 639:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3307
		{
			yyVAL.orderBy = nil
		}
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3311
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3317
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3321
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3327
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 644:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3332
		{
			yyVAL.str = AscScr
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3336
		{
			yyVAL.str = AscScr
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3340
		{
			yyVAL.str = DescScr
		}
	case 647:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3345
		{
			yyVAL.limit = nil
		}
	case 648:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3349
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 649:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3353
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 650:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3357
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 651:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3362
		{
			yyVAL.str = ""
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3366
		{
			yyVAL.str = ForUpdateStr
		}
	case 653:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3370
		{
			yyVAL.str = ShareModeStr
		}
	case 654:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3383
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3387
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3391
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 657:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3396
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 658:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3400
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 659:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3404
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3411
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3415
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 662:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3419
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 663:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3423
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 664:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3428
		{
			yyVAL.updateExprs = nil
		}
	case 665:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3432
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3438
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 667:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3442
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3448
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3452
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 670:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3458
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3464
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3474
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3478
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 674:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3484
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3490
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3494
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3500
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 678:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3504
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 679:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3508
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3512
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3519
		{
			yyVAL.bytes = []byte("charset")
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3526
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3530
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3534
		{
			yyVAL.expr = &Default{}
		}
	case 689:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3543
		{
			yyVAL.byt = 0
		}
	case 690:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3545
		{
			yyVAL.byt = 1
		}
	case 691:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3548
		{
			yyVAL.byt = 0
		}
	case 692:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3550
		{
			yyVAL.byt = 1
		}
	case 693:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3553
		{
			yyVAL.str = ""
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3555
		{
			yyVAL.str = IgnoreStr
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3559
		{
			yyVAL.empty = struct{}{}
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3561
		{
			yyVAL.empty = struct{}{}
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3563
		{
			yyVAL.empty = struct{}{}
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3565
		{
			yyVAL.empty = struct{}{}
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3567
		{
			yyVAL.empty = struct{}{}
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3569
		{
			yyVAL.empty = struct{}{}
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3571
		{
			yyVAL.empty = struct{}{}
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3573
		{
			yyVAL.empty = struct{}{}
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3575
		{
			yyVAL.empty = struct{}{}
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3577
		{
			yyVAL.empty = struct{}{}
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3581
		{
			yyVAL.empty = struct{}{}
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3583
		{
			yyVAL.empty = struct{}{}
		}
	case 707:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3586
		{
			yyVAL.empty = struct{}{}
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3588
		{
			yyVAL.empty = struct{}{}
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3590
		{
			yyVAL.empty = struct{}{}
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3594
		{
			yyVAL.str = UniqueStr
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3596
		{
			yyVAL.str = FulltextStr
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3598
		{
			yyVAL.str = SpatialStr
		}
	case 713:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3601
		{
			yyVAL.str = ""
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3603
		{
			yyVAL.str = yyDollar[1].str
		}
	case 715:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3606
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 716:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3608
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3612
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3616
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3623
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3629
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3633
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3640
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3954
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3963
		{
			decNesting(yylex)
		}
	case 1015:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3968
		{
			skipToEnd(yylex)
		}
	case 1016:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3973
		{
			skipToEnd(yylex)
		}
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3977
		{
			skipToEnd(yylex)
		}
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3981
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
