//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const VALUES = 57376
const LAST_INSERT_ID = 57377
const NEXT = 57378
const VALUE = 57379
const SHARE = 57380
const MODE = 57381
const SQL_NO_CACHE = 57382
const SQL_CACHE = 57383
const JOIN = 57384
const STRAIGHT_JOIN = 57385
const LEFT = 57386
const RIGHT = 57387
const INNER = 57388
const OUTER = 57389
const CROSS = 57390
const NATURAL = 57391
const USE = 57392
const FORCE = 57393
const ON = 57394
const USING = 57395
const ID = 57396
const HEX = 57397
const STRING = 57398
const INTEGRAL = 57399
const FLOAT = 57400
const HEXNUM = 57401
const VALUE_ARG = 57402
const LIST_ARG = 57403
const COMMENT = 57404
const COMMENT_KEYWORD = 57405
const BIT_LITERAL = 57406
const NULL = 57407
const TRUE = 57408
const FALSE = 57409
const OFF = 57410
const OR = 57411
const AND = 57412
const NOT = 57413
const BETWEEN = 57414
const CASE = 57415
const WHEN = 57416
const THEN = 57417
const ELSE = 57418
const END = 57419
const LE = 57420
const GE = 57421
const NE = 57422
const NULL_SAFE_EQUAL = 57423
const IS = 57424
const LIKE = 57425
const REGEXP = 57426
const IN = 57427
const SHIFT_LEFT = 57428
const SHIFT_RIGHT = 57429
const DIV = 57430
const MOD = 57431
const UNARY = 57432
const COLLATE = 57433
const BINARY = 57434
const UNDERSCORE_BINARY = 57435
const UNDERSCORE_UTF8MB4 = 57436
const INTERVAL = 57437
const JSON_EXTRACT_OP = 57438
const JSON_UNQUOTE_EXTRACT_OP = 57439
const CREATE = 57440
const ALTER = 57441
const DROP = 57442
const RENAME = 57443
const ANALYZE = 57444
const ADD = 57445
const FLUSH = 57446
const SCHEMA = 57447
const TABLE = 57448
const INDEX = 57449
const VIEW = 57450
const TO = 57451
const IGNORE = 57452
const IF = 57453
const UNIQUE = 57454
const PRIMARY = 57455
const COLUMN = 57456
const SPATIAL = 57457
const FULLTEXT = 57458
const KEY_BLOCK_SIZE = 57459
const ACTION = 57460
const CASCADE = 57461
const CONSTRAINT = 57462
const FOREIGN = 57463
const NO = 57464
const REFERENCES = 57465
const RESTRICT = 57466
const SHOW = 57467
const DESCRIBE = 57468
const EXPLAIN = 57469
const DATE = 57470
const ESCAPE = 57471
const REPAIR = 57472
const OPTIMIZE = 57473
const TRUNCATE = 57474
const MAXVALUE = 57475
const PARTITION = 57476
const REORGANIZE = 57477
const LESS = 57478
const THAN = 57479
const PROCEDURE = 57480
const TRIGGER = 57481
const VINDEX = 57482
const VINDEXES = 57483
const STATUS = 57484
const VARIABLES = 57485
const WARNINGS = 57486
const BEGIN = 57487
const START = 57488
const TRANSACTION = 57489
const COMMIT = 57490
const ROLLBACK = 57491
const BIT = 57492
const TINYINT = 57493
const SMALLINT = 57494
const MEDIUMINT = 57495
const INT = 57496
const INTEGER = 57497
const BIGINT = 57498
const INTNUM = 57499
const UUID = 57500
const REAL = 57501
const DOUBLE = 57502
const FLOAT_TYPE = 57503
const DECIMAL = 57504
const NUMERIC = 57505
const TIME = 57506
const TIMESTAMP = 57507
const DATETIME = 57508
const YEAR = 57509
const CHAR = 57510
const VARCHAR = 57511
const BOOL = 57512
const CHARACTER = 57513
const VARBINARY = 57514
const NCHAR = 57515
const TEXT = 57516
const TINYTEXT = 57517
const MEDIUMTEXT = 57518
const LONGTEXT = 57519
const BLOB = 57520
const TINYBLOB = 57521
const MEDIUMBLOB = 57522
const LONGBLOB = 57523
const JSON = 57524
const ENUM = 57525
const GEOMETRY = 57526
const POINT = 57527
const LINESTRING = 57528
const POLYGON = 57529
const GEOMETRYCOLLECTION = 57530
const MULTIPOINT = 57531
const MULTILINESTRING = 57532
const MULTIPOLYGON = 57533
const NULLX = 57534
const AUTO_INCREMENT = 57535
const APPROXNUM = 57536
const SIGNED = 57537
const UNSIGNED = 57538
const ZEROFILL = 57539
const COLLATION = 57540
const DATABASES = 57541
const SCHEMAS = 57542
const TABLES = 57543
const VITESS_KEYSPACES = 57544
const VITESS_SHARDS = 57545
const VITESS_TABLETS = 57546
const VSCHEMA = 57547
const VSCHEMA_TABLES = 57548
const VITESS_TARGET = 57549
const FULL = 57550
const PROCESSLIST = 57551
const COLUMNS = 57552
const FIELDS = 57553
const ENGINES = 57554
const PLUGINS = 57555
const NAMES = 57556
const CHARSET = 57557
const GLOBAL = 57558
const SESSION = 57559
const ISOLATION = 57560
const LEVEL = 57561
const READ = 57562
const WRITE = 57563
const ONLY = 57564
const REPEATABLE = 57565
const COMMITTED = 57566
const UNCOMMITTED = 57567
const SERIALIZABLE = 57568
const CURRENT_TIMESTAMP = 57569
const DATABASE = 57570
const CURRENT_DATE = 57571
const CURRENT_TIME = 57572
const LOCALTIME = 57573
const LOCALTIMESTAMP = 57574
const UTC_DATE = 57575
const UTC_TIME = 57576
const UTC_TIMESTAMP = 57577
const REPLACE = 57578
const CONVERT = 57579
const CAST = 57580
const SUBSTR = 57581
const SUBSTRING = 57582
const GROUP_CONCAT = 57583
const SEPARATOR = 57584
const TIMESTAMPADD = 57585
const TIMESTAMPDIFF = 57586
const MATCH = 57587
const AGAINST = 57588
const BOOLEAN = 57589
const LANGUAGE = 57590
const WITH = 57591
const QUERY = 57592
const EXPANSION = 57593
const UNUSED = 57594

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"UUID",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA",
	"VSCHEMA_TABLES",
	"VITESS_TARGET",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 29,
	-2, 4,
	-1, 31,
	125, 64,
	-2, 640,
	-1, 37,
	159, 306,
	160, 306,
	-2, 296,
	-1, 271,
	112, 650,
	-2, 646,
	-1, 272,
	112, 651,
	-2, 647,
	-1, 337,
	82, 826,
	-2, 62,
	-1, 338,
	82, 782,
	-2, 63,
	-1, 343,
	82, 761,
	-2, 609,
	-1, 345,
	82, 803,
	-2, 611,
	-1, 619,
	1, 360,
	5, 360,
	12, 360,
	13, 360,
	14, 360,
	15, 360,
	17, 360,
	19, 360,
	30, 360,
	31, 360,
	42, 360,
	43, 360,
	44, 360,
	45, 360,
	46, 360,
	48, 360,
	49, 360,
	52, 360,
	53, 360,
	55, 360,
	56, 360,
	270, 360,
	-2, 378,
	-1, 622,
	53, 45,
	55, 45,
	-2, 47,
	-1, 767,
	112, 653,
	-2, 649,
	-1, 1002,
	5, 30,
	-2, 444,
	-1, 1032,
	5, 29,
	-2, 583,
	-1, 1105,
	5, 29,
	-2, 69,
	-1, 1280,
	5, 30,
	-2, 584,
	-1, 1334,
	5, 29,
	-2, 586,
	-1, 1405,
	5, 30,
	-2, 587,
}

const yyPrivate = 57344

const yyLast = 12400

var yyAct = [...]int{

	272, 1243, 1438, 1129, 575, 1315, 1035, 1393, 1346, 876,
	1053, 1428, 1181, 1215, 853, 1178, 250, 446, 302, 872,
	1036, 1182, 931, 967, 289, 885, 1300, 875, 276, 475,
	1078, 917, 1188, 240, 1059, 57, 95, 1194, 1153, 95,
	994, 799, 342, 802, 1108, 95, 792, 477, 732, 1107,
	855, 1098, 632, 303, 51, 851, 840, 820, 506, 616,
	769, 801, 889, 512, 631, 336, 927, 95, 347, 518,
	976, 615, 95, 833, 274, 527, 574, 3, 242, 243,
	244, 245, 259, 95, 248, 911, 95, 331, 333, 56,
	1431, 1415, 95, 1426, 1403, 589, 1423, 950, 1244, 1414,
	1402, 1170, 1272, 455, 633, 51, 634, 263, 590, 1210,
	1211, 949, 479, 255, 314, 339, 320, 321, 318, 319,
	317, 316, 315, 1066, 1209, 80, 1065, 866, 249, 1067,
	322, 323, 496, 90, 86, 87, 88, 867, 868, 954,
	497, 494, 495, 82, 61, 84, 500, 247, 948, 1371,
	540, 539, 549, 550, 542, 543, 544, 545, 546, 547,
	548, 541, 246, 1089, 551, 910, 1321, 918, 1263, 278,
	63, 64, 65, 66, 67, 75, 76, 1261, 481, 239,
	483, 706, 77, 489, 490, 79, 78, 1132, 1131, 704,
	1425, 1422, 1394, 1128, 834, 1446, 1389, 890, 945, 942,
	943, 465, 941, 1114, 1347, 452, 499, 1312, 1442, 1133,
	480, 482, 84, 95, 892, 705, 347, 1349, 347, 347,
	710, 347, 347, 450, 347, 892, 347, 1204, 1203, 1202,
	449, 707, 1378, 952, 955, 347, 456, 212, 85, 1283,
	83, 1054, 1056, 1079, 906, 902, 961, 484, 485, 960,
	486, 487, 1140, 488, 1021, 491, 89, 461, 563, 564,
	988, 741, 531, 873, 501, 471, 347, 551, 903, 476,
	947, 476, 476, 541, 476, 476, 551, 476, 526, 476,
	502, 503, 908, 1225, 900, 1348, 738, 1172, 476, 514,
	901, 1387, 946, 1011, 1361, 1125, 1192, 918, 74, 1113,
	478, 1127, 635, 1008, 1118, 1115, 1109, 1116, 1112, 51,
	891, 1311, 1110, 1111, 1440, 1401, 1154, 1441, 1055, 1439,
	458, 891, 459, 1372, 560, 460, 1117, 562, 733, 95,
	95, 95, 515, 776, 1226, 347, 951, 525, 524, 525,
	524, 347, 301, 699, 1174, 907, 905, 774, 775, 773,
	70, 953, 1007, 1156, 526, 573, 526, 577, 578, 579,
	580, 581, 582, 583, 584, 585, 969, 588, 591, 591,
	591, 597, 591, 591, 597, 591, 605, 606, 607, 608,
	609, 610, 339, 620, 825, 614, 71, 1158, 821, 1162,
	1018, 1157, 524, 1155, 505, 563, 564, 1126, 1160, 1124,
	821, 516, 525, 524, 1121, 563, 564, 1159, 526, 734,
	341, 592, 594, 596, 598, 600, 602, 603, 623, 526,
	1161, 1163, 521, 629, 593, 595, 904, 599, 601, 451,
	604, 540, 539, 549, 550, 542, 543, 544, 545, 546,
	547, 548, 541, 561, 968, 551, 95, 759, 761, 762,
	1006, 95, 1005, 760, 1082, 95, 447, 95, 347, 464,
	1407, 54, 95, 1447, 1306, 95, 1305, 1388, 95, 525,
	524, 772, 95, 1102, 347, 347, 744, 745, 1101, 347,
	347, 347, 95, 347, 347, 740, 526, 703, 1090, 445,
	347, 347, 544, 545, 546, 547, 548, 541, 1328, 619,
	551, 1303, 1448, 721, 722, 453, 454, 1137, 723, 724,
	725, 476, 727, 728, 720, 985, 986, 987, 347, 729,
	730, 1099, 739, 95, 525, 524, 1385, 476, 476, 347,
	81, 746, 476, 476, 476, 1087, 476, 476, 22, 525,
	524, 526, 718, 476, 476, 1352, 1424, 892, 467, 468,
	469, 1234, 711, 770, 447, 793, 526, 794, 341, 1358,
	341, 341, 447, 341, 341, 1068, 341, 1069, 341, 1410,
	505, 1352, 1397, 347, 767, 1246, 447, 341, 1239, 766,
	540, 539, 549, 550, 542, 543, 544, 545, 546, 547,
	548, 541, 1352, 505, 551, 328, 329, 1237, 254, 748,
	1352, 1379, 765, 1079, 763, 1074, 347, 347, 529, 1352,
	1351, 811, 814, 95, 1298, 1297, 51, 822, 1285, 505,
	505, 95, 95, 1282, 505, 95, 95, 1232, 1231, 347,
	795, 577, 717, 995, 504, 1228, 1229, 1357, 796, 797,
	807, 808, 347, 891, 813, 816, 817, 716, 888, 886,
	830, 887, 1228, 1227, 806, 818, 884, 890, 1000, 505,
	880, 837, 505, 804, 505, 1143, 700, 698, 696, 829,
	473, 831, 832, 626, 852, 466, 339, 341, 620, 1356,
	861, 642, 641, 637, 1355, 1222, 893, 1179, 24, 877,
	1191, 919, 920, 921, 863, 864, 859, 1191, 58, 347,
	804, 347, 1060, 24, 771, 347, 347, 95, 95, 1000,
	95, 95, 1030, 1278, 95, 627, 1031, 625, 933, 542,
	543, 544, 545, 546, 547, 548, 541, 1360, 937, 551,
	939, 1333, 95, 837, 95, 95, 54, 95, 1000, 1230,
	913, 914, 915, 916, 1060, 837, 860, 24, 625, 1070,
	865, 54, 476, 535, 476, 538, 924, 925, 926, 929,
	930, 552, 553, 554, 555, 556, 557, 558, 836, 536,
	537, 534, 540, 539, 549, 550, 542, 543, 544, 545,
	546, 547, 548, 541, 767, 1024, 551, 1191, 1023, 766,
	619, 1000, 770, 837, 619, 54, 256, 965, 625, 628,
	341, 742, 709, 54, 1416, 978, 977, 1317, 912, 292,
	291, 294, 295, 296, 297, 984, 341, 341, 293, 298,
	989, 341, 341, 341, 1290, 341, 341, 932, 1220, 1195,
	1196, 1130, 341, 341, 990, 1073, 928, 923, 95, 95,
	95, 95, 95, 922, 54, 842, 845, 846, 847, 843,
	95, 844, 848, 95, 935, 1195, 1196, 95, 1433, 1429,
	750, 95, 999, 1198, 1179, 1037, 842, 845, 846, 847,
	843, 529, 844, 848, 341, 1103, 347, 1017, 736, 713,
	1015, 754, 1201, 1200, 1047, 1071, 269, 1033, 1034, 1048,
	1044, 620, 620, 620, 620, 620, 1062, 1045, 1039, 1040,
	747, 1042, 1046, 1043, 1420, 1050, 852, 1058, 1057, 1038,
	1032, 1413, 1041, 1139, 620, 798, 1061, 973, 1063, 1049,
	1080, 846, 847, 877, 260, 261, 519, 520, 1418, 806,
	983, 823, 982, 1094, 640, 507, 347, 1093, 474, 1095,
	1096, 1097, 517, 771, 1276, 1091, 1092, 508, 827, 828,
	1076, 1077, 1331, 1086, 1085, 1081, 1075, 1313, 938, 803,
	805, 712, 519, 520, 981, 347, 95, 936, 850, 257,
	258, 341, 980, 251, 1106, 1100, 1365, 252, 58, 1364,
	95, 1319, 1060, 498, 341, 1435, 1434, 1120, 1012, 347,
	51, 1009, 1119, 731, 1134, 522, 1435, 1375, 1084, 737,
	60, 62, 265, 624, 55, 1, 1427, 619, 619, 619,
	619, 619, 1245, 1105, 1314, 1136, 944, 1392, 476, 1345,
	1214, 883, 619, 874, 69, 444, 68, 1386, 882, 881,
	619, 1146, 1147, 898, 347, 347, 1145, 1180, 73, 897,
	894, 341, 1088, 341, 1152, 909, 1165, 956, 957, 896,
	1183, 1171, 895, 1164, 899, 650, 648, 649, 347, 1037,
	647, 646, 652, 651, 767, 644, 645, 224, 334, 1175,
	1190, 347, 849, 347, 347, 636, 934, 523, 72, 1199,
	1123, 1310, 1213, 1122, 341, 1184, 940, 51, 492, 493,
	1205, 226, 559, 979, 1064, 1206, 1208, 340, 1212, 1186,
	1217, 743, 511, 1363, 95, 1318, 1016, 1218, 1219, 1221,
	1185, 1223, 1224, 586, 819, 277, 758, 290, 877, 287,
	877, 288, 749, 95, 1029, 1235, 533, 275, 267, 347,
	618, 611, 347, 347, 95, 841, 839, 838, 714, 1197,
	1193, 347, 1236, 617, 95, 1142, 1271, 1370, 753, 26,
	59, 262, 19, 18, 1238, 17, 20, 1241, 16, 15,
	1250, 14, 462, 30, 21, 13, 565, 566, 567, 568,
	569, 570, 571, 572, 12, 11, 10, 1251, 9, 823,
	997, 1259, 8, 7, 998, 6, 5, 4, 1145, 253,
	23, 1002, 1003, 1004, 2, 0, 1277, 620, 1010, 1252,
	0, 1013, 1014, 0, 0, 0, 0, 1020, 0, 0,
	0, 1022, 1287, 347, 1025, 1026, 1027, 1028, 341, 0,
	1037, 347, 1071, 1296, 1270, 0, 1286, 0, 0, 0,
	0, 0, 0, 0, 347, 0, 1052, 0, 0, 0,
	1256, 1257, 0, 1258, 0, 347, 1260, 0, 1262, 0,
	0, 0, 1308, 0, 509, 513, 1292, 1293, 1294, 1302,
	877, 1304, 0, 1307, 0, 0, 0, 0, 0, 1309,
	0, 532, 0, 0, 0, 0, 0, 0, 1104, 0,
	0, 0, 0, 347, 347, 0, 347, 476, 0, 1320,
	0, 347, 1316, 347, 347, 347, 95, 1183, 0, 347,
	1332, 0, 1299, 1339, 0, 0, 576, 341, 0, 0,
	1344, 0, 1350, 619, 0, 587, 0, 1340, 347, 1341,
	1342, 1343, 1353, 0, 1354, 0, 0, 0, 0, 0,
	0, 341, 1184, 0, 0, 1335, 0, 0, 0, 0,
	0, 0, 0, 0, 1362, 0, 1376, 0, 0, 0,
	0, 0, 1183, 347, 1384, 1383, 0, 0, 1334, 0,
	0, 347, 347, 0, 341, 0, 1395, 1359, 0, 0,
	1399, 1396, 0, 823, 0, 0, 1187, 1189, 1269, 347,
	0, 0, 1404, 0, 1151, 0, 0, 1184, 0, 51,
	95, 1391, 0, 0, 0, 347, 0, 0, 0, 0,
	1189, 1412, 0, 0, 1037, 510, 0, 0, 1316, 877,
	0, 0, 1377, 341, 1419, 341, 1216, 347, 1417, 0,
	768, 0, 0, 777, 778, 779, 780, 781, 782, 783,
	784, 785, 786, 787, 788, 789, 790, 791, 1443, 1432,
	0, 93, 0, 1421, 238, 0, 0, 0, 0, 0,
	93, 0, 540, 539, 549, 550, 542, 543, 544, 545,
	546, 547, 548, 541, 0, 0, 551, 0, 621, 266,
	0, 1242, 93, 0, 1247, 1248, 0, 93, 826, 1430,
	0, 0, 0, 341, 0, 0, 0, 0, 93, 0,
	0, 93, 0, 0, 0, 1148, 0, 93, 0, 0,
	0, 735, 0, 0, 92, 0, 0, 0, 0, 0,
	0, 0, 0, 241, 0, 540, 539, 549, 550, 542,
	543, 544, 545, 546, 547, 548, 541, 756, 757, 551,
	0, 1253, 0, 0, 823, 332, 0, 0, 1255, 0,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 1264,
	1265, 457, 0, 1275, 463, 341, 0, 0, 0, 0,
	470, 0, 0, 1301, 0, 0, 0, 0, 1274, 1279,
	1280, 1281, 0, 1284, 0, 0, 341, 0, 0, 0,
	576, 0, 0, 809, 810, 0, 0, 341, 0, 0,
	1295, 540, 539, 549, 550, 542, 543, 544, 545, 546,
	547, 548, 541, 0, 0, 551, 540, 539, 549, 550,
	542, 543, 544, 545, 546, 547, 548, 541, 93, 0,
	551, 0, 0, 996, 0, 1336, 1337, 0, 1338, 0,
	0, 0, 0, 1301, 0, 1301, 1301, 1301, 871, 0,
	0, 1216, 0, 540, 539, 549, 550, 542, 543, 544,
	545, 546, 547, 548, 541, 0, 1327, 551, 0, 0,
	1301, 991, 992, 993, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 24, 25, 52, 27, 28,
	0, 472, 0, 0, 0, 0, 0, 0, 0, 0,
	1268, 0, 0, 0, 43, 1390, 0, 0, 0, 29,
	48, 49, 0, 341, 341, 0, 0, 1366, 1367, 1368,
	1369, 0, 0, 0, 1373, 1374, 0, 0, 823, 38,
	0, 1406, 0, 54, 0, 0, 1380, 1381, 1382, 0,
	0, 0, 0, 0, 93, 93, 93, 1411, 0, 0,
	0, 0, 974, 975, 0, 513, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1400, 0, 0, 0, 1301,
	0, 0, 1405, 0, 540, 539, 549, 550, 542, 543,
	544, 545, 546, 547, 548, 541, 0, 1409, 551, 0,
	0, 0, 0, 0, 31, 32, 34, 33, 36, 1083,
	50, 0, 0, 0, 0, 0, 0, 613, 0, 622,
	0, 0, 0, 0, 0, 0, 0, 1001, 0, 0,
	0, 37, 44, 45, 0, 0, 46, 47, 35, 0,
	0, 1444, 1445, 0, 1019, 0, 0, 0, 0, 0,
	0, 39, 40, 0, 41, 42, 540, 539, 549, 550,
	542, 543, 544, 545, 546, 547, 548, 541, 0, 0,
	551, 93, 0, 0, 0, 0, 93, 0, 0, 0,
	93, 0, 93, 0, 0, 221, 0, 93, 0, 0,
	93, 0, 0, 93, 0, 0, 0, 719, 0, 0,
	0, 0, 1149, 1150, 0, 1267, 0, 93, 0, 234,
	0, 0, 0, 0, 0, 1166, 1167, 0, 1168, 1169,
	549, 550, 542, 543, 544, 545, 546, 547, 548, 541,
	1176, 1177, 551, 0, 643, 0, 0, 0, 0, 697,
	0, 1266, 53, 701, 0, 702, 0, 0, 93, 0,
	708, 0, 0, 332, 0, 0, 715, 719, 0, 0,
	213, 0, 0, 0, 0, 0, 0, 216, 0, 0,
	726, 0, 0, 0, 0, 225, 220, 0, 0, 540,
	539, 549, 550, 542, 543, 544, 545, 546, 547, 548,
	541, 0, 1138, 551, 0, 0, 0, 0, 0, 266,
	0, 0, 0, 0, 266, 266, 0, 223, 266, 266,
	266, 755, 0, 233, 824, 540, 539, 549, 550, 542,
	543, 544, 545, 546, 547, 548, 541, 0, 0, 551,
	0, 0, 0, 266, 266, 266, 266, 0, 93, 0,
	214, 1173, 0, 0, 0, 0, 93, 857, 0, 0,
	93, 93, 0, 0, 0, 1254, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 227, 217, 218,
	0, 228, 229, 230, 232, 0, 231, 237, 0, 0,
	0, 219, 222, 1207, 215, 236, 235, 539, 549, 550,
	542, 543, 544, 545, 546, 547, 548, 541, 0, 0,
	551, 835, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 862, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 93, 0, 93, 93, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 668, 0, 93, 0, 970,
	971, 0, 93, 0, 0, 0, 0, 719, 0, 0,
	0, 0, 0, 1322, 1323, 1324, 1325, 1326, 0, 266,
	0, 1329, 1330, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 958, 959, 1273, 962, 963,
	0, 0, 964, 0, 0, 0, 0, 576, 0, 0,
	0, 0, 0, 0, 0, 1288, 0, 0, 1289, 0,
	966, 1291, 0, 0, 0, 972, 266, 0, 0, 0,
	0, 0, 0, 656, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 266, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 824, 93, 93, 93, 93, 93, 0, 0,
	669, 0, 0, 0, 0, 1051, 0, 0, 93, 0,
	0, 0, 857, 0, 0, 0, 93, 0, 0, 0,
	0, 0, 682, 685, 686, 687, 688, 689, 690, 0,
	653, 691, 692, 693, 694, 695, 670, 671, 672, 673,
	654, 655, 683, 0, 657, 0, 658, 659, 660, 661,
	662, 663, 664, 665, 666, 667, 674, 675, 676, 677,
	678, 679, 680, 681, 0, 0, 0, 1436, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1398, 576, 684,
	0, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 266, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 719, 0, 0,
	0, 0, 0, 0, 1135, 0, 824, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1141, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 153, 0, 0, 0, 0, 0, 93,
	0, 0, 117, 0, 0, 0, 0, 0, 134, 0,
	136, 0, 0, 174, 145, 0, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 93,
	0, 0, 346, 0, 0, 0, 0, 0, 0, 93,
	0, 110, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1233, 0, 0, 0, 0, 0, 540, 539,
	549, 550, 542, 543, 544, 545, 546, 547, 548, 541,
	0, 1240, 551, 0, 0, 0, 0, 824, 0, 0,
	0, 0, 1249, 0, 0, 0, 123, 0, 0, 0,
	198, 0, 0, 0, 0, 160, 0, 177, 125, 133,
	97, 104, 0, 124, 151, 165, 169, 0, 0, 0,
	113, 0, 167, 155, 190, 0, 156, 166, 137, 182,
	161, 189, 199, 200, 179, 197, 207, 98, 178, 188,
	111, 170, 100, 186, 176, 143, 129, 130, 99, 0,
	194, 164, 116, 121, 115, 152, 183, 184, 114, 210,
	105, 196, 102, 106, 195, 150, 181, 187, 144, 141,
	101, 185, 142, 140, 132, 119, 126, 158, 139, 159,
	127, 147, 146, 148, 0, 0, 0, 175, 192, 211,
	108, 857, 171, 180, 201, 202, 203, 204, 205, 206,
	0, 0, 109, 122, 118, 157, 149, 107, 128, 172,
	131, 138, 163, 209, 154, 168, 112, 191, 173, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 103,
	135, 208, 162, 120, 193, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 824, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 431, 420, 0, 391,
	434, 369, 383, 443, 384, 385, 413, 355, 399, 153,
	381, 0, 372, 350, 378, 351, 370, 393, 117, 396,
	368, 422, 402, 433, 134, 441, 136, 407, 0, 174,
	145, 0, 0, 395, 424, 397, 418, 390, 414, 360,
	406, 435, 382, 411, 436, 0, 0, 0, 346, 0,
	878, 879, 0, 0, 0, 0, 0, 110, 1408, 409,
	430, 380, 410, 412, 349, 408, 0, 353, 356, 442,
	426, 375, 376, 1072, 0, 0, 0, 0, 0, 0,
	394, 398, 415, 388, 0, 0, 0, 0, 0, 0,
	0, 0, 373, 0, 405, 0, 0, 0, 357, 354,
	0, 0, 392, 0, 0, 0, 359, 0, 374, 416,
	0, 348, 123, 419, 425, 389, 198, 429, 387, 386,
	432, 160, 0, 177, 125, 133, 97, 104, 0, 124,
	151, 165, 169, 423, 371, 379, 113, 377, 167, 155,
	190, 404, 156, 166, 137, 182, 161, 189, 199, 200,
	179, 197, 207, 98, 178, 188, 111, 170, 100, 186,
	176, 143, 129, 130, 99, 0, 440, 164, 116, 121,
	115, 152, 183, 184, 114, 210, 105, 196, 102, 106,
	195, 150, 181, 187, 144, 141, 101, 185, 142, 140,
	132, 119, 126, 158, 139, 159, 127, 147, 146, 148,
	0, 352, 0, 175, 192, 211, 108, 367, 171, 180,
	201, 202, 203, 204, 205, 206, 0, 0, 109, 122,
	118, 157, 149, 107, 128, 172, 131, 138, 163, 209,
	154, 168, 112, 191, 173, 363, 366, 361, 362, 400,
	401, 437, 438, 439, 417, 358, 0, 364, 365, 0,
	421, 427, 428, 403, 96, 103, 135, 208, 162, 120,
	193, 431, 420, 0, 391, 434, 369, 383, 443, 384,
	385, 413, 355, 399, 153, 381, 0, 372, 350, 378,
	351, 370, 393, 117, 396, 368, 422, 402, 433, 134,
	441, 136, 407, 0, 174, 145, 0, 0, 395, 424,
	397, 418, 390, 414, 360, 406, 435, 382, 411, 436,
	0, 0, 0, 346, 0, 878, 879, 0, 0, 0,
	0, 0, 110, 0, 409, 430, 380, 410, 412, 349,
	408, 0, 353, 356, 442, 426, 375, 376, 0, 0,
	0, 0, 0, 0, 0, 394, 398, 415, 388, 0,
	0, 0, 0, 0, 0, 0, 0, 373, 0, 405,
	0, 0, 0, 357, 354, 0, 0, 392, 0, 0,
	0, 359, 0, 374, 416, 0, 348, 123, 419, 425,
	389, 198, 429, 387, 386, 432, 160, 0, 177, 125,
	133, 97, 104, 0, 124, 151, 165, 169, 423, 371,
	379, 113, 377, 167, 155, 190, 404, 156, 166, 137,
	182, 161, 189, 199, 200, 179, 197, 207, 98, 178,
	188, 111, 170, 100, 186, 176, 143, 129, 130, 99,
	0, 440, 164, 116, 121, 115, 152, 183, 184, 114,
	210, 105, 196, 102, 106, 195, 150, 181, 187, 144,
	141, 101, 185, 142, 140, 132, 119, 126, 158, 139,
	159, 127, 147, 146, 148, 0, 352, 0, 175, 192,
	211, 108, 367, 171, 180, 201, 202, 203, 204, 205,
	206, 0, 0, 109, 122, 118, 157, 149, 107, 128,
	172, 131, 138, 163, 209, 154, 168, 112, 191, 173,
	363, 366, 361, 362, 400, 401, 437, 438, 439, 417,
	358, 0, 364, 365, 0, 421, 427, 428, 403, 96,
	103, 135, 208, 162, 120, 193, 431, 420, 0, 391,
	434, 369, 383, 443, 384, 385, 413, 355, 399, 153,
	381, 0, 372, 350, 378, 351, 370, 393, 117, 396,
	368, 422, 402, 433, 134, 441, 136, 407, 0, 174,
	145, 0, 0, 395, 424, 397, 418, 390, 414, 360,
	406, 435, 382, 411, 436, 54, 0, 0, 346, 0,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 409,
	430, 380, 410, 412, 349, 408, 0, 353, 356, 442,
	426, 375, 376, 0, 0, 0, 0, 0, 0, 0,
	394, 398, 415, 388, 0, 0, 0, 0, 0, 0,
	0, 0, 373, 0, 405, 0, 0, 0, 357, 354,
	0, 0, 392, 0, 0, 0, 359, 0, 374, 416,
	0, 348, 123, 419, 425, 389, 198, 429, 387, 386,
	432, 160, 0, 177, 125, 133, 97, 104, 0, 124,
	151, 165, 169, 423, 371, 379, 113, 377, 167, 155,
	190, 404, 156, 166, 137, 182, 161, 189, 199, 200,
	179, 197, 207, 98, 178, 188, 111, 170, 100, 186,
	176, 143, 129, 130, 99, 0, 440, 164, 116, 121,
	115, 152, 183, 184, 114, 210, 105, 196, 102, 106,
	195, 150, 181, 187, 144, 141, 101, 185, 142, 140,
	132, 119, 126, 158, 139, 159, 127, 147, 146, 148,
	0, 352, 0, 175, 192, 211, 108, 367, 171, 180,
	201, 202, 203, 204, 205, 206, 0, 0, 109, 122,
	118, 157, 149, 107, 128, 172, 131, 138, 163, 209,
	154, 168, 112, 191, 173, 363, 366, 361, 362, 400,
	401, 437, 438, 439, 417, 358, 0, 364, 365, 0,
	421, 427, 428, 403, 96, 103, 135, 208, 162, 120,
	193, 431, 420, 0, 391, 434, 369, 383, 443, 384,
	385, 413, 355, 399, 153, 381, 0, 372, 350, 378,
	351, 370, 393, 117, 396, 368, 422, 402, 433, 134,
	441, 136, 407, 0, 174, 145, 0, 0, 395, 424,
	397, 418, 390, 414, 360, 406, 435, 382, 411, 436,
	0, 0, 0, 346, 0, 0, 0, 0, 0, 0,
	0, 0, 110, 0, 409, 430, 380, 410, 412, 349,
	408, 0, 353, 356, 442, 426, 375, 376, 0, 0,
	0, 0, 0, 0, 0, 394, 398, 415, 388, 0,
	0, 0, 0, 0, 0, 1144, 0, 373, 0, 405,
	0, 0, 0, 357, 354, 0, 0, 392, 0, 0,
	0, 359, 0, 374, 416, 0, 348, 123, 419, 425,
	389, 198, 429, 387, 386, 432, 160, 0, 177, 125,
	133, 97, 104, 0, 124, 151, 165, 169, 423, 371,
	379, 113, 377, 167, 155, 190, 404, 156, 166, 137,
	182, 161, 189, 199, 200, 179, 197, 207, 98, 178,
	188, 111, 170, 100, 186, 176, 143, 129, 130, 99,
	0, 440, 164, 116, 121, 115, 152, 183, 184, 114,
	210, 105, 196, 102, 106, 195, 150, 181, 187, 144,
	141, 101, 185, 142, 140, 132, 119, 126, 158, 139,
	159, 127, 147, 146, 148, 0, 352, 0, 175, 192,
	211, 108, 367, 171, 180, 201, 202, 203, 204, 205,
	206, 0, 0, 109, 122, 118, 157, 149, 107, 128,
	172, 131, 138, 163, 209, 154, 168, 112, 191, 173,
	363, 366, 361, 362, 400, 401, 437, 438, 439, 417,
	358, 0, 364, 365, 0, 421, 427, 428, 403, 96,
	103, 135, 208, 162, 120, 193, 431, 420, 0, 391,
	434, 369, 383, 443, 384, 385, 413, 355, 399, 153,
	381, 0, 372, 350, 378, 351, 370, 393, 117, 396,
	368, 422, 402, 433, 134, 441, 136, 407, 0, 174,
	145, 0, 0, 395, 424, 397, 418, 390, 414, 360,
	406, 435, 382, 411, 436, 0, 0, 0, 271, 0,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 409,
	430, 380, 410, 412, 349, 408, 0, 353, 356, 442,
	426, 375, 376, 0, 0, 0, 0, 0, 0, 0,
	394, 398, 415, 388, 0, 0, 0, 0, 0, 0,
	764, 0, 373, 0, 405, 0, 0, 0, 357, 354,
	0, 0, 392, 0, 0, 0, 359, 0, 374, 416,
	0, 348, 123, 419, 425, 389, 198, 429, 387, 386,
	432, 160, 0, 177, 125, 133, 97, 104, 0, 124,
	151, 165, 169, 423, 371, 379, 113, 377, 167, 155,
	190, 404, 156, 166, 137, 182, 161, 189, 199, 200,
	179, 197, 207, 98, 178, 188, 111, 170, 100, 186,
	176, 143, 129, 130, 99, 0, 440, 164, 116, 121,
	115, 152, 183, 184, 114, 210, 105, 196, 102, 106,
	195, 150, 181, 187, 144, 141, 101, 185, 142, 140,
	132, 119, 126, 158, 139, 159, 127, 147, 146, 148,
	0, 352, 0, 175, 192, 211, 108, 367, 171, 180,
	201, 202, 203, 204, 205, 206, 0, 0, 109, 122,
	118, 157, 149, 107, 128, 172, 131, 138, 163, 209,
	154, 168, 112, 191, 173, 363, 366, 361, 362, 400,
	401, 437, 438, 439, 417, 358, 0, 364, 365, 0,
	421, 427, 428, 403, 96, 103, 135, 208, 162, 120,
	193, 431, 420, 0, 391, 434, 369, 383, 443, 384,
	385, 413, 355, 399, 153, 381, 0, 372, 350, 378,
	351, 370, 393, 117, 396, 368, 422, 402, 433, 134,
	441, 136, 407, 0, 174, 145, 0, 0, 395, 424,
	397, 418, 390, 414, 360, 406, 435, 382, 411, 436,
	0, 0, 0, 346, 0, 0, 0, 0, 0, 0,
	0, 0, 110, 0, 409, 430, 380, 410, 412, 349,
	408, 0, 353, 356, 442, 426, 375, 376, 0, 0,
	0, 0, 0, 0, 0, 394, 398, 415, 388, 0,
	0, 0, 0, 0, 0, 0, 0, 373, 0, 405,
	0, 0, 0, 357, 354, 0, 0, 392, 0, 0,
	0, 359, 0, 374, 416, 0, 348, 123, 419, 425,
	389, 198, 429, 387, 386, 432, 160, 0, 177, 125,
	133, 97, 104, 0, 124, 151, 165, 169, 423, 371,
	379, 113, 377, 167, 155, 190, 404, 156, 166, 137,
	182, 161, 189, 199, 200, 179, 197, 207, 98, 178,
	188, 111, 170, 100, 186, 176, 143, 129, 130, 99,
	0, 440, 164, 116, 121, 115, 152, 183, 184, 114,
	210, 105, 196, 102, 106, 195, 150, 181, 187, 144,
	141, 101, 185, 142, 140, 132, 119, 126, 158, 139,
	159, 127, 147, 146, 148, 0, 352, 0, 175, 192,
	211, 108, 367, 171, 180, 201, 202, 203, 204, 205,
	206, 0, 0, 109, 122, 118, 157, 149, 107, 128,
	172, 131, 138, 163, 209, 154, 168, 112, 191, 173,
	363, 366, 361, 362, 400, 401, 437, 438, 439, 417,
	358, 0, 364, 365, 0, 421, 427, 428, 403, 96,
	103, 135, 208, 162, 120, 193, 431, 420, 0, 391,
	434, 369, 383, 443, 384, 385, 413, 355, 399, 153,
	381, 0, 372, 350, 378, 351, 370, 393, 117, 396,
	368, 422, 402, 433, 134, 441, 136, 407, 0, 174,
	145, 0, 0, 395, 424, 397, 418, 390, 414, 360,
	406, 435, 382, 411, 436, 0, 0, 0, 271, 0,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 409,
	430, 380, 410, 412, 349, 408, 0, 353, 356, 442,
	426, 375, 376, 0, 0, 0, 0, 0, 0, 0,
	394, 398, 415, 388, 0, 0, 0, 0, 0, 0,
	0, 0, 373, 0, 405, 0, 0, 0, 357, 354,
	0, 0, 392, 0, 0, 0, 359, 0, 374, 416,
	0, 348, 123, 419, 425, 389, 198, 429, 387, 386,
	432, 160, 0, 177, 125, 133, 97, 104, 0, 124,
	151, 165, 169, 423, 371, 379, 113, 377, 167, 155,
	190, 404, 156, 166, 137, 182, 161, 189, 199, 200,
	179, 197, 207, 98, 178, 188, 111, 170, 100, 186,
	176, 143, 129, 130, 99, 0, 440, 164, 116, 121,
	115, 152, 183, 184, 114, 210, 105, 196, 102, 106,
	195, 150, 181, 187, 144, 141, 101, 185, 142, 140,
	132, 119, 126, 158, 139, 159, 127, 147, 146, 148,
	0, 352, 0, 175, 192, 211, 108, 367, 171, 180,
	201, 202, 203, 204, 205, 206, 0, 0, 109, 122,
	118, 157, 149, 107, 128, 172, 131, 138, 163, 209,
	154, 168, 112, 191, 173, 363, 366, 361, 362, 400,
	401, 437, 438, 439, 417, 358, 0, 364, 365, 0,
	421, 427, 428, 403, 96, 103, 135, 208, 162, 120,
	193, 431, 420, 0, 391, 434, 369, 383, 443, 384,
	385, 413, 355, 399, 153, 381, 0, 372, 350, 378,
	351, 370, 393, 117, 396, 368, 422, 402, 433, 134,
	441, 136, 407, 0, 174, 145, 0, 0, 395, 424,
	397, 418, 390, 414, 360, 406, 435, 382, 411, 436,
	0, 0, 0, 346, 0, 0, 0, 0, 0, 0,
	0, 0, 110, 0, 409, 430, 380, 410, 412, 349,
	408, 0, 353, 356, 442, 426, 375, 376, 0, 0,
	0, 0, 0, 0, 0, 394, 398, 415, 388, 0,
	0, 0, 0, 0, 0, 0, 0, 373, 0, 405,
	0, 0, 0, 357, 354, 0, 0, 392, 0, 0,
	0, 359, 0, 374, 416, 0, 348, 123, 419, 425,
	389, 198, 429, 387, 386, 432, 160, 0, 177, 125,
	133, 97, 104, 0, 124, 151, 165, 169, 423, 371,
	379, 113, 377, 167, 155, 190, 404, 156, 166, 137,
	182, 161, 189, 199, 200, 179, 197, 207, 98, 178,
	188, 111, 170, 100, 186, 176, 143, 129, 130, 99,
	0, 440, 164, 116, 121, 115, 152, 183, 184, 114,
	210, 105, 196, 102, 344, 195, 150, 181, 187, 144,
	141, 101, 185, 142, 140, 132, 119, 126, 158, 139,
	159, 127, 147, 146, 148, 0, 352, 0, 175, 192,
	211, 108, 367, 171, 180, 201, 202, 203, 204, 205,
	206, 0, 0, 109, 122, 118, 157, 345, 343, 128,
	172, 131, 138, 163, 209, 154, 168, 112, 191, 173,
	363, 366, 361, 362, 400, 401, 437, 438, 439, 417,
	358, 0, 364, 365, 0, 421, 427, 428, 403, 96,
	103, 135, 208, 162, 120, 193, 431, 420, 0, 391,
	434, 369, 383, 443, 384, 385, 413, 355, 399, 153,
	381, 0, 372, 350, 378, 351, 370, 393, 117, 396,
	368, 422, 402, 433, 134, 441, 136, 407, 0, 174,
	145, 0, 0, 395, 424, 397, 418, 390, 414, 360,
	406, 435, 382, 411, 436, 0, 0, 0, 94, 0,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 409,
	430, 380, 410, 412, 349, 408, 0, 353, 356, 442,
	426, 375, 376, 0, 0, 0, 0, 0, 0, 0,
	394, 398, 415, 388, 0, 0, 0, 0, 0, 0,
	0, 0, 373, 0, 405, 0, 0, 0, 357, 354,
	0, 0, 392, 0, 0, 0, 359, 0, 374, 416,
	0, 348, 123, 419, 425, 389, 198, 429, 387, 386,
	432, 160, 0, 177, 125, 133, 97, 104, 0, 124,
	151, 165, 169, 423, 371, 379, 113, 377, 167, 155,
	190, 404, 156, 166, 137, 182, 161, 189, 199, 200,
	179, 197, 207, 98, 178, 188, 111, 170, 100, 186,
	176, 143, 129, 130, 99, 0, 440, 164, 116, 121,
	115, 152, 183, 184, 114, 210, 105, 196, 102, 106,
	195, 150, 181, 187, 144, 141, 101, 185, 142, 140,
	132, 119, 126, 158, 139, 159, 127, 147, 146, 148,
	0, 352, 0, 175, 192, 211, 108, 367, 171, 180,
	201, 202, 203, 204, 205, 206, 0, 0, 109, 122,
	118, 157, 149, 107, 128, 172, 131, 138, 163, 209,
	154, 168, 112, 191, 173, 363, 366, 361, 362, 400,
	401, 437, 438, 439, 417, 358, 0, 364, 365, 0,
	421, 427, 428, 403, 96, 103, 135, 208, 162, 120,
	193, 431, 420, 0, 391, 434, 369, 383, 443, 384,
	385, 413, 355, 399, 153, 381, 0, 372, 350, 378,
	351, 370, 393, 117, 396, 368, 422, 402, 433, 134,
	441, 136, 407, 0, 174, 145, 0, 0, 395, 424,
	397, 418, 390, 414, 360, 406, 435, 382, 411, 436,
	0, 0, 0, 346, 0, 0, 0, 0, 0, 0,
	0, 0, 110, 0, 409, 430, 380, 410, 412, 349,
	408, 0, 353, 356, 442, 426, 375, 376, 0, 0,
	0, 0, 0, 0, 0, 394, 398, 415, 388, 0,
	0, 0, 0, 0, 0, 0, 0, 373, 0, 405,
	0, 0, 0, 357, 354, 0, 0, 392, 0, 0,
	0, 359, 0, 374, 416, 0, 348, 123, 419, 425,
	389, 198, 429, 387, 386, 432, 160, 0, 177, 125,
	133, 97, 104, 0, 124, 151, 165, 169, 423, 371,
	379, 113, 377, 167, 155, 190, 404, 156, 166, 137,
	182, 161, 189, 199, 200, 179, 197, 207, 98, 178,
	630, 111, 170, 100, 186, 176, 143, 129, 130, 99,
	0, 440, 164, 116, 121, 115, 152, 183, 184, 114,
	210, 105, 196, 102, 344, 195, 150, 181, 187, 144,
	141, 101, 185, 142, 140, 132, 119, 126, 158, 139,
	159, 127, 147, 146, 148, 0, 352, 0, 175, 192,
	211, 108, 367, 171, 180, 201, 202, 203, 204, 205,
	206, 0, 0, 109, 122, 118, 157, 345, 343, 128,
	172, 131, 138, 163, 209, 154, 168, 112, 191, 173,
	363, 366, 361, 362, 400, 401, 437, 438, 439, 417,
	358, 0, 364, 365, 0, 421, 427, 428, 403, 96,
	103, 135, 208, 162, 120, 193, 431, 420, 0, 391,
	434, 369, 383, 443, 384, 385, 413, 355, 399, 153,
	381, 0, 372, 350, 378, 351, 370, 393, 117, 396,
	368, 422, 402, 433, 134, 441, 136, 407, 0, 174,
	145, 0, 0, 395, 424, 397, 418, 390, 414, 360,
	406, 435, 382, 411, 436, 0, 0, 0, 346, 0,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 409,
	430, 380, 410, 412, 349, 408, 0, 353, 356, 442,
	426, 375, 376, 0, 0, 0, 0, 0, 0, 0,
	394, 398, 415, 388, 0, 0, 0, 0, 0, 0,
	0, 0, 373, 0, 405, 0, 0, 0, 357, 354,
	0, 0, 392, 0, 0, 0, 359, 0, 374, 416,
	0, 348, 123, 419, 425, 389, 198, 429, 387, 386,
	432, 160, 0, 177, 125, 133, 97, 104, 0, 124,
	151, 165, 169, 423, 371, 379, 113, 377, 167, 155,
	190, 404, 156, 166, 137, 182, 161, 189, 199, 200,
	179, 197, 207, 98, 178, 335, 111, 170, 100, 186,
	176, 143, 129, 130, 99, 0, 440, 164, 116, 121,
	115, 152, 183, 184, 114, 210, 105, 196, 102, 344,
	195, 150, 181, 187, 144, 141, 101, 185, 142, 140,
	132, 119, 126, 158, 139, 159, 127, 147, 146, 148,
	0, 352, 0, 175, 192, 211, 108, 367, 171, 180,
	201, 202, 203, 204, 205, 206, 0, 0, 109, 122,
	118, 157, 345, 343, 338, 337, 131, 138, 163, 209,
	154, 168, 112, 191, 173, 363, 366, 361, 362, 400,
	401, 437, 438, 439, 417, 358, 0, 364, 365, 0,
	421, 427, 428, 403, 96, 103, 135, 208, 162, 120,
	193, 153, 0, 0, 0, 0, 273, 0, 0, 0,
	117, 0, 270, 0, 0, 0, 134, 313, 136, 0,
	0, 174, 145, 0, 0, 0, 0, 304, 305, 0,
	0, 0, 0, 0, 0, 869, 0, 54, 0, 0,
	271, 292, 291, 294, 295, 296, 297, 0, 0, 110,
	293, 298, 299, 300, 870, 0, 0, 268, 285, 0,
	312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	282, 283, 0, 0, 0, 0, 326, 0, 284, 0,
	0, 279, 280, 281, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 0, 198, 0,
	0, 324, 0, 160, 0, 177, 125, 133, 97, 104,
	0, 124, 151, 165, 169, 0, 0, 0, 113, 0,
	167, 155, 190, 0, 156, 166, 137, 182, 161, 189,
	199, 200, 179, 197, 207, 98, 178, 188, 111, 170,
	100, 186, 176, 143, 129, 130, 99, 0, 194, 164,
	116, 121, 115, 152, 183, 184, 114, 210, 105, 196,
	102, 106, 195, 150, 181, 187, 144, 141, 101, 185,
	142, 140, 132, 119, 126, 158, 139, 159, 127, 147,
	146, 148, 0, 0, 0, 175, 192, 211, 108, 0,
	171, 180, 201, 202, 203, 204, 205, 206, 0, 0,
	109, 122, 118, 157, 149, 107, 128, 172, 131, 138,
	163, 209, 154, 168, 112, 191, 173, 314, 325, 320,
	321, 318, 319, 317, 316, 315, 327, 306, 307, 308,
	309, 311, 0, 322, 323, 310, 96, 103, 135, 208,
	162, 120, 193, 153, 0, 0, 800, 0, 273, 0,
	0, 0, 117, 0, 270, 0, 0, 0, 134, 313,
	136, 0, 0, 174, 145, 0, 0, 0, 0, 304,
	305, 0, 0, 0, 0, 0, 0, 0, 0, 54,
	0, 0, 271, 292, 291, 294, 295, 296, 297, 0,
	0, 110, 293, 298, 299, 300, 0, 0, 0, 268,
	285, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 282, 283, 264, 0, 0, 0, 326, 0,
	284, 0, 0, 279, 280, 281, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 0,
	198, 0, 0, 324, 0, 160, 0, 177, 125, 133,
	97, 104, 0, 124, 151, 165, 169, 0, 0, 0,
	113, 0, 167, 155, 190, 0, 156, 166, 137, 182,
	161, 189, 199, 200, 179, 197, 207, 98, 178, 188,
	111, 170, 100, 186, 176, 143, 129, 130, 99, 0,
	194, 164, 116, 121, 115, 152, 183, 184, 114, 210,
	105, 196, 102, 106, 195, 150, 181, 187, 144, 141,
	101, 185, 142, 140, 132, 119, 126, 158, 139, 159,
	127, 147, 146, 148, 0, 0, 0, 175, 192, 211,
	108, 0, 171, 180, 201, 202, 203, 204, 205, 206,
	0, 0, 109, 122, 118, 157, 149, 107, 128, 172,
	131, 138, 163, 209, 154, 168, 112, 191, 173, 314,
	325, 320, 321, 318, 319, 317, 316, 315, 327, 306,
	307, 308, 309, 311, 0, 322, 323, 310, 96, 103,
	135, 208, 162, 120, 193, 153, 0, 0, 0, 0,
	273, 0, 0, 0, 117, 0, 270, 0, 0, 0,
	134, 313, 136, 0, 0, 174, 145, 0, 0, 0,
	0, 304, 305, 0, 0, 0, 0, 0, 0, 0,
	0, 54, 0, 505, 271, 292, 291, 294, 295, 296,
	297, 0, 0, 110, 293, 298, 299, 300, 0, 0,
	0, 268, 285, 0, 312, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 282, 283, 0, 0, 0, 0,
	326, 0, 284, 0, 0, 279, 280, 281, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 0,
	0, 0, 198, 0, 0, 324, 0, 160, 0, 177,
	125, 133, 97, 104, 0, 124, 151, 165, 169, 0,
	0, 0, 113, 0, 167, 155, 190, 0, 156, 166,
	137, 182, 161, 189, 199, 200, 179, 197, 207, 98,
	178, 188, 111, 170, 100, 186, 176, 143, 129, 130,
	99, 0, 194, 164, 116, 121, 115, 152, 183, 184,
	114, 210, 105, 196, 102, 106, 195, 150, 181, 187,
	144, 141, 101, 185, 142, 140, 132, 119, 126, 158,
	139, 159, 127, 147, 146, 148, 0, 0, 0, 175,
	192, 211, 108, 0, 171, 180, 201, 202, 203, 204,
	205, 206, 0, 0, 109, 122, 118, 157, 149, 107,
	128, 172, 131, 138, 163, 209, 154, 168, 112, 191,
	173, 314, 325, 320, 321, 318, 319, 317, 316, 315,
	327, 306, 307, 308, 309, 311, 0, 322, 323, 310,
	96, 103, 135, 208, 162, 120, 193, 153, 0, 0,
	0, 0, 273, 0, 0, 0, 117, 0, 270, 0,
	0, 0, 134, 313, 136, 0, 0, 174, 145, 0,
	0, 0, 0, 304, 305, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 0, 271, 292, 291, 294,
	295, 296, 297, 0, 0, 110, 293, 298, 299, 300,
	0, 0, 0, 268, 285, 0, 312, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 282, 283, 264, 0,
	0, 0, 326, 0, 284, 0, 0, 279, 280, 281,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 0, 198, 0, 0, 324, 0, 160,
	0, 177, 125, 133, 97, 104, 0, 124, 151, 165,
	169, 0, 0, 0, 113, 0, 167, 155, 190, 0,
	156, 166, 137, 182, 161, 189, 199, 200, 179, 197,
	207, 98, 178, 188, 111, 170, 100, 186, 176, 143,
	129, 130, 99, 0, 194, 164, 116, 121, 115, 152,
	183, 184, 114, 210, 105, 196, 102, 106, 195, 150,
	181, 187, 144, 141, 101, 185, 142, 140, 132, 119,
	126, 158, 139, 159, 127, 147, 146, 148, 0, 0,
	0, 175, 192, 211, 108, 0, 171, 180, 201, 202,
	203, 204, 205, 206, 0, 0, 109, 122, 118, 157,
	149, 107, 128, 172, 131, 138, 163, 209, 154, 168,
	112, 191, 173, 314, 325, 320, 321, 318, 319, 317,
	316, 315, 327, 306, 307, 308, 309, 311, 0, 322,
	323, 310, 96, 103, 135, 208, 162, 120, 193, 153,
	0, 0, 0, 0, 273, 0, 0, 0, 117, 0,
	270, 0, 0, 0, 134, 313, 136, 0, 0, 174,
	145, 0, 0, 0, 0, 304, 305, 0, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 0, 271, 292,
	815, 294, 295, 296, 297, 0, 0, 110, 293, 298,
	299, 300, 0, 0, 0, 268, 285, 0, 312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 282, 283,
	264, 0, 0, 0, 326, 0, 284, 0, 0, 279,
	280, 281, 286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 0, 0, 0, 198, 0, 0, 324,
	0, 160, 0, 177, 125, 133, 97, 104, 0, 124,
	151, 165, 169, 0, 0, 0, 113, 0, 167, 155,
	190, 0, 156, 166, 137, 182, 161, 189, 199, 200,
	179, 197, 207, 98, 178, 188, 111, 170, 100, 186,
	176, 143, 129, 130, 99, 0, 194, 164, 116, 121,
	115, 152, 183, 184, 114, 210, 105, 196, 102, 106,
	195, 150, 181, 187, 144, 141, 101, 185, 142, 140,
	132, 119, 126, 158, 139, 159, 127, 147, 146, 148,
	0, 0, 0, 175, 192, 211, 108, 0, 171, 180,
	201, 202, 203, 204, 205, 206, 0, 0, 109, 122,
	118, 157, 149, 107, 128, 172, 131, 138, 163, 209,
	154, 168, 112, 191, 173, 314, 325, 320, 321, 318,
	319, 317, 316, 315, 327, 306, 307, 308, 309, 311,
	0, 322, 323, 310, 96, 103, 135, 208, 162, 120,
	193, 153, 0, 0, 0, 0, 273, 0, 0, 0,
	117, 0, 270, 0, 0, 0, 134, 313, 136, 0,
	0, 174, 145, 0, 0, 0, 0, 304, 305, 0,
	0, 0, 0, 0, 0, 0, 0, 54, 0, 0,
	271, 292, 812, 294, 295, 296, 297, 0, 0, 110,
	293, 298, 299, 300, 0, 0, 0, 268, 285, 0,
	312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	282, 283, 264, 0, 0, 0, 326, 0, 284, 0,
	0, 279, 280, 281, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 0, 198, 0,
	0, 324, 0, 160, 0, 177, 125, 133, 97, 104,
	0, 124, 151, 165, 169, 0, 0, 0, 113, 0,
	167, 155, 190, 0, 156, 166, 137, 182, 161, 189,
	199, 200, 179, 197, 207, 98, 178, 188, 111, 170,
	100, 186, 176, 143, 129, 130, 99, 0, 194, 164,
	116, 121, 115, 152, 183, 184, 114, 210, 105, 196,
	102, 106, 195, 150, 181, 187, 144, 141, 101, 185,
	142, 140, 132, 119, 126, 158, 139, 159, 127, 147,
	146, 148, 0, 0, 0, 175, 192, 211, 108, 0,
	171, 180, 201, 202, 203, 204, 205, 206, 0, 0,
	109, 122, 118, 157, 149, 107, 128, 172, 131, 138,
	163, 209, 154, 168, 112, 191, 173, 314, 325, 320,
	321, 318, 319, 317, 316, 315, 327, 306, 307, 308,
	309, 311, 24, 322, 323, 310, 96, 103, 135, 208,
	162, 120, 193, 0, 153, 0, 0, 0, 0, 273,
	0, 0, 0, 117, 0, 270, 0, 0, 0, 134,
	313, 136, 0, 0, 174, 145, 0, 0, 0, 0,
	304, 305, 0, 0, 0, 0, 0, 0, 0, 0,
	54, 0, 0, 271, 292, 291, 294, 295, 296, 297,
	0, 0, 110, 293, 298, 299, 300, 0, 0, 0,
	268, 285, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 282, 283, 0, 0, 0, 0, 326,
	0, 284, 0, 0, 279, 280, 281, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 0, 0,
	0, 198, 0, 0, 324, 0, 160, 0, 177, 125,
	133, 97, 104, 0, 124, 151, 165, 169, 0, 0,
	0, 113, 0, 167, 155, 190, 0, 156, 166, 137,
	182, 161, 189, 199, 200, 179, 197, 207, 98, 178,
	188, 111, 170, 100, 186, 176, 143, 129, 130, 99,
	0, 194, 164, 116, 121, 115, 152, 183, 184, 114,
	210, 105, 196, 102, 106, 195, 150, 181, 187, 144,
	141, 101, 185, 142, 140, 132, 119, 126, 158, 139,
	159, 127, 147, 146, 148, 0, 0, 0, 175, 192,
	211, 108, 0, 171, 180, 201, 202, 203, 204, 205,
	206, 0, 0, 109, 122, 118, 157, 149, 107, 128,
	172, 131, 138, 163, 209, 154, 168, 112, 191, 173,
	314, 325, 320, 321, 318, 319, 317, 316, 315, 327,
	306, 307, 308, 309, 311, 0, 322, 323, 310, 96,
	103, 135, 208, 162, 120, 193, 153, 0, 0, 0,
	0, 273, 0, 0, 0, 117, 0, 270, 0, 0,
	0, 134, 313, 136, 0, 0, 174, 145, 0, 0,
	0, 0, 304, 305, 0, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 0, 271, 292, 291, 294, 295,
	296, 297, 0, 0, 110, 293, 298, 299, 300, 0,
	0, 0, 268, 285, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 0, 0, 0,
	0, 326, 0, 284, 0, 0, 279, 280, 281, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 198, 0, 0, 324, 0, 160, 0,
	177, 125, 133, 97, 104, 0, 124, 151, 165, 169,
	0, 0, 0, 113, 0, 167, 155, 190, 0, 156,
	166, 137, 182, 161, 189, 199, 200, 179, 197, 207,
	98, 178, 188, 111, 170, 100, 186, 176, 143, 129,
	130, 99, 0, 194, 164, 116, 121, 115, 152, 183,
	184, 114, 210, 105, 196, 102, 106, 195, 150, 181,
	187, 144, 141, 101, 185, 142, 140, 132, 119, 126,
	158, 139, 159, 127, 147, 146, 148, 0, 0, 0,
	175, 192, 211, 108, 0, 171, 180, 201, 202, 203,
	204, 205, 206, 0, 0, 109, 122, 118, 157, 149,
	107, 128, 172, 131, 138, 163, 209, 154, 168, 112,
	191, 173, 314, 325, 320, 321, 318, 319, 317, 316,
	315, 327, 306, 307, 308, 309, 311, 0, 322, 323,
	310, 96, 103, 135, 208, 162, 120, 193, 153, 0,
	0, 0, 0, 0, 0, 0, 0, 117, 0, 0,
	0, 0, 0, 134, 313, 136, 0, 0, 174, 145,
	0, 0, 0, 0, 304, 305, 0, 0, 0, 0,
	0, 0, 0, 0, 54, 0, 0, 271, 292, 291,
	294, 295, 296, 297, 0, 0, 110, 293, 298, 299,
	300, 0, 0, 0, 0, 285, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 282, 283, 0,
	0, 0, 0, 326, 0, 284, 0, 0, 279, 280,
	281, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 0, 0, 198, 0, 0, 324, 0,
	160, 0, 177, 125, 133, 97, 104, 0, 124, 151,
	165, 169, 0, 0, 0, 113, 0, 167, 155, 190,
	1437, 156, 166, 137, 182, 161, 189, 199, 200, 179,
	197, 207, 98, 178, 188, 111, 170, 100, 186, 176,
	143, 129, 130, 99, 0, 194, 164, 116, 121, 115,
	152, 183, 184, 114, 210, 105, 196, 102, 106, 195,
	150, 181, 187, 144, 141, 101, 185, 142, 140, 132,
	119, 126, 158, 139, 159, 127, 147, 146, 148, 0,
	0, 0, 175, 192, 211, 108, 0, 171, 180, 201,
	202, 203, 204, 205, 206, 0, 0, 109, 122, 118,
	157, 149, 107, 128, 172, 131, 138, 163, 209, 154,
	168, 112, 191, 173, 314, 325, 320, 321, 318, 319,
	317, 316, 315, 327, 306, 307, 308, 309, 311, 0,
	322, 323, 310, 96, 103, 135, 208, 162, 120, 193,
	153, 0, 0, 0, 0, 0, 0, 0, 0, 117,
	0, 0, 0, 0, 0, 134, 313, 136, 0, 0,
	174, 145, 0, 0, 0, 0, 304, 305, 0, 0,
	0, 0, 0, 0, 0, 0, 54, 0, 505, 271,
	292, 291, 294, 295, 296, 297, 0, 0, 110, 293,
	298, 299, 300, 0, 0, 0, 0, 285, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 282,
	283, 0, 0, 0, 0, 326, 0, 284, 0, 0,
	279, 280, 281, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 198, 0, 0,
	324, 0, 160, 0, 177, 125, 133, 97, 104, 0,
	124, 151, 165, 169, 0, 0, 0, 113, 0, 167,
	155, 190, 0, 156, 166, 137, 182, 161, 189, 199,
	200, 179, 197, 207, 98, 178, 188, 111, 170, 100,
	186, 176, 143, 129, 130, 99, 0, 194, 164, 116,
	121, 115, 152, 183, 184, 114, 210, 105, 196, 102,
	106, 195, 150, 181, 187, 144, 141, 101, 185, 142,
	140, 132, 119, 126, 158, 139, 159, 127, 147, 146,
	148, 0, 0, 0, 175, 192, 211, 108, 0, 171,
	180, 201, 202, 203, 204, 205, 206, 0, 0, 109,
	122, 118, 157, 149, 107, 128, 172, 131, 138, 163,
	209, 154, 168, 112, 191, 173, 314, 325, 320, 321,
	318, 319, 317, 316, 315, 327, 306, 307, 308, 309,
	311, 0, 322, 323, 310, 96, 103, 135, 208, 162,
	120, 193, 153, 0, 0, 0, 0, 0, 0, 0,
	0, 117, 0, 0, 0, 0, 0, 134, 313, 136,
	0, 0, 174, 145, 0, 0, 0, 0, 304, 305,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 271, 292, 291, 294, 295, 296, 297, 0, 0,
	110, 293, 298, 299, 300, 0, 0, 0, 0, 285,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 282, 283, 0, 0, 0, 0, 326, 0, 284,
	0, 0, 279, 280, 281, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 123, 0, 0, 0, 198,
	0, 0, 324, 0, 160, 0, 177, 125, 133, 97,
	104, 0, 124, 151, 165, 169, 0, 0, 0, 113,
	0, 167, 155, 190, 0, 156, 166, 137, 182, 161,
	189, 199, 200, 179, 197, 207, 98, 178, 188, 111,
	170, 100, 186, 176, 143, 129, 130, 99, 0, 194,
	164, 116, 121, 115, 152, 183, 184, 114, 210, 105,
	196, 102, 106, 195, 150, 181, 187, 144, 141, 101,
	185, 142, 140, 132, 119, 126, 158, 139, 159, 127,
	147, 146, 148, 0, 0, 0, 175, 192, 211, 108,
	0, 171, 180, 201, 202, 203, 204, 205, 206, 0,
	0, 109, 122, 118, 157, 149, 107, 128, 172, 131,
	138, 163, 209, 154, 168, 112, 191, 173, 314, 325,
	320, 321, 318, 319, 317, 316, 315, 327, 306, 307,
	308, 309, 311, 0, 322, 323, 310, 96, 103, 135,
	208, 162, 120, 193, 153, 0, 0, 0, 528, 0,
	0, 0, 0, 117, 0, 0, 0, 0, 0, 134,
	0, 136, 0, 0, 174, 145, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 346, 0, 530, 0, 0, 0, 0,
	0, 0, 110, 0, 0, 0, 0, 0, 525, 524,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 526, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 0, 0,
	0, 198, 0, 0, 0, 0, 160, 0, 177, 125,
	133, 97, 104, 0, 124, 151, 165, 169, 0, 0,
	0, 113, 0, 167, 155, 190, 0, 156, 166, 137,
	182, 161, 189, 199, 200, 179, 197, 207, 98, 178,
	188, 111, 170, 100, 186, 176, 143, 129, 130, 99,
	0, 194, 164, 116, 121, 115, 152, 183, 184, 114,
	210, 105, 196, 102, 106, 195, 150, 181, 187, 144,
	141, 101, 185, 142, 140, 132, 119, 126, 158, 139,
	159, 127, 147, 146, 148, 0, 0, 0, 175, 192,
	211, 108, 0, 171, 180, 201, 202, 203, 204, 205,
	206, 0, 0, 109, 122, 118, 157, 149, 107, 128,
	172, 131, 138, 163, 209, 154, 168, 112, 191, 173,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	103, 135, 208, 162, 120, 193, 153, 0, 0, 0,
	856, 0, 0, 0, 0, 117, 0, 0, 0, 0,
	0, 134, 0, 136, 0, 0, 174, 145, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 0, 858, 0, 0,
	0, 0, 0, 0, 110, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 198, 0, 0, 0, 0, 160, 0,
	177, 125, 133, 97, 104, 0, 124, 151, 165, 169,
	0, 0, 0, 113, 0, 167, 155, 190, 0, 156,
	166, 137, 182, 161, 189, 199, 200, 179, 197, 207,
	98, 178, 188, 111, 170, 100, 186, 176, 143, 129,
	130, 99, 0, 194, 164, 116, 121, 115, 152, 183,
	184, 114, 210, 105, 196, 102, 106, 195, 150, 181,
	187, 144, 141, 101, 185, 142, 140, 132, 119, 126,
	158, 139, 159, 127, 147, 146, 148, 0, 0, 0,
	175, 192, 211, 108, 0, 171, 180, 201, 202, 203,
	204, 205, 206, 0, 0, 109, 122, 118, 157, 149,
	107, 128, 172, 131, 138, 163, 209, 154, 168, 112,
	191, 173, 0, 0, 0, 0, 0, 24, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 153,
	0, 96, 103, 135, 208, 162, 120, 193, 117, 0,
	0, 0, 0, 0, 134, 0, 136, 0, 0, 174,
	145, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 0, 346, 0,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 0, 0, 0, 198, 0, 0, 0,
	0, 160, 0, 177, 125, 133, 97, 104, 0, 124,
	151, 165, 169, 0, 0, 0, 113, 0, 167, 155,
	190, 0, 156, 166, 137, 182, 161, 189, 199, 200,
	179, 197, 207, 98, 178, 188, 111, 170, 100, 186,
	176, 143, 129, 130, 99, 0, 194, 164, 116, 121,
	115, 152, 183, 184, 114, 210, 105, 196, 102, 106,
	195, 150, 181, 187, 144, 141, 101, 185, 142, 140,
	132, 119, 126, 158, 139, 159, 127, 147, 146, 148,
	0, 0, 0, 175, 192, 211, 108, 0, 171, 180,
	201, 202, 203, 204, 205, 206, 0, 0, 109, 122,
	118, 157, 149, 107, 128, 172, 131, 138, 163, 209,
	154, 168, 112, 191, 173, 0, 0, 0, 0, 0,
	24, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 153, 0, 96, 103, 135, 208, 162, 120,
	193, 117, 0, 0, 0, 0, 0, 134, 0, 136,
	0, 0, 174, 145, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 94, 0, 0, 0, 0, 0, 0, 0, 0,
	110, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 123, 0, 0, 0, 198,
	0, 0, 0, 0, 160, 0, 177, 125, 133, 97,
	104, 0, 124, 151, 165, 169, 0, 0, 0, 113,
	0, 167, 155, 190, 0, 156, 166, 137, 182, 161,
	189, 199, 200, 179, 197, 207, 98, 178, 188, 111,
	170, 100, 186, 176, 143, 129, 130, 99, 0, 194,
	164, 116, 121, 115, 152, 183, 184, 114, 210, 105,
	196, 102, 106, 195, 150, 181, 187, 144, 141, 101,
	185, 142, 140, 132, 119, 126, 158, 139, 159, 127,
	147, 146, 148, 0, 0, 0, 175, 192, 211, 108,
	0, 171, 180, 201, 202, 203, 204, 205, 206, 0,
	0, 109, 122, 118, 157, 149, 107, 128, 172, 131,
	138, 163, 209, 154, 168, 112, 191, 173, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 103, 135,
	208, 162, 120, 193, 153, 0, 0, 0, 856, 0,
	0, 0, 0, 117, 0, 0, 0, 0, 0, 134,
	0, 136, 0, 0, 174, 145, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 0, 858, 0, 0, 0, 0,
	0, 0, 110, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 0, 0,
	0, 198, 0, 0, 0, 0, 160, 0, 177, 125,
	133, 97, 104, 0, 124, 151, 165, 169, 0, 0,
	0, 113, 0, 167, 155, 190, 0, 854, 166, 137,
	182, 161, 189, 199, 200, 179, 197, 207, 98, 178,
	188, 111, 170, 100, 186, 176, 143, 129, 130, 99,
	0, 194, 164, 116, 121, 115, 152, 183, 184, 114,
	210, 105, 196, 102, 106, 195, 150, 181, 187, 144,
	141, 101, 185, 142, 140, 132, 119, 126, 158, 139,
	159, 127, 147, 146, 148, 0, 0, 0, 175, 192,
	211, 108, 0, 171, 180, 201, 202, 203, 204, 205,
	206, 0, 0, 109, 122, 118, 157, 149, 107, 128,
	172, 131, 138, 163, 209, 154, 168, 112, 191, 173,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 153, 0, 96,
	103, 135, 208, 162, 120, 193, 117, 0, 0, 0,
	0, 0, 134, 0, 136, 0, 0, 174, 145, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 346, 0, 0, 751,
	0, 0, 752, 0, 0, 110, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 0, 198, 0, 0, 0, 0, 160,
	0, 177, 125, 133, 97, 104, 0, 124, 151, 165,
	169, 0, 0, 0, 113, 0, 167, 155, 190, 0,
	156, 166, 137, 182, 161, 189, 199, 200, 179, 197,
	207, 98, 178, 188, 111, 170, 100, 186, 176, 143,
	129, 130, 99, 0, 194, 164, 116, 121, 115, 152,
	183, 184, 114, 210, 105, 196, 102, 106, 195, 150,
	181, 187, 144, 141, 101, 185, 142, 140, 132, 119,
	126, 158, 139, 159, 127, 147, 146, 148, 0, 0,
	0, 175, 192, 211, 108, 0, 171, 180, 201, 202,
	203, 204, 205, 206, 0, 0, 109, 122, 118, 157,
	149, 107, 128, 172, 131, 138, 163, 209, 154, 168,
	112, 191, 173, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	153, 0, 96, 103, 135, 208, 162, 120, 193, 117,
	0, 639, 0, 0, 0, 134, 0, 136, 0, 0,
	174, 145, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 638, 0, 0, 0, 0, 0, 0, 110, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 198, 0, 0,
	0, 0, 160, 0, 177, 125, 133, 97, 104, 0,
	124, 151, 165, 169, 0, 0, 0, 113, 0, 167,
	155, 190, 0, 156, 166, 137, 182, 161, 189, 199,
	200, 179, 197, 207, 98, 178, 188, 111, 170, 100,
	186, 176, 143, 129, 130, 99, 0, 194, 164, 116,
	121, 115, 152, 183, 184, 114, 210, 105, 196, 102,
	106, 195, 150, 181, 187, 144, 141, 101, 185, 142,
	140, 132, 119, 126, 158, 139, 159, 127, 147, 146,
	148, 0, 0, 0, 175, 192, 211, 108, 0, 171,
	180, 201, 202, 203, 204, 205, 206, 0, 0, 109,
	122, 118, 157, 149, 107, 128, 172, 131, 138, 163,
	209, 154, 168, 112, 191, 173, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 153, 0, 96, 103, 135, 208, 162,
	120, 193, 117, 0, 0, 0, 0, 0, 134, 0,
	136, 0, 0, 174, 145, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 54,
	0, 0, 94, 0, 0, 0, 0, 0, 0, 0,
	0, 110, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 0,
	198, 0, 0, 0, 0, 160, 0, 177, 125, 133,
	97, 104, 0, 124, 151, 165, 169, 0, 0, 0,
	113, 0, 167, 155, 190, 0, 156, 166, 137, 182,
	161, 189, 199, 200, 179, 197, 207, 98, 178, 188,
	111, 170, 100, 186, 176, 143, 129, 130, 99, 0,
	194, 164, 116, 121, 115, 152, 183, 184, 114, 210,
	105, 196, 102, 106, 195, 150, 181, 187, 144, 141,
	101, 185, 142, 140, 132, 119, 126, 158, 139, 159,
	127, 147, 146, 148, 0, 0, 0, 175, 192, 211,
	108, 0, 171, 180, 201, 202, 203, 204, 205, 206,
	0, 0, 109, 122, 118, 157, 149, 107, 128, 172,
	131, 138, 163, 209, 154, 168, 112, 191, 173, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 153, 0, 96, 103,
	135, 208, 162, 120, 193, 117, 0, 0, 0, 0,
	0, 134, 0, 136, 0, 0, 174, 145, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 0, 858, 0, 0,
	0, 0, 0, 0, 110, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 198, 0, 0, 0, 0, 160, 0,
	177, 125, 133, 97, 104, 0, 124, 151, 165, 169,
	0, 0, 0, 113, 0, 167, 155, 190, 0, 156,
	166, 137, 182, 161, 189, 199, 200, 179, 197, 207,
	98, 178, 188, 111, 170, 100, 186, 176, 143, 129,
	130, 99, 0, 194, 164, 116, 121, 115, 152, 183,
	184, 114, 210, 105, 196, 102, 106, 195, 150, 181,
	187, 144, 141, 101, 185, 142, 140, 132, 119, 126,
	158, 139, 159, 127, 147, 146, 148, 0, 0, 0,
	175, 192, 211, 108, 0, 171, 180, 201, 202, 203,
	204, 205, 206, 0, 0, 109, 122, 118, 157, 149,
	107, 128, 172, 131, 138, 163, 209, 154, 168, 112,
	191, 173, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 153,
	0, 96, 103, 135, 208, 162, 120, 193, 117, 0,
	0, 0, 0, 0, 134, 0, 136, 0, 0, 174,
	145, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 346, 0,
	530, 0, 0, 0, 0, 0, 0, 110, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 0, 0, 0, 198, 0, 0, 0,
	0, 160, 0, 177, 125, 133, 97, 104, 0, 124,
	151, 165, 169, 0, 0, 0, 113, 0, 167, 155,
	190, 0, 156, 166, 137, 182, 161, 189, 199, 200,
	179, 197, 207, 98, 178, 188, 111, 170, 100, 186,
	176, 143, 129, 130, 99, 0, 194, 164, 116, 121,
	115, 152, 183, 184, 114, 210, 105, 196, 102, 106,
	195, 150, 181, 187, 144, 141, 101, 185, 142, 140,
	132, 119, 126, 158, 139, 159, 127, 147, 146, 148,
	0, 0, 0, 175, 192, 211, 108, 0, 171, 180,
	201, 202, 203, 204, 205, 206, 0, 0, 109, 122,
	118, 157, 149, 107, 128, 172, 131, 138, 163, 209,
	154, 168, 112, 191, 173, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 153, 96, 103, 135, 208, 162, 120,
	193, 612, 117, 0, 0, 0, 0, 0, 134, 0,
	136, 0, 0, 174, 145, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 0, 0, 0, 0, 0, 0, 0,
	0, 110, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 0,
	198, 0, 0, 0, 0, 160, 0, 177, 125, 133,
	97, 104, 0, 124, 151, 165, 169, 0, 0, 0,
	113, 0, 167, 155, 190, 0, 156, 166, 137, 182,
	161, 189, 199, 200, 179, 197, 207, 98, 178, 188,
	111, 170, 100, 186, 176, 143, 129, 130, 99, 0,
	194, 164, 116, 121, 115, 152, 183, 184, 114, 210,
	105, 196, 102, 106, 195, 150, 181, 187, 144, 141,
	101, 185, 142, 140, 132, 119, 126, 158, 139, 159,
	127, 147, 146, 148, 0, 0, 0, 175, 192, 211,
	108, 0, 171, 180, 201, 202, 203, 204, 205, 206,
	0, 0, 109, 122, 118, 157, 149, 107, 128, 172,
	131, 138, 163, 209, 154, 168, 112, 191, 173, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 330,
	0, 0, 0, 0, 0, 0, 153, 0, 96, 103,
	135, 208, 162, 120, 193, 117, 0, 0, 0, 0,
	0, 134, 0, 136, 0, 0, 174, 145, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 0, 0, 0, 0,
	0, 0, 0, 0, 110, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 198, 0, 0, 0, 0, 160, 0,
	177, 125, 133, 97, 104, 0, 124, 151, 165, 169,
	0, 0, 0, 113, 0, 167, 155, 190, 0, 156,
	166, 137, 182, 161, 189, 199, 200, 179, 197, 207,
	98, 178, 188, 111, 170, 100, 186, 176, 143, 129,
	130, 99, 0, 194, 164, 116, 121, 115, 152, 183,
	184, 114, 210, 105, 196, 102, 106, 195, 150, 181,
	187, 144, 141, 101, 185, 142, 140, 132, 119, 126,
	158, 139, 159, 127, 147, 146, 148, 0, 0, 0,
	175, 192, 211, 108, 0, 171, 180, 201, 202, 203,
	204, 205, 206, 0, 0, 109, 122, 118, 157, 149,
	107, 128, 172, 131, 138, 163, 209, 154, 168, 112,
	191, 173, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 153,
	0, 96, 103, 135, 208, 162, 120, 193, 117, 0,
	0, 0, 0, 0, 134, 0, 136, 0, 0, 174,
	145, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 0,
	0, 0, 0, 0, 0, 0, 0, 110, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 0, 91, 0, 198, 0, 0, 0,
	0, 160, 0, 177, 125, 133, 97, 104, 0, 124,
	151, 165, 169, 0, 0, 0, 113, 0, 167, 155,
	190, 0, 156, 166, 137, 182, 161, 189, 199, 200,
	179, 197, 207, 98, 178, 188, 111, 170, 100, 186,
	176, 143, 129, 130, 99, 0, 194, 164, 116, 121,
	115, 152, 183, 184, 114, 210, 105, 196, 102, 106,
	195, 150, 181, 187, 144, 141, 101, 185, 142, 140,
	132, 119, 126, 158, 139, 159, 127, 147, 146, 148,
	0, 0, 0, 175, 192, 211, 108, 0, 171, 180,
	201, 202, 203, 204, 205, 206, 0, 0, 109, 122,
	118, 157, 149, 107, 128, 172, 131, 138, 163, 209,
	154, 168, 112, 191, 173, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 153, 0, 96, 103, 135, 208, 162, 120,
	193, 117, 0, 0, 0, 0, 0, 134, 0, 136,
	0, 0, 174, 145, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 346, 0, 0, 0, 0, 0, 0, 0, 0,
	110, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 123, 0, 0, 0, 198,
	0, 0, 0, 0, 160, 0, 177, 125, 133, 97,
	104, 0, 124, 151, 165, 169, 0, 0, 0, 113,
	0, 167, 155, 190, 0, 156, 166, 137, 182, 161,
	189, 199, 200, 179, 197, 207, 98, 178, 188, 111,
	170, 100, 186, 176, 143, 129, 130, 99, 0, 194,
	164, 116, 121, 115, 152, 183, 184, 114, 210, 105,
	196, 102, 106, 195, 150, 181, 187, 144, 141, 101,
	185, 142, 140, 132, 119, 126, 158, 139, 159, 127,
	147, 146, 148, 0, 0, 0, 175, 192, 211, 108,
	0, 171, 180, 201, 202, 203, 204, 205, 206, 0,
	0, 109, 122, 118, 157, 149, 107, 128, 172, 131,
	138, 163, 209, 154, 168, 112, 191, 173, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 153, 0, 96, 103, 135,
	208, 162, 120, 193, 117, 0, 0, 0, 0, 0,
	134, 0, 136, 0, 0, 174, 145, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 0, 0, 0, 0, 0,
	0, 0, 0, 110, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 0,
	0, 0, 198, 0, 0, 0, 0, 160, 0, 177,
	125, 133, 97, 104, 0, 124, 151, 165, 169, 0,
	0, 0, 113, 0, 167, 155, 190, 0, 156, 166,
	137, 182, 161, 189, 199, 200, 179, 197, 207, 98,
	178, 188, 111, 170, 100, 186, 176, 143, 129, 130,
	99, 0, 194, 164, 116, 121, 115, 152, 183, 184,
	114, 210, 105, 196, 102, 106, 195, 150, 181, 187,
	144, 141, 101, 185, 142, 140, 132, 119, 126, 158,
	139, 159, 127, 147, 146, 148, 0, 0, 0, 175,
	192, 211, 108, 0, 171, 180, 201, 202, 203, 204,
	205, 206, 0, 0, 109, 122, 118, 157, 149, 107,
	128, 172, 131, 138, 163, 209, 154, 168, 112, 191,
	173, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 153, 0,
	96, 103, 135, 208, 162, 120, 193, 117, 0, 0,
	0, 0, 0, 134, 0, 136, 0, 0, 174, 145,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 271, 0, 0,
	0, 0, 0, 0, 0, 0, 110, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 0, 0, 198, 0, 0, 0, 0,
	160, 0, 177, 125, 133, 97, 104, 0, 124, 151,
	165, 169, 0, 0, 0, 113, 0, 167, 155, 190,
	0, 156, 166, 137, 182, 161, 189, 199, 200, 179,
	197, 207, 98, 178, 188, 111, 170, 100, 186, 176,
	143, 129, 130, 99, 0, 194, 164, 116, 121, 115,
	152, 183, 184, 114, 210, 105, 196, 102, 106, 195,
	150, 181, 187, 144, 141, 101, 185, 142, 140, 132,
	119, 126, 158, 139, 159, 127, 147, 146, 148, 0,
	0, 0, 175, 192, 211, 108, 0, 171, 180, 201,
	202, 203, 204, 205, 206, 0, 0, 109, 122, 118,
	157, 149, 107, 128, 172, 131, 138, 163, 209, 154,
	168, 112, 191, 173, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 103, 135, 208, 162, 120, 193,
}
var yyPact = [...]int{

	1669, -1000, -181, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 963, 995, -1000, -1000, -1000, -1000, -1000, -1000,
	296, 53, 18, 115, 11, 11401, 114, 1832, 11887, -1000,
	15, -1000, -1000, -1000, 11887, -1000, -1000, -1000, -56, -71,
	-1000, 741, -1000, -1000, -1000, -1000, -1000, 956, 961, 790,
	949, 884, -1000, 6449, 85, 85, 11158, 5441, -1000, -1000,
	399, 11887, 106, 98, 77, 77, 77, -1000, -1000, -1000,
	-150, 113, 11887, 205, -1000, 11887, 73, 618, 73, 73,
	73, 11887, -1000, 153, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 11887, 613, 908, 3321, 55, 3321, 3321, -1000,
	3321, 3321, -1000, 3321, 24, 3321, -86, 971, -1000, -1000,
	-1000, -1000, -12, -1000, 3321, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 564,
	916, 7458, 7458, 963, -1000, 741, -1000, -1000, -1000, 906,
	-1000, -1000, 357, 984, -1000, 8466, 150, -1000, 7458, 679,
	749, -1000, -1000, 749, -1000, -1000, 145, -1000, -1000, 8214,
	8214, 8214, 8214, 8214, 8214, 8214, 8214, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 749, -1000, 7206, 749, 749, 749, 749, 749, 749,
	749, 749, 7458, 749, 749, 749, 749, 749, 749, 749,
	749, 749, 749, 749, 749, 749, 749, 749, 10915, 10185,
	11887, 662, -1000, 744, 5176, -131, -1000, -1000, -1000, 220,
	9942, -1000, -1000, -1000, 904, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 626, 11887, -1000, 2105, -1000, 611,
	11887, 610, 269, 609, 11887, -1000, 11887, 3321, 32, 58,
	108, 11887, 747, 94, 11887, 938, 827, 11887, 590, 575,
	-1000, 4911, -1000, 3321, 3321, -1000, -1000, -1000, 3321, 3321,
	3321, 11887, 3321, 3321, -1000, -1000, -1000, -1000, -1000, 3321,
	3321, -1000, 982, 317, -1000, -1000, -1000, -1000, 7458, -1000,
	826, -1000, -1000, -1000, -1000, -1000, -1000, 990, 194, 467,
	149, 746, -1000, 452, 956, 564, 884, 9699, 838, -1000,
	-1000, -1000, 11887, -1000, 7458, 7458, 379, -1000, 10671, -1000,
	-1000, 3851, 189, 8214, 407, 257, 8214, 8214, 8214, 8214,
	8214, 8214, 8214, 8214, 8214, 8214, 8214, 8214, 8214, 8214,
	8214, 498, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	573, -1000, 741, 751, 751, 160, 160, 160, 160, 160,
	160, 160, 2485, 5945, 564, 608, 267, 7206, 6449, 6449,
	7458, 7458, 6953, 6701, 6449, 942, 322, 267, 12130, -1000,
	-1000, 7962, -1000, -1000, -1000, -1000, -1000, 564, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 11644, 11644, 6449, 6449, 6449,
	6449, 43, 11887, -1000, 738, 824, -1000, -1000, -1000, 946,
	9204, 9456, 43, 693, 10185, 11887, -1000, -1000, 4646, 744,
	-131, 695, -1000, -109, -101, 5693, 156, -1000, -1000, -1000,
	-1000, 3056, 519, 630, 216, -1000, -48, -1000, -1000, -1000,
	-1000, 754, -1000, -1000, 754, 754, 754, 754, -21, -21,
	-21, -21, -1000, -1000, -1000, -1000, -1000, 789, 783, -1000,
	754, 754, 754, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 782, 782, 782, 773, 773, 801, 945, 3321, 935,
	3321, -1000, 82, -1000, 11644, 11644, 11887, 11887, 129, 11887,
	11887, 743, -1000, 11887, 742, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 11887, 354, 11887, 11887, 267, 11887, -1000, 879, 7458,
	7458, 4381, 7458, -1000, -1000, -1000, 916, -1000, 942, 953,
	-1000, 898, 896, 6449, -1000, -1000, 189, 319, -1000, -1000,
	447, -1000, -1000, -1000, -1000, 148, 749, -1000, 1743, -1000,
	-1000, -1000, -1000, 407, 8214, 8214, 8214, 487, 1743, 1550,
	1805, 1973, 160, 393, 393, 169, 169, 169, 169, 169,
	622, 622, -1000, -1000, -1000, 564, -1000, -1000, -1000, 564,
	6449, 736, -1000, -1000, 7458, -1000, 564, 603, 603, 397,
	330, 292, 980, 603, 282, 977, 603, 603, 6449, 310,
	-1000, 7458, 564, -1000, 142, -1000, 338, 733, 730, 603,
	564, 603, 603, 682, 749, -1000, 12130, 10185, 10185, 10185,
	10185, 10185, -1000, 861, 848, -1000, 855, 842, 877, 11887,
	-1000, 606, 9204, 191, 749, -1000, 10428, -1000, -1000, 970,
	10185, 690, -1000, -1000, 695, -131, -114, -1000, -1000, -1000,
	-1000, 267, -1000, 508, 694, 2791, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 781, 548, -1000, 928, 197, 186, 546,
	927, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 386, 8214, 989, -1000, 926, -1000, 925, 476, -51,
	-1000, -1000, 428, -21, -21, -1000, -1000, 156, 903, 156,
	156, 156, 462, 462, -1000, -1000, -1000, -1000, 418, -1000,
	-1000, -1000, 413, -1000, 823, 11644, 741, -1000, -1000, -1000,
	-1000, 175, 175, 273, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 42, 778, -1000, -1000, -1000,
	31, 30, 83, -1000, 3321, 11887, 317, -1000, 448, 7458,
	-1000, -1000, -1000, 874, 267, 267, 140, -1000, -1000, 11887,
	-1000, -1000, -1000, -1000, 654, -1000, -1000, -1000, 3586, 6449,
	-1000, 487, 1743, 1422, -1000, 8214, 8214, -1000, -1000, 603,
	6449, 267, -1000, -1000, -1000, 208, 498, 208, 8214, 8214,
	-1000, 8214, 8214, -1000, -162, 683, 206, -1000, 7458, 265,
	-1000, 4381, -1000, 8214, 8214, -1000, -1000, -1000, -1000, 812,
	12130, 749, -1000, 8961, 11644, 732, -1000, 214, 824, 777,
	811, 803, -1000, -1000, -1000, -1000, 841, -1000, 840, -1000,
	-1000, -1000, -1000, -1000, 105, 104, 103, 11644, -1000, 963,
	7458, 690, -1000, -1000, -1000, -113, -132, -1000, -1000, -1000,
	3056, -1000, 3056, 11644, 59, -1000, 546, 546, -1000, -1000,
	-1000, 774, -1000, 1743, -130, -1000, -1000, -1000, -1000, -1000,
	629, 156, 156, -1000, 226, -1000, -1000, -1000, 597, -1000,
	580, 684, 572, 11887, -1000, -1000, -1000, 497, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 540,
	-1000, 521, 11887, -1000, -1000, -1000, -1000, -1000, 11644, -168,
	518, 11644, 11644, 11887, -1000, -1000, 354, -1000, 267, -1000,
	4116, -1000, 970, 10185, -1000, -1000, 564, -1000, 8214, 1743,
	1743, -1000, -1000, 564, 754, 754, -1000, 754, 773, -1000,
	754, 5, 754, -4, 564, 564, 1902, 1866, 1671, 1359,
	749, -157, -1000, 267, 7458, -1000, 1513, 1498, -1000, 917,
	635, 658, -1000, -1000, 6197, 564, 568, 127, 563, -1000,
	963, 12130, 7458, -1000, -1000, 7458, 770, -1000, 7458, -1000,
	-1000, -1000, 749, 749, 749, 563, 956, 267, -1000, -1000,
	-1000, -1000, 2791, -1000, 559, -1000, 754, -1000, -1000, -1000,
	11644, -1000, -1000, -1000, -1000, -1000, -1000, -21, 442, -21,
	406, -1000, 404, 3321, 505, -1000, -1000, -1000, -1000, 185,
	-1000, -1000, 931, -1000, 4116, -1000, -1000, 753, -1000, -1000,
	-1000, 968, 678, -1000, 1743, -1000, -1000, 109, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 8214, 8214, 8214, 8214,
	8214, 564, 439, 267, 8214, 8214, 924, -1000, 749, -1000,
	-1000, 697, 11644, 11644, -1000, 11644, 956, -1000, 267, 267,
	11644, 267, 11644, 11644, 11644, 8718, -1000, 151, 11644, -1000,
	554, -1000, 156, -1000, 156, 628, 623, -1000, 581, -1000,
	502, -1000, -1000, 749, 672, -1000, 212, 11644, 965, 960,
	-1000, -1000, 338, 338, 338, 338, 57, -1000, -1000, 338,
	338, 988, -1000, 749, -1000, 741, 120, -1000, -1000, -1000,
	545, 537, 537, 537, 191, 151, -1000, 469, 209, 408,
	-1000, 56, 11644, -1000, -1000, -1000, -1000, -1000, -1000, 41,
	4116, 3056, 516, -1000, 7458, 7458, -1000, -1000, -1000, -1000,
	564, 51, -173, -1000, -1000, 12130, 658, 564, 11644, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 400, -1000, -1000, 11887,
	-1000, -1000, 514, -1000, 11644, -1000, -1000, 778, 267, 645,
	-1000, 872, -166, -177, 642, -1000, -1000, -1000, 750, -1000,
	41, 894, -168, -1000, 865, -1000, 11644, -1000, 38, -1000,
	-170, 490, 36, -174, 807, 749, -178, 806, -1000, 976,
	7710, -1000, -1000, 987, 178, 178, 338, 564, -1000, -1000,
	-1000, 60, 434, -1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1194, 76, 538, 1190, 1189, 1187, 1186, 1185, 1183,
	1182, 1178, 1176, 1175, 1174, 1165, 1164, 1163, 1162, 1161,
	1159, 1158, 1156, 1155, 1153, 1152, 144, 1151, 1150, 1149,
	69, 1148, 82, 1147, 1146, 40, 61, 41, 43, 1002,
	1145, 55, 71, 59, 1143, 37, 1140, 1139, 87, 1138,
	1137, 56, 1136, 1135, 1468, 1131, 1130, 10, 34, 1128,
	1127, 1126, 1124, 74, 886, 1122, 1121, 24, 1119, 1117,
	108, 1116, 60, 4, 12, 18, 21, 1115, 169, 28,
	1114, 57, 1113, 1106, 1105, 1103, 35, 1102, 63, 1101,
	16, 58, 1099, 26, 73, 32, 15, 6, 88, 64,
	1097, 20, 65, 52, 1094, 1093, 530, 49, 1092, 1091,
	48, 1089, 1088, 23, 459, 429, 1086, 1083, 1081, 1080,
	1078, 42, 0, 342, 47, 75, 1077, 1076, 1075, 1405,
	70, 50, 14, 1072, 33, 29, 46, 1068, 1067, 38,
	1066, 1065, 1063, 1062, 1061, 1060, 1057, 1056, 1055, 85,
	1054, 1052, 1049, 31, 19, 1045, 1042, 66, 22, 1040,
	1039, 1038, 1033, 51, 17, 1029, 1028, 62, 30, 1027,
	1026, 1025, 1024, 1023, 27, 9, 1021, 13, 1020, 8,
	1019, 25, 1017, 7, 1016, 5, 1014, 1, 1012, 3,
	44, 2, 1006, 11, 1005, 1004, 53, 384, 1003, 1001,
	95,
}
var yyR1 = [...]int{

	0, 194, 195, 195, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 6, 3, 4,
	4, 5, 5, 7, 7, 29, 29, 8, 9, 9,
	9, 198, 198, 49, 49, 48, 48, 94, 94, 10,
	10, 10, 10, 99, 99, 103, 103, 103, 104, 104,
	104, 104, 137, 137, 161, 161, 11, 11, 11, 11,
	11, 11, 189, 189, 188, 187, 187, 186, 186, 185,
	17, 170, 172, 172, 171, 171, 171, 171, 164, 141,
	141, 141, 141, 141, 141, 141, 140, 140, 140, 140,
	140, 144, 144, 145, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 143, 143, 143, 143, 143, 146, 146,
	146, 146, 146, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 148, 148,
	148, 148, 148, 148, 148, 148, 163, 163, 149, 149,
	157, 157, 158, 158, 158, 155, 155, 156, 156, 159,
	159, 151, 152, 160, 153, 153, 153, 154, 154, 154,
	162, 162, 162, 162, 150, 165, 165, 180, 180, 179,
	179, 179, 169, 169, 176, 176, 176, 176, 176, 167,
	167, 168, 168, 178, 178, 177, 166, 166, 181, 181,
	181, 181, 192, 193, 191, 191, 191, 191, 191, 173,
	173, 173, 174, 174, 174, 175, 175, 175, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 107, 107, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 184, 182, 182, 183,
	183, 13, 18, 18, 14, 14, 14, 14, 14, 15,
	15, 19, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 111, 111, 109, 109, 112, 112,
	110, 110, 110, 113, 113, 113, 138, 138, 138, 21,
	21, 23, 23, 24, 25, 22, 22, 22, 22, 22,
	22, 22, 22, 16, 199, 26, 27, 27, 28, 28,
	28, 32, 32, 32, 30, 30, 30, 31, 31, 37,
	37, 36, 36, 38, 38, 38, 38, 126, 126, 126,
	125, 125, 40, 40, 41, 41, 42, 42, 43, 43,
	43, 43, 56, 56, 93, 93, 95, 95, 44, 44,
	44, 44, 45, 45, 46, 46, 47, 47, 133, 133,
	132, 132, 132, 131, 131, 50, 50, 50, 52, 51,
	51, 51, 51, 53, 53, 55, 55, 54, 54, 57,
	57, 57, 57, 58, 58, 39, 39, 39, 39, 39,
	39, 39, 108, 108, 60, 60, 59, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 71, 71, 71, 71,
	71, 71, 61, 61, 61, 61, 61, 61, 61, 35,
	35, 72, 72, 72, 78, 73, 73, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 68,
	68, 68, 66, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 200, 200, 70, 69, 69, 69, 69, 69, 69,
	33, 33, 33, 33, 33, 136, 136, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	82, 82, 34, 34, 80, 80, 81, 83, 83, 79,
	79, 79, 63, 63, 63, 63, 63, 63, 63, 63,
	65, 65, 65, 84, 84, 85, 85, 86, 86, 87,
	87, 88, 89, 89, 89, 90, 90, 90, 90, 91,
	91, 91, 62, 62, 62, 62, 62, 62, 92, 92,
	92, 92, 96, 96, 74, 74, 76, 76, 75, 77,
	97, 97, 101, 98, 98, 102, 102, 102, 102, 100,
	100, 100, 128, 128, 128, 105, 105, 114, 114, 115,
	115, 106, 106, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 118, 118, 117, 117, 117, 119, 119,
	120, 120, 120, 120, 127, 127, 123, 123, 124, 124,
	129, 129, 130, 130, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 196, 197, 134, 135,
	135, 135,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 4, 6, 7, 5, 10, 1,
	3, 1, 3, 7, 8, 1, 1, 9, 8, 7,
	6, 1, 1, 1, 3, 1, 3, 0, 4, 3,
	4, 5, 4, 1, 3, 3, 2, 2, 2, 2,
	2, 1, 1, 1, 0, 2, 2, 2, 8, 6,
	5, 5, 0, 2, 1, 0, 2, 1, 3, 3,
	4, 4, 2, 4, 1, 3, 3, 3, 2, 1,
	2, 2, 2, 2, 2, 2, 3, 1, 1, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 2,
	2, 2, 1, 4, 4, 2, 2, 3, 3, 3,
	3, 1, 1, 1, 1, 1, 6, 6, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 3,
	0, 5, 0, 3, 5, 0, 1, 0, 1, 1,
	2, 2, 3, 1, 0, 3, 3, 0, 2, 2,
	2, 1, 2, 1, 2, 5, 4, 1, 2, 2,
	3, 2, 0, 1, 2, 3, 3, 2, 2, 1,
	1, 0, 1, 1, 3, 2, 3, 1, 10, 11,
	11, 12, 3, 3, 1, 1, 2, 2, 2, 0,
	1, 3, 1, 2, 3, 1, 1, 1, 6, 10,
	8, 7, 7, 7, 9, 7, 7, 4, 5, 7,
	5, 5, 5, 12, 7, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 7, 1, 3, 8,
	8, 3, 3, 5, 4, 6, 4, 4, 4, 3,
	2, 3, 4, 4, 3, 4, 4, 4, 4, 4,
	4, 3, 3, 2, 3, 3, 2, 3, 4, 3,
	7, 5, 4, 2, 4, 2, 2, 2, 2, 3,
	3, 5, 2, 3, 1, 1, 0, 1, 1, 1,
	0, 2, 2, 0, 2, 2, 0, 1, 1, 2,
	1, 1, 2, 1, 1, 2, 2, 2, 2, 2,
	2, 3, 3, 2, 0, 2, 0, 2, 1, 2,
	2, 0, 1, 1, 0, 1, 1, 0, 1, 0,
	1, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 1, 0, 2, 1, 3, 1, 1, 1, 3,
	1, 3, 3, 7, 1, 3, 1, 3, 4, 4,
	4, 3, 2, 4, 0, 1, 0, 2, 0, 1,
	0, 1, 2, 1, 1, 1, 2, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 1, 1, 3, 0,
	5, 5, 5, 0, 2, 1, 3, 3, 2, 3,
	1, 2, 0, 3, 1, 1, 3, 3, 4, 4,
	5, 3, 4, 5, 6, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 0,
	2, 1, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 2,
	2, 2, 2, 2, 3, 1, 1, 1, 1, 4,
	5, 6, 4, 4, 6, 6, 6, 8, 8, 8,
	8, 9, 7, 5, 4, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 8,
	8, 0, 2, 3, 4, 4, 4, 4, 4, 4,
	0, 3, 4, 7, 3, 1, 1, 2, 3, 3,
	1, 2, 2, 1, 2, 1, 2, 2, 1, 2,
	0, 1, 0, 2, 1, 2, 4, 0, 2, 1,
	3, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 0, 3, 0, 2, 0, 3, 1,
	3, 2, 0, 1, 1, 0, 2, 4, 4, 0,
	2, 4, 2, 1, 3, 5, 4, 6, 1, 3,
	3, 5, 0, 5, 1, 3, 1, 2, 3, 1,
	1, 3, 3, 1, 3, 3, 3, 3, 3, 1,
	2, 1, 1, 1, 1, 1, 1, 0, 2, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	0, 1, 1, 1, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
	1, 1,
}
var yyChk = [...]int{

	-1000, -194, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -19, -20, -21, -23, -24, -25,
	-22, -16, -3, -4, 6, 7, -29, 9, 10, 30,
	-17, 115, 116, 118, 117, 149, 119, 142, 50, 162,
	163, 165, 166, 25, 143, 144, 147, 148, 31, 32,
	121, -196, 8, 253, 54, -195, 270, -86, 15, -28,
	5, -26, -199, -26, -26, -26, -26, -26, -170, -172,
	54, 90, -120, -161, 245, 122, 123, 129, 133, 132,
	72, -106, 125, 222, 127, 123, 123, 124, 125, 245,
	122, 123, -54, -129, 57, -122, 263, 135, 162, 173,
	167, 195, 187, 264, 136, 185, 188, 232, 215, 227,
	66, 165, 241, 145, 183, 179, 177, 27, 229, 200,
	268, 178, 228, 121, 138, 133, 201, 205, 233, 171,
	172, 235, 199, 134, 33, 265, 35, 153, 236, 203,
	198, 194, 197, 170, 193, 39, 207, 206, 208, 231,
	190, 139, 180, 18, 239, 148, 151, 230, 202, 204,
	130, 155, 267, 237, 176, 140, 152, 147, 240, 141,
	166, 217, 234, 243, 38, 212, 169, 132, 163, 159,
	218, 191, 154, 181, 182, 196, 168, 192, 164, 156,
	149, 242, 213, 269, 175, 189, 186, 160, 125, 157,
	158, 219, 220, 221, 222, 223, 224, 161, 266, 238,
	184, 214, 123, 108, 188, 232, 115, 216, 217, 229,
	124, 33, 230, 155, -138, 123, -109, 215, 219, 220,
	221, 224, 222, 161, 57, 234, 233, 225, -129, 164,
	-134, -54, -134, -134, -134, -134, 218, 218, -134, -2,
	-90, 17, 16, -5, -3, -196, 6, 20, 21, -32,
	40, 41, -27, -38, 99, -39, -129, -59, 74, -64,
	29, 57, -122, 23, -63, -60, -79, -77, -78, 108,
	109, 110, 97, 98, 105, 75, 111, -68, -66, -67,
	-69, 59, 58, 67, 60, 61, 62, 63, 68, 69,
	70, -123, -75, -196, 44, 45, 254, 255, 256, 257,
	262, 258, 77, 34, 244, 252, 251, 250, 248, 249,
	246, 247, 260, 261, 128, 245, 103, 253, -106, -106,
	11, -48, -54, -98, -137, 164, -102, 234, 233, -124,
	-100, -123, -121, 232, 188, 231, 57, -122, 120, 73,
	22, 24, 210, 76, 108, 16, 77, 107, 254, 115,
	48, 246, 247, 244, 256, 257, 245, 216, 29, 10,
	25, 143, 21, 101, 117, 80, 81, 146, 23, 144,
	70, 19, 51, 11, 13, 14, 128, 127, 92, 124,
	46, 8, 111, 26, 89, 42, 28, 44, 90, 17,
	248, 249, 31, 262, 150, 103, 49, 36, 74, 68,
	71, 52, 72, 15, 47, 91, 118, 253, 45, 122,
	6, 259, 30, 142, 43, 123, 79, 260, 261, 126,
	69, 5, 129, 32, 9, 50, 53, 250, 251, 252,
	175, 34, 78, 12, -171, 90, -164, 57, -54, 124,
	125, -115, 128, -115, -115, 253, 123, -54, 115, 117,
	120, 52, -18, -54, -114, 128, 57, -114, -114, -114,
	-54, 112, -54, 57, 30, -135, -196, -124, 245, 57,
	155, 123, 156, 125, -135, -135, -135, -135, -135, 159,
	160, -135, -112, -111, 227, 228, 218, 226, 12, 218,
	158, -135, -134, -134, -197, 56, -91, 19, 31, -39,
	-129, -87, -88, -39, -86, -2, -26, 36, -30, 20,
	21, 65, 11, -126, 73, 72, 89, -125, 22, -123,
	59, 112, -39, -61, 92, 74, 90, 91, 76, 94,
	93, 104, 97, 98, 99, 100, 101, 102, 103, 95,
	96, 107, 82, 83, 84, 85, 86, 87, 88, -108,
	-196, -78, -196, 113, 114, -64, -64, -64, -64, -64,
	-64, -64, -64, -196, -2, -73, -39, -196, -196, -196,
	-196, -196, -196, -196, -196, -196, -82, -39, -196, -200,
	-70, -196, -200, -70, -200, -70, -200, -196, -200, -70,
	-200, -70, -200, -200, -70, -196, -196, -196, -196, -196,
	-196, -55, 26, -54, -41, -42, -43, -44, -56, -78,
	-196, -54, -54, -48, -198, 55, 11, 53, 55, -98,
	164, -99, -103, 235, 237, 82, -128, -123, 59, 29,
	30, 56, 55, -54, -141, -140, -144, -145, -147, -146,
	-148, -142, -143, 175, 185, 186, 108, 189, 191, 192,
	193, 194, 195, 196, 197, 198, 199, 200, 30, 145,
	181, 182, 183, 184, 201, 202, 203, 204, 205, 206,
	207, 208, 167, 187, 264, 168, 169, 170, 171, 172,
	173, 176, 177, 178, 179, 180, 57, -54, 57, 74,
	57, -54, -54, -135, 157, 157, 123, 123, -54, 55,
	126, -48, 23, 52, -49, -54, 57, 57, -130, -129,
	-121, -135, -135, -135, -135, -135, -54, -135, -135, -135,
	-135, 11, -110, 11, 92, -39, 52, 9, 92, 55,
	18, 112, 55, -89, 24, 25, -90, -197, -32, -65,
	-123, 60, 63, -31, 43, -54, -39, -39, -71, 68,
	74, 69, 70, -125, 99, -130, -124, -121, -64, -72,
	-75, -78, 64, 92, 90, 91, 76, -64, -64, -64,
	-64, -64, -64, -64, -64, -64, -64, -64, -64, -64,
	-64, -64, -136, 57, 59, 57, -63, -63, -123, -37,
	21, -36, -38, -197, 55, -197, -2, -36, -36, -39,
	-39, -79, 59, -36, -79, 59, -36, -36, -30, -80,
	-81, 78, -79, -123, -129, -197, -64, -123, -123, -36,
	-37, -36, -36, -94, 151, -54, 30, 55, -50, -52,
	-51, -53, 42, 46, 48, 43, 44, 45, 49, -133,
	22, -41, -196, -132, 151, -131, 22, -129, 59, -94,
	53, -41, -54, -102, -99, 55, 236, 238, 239, 52,
	71, -39, -154, 107, -173, -174, -175, -124, 59, 60,
	-164, -165, -166, -176, 137, -181, 130, 132, 129, -167,
	138, 124, 28, 56, -159, -151, -152, -160, -162, -150,
	68, 74, 29, 52, 210, 130, 28, 129, 66, -155,
	213, -149, 54, -149, -149, -149, -149, -153, 188, -153,
	-153, -153, 54, 54, -149, -149, -149, -157, 54, -157,
	-157, -158, 54, -158, -127, 53, 22, -135, 23, -135,
	-116, 120, 117, 118, -184, 116, 210, 188, 66, 29,
	15, 254, 151, 269, 57, 152, -123, -123, -54, -54,
	120, 117, -54, -54, -54, 55, -54, -113, 90, 12,
	-129, -129, -54, 38, -39, -39, -130, -88, -91, -105,
	19, 11, 34, 34, -36, 68, 69, 70, 112, -196,
	-72, -64, -64, -64, -35, 146, 73, -197, -197, -36,
	55, -39, -197, -197, -197, 55, 53, 22, 11, 11,
	-197, 11, 11, -197, -197, -36, -83, -81, 80, -39,
	-197, 112, -197, 55, 55, -197, -197, -197, -197, -62,
	30, 34, -2, -196, -196, -97, -101, -79, -42, -43,
	-43, -42, -43, 42, 42, 42, 47, 42, 47, 42,
	-51, -129, -197, -57, 50, 127, 51, -196, -131, -58,
	12, -41, -58, -103, -104, 240, 237, 243, 57, 59,
	55, -175, 82, 54, 57, 28, -167, -167, -168, 57,
	-168, 28, 68, -64, 9, 28, 28, 59, -156, 214,
	60, -153, -153, -154, 30, -154, -154, -154, -163, 59,
	-163, 60, 60, 52, -123, -2, -134, -107, -190, 131,
	137, 138, 133, 124, 28, 130, 132, 151, 129, -107,
	-190, 131, -117, -119, 126, 22, 124, 28, 151, -189,
	53, 157, 157, 126, -135, -54, -110, 59, -39, 39,
	112, -54, -40, 11, 99, -124, -37, -35, 73, -64,
	-64, -197, -38, -139, 108, 185, 145, 183, 179, 199,
	190, 212, 181, 213, -136, -139, -64, -64, -64, -64,
	263, -86, 81, -39, 79, -124, -64, -64, -96, 52,
	-97, -74, -76, -75, -196, -2, -92, -123, -95, -123,
	-58, 55, 82, -46, -45, 52, 53, -47, 52, -45,
	42, 42, 124, 124, 124, -95, -86, -39, -58, 237,
	241, 242, -174, -175, -178, -177, -123, -181, -168, -168,
	54, -67, 56, -154, -154, 57, 108, 56, 55, 56,
	55, 56, 55, -54, 54, -164, -134, 57, -134, 57,
	-54, -134, -123, -187, 266, -188, 57, -123, -123, -54,
	-113, -58, -41, -197, -64, -197, -149, -149, -149, -158,
	-149, 172, -149, 172, -197, -197, 19, 19, 19, 19,
	-196, -34, 259, -39, 55, 55, 27, -96, 55, -197,
	-197, -197, 55, 112, -197, 55, -86, -101, -39, -39,
	54, -39, -196, -196, -196, -197, -90, 56, 55, -149,
	-93, -123, -153, 59, -153, 60, 60, -135, -164, -134,
	-118, 126, 22, 26, -186, -185, -124, 54, -84, 13,
	-153, 57, -64, -64, -64, -64, -64, -197, 59, -64,
	-64, 28, -76, 34, -2, -196, -123, -123, -123, -90,
	-93, -93, -93, -93, -132, -180, -179, 53, 134, 66,
	-177, 56, 55, -154, -154, 56, 56, 56, 57, -196,
	55, 82, -93, -85, 14, 16, -197, -197, -197, -197,
	-33, 92, 266, -197, -197, 9, -74, -2, 112, 56,
	-197, -197, -197, -57, -179, 57, -169, 82, 59, 140,
	-123, -134, -182, -183, 151, -185, -175, 56, -39, -73,
	-197, 264, 49, 267, -97, -197, -123, 60, -54, -197,
	55, -123, -189, 39, 265, 268, 54, -183, 34, -187,
	39, -93, 153, 266, 56, 154, 267, -192, -193, 52,
	-196, 268, -193, 52, 10, 9, -64, 150, -191, 141,
	136, 139, 30, -191, -197, -197, 135, 29, 68,
}
var yyDef = [...]int{

	23, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 567, 0, 324, 324, 324, 324, 324, 324,
	0, -2, 621, 0, 0, 0, 0, -2, 310, 311,
	0, 313, 314, 868, 868, 868, 868, 868, 0, 0,
	868, 0, 35, 36, 866, 1, 3, 575, 0, 0,
	328, 331, 326, 0, 621, 621, 0, 0, 66, 67,
	0, 0, 0, 0, 619, 619, 619, 641, 642, 643,
	0, 0, 0, 0, 622, 0, 617, 0, 617, 617,
	617, 0, 260, 397, 650, 651, 750, 751, 752, 753,
	754, 755, 756, 757, 758, 759, 760, 761, 762, 763,
	764, 765, 766, 767, 768, 769, 770, 771, 772, 773,
	774, 775, 776, 777, 778, 779, 780, 781, 782, 783,
	784, 785, 786, 787, 788, 789, 790, 791, 792, 793,
	794, 795, 796, 797, 798, 799, 800, 801, 802, 803,
	804, 805, 806, 807, 808, 809, 810, 811, 812, 813,
	814, 815, 816, 817, 818, 819, 820, 821, 822, 823,
	824, 825, 826, 827, 828, 829, 830, 831, 832, 833,
	834, 835, 836, 837, 838, 839, 840, 841, 842, 843,
	844, 845, 846, 847, 848, 849, 850, 851, 852, 853,
	854, 855, 856, 857, 858, 859, 860, 861, 862, 863,
	864, 865, 0, 0, 0, 869, 0, 869, 869, 273,
	869, 869, 276, 869, 0, 869, 0, 283, 285, 286,
	287, 288, 0, 292, 869, 307, 308, 297, 309, 312,
	315, 316, 317, 318, 319, 320, 868, 868, 323, 29,
	579, 0, 0, 567, 31, 0, 324, 329, 330, 334,
	332, 333, 325, 0, 343, 347, 0, 405, 0, 410,
	412, -2, -2, 0, 447, 448, 449, 450, 451, 0,
	0, 0, 0, 0, 0, 0, 0, 475, 476, 477,
	478, 552, 553, 554, 555, 556, 557, 558, 559, 414,
	415, 549, 599, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 540, 0, 511, 511, 511, 511, 511, 511,
	511, 511, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 45, 49, 0, 842, 603, -2, -2, 0,
	0, 648, 649, -2, 760, -2, 646, 647, 654, 655,
	656, 657, 658, 659, 660, 661, 662, 663, 664, 665,
	666, 667, 668, 669, 670, 671, 672, 673, 674, 675,
	676, 677, 678, 679, 680, 681, 682, 683, 684, 685,
	686, 687, 688, 689, 690, 691, 692, 693, 694, 695,
	696, 697, 698, 699, 700, 701, 702, 703, 704, 705,
	706, 707, 708, 709, 710, 711, 712, 713, 714, 715,
	716, 717, 718, 719, 720, 721, 722, 723, 724, 725,
	726, 727, 728, 729, 730, 731, 732, 733, 734, 735,
	736, 737, 738, 739, 740, 741, 742, 743, 744, 745,
	746, 747, 748, 749, 0, 0, 84, 0, 82, 0,
	0, 0, 0, 0, 0, 65, 0, 869, 0, 0,
	0, 0, 251, 0, 0, 0, 0, 0, 0, 0,
	259, 0, 261, 869, 869, 264, 870, 871, 869, 869,
	869, 0, 869, 869, 271, 272, 274, 275, 277, 869,
	869, 279, 0, 300, 298, 299, 294, 295, 0, 289,
	290, 293, 321, 322, 30, 867, 24, 0, 0, 576,
	0, 568, 569, 572, 575, 29, 331, 0, 337, 335,
	336, 327, 0, 344, 0, 0, 0, 348, 0, 350,
	351, 0, 408, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 432, 433, 434, 435, 436, 437, 438, 411,
	0, 425, 0, 0, 0, 467, 468, 469, 470, 471,
	472, 473, 0, 339, 29, 0, 445, 0, 0, 0,
	0, 0, 0, 0, 0, 334, 0, 541, 0, 495,
	503, 0, 496, 504, 497, 505, 498, 0, 499, 506,
	500, 507, 501, 502, 508, 0, 0, 0, 339, 0,
	0, 47, 0, 396, 0, 354, 356, 357, 358, -2,
	0, 380, -2, 0, 0, 0, 41, 42, 0, 50,
	842, 52, 53, 0, 0, 0, 167, 612, 613, 614,
	610, 209, 0, 0, 88, 89, 155, 97, 98, 99,
	100, 148, 102, 103, 148, 148, 148, 148, 164, 164,
	164, 164, 131, 132, 133, 134, 135, 0, 0, 118,
	148, 148, 148, 122, 138, 139, 140, 141, 142, 143,
	144, 145, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 150, 150, 150, 152, 152, 644, 0, 869, 0,
	869, 80, 0, 227, 0, 0, 0, 0, 0, 0,
	0, 254, 618, 0, 256, 43, 257, 258, 398, 652,
	653, 262, 263, 265, 266, 267, 268, 269, 270, 278,
	282, 0, 303, 0, 0, 284, 0, 580, 0, 0,
	0, 0, 0, 571, 573, 574, 579, 32, 334, 0,
	560, 0, 0, 0, 338, 27, 406, 407, 409, 426,
	0, 428, 430, 349, 345, 0, 550, -2, 416, 417,
	441, 442, 443, 0, 0, 0, 0, 439, 421, 0,
	452, 453, 454, 455, 456, 457, 458, 459, 460, 461,
	462, 463, 466, 525, 526, 0, 464, 465, 474, 0,
	0, 340, 341, 444, 0, 598, 29, 0, 0, 0,
	0, 449, 552, 0, 449, 552, 0, 0, 0, 547,
	544, 0, 0, 549, 0, 512, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 395, 0, 0, 0, 0,
	0, 0, 385, 0, 0, 388, 0, 0, 0, 0,
	379, 0, 0, 399, 810, 381, 0, 383, 384, 403,
	0, 403, 46, 604, 51, 0, 0, 56, 57, 605,
	606, 607, 608, 0, 81, 210, 212, 215, 216, 217,
	85, 86, 87, 0, 0, 197, 0, 0, 191, 191,
	0, 189, 190, 83, 90, 91, 92, 93, 94, 95,
	159, 0, 0, 0, 163, 0, 171, 173, 0, 157,
	156, 101, 0, 164, 164, 125, 126, 167, 0, 167,
	167, 167, 0, 0, 119, 120, 121, 113, 0, 114,
	115, 116, 0, 117, 0, 0, 0, 70, 620, 71,
	868, 235, 235, 635, 228, 623, 624, 625, 626, 627,
	628, 629, 630, 631, 632, 0, 72, 230, 232, 231,
	0, 0, 0, 252, 869, 0, 300, 281, 0, 0,
	301, 302, 291, 0, 577, 578, 0, 570, 25, 0,
	615, 616, 561, 562, 352, 427, 429, 431, 0, 339,
	418, 439, 422, 0, 419, 0, 0, 413, 479, 0,
	0, 446, -2, 482, 483, 0, 0, 0, 0, 0,
	518, 0, 0, 519, 0, 567, 0, 545, 0, 0,
	494, 0, 513, 0, 0, 514, 515, 516, 517, 592,
	0, 0, -2, 0, 0, 403, 600, 0, 355, 374,
	376, 0, 371, 386, 387, 389, 0, 391, 0, 393,
	394, 359, 361, 362, 0, 0, 0, 0, 382, 567,
	0, 403, 40, 54, 55, 0, 0, 61, 168, 169,
	0, 213, 0, 0, 0, 184, 191, 191, 187, 192,
	188, 0, 160, 161, 0, 170, 172, 174, 96, 158,
	0, 167, 167, 127, 0, 128, 129, 130, 0, 146,
	0, 0, 0, 0, 645, -2, 218, 0, 868, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 0,
	868, 0, 0, 868, 636, 637, 638, 639, 0, 75,
	0, 0, 0, 0, 255, 44, 303, 304, 305, 581,
	0, 26, 403, 0, 346, 551, 0, 420, 0, 440,
	423, 480, 342, 0, 148, 148, 530, 148, 152, 533,
	148, 535, 148, 538, 0, 0, 0, 0, 0, 0,
	0, 542, 493, 548, 0, 550, 0, 0, 33, 0,
	592, 582, 594, 596, 0, 29, 0, 588, 0, 366,
	567, 0, 0, 368, 375, 0, 0, 369, 0, 370,
	390, 392, 0, 0, 0, 0, 575, 404, 39, 58,
	59, 60, 211, 214, 0, 193, 148, 196, 185, 186,
	0, 162, 149, 123, 124, 165, 166, 164, 0, 164,
	0, 153, 0, 869, 0, 868, 221, 222, 223, 0,
	225, 226, 0, 229, 0, 73, 74, 0, 234, 253,
	280, 563, 353, 481, 424, 484, 527, 164, 531, 532,
	534, 536, 537, 539, 486, 485, 0, 0, 0, 0,
	0, 0, 0, 546, 0, 0, 0, 34, 0, 597,
	-2, 0, 0, 0, 48, 0, 575, 601, 602, 372,
	0, 377, 0, 0, 0, 380, 38, 176, 0, 195,
	0, 364, 167, 147, 167, 0, 0, 68, 0, 220,
	0, 633, 634, 0, 76, 77, 0, 0, 565, 0,
	528, 529, 0, 0, 0, 0, 520, 492, 543, 0,
	0, 0, 595, 0, -2, 0, 590, 589, 367, 37,
	0, 0, 0, 0, 399, 175, 177, 0, 182, 0,
	194, 0, 0, 136, 137, 151, 154, 868, 224, 0,
	0, 0, 0, 28, 0, 0, 487, 489, 488, 490,
	0, 0, 0, 509, 510, 0, 585, 29, 0, 373,
	400, 401, 402, 363, 178, 179, 0, 183, 181, 0,
	365, 219, 0, 247, 0, 78, 79, 72, 566, 564,
	491, 0, 0, 0, 593, -2, 591, 180, 0, 246,
	0, 0, 75, 521, 0, 524, 0, 248, 0, 233,
	522, 0, 0, 0, 198, 0, 0, 199, 200, 0,
	0, 523, 201, 0, 0, 0, 0, 0, 202, 204,
	205, 0, 0, 203, 249, 250, 206, 207, 208,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 75, 3, 3, 3, 102, 94, 3,
	54, 56, 99, 97, 55, 98, 112, 100, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 270,
	83, 82, 84, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 104, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 93, 3, 105,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	76, 77, 78, 79, 80, 81, 85, 86, 87, 88,
	89, 90, 91, 92, 95, 96, 101, 103, 106, 107,
	108, 109, 110, 111, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:317
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:322
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:323
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:327
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:349
		{
			setParseTree(yylex, nil)
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:355
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:363
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:367
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:373
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 28:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:380
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:386
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:390
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:396
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:400
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:407
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:419
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:431
		{
			yyVAL.str = InsertStr
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:435
		{
			yyVAL.str = ReplaceStr
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:441
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:447
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:451
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:455
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:460
		{
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:461
		{
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:465
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName.ToViewName()}
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:469
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName.ToViewName())
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:475
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:479
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:484
		{
			yyVAL.partitions = nil
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:488
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:494
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:498
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:502
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:506
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:512
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:516
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:522
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:526
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:530
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:536
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:540
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:544
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:548
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:554
		{
			yyVAL.str = SessionStr
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:558
		{
			yyVAL.str = GlobalStr
		}
	case 64:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:563
		{
			yyVAL.byt = 0
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:567
		{
			yyVAL.byt = 1
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:573
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:578
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 68:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:584
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 69:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:589
		{
			var orreplace bool = false
			if yyDollar[2].byt == 1 {
				orreplace = true
			}
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[4].tableName.ToViewName(), ViewExpr: yyDollar[6].selStmt, OrReplace: orreplace}
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:597
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:601
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:606
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:610
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:616
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:621
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:626
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:632
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:637
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:643
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:649
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName, IfNotExists: ne}
			setDDL(yylex, yyVAL.ddl)
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:660
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:667
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:671
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:677
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:682
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:686
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:690
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:696
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:702
		{
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:707
		{
			if yyDollar[1].columnType.sawnull {
				yylex.Error("cannot include NULL / NOT NULL more than once")
				return 1
			}
			yyDollar[1].columnType.NotNull = yyDollar[2].boolVal
			yyDollar[1].columnType.sawnull = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:717
		{
			if yyDollar[1].columnType.Default != nil {
				yylex.Error("cannot include DEFAULT more than once")
				return 1
			}
			yyDollar[1].columnType.Default = yyDollar[2].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:726
		{
			if yyDollar[1].columnType.OnUpdate != nil {
				yylex.Error("cannot include ON UPDATE more than once")
				return 1
			}
			yyDollar[1].columnType.OnUpdate = yyDollar[2].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:735
		{
			if yyDollar[1].columnType.sawai {
				yylex.Error("cannot include AUTO_INCREMENT more than once")
				return 1
			}
			yyDollar[1].columnType.Autoincrement = yyDollar[2].boolVal
			yyDollar[1].columnType.sawai = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:745
		{
			if yyDollar[1].columnType.KeyOpt != colKeyNone {
				yylex.Error("cannot include more than one key option for a column definition")
				return 1
			}
			yyDollar[1].columnType.KeyOpt = yyDollar[2].colKeyOpt
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:754
		{
			if yyDollar[1].columnType.Comment != nil {
				yylex.Error("cannot include more than one comment for a column definition")
				return 1
			}
			yyDollar[1].columnType.Comment = yyDollar[2].sqlVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:765
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:777
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:782
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:788
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:794
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:798
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:802
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:806
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:810
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:814
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:818
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:822
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:826
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:832
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:838
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:844
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:850
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:856
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:864
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:868
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:872
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:876
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:880
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:886
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:890
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:894
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:898
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:902
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:906
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:910
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:914
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:918
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:922
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:926
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:930
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:934
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:938
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 137:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:943
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:949
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:953
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:957
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:961
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:965
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:969
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:973
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:977
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:983
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:988
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:993
		{
			yyVAL.sqlVal = nil
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:997
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1002
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 151:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1006
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1014
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1018
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 154:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1024
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1032
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1036
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1041
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1045
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1052
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1056
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1062
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1068
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1074
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1079
		{
			yyVAL.str = ""
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1083
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1087
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1092
		{
			yyVAL.str = ""
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1096
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1100
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1106
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1110
		{
			yyVAL.colKeyOpt = colKey
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1114
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1118
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1124
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1130
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1134
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1140
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1144
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1150
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1154
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1159
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1165
		{
			yyVAL.str = ""
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1169
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1175
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1179
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1183
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1187
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1191
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1197
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1201
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1206
		{
			yyVAL.str = ""
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1210
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1216
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1220
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1226
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1232
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1236
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 198:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1243
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 199:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1247
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 200:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1251
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 201:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1255
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1261
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1267
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1273
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1277
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1281
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1285
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1289
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 209:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1294
		{
			yyVAL.str = ""
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1298
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1302
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1310
		{
			yyVAL.str = yyDollar[1].str
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1314
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1318
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1324
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1328
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1332
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 218:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1338
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 219:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1342
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			ddl.Column = yyDollar[8].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 220:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1349
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 221:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1356
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 222:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1360
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: DropStr, Column: NewColIdent(string(yyDollar[7].bytes)), Table: yyDollar[4].tableName}
		}
	case 223:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1364
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 224:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1368
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: RenameStr, Table: yyDollar[4].tableName, Column: NewColIdent(string(yyDollar[7].bytes)), ToColumn: NewColIdent(string(yyDollar[9].bytes))}
		}
	case 225:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1372
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 226:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1377
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 227:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1382
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 228:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1386
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 229:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1390
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[5].colIdent,
				Type:   yyDollar[6].colIdent,
				Params: yyDollar[7].vindexParams,
			}}
		}
	case 230:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1398
		{
			yyVAL.statement = &DDL{Action: DropVindexStr, VindexSpec: &VindexSpec{
				Name: yyDollar[5].colIdent,
			}}
		}
	case 231:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1404
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 232:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1408
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 233:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1412
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 234:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1425
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 235:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1436
		{
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1438
		{
		}
	case 246:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1453
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1459
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1463
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 249:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1469
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 250:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1473
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1479
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1485
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 253:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1489
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1497
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 255:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1505
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1510
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromViews: yyDollar[4].tableNames, IfExists: exists}
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1518
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1522
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1528
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1532
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1537
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1543
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1548
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1552
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1556
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1561
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1565
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1569
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1573
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1577
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1581
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1585
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1589
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1593
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1597
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1601
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1605
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1609
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1613
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1617
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 281:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1622
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1632
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1636
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1640
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1646
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1650
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1654
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1658
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1662
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1666
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1670
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1674
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1684
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1690
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1694
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1700
		{
			yyVAL.str = ""
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1704
		{
			yyVAL.str = "full "
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1710
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1714
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1720
		{
			yyVAL.str = ""
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1724
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1728
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1734
		{
			yyVAL.showFilter = nil
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1738
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1742
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1748
		{
			yyVAL.str = ""
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1752
		{
			yyVAL.str = SessionStr
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1756
		{
			yyVAL.str = GlobalStr
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1762
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1766
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1772
		{
			yyVAL.statement = &Begin{}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1776
		{
			yyVAL.statement = &Begin{}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1782
		{
			yyVAL.statement = &Commit{}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1788
		{
			yyVAL.statement = &Rollback{}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1794
		{
			yyVAL.statement = &OtherRead{}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1799
		{
			yyVAL.statement = &Show{Type: "columns", OnTable: yyDollar[2].tableName}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1803
		{
			yyVAL.statement = &OtherRead{}
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1807
		{
			yyVAL.statement = &OtherRead{}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1811
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1815
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1819
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1823
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1829
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1833
		{
			setAllowComments(yylex, true)
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1837
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1843
		{
			yyVAL.bytes2 = nil
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1847
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1853
		{
			yyVAL.str = UnionStr
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1857
		{
			yyVAL.str = UnionAllStr
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1861
		{
			yyVAL.str = UnionDistinctStr
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1866
		{
			yyVAL.str = ""
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1870
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1874
		{
			yyVAL.str = SQLCacheStr
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1879
		{
			yyVAL.str = ""
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1883
		{
			yyVAL.str = ""
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1887
		{
			yyVAL.str = DistinctStr
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1892
		{
			yyVAL.str = ""
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1896
		{
			yyVAL.str = StraightJoinHint
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1901
		{
			yyVAL.selectExprs = nil
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1905
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1911
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1915
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1921
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1925
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1929
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 346:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1933
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1938
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1942
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1946
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1953
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1958
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1962
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1968
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1972
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1982
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1986
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1990
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1996
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2002
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 363:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2006
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2012
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2016
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2022
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2026
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 368:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2039
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 369:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2043
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 370:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2047
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2051
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2057
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 373:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2059
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 374:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2063
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2065
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2069
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2071
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 378:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2074
		{
			yyVAL.empty = struct{}{}
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2076
		{
			yyVAL.empty = struct{}{}
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2079
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2083
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2087
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2094
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2100
		{
			yyVAL.str = JoinStr
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2104
		{
			yyVAL.str = JoinStr
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2108
		{
			yyVAL.str = JoinStr
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2114
		{
			yyVAL.str = StraightJoinStr
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2120
		{
			yyVAL.str = LeftJoinStr
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2124
		{
			yyVAL.str = LeftJoinStr
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2128
		{
			yyVAL.str = RightJoinStr
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2132
		{
			yyVAL.str = RightJoinStr
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2138
		{
			yyVAL.str = NaturalJoinStr
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2142
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2152
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2156
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2162
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2166
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2171
		{
			yyVAL.indexHints = nil
		}
	case 400:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2175
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 401:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2179
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 402:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2183
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 403:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2188
		{
			yyVAL.expr = nil
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2192
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2198
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2202
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2206
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2210
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2214
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2218
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2222
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2228
		{
			yyVAL.str = ""
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2232
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2238
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2242
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2248
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2252
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 418:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2256
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 419:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2260
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 420:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2264
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2268
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 422:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2272
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 423:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2276
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 424:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2280
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2284
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2290
		{
			yyVAL.str = IsNullStr
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2294
		{
			yyVAL.str = IsNotNullStr
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2298
		{
			yyVAL.str = IsTrueStr
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2302
		{
			yyVAL.str = IsNotTrueStr
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2306
		{
			yyVAL.str = IsFalseStr
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2310
		{
			yyVAL.str = IsNotFalseStr
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2316
		{
			yyVAL.str = EqualStr
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2320
		{
			yyVAL.str = LessThanStr
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2324
		{
			yyVAL.str = GreaterThanStr
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2328
		{
			yyVAL.str = LessEqualStr
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2332
		{
			yyVAL.str = GreaterEqualStr
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2336
		{
			yyVAL.str = NotEqualStr
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2340
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 439:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2345
		{
			yyVAL.expr = nil
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2349
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2355
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2359
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2363
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2369
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2375
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2379
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2385
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2389
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2393
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2397
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2401
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2405
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2409
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2413
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2417
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2421
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2425
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2429
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2433
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2437
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2441
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2445
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2449
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2453
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2457
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2461
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2465
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2469
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2473
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2477
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2485
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2499
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2503
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2507
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 479:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2525
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 480:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2529
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 481:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2533
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 482:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2543
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 483:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2547
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 484:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2551
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 485:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2555
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 486:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2559
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 487:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2563
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 488:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2567
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 489:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2571
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 490:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2575
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 491:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2579
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 492:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2583
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 493:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2587
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 494:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2591
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2601
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2605
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2609
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2614
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2619
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2624
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2630
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2635
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2640
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2644
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2648
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2653
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2658
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2663
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 509:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2667
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 510:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2671
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2681
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 514:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2691
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 515:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2695
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 516:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2699
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 517:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2703
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2707
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 519:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2711
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 520:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2717
		{
			yyVAL.str = ""
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2721
		{
			yyVAL.str = BooleanModeStr
		}
	case 522:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2725
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 523:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2729
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2733
		{
			yyVAL.str = QueryExpansionStr
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2739
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2743
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2749
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2753
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2757
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2761
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2765
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2769
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2775
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2779
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2783
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2787
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2791
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2795
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2799
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 540:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2804
		{
			yyVAL.expr = nil
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2808
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 542:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2813
		{
			yyVAL.str = string("")
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2817
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2823
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2827
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 546:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2833
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 547:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2838
		{
			yyVAL.expr = nil
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2842
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2848
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2852
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 551:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2856
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2862
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2866
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2870
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2874
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2878
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2882
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2886
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2890
		{
			yyVAL.expr = &NullVal{}
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2896
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2905
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2909
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 563:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2914
		{
			yyVAL.exprs = nil
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2918
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 565:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2923
		{
			yyVAL.expr = nil
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2927
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2932
		{
			yyVAL.orderBy = nil
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2936
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2942
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2946
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2952
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 572:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2957
		{
			yyVAL.str = AscScr
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2961
		{
			yyVAL.str = AscScr
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2965
		{
			yyVAL.str = DescScr
		}
	case 575:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2970
		{
			yyVAL.limit = nil
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2974
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 577:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2978
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 578:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2982
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 579:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2987
		{
			yyVAL.str = ""
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2991
		{
			yyVAL.str = ForUpdateStr
		}
	case 581:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2995
		{
			yyVAL.str = ShareModeStr
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3008
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3012
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3016
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 585:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3021
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 586:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3025
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 587:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3029
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3036
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3040
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3044
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 591:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3048
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3053
		{
			yyVAL.updateExprs = nil
		}
	case 593:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3057
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3063
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3067
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3073
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3077
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3083
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3089
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3099
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3103
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3109
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3115
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3119
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3125
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3129
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3133
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3137
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3144
		{
			yyVAL.bytes = []byte("charset")
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3151
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3155
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3159
		{
			yyVAL.expr = &Default{}
		}
	case 617:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3168
		{
			yyVAL.byt = 0
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3170
		{
			yyVAL.byt = 1
		}
	case 619:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3173
		{
			yyVAL.byt = 0
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3175
		{
			yyVAL.byt = 1
		}
	case 621:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3178
		{
			yyVAL.str = ""
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3180
		{
			yyVAL.str = IgnoreStr
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3184
		{
			yyVAL.empty = struct{}{}
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3186
		{
			yyVAL.empty = struct{}{}
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3188
		{
			yyVAL.empty = struct{}{}
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3190
		{
			yyVAL.empty = struct{}{}
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3192
		{
			yyVAL.empty = struct{}{}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3194
		{
			yyVAL.empty = struct{}{}
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3196
		{
			yyVAL.empty = struct{}{}
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3198
		{
			yyVAL.empty = struct{}{}
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3200
		{
			yyVAL.empty = struct{}{}
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3202
		{
			yyVAL.empty = struct{}{}
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3206
		{
			yyVAL.empty = struct{}{}
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3208
		{
			yyVAL.empty = struct{}{}
		}
	case 635:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3211
		{
			yyVAL.empty = struct{}{}
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3213
		{
			yyVAL.empty = struct{}{}
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3215
		{
			yyVAL.empty = struct{}{}
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3219
		{
			yyVAL.empty = struct{}{}
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3221
		{
			yyVAL.empty = struct{}{}
		}
	case 640:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3224
		{
			yyVAL.empty = struct{}{}
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3226
		{
			yyVAL.empty = struct{}{}
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3228
		{
			yyVAL.empty = struct{}{}
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3230
		{
			yyVAL.empty = struct{}{}
		}
	case 644:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3233
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 645:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3235
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3239
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3243
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3250
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3256
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3260
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3267
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3505
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3514
		{
			decNesting(yylex)
		}
	case 868:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3519
		{
			skipToEnd(yylex)
		}
	case 869:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3524
		{
			skipToEnd(yylex)
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3528
		{
			skipToEnd(yylex)
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3532
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
