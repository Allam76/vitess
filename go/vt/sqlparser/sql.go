// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func yyPosition(yylex interface{}) int {
	return yylex.(*Tokenizer).Position
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:57
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	int                   int
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	statements            Statements
	partitions            Partitions
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	joinCondition         JoinCondition
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	asOf                  *AsOf
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	sqlVal                *SQLVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	setExprs              SetExprs
	setExpr               *SetExpr
	colIdent              ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	TableSpec             *TableSpec
	columnType            ColumnType
	columnOrder           *ColumnOrder
	triggerOrder          *TriggerOrder
	colKeyOpt             ColumnKeyOption
	optVal                Expr
	LengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexInfo             *IndexInfo
	indexOption           *IndexOption
	indexOptions          []*IndexOption
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	constraintDefinition  *ConstraintDefinition
	constraintInfo        ConstraintInfo
	ReferenceAction       ReferenceAction
	partDefs              []*PartitionDefinition
	partDef               *PartitionDefinition
	partSpec              *PartitionSpec
	vindexParam           VindexParam
	vindexParams          []VindexParam
	showFilter            *ShowFilter
	optLike               *OptLike
	caseStatementCases    []CaseStatementCase
	caseStatementCase     CaseStatementCase
	ifStatementConditions []IfStatementCondition
	ifStatementCondition  IfStatementCondition
	signalInfo            SignalInfo
	signalInfos           []SignalInfo
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const UNLOCK = 57373
const KEYS = 57374
const UNIQUE = 57375
const KEY = 57376
const SYSTEM_TIME = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const INTEGRAL = 57401
const FLOAT = 57402
const HEXNUM = 57403
const VALUE_ARG = 57404
const LIST_ARG = 57405
const COMMENT = 57406
const COMMENT_KEYWORD = 57407
const BIT_LITERAL = 57408
const NULL = 57409
const TRUE = 57410
const FALSE = 57411
const OFF = 57412
const OR = 57413
const AND = 57414
const NOT = 57415
const BETWEEN = 57416
const CASE = 57417
const WHEN = 57418
const THEN = 57419
const ELSE = 57420
const ELSEIF = 57421
const END = 57422
const LE = 57423
const GE = 57424
const NE = 57425
const NULL_SAFE_EQUAL = 57426
const IS = 57427
const LIKE = 57428
const REGEXP = 57429
const IN = 57430
const SHIFT_LEFT = 57431
const SHIFT_RIGHT = 57432
const DIV = 57433
const MOD = 57434
const UNARY = 57435
const COLLATE = 57436
const BINARY = 57437
const UNDERSCORE_BINARY = 57438
const UNDERSCORE_UTF8MB4 = 57439
const INTERVAL = 57440
const JSON_EXTRACT_OP = 57441
const JSON_UNQUOTE_EXTRACT_OP = 57442
const CREATE = 57443
const ALTER = 57444
const DROP = 57445
const RENAME = 57446
const ANALYZE = 57447
const ADD = 57448
const FLUSH = 57449
const MODIFY = 57450
const CHANGE = 57451
const SCHEMA = 57452
const TABLE = 57453
const INDEX = 57454
const INDEXES = 57455
const VIEW = 57456
const TO = 57457
const IGNORE = 57458
const IF = 57459
const PRIMARY = 57460
const COLUMN = 57461
const SPATIAL = 57462
const FULLTEXT = 57463
const KEY_BLOCK_SIZE = 57464
const CHECK = 57465
const ACTION = 57466
const CASCADE = 57467
const CONSTRAINT = 57468
const FOREIGN = 57469
const NO = 57470
const REFERENCES = 57471
const RESTRICT = 57472
const FIRST = 57473
const AFTER = 57474
const SHOW = 57475
const DESCRIBE = 57476
const EXPLAIN = 57477
const DATE = 57478
const ESCAPE = 57479
const REPAIR = 57480
const OPTIMIZE = 57481
const TRUNCATE = 57482
const FORMAT = 57483
const MAXVALUE = 57484
const PARTITION = 57485
const REORGANIZE = 57486
const LESS = 57487
const THAN = 57488
const PROCEDURE = 57489
const TRIGGER = 57490
const TRIGGERS = 57491
const VINDEX = 57492
const VINDEXES = 57493
const STATUS = 57494
const VARIABLES = 57495
const WARNINGS = 57496
const SEQUENCE = 57497
const EACH = 57498
const ROW = 57499
const BEFORE = 57500
const FOLLOWS = 57501
const PRECEDES = 57502
const DEFINER = 57503
const CLASS_ORIGIN = 57504
const SUBCLASS_ORIGIN = 57505
const MESSAGE_TEXT = 57506
const MYSQL_ERRNO = 57507
const CONSTRAINT_CATALOG = 57508
const CONSTRAINT_SCHEMA = 57509
const CONSTRAINT_NAME = 57510
const CATALOG_NAME = 57511
const SCHEMA_NAME = 57512
const TABLE_NAME = 57513
const COLUMN_NAME = 57514
const CURSOR_NAME = 57515
const SIGNAL = 57516
const SQLSTATE = 57517
const BEGIN = 57518
const START = 57519
const TRANSACTION = 57520
const COMMIT = 57521
const ROLLBACK = 57522
const BIT = 57523
const TINYINT = 57524
const SMALLINT = 57525
const MEDIUMINT = 57526
const INT = 57527
const INTEGER = 57528
const BIGINT = 57529
const INTNUM = 57530
const REAL = 57531
const DOUBLE = 57532
const FLOAT_TYPE = 57533
const DECIMAL = 57534
const NUMERIC = 57535
const DEC = 57536
const FIXED = 57537
const PRECISION = 57538
const TIME = 57539
const TIMESTAMP = 57540
const DATETIME = 57541
const YEAR = 57542
const CHAR = 57543
const VARCHAR = 57544
const BOOL = 57545
const CHARACTER = 57546
const VARBINARY = 57547
const NCHAR = 57548
const NVARCHAR = 57549
const NATIONAL = 57550
const VARYING = 57551
const TEXT = 57552
const TINYTEXT = 57553
const MEDIUMTEXT = 57554
const LONGTEXT = 57555
const LONG = 57556
const BLOB = 57557
const TINYBLOB = 57558
const MEDIUMBLOB = 57559
const LONGBLOB = 57560
const JSON = 57561
const ENUM = 57562
const GEOMETRY = 57563
const POINT = 57564
const LINESTRING = 57565
const POLYGON = 57566
const GEOMETRYCOLLECTION = 57567
const MULTIPOINT = 57568
const MULTILINESTRING = 57569
const MULTIPOLYGON = 57570
const NULLX = 57571
const AUTO_INCREMENT = 57572
const APPROXNUM = 57573
const SIGNED = 57574
const UNSIGNED = 57575
const ZEROFILL = 57576
const COLLATION = 57577
const DATABASES = 57578
const SCHEMAS = 57579
const TABLES = 57580
const VITESS_METADATA = 57581
const VSCHEMA = 57582
const FULL = 57583
const PROCESSLIST = 57584
const COLUMNS = 57585
const FIELDS = 57586
const ENGINES = 57587
const PLUGINS = 57588
const NAMES = 57589
const CHARSET = 57590
const GLOBAL = 57591
const SESSION = 57592
const ISOLATION = 57593
const LEVEL = 57594
const READ = 57595
const WRITE = 57596
const ONLY = 57597
const REPEATABLE = 57598
const COMMITTED = 57599
const UNCOMMITTED = 57600
const SERIALIZABLE = 57601
const CURRENT_TIMESTAMP = 57602
const DATABASE = 57603
const CURRENT_DATE = 57604
const CURRENT_USER = 57605
const CURRENT_TIME = 57606
const LOCALTIME = 57607
const LOCALTIMESTAMP = 57608
const UTC_DATE = 57609
const UTC_TIME = 57610
const UTC_TIMESTAMP = 57611
const REPLACE = 57612
const CONVERT = 57613
const CAST = 57614
const SUBSTR = 57615
const SUBSTRING = 57616
const GROUP_CONCAT = 57617
const SEPARATOR = 57618
const TIMESTAMPADD = 57619
const TIMESTAMPDIFF = 57620
const MATCH = 57621
const AGAINST = 57622
const BOOLEAN = 57623
const LANGUAGE = 57624
const WITH = 57625
const QUERY = 57626
const EXPANSION = 57627
const UNUSED = 57628
const ARRAY = 57629
const CUME_DIST = 57630
const DESCRIPTION = 57631
const DENSE_RANK = 57632
const EMPTY = 57633
const EXCEPT = 57634
const FIRST_VALUE = 57635
const GROUPING = 57636
const GROUPS = 57637
const JSON_TABLE = 57638
const LAG = 57639
const LAST_VALUE = 57640
const LATERAL = 57641
const LEAD = 57642
const MEMBER = 57643
const NTH_VALUE = 57644
const NTILE = 57645
const OF = 57646
const OVER = 57647
const PERCENT_RANK = 57648
const RANK = 57649
const RECURSIVE = 57650
const ROW_NUMBER = 57651
const SYSTEM = 57652
const WINDOW = 57653
const ACTIVE = 57654
const ADMIN = 57655
const BUCKETS = 57656
const CLONE = 57657
const COMPONENT = 57658
const DEFINITION = 57659
const ENFORCED = 57660
const EXCLUDE = 57661
const FOLLOWING = 57662
const GEOMCOLLECTION = 57663
const GET_MASTER_PUBLIC_KEY = 57664
const HISTOGRAM = 57665
const HISTORY = 57666
const INACTIVE = 57667
const INVISIBLE = 57668
const LOCKED = 57669
const MASTER_COMPRESSION_ALGORITHMS = 57670
const MASTER_PUBLIC_KEY_PATH = 57671
const MASTER_TLS_CIPHERSUITES = 57672
const MASTER_ZSTD_COMPRESSION_LEVEL = 57673
const NESTED = 57674
const NETWORK_NAMESPACE = 57675
const NOWAIT = 57676
const NULLS = 57677
const OJ = 57678
const OLD = 57679
const OPTIONAL = 57680
const ORDINALITY = 57681
const ORGANIZATION = 57682
const OTHERS = 57683
const PATH = 57684
const PERSIST = 57685
const PERSIST_ONLY = 57686
const PRECEDING = 57687
const PRIVILEGE_CHECKS_USER = 57688
const PROCESS = 57689
const RANDOM = 57690
const REFERENCE = 57691
const REQUIRE_ROW_FORMAT = 57692
const RESOURCE = 57693
const RESPECT = 57694
const RESTART = 57695
const RETAIN = 57696
const REUSE = 57697
const ROLE = 57698
const SECONDARY = 57699
const SECONDARY_ENGINE = 57700
const SECONDARY_LOAD = 57701
const SECONDARY_UNLOAD = 57702
const SKIP = 57703
const SRID = 57704
const THREAD_PRIORITY = 57705
const TIES = 57706
const UNBOUNDED = 57707
const VCPU = 57708
const VISIBLE = 57709

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"UNIQUE",
	"KEY",
	"SYSTEM_TIME",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"ELSEIF",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"MODIFY",
	"CHANGE",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"INDEXES",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"FIRST",
	"AFTER",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"FORMAT",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TRIGGERS",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"EACH",
	"ROW",
	"BEFORE",
	"FOLLOWS",
	"PRECEDES",
	"DEFINER",
	"CLASS_ORIGIN",
	"SUBCLASS_ORIGIN",
	"MESSAGE_TEXT",
	"MYSQL_ERRNO",
	"CONSTRAINT_CATALOG",
	"CONSTRAINT_SCHEMA",
	"CONSTRAINT_NAME",
	"CATALOG_NAME",
	"SCHEMA_NAME",
	"TABLE_NAME",
	"COLUMN_NAME",
	"CURSOR_NAME",
	"SIGNAL",
	"SQLSTATE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DEC",
	"FIXED",
	"PRECISION",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NATIONAL",
	"VARYING",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"LONG",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 32,
	-2, 4,
	-1, 34,
	165, 79,
	-2, 761,
	-1, 42,
	169, 413,
	170, 413,
	-2, 401,
	-1, 49,
	1, 1079,
	385, 1079,
	-2, 432,
	-1, 354,
	115, 769,
	-2, 765,
	-1, 355,
	115, 770,
	-2, 766,
	-1, 426,
	85, 1031,
	115, 1031,
	-2, 68,
	-1, 427,
	85, 945,
	115, 945,
	-2, 69,
	-1, 432,
	85, 908,
	115, 908,
	-2, 730,
	-1, 434,
	85, 977,
	115, 977,
	-2, 732,
	-1, 621,
	5, 32,
	-2, 426,
	-1, 625,
	5, 32,
	-2, 425,
	-1, 756,
	1, 477,
	5, 477,
	12, 477,
	13, 477,
	14, 477,
	15, 477,
	17, 477,
	19, 477,
	29, 477,
	30, 477,
	44, 477,
	45, 477,
	46, 477,
	47, 477,
	48, 477,
	50, 477,
	51, 477,
	54, 477,
	55, 477,
	57, 477,
	58, 477,
	385, 477,
	-2, 502,
	-1, 759,
	55, 49,
	57, 49,
	-2, 53,
	-1, 940,
	115, 772,
	-2, 768,
	-1, 1148,
	56, 343,
	59, 343,
	-2, 307,
	-1, 1197,
	5, 33,
	-2, 566,
	-1, 1228,
	5, 32,
	-2, 707,
	-1, 1321,
	5, 32,
	-2, 70,
	-1, 1434,
	1, 521,
	5, 521,
	12, 521,
	13, 521,
	14, 521,
	15, 521,
	17, 521,
	19, 521,
	29, 521,
	30, 521,
	44, 521,
	45, 521,
	46, 521,
	47, 521,
	48, 521,
	50, 521,
	51, 521,
	54, 521,
	55, 521,
	57, 521,
	58, 521,
	385, 521,
	-2, 502,
	-1, 1536,
	5, 33,
	-2, 708,
	-1, 1566,
	5, 32,
	-2, 70,
	-1, 1604,
	5, 32,
	-2, 710,
	-1, 1689,
	5, 33,
	-2, 711,
	-1, 1739,
	385, 128,
	-2, 32,
}

const yyPrivate = 57344

const yyLast = 17929

var yyAct = [...]int{

	386, 56, 1738, 1794, 1772, 1763, 1733, 1500, 1734, 1693,
	1677, 1747, 1116, 1370, 1743, 8, 1742, 7, 1618, 1737,
	1447, 1741, 6, 1740, 5, 709, 1584, 1114, 1367, 355,
	385, 1414, 1569, 1276, 1027, 1448, 916, 422, 1029, 1052,
	1058, 1694, 1025, 1549, 1067, 1415, 1411, 333, 372, 66,
	437, 1138, 1071, 1021, 1057, 1023, 1425, 56, 88, 1421,
	1108, 1254, 1387, 1001, 965, 1344, 978, 887, 465, 338,
	104, 1141, 1064, 104, 876, 359, 1345, 640, 772, 104,
	1104, 1313, 1012, 993, 942, 357, 771, 469, 646, 425,
	860, 1005, 996, 342, 661, 753, 652, 761, 417, 1814,
	752, 1810, 1805, 443, 725, 104, 1797, 1789, 420, 1788,
	104, 1758, 104, 65, 1739, 3, 348, 726, 1337, 1751,
	1704, 1732, 1002, 104, 1687, 455, 1721, 70, 1501, 1703,
	104, 1404, 1686, 320, 1528, 442, 1443, 1444, 1442, 346,
	1092, 773, 1159, 774, 27, 1046, 57, 30, 31, 1047,
	1048, 330, 428, 332, 324, 1158, 72, 73, 74, 75,
	76, 399, 592, 405, 407, 406, 403, 404, 402, 401,
	400, 328, 98, 94, 95, 323, 96, 608, 408, 409,
	467, 57, 30, 31, 321, 322, 1163, 1263, 325, 445,
	1262, 447, 618, 1264, 63, 1157, 1296, 1078, 1372, 1591,
	1093, 1080, 32, 1080, 1084, 1086, 1098, 1085, 1093, 1519,
	99, 1517, 1654, 674, 673, 683, 684, 676, 677, 678,
	679, 680, 681, 682, 675, 315, 327, 685, 1707, 1708,
	591, 594, 1695, 1123, 596, 1671, 907, 603, 604, 27,
	616, 57, 30, 31, 1388, 1374, 1155, 1149, 1150, 904,
	1148, 906, 1151, 1152, 446, 1731, 1720, 1678, 361, 1122,
	1369, 1105, 32, 317, 1006, 1669, 611, 593, 595, 1777,
	612, 609, 610, 1570, 1571, 1072, 1815, 331, 1373, 617,
	908, 1619, 1349, 1812, 1806, 1798, 1390, 1161, 1164, 63,
	905, 1030, 1032, 466, 1621, 466, 466, 444, 452, 318,
	466, 332, 466, 1579, 1327, 634, 851, 843, 466, 1253,
	1252, 1251, 1748, 1578, 440, 90, 289, 56, 56, 104,
	93, 1661, 455, 97, 455, 455, 1539, 1074, 1207, 455,
	1204, 455, 1074, 622, 697, 698, 1042, 455, 624, 56,
	623, 1171, 1392, 90, 1170, 1267, 1259, 1396, 1156, 1391,
	1186, 1389, 1277, 914, 694, 780, 1394, 696, 767, 665,
	104, 1093, 461, 597, 598, 1620, 1729, 1749, 602, 1393,
	605, 1303, 1031, 1083, 1154, 1053, 619, 1466, 455, 1685,
	685, 590, 1395, 1397, 83, 707, 648, 711, 712, 713,
	714, 715, 716, 717, 718, 719, 720, 721, 877, 724,
	727, 727, 727, 733, 727, 727, 733, 727, 733, 742,
	743, 744, 745, 746, 747, 1160, 757, 1655, 1107, 92,
	91, 632, 1073, 1577, 55, 58, 1729, 1073, 883, 1467,
	1162, 621, 625, 697, 698, 697, 698, 85, 87, 1767,
	675, 82, 911, 685, 104, 104, 104, 92, 91, 1070,
	1074, 643, 647, 649, 659, 658, 1131, 627, 628, 455,
	58, 769, 639, 600, 466, 466, 104, 650, 666, 660,
	455, 751, 660, 1364, 1368, 438, 1643, 104, 658, 438,
	1074, 104, 878, 1146, 775, 1074, 104, 626, 89, 448,
	79, 104, 994, 455, 455, 660, 352, 1406, 1140, 428,
	1804, 708, 994, 710, 1215, 728, 730, 732, 734, 736,
	738, 739, 741, 436, 723, 760, 765, 1785, 729, 731,
	58, 735, 737, 845, 740, 1454, 636, 80, 637, 613,
	655, 638, 863, 864, 1691, 27, 1288, 57, 30, 31,
	1132, 1293, 1292, 1564, 1773, 1073, 1781, 601, 1780, 862,
	852, 1068, 1765, 1069, 1563, 1766, 329, 1764, 32, 1066,
	1072, 1318, 1289, 889, 890, 891, 892, 893, 894, 895,
	896, 897, 898, 899, 900, 1073, 1294, 1778, 1286, 1139,
	1073, 1353, 1349, 1363, 1287, 63, 1350, 1360, 84, 1357,
	1359, 451, 1316, 466, 466, 678, 679, 680, 681, 682,
	675, 949, 25, 685, 466, 466, 1354, 1297, 1748, 1718,
	615, 1792, 1795, 1791, 1203, 695, 947, 948, 946, 1779,
	659, 658, 455, 455, 104, 104, 104, 1808, 1668, 104,
	414, 415, 63, 455, 455, 1598, 466, 27, 660, 57,
	30, 31, 945, 1291, 674, 673, 683, 684, 676, 677,
	678, 679, 680, 681, 682, 675, 917, 918, 685, 1561,
	32, 867, 868, 1749, 104, 455, 659, 658, 966, 104,
	967, 337, 873, 874, 756, 676, 677, 678, 679, 680,
	681, 682, 675, 879, 660, 685, 104, 63, 456, 457,
	458, 459, 455, 913, 865, 866, 919, 56, 1202, 943,
	1201, 1265, 1142, 1266, 903, 1459, 659, 658, 659, 658,
	1748, 631, 711, 1338, 1773, 1813, 1717, 659, 658, 1314,
	55, 1143, 1729, 901, 660, 1666, 660, 659, 658, 1637,
	880, 633, 912, 630, 1787, 660, 455, 1801, 1795, 1800,
	1482, 1277, 920, 438, 921, 660, 932, 934, 935, 659,
	658, 923, 933, 940, 1634, 1290, 938, 936, 1024, 1613,
	1722, 1632, 757, 659, 658, 1749, 757, 660, 1555, 1719,
	1774, 1628, 455, 455, 924, 929, 930, 925, 438, 104,
	1575, 660, 1503, 969, 970, 1699, 633, 104, 104, 1555,
	1696, 104, 104, 983, 986, 104, 104, 104, 1613, 1681,
	995, 973, 975, 1497, 972, 1555, 1670, 980, 1183, 1184,
	1185, 708, 455, 659, 658, 1493, 58, 1037, 991, 1490,
	1408, 1039, 55, 1488, 1729, 1487, 976, 1334, 710, 1613,
	1662, 660, 981, 982, 1062, 977, 979, 1613, 1624, 1627,
	985, 988, 989, 990, 428, 466, 939, 466, 1613, 633,
	1460, 1035, 1555, 1554, 1075, 862, 1074, 1044, 1043, 699,
	700, 701, 702, 703, 704, 705, 706, 1000, 940, 1003,
	1004, 1055, 708, 104, 455, 1040, 455, 1541, 633, 1432,
	104, 104, 1333, 1272, 104, 375, 374, 377, 378, 379,
	380, 1129, 1051, 1128, 376, 381, 1538, 633, 1110, 1111,
	1112, 1113, 1474, 1473, 63, 104, 968, 104, 104, 1470,
	1471, 1470, 1469, 1118, 104, 1120, 1106, 885, 58, 1014,
	1017, 1018, 1019, 1015, 859, 1016, 1020, 944, 768, 1426,
	1427, 1009, 633, 974, 104, 104, 104, 104, 104, 858,
	1187, 857, 1094, 1095, 1096, 1097, 633, 1198, 633, 974,
	633, 1073, 849, 847, 846, 844, 463, 1353, 1349, 783,
	782, 1054, 1350, 1059, 1534, 1351, 1352, 683, 684, 676,
	677, 678, 679, 680, 681, 682, 675, 943, 27, 685,
	1412, 1255, 1354, 768, 674, 673, 683, 684, 676, 677,
	678, 679, 680, 681, 682, 675, 67, 1176, 685, 1255,
	27, 1226, 940, 1642, 1175, 1055, 1229, 1230, 1227, 763,
	757, 757, 757, 757, 757, 1036, 756, 762, 27, 763,
	756, 1009, 1192, 1472, 756, 1024, 1009, 1247, 63, 1173,
	1174, 1188, 647, 1378, 1008, 1268, 1195, 757, 1198, 104,
	104, 104, 104, 104, 768, 1045, 1231, 1198, 1603, 1182,
	63, 104, 1220, 764, 104, 766, 1219, 1145, 104, 1127,
	762, 1194, 1009, 764, 1250, 762, 104, 1249, 63, 1197,
	1199, 915, 1200, 850, 1705, 339, 1214, 1697, 1206, 1198,
	1635, 1209, 1210, 1211, 428, 1586, 1565, 455, 1217, 1080,
	1218, 1196, 1256, 1221, 1222, 939, 1223, 1224, 1269, 1257,
	1544, 1258, 1109, 1244, 1453, 1278, 1233, 1234, 1105, 1236,
	1232, 1216, 881, 1235, 1212, 1271, 1246, 56, 1426, 1427,
	1228, 1100, 1274, 1275, 1260, 63, 1099, 466, 1371, 466,
	466, 1115, 1306, 1587, 1308, 1309, 1310, 1311, 1755, 976,
	1014, 1017, 1018, 1019, 1015, 455, 1016, 1020, 1753, 1735,
	927, 1478, 1429, 1412, 1319, 884, 455, 104, 455, 455,
	854, 1241, 1431, 1238, 941, 1237, 1242, 950, 951, 952,
	953, 954, 955, 956, 957, 958, 959, 960, 961, 962,
	963, 964, 1315, 1714, 1239, 1702, 1336, 1375, 1317, 1240,
	1172, 1079, 1332, 343, 344, 1328, 1712, 1330, 1331, 1181,
	1180, 1346, 1358, 1362, 1601, 944, 1492, 104, 1335, 1243,
	1279, 1018, 1019, 1341, 1458, 1355, 455, 1365, 1366, 653,
	654, 1348, 1298, 1299, 997, 1457, 1356, 1273, 1417, 1305,
	56, 1321, 1342, 641, 1307, 781, 629, 651, 1059, 1312,
	464, 1119, 1532, 1582, 642, 917, 918, 853, 1322, 653,
	654, 1381, 1436, 1437, 1438, 1135, 1022, 1339, 1416, 455,
	455, 1382, 1405, 842, 1413, 1386, 1399, 1398, 756, 756,
	756, 756, 756, 340, 341, 1631, 334, 455, 1179, 1648,
	335, 1343, 1647, 756, 1435, 67, 1178, 1589, 1385, 1255,
	1757, 1756, 1430, 1423, 1208, 756, 1205, 455, 455, 875,
	455, 455, 428, 656, 1439, 1756, 1757, 1433, 1451, 1452,
	1658, 1446, 1324, 1325, 1326, 1456, 910, 1450, 1441, 69,
	1746, 24, 71, 1445, 48, 64, 1, 1347, 1502, 1583,
	1153, 1676, 1407, 1065, 1476, 1477, 1056, 78, 1461, 1462,
	435, 77, 1130, 1022, 1418, 1465, 599, 1573, 297, 104,
	1063, 1284, 1468, 1283, 1280, 1295, 1077, 104, 1282, 1281,
	1285, 789, 787, 788, 786, 791, 790, 1380, 1076, 785,
	300, 423, 1440, 1030, 1032, 384, 776, 657, 86, 757,
	1485, 49, 1576, 1361, 1147, 81, 882, 1480, 455, 606,
	607, 104, 455, 302, 693, 1483, 1177, 1261, 429, 455,
	1419, 1706, 455, 455, 455, 1526, 1486, 645, 104, 1646,
	1588, 1213, 722, 992, 360, 931, 1496, 674, 673, 683,
	684, 676, 677, 678, 679, 680, 681, 682, 675, 373,
	370, 685, 371, 1134, 1508, 922, 1225, 667, 358, 1507,
	350, 1463, 755, 748, 1189, 1190, 1191, 1013, 1380, 1059,
	1011, 1059, 430, 1515, 1031, 1010, 855, 418, 1428, 1424,
	1533, 754, 1377, 614, 316, 1527, 455, 455, 455, 1547,
	1653, 453, 1525, 1542, 1509, 455, 926, 29, 56, 1484,
	1511, 1551, 1552, 455, 1498, 68, 1269, 1553, 1548, 345,
	1489, 1520, 1521, 19, 18, 17, 620, 1557, 20, 21,
	22, 16, 15, 1559, 14, 1558, 449, 33, 104, 37,
	1535, 1536, 1537, 1572, 1540, 36, 35, 10, 1323, 1121,
	326, 888, 886, 1793, 1771, 1529, 1546, 1745, 1744, 1580,
	23, 455, 1450, 1568, 710, 1417, 13, 12, 1605, 1574,
	11, 9, 1723, 1543, 4, 336, 1545, 26, 1581, 674,
	673, 683, 684, 676, 677, 678, 679, 680, 681, 682,
	675, 2, 0, 685, 0, 1416, 0, 0, 455, 455,
	0, 455, 0, 0, 455, 0, 104, 0, 104, 1630,
	1602, 0, 0, 1641, 0, 455, 1629, 1612, 1610, 1611,
	1609, 1622, 1566, 1623, 0, 455, 1617, 0, 0, 0,
	1625, 0, 1626, 0, 1417, 0, 56, 1636, 0, 455,
	1560, 0, 1562, 0, 1640, 0, 455, 104, 0, 0,
	1597, 0, 0, 0, 0, 0, 1059, 0, 0, 0,
	1644, 0, 0, 0, 1416, 1659, 1665, 756, 0, 1340,
	0, 0, 1614, 455, 1615, 1616, 0, 1663, 0, 1667,
	0, 0, 1604, 0, 1590, 0, 1673, 0, 0, 0,
	0, 0, 0, 0, 1674, 455, 0, 0, 468, 1679,
	468, 468, 455, 455, 1683, 468, 0, 468, 0, 0,
	0, 0, 1585, 468, 1680, 1649, 1650, 1651, 1652, 0,
	1384, 455, 1656, 1657, 0, 1701, 1688, 0, 0, 104,
	0, 1400, 1401, 1633, 1402, 1403, 1709, 0, 455, 1713,
	1711, 0, 0, 1665, 1639, 0, 1409, 1410, 1710, 1716,
	1660, 0, 0, 0, 663, 0, 0, 455, 1724, 1730,
	56, 1725, 1750, 1728, 428, 455, 1736, 0, 1727, 0,
	1726, 1754, 1752, 0, 0, 1434, 1684, 0, 0, 1715,
	0, 0, 0, 1689, 0, 0, 0, 0, 0, 56,
	0, 1770, 0, 1768, 1682, 710, 1672, 0, 0, 1698,
	0, 0, 0, 0, 1675, 56, 1782, 0, 0, 0,
	0, 758, 56, 0, 0, 1455, 0, 0, 56, 56,
	56, 1770, 1770, 56, 1784, 0, 0, 1802, 56, 430,
	1770, 1786, 56, 0, 0, 777, 56, 1790, 1770, 56,
	0, 56, 1799, 1770, 0, 56, 841, 1770, 0, 0,
	0, 1807, 101, 1585, 1059, 0, 0, 0, 1811, 0,
	0, 319, 0, 0, 1481, 0, 0, 0, 0, 468,
	468, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	644, 0, 0, 0, 1775, 1776, 0, 419, 0, 0,
	0, 0, 439, 0, 441, 1759, 1760, 0, 0, 27,
	0, 57, 30, 31, 0, 450, 0, 0, 0, 0,
	1510, 0, 460, 0, 0, 27, 0, 57, 30, 31,
	1783, 102, 32, 0, 314, 0, 0, 0, 0, 0,
	102, 0, 0, 0, 0, 0, 0, 0, 32, 0,
	0, 0, 1803, 0, 0, 0, 0, 0, 0, 63,
	0, 0, 0, 349, 0, 0, 421, 431, 0, 0,
	0, 102, 0, 102, 0, 63, 0, 0, 0, 0,
	0, 0, 1748, 0, 102, 0, 0, 1809, 0, 0,
	0, 102, 0, 0, 0, 0, 0, 0, 1748, 0,
	0, 0, 0, 1796, 0, 0, 0, 0, 468, 468,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 468,
	468, 0, 0, 0, 1081, 1082, 0, 1087, 1088, 1089,
	1090, 1091, 0, 0, 0, 0, 0, 1749, 0, 0,
	0, 0, 0, 0, 0, 1101, 1102, 1103, 0, 0,
	0, 468, 0, 1749, 0, 0, 0, 0, 0, 1592,
	1593, 1594, 1595, 1596, 0, 0, 0, 1599, 1600, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 663, 0,
	0, 468, 0, 0, 0, 0, 0, 0, 1531, 0,
	0, 0, 0, 0, 55, 0, 1729, 0, 0, 0,
	0, 27, 28, 57, 30, 31, 0, 0, 0, 0,
	55, 462, 1729, 0, 0, 0, 0, 0, 0, 0,
	62, 1530, 971, 0, 32, 52, 53, 674, 673, 683,
	684, 676, 677, 678, 679, 680, 681, 682, 675, 0,
	430, 685, 0, 0, 0, 0, 0, 43, 0, 0,
	0, 63, 635, 0, 0, 0, 0, 0, 998, 999,
	674, 673, 683, 684, 676, 677, 678, 679, 680, 681,
	682, 675, 0, 0, 685, 0, 0, 0, 0, 0,
	102, 0, 0, 0, 430, 811, 0, 0, 0, 0,
	58, 0, 0, 0, 0, 0, 468, 0, 468, 0,
	0, 0, 0, 0, 0, 0, 58, 0, 0, 0,
	0, 0, 0, 34, 59, 39, 38, 41, 0, 54,
	27, 102, 57, 30, 31, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 750, 0, 759, 0,
	0, 0, 0, 32, 0, 42, 61, 60, 0, 0,
	50, 51, 40, 0, 0, 0, 0, 0, 784, 0,
	468, 0, 468, 0, 0, 0, 0, 798, 0, 848,
	63, 0, 0, 419, 0, 0, 0, 0, 856, 0,
	0, 0, 0, 0, 0, 0, 55, 1761, 44, 45,
	0, 46, 47, 1748, 0, 0, 0, 0, 1769, 0,
	0, 0, 0, 0, 0, 102, 102, 102, 0, 812,
	0, 0, 0, 0, 431, 1300, 1301, 1302, 1304, 0,
	0, 0, 0, 0, 0, 0, 0, 102, 0, 0,
	468, 0, 0, 0, 0, 0, 0, 0, 102, 0,
	0, 0, 102, 0, 0, 0, 0, 102, 1749, 1524,
	0, 0, 861, 0, 825, 828, 829, 830, 831, 832,
	833, 0, 834, 835, 836, 837, 838, 839, 840, 0,
	813, 814, 815, 816, 792, 796, 826, 793, 799, 795,
	797, 794, 58, 800, 801, 802, 803, 804, 805, 806,
	807, 808, 809, 810, 817, 818, 819, 820, 821, 822,
	823, 824, 0, 0, 0, 55, 0, 1729, 0, 0,
	0, 0, 0, 0, 0, 0, 869, 870, 871, 0,
	1383, 872, 0, 0, 430, 0, 674, 673, 683, 684,
	676, 677, 678, 679, 680, 681, 682, 675, 0, 0,
	685, 674, 673, 683, 684, 676, 677, 678, 679, 680,
	681, 682, 675, 0, 827, 685, 902, 0, 0, 0,
	0, 909, 673, 683, 684, 676, 677, 678, 679, 680,
	681, 682, 675, 468, 0, 685, 0, 0, 928, 0,
	0, 1523, 0, 0, 0, 102, 102, 102, 0, 0,
	102, 0, 0, 669, 0, 672, 0, 0, 0, 0,
	0, 58, 686, 687, 688, 689, 690, 691, 692, 1522,
	670, 671, 668, 674, 673, 683, 684, 676, 677, 678,
	679, 680, 681, 682, 675, 102, 0, 685, 0, 0,
	102, 1320, 0, 0, 0, 1464, 0, 0, 0, 0,
	0, 0, 468, 0, 468, 468, 0, 102, 0, 0,
	0, 0, 0, 0, 0, 0, 861, 0, 674, 673,
	683, 684, 676, 677, 678, 679, 680, 681, 682, 675,
	0, 1007, 685, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1038, 0, 674, 673, 683, 684,
	676, 677, 678, 679, 680, 681, 682, 675, 0, 0,
	685, 0, 468, 349, 349, 0, 0, 0, 349, 349,
	349, 349, 310, 0, 0, 431, 0, 0, 0, 0,
	1512, 1513, 0, 1514, 0, 0, 1516, 0, 1518, 0,
	0, 0, 0, 0, 0, 349, 349, 349, 349, 307,
	102, 0, 430, 0, 0, 1420, 1422, 0, 102, 1033,
	0, 0, 102, 102, 0, 0, 102, 1041, 861, 431,
	0, 0, 0, 1422, 0, 1117, 0, 0, 0, 0,
	0, 861, 1124, 1125, 0, 0, 1126, 0, 0, 0,
	0, 1556, 0, 468, 468, 0, 468, 1449, 0, 0,
	1193, 290, 0, 0, 0, 0, 0, 1133, 293, 0,
	0, 0, 0, 0, 0, 0, 1144, 0, 301, 308,
	309, 674, 673, 683, 684, 676, 677, 678, 679, 680,
	681, 682, 675, 0, 0, 685, 1165, 1166, 1167, 1168,
	1169, 0, 0, 0, 102, 0, 0, 0, 0, 0,
	0, 102, 102, 0, 299, 102, 0, 0, 0, 0,
	0, 306, 0, 674, 673, 683, 684, 676, 677, 678,
	679, 680, 681, 682, 675, 0, 102, 685, 1136, 1137,
	0, 0, 0, 0, 1491, 102, 0, 0, 1495, 0,
	0, 0, 0, 0, 0, 1499, 0, 0, 1504, 1505,
	1506, 0, 0, 0, 0, 102, 102, 102, 102, 102,
	0, 291, 0, 0, 0, 861, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 349, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 303, 294, 295, 0, 304, 305, 313, 0,
	0, 0, 296, 298, 0, 292, 312, 311, 0, 0,
	0, 0, 1550, 1550, 1550, 0, 0, 0, 0, 0,
	0, 468, 0, 349, 0, 0, 0, 0, 0, 1550,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 349, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 431,
	102, 102, 102, 102, 102, 0, 0, 0, 0, 0,
	0, 0, 1245, 0, 0, 102, 0, 468, 0, 1033,
	0, 0, 0, 0, 0, 0, 0, 102, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1329,
	0, 0, 0, 0, 1606, 1607, 0, 1608, 0, 0,
	1550, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1449, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1449, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1638, 0, 0, 0, 1376,
	0, 0, 1550, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 102, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1664,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1449, 0, 0, 0, 0, 0, 0, 468, 468,
	0, 0, 0, 0, 0, 0, 0, 0, 102, 0,
	0, 0, 0, 0, 430, 0, 0, 1690, 349, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 349,
	0, 0, 0, 0, 1700, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1449, 0, 0, 0, 431, 0, 0,
	0, 1550, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1475, 0, 0, 0, 0, 0, 0, 0, 1479,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	102, 0, 0, 0, 0, 0, 0, 0, 102, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1567, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1645,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1033, 0, 1033,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 102, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1692, 0, 0, 0, 0, 577, 565, 0, 522,
	580, 494, 512, 588, 513, 516, 553, 479, 535, 197,
	510, 0, 498, 474, 505, 475, 496, 524, 141, 493,
	567, 538, 579, 166, 578, 528, 0, 586, 169, 544,
	0, 244, 184, 0, 0, 526, 569, 533, 562, 521,
	554, 484, 543, 581, 511, 551, 582, 0, 0, 431,
	454, 0, 1060, 1061, 0, 0, 0, 0, 0, 127,
	102, 548, 576, 507, 550, 552, 473, 545, 0, 477,
	480, 587, 572, 501, 502, 503, 1270, 0, 0, 0,
	0, 0, 0, 525, 534, 559, 519, 0, 0, 0,
	0, 0, 0, 0, 0, 499, 0, 542, 0, 0,
	0, 481, 478, 0, 0, 523, 0, 0, 0, 483,
	0, 500, 560, 0, 470, 149, 0, 0, 564, 571,
	520, 0, 278, 575, 518, 517, 214, 0, 249, 152,
	167, 121, 106, 116, 0, 151, 193, 223, 231, 508,
	471, 568, 497, 506, 135, 504, 225, 201, 269, 0,
	541, 206, 224, 170, 258, 216, 267, 268, 279, 280,
	253, 276, 284, 241, 0, 0, 0, 0, 0, 0,
	122, 254, 183, 188, 131, 133, 132, 117, 236, 256,
	126, 134, 245, 250, 109, 252, 266, 128, 235, 111,
	264, 248, 181, 161, 162, 110, 0, 221, 140, 148,
	137, 196, 0, 0, 0, 261, 262, 136, 287, 118,
	275, 113, 119, 274, 190, 0, 0, 0, 257, 265,
	182, 175, 0, 112, 263, 180, 174, 165, 144, 154,
	211, 172, 212, 155, 186, 185, 187, 0, 476, 0,
	246, 272, 288, 124, 492, 0, 255, 282, 283, 0,
	0, 125, 147, 143, 210, 189, 120, 157, 243, 164,
	171, 220, 286, 200, 226, 129, 271, 242, 488, 491,
	486, 0, 487, 536, 537, 583, 584, 585, 561, 482,
	0, 489, 490, 0, 566, 573, 574, 540, 105, 114,
	168, 285, 218, 146, 273, 472, 485, 139, 495, 0,
	0, 509, 514, 515, 527, 529, 530, 531, 532, 539,
	546, 547, 549, 555, 556, 557, 558, 563, 570, 589,
	107, 108, 115, 123, 130, 138, 142, 145, 150, 153,
	156, 158, 159, 160, 163, 173, 176, 177, 178, 179,
	191, 192, 194, 195, 198, 199, 202, 203, 204, 205,
	207, 208, 209, 213, 215, 217, 219, 222, 227, 228,
	229, 230, 232, 233, 234, 237, 238, 239, 240, 247,
	251, 259, 260, 270, 277, 281, 577, 565, 0, 522,
	580, 494, 512, 588, 513, 516, 553, 479, 535, 197,
	510, 0, 498, 474, 505, 475, 496, 524, 141, 493,
	567, 538, 579, 166, 578, 528, 0, 586, 169, 544,
	0, 244, 184, 0, 0, 526, 569, 533, 562, 521,
	554, 484, 543, 581, 511, 551, 582, 0, 0, 0,
	454, 0, 1060, 1061, 0, 0, 0, 0, 0, 127,
	0, 548, 576, 507, 550, 552, 473, 545, 0, 477,
	480, 587, 572, 501, 502, 503, 0, 0, 0, 0,
	0, 0, 0, 525, 534, 559, 519, 0, 0, 0,
	0, 0, 0, 0, 0, 499, 0, 542, 0, 0,
	0, 481, 478, 0, 0, 523, 0, 0, 0, 483,
	0, 500, 560, 0, 470, 149, 0, 0, 564, 571,
	520, 0, 278, 575, 518, 517, 214, 0, 249, 152,
	167, 121, 106, 116, 0, 151, 193, 223, 231, 508,
	471, 568, 497, 506, 135, 504, 225, 201, 269, 0,
	541, 206, 224, 170, 258, 216, 267, 268, 279, 280,
	253, 276, 284, 241, 0, 0, 0, 0, 0, 0,
	122, 254, 183, 188, 131, 133, 132, 117, 236, 256,
	126, 134, 245, 250, 109, 252, 266, 128, 235, 111,
	264, 248, 181, 161, 162, 110, 0, 221, 140, 148,
	137, 196, 0, 0, 0, 261, 262, 136, 287, 118,
	275, 113, 119, 274, 190, 0, 0, 0, 257, 265,
	182, 175, 0, 112, 263, 180, 174, 165, 144, 154,
	211, 172, 212, 155, 186, 185, 187, 0, 476, 0,
	246, 272, 288, 124, 492, 0, 255, 282, 283, 0,
	0, 125, 147, 143, 210, 189, 120, 157, 243, 164,
	171, 220, 286, 200, 226, 129, 271, 242, 488, 491,
	486, 0, 487, 536, 537, 583, 584, 585, 561, 482,
	0, 489, 490, 0, 566, 573, 574, 540, 105, 114,
	168, 285, 218, 146, 273, 472, 485, 139, 495, 0,
	0, 509, 514, 515, 527, 529, 530, 531, 532, 539,
	546, 547, 549, 555, 556, 557, 558, 563, 570, 589,
	107, 108, 115, 123, 130, 138, 142, 145, 150, 153,
	156, 158, 159, 160, 163, 173, 176, 177, 178, 179,
	191, 192, 194, 195, 198, 199, 202, 203, 204, 205,
	207, 208, 209, 213, 215, 217, 219, 222, 227, 228,
	229, 230, 232, 233, 234, 237, 238, 239, 240, 247,
	251, 259, 260, 270, 277, 281, 577, 565, 0, 522,
	580, 494, 512, 588, 513, 516, 553, 479, 535, 197,
	510, 0, 498, 474, 505, 475, 496, 524, 141, 493,
	567, 538, 579, 166, 578, 528, 0, 586, 169, 544,
	0, 244, 184, 0, 0, 526, 569, 533, 562, 521,
	554, 484, 543, 581, 511, 551, 582, 0, 0, 0,
	454, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 548, 576, 507, 550, 552, 473, 545, 0, 477,
	480, 587, 572, 501, 502, 503, 0, 0, 0, 0,
	0, 0, 0, 525, 534, 559, 519, 0, 0, 0,
	0, 0, 0, 1379, 0, 499, 0, 542, 0, 0,
	0, 481, 478, 0, 0, 523, 0, 0, 0, 483,
	0, 500, 560, 0, 470, 149, 0, 0, 564, 571,
	520, 0, 278, 575, 518, 517, 214, 0, 249, 152,
	167, 121, 106, 116, 0, 151, 193, 223, 231, 508,
	471, 568, 497, 506, 135, 504, 225, 201, 269, 0,
	541, 206, 224, 170, 258, 216, 267, 268, 279, 280,
	253, 276, 284, 241, 0, 0, 0, 0, 0, 0,
	122, 254, 183, 188, 131, 133, 132, 117, 236, 256,
	126, 134, 245, 250, 109, 252, 266, 128, 235, 111,
	264, 248, 181, 161, 162, 110, 0, 221, 140, 148,
	137, 196, 0, 0, 0, 261, 262, 136, 287, 118,
	275, 113, 119, 274, 190, 0, 0, 0, 257, 265,
	182, 175, 0, 112, 263, 180, 174, 165, 144, 154,
	211, 172, 212, 155, 186, 185, 187, 0, 476, 0,
	246, 272, 288, 124, 492, 0, 255, 282, 283, 0,
	0, 125, 147, 143, 210, 189, 120, 157, 243, 164,
	171, 220, 286, 200, 226, 129, 271, 242, 488, 491,
	486, 0, 487, 536, 537, 583, 584, 585, 561, 482,
	0, 489, 490, 0, 566, 573, 574, 540, 105, 114,
	168, 285, 218, 146, 273, 472, 485, 139, 495, 0,
	0, 509, 514, 515, 527, 529, 530, 531, 532, 539,
	546, 547, 549, 555, 556, 557, 558, 563, 570, 589,
	107, 108, 115, 123, 130, 138, 142, 145, 150, 153,
	156, 158, 159, 160, 163, 173, 176, 177, 178, 179,
	191, 192, 194, 195, 198, 199, 202, 203, 204, 205,
	207, 208, 209, 213, 215, 217, 219, 222, 227, 228,
	229, 230, 232, 233, 234, 237, 238, 239, 240, 247,
	251, 259, 260, 270, 277, 281, 577, 565, 0, 522,
	580, 494, 512, 588, 513, 516, 553, 479, 535, 197,
	510, 0, 498, 474, 505, 475, 496, 524, 141, 493,
	567, 538, 579, 166, 578, 528, 0, 586, 169, 544,
	0, 244, 184, 0, 0, 526, 569, 533, 562, 521,
	554, 484, 543, 581, 511, 551, 582, 63, 0, 0,
	454, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 548, 576, 507, 550, 552, 473, 545, 0, 477,
	480, 587, 572, 501, 502, 503, 0, 0, 0, 0,
	0, 0, 0, 525, 534, 559, 519, 0, 0, 0,
	0, 0, 0, 0, 0, 499, 0, 542, 0, 0,
	0, 481, 478, 0, 0, 523, 0, 0, 0, 483,
	0, 500, 560, 0, 470, 149, 0, 0, 564, 571,
	520, 0, 278, 575, 518, 517, 214, 0, 249, 152,
	167, 121, 106, 116, 0, 151, 193, 223, 231, 508,
	471, 568, 497, 506, 135, 504, 225, 201, 269, 0,
	541, 206, 224, 170, 258, 216, 267, 268, 279, 280,
	253, 276, 284, 241, 0, 0, 0, 0, 0, 0,
	122, 254, 183, 188, 131, 133, 132, 117, 236, 256,
	126, 134, 245, 250, 109, 252, 266, 128, 235, 111,
	264, 248, 181, 161, 162, 110, 0, 221, 140, 148,
	137, 196, 0, 0, 0, 261, 262, 136, 287, 118,
	275, 113, 119, 274, 190, 0, 0, 0, 257, 265,
	182, 175, 0, 112, 263, 180, 174, 165, 144, 154,
	211, 172, 212, 155, 186, 185, 187, 0, 476, 0,
	246, 272, 288, 124, 492, 0, 255, 282, 283, 0,
	0, 125, 147, 143, 210, 189, 120, 157, 243, 164,
	171, 220, 286, 200, 226, 129, 271, 242, 488, 491,
	486, 0, 487, 536, 537, 583, 584, 585, 561, 482,
	0, 489, 490, 0, 566, 573, 574, 540, 105, 114,
	168, 285, 218, 146, 273, 472, 485, 139, 495, 0,
	0, 509, 514, 515, 527, 529, 530, 531, 532, 539,
	546, 547, 549, 555, 556, 557, 558, 563, 570, 589,
	107, 108, 115, 123, 130, 138, 142, 145, 150, 153,
	156, 158, 159, 160, 163, 173, 176, 177, 178, 179,
	191, 192, 194, 195, 198, 199, 202, 203, 204, 205,
	207, 208, 209, 213, 215, 217, 219, 222, 227, 228,
	229, 230, 232, 233, 234, 237, 238, 239, 240, 247,
	251, 259, 260, 270, 277, 281, 577, 565, 0, 522,
	580, 494, 512, 588, 513, 516, 553, 479, 535, 197,
	510, 0, 498, 474, 505, 475, 496, 524, 141, 493,
	567, 538, 579, 166, 578, 528, 0, 586, 169, 544,
	0, 244, 184, 0, 0, 526, 569, 533, 562, 521,
	554, 484, 543, 581, 511, 551, 582, 0, 0, 0,
	103, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 548, 576, 507, 550, 552, 473, 545, 0, 477,
	480, 587, 572, 501, 502, 503, 0, 0, 0, 0,
	0, 0, 0, 525, 534, 559, 519, 0, 0, 0,
	0, 0, 0, 1042, 0, 499, 0, 542, 0, 0,
	0, 481, 478, 0, 0, 523, 0, 0, 0, 483,
	0, 500, 560, 0, 470, 149, 0, 0, 564, 571,
	520, 0, 278, 575, 518, 517, 214, 0, 249, 152,
	167, 121, 106, 116, 0, 151, 193, 223, 231, 508,
	471, 568, 497, 506, 135, 504, 225, 201, 269, 0,
	541, 206, 224, 170, 258, 216, 267, 268, 279, 280,
	253, 276, 284, 241, 0, 0, 0, 0, 0, 0,
	122, 254, 183, 188, 131, 133, 132, 117, 236, 256,
	126, 134, 245, 250, 109, 252, 266, 128, 235, 111,
	264, 248, 181, 161, 162, 110, 0, 221, 140, 148,
	137, 196, 0, 0, 0, 261, 262, 136, 287, 118,
	275, 113, 119, 274, 190, 0, 0, 0, 257, 265,
	182, 175, 0, 112, 263, 180, 174, 165, 144, 154,
	211, 172, 212, 155, 186, 185, 187, 0, 476, 0,
	246, 272, 288, 124, 492, 0, 255, 282, 283, 0,
	0, 125, 147, 143, 210, 189, 120, 157, 243, 164,
	171, 220, 286, 200, 226, 129, 271, 242, 488, 491,
	486, 0, 487, 536, 537, 583, 584, 585, 561, 482,
	0, 489, 490, 0, 566, 573, 574, 540, 105, 114,
	168, 285, 218, 146, 273, 472, 485, 139, 495, 0,
	0, 509, 514, 515, 527, 529, 530, 531, 532, 539,
	546, 547, 549, 555, 556, 557, 558, 563, 570, 589,
	107, 108, 115, 123, 130, 138, 142, 145, 150, 153,
	156, 158, 159, 160, 163, 173, 176, 177, 178, 179,
	191, 192, 194, 195, 198, 199, 202, 203, 204, 205,
	207, 208, 209, 213, 215, 217, 219, 222, 227, 228,
	229, 230, 232, 233, 234, 237, 238, 239, 240, 247,
	251, 259, 260, 270, 277, 281, 577, 565, 0, 522,
	580, 494, 512, 588, 513, 516, 553, 479, 535, 197,
	510, 0, 498, 474, 505, 475, 496, 524, 141, 493,
	567, 538, 579, 166, 578, 528, 0, 586, 169, 544,
	0, 244, 184, 0, 0, 526, 569, 533, 562, 521,
	554, 484, 543, 581, 511, 551, 582, 0, 0, 0,
	354, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 548, 576, 507, 550, 552, 473, 545, 0, 477,
	480, 587, 572, 501, 502, 503, 0, 0, 0, 0,
	0, 0, 0, 525, 534, 559, 519, 0, 0, 0,
	0, 0, 0, 937, 0, 499, 0, 542, 0, 0,
	0, 481, 478, 0, 0, 523, 0, 0, 0, 483,
	0, 500, 560, 0, 470, 149, 0, 0, 564, 571,
	520, 0, 278, 575, 518, 517, 214, 0, 249, 152,
	167, 121, 106, 116, 0, 151, 193, 223, 231, 508,
	471, 568, 497, 506, 135, 504, 225, 201, 269, 0,
	541, 206, 224, 170, 258, 216, 267, 268, 279, 280,
	253, 276, 284, 241, 0, 0, 0, 0, 0, 0,
	122, 254, 183, 188, 131, 133, 132, 117, 236, 256,
	126, 134, 245, 250, 109, 252, 266, 128, 235, 111,
	264, 248, 181, 161, 162, 110, 0, 221, 140, 148,
	137, 196, 0, 0, 0, 261, 262, 136, 287, 118,
	275, 113, 119, 274, 190, 0, 0, 0, 257, 265,
	182, 175, 0, 112, 263, 180, 174, 165, 144, 154,
	211, 172, 212, 155, 186, 185, 187, 0, 476, 0,
	246, 272, 288, 124, 492, 0, 255, 282, 283, 0,
	0, 125, 147, 143, 210, 189, 120, 157, 243, 164,
	171, 220, 286, 200, 226, 129, 271, 242, 488, 491,
	486, 0, 487, 536, 537, 583, 584, 585, 561, 482,
	0, 489, 490, 0, 566, 573, 574, 540, 105, 114,
	168, 285, 218, 146, 273, 472, 485, 139, 495, 0,
	0, 509, 514, 515, 527, 529, 530, 531, 532, 539,
	546, 547, 549, 555, 556, 557, 558, 563, 570, 589,
	107, 108, 115, 123, 130, 138, 142, 145, 150, 153,
	156, 158, 159, 160, 163, 173, 176, 177, 178, 179,
	191, 192, 194, 195, 198, 199, 202, 203, 204, 205,
	207, 208, 209, 213, 215, 217, 219, 222, 227, 228,
	229, 230, 232, 233, 234, 237, 238, 239, 240, 247,
	251, 259, 260, 270, 277, 281, 577, 565, 0, 522,
	580, 494, 512, 588, 513, 516, 553, 479, 535, 197,
	510, 0, 498, 474, 505, 475, 496, 524, 141, 493,
	567, 538, 579, 166, 578, 528, 0, 586, 169, 544,
	0, 244, 184, 0, 0, 526, 569, 533, 562, 521,
	554, 484, 543, 581, 511, 551, 582, 0, 0, 0,
	454, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 548, 576, 507, 550, 552, 473, 545, 0, 477,
	480, 587, 572, 501, 502, 503, 0, 0, 0, 0,
	0, 0, 0, 525, 534, 559, 519, 0, 0, 0,
	0, 0, 0, 0, 0, 499, 0, 542, 0, 0,
	0, 481, 478, 0, 0, 523, 0, 0, 0, 483,
	0, 500, 560, 0, 470, 149, 0, 0, 564, 571,
	520, 0, 278, 575, 518, 517, 214, 0, 249, 152,
	167, 121, 106, 116, 0, 151, 193, 223, 231, 508,
	471, 568, 497, 506, 135, 504, 225, 201, 269, 0,
	541, 206, 224, 170, 258, 216, 267, 268, 279, 280,
	253, 276, 284, 241, 0, 0, 0, 0, 0, 0,
	122, 254, 183, 188, 131, 133, 132, 117, 236, 256,
	126, 134, 245, 250, 109, 252, 266, 128, 235, 111,
	264, 248, 181, 161, 162, 110, 0, 221, 140, 148,
	137, 196, 0, 0, 0, 261, 262, 136, 287, 118,
	275, 113, 119, 274, 190, 0, 0, 0, 257, 265,
	182, 175, 0, 112, 263, 180, 174, 165, 144, 154,
	211, 172, 212, 155, 186, 185, 187, 0, 476, 0,
	246, 272, 288, 124, 492, 0, 255, 282, 283, 0,
	0, 125, 147, 143, 210, 189, 120, 157, 243, 164,
	171, 220, 286, 200, 226, 129, 271, 242, 488, 491,
	486, 0, 487, 536, 537, 583, 584, 585, 561, 482,
	0, 489, 490, 0, 566, 573, 574, 540, 105, 114,
	168, 285, 218, 146, 273, 472, 485, 139, 495, 0,
	0, 509, 514, 515, 527, 529, 530, 531, 532, 539,
	546, 547, 549, 555, 556, 557, 558, 563, 570, 589,
	107, 108, 115, 123, 130, 138, 142, 145, 150, 153,
	156, 158, 159, 160, 163, 173, 176, 177, 178, 179,
	191, 192, 194, 195, 198, 199, 202, 203, 204, 205,
	207, 208, 209, 213, 215, 217, 219, 222, 227, 228,
	229, 230, 232, 233, 234, 237, 238, 239, 240, 247,
	251, 259, 260, 270, 277, 281, 577, 565, 0, 522,
	580, 494, 512, 588, 513, 516, 553, 479, 535, 197,
	510, 0, 498, 474, 505, 475, 496, 524, 141, 493,
	567, 538, 579, 166, 578, 528, 0, 586, 169, 544,
	0, 244, 184, 0, 0, 526, 569, 533, 562, 521,
	554, 484, 543, 581, 511, 551, 582, 0, 0, 0,
	354, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 548, 576, 507, 550, 552, 473, 545, 0, 477,
	480, 587, 572, 501, 502, 503, 0, 0, 0, 0,
	0, 0, 0, 525, 534, 559, 519, 0, 0, 0,
	0, 0, 0, 0, 0, 499, 0, 542, 0, 0,
	0, 481, 478, 0, 0, 523, 0, 0, 0, 483,
	0, 500, 560, 0, 470, 149, 0, 0, 564, 571,
	520, 0, 278, 575, 518, 517, 214, 0, 249, 152,
	167, 121, 106, 116, 0, 151, 193, 223, 231, 508,
	471, 568, 497, 506, 135, 504, 225, 201, 269, 0,
	541, 206, 224, 170, 258, 216, 267, 268, 279, 280,
	253, 276, 284, 241, 0, 0, 0, 0, 0, 0,
	122, 254, 183, 188, 131, 133, 132, 117, 236, 256,
	126, 134, 245, 250, 109, 252, 266, 128, 235, 111,
	264, 248, 181, 161, 162, 110, 0, 221, 140, 148,
	137, 196, 0, 0, 0, 261, 262, 136, 287, 118,
	275, 113, 119, 274, 190, 0, 0, 0, 257, 265,
	182, 175, 0, 112, 263, 180, 174, 165, 144, 154,
	211, 172, 212, 155, 186, 185, 187, 0, 476, 0,
	246, 272, 288, 124, 492, 0, 255, 282, 283, 0,
	0, 125, 147, 143, 210, 189, 120, 157, 243, 164,
	171, 220, 286, 200, 226, 129, 271, 242, 488, 491,
	486, 0, 487, 536, 537, 583, 584, 585, 561, 482,
	0, 489, 490, 0, 566, 573, 574, 540, 105, 114,
	168, 285, 218, 146, 273, 472, 485, 139, 495, 0,
	0, 509, 514, 515, 527, 529, 530, 531, 532, 539,
	546, 547, 549, 555, 556, 557, 558, 563, 570, 589,
	107, 108, 115, 123, 130, 138, 142, 145, 150, 153,
	156, 158, 159, 160, 163, 173, 176, 177, 178, 179,
	191, 192, 194, 195, 198, 199, 202, 203, 204, 205,
	207, 208, 209, 213, 215, 217, 219, 222, 227, 228,
	229, 230, 232, 233, 234, 237, 238, 239, 240, 247,
	251, 259, 260, 270, 277, 281, 577, 565, 0, 522,
	580, 494, 512, 588, 513, 516, 553, 479, 535, 197,
	510, 0, 498, 474, 505, 475, 496, 524, 141, 493,
	567, 538, 579, 166, 578, 528, 0, 586, 169, 544,
	0, 244, 184, 0, 0, 526, 569, 533, 562, 521,
	554, 484, 543, 581, 511, 551, 582, 0, 0, 0,
	103, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 548, 576, 507, 550, 552, 473, 545, 0, 477,
	480, 587, 572, 501, 502, 503, 0, 0, 0, 0,
	0, 0, 0, 525, 534, 559, 519, 0, 0, 0,
	0, 0, 0, 0, 0, 499, 0, 542, 0, 0,
	0, 481, 478, 0, 0, 523, 0, 0, 0, 483,
	0, 500, 560, 0, 470, 149, 0, 0, 564, 571,
	520, 0, 278, 575, 518, 517, 214, 0, 249, 152,
	167, 121, 106, 116, 0, 151, 193, 223, 231, 508,
	471, 568, 497, 506, 135, 504, 225, 201, 269, 0,
	541, 206, 224, 170, 258, 216, 267, 268, 279, 280,
	253, 276, 284, 241, 0, 0, 0, 0, 0, 0,
	122, 254, 183, 188, 131, 133, 132, 117, 236, 256,
	126, 134, 245, 250, 109, 252, 266, 128, 235, 111,
	264, 248, 181, 161, 162, 110, 0, 221, 140, 148,
	137, 196, 0, 0, 0, 261, 262, 136, 287, 118,
	275, 113, 119, 274, 190, 0, 0, 0, 257, 265,
	182, 175, 0, 112, 263, 180, 174, 165, 144, 154,
	211, 172, 212, 155, 186, 185, 187, 0, 476, 0,
	246, 272, 288, 124, 492, 0, 255, 282, 283, 0,
	0, 125, 147, 143, 210, 189, 120, 157, 243, 164,
	171, 220, 286, 200, 226, 129, 271, 242, 488, 491,
	486, 0, 487, 536, 537, 583, 584, 585, 561, 482,
	0, 489, 490, 0, 566, 573, 574, 540, 105, 114,
	168, 285, 218, 146, 273, 472, 485, 139, 495, 0,
	0, 509, 514, 515, 527, 529, 530, 531, 532, 539,
	546, 547, 549, 555, 556, 557, 558, 563, 570, 589,
	107, 108, 115, 123, 130, 138, 142, 145, 150, 153,
	156, 158, 159, 160, 163, 173, 176, 177, 178, 179,
	191, 192, 194, 195, 198, 199, 202, 203, 204, 205,
	207, 208, 209, 213, 215, 217, 219, 222, 227, 228,
	229, 230, 232, 233, 234, 237, 238, 239, 240, 247,
	251, 259, 260, 270, 277, 281, 197, 0, 0, 0,
	0, 356, 0, 0, 0, 141, 353, 0, 0, 0,
	166, 0, 0, 0, 398, 169, 0, 0, 244, 184,
	0, 0, 0, 0, 387, 388, 0, 0, 0, 0,
	0, 0, 1049, 0, 63, 0, 0, 354, 375, 374,
	377, 378, 379, 380, 0, 0, 127, 376, 381, 382,
	383, 1050, 0, 0, 351, 368, 0, 397, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 365, 366,
	0, 0, 0, 0, 412, 0, 367, 0, 0, 362,
	363, 364, 369, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 149, 0, 0, 389, 0, 0, 0, 278,
	0, 0, 410, 214, 0, 249, 152, 167, 121, 106,
	116, 0, 151, 193, 223, 231, 395, 0, 0, 0,
	0, 135, 0, 225, 201, 269, 0, 0, 206, 224,
	170, 258, 216, 267, 268, 279, 280, 253, 276, 284,
	241, 0, 0, 0, 0, 0, 0, 122, 254, 183,
	188, 131, 133, 132, 117, 236, 256, 126, 134, 245,
	250, 109, 252, 266, 128, 235, 111, 264, 248, 181,
	161, 162, 110, 0, 221, 140, 148, 137, 196, 0,
	0, 0, 261, 262, 136, 287, 118, 275, 113, 119,
	274, 190, 0, 0, 0, 257, 265, 182, 175, 0,
	112, 263, 180, 174, 165, 144, 154, 211, 172, 212,
	155, 186, 185, 187, 0, 0, 0, 246, 272, 288,
	124, 0, 0, 255, 282, 283, 0, 0, 125, 147,
	143, 210, 189, 120, 157, 243, 164, 171, 220, 286,
	200, 226, 129, 271, 242, 399, 411, 405, 407, 406,
	403, 404, 402, 401, 400, 413, 390, 391, 392, 393,
	396, 0, 408, 409, 394, 105, 114, 168, 285, 218,
	146, 273, 0, 0, 139, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 107, 108, 115,
	123, 130, 138, 142, 145, 150, 153, 156, 158, 159,
	160, 163, 173, 176, 177, 178, 179, 191, 192, 194,
	195, 198, 199, 202, 203, 204, 205, 207, 208, 209,
	213, 215, 217, 219, 222, 227, 228, 229, 230, 232,
	233, 234, 237, 238, 239, 240, 247, 251, 259, 260,
	270, 277, 281, 197, 0, 0, 0, 0, 356, 0,
	0, 0, 141, 353, 0, 0, 0, 166, 0, 0,
	0, 398, 169, 0, 0, 244, 184, 0, 0, 0,
	0, 387, 388, 0, 0, 0, 0, 0, 0, 0,
	0, 63, 0, 633, 354, 375, 374, 377, 378, 379,
	380, 0, 0, 127, 376, 381, 382, 383, 0, 0,
	0, 351, 368, 0, 397, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 365, 366, 0, 0, 0,
	0, 412, 0, 367, 0, 0, 362, 363, 364, 369,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 149,
	0, 0, 389, 0, 0, 0, 278, 0, 0, 410,
	214, 0, 249, 152, 167, 121, 106, 116, 0, 151,
	193, 223, 231, 395, 0, 0, 0, 0, 135, 0,
	225, 201, 269, 0, 0, 206, 224, 170, 258, 216,
	267, 268, 279, 280, 253, 276, 284, 241, 0, 0,
	0, 0, 0, 0, 122, 254, 183, 188, 131, 133,
	132, 117, 236, 256, 126, 134, 245, 250, 109, 252,
	266, 128, 235, 111, 264, 248, 181, 161, 162, 110,
	0, 221, 140, 148, 137, 196, 0, 0, 0, 261,
	262, 136, 287, 118, 275, 113, 119, 274, 190, 0,
	0, 0, 257, 265, 182, 175, 0, 112, 263, 180,
	174, 165, 144, 154, 211, 172, 212, 155, 186, 185,
	187, 0, 0, 0, 246, 272, 288, 124, 0, 0,
	255, 282, 283, 0, 0, 125, 147, 143, 210, 189,
	120, 157, 243, 164, 171, 220, 286, 200, 226, 129,
	271, 242, 399, 411, 405, 407, 406, 403, 404, 402,
	401, 400, 413, 390, 391, 392, 393, 396, 0, 408,
	409, 394, 105, 114, 168, 285, 218, 146, 273, 0,
	0, 139, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 107, 108, 115, 123, 130, 138,
	142, 145, 150, 153, 156, 158, 159, 160, 163, 173,
	176, 177, 178, 179, 191, 192, 194, 195, 198, 199,
	202, 203, 204, 205, 207, 208, 209, 213, 215, 217,
	219, 222, 227, 228, 229, 230, 232, 233, 234, 237,
	238, 239, 240, 247, 251, 259, 260, 270, 277, 281,
	197, 0, 0, 0, 0, 356, 0, 0, 0, 141,
	353, 0, 0, 0, 166, 0, 0, 0, 398, 169,
	0, 0, 244, 184, 0, 0, 0, 0, 387, 388,
	0, 0, 0, 0, 0, 0, 0, 0, 63, 0,
	0, 354, 375, 374, 377, 378, 379, 380, 0, 0,
	127, 376, 381, 382, 383, 0, 0, 0, 351, 368,
	0, 397, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 365, 366, 347, 0, 0, 0, 412, 0,
	367, 0, 0, 362, 363, 364, 369, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 149, 0, 0, 389,
	0, 0, 0, 278, 0, 0, 410, 214, 0, 249,
	152, 167, 121, 106, 116, 0, 151, 193, 223, 231,
	395, 0, 0, 0, 0, 135, 0, 225, 201, 269,
	0, 0, 206, 224, 170, 258, 216, 267, 268, 279,
	280, 253, 276, 284, 241, 0, 0, 0, 0, 0,
	0, 122, 254, 183, 188, 131, 133, 132, 117, 236,
	256, 126, 134, 245, 250, 109, 252, 266, 128, 235,
	111, 264, 248, 181, 161, 162, 110, 0, 221, 140,
	148, 137, 196, 0, 0, 0, 261, 262, 136, 287,
	118, 275, 113, 119, 274, 190, 0, 0, 0, 257,
	265, 182, 175, 0, 112, 263, 180, 174, 165, 144,
	154, 211, 172, 212, 155, 186, 185, 187, 0, 0,
	0, 246, 272, 288, 124, 0, 0, 255, 282, 283,
	0, 0, 125, 147, 143, 210, 189, 120, 157, 243,
	164, 171, 220, 286, 200, 226, 129, 271, 242, 399,
	411, 405, 407, 406, 403, 404, 402, 401, 400, 413,
	390, 391, 392, 393, 396, 0, 408, 409, 394, 105,
	114, 168, 285, 218, 146, 273, 0, 0, 139, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 107, 108, 115, 123, 130, 138, 142, 145, 150,
	153, 156, 158, 159, 160, 163, 173, 176, 177, 178,
	179, 191, 192, 194, 195, 198, 199, 202, 203, 204,
	205, 207, 208, 209, 213, 215, 217, 219, 222, 227,
	228, 229, 230, 232, 233, 234, 237, 238, 239, 240,
	247, 251, 259, 260, 270, 277, 281, 197, 0, 0,
	0, 0, 356, 0, 0, 0, 141, 353, 0, 0,
	0, 166, 0, 0, 0, 398, 169, 0, 0, 244,
	184, 0, 0, 0, 0, 387, 388, 0, 0, 0,
	0, 0, 0, 0, 0, 63, 0, 0, 354, 375,
	987, 377, 378, 379, 380, 0, 0, 127, 376, 381,
	382, 383, 0, 0, 0, 351, 368, 0, 397, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 365,
	366, 347, 0, 0, 0, 412, 0, 367, 0, 0,
	362, 363, 364, 369, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 149, 0, 0, 389, 0, 0, 0,
	278, 0, 0, 410, 214, 0, 249, 152, 167, 121,
	106, 116, 0, 151, 193, 223, 231, 395, 0, 0,
	0, 0, 135, 0, 225, 201, 269, 0, 0, 206,
	224, 170, 258, 216, 267, 268, 279, 280, 253, 276,
	284, 241, 0, 0, 0, 0, 0, 0, 122, 254,
	183, 188, 131, 133, 132, 117, 236, 256, 126, 134,
	245, 250, 109, 252, 266, 128, 235, 111, 264, 248,
	181, 161, 162, 110, 0, 221, 140, 148, 137, 196,
	0, 0, 0, 261, 262, 136, 287, 118, 275, 113,
	119, 274, 190, 0, 0, 0, 257, 265, 182, 175,
	0, 112, 263, 180, 174, 165, 144, 154, 211, 172,
	212, 155, 186, 185, 187, 0, 0, 0, 246, 272,
	288, 124, 0, 0, 255, 282, 283, 0, 0, 125,
	147, 143, 210, 189, 120, 157, 243, 164, 171, 220,
	286, 200, 226, 129, 271, 242, 399, 411, 405, 407,
	406, 403, 404, 402, 401, 400, 413, 390, 391, 392,
	393, 396, 0, 408, 409, 394, 105, 114, 168, 285,
	218, 146, 273, 0, 0, 139, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 107, 108,
	115, 123, 130, 138, 142, 145, 150, 153, 156, 158,
	159, 160, 163, 173, 176, 177, 178, 179, 191, 192,
	194, 195, 198, 199, 202, 203, 204, 205, 207, 208,
	209, 213, 215, 217, 219, 222, 227, 228, 229, 230,
	232, 233, 234, 237, 238, 239, 240, 247, 251, 259,
	260, 270, 277, 281, 197, 0, 0, 0, 0, 356,
	0, 0, 0, 141, 353, 0, 0, 0, 166, 0,
	0, 0, 398, 169, 0, 0, 244, 184, 0, 0,
	0, 0, 387, 388, 0, 0, 0, 0, 0, 0,
	0, 0, 63, 0, 0, 354, 375, 984, 377, 378,
	379, 380, 0, 0, 127, 376, 381, 382, 383, 0,
	0, 0, 351, 368, 0, 397, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 365, 366, 347, 0,
	0, 0, 412, 0, 367, 0, 0, 362, 363, 364,
	369, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	149, 0, 0, 389, 0, 0, 0, 278, 0, 0,
	410, 214, 0, 249, 152, 167, 121, 106, 116, 0,
	151, 193, 223, 231, 395, 0, 0, 0, 0, 135,
	0, 225, 201, 269, 0, 0, 206, 224, 170, 258,
	216, 267, 268, 279, 280, 253, 276, 284, 241, 0,
	0, 0, 0, 0, 0, 122, 254, 183, 188, 131,
	133, 132, 117, 236, 256, 126, 134, 245, 250, 109,
	252, 266, 128, 235, 111, 264, 248, 181, 161, 162,
	110, 0, 221, 140, 148, 137, 196, 0, 0, 0,
	261, 262, 136, 287, 118, 275, 113, 119, 274, 190,
	0, 0, 0, 257, 265, 182, 175, 0, 112, 263,
	180, 174, 165, 144, 154, 211, 172, 212, 155, 186,
	185, 187, 0, 0, 0, 246, 272, 288, 124, 0,
	0, 255, 282, 283, 0, 0, 125, 147, 143, 210,
	189, 120, 157, 243, 164, 171, 220, 286, 200, 226,
	129, 271, 242, 399, 411, 405, 407, 406, 403, 404,
	402, 401, 400, 413, 390, 391, 392, 393, 396, 0,
	408, 409, 394, 105, 114, 168, 285, 218, 146, 273,
	0, 0, 139, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 107, 108, 115, 123, 130,
	138, 142, 145, 150, 153, 156, 158, 159, 160, 163,
	173, 176, 177, 178, 179, 191, 192, 194, 195, 198,
	199, 202, 203, 204, 205, 207, 208, 209, 213, 215,
	217, 219, 222, 227, 228, 229, 230, 232, 233, 234,
	237, 238, 239, 240, 247, 251, 259, 260, 270, 277,
	281, 27, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 197, 0, 0, 0, 0, 356, 0,
	0, 0, 141, 353, 0, 0, 0, 166, 0, 0,
	0, 398, 169, 0, 0, 244, 184, 0, 0, 0,
	0, 387, 388, 0, 0, 0, 0, 0, 0, 0,
	0, 63, 0, 0, 354, 375, 374, 377, 378, 379,
	380, 0, 0, 127, 376, 381, 382, 383, 0, 0,
	0, 351, 368, 0, 397, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 365, 366, 0, 0, 0,
	0, 412, 0, 367, 0, 0, 362, 363, 364, 369,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 149,
	0, 0, 389, 0, 0, 0, 278, 0, 0, 410,
	214, 0, 249, 152, 167, 121, 106, 116, 0, 151,
	193, 223, 231, 395, 0, 0, 0, 0, 135, 0,
	225, 201, 269, 0, 0, 206, 224, 170, 258, 216,
	267, 268, 279, 280, 253, 276, 284, 241, 0, 0,
	0, 0, 0, 0, 122, 254, 183, 188, 131, 133,
	132, 117, 236, 256, 126, 134, 245, 250, 109, 252,
	266, 128, 235, 111, 264, 248, 181, 161, 162, 110,
	0, 221, 140, 148, 137, 196, 0, 0, 0, 261,
	262, 136, 287, 118, 275, 113, 119, 274, 190, 0,
	0, 0, 257, 265, 182, 175, 0, 112, 263, 180,
	174, 165, 144, 154, 211, 172, 212, 155, 186, 185,
	187, 0, 0, 0, 246, 272, 288, 124, 0, 0,
	255, 282, 283, 0, 0, 125, 147, 143, 210, 189,
	120, 157, 243, 164, 171, 220, 286, 200, 226, 129,
	271, 242, 399, 411, 405, 407, 406, 403, 404, 402,
	401, 400, 413, 390, 391, 392, 393, 396, 0, 408,
	409, 394, 105, 114, 168, 285, 218, 146, 273, 0,
	0, 139, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 107, 108, 115, 123, 130, 138,
	142, 145, 150, 153, 156, 158, 159, 160, 163, 173,
	176, 177, 178, 179, 191, 192, 194, 195, 198, 199,
	202, 203, 204, 205, 207, 208, 209, 213, 215, 217,
	219, 222, 227, 228, 229, 230, 232, 233, 234, 237,
	238, 239, 240, 247, 251, 259, 260, 270, 277, 281,
	197, 0, 0, 0, 0, 356, 0, 0, 0, 141,
	353, 0, 0, 0, 166, 0, 0, 0, 398, 169,
	0, 0, 244, 184, 0, 0, 0, 0, 387, 388,
	0, 0, 0, 0, 0, 0, 0, 0, 63, 0,
	0, 354, 375, 374, 377, 378, 379, 380, 0, 0,
	127, 376, 381, 382, 383, 0, 0, 0, 351, 368,
	0, 397, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 365, 366, 0, 0, 0, 0, 412, 0,
	367, 0, 0, 362, 363, 364, 369, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 149, 0, 0, 389,
	0, 0, 0, 278, 0, 0, 410, 214, 0, 249,
	152, 167, 121, 106, 116, 0, 151, 193, 223, 231,
	395, 0, 0, 0, 0, 135, 0, 225, 201, 269,
	0, 0, 206, 224, 170, 258, 216, 267, 268, 279,
	280, 253, 276, 284, 241, 0, 0, 0, 0, 0,
	0, 122, 254, 183, 188, 131, 133, 132, 117, 236,
	256, 126, 134, 245, 250, 109, 252, 266, 128, 235,
	111, 264, 248, 181, 161, 162, 110, 0, 221, 140,
	148, 137, 196, 0, 0, 0, 261, 262, 136, 287,
	118, 275, 113, 119, 274, 190, 0, 0, 0, 257,
	265, 182, 175, 0, 112, 263, 180, 174, 165, 144,
	154, 211, 172, 212, 155, 186, 185, 187, 0, 0,
	0, 246, 272, 288, 124, 0, 0, 255, 282, 283,
	0, 0, 125, 147, 143, 210, 189, 120, 157, 243,
	164, 171, 220, 286, 200, 226, 129, 271, 242, 399,
	411, 405, 407, 406, 403, 404, 402, 401, 400, 413,
	390, 391, 392, 393, 396, 0, 408, 409, 394, 105,
	114, 168, 285, 218, 146, 273, 0, 0, 139, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 107, 108, 115, 123, 130, 138, 142, 145, 150,
	153, 156, 158, 159, 160, 163, 173, 176, 177, 178,
	179, 191, 192, 194, 195, 198, 199, 202, 203, 204,
	205, 207, 208, 209, 213, 215, 217, 219, 222, 227,
	228, 229, 230, 232, 233, 234, 237, 238, 239, 240,
	247, 251, 259, 260, 270, 277, 281, 197, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	0, 166, 0, 0, 0, 398, 169, 0, 0, 244,
	184, 0, 0, 0, 0, 387, 388, 0, 0, 0,
	0, 0, 0, 0, 0, 63, 0, 0, 354, 375,
	374, 377, 378, 379, 380, 0, 0, 127, 376, 381,
	382, 383, 0, 0, 0, 0, 368, 0, 397, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 365,
	366, 0, 0, 0, 0, 412, 0, 367, 0, 0,
	362, 363, 364, 369, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 149, 0, 0, 389, 0, 0, 0,
	278, 0, 0, 410, 214, 0, 249, 152, 167, 121,
	106, 116, 0, 151, 193, 223, 231, 395, 0, 0,
	0, 0, 135, 0, 225, 201, 269, 0, 1762, 206,
	224, 170, 258, 216, 267, 268, 279, 280, 253, 276,
	284, 241, 0, 0, 0, 0, 0, 0, 122, 254,
	183, 188, 131, 133, 132, 117, 236, 256, 126, 134,
	245, 250, 109, 252, 266, 128, 235, 111, 264, 248,
	181, 161, 162, 110, 0, 221, 140, 148, 137, 196,
	0, 0, 0, 261, 262, 136, 287, 118, 275, 113,
	119, 274, 190, 0, 0, 0, 257, 265, 182, 175,
	0, 112, 263, 180, 174, 165, 144, 154, 211, 172,
	212, 155, 186, 185, 187, 0, 0, 0, 246, 272,
	288, 124, 0, 0, 255, 282, 283, 0, 0, 125,
	147, 143, 210, 189, 120, 157, 243, 164, 171, 220,
	286, 200, 226, 129, 271, 242, 399, 411, 405, 407,
	406, 403, 404, 402, 401, 400, 413, 390, 391, 392,
	393, 396, 0, 408, 409, 394, 105, 114, 168, 285,
	218, 146, 273, 0, 0, 139, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 107, 108,
	115, 123, 130, 138, 142, 145, 150, 153, 156, 158,
	159, 160, 163, 173, 176, 177, 178, 179, 191, 192,
	194, 195, 198, 199, 202, 203, 204, 205, 207, 208,
	209, 213, 215, 217, 219, 222, 227, 228, 229, 230,
	232, 233, 234, 237, 238, 239, 240, 247, 251, 259,
	260, 270, 277, 281, 197, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 0, 0, 0, 166, 0,
	0, 0, 398, 169, 0, 0, 244, 184, 0, 0,
	0, 0, 387, 388, 0, 0, 0, 0, 0, 0,
	0, 0, 63, 0, 633, 354, 375, 374, 377, 378,
	379, 380, 0, 0, 127, 376, 381, 382, 383, 0,
	0, 0, 0, 368, 0, 397, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 365, 366, 0, 0,
	0, 0, 412, 0, 367, 0, 0, 362, 363, 364,
	369, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	149, 0, 0, 389, 0, 0, 0, 278, 0, 0,
	410, 214, 0, 249, 152, 167, 121, 106, 116, 0,
	151, 193, 223, 231, 395, 0, 0, 0, 0, 135,
	0, 225, 201, 269, 0, 0, 206, 224, 170, 258,
	216, 267, 268, 279, 280, 253, 276, 284, 241, 0,
	0, 0, 0, 0, 0, 122, 254, 183, 188, 131,
	133, 132, 117, 236, 256, 126, 134, 245, 250, 109,
	252, 266, 128, 235, 111, 264, 248, 181, 161, 162,
	110, 0, 221, 140, 148, 137, 196, 0, 0, 0,
	261, 262, 136, 287, 118, 275, 113, 119, 274, 190,
	0, 0, 0, 257, 265, 182, 175, 0, 112, 263,
	180, 174, 165, 144, 154, 211, 172, 212, 155, 186,
	185, 187, 0, 0, 0, 246, 272, 288, 124, 0,
	0, 255, 282, 283, 0, 0, 125, 147, 143, 210,
	189, 120, 157, 243, 164, 171, 220, 286, 200, 226,
	129, 271, 242, 399, 411, 405, 407, 406, 403, 404,
	402, 401, 400, 413, 390, 391, 392, 393, 396, 0,
	408, 409, 394, 105, 114, 168, 285, 218, 146, 273,
	0, 0, 139, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 107, 108, 115, 123, 130,
	138, 142, 145, 150, 153, 156, 158, 159, 160, 163,
	173, 176, 177, 178, 179, 191, 192, 194, 195, 198,
	199, 202, 203, 204, 205, 207, 208, 209, 213, 215,
	217, 219, 222, 227, 228, 229, 230, 232, 233, 234,
	237, 238, 239, 240, 247, 251, 259, 260, 270, 277,
	281, 197, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 0, 0, 0, 0, 166, 0, 0, 0, 398,
	169, 0, 0, 244, 184, 0, 0, 0, 0, 387,
	388, 0, 0, 0, 0, 0, 0, 0, 0, 63,
	0, 0, 354, 375, 374, 377, 378, 379, 380, 0,
	0, 127, 376, 381, 382, 383, 0, 0, 0, 0,
	368, 0, 397, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 365, 366, 0, 0, 0, 0, 412,
	0, 367, 0, 0, 362, 363, 364, 369, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 149, 0, 0,
	389, 0, 0, 0, 278, 0, 0, 410, 214, 0,
	249, 152, 167, 121, 106, 116, 0, 151, 193, 223,
	231, 395, 0, 0, 0, 0, 135, 0, 225, 201,
	269, 0, 0, 206, 224, 170, 258, 216, 267, 268,
	279, 280, 253, 276, 284, 241, 0, 0, 0, 0,
	0, 0, 122, 254, 183, 188, 131, 133, 132, 117,
	236, 256, 126, 134, 245, 250, 109, 252, 266, 128,
	235, 111, 264, 248, 181, 161, 162, 110, 0, 221,
	140, 148, 137, 196, 0, 0, 0, 261, 262, 136,
	287, 118, 275, 113, 119, 274, 190, 0, 0, 0,
	257, 265, 182, 175, 0, 112, 263, 180, 174, 165,
	144, 154, 211, 172, 212, 155, 186, 185, 187, 0,
	0, 0, 246, 272, 288, 124, 0, 0, 255, 282,
	283, 0, 0, 125, 147, 143, 210, 189, 120, 157,
	243, 164, 171, 220, 286, 200, 226, 129, 271, 242,
	399, 411, 405, 407, 406, 403, 404, 402, 401, 400,
	413, 390, 391, 392, 393, 396, 0, 408, 409, 394,
	105, 114, 168, 285, 218, 146, 273, 0, 0, 139,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 107, 108, 115, 123, 130, 138, 142, 145,
	150, 153, 156, 158, 159, 160, 163, 173, 176, 177,
	178, 179, 191, 192, 194, 195, 198, 199, 202, 203,
	204, 205, 207, 208, 209, 213, 215, 217, 219, 222,
	227, 228, 229, 230, 232, 233, 234, 237, 238, 239,
	240, 247, 251, 259, 260, 270, 277, 281, 197, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 0, 166, 0, 0, 0, 0, 169, 0, 0,
	244, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 454,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 674, 673, 683, 684,
	676, 677, 678, 679, 680, 681, 682, 675, 0, 0,
	685, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 149, 0, 0, 0, 0, 0,
	0, 278, 0, 0, 0, 214, 0, 249, 152, 167,
	121, 106, 116, 0, 151, 193, 223, 231, 0, 0,
	0, 0, 0, 135, 0, 225, 201, 269, 0, 0,
	206, 224, 170, 258, 216, 267, 268, 279, 280, 253,
	276, 284, 241, 0, 0, 0, 0, 0, 0, 122,
	254, 183, 188, 131, 133, 132, 117, 236, 256, 126,
	134, 245, 250, 109, 252, 266, 128, 235, 111, 264,
	248, 181, 161, 162, 110, 0, 221, 140, 148, 137,
	196, 0, 0, 0, 261, 262, 136, 287, 118, 275,
	113, 119, 274, 190, 0, 0, 0, 257, 265, 182,
	175, 0, 112, 263, 180, 174, 165, 144, 154, 211,
	172, 212, 155, 186, 185, 187, 0, 0, 0, 246,
	272, 288, 124, 0, 0, 255, 282, 283, 0, 0,
	125, 147, 143, 210, 189, 120, 157, 243, 164, 171,
	220, 286, 200, 226, 129, 271, 242, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 114, 168,
	285, 218, 146, 273, 0, 0, 139, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 107,
	108, 115, 123, 130, 138, 142, 145, 150, 153, 156,
	158, 159, 160, 163, 173, 176, 177, 178, 179, 191,
	192, 194, 195, 198, 199, 202, 203, 204, 205, 207,
	208, 209, 213, 215, 217, 219, 222, 227, 228, 229,
	230, 232, 233, 234, 237, 238, 239, 240, 247, 251,
	259, 260, 270, 277, 281, 197, 0, 0, 0, 1028,
	0, 0, 0, 0, 141, 0, 0, 0, 0, 166,
	0, 0, 0, 0, 169, 0, 0, 244, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1030,
	1032, 0, 0, 0, 0, 0, 103, 0, 1034, 0,
	0, 0, 0, 0, 0, 127, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 149, 0, 0, 0, 0, 0, 0, 278, 0,
	1031, 0, 214, 0, 249, 152, 167, 121, 106, 116,
	0, 151, 193, 223, 231, 0, 0, 0, 0, 0,
	135, 0, 225, 201, 269, 0, 0, 206, 224, 170,
	258, 216, 267, 268, 279, 280, 253, 276, 284, 241,
	0, 0, 0, 0, 0, 0, 122, 254, 183, 188,
	131, 133, 132, 117, 236, 256, 126, 134, 245, 250,
	109, 252, 266, 128, 235, 111, 264, 248, 181, 161,
	162, 110, 0, 221, 140, 148, 137, 196, 0, 0,
	0, 261, 262, 136, 287, 118, 275, 113, 119, 274,
	190, 0, 0, 0, 257, 265, 182, 175, 0, 112,
	263, 180, 174, 165, 144, 154, 211, 172, 212, 155,
	186, 185, 187, 0, 0, 0, 246, 272, 288, 124,
	0, 0, 255, 282, 283, 0, 0, 125, 147, 143,
	210, 189, 120, 157, 243, 164, 171, 220, 286, 200,
	226, 129, 271, 242, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 105, 114, 168, 285, 218, 146,
	273, 0, 0, 139, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 107, 108, 115, 123,
	130, 138, 142, 145, 150, 153, 156, 158, 159, 160,
	163, 173, 176, 177, 178, 179, 191, 192, 194, 195,
	198, 199, 202, 203, 204, 205, 207, 208, 209, 213,
	215, 217, 219, 222, 227, 228, 229, 230, 232, 233,
	234, 237, 238, 239, 240, 247, 251, 259, 260, 270,
	277, 281, 197, 0, 0, 0, 1028, 0, 0, 0,
	0, 141, 0, 0, 0, 0, 166, 0, 0, 0,
	0, 169, 0, 0, 244, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1030, 1032, 0, 0,
	0, 0, 0, 103, 0, 1034, 0, 0, 0, 0,
	0, 0, 127, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 149, 0,
	0, 0, 0, 0, 0, 278, 0, 1031, 0, 214,
	0, 249, 152, 167, 121, 106, 116, 0, 151, 193,
	223, 231, 0, 0, 0, 0, 0, 135, 0, 225,
	201, 269, 0, 0, 1026, 224, 170, 258, 216, 267,
	268, 279, 280, 253, 276, 284, 241, 0, 0, 0,
	0, 0, 0, 122, 254, 183, 188, 131, 133, 132,
	117, 236, 256, 126, 134, 245, 250, 109, 252, 266,
	128, 235, 111, 264, 248, 181, 161, 162, 110, 0,
	221, 140, 148, 137, 196, 0, 0, 0, 261, 262,
	136, 287, 118, 275, 113, 119, 274, 190, 0, 0,
	0, 257, 265, 182, 175, 0, 112, 263, 180, 174,
	165, 144, 154, 211, 172, 212, 155, 186, 185, 187,
	0, 0, 0, 246, 272, 288, 124, 0, 0, 255,
	282, 283, 0, 0, 125, 147, 143, 210, 189, 120,
	157, 243, 164, 171, 220, 286, 200, 226, 129, 271,
	242, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 114, 168, 285, 218, 146, 273, 0, 0,
	139, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 107, 108, 115, 123, 130, 138, 142,
	145, 150, 153, 156, 158, 159, 160, 163, 173, 176,
	177, 178, 179, 191, 192, 194, 195, 198, 199, 202,
	203, 204, 205, 207, 208, 209, 213, 215, 217, 219,
	222, 227, 228, 229, 230, 232, 233, 234, 237, 238,
	239, 240, 247, 251, 259, 260, 270, 277, 281, 197,
	0, 0, 0, 662, 0, 0, 0, 0, 141, 0,
	0, 0, 0, 166, 0, 0, 0, 0, 169, 0,
	0, 244, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	454, 0, 664, 0, 0, 0, 0, 0, 0, 127,
	0, 0, 0, 0, 0, 659, 658, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 660, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 149, 0, 0, 0, 0,
	0, 0, 278, 0, 0, 0, 214, 0, 249, 152,
	167, 121, 106, 116, 0, 151, 193, 223, 231, 0,
	0, 0, 0, 0, 135, 0, 225, 201, 269, 0,
	0, 206, 224, 170, 258, 216, 267, 268, 279, 280,
	253, 276, 284, 241, 0, 0, 0, 0, 0, 0,
	122, 254, 183, 188, 131, 133, 132, 117, 236, 256,
	126, 134, 245, 250, 109, 252, 266, 128, 235, 111,
	264, 248, 181, 161, 162, 110, 0, 221, 140, 148,
	137, 196, 0, 0, 0, 261, 262, 136, 287, 118,
	275, 113, 119, 274, 190, 0, 0, 0, 257, 265,
	182, 175, 0, 112, 263, 180, 174, 165, 144, 154,
	211, 172, 212, 155, 186, 185, 187, 0, 0, 0,
	246, 272, 288, 124, 0, 0, 255, 282, 283, 0,
	0, 125, 147, 143, 210, 189, 120, 157, 243, 164,
	171, 220, 286, 200, 226, 129, 271, 242, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 114,
	168, 285, 218, 146, 273, 0, 0, 139, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	107, 108, 115, 123, 130, 138, 142, 145, 150, 153,
	156, 158, 159, 160, 163, 173, 176, 177, 178, 179,
	191, 192, 194, 195, 198, 199, 202, 203, 204, 205,
	207, 208, 209, 213, 215, 217, 219, 222, 227, 228,
	229, 230, 232, 233, 234, 237, 238, 239, 240, 247,
	251, 259, 260, 270, 277, 281, 27, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 197, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 0, 166, 0, 0, 0, 0, 169, 0, 0,
	244, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 63, 0, 0, 454,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 149, 0, 0, 0, 0, 0,
	0, 278, 0, 0, 0, 214, 0, 249, 152, 167,
	121, 106, 116, 0, 151, 193, 223, 231, 0, 0,
	0, 0, 0, 135, 0, 225, 201, 269, 0, 0,
	206, 224, 170, 258, 216, 267, 268, 279, 280, 253,
	276, 284, 241, 0, 0, 0, 0, 0, 0, 122,
	254, 183, 188, 131, 133, 132, 117, 236, 256, 126,
	134, 245, 250, 109, 252, 266, 128, 235, 111, 264,
	248, 181, 161, 162, 110, 0, 221, 140, 148, 137,
	196, 0, 0, 0, 261, 262, 136, 287, 118, 275,
	113, 119, 274, 190, 0, 0, 0, 257, 265, 182,
	175, 0, 112, 263, 180, 174, 165, 144, 154, 211,
	172, 212, 155, 186, 185, 187, 0, 0, 0, 246,
	272, 288, 124, 0, 0, 255, 282, 283, 0, 0,
	125, 147, 143, 210, 189, 120, 157, 243, 164, 171,
	220, 286, 200, 226, 129, 271, 242, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 114, 168,
	285, 218, 146, 273, 0, 0, 139, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 107,
	108, 115, 123, 130, 138, 142, 145, 150, 153, 156,
	158, 159, 160, 163, 173, 176, 177, 178, 179, 191,
	192, 194, 195, 198, 199, 202, 203, 204, 205, 207,
	208, 209, 213, 215, 217, 219, 222, 227, 228, 229,
	230, 232, 233, 234, 237, 238, 239, 240, 247, 251,
	259, 260, 270, 277, 281, 197, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 0, 0, 0, 0, 166,
	0, 0, 0, 0, 169, 0, 0, 244, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 103, 0, 1034, 0,
	0, 0, 0, 0, 0, 127, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 149, 0, 0, 0, 0, 0, 0, 278, 0,
	0, 0, 214, 0, 249, 152, 167, 121, 106, 116,
	0, 151, 193, 223, 231, 0, 0, 0, 0, 0,
	135, 0, 225, 201, 269, 0, 0, 206, 224, 170,
	258, 216, 267, 268, 279, 280, 253, 276, 284, 241,
	0, 0, 0, 0, 0, 0, 122, 254, 183, 188,
	131, 133, 132, 117, 236, 256, 126, 134, 245, 250,
	109, 252, 266, 128, 235, 111, 264, 248, 181, 161,
	162, 110, 0, 221, 140, 148, 137, 196, 0, 0,
	0, 261, 262, 136, 287, 118, 275, 113, 119, 274,
	190, 0, 0, 0, 257, 265, 182, 175, 0, 112,
	263, 180, 174, 165, 144, 154, 211, 172, 212, 155,
	186, 185, 187, 0, 0, 0, 246, 272, 288, 124,
	0, 0, 255, 282, 283, 0, 0, 125, 147, 143,
	210, 189, 120, 157, 243, 164, 171, 220, 286, 200,
	226, 129, 271, 242, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 105, 114, 168, 285, 218, 146,
	273, 0, 0, 139, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1248, 0,
	0, 0, 0, 0, 0, 0, 107, 108, 115, 123,
	130, 138, 142, 145, 150, 153, 156, 158, 159, 160,
	163, 173, 176, 177, 178, 179, 191, 192, 194, 195,
	198, 199, 202, 203, 204, 205, 207, 208, 209, 213,
	215, 217, 219, 222, 227, 228, 229, 230, 232, 233,
	234, 237, 238, 239, 240, 247, 251, 259, 260, 270,
	277, 281, 27, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 197, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 0, 0, 0, 166, 0,
	0, 0, 0, 169, 0, 0, 244, 184, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 63, 0, 0, 103, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	149, 0, 0, 0, 0, 0, 0, 278, 0, 0,
	0, 214, 0, 249, 152, 167, 121, 106, 116, 0,
	151, 193, 223, 231, 0, 0, 0, 0, 0, 135,
	0, 225, 201, 269, 0, 0, 206, 224, 170, 258,
	216, 267, 268, 279, 280, 253, 276, 284, 241, 0,
	0, 0, 0, 0, 0, 122, 254, 183, 188, 131,
	133, 132, 117, 236, 256, 126, 134, 245, 250, 109,
	252, 266, 128, 235, 111, 264, 248, 181, 161, 162,
	110, 0, 221, 140, 148, 137, 196, 0, 0, 0,
	261, 262, 136, 287, 118, 275, 113, 119, 274, 190,
	0, 0, 0, 257, 265, 182, 175, 0, 112, 263,
	180, 174, 165, 144, 154, 211, 172, 212, 155, 186,
	185, 187, 0, 0, 0, 246, 272, 288, 124, 0,
	0, 255, 282, 283, 0, 0, 125, 147, 143, 210,
	189, 120, 157, 243, 164, 171, 220, 286, 200, 226,
	129, 271, 242, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 105, 114, 168, 285, 218, 146, 273,
	0, 0, 139, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 107, 108, 115, 123, 130,
	138, 142, 145, 150, 153, 156, 158, 159, 160, 163,
	173, 176, 177, 178, 179, 191, 192, 194, 195, 198,
	199, 202, 203, 204, 205, 207, 208, 209, 213, 215,
	217, 219, 222, 227, 228, 229, 230, 232, 233, 234,
	237, 238, 239, 240, 247, 251, 259, 260, 270, 277,
	281, 197, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 779, 0, 0, 0, 166, 0, 0, 0, 0,
	169, 0, 0, 244, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 454, 0, 778, 0, 0, 0, 0, 0,
	0, 127, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 149, 0, 0,
	0, 0, 0, 0, 278, 0, 0, 0, 214, 0,
	249, 152, 167, 121, 106, 116, 0, 151, 193, 223,
	231, 0, 0, 0, 0, 0, 135, 0, 225, 201,
	269, 0, 0, 206, 224, 170, 258, 216, 267, 268,
	279, 280, 253, 276, 284, 241, 0, 0, 0, 0,
	0, 0, 122, 254, 183, 188, 131, 133, 132, 117,
	236, 256, 126, 134, 245, 250, 109, 252, 266, 128,
	235, 111, 264, 248, 181, 161, 162, 110, 0, 221,
	140, 148, 137, 196, 0, 0, 0, 261, 262, 136,
	287, 118, 275, 113, 119, 274, 190, 0, 0, 0,
	257, 265, 182, 175, 0, 112, 263, 180, 174, 165,
	144, 154, 211, 172, 212, 155, 186, 185, 187, 0,
	0, 0, 246, 272, 288, 124, 0, 0, 255, 282,
	283, 0, 0, 125, 147, 143, 210, 189, 120, 157,
	243, 164, 171, 220, 286, 200, 226, 129, 271, 242,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 114, 168, 285, 218, 146, 273, 0, 0, 139,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 107, 108, 115, 123, 130, 138, 142, 145,
	150, 153, 156, 158, 159, 160, 163, 173, 176, 177,
	178, 179, 191, 192, 194, 195, 198, 199, 202, 203,
	204, 205, 207, 208, 209, 213, 215, 217, 219, 222,
	227, 228, 229, 230, 232, 233, 234, 237, 238, 239,
	240, 247, 251, 259, 260, 270, 277, 281, 197, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 0, 166, 0, 0, 0, 0, 169, 0, 0,
	244, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 103,
	0, 1034, 0, 0, 0, 0, 0, 0, 127, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 149, 0, 0, 0, 0, 0,
	0, 278, 0, 0, 0, 214, 0, 249, 152, 167,
	121, 106, 116, 0, 151, 193, 223, 231, 0, 0,
	0, 0, 0, 135, 0, 225, 201, 269, 0, 0,
	206, 224, 170, 258, 216, 267, 268, 279, 280, 253,
	276, 284, 241, 0, 0, 0, 0, 0, 0, 122,
	254, 183, 188, 131, 133, 132, 117, 236, 256, 126,
	134, 245, 250, 109, 252, 266, 128, 235, 111, 264,
	248, 181, 161, 162, 110, 0, 221, 140, 148, 137,
	196, 0, 0, 0, 261, 262, 136, 287, 118, 275,
	113, 119, 274, 190, 0, 0, 0, 257, 265, 182,
	175, 0, 112, 263, 180, 174, 165, 144, 154, 211,
	172, 212, 155, 186, 185, 187, 0, 0, 0, 246,
	272, 288, 124, 0, 0, 255, 282, 283, 0, 0,
	125, 147, 143, 210, 189, 120, 157, 243, 164, 171,
	220, 286, 200, 226, 129, 271, 242, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 114, 168,
	285, 218, 146, 273, 0, 0, 139, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 107,
	108, 115, 123, 130, 138, 142, 145, 150, 153, 156,
	158, 159, 160, 163, 173, 176, 177, 178, 179, 191,
	192, 194, 195, 198, 199, 202, 203, 204, 205, 207,
	208, 209, 213, 215, 217, 219, 222, 227, 228, 229,
	230, 232, 233, 234, 237, 238, 239, 240, 247, 251,
	259, 260, 270, 277, 281, 197, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 0, 0, 0, 0, 166,
	0, 0, 0, 0, 169, 0, 0, 244, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 63, 0, 0, 103, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 149, 0, 0, 0, 0, 0, 0, 278, 0,
	0, 0, 214, 0, 249, 152, 167, 121, 106, 116,
	0, 151, 193, 223, 231, 0, 0, 0, 0, 0,
	135, 0, 225, 201, 269, 0, 0, 206, 224, 170,
	258, 216, 267, 268, 279, 280, 253, 276, 284, 241,
	0, 0, 0, 0, 0, 0, 122, 254, 183, 188,
	131, 133, 132, 117, 236, 256, 126, 134, 245, 250,
	109, 252, 266, 128, 235, 111, 264, 248, 181, 161,
	162, 110, 0, 221, 140, 148, 137, 196, 0, 0,
	0, 261, 262, 136, 287, 118, 275, 113, 119, 274,
	190, 0, 0, 0, 257, 265, 182, 175, 0, 112,
	263, 180, 174, 165, 144, 154, 211, 172, 212, 155,
	186, 185, 187, 0, 0, 0, 246, 272, 288, 124,
	0, 0, 255, 282, 283, 0, 0, 125, 147, 143,
	210, 189, 120, 157, 243, 164, 171, 220, 286, 200,
	226, 129, 271, 242, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 105, 114, 168, 285, 218, 146,
	273, 0, 0, 139, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 107, 108, 115, 123,
	130, 138, 142, 145, 150, 153, 156, 158, 159, 160,
	163, 173, 176, 177, 178, 179, 191, 192, 194, 195,
	198, 199, 202, 203, 204, 205, 207, 208, 209, 213,
	215, 217, 219, 222, 227, 228, 229, 230, 232, 233,
	234, 237, 238, 239, 240, 247, 251, 259, 260, 270,
	277, 281, 197, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 0, 0, 0, 166, 0, 0, 0,
	0, 169, 0, 0, 244, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 454, 0, 664, 0, 0, 0, 0,
	0, 0, 127, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 149, 0,
	0, 0, 0, 0, 0, 278, 0, 0, 0, 214,
	0, 249, 152, 167, 121, 106, 116, 0, 151, 193,
	223, 231, 0, 0, 0, 0, 0, 135, 0, 225,
	201, 269, 0, 0, 206, 224, 170, 258, 216, 267,
	268, 279, 280, 253, 276, 284, 241, 0, 0, 0,
	0, 0, 0, 122, 254, 183, 188, 131, 133, 132,
	117, 236, 256, 126, 134, 245, 250, 109, 252, 266,
	128, 235, 111, 264, 248, 181, 161, 162, 110, 0,
	221, 140, 148, 137, 196, 0, 0, 0, 261, 262,
	136, 287, 118, 275, 113, 119, 274, 190, 0, 0,
	0, 257, 265, 182, 175, 0, 112, 263, 180, 174,
	165, 144, 154, 211, 172, 212, 155, 186, 185, 187,
	0, 0, 0, 246, 272, 288, 124, 0, 0, 255,
	282, 283, 0, 0, 125, 147, 143, 210, 189, 120,
	157, 243, 164, 171, 220, 286, 200, 226, 129, 271,
	242, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 114, 168, 285, 218, 146, 273, 0, 0,
	139, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 107, 108, 115, 123, 130, 138, 142,
	145, 150, 153, 156, 158, 159, 160, 163, 173, 176,
	177, 178, 179, 191, 192, 194, 195, 198, 199, 202,
	203, 204, 205, 207, 208, 209, 213, 215, 217, 219,
	222, 227, 228, 229, 230, 232, 233, 234, 237, 238,
	239, 240, 247, 251, 259, 260, 270, 277, 281, 197,
	0, 0, 0, 0, 0, 0, 0, 749, 141, 0,
	0, 0, 0, 166, 0, 0, 0, 0, 169, 0,
	0, 244, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	103, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 149, 0, 0, 0, 0,
	0, 0, 278, 0, 0, 0, 214, 0, 249, 152,
	167, 121, 106, 116, 0, 151, 193, 223, 231, 0,
	0, 0, 0, 0, 135, 0, 225, 201, 269, 0,
	0, 206, 224, 170, 258, 216, 267, 268, 279, 280,
	253, 276, 284, 241, 0, 0, 0, 0, 0, 0,
	122, 254, 183, 188, 131, 133, 132, 117, 236, 256,
	126, 134, 245, 250, 109, 252, 266, 128, 235, 111,
	264, 248, 181, 161, 162, 110, 0, 221, 140, 148,
	137, 196, 0, 0, 0, 261, 262, 136, 287, 118,
	275, 113, 119, 274, 190, 0, 0, 0, 257, 265,
	182, 175, 0, 112, 263, 180, 174, 165, 144, 154,
	211, 172, 212, 155, 186, 185, 187, 0, 0, 0,
	246, 272, 288, 124, 0, 0, 255, 282, 283, 0,
	0, 125, 147, 143, 210, 189, 120, 157, 243, 164,
	171, 220, 286, 200, 226, 129, 271, 242, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 114,
	168, 285, 218, 146, 273, 0, 0, 139, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	107, 108, 115, 123, 130, 138, 142, 145, 150, 153,
	156, 158, 159, 160, 163, 173, 176, 177, 178, 179,
	191, 192, 194, 195, 198, 199, 202, 203, 204, 205,
	207, 208, 209, 213, 215, 217, 219, 222, 227, 228,
	229, 230, 232, 233, 234, 237, 238, 239, 240, 247,
	251, 259, 260, 270, 277, 281, 416, 0, 0, 0,
	0, 0, 0, 197, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 0, 0, 0, 0, 166, 0, 0,
	0, 0, 169, 0, 0, 244, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 103, 0, 0, 0, 0, 0,
	0, 0, 0, 127, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 149,
	0, 0, 0, 0, 0, 0, 278, 0, 0, 0,
	214, 0, 249, 152, 167, 121, 106, 116, 0, 151,
	193, 223, 231, 0, 0, 0, 0, 0, 135, 0,
	225, 201, 269, 0, 0, 206, 224, 170, 258, 216,
	267, 268, 279, 280, 253, 276, 284, 241, 0, 0,
	0, 0, 0, 0, 122, 254, 183, 188, 131, 133,
	132, 117, 236, 256, 126, 134, 245, 250, 109, 252,
	266, 128, 235, 111, 264, 248, 181, 161, 162, 110,
	0, 221, 140, 148, 137, 196, 0, 0, 0, 261,
	262, 136, 287, 118, 275, 113, 119, 274, 190, 0,
	0, 0, 257, 265, 182, 175, 0, 112, 263, 180,
	174, 165, 144, 154, 211, 172, 212, 155, 186, 185,
	187, 0, 0, 0, 246, 272, 288, 124, 0, 0,
	255, 282, 283, 0, 0, 125, 147, 143, 210, 189,
	120, 157, 243, 164, 171, 220, 286, 200, 226, 129,
	271, 242, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 105, 114, 168, 285, 218, 146, 273, 0,
	0, 139, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 107, 108, 115, 123, 130, 138,
	142, 145, 150, 153, 156, 158, 159, 160, 163, 173,
	176, 177, 178, 179, 191, 192, 194, 195, 198, 199,
	202, 203, 204, 205, 207, 208, 209, 213, 215, 217,
	219, 222, 227, 228, 229, 230, 232, 233, 234, 237,
	238, 239, 240, 247, 251, 259, 260, 270, 277, 281,
	197, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	0, 0, 0, 0, 166, 0, 0, 0, 0, 169,
	0, 0, 244, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 149, 0, 0, 0,
	100, 0, 0, 278, 0, 0, 0, 214, 0, 249,
	152, 167, 121, 106, 116, 0, 151, 193, 223, 231,
	0, 0, 0, 0, 0, 135, 0, 225, 201, 269,
	0, 0, 206, 224, 170, 258, 216, 267, 268, 279,
	280, 253, 276, 284, 241, 0, 0, 0, 0, 0,
	0, 122, 254, 183, 188, 131, 133, 132, 117, 236,
	256, 126, 134, 245, 250, 109, 252, 266, 128, 235,
	111, 264, 248, 181, 161, 162, 110, 0, 221, 140,
	148, 137, 196, 0, 0, 0, 261, 262, 136, 287,
	118, 275, 113, 119, 274, 190, 0, 0, 0, 257,
	265, 182, 175, 0, 112, 263, 180, 174, 165, 144,
	154, 211, 172, 212, 155, 186, 185, 187, 0, 0,
	0, 246, 272, 288, 124, 0, 0, 255, 282, 283,
	0, 0, 125, 147, 143, 210, 189, 120, 157, 243,
	164, 171, 220, 286, 200, 226, 129, 271, 242, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	114, 168, 285, 218, 146, 273, 0, 0, 139, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 107, 108, 115, 123, 130, 138, 142, 145, 150,
	153, 156, 158, 159, 160, 163, 173, 176, 177, 178,
	179, 191, 192, 194, 195, 198, 199, 202, 203, 204,
	205, 207, 208, 209, 213, 215, 217, 219, 222, 227,
	228, 229, 230, 232, 233, 234, 237, 238, 239, 240,
	247, 251, 259, 260, 270, 277, 281, 197, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	0, 166, 0, 0, 0, 0, 169, 0, 0, 244,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 454, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 149, 0, 0, 0, 0, 0, 0,
	278, 0, 0, 0, 214, 0, 249, 152, 167, 121,
	106, 116, 0, 151, 193, 223, 231, 0, 0, 0,
	0, 0, 135, 0, 225, 201, 269, 0, 0, 206,
	224, 170, 258, 216, 267, 268, 279, 280, 253, 276,
	284, 241, 0, 0, 0, 0, 0, 0, 122, 254,
	183, 188, 131, 133, 132, 117, 236, 256, 126, 134,
	245, 250, 109, 252, 266, 128, 235, 111, 264, 248,
	181, 161, 162, 110, 0, 221, 140, 148, 137, 196,
	0, 0, 0, 261, 262, 136, 287, 118, 275, 113,
	119, 274, 190, 0, 0, 0, 257, 265, 182, 175,
	0, 112, 263, 180, 174, 165, 144, 154, 211, 172,
	212, 155, 186, 185, 187, 0, 0, 0, 246, 272,
	288, 124, 0, 0, 255, 282, 283, 0, 0, 125,
	147, 143, 210, 189, 120, 157, 243, 164, 171, 220,
	286, 200, 226, 129, 271, 242, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 105, 114, 168, 285,
	218, 146, 273, 0, 0, 139, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 107, 108,
	115, 123, 130, 138, 142, 145, 150, 153, 156, 158,
	159, 160, 163, 173, 176, 177, 178, 179, 191, 192,
	194, 195, 198, 199, 202, 203, 204, 205, 207, 208,
	209, 213, 215, 217, 219, 222, 227, 228, 229, 230,
	232, 233, 234, 237, 238, 239, 240, 247, 251, 259,
	260, 270, 277, 281, 197, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 0, 0, 0, 166, 0,
	0, 0, 0, 169, 0, 0, 244, 184, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 103, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	149, 0, 0, 0, 0, 0, 0, 278, 0, 0,
	0, 214, 0, 249, 152, 167, 121, 106, 116, 0,
	151, 193, 223, 231, 0, 0, 0, 0, 0, 135,
	0, 225, 201, 269, 0, 0, 206, 224, 170, 258,
	216, 267, 268, 279, 280, 253, 276, 284, 241, 0,
	0, 0, 0, 0, 0, 122, 254, 183, 188, 131,
	133, 132, 117, 236, 256, 126, 134, 245, 250, 109,
	252, 266, 128, 235, 111, 264, 248, 181, 161, 162,
	110, 0, 221, 140, 148, 137, 196, 0, 0, 0,
	261, 262, 136, 287, 118, 275, 113, 119, 274, 190,
	0, 0, 0, 257, 265, 182, 175, 0, 112, 263,
	180, 174, 165, 144, 154, 211, 172, 212, 155, 186,
	185, 187, 0, 0, 0, 246, 272, 288, 124, 0,
	0, 255, 282, 283, 0, 0, 125, 147, 143, 210,
	189, 120, 157, 243, 164, 171, 220, 286, 200, 226,
	129, 271, 242, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 105, 114, 168, 285, 218, 146, 273,
	0, 0, 139, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 107, 108, 115, 123, 130,
	138, 142, 145, 150, 153, 156, 158, 159, 160, 163,
	173, 176, 177, 178, 179, 191, 192, 194, 195, 198,
	199, 202, 203, 204, 205, 207, 208, 209, 213, 215,
	217, 219, 222, 227, 228, 229, 230, 232, 233, 234,
	237, 238, 239, 240, 247, 251, 259, 260, 270, 277,
	281, 197, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 0, 0, 0, 0, 166, 0, 0, 0, 0,
	169, 0, 0, 244, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 354, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 149, 0, 0,
	0, 0, 0, 0, 278, 0, 0, 0, 214, 0,
	249, 152, 167, 121, 106, 116, 0, 151, 193, 223,
	231, 0, 0, 0, 0, 0, 135, 0, 225, 201,
	269, 0, 0, 206, 224, 170, 258, 216, 267, 268,
	279, 280, 253, 276, 284, 241, 0, 0, 0, 0,
	0, 0, 122, 254, 183, 188, 131, 133, 132, 117,
	236, 256, 126, 134, 245, 250, 109, 252, 266, 128,
	235, 111, 264, 248, 181, 161, 162, 110, 0, 221,
	140, 148, 137, 196, 0, 0, 0, 261, 262, 136,
	287, 118, 275, 113, 433, 274, 190, 0, 0, 0,
	257, 265, 182, 175, 0, 112, 263, 180, 174, 165,
	144, 154, 211, 172, 212, 155, 186, 185, 187, 0,
	0, 0, 246, 272, 288, 124, 0, 0, 255, 282,
	283, 0, 0, 125, 147, 143, 210, 434, 432, 157,
	243, 164, 171, 220, 286, 200, 226, 129, 271, 242,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 114, 168, 285, 218, 146, 273, 0, 0, 139,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 107, 108, 115, 123, 130, 138, 142, 145,
	150, 153, 156, 158, 159, 160, 163, 173, 176, 177,
	178, 179, 191, 192, 194, 195, 198, 199, 202, 203,
	204, 205, 207, 208, 209, 213, 215, 217, 219, 222,
	227, 228, 229, 230, 232, 233, 234, 237, 238, 239,
	240, 247, 251, 259, 260, 270, 277, 281, 197, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 0, 166, 0, 0, 0, 0, 169, 0, 0,
	244, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 354,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 149, 0, 0, 0, 0, 0,
	0, 278, 0, 0, 0, 214, 0, 249, 152, 167,
	121, 106, 116, 0, 151, 193, 223, 231, 0, 0,
	0, 0, 0, 135, 0, 225, 201, 269, 0, 0,
	206, 224, 170, 258, 216, 267, 268, 279, 280, 253,
	276, 284, 241, 0, 0, 0, 0, 0, 0, 122,
	254, 183, 188, 131, 133, 132, 117, 236, 256, 126,
	134, 245, 250, 109, 252, 266, 128, 235, 111, 264,
	248, 181, 161, 162, 110, 0, 221, 140, 148, 137,
	196, 0, 0, 0, 261, 262, 136, 287, 118, 275,
	113, 119, 274, 190, 0, 0, 0, 257, 265, 182,
	175, 0, 112, 263, 180, 174, 165, 144, 154, 211,
	172, 212, 155, 186, 185, 187, 0, 0, 0, 246,
	272, 288, 124, 0, 0, 255, 282, 283, 0, 0,
	125, 147, 143, 210, 189, 120, 157, 243, 164, 171,
	220, 286, 200, 226, 129, 271, 242, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 114, 168,
	285, 218, 146, 273, 0, 0, 139, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 107,
	108, 115, 123, 130, 138, 142, 145, 150, 153, 156,
	158, 159, 160, 163, 173, 176, 177, 178, 179, 191,
	192, 194, 195, 198, 199, 202, 203, 204, 205, 207,
	208, 209, 213, 215, 217, 219, 222, 227, 228, 229,
	230, 232, 233, 234, 237, 238, 239, 240, 247, 251,
	259, 260, 270, 277, 281, 197, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 0, 0, 0, 0, 166,
	0, 0, 0, 0, 169, 0, 0, 244, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 354, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 149, 0, 0, 0, 0, 0, 0, 278, 0,
	0, 0, 214, 0, 249, 152, 167, 121, 106, 116,
	0, 151, 193, 223, 231, 0, 0, 0, 0, 0,
	135, 0, 225, 201, 269, 0, 0, 206, 224, 170,
	258, 216, 267, 268, 279, 280, 253, 276, 284, 241,
	0, 0, 0, 0, 0, 0, 122, 254, 183, 188,
	131, 133, 132, 117, 236, 256, 126, 134, 245, 250,
	109, 252, 770, 128, 235, 111, 264, 248, 181, 161,
	162, 110, 0, 221, 140, 148, 137, 196, 0, 0,
	0, 261, 262, 136, 287, 118, 275, 113, 433, 274,
	190, 0, 0, 0, 257, 265, 182, 175, 0, 112,
	263, 180, 174, 165, 144, 154, 211, 172, 212, 155,
	186, 185, 187, 0, 0, 0, 246, 272, 288, 124,
	0, 0, 255, 282, 283, 0, 0, 125, 147, 143,
	210, 434, 432, 157, 243, 164, 171, 220, 286, 200,
	226, 129, 271, 242, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 105, 114, 168, 285, 218, 146,
	273, 0, 0, 139, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 107, 108, 115, 123,
	130, 138, 142, 145, 150, 153, 156, 158, 159, 160,
	163, 173, 176, 177, 178, 179, 191, 192, 194, 195,
	198, 199, 202, 203, 204, 205, 207, 208, 209, 213,
	215, 217, 219, 222, 227, 228, 229, 230, 232, 233,
	234, 237, 238, 239, 240, 247, 251, 259, 260, 270,
	277, 281, 197, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 0, 0, 0, 166, 0, 0, 0,
	0, 169, 0, 0, 244, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 354, 0, 0, 0, 0, 0, 0,
	0, 0, 127, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 149, 0,
	0, 0, 0, 0, 0, 278, 0, 0, 0, 214,
	0, 249, 152, 167, 121, 106, 116, 0, 151, 193,
	223, 231, 0, 0, 0, 0, 0, 135, 0, 225,
	201, 269, 0, 0, 206, 224, 170, 258, 216, 267,
	268, 279, 280, 253, 276, 284, 241, 0, 0, 0,
	0, 0, 0, 122, 254, 183, 188, 131, 133, 132,
	117, 236, 256, 126, 134, 245, 250, 109, 252, 424,
	128, 235, 111, 264, 248, 181, 161, 162, 110, 0,
	221, 140, 148, 137, 196, 0, 0, 0, 261, 262,
	136, 287, 118, 275, 113, 433, 274, 190, 0, 0,
	0, 257, 265, 182, 175, 0, 112, 263, 180, 174,
	165, 144, 154, 211, 172, 212, 155, 186, 185, 187,
	0, 0, 0, 246, 272, 288, 124, 0, 0, 255,
	282, 283, 0, 0, 125, 147, 143, 210, 434, 432,
	427, 426, 164, 171, 220, 286, 200, 226, 129, 271,
	242, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 114, 168, 285, 218, 146, 273, 0, 0,
	139, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 107, 108, 115, 123, 130, 138, 142,
	145, 150, 153, 156, 158, 159, 160, 163, 173, 176,
	177, 178, 179, 191, 192, 194, 195, 198, 199, 202,
	203, 204, 205, 207, 208, 209, 213, 215, 217, 219,
	222, 227, 228, 229, 230, 232, 233, 234, 237, 238,
	239, 240, 247, 251, 259, 260, 270, 277, 281,
}
var yyPact = [...]int{

	2055, -1000, -272, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1270, 1314, -1000, -1000, -1000,
	-1000, -1000, -1000, 434, 310, -1000, -1000, -1000, 192, 45,
	15342, 188, 2540, 16076, -1000, 30, -1000, -1000, 141, 16076,
	-1000, -1000, -80, -101, -1000, 34, 994, -1000, -1000, 20,
	-1000, -1000, -1000, -1000, -1000, -1000, 1259, 1264, 1069, 1253,
	1151, -1000, 7592, 168, 168, 14975, 17544, -1000, -1000, 420,
	16076, 185, 16076, -152, 163, 163, 89, 163, -1000, 404,
	-1000, -1000, -1000, 16076, 164, 15709, 164, 164, 164, 164,
	16076, -1000, 247, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 16076,
	897, 1211, 4591, 103, 4591, 4591, -1000, 452, -1000, 4591,
	68, 4591, 11, 517, 70, 24, -1000, 4591, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 138, 994, 402, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1207, 672, 673, 177,
	16076, 408, -1000, 1214, 9072, 9072, 1270, -1000, 994, -1000,
	-1000, -1000, 1199, -1000, -1000, 463, 1292, -1000, 11641, 244,
	-1000, 9072, 2377, 848, -1000, -1000, 848, -1000, -1000, 218,
	-1000, -1000, 10173, 10173, 10173, 10173, 10173, 10173, 10173, 10173,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 848, -1000, 8705, 848, 848, 848,
	848, 848, 848, 848, 848, 848, 848, 9072, 848, 848,
	848, 848, 848, 848, 848, 848, 848, 848, 848, 848,
	848, 848, 848, 848, 14601, 13867, 16076, 1008, 998, -1000,
	-1000, 243, 871, 17177, -127, -1000, -1000, -1000, 399, 13133,
	-1000, 240, -1000, 1206, -1000, 902, 16076, -1000, 2116, -1000,
	15709, 1241, 176, 896, 447, 895, 894, 16076, 893, 1016,
	174, 16076, 1224, 1106, -1000, -1000, 16076, 882, 880, 865,
	-1000, 6491, -1000, 4591, 4591, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	163, 163, 4591, 4591, 16076, 16076, 16076, -1000, -1000, 16076,
	-1000, -1000, -1000, 4591, 4591, -1000, 1288, 387, 387, -1000,
	-1000, -1000, -1000, 9072, -1000, 10173, 335, -1000, 1101, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 858, -1000, -1000, 384,
	-1000, 662, -1000, -1000, 16076, 4591, 82, 123, 108, 16076,
	-1000, 1307, 347, 675, 238, 1014, -1000, 632, 1259, 673,
	1151, 712, 1105, -1000, -1000, -1000, 16076, -1000, 9072, 9072,
	676, -1000, 14234, -1000, -1000, 5351, 377, 10173, 576, 523,
	10173, 10173, 10173, 10173, 10173, 10173, 10173, 10173, 10173, 10173,
	10173, 10173, 10173, 10173, 10173, 609, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 847, -1000, 994, 825, 825, 270,
	270, 270, 270, 270, 270, 270, 10540, 1229, 673, 892,
	380, 8705, 7592, 7592, 673, 9072, 9072, 8326, 7959, 7592,
	7592, 1229, 412, 380, 16810, -1000, -1000, 9806, -1000, -1000,
	-1000, -1000, -1000, 673, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 15709, 15709, 7592, 7592, 7592, 7592, 104, 16076,
	-1000, 1005, 1096, -1000, -1000, -1000, 1234, 12766, 11274, 104,
	960, 13867, 16076, -1000, -1000, 13867, 16076, 4971, 16443, 871,
	-127, 988, -1000, -124, -122, 6858, 265, -1000, -1000, -1000,
	6111, -1000, 3831, 416, 796, -1000, -53, -1000, -1000, -1000,
	1033, -1000, 1033, 147, -14, 1033, 1033, 1033, 1033, 1033,
	-21, -21, -21, -21, -13, -1000, -1000, -1000, -1000, -1000,
	1070, 1065, -1000, 1033, 1033, 1033, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1052, 205, 1046, 1046, 1046, 1046,
	1046, 1076, -1000, 16076, 4591, 1218, 4591, 84, -1000, -1000,
	16076, 16076, 1003, -1000, 16076, 1002, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 834, 832, -1000, -1000, -1000,
	-1000, -1000, 445, -1000, -1000, 16076, 1233, 16076, 16076, 486,
	380, 548, -1000, 660, 16076, -1000, 1000, -1000, 398, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 127, -1000, 16076, 16076, 16076, 16076, 16076, 221,
	-1000, 1150, 9072, 9072, 6111, 9072, -1000, -1000, -1000, 1214,
	-1000, 1229, 1267, -1000, 1164, 1163, 7592, -1000, -1000, 377,
	403, -1000, -1000, 738, -1000, -1000, -1000, -1000, 235, 848,
	-1000, 2617, -1000, -1000, -1000, -1000, 576, 10173, 10173, 10173,
	548, 2617, 2575, 869, 2325, 270, 493, 493, 333, 333,
	333, 333, 333, 575, 575, -1000, -1000, -1000, 673, -1000,
	-1000, -1000, 7592, -1000, 9072, -1000, 673, 890, -1000, 890,
	-1000, 643, 592, 319, 1285, 890, 317, 1283, 890, 890,
	890, 7592, 422, -1000, 9072, 673, -1000, 888, 999, 995,
	890, 673, 990, 890, 890, 972, 848, -1000, 16443, 13867,
	13867, 13867, 13867, 13867, -1000, 1121, 1119, -1000, 1140, 1117,
	1165, 16076, -1000, 874, 12766, -1000, 848, -1000, 12387, 239,
	182, 181, 180, -1000, -1000, 1277, 13867, 969, -1000, 969,
	-1000, 231, -1000, -1000, 988, -127, -83, -1000, -1000, -1000,
	-1000, 380, -1000, 642, -1000, 230, 978, 3451, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1059, 824, -1000, 1193, 298,
	293, 682, 1176, -1000, -1000, -1000, 508, -55, -1000, -1000,
	545, -21, -21, 1033, 1033, 145, 1033, -1000, -21, -1000,
	-1000, -1000, 265, 1205, 265, 265, 265, 265, -21, 658,
	658, -1000, -1000, -1000, -1000, 530, -1000, 1052, -1000, 499,
	-1000, -1000, -1000, -1000, 1100, 15709, 994, 1226, -1000, -1000,
	-1000, 1304, -1000, -1000, 172, -1000, 4591, 16076, 4591, 4591,
	1277, 823, 768, 387, 486, -203, -1000, -1000, -1000, 652,
	9072, -1000, 10173, -1000, -1000, 384, 825, -1000, 822, 446,
	451, 146, 146, -1000, 389, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 100, 1073, -1000, -1000, -1000, -1000,
	31, 78, 1146, 380, 380, -1000, -1000, 16076, -1000, -1000,
	-1000, -1000, 1022, -1000, -1000, -1000, 4211, 7592, -1000, 548,
	2617, 2305, -1000, 10173, -1000, 673, 380, -1000, 7592, -1000,
	-1000, 133, 609, 133, 10173, 10173, -1000, 10173, 10173, -1000,
	-166, -1000, 981, 413, -1000, 9072, 739, -1000, -1000, 10173,
	10173, -1000, -1000, -1000, -1000, 1099, 16443, 848, -1000, 12020,
	15709, 987, 1096, 1064, 1098, 875, -1000, -1000, -1000, -1000,
	1118, -1000, 835, -1000, -1000, -1000, -1000, 15709, 10173, 239,
	-1000, 848, 848, 848, 1270, 9072, 969, -1000, -1000, 234,
	-1000, -1000, -132, -138, -1000, -1000, -1000, 5731, 3831, -1000,
	3831, 15709, 131, -1000, 682, 682, -1000, -1000, -1000, 1048,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 455, 10173, 1306,
	-1000, 1191, -1000, 1180, 644, -1000, -1000, 792, 265, 265,
	-21, -1000, -1000, 1033, -1000, 265, -1000, 318, -1000, -1000,
	-1000, -1000, 265, 854, -1000, 852, 966, -1000, 845, 16076,
	-1000, -1000, -1000, 1097, -1000, -1000, -1000, 16076, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 486, -1000, 10173, -1000, 380,
	2617, -1000, -1000, -1000, 684, -1000, 682, 282, -1000, -1000,
	-1000, 766, 1176, -1000, -1000, 764, -1000, 760, 15709, 1172,
	756, 16076, 15709, -1000, -1000, 719, 744, 9072, -1000, 15709,
	-172, 723, 15709, 15709, 15709, -1000, -1000, 1277, 13867, -1000,
	-1000, 673, -1000, 10173, 2617, -1000, -1000, 673, 1033, 1033,
	-1000, 1033, 1046, -1000, 1033, 8, 1033, 6, 673, 673,
	2450, 2422, 2290, 1453, 848, -159, -1000, 380, 9072, 2024,
	1991, -1000, 1215, 926, 907, -1000, -1000, 7225, 673, 839,
	211, 820, -1000, 1270, -1000, -1000, 9072, 1044, -1000, 9072,
	-1000, -1000, -1000, 820, 1321, -1000, 15709, 15709, 15709, 1259,
	380, -1000, -1000, -1000, -1000, 3451, -1000, 795, -1000, 1033,
	-1000, -1000, -1000, 15709, -1000, 2617, -116, -1000, -1000, -1000,
	-1000, -1000, -1000, 265, -1000, -1000, -1000, -1000, -1000, -21,
	598, -21, 492, -1000, 481, 1030, -1000, 994, 16076, -1000,
	-1000, 2617, 719, 125, -1000, 1076, 298, 131, -1000, -1000,
	-1000, -1000, 721, 291, -1000, 171, 125, 719, 380, 1217,
	-1000, 5731, -1000, -1000, 1029, 1078, -1000, 1274, 964, -1000,
	2617, -1000, -1000, 140, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 10173, 10173, 10173, 10173, 10173, 673, 574, 380,
	10173, 10173, 1170, -1000, 848, -1000, -1000, 1012, 15709, 15709,
	-1000, 15709, 1259, 380, 15709, 380, 10907, -1000, 13500, 791,
	-1000, 791, 791, -1000, 226, 15709, 1221, 780, -1000, -1000,
	265, -1000, 265, 781, 713, 15709, -1000, 1256, 703, -1000,
	-1000, 695, 1024, 682, -1000, -1000, 670, -1000, -1000, 15709,
	-1000, 125, 848, 946, -1000, 391, 15709, 16076, 1268, 1263,
	-1000, -1000, 888, 888, 888, 888, 117, -1000, -1000, 888,
	888, 1301, -1000, 848, -1000, 994, 206, -1000, -1000, -1000,
	772, -1000, 239, 15709, -1000, -1000, -1000, 226, -1000, 666,
	389, 567, -1000, -1000, 119, -1000, -1000, -1000, -1000, 748,
	-1000, 62, -1000, -1000, -1000, 15709, 1076, -1000, -1000, -1000,
	-1000, 97, 5731, 3831, 741, -1000, -1000, 9072, 9072, -1000,
	-1000, -1000, -1000, 673, 81, -177, -1000, -1000, 16443, 907,
	673, 15709, -1000, -1000, -1000, -1000, -1000, 472, -1000, 16076,
	226, 58, -1000, 732, 1021, -1000, 728, -1000, 15709, -1000,
	-1000, 1073, 380, 876, -1000, 1144, -170, -182, 871, -1000,
	-1000, -1000, 1018, -1000, 226, 52, 226, 15709, -1000, 97,
	1160, -172, -1000, 1142, -1000, 15709, -1000, 657, 550, -1000,
	711, -1000, 94, -1000, -174, 702, 173, -1000, -1000, 226,
	92, -180, 1095, -1000, -1000, -1000, -1000, -1000, -1000, 233,
	-1000, 848, -183, 1094, 1084, 1281, -1000, -274, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 9072, 9072,
	9439, -1000, -1000, 1297, -1000, 1295, 410, 410, 2174, 634,
	689, 888, 673, -1000, -1000, -1000, 128, 549, -1000, -1000,
	-1000, 464, -1000, 9072, 233, -1000, -1000, -1000, -1000, -1000,
	438, 233, -1000, 653, -276, -1000, -278, 233, 529, 1879,
	-279, 151, 233, 655, -1000, 9072, 421, 233, -1000, -283,
	150, 233, -1000, 546, -1000, 1863, -1000, -284, 233, 149,
	631, -286, -1000, 142, 233, -1000,
}
var yyPgo = [...]int{

	0, 1561, 114, 602, 1547, 1545, 1544, 23, 21, 16,
	14, 1542, 1541, 1540, 1537, 1536, 1530, 11, 2, 1528,
	1527, 1320, 19, 1524, 4, 1523, 3, 67, 1522, 1521,
	1520, 1519, 1518, 1517, 1516, 1515, 1509, 1507, 1506, 1504,
	1502, 1501, 1500, 1499, 1498, 1496, 1495, 1494, 1493, 127,
	1489, 1485, 1477, 96, 1476, 93, 1470, 1465, 1464, 71,
	122, 63, 66, 116, 1463, 1462, 55, 100, 95, 1461,
	56, 1459, 1458, 98, 1457, 1456, 1455, 82, 1450, 1447,
	1781, 1443, 108, 1442, 42, 34, 61, 1440, 1438, 1437,
	1436, 85, 496, 1435, 1433, 1432, 48, 1430, 1429, 117,
	1415, 84, 25, 31, 30, 45, 1414, 258, 75, 1413,
	83, 1412, 1411, 1410, 1409, 49, 1407, 32, 1401, 88,
	12, 36, 47, 77, 1400, 43, 91, 59, 46, 37,
	86, 1398, 89, 78, 1397, 1396, 556, 1394, 1393, 74,
	1390, 1389, 51, 1386, 591, 103, 58, 1385, 1384, 1383,
	1382, 53, 65, 1381, 1378, 133, 68, 87, 29, 1375,
	180, 94, 1377, 27, 1376, 1850, 90, 38, 64, 1371,
	1370, 62, 1369, 1368, 1366, 1365, 1364, 1363, 1362, 1361,
	1191, 1360, 1359, 1358, 140, 39, 1356, 1355, 80, 60,
	1354, 1353, 1351, 81, 50, 1350, 72, 52, 1348, 1347,
	1346, 1342, 33, 28, 1341, 1340, 1337, 1336, 54, 40,
	1333, 35, 20, 18, 41, 9, 44, 1331, 10, 1330,
	26, 1329, 7, 1328, 13, 76, 5, 6, 8, 1327,
	1326, 1325, 0, 92, 97, 1324, 1322, 104,
}
var yyR1 = [...]int{

	0, 230, 231, 231, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	6, 3, 4, 4, 5, 5, 7, 7, 52, 52,
	8, 9, 9, 9, 9, 234, 234, 75, 75, 73,
	73, 74, 74, 126, 126, 10, 10, 10, 10, 130,
	130, 133, 133, 133, 134, 134, 134, 134, 169, 169,
	120, 12, 12, 12, 12, 12, 12, 12, 12, 154,
	154, 31, 31, 32, 32, 32, 118, 118, 118, 11,
	11, 11, 11, 11, 17, 19, 19, 23, 23, 24,
	20, 20, 20, 20, 25, 25, 26, 21, 21, 30,
	30, 28, 28, 27, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 22, 22, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 224, 224, 223,
	222, 222, 221, 221, 220, 37, 204, 206, 206, 205,
	205, 205, 205, 194, 173, 173, 173, 173, 173, 173,
	173, 172, 172, 172, 172, 176, 176, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 175, 175, 175, 175,
	175, 175, 175, 175, 177, 177, 177, 177, 177, 178,
	178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
	178, 178, 178, 178, 179, 179, 179, 179, 179, 179,
	179, 179, 193, 193, 180, 180, 188, 188, 189, 189,
	189, 186, 186, 187, 187, 190, 190, 182, 183, 191,
	184, 184, 184, 185, 185, 185, 192, 192, 192, 192,
	181, 195, 195, 215, 215, 214, 214, 213, 213, 213,
	203, 203, 210, 210, 210, 210, 210, 198, 198, 198,
	197, 197, 199, 199, 202, 202, 212, 212, 211, 196,
	196, 216, 216, 216, 216, 216, 200, 200, 201, 201,
	201, 227, 228, 226, 226, 226, 226, 226, 207, 207,
	207, 208, 208, 208, 209, 209, 209, 229, 229, 33,
	33, 33, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 117, 117, 117, 35, 36, 36, 36, 36, 36,
	36, 36, 36, 152, 152, 225, 225, 225, 225, 225,
	219, 217, 217, 218, 218, 13, 38, 38, 14, 14,
	14, 14, 14, 14, 15, 15, 39, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 40, 64, 140,
	140, 138, 138, 141, 141, 139, 139, 139, 142, 142,
	142, 143, 143, 170, 170, 170, 41, 41, 46, 46,
	47, 48, 153, 153, 44, 44, 45, 45, 45, 45,
	58, 58, 235, 235, 43, 43, 42, 42, 42, 42,
	16, 236, 49, 50, 50, 51, 51, 51, 55, 55,
	55, 53, 53, 53, 54, 54, 61, 61, 60, 60,
	62, 62, 62, 62, 162, 162, 162, 161, 161, 65,
	65, 66, 66, 67, 67, 68, 68, 68, 68, 83,
	83, 84, 84, 84, 84, 84, 94, 94, 125, 125,
	127, 127, 69, 69, 69, 69, 70, 70, 71, 71,
	72, 72, 151, 151, 167, 167, 76, 76, 76, 78,
	77, 77, 77, 77, 79, 79, 81, 81, 80, 80,
	82, 85, 85, 85, 85, 86, 86, 63, 63, 63,
	63, 63, 63, 63, 137, 137, 88, 88, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 100, 100,
	100, 100, 100, 100, 89, 89, 89, 89, 89, 89,
	89, 59, 59, 101, 101, 101, 107, 102, 102, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 97, 97, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 237, 237, 99, 98, 98,
	98, 98, 98, 98, 56, 56, 56, 56, 56, 168,
	168, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 111, 111, 57, 57, 109, 109,
	110, 112, 112, 108, 108, 108, 91, 91, 91, 91,
	91, 91, 91, 91, 93, 93, 93, 113, 113, 114,
	114, 115, 115, 116, 116, 119, 121, 121, 121, 122,
	122, 122, 122, 123, 123, 123, 90, 90, 90, 90,
	90, 90, 124, 124, 124, 124, 128, 128, 103, 103,
	105, 105, 104, 106, 129, 129, 132, 132, 132, 132,
	131, 131, 131, 164, 164, 164, 135, 135, 144, 144,
	145, 145, 136, 136, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 150, 150, 149, 149, 149, 146, 146,
	146, 147, 147, 163, 163, 159, 159, 160, 160, 165,
	165, 166, 166, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 232, 233, 155,
	156, 156, 156,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 4, 6, 7,
	5, 10, 1, 3, 1, 3, 7, 8, 1, 1,
	9, 8, 7, 6, 6, 1, 1, 1, 3, 1,
	3, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	0, 2, 2, 11, 7, 9, 5, 5, 15, 0,
	3, 1, 1, 1, 1, 1, 0, 2, 2, 1,
	1, 1, 1, 1, 4, 5, 8, 1, 2, 5,
	7, 10, 8, 11, 1, 2, 5, 2, 4, 2,
	3, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	0, 2, 1, 3, 3, 4, 4, 2, 4, 1,
	3, 3, 3, 3, 0, 2, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 3, 2,
	2, 2, 2, 2, 1, 2, 2, 2, 1, 4,
	4, 3, 3, 2, 4, 5, 2, 3, 4, 2,
	2, 3, 3, 3, 3, 3, 4, 1, 1, 1,
	1, 1, 6, 6, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 3, 0, 5, 0, 3,
	5, 0, 1, 0, 1, 1, 2, 2, 3, 1,
	0, 3, 3, 0, 2, 2, 2, 1, 2, 1,
	2, 5, 4, 0, 1, 1, 2, 2, 3, 2,
	0, 1, 2, 3, 3, 2, 2, 1, 1, 1,
	1, 1, 0, 1, 0, 1, 1, 3, 3, 3,
	1, 10, 11, 11, 12, 12, 1, 1, 0, 2,
	2, 3, 3, 1, 1, 2, 2, 2, 0, 1,
	3, 1, 2, 3, 1, 1, 1, 0, 2, 1,
	1, 1, 6, 10, 9, 7, 7, 7, 9, 7,
	12, 14, 7, 7, 9, 9, 10, 5, 6, 8,
	7, 0, 1, 2, 4, 7, 5, 5, 5, 12,
	7, 5, 9, 0, 1, 1, 1, 1, 1, 1,
	7, 1, 3, 8, 8, 3, 3, 5, 4, 6,
	4, 4, 4, 4, 3, 2, 3, 4, 4, 3,
	6, 6, 4, 4, 4, 4, 4, 3, 3, 2,
	6, 2, 3, 4, 3, 7, 6, 5, 4, 2,
	4, 3, 4, 3, 3, 5, 2, 3, 3, 1,
	1, 0, 1, 1, 1, 0, 2, 2, 0, 2,
	2, 0, 2, 0, 1, 1, 2, 1, 1, 2,
	1, 1, 1, 1, 3, 3, 1, 1, 1, 1,
	0, 3, 1, 1, 2, 2, 2, 2, 3, 3,
	2, 0, 2, 0, 2, 1, 2, 2, 0, 1,
	1, 0, 1, 1, 0, 1, 0, 1, 1, 3,
	1, 2, 3, 5, 0, 1, 2, 1, 1, 0,
	2, 1, 3, 1, 1, 1, 3, 1, 3, 2,
	6, 1, 4, 6, 3, 2, 0, 3, 1, 3,
	1, 3, 4, 4, 4, 3, 2, 4, 0, 1,
	0, 2, 0, 1, 1, 1, 1, 2, 2, 1,
	2, 3, 2, 3, 2, 2, 2, 1, 1, 3,
	3, 0, 5, 5, 5, 0, 2, 1, 3, 3,
	2, 3, 1, 2, 0, 3, 1, 1, 3, 3,
	4, 4, 5, 3, 4, 5, 6, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 2, 2, 2, 2, 3, 1, 1, 1,
	1, 5, 6, 4, 4, 3, 6, 6, 6, 8,
	8, 8, 8, 9, 4, 7, 5, 4, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 8, 8, 0, 2, 3, 4, 4,
	4, 4, 4, 4, 0, 3, 4, 7, 3, 1,
	1, 2, 3, 3, 1, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 0, 3, 0,
	2, 0, 3, 1, 3, 2, 0, 1, 1, 0,
	2, 4, 4, 0, 2, 4, 2, 1, 3, 5,
	4, 6, 1, 3, 3, 5, 0, 5, 1, 3,
	1, 2, 3, 1, 1, 3, 3, 3, 3, 3,
	1, 2, 1, 1, 1, 1, 1, 1, 0, 2,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	1, 0, 1, 0, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 1, 1,
}
var yyChk = [...]int{

	-1000, -230, -1, -2, -6, -7, -8, -9, -10, -12,
	-33, -13, -14, -15, -39, -40, -41, -46, -47, -48,
	-44, -43, -42, -16, -21, -3, -4, 6, 7, -52,
	9, 10, 29, -37, 118, -34, -35, -36, 121, 120,
	157, 122, 150, 52, 193, 194, 196, 197, -235, -153,
	155, 156, 30, 31, 124, 191, -232, 8, 287, 119,
	152, 151, 25, 56, -231, 385, -115, 15, -51, 5,
	-49, -236, -49, -49, -49, -49, -49, -204, -206, 56,
	93, -147, 131, 74, 278, 127, -154, 128, -146, 178,
	33, 138, 137, 128, 128, 129, 131, 278, 127, 165,
	128, -80, -165, 59, -158, 297, 141, 329, 330, 193,
	204, 198, 232, 220, 298, 331, 142, 186, 218, 221,
	265, 140, 179, 332, 252, 260, 189, 68, 196, 274,
	333, 183, 185, 184, 190, 153, 216, 209, 334, 306,
	207, 27, 335, 262, 237, 336, 302, 261, 208, 124,
	337, 144, 138, 338, 238, 242, 339, 266, 340, 341,
	342, 202, 203, 343, 268, 236, 32, 139, 299, 37,
	162, 269, 240, 344, 235, 230, 345, 346, 347, 348,
	234, 201, 229, 181, 41, 244, 243, 245, 182, 264,
	223, 349, 350, 145, 351, 352, 210, 18, 353, 354,
	272, 156, 355, 356, 357, 358, 160, 359, 360, 361,
	263, 239, 241, 362, 135, 363, 164, 364, 301, 365,
	270, 206, 366, 146, 161, 155, 273, 367, 368, 369,
	370, 147, 371, 372, 373, 197, 187, 374, 375, 376,
	377, 172, 276, 267, 40, 191, 249, 378, 200, 137,
	192, 379, 194, 169, 180, 255, 188, 227, 163, 380,
	381, 214, 215, 233, 199, 228, 195, 165, 166, 157,
	382, 275, 250, 303, 222, 219, 170, 383, 131, 167,
	168, 384, 256, 257, 171, 300, 271, 217, 251, 128,
	111, 221, 265, 118, 253, 254, 262, -198, 263, 164,
	-170, 128, -138, 252, 256, 257, 171, 59, 129, 130,
	32, 267, 266, 258, -165, 195, -58, 122, 158, -80,
	-155, -155, -155, 255, 255, -155, -30, 192, -2, -136,
	131, 257, 133, -122, 17, 16, -5, -3, -232, 6,
	20, 21, -55, 42, 43, -50, -62, 102, -63, -165,
	-87, 76, -92, 28, 59, -158, 23, -91, -88, -108,
	-106, -107, 111, 112, 113, 100, 101, 108, 77, 114,
	-97, -95, -96, -98, 61, 60, 69, 62, 63, 64,
	65, 70, 71, 72, -159, -104, -232, 46, 47, 127,
	288, 289, 290, 291, 296, 148, 292, 79, 36, 277,
	286, 285, 284, 282, 283, 279, 281, 280, 294, 295,
	134, 278, 106, 287, -136, -136, 11, -73, -74, -80,
	-82, -165, -129, -169, 195, -132, 267, 266, -108, -131,
	-159, -165, 265, 221, 264, -205, 93, -194, 59, -80,
	129, -80, 287, -145, 134, -145, 165, -145, 85, -38,
	-80, -144, 134, -159, 59, -158, -144, -144, -144, -144,
	-80, 115, -80, 59, 29, -156, -232, -160, -159, -157,
	123, 149, 304, 75, 22, 24, 247, 78, 111, 16,
	79, 110, 288, 118, 50, 305, 279, 281, 277, 290,
	291, 278, 253, 28, 10, 307, 25, 151, 21, 104,
	120, 82, 83, 84, 154, 23, 152, 72, 148, 310,
	19, 53, 11, 13, 311, 312, 14, 134, 133, 95,
	129, 48, 8, 114, 26, 92, 44, 313, 34, 314,
	315, 316, 317, 46, 93, 17, 282, 283, 30, 318,
	296, 159, 106, 51, 38, 76, 319, 320, 70, 321,
	73, 54, 74, 15, 49, 322, 323, 324, 325, 94,
	121, 287, 47, 326, 127, 6, 293, 29, 150, 45,
	327, 128, 81, 294, 295, 132, 71, 5, 33, 31,
	9, 52, 55, 284, 285, 286, 36, 80, 12, 328,
	278, 127, 59, 164, 128, 165, 131, -156, -156, -200,
	11, 95, -156, 169, 170, -156, -141, -140, 166, 260,
	261, 255, 259, 12, -64, 93, 170, 255, 168, -156,
	-45, -2, -9, -7, -8, -2, 85, -155, -155, 29,
	61, 39, -233, 58, 128, -80, 118, 120, 123, 54,
	-123, 19, 30, -63, -165, -116, -119, -63, -115, -2,
	-49, 38, -53, 20, 21, 67, 11, -162, 75, 74,
	92, -161, 22, -159, 61, 115, -63, -89, 95, 76,
	93, 94, 78, 97, 96, 107, 100, 101, 102, 103,
	104, 105, 106, 98, 99, 110, 85, 86, 87, 88,
	89, 90, 91, -137, -232, -107, -232, 116, 117, -92,
	-92, -92, -92, -92, -92, -92, -92, -232, -2, -102,
	-63, -232, -232, -232, -232, -232, -232, -232, -232, -232,
	-232, -232, -111, -63, -232, -237, -99, -232, -237, -99,
	-237, -99, -237, -232, -237, -99, -237, -99, -237, -237,
	-99, -237, -232, -232, -232, -232, -232, -232, -81, 26,
	-80, -66, -67, -68, -69, -83, -107, -232, -80, -80,
	-73, -234, 57, 11, 55, -234, 57, 115, 57, -129,
	195, -130, -133, 268, 270, 85, -164, -159, 61, 28,
	115, 29, 58, 57, -80, -172, -176, -178, -177, -179,
	-174, -175, 218, 221, 225, 223, 219, 224, 111, 222,
	227, 228, 229, 230, 231, 232, 233, 234, 235, 236,
	237, 29, 153, 214, 215, 216, 217, 238, 239, 240,
	241, 242, 243, 244, 245, 198, 220, 298, 199, 200,
	201, 202, 203, 204, 206, 207, 208, 209, 210, 211,
	212, -159, 22, 131, 59, 76, 59, 59, -80, 59,
	57, 132, -73, 23, 54, -75, -80, 59, 59, 59,
	-166, -165, -157, -156, -156, -145, -145, -156, -156, -80,
	-80, -80, -80, -156, -156, 11, -139, 11, 95, -139,
	-63, -92, -143, 93, 54, 59, -28, -27, -29, 179,
	180, 181, 182, 183, 184, 185, 186, 187, 188, 189,
	190, 61, -80, -156, 167, 167, 128, 128, 172, -80,
	9, 95, 57, 18, 115, 57, -121, 24, 25, -122,
	-233, -55, -93, 39, 62, 65, -54, 45, -80, -63,
	-63, -100, 70, 76, 71, 72, -161, 102, -166, -160,
	-157, -92, -101, -104, -107, 66, 95, 93, 94, 78,
	-92, -92, -92, -92, -92, -92, -92, -92, -92, -92,
	-92, -92, -92, -92, -92, -168, 59, 61, 59, -91,
	-91, -159, -53, -233, 57, -233, -2, -60, -62, -60,
	-233, -63, -63, -108, 61, -60, -108, 61, -60, -60,
	-60, -53, -109, -110, 80, -108, -233, -92, -159, -159,
	-60, -61, -60, -60, -60, -126, 160, -80, 29, 57,
	-76, -78, -77, -79, 44, 48, 50, 45, 46, 47,
	51, -151, 22, -66, -232, -84, 160, -85, 22, -167,
	52, 133, 53, -165, 61, -126, 55, -66, -80, -66,
	-82, -165, 102, -132, -130, 57, 269, 271, 272, 54,
	73, -63, -185, 110, -160, -166, -207, -208, -209, -160,
	61, 62, -194, -195, -196, -210, 143, -216, 135, 137,
	33, -197, 144, 129, 34, 58, -173, -186, 250, -180,
	56, -180, -180, 226, 218, 221, 219, -180, -180, -180,
	-180, -180, -184, 221, -184, -184, -184, -184, 219, 56,
	56, -180, -180, -180, -188, 56, -188, 213, -189, 56,
	-189, -189, -189, -189, -163, 55, -120, -80, -156, 23,
	-156, -31, 175, 149, -80, -80, -80, 57, 59, 59,
	-201, 11, 95, -80, -94, 22, -165, -165, -142, 93,
	12, -59, 154, 61, -80, 57, 85, -148, 123, 120,
	121, 125, 126, -219, 247, 119, 221, 68, 28, 15,
	288, 160, 303, 59, 161, -80, -80, -80, -80, -80,
	123, 120, 40, -63, -63, -119, -123, -135, 19, 11,
	36, 36, -60, 70, 71, 72, 115, -232, -101, -92,
	-92, -92, -59, 75, -233, -61, -63, -233, 57, -233,
	-233, 57, 55, 22, 11, 11, -233, 11, 11, -233,
	-233, -233, -60, -112, -110, 82, -63, -233, -233, 57,
	57, -233, -233, -233, -233, -90, 29, 36, -2, -232,
	-232, -129, -67, -68, -68, -67, -68, 44, 44, 44,
	49, 44, 49, 44, -77, -165, -233, -232, 321, -167,
	-85, 129, 129, 129, -86, 12, -66, -86, -86, 115,
	-133, -134, 273, 270, 276, 59, 61, 115, 57, -209,
	85, 56, 59, 34, -197, -197, -202, 59, -202, 34,
	-190, -182, -183, -191, -192, -181, 70, 76, 28, 54,
	247, 135, 34, 33, 68, -187, 251, 62, -184, -184,
	-180, -180, -180, 226, -180, -184, -185, 29, -185, -185,
	-185, -185, -184, -193, 61, -193, 62, -188, 62, 54,
	-159, -2, 22, -32, 8, 9, 10, 132, -156, -80,
	-156, -156, -86, 59, 59, -139, -142, 321, 61, -63,
	-92, -27, -91, -155, -152, -225, -197, -229, -196, 136,
	140, 143, 144, 135, 160, -152, -225, 143, -197, 144,
	136, -149, -197, 132, 22, -152, -152, -203, 85, 160,
	-224, 55, 167, 247, 167, 41, -80, -65, 11, 102,
	-160, -61, -59, 75, -92, -233, -62, -171, 111, 218,
	153, 216, 209, 236, 223, 249, 214, 250, -168, -171,
	-92, -92, -92, -92, 297, -115, 84, -63, 81, -92,
	-92, -128, 54, -129, -103, -105, -104, -232, -2, -124,
	-159, -127, -159, -86, -71, -70, 54, 55, -72, 54,
	-70, 44, 44, -127, -92, -85, -232, -232, -232, -115,
	-63, -86, 270, 274, 275, -208, -209, -212, -211, -159,
	-216, -202, -202, 56, 70, -92, 9, 34, 34, 61,
	58, -185, -185, -184, -180, -185, 59, 111, -185, 58,
	57, 58, 57, 58, 57, -80, -120, -120, 54, -80,
	-142, -92, 56, -194, -155, -202, -146, 59, 59, -155,
	59, -159, 34, 59, -80, -159, -194, 59, -63, -159,
	-222, 300, -223, 59, -159, -159, -159, -86, -66, -233,
	-92, -233, -180, -180, -180, -189, -180, 203, -180, 203,
	-233, -233, 19, 19, 19, 19, -232, -57, 293, -63,
	57, 57, 27, -128, 57, -233, -233, -233, 57, 115,
	-233, 57, -115, -63, 56, -63, -233, -85, -151, -125,
	-159, -125, -125, -122, 58, 57, -180, -125, -96, -185,
	-184, 61, -184, 62, 62, 56, -2, -80, -194, -117,
	148, 149, -163, -199, -197, 59, -150, 132, 22, 132,
	-117, -194, 26, -221, -220, -160, 56, 55, -113, 13,
	-184, 59, -92, -92, -92, -92, -92, -233, 61, -92,
	-92, 34, -105, 36, -2, -232, -159, -159, -159, -122,
	-125, -84, -167, 57, -233, -233, -233, -214, -213, 55,
	139, 68, -211, -121, 58, -185, -185, 58, 58, -212,
	-120, 19, 58, -155, 59, 56, -202, 59, -159, -155,
	-117, -232, 57, 85, -125, -80, -114, 14, 16, -233,
	-233, -233, -233, -56, 95, 300, -233, -233, 9, -103,
	-2, 115, 58, -85, -159, -213, 59, -203, 61, 146,
	58, 173, -155, -212, -163, -155, -217, -218, 160, -220,
	-209, 58, -63, -102, -233, 298, 51, 301, -129, -233,
	-159, 62, -80, -215, -214, 174, 58, 56, -233, 57,
	-159, -224, 41, 299, 302, 56, -118, 176, 177, -215,
	-212, -218, 36, -222, 41, -125, -120, 59, 59, 58,
	162, 300, 58, -11, -17, -10, -7, -8, -9, 193,
	-215, 163, 301, -227, -228, 54, -120, -22, -18, -2,
	-7, -8, -9, -10, -19, -20, -21, -17, 79, 134,
	-232, 302, -228, 54, -227, 54, 10, 9, 385, -63,
	-63, -92, 159, -226, 147, 142, 145, 29, -226, 84,
	-18, -23, -24, 80, 81, -233, -233, 141, 28, 70,
	84, 82, -24, -63, -22, 79, -22, 81, 385, 385,
	-22, 84, 82, -25, -26, 83, 84, 385, 134, -22,
	84, 82, -26, -63, 79, 385, 134, -22, 81, 84,
	385, -22, 134, 84, 385, 134,
}
var yyDef = [...]int{

	26, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 691, 0, 441, 441, 441,
	441, 441, 441, 0, -2, 309, 310, 311, 0, 0,
	0, 0, -2, 417, 418, 0, 420, 421, 430, -2,
	1079, 1079, 0, 0, 1079, 0, 0, 38, 39, 742,
	433, 422, 423, 1077, 1, 3, 699, 0, 0, 445,
	448, 443, 0, 742, 742, 0, 0, 71, 72, 0,
	0, 0, 0, 0, 740, 740, 0, 740, 762, 0,
	758, 759, 760, 0, 738, 0, 738, 738, 738, 738,
	0, 365, 518, 769, 770, 893, 894, 895, 896, 897,
	898, 899, 900, 901, 902, 903, 904, 905, 906, 907,
	908, 909, 910, 911, 912, 913, 914, 915, 916, 917,
	918, 919, 920, 921, 922, 923, 924, 925, 926, 927,
	928, 929, 930, 931, 932, 933, 934, 935, 936, 937,
	938, 939, 940, 941, 942, 943, 944, 945, 946, 947,
	948, 949, 950, 951, 952, 953, 954, 955, 956, 957,
	958, 959, 960, 961, 962, 963, 964, 965, 966, 967,
	968, 969, 970, 971, 972, 973, 974, 975, 976, 977,
	978, 979, 980, 981, 982, 983, 984, 985, 986, 987,
	988, 989, 990, 991, 992, 993, 994, 995, 996, 997,
	998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007,
	1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017,
	1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027,
	1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037,
	1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047,
	1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057,
	1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067,
	1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 0,
	0, 0, 1080, 0, 1080, 1080, 379, 0, 381, 1080,
	0, 1080, 0, 389, 0, 0, 396, 1080, 267, 268,
	269, 414, 415, 402, 416, 419, 0, 0, 0, 434,
	435, 436, 437, 1079, 1079, 440, 107, 0, 32, 0,
	0, 0, 743, 703, 0, 0, 691, 34, 0, 441,
	446, 447, 451, 449, 450, 442, 0, 460, 464, 0,
	527, 0, 532, 534, -2, -2, 0, 569, 570, 571,
	572, 573, 0, 0, 0, 0, 0, 0, 0, 0,
	597, 598, 599, 600, 676, 677, 678, 679, 680, 681,
	682, 683, 536, 537, 673, 723, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 664, 0, 635,
	635, 635, 635, 635, 635, 635, 635, 635, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 49,
	51, 518, 55, 0, 1054, 724, -2, -2, 0, 0,
	673, 0, -2, 907, -2, 0, 0, 149, 0, 147,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 355,
	0, 0, 0, 0, 765, 766, 0, 0, 0, 0,
	364, 0, 366, 1080, 1080, 369, 1081, 1082, 767, 768,
	773, 774, 775, 776, 777, 778, 779, 780, 781, 782,
	783, 784, 785, 786, 787, 788, 789, 790, 791, 792,
	793, 794, 795, 796, 797, 798, 799, 800, 801, 802,
	803, 804, 805, 806, 807, 808, 809, 810, 811, 812,
	813, 814, 815, 816, 817, 818, 819, 820, 821, 822,
	823, 824, 825, 826, 827, 828, 829, 830, 831, 832,
	833, 834, 835, 836, 837, 838, 839, 840, 841, 842,
	843, 844, 845, 846, 847, 848, 849, 850, 851, 852,
	853, 854, 855, 856, 857, 858, 859, 860, 861, 862,
	863, 864, 865, 866, 867, 868, 869, 870, 871, 872,
	873, 874, 875, 876, 877, 878, 879, 880, 881, 882,
	883, 884, 885, 886, 887, 888, 889, 890, 891, 892,
	740, 740, 1080, 1080, 0, 0, 0, 377, 378, 0,
	286, 287, 382, 1080, 1080, 384, 0, 405, 405, 403,
	404, 399, 400, 0, 391, 0, 411, 393, 394, 397,
	424, -2, 427, 428, 429, -2, 0, 438, 439, 0,
	109, 0, 33, 1078, 0, 1080, 0, 0, 0, 0,
	27, 0, 0, 700, 0, 692, 693, 696, 699, 32,
	448, 0, 454, 452, 453, 444, 0, 461, 0, 0,
	0, 465, 0, 467, 468, 0, 530, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 554, 555, 556, 557,
	558, 559, 560, 533, 0, 547, 0, 0, 0, 589,
	590, 591, 592, 593, 594, 595, 0, 451, 32, 0,
	567, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 451, 0, 665, 0, 618, 627, 0, 619, 628,
	620, 629, 621, 0, 622, 630, 623, 631, 624, 625,
	632, 626, 0, 0, 0, 456, 0, 0, 53, 0,
	517, 0, 471, 473, 474, 475, -2, 0, 521, -2,
	0, 0, 0, 45, 46, 0, 0, 0, 0, 56,
	1054, 58, 59, 0, 0, 0, 243, 733, 734, 735,
	0, 731, 298, 0, 0, 154, 231, 162, 163, 164,
	224, 166, 224, 224, 0, 224, 224, 224, 224, 224,
	240, 240, 240, 240, 240, 207, 208, 209, 210, 211,
	0, 0, 184, 224, 224, 224, 188, 214, 215, 216,
	217, 218, 219, 220, 221, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 226, 226, 228, 228, 228, 228,
	228, 763, 70, 0, 1080, 0, 1080, 0, 145, 80,
	0, 0, 358, 739, 0, 360, 47, 361, 362, 363,
	519, 771, 772, 367, 368, 0, 0, 372, 373, 374,
	375, 376, 288, 383, 388, 0, 486, 0, 0, 408,
	390, 561, 392, 0, 0, 431, 108, 111, 0, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	125, 110, 0, 334, 0, 0, 0, 0, 0, 0,
	704, 0, 0, 0, 0, 0, 695, 697, 698, 703,
	35, 451, 0, 684, 0, 0, 0, 455, 30, 528,
	529, 531, 548, 0, 550, 552, 466, 462, 0, 674,
	-2, 538, 539, 563, 564, 565, 0, 0, 0, 0,
	561, 543, 0, 574, 575, 576, 577, 578, 579, 580,
	581, 582, 583, 584, 585, 588, 649, 650, 0, 586,
	587, 596, 456, 566, 0, 722, 32, 0, 458, 0,
	605, 0, 0, 571, 676, 0, 571, 676, 0, 0,
	0, 0, 671, 668, 0, 0, 636, 0, 0, 0,
	0, 0, 457, 0, 0, 0, 0, 516, 0, 0,
	0, 0, 0, 0, 506, 0, 0, 509, 0, 0,
	0, 0, 503, 0, 0, 479, 994, 481, 0, 521,
	0, 0, 0, 504, 505, 525, 0, 525, 50, 525,
	52, 0, 520, 725, 57, 0, 0, 62, 63, 726,
	727, 728, 729, 0, 674, 0, 146, 299, 301, 304,
	305, 306, 150, 151, 152, 0, 0, 280, 0, 0,
	274, 274, 0, 270, 271, 148, 153, 233, 232, 165,
	0, 240, 240, 224, 224, 224, 224, 193, 240, 196,
	199, 200, 243, 0, 243, 243, 243, 243, 240, 0,
	0, 185, 186, 187, 176, 0, 177, 226, 179, 0,
	180, 181, 182, 183, 0, 0, 0, 0, 76, 741,
	77, 0, 81, 82, 0, 356, 1080, 0, 1080, 1080,
	525, 0, 0, 405, 408, 0, 406, 407, 387, 0,
	0, 398, 0, 412, 395, 0, 0, 1079, -2, 343,
	755, 343, 343, 327, 260, 744, 745, 746, 747, 748,
	749, 750, 751, 752, 0, 137, 336, 338, 337, 341,
	0, 0, 0, 701, 702, 694, 28, 0, 736, 737,
	685, 686, 469, 549, 551, 553, 0, 456, 540, 561,
	544, 0, 541, 0, 535, 0, 568, -2, 0, 603,
	604, 0, 0, 0, 0, 0, 642, 0, 0, 643,
	0, 614, 691, 0, 669, 0, 0, 617, 637, 0,
	0, 638, 639, 640, 641, 716, 0, 0, -2, 0,
	0, 525, 472, 498, 500, 0, 495, 507, 508, 510,
	0, 512, 0, 514, 515, 476, 478, 0, 0, 521,
	485, 0, 0, 0, 691, 0, 525, 43, 44, 0,
	60, 61, 0, 0, 67, 244, 245, 0, 0, 302,
	0, 0, 0, 262, 274, 274, 265, 275, 266, 0,
	155, 156, 157, 158, 159, 160, 235, 0, 0, 0,
	239, 0, 247, 249, 0, 161, 234, 0, 243, 243,
	240, 191, 192, 224, 197, 243, 201, 0, 202, 203,
	204, 205, 243, 0, 222, 0, 0, 178, 0, 0,
	764, -2, 70, 0, 83, 84, 85, 0, 359, 48,
	370, 371, 380, 289, 290, 408, 386, 0, 409, 410,
	562, 112, 113, 312, 0, 1079, 274, 0, 328, 344,
	345, 346, 347, 348, 349, 0, 1079, 346, 0, 347,
	0, 0, 0, 756, 757, 0, 0, 0, 261, 0,
	140, 0, 0, 0, 0, 705, 29, 525, 0, 463,
	675, 0, 542, 0, 545, 601, 459, 0, 224, 224,
	654, 224, 228, 657, 224, 659, 224, 662, 0, 0,
	0, 0, 0, 0, 0, 666, 616, 672, 0, 0,
	0, 36, 0, 716, 706, 718, 720, 0, 32, 0,
	712, 0, 490, 691, 492, 499, 0, 0, 493, 0,
	494, 511, 513, 0, -2, 484, 0, 0, 0, 699,
	526, 42, 64, 65, 66, 300, 303, 0, 276, 224,
	279, 263, 264, 0, 236, 237, 0, 246, 248, 250,
	225, 189, 190, 243, 198, 194, 241, 242, 206, 240,
	0, 240, 0, 229, 0, 0, 74, 0, 0, 357,
	385, 487, 0, 331, 315, 763, 272, 308, 316, 317,
	322, 323, 0, 0, 319, 0, 331, 0, 330, 0,
	335, 0, 138, 139, 0, 0, 340, 687, 470, 602,
	546, 606, 651, 240, 655, 656, 658, 660, 661, 663,
	608, 607, 0, 0, 0, 0, 0, 0, 0, 670,
	0, 0, 0, 37, 0, 721, -2, 0, 0, 0,
	54, 0, 699, 496, 0, 501, 521, 482, 0, 0,
	488, 0, 0, 41, 252, 0, 696, 0, 238, 195,
	243, 223, 243, 0, 0, 0, -2, 0, 0, 1079,
	332, 0, 0, 274, 273, 329, 0, 753, 754, 0,
	1079, 331, 0, 141, 142, 0, 0, 0, 689, 0,
	652, 653, 0, 0, 0, 0, 644, 615, 667, 0,
	0, 0, 719, 0, -2, 0, 714, 713, 491, 40,
	0, 480, 521, 0, 522, 523, 524, 251, 255, 0,
	260, 0, 277, 278, 0, 212, 213, 227, 230, 0,
	75, 0, 1079, 314, 333, 0, 763, 318, 324, 325,
	1079, 0, 0, 0, 0, 342, 31, 0, 0, 609,
	611, 610, 612, 0, 0, 0, 633, 634, 0, 709,
	32, 0, 497, 483, 489, 256, 257, 0, 259, 0,
	253, 0, 313, 0, 0, 326, 0, 351, 0, 143,
	144, 137, 690, 688, 613, 0, 0, 0, 717, -2,
	715, 258, 0, 73, 254, 86, 253, 0, 350, 0,
	0, 140, 645, 0, 648, 0, 70, 0, 0, 320,
	0, 352, 0, 339, 646, 0, 0, 87, 88, 253,
	0, 0, 281, 70, 89, 90, 91, 92, 93, 0,
	321, 0, 0, 282, 283, 0, 78, 0, 126, -2,
	129, 130, 131, 132, 133, 134, 135, 136, 0, 0,
	0, 647, 284, 0, 285, 0, 0, 0, 0, 0,
	0, 0, 0, 291, 293, 294, 0, 0, 292, 94,
	127, 0, 97, 0, 0, 353, 354, 295, 296, 297,
	0, 0, 98, 0, 0, 95, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 99, 100, 0,
	0, 0, 105, 0, 96, 0, 102, 0, 0, 0,
	0, 0, 101, 0, 106, 103,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 77, 3, 3, 3, 105, 97, 3,
	56, 58, 102, 100, 57, 101, 115, 103, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 385,
	86, 85, 87, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 107, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 96, 3, 108,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 78, 79, 80, 81, 82, 83, 84, 88,
	89, 90, 91, 92, 93, 94, 95, 98, 99, 104,
	106, 109, 110, 111, 112, 113, 114, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:360
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:365
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:366
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:370
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 26:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:395
		{
			setParseTree(yylex, nil)
		}
	case 27:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:401
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 28:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:409
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 29:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:413
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 30:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:419
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 31:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:426
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:432
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:436
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:442
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:446
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:453
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].setExprs)
			yyVAL.statement = ins
		}
	case 37:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:465
		{
			cols := make(Columns, 0, len(yyDollar[7].setExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].setExprs))
			for _, updateList := range yyDollar[7].setExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].setExprs)}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:477
		{
			yyVAL.str = InsertStr
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:481
		{
			yyVAL.str = ReplaceStr
		}
	case 40:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:487
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].setExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 41:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:493
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 42:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:497
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:501
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 44:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:505
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:510
		{
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:511
		{
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:515
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName.ToViewName()}
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:519
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName.ToViewName())
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:525
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:529
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:535
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:539
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:544
		{
			yyVAL.partitions = nil
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:548
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:554
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:558
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:562
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 58:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:566
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:572
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:576
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:582
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:586
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:590
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:596
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:600
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:604
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:608
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:614
		{
			yyVAL.str = SessionStr
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:618
		{
			yyVAL.str = GlobalStr
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:623
		{
			yyVAL.int = yyPosition(yylex)
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:629
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			if len(yyDollar[1].ddl.TableSpec.Constraints) > 0 {
				yyDollar[1].ddl.ConstraintAction = AddStr
			}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:637
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 73:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:643
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: yyDollar[4].colIdent, Using: yyDollar[5].colIdent, Type: yyDollar[2].str, Columns: yyDollar[9].indexColumns, Options: yyDollar[11].indexOptions}}
		}
	case 74:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:647
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[3].tableName.ToViewName(), ViewExpr: yyDollar[6].selStmt, SubStatementPositionStart: yyDollar[5].int, SubStatementPositionEnd: yyDollar[7].int - 1}
		}
	case 75:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:651
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[5].tableName.ToViewName(), ViewExpr: yyDollar[8].selStmt, SubStatementPositionStart: yyDollar[7].int, SubStatementPositionEnd: yyDollar[9].int - 1, OrReplace: true}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:655
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 77:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:659
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 78:
		yyDollar = yyS[yypt-15 : yypt+1]
//line sql.y:663
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[8].tableName, TriggerSpec: &TriggerSpec{Name: string(yyDollar[4].bytes), Time: yyDollar[5].str, Event: yyDollar[6].str, Order: yyDollar[12].triggerOrder, Body: yyDollar[14].statement}, SubStatementPositionStart: yyDollar[13].int, SubStatementPositionEnd: yyDollar[15].int - 1}
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:668
		{
			yyVAL.empty = struct{}{}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:672
		{
			yyVAL.empty = struct{}{}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:678
		{
			yyVAL.str = BeforeStr
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:682
		{
			yyVAL.str = AfterStr
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:688
		{
			yyVAL.str = InsertStr
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:692
		{
			yyVAL.str = UpdateStr
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:696
		{
			yyVAL.str = DeleteStr
		}
	case 86:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:701
		{
			yyVAL.triggerOrder = nil
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:705
		{
			yyVAL.triggerOrder = &TriggerOrder{PrecedesOrFollows: FollowsStr, OtherTriggerName: string(yyDollar[2].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:709
		{
			yyVAL.triggerOrder = &TriggerOrder{PrecedesOrFollows: PrecedesStr, OtherTriggerName: string(yyDollar[2].bytes)}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:715
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:725
		{
			yyVAL.statement = &BeginEndBlock{Statements: yyDollar[2].statements}
		}
	case 95:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:731
		{
			yyVAL.statement = &CaseStatement{Expr: yyDollar[2].expr, Cases: yyDollar[3].caseStatementCases}
		}
	case 96:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:735
		{
			yyVAL.statement = &CaseStatement{Expr: yyDollar[2].expr, Cases: yyDollar[3].caseStatementCases, Else: yyDollar[5].statements}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:741
		{
			yyVAL.caseStatementCases = []CaseStatementCase{yyDollar[1].caseStatementCase}
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:745
		{
			yyVAL.caseStatementCases = append(yyVAL.caseStatementCases, yyDollar[2].caseStatementCase)
		}
	case 99:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:751
		{
			yyVAL.caseStatementCase = CaseStatementCase{Case: yyDollar[2].expr, Statements: yyDollar[4].statements}
		}
	case 100:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:757
		{
			conds := []IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}
			yyVAL.statement = &IfStatement{Conditions: conds}
		}
	case 101:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:762
		{
			conds := []IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}
			yyVAL.statement = &IfStatement{Conditions: conds, Else: yyDollar[7].statements}
		}
	case 102:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:767
		{
			conds := yyDollar[6].ifStatementConditions
			conds = append([]IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}, conds...)
			yyVAL.statement = &IfStatement{Conditions: conds}
		}
	case 103:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:773
		{
			conds := yyDollar[6].ifStatementConditions
			conds = append([]IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}, conds...)
			yyVAL.statement = &IfStatement{Conditions: conds, Else: yyDollar[8].statements}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:781
		{
			yyVAL.ifStatementConditions = []IfStatementCondition{yyDollar[1].ifStatementCondition}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:785
		{
			yyVAL.ifStatementConditions = append(yyVAL.ifStatementConditions, yyDollar[2].ifStatementCondition)
		}
	case 106:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:791
		{
			yyVAL.ifStatementCondition = IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:797
		{
			yyVAL.statement = &Signal{SqlStateValue: string(yyDollar[2].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:801
		{
			yyVAL.statement = &Signal{SqlStateValue: string(yyDollar[2].bytes), Info: yyDollar[4].signalInfos}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:807
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:811
		{
			yyVAL.bytes = yyDollar[3].bytes
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:817
		{
			yyVAL.signalInfos = []SignalInfo{yyDollar[1].signalInfo}
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:821
		{
			yyVAL.signalInfos = append(yyVAL.signalInfos, yyDollar[3].signalInfo)
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:827
		{
			yyVAL.signalInfo = SignalInfo{Name: string(yyDollar[1].bytes), Value: yyDollar[3].expr.(*SQLVal)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:833
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:850
		{
			yyVAL.statements = Statements{yyDollar[1].statement}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:854
		{
			yyVAL.statements = append(yyVAL.statements, yyDollar[3].statement)
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:860
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:873
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:877
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:883
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:888
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:893
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:899
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:904
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:910
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 145:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:916
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName, IfNotExists: ne}
			setDDL(yylex, yyVAL.ddl)
		}
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:927
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:934
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:938
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:944
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:949
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:953
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:957
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:963
		{
			if err := yyDollar[2].columnType.merge(yyDollar[3].columnType); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:972
		{
			yyVAL.columnType = ColumnType{}
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:976
		{
			opt := ColumnType{NotNull: yyDollar[2].boolVal, sawnull: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:985
		{
			opt := ColumnType{Default: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:994
		{
			opt := ColumnType{OnUpdate: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1003
		{
			opt := ColumnType{Autoincrement: yyDollar[2].boolVal, sawai: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1012
		{
			opt := ColumnType{KeyOpt: yyDollar[2].colKeyOpt}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1021
		{
			opt := ColumnType{Comment: yyDollar[2].sqlVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1032
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1043
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1048
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1054
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1058
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1062
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1066
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1070
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1074
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1078
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1082
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1086
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1092
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1098
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1104
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1110
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1116
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1122
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1128
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1134
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1142
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1146
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1150
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1154
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1158
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 189:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1164
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 190:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1168
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1172
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1176
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1180
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 194:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1184
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 195:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1188
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1192
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1196
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 198:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1200
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Length: yyDollar[4].sqlVal}
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1204
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1208
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1212
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1216
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1220
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1224
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1228
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 206:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1232
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1236
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1240
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1244
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1248
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1252
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 212:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1256
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 213:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1261
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1267
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1271
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1275
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1279
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1283
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1287
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1291
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1295
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1301
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[1].bytes))
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1306
		{
			yyVAL.strs = append(yyDollar[1].strs, string(yyDollar[3].bytes))
		}
	case 224:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1311
		{
			yyVAL.sqlVal = nil
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1315
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 226:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1320
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 227:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1324
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 228:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1332
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1336
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 230:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1342
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 231:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1350
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1354
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 233:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1359
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1363
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1370
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1374
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1380
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1386
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1392
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 240:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1397
		{
			yyVAL.str = ""
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1401
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1405
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 243:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1410
		{
			yyVAL.str = ""
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1414
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1418
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1424
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1428
		{
			yyVAL.colKeyOpt = colKey
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1432
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1436
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1442
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 251:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1448
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1452
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 253:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1457
		{
			yyVAL.indexOptions = nil
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1461
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1467
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1471
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1477
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1481
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1486
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1492
		{
			yyVAL.str = ""
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1496
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1502
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1506
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1510
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1514
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1518
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1524
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1528
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1532
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1538
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1542
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 272:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1547
		{
			yyVAL.str = ""
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1551
		{
			yyVAL.str = yyDollar[1].str
		}
	case 274:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1556
		{
			yyVAL.str = ""
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1560
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1566
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1570
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1576
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal, Order: yyDollar[3].str}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1582
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1586
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 281:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1593
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 282:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1597
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 283:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1601
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 284:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1605
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 285:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1609
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[12].ReferenceAction, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1615
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1619
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1624
		{
			yyVAL.str = ""
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1628
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1632
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1638
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1644
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1650
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1654
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1658
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1662
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1666
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1671
		{
			yyVAL.str = ""
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1675
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1679
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1687
		{
			yyVAL.str = yyDollar[1].str
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1691
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1695
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1701
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1705
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1709
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1714
		{
			yyVAL.str = ""
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1718
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 312:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1729
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 313:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1733
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			ddl.Column = yyDollar[8].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 314:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1740
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 315:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1747
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 316:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1751
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: DropStr, Column: NewColIdent(string(yyDollar[7].bytes)), Table: yyDollar[4].tableName}
		}
	case 317:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1755
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 318:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1759
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: RenameStr, Table: yyDollar[4].tableName, Column: NewColIdent(string(yyDollar[7].bytes)), ToColumn: NewColIdent(string(yyDollar[9].bytes))}
		}
	case 319:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1763
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 320:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1768
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[7].str), Using: yyDollar[8].colIdent, Columns: yyDollar[10].indexColumns, Options: yyDollar[12].indexOptions}}
		}
	case 321:
		yyDollar = yyS[yypt-14 : yypt+1]
//line sql.y:1772
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[9].str), Type: yyDollar[7].str, Using: yyDollar[10].colIdent, Columns: yyDollar[12].indexColumns, Options: yyDollar[14].indexOptions}}
		}
	case 322:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1776
		{
			yyVAL.statement = &DDL{Action: AlterStr, ConstraintAction: DropStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[7].bytes)}}}}
		}
	case 323:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1781
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[7].colIdent}}
		}
	case 324:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1785
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: RenameStr, FromName: yyDollar[7].colIdent, ToName: yyDollar[9].colIdent}}
		}
	case 325:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1789
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ModifyStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 326:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1796
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ChangeStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, Column: NewColIdent(string(yyDollar[7].bytes)), ColumnOrder: yyDollar[9].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			yyVAL.statement = ddl
		}
	case 327:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1802
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 328:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1806
		{
			ddl := &DDL{Action: AlterStr, ConstraintAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddConstraint(yyDollar[6].constraintDefinition)
			yyVAL.statement = ddl
		}
	case 329:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1812
		{
			yyVAL.statement = &DDL{Action: AlterStr, ConstraintAction: DropStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[8].bytes), Details: &ForeignKeyDefinition{}}}}}
		}
	case 330:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1817
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, AutoIncSpec: &AutoIncSpec{Value: yyDollar[7].expr}}
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1822
		{
			yyVAL.columnOrder = nil
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1826
		{
			yyVAL.columnOrder = &ColumnOrder{First: true}
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1830
		{
			yyVAL.columnOrder = &ColumnOrder{AfterColumn: NewColIdent(string(yyDollar[2].bytes))}
		}
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1836
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 335:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1842
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 336:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1854
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 337:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1864
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 338:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1868
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 339:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1872
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 340:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1885
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 341:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1895
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 342:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1899
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1912
		{
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1914
		{
		}
	case 350:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1925
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1931
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1935
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 353:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1941
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 354:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1945
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1951
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1957
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 357:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1961
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 358:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1969
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 359:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1977
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[3].colIdent}}
		}
	case 360:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1981
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromViews: yyDollar[4].tableNames, IfExists: exists}
		}
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1989
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 362:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1993
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1997
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, TriggerSpec: &TriggerSpec{Name: string(yyDollar[4].bytes)}, IfExists: exists}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2007
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2011
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2016
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 367:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2022
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 368:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2027
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2031
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 370:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2035
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 371:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2039
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 372:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2044
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 373:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2048
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2052
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 375:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2056
		{
			yyVAL.statement = &Show{Type: CreateTriggerStr, Table: yyDollar[4].tableName}
		}
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2060
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2064
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2068
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2072
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 380:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2076
		{
			yyVAL.statement = &Show{Type: IndexStr, Table: yyDollar[4].tableName, Database: yyDollar[5].str, ShowIndexFilterOpt: yyDollar[6].expr}
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2080
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2084
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 383:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2088
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2092
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 385:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2096
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 386:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2101
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[6].showFilter, AsOf: yyDollar[5].expr}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 387:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2111
		{
			yyVAL.statement = &Show{Type: string(yyDollar[3].bytes), ShowTablesOpt: &ShowTablesOpt{DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}}
		}
	case 388:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2115
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2119
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 390:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2123
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2129
		{
			// Cannot dereference $3 directly, or else the parser stackcannot be pooled. See yyParsePooled
			cmp := yyDollar[3].expr.(*ComparisonExpr)
			cmp.Left = &ColName{Name: NewColIdent("collation")}
			var ex Expr = cmp
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &ex}
		}
	case 392:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2137
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2142
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2146
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 395:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2150
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2154
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2168
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2174
		{
			yyVAL.expr = &ComparisonExpr{Operator: LikeStr, Right: yyDollar[2].expr, Escape: yyDollar[3].expr}
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2180
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2184
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 401:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2190
		{
			yyVAL.str = ""
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2194
		{
			yyVAL.str = "full "
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2200
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2204
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 405:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2210
		{
			yyVAL.str = ""
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2214
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2218
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 408:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2224
		{
			yyVAL.showFilter = nil
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2228
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2232
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 411:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2238
		{
			yyVAL.showFilter = nil
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2242
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 413:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2248
		{
			yyVAL.str = ""
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2252
		{
			yyVAL.str = SessionStr
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2256
		{
			yyVAL.str = GlobalStr
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2262
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2266
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2272
		{
			yyVAL.statement = &Begin{}
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2276
		{
			yyVAL.statement = &Begin{}
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2282
		{
			yyVAL.statement = &Commit{}
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2288
		{
			yyVAL.statement = &Rollback{}
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2293
		{
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2294
		{
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2298
		{
			yyVAL.statement = &Explain{ExplainFormat: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2302
		{
			yyVAL.statement = &Explain{Analyze: true, ExplainFormat: TreeStr, Statement: yyDollar[3].selStmt}
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2308
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2316
		{
			yyVAL.str = ""
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2320
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2331
		{
			yyVAL.statement = &Show{Type: "columns", OnTable: yyDollar[2].tableName}
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2335
		{
			yyVAL.statement = &OtherRead{}
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2341
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2345
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2349
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2353
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2359
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 441:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2363
		{
			setAllowComments(yylex, true)
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2367
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 443:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2373
		{
			yyVAL.bytes2 = nil
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2377
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2383
		{
			yyVAL.str = UnionStr
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2387
		{
			yyVAL.str = UnionAllStr
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2391
		{
			yyVAL.str = UnionDistinctStr
		}
	case 448:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2396
		{
			yyVAL.str = ""
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2400
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2404
		{
			yyVAL.str = SQLCacheStr
		}
	case 451:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2409
		{
			yyVAL.str = ""
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2413
		{
			yyVAL.str = ""
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2417
		{
			yyVAL.str = DistinctStr
		}
	case 454:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2422
		{
			yyVAL.str = ""
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2426
		{
			yyVAL.str = StraightJoinHint
		}
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2431
		{
			yyVAL.selectExprs = nil
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2435
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2441
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2445
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2451
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2455
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2459
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 463:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2463
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 464:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2468
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2472
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2476
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2483
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 469:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2488
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2492
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2498
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2502
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2512
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2516
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2520
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2526
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2532
		{
			yyVAL.aliasedTableName = yyDollar[2].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
		}
	case 480:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2537
		{
			yyVAL.aliasedTableName = yyDollar[6].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
			yyVAL.aliasedTableName.Partitions = yyDollar[4].partitions
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2548
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Hints: yyDollar[1].indexHints}
		}
	case 482:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2552
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, Hints: yyDollar[4].indexHints}
		}
	case 483:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2556
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, As: yyDollar[5].tableIdent, Hints: yyDollar[6].indexHints}
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2560
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2564
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[1].tableIdent, Hints: yyDollar[2].indexHints}
		}
	case 486:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2575
		{
			yyVAL.expr = nil
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2579
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2585
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2589
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2595
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2599
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 492:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2612
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 493:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2616
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 494:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2620
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2624
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2630
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 497:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2632
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 498:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2636
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2638
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 500:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2642
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2644
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 502:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2647
		{
			yyVAL.empty = struct{}{}
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2649
		{
			yyVAL.empty = struct{}{}
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2654
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2660
		{
			yyVAL.str = JoinStr
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2664
		{
			yyVAL.str = JoinStr
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2668
		{
			yyVAL.str = JoinStr
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2674
		{
			yyVAL.str = StraightJoinStr
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2680
		{
			yyVAL.str = LeftJoinStr
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2684
		{
			yyVAL.str = LeftJoinStr
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2688
		{
			yyVAL.str = RightJoinStr
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2692
		{
			yyVAL.str = RightJoinStr
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2698
		{
			yyVAL.str = NaturalJoinStr
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2702
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2712
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2716
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2722
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2726
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2732
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 521:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2737
		{
			yyVAL.indexHints = nil
		}
	case 522:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2741
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 523:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2745
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 524:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2749
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 525:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2754
		{
			yyVAL.expr = nil
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2758
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2764
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2768
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2772
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2776
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2780
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2784
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2788
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 534:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2794
		{
			yyVAL.str = ""
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2798
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2804
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2808
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2814
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2818
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 540:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2822
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 541:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2826
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 542:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2830
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2834
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 544:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2838
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 545:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2842
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 546:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2846
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2850
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2856
		{
			yyVAL.str = IsNullStr
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2860
		{
			yyVAL.str = IsNotNullStr
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2864
		{
			yyVAL.str = IsTrueStr
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2868
		{
			yyVAL.str = IsNotTrueStr
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2872
		{
			yyVAL.str = IsFalseStr
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2876
		{
			yyVAL.str = IsNotFalseStr
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2882
		{
			yyVAL.str = EqualStr
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2886
		{
			yyVAL.str = LessThanStr
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2890
		{
			yyVAL.str = GreaterThanStr
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2894
		{
			yyVAL.str = LessEqualStr
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2898
		{
			yyVAL.str = GreaterEqualStr
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2902
		{
			yyVAL.str = NotEqualStr
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2906
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 561:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2911
		{
			yyVAL.expr = nil
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2915
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2921
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2925
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2929
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2935
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2941
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2945
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2951
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2955
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2959
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2963
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2967
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2971
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2975
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2979
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2983
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2987
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2991
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2995
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2999
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3003
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3007
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3011
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3015
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3019
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3023
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3027
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3031
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3035
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3039
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3043
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3051
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3065
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3069
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3073
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 601:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3091
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: yyDollar[3].str == DistinctStr, Exprs: yyDollar[4].selectExprs}
		}
	case 602:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3095
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 603:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3105
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 604:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3109
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3113
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema")}
		}
	case 606:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3117
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 607:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3121
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 608:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3125
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 609:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3129
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 610:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3133
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 611:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3137
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 612:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3141
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 613:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3145
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 614:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3149
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("first"), Exprs: yyDollar[3].selectExprs}
		}
	case 615:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3153
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 616:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3157
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 617:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3161
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3171
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3175
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3179
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3184
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3189
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3194
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3200
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3205
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3209
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_user")}
		}
	case 627:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3214
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3218
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3222
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3227
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3232
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3237
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 633:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3241
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 634:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3245
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3255
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 638:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3265
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 639:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3269
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 640:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3273
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 641:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3277
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 642:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3281
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 643:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3285
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 644:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3291
		{
			yyVAL.str = ""
		}
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3295
		{
			yyVAL.str = BooleanModeStr
		}
	case 646:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3299
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 647:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3303
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3307
		{
			yyVAL.str = QueryExpansionStr
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3313
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3317
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3323
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3327
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3331
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3335
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3339
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 656:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3343
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3349
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 658:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3353
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3357
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3361
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3365
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3369
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3373
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 664:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3378
		{
			yyVAL.expr = nil
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3382
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 666:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3387
		{
			yyVAL.str = string("")
		}
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3391
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3397
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3401
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 670:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3407
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 671:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3412
		{
			yyVAL.expr = nil
		}
	case 672:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3416
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3422
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 674:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3426
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 675:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3430
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3436
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3440
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3444
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3448
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3452
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3456
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3460
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3464
		{
			yyVAL.expr = &NullVal{}
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3470
		{
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 685:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3474
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 686:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3478
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 687:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3483
		{
			yyVAL.exprs = nil
		}
	case 688:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3487
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 689:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3492
		{
			yyVAL.expr = nil
		}
	case 690:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3496
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 691:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3501
		{
			yyVAL.orderBy = nil
		}
	case 692:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3505
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3511
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 694:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3515
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 695:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3521
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 696:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3526
		{
			yyVAL.str = AscScr
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3530
		{
			yyVAL.str = AscScr
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3534
		{
			yyVAL.str = DescScr
		}
	case 699:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3539
		{
			yyVAL.limit = nil
		}
	case 700:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3543
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 701:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3547
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 702:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3551
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 703:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3556
		{
			yyVAL.str = ""
		}
	case 704:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3560
		{
			yyVAL.str = ForUpdateStr
		}
	case 705:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3564
		{
			yyVAL.str = ShareModeStr
		}
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3577
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3581
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 708:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3585
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 709:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3590
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 710:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3594
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 711:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3598
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3605
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 713:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3609
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 714:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3613
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 715:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3617
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 716:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3622
		{
			yyVAL.setExprs = nil
		}
	case 717:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3626
		{
			yyVAL.setExprs = yyDollar[5].setExprs
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3632
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 719:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3636
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3642
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 721:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3646
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 722:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3652
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3658
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3668
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 725:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3672
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 726:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3678
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: NewStrVal([]byte("on"))}
		}
	case 727:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3682
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: NewStrVal([]byte("off"))}
		}
	case 728:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3686
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 729:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3690
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 731:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3697
		{
			yyVAL.bytes = []byte("charset")
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3704
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3708
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3712
		{
			yyVAL.expr = &Default{}
		}
	case 738:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3721
		{
			yyVAL.byt = 0
		}
	case 739:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3723
		{
			yyVAL.byt = 1
		}
	case 740:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3726
		{
			yyVAL.byt = 0
		}
	case 741:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3728
		{
			yyVAL.byt = 1
		}
	case 742:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3731
		{
			yyVAL.str = ""
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3733
		{
			yyVAL.str = IgnoreStr
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3737
		{
			yyVAL.empty = struct{}{}
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3739
		{
			yyVAL.empty = struct{}{}
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3741
		{
			yyVAL.empty = struct{}{}
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3743
		{
			yyVAL.empty = struct{}{}
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3745
		{
			yyVAL.empty = struct{}{}
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3747
		{
			yyVAL.empty = struct{}{}
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3749
		{
			yyVAL.empty = struct{}{}
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3751
		{
			yyVAL.empty = struct{}{}
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3753
		{
			yyVAL.empty = struct{}{}
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3757
		{
			yyVAL.empty = struct{}{}
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3759
		{
			yyVAL.empty = struct{}{}
		}
	case 755:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3762
		{
			yyVAL.empty = struct{}{}
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3764
		{
			yyVAL.empty = struct{}{}
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3766
		{
			yyVAL.empty = struct{}{}
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3770
		{
			yyVAL.str = UniqueStr
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3772
		{
			yyVAL.str = FulltextStr
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3774
		{
			yyVAL.str = SpatialStr
		}
	case 761:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3777
		{
			yyVAL.str = ""
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3779
		{
			yyVAL.str = yyDollar[1].str
		}
	case 763:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3782
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 764:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3784
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3788
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3792
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3799
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3805
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3809
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3816
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1077:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4146
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1078:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4155
		{
			decNesting(yylex)
		}
	case 1079:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4160
		{
			skipToEnd(yylex)
		}
	case 1080:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4165
		{
			skipToEnd(yylex)
		}
	case 1081:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4169
		{
			skipToEnd(yylex)
		}
	case 1082:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4173
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
