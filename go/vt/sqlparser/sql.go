// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func yyPosition(yylex interface{}) int {
	return yylex.(*Tokenizer).Position
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:57
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	int                  int
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	asOf                 *AsOf
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	columnOrder          *ColumnOrder
	triggerOrder         *TriggerOrder
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const UNLOCK = 57373
const KEYS = 57374
const UNIQUE = 57375
const KEY = 57376
const SYSTEM_TIME = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const INTEGRAL = 57401
const FLOAT = 57402
const HEXNUM = 57403
const VALUE_ARG = 57404
const LIST_ARG = 57405
const COMMENT = 57406
const COMMENT_KEYWORD = 57407
const BIT_LITERAL = 57408
const NULL = 57409
const TRUE = 57410
const FALSE = 57411
const OFF = 57412
const OR = 57413
const AND = 57414
const NOT = 57415
const BETWEEN = 57416
const CASE = 57417
const WHEN = 57418
const THEN = 57419
const ELSE = 57420
const END = 57421
const LE = 57422
const GE = 57423
const NE = 57424
const NULL_SAFE_EQUAL = 57425
const IS = 57426
const LIKE = 57427
const REGEXP = 57428
const IN = 57429
const SHIFT_LEFT = 57430
const SHIFT_RIGHT = 57431
const DIV = 57432
const MOD = 57433
const UNARY = 57434
const COLLATE = 57435
const BINARY = 57436
const UNDERSCORE_BINARY = 57437
const UNDERSCORE_UTF8MB4 = 57438
const INTERVAL = 57439
const JSON_EXTRACT_OP = 57440
const JSON_UNQUOTE_EXTRACT_OP = 57441
const CREATE = 57442
const ALTER = 57443
const DROP = 57444
const RENAME = 57445
const ANALYZE = 57446
const ADD = 57447
const FLUSH = 57448
const MODIFY = 57449
const CHANGE = 57450
const SCHEMA = 57451
const TABLE = 57452
const INDEX = 57453
const INDEXES = 57454
const VIEW = 57455
const TO = 57456
const IGNORE = 57457
const IF = 57458
const PRIMARY = 57459
const COLUMN = 57460
const SPATIAL = 57461
const FULLTEXT = 57462
const KEY_BLOCK_SIZE = 57463
const CHECK = 57464
const ACTION = 57465
const CASCADE = 57466
const CONSTRAINT = 57467
const FOREIGN = 57468
const NO = 57469
const REFERENCES = 57470
const RESTRICT = 57471
const FIRST = 57472
const AFTER = 57473
const SHOW = 57474
const DESCRIBE = 57475
const EXPLAIN = 57476
const DATE = 57477
const ESCAPE = 57478
const REPAIR = 57479
const OPTIMIZE = 57480
const TRUNCATE = 57481
const FORMAT = 57482
const MAXVALUE = 57483
const PARTITION = 57484
const REORGANIZE = 57485
const LESS = 57486
const THAN = 57487
const PROCEDURE = 57488
const TRIGGER = 57489
const VINDEX = 57490
const VINDEXES = 57491
const STATUS = 57492
const VARIABLES = 57493
const WARNINGS = 57494
const SEQUENCE = 57495
const EACH = 57496
const ROW = 57497
const BEFORE = 57498
const FOLLOWS = 57499
const PRECEDES = 57500
const DEFINER = 57501
const BEGIN = 57502
const START = 57503
const TRANSACTION = 57504
const COMMIT = 57505
const ROLLBACK = 57506
const BIT = 57507
const TINYINT = 57508
const SMALLINT = 57509
const MEDIUMINT = 57510
const INT = 57511
const INTEGER = 57512
const BIGINT = 57513
const INTNUM = 57514
const REAL = 57515
const DOUBLE = 57516
const FLOAT_TYPE = 57517
const DECIMAL = 57518
const NUMERIC = 57519
const DEC = 57520
const FIXED = 57521
const PRECISION = 57522
const TIME = 57523
const TIMESTAMP = 57524
const DATETIME = 57525
const YEAR = 57526
const CHAR = 57527
const VARCHAR = 57528
const BOOL = 57529
const CHARACTER = 57530
const VARBINARY = 57531
const NCHAR = 57532
const NVARCHAR = 57533
const NATIONAL = 57534
const VARYING = 57535
const TEXT = 57536
const TINYTEXT = 57537
const MEDIUMTEXT = 57538
const LONGTEXT = 57539
const LONG = 57540
const BLOB = 57541
const TINYBLOB = 57542
const MEDIUMBLOB = 57543
const LONGBLOB = 57544
const JSON = 57545
const ENUM = 57546
const GEOMETRY = 57547
const POINT = 57548
const LINESTRING = 57549
const POLYGON = 57550
const GEOMETRYCOLLECTION = 57551
const MULTIPOINT = 57552
const MULTILINESTRING = 57553
const MULTIPOLYGON = 57554
const NULLX = 57555
const AUTO_INCREMENT = 57556
const APPROXNUM = 57557
const SIGNED = 57558
const UNSIGNED = 57559
const ZEROFILL = 57560
const COLLATION = 57561
const DATABASES = 57562
const SCHEMAS = 57563
const TABLES = 57564
const VITESS_METADATA = 57565
const VSCHEMA = 57566
const FULL = 57567
const PROCESSLIST = 57568
const COLUMNS = 57569
const FIELDS = 57570
const ENGINES = 57571
const PLUGINS = 57572
const NAMES = 57573
const CHARSET = 57574
const GLOBAL = 57575
const SESSION = 57576
const ISOLATION = 57577
const LEVEL = 57578
const READ = 57579
const WRITE = 57580
const ONLY = 57581
const REPEATABLE = 57582
const COMMITTED = 57583
const UNCOMMITTED = 57584
const SERIALIZABLE = 57585
const CURRENT_TIMESTAMP = 57586
const DATABASE = 57587
const CURRENT_DATE = 57588
const CURRENT_TIME = 57589
const LOCALTIME = 57590
const LOCALTIMESTAMP = 57591
const UTC_DATE = 57592
const UTC_TIME = 57593
const UTC_TIMESTAMP = 57594
const REPLACE = 57595
const CONVERT = 57596
const CAST = 57597
const SUBSTR = 57598
const SUBSTRING = 57599
const GROUP_CONCAT = 57600
const SEPARATOR = 57601
const TIMESTAMPADD = 57602
const TIMESTAMPDIFF = 57603
const MATCH = 57604
const AGAINST = 57605
const BOOLEAN = 57606
const LANGUAGE = 57607
const WITH = 57608
const QUERY = 57609
const EXPANSION = 57610
const UNUSED = 57611
const ARRAY = 57612
const CUME_DIST = 57613
const DESCRIPTION = 57614
const DENSE_RANK = 57615
const EMPTY = 57616
const EXCEPT = 57617
const FIRST_VALUE = 57618
const GROUPING = 57619
const GROUPS = 57620
const JSON_TABLE = 57621
const LAG = 57622
const LAST_VALUE = 57623
const LATERAL = 57624
const LEAD = 57625
const MEMBER = 57626
const NTH_VALUE = 57627
const NTILE = 57628
const OF = 57629
const OVER = 57630
const PERCENT_RANK = 57631
const RANK = 57632
const RECURSIVE = 57633
const ROW_NUMBER = 57634
const SYSTEM = 57635
const WINDOW = 57636
const ACTIVE = 57637
const ADMIN = 57638
const BUCKETS = 57639
const CLONE = 57640
const COMPONENT = 57641
const DEFINITION = 57642
const ENFORCED = 57643
const EXCLUDE = 57644
const FOLLOWING = 57645
const GEOMCOLLECTION = 57646
const GET_MASTER_PUBLIC_KEY = 57647
const HISTOGRAM = 57648
const HISTORY = 57649
const INACTIVE = 57650
const INVISIBLE = 57651
const LOCKED = 57652
const MASTER_COMPRESSION_ALGORITHMS = 57653
const MASTER_PUBLIC_KEY_PATH = 57654
const MASTER_TLS_CIPHERSUITES = 57655
const MASTER_ZSTD_COMPRESSION_LEVEL = 57656
const NESTED = 57657
const NETWORK_NAMESPACE = 57658
const NOWAIT = 57659
const NULLS = 57660
const OJ = 57661
const OLD = 57662
const OPTIONAL = 57663
const ORDINALITY = 57664
const ORGANIZATION = 57665
const OTHERS = 57666
const PATH = 57667
const PERSIST = 57668
const PERSIST_ONLY = 57669
const PRECEDING = 57670
const PRIVILEGE_CHECKS_USER = 57671
const PROCESS = 57672
const RANDOM = 57673
const REFERENCE = 57674
const REQUIRE_ROW_FORMAT = 57675
const RESOURCE = 57676
const RESPECT = 57677
const RESTART = 57678
const RETAIN = 57679
const REUSE = 57680
const ROLE = 57681
const SECONDARY = 57682
const SECONDARY_ENGINE = 57683
const SECONDARY_LOAD = 57684
const SECONDARY_UNLOAD = 57685
const SKIP = 57686
const SRID = 57687
const THREAD_PRIORITY = 57688
const TIES = 57689
const UNBOUNDED = 57690
const VCPU = 57691
const VISIBLE = 57692

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"UNIQUE",
	"KEY",
	"SYSTEM_TIME",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"MODIFY",
	"CHANGE",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"INDEXES",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"FIRST",
	"AFTER",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"FORMAT",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"EACH",
	"ROW",
	"BEFORE",
	"FOLLOWS",
	"PRECEDES",
	"DEFINER",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DEC",
	"FIXED",
	"PRECISION",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NATIONAL",
	"VARYING",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"LONG",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 31,
	-2, 4,
	-1, 33,
	164, 78,
	-2, 715,
	-1, 41,
	167, 364,
	168, 364,
	-2, 352,
	-1, 48,
	1, 1017,
	368, 1017,
	-2, 383,
	-1, 334,
	114, 723,
	-2, 719,
	-1, 335,
	114, 724,
	-2, 720,
	-1, 405,
	84, 973,
	-2, 67,
	-1, 406,
	84, 891,
	-2, 68,
	-1, 411,
	84, 860,
	-2, 683,
	-1, 413,
	84, 921,
	-2, 685,
	-1, 595,
	5, 31,
	-2, 377,
	-1, 599,
	5, 31,
	-2, 376,
	-1, 726,
	1, 428,
	5, 428,
	12, 428,
	13, 428,
	14, 428,
	15, 428,
	17, 428,
	19, 428,
	29, 428,
	30, 428,
	44, 428,
	45, 428,
	46, 428,
	47, 428,
	48, 428,
	50, 428,
	51, 428,
	54, 428,
	55, 428,
	57, 428,
	58, 428,
	368, 428,
	-2, 453,
	-1, 729,
	55, 48,
	57, 48,
	-2, 52,
	-1, 891,
	114, 726,
	-2, 722,
	-1, 1094,
	56, 296,
	59, 296,
	-2, 261,
	-1, 1144,
	5, 32,
	-2, 517,
	-1, 1176,
	5, 31,
	-2, 657,
	-1, 1270,
	5, 31,
	-2, 69,
	-1, 1383,
	1, 472,
	5, 472,
	12, 472,
	13, 472,
	14, 472,
	15, 472,
	17, 472,
	19, 472,
	29, 472,
	30, 472,
	44, 472,
	45, 472,
	46, 472,
	47, 472,
	48, 472,
	50, 472,
	51, 472,
	54, 472,
	55, 472,
	57, 472,
	58, 472,
	368, 472,
	-2, 453,
	-1, 1486,
	5, 32,
	-2, 658,
	-1, 1518,
	5, 31,
	-2, 69,
	-1, 1556,
	5, 31,
	-2, 660,
	-1, 1642,
	5, 32,
	-2, 661,
}

const yyPrivate = 57344

const yyLast = 17439

var yyAct = [...]int{

	335, 1697, 1683, 1067, 1684, 7, 1646, 6, 5, 1501,
	1450, 1630, 1570, 1315, 1179, 1396, 680, 1536, 1065, 339,
	365, 679, 3, 1521, 564, 1009, 982, 980, 1361, 867,
	978, 537, 352, 1397, 1018, 1647, 1362, 313, 974, 1225,
	101, 1180, 86, 101, 1358, 1060, 1204, 1008, 1089, 101,
	1285, 976, 1368, 1374, 341, 1262, 1291, 1292, 410, 828,
	954, 1015, 64, 723, 1333, 302, 916, 742, 1055, 944,
	893, 965, 844, 929, 101, 415, 308, 611, 617, 101,
	399, 101, 741, 366, 54, 623, 404, 337, 722, 632,
	322, 396, 101, 401, 415, 731, 958, 63, 101, 407,
	543, 697, 68, 562, 1288, 1688, 1657, 1682, 1640, 1674,
	1451, 1656, 1350, 955, 1478, 303, 304, 1639, 696, 307,
	379, 542, 385, 386, 383, 384, 382, 381, 380, 567,
	70, 71, 72, 73, 74, 999, 387, 388, 54, 1392,
	1393, 1105, 1043, 26, 326, 55, 29, 30, 1000, 1001,
	318, 1022, 1391, 592, 1104, 1606, 645, 644, 654, 655,
	647, 648, 649, 650, 651, 652, 653, 646, 306, 305,
	656, 55, 29, 30, 1245, 1029, 88, 96, 92, 93,
	743, 94, 744, 1317, 545, 1109, 547, 1005, 310, 949,
	312, 1031, 1213, 61, 1103, 1212, 566, 569, 1214, 585,
	571, 1031, 1044, 586, 583, 584, 1035, 1037, 1543, 1036,
	1049, 1056, 1044, 1334, 1469, 1467, 1237, 81, 297, 1660,
	1661, 1242, 1241, 858, 1648, 1624, 591, 1074, 590, 578,
	579, 1681, 1319, 568, 570, 546, 857, 855, 1673, 1631,
	1314, 1025, 1238, 959, 1100, 1095, 1096, 1622, 1094, 1318,
	1097, 1098, 1073, 299, 1023, 1336, 1243, 1705, 1235, 1522,
	1523, 544, 1296, 552, 1236, 312, 859, 1021, 1025, 83,
	85, 88, 101, 80, 856, 415, 812, 415, 415, 90,
	89, 1571, 415, 1530, 415, 1107, 1110, 1531, 1276, 300,
	415, 820, 1025, 538, 1573, 1203, 1338, 1202, 1701, 311,
	1201, 1342, 540, 1337, 596, 1335, 598, 597, 983, 985,
	1340, 101, 1311, 95, 1025, 1613, 605, 1226, 271, 87,
	595, 599, 1240, 1339, 1025, 91, 1489, 1117, 1321, 415,
	1116, 1102, 565, 1209, 1154, 1024, 1341, 1343, 1151, 1165,
	620, 1300, 1296, 1133, 1607, 1252, 1297, 1638, 1415, 1304,
	1306, 865, 1058, 737, 1044, 1034, 636, 1101, 563, 558,
	563, 563, 1024, 1006, 1572, 563, 1301, 563, 1019, 610,
	1020, 601, 602, 563, 90, 89, 1017, 1023, 995, 619,
	572, 573, 54, 54, 656, 577, 1024, 580, 984, 668,
	669, 666, 1529, 593, 101, 101, 101, 1106, 646, 1416,
	862, 656, 54, 415, 1287, 82, 845, 56, 1024, 415,
	1699, 1082, 1108, 1700, 850, 1698, 631, 665, 1024, 1239,
	667, 1310, 621, 1620, 1025, 1307, 551, 407, 328, 1595,
	868, 869, 607, 56, 608, 1372, 575, 609, 668, 669,
	745, 77, 668, 669, 630, 629, 721, 587, 678, 726,
	682, 683, 684, 685, 686, 687, 688, 689, 690, 691,
	692, 631, 695, 698, 698, 698, 704, 698, 698, 704,
	698, 712, 713, 714, 715, 716, 717, 78, 727, 1352,
	630, 629, 700, 702, 1286, 706, 708, 730, 711, 846,
	945, 600, 548, 735, 1083, 538, 739, 631, 603, 699,
	701, 703, 705, 707, 709, 710, 645, 644, 654, 655,
	647, 648, 649, 650, 651, 652, 653, 646, 1024, 576,
	656, 554, 555, 556, 1300, 1296, 629, 589, 536, 1297,
	1403, 900, 1298, 1299, 945, 814, 1162, 101, 1130, 1131,
	1132, 415, 631, 1644, 604, 898, 899, 897, 101, 1301,
	630, 629, 101, 309, 626, 101, 61, 1354, 332, 101,
	24, 415, 415, 1150, 1090, 1516, 896, 631, 415, 415,
	101, 415, 101, 864, 1149, 101, 1148, 1515, 1267, 415,
	415, 645, 644, 654, 655, 647, 648, 649, 650, 651,
	652, 653, 646, 630, 629, 656, 654, 655, 647, 648,
	649, 650, 651, 652, 653, 646, 101, 415, 656, 1265,
	631, 101, 863, 1706, 1246, 630, 629, 830, 883, 885,
	886, 1621, 1550, 415, 884, 393, 394, 317, 101, 630,
	629, 917, 631, 918, 415, 1215, 1513, 1216, 1430, 1408,
	1263, 1091, 604, 821, 563, 563, 631, 1433, 1671, 1670,
	538, 563, 563, 1618, 563, 1707, 1589, 870, 1565, 1675,
	894, 890, 563, 563, 831, 832, 833, 834, 1507, 1672,
	1584, 835, 836, 1226, 838, 1652, 604, 1580, 415, 1507,
	1649, 1579, 841, 842, 649, 650, 651, 652, 653, 646,
	563, 1586, 656, 538, 895, 891, 889, 355, 354, 357,
	358, 359, 360, 1527, 927, 1453, 356, 361, 934, 937,
	854, 1448, 872, 415, 415, 946, 1565, 1634, 1507, 1623,
	101, 1565, 1614, 887, 1565, 1576, 1565, 604, 101, 101,
	1507, 1506, 101, 101, 1491, 604, 101, 101, 101, 415,
	1488, 604, 1409, 614, 618, 1444, 1441, 1439, 1438, 1423,
	1422, 54, 415, 1419, 1420, 1026, 920, 921, 1419, 1418,
	637, 1283, 1282, 407, 923, 1221, 682, 647, 648, 649,
	650, 651, 652, 653, 646, 1080, 1010, 656, 942, 962,
	604, 1371, 726, 990, 1013, 1079, 726, 992, 1145, 604,
	726, 925, 604, 1205, 919, 681, 830, 928, 930, 26,
	852, 827, 936, 939, 940, 941, 694, 826, 818, 816,
	871, 977, 815, 101, 415, 727, 415, 993, 813, 727,
	101, 101, 1174, 997, 101, 996, 988, 560, 953, 1175,
	956, 957, 752, 751, 1359, 925, 1484, 1371, 962, 1481,
	989, 1594, 732, 962, 101, 1421, 101, 101, 733, 61,
	1205, 1217, 101, 1062, 1063, 1064, 101, 101, 101, 101,
	101, 967, 970, 971, 972, 968, 733, 969, 973, 924,
	926, 1375, 1376, 1057, 1059, 931, 1324, 645, 644, 654,
	655, 647, 648, 649, 650, 651, 652, 653, 646, 1480,
	890, 656, 734, 26, 736, 1371, 26, 563, 65, 563,
	998, 670, 671, 672, 673, 674, 675, 676, 677, 1145,
	734, 961, 732, 1045, 1046, 1047, 1048, 1069, 894, 1071,
	1168, 1167, 1145, 1555, 891, 1121, 1078, 645, 644, 654,
	655, 647, 648, 649, 650, 651, 652, 653, 646, 962,
	1145, 656, 732, 61, 319, 1122, 61, 61, 1123, 738,
	1139, 866, 895, 967, 970, 971, 972, 968, 819, 969,
	973, 1658, 1650, 101, 101, 101, 101, 101, 1135, 1587,
	1538, 1517, 1031, 1496, 1134, 101, 1061, 1402, 101, 1056,
	1176, 1181, 101, 1220, 1142, 1375, 1376, 878, 1051, 1050,
	101, 1129, 1316, 1692, 61, 1066, 1539, 1690, 1685, 927,
	1427, 1378, 1359, 1268, 851, 823, 1191, 1030, 1199, 415,
	1200, 1192, 1381, 1161, 1475, 1380, 847, 726, 726, 726,
	726, 726, 1188, 1193, 1189, 971, 972, 1183, 1184, 1190,
	1186, 1187, 726, 1010, 1218, 323, 324, 1207, 1667, 1208,
	1655, 1206, 1177, 1178, 726, 1194, 727, 727, 727, 727,
	727, 1182, 1320, 1118, 1185, 1665, 1159, 1128, 880, 881,
	1127, 977, 1227, 1197, 624, 625, 1210, 415, 1553, 1443,
	1228, 1407, 1406, 727, 1222, 364, 612, 1256, 415, 101,
	415, 415, 622, 750, 561, 1482, 1534, 613, 1070, 1270,
	645, 644, 654, 655, 647, 648, 649, 650, 651, 652,
	653, 646, 868, 869, 656, 822, 1271, 1264, 1086, 1141,
	975, 681, 624, 625, 1583, 932, 933, 1144, 1146, 811,
	1147, 320, 321, 314, 1126, 101, 1153, 1266, 1281, 1156,
	1157, 1158, 1125, 1600, 415, 315, 1164, 65, 1599, 1541,
	1166, 1205, 1155, 1169, 1170, 1152, 1171, 1172, 848, 843,
	409, 54, 1302, 1303, 1312, 1313, 1295, 1284, 1326, 1290,
	627, 563, 1693, 563, 563, 1694, 1196, 1694, 1693, 553,
	1610, 1405, 1223, 1224, 1004, 1247, 1248, 861, 415, 415,
	67, 1277, 1254, 1279, 1280, 1328, 1273, 1274, 1275, 1360,
	1355, 69, 1261, 47, 1181, 1327, 1363, 892, 415, 1365,
	901, 902, 903, 904, 905, 906, 907, 908, 909, 910,
	911, 912, 913, 914, 915, 1345, 1344, 62, 415, 1332,
	415, 415, 1351, 1, 891, 1121, 1370, 1384, 1294, 1452,
	1535, 1255, 1099, 1257, 1258, 1259, 1260, 1629, 1016, 1379,
	1007, 76, 1010, 535, 1010, 1395, 1293, 1305, 1309, 75,
	1382, 1619, 1081, 1390, 574, 1525, 1399, 950, 279, 1364,
	1014, 54, 1233, 1400, 1401, 1394, 1232, 1388, 1229, 101,
	1244, 1028, 1231, 1230, 1425, 1426, 1234, 101, 758, 756,
	757, 755, 760, 759, 1027, 1385, 1386, 1387, 754, 282,
	402, 746, 1119, 1120, 628, 618, 84, 48, 1528, 1308,
	1093, 79, 849, 581, 582, 284, 415, 664, 1124, 101,
	415, 1211, 408, 1366, 1659, 415, 616, 1598, 415, 415,
	415, 1540, 415, 1434, 1160, 101, 693, 943, 340, 882,
	353, 350, 1331, 1436, 351, 1429, 1085, 1437, 873, 1173,
	638, 338, 330, 725, 1447, 718, 1326, 966, 964, 963,
	409, 824, 409, 409, 1143, 397, 1377, 409, 1435, 409,
	1373, 724, 1323, 588, 298, 409, 1477, 1605, 877, 1440,
	1457, 28, 66, 325, 1163, 19, 1458, 18, 17, 726,
	594, 20, 21, 22, 1465, 16, 415, 415, 415, 15,
	14, 1181, 1412, 549, 32, 415, 1503, 1504, 36, 35,
	34, 10, 1272, 415, 634, 1483, 1072, 23, 727, 13,
	12, 1499, 1509, 1493, 11, 9, 1676, 8, 4, 1010,
	1218, 316, 1500, 25, 2, 0, 1505, 0, 101, 0,
	0, 0, 0, 1492, 1476, 1410, 1411, 0, 1510, 0,
	0, 0, 1414, 0, 0, 615, 0, 0, 1518, 1417,
	0, 0, 415, 0, 0, 1524, 0, 1136, 1137, 1138,
	0, 0, 0, 0, 0, 1520, 0, 0, 0, 0,
	0, 1532, 0, 1399, 0, 0, 1537, 0, 409, 0,
	1533, 0, 0, 0, 747, 99, 0, 0, 296, 415,
	415, 0, 415, 0, 99, 0, 0, 415, 0, 101,
	0, 101, 0, 0, 0, 1363, 1562, 0, 415, 1556,
	54, 0, 0, 0, 0, 0, 329, 1459, 415, 400,
	0, 1554, 1582, 1461, 99, 0, 99, 1564, 0, 1563,
	1561, 0, 415, 1581, 1470, 1471, 0, 99, 1575, 415,
	101, 1574, 1569, 99, 0, 0, 0, 0, 1596, 0,
	0, 0, 0, 0, 1485, 1486, 1487, 1592, 1490, 0,
	0, 1512, 0, 1514, 0, 1588, 415, 0, 1364, 0,
	0, 1557, 1498, 0, 0, 0, 1363, 0, 0, 1612,
	0, 0, 1617, 0, 1611, 0, 0, 1585, 415, 1526,
	0, 1353, 1615, 0, 0, 415, 415, 0, 1591, 0,
	1511, 0, 0, 1626, 0, 0, 1542, 1627, 0, 0,
	0, 0, 1632, 0, 415, 0, 810, 1636, 1593, 1537,
	1010, 1633, 0, 101, 0, 1641, 0, 0, 0, 0,
	1181, 0, 415, 0, 1389, 0, 409, 409, 0, 1364,
	0, 54, 0, 409, 409, 0, 409, 0, 1654, 1289,
	1625, 415, 0, 0, 409, 409, 1662, 0, 1628, 415,
	1617, 0, 0, 1669, 1664, 1666, 1663, 1549, 1668, 0,
	0, 0, 0, 0, 0, 1679, 0, 1678, 1677, 1680,
	1686, 0, 409, 0, 0, 0, 0, 1691, 1689, 0,
	0, 1566, 0, 1567, 1568, 0, 1702, 0, 874, 1330,
	1577, 0, 1578, 0, 0, 0, 0, 0, 0, 634,
	1346, 1347, 409, 1348, 1349, 0, 1431, 99, 0, 0,
	292, 0, 0, 0, 0, 0, 1356, 1357, 0, 0,
	0, 0, 0, 0, 1601, 1602, 1603, 1604, 0, 0,
	0, 1608, 1609, 0, 0, 0, 0, 289, 0, 0,
	0, 0, 0, 922, 0, 0, 99, 1383, 0, 0,
	0, 0, 0, 0, 0, 1687, 0, 0, 0, 1032,
	1033, 947, 1038, 1039, 1040, 1041, 1042, 0, 0, 0,
	0, 0, 1474, 1479, 0, 0, 0, 0, 951, 952,
	1052, 1053, 1054, 681, 0, 1637, 1404, 0, 272, 0,
	975, 1494, 1642, 0, 1495, 275, 0, 1497, 0, 0,
	0, 0, 0, 0, 409, 283, 290, 291, 0, 1651,
	0, 0, 0, 0, 0, 0, 0, 409, 0, 0,
	983, 985, 0, 0, 0, 0, 0, 0, 0, 99,
	99, 99, 0, 0, 0, 0, 0, 1432, 0, 0,
	0, 281, 0, 0, 0, 0, 0, 288, 645, 644,
	654, 655, 647, 648, 649, 650, 651, 652, 653, 646,
	0, 0, 656, 645, 644, 654, 655, 647, 648, 649,
	650, 651, 652, 653, 646, 1703, 1704, 656, 1460, 409,
	0, 409, 0, 273, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 728, 0, 0, 0, 0, 0,
	984, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 276, 277, 0, 286, 287,
	295, 0, 0, 0, 278, 280, 0, 274, 294, 293,
	0, 409, 0, 0, 98, 0, 0, 0, 26, 27,
	55, 29, 30, 301, 645, 644, 654, 655, 647, 648,
	649, 650, 651, 652, 653, 646, 0, 60, 656, 0,
	0, 31, 51, 52, 0, 0, 0, 0, 398, 0,
	0, 0, 99, 539, 0, 541, 0, 0, 0, 0,
	0, 0, 0, 99, 42, 0, 550, 99, 61, 0,
	99, 0, 557, 0, 829, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 0, 99, 0, 0,
	99, 0, 0, 1473, 0, 0, 0, 0, 1635, 681,
	0, 1544, 1545, 1546, 1547, 1548, 0, 947, 0, 1551,
	1552, 0, 1249, 1250, 1251, 1253, 0, 0, 0, 0,
	0, 99, 0, 0, 0, 0, 99, 0, 0, 33,
	57, 38, 37, 40, 0, 53, 0, 0, 0, 0,
	0, 0, 0, 99, 0, 0, 0, 0, 0, 0,
	0, 0, 829, 0, 409, 0, 0, 0, 0, 0,
	0, 41, 59, 58, 0, 0, 49, 50, 39, 645,
	644, 654, 655, 647, 648, 649, 650, 651, 652, 653,
	646, 1472, 0, 656, 0, 0, 0, 0, 0, 43,
	44, 0, 45, 46, 0, 0, 0, 0, 0, 329,
	329, 0, 0, 0, 329, 329, 329, 329, 0, 0,
	0, 948, 1269, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 409, 0, 409, 409, 0, 0, 0,
	329, 329, 329, 329, 0, 99, 0, 0, 0, 0,
	0, 0, 0, 99, 986, 0, 559, 99, 99, 0,
	0, 99, 994, 829, 0, 0, 0, 645, 644, 654,
	655, 647, 648, 649, 650, 651, 652, 653, 646, 1329,
	0, 656, 0, 0, 0, 0, 0, 0, 0, 409,
	0, 0, 56, 0, 0, 606, 0, 0, 0, 645,
	644, 654, 655, 647, 648, 649, 650, 651, 652, 653,
	646, 0, 0, 656, 0, 0, 0, 0, 0, 0,
	0, 409, 0, 0, 0, 0, 1695, 0, 0, 0,
	947, 0, 0, 1367, 1369, 0, 1140, 0, 99, 0,
	1413, 0, 0, 0, 0, 99, 99, 0, 0, 99,
	0, 0, 0, 1369, 0, 0, 645, 644, 654, 655,
	647, 648, 649, 650, 651, 652, 653, 646, 0, 99,
	656, 1087, 1088, 409, 0, 409, 1398, 99, 720, 0,
	729, 99, 99, 99, 99, 99, 0, 0, 640, 0,
	643, 829, 0, 0, 0, 0, 657, 658, 659, 660,
	661, 662, 663, 329, 641, 642, 639, 645, 644, 654,
	655, 647, 648, 649, 650, 651, 652, 653, 646, 0,
	0, 656, 1462, 1463, 0, 1464, 0, 0, 1466, 0,
	1468, 644, 654, 655, 647, 648, 649, 650, 651, 652,
	653, 646, 0, 0, 656, 0, 0, 0, 0, 329,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1442, 0, 0, 0, 1446, 0, 0, 329, 0,
	1449, 0, 0, 1454, 1455, 1456, 0, 409, 0, 0,
	0, 0, 0, 0, 0, 0, 1508, 948, 99, 99,
	99, 99, 99, 0, 0, 0, 0, 0, 0, 0,
	1195, 0, 0, 99, 0, 0, 0, 986, 0, 0,
	0, 0, 0, 0, 0, 99, 0, 0, 0, 0,
	0, 753, 0, 0, 0, 0, 0, 947, 0, 0,
	0, 0, 817, 0, 0, 0, 398, 0, 0, 825,
	0, 1502, 1502, 1502, 0, 0, 0, 0, 0, 0,
	409, 0, 0, 0, 837, 0, 839, 0, 1502, 840,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	853, 0, 0, 0, 0, 860, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 0, 0, 409, 0, 0,
	0, 0, 879, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1558, 1559, 0, 1560, 0, 0,
	99, 0, 1502, 0, 0, 0, 0, 0, 0, 0,
	329, 0, 0, 1398, 0, 0, 0, 0, 0, 0,
	0, 329, 0, 1398, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1590, 0, 0,
	0, 829, 0, 0, 1502, 0, 0, 0, 0, 0,
	948, 0, 0, 0, 960, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 991, 0, 0,
	0, 1616, 0, 0, 0, 0, 0, 0, 0, 780,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1398, 0, 0, 0, 0, 0, 0,
	409, 409, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 947, 0, 0, 1643,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1653, 0, 0,
	0, 0, 0, 0, 99, 0, 0, 1068, 0, 0,
	0, 0, 99, 0, 1075, 1076, 1398, 0, 1077, 0,
	767, 0, 0, 0, 1502, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1084, 0,
	0, 0, 0, 0, 99, 0, 1092, 0, 0, 0,
	1111, 1112, 1113, 1114, 1115, 0, 0, 0, 0, 0,
	99, 0, 781, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 794, 797, 798, 799, 800, 801, 802, 0,
	803, 804, 805, 806, 807, 808, 809, 948, 782, 783,
	784, 785, 761, 765, 795, 762, 768, 764, 766, 763,
	0, 769, 770, 771, 772, 773, 774, 775, 776, 777,
	778, 779, 786, 787, 788, 789, 790, 791, 792, 793,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 796, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 986, 0, 986, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1278, 0, 99, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1322,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 948, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1424, 0, 0, 0, 0, 0, 0,
	0, 1428, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1445, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	522, 510, 0, 467, 525, 440, 457, 533, 458, 461,
	498, 425, 480, 185, 455, 0, 444, 420, 450, 421,
	442, 469, 131, 439, 512, 483, 524, 157, 523, 473,
	0, 531, 159, 489, 0, 231, 173, 0, 0, 471,
	514, 478, 507, 466, 499, 430, 488, 526, 456, 496,
	527, 0, 0, 0, 414, 0, 1011, 1012, 0, 0,
	0, 0, 0, 121, 0, 493, 521, 452, 495, 497,
	419, 490, 0, 423, 426, 532, 517, 447, 448, 1219,
	0, 0, 0, 0, 0, 0, 470, 479, 504, 464,
	0, 0, 1519, 0, 0, 0, 0, 0, 445, 0,
	487, 0, 0, 0, 427, 424, 0, 0, 468, 0,
	0, 0, 429, 0, 446, 505, 0, 416, 139, 0,
	0, 509, 516, 465, 0, 260, 520, 463, 462, 204,
	0, 235, 142, 156, 117, 103, 113, 0, 141, 182,
	211, 215, 453, 417, 513, 443, 451, 125, 449, 213,
	192, 251, 0, 486, 194, 212, 160, 241, 205, 250,
	261, 262, 238, 258, 266, 228, 0, 0, 0, 0,
	0, 0, 106, 237, 249, 122, 223, 108, 247, 234,
	171, 151, 152, 107, 0, 209, 130, 137, 127, 184,
	0, 0, 0, 244, 245, 126, 269, 114, 257, 110,
	115, 256, 178, 0, 1597, 0, 240, 248, 172, 165,
	0, 109, 246, 170, 164, 155, 134, 144, 202, 162,
	203, 145, 175, 174, 176, 0, 422, 0, 232, 254,
	270, 119, 438, 0, 239, 264, 265, 0, 0, 120,
	138, 133, 201, 177, 116, 147, 229, 154, 161, 208,
	268, 191, 214, 123, 253, 230, 434, 437, 432, 433,
	481, 482, 528, 529, 530, 506, 428, 0, 435, 436,
	0, 511, 518, 519, 485, 102, 111, 158, 267, 206,
	136, 255, 418, 431, 129, 441, 0, 1645, 454, 459,
	460, 472, 474, 475, 476, 477, 484, 491, 492, 494,
	500, 501, 502, 503, 508, 515, 534, 104, 105, 112,
	118, 124, 128, 132, 135, 140, 143, 146, 148, 149,
	150, 153, 163, 166, 167, 168, 169, 179, 180, 181,
	183, 186, 187, 188, 189, 190, 193, 195, 196, 197,
	198, 199, 200, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	252, 259, 263, 522, 510, 0, 467, 525, 440, 457,
	533, 458, 461, 498, 425, 480, 185, 455, 0, 444,
	420, 450, 421, 442, 469, 131, 439, 512, 483, 524,
	157, 523, 473, 0, 531, 159, 489, 0, 231, 173,
	0, 0, 471, 514, 478, 507, 466, 499, 430, 488,
	526, 456, 496, 527, 0, 0, 0, 414, 0, 1011,
	1012, 0, 0, 0, 0, 0, 121, 0, 493, 521,
	452, 495, 497, 419, 490, 0, 423, 426, 532, 517,
	447, 448, 0, 0, 0, 0, 0, 0, 0, 470,
	479, 504, 464, 0, 0, 0, 0, 0, 0, 0,
	0, 445, 0, 487, 0, 0, 0, 427, 424, 0,
	0, 468, 0, 0, 0, 429, 0, 446, 505, 0,
	416, 139, 0, 0, 509, 516, 465, 0, 260, 520,
	463, 462, 204, 0, 235, 142, 156, 117, 103, 113,
	0, 141, 182, 211, 215, 453, 417, 513, 443, 451,
	125, 449, 213, 192, 251, 0, 486, 194, 212, 160,
	241, 205, 250, 261, 262, 238, 258, 266, 228, 0,
	0, 0, 0, 0, 0, 106, 237, 249, 122, 223,
	108, 247, 234, 171, 151, 152, 107, 0, 209, 130,
	137, 127, 184, 0, 0, 0, 244, 245, 126, 269,
	114, 257, 110, 115, 256, 178, 0, 0, 0, 240,
	248, 172, 165, 0, 109, 246, 170, 164, 155, 134,
	144, 202, 162, 203, 145, 175, 174, 176, 0, 422,
	0, 232, 254, 270, 119, 438, 0, 239, 264, 265,
	0, 0, 120, 138, 133, 201, 177, 116, 147, 229,
	154, 161, 208, 268, 191, 214, 123, 253, 230, 434,
	437, 432, 433, 481, 482, 528, 529, 530, 506, 428,
	0, 435, 436, 0, 511, 518, 519, 485, 102, 111,
	158, 267, 206, 136, 255, 418, 431, 129, 441, 0,
	0, 454, 459, 460, 472, 474, 475, 476, 477, 484,
	491, 492, 494, 500, 501, 502, 503, 508, 515, 534,
	104, 105, 112, 118, 124, 128, 132, 135, 140, 143,
	146, 148, 149, 150, 153, 163, 166, 167, 168, 169,
	179, 180, 181, 183, 186, 187, 188, 189, 190, 193,
	195, 196, 197, 198, 199, 200, 207, 210, 216, 217,
	218, 219, 220, 221, 222, 224, 225, 226, 227, 233,
	236, 242, 243, 252, 259, 263, 522, 510, 0, 467,
	525, 440, 457, 533, 458, 461, 498, 425, 480, 185,
	455, 0, 444, 420, 450, 421, 442, 469, 131, 439,
	512, 483, 524, 157, 523, 473, 0, 531, 159, 489,
	0, 231, 173, 0, 0, 471, 514, 478, 507, 466,
	499, 430, 488, 526, 456, 496, 527, 0, 0, 0,
	414, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	0, 493, 521, 452, 495, 497, 419, 490, 0, 423,
	426, 532, 517, 447, 448, 0, 0, 0, 0, 0,
	0, 0, 470, 479, 504, 464, 0, 0, 0, 0,
	0, 0, 1325, 0, 445, 0, 487, 0, 0, 0,
	427, 424, 0, 0, 468, 0, 0, 0, 429, 0,
	446, 505, 0, 416, 139, 0, 0, 509, 516, 465,
	0, 260, 520, 463, 462, 204, 0, 235, 142, 156,
	117, 103, 113, 0, 141, 182, 211, 215, 453, 417,
	513, 443, 451, 125, 449, 213, 192, 251, 0, 486,
	194, 212, 160, 241, 205, 250, 261, 262, 238, 258,
	266, 228, 0, 0, 0, 0, 0, 0, 106, 237,
	249, 122, 223, 108, 247, 234, 171, 151, 152, 107,
	0, 209, 130, 137, 127, 184, 0, 0, 0, 244,
	245, 126, 269, 114, 257, 110, 115, 256, 178, 0,
	0, 0, 240, 248, 172, 165, 0, 109, 246, 170,
	164, 155, 134, 144, 202, 162, 203, 145, 175, 174,
	176, 0, 422, 0, 232, 254, 270, 119, 438, 0,
	239, 264, 265, 0, 0, 120, 138, 133, 201, 177,
	116, 147, 229, 154, 161, 208, 268, 191, 214, 123,
	253, 230, 434, 437, 432, 433, 481, 482, 528, 529,
	530, 506, 428, 0, 435, 436, 0, 511, 518, 519,
	485, 102, 111, 158, 267, 206, 136, 255, 418, 431,
	129, 441, 0, 0, 454, 459, 460, 472, 474, 475,
	476, 477, 484, 491, 492, 494, 500, 501, 502, 503,
	508, 515, 534, 104, 105, 112, 118, 124, 128, 132,
	135, 140, 143, 146, 148, 149, 150, 153, 163, 166,
	167, 168, 169, 179, 180, 181, 183, 186, 187, 188,
	189, 190, 193, 195, 196, 197, 198, 199, 200, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 252, 259, 263, 522,
	510, 0, 467, 525, 440, 457, 533, 458, 461, 498,
	425, 480, 185, 455, 0, 444, 420, 450, 421, 442,
	469, 131, 439, 512, 483, 524, 157, 523, 473, 0,
	531, 159, 489, 0, 231, 173, 0, 0, 471, 514,
	478, 507, 466, 499, 430, 488, 526, 456, 496, 527,
	61, 0, 0, 414, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 493, 521, 452, 495, 497, 419,
	490, 0, 423, 426, 532, 517, 447, 448, 0, 0,
	0, 0, 0, 0, 0, 470, 479, 504, 464, 0,
	0, 0, 0, 0, 0, 0, 0, 445, 0, 487,
	0, 0, 0, 427, 424, 0, 0, 468, 0, 0,
	0, 429, 0, 446, 505, 0, 416, 139, 0, 0,
	509, 516, 465, 0, 260, 520, 463, 462, 204, 0,
	235, 142, 156, 117, 103, 113, 0, 141, 182, 211,
	215, 453, 417, 513, 443, 451, 125, 449, 213, 192,
	251, 0, 486, 194, 212, 160, 241, 205, 250, 261,
	262, 238, 258, 266, 228, 0, 0, 0, 0, 0,
	0, 106, 237, 249, 122, 223, 108, 247, 234, 171,
	151, 152, 107, 0, 209, 130, 137, 127, 184, 0,
	0, 0, 244, 245, 126, 269, 114, 257, 110, 115,
	256, 178, 0, 0, 0, 240, 248, 172, 165, 0,
	109, 246, 170, 164, 155, 134, 144, 202, 162, 203,
	145, 175, 174, 176, 0, 422, 0, 232, 254, 270,
	119, 438, 0, 239, 264, 265, 0, 0, 120, 138,
	133, 201, 177, 116, 147, 229, 154, 161, 208, 268,
	191, 214, 123, 253, 230, 434, 437, 432, 433, 481,
	482, 528, 529, 530, 506, 428, 0, 435, 436, 0,
	511, 518, 519, 485, 102, 111, 158, 267, 206, 136,
	255, 418, 431, 129, 441, 0, 0, 454, 459, 460,
	472, 474, 475, 476, 477, 484, 491, 492, 494, 500,
	501, 502, 503, 508, 515, 534, 104, 105, 112, 118,
	124, 128, 132, 135, 140, 143, 146, 148, 149, 150,
	153, 163, 166, 167, 168, 169, 179, 180, 181, 183,
	186, 187, 188, 189, 190, 193, 195, 196, 197, 198,
	199, 200, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 224, 225, 226, 227, 233, 236, 242, 243, 252,
	259, 263, 522, 510, 0, 467, 525, 440, 457, 533,
	458, 461, 498, 425, 480, 185, 455, 0, 444, 420,
	450, 421, 442, 469, 131, 439, 512, 483, 524, 157,
	523, 473, 0, 531, 159, 489, 0, 231, 173, 0,
	0, 471, 514, 478, 507, 466, 499, 430, 488, 526,
	456, 496, 527, 0, 0, 0, 100, 0, 0, 0,
	0, 0, 0, 0, 0, 121, 0, 493, 521, 452,
	495, 497, 419, 490, 0, 423, 426, 532, 517, 447,
	448, 0, 0, 0, 0, 0, 0, 0, 470, 479,
	504, 464, 0, 0, 0, 0, 0, 0, 995, 0,
	445, 0, 487, 0, 0, 0, 427, 424, 0, 0,
	468, 0, 0, 0, 429, 0, 446, 505, 0, 416,
	139, 0, 0, 509, 516, 465, 0, 260, 520, 463,
	462, 204, 0, 235, 142, 156, 117, 103, 113, 0,
	141, 182, 211, 215, 453, 417, 513, 443, 451, 125,
	449, 213, 192, 251, 0, 486, 194, 212, 160, 241,
	205, 250, 261, 262, 238, 258, 266, 228, 0, 0,
	0, 0, 0, 0, 106, 237, 249, 122, 223, 108,
	247, 234, 171, 151, 152, 107, 0, 209, 130, 137,
	127, 184, 0, 0, 0, 244, 245, 126, 269, 114,
	257, 110, 115, 256, 178, 0, 0, 0, 240, 248,
	172, 165, 0, 109, 246, 170, 164, 155, 134, 144,
	202, 162, 203, 145, 175, 174, 176, 0, 422, 0,
	232, 254, 270, 119, 438, 0, 239, 264, 265, 0,
	0, 120, 138, 133, 201, 177, 116, 147, 229, 154,
	161, 208, 268, 191, 214, 123, 253, 230, 434, 437,
	432, 433, 481, 482, 528, 529, 530, 506, 428, 0,
	435, 436, 0, 511, 518, 519, 485, 102, 111, 158,
	267, 206, 136, 255, 418, 431, 129, 441, 0, 0,
	454, 459, 460, 472, 474, 475, 476, 477, 484, 491,
	492, 494, 500, 501, 502, 503, 508, 515, 534, 104,
	105, 112, 118, 124, 128, 132, 135, 140, 143, 146,
	148, 149, 150, 153, 163, 166, 167, 168, 169, 179,
	180, 181, 183, 186, 187, 188, 189, 190, 193, 195,
	196, 197, 198, 199, 200, 207, 210, 216, 217, 218,
	219, 220, 221, 222, 224, 225, 226, 227, 233, 236,
	242, 243, 252, 259, 263, 522, 510, 0, 467, 525,
	440, 457, 533, 458, 461, 498, 425, 480, 185, 455,
	0, 444, 420, 450, 421, 442, 469, 131, 439, 512,
	483, 524, 157, 523, 473, 0, 531, 159, 489, 0,
	231, 173, 0, 0, 471, 514, 478, 507, 466, 499,
	430, 488, 526, 456, 496, 527, 0, 0, 0, 334,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 0,
	493, 521, 452, 495, 497, 419, 490, 0, 423, 426,
	532, 517, 447, 448, 0, 0, 0, 0, 0, 0,
	0, 470, 479, 504, 464, 0, 0, 0, 0, 0,
	0, 888, 0, 445, 0, 487, 0, 0, 0, 427,
	424, 0, 0, 468, 0, 0, 0, 429, 0, 446,
	505, 0, 416, 139, 0, 0, 509, 516, 465, 0,
	260, 520, 463, 462, 204, 0, 235, 142, 156, 117,
	103, 113, 0, 141, 182, 211, 215, 453, 417, 513,
	443, 451, 125, 449, 213, 192, 251, 0, 486, 194,
	212, 160, 241, 205, 250, 261, 262, 238, 258, 266,
	228, 0, 0, 0, 0, 0, 0, 106, 237, 249,
	122, 223, 108, 247, 234, 171, 151, 152, 107, 0,
	209, 130, 137, 127, 184, 0, 0, 0, 244, 245,
	126, 269, 114, 257, 110, 115, 256, 178, 0, 0,
	0, 240, 248, 172, 165, 0, 109, 246, 170, 164,
	155, 134, 144, 202, 162, 203, 145, 175, 174, 176,
	0, 422, 0, 232, 254, 270, 119, 438, 0, 239,
	264, 265, 0, 0, 120, 138, 133, 201, 177, 116,
	147, 229, 154, 161, 208, 268, 191, 214, 123, 253,
	230, 434, 437, 432, 433, 481, 482, 528, 529, 530,
	506, 428, 0, 435, 436, 0, 511, 518, 519, 485,
	102, 111, 158, 267, 206, 136, 255, 418, 431, 129,
	441, 0, 0, 454, 459, 460, 472, 474, 475, 476,
	477, 484, 491, 492, 494, 500, 501, 502, 503, 508,
	515, 534, 104, 105, 112, 118, 124, 128, 132, 135,
	140, 143, 146, 148, 149, 150, 153, 163, 166, 167,
	168, 169, 179, 180, 181, 183, 186, 187, 188, 189,
	190, 193, 195, 196, 197, 198, 199, 200, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 224, 225, 226,
	227, 233, 236, 242, 243, 252, 259, 263, 522, 510,
	0, 467, 525, 440, 457, 533, 458, 461, 498, 425,
	480, 185, 455, 0, 444, 420, 450, 421, 442, 469,
	131, 439, 512, 483, 524, 157, 523, 473, 0, 531,
	159, 489, 0, 231, 173, 0, 0, 471, 514, 478,
	507, 466, 499, 430, 488, 526, 456, 496, 527, 0,
	0, 0, 414, 0, 0, 0, 0, 0, 0, 0,
	0, 121, 0, 493, 521, 452, 495, 497, 419, 490,
	0, 423, 426, 532, 517, 447, 448, 0, 0, 0,
	0, 0, 0, 0, 470, 479, 504, 464, 0, 0,
	0, 0, 0, 0, 0, 0, 445, 0, 487, 0,
	0, 0, 427, 424, 0, 0, 468, 0, 0, 0,
	429, 0, 446, 505, 0, 416, 139, 0, 0, 509,
	516, 465, 0, 260, 520, 463, 462, 204, 0, 235,
	142, 156, 117, 103, 113, 0, 141, 182, 211, 215,
	453, 417, 513, 443, 451, 125, 449, 213, 192, 251,
	0, 486, 194, 212, 160, 241, 205, 250, 261, 262,
	238, 258, 266, 228, 0, 0, 0, 0, 0, 0,
	106, 237, 249, 122, 223, 108, 247, 234, 171, 151,
	152, 107, 0, 209, 130, 137, 127, 184, 0, 0,
	0, 244, 245, 126, 269, 114, 257, 110, 115, 256,
	178, 0, 0, 0, 240, 248, 172, 165, 0, 109,
	246, 170, 164, 155, 134, 144, 202, 162, 203, 145,
	175, 174, 176, 0, 422, 0, 232, 254, 270, 119,
	438, 0, 239, 264, 265, 0, 0, 120, 138, 133,
	201, 177, 116, 147, 229, 154, 161, 208, 268, 191,
	214, 123, 253, 230, 434, 437, 432, 433, 481, 482,
	528, 529, 530, 506, 428, 0, 435, 436, 0, 511,
	518, 519, 485, 102, 111, 158, 267, 206, 136, 255,
	418, 431, 129, 441, 0, 0, 454, 459, 460, 472,
	474, 475, 476, 477, 484, 491, 492, 494, 500, 501,
	502, 503, 508, 515, 534, 104, 105, 112, 118, 124,
	128, 132, 135, 140, 143, 146, 148, 149, 150, 153,
	163, 166, 167, 168, 169, 179, 180, 181, 183, 186,
	187, 188, 189, 190, 193, 195, 196, 197, 198, 199,
	200, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	224, 225, 226, 227, 233, 236, 242, 243, 252, 259,
	263, 522, 510, 0, 467, 525, 440, 457, 533, 458,
	461, 498, 425, 480, 185, 455, 0, 444, 420, 450,
	421, 442, 469, 131, 439, 512, 483, 524, 157, 523,
	473, 0, 531, 159, 489, 0, 231, 173, 0, 0,
	471, 514, 478, 507, 466, 499, 430, 488, 526, 456,
	496, 527, 0, 0, 0, 334, 0, 0, 0, 0,
	0, 0, 0, 0, 121, 0, 493, 521, 452, 495,
	497, 419, 490, 0, 423, 426, 532, 517, 447, 448,
	0, 0, 0, 0, 0, 0, 0, 470, 479, 504,
	464, 0, 0, 0, 0, 0, 0, 0, 0, 445,
	0, 487, 0, 0, 0, 427, 424, 0, 0, 468,
	0, 0, 0, 429, 0, 446, 505, 0, 416, 139,
	0, 0, 509, 516, 465, 0, 260, 520, 463, 462,
	204, 0, 235, 142, 156, 117, 103, 113, 0, 141,
	182, 211, 215, 453, 417, 513, 443, 451, 125, 449,
	213, 192, 251, 0, 486, 194, 212, 160, 241, 205,
	250, 261, 262, 238, 258, 266, 228, 0, 0, 0,
	0, 0, 0, 106, 237, 249, 122, 223, 108, 247,
	234, 171, 151, 152, 107, 0, 209, 130, 137, 127,
	184, 0, 0, 0, 244, 245, 126, 269, 114, 257,
	110, 115, 256, 178, 0, 0, 0, 240, 248, 172,
	165, 0, 109, 246, 170, 164, 155, 134, 144, 202,
	162, 203, 145, 175, 174, 176, 0, 422, 0, 232,
	254, 270, 119, 438, 0, 239, 264, 265, 0, 0,
	120, 138, 133, 201, 177, 116, 147, 229, 154, 161,
	208, 268, 191, 214, 123, 253, 230, 434, 437, 432,
	433, 481, 482, 528, 529, 530, 506, 428, 0, 435,
	436, 0, 511, 518, 519, 485, 102, 111, 158, 267,
	206, 136, 255, 418, 431, 129, 441, 0, 0, 454,
	459, 460, 472, 474, 475, 476, 477, 484, 491, 492,
	494, 500, 501, 502, 503, 508, 515, 534, 104, 105,
	112, 118, 124, 128, 132, 135, 140, 143, 146, 148,
	149, 150, 153, 163, 166, 167, 168, 169, 179, 180,
	181, 183, 186, 187, 188, 189, 190, 193, 195, 196,
	197, 198, 199, 200, 207, 210, 216, 217, 218, 219,
	220, 221, 222, 224, 225, 226, 227, 233, 236, 242,
	243, 252, 259, 263, 522, 510, 0, 467, 525, 440,
	457, 533, 458, 461, 498, 425, 480, 185, 455, 0,
	444, 420, 450, 421, 442, 469, 131, 439, 512, 483,
	524, 157, 523, 473, 0, 531, 159, 489, 0, 231,
	173, 0, 0, 471, 514, 478, 507, 466, 499, 430,
	488, 526, 456, 496, 527, 0, 0, 0, 414, 0,
	0, 0, 0, 0, 0, 0, 0, 121, 0, 493,
	521, 452, 495, 497, 419, 490, 0, 423, 426, 532,
	517, 447, 448, 0, 0, 0, 0, 0, 0, 0,
	470, 479, 504, 464, 0, 0, 0, 0, 0, 0,
	0, 0, 445, 0, 487, 0, 0, 0, 427, 424,
	0, 0, 468, 0, 0, 0, 429, 0, 446, 505,
	0, 416, 139, 0, 0, 509, 516, 465, 0, 260,
	520, 463, 462, 204, 0, 235, 142, 156, 117, 103,
	113, 0, 141, 182, 211, 215, 453, 417, 513, 443,
	451, 125, 449, 213, 192, 251, 0, 486, 194, 212,
	160, 241, 205, 250, 261, 262, 238, 258, 266, 228,
	0, 0, 0, 0, 0, 0, 106, 237, 249, 122,
	223, 108, 247, 234, 171, 151, 152, 107, 0, 209,
	130, 137, 127, 184, 0, 0, 0, 244, 245, 126,
	269, 114, 257, 110, 412, 256, 178, 0, 0, 0,
	240, 248, 172, 165, 0, 109, 246, 170, 164, 155,
	134, 144, 202, 162, 203, 145, 175, 174, 176, 0,
	422, 0, 232, 254, 270, 119, 438, 0, 239, 264,
	265, 0, 0, 120, 138, 133, 201, 413, 411, 147,
	229, 154, 161, 208, 268, 191, 214, 123, 253, 230,
	434, 437, 432, 433, 481, 482, 528, 529, 530, 506,
	428, 0, 435, 436, 0, 511, 518, 519, 485, 102,
	111, 158, 267, 206, 136, 255, 418, 431, 129, 441,
	0, 0, 454, 459, 460, 472, 474, 475, 476, 477,
	484, 491, 492, 494, 500, 501, 502, 503, 508, 515,
	534, 104, 105, 112, 118, 124, 128, 132, 135, 140,
	143, 146, 148, 149, 150, 153, 163, 166, 167, 168,
	169, 179, 180, 181, 183, 186, 187, 188, 189, 190,
	193, 195, 196, 197, 198, 199, 200, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 224, 225, 226, 227,
	233, 236, 242, 243, 252, 259, 263, 522, 510, 0,
	467, 525, 440, 457, 533, 458, 461, 498, 425, 480,
	185, 455, 0, 444, 420, 450, 421, 442, 469, 131,
	439, 512, 483, 524, 157, 523, 473, 0, 531, 159,
	489, 0, 231, 173, 0, 0, 471, 514, 478, 507,
	466, 499, 430, 488, 526, 456, 496, 527, 0, 0,
	0, 100, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 493, 521, 452, 495, 497, 419, 490, 0,
	423, 426, 532, 517, 447, 448, 0, 0, 0, 0,
	0, 0, 0, 470, 479, 504, 464, 0, 0, 0,
	0, 0, 0, 0, 0, 445, 0, 487, 0, 0,
	0, 427, 424, 0, 0, 468, 0, 0, 0, 429,
	0, 446, 505, 0, 416, 139, 0, 0, 509, 516,
	465, 0, 260, 520, 463, 462, 204, 0, 235, 142,
	156, 117, 103, 113, 0, 141, 182, 211, 215, 453,
	417, 513, 443, 451, 125, 449, 213, 192, 251, 0,
	486, 194, 212, 160, 241, 205, 250, 261, 262, 238,
	258, 266, 228, 0, 0, 0, 0, 0, 0, 106,
	237, 249, 122, 223, 108, 247, 234, 171, 151, 152,
	107, 0, 209, 130, 137, 127, 184, 0, 0, 0,
	244, 245, 126, 269, 114, 257, 110, 115, 256, 178,
	0, 0, 0, 240, 248, 172, 165, 0, 109, 246,
	170, 164, 155, 134, 144, 202, 162, 203, 145, 175,
	174, 176, 0, 422, 0, 232, 254, 270, 119, 438,
	0, 239, 264, 265, 0, 0, 120, 138, 133, 201,
	177, 116, 147, 229, 154, 161, 208, 268, 191, 214,
	123, 253, 230, 434, 437, 432, 433, 481, 482, 528,
	529, 530, 506, 428, 0, 435, 436, 0, 511, 518,
	519, 485, 102, 111, 158, 267, 206, 136, 255, 418,
	431, 129, 441, 0, 0, 454, 459, 460, 472, 474,
	475, 476, 477, 484, 491, 492, 494, 500, 501, 502,
	503, 508, 515, 534, 104, 105, 112, 118, 124, 128,
	132, 135, 140, 143, 146, 148, 149, 150, 153, 163,
	166, 167, 168, 169, 179, 180, 181, 183, 186, 187,
	188, 189, 190, 193, 195, 196, 197, 198, 199, 200,
	207, 210, 216, 217, 218, 219, 220, 221, 222, 224,
	225, 226, 227, 233, 236, 242, 243, 252, 259, 263,
	522, 510, 0, 467, 525, 440, 457, 533, 458, 461,
	498, 425, 480, 185, 455, 0, 444, 420, 450, 421,
	442, 469, 131, 439, 512, 483, 524, 157, 523, 473,
	0, 531, 159, 489, 0, 231, 173, 0, 0, 471,
	514, 478, 507, 466, 499, 430, 488, 526, 456, 496,
	527, 0, 0, 0, 414, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 493, 521, 452, 495, 497,
	419, 490, 0, 423, 426, 532, 517, 447, 448, 0,
	0, 0, 0, 0, 0, 0, 470, 479, 504, 464,
	0, 0, 0, 0, 0, 0, 0, 0, 445, 0,
	487, 0, 0, 0, 427, 424, 0, 0, 468, 0,
	0, 0, 429, 0, 446, 505, 0, 416, 139, 0,
	0, 509, 516, 465, 0, 260, 520, 463, 462, 204,
	0, 235, 142, 156, 117, 103, 113, 0, 141, 182,
	211, 215, 453, 417, 513, 443, 451, 125, 449, 213,
	192, 251, 0, 486, 194, 212, 160, 241, 205, 250,
	261, 262, 238, 258, 266, 228, 0, 0, 0, 0,
	0, 0, 106, 237, 740, 122, 223, 108, 247, 234,
	171, 151, 152, 107, 0, 209, 130, 137, 127, 184,
	0, 0, 0, 244, 245, 126, 269, 114, 257, 110,
	412, 256, 178, 0, 0, 0, 240, 248, 172, 165,
	0, 109, 246, 170, 164, 155, 134, 144, 202, 162,
	203, 145, 175, 174, 176, 0, 422, 0, 232, 254,
	270, 119, 438, 0, 239, 264, 265, 0, 0, 120,
	138, 133, 201, 413, 411, 147, 229, 154, 161, 208,
	268, 191, 214, 123, 253, 230, 434, 437, 432, 433,
	481, 482, 528, 529, 530, 506, 428, 0, 435, 436,
	0, 511, 518, 519, 485, 102, 111, 158, 267, 206,
	136, 255, 418, 431, 129, 441, 0, 0, 454, 459,
	460, 472, 474, 475, 476, 477, 484, 491, 492, 494,
	500, 501, 502, 503, 508, 515, 534, 104, 105, 112,
	118, 124, 128, 132, 135, 140, 143, 146, 148, 149,
	150, 153, 163, 166, 167, 168, 169, 179, 180, 181,
	183, 186, 187, 188, 189, 190, 193, 195, 196, 197,
	198, 199, 200, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	252, 259, 263, 522, 510, 0, 467, 525, 440, 457,
	533, 458, 461, 498, 425, 480, 185, 455, 0, 444,
	420, 450, 421, 442, 469, 131, 439, 512, 483, 524,
	157, 523, 473, 0, 531, 159, 489, 0, 231, 173,
	0, 0, 471, 514, 478, 507, 466, 499, 430, 488,
	526, 456, 496, 527, 0, 0, 0, 414, 0, 0,
	0, 0, 0, 0, 0, 0, 121, 0, 493, 521,
	452, 495, 497, 419, 490, 0, 423, 426, 532, 517,
	447, 448, 0, 0, 0, 0, 0, 0, 0, 470,
	479, 504, 464, 0, 0, 0, 0, 0, 0, 0,
	0, 445, 0, 487, 0, 0, 0, 427, 424, 0,
	0, 468, 0, 0, 0, 429, 0, 446, 505, 0,
	416, 139, 0, 0, 509, 516, 465, 0, 260, 520,
	463, 462, 204, 0, 235, 142, 156, 117, 103, 113,
	0, 141, 182, 211, 215, 453, 417, 513, 443, 451,
	125, 449, 213, 192, 251, 0, 486, 194, 212, 160,
	241, 205, 250, 261, 262, 238, 258, 266, 228, 0,
	0, 0, 0, 0, 0, 106, 237, 403, 122, 223,
	108, 247, 234, 171, 151, 152, 107, 0, 209, 130,
	137, 127, 184, 0, 0, 0, 244, 245, 126, 269,
	114, 257, 110, 412, 256, 178, 0, 0, 0, 240,
	248, 172, 165, 0, 109, 246, 170, 164, 155, 134,
	144, 202, 162, 203, 145, 175, 174, 176, 0, 422,
	0, 232, 254, 270, 119, 438, 0, 239, 264, 265,
	0, 0, 120, 138, 133, 201, 413, 411, 406, 405,
	154, 161, 208, 268, 191, 214, 123, 253, 230, 434,
	437, 432, 433, 481, 482, 528, 529, 530, 506, 428,
	0, 435, 436, 0, 511, 518, 519, 485, 102, 111,
	158, 267, 206, 136, 255, 418, 431, 129, 441, 0,
	0, 454, 459, 460, 472, 474, 475, 476, 477, 484,
	491, 492, 494, 500, 501, 502, 503, 508, 515, 534,
	104, 105, 112, 118, 124, 128, 132, 135, 140, 143,
	146, 148, 149, 150, 153, 163, 166, 167, 168, 169,
	179, 180, 181, 183, 186, 187, 188, 189, 190, 193,
	195, 196, 197, 198, 199, 200, 207, 210, 216, 217,
	218, 219, 220, 221, 222, 224, 225, 226, 227, 233,
	236, 242, 243, 252, 259, 263, 185, 0, 0, 0,
	0, 336, 0, 0, 0, 131, 333, 0, 0, 0,
	157, 0, 0, 0, 378, 159, 0, 0, 231, 173,
	0, 0, 0, 0, 367, 368, 0, 0, 0, 0,
	0, 0, 1002, 0, 61, 0, 0, 334, 355, 354,
	357, 358, 359, 360, 0, 0, 121, 356, 361, 362,
	363, 1003, 0, 0, 331, 348, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 345, 346, 0,
	0, 0, 0, 391, 0, 347, 0, 0, 342, 343,
	344, 349, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 0, 369, 0, 0, 0, 260, 0,
	0, 389, 204, 0, 235, 142, 156, 117, 103, 113,
	0, 141, 182, 211, 215, 375, 0, 0, 0, 0,
	125, 0, 213, 192, 251, 0, 0, 194, 212, 160,
	241, 205, 250, 261, 262, 238, 258, 266, 228, 0,
	0, 0, 0, 0, 0, 106, 237, 249, 122, 223,
	108, 247, 234, 171, 151, 152, 107, 0, 209, 130,
	137, 127, 184, 0, 0, 0, 244, 245, 126, 269,
	114, 257, 110, 115, 256, 178, 0, 0, 0, 240,
	248, 172, 165, 0, 109, 246, 170, 164, 155, 134,
	144, 202, 162, 203, 145, 175, 174, 176, 0, 0,
	0, 232, 254, 270, 119, 0, 0, 239, 264, 265,
	0, 0, 120, 138, 133, 201, 177, 116, 147, 229,
	154, 161, 208, 268, 191, 214, 123, 253, 230, 379,
	390, 385, 386, 383, 384, 382, 381, 380, 392, 370,
	371, 372, 373, 376, 0, 387, 388, 374, 102, 111,
	158, 267, 206, 136, 255, 0, 0, 129, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 105, 112, 118, 124, 128, 132, 135, 140, 143,
	146, 148, 149, 150, 153, 163, 166, 167, 168, 169,
	179, 180, 181, 183, 186, 187, 188, 189, 190, 193,
	195, 196, 197, 198, 199, 200, 207, 210, 216, 217,
	218, 219, 220, 221, 222, 224, 225, 226, 227, 233,
	236, 242, 243, 252, 259, 263, 185, 0, 0, 0,
	0, 336, 0, 0, 0, 131, 333, 0, 0, 0,
	157, 0, 0, 0, 378, 159, 0, 0, 231, 173,
	0, 0, 0, 0, 367, 368, 0, 0, 0, 0,
	0, 0, 0, 0, 61, 0, 604, 334, 355, 354,
	357, 358, 359, 360, 0, 0, 121, 356, 361, 362,
	363, 0, 0, 0, 331, 348, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 345, 346, 0,
	0, 0, 0, 391, 0, 347, 0, 0, 342, 343,
	344, 349, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 0, 369, 0, 0, 0, 260, 0,
	0, 389, 204, 0, 235, 142, 156, 117, 103, 113,
	0, 141, 182, 211, 215, 375, 0, 0, 0, 0,
	125, 0, 213, 192, 251, 0, 0, 194, 212, 160,
	241, 205, 250, 261, 262, 238, 258, 266, 228, 0,
	0, 0, 0, 0, 0, 106, 237, 249, 122, 223,
	108, 247, 234, 171, 151, 152, 107, 0, 209, 130,
	137, 127, 184, 0, 0, 0, 244, 245, 126, 269,
	114, 257, 110, 115, 256, 178, 0, 0, 0, 240,
	248, 172, 165, 0, 109, 246, 170, 164, 155, 134,
	144, 202, 162, 203, 145, 175, 174, 176, 0, 0,
	0, 232, 254, 270, 119, 0, 0, 239, 264, 265,
	0, 0, 120, 138, 133, 201, 177, 116, 147, 229,
	154, 161, 208, 268, 191, 214, 123, 253, 230, 379,
	390, 385, 386, 383, 384, 382, 381, 380, 392, 370,
	371, 372, 373, 376, 0, 387, 388, 374, 102, 111,
	158, 267, 206, 136, 255, 0, 0, 129, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 105, 112, 118, 124, 128, 132, 135, 140, 143,
	146, 148, 149, 150, 153, 163, 166, 167, 168, 169,
	179, 180, 181, 183, 186, 187, 188, 189, 190, 193,
	195, 196, 197, 198, 199, 200, 207, 210, 216, 217,
	218, 219, 220, 221, 222, 224, 225, 226, 227, 233,
	236, 242, 243, 252, 259, 263, 185, 0, 0, 0,
	0, 336, 0, 0, 0, 131, 333, 0, 0, 0,
	157, 0, 0, 0, 378, 159, 0, 0, 231, 173,
	0, 0, 0, 0, 367, 368, 0, 0, 0, 0,
	0, 0, 0, 0, 61, 0, 0, 334, 355, 354,
	357, 358, 359, 360, 0, 0, 121, 356, 361, 362,
	363, 0, 0, 0, 331, 348, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 345, 346, 327,
	0, 0, 0, 391, 0, 347, 0, 0, 342, 343,
	344, 349, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 0, 369, 0, 0, 0, 260, 0,
	0, 389, 204, 0, 235, 142, 156, 117, 103, 113,
	0, 141, 182, 211, 215, 375, 0, 0, 0, 0,
	125, 0, 213, 192, 251, 0, 0, 194, 212, 160,
	241, 205, 250, 261, 262, 238, 258, 266, 228, 0,
	0, 0, 0, 0, 0, 106, 237, 249, 122, 223,
	108, 247, 234, 171, 151, 152, 107, 0, 209, 130,
	137, 127, 184, 0, 0, 0, 244, 245, 126, 269,
	114, 257, 110, 115, 256, 178, 0, 0, 0, 240,
	248, 172, 165, 0, 109, 246, 170, 164, 155, 134,
	144, 202, 162, 203, 145, 175, 174, 176, 0, 0,
	0, 232, 254, 270, 119, 0, 0, 239, 264, 265,
	0, 0, 120, 138, 133, 201, 177, 116, 147, 229,
	154, 161, 208, 268, 191, 214, 123, 253, 230, 379,
	390, 385, 386, 383, 384, 382, 381, 380, 392, 370,
	371, 372, 373, 376, 0, 387, 388, 374, 102, 111,
	158, 267, 206, 136, 255, 0, 0, 129, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 105, 112, 118, 124, 128, 132, 135, 140, 143,
	146, 148, 149, 150, 153, 163, 166, 167, 168, 169,
	179, 180, 181, 183, 186, 187, 188, 189, 190, 193,
	195, 196, 197, 198, 199, 200, 207, 210, 216, 217,
	218, 219, 220, 221, 222, 224, 225, 226, 227, 233,
	236, 242, 243, 252, 259, 263, 185, 0, 0, 0,
	0, 336, 0, 0, 0, 131, 333, 0, 0, 0,
	157, 0, 0, 0, 378, 159, 0, 0, 231, 173,
	0, 0, 0, 0, 367, 368, 0, 0, 0, 0,
	0, 0, 0, 0, 61, 0, 0, 334, 355, 938,
	357, 358, 359, 360, 0, 0, 121, 356, 361, 362,
	363, 0, 0, 0, 331, 348, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 345, 346, 327,
	0, 0, 0, 391, 0, 347, 0, 0, 342, 343,
	344, 349, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 0, 369, 0, 0, 0, 260, 0,
	0, 389, 204, 0, 235, 142, 156, 117, 103, 113,
	0, 141, 182, 211, 215, 375, 0, 0, 0, 0,
	125, 0, 213, 192, 251, 0, 0, 194, 212, 160,
	241, 205, 250, 261, 262, 238, 258, 266, 228, 0,
	0, 0, 0, 0, 0, 106, 237, 249, 122, 223,
	108, 247, 234, 171, 151, 152, 107, 0, 209, 130,
	137, 127, 184, 0, 0, 0, 244, 245, 126, 269,
	114, 257, 110, 115, 256, 178, 0, 0, 0, 240,
	248, 172, 165, 0, 109, 246, 170, 164, 155, 134,
	144, 202, 162, 203, 145, 175, 174, 176, 0, 0,
	0, 232, 254, 270, 119, 0, 0, 239, 264, 265,
	0, 0, 120, 138, 133, 201, 177, 116, 147, 229,
	154, 161, 208, 268, 191, 214, 123, 253, 230, 379,
	390, 385, 386, 383, 384, 382, 381, 380, 392, 370,
	371, 372, 373, 376, 0, 387, 388, 374, 102, 111,
	158, 267, 206, 136, 255, 0, 0, 129, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 105, 112, 118, 124, 128, 132, 135, 140, 143,
	146, 148, 149, 150, 153, 163, 166, 167, 168, 169,
	179, 180, 181, 183, 186, 187, 188, 189, 190, 193,
	195, 196, 197, 198, 199, 200, 207, 210, 216, 217,
	218, 219, 220, 221, 222, 224, 225, 226, 227, 233,
	236, 242, 243, 252, 259, 263, 185, 0, 0, 0,
	0, 336, 0, 0, 0, 131, 333, 0, 0, 0,
	157, 0, 0, 0, 378, 159, 0, 0, 231, 173,
	0, 0, 0, 0, 367, 368, 0, 0, 0, 0,
	0, 0, 0, 0, 61, 0, 0, 334, 355, 935,
	357, 358, 359, 360, 0, 0, 121, 356, 361, 362,
	363, 0, 0, 0, 331, 348, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 345, 346, 327,
	0, 0, 0, 391, 0, 347, 0, 0, 342, 343,
	344, 349, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 0, 369, 0, 0, 0, 260, 0,
	0, 389, 204, 0, 235, 142, 156, 117, 103, 113,
	0, 141, 182, 211, 215, 375, 0, 0, 0, 0,
	125, 0, 213, 192, 251, 0, 0, 194, 212, 160,
	241, 205, 250, 261, 262, 238, 258, 266, 228, 0,
	0, 0, 0, 0, 0, 106, 237, 249, 122, 223,
	108, 247, 234, 171, 151, 152, 107, 0, 209, 130,
	137, 127, 184, 0, 0, 0, 244, 245, 126, 269,
	114, 257, 110, 115, 256, 178, 0, 0, 0, 240,
	248, 172, 165, 0, 109, 246, 170, 164, 155, 134,
	144, 202, 162, 203, 145, 175, 174, 176, 0, 0,
	0, 232, 254, 270, 119, 0, 0, 239, 264, 265,
	0, 0, 120, 138, 133, 201, 177, 116, 147, 229,
	154, 161, 208, 268, 191, 214, 123, 253, 230, 379,
	390, 385, 386, 383, 384, 382, 381, 380, 392, 370,
	371, 372, 373, 376, 0, 387, 388, 374, 102, 111,
	158, 267, 206, 136, 255, 0, 0, 129, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 105, 112, 118, 124, 128, 132, 135, 140, 143,
	146, 148, 149, 150, 153, 163, 166, 167, 168, 169,
	179, 180, 181, 183, 186, 187, 188, 189, 190, 193,
	195, 196, 197, 198, 199, 200, 207, 210, 216, 217,
	218, 219, 220, 221, 222, 224, 225, 226, 227, 233,
	236, 242, 243, 252, 259, 263, 26, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 0,
	0, 0, 0, 336, 0, 0, 0, 131, 333, 0,
	0, 0, 157, 0, 0, 0, 378, 159, 0, 0,
	231, 173, 0, 0, 0, 0, 367, 368, 0, 0,
	0, 0, 0, 0, 0, 0, 61, 0, 0, 334,
	355, 354, 357, 358, 359, 360, 0, 0, 121, 356,
	361, 362, 363, 0, 0, 0, 331, 348, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 345,
	346, 0, 0, 0, 0, 391, 0, 347, 0, 0,
	342, 343, 344, 349, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 0, 369, 0, 0, 0,
	260, 0, 0, 389, 204, 0, 235, 142, 156, 117,
	103, 113, 0, 141, 182, 211, 215, 375, 0, 0,
	0, 0, 125, 0, 213, 192, 251, 0, 0, 194,
	212, 160, 241, 205, 250, 261, 262, 238, 258, 266,
	228, 0, 0, 0, 0, 0, 0, 106, 237, 249,
	122, 223, 108, 247, 234, 171, 151, 152, 107, 0,
	209, 130, 137, 127, 184, 0, 0, 0, 244, 245,
	126, 269, 114, 257, 110, 115, 256, 178, 0, 0,
	0, 240, 248, 172, 165, 0, 109, 246, 170, 164,
	155, 134, 144, 202, 162, 203, 145, 175, 174, 176,
	0, 0, 0, 232, 254, 270, 119, 0, 0, 239,
	264, 265, 0, 0, 120, 138, 133, 201, 177, 116,
	147, 229, 154, 161, 208, 268, 191, 214, 123, 253,
	230, 379, 390, 385, 386, 383, 384, 382, 381, 380,
	392, 370, 371, 372, 373, 376, 0, 387, 388, 374,
	102, 111, 158, 267, 206, 136, 255, 0, 0, 129,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 105, 112, 118, 124, 128, 132, 135,
	140, 143, 146, 148, 149, 150, 153, 163, 166, 167,
	168, 169, 179, 180, 181, 183, 186, 187, 188, 189,
	190, 193, 195, 196, 197, 198, 199, 200, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 224, 225, 226,
	227, 233, 236, 242, 243, 252, 259, 263, 185, 0,
	0, 0, 0, 336, 0, 0, 0, 131, 333, 0,
	0, 0, 157, 0, 0, 0, 378, 159, 0, 0,
	231, 173, 0, 0, 0, 0, 367, 368, 0, 0,
	0, 0, 0, 0, 0, 0, 61, 0, 0, 334,
	355, 354, 357, 358, 359, 360, 0, 0, 121, 356,
	361, 362, 363, 0, 0, 0, 331, 348, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 345,
	346, 0, 0, 0, 0, 391, 0, 347, 0, 0,
	342, 343, 344, 349, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 0, 369, 0, 0, 0,
	260, 0, 0, 389, 204, 0, 235, 142, 156, 117,
	103, 113, 0, 141, 182, 211, 215, 375, 0, 0,
	0, 0, 125, 0, 213, 192, 251, 0, 0, 194,
	212, 160, 241, 205, 250, 261, 262, 238, 258, 266,
	228, 0, 0, 0, 0, 0, 0, 106, 237, 249,
	122, 223, 108, 247, 234, 171, 151, 152, 107, 0,
	209, 130, 137, 127, 184, 0, 0, 0, 244, 245,
	126, 269, 114, 257, 110, 115, 256, 178, 0, 0,
	0, 240, 248, 172, 165, 0, 109, 246, 170, 164,
	155, 134, 144, 202, 162, 203, 145, 175, 174, 176,
	0, 0, 0, 232, 254, 270, 119, 0, 0, 239,
	264, 265, 0, 0, 120, 138, 133, 201, 177, 116,
	147, 229, 154, 161, 208, 268, 191, 214, 123, 253,
	230, 379, 390, 385, 386, 383, 384, 382, 381, 380,
	392, 370, 371, 372, 373, 376, 0, 387, 388, 374,
	102, 111, 158, 267, 206, 136, 255, 0, 0, 129,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 105, 112, 118, 124, 128, 132, 135,
	140, 143, 146, 148, 149, 150, 153, 163, 166, 167,
	168, 169, 179, 180, 181, 183, 186, 187, 188, 189,
	190, 193, 195, 196, 197, 198, 199, 200, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 224, 225, 226,
	227, 233, 236, 242, 243, 252, 259, 263, 185, 0,
	0, 0, 0, 0, 0, 0, 0, 131, 0, 0,
	0, 0, 157, 0, 0, 0, 378, 159, 0, 0,
	231, 173, 0, 0, 0, 0, 367, 368, 0, 0,
	0, 0, 0, 0, 0, 0, 61, 0, 0, 334,
	355, 354, 357, 358, 359, 360, 0, 0, 121, 356,
	361, 362, 363, 0, 0, 0, 0, 348, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 345,
	346, 0, 0, 0, 0, 391, 0, 347, 0, 0,
	342, 343, 344, 349, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 0, 369, 0, 0, 0,
	260, 0, 0, 389, 204, 0, 235, 142, 156, 117,
	103, 113, 0, 141, 182, 211, 215, 375, 0, 0,
	0, 0, 125, 0, 213, 192, 251, 0, 1696, 194,
	212, 160, 241, 205, 250, 261, 262, 238, 258, 266,
	228, 0, 0, 0, 0, 0, 0, 106, 237, 249,
	122, 223, 108, 247, 234, 171, 151, 152, 107, 0,
	209, 130, 137, 127, 184, 0, 0, 0, 244, 245,
	126, 269, 114, 257, 110, 115, 256, 178, 0, 0,
	0, 240, 248, 172, 165, 0, 109, 246, 170, 164,
	155, 134, 144, 202, 162, 203, 145, 175, 174, 176,
	0, 0, 0, 232, 254, 270, 119, 0, 0, 239,
	264, 265, 0, 0, 120, 138, 133, 201, 177, 116,
	147, 229, 154, 161, 208, 268, 191, 214, 123, 253,
	230, 379, 390, 385, 386, 383, 384, 382, 381, 380,
	392, 370, 371, 372, 373, 376, 0, 387, 388, 374,
	102, 111, 158, 267, 206, 136, 255, 0, 0, 129,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 105, 112, 118, 124, 128, 132, 135,
	140, 143, 146, 148, 149, 150, 153, 163, 166, 167,
	168, 169, 179, 180, 181, 183, 186, 187, 188, 189,
	190, 193, 195, 196, 197, 198, 199, 200, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 224, 225, 226,
	227, 233, 236, 242, 243, 252, 259, 263, 185, 0,
	0, 0, 0, 0, 0, 0, 0, 131, 0, 0,
	0, 0, 157, 0, 0, 0, 378, 159, 0, 0,
	231, 173, 0, 0, 0, 0, 367, 368, 0, 0,
	0, 0, 0, 0, 0, 0, 61, 0, 604, 334,
	355, 354, 357, 358, 359, 360, 0, 0, 121, 356,
	361, 362, 363, 0, 0, 0, 0, 348, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 345,
	346, 0, 0, 0, 0, 391, 0, 347, 0, 0,
	342, 343, 344, 349, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 0, 369, 0, 0, 0,
	260, 0, 0, 389, 204, 0, 235, 142, 156, 117,
	103, 113, 0, 141, 182, 211, 215, 375, 0, 0,
	0, 0, 125, 0, 213, 192, 251, 0, 0, 194,
	212, 160, 241, 205, 250, 261, 262, 238, 258, 266,
	228, 0, 0, 0, 0, 0, 0, 106, 237, 249,
	122, 223, 108, 247, 234, 171, 151, 152, 107, 0,
	209, 130, 137, 127, 184, 0, 0, 0, 244, 245,
	126, 269, 114, 257, 110, 115, 256, 178, 0, 0,
	0, 240, 248, 172, 165, 0, 109, 246, 170, 164,
	155, 134, 144, 202, 162, 203, 145, 175, 174, 176,
	0, 0, 0, 232, 254, 270, 119, 0, 0, 239,
	264, 265, 0, 0, 120, 138, 133, 201, 177, 116,
	147, 229, 154, 161, 208, 268, 191, 214, 123, 253,
	230, 379, 390, 385, 386, 383, 384, 382, 381, 380,
	392, 370, 371, 372, 373, 376, 0, 387, 388, 374,
	102, 111, 158, 267, 206, 136, 255, 0, 0, 129,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 105, 112, 118, 124, 128, 132, 135,
	140, 143, 146, 148, 149, 150, 153, 163, 166, 167,
	168, 169, 179, 180, 181, 183, 186, 187, 188, 189,
	190, 193, 195, 196, 197, 198, 199, 200, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 224, 225, 226,
	227, 233, 236, 242, 243, 252, 259, 263, 185, 0,
	0, 0, 0, 0, 0, 0, 0, 131, 0, 0,
	0, 0, 157, 0, 0, 0, 378, 159, 0, 0,
	231, 173, 0, 0, 0, 0, 367, 368, 0, 0,
	0, 0, 0, 0, 0, 0, 61, 0, 0, 334,
	355, 354, 357, 358, 359, 360, 0, 0, 121, 356,
	361, 362, 363, 0, 0, 0, 0, 348, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 345,
	346, 0, 0, 0, 0, 391, 0, 347, 0, 0,
	342, 343, 344, 349, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 0, 369, 0, 0, 0,
	260, 0, 0, 389, 204, 0, 235, 142, 156, 117,
	103, 113, 0, 141, 182, 211, 215, 375, 0, 0,
	0, 0, 125, 0, 213, 192, 251, 0, 0, 194,
	212, 160, 241, 205, 250, 261, 262, 238, 258, 266,
	228, 0, 0, 0, 0, 0, 0, 106, 237, 249,
	122, 223, 108, 247, 234, 171, 151, 152, 107, 0,
	209, 130, 137, 127, 184, 0, 0, 0, 244, 245,
	126, 269, 114, 257, 110, 115, 256, 178, 0, 0,
	0, 240, 248, 172, 165, 0, 109, 246, 170, 164,
	155, 134, 144, 202, 162, 203, 145, 175, 174, 176,
	0, 0, 0, 232, 254, 270, 119, 0, 0, 239,
	264, 265, 0, 0, 120, 138, 133, 201, 177, 116,
	147, 229, 154, 161, 208, 268, 191, 214, 123, 253,
	230, 379, 390, 385, 386, 383, 384, 382, 381, 380,
	392, 370, 371, 372, 373, 376, 0, 387, 388, 374,
	102, 111, 158, 267, 206, 136, 255, 0, 0, 129,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 105, 112, 118, 124, 128, 132, 135,
	140, 143, 146, 148, 149, 150, 153, 163, 166, 167,
	168, 169, 179, 180, 181, 183, 186, 187, 188, 189,
	190, 193, 195, 196, 197, 198, 199, 200, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 224, 225, 226,
	227, 233, 236, 242, 243, 252, 259, 263, 185, 0,
	0, 0, 0, 0, 0, 0, 0, 131, 0, 0,
	0, 0, 157, 0, 0, 0, 0, 159, 0, 0,
	231, 173, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 414,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 645, 644, 654, 655, 647,
	648, 649, 650, 651, 652, 653, 646, 0, 0, 656,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 0, 0, 0, 0, 0,
	260, 0, 0, 0, 204, 0, 235, 142, 156, 117,
	103, 113, 0, 141, 182, 211, 215, 0, 0, 0,
	0, 0, 125, 0, 213, 192, 251, 0, 0, 194,
	212, 160, 241, 205, 250, 261, 262, 238, 258, 266,
	228, 0, 0, 0, 0, 0, 0, 106, 237, 249,
	122, 223, 108, 247, 234, 171, 151, 152, 107, 0,
	209, 130, 137, 127, 184, 0, 0, 0, 244, 245,
	126, 269, 114, 257, 110, 115, 256, 178, 0, 0,
	0, 240, 248, 172, 165, 0, 109, 246, 170, 164,
	155, 134, 144, 202, 162, 203, 145, 175, 174, 176,
	0, 0, 0, 232, 254, 270, 119, 0, 0, 239,
	264, 265, 0, 0, 120, 138, 133, 201, 177, 116,
	147, 229, 154, 161, 208, 268, 191, 214, 123, 253,
	230, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	102, 111, 158, 267, 206, 136, 255, 0, 0, 129,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 105, 112, 118, 124, 128, 132, 135,
	140, 143, 146, 148, 149, 150, 153, 163, 166, 167,
	168, 169, 179, 180, 181, 183, 186, 187, 188, 189,
	190, 193, 195, 196, 197, 198, 199, 200, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 224, 225, 226,
	227, 233, 236, 242, 243, 252, 259, 263, 185, 0,
	0, 0, 981, 0, 0, 0, 0, 131, 0, 0,
	0, 0, 157, 0, 0, 0, 0, 159, 0, 0,
	231, 173, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 983, 985, 0, 0, 0, 0, 0, 100,
	0, 987, 0, 0, 0, 0, 0, 0, 121, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 0, 0, 0, 0, 0,
	260, 0, 984, 0, 204, 0, 235, 142, 156, 117,
	103, 113, 0, 141, 182, 211, 215, 0, 0, 0,
	0, 0, 125, 0, 213, 192, 251, 0, 0, 194,
	212, 160, 241, 205, 250, 261, 262, 238, 258, 266,
	228, 0, 0, 0, 0, 0, 0, 106, 237, 249,
	122, 223, 108, 247, 234, 171, 151, 152, 107, 0,
	209, 130, 137, 127, 184, 0, 0, 0, 244, 245,
	126, 269, 114, 257, 110, 115, 256, 178, 0, 0,
	0, 240, 248, 172, 165, 0, 109, 246, 170, 164,
	155, 134, 144, 202, 162, 203, 145, 175, 174, 176,
	0, 0, 0, 232, 254, 270, 119, 0, 0, 239,
	264, 265, 0, 0, 120, 138, 133, 201, 177, 116,
	147, 229, 154, 161, 208, 268, 191, 214, 123, 253,
	230, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	102, 111, 158, 267, 206, 136, 255, 0, 0, 129,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 105, 112, 118, 124, 128, 132, 135,
	140, 143, 146, 148, 149, 150, 153, 163, 166, 167,
	168, 169, 179, 180, 181, 183, 186, 187, 188, 189,
	190, 193, 195, 196, 197, 198, 199, 200, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 224, 225, 226,
	227, 233, 236, 242, 243, 252, 259, 263, 185, 0,
	0, 0, 981, 0, 0, 0, 0, 131, 0, 0,
	0, 0, 157, 0, 0, 0, 0, 159, 0, 0,
	231, 173, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 983, 985, 0, 0, 0, 0, 0, 100,
	0, 987, 0, 0, 0, 0, 0, 0, 121, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 0, 0, 0, 0, 0,
	260, 0, 984, 0, 204, 0, 235, 142, 156, 117,
	103, 113, 0, 141, 182, 211, 215, 0, 0, 0,
	0, 0, 125, 0, 213, 192, 251, 0, 0, 979,
	212, 160, 241, 205, 250, 261, 262, 238, 258, 266,
	228, 0, 0, 0, 0, 0, 0, 106, 237, 249,
	122, 223, 108, 247, 234, 171, 151, 152, 107, 0,
	209, 130, 137, 127, 184, 0, 0, 0, 244, 245,
	126, 269, 114, 257, 110, 115, 256, 178, 0, 0,
	0, 240, 248, 172, 165, 0, 109, 246, 170, 164,
	155, 134, 144, 202, 162, 203, 145, 175, 174, 176,
	0, 0, 0, 232, 254, 270, 119, 0, 0, 239,
	264, 265, 0, 0, 120, 138, 133, 201, 177, 116,
	147, 229, 154, 161, 208, 268, 191, 214, 123, 253,
	230, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	102, 111, 158, 267, 206, 136, 255, 0, 0, 129,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 105, 112, 118, 124, 128, 132, 135,
	140, 143, 146, 148, 149, 150, 153, 163, 166, 167,
	168, 169, 179, 180, 181, 183, 186, 187, 188, 189,
	190, 193, 195, 196, 197, 198, 199, 200, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 224, 225, 226,
	227, 233, 236, 242, 243, 252, 259, 263, 185, 0,
	0, 0, 633, 0, 0, 0, 0, 131, 0, 0,
	0, 0, 157, 0, 0, 0, 0, 159, 0, 0,
	231, 173, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 414,
	0, 635, 0, 0, 0, 0, 0, 0, 121, 0,
	0, 0, 0, 0, 630, 629, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 631, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 0, 0, 0, 0, 0,
	260, 0, 0, 0, 204, 0, 235, 142, 156, 117,
	103, 113, 0, 141, 182, 211, 215, 0, 0, 0,
	0, 0, 125, 0, 213, 192, 251, 0, 0, 194,
	212, 160, 241, 205, 250, 261, 262, 238, 258, 266,
	228, 0, 0, 0, 0, 0, 0, 106, 237, 249,
	122, 223, 108, 247, 234, 171, 151, 152, 107, 0,
	209, 130, 137, 127, 184, 0, 0, 0, 244, 245,
	126, 269, 114, 257, 110, 115, 256, 178, 0, 0,
	0, 240, 248, 172, 165, 0, 109, 246, 170, 164,
	155, 134, 144, 202, 162, 203, 145, 175, 174, 176,
	0, 0, 0, 232, 254, 270, 119, 0, 0, 239,
	264, 265, 0, 0, 120, 138, 133, 201, 177, 116,
	147, 229, 154, 161, 208, 268, 191, 214, 123, 253,
	230, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	102, 111, 158, 267, 206, 136, 255, 0, 0, 129,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 105, 112, 118, 124, 128, 132, 135,
	140, 143, 146, 148, 149, 150, 153, 163, 166, 167,
	168, 169, 179, 180, 181, 183, 186, 187, 188, 189,
	190, 193, 195, 196, 197, 198, 199, 200, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 224, 225, 226,
	227, 233, 236, 242, 243, 252, 259, 263, 26, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 0, 0, 0, 0, 0, 0, 0, 0, 131,
	0, 0, 0, 0, 157, 0, 0, 0, 0, 159,
	0, 0, 231, 173, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 61, 0,
	0, 414, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 0, 0, 0,
	0, 0, 260, 0, 0, 0, 204, 0, 235, 142,
	156, 117, 103, 113, 0, 141, 182, 211, 215, 0,
	0, 0, 0, 0, 125, 0, 213, 192, 251, 0,
	0, 194, 212, 160, 241, 205, 250, 261, 262, 238,
	258, 266, 228, 0, 0, 0, 0, 0, 0, 106,
	237, 249, 122, 223, 108, 247, 234, 171, 151, 152,
	107, 0, 209, 130, 137, 127, 184, 0, 0, 0,
	244, 245, 126, 269, 114, 257, 110, 115, 256, 178,
	0, 0, 0, 240, 248, 172, 165, 0, 109, 246,
	170, 164, 155, 134, 144, 202, 162, 203, 145, 175,
	174, 176, 0, 0, 0, 232, 254, 270, 119, 0,
	0, 239, 264, 265, 0, 0, 120, 138, 133, 201,
	177, 116, 147, 229, 154, 161, 208, 268, 191, 214,
	123, 253, 230, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 111, 158, 267, 206, 136, 255, 0,
	0, 129, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 105, 112, 118, 124, 128,
	132, 135, 140, 143, 146, 148, 149, 150, 153, 163,
	166, 167, 168, 169, 179, 180, 181, 183, 186, 187,
	188, 189, 190, 193, 195, 196, 197, 198, 199, 200,
	207, 210, 216, 217, 218, 219, 220, 221, 222, 224,
	225, 226, 227, 233, 236, 242, 243, 252, 259, 263,
	185, 0, 0, 0, 0, 0, 0, 0, 0, 131,
	0, 0, 0, 0, 157, 0, 0, 0, 0, 159,
	0, 0, 231, 173, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 100, 0, 987, 0, 0, 0, 0, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 0, 0, 0,
	0, 0, 260, 0, 0, 0, 204, 0, 235, 142,
	156, 117, 103, 113, 0, 141, 182, 211, 215, 0,
	0, 0, 0, 0, 125, 0, 213, 192, 251, 0,
	0, 194, 212, 160, 241, 205, 250, 261, 262, 238,
	258, 266, 228, 0, 0, 0, 0, 0, 0, 106,
	237, 249, 122, 223, 108, 247, 234, 171, 151, 152,
	107, 0, 209, 130, 137, 127, 184, 0, 0, 0,
	244, 245, 126, 269, 114, 257, 110, 115, 256, 178,
	0, 0, 0, 240, 248, 172, 165, 0, 109, 246,
	170, 164, 155, 134, 144, 202, 162, 203, 145, 175,
	174, 176, 0, 0, 0, 232, 254, 270, 119, 0,
	0, 239, 264, 265, 0, 0, 120, 138, 133, 201,
	177, 116, 147, 229, 154, 161, 208, 268, 191, 214,
	123, 253, 230, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 111, 158, 267, 206, 136, 255, 0,
	0, 129, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1198, 0, 0, 0,
	0, 0, 0, 0, 104, 105, 112, 118, 124, 128,
	132, 135, 140, 143, 146, 148, 149, 150, 153, 163,
	166, 167, 168, 169, 179, 180, 181, 183, 186, 187,
	188, 189, 190, 193, 195, 196, 197, 198, 199, 200,
	207, 210, 216, 217, 218, 219, 220, 221, 222, 224,
	225, 226, 227, 233, 236, 242, 243, 252, 259, 263,
	26, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 0, 0, 0, 0, 0, 0, 0,
	0, 131, 0, 0, 0, 0, 157, 0, 0, 0,
	0, 159, 0, 0, 231, 173, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	61, 0, 0, 100, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 0, 0,
	0, 0, 0, 0, 260, 0, 0, 0, 204, 0,
	235, 142, 156, 117, 103, 113, 0, 141, 182, 211,
	215, 0, 0, 0, 0, 0, 125, 0, 213, 192,
	251, 0, 0, 194, 212, 160, 241, 205, 250, 261,
	262, 238, 258, 266, 228, 0, 0, 0, 0, 0,
	0, 106, 237, 249, 122, 223, 108, 247, 234, 171,
	151, 152, 107, 0, 209, 130, 137, 127, 184, 0,
	0, 0, 244, 245, 126, 269, 114, 257, 110, 115,
	256, 178, 0, 0, 0, 240, 248, 172, 165, 0,
	109, 246, 170, 164, 155, 134, 144, 202, 162, 203,
	145, 175, 174, 176, 0, 0, 0, 232, 254, 270,
	119, 0, 0, 239, 264, 265, 0, 0, 120, 138,
	133, 201, 177, 116, 147, 229, 154, 161, 208, 268,
	191, 214, 123, 253, 230, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 111, 158, 267, 206, 136,
	255, 0, 0, 129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 105, 112, 118,
	124, 128, 132, 135, 140, 143, 146, 148, 149, 150,
	153, 163, 166, 167, 168, 169, 179, 180, 181, 183,
	186, 187, 188, 189, 190, 193, 195, 196, 197, 198,
	199, 200, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 224, 225, 226, 227, 233, 236, 242, 243, 252,
	259, 263, 185, 0, 0, 0, 0, 0, 0, 0,
	0, 131, 0, 0, 0, 0, 157, 0, 0, 0,
	0, 159, 0, 0, 231, 173, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 414, 0, 0, 875, 0, 0, 876,
	0, 0, 121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 0, 0,
	0, 0, 0, 0, 260, 0, 0, 0, 204, 0,
	235, 142, 156, 117, 103, 113, 0, 141, 182, 211,
	215, 0, 0, 0, 0, 0, 125, 0, 213, 192,
	251, 0, 0, 194, 212, 160, 241, 205, 250, 261,
	262, 238, 258, 266, 228, 0, 0, 0, 0, 0,
	0, 106, 237, 249, 122, 223, 108, 247, 234, 171,
	151, 152, 107, 0, 209, 130, 137, 127, 184, 0,
	0, 0, 244, 245, 126, 269, 114, 257, 110, 115,
	256, 178, 0, 0, 0, 240, 248, 172, 165, 0,
	109, 246, 170, 164, 155, 134, 144, 202, 162, 203,
	145, 175, 174, 176, 0, 0, 0, 232, 254, 270,
	119, 0, 0, 239, 264, 265, 0, 0, 120, 138,
	133, 201, 177, 116, 147, 229, 154, 161, 208, 268,
	191, 214, 123, 253, 230, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 111, 158, 267, 206, 136,
	255, 0, 0, 129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 105, 112, 118,
	124, 128, 132, 135, 140, 143, 146, 148, 149, 150,
	153, 163, 166, 167, 168, 169, 179, 180, 181, 183,
	186, 187, 188, 189, 190, 193, 195, 196, 197, 198,
	199, 200, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 224, 225, 226, 227, 233, 236, 242, 243, 252,
	259, 263, 185, 0, 0, 0, 0, 0, 0, 0,
	0, 131, 749, 0, 0, 0, 157, 0, 0, 0,
	0, 159, 0, 0, 231, 173, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 414, 0, 748, 0, 0, 0, 0,
	0, 0, 121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 0, 0,
	0, 0, 0, 0, 260, 0, 0, 0, 204, 0,
	235, 142, 156, 117, 103, 113, 0, 141, 182, 211,
	215, 0, 0, 0, 0, 0, 125, 0, 213, 192,
	251, 0, 0, 194, 212, 160, 241, 205, 250, 261,
	262, 238, 258, 266, 228, 0, 0, 0, 0, 0,
	0, 106, 237, 249, 122, 223, 108, 247, 234, 171,
	151, 152, 107, 0, 209, 130, 137, 127, 184, 0,
	0, 0, 244, 245, 126, 269, 114, 257, 110, 115,
	256, 178, 0, 0, 0, 240, 248, 172, 165, 0,
	109, 246, 170, 164, 155, 134, 144, 202, 162, 203,
	145, 175, 174, 176, 0, 0, 0, 232, 254, 270,
	119, 0, 0, 239, 264, 265, 0, 0, 120, 138,
	133, 201, 177, 116, 147, 229, 154, 161, 208, 268,
	191, 214, 123, 253, 230, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 111, 158, 267, 206, 136,
	255, 0, 0, 129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 105, 112, 118,
	124, 128, 132, 135, 140, 143, 146, 148, 149, 150,
	153, 163, 166, 167, 168, 169, 179, 180, 181, 183,
	186, 187, 188, 189, 190, 193, 195, 196, 197, 198,
	199, 200, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 224, 225, 226, 227, 233, 236, 242, 243, 252,
	259, 263, 185, 0, 0, 0, 0, 0, 0, 0,
	0, 131, 0, 0, 0, 0, 157, 0, 0, 0,
	0, 159, 0, 0, 231, 173, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 0, 987, 0, 0, 0, 0,
	0, 0, 121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 0, 0,
	0, 0, 0, 0, 260, 0, 0, 0, 204, 0,
	235, 142, 156, 117, 103, 113, 0, 141, 182, 211,
	215, 0, 0, 0, 0, 0, 125, 0, 213, 192,
	251, 0, 0, 194, 212, 160, 241, 205, 250, 261,
	262, 238, 258, 266, 228, 0, 0, 0, 0, 0,
	0, 106, 237, 249, 122, 223, 108, 247, 234, 171,
	151, 152, 107, 0, 209, 130, 137, 127, 184, 0,
	0, 0, 244, 245, 126, 269, 114, 257, 110, 115,
	256, 178, 0, 0, 0, 240, 248, 172, 165, 0,
	109, 246, 170, 164, 155, 134, 144, 202, 162, 203,
	145, 175, 174, 176, 0, 0, 0, 232, 254, 270,
	119, 0, 0, 239, 264, 265, 0, 0, 120, 138,
	133, 201, 177, 116, 147, 229, 154, 161, 208, 268,
	191, 214, 123, 253, 230, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 111, 158, 267, 206, 136,
	255, 0, 0, 129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 105, 112, 118,
	124, 128, 132, 135, 140, 143, 146, 148, 149, 150,
	153, 163, 166, 167, 168, 169, 179, 180, 181, 183,
	186, 187, 188, 189, 190, 193, 195, 196, 197, 198,
	199, 200, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 224, 225, 226, 227, 233, 236, 242, 243, 252,
	259, 263, 185, 0, 0, 0, 0, 0, 0, 0,
	0, 131, 0, 0, 0, 0, 157, 0, 0, 0,
	0, 159, 0, 0, 231, 173, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	61, 0, 0, 100, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 0, 0,
	0, 0, 0, 0, 260, 0, 0, 0, 204, 0,
	235, 142, 156, 117, 103, 113, 0, 141, 182, 211,
	215, 0, 0, 0, 0, 0, 125, 0, 213, 192,
	251, 0, 0, 194, 212, 160, 241, 205, 250, 261,
	262, 238, 258, 266, 228, 0, 0, 0, 0, 0,
	0, 106, 237, 249, 122, 223, 108, 247, 234, 171,
	151, 152, 107, 0, 209, 130, 137, 127, 184, 0,
	0, 0, 244, 245, 126, 269, 114, 257, 110, 115,
	256, 178, 0, 0, 0, 240, 248, 172, 165, 0,
	109, 246, 170, 164, 155, 134, 144, 202, 162, 203,
	145, 175, 174, 176, 0, 0, 0, 232, 254, 270,
	119, 0, 0, 239, 264, 265, 0, 0, 120, 138,
	133, 201, 177, 116, 147, 229, 154, 161, 208, 268,
	191, 214, 123, 253, 230, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 111, 158, 267, 206, 136,
	255, 0, 0, 129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 105, 112, 118,
	124, 128, 132, 135, 140, 143, 146, 148, 149, 150,
	153, 163, 166, 167, 168, 169, 179, 180, 181, 183,
	186, 187, 188, 189, 190, 193, 195, 196, 197, 198,
	199, 200, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 224, 225, 226, 227, 233, 236, 242, 243, 252,
	259, 263, 185, 0, 0, 0, 0, 0, 0, 0,
	0, 131, 0, 0, 0, 0, 157, 0, 0, 0,
	0, 159, 0, 0, 231, 173, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 414, 0, 635, 0, 0, 0, 0,
	0, 0, 121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 0, 0,
	0, 0, 0, 0, 260, 0, 0, 0, 204, 0,
	235, 142, 156, 117, 103, 113, 0, 141, 182, 211,
	215, 0, 0, 0, 0, 0, 125, 0, 213, 192,
	251, 0, 0, 194, 212, 160, 241, 205, 250, 261,
	262, 238, 258, 266, 228, 0, 0, 0, 0, 0,
	0, 106, 237, 249, 122, 223, 108, 247, 234, 171,
	151, 152, 107, 0, 209, 130, 137, 127, 184, 0,
	0, 0, 244, 245, 126, 269, 114, 257, 110, 115,
	256, 178, 0, 0, 0, 240, 248, 172, 165, 0,
	109, 246, 170, 164, 155, 134, 144, 202, 162, 203,
	145, 175, 174, 176, 0, 0, 0, 232, 254, 270,
	119, 0, 0, 239, 264, 265, 0, 0, 120, 138,
	133, 201, 177, 116, 147, 229, 154, 161, 208, 268,
	191, 214, 123, 253, 230, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 111, 158, 267, 206, 136,
	255, 0, 0, 129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 105, 112, 118,
	124, 128, 132, 135, 140, 143, 146, 148, 149, 150,
	153, 163, 166, 167, 168, 169, 179, 180, 181, 183,
	186, 187, 188, 189, 190, 193, 195, 196, 197, 198,
	199, 200, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 224, 225, 226, 227, 233, 236, 242, 243, 252,
	259, 263, 185, 0, 0, 0, 0, 0, 0, 0,
	719, 131, 0, 0, 0, 0, 157, 0, 0, 0,
	0, 159, 0, 0, 231, 173, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 0, 0,
	0, 0, 0, 0, 260, 0, 0, 0, 204, 0,
	235, 142, 156, 117, 103, 113, 0, 141, 182, 211,
	215, 0, 0, 0, 0, 0, 125, 0, 213, 192,
	251, 0, 0, 194, 212, 160, 241, 205, 250, 261,
	262, 238, 258, 266, 228, 0, 0, 0, 0, 0,
	0, 106, 237, 249, 122, 223, 108, 247, 234, 171,
	151, 152, 107, 0, 209, 130, 137, 127, 184, 0,
	0, 0, 244, 245, 126, 269, 114, 257, 110, 115,
	256, 178, 0, 0, 0, 240, 248, 172, 165, 0,
	109, 246, 170, 164, 155, 134, 144, 202, 162, 203,
	145, 175, 174, 176, 0, 0, 0, 232, 254, 270,
	119, 0, 0, 239, 264, 265, 0, 0, 120, 138,
	133, 201, 177, 116, 147, 229, 154, 161, 208, 268,
	191, 214, 123, 253, 230, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 111, 158, 267, 206, 136,
	255, 0, 0, 129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 105, 112, 118,
	124, 128, 132, 135, 140, 143, 146, 148, 149, 150,
	153, 163, 166, 167, 168, 169, 179, 180, 181, 183,
	186, 187, 188, 189, 190, 193, 195, 196, 197, 198,
	199, 200, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 224, 225, 226, 227, 233, 236, 242, 243, 252,
	259, 263, 395, 0, 0, 0, 0, 0, 0, 185,
	0, 0, 0, 0, 0, 0, 0, 0, 131, 0,
	0, 0, 0, 157, 0, 0, 0, 0, 159, 0,
	0, 231, 173, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	100, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 0, 0, 0, 0, 0,
	0, 260, 0, 0, 0, 204, 0, 235, 142, 156,
	117, 103, 113, 0, 141, 182, 211, 215, 0, 0,
	0, 0, 0, 125, 0, 213, 192, 251, 0, 0,
	194, 212, 160, 241, 205, 250, 261, 262, 238, 258,
	266, 228, 0, 0, 0, 0, 0, 0, 106, 237,
	249, 122, 223, 108, 247, 234, 171, 151, 152, 107,
	0, 209, 130, 137, 127, 184, 0, 0, 0, 244,
	245, 126, 269, 114, 257, 110, 115, 256, 178, 0,
	0, 0, 240, 248, 172, 165, 0, 109, 246, 170,
	164, 155, 134, 144, 202, 162, 203, 145, 175, 174,
	176, 0, 0, 0, 232, 254, 270, 119, 0, 0,
	239, 264, 265, 0, 0, 120, 138, 133, 201, 177,
	116, 147, 229, 154, 161, 208, 268, 191, 214, 123,
	253, 230, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 102, 111, 158, 267, 206, 136, 255, 0, 0,
	129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 105, 112, 118, 124, 128, 132,
	135, 140, 143, 146, 148, 149, 150, 153, 163, 166,
	167, 168, 169, 179, 180, 181, 183, 186, 187, 188,
	189, 190, 193, 195, 196, 197, 198, 199, 200, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 252, 259, 263, 185,
	0, 0, 0, 0, 0, 0, 0, 0, 131, 0,
	0, 0, 0, 157, 0, 0, 0, 0, 159, 0,
	0, 231, 173, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	100, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 0, 0, 0, 97, 0,
	0, 260, 0, 0, 0, 204, 0, 235, 142, 156,
	117, 103, 113, 0, 141, 182, 211, 215, 0, 0,
	0, 0, 0, 125, 0, 213, 192, 251, 0, 0,
	194, 212, 160, 241, 205, 250, 261, 262, 238, 258,
	266, 228, 0, 0, 0, 0, 0, 0, 106, 237,
	249, 122, 223, 108, 247, 234, 171, 151, 152, 107,
	0, 209, 130, 137, 127, 184, 0, 0, 0, 244,
	245, 126, 269, 114, 257, 110, 115, 256, 178, 0,
	0, 0, 240, 248, 172, 165, 0, 109, 246, 170,
	164, 155, 134, 144, 202, 162, 203, 145, 175, 174,
	176, 0, 0, 0, 232, 254, 270, 119, 0, 0,
	239, 264, 265, 0, 0, 120, 138, 133, 201, 177,
	116, 147, 229, 154, 161, 208, 268, 191, 214, 123,
	253, 230, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 102, 111, 158, 267, 206, 136, 255, 0, 0,
	129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 105, 112, 118, 124, 128, 132,
	135, 140, 143, 146, 148, 149, 150, 153, 163, 166,
	167, 168, 169, 179, 180, 181, 183, 186, 187, 188,
	189, 190, 193, 195, 196, 197, 198, 199, 200, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 252, 259, 263, 185,
	0, 0, 0, 0, 0, 0, 0, 0, 131, 0,
	0, 0, 0, 157, 0, 0, 0, 0, 159, 0,
	0, 231, 173, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	414, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 0, 0, 0, 0, 0,
	0, 260, 0, 0, 0, 204, 0, 235, 142, 156,
	117, 103, 113, 0, 141, 182, 211, 215, 0, 0,
	0, 0, 0, 125, 0, 213, 192, 251, 0, 0,
	194, 212, 160, 241, 205, 250, 261, 262, 238, 258,
	266, 228, 0, 0, 0, 0, 0, 0, 106, 237,
	249, 122, 223, 108, 247, 234, 171, 151, 152, 107,
	0, 209, 130, 137, 127, 184, 0, 0, 0, 244,
	245, 126, 269, 114, 257, 110, 115, 256, 178, 0,
	0, 0, 240, 248, 172, 165, 0, 109, 246, 170,
	164, 155, 134, 144, 202, 162, 203, 145, 175, 174,
	176, 0, 0, 0, 232, 254, 270, 119, 0, 0,
	239, 264, 265, 0, 0, 120, 138, 133, 201, 177,
	116, 147, 229, 154, 161, 208, 268, 191, 214, 123,
	253, 230, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 102, 111, 158, 267, 206, 136, 255, 0, 0,
	129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 105, 112, 118, 124, 128, 132,
	135, 140, 143, 146, 148, 149, 150, 153, 163, 166,
	167, 168, 169, 179, 180, 181, 183, 186, 187, 188,
	189, 190, 193, 195, 196, 197, 198, 199, 200, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 252, 259, 263, 185,
	0, 0, 0, 0, 0, 0, 0, 0, 131, 0,
	0, 0, 0, 157, 0, 0, 0, 0, 159, 0,
	0, 231, 173, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	100, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 0, 0, 0, 0, 0,
	0, 260, 0, 0, 0, 204, 0, 235, 142, 156,
	117, 103, 113, 0, 141, 182, 211, 215, 0, 0,
	0, 0, 0, 125, 0, 213, 192, 251, 0, 0,
	194, 212, 160, 241, 205, 250, 261, 262, 238, 258,
	266, 228, 0, 0, 0, 0, 0, 0, 106, 237,
	249, 122, 223, 108, 247, 234, 171, 151, 152, 107,
	0, 209, 130, 137, 127, 184, 0, 0, 0, 244,
	245, 126, 269, 114, 257, 110, 115, 256, 178, 0,
	0, 0, 240, 248, 172, 165, 0, 109, 246, 170,
	164, 155, 134, 144, 202, 162, 203, 145, 175, 174,
	176, 0, 0, 0, 232, 254, 270, 119, 0, 0,
	239, 264, 265, 0, 0, 120, 138, 133, 201, 177,
	116, 147, 229, 154, 161, 208, 268, 191, 214, 123,
	253, 230, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 102, 111, 158, 267, 206, 136, 255, 0, 0,
	129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 105, 112, 118, 124, 128, 132,
	135, 140, 143, 146, 148, 149, 150, 153, 163, 166,
	167, 168, 169, 179, 180, 181, 183, 186, 187, 188,
	189, 190, 193, 195, 196, 197, 198, 199, 200, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 252, 259, 263, 185,
	0, 0, 0, 0, 0, 0, 0, 0, 131, 0,
	0, 0, 0, 157, 0, 0, 0, 0, 159, 0,
	0, 231, 173, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	334, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 0, 0, 0, 0, 0,
	0, 260, 0, 0, 0, 204, 0, 235, 142, 156,
	117, 103, 113, 0, 141, 182, 211, 215, 0, 0,
	0, 0, 0, 125, 0, 213, 192, 251, 0, 0,
	194, 212, 160, 241, 205, 250, 261, 262, 238, 258,
	266, 228, 0, 0, 0, 0, 0, 0, 106, 237,
	249, 122, 223, 108, 247, 234, 171, 151, 152, 107,
	0, 209, 130, 137, 127, 184, 0, 0, 0, 244,
	245, 126, 269, 114, 257, 110, 115, 256, 178, 0,
	0, 0, 240, 248, 172, 165, 0, 109, 246, 170,
	164, 155, 134, 144, 202, 162, 203, 145, 175, 174,
	176, 0, 0, 0, 232, 254, 270, 119, 0, 0,
	239, 264, 265, 0, 0, 120, 138, 133, 201, 177,
	116, 147, 229, 154, 161, 208, 268, 191, 214, 123,
	253, 230, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 102, 111, 158, 267, 206, 136, 255, 0, 0,
	129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 105, 112, 118, 124, 128, 132,
	135, 140, 143, 146, 148, 149, 150, 153, 163, 166,
	167, 168, 169, 179, 180, 181, 183, 186, 187, 188,
	189, 190, 193, 195, 196, 197, 198, 199, 200, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 252, 259, 263,
}
var yyPact = [...]int{

	1942, -1000, -271, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1122, 1175, -1000, -1000, -1000, -1000,
	-1000, -1000, 385, 143, -1000, -1000, -1000, 198, 51, 16021,
	191, 1688, 16721, -1000, 39, -1000, -1000, 132, 16721, -1000,
	-1000, -70, -71, -1000, 890, -1000, -1000, 58, -1000, -1000,
	-1000, -1000, -1000, -1000, 1106, 1119, 938, 1101, 993, -1000,
	8278, 133, 133, 15671, 7228, -1000, -1000, 436, 16721, 174,
	16721, -149, 128, 128, 71, 128, -1000, 408, -1000, -1000,
	-1000, 16721, 130, 16371, 130, 130, 130, 16721, -1000, 245,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 16721, 768, 1055, 4324, 70, 4324, 4324, -1000, 425,
	-1000, 4324, 62, 4324, -40, 435, 60, -13, -1000, 4324,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 137, 890,
	407, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 584, 189,
	16721, 315, -1000, 1057, 9690, 9690, 1122, -1000, 890, -1000,
	-1000, -1000, 1044, -1000, -1000, 487, 1149, -1000, 12140, 242,
	-1000, 9690, 2232, 891, -1000, -1000, 891, -1000, -1000, 274,
	-1000, -1000, 10740, 10740, 10740, 10740, 10740, 10740, 10740, 10740,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 891, -1000, 9340, 891, 891, 891,
	891, 891, 891, 891, 891, 891, 891, 9690, 891, 891,
	891, 891, 891, 891, 891, 891, 891, 891, 891, 891,
	891, 891, 891, 15314, 14614, 16721, 855, 837, -1000, -1000,
	239, 892, 6865, -72, -1000, -1000, -1000, 356, 13914, -1000,
	-1000, -1000, 1054, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 775, 16721, -1000, 2620, -1000,
	16371, 1097, 146, 759, 459, 753, 750, 16721, 749, 901,
	160, 16721, 1082, 951, 16721, 748, 742, -1000, 6502, -1000,
	4324, 4324, -1000, -1000, -1000, 128, 128, 4324, 4324, 16721,
	4324, 16721, -1000, -1000, 16721, -1000, -1000, -1000, 4324, 4324,
	-1000, 1138, 395, -1000, -1000, -1000, -1000, 9690, -1000, 10740,
	322, -1000, 950, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	741, -1000, -1000, -1000, -1000, 16721, 4324, 72, 109, 96,
	16721, -1000, 1168, 306, 555, 237, 894, -1000, 406, 1106,
	584, 993, 13564, 942, -1000, -1000, -1000, 16721, -1000, 9690,
	9690, 548, -1000, 14964, -1000, -1000, 5050, 325, 10740, 500,
	453, 10740, 10740, 10740, 10740, 10740, 10740, 10740, 10740, 10740,
	10740, 10740, 10740, 10740, 10740, 10740, 572, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 735, -1000, 890, 637, 637,
	275, 275, 275, 275, 275, 275, 275, 11090, 1092, 584,
	734, 370, 9340, 8278, 8278, 584, 9690, 9690, 8978, 8628,
	8278, 8278, 1092, 410, 370, 17071, -1000, -1000, 10390, -1000,
	-1000, -1000, -1000, -1000, 584, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 16371, 16371, 8278, 8278, 8278, 8278, 84, 16721,
	-1000, 882, 909, -1000, -1000, -1000, 1088, 13214, 11790, 84,
	785, 14614, 16721, -1000, -1000, 14614, 16721, 4687, 6139, 892,
	-72, 843, -1000, -118, -107, 7578, 254, -1000, -1000, -1000,
	-1000, 3598, 234, 697, -1000, -59, -1000, -1000, -1000, 916,
	-1000, 916, 145, 4, 916, 916, 916, 916, 916, -3,
	-3, -3, -3, 7, -1000, -1000, -1000, -1000, -1000, 933,
	932, -1000, 916, 916, 916, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 923, 155, 923, 920, 920, 920, 920,
	940, -1000, 16721, 4324, 1065, 4324, 79, -1000, -1000, 16721,
	16721, 885, -1000, 16721, 869, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 726, 716, -1000, -1000, -1000, -1000, -1000,
	400, -1000, -1000, 16721, 1086, 16721, 16721, 370, 411, -1000,
	580, 16721, -1000, 126, -1000, 16721, 16721, 16721, 16721, 16721,
	208, -1000, 1013, 9690, 9690, 5776, 9690, -1000, -1000, -1000,
	1057, -1000, 1092, 1113, -1000, 1024, 1021, 8278, -1000, -1000,
	325, 451, -1000, -1000, 468, -1000, -1000, -1000, -1000, 229,
	891, -1000, 1859, -1000, -1000, -1000, -1000, 500, 10740, 10740,
	10740, 411, 1859, 2181, 499, 2255, 275, 583, 583, 292,
	292, 292, 292, 292, 668, 668, -1000, -1000, -1000, 584,
	-1000, -1000, -1000, 8278, -1000, 9690, -1000, 584, 731, -1000,
	731, -1000, 519, 541, 327, 1134, 731, 323, 1131, 731,
	731, 731, 8278, 454, -1000, 9690, 584, -1000, 225, -1000,
	486, 864, 863, 731, 584, 852, 731, 731, 793, 891,
	-1000, 17071, 14614, 14614, 14614, 14614, 14614, -1000, 987, 978,
	-1000, 980, 962, 979, 16721, -1000, 722, 13214, -1000, 891,
	-1000, 12852, 256, 172, 169, 167, -1000, -1000, 1129, 14614,
	781, -1000, 781, -1000, 219, -1000, -1000, 843, -72, -62,
	-1000, -1000, -1000, -1000, 370, -1000, 576, 794, 3235, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 927, 706, -1000, 1040,
	280, 258, 614, 1036, -1000, -1000, -1000, 188, -61, -1000,
	-1000, 552, -3, -3, 916, 916, 135, 916, -1000, -3,
	-1000, -1000, -1000, 254, 1048, 254, 254, 254, 254, -3,
	579, 579, -1000, -1000, -1000, -1000, 547, -1000, 923, -1000,
	-1000, 516, -1000, -1000, -1000, 949, 16371, 890, 1084, -1000,
	-1000, -1000, 1178, -1000, -1000, 157, -1000, 4324, 16721, 4324,
	4324, 1129, 703, 702, 395, 392, -200, -1000, -1000, -1000,
	10740, -1000, -1000, -1000, 390, 207, 290, 127, 127, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	81, 937, -1000, -1000, -1000, -1000, 18, 67, 1011, 370,
	370, 214, -1000, -1000, 16721, -1000, -1000, -1000, -1000, 865,
	-1000, -1000, -1000, 3961, 8278, -1000, 411, 1859, 2124, -1000,
	10740, -1000, 584, 370, -1000, 8278, -1000, -1000, 103, 572,
	103, 10740, 10740, -1000, 10740, 10740, -1000, -168, -1000, 883,
	396, -1000, 9690, 476, -1000, 5776, -1000, 10740, 10740, -1000,
	-1000, -1000, -1000, 948, 17071, 891, -1000, 12502, 16371, 838,
	-1000, 351, 909, 931, 947, 817, -1000, -1000, -1000, -1000,
	971, -1000, 968, -1000, -1000, -1000, -1000, 16371, 10740, 256,
	-1000, 891, 891, 891, 1122, 9690, 781, -1000, -1000, 277,
	-1000, -1000, -102, -119, -1000, -1000, -1000, 3598, -1000, 3598,
	16371, 111, -1000, 614, 614, -1000, -1000, -1000, 921, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 460, 10740, 1162, -1000,
	1038, -1000, 1037, 578, -1000, -1000, 684, 254, 254, -3,
	-1000, -1000, 916, -1000, 254, -1000, 289, -1000, -1000, -1000,
	-1000, 254, 701, -1000, 696, 788, -1000, 692, 16721, -1000,
	-1000, -1000, 946, -1000, -1000, -1000, 16721, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 392, -1000, 577, 9690, 10740, 1859,
	-1000, 591, -1000, 614, 238, -1000, -1000, -1000, 689, 1036,
	-1000, -1000, 688, -1000, 687, 16371, 1035, 686, 16721, 16371,
	-1000, -1000, 634, 652, 16371, -173, 646, 16371, 16371, 16371,
	-1000, 5413, -1000, 1129, 14614, -1000, -1000, 584, -1000, 10740,
	1859, -1000, -1000, 584, 916, 916, -1000, 916, 920, -1000,
	916, 28, 916, 27, 584, 584, 2092, 2004, 1763, 995,
	891, -162, -1000, 370, 9690, -1000, 832, 782, -1000, 1058,
	780, 779, -1000, -1000, 7928, 584, 683, 212, 677, -1000,
	1122, 17071, 9690, -1000, -1000, 9690, 917, -1000, 9690, -1000,
	-1000, -1000, 677, 1778, -1000, 16371, 16371, 16371, 1106, 370,
	-1000, -1000, -1000, -1000, 3235, -1000, 673, -1000, 916, -1000,
	-1000, -1000, 16371, -1000, 1859, -141, -1000, -1000, -1000, -1000,
	-1000, -1000, 254, -1000, -1000, -1000, -1000, -1000, -3, 575,
	-3, 515, -1000, 503, 915, -1000, 890, 16721, -1000, -1000,
	-1000, 370, 1859, 634, 112, -1000, 940, 280, 111, -1000,
	-1000, -1000, -1000, 644, 261, -1000, 156, 112, 634, 1060,
	-1000, 5413, -1000, -1000, 914, 941, -1000, 1126, 786, -1000,
	1859, -1000, -1000, 149, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 10740, 10740, 10740, 10740, 10740, 584, 561, 370,
	10740, 10740, 1034, -1000, 891, -1000, -1000, 887, 16371, 16371,
	-1000, 16371, 1106, -1000, 370, 370, 16371, 370, 11440, -1000,
	14264, 669, -1000, 669, 669, -1000, 226, 16371, 1078, 667,
	-1000, -1000, 254, -1000, 254, 623, 619, 16371, -1000, 1095,
	612, -1000, -1000, 632, 913, 614, -1000, -1000, 597, -1000,
	-1000, 16371, -1000, 112, 891, 784, -1000, 345, 16371, 16721,
	1124, 1117, -1000, -1000, 486, 486, 486, 486, 61, -1000,
	-1000, 486, 486, 1161, -1000, 891, -1000, 890, 201, -1000,
	-1000, -1000, 664, -1000, 256, 16371, -1000, -1000, -1000, 226,
	-1000, 594, 339, 560, -1000, -1000, 102, -1000, -1000, -1000,
	-1000, 661, -1000, 54, -1000, -1000, -1000, 16371, 940, -1000,
	-1000, -1000, -1000, 80, 5413, 3598, 659, -1000, -1000, 9690,
	9690, -1000, -1000, -1000, -1000, 584, 66, -176, -1000, -1000,
	17071, 779, 584, 16371, -1000, -1000, -1000, -1000, -1000, 481,
	-1000, -1000, 16721, 226, 52, -1000, 622, 906, -1000, 618,
	-1000, 16371, -1000, -1000, 937, 370, 778, -1000, 999, -171,
	-179, 724, -1000, -1000, -1000, 905, -1000, 226, 45, 226,
	16371, -1000, 80, 1019, -173, -1000, 997, -1000, 16371, -1000,
	590, 589, -1000, 611, -1000, 77, -1000, -174, 601, 163,
	-1000, -1000, 226, 69, -177, 944, -1000, -1000, -1000, -1000,
	-1000, 891, -180, 943, 939, 1158, -1000, 10040, -1000, -1000,
	1156, -1000, 1152, 269, 269, 486, 584, -1000, -1000, -1000,
	117, 585, -1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1424, 21, 560, 1423, 1421, 1418, 8, 7, 5,
	1417, 1416, 1415, 1414, 1410, 1409, 1407, 1406, 1402, 1401,
	1400, 1399, 1398, 1394, 1393, 1390, 1389, 1385, 1383, 1382,
	1381, 1380, 1378, 1377, 1375, 102, 1373, 1372, 1371, 85,
	1368, 90, 1367, 1366, 1364, 48, 113, 60, 73, 428,
	1363, 1362, 51, 88, 63, 1361, 53, 1360, 1356, 91,
	1355, 1351, 1349, 71, 1348, 1347, 1904, 1345, 80, 1343,
	30, 27, 46, 1342, 1341, 1340, 1339, 87, 558, 1338,
	1336, 1334, 32, 1331, 1330, 101, 1329, 70, 16, 28,
	20, 36, 1328, 54, 19, 1327, 69, 1326, 1324, 1321,
	1317, 62, 1316, 23, 1314, 78, 3, 29, 37, 77,
	1313, 9, 96, 52, 44, 14, 93, 82, 1312, 41,
	86, 67, 1311, 1308, 553, 1307, 1305, 72, 1304, 1303,
	50, 1302, 426, 100, 42, 1301, 1300, 1299, 1298, 38,
	56, 1297, 1296, 65, 103, 58, 0, 1075, 24, 89,
	1294, 18, 1291, 1445, 59, 26, 66, 1290, 1289, 64,
	1288, 1284, 1283, 1282, 1281, 1280, 1279, 1278, 1007, 1276,
	1273, 1272, 142, 187, 1271, 1270, 68, 45, 1268, 1266,
	1262, 55, 31, 1260, 61, 151, 1258, 1255, 1254, 1252,
	39, 1251, 1249, 1243, 1241, 1240, 47, 25, 1238, 33,
	15, 12, 35, 6, 34, 1237, 11, 1232, 17, 1230,
	10, 1229, 13, 57, 1, 2, 4, 1228, 1223, 1217,
	83, 189, 95, 1193, 1191, 118,
}
var yyR1 = [...]int{

	0, 218, 219, 219, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 6,
	3, 4, 4, 5, 5, 7, 7, 38, 38, 8,
	9, 9, 9, 9, 222, 222, 61, 61, 59, 59,
	60, 60, 112, 112, 10, 10, 10, 10, 117, 117,
	121, 121, 121, 122, 122, 122, 122, 157, 157, 106,
	12, 12, 12, 12, 12, 12, 12, 12, 142, 142,
	17, 17, 18, 18, 18, 104, 104, 104, 11, 11,
	11, 212, 212, 211, 210, 210, 209, 209, 208, 23,
	192, 194, 194, 193, 193, 193, 193, 182, 161, 161,
	161, 161, 161, 161, 161, 160, 160, 160, 160, 164,
	164, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	163, 163, 163, 163, 163, 163, 163, 163, 165, 165,
	165, 165, 165, 166, 166, 166, 166, 166, 166, 166,
	166, 166, 166, 166, 166, 166, 166, 166, 166, 166,
	166, 166, 166, 166, 166, 166, 166, 166, 167, 167,
	167, 167, 167, 167, 167, 167, 181, 181, 168, 168,
	176, 176, 177, 177, 177, 174, 174, 175, 175, 178,
	178, 170, 171, 179, 172, 172, 172, 173, 173, 173,
	180, 180, 180, 180, 169, 183, 183, 203, 203, 202,
	202, 201, 201, 201, 191, 191, 198, 198, 198, 198,
	198, 186, 186, 186, 185, 185, 187, 187, 190, 190,
	200, 200, 199, 184, 184, 204, 204, 204, 204, 204,
	188, 188, 189, 189, 189, 215, 216, 214, 214, 214,
	214, 214, 195, 195, 195, 196, 196, 196, 197, 197,
	197, 217, 217, 19, 19, 19, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 103, 103, 103, 21, 22, 22,
	22, 22, 22, 22, 22, 22, 140, 140, 213, 213,
	213, 213, 213, 207, 205, 205, 206, 206, 13, 24,
	24, 14, 14, 14, 14, 14, 15, 15, 25, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 50,
	128, 128, 126, 126, 129, 129, 127, 127, 127, 130,
	130, 130, 131, 131, 158, 158, 158, 27, 27, 32,
	32, 33, 34, 141, 141, 30, 30, 31, 31, 31,
	31, 44, 44, 223, 223, 29, 29, 28, 28, 28,
	28, 16, 224, 35, 36, 36, 37, 37, 37, 41,
	41, 41, 39, 39, 39, 40, 40, 47, 47, 46,
	46, 48, 48, 48, 48, 150, 150, 150, 149, 149,
	51, 51, 52, 52, 53, 53, 54, 54, 54, 54,
	69, 69, 70, 70, 70, 70, 70, 80, 80, 111,
	111, 113, 113, 55, 55, 55, 55, 56, 56, 57,
	57, 58, 58, 139, 139, 155, 155, 62, 62, 62,
	64, 63, 63, 63, 63, 65, 65, 67, 67, 66,
	66, 68, 71, 71, 71, 71, 72, 72, 49, 49,
	49, 49, 49, 49, 49, 125, 125, 74, 74, 73,
	73, 73, 73, 73, 73, 73, 73, 73, 73, 86,
	86, 86, 86, 86, 86, 75, 75, 75, 75, 75,
	75, 75, 45, 45, 87, 87, 87, 93, 88, 88,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 83, 83, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 225, 225, 85, 84, 84,
	84, 84, 84, 84, 42, 42, 42, 42, 42, 156,
	156, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 97, 97, 43, 43, 95, 95,
	96, 98, 98, 94, 94, 94, 77, 77, 77, 77,
	77, 77, 77, 77, 79, 79, 79, 99, 99, 100,
	100, 101, 101, 102, 102, 105, 107, 107, 107, 108,
	108, 108, 108, 109, 109, 109, 76, 76, 76, 76,
	76, 76, 110, 110, 110, 110, 114, 114, 89, 89,
	91, 91, 90, 92, 115, 115, 119, 116, 116, 120,
	120, 120, 120, 118, 118, 118, 152, 152, 152, 123,
	123, 132, 132, 133, 133, 124, 124, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 138, 138, 137,
	137, 137, 134, 134, 134, 135, 135, 151, 151, 147,
	147, 148, 148, 153, 153, 154, 154, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 220, 221, 143, 144, 144,
	144,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 4, 6, 7, 5,
	10, 1, 3, 1, 3, 7, 8, 1, 1, 9,
	8, 7, 6, 6, 1, 1, 1, 3, 1, 3,
	1, 3, 0, 4, 3, 4, 5, 4, 1, 3,
	3, 2, 2, 2, 2, 2, 1, 1, 1, 0,
	2, 2, 11, 7, 9, 5, 5, 15, 0, 3,
	1, 1, 1, 1, 1, 0, 2, 2, 1, 1,
	1, 0, 2, 1, 0, 2, 1, 3, 3, 4,
	4, 2, 4, 1, 3, 3, 3, 3, 0, 2,
	2, 2, 2, 2, 2, 3, 1, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 3, 2, 2, 2, 2, 2, 1, 2,
	2, 2, 1, 4, 4, 3, 3, 2, 4, 5,
	2, 3, 4, 2, 2, 3, 3, 3, 3, 3,
	4, 1, 1, 1, 1, 1, 6, 6, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 3,
	0, 5, 0, 3, 5, 0, 1, 0, 1, 1,
	2, 2, 3, 1, 0, 3, 3, 0, 2, 2,
	2, 1, 2, 1, 2, 5, 4, 0, 1, 1,
	2, 2, 3, 2, 0, 1, 2, 3, 3, 2,
	2, 1, 1, 1, 1, 1, 0, 1, 0, 1,
	1, 3, 3, 3, 1, 10, 11, 11, 12, 12,
	1, 1, 0, 2, 2, 3, 3, 1, 1, 2,
	2, 2, 0, 1, 3, 1, 2, 3, 1, 1,
	1, 0, 2, 1, 1, 1, 6, 10, 9, 7,
	7, 7, 9, 7, 12, 14, 7, 7, 9, 9,
	10, 5, 6, 8, 0, 1, 2, 4, 7, 5,
	5, 5, 12, 7, 5, 9, 0, 1, 1, 1,
	1, 1, 1, 7, 1, 3, 8, 8, 3, 3,
	5, 4, 6, 4, 4, 4, 3, 2, 3, 4,
	4, 3, 6, 6, 4, 4, 4, 4, 4, 3,
	3, 2, 6, 2, 3, 4, 3, 7, 6, 4,
	2, 4, 3, 4, 3, 3, 5, 2, 3, 3,
	1, 1, 0, 1, 1, 1, 0, 2, 2, 0,
	2, 2, 0, 2, 0, 1, 1, 2, 1, 1,
	2, 1, 1, 1, 1, 3, 3, 1, 1, 1,
	1, 0, 3, 1, 1, 2, 2, 2, 2, 3,
	3, 2, 0, 2, 0, 2, 1, 2, 2, 0,
	1, 1, 0, 1, 1, 0, 1, 0, 1, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 1,
	0, 2, 1, 3, 1, 1, 1, 3, 1, 3,
	2, 6, 1, 4, 6, 3, 2, 0, 3, 1,
	3, 1, 3, 4, 4, 4, 3, 2, 4, 0,
	1, 0, 2, 0, 1, 1, 1, 1, 2, 2,
	1, 2, 3, 2, 3, 2, 2, 2, 1, 1,
	3, 3, 0, 5, 5, 5, 0, 2, 1, 3,
	3, 2, 3, 1, 2, 0, 3, 1, 1, 3,
	3, 4, 4, 5, 3, 4, 5, 6, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 0, 2, 1, 1, 1, 3, 1, 3,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 2, 2, 2, 2, 2, 3, 1, 1,
	1, 1, 5, 6, 4, 4, 3, 6, 6, 6,
	8, 8, 8, 8, 9, 4, 7, 5, 4, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 8, 8, 0, 2, 3, 4, 4,
	4, 4, 4, 4, 0, 3, 4, 7, 3, 1,
	1, 2, 3, 3, 1, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 0, 3, 0,
	2, 0, 3, 1, 3, 2, 0, 1, 1, 0,
	2, 4, 4, 0, 2, 4, 2, 1, 3, 5,
	4, 6, 1, 3, 3, 5, 0, 5, 1, 3,
	1, 2, 3, 1, 1, 3, 3, 1, 3, 3,
	3, 3, 3, 1, 2, 1, 1, 1, 1, 1,
	1, 0, 2, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 1, 0, 1, 0, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	1,
}
var yyChk = [...]int{

	-1000, -218, -1, -2, -6, -7, -8, -9, -10, -12,
	-19, -13, -14, -15, -25, -26, -27, -32, -33, -34,
	-30, -29, -28, -16, -3, -4, 6, 7, -38, 9,
	10, 29, -23, 117, -20, -21, -22, 120, 119, 156,
	121, 149, 52, 177, 178, 180, 181, -223, -141, 154,
	155, 30, 31, 123, -220, 8, 270, 118, 151, 150,
	25, 56, -219, 368, -101, 15, -37, 5, -35, -224,
	-35, -35, -35, -35, -35, -192, -194, 56, 92, -135,
	130, 74, 262, 126, -142, 127, -134, 176, 33, 137,
	136, 127, 127, 128, 130, 262, 126, 127, -66, -153,
	59, -146, 280, 140, 312, 313, 177, 188, 182, 216,
	204, 281, 314, 141, 202, 205, 249, 139, 315, 236,
	244, 68, 180, 258, 316, 152, 200, 193, 317, 289,
	191, 27, 318, 246, 221, 319, 285, 192, 245, 123,
	320, 143, 137, 321, 222, 226, 322, 250, 323, 324,
	325, 186, 187, 326, 252, 220, 138, 32, 282, 37,
	161, 253, 224, 327, 219, 214, 328, 329, 330, 331,
	218, 185, 213, 41, 228, 227, 229, 248, 207, 332,
	333, 334, 144, 335, 194, 18, 336, 337, 338, 339,
	340, 256, 155, 341, 159, 342, 343, 344, 345, 346,
	347, 247, 223, 225, 134, 163, 284, 348, 254, 190,
	349, 145, 160, 154, 257, 146, 350, 351, 352, 353,
	354, 355, 356, 181, 357, 358, 359, 360, 170, 251,
	260, 40, 233, 361, 184, 136, 362, 178, 167, 239,
	211, 162, 363, 364, 198, 199, 217, 183, 212, 179,
	164, 156, 365, 259, 234, 286, 206, 203, 168, 366,
	130, 165, 166, 367, 240, 241, 169, 283, 255, 201,
	235, 127, 110, 205, 249, 117, 237, 238, 246, -186,
	247, 163, -158, 127, -126, 236, 240, 241, 169, 59,
	128, 129, 32, 251, 250, 242, -153, 179, -44, 121,
	157, -66, -143, -143, -143, 239, 239, -143, -2, -124,
	130, 241, 132, -108, 17, 16, -5, -3, -220, 6,
	20, 21, -41, 42, 43, -36, -48, 101, -49, -153,
	-73, 76, -78, 28, 59, -146, 23, -77, -74, -94,
	-92, -93, 110, 111, 112, 99, 100, 107, 77, 113,
	-83, -81, -82, -84, 61, 60, 69, 62, 63, 64,
	65, 70, 71, 72, -147, -90, -220, 46, 47, 126,
	271, 272, 273, 274, 279, 147, 275, 79, 36, 261,
	269, 268, 267, 265, 266, 263, 264, 277, 278, 133,
	262, 105, 270, -124, -124, 11, -59, -60, -66, -68,
	-153, -116, -157, 179, -120, 251, 250, -148, -118, -147,
	-145, 249, 205, 248, 59, -146, 122, 148, 287, 75,
	22, 24, 231, 78, 110, 16, 79, 109, 271, 117,
	50, 288, 263, 264, 261, 273, 274, 262, 237, 28,
	10, 290, 25, 150, 21, 103, 119, 82, 83, 153,
	23, 151, 72, 147, 293, 19, 53, 11, 13, 294,
	295, 14, 133, 132, 94, 128, 48, 8, 113, 26,
	91, 44, 296, 34, 297, 298, 299, 300, 46, 92,
	17, 265, 266, 30, 301, 279, 158, 105, 51, 38,
	76, 302, 303, 70, 304, 73, 54, 74, 15, 49,
	305, 306, 307, 308, 93, 120, 270, 47, 309, 126,
	6, 276, 29, 149, 45, 310, 127, 81, 277, 278,
	131, 71, 5, 33, 31, 9, 52, 55, 267, 268,
	269, 36, 80, 12, 311, -193, 92, -182, 59, -66,
	128, -66, 270, -133, 133, -133, 164, -133, 84, -24,
	-66, -132, 133, -147, -132, -132, -132, -66, 114, -66,
	59, 29, -144, -220, -148, 262, 126, 59, 163, 127,
	164, 130, -144, -144, -188, 11, 94, -144, 167, 168,
	-144, -129, -128, 244, 245, 239, 243, 12, -50, 92,
	168, 239, 166, -144, -31, -2, -9, -7, -8, -2,
	84, -143, -143, -221, 58, 127, -66, 117, 119, 122,
	54, -109, 19, 30, -49, -153, -102, -105, -49, -101,
	-2, -35, 38, -39, 20, 21, 67, 11, -150, 75,
	74, 91, -149, 22, -147, 61, 114, -49, -75, 94,
	76, 92, 93, 78, 96, 95, 106, 99, 100, 101,
	102, 103, 104, 105, 97, 98, 109, 84, 85, 86,
	87, 88, 89, 90, -125, -220, -93, -220, 115, 116,
	-78, -78, -78, -78, -78, -78, -78, -78, -220, -2,
	-88, -49, -220, -220, -220, -220, -220, -220, -220, -220,
	-220, -220, -220, -97, -49, -220, -225, -85, -220, -225,
	-85, -225, -85, -225, -220, -225, -85, -225, -85, -225,
	-225, -85, -220, -220, -220, -220, -220, -220, -67, 26,
	-66, -52, -53, -54, -55, -69, -93, -220, -66, -66,
	-59, -222, 57, 11, 55, -222, 57, 114, 57, -116,
	179, -117, -121, 252, 254, 84, -152, -147, 61, 28,
	29, 58, 57, -66, -160, -164, -166, -165, -167, -162,
	-163, 202, 205, 209, 207, 203, 208, 110, 206, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	29, 152, 198, 199, 200, 201, 222, 223, 224, 225,
	226, 227, 228, 229, 182, 204, 281, 183, 184, 185,
	186, 187, 188, 190, 191, 192, 193, 194, 195, 196,
	-147, 22, 130, 59, 76, 59, 59, -66, 59, 57,
	131, -59, 23, 54, -61, -66, 59, 59, -154, -153,
	-145, -144, -144, -133, -133, -144, -144, -66, -144, -66,
	-66, -144, -144, 11, -127, 11, 94, -49, -78, -131,
	92, 54, 59, -66, -144, 165, 165, 127, 127, 170,
	-66, 9, 94, 57, 18, 114, 57, -107, 24, 25,
	-108, -221, -41, -79, -147, 62, 65, -40, 45, -66,
	-49, -49, -86, 70, 76, 71, 72, -149, 101, -154,
	-148, -145, -78, -87, -90, -93, 66, 94, 92, 93,
	78, -78, -78, -78, -78, -78, -78, -78, -78, -78,
	-78, -78, -78, -78, -78, -78, -156, 59, 61, 59,
	-77, -77, -147, -39, -221, 57, -221, -2, -46, -48,
	-46, -221, -49, -49, -94, 61, -46, -94, 61, -46,
	-46, -46, -39, -95, -96, 80, -94, -147, -153, -221,
	-78, -147, -147, -46, -47, -46, -46, -46, -112, 159,
	-66, 29, 57, -62, -64, -63, -65, 44, 48, 50,
	45, 46, 47, 51, -139, 22, -52, -220, -70, 159,
	-71, 22, -155, 52, 132, 53, -153, 61, -112, 55,
	-52, -66, -52, -68, -153, 101, -120, -117, 57, 253,
	255, 256, 54, 73, -49, -173, 109, -195, -196, -197,
	-148, 61, 62, -182, -183, -184, -198, 142, -204, 134,
	136, 33, -185, 143, 128, 34, 58, -161, -174, 234,
	-168, 56, -168, -168, 210, 202, 205, 203, -168, -168,
	-168, -168, -168, -172, 205, -172, -172, -172, -172, 203,
	56, 56, -168, -168, -168, -176, 56, -176, 197, -176,
	-177, 56, -177, -177, -177, -151, 55, -106, -66, -144,
	23, -144, -17, 173, 148, -66, -66, -66, 57, 59,
	59, -189, 11, 94, -66, -80, 22, -153, -153, -45,
	153, 61, -66, -136, 122, 119, 120, 124, 125, -207,
	118, 231, 205, 68, 28, 15, 271, 159, 286, 59,
	160, -66, -66, -66, -66, -66, 122, 119, 40, -49,
	-49, -154, -105, -109, -123, 19, 11, 36, 36, -46,
	70, 71, 72, 114, -220, -87, -78, -78, -78, -45,
	75, -221, -47, -49, -221, 57, -221, -221, 57, 55,
	22, 11, 11, -221, 11, 11, -221, -221, -221, -46,
	-98, -96, 82, -49, -221, 114, -221, 57, 57, -221,
	-221, -221, -221, -76, 29, 36, -2, -220, -220, -115,
	-119, -94, -53, -54, -54, -53, -54, 44, 44, 44,
	49, 44, 49, 44, -63, -153, -221, -220, 304, -155,
	-71, 128, 128, 128, -72, 12, -52, -72, -72, 114,
	-121, -122, 257, 254, 260, 59, 61, 57, -197, 84,
	56, 59, 34, -185, -185, -190, 59, -190, 34, -178,
	-170, -171, -179, -180, -169, 70, 76, 28, 54, 231,
	134, 34, 33, 68, -175, 235, 62, -172, -172, -168,
	-168, -168, 210, -168, -172, -173, 29, -173, -173, -173,
	-173, -172, -181, 61, -181, 62, -176, 62, 54, -147,
	-2, 22, -18, 8, 9, 10, 131, -144, -66, -144,
	-144, -72, 59, 59, -127, -130, 92, 12, 304, -78,
	-143, -140, -213, -185, -217, -184, 135, 139, 142, 143,
	134, 159, -140, -213, 142, -185, 143, 135, -137, -185,
	131, 22, -140, -140, 159, -212, 55, 165, 231, 165,
	41, 114, -66, -51, 11, 101, -148, -47, -45, 75,
	-78, -221, -48, -159, 110, 202, 152, 200, 193, 220,
	207, 233, 198, 234, -156, -159, -78, -78, -78, -78,
	280, -101, 83, -49, 81, -148, -78, -78, -114, 54,
	-115, -89, -91, -90, -220, -2, -110, -147, -113, -147,
	-72, 57, 84, -57, -56, 54, 55, -58, 54, -56,
	44, 44, -113, -78, -71, -220, -220, -220, -101, -49,
	-72, 254, 258, 259, -196, -197, -200, -199, -147, -204,
	-190, -190, 56, 70, -78, 9, 34, 34, 61, 58,
	-173, -173, -172, -168, -173, 59, 110, -173, 58, 57,
	58, 57, 58, 57, -66, -106, -106, 54, -66, -130,
	61, -49, -78, 56, -182, -143, -190, -134, 59, 59,
	-143, 59, -147, 34, 59, -66, -147, -182, 59, -147,
	-210, 283, -211, 59, -147, -147, -147, -72, -52, -221,
	-78, -221, -168, -168, -168, -177, -168, 187, -168, 187,
	-221, -221, 19, 19, 19, 19, -220, -43, 276, -49,
	57, 57, 27, -114, 57, -221, -221, -221, 57, 114,
	-221, 57, -101, -119, -49, -49, 56, -49, -221, -71,
	-139, -111, -147, -111, -111, -108, 58, 57, -168, -111,
	-82, -173, -172, 61, -172, 62, 62, 56, -2, -66,
	-182, -103, 147, 148, -151, -187, -185, 59, -138, 131,
	22, 131, -103, -182, 26, -209, -208, -148, 56, 55,
	-99, 13, -172, 59, -78, -78, -78, -78, -78, -221,
	61, -78, -78, 34, -91, 36, -2, -220, -147, -147,
	-147, -108, -111, -70, -155, 57, -221, -221, -221, -202,
	-201, 55, 138, 68, -199, -107, 58, -173, -173, 58,
	58, -200, -106, 19, 58, -143, 59, 56, -190, 59,
	-147, -143, -103, -220, 57, 84, -111, -66, -100, 14,
	16, -221, -221, -221, -221, -42, 94, 283, -221, -221,
	9, -89, -2, 114, 58, -71, -147, -201, 59, -191,
	84, 61, 145, 58, 171, -143, -200, -151, -143, -205,
	-206, 159, -208, -197, 58, -49, -88, -221, 281, 51,
	284, -115, -221, -147, 62, -66, -203, -202, 172, 58,
	56, -221, 57, -147, -212, 41, 282, 285, 56, -104,
	174, 175, -203, -200, -206, 36, -210, 41, -111, -106,
	59, 59, 58, 161, 283, 58, -11, -7, -8, -9,
	-203, 162, 284, -215, -216, 54, -106, -220, 285, -216,
	54, -215, 54, 10, 9, -78, 158, -214, 146, 141,
	144, 29, -214, -221, -221, 140, 28, 70,
}
var yyDef = [...]int{

	25, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 641, 0, 392, 392, 392, 392,
	392, 392, 0, -2, 263, 264, 265, 0, 0, 0,
	0, -2, 368, 369, 0, 371, 372, 381, -2, 1017,
	1017, 0, 0, 1017, 0, 37, 38, 695, 384, 373,
	374, 1015, 1, 3, 649, 0, 0, 396, 399, 394,
	0, 695, 695, 0, 0, 70, 71, 0, 0, 0,
	0, 0, 693, 693, 0, 693, 716, 0, 712, 713,
	714, 0, 691, 0, 691, 691, 691, 0, 317, 469,
	723, 724, 846, 847, 848, 849, 850, 851, 852, 853,
	854, 855, 856, 857, 858, 859, 860, 861, 862, 863,
	864, 865, 866, 867, 868, 869, 870, 871, 872, 873,
	874, 875, 876, 877, 878, 879, 880, 881, 882, 883,
	884, 885, 886, 887, 888, 889, 890, 891, 892, 893,
	894, 895, 896, 897, 898, 899, 900, 901, 902, 903,
	904, 905, 906, 907, 908, 909, 910, 911, 912, 913,
	914, 915, 916, 917, 918, 919, 920, 921, 922, 923,
	924, 925, 926, 927, 928, 929, 930, 931, 932, 933,
	934, 935, 936, 937, 938, 939, 940, 941, 942, 943,
	944, 945, 946, 947, 948, 949, 950, 951, 952, 953,
	954, 955, 956, 957, 958, 959, 960, 961, 962, 963,
	964, 965, 966, 967, 968, 969, 970, 971, 972, 973,
	974, 975, 976, 977, 978, 979, 980, 981, 982, 983,
	984, 985, 986, 987, 988, 989, 990, 991, 992, 993,
	994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003,
	1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013,
	1014, 0, 0, 0, 1018, 0, 1018, 1018, 331, 0,
	333, 1018, 0, 1018, 0, 340, 0, 0, 347, 1018,
	221, 222, 223, 365, 366, 353, 367, 370, 0, 0,
	0, 385, 386, 387, 388, 1017, 1017, 391, 31, 0,
	0, 0, 696, 653, 0, 0, 641, 33, 0, 392,
	397, 398, 402, 400, 401, 393, 0, 411, 415, 0,
	478, 0, 483, 485, -2, -2, 0, 520, 521, 522,
	523, 524, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 549, 550, 551, 626, 627, 628, 629, 630, 631,
	632, 633, 487, 488, 623, 673, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 614, 0, 585,
	585, 585, 585, 585, 585, 585, 585, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 48, 50,
	469, 54, 0, 993, 677, -2, -2, 0, 0, 721,
	722, -2, 859, -2, 719, 720, 727, 728, 729, 730,
	731, 732, 733, 734, 735, 736, 737, 738, 739, 740,
	741, 742, 743, 744, 745, 746, 747, 748, 749, 750,
	751, 752, 753, 754, 755, 756, 757, 758, 759, 760,
	761, 762, 763, 764, 765, 766, 767, 768, 769, 770,
	771, 772, 773, 774, 775, 776, 777, 778, 779, 780,
	781, 782, 783, 784, 785, 786, 787, 788, 789, 790,
	791, 792, 793, 794, 795, 796, 797, 798, 799, 800,
	801, 802, 803, 804, 805, 806, 807, 808, 809, 810,
	811, 812, 813, 814, 815, 816, 817, 818, 819, 820,
	821, 822, 823, 824, 825, 826, 827, 828, 829, 830,
	831, 832, 833, 834, 835, 836, 837, 838, 839, 840,
	841, 842, 843, 844, 845, 0, 0, 103, 0, 101,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 308,
	0, 0, 0, 0, 0, 0, 0, 316, 0, 318,
	1018, 1018, 321, 1019, 1020, 693, 693, 1018, 1018, 0,
	1018, 0, 329, 330, 0, 240, 241, 334, 1018, 1018,
	336, 0, 356, 354, 355, 350, 351, 0, 342, 0,
	362, 344, 345, 348, 375, -2, 378, 379, 380, -2,
	0, 389, 390, 32, 1016, 0, 1018, 0, 0, 0,
	0, 26, 0, 0, 650, 0, 642, 643, 646, 649,
	31, 399, 0, 405, 403, 404, 395, 0, 412, 0,
	0, 0, 416, 0, 418, 419, 0, 481, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 505, 506, 507,
	508, 509, 510, 511, 484, 0, 498, 0, 0, 0,
	540, 541, 542, 543, 544, 545, 546, 0, 402, 31,
	0, 518, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 402, 0, 615, 0, 569, 577, 0, 570,
	578, 571, 579, 572, 0, 573, 580, 574, 581, 575,
	576, 582, 0, 0, 0, 407, 0, 0, 52, 0,
	468, 0, 422, 424, 425, 426, -2, 0, 472, -2,
	0, 0, 0, 44, 45, 0, 0, 0, 0, 55,
	993, 57, 58, 0, 0, 0, 197, 686, 687, 688,
	684, 252, 0, 0, 108, 185, 116, 117, 118, 178,
	120, 178, 178, 0, 178, 178, 178, 178, 178, 194,
	194, 194, 194, 194, 161, 162, 163, 164, 165, 0,
	0, 138, 178, 178, 178, 142, 168, 169, 170, 171,
	172, 173, 174, 175, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 180, 180, 180, 182, 182, 182, 182,
	717, 69, 0, 1018, 0, 1018, 0, 99, 79, 0,
	0, 311, 692, 0, 313, 46, 314, 315, 470, 725,
	726, 319, 320, 0, 0, 324, 325, 326, 327, 328,
	242, 335, 339, 0, 437, 0, 0, 341, 512, 343,
	0, 0, 382, 0, 287, 0, 0, 0, 0, 0,
	0, 654, 0, 0, 0, 0, 0, 645, 647, 648,
	653, 34, 402, 0, 634, 0, 0, 0, 406, 29,
	479, 480, 482, 499, 0, 501, 503, 417, 413, 0,
	624, -2, 489, 490, 514, 515, 516, 0, 0, 0,
	0, 512, 494, 0, 525, 526, 527, 528, 529, 530,
	531, 532, 533, 534, 535, 536, 539, 599, 600, 0,
	537, 538, 547, 407, 517, 0, 672, 31, 0, 409,
	0, 556, 0, 0, 522, 626, 0, 522, 626, 0,
	0, 0, 0, 621, 618, 0, 0, 623, 0, 586,
	0, 0, 0, 0, 0, 408, 0, 0, 0, 0,
	467, 0, 0, 0, 0, 0, 0, 457, 0, 0,
	460, 0, 0, 0, 0, 454, 0, 0, 430, 938,
	432, 0, 472, 0, 0, 0, 455, 456, 476, 0,
	476, 49, 476, 51, 0, 471, 678, 56, 0, 0,
	61, 62, 679, 680, 681, 682, 0, 100, 253, 255,
	258, 259, 260, 104, 105, 106, 0, 0, 234, 0,
	0, 228, 228, 0, 224, 225, 102, 107, 187, 186,
	119, 0, 194, 194, 178, 178, 178, 178, 147, 194,
	150, 153, 154, 197, 0, 197, 197, 197, 197, 194,
	0, 0, 139, 140, 141, 130, 0, 131, 180, 133,
	134, 0, 135, 136, 137, 0, 0, 0, 0, 75,
	694, 76, 0, 80, 81, 0, 309, 1018, 0, 1018,
	1018, 476, 0, 0, 356, 359, 0, 357, 358, 349,
	0, 363, 346, 1017, -2, 296, 709, 296, 296, 281,
	697, 698, 699, 700, 701, 702, 703, 704, 705, 706,
	0, 91, 289, 291, 290, 294, 0, 0, 0, 651,
	652, 0, 644, 27, 0, 689, 690, 635, 636, 420,
	500, 502, 504, 0, 407, 491, 512, 495, 0, 492,
	0, 486, 0, 519, -2, 0, 554, 555, 0, 0,
	0, 0, 0, 592, 0, 0, 593, 0, 565, 641,
	0, 619, 0, 0, 568, 0, 587, 0, 0, 588,
	589, 590, 591, 666, 0, 0, -2, 0, 0, 476,
	674, 0, 423, 449, 451, 0, 446, 458, 459, 461,
	0, 463, 0, 465, 466, 427, 429, 0, 0, 472,
	436, 0, 0, 0, 641, 0, 476, 42, 43, 0,
	59, 60, 0, 0, 66, 198, 199, 0, 256, 0,
	0, 0, 216, 228, 228, 219, 229, 220, 0, 109,
	110, 111, 112, 113, 114, 189, 0, 0, 0, 193,
	0, 201, 203, 0, 115, 188, 0, 197, 197, 194,
	145, 146, 178, 151, 197, 155, 0, 156, 157, 158,
	159, 197, 0, 176, 0, 0, 132, 0, 0, 718,
	-2, 69, 0, 82, 83, 84, 0, 312, 47, 322,
	323, 332, 243, 244, 359, 338, 0, 0, 0, 513,
	266, 0, 1017, 228, 0, 282, 297, 298, 299, 300,
	301, 302, 0, 1017, 299, 0, 300, 0, 0, 0,
	710, 711, 0, 0, 0, 94, 0, 0, 0, 0,
	655, 0, 28, 476, 0, 414, 625, 0, 493, 0,
	496, 552, 410, 0, 178, 178, 604, 178, 182, 607,
	178, 609, 178, 612, 0, 0, 0, 0, 0, 0,
	0, 616, 567, 622, 0, 624, 0, 0, 35, 0,
	666, 656, 668, 670, 0, 31, 0, 662, 0, 441,
	641, 0, 0, 443, 450, 0, 0, 444, 0, 445,
	462, 464, 0, -2, 435, 0, 0, 0, 649, 477,
	41, 63, 64, 65, 254, 257, 0, 230, 178, 233,
	217, 218, 0, 190, 191, 0, 200, 202, 204, 179,
	143, 144, 197, 152, 148, 195, 196, 160, 194, 0,
	194, 0, 183, 0, 0, 73, 0, 0, 310, 337,
	360, 361, 438, 0, 284, 269, 717, 226, 262, 270,
	271, 276, 277, 0, 0, 273, 0, 284, 0, 0,
	288, 0, 92, 93, 0, 0, 293, 637, 421, 553,
	497, 557, 601, 194, 605, 606, 608, 610, 611, 613,
	559, 558, 0, 0, 0, 0, 0, 0, 0, 620,
	0, 0, 0, 36, 0, 671, -2, 0, 0, 0,
	53, 0, 649, 675, 676, 447, 0, 452, 472, 433,
	0, 0, 439, 0, 0, 40, 206, 0, 646, 0,
	192, 149, 197, 177, 197, 0, 0, 0, -2, 0,
	0, 1017, 285, 0, 0, 228, 227, 283, 0, 707,
	708, 0, 1017, 284, 0, 95, 96, 0, 0, 0,
	639, 0, 602, 603, 0, 0, 0, 0, 594, 566,
	617, 0, 0, 0, 669, 0, -2, 0, 664, 663,
	442, 39, 0, 431, 472, 0, 473, 474, 475, 205,
	209, 0, 214, 0, 231, 232, 0, 166, 167, 181,
	184, 0, 74, 0, 1017, 268, 286, 0, 717, 272,
	278, 279, 1017, 0, 0, 0, 0, 295, 30, 0,
	0, 560, 562, 561, 563, 0, 0, 0, 583, 584,
	0, 659, 31, 0, 448, 434, 440, 210, 211, 0,
	215, 213, 0, 207, 0, 267, 0, 0, 280, 0,
	304, 0, 97, 98, 91, 640, 638, 564, 0, 0,
	0, 667, -2, 665, 212, 0, 72, 208, 85, 207,
	0, 303, 0, 0, 94, 595, 0, 598, 0, 69,
	0, 0, 274, 0, 305, 0, 292, 596, 0, 0,
	86, 87, 207, 0, 0, 235, 69, 88, 89, 90,
	275, 0, 0, 236, 237, 0, 77, 0, 597, 238,
	0, 239, 0, 0, 0, 0, 0, 245, 247, 248,
	0, 0, 246, 306, 307, 249, 250, 251,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 77, 3, 3, 3, 104, 96, 3,
	56, 58, 101, 99, 57, 100, 114, 102, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 368,
	85, 84, 86, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 106, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 95, 3, 107,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 78, 79, 80, 81, 82, 83, 87, 88,
	89, 90, 91, 92, 93, 94, 97, 98, 103, 105,
	108, 109, 110, 111, 112, 113, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:344
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:349
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:350
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:354
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:378
		{
			setParseTree(yylex, nil)
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:384
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 27:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:392
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 28:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:396
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 29:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:402
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 30:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:409
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:415
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:419
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:425
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:429
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 35:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:436
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:448
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:460
		{
			yyVAL.str = InsertStr
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:464
		{
			yyVAL.str = ReplaceStr
		}
	case 39:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:470
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:476
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:480
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:484
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:488
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:493
		{
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:494
		{
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:498
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName.ToViewName()}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:502
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName.ToViewName())
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:508
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:512
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:518
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:522
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:527
		{
			yyVAL.partitions = nil
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:531
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:537
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:541
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:545
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:549
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:555
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:559
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:565
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:569
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:573
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:579
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:583
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:587
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:591
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:597
		{
			yyVAL.str = SessionStr
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:601
		{
			yyVAL.str = GlobalStr
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:606
		{
			yyVAL.int = yyPosition(yylex)
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:612
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			if len(yyDollar[1].ddl.TableSpec.Constraints) > 0 {
				yyDollar[1].ddl.ConstraintAction = AddStr
			}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:620
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 72:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:626
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: yyDollar[4].colIdent, Using: yyDollar[5].colIdent, Type: yyDollar[2].str, Columns: yyDollar[9].indexColumns, Options: yyDollar[11].indexOptions}}
		}
	case 73:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:630
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[3].tableName.ToViewName(), ViewExpr: yyDollar[6].selStmt, SubStatementPositionStart: yyDollar[5].int, SubStatementPositionEnd: yyDollar[7].int - 1}
		}
	case 74:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:634
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[5].tableName.ToViewName(), ViewExpr: yyDollar[8].selStmt, SubStatementPositionStart: yyDollar[7].int, SubStatementPositionEnd: yyDollar[9].int - 1, OrReplace: true}
		}
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:638
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:642
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 77:
		yyDollar = yyS[yypt-15 : yypt+1]
//line sql.y:646
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[8].tableName, TriggerSpec: &TriggerSpec{Name: string(yyDollar[4].bytes), Time: yyDollar[5].str, Event: yyDollar[6].str, Order: yyDollar[12].triggerOrder, Body: yyDollar[14].statement}}
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:651
		{
			yyVAL.empty = struct{}{}
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:655
		{
			yyVAL.empty = struct{}{}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:661
		{
			yyVAL.str = BeforeStr
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:665
		{
			yyVAL.str = AfterStr
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:671
		{
			yyVAL.str = InsertStr
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:675
		{
			yyVAL.str = UpdateStr
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:679
		{
			yyVAL.str = DeleteStr
		}
	case 85:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:684
		{
			yyVAL.triggerOrder = nil
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:688
		{
			yyVAL.triggerOrder = &TriggerOrder{PrecedesOrFollows: FollowsStr, OtherTriggerName: string(yyDollar[2].bytes)}
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:692
		{
			yyVAL.triggerOrder = &TriggerOrder{PrecedesOrFollows: PrecedesStr, OtherTriggerName: string(yyDollar[2].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:698
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:705
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:709
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:715
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:720
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:725
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:731
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:736
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:742
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 99:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:748
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName, IfNotExists: ne}
			setDDL(yylex, yyVAL.ddl)
		}
	case 100:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:759
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:766
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 102:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:770
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:776
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:781
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:785
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:789
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:795
		{
			if err := yyDollar[2].columnType.merge(yyDollar[3].columnType); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:804
		{
			yyVAL.columnType = ColumnType{}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:808
		{
			opt := ColumnType{NotNull: yyDollar[2].boolVal, sawnull: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:817
		{
			opt := ColumnType{Default: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:826
		{
			opt := ColumnType{OnUpdate: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:835
		{
			opt := ColumnType{Autoincrement: yyDollar[2].boolVal, sawai: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:844
		{
			opt := ColumnType{KeyOpt: yyDollar[2].colKeyOpt}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:853
		{
			opt := ColumnType{Comment: yyDollar[2].sqlVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:864
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:875
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:880
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:886
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:890
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:894
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:898
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:902
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:906
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:910
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:914
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:918
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:924
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:930
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:936
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:942
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:948
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:954
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:960
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:966
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:974
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:978
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:982
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:986
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:990
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:996
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 144:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1000
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1004
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1008
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1012
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1016
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 149:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1020
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1024
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1028
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 152:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1032
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Length: yyDollar[4].sqlVal}
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1036
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1040
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1044
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1048
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1052
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1056
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1060
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 160:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1064
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1068
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1072
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1076
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1080
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1084
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 166:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1088
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 167:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1093
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1099
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1103
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1107
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1111
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1115
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1119
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1123
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1127
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1133
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[1].bytes))
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1138
		{
			yyVAL.strs = append(yyDollar[1].strs, string(yyDollar[3].bytes))
		}
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1143
		{
			yyVAL.sqlVal = nil
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1147
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 180:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1152
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 181:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1156
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1164
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1168
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 184:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1174
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1182
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1186
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 187:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1191
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1195
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1202
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1206
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1212
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1218
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1224
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 194:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1229
		{
			yyVAL.str = ""
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1233
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1237
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 197:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1242
		{
			yyVAL.str = ""
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1246
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1250
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1256
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1260
		{
			yyVAL.colKeyOpt = colKey
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1264
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1268
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1274
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 205:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1280
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 206:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1284
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 207:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1289
		{
			yyVAL.indexOptions = nil
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1293
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1299
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1303
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1309
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1313
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1318
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 214:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1324
		{
			yyVAL.str = ""
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1328
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1334
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1338
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1342
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1346
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1350
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1356
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1360
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1364
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1370
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1374
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 226:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1379
		{
			yyVAL.str = ""
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1383
		{
			yyVAL.str = yyDollar[1].str
		}
	case 228:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1388
		{
			yyVAL.str = ""
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1392
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1398
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1402
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1408
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal, Order: yyDollar[3].str}
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1414
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1418
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 235:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1425
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 236:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1429
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 237:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1433
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 238:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1437
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 239:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1441
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[12].ReferenceAction, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1447
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1451
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 242:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1456
		{
			yyVAL.str = ""
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1460
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1464
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1470
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1476
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1482
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1486
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1490
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1494
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1498
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 252:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1503
		{
			yyVAL.str = ""
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1507
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1511
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1519
		{
			yyVAL.str = yyDollar[1].str
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1523
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1527
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1533
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1537
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1541
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 261:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1546
		{
			yyVAL.str = ""
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1550
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 266:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1561
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 267:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1565
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			ddl.Column = yyDollar[8].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 268:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1572
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 269:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1579
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 270:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1583
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: DropStr, Column: NewColIdent(string(yyDollar[7].bytes)), Table: yyDollar[4].tableName}
		}
	case 271:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1587
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 272:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1591
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: RenameStr, Table: yyDollar[4].tableName, Column: NewColIdent(string(yyDollar[7].bytes)), ToColumn: NewColIdent(string(yyDollar[9].bytes))}
		}
	case 273:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1595
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 274:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1600
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[7].str), Using: yyDollar[8].colIdent, Columns: yyDollar[10].indexColumns, Options: yyDollar[12].indexOptions}}
		}
	case 275:
		yyDollar = yyS[yypt-14 : yypt+1]
//line sql.y:1604
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[9].str), Type: yyDollar[7].str, Using: yyDollar[10].colIdent, Columns: yyDollar[12].indexColumns, Options: yyDollar[14].indexOptions}}
		}
	case 276:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1608
		{
			yyVAL.statement = &DDL{Action: AlterStr, ConstraintAction: DropStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[7].bytes)}}}}
		}
	case 277:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1613
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[7].colIdent}}
		}
	case 278:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1617
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: RenameStr, FromName: yyDollar[7].colIdent, ToName: yyDollar[9].colIdent}}
		}
	case 279:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1621
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ModifyStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 280:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1628
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ChangeStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, Column: NewColIdent(string(yyDollar[7].bytes)), ColumnOrder: yyDollar[9].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			yyVAL.statement = ddl
		}
	case 281:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1634
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 282:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1638
		{
			ddl := &DDL{Action: AlterStr, ConstraintAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddConstraint(yyDollar[6].constraintDefinition)
			yyVAL.statement = ddl
		}
	case 283:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1644
		{
			yyVAL.statement = &DDL{Action: AlterStr, ConstraintAction: DropStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[8].bytes), Details: &ForeignKeyDefinition{}}}}}
		}
	case 284:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1650
		{
			yyVAL.columnOrder = nil
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1654
		{
			yyVAL.columnOrder = &ColumnOrder{First: true}
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1658
		{
			yyVAL.columnOrder = &ColumnOrder{AfterColumn: NewColIdent(string(yyDollar[2].bytes))}
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1664
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 288:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1670
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 289:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1682
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 290:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1692
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 291:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1696
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 292:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1700
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 293:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1713
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 294:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1723
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 295:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1727
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1740
		{
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1742
		{
		}
	case 303:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1753
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1759
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1763
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 306:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1769
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 307:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1773
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1779
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1785
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 310:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1789
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 311:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1797
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 312:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1805
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[3].colIdent}}
		}
	case 313:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1809
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromViews: yyDollar[4].tableNames, IfExists: exists}
		}
	case 314:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1817
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 315:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1821
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1827
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1831
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1836
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 319:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1842
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 320:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1847
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1851
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 322:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1855
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 323:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1859
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 324:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1864
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 325:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1868
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1872
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1876
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1880
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1884
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1888
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1892
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 332:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1896
		{
			yyVAL.statement = &Show{Type: IndexStr, Table: yyDollar[4].tableName, Database: yyDollar[5].str, ShowIndexFilterOpt: yyDollar[6].expr}
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1900
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1904
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1908
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1912
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 337:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1916
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 338:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1921
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[6].showFilter, AsOf: yyDollar[5].expr}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1931
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1935
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 341:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1939
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1945
		{
			// Cannot dereference $3 directly, or else the parser stackcannot be pooled. See yyParsePooled
			cmp := yyDollar[3].expr.(*ComparisonExpr)
			cmp.Left = &ColName{Name: NewColIdent("collation")}
			var ex Expr = cmp
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &ex}
		}
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1953
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1958
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1962
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 346:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1966
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1970
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1984
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1990
		{
			yyVAL.expr = &ComparisonExpr{Operator: LikeStr, Right: yyDollar[2].expr, Escape: yyDollar[3].expr}
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1996
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2000
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2006
		{
			yyVAL.str = ""
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2010
		{
			yyVAL.str = "full "
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2016
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2020
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2026
		{
			yyVAL.str = ""
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2030
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2034
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2040
		{
			yyVAL.showFilter = nil
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2044
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2048
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2054
		{
			yyVAL.showFilter = nil
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2058
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 364:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2064
		{
			yyVAL.str = ""
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2068
		{
			yyVAL.str = SessionStr
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2072
		{
			yyVAL.str = GlobalStr
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2078
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2082
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2088
		{
			yyVAL.statement = &Begin{}
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2092
		{
			yyVAL.statement = &Begin{}
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2098
		{
			yyVAL.statement = &Commit{}
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2104
		{
			yyVAL.statement = &Rollback{}
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2109
		{
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2110
		{
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2114
		{
			yyVAL.statement = &Explain{ExplainFormat: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2118
		{
			yyVAL.statement = &Explain{Analyze: true, ExplainFormat: TreeStr, Statement: yyDollar[3].selStmt}
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2124
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2132
		{
			yyVAL.str = ""
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2136
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2147
		{
			yyVAL.statement = &Show{Type: "columns", OnTable: yyDollar[2].tableName}
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2151
		{
			yyVAL.statement = &OtherRead{}
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2157
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2161
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2165
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2169
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2175
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2179
		{
			setAllowComments(yylex, true)
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2183
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 394:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2189
		{
			yyVAL.bytes2 = nil
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2193
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2199
		{
			yyVAL.str = UnionStr
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2203
		{
			yyVAL.str = UnionAllStr
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2207
		{
			yyVAL.str = UnionDistinctStr
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2212
		{
			yyVAL.str = ""
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2216
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2220
		{
			yyVAL.str = SQLCacheStr
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2225
		{
			yyVAL.str = ""
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2229
		{
			yyVAL.str = ""
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2233
		{
			yyVAL.str = DistinctStr
		}
	case 405:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2238
		{
			yyVAL.str = ""
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2242
		{
			yyVAL.str = StraightJoinHint
		}
	case 407:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2247
		{
			yyVAL.selectExprs = nil
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2251
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2257
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2261
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2267
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2271
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2275
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 414:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2279
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 415:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2284
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2288
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2292
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2299
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 420:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2304
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2308
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2314
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2318
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2328
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2332
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2336
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2342
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2348
		{
			yyVAL.aliasedTableName = yyDollar[2].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
		}
	case 431:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2353
		{
			yyVAL.aliasedTableName = yyDollar[6].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
			yyVAL.aliasedTableName.Partitions = yyDollar[4].partitions
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2364
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Hints: yyDollar[1].indexHints}
		}
	case 433:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2368
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, Hints: yyDollar[4].indexHints}
		}
	case 434:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2372
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, As: yyDollar[5].tableIdent, Hints: yyDollar[6].indexHints}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2376
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2380
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[1].tableIdent, Hints: yyDollar[2].indexHints}
		}
	case 437:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2391
		{
			yyVAL.expr = nil
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2395
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2401
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2405
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2411
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2415
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 443:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2428
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 444:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2432
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 445:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2436
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2440
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2446
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 448:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2448
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2452
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2454
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 451:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2458
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2460
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 453:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2463
		{
			yyVAL.empty = struct{}{}
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2465
		{
			yyVAL.empty = struct{}{}
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2470
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2476
		{
			yyVAL.str = JoinStr
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2480
		{
			yyVAL.str = JoinStr
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2484
		{
			yyVAL.str = JoinStr
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2490
		{
			yyVAL.str = StraightJoinStr
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2496
		{
			yyVAL.str = LeftJoinStr
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2500
		{
			yyVAL.str = LeftJoinStr
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2504
		{
			yyVAL.str = RightJoinStr
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2508
		{
			yyVAL.str = RightJoinStr
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2514
		{
			yyVAL.str = NaturalJoinStr
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2518
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2528
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2532
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2538
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2542
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2548
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 472:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2553
		{
			yyVAL.indexHints = nil
		}
	case 473:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2557
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 474:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2561
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 475:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2565
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 476:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2570
		{
			yyVAL.expr = nil
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2574
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2580
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2584
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2588
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2592
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2596
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2600
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2604
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 485:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2610
		{
			yyVAL.str = ""
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2614
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2620
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2624
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2630
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2634
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 491:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2638
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 492:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2642
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 493:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2646
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2650
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 495:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2654
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 496:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2658
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 497:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2662
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2666
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2672
		{
			yyVAL.str = IsNullStr
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2676
		{
			yyVAL.str = IsNotNullStr
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2680
		{
			yyVAL.str = IsTrueStr
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2684
		{
			yyVAL.str = IsNotTrueStr
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2688
		{
			yyVAL.str = IsFalseStr
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2692
		{
			yyVAL.str = IsNotFalseStr
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2698
		{
			yyVAL.str = EqualStr
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2702
		{
			yyVAL.str = LessThanStr
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2706
		{
			yyVAL.str = GreaterThanStr
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2710
		{
			yyVAL.str = LessEqualStr
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2714
		{
			yyVAL.str = GreaterEqualStr
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2718
		{
			yyVAL.str = NotEqualStr
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2722
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 512:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2727
		{
			yyVAL.expr = nil
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2731
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2737
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2741
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2745
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2751
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2757
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2761
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2767
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2771
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2775
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2779
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2783
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2787
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2791
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2795
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2799
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2803
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2807
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2811
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2815
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2819
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2823
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2827
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2831
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2835
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2839
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2843
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2847
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2851
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2855
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2859
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2867
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2881
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2885
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2889
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 552:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2907
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: yyDollar[3].str == DistinctStr, Exprs: yyDollar[4].selectExprs}
		}
	case 553:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2911
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 554:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2921
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 555:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2925
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2929
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema")}
		}
	case 557:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2933
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 558:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2937
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 559:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2941
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 560:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2945
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 561:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2949
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 562:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2953
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 563:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2957
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 564:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2961
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 565:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2965
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("first"), Exprs: yyDollar[3].selectExprs}
		}
	case 566:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2969
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 567:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2973
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2977
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2987
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2991
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2995
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3000
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3005
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3010
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3016
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3021
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3026
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3030
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3034
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3039
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3044
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3049
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 583:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3053
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 584:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3057
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3067
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3077
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 589:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3081
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 590:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3085
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 591:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3089
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 592:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3093
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 593:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3097
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 594:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3103
		{
			yyVAL.str = ""
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3107
		{
			yyVAL.str = BooleanModeStr
		}
	case 596:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3111
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 597:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3115
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3119
		{
			yyVAL.str = QueryExpansionStr
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3125
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3129
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3135
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3139
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3143
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3147
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3151
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3155
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3161
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3165
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3169
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3173
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3177
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3181
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3185
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 614:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3190
		{
			yyVAL.expr = nil
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3194
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 616:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3199
		{
			yyVAL.str = string("")
		}
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3203
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3209
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3213
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 620:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3219
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 621:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3224
		{
			yyVAL.expr = nil
		}
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3228
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3234
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3238
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 625:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3242
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3248
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3252
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3256
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3260
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3264
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3268
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3272
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3276
		{
			yyVAL.expr = &NullVal{}
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3282
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3291
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3295
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 637:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3300
		{
			yyVAL.exprs = nil
		}
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3304
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 639:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3309
		{
			yyVAL.expr = nil
		}
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3313
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 641:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3318
		{
			yyVAL.orderBy = nil
		}
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3322
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3328
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3332
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 645:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3338
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 646:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3343
		{
			yyVAL.str = AscScr
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3347
		{
			yyVAL.str = AscScr
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3351
		{
			yyVAL.str = DescScr
		}
	case 649:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3356
		{
			yyVAL.limit = nil
		}
	case 650:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3360
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 651:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3364
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 652:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3368
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 653:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3373
		{
			yyVAL.str = ""
		}
	case 654:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3377
		{
			yyVAL.str = ForUpdateStr
		}
	case 655:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3381
		{
			yyVAL.str = ShareModeStr
		}
	case 656:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3394
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3398
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 658:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3402
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 659:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3407
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 660:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3411
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 661:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3415
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3422
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3426
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 664:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3430
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 665:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3434
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 666:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3439
		{
			yyVAL.updateExprs = nil
		}
	case 667:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3443
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3449
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 669:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3453
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3459
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 671:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3463
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 672:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3469
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3475
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3485
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 675:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3489
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3495
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3501
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 678:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3505
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 679:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3511
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3515
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3519
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 682:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3523
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3530
		{
			yyVAL.bytes = []byte("charset")
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3537
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3541
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3545
		{
			yyVAL.expr = &Default{}
		}
	case 691:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3554
		{
			yyVAL.byt = 0
		}
	case 692:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3556
		{
			yyVAL.byt = 1
		}
	case 693:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3559
		{
			yyVAL.byt = 0
		}
	case 694:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3561
		{
			yyVAL.byt = 1
		}
	case 695:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3564
		{
			yyVAL.str = ""
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3566
		{
			yyVAL.str = IgnoreStr
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3570
		{
			yyVAL.empty = struct{}{}
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3572
		{
			yyVAL.empty = struct{}{}
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3574
		{
			yyVAL.empty = struct{}{}
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3576
		{
			yyVAL.empty = struct{}{}
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3578
		{
			yyVAL.empty = struct{}{}
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3580
		{
			yyVAL.empty = struct{}{}
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3582
		{
			yyVAL.empty = struct{}{}
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3584
		{
			yyVAL.empty = struct{}{}
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3586
		{
			yyVAL.empty = struct{}{}
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3588
		{
			yyVAL.empty = struct{}{}
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3592
		{
			yyVAL.empty = struct{}{}
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3594
		{
			yyVAL.empty = struct{}{}
		}
	case 709:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3597
		{
			yyVAL.empty = struct{}{}
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3599
		{
			yyVAL.empty = struct{}{}
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3601
		{
			yyVAL.empty = struct{}{}
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3605
		{
			yyVAL.str = UniqueStr
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3607
		{
			yyVAL.str = FulltextStr
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3609
		{
			yyVAL.str = SpatialStr
		}
	case 715:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3612
		{
			yyVAL.str = ""
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3614
		{
			yyVAL.str = yyDollar[1].str
		}
	case 717:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3617
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 718:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3619
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3623
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3627
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3634
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3640
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3644
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3651
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3965
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3974
		{
			decNesting(yylex)
		}
	case 1017:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3979
		{
			skipToEnd(yylex)
		}
	case 1018:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3984
		{
			skipToEnd(yylex)
		}
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3988
		{
			skipToEnd(yylex)
		}
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3992
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
