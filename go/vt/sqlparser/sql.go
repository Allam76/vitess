// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func yyPosition(yylex interface{}) int {
	return yylex.(*Tokenizer).Position
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:57
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	int                   int
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	statements            Statements
	partitions            Partitions
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	joinCondition         JoinCondition
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	asOf                  *AsOf
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	sqlVal                *SQLVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	setExprs              SetExprs
	setExpr               *SetExpr
	colIdent              ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	TableSpec             *TableSpec
	columnType            ColumnType
	columnOrder           *ColumnOrder
	triggerOrder          *TriggerOrder
	colKeyOpt             ColumnKeyOption
	optVal                Expr
	LengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexInfo             *IndexInfo
	indexOption           *IndexOption
	indexOptions          []*IndexOption
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	constraintDefinition  *ConstraintDefinition
	constraintInfo        ConstraintInfo
	ReferenceAction       ReferenceAction
	partDefs              []*PartitionDefinition
	partDef               *PartitionDefinition
	partSpec              *PartitionSpec
	vindexParam           VindexParam
	vindexParams          []VindexParam
	showFilter            *ShowFilter
	optLike               *OptLike
	caseStatementCases    []CaseStatementCase
	caseStatementCase     CaseStatementCase
	ifStatementConditions []IfStatementCondition
	ifStatementCondition  IfStatementCondition
	signalInfo            SignalInfo
	signalInfos           []SignalInfo
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const UNLOCK = 57373
const KEYS = 57374
const UNIQUE = 57375
const KEY = 57376
const SYSTEM_TIME = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const INTEGRAL = 57401
const FLOAT = 57402
const HEXNUM = 57403
const VALUE_ARG = 57404
const LIST_ARG = 57405
const COMMENT = 57406
const COMMENT_KEYWORD = 57407
const BIT_LITERAL = 57408
const NULL = 57409
const TRUE = 57410
const FALSE = 57411
const OFF = 57412
const OR = 57413
const AND = 57414
const NOT = 57415
const BETWEEN = 57416
const CASE = 57417
const WHEN = 57418
const THEN = 57419
const ELSE = 57420
const ELSEIF = 57421
const END = 57422
const LE = 57423
const GE = 57424
const NE = 57425
const NULL_SAFE_EQUAL = 57426
const IS = 57427
const LIKE = 57428
const REGEXP = 57429
const IN = 57430
const SHIFT_LEFT = 57431
const SHIFT_RIGHT = 57432
const DIV = 57433
const MOD = 57434
const UNARY = 57435
const COLLATE = 57436
const BINARY = 57437
const UNDERSCORE_BINARY = 57438
const UNDERSCORE_UTF8MB4 = 57439
const INTERVAL = 57440
const JSON_EXTRACT_OP = 57441
const JSON_UNQUOTE_EXTRACT_OP = 57442
const CREATE = 57443
const ALTER = 57444
const DROP = 57445
const RENAME = 57446
const ANALYZE = 57447
const ADD = 57448
const FLUSH = 57449
const MODIFY = 57450
const CHANGE = 57451
const SCHEMA = 57452
const TABLE = 57453
const INDEX = 57454
const INDEXES = 57455
const VIEW = 57456
const TO = 57457
const IGNORE = 57458
const IF = 57459
const PRIMARY = 57460
const COLUMN = 57461
const SPATIAL = 57462
const FULLTEXT = 57463
const KEY_BLOCK_SIZE = 57464
const CHECK = 57465
const ACTION = 57466
const CASCADE = 57467
const CONSTRAINT = 57468
const FOREIGN = 57469
const NO = 57470
const REFERENCES = 57471
const RESTRICT = 57472
const FIRST = 57473
const AFTER = 57474
const SHOW = 57475
const DESCRIBE = 57476
const EXPLAIN = 57477
const DATE = 57478
const ESCAPE = 57479
const REPAIR = 57480
const OPTIMIZE = 57481
const TRUNCATE = 57482
const FORMAT = 57483
const MAXVALUE = 57484
const PARTITION = 57485
const REORGANIZE = 57486
const LESS = 57487
const THAN = 57488
const PROCEDURE = 57489
const TRIGGER = 57490
const VINDEX = 57491
const VINDEXES = 57492
const STATUS = 57493
const VARIABLES = 57494
const WARNINGS = 57495
const SEQUENCE = 57496
const EACH = 57497
const ROW = 57498
const BEFORE = 57499
const FOLLOWS = 57500
const PRECEDES = 57501
const DEFINER = 57502
const CLASS_ORIGIN = 57503
const SUBCLASS_ORIGIN = 57504
const MESSAGE_TEXT = 57505
const MYSQL_ERRNO = 57506
const CONSTRAINT_CATALOG = 57507
const CONSTRAINT_SCHEMA = 57508
const CONSTRAINT_NAME = 57509
const CATALOG_NAME = 57510
const SCHEMA_NAME = 57511
const TABLE_NAME = 57512
const COLUMN_NAME = 57513
const CURSOR_NAME = 57514
const SIGNAL = 57515
const SQLSTATE = 57516
const BEGIN = 57517
const START = 57518
const TRANSACTION = 57519
const COMMIT = 57520
const ROLLBACK = 57521
const BIT = 57522
const TINYINT = 57523
const SMALLINT = 57524
const MEDIUMINT = 57525
const INT = 57526
const INTEGER = 57527
const BIGINT = 57528
const INTNUM = 57529
const REAL = 57530
const DOUBLE = 57531
const FLOAT_TYPE = 57532
const DECIMAL = 57533
const NUMERIC = 57534
const DEC = 57535
const FIXED = 57536
const PRECISION = 57537
const TIME = 57538
const TIMESTAMP = 57539
const DATETIME = 57540
const YEAR = 57541
const CHAR = 57542
const VARCHAR = 57543
const BOOL = 57544
const CHARACTER = 57545
const VARBINARY = 57546
const NCHAR = 57547
const NVARCHAR = 57548
const NATIONAL = 57549
const VARYING = 57550
const TEXT = 57551
const TINYTEXT = 57552
const MEDIUMTEXT = 57553
const LONGTEXT = 57554
const LONG = 57555
const BLOB = 57556
const TINYBLOB = 57557
const MEDIUMBLOB = 57558
const LONGBLOB = 57559
const JSON = 57560
const ENUM = 57561
const GEOMETRY = 57562
const POINT = 57563
const LINESTRING = 57564
const POLYGON = 57565
const GEOMETRYCOLLECTION = 57566
const MULTIPOINT = 57567
const MULTILINESTRING = 57568
const MULTIPOLYGON = 57569
const NULLX = 57570
const AUTO_INCREMENT = 57571
const APPROXNUM = 57572
const SIGNED = 57573
const UNSIGNED = 57574
const ZEROFILL = 57575
const COLLATION = 57576
const DATABASES = 57577
const SCHEMAS = 57578
const TABLES = 57579
const VITESS_METADATA = 57580
const VSCHEMA = 57581
const FULL = 57582
const PROCESSLIST = 57583
const COLUMNS = 57584
const FIELDS = 57585
const ENGINES = 57586
const PLUGINS = 57587
const NAMES = 57588
const CHARSET = 57589
const GLOBAL = 57590
const SESSION = 57591
const ISOLATION = 57592
const LEVEL = 57593
const READ = 57594
const WRITE = 57595
const ONLY = 57596
const REPEATABLE = 57597
const COMMITTED = 57598
const UNCOMMITTED = 57599
const SERIALIZABLE = 57600
const CURRENT_TIMESTAMP = 57601
const DATABASE = 57602
const CURRENT_DATE = 57603
const CURRENT_TIME = 57604
const LOCALTIME = 57605
const LOCALTIMESTAMP = 57606
const UTC_DATE = 57607
const UTC_TIME = 57608
const UTC_TIMESTAMP = 57609
const REPLACE = 57610
const CONVERT = 57611
const CAST = 57612
const SUBSTR = 57613
const SUBSTRING = 57614
const GROUP_CONCAT = 57615
const SEPARATOR = 57616
const TIMESTAMPADD = 57617
const TIMESTAMPDIFF = 57618
const MATCH = 57619
const AGAINST = 57620
const BOOLEAN = 57621
const LANGUAGE = 57622
const WITH = 57623
const QUERY = 57624
const EXPANSION = 57625
const UNUSED = 57626
const ARRAY = 57627
const CUME_DIST = 57628
const DESCRIPTION = 57629
const DENSE_RANK = 57630
const EMPTY = 57631
const EXCEPT = 57632
const FIRST_VALUE = 57633
const GROUPING = 57634
const GROUPS = 57635
const JSON_TABLE = 57636
const LAG = 57637
const LAST_VALUE = 57638
const LATERAL = 57639
const LEAD = 57640
const MEMBER = 57641
const NTH_VALUE = 57642
const NTILE = 57643
const OF = 57644
const OVER = 57645
const PERCENT_RANK = 57646
const RANK = 57647
const RECURSIVE = 57648
const ROW_NUMBER = 57649
const SYSTEM = 57650
const WINDOW = 57651
const ACTIVE = 57652
const ADMIN = 57653
const BUCKETS = 57654
const CLONE = 57655
const COMPONENT = 57656
const DEFINITION = 57657
const ENFORCED = 57658
const EXCLUDE = 57659
const FOLLOWING = 57660
const GEOMCOLLECTION = 57661
const GET_MASTER_PUBLIC_KEY = 57662
const HISTOGRAM = 57663
const HISTORY = 57664
const INACTIVE = 57665
const INVISIBLE = 57666
const LOCKED = 57667
const MASTER_COMPRESSION_ALGORITHMS = 57668
const MASTER_PUBLIC_KEY_PATH = 57669
const MASTER_TLS_CIPHERSUITES = 57670
const MASTER_ZSTD_COMPRESSION_LEVEL = 57671
const NESTED = 57672
const NETWORK_NAMESPACE = 57673
const NOWAIT = 57674
const NULLS = 57675
const OJ = 57676
const OLD = 57677
const OPTIONAL = 57678
const ORDINALITY = 57679
const ORGANIZATION = 57680
const OTHERS = 57681
const PATH = 57682
const PERSIST = 57683
const PERSIST_ONLY = 57684
const PRECEDING = 57685
const PRIVILEGE_CHECKS_USER = 57686
const PROCESS = 57687
const RANDOM = 57688
const REFERENCE = 57689
const REQUIRE_ROW_FORMAT = 57690
const RESOURCE = 57691
const RESPECT = 57692
const RESTART = 57693
const RETAIN = 57694
const REUSE = 57695
const ROLE = 57696
const SECONDARY = 57697
const SECONDARY_ENGINE = 57698
const SECONDARY_LOAD = 57699
const SECONDARY_UNLOAD = 57700
const SKIP = 57701
const SRID = 57702
const THREAD_PRIORITY = 57703
const TIES = 57704
const UNBOUNDED = 57705
const VCPU = 57706
const VISIBLE = 57707

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"UNIQUE",
	"KEY",
	"SYSTEM_TIME",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"ELSEIF",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"MODIFY",
	"CHANGE",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"INDEXES",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"FIRST",
	"AFTER",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"FORMAT",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"EACH",
	"ROW",
	"BEFORE",
	"FOLLOWS",
	"PRECEDES",
	"DEFINER",
	"CLASS_ORIGIN",
	"SUBCLASS_ORIGIN",
	"MESSAGE_TEXT",
	"MYSQL_ERRNO",
	"CONSTRAINT_CATALOG",
	"CONSTRAINT_SCHEMA",
	"CONSTRAINT_NAME",
	"CATALOG_NAME",
	"SCHEMA_NAME",
	"TABLE_NAME",
	"COLUMN_NAME",
	"CURSOR_NAME",
	"SIGNAL",
	"SQLSTATE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DEC",
	"FIXED",
	"PRECISION",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NATIONAL",
	"VARYING",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"LONG",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 32,
	-2, 4,
	-1, 34,
	165, 79,
	-2, 758,
	-1, 42,
	168, 410,
	169, 410,
	-2, 398,
	-1, 49,
	1, 1061,
	383, 1061,
	-2, 429,
	-1, 338,
	115, 766,
	-2, 762,
	-1, 339,
	115, 767,
	-2, 763,
	-1, 409,
	85, 1017,
	115, 1017,
	-2, 68,
	-1, 410,
	85, 935,
	115, 935,
	-2, 69,
	-1, 415,
	85, 904,
	115, 904,
	-2, 726,
	-1, 417,
	85, 965,
	115, 965,
	-2, 728,
	-1, 602,
	5, 32,
	-2, 423,
	-1, 606,
	5, 32,
	-2, 422,
	-1, 736,
	1, 474,
	5, 474,
	12, 474,
	13, 474,
	14, 474,
	15, 474,
	17, 474,
	19, 474,
	29, 474,
	30, 474,
	44, 474,
	45, 474,
	46, 474,
	47, 474,
	48, 474,
	50, 474,
	51, 474,
	54, 474,
	55, 474,
	57, 474,
	58, 474,
	383, 474,
	-2, 499,
	-1, 739,
	55, 49,
	57, 49,
	-2, 53,
	-1, 918,
	115, 769,
	-2, 765,
	-1, 1123,
	56, 342,
	59, 342,
	-2, 307,
	-1, 1172,
	5, 33,
	-2, 563,
	-1, 1203,
	5, 32,
	-2, 703,
	-1, 1296,
	5, 32,
	-2, 70,
	-1, 1407,
	1, 518,
	5, 518,
	12, 518,
	13, 518,
	14, 518,
	15, 518,
	17, 518,
	19, 518,
	29, 518,
	30, 518,
	44, 518,
	45, 518,
	46, 518,
	47, 518,
	48, 518,
	50, 518,
	51, 518,
	54, 518,
	55, 518,
	57, 518,
	58, 518,
	383, 518,
	-2, 499,
	-1, 1510,
	5, 33,
	-2, 704,
	-1, 1540,
	5, 32,
	-2, 70,
	-1, 1578,
	5, 32,
	-2, 706,
	-1, 1664,
	5, 33,
	-2, 707,
	-1, 1714,
	383, 128,
	-2, 32,
}

const yyPrivate = 57344

const yyLast = 18386

var yyAct = [...]int{

	370, 56, 1713, 1769, 1747, 1738, 1708, 1523, 1668, 1652,
	1722, 1709, 1474, 1094, 1717, 7, 1716, 6, 1420, 1712,
	339, 1715, 5, 1718, 8, 1343, 449, 1592, 690, 1036,
	1092, 405, 1558, 1005, 1387, 369, 1543, 1421, 894, 1007,
	1003, 1669, 1388, 304, 1049, 356, 999, 317, 1251, 420,
	1384, 1087, 1035, 1045, 1001, 1360, 88, 56, 943, 1319,
	1311, 103, 1394, 1398, 103, 956, 1116, 1320, 865, 322,
	103, 855, 971, 1288, 979, 1042, 752, 66, 1082, 732,
	627, 920, 621, 751, 1070, 403, 408, 332, 633, 642,
	990, 326, 426, 983, 305, 306, 103, 400, 309, 341,
	451, 103, 741, 103, 839, 706, 1229, 1789, 1785, 1780,
	343, 1772, 1714, 3, 103, 1764, 438, 707, 1763, 1733,
	103, 733, 1030, 65, 70, 1314, 1726, 1679, 383, 980,
	389, 390, 387, 388, 386, 385, 384, 1707, 330, 1662,
	1696, 1475, 1678, 1377, 391, 392, 1502, 345, 425, 1415,
	57, 30, 31, 72, 73, 74, 75, 76, 1661, 753,
	27, 754, 57, 30, 31, 1024, 98, 94, 95, 312,
	96, 32, 1271, 1238, 1416, 1417, 1237, 599, 428, 1239,
	430, 308, 27, 307, 57, 30, 31, 411, 1025, 1026,
	592, 1056, 1345, 1565, 593, 590, 591, 1076, 1071, 1071,
	314, 1058, 316, 1134, 1083, 32, 1062, 1064, 1493, 1063,
	63, 1491, 299, 311, 1670, 1646, 1133, 597, 1628, 655,
	654, 664, 665, 657, 658, 659, 660, 661, 662, 663,
	656, 1058, 63, 666, 867, 868, 869, 870, 871, 872,
	873, 874, 875, 876, 877, 878, 1101, 1138, 1682, 1683,
	885, 429, 574, 585, 586, 1723, 1132, 884, 1767, 1770,
	1766, 1347, 882, 1706, 598, 1695, 1653, 1644, 1342, 984,
	1050, 1100, 1346, 1544, 1545, 1324, 1752, 448, 1790, 448,
	448, 1787, 301, 1593, 448, 1781, 448, 1773, 823, 427,
	435, 1552, 448, 886, 103, 883, 1595, 438, 316, 438,
	438, 56, 56, 1553, 438, 1302, 438, 1129, 1124, 1125,
	1724, 1123, 438, 1126, 1127, 603, 97, 605, 302, 831,
	573, 576, 604, 56, 578, 315, 974, 1228, 1227, 1008,
	1010, 1226, 423, 615, 1704, 103, 273, 90, 675, 93,
	1146, 677, 1635, 1145, 1031, 678, 679, 1513, 1136, 1139,
	1052, 608, 609, 438, 1071, 1242, 1234, 575, 577, 27,
	1085, 57, 30, 31, 1161, 892, 55, 1594, 1704, 688,
	1278, 692, 693, 694, 695, 696, 697, 698, 699, 700,
	701, 702, 32, 705, 708, 708, 708, 714, 708, 708,
	714, 708, 722, 723, 724, 725, 726, 727, 629, 737,
	1061, 1551, 760, 1660, 1182, 747, 624, 628, 1131, 63,
	1009, 611, 646, 602, 606, 443, 620, 1179, 103, 103,
	103, 1629, 336, 647, 666, 1020, 27, 58, 57, 30,
	31, 1361, 1723, 438, 1130, 630, 889, 1788, 749, 58,
	103, 92, 91, 1052, 438, 1051, 448, 448, 631, 32,
	1339, 103, 856, 731, 1742, 103, 1109, 582, 691, 1439,
	103, 58, 1052, 79, 103, 861, 438, 438, 1252, 704,
	572, 1313, 641, 1363, 1135, 27, 63, 57, 30, 31,
	617, 656, 618, 689, 666, 619, 1642, 1724, 676, 1137,
	709, 711, 713, 715, 717, 719, 720, 740, 32, 1723,
	80, 1617, 710, 712, 745, 716, 718, 594, 721, 678,
	679, 1440, 1121, 421, 755, 607, 27, 411, 57, 30,
	31, 431, 678, 679, 1379, 63, 1779, 27, 1365, 57,
	30, 31, 832, 1369, 1760, 1364, 857, 1362, 1051, 32,
	1110, 583, 1367, 55, 841, 1704, 736, 419, 1723, 825,
	32, 972, 1312, 1784, 1724, 1366, 1427, 1051, 1048, 1052,
	1338, 1776, 1770, 1775, 1335, 927, 63, 1740, 1368, 1370,
	1741, 25, 1739, 434, 639, 448, 448, 63, 448, 636,
	925, 926, 924, 972, 421, 1190, 448, 448, 596, 1723,
	1666, 641, 90, 1538, 1771, 438, 438, 103, 438, 103,
	1723, 1753, 103, 1724, 1537, 1744, 438, 438, 1263, 944,
	55, 945, 1704, 1268, 1267, 1052, 1293, 448, 655, 654,
	664, 665, 657, 658, 659, 660, 661, 662, 663, 656,
	895, 896, 666, 83, 1264, 891, 103, 438, 58, 613,
	321, 103, 1693, 1754, 1724, 640, 639, 1748, 1269, 1756,
	1261, 1755, 1783, 438, 1051, 1724, 1262, 63, 103, 55,
	1046, 1704, 1047, 641, 438, 844, 845, 923, 1044, 1050,
	439, 440, 441, 917, 890, 1291, 1117, 897, 56, 1643,
	640, 639, 858, 640, 639, 921, 85, 87, 640, 639,
	82, 640, 639, 692, 1272, 1762, 92, 91, 641, 1572,
	55, 641, 1704, 1535, 1454, 58, 641, 313, 438, 641,
	1051, 55, 879, 1704, 1432, 1266, 1328, 1324, 1289, 1118,
	1177, 1325, 1176, 899, 1332, 1334, 1457, 907, 908, 421,
	640, 639, 1240, 914, 1241, 1692, 89, 1749, 1002, 640,
	639, 1329, 737, 438, 438, 1640, 737, 918, 641, 1611,
	103, 916, 1587, 1697, 58, 1529, 1694, 641, 103, 103,
	1674, 614, 103, 103, 1529, 1671, 103, 103, 103, 680,
	681, 682, 683, 684, 685, 686, 687, 950, 947, 948,
	691, 397, 398, 438, 959, 960, 614, 1032, 1178, 1037,
	689, 969, 1252, 640, 639, 58, 1015, 922, 1608, 1748,
	1017, 640, 639, 1587, 1656, 954, 58, 1052, 1381, 961,
	964, 641, 421, 1040, 1529, 1645, 973, 1587, 1636, 641,
	1158, 1159, 1160, 955, 957, 448, 1265, 448, 963, 966,
	967, 968, 1018, 1013, 1022, 1021, 84, 1587, 1598, 1606,
	640, 639, 1549, 1029, 103, 438, 1477, 438, 841, 1472,
	689, 103, 103, 1468, 978, 103, 981, 982, 641, 411,
	1000, 918, 1587, 614, 1602, 1033, 1072, 1073, 1074, 1075,
	1089, 1090, 1091, 1529, 1528, 103, 1465, 103, 103, 1463,
	910, 912, 913, 103, 1462, 736, 911, 1515, 614, 736,
	1008, 1010, 1309, 736, 1084, 1086, 1512, 614, 1447, 1446,
	1443, 1444, 1051, 103, 103, 103, 103, 103, 1328, 1324,
	1443, 1442, 1601, 1325, 1308, 1247, 1326, 1327, 1162, 917,
	664, 665, 657, 658, 659, 660, 661, 662, 663, 656,
	987, 614, 666, 1329, 655, 654, 664, 665, 657, 658,
	659, 660, 661, 662, 663, 656, 1173, 614, 666, 1107,
	1106, 1057, 27, 952, 614, 743, 946, 898, 863, 838,
	921, 837, 657, 658, 659, 660, 661, 662, 663, 656,
	829, 1009, 666, 827, 1150, 1201, 826, 824, 1148, 1149,
	1151, 628, 1202, 445, 1204, 1205, 763, 762, 737, 737,
	737, 737, 737, 918, 1433, 1167, 67, 1033, 743, 744,
	1053, 746, 63, 1002, 1385, 1222, 1163, 748, 103, 103,
	103, 103, 103, 748, 1230, 737, 951, 953, 1206, 859,
	103, 1230, 958, 103, 1014, 1170, 742, 103, 659, 660,
	661, 662, 663, 656, 1157, 103, 666, 952, 1173, 1508,
	1171, 1225, 744, 1189, 742, 1351, 1224, 1616, 359, 358,
	361, 362, 363, 364, 27, 987, 438, 360, 365, 987,
	1191, 1445, 1037, 1243, 1023, 1244, 748, 1207, 1173, 1231,
	1210, 919, 922, 27, 928, 929, 930, 931, 932, 933,
	934, 935, 936, 937, 938, 939, 940, 941, 942, 1219,
	986, 1173, 1249, 1250, 1195, 56, 1203, 411, 1253, 1187,
	1235, 1194, 1120, 1577, 63, 448, 1105, 448, 448, 742,
	1208, 1209, 893, 1211, 438, 954, 830, 323, 987, 63,
	1680, 1672, 1232, 63, 1233, 438, 103, 438, 438, 1609,
	1560, 975, 1539, 1058, 1518, 736, 736, 736, 736, 736,
	1088, 1426, 1399, 1400, 1273, 1274, 1083, 1246, 1078, 1077,
	736, 1280, 1290, 992, 995, 996, 997, 993, 1344, 994,
	998, 1287, 736, 1093, 1292, 1561, 1318, 63, 1321, 1333,
	1337, 1730, 1728, 103, 1710, 1451, 1402, 1385, 1294, 862,
	834, 905, 438, 1310, 1330, 1216, 1340, 1341, 1353, 1316,
	1217, 1405, 1331, 1281, 1689, 1283, 1284, 1285, 1286, 1323,
	1404, 1214, 1213, 1390, 1212, 56, 1215, 1296, 614, 1218,
	1677, 996, 997, 327, 328, 1307, 1348, 1147, 1687, 1156,
	1155, 1317, 634, 635, 1575, 438, 438, 1409, 1410, 1411,
	1467, 1355, 1254, 1386, 1372, 1431, 1371, 1354, 1389, 1359,
	632, 1430, 1248, 438, 1282, 761, 655, 654, 664, 665,
	657, 658, 659, 660, 661, 662, 663, 656, 1408, 610,
	666, 446, 1506, 438, 438, 1378, 438, 438, 622, 1353,
	1037, 1556, 1037, 1169, 1403, 1419, 895, 896, 1380, 623,
	1097, 1172, 1174, 833, 1175, 1406, 1297, 634, 635, 318,
	1181, 1113, 1000, 1184, 1185, 1186, 1418, 822, 1424, 1425,
	1192, 1423, 1193, 324, 325, 1196, 1197, 1412, 1198, 1199,
	1449, 1450, 411, 1396, 1154, 103, 1605, 1391, 1413, 1563,
	1622, 319, 1153, 103, 67, 1621, 1230, 1183, 1221, 992,
	995, 996, 997, 993, 1180, 994, 998, 854, 1414, 1399,
	1400, 1299, 1300, 1301, 1732, 1731, 1732, 637, 1164, 1165,
	1166, 1731, 737, 1632, 438, 1429, 888, 103, 438, 69,
	1436, 612, 71, 438, 1459, 48, 438, 438, 438, 1458,
	1460, 1453, 103, 1721, 24, 1464, 64, 1, 1500, 1461,
	1322, 1476, 359, 358, 361, 362, 363, 364, 1557, 1128,
	1471, 360, 365, 368, 1651, 1043, 1434, 1435, 1034, 78,
	418, 1455, 77, 1438, 1641, 1108, 1482, 581, 1547, 281,
	1441, 1041, 1259, 1258, 1255, 1270, 1055, 1489, 1525, 1526,
	1257, 1256, 1260, 769, 767, 768, 766, 771, 770, 1054,
	438, 438, 438, 765, 1531, 284, 406, 1507, 756, 438,
	638, 1521, 86, 49, 1550, 1037, 1336, 438, 1244, 1122,
	81, 56, 860, 588, 1522, 589, 286, 1481, 674, 1152,
	1527, 1236, 412, 1392, 1681, 626, 1620, 1562, 1188, 1503,
	413, 703, 103, 970, 1516, 1532, 344, 909, 691, 357,
	354, 355, 1112, 900, 1200, 648, 342, 1517, 334, 436,
	1519, 1546, 735, 728, 991, 989, 438, 1358, 988, 736,
	835, 401, 1559, 1401, 1397, 734, 1548, 1542, 1554, 1390,
	1350, 595, 1579, 300, 1501, 1627, 1423, 904, 29, 68,
	329, 19, 1555, 18, 17, 601, 1584, 1534, 20, 1536,
	21, 22, 16, 438, 438, 15, 438, 14, 432, 438,
	1315, 103, 33, 103, 1389, 447, 37, 36, 35, 10,
	438, 1576, 1298, 1099, 1604, 310, 866, 1615, 1603, 1533,
	438, 1585, 1586, 1540, 1583, 864, 1768, 1596, 1618, 1597,
	1591, 1746, 1564, 1720, 438, 1719, 23, 13, 1390, 12,
	56, 438, 103, 11, 9, 1698, 4, 1607, 320, 26,
	2, 1357, 1614, 0, 0, 0, 1610, 0, 1613, 0,
	0, 0, 1373, 1374, 0, 1375, 1376, 0, 438, 0,
	0, 0, 1633, 1389, 0, 0, 0, 1382, 1383, 1639,
	1637, 0, 0, 0, 1578, 0, 0, 0, 1648, 0,
	438, 0, 0, 0, 0, 0, 0, 438, 438, 0,
	0, 1649, 0, 1559, 1037, 0, 1407, 1655, 0, 1654,
	1647, 1658, 0, 0, 0, 0, 438, 1599, 1650, 1600,
	0, 0, 0, 0, 1663, 103, 0, 0, 0, 0,
	450, 0, 450, 450, 438, 0, 0, 450, 0, 450,
	1684, 1483, 1676, 0, 1686, 450, 1428, 1485, 1690, 1688,
	0, 1685, 1634, 438, 0, 1691, 0, 1639, 1494, 1495,
	0, 438, 1699, 1705, 0, 56, 1703, 1725, 1702, 1657,
	691, 0, 1711, 1701, 0, 1700, 1729, 1509, 1510, 1511,
	1727, 1514, 0, 0, 1059, 1060, 644, 1065, 1066, 1067,
	1068, 1069, 0, 1520, 56, 0, 1745, 1456, 1743, 0,
	0, 0, 0, 411, 0, 1079, 1080, 1081, 0, 0,
	56, 1757, 0, 0, 0, 0, 0, 56, 0, 0,
	0, 0, 0, 56, 56, 56, 1745, 1745, 56, 1759,
	0, 0, 1777, 56, 0, 1745, 1761, 56, 0, 1484,
	0, 56, 1765, 1745, 56, 0, 56, 1774, 1745, 0,
	56, 0, 1745, 0, 0, 0, 1782, 0, 0, 0,
	413, 0, 0, 1786, 0, 0, 757, 0, 0, 0,
	0, 1734, 1735, 0, 0, 0, 0, 821, 0, 0,
	1505, 0, 0, 0, 579, 580, 1499, 0, 1571, 584,
	0, 587, 0, 0, 0, 0, 1758, 600, 0, 450,
	450, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1588, 0, 1589, 1590, 0, 294, 0, 0, 1778, 655,
	654, 664, 665, 657, 658, 659, 660, 661, 662, 663,
	656, 0, 0, 666, 0, 0, 0, 0, 0, 0,
	0, 0, 291, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1623, 1624, 1625, 1626, 0, 0, 0,
	1630, 1631, 0, 655, 654, 664, 665, 657, 658, 659,
	660, 661, 662, 663, 656, 0, 0, 666, 0, 1566,
	1567, 1568, 1569, 1570, 0, 0, 0, 1573, 1574, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 277, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 285, 292, 293, 1659, 0, 0, 0, 738, 0,
	0, 1664, 0, 0, 0, 0, 0, 0, 450, 450,
	0, 450, 0, 0, 0, 0, 0, 0, 1673, 450,
	450, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 842, 843, 290, 0, 791, 0, 0, 0, 100,
	0, 0, 0, 0, 0, 0, 0, 0, 303, 0,
	450, 0, 0, 1275, 1276, 1277, 1279, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 901, 0, 0, 0,
	0, 0, 0, 0, 402, 0, 0, 644, 0, 422,
	450, 424, 0, 275, 0, 0, 0, 0, 0, 0,
	0, 0, 433, 625, 0, 0, 0, 0, 442, 0,
	0, 0, 0, 1750, 1751, 1504, 0, 0, 0, 0,
	0, 0, 0, 0, 287, 278, 279, 778, 288, 289,
	297, 949, 0, 0, 280, 282, 0, 276, 296, 295,
	0, 0, 0, 0, 101, 0, 0, 298, 0, 413,
	0, 0, 0, 101, 655, 654, 664, 665, 657, 658,
	659, 660, 661, 662, 663, 656, 976, 977, 666, 792,
	846, 847, 0, 849, 0, 0, 333, 0, 0, 404,
	414, 852, 853, 0, 101, 0, 101, 0, 0, 0,
	0, 0, 413, 0, 0, 0, 0, 101, 1736, 0,
	0, 0, 0, 101, 450, 0, 450, 1498, 0, 0,
	0, 0, 881, 805, 808, 809, 810, 811, 812, 813,
	0, 814, 815, 816, 817, 818, 819, 820, 0, 793,
	794, 795, 796, 772, 776, 806, 773, 779, 775, 777,
	774, 0, 780, 781, 782, 783, 784, 785, 786, 787,
	788, 789, 790, 797, 798, 799, 800, 801, 802, 803,
	804, 0, 0, 0, 0, 0, 0, 0, 450, 0,
	450, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1437, 0, 444, 0, 655, 654, 664, 665, 657, 658,
	659, 660, 661, 662, 663, 656, 0, 0, 666, 0,
	0, 27, 28, 57, 30, 31, 0, 0, 0, 0,
	0, 0, 807, 0, 0, 0, 0, 0, 0, 0,
	62, 0, 0, 616, 32, 52, 53, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 450, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 43, 0, 0,
	0, 63, 654, 664, 665, 657, 658, 659, 660, 661,
	662, 663, 656, 1486, 1487, 666, 1488, 0, 0, 1490,
	650, 1492, 653, 0, 0, 0, 1497, 101, 0, 667,
	668, 669, 670, 671, 672, 673, 0, 651, 652, 649,
	655, 654, 664, 665, 657, 658, 659, 660, 661, 662,
	663, 656, 0, 0, 666, 0, 730, 0, 739, 0,
	0, 0, 0, 34, 59, 39, 38, 41, 101, 54,
	1096, 0, 1098, 0, 1530, 0, 0, 0, 764, 0,
	413, 0, 0, 0, 1496, 0, 0, 0, 0, 828,
	0, 0, 0, 402, 0, 42, 61, 60, 836, 0,
	50, 51, 40, 655, 654, 664, 665, 657, 658, 659,
	660, 661, 662, 663, 656, 0, 0, 666, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 450,
	0, 0, 0, 0, 0, 55, 0, 44, 45, 0,
	46, 47, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 101, 101, 0, 0, 0, 0, 0, 0,
	414, 655, 654, 664, 665, 657, 658, 659, 660, 661,
	662, 663, 656, 101, 0, 666, 0, 0, 0, 0,
	0, 1356, 0, 0, 101, 0, 0, 1295, 101, 0,
	0, 0, 0, 101, 0, 0, 1168, 840, 450, 0,
	450, 450, 655, 654, 664, 665, 657, 658, 659, 660,
	661, 662, 663, 656, 0, 0, 666, 655, 654, 664,
	665, 657, 658, 659, 660, 661, 662, 663, 656, 0,
	58, 666, 0, 0, 0, 848, 0, 850, 0, 0,
	851, 0, 655, 654, 664, 665, 657, 658, 659, 660,
	661, 662, 663, 656, 0, 450, 666, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 880, 0, 0, 0, 0, 887,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 413, 906, 0, 1393, 1395,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1395, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 101, 0, 0, 101, 450, 450, 0, 450,
	1422, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1303, 0, 1305, 1306, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	0, 0, 0, 0, 101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 985, 0,
	0, 101, 0, 0, 0, 0, 0, 0, 0, 0,
	840, 1016, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1466, 0, 0,
	0, 1470, 0, 0, 0, 0, 1473, 0, 0, 1478,
	1479, 1480, 0, 0, 0, 0, 0, 333, 333, 0,
	0, 0, 333, 333, 333, 333, 0, 0, 0, 414,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 333, 333,
	333, 333, 1095, 101, 0, 0, 0, 0, 0, 1102,
	1103, 101, 1011, 1104, 0, 101, 101, 0, 0, 101,
	1019, 840, 414, 1524, 1524, 1524, 0, 0, 0, 0,
	0, 0, 450, 1111, 840, 0, 0, 0, 0, 0,
	1524, 1119, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1140, 1141, 1142, 1143, 1144, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 450,
	0, 0, 0, 0, 0, 0, 0, 101, 0, 0,
	0, 0, 0, 0, 101, 101, 0, 0, 101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1580, 1581, 101, 1582,
	1114, 1115, 1524, 0, 0, 0, 101, 0, 0, 0,
	0, 0, 0, 1422, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1422, 0, 0, 101, 101, 101, 101,
	101, 0, 0, 0, 0, 0, 840, 1612, 0, 0,
	0, 0, 0, 0, 1524, 0, 0, 0, 333, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1638, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1422, 333, 0, 0, 0, 0, 0,
	450, 450, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 333, 0, 0, 413, 0, 0, 1665,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	414, 101, 101, 101, 101, 101, 0, 1675, 0, 0,
	0, 0, 0, 1220, 0, 0, 101, 0, 0, 0,
	1011, 0, 0, 0, 1304, 0, 1422, 0, 101, 0,
	0, 0, 0, 0, 1524, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1349, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 333, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 333, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1448, 0, 414, 0, 0, 0, 0,
	0, 1452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1469, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	0, 0, 0, 0, 0, 0, 101, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 0, 0, 0, 0,
	1541, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1619, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1011, 0, 1011, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1667, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 559, 547, 0, 504,
	562, 476, 494, 570, 495, 498, 535, 461, 517, 187,
	492, 0, 480, 456, 487, 457, 478, 506, 133, 475,
	549, 520, 561, 159, 560, 510, 0, 568, 161, 526,
	0, 233, 175, 0, 0, 508, 551, 515, 544, 503,
	536, 466, 525, 563, 493, 533, 564, 0, 0, 0,
	437, 0, 1038, 1039, 0, 0, 414, 0, 0, 123,
	0, 530, 558, 489, 532, 534, 455, 527, 101, 459,
	462, 569, 554, 483, 484, 485, 1245, 0, 0, 0,
	0, 0, 0, 507, 516, 541, 501, 0, 0, 0,
	0, 0, 0, 0, 0, 481, 0, 524, 0, 0,
	0, 463, 460, 0, 0, 505, 0, 0, 0, 465,
	0, 482, 542, 0, 452, 141, 0, 0, 546, 553,
	502, 0, 262, 557, 500, 499, 206, 0, 237, 144,
	158, 119, 105, 115, 0, 143, 184, 213, 217, 490,
	453, 550, 479, 488, 127, 486, 215, 194, 253, 0,
	523, 196, 214, 162, 243, 207, 252, 263, 264, 240,
	260, 268, 230, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 108, 239, 251, 124, 225, 110, 249,
	236, 173, 153, 154, 109, 0, 211, 132, 139, 129,
	186, 0, 0, 0, 246, 247, 128, 271, 116, 259,
	112, 117, 258, 180, 0, 0, 0, 242, 250, 174,
	167, 0, 111, 248, 172, 166, 157, 136, 146, 204,
	164, 205, 147, 177, 176, 178, 0, 458, 0, 234,
	256, 272, 121, 474, 0, 241, 266, 267, 0, 0,
	122, 140, 135, 203, 179, 118, 149, 231, 156, 163,
	210, 270, 193, 216, 125, 255, 232, 470, 473, 468,
	469, 518, 519, 565, 566, 567, 543, 464, 0, 471,
	472, 0, 548, 555, 556, 522, 104, 113, 160, 269,
	208, 138, 257, 454, 467, 131, 477, 0, 0, 491,
	496, 497, 509, 511, 512, 513, 514, 521, 528, 529,
	531, 537, 538, 539, 540, 545, 552, 571, 106, 107,
	114, 120, 126, 130, 134, 137, 142, 145, 148, 150,
	151, 152, 155, 165, 168, 169, 170, 171, 181, 182,
	183, 185, 188, 189, 190, 191, 192, 195, 197, 198,
	199, 200, 201, 202, 209, 212, 218, 219, 220, 221,
	222, 223, 224, 226, 227, 228, 229, 235, 238, 244,
	245, 254, 261, 265, 559, 547, 0, 504, 562, 476,
	494, 570, 495, 498, 535, 461, 517, 187, 492, 0,
	480, 456, 487, 457, 478, 506, 133, 475, 549, 520,
	561, 159, 560, 510, 0, 568, 161, 526, 0, 233,
	175, 0, 0, 508, 551, 515, 544, 503, 536, 466,
	525, 563, 493, 533, 564, 0, 0, 0, 437, 0,
	1038, 1039, 0, 0, 0, 0, 0, 123, 0, 530,
	558, 489, 532, 534, 455, 527, 0, 459, 462, 569,
	554, 483, 484, 485, 0, 0, 0, 0, 0, 0,
	0, 507, 516, 541, 501, 0, 0, 0, 0, 0,
	0, 0, 0, 481, 0, 524, 0, 0, 0, 463,
	460, 0, 0, 505, 0, 0, 0, 465, 0, 482,
	542, 0, 452, 141, 0, 0, 546, 553, 502, 0,
	262, 557, 500, 499, 206, 0, 237, 144, 158, 119,
	105, 115, 0, 143, 184, 213, 217, 490, 453, 550,
	479, 488, 127, 486, 215, 194, 253, 0, 523, 196,
	214, 162, 243, 207, 252, 263, 264, 240, 260, 268,
	230, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 239, 251, 124, 225, 110, 249, 236, 173,
	153, 154, 109, 0, 211, 132, 139, 129, 186, 0,
	0, 0, 246, 247, 128, 271, 116, 259, 112, 117,
	258, 180, 0, 0, 0, 242, 250, 174, 167, 0,
	111, 248, 172, 166, 157, 136, 146, 204, 164, 205,
	147, 177, 176, 178, 0, 458, 0, 234, 256, 272,
	121, 474, 0, 241, 266, 267, 0, 0, 122, 140,
	135, 203, 179, 118, 149, 231, 156, 163, 210, 270,
	193, 216, 125, 255, 232, 470, 473, 468, 469, 518,
	519, 565, 566, 567, 543, 464, 0, 471, 472, 0,
	548, 555, 556, 522, 104, 113, 160, 269, 208, 138,
	257, 454, 467, 131, 477, 0, 0, 491, 496, 497,
	509, 511, 512, 513, 514, 521, 528, 529, 531, 537,
	538, 539, 540, 545, 552, 571, 106, 107, 114, 120,
	126, 130, 134, 137, 142, 145, 148, 150, 151, 152,
	155, 165, 168, 169, 170, 171, 181, 182, 183, 185,
	188, 189, 190, 191, 192, 195, 197, 198, 199, 200,
	201, 202, 209, 212, 218, 219, 220, 221, 222, 223,
	224, 226, 227, 228, 229, 235, 238, 244, 245, 254,
	261, 265, 559, 547, 0, 504, 562, 476, 494, 570,
	495, 498, 535, 461, 517, 187, 492, 0, 480, 456,
	487, 457, 478, 506, 133, 475, 549, 520, 561, 159,
	560, 510, 0, 568, 161, 526, 0, 233, 175, 0,
	0, 508, 551, 515, 544, 503, 536, 466, 525, 563,
	493, 533, 564, 0, 0, 0, 437, 0, 0, 0,
	0, 0, 0, 0, 0, 123, 0, 530, 558, 489,
	532, 534, 455, 527, 0, 459, 462, 569, 554, 483,
	484, 485, 0, 0, 0, 0, 0, 0, 0, 507,
	516, 541, 501, 0, 0, 0, 0, 0, 0, 1352,
	0, 481, 0, 524, 0, 0, 0, 463, 460, 0,
	0, 505, 0, 0, 0, 465, 0, 482, 542, 0,
	452, 141, 0, 0, 546, 553, 502, 0, 262, 557,
	500, 499, 206, 0, 237, 144, 158, 119, 105, 115,
	0, 143, 184, 213, 217, 490, 453, 550, 479, 488,
	127, 486, 215, 194, 253, 0, 523, 196, 214, 162,
	243, 207, 252, 263, 264, 240, 260, 268, 230, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 108,
	239, 251, 124, 225, 110, 249, 236, 173, 153, 154,
	109, 0, 211, 132, 139, 129, 186, 0, 0, 0,
	246, 247, 128, 271, 116, 259, 112, 117, 258, 180,
	0, 0, 0, 242, 250, 174, 167, 0, 111, 248,
	172, 166, 157, 136, 146, 204, 164, 205, 147, 177,
	176, 178, 0, 458, 0, 234, 256, 272, 121, 474,
	0, 241, 266, 267, 0, 0, 122, 140, 135, 203,
	179, 118, 149, 231, 156, 163, 210, 270, 193, 216,
	125, 255, 232, 470, 473, 468, 469, 518, 519, 565,
	566, 567, 543, 464, 0, 471, 472, 0, 548, 555,
	556, 522, 104, 113, 160, 269, 208, 138, 257, 454,
	467, 131, 477, 0, 0, 491, 496, 497, 509, 511,
	512, 513, 514, 521, 528, 529, 531, 537, 538, 539,
	540, 545, 552, 571, 106, 107, 114, 120, 126, 130,
	134, 137, 142, 145, 148, 150, 151, 152, 155, 165,
	168, 169, 170, 171, 181, 182, 183, 185, 188, 189,
	190, 191, 192, 195, 197, 198, 199, 200, 201, 202,
	209, 212, 218, 219, 220, 221, 222, 223, 224, 226,
	227, 228, 229, 235, 238, 244, 245, 254, 261, 265,
	559, 547, 0, 504, 562, 476, 494, 570, 495, 498,
	535, 461, 517, 187, 492, 0, 480, 456, 487, 457,
	478, 506, 133, 475, 549, 520, 561, 159, 560, 510,
	0, 568, 161, 526, 0, 233, 175, 0, 0, 508,
	551, 515, 544, 503, 536, 466, 525, 563, 493, 533,
	564, 63, 0, 0, 437, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 530, 558, 489, 532, 534,
	455, 527, 0, 459, 462, 569, 554, 483, 484, 485,
	0, 0, 0, 0, 0, 0, 0, 507, 516, 541,
	501, 0, 0, 0, 0, 0, 0, 0, 0, 481,
	0, 524, 0, 0, 0, 463, 460, 0, 0, 505,
	0, 0, 0, 465, 0, 482, 542, 0, 452, 141,
	0, 0, 546, 553, 502, 0, 262, 557, 500, 499,
	206, 0, 237, 144, 158, 119, 105, 115, 0, 143,
	184, 213, 217, 490, 453, 550, 479, 488, 127, 486,
	215, 194, 253, 0, 523, 196, 214, 162, 243, 207,
	252, 263, 264, 240, 260, 268, 230, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 108, 239, 251,
	124, 225, 110, 249, 236, 173, 153, 154, 109, 0,
	211, 132, 139, 129, 186, 0, 0, 0, 246, 247,
	128, 271, 116, 259, 112, 117, 258, 180, 0, 0,
	0, 242, 250, 174, 167, 0, 111, 248, 172, 166,
	157, 136, 146, 204, 164, 205, 147, 177, 176, 178,
	0, 458, 0, 234, 256, 272, 121, 474, 0, 241,
	266, 267, 0, 0, 122, 140, 135, 203, 179, 118,
	149, 231, 156, 163, 210, 270, 193, 216, 125, 255,
	232, 470, 473, 468, 469, 518, 519, 565, 566, 567,
	543, 464, 0, 471, 472, 0, 548, 555, 556, 522,
	104, 113, 160, 269, 208, 138, 257, 454, 467, 131,
	477, 0, 0, 491, 496, 497, 509, 511, 512, 513,
	514, 521, 528, 529, 531, 537, 538, 539, 540, 545,
	552, 571, 106, 107, 114, 120, 126, 130, 134, 137,
	142, 145, 148, 150, 151, 152, 155, 165, 168, 169,
	170, 171, 181, 182, 183, 185, 188, 189, 190, 191,
	192, 195, 197, 198, 199, 200, 201, 202, 209, 212,
	218, 219, 220, 221, 222, 223, 224, 226, 227, 228,
	229, 235, 238, 244, 245, 254, 261, 265, 559, 547,
	0, 504, 562, 476, 494, 570, 495, 498, 535, 461,
	517, 187, 492, 0, 480, 456, 487, 457, 478, 506,
	133, 475, 549, 520, 561, 159, 560, 510, 0, 568,
	161, 526, 0, 233, 175, 0, 0, 508, 551, 515,
	544, 503, 536, 466, 525, 563, 493, 533, 564, 0,
	0, 0, 102, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 530, 558, 489, 532, 534, 455, 527,
	0, 459, 462, 569, 554, 483, 484, 485, 0, 0,
	0, 0, 0, 0, 0, 507, 516, 541, 501, 0,
	0, 0, 0, 0, 0, 1020, 0, 481, 0, 524,
	0, 0, 0, 463, 460, 0, 0, 505, 0, 0,
	0, 465, 0, 482, 542, 0, 452, 141, 0, 0,
	546, 553, 502, 0, 262, 557, 500, 499, 206, 0,
	237, 144, 158, 119, 105, 115, 0, 143, 184, 213,
	217, 490, 453, 550, 479, 488, 127, 486, 215, 194,
	253, 0, 523, 196, 214, 162, 243, 207, 252, 263,
	264, 240, 260, 268, 230, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 108, 239, 251, 124, 225,
	110, 249, 236, 173, 153, 154, 109, 0, 211, 132,
	139, 129, 186, 0, 0, 0, 246, 247, 128, 271,
	116, 259, 112, 117, 258, 180, 0, 0, 0, 242,
	250, 174, 167, 0, 111, 248, 172, 166, 157, 136,
	146, 204, 164, 205, 147, 177, 176, 178, 0, 458,
	0, 234, 256, 272, 121, 474, 0, 241, 266, 267,
	0, 0, 122, 140, 135, 203, 179, 118, 149, 231,
	156, 163, 210, 270, 193, 216, 125, 255, 232, 470,
	473, 468, 469, 518, 519, 565, 566, 567, 543, 464,
	0, 471, 472, 0, 548, 555, 556, 522, 104, 113,
	160, 269, 208, 138, 257, 454, 467, 131, 477, 0,
	0, 491, 496, 497, 509, 511, 512, 513, 514, 521,
	528, 529, 531, 537, 538, 539, 540, 545, 552, 571,
	106, 107, 114, 120, 126, 130, 134, 137, 142, 145,
	148, 150, 151, 152, 155, 165, 168, 169, 170, 171,
	181, 182, 183, 185, 188, 189, 190, 191, 192, 195,
	197, 198, 199, 200, 201, 202, 209, 212, 218, 219,
	220, 221, 222, 223, 224, 226, 227, 228, 229, 235,
	238, 244, 245, 254, 261, 265, 559, 547, 0, 504,
	562, 476, 494, 570, 495, 498, 535, 461, 517, 187,
	492, 0, 480, 456, 487, 457, 478, 506, 133, 475,
	549, 520, 561, 159, 560, 510, 0, 568, 161, 526,
	0, 233, 175, 0, 0, 508, 551, 515, 544, 503,
	536, 466, 525, 563, 493, 533, 564, 0, 0, 0,
	338, 0, 0, 0, 0, 0, 0, 0, 0, 123,
	0, 530, 558, 489, 532, 534, 455, 527, 0, 459,
	462, 569, 554, 483, 484, 485, 0, 0, 0, 0,
	0, 0, 0, 507, 516, 541, 501, 0, 0, 0,
	0, 0, 0, 915, 0, 481, 0, 524, 0, 0,
	0, 463, 460, 0, 0, 505, 0, 0, 0, 465,
	0, 482, 542, 0, 452, 141, 0, 0, 546, 553,
	502, 0, 262, 557, 500, 499, 206, 0, 237, 144,
	158, 119, 105, 115, 0, 143, 184, 213, 217, 490,
	453, 550, 479, 488, 127, 486, 215, 194, 253, 0,
	523, 196, 214, 162, 243, 207, 252, 263, 264, 240,
	260, 268, 230, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 108, 239, 251, 124, 225, 110, 249,
	236, 173, 153, 154, 109, 0, 211, 132, 139, 129,
	186, 0, 0, 0, 246, 247, 128, 271, 116, 259,
	112, 117, 258, 180, 0, 0, 0, 242, 250, 174,
	167, 0, 111, 248, 172, 166, 157, 136, 146, 204,
	164, 205, 147, 177, 176, 178, 0, 458, 0, 234,
	256, 272, 121, 474, 0, 241, 266, 267, 0, 0,
	122, 140, 135, 203, 179, 118, 149, 231, 156, 163,
	210, 270, 193, 216, 125, 255, 232, 470, 473, 468,
	469, 518, 519, 565, 566, 567, 543, 464, 0, 471,
	472, 0, 548, 555, 556, 522, 104, 113, 160, 269,
	208, 138, 257, 454, 467, 131, 477, 0, 0, 491,
	496, 497, 509, 511, 512, 513, 514, 521, 528, 529,
	531, 537, 538, 539, 540, 545, 552, 571, 106, 107,
	114, 120, 126, 130, 134, 137, 142, 145, 148, 150,
	151, 152, 155, 165, 168, 169, 170, 171, 181, 182,
	183, 185, 188, 189, 190, 191, 192, 195, 197, 198,
	199, 200, 201, 202, 209, 212, 218, 219, 220, 221,
	222, 223, 224, 226, 227, 228, 229, 235, 238, 244,
	245, 254, 261, 265, 559, 547, 0, 504, 562, 476,
	494, 570, 495, 498, 535, 461, 517, 187, 492, 0,
	480, 456, 487, 457, 478, 506, 133, 475, 549, 520,
	561, 159, 560, 510, 0, 568, 161, 526, 0, 233,
	175, 0, 0, 508, 551, 515, 544, 503, 536, 466,
	525, 563, 493, 533, 564, 0, 0, 0, 437, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 0, 530,
	558, 489, 532, 534, 455, 527, 0, 459, 462, 569,
	554, 483, 484, 485, 0, 0, 0, 0, 0, 0,
	0, 507, 516, 541, 501, 0, 0, 0, 0, 0,
	0, 0, 0, 481, 0, 524, 0, 0, 0, 463,
	460, 0, 0, 505, 0, 0, 0, 465, 0, 482,
	542, 0, 452, 141, 0, 0, 546, 553, 502, 0,
	262, 557, 500, 499, 206, 0, 237, 144, 158, 119,
	105, 115, 0, 143, 184, 213, 217, 490, 453, 550,
	479, 488, 127, 486, 215, 194, 253, 0, 523, 196,
	214, 162, 243, 207, 252, 263, 264, 240, 260, 268,
	230, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 239, 251, 124, 225, 110, 249, 236, 173,
	153, 154, 109, 0, 211, 132, 139, 129, 186, 0,
	0, 0, 246, 247, 128, 271, 116, 259, 112, 117,
	258, 180, 0, 0, 0, 242, 250, 174, 167, 0,
	111, 248, 172, 166, 157, 136, 146, 204, 164, 205,
	147, 177, 176, 178, 0, 458, 0, 234, 256, 272,
	121, 474, 0, 241, 266, 267, 0, 0, 122, 140,
	135, 203, 179, 118, 149, 231, 156, 163, 210, 270,
	193, 216, 125, 255, 232, 470, 473, 468, 469, 518,
	519, 565, 566, 567, 543, 464, 0, 471, 472, 0,
	548, 555, 556, 522, 104, 113, 160, 269, 208, 138,
	257, 454, 467, 131, 477, 0, 0, 491, 496, 497,
	509, 511, 512, 513, 514, 521, 528, 529, 531, 537,
	538, 539, 540, 545, 552, 571, 106, 107, 114, 120,
	126, 130, 134, 137, 142, 145, 148, 150, 151, 152,
	155, 165, 168, 169, 170, 171, 181, 182, 183, 185,
	188, 189, 190, 191, 192, 195, 197, 198, 199, 200,
	201, 202, 209, 212, 218, 219, 220, 221, 222, 223,
	224, 226, 227, 228, 229, 235, 238, 244, 245, 254,
	261, 265, 559, 547, 0, 504, 562, 476, 494, 570,
	495, 498, 535, 461, 517, 187, 492, 0, 480, 456,
	487, 457, 478, 506, 133, 475, 549, 520, 561, 159,
	560, 510, 0, 568, 161, 526, 0, 233, 175, 0,
	0, 508, 551, 515, 544, 503, 536, 466, 525, 563,
	493, 533, 564, 0, 0, 0, 338, 0, 0, 0,
	0, 0, 0, 0, 0, 123, 0, 530, 558, 489,
	532, 534, 455, 527, 0, 459, 462, 569, 554, 483,
	484, 485, 0, 0, 0, 0, 0, 0, 0, 507,
	516, 541, 501, 0, 0, 0, 0, 0, 0, 0,
	0, 481, 0, 524, 0, 0, 0, 463, 460, 0,
	0, 505, 0, 0, 0, 465, 0, 482, 542, 0,
	452, 141, 0, 0, 546, 553, 502, 0, 262, 557,
	500, 499, 206, 0, 237, 144, 158, 119, 105, 115,
	0, 143, 184, 213, 217, 490, 453, 550, 479, 488,
	127, 486, 215, 194, 253, 0, 523, 196, 214, 162,
	243, 207, 252, 263, 264, 240, 260, 268, 230, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 108,
	239, 251, 124, 225, 110, 249, 236, 173, 153, 154,
	109, 0, 211, 132, 139, 129, 186, 0, 0, 0,
	246, 247, 128, 271, 116, 259, 112, 117, 258, 180,
	0, 0, 0, 242, 250, 174, 167, 0, 111, 248,
	172, 166, 157, 136, 146, 204, 164, 205, 147, 177,
	176, 178, 0, 458, 0, 234, 256, 272, 121, 474,
	0, 241, 266, 267, 0, 0, 122, 140, 135, 203,
	179, 118, 149, 231, 156, 163, 210, 270, 193, 216,
	125, 255, 232, 470, 473, 468, 469, 518, 519, 565,
	566, 567, 543, 464, 0, 471, 472, 0, 548, 555,
	556, 522, 104, 113, 160, 269, 208, 138, 257, 454,
	467, 131, 477, 0, 0, 491, 496, 497, 509, 511,
	512, 513, 514, 521, 528, 529, 531, 537, 538, 539,
	540, 545, 552, 571, 106, 107, 114, 120, 126, 130,
	134, 137, 142, 145, 148, 150, 151, 152, 155, 165,
	168, 169, 170, 171, 181, 182, 183, 185, 188, 189,
	190, 191, 192, 195, 197, 198, 199, 200, 201, 202,
	209, 212, 218, 219, 220, 221, 222, 223, 224, 226,
	227, 228, 229, 235, 238, 244, 245, 254, 261, 265,
	559, 547, 0, 504, 562, 476, 494, 570, 495, 498,
	535, 461, 517, 187, 492, 0, 480, 456, 487, 457,
	478, 506, 133, 475, 549, 520, 561, 159, 560, 510,
	0, 568, 161, 526, 0, 233, 175, 0, 0, 508,
	551, 515, 544, 503, 536, 466, 525, 563, 493, 533,
	564, 0, 0, 0, 102, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 530, 558, 489, 532, 534,
	455, 527, 0, 459, 462, 569, 554, 483, 484, 485,
	0, 0, 0, 0, 0, 0, 0, 507, 516, 541,
	501, 0, 0, 0, 0, 0, 0, 0, 0, 481,
	0, 524, 0, 0, 0, 463, 460, 0, 0, 505,
	0, 0, 0, 465, 0, 482, 542, 0, 452, 141,
	0, 0, 546, 553, 502, 0, 262, 557, 500, 499,
	206, 0, 237, 144, 158, 119, 105, 115, 0, 143,
	184, 213, 217, 490, 453, 550, 479, 488, 127, 486,
	215, 194, 253, 0, 523, 196, 214, 162, 243, 207,
	252, 263, 264, 240, 260, 268, 230, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 108, 239, 251,
	124, 225, 110, 249, 236, 173, 153, 154, 109, 0,
	211, 132, 139, 129, 186, 0, 0, 0, 246, 247,
	128, 271, 116, 259, 112, 117, 258, 180, 0, 0,
	0, 242, 250, 174, 167, 0, 111, 248, 172, 166,
	157, 136, 146, 204, 164, 205, 147, 177, 176, 178,
	0, 458, 0, 234, 256, 272, 121, 474, 0, 241,
	266, 267, 0, 0, 122, 140, 135, 203, 179, 118,
	149, 231, 156, 163, 210, 270, 193, 216, 125, 255,
	232, 470, 473, 468, 469, 518, 519, 565, 566, 567,
	543, 464, 0, 471, 472, 0, 548, 555, 556, 522,
	104, 113, 160, 269, 208, 138, 257, 454, 467, 131,
	477, 0, 0, 491, 496, 497, 509, 511, 512, 513,
	514, 521, 528, 529, 531, 537, 538, 539, 540, 545,
	552, 571, 106, 107, 114, 120, 126, 130, 134, 137,
	142, 145, 148, 150, 151, 152, 155, 165, 168, 169,
	170, 171, 181, 182, 183, 185, 188, 189, 190, 191,
	192, 195, 197, 198, 199, 200, 201, 202, 209, 212,
	218, 219, 220, 221, 222, 223, 224, 226, 227, 228,
	229, 235, 238, 244, 245, 254, 261, 265, 187, 0,
	0, 0, 0, 340, 0, 0, 0, 133, 337, 0,
	0, 0, 159, 0, 0, 0, 382, 161, 0, 0,
	233, 175, 0, 0, 0, 0, 371, 372, 0, 0,
	0, 0, 0, 0, 1027, 0, 63, 0, 0, 338,
	359, 358, 361, 362, 363, 364, 0, 0, 123, 360,
	365, 366, 367, 1028, 0, 0, 335, 352, 0, 381,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	349, 350, 0, 0, 0, 0, 395, 0, 351, 0,
	0, 346, 347, 348, 353, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 0, 0, 373, 0, 0,
	0, 262, 0, 0, 393, 206, 0, 237, 144, 158,
	119, 105, 115, 0, 143, 184, 213, 217, 379, 0,
	0, 0, 0, 127, 0, 215, 194, 253, 0, 0,
	196, 214, 162, 243, 207, 252, 263, 264, 240, 260,
	268, 230, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 108, 239, 251, 124, 225, 110, 249, 236,
	173, 153, 154, 109, 0, 211, 132, 139, 129, 186,
	0, 0, 0, 246, 247, 128, 271, 116, 259, 112,
	117, 258, 180, 0, 0, 0, 242, 250, 174, 167,
	0, 111, 248, 172, 166, 157, 136, 146, 204, 164,
	205, 147, 177, 176, 178, 0, 0, 0, 234, 256,
	272, 121, 0, 0, 241, 266, 267, 0, 0, 122,
	140, 135, 203, 179, 118, 149, 231, 156, 163, 210,
	270, 193, 216, 125, 255, 232, 383, 394, 389, 390,
	387, 388, 386, 385, 384, 396, 374, 375, 376, 377,
	380, 0, 391, 392, 378, 104, 113, 160, 269, 208,
	138, 257, 0, 0, 131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 107, 114,
	120, 126, 130, 134, 137, 142, 145, 148, 150, 151,
	152, 155, 165, 168, 169, 170, 171, 181, 182, 183,
	185, 188, 189, 190, 191, 192, 195, 197, 198, 199,
	200, 201, 202, 209, 212, 218, 219, 220, 221, 222,
	223, 224, 226, 227, 228, 229, 235, 238, 244, 245,
	254, 261, 265, 187, 0, 0, 0, 0, 340, 0,
	0, 0, 133, 337, 0, 0, 0, 159, 0, 0,
	0, 382, 161, 0, 0, 233, 175, 0, 0, 0,
	0, 371, 372, 0, 0, 0, 0, 0, 0, 0,
	0, 63, 0, 614, 338, 359, 358, 361, 362, 363,
	364, 0, 0, 123, 360, 365, 366, 367, 0, 0,
	0, 335, 352, 0, 381, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 349, 350, 0, 0, 0,
	0, 395, 0, 351, 0, 0, 346, 347, 348, 353,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	0, 0, 373, 0, 0, 0, 262, 0, 0, 393,
	206, 0, 237, 144, 158, 119, 105, 115, 0, 143,
	184, 213, 217, 379, 0, 0, 0, 0, 127, 0,
	215, 194, 253, 0, 0, 196, 214, 162, 243, 207,
	252, 263, 264, 240, 260, 268, 230, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 108, 239, 251,
	124, 225, 110, 249, 236, 173, 153, 154, 109, 0,
	211, 132, 139, 129, 186, 0, 0, 0, 246, 247,
	128, 271, 116, 259, 112, 117, 258, 180, 0, 0,
	0, 242, 250, 174, 167, 0, 111, 248, 172, 166,
	157, 136, 146, 204, 164, 205, 147, 177, 176, 178,
	0, 0, 0, 234, 256, 272, 121, 0, 0, 241,
	266, 267, 0, 0, 122, 140, 135, 203, 179, 118,
	149, 231, 156, 163, 210, 270, 193, 216, 125, 255,
	232, 383, 394, 389, 390, 387, 388, 386, 385, 384,
	396, 374, 375, 376, 377, 380, 0, 391, 392, 378,
	104, 113, 160, 269, 208, 138, 257, 0, 0, 131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 107, 114, 120, 126, 130, 134, 137,
	142, 145, 148, 150, 151, 152, 155, 165, 168, 169,
	170, 171, 181, 182, 183, 185, 188, 189, 190, 191,
	192, 195, 197, 198, 199, 200, 201, 202, 209, 212,
	218, 219, 220, 221, 222, 223, 224, 226, 227, 228,
	229, 235, 238, 244, 245, 254, 261, 265, 187, 0,
	0, 0, 0, 340, 0, 0, 0, 133, 337, 0,
	0, 0, 159, 0, 0, 0, 382, 161, 0, 0,
	233, 175, 0, 0, 0, 0, 371, 372, 0, 0,
	0, 0, 0, 0, 0, 0, 63, 0, 0, 338,
	359, 358, 361, 362, 363, 364, 0, 0, 123, 360,
	365, 366, 367, 0, 0, 0, 335, 352, 0, 381,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	349, 350, 331, 0, 0, 0, 395, 0, 351, 0,
	0, 346, 347, 348, 353, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 0, 0, 373, 0, 0,
	0, 262, 0, 0, 393, 206, 0, 237, 144, 158,
	119, 105, 115, 0, 143, 184, 213, 217, 379, 0,
	0, 0, 0, 127, 0, 215, 194, 253, 0, 0,
	196, 214, 162, 243, 207, 252, 263, 264, 240, 260,
	268, 230, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 108, 239, 251, 124, 225, 110, 249, 236,
	173, 153, 154, 109, 0, 211, 132, 139, 129, 186,
	0, 0, 0, 246, 247, 128, 271, 116, 259, 112,
	117, 258, 180, 0, 0, 0, 242, 250, 174, 167,
	0, 111, 248, 172, 166, 157, 136, 146, 204, 164,
	205, 147, 177, 176, 178, 0, 0, 0, 234, 256,
	272, 121, 0, 0, 241, 266, 267, 0, 0, 122,
	140, 135, 203, 179, 118, 149, 231, 156, 163, 210,
	270, 193, 216, 125, 255, 232, 383, 394, 389, 390,
	387, 388, 386, 385, 384, 396, 374, 375, 376, 377,
	380, 0, 391, 392, 378, 104, 113, 160, 269, 208,
	138, 257, 0, 0, 131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 107, 114,
	120, 126, 130, 134, 137, 142, 145, 148, 150, 151,
	152, 155, 165, 168, 169, 170, 171, 181, 182, 183,
	185, 188, 189, 190, 191, 192, 195, 197, 198, 199,
	200, 201, 202, 209, 212, 218, 219, 220, 221, 222,
	223, 224, 226, 227, 228, 229, 235, 238, 244, 245,
	254, 261, 265, 187, 0, 0, 0, 0, 340, 0,
	0, 0, 133, 337, 0, 0, 0, 159, 0, 0,
	0, 382, 161, 0, 0, 233, 175, 0, 0, 0,
	0, 371, 372, 0, 0, 0, 0, 0, 0, 0,
	0, 63, 0, 0, 338, 359, 965, 361, 362, 363,
	364, 0, 0, 123, 360, 365, 366, 367, 0, 0,
	0, 335, 352, 0, 381, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 349, 350, 331, 0, 0,
	0, 395, 0, 351, 0, 0, 346, 347, 348, 353,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	0, 0, 373, 0, 0, 0, 262, 0, 0, 393,
	206, 0, 237, 144, 158, 119, 105, 115, 0, 143,
	184, 213, 217, 379, 0, 0, 0, 0, 127, 0,
	215, 194, 253, 0, 0, 196, 214, 162, 243, 207,
	252, 263, 264, 240, 260, 268, 230, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 108, 239, 251,
	124, 225, 110, 249, 236, 173, 153, 154, 109, 0,
	211, 132, 139, 129, 186, 0, 0, 0, 246, 247,
	128, 271, 116, 259, 112, 117, 258, 180, 0, 0,
	0, 242, 250, 174, 167, 0, 111, 248, 172, 166,
	157, 136, 146, 204, 164, 205, 147, 177, 176, 178,
	0, 0, 0, 234, 256, 272, 121, 0, 0, 241,
	266, 267, 0, 0, 122, 140, 135, 203, 179, 118,
	149, 231, 156, 163, 210, 270, 193, 216, 125, 255,
	232, 383, 394, 389, 390, 387, 388, 386, 385, 384,
	396, 374, 375, 376, 377, 380, 0, 391, 392, 378,
	104, 113, 160, 269, 208, 138, 257, 0, 0, 131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 107, 114, 120, 126, 130, 134, 137,
	142, 145, 148, 150, 151, 152, 155, 165, 168, 169,
	170, 171, 181, 182, 183, 185, 188, 189, 190, 191,
	192, 195, 197, 198, 199, 200, 201, 202, 209, 212,
	218, 219, 220, 221, 222, 223, 224, 226, 227, 228,
	229, 235, 238, 244, 245, 254, 261, 265, 187, 0,
	0, 0, 0, 340, 0, 0, 0, 133, 337, 0,
	0, 0, 159, 0, 0, 0, 382, 161, 0, 0,
	233, 175, 0, 0, 0, 0, 371, 372, 0, 0,
	0, 0, 0, 0, 0, 0, 63, 0, 0, 338,
	359, 962, 361, 362, 363, 364, 0, 0, 123, 360,
	365, 366, 367, 0, 0, 0, 335, 352, 0, 381,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	349, 350, 331, 0, 0, 0, 395, 0, 351, 0,
	0, 346, 347, 348, 353, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 0, 0, 373, 0, 0,
	0, 262, 0, 0, 393, 206, 0, 237, 144, 158,
	119, 105, 115, 0, 143, 184, 213, 217, 379, 0,
	0, 0, 0, 127, 0, 215, 194, 253, 0, 0,
	196, 214, 162, 243, 207, 252, 263, 264, 240, 260,
	268, 230, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 108, 239, 251, 124, 225, 110, 249, 236,
	173, 153, 154, 109, 0, 211, 132, 139, 129, 186,
	0, 0, 0, 246, 247, 128, 271, 116, 259, 112,
	117, 258, 180, 0, 0, 0, 242, 250, 174, 167,
	0, 111, 248, 172, 166, 157, 136, 146, 204, 164,
	205, 147, 177, 176, 178, 0, 0, 0, 234, 256,
	272, 121, 0, 0, 241, 266, 267, 0, 0, 122,
	140, 135, 203, 179, 118, 149, 231, 156, 163, 210,
	270, 193, 216, 125, 255, 232, 383, 394, 389, 390,
	387, 388, 386, 385, 384, 396, 374, 375, 376, 377,
	380, 0, 391, 392, 378, 104, 113, 160, 269, 208,
	138, 257, 0, 0, 131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 107, 114,
	120, 126, 130, 134, 137, 142, 145, 148, 150, 151,
	152, 155, 165, 168, 169, 170, 171, 181, 182, 183,
	185, 188, 189, 190, 191, 192, 195, 197, 198, 199,
	200, 201, 202, 209, 212, 218, 219, 220, 221, 222,
	223, 224, 226, 227, 228, 229, 235, 238, 244, 245,
	254, 261, 265, 27, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 187, 0, 0, 0, 0,
	340, 0, 0, 0, 133, 337, 0, 0, 0, 159,
	0, 0, 0, 382, 161, 0, 0, 233, 175, 0,
	0, 0, 0, 371, 372, 0, 0, 0, 0, 0,
	0, 0, 0, 63, 0, 0, 338, 359, 358, 361,
	362, 363, 364, 0, 0, 123, 360, 365, 366, 367,
	0, 0, 0, 335, 352, 0, 381, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 349, 350, 0,
	0, 0, 0, 395, 0, 351, 0, 0, 346, 347,
	348, 353, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 0, 373, 0, 0, 0, 262, 0,
	0, 393, 206, 0, 237, 144, 158, 119, 105, 115,
	0, 143, 184, 213, 217, 379, 0, 0, 0, 0,
	127, 0, 215, 194, 253, 0, 0, 196, 214, 162,
	243, 207, 252, 263, 264, 240, 260, 268, 230, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 108,
	239, 251, 124, 225, 110, 249, 236, 173, 153, 154,
	109, 0, 211, 132, 139, 129, 186, 0, 0, 0,
	246, 247, 128, 271, 116, 259, 112, 117, 258, 180,
	0, 0, 0, 242, 250, 174, 167, 0, 111, 248,
	172, 166, 157, 136, 146, 204, 164, 205, 147, 177,
	176, 178, 0, 0, 0, 234, 256, 272, 121, 0,
	0, 241, 266, 267, 0, 0, 122, 140, 135, 203,
	179, 118, 149, 231, 156, 163, 210, 270, 193, 216,
	125, 255, 232, 383, 394, 389, 390, 387, 388, 386,
	385, 384, 396, 374, 375, 376, 377, 380, 0, 391,
	392, 378, 104, 113, 160, 269, 208, 138, 257, 0,
	0, 131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 107, 114, 120, 126, 130,
	134, 137, 142, 145, 148, 150, 151, 152, 155, 165,
	168, 169, 170, 171, 181, 182, 183, 185, 188, 189,
	190, 191, 192, 195, 197, 198, 199, 200, 201, 202,
	209, 212, 218, 219, 220, 221, 222, 223, 224, 226,
	227, 228, 229, 235, 238, 244, 245, 254, 261, 265,
	187, 0, 0, 0, 0, 340, 0, 0, 0, 133,
	337, 0, 0, 0, 159, 0, 0, 0, 382, 161,
	0, 0, 233, 175, 0, 0, 0, 0, 371, 372,
	0, 0, 0, 0, 0, 0, 0, 0, 63, 0,
	0, 338, 359, 358, 361, 362, 363, 364, 0, 0,
	123, 360, 365, 366, 367, 0, 0, 0, 335, 352,
	0, 381, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 349, 350, 0, 0, 0, 0, 395, 0,
	351, 0, 0, 346, 347, 348, 353, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 373,
	0, 0, 0, 262, 0, 0, 393, 206, 0, 237,
	144, 158, 119, 105, 115, 0, 143, 184, 213, 217,
	379, 0, 0, 0, 0, 127, 0, 215, 194, 253,
	0, 0, 196, 214, 162, 243, 207, 252, 263, 264,
	240, 260, 268, 230, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 108, 239, 251, 124, 225, 110,
	249, 236, 173, 153, 154, 109, 0, 211, 132, 139,
	129, 186, 0, 0, 0, 246, 247, 128, 271, 116,
	259, 112, 117, 258, 180, 0, 0, 0, 242, 250,
	174, 167, 0, 111, 248, 172, 166, 157, 136, 146,
	204, 164, 205, 147, 177, 176, 178, 0, 0, 0,
	234, 256, 272, 121, 0, 0, 241, 266, 267, 0,
	0, 122, 140, 135, 203, 179, 118, 149, 231, 156,
	163, 210, 270, 193, 216, 125, 255, 232, 383, 394,
	389, 390, 387, 388, 386, 385, 384, 396, 374, 375,
	376, 377, 380, 0, 391, 392, 378, 104, 113, 160,
	269, 208, 138, 257, 0, 0, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	107, 114, 120, 126, 130, 134, 137, 142, 145, 148,
	150, 151, 152, 155, 165, 168, 169, 170, 171, 181,
	182, 183, 185, 188, 189, 190, 191, 192, 195, 197,
	198, 199, 200, 201, 202, 209, 212, 218, 219, 220,
	221, 222, 223, 224, 226, 227, 228, 229, 235, 238,
	244, 245, 254, 261, 265, 187, 0, 0, 0, 0,
	0, 0, 0, 0, 133, 0, 0, 0, 0, 159,
	0, 0, 0, 382, 161, 0, 0, 233, 175, 0,
	0, 0, 0, 371, 372, 0, 0, 0, 0, 0,
	0, 0, 0, 63, 0, 0, 338, 359, 358, 361,
	362, 363, 364, 0, 0, 123, 360, 365, 366, 367,
	0, 0, 0, 0, 352, 0, 381, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 349, 350, 0,
	0, 0, 0, 395, 0, 351, 0, 0, 346, 347,
	348, 353, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 0, 373, 0, 0, 0, 262, 0,
	0, 393, 206, 0, 237, 144, 158, 119, 105, 115,
	0, 143, 184, 213, 217, 379, 0, 0, 0, 0,
	127, 0, 215, 194, 253, 0, 1737, 196, 214, 162,
	243, 207, 252, 263, 264, 240, 260, 268, 230, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 108,
	239, 251, 124, 225, 110, 249, 236, 173, 153, 154,
	109, 0, 211, 132, 139, 129, 186, 0, 0, 0,
	246, 247, 128, 271, 116, 259, 112, 117, 258, 180,
	0, 0, 0, 242, 250, 174, 167, 0, 111, 248,
	172, 166, 157, 136, 146, 204, 164, 205, 147, 177,
	176, 178, 0, 0, 0, 234, 256, 272, 121, 0,
	0, 241, 266, 267, 0, 0, 122, 140, 135, 203,
	179, 118, 149, 231, 156, 163, 210, 270, 193, 216,
	125, 255, 232, 383, 394, 389, 390, 387, 388, 386,
	385, 384, 396, 374, 375, 376, 377, 380, 0, 391,
	392, 378, 104, 113, 160, 269, 208, 138, 257, 0,
	0, 131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 107, 114, 120, 126, 130,
	134, 137, 142, 145, 148, 150, 151, 152, 155, 165,
	168, 169, 170, 171, 181, 182, 183, 185, 188, 189,
	190, 191, 192, 195, 197, 198, 199, 200, 201, 202,
	209, 212, 218, 219, 220, 221, 222, 223, 224, 226,
	227, 228, 229, 235, 238, 244, 245, 254, 261, 265,
	187, 0, 0, 0, 0, 0, 0, 0, 0, 133,
	0, 0, 0, 0, 159, 0, 0, 0, 382, 161,
	0, 0, 233, 175, 0, 0, 0, 0, 371, 372,
	0, 0, 0, 0, 0, 0, 0, 0, 63, 0,
	614, 338, 359, 358, 361, 362, 363, 364, 0, 0,
	123, 360, 365, 366, 367, 0, 0, 0, 0, 352,
	0, 381, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 349, 350, 0, 0, 0, 0, 395, 0,
	351, 0, 0, 346, 347, 348, 353, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 373,
	0, 0, 0, 262, 0, 0, 393, 206, 0, 237,
	144, 158, 119, 105, 115, 0, 143, 184, 213, 217,
	379, 0, 0, 0, 0, 127, 0, 215, 194, 253,
	0, 0, 196, 214, 162, 243, 207, 252, 263, 264,
	240, 260, 268, 230, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 108, 239, 251, 124, 225, 110,
	249, 236, 173, 153, 154, 109, 0, 211, 132, 139,
	129, 186, 0, 0, 0, 246, 247, 128, 271, 116,
	259, 112, 117, 258, 180, 0, 0, 0, 242, 250,
	174, 167, 0, 111, 248, 172, 166, 157, 136, 146,
	204, 164, 205, 147, 177, 176, 178, 0, 0, 0,
	234, 256, 272, 121, 0, 0, 241, 266, 267, 0,
	0, 122, 140, 135, 203, 179, 118, 149, 231, 156,
	163, 210, 270, 193, 216, 125, 255, 232, 383, 394,
	389, 390, 387, 388, 386, 385, 384, 396, 374, 375,
	376, 377, 380, 0, 391, 392, 378, 104, 113, 160,
	269, 208, 138, 257, 0, 0, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	107, 114, 120, 126, 130, 134, 137, 142, 145, 148,
	150, 151, 152, 155, 165, 168, 169, 170, 171, 181,
	182, 183, 185, 188, 189, 190, 191, 192, 195, 197,
	198, 199, 200, 201, 202, 209, 212, 218, 219, 220,
	221, 222, 223, 224, 226, 227, 228, 229, 235, 238,
	244, 245, 254, 261, 265, 187, 0, 0, 0, 0,
	0, 0, 0, 0, 133, 0, 0, 0, 0, 159,
	0, 0, 0, 382, 161, 0, 0, 233, 175, 0,
	0, 0, 0, 371, 372, 0, 0, 0, 0, 0,
	0, 0, 0, 63, 0, 0, 338, 359, 358, 361,
	362, 363, 364, 0, 0, 123, 360, 365, 366, 367,
	0, 0, 0, 0, 352, 0, 381, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 349, 350, 0,
	0, 0, 0, 395, 0, 351, 0, 0, 346, 347,
	348, 353, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 0, 373, 0, 0, 0, 262, 0,
	0, 393, 206, 0, 237, 144, 158, 119, 105, 115,
	0, 143, 184, 213, 217, 379, 0, 0, 0, 0,
	127, 0, 215, 194, 253, 0, 0, 196, 214, 162,
	243, 207, 252, 263, 264, 240, 260, 268, 230, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 108,
	239, 251, 124, 225, 110, 249, 236, 173, 153, 154,
	109, 0, 211, 132, 139, 129, 186, 0, 0, 0,
	246, 247, 128, 271, 116, 259, 112, 117, 258, 180,
	0, 0, 0, 242, 250, 174, 167, 0, 111, 248,
	172, 166, 157, 136, 146, 204, 164, 205, 147, 177,
	176, 178, 0, 0, 0, 234, 256, 272, 121, 0,
	0, 241, 266, 267, 0, 0, 122, 140, 135, 203,
	179, 118, 149, 231, 156, 163, 210, 270, 193, 216,
	125, 255, 232, 383, 394, 389, 390, 387, 388, 386,
	385, 384, 396, 374, 375, 376, 377, 380, 0, 391,
	392, 378, 104, 113, 160, 269, 208, 138, 257, 0,
	0, 131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 107, 114, 120, 126, 130,
	134, 137, 142, 145, 148, 150, 151, 152, 155, 165,
	168, 169, 170, 171, 181, 182, 183, 185, 188, 189,
	190, 191, 192, 195, 197, 198, 199, 200, 201, 202,
	209, 212, 218, 219, 220, 221, 222, 223, 224, 226,
	227, 228, 229, 235, 238, 244, 245, 254, 261, 265,
	187, 0, 0, 0, 0, 0, 0, 0, 0, 133,
	0, 0, 0, 0, 159, 0, 0, 0, 0, 161,
	0, 0, 233, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 437, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 655, 654,
	664, 665, 657, 658, 659, 660, 661, 662, 663, 656,
	0, 0, 666, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	0, 0, 0, 262, 0, 0, 0, 206, 0, 237,
	144, 158, 119, 105, 115, 0, 143, 184, 213, 217,
	0, 0, 0, 0, 0, 127, 0, 215, 194, 253,
	0, 0, 196, 214, 162, 243, 207, 252, 263, 264,
	240, 260, 268, 230, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 108, 239, 251, 124, 225, 110,
	249, 236, 173, 153, 154, 109, 0, 211, 132, 139,
	129, 186, 0, 0, 0, 246, 247, 128, 271, 116,
	259, 112, 117, 258, 180, 0, 0, 0, 242, 250,
	174, 167, 0, 111, 248, 172, 166, 157, 136, 146,
	204, 164, 205, 147, 177, 176, 178, 0, 0, 0,
	234, 256, 272, 121, 0, 0, 241, 266, 267, 0,
	0, 122, 140, 135, 203, 179, 118, 149, 231, 156,
	163, 210, 270, 193, 216, 125, 255, 232, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 113, 160,
	269, 208, 138, 257, 0, 0, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	107, 114, 120, 126, 130, 134, 137, 142, 145, 148,
	150, 151, 152, 155, 165, 168, 169, 170, 171, 181,
	182, 183, 185, 188, 189, 190, 191, 192, 195, 197,
	198, 199, 200, 201, 202, 209, 212, 218, 219, 220,
	221, 222, 223, 224, 226, 227, 228, 229, 235, 238,
	244, 245, 254, 261, 265, 187, 0, 0, 0, 1006,
	0, 0, 0, 0, 133, 0, 0, 0, 0, 159,
	0, 0, 0, 0, 161, 0, 0, 233, 175, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1008,
	1010, 0, 0, 0, 0, 0, 102, 0, 1012, 0,
	0, 0, 0, 0, 0, 123, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 0, 0, 0, 0, 0, 262, 0,
	1009, 0, 206, 0, 237, 144, 158, 119, 105, 115,
	0, 143, 184, 213, 217, 0, 0, 0, 0, 0,
	127, 0, 215, 194, 253, 0, 0, 196, 214, 162,
	243, 207, 252, 263, 264, 240, 260, 268, 230, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 108,
	239, 251, 124, 225, 110, 249, 236, 173, 153, 154,
	109, 0, 211, 132, 139, 129, 186, 0, 0, 0,
	246, 247, 128, 271, 116, 259, 112, 117, 258, 180,
	0, 0, 0, 242, 250, 174, 167, 0, 111, 248,
	172, 166, 157, 136, 146, 204, 164, 205, 147, 177,
	176, 178, 0, 0, 0, 234, 256, 272, 121, 0,
	0, 241, 266, 267, 0, 0, 122, 140, 135, 203,
	179, 118, 149, 231, 156, 163, 210, 270, 193, 216,
	125, 255, 232, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 113, 160, 269, 208, 138, 257, 0,
	0, 131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 107, 114, 120, 126, 130,
	134, 137, 142, 145, 148, 150, 151, 152, 155, 165,
	168, 169, 170, 171, 181, 182, 183, 185, 188, 189,
	190, 191, 192, 195, 197, 198, 199, 200, 201, 202,
	209, 212, 218, 219, 220, 221, 222, 223, 224, 226,
	227, 228, 229, 235, 238, 244, 245, 254, 261, 265,
	187, 0, 0, 0, 1006, 0, 0, 0, 0, 133,
	0, 0, 0, 0, 159, 0, 0, 0, 0, 161,
	0, 0, 233, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1008, 1010, 0, 0, 0, 0,
	0, 102, 0, 1012, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	0, 0, 0, 262, 0, 1009, 0, 206, 0, 237,
	144, 158, 119, 105, 115, 0, 143, 184, 213, 217,
	0, 0, 0, 0, 0, 127, 0, 215, 194, 253,
	0, 0, 1004, 214, 162, 243, 207, 252, 263, 264,
	240, 260, 268, 230, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 108, 239, 251, 124, 225, 110,
	249, 236, 173, 153, 154, 109, 0, 211, 132, 139,
	129, 186, 0, 0, 0, 246, 247, 128, 271, 116,
	259, 112, 117, 258, 180, 0, 0, 0, 242, 250,
	174, 167, 0, 111, 248, 172, 166, 157, 136, 146,
	204, 164, 205, 147, 177, 176, 178, 0, 0, 0,
	234, 256, 272, 121, 0, 0, 241, 266, 267, 0,
	0, 122, 140, 135, 203, 179, 118, 149, 231, 156,
	163, 210, 270, 193, 216, 125, 255, 232, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 113, 160,
	269, 208, 138, 257, 0, 0, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	107, 114, 120, 126, 130, 134, 137, 142, 145, 148,
	150, 151, 152, 155, 165, 168, 169, 170, 171, 181,
	182, 183, 185, 188, 189, 190, 191, 192, 195, 197,
	198, 199, 200, 201, 202, 209, 212, 218, 219, 220,
	221, 222, 223, 224, 226, 227, 228, 229, 235, 238,
	244, 245, 254, 261, 265, 187, 0, 0, 0, 643,
	0, 0, 0, 0, 133, 0, 0, 0, 0, 159,
	0, 0, 0, 0, 161, 0, 0, 233, 175, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 437, 0, 645, 0,
	0, 0, 0, 0, 0, 123, 0, 0, 0, 0,
	0, 640, 639, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 641,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 0, 0, 0, 0, 0, 262, 0,
	0, 0, 206, 0, 237, 144, 158, 119, 105, 115,
	0, 143, 184, 213, 217, 0, 0, 0, 0, 0,
	127, 0, 215, 194, 253, 0, 0, 196, 214, 162,
	243, 207, 252, 263, 264, 240, 260, 268, 230, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 108,
	239, 251, 124, 225, 110, 249, 236, 173, 153, 154,
	109, 0, 211, 132, 139, 129, 186, 0, 0, 0,
	246, 247, 128, 271, 116, 259, 112, 117, 258, 180,
	0, 0, 0, 242, 250, 174, 167, 0, 111, 248,
	172, 166, 157, 136, 146, 204, 164, 205, 147, 177,
	176, 178, 0, 0, 0, 234, 256, 272, 121, 0,
	0, 241, 266, 267, 0, 0, 122, 140, 135, 203,
	179, 118, 149, 231, 156, 163, 210, 270, 193, 216,
	125, 255, 232, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 113, 160, 269, 208, 138, 257, 0,
	0, 131, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 107, 114, 120, 126, 130,
	134, 137, 142, 145, 148, 150, 151, 152, 155, 165,
	168, 169, 170, 171, 181, 182, 183, 185, 188, 189,
	190, 191, 192, 195, 197, 198, 199, 200, 201, 202,
	209, 212, 218, 219, 220, 221, 222, 223, 224, 226,
	227, 228, 229, 235, 238, 244, 245, 254, 261, 265,
	27, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 187, 0, 0, 0, 0, 0, 0, 0,
	0, 133, 0, 0, 0, 0, 159, 0, 0, 0,
	0, 161, 0, 0, 233, 175, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	63, 0, 0, 437, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	0, 0, 0, 0, 0, 262, 0, 0, 0, 206,
	0, 237, 144, 158, 119, 105, 115, 0, 143, 184,
	213, 217, 0, 0, 0, 0, 0, 127, 0, 215,
	194, 253, 0, 0, 196, 214, 162, 243, 207, 252,
	263, 264, 240, 260, 268, 230, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 239, 251, 124,
	225, 110, 249, 236, 173, 153, 154, 109, 0, 211,
	132, 139, 129, 186, 0, 0, 0, 246, 247, 128,
	271, 116, 259, 112, 117, 258, 180, 0, 0, 0,
	242, 250, 174, 167, 0, 111, 248, 172, 166, 157,
	136, 146, 204, 164, 205, 147, 177, 176, 178, 0,
	0, 0, 234, 256, 272, 121, 0, 0, 241, 266,
	267, 0, 0, 122, 140, 135, 203, 179, 118, 149,
	231, 156, 163, 210, 270, 193, 216, 125, 255, 232,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	113, 160, 269, 208, 138, 257, 0, 0, 131, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 107, 114, 120, 126, 130, 134, 137, 142,
	145, 148, 150, 151, 152, 155, 165, 168, 169, 170,
	171, 181, 182, 183, 185, 188, 189, 190, 191, 192,
	195, 197, 198, 199, 200, 201, 202, 209, 212, 218,
	219, 220, 221, 222, 223, 224, 226, 227, 228, 229,
	235, 238, 244, 245, 254, 261, 265, 187, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 0, 0, 0,
	0, 159, 0, 0, 0, 0, 161, 0, 0, 233,
	175, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 102, 0,
	1012, 0, 0, 0, 0, 0, 0, 123, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 0, 0, 0, 0, 0,
	262, 0, 0, 0, 206, 0, 237, 144, 158, 119,
	105, 115, 0, 143, 184, 213, 217, 0, 0, 0,
	0, 0, 127, 0, 215, 194, 253, 0, 0, 196,
	214, 162, 243, 207, 252, 263, 264, 240, 260, 268,
	230, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 239, 251, 124, 225, 110, 249, 236, 173,
	153, 154, 109, 0, 211, 132, 139, 129, 186, 0,
	0, 0, 246, 247, 128, 271, 116, 259, 112, 117,
	258, 180, 0, 0, 0, 242, 250, 174, 167, 0,
	111, 248, 172, 166, 157, 136, 146, 204, 164, 205,
	147, 177, 176, 178, 0, 0, 0, 234, 256, 272,
	121, 0, 0, 241, 266, 267, 0, 0, 122, 140,
	135, 203, 179, 118, 149, 231, 156, 163, 210, 270,
	193, 216, 125, 255, 232, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 113, 160, 269, 208, 138,
	257, 0, 0, 131, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1223, 0,
	0, 0, 0, 0, 0, 0, 106, 107, 114, 120,
	126, 130, 134, 137, 142, 145, 148, 150, 151, 152,
	155, 165, 168, 169, 170, 171, 181, 182, 183, 185,
	188, 189, 190, 191, 192, 195, 197, 198, 199, 200,
	201, 202, 209, 212, 218, 219, 220, 221, 222, 223,
	224, 226, 227, 228, 229, 235, 238, 244, 245, 254,
	261, 265, 27, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 187, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 0, 0, 0, 0, 159, 0,
	0, 0, 0, 161, 0, 0, 233, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 63, 0, 0, 102, 0, 0, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 0, 0, 0, 0, 0, 0, 262, 0, 0,
	0, 206, 0, 237, 144, 158, 119, 105, 115, 0,
	143, 184, 213, 217, 0, 0, 0, 0, 0, 127,
	0, 215, 194, 253, 0, 0, 196, 214, 162, 243,
	207, 252, 263, 264, 240, 260, 268, 230, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 108, 239,
	251, 124, 225, 110, 249, 236, 173, 153, 154, 109,
	0, 211, 132, 139, 129, 186, 0, 0, 0, 246,
	247, 128, 271, 116, 259, 112, 117, 258, 180, 0,
	0, 0, 242, 250, 174, 167, 0, 111, 248, 172,
	166, 157, 136, 146, 204, 164, 205, 147, 177, 176,
	178, 0, 0, 0, 234, 256, 272, 121, 0, 0,
	241, 266, 267, 0, 0, 122, 140, 135, 203, 179,
	118, 149, 231, 156, 163, 210, 270, 193, 216, 125,
	255, 232, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 113, 160, 269, 208, 138, 257, 0, 0,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 107, 114, 120, 126, 130, 134,
	137, 142, 145, 148, 150, 151, 152, 155, 165, 168,
	169, 170, 171, 181, 182, 183, 185, 188, 189, 190,
	191, 192, 195, 197, 198, 199, 200, 201, 202, 209,
	212, 218, 219, 220, 221, 222, 223, 224, 226, 227,
	228, 229, 235, 238, 244, 245, 254, 261, 265, 187,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 0,
	0, 0, 0, 159, 0, 0, 0, 0, 161, 0,
	0, 233, 175, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	437, 0, 0, 902, 0, 0, 903, 0, 0, 123,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 0, 0, 0, 0,
	0, 0, 262, 0, 0, 0, 206, 0, 237, 144,
	158, 119, 105, 115, 0, 143, 184, 213, 217, 0,
	0, 0, 0, 0, 127, 0, 215, 194, 253, 0,
	0, 196, 214, 162, 243, 207, 252, 263, 264, 240,
	260, 268, 230, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 108, 239, 251, 124, 225, 110, 249,
	236, 173, 153, 154, 109, 0, 211, 132, 139, 129,
	186, 0, 0, 0, 246, 247, 128, 271, 116, 259,
	112, 117, 258, 180, 0, 0, 0, 242, 250, 174,
	167, 0, 111, 248, 172, 166, 157, 136, 146, 204,
	164, 205, 147, 177, 176, 178, 0, 0, 0, 234,
	256, 272, 121, 0, 0, 241, 266, 267, 0, 0,
	122, 140, 135, 203, 179, 118, 149, 231, 156, 163,
	210, 270, 193, 216, 125, 255, 232, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 113, 160, 269,
	208, 138, 257, 0, 0, 131, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 107,
	114, 120, 126, 130, 134, 137, 142, 145, 148, 150,
	151, 152, 155, 165, 168, 169, 170, 171, 181, 182,
	183, 185, 188, 189, 190, 191, 192, 195, 197, 198,
	199, 200, 201, 202, 209, 212, 218, 219, 220, 221,
	222, 223, 224, 226, 227, 228, 229, 235, 238, 244,
	245, 254, 261, 265, 187, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 759, 0, 0, 0, 159, 0,
	0, 0, 0, 161, 0, 0, 233, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 437, 0, 758, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 0, 0, 0, 0, 0, 0, 262, 0, 0,
	0, 206, 0, 237, 144, 158, 119, 105, 115, 0,
	143, 184, 213, 217, 0, 0, 0, 0, 0, 127,
	0, 215, 194, 253, 0, 0, 196, 214, 162, 243,
	207, 252, 263, 264, 240, 260, 268, 230, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 108, 239,
	251, 124, 225, 110, 249, 236, 173, 153, 154, 109,
	0, 211, 132, 139, 129, 186, 0, 0, 0, 246,
	247, 128, 271, 116, 259, 112, 117, 258, 180, 0,
	0, 0, 242, 250, 174, 167, 0, 111, 248, 172,
	166, 157, 136, 146, 204, 164, 205, 147, 177, 176,
	178, 0, 0, 0, 234, 256, 272, 121, 0, 0,
	241, 266, 267, 0, 0, 122, 140, 135, 203, 179,
	118, 149, 231, 156, 163, 210, 270, 193, 216, 125,
	255, 232, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 113, 160, 269, 208, 138, 257, 0, 0,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 107, 114, 120, 126, 130, 134,
	137, 142, 145, 148, 150, 151, 152, 155, 165, 168,
	169, 170, 171, 181, 182, 183, 185, 188, 189, 190,
	191, 192, 195, 197, 198, 199, 200, 201, 202, 209,
	212, 218, 219, 220, 221, 222, 223, 224, 226, 227,
	228, 229, 235, 238, 244, 245, 254, 261, 265, 187,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 0,
	0, 0, 0, 159, 0, 0, 0, 0, 161, 0,
	0, 233, 175, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	102, 0, 1012, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 0, 0, 0, 0,
	0, 0, 262, 0, 0, 0, 206, 0, 237, 144,
	158, 119, 105, 115, 0, 143, 184, 213, 217, 0,
	0, 0, 0, 0, 127, 0, 215, 194, 253, 0,
	0, 196, 214, 162, 243, 207, 252, 263, 264, 240,
	260, 268, 230, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 108, 239, 251, 124, 225, 110, 249,
	236, 173, 153, 154, 109, 0, 211, 132, 139, 129,
	186, 0, 0, 0, 246, 247, 128, 271, 116, 259,
	112, 117, 258, 180, 0, 0, 0, 242, 250, 174,
	167, 0, 111, 248, 172, 166, 157, 136, 146, 204,
	164, 205, 147, 177, 176, 178, 0, 0, 0, 234,
	256, 272, 121, 0, 0, 241, 266, 267, 0, 0,
	122, 140, 135, 203, 179, 118, 149, 231, 156, 163,
	210, 270, 193, 216, 125, 255, 232, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 113, 160, 269,
	208, 138, 257, 0, 0, 131, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 107,
	114, 120, 126, 130, 134, 137, 142, 145, 148, 150,
	151, 152, 155, 165, 168, 169, 170, 171, 181, 182,
	183, 185, 188, 189, 190, 191, 192, 195, 197, 198,
	199, 200, 201, 202, 209, 212, 218, 219, 220, 221,
	222, 223, 224, 226, 227, 228, 229, 235, 238, 244,
	245, 254, 261, 265, 187, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 0, 0, 0, 0, 159, 0,
	0, 0, 0, 161, 0, 0, 233, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 63, 0, 0, 102, 0, 0, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 0, 0, 0, 0, 0, 0, 262, 0, 0,
	0, 206, 0, 237, 144, 158, 119, 105, 115, 0,
	143, 184, 213, 217, 0, 0, 0, 0, 0, 127,
	0, 215, 194, 253, 0, 0, 196, 214, 162, 243,
	207, 252, 263, 264, 240, 260, 268, 230, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 108, 239,
	251, 124, 225, 110, 249, 236, 173, 153, 154, 109,
	0, 211, 132, 139, 129, 186, 0, 0, 0, 246,
	247, 128, 271, 116, 259, 112, 117, 258, 180, 0,
	0, 0, 242, 250, 174, 167, 0, 111, 248, 172,
	166, 157, 136, 146, 204, 164, 205, 147, 177, 176,
	178, 0, 0, 0, 234, 256, 272, 121, 0, 0,
	241, 266, 267, 0, 0, 122, 140, 135, 203, 179,
	118, 149, 231, 156, 163, 210, 270, 193, 216, 125,
	255, 232, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 113, 160, 269, 208, 138, 257, 0, 0,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 107, 114, 120, 126, 130, 134,
	137, 142, 145, 148, 150, 151, 152, 155, 165, 168,
	169, 170, 171, 181, 182, 183, 185, 188, 189, 190,
	191, 192, 195, 197, 198, 199, 200, 201, 202, 209,
	212, 218, 219, 220, 221, 222, 223, 224, 226, 227,
	228, 229, 235, 238, 244, 245, 254, 261, 265, 187,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 0,
	0, 0, 0, 159, 0, 0, 0, 0, 161, 0,
	0, 233, 175, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	437, 0, 645, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 0, 0, 0, 0,
	0, 0, 262, 0, 0, 0, 206, 0, 237, 144,
	158, 119, 105, 115, 0, 143, 184, 213, 217, 0,
	0, 0, 0, 0, 127, 0, 215, 194, 253, 0,
	0, 196, 214, 162, 243, 207, 252, 263, 264, 240,
	260, 268, 230, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 108, 239, 251, 124, 225, 110, 249,
	236, 173, 153, 154, 109, 0, 211, 132, 139, 129,
	186, 0, 0, 0, 246, 247, 128, 271, 116, 259,
	112, 117, 258, 180, 0, 0, 0, 242, 250, 174,
	167, 0, 111, 248, 172, 166, 157, 136, 146, 204,
	164, 205, 147, 177, 176, 178, 0, 0, 0, 234,
	256, 272, 121, 0, 0, 241, 266, 267, 0, 0,
	122, 140, 135, 203, 179, 118, 149, 231, 156, 163,
	210, 270, 193, 216, 125, 255, 232, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 113, 160, 269,
	208, 138, 257, 0, 0, 131, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 107,
	114, 120, 126, 130, 134, 137, 142, 145, 148, 150,
	151, 152, 155, 165, 168, 169, 170, 171, 181, 182,
	183, 185, 188, 189, 190, 191, 192, 195, 197, 198,
	199, 200, 201, 202, 209, 212, 218, 219, 220, 221,
	222, 223, 224, 226, 227, 228, 229, 235, 238, 244,
	245, 254, 261, 265, 187, 0, 0, 0, 0, 0,
	0, 0, 729, 133, 0, 0, 0, 0, 159, 0,
	0, 0, 0, 161, 0, 0, 233, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 102, 0, 0, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 0, 0, 0, 0, 0, 0, 262, 0, 0,
	0, 206, 0, 237, 144, 158, 119, 105, 115, 0,
	143, 184, 213, 217, 0, 0, 0, 0, 0, 127,
	0, 215, 194, 253, 0, 0, 196, 214, 162, 243,
	207, 252, 263, 264, 240, 260, 268, 230, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 108, 239,
	251, 124, 225, 110, 249, 236, 173, 153, 154, 109,
	0, 211, 132, 139, 129, 186, 0, 0, 0, 246,
	247, 128, 271, 116, 259, 112, 117, 258, 180, 0,
	0, 0, 242, 250, 174, 167, 0, 111, 248, 172,
	166, 157, 136, 146, 204, 164, 205, 147, 177, 176,
	178, 0, 0, 0, 234, 256, 272, 121, 0, 0,
	241, 266, 267, 0, 0, 122, 140, 135, 203, 179,
	118, 149, 231, 156, 163, 210, 270, 193, 216, 125,
	255, 232, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 113, 160, 269, 208, 138, 257, 0, 0,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 107, 114, 120, 126, 130, 134,
	137, 142, 145, 148, 150, 151, 152, 155, 165, 168,
	169, 170, 171, 181, 182, 183, 185, 188, 189, 190,
	191, 192, 195, 197, 198, 199, 200, 201, 202, 209,
	212, 218, 219, 220, 221, 222, 223, 224, 226, 227,
	228, 229, 235, 238, 244, 245, 254, 261, 265, 399,
	0, 0, 0, 0, 0, 0, 187, 0, 0, 0,
	0, 0, 0, 0, 0, 133, 0, 0, 0, 0,
	159, 0, 0, 0, 0, 161, 0, 0, 233, 175,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 102, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 0, 0, 0, 0, 0, 0, 262,
	0, 0, 0, 206, 0, 237, 144, 158, 119, 105,
	115, 0, 143, 184, 213, 217, 0, 0, 0, 0,
	0, 127, 0, 215, 194, 253, 0, 0, 196, 214,
	162, 243, 207, 252, 263, 264, 240, 260, 268, 230,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	108, 239, 251, 124, 225, 110, 249, 236, 173, 153,
	154, 109, 0, 211, 132, 139, 129, 186, 0, 0,
	0, 246, 247, 128, 271, 116, 259, 112, 117, 258,
	180, 0, 0, 0, 242, 250, 174, 167, 0, 111,
	248, 172, 166, 157, 136, 146, 204, 164, 205, 147,
	177, 176, 178, 0, 0, 0, 234, 256, 272, 121,
	0, 0, 241, 266, 267, 0, 0, 122, 140, 135,
	203, 179, 118, 149, 231, 156, 163, 210, 270, 193,
	216, 125, 255, 232, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 113, 160, 269, 208, 138, 257,
	0, 0, 131, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 107, 114, 120, 126,
	130, 134, 137, 142, 145, 148, 150, 151, 152, 155,
	165, 168, 169, 170, 171, 181, 182, 183, 185, 188,
	189, 190, 191, 192, 195, 197, 198, 199, 200, 201,
	202, 209, 212, 218, 219, 220, 221, 222, 223, 224,
	226, 227, 228, 229, 235, 238, 244, 245, 254, 261,
	265, 187, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 0, 0, 0, 0, 159, 0, 0, 0, 0,
	161, 0, 0, 233, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 99, 0, 0, 262, 0, 0, 0, 206, 0,
	237, 144, 158, 119, 105, 115, 0, 143, 184, 213,
	217, 0, 0, 0, 0, 0, 127, 0, 215, 194,
	253, 0, 0, 196, 214, 162, 243, 207, 252, 263,
	264, 240, 260, 268, 230, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 108, 239, 251, 124, 225,
	110, 249, 236, 173, 153, 154, 109, 0, 211, 132,
	139, 129, 186, 0, 0, 0, 246, 247, 128, 271,
	116, 259, 112, 117, 258, 180, 0, 0, 0, 242,
	250, 174, 167, 0, 111, 248, 172, 166, 157, 136,
	146, 204, 164, 205, 147, 177, 176, 178, 0, 0,
	0, 234, 256, 272, 121, 0, 0, 241, 266, 267,
	0, 0, 122, 140, 135, 203, 179, 118, 149, 231,
	156, 163, 210, 270, 193, 216, 125, 255, 232, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 113,
	160, 269, 208, 138, 257, 0, 0, 131, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 107, 114, 120, 126, 130, 134, 137, 142, 145,
	148, 150, 151, 152, 155, 165, 168, 169, 170, 171,
	181, 182, 183, 185, 188, 189, 190, 191, 192, 195,
	197, 198, 199, 200, 201, 202, 209, 212, 218, 219,
	220, 221, 222, 223, 224, 226, 227, 228, 229, 235,
	238, 244, 245, 254, 261, 265, 187, 0, 0, 0,
	0, 0, 0, 0, 0, 133, 0, 0, 0, 0,
	159, 0, 0, 0, 0, 161, 0, 0, 233, 175,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 437, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 0, 0, 0, 0, 0, 0, 262,
	0, 0, 0, 206, 0, 237, 144, 158, 119, 105,
	115, 0, 143, 184, 213, 217, 0, 0, 0, 0,
	0, 127, 0, 215, 194, 253, 0, 0, 196, 214,
	162, 243, 207, 252, 263, 264, 240, 260, 268, 230,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	108, 239, 251, 124, 225, 110, 249, 236, 173, 153,
	154, 109, 0, 211, 132, 139, 129, 186, 0, 0,
	0, 246, 247, 128, 271, 116, 259, 112, 117, 258,
	180, 0, 0, 0, 242, 250, 174, 167, 0, 111,
	248, 172, 166, 157, 136, 146, 204, 164, 205, 147,
	177, 176, 178, 0, 0, 0, 234, 256, 272, 121,
	0, 0, 241, 266, 267, 0, 0, 122, 140, 135,
	203, 179, 118, 149, 231, 156, 163, 210, 270, 193,
	216, 125, 255, 232, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 113, 160, 269, 208, 138, 257,
	0, 0, 131, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 107, 114, 120, 126,
	130, 134, 137, 142, 145, 148, 150, 151, 152, 155,
	165, 168, 169, 170, 171, 181, 182, 183, 185, 188,
	189, 190, 191, 192, 195, 197, 198, 199, 200, 201,
	202, 209, 212, 218, 219, 220, 221, 222, 223, 224,
	226, 227, 228, 229, 235, 238, 244, 245, 254, 261,
	265, 187, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 0, 0, 0, 0, 159, 0, 0, 0, 0,
	161, 0, 0, 233, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 0, 0, 0, 262, 0, 0, 0, 206, 0,
	237, 144, 158, 119, 105, 115, 0, 143, 184, 213,
	217, 0, 0, 0, 0, 0, 127, 0, 215, 194,
	253, 0, 0, 196, 214, 162, 243, 207, 252, 263,
	264, 240, 260, 268, 230, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 108, 239, 251, 124, 225,
	110, 249, 236, 173, 153, 154, 109, 0, 211, 132,
	139, 129, 186, 0, 0, 0, 246, 247, 128, 271,
	116, 259, 112, 117, 258, 180, 0, 0, 0, 242,
	250, 174, 167, 0, 111, 248, 172, 166, 157, 136,
	146, 204, 164, 205, 147, 177, 176, 178, 0, 0,
	0, 234, 256, 272, 121, 0, 0, 241, 266, 267,
	0, 0, 122, 140, 135, 203, 179, 118, 149, 231,
	156, 163, 210, 270, 193, 216, 125, 255, 232, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 113,
	160, 269, 208, 138, 257, 0, 0, 131, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 107, 114, 120, 126, 130, 134, 137, 142, 145,
	148, 150, 151, 152, 155, 165, 168, 169, 170, 171,
	181, 182, 183, 185, 188, 189, 190, 191, 192, 195,
	197, 198, 199, 200, 201, 202, 209, 212, 218, 219,
	220, 221, 222, 223, 224, 226, 227, 228, 229, 235,
	238, 244, 245, 254, 261, 265, 187, 0, 0, 0,
	0, 0, 0, 0, 0, 133, 0, 0, 0, 0,
	159, 0, 0, 0, 0, 161, 0, 0, 233, 175,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 338, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 0, 0, 0, 0, 0, 0, 262,
	0, 0, 0, 206, 0, 237, 144, 158, 119, 105,
	115, 0, 143, 184, 213, 217, 0, 0, 0, 0,
	0, 127, 0, 215, 194, 253, 0, 0, 196, 214,
	162, 243, 207, 252, 263, 264, 240, 260, 268, 230,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	108, 239, 251, 124, 225, 110, 249, 236, 173, 153,
	154, 109, 0, 211, 132, 139, 129, 186, 0, 0,
	0, 246, 247, 128, 271, 116, 259, 112, 416, 258,
	180, 0, 0, 0, 242, 250, 174, 167, 0, 111,
	248, 172, 166, 157, 136, 146, 204, 164, 205, 147,
	177, 176, 178, 0, 0, 0, 234, 256, 272, 121,
	0, 0, 241, 266, 267, 0, 0, 122, 140, 135,
	203, 417, 415, 149, 231, 156, 163, 210, 270, 193,
	216, 125, 255, 232, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 113, 160, 269, 208, 138, 257,
	0, 0, 131, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 107, 114, 120, 126,
	130, 134, 137, 142, 145, 148, 150, 151, 152, 155,
	165, 168, 169, 170, 171, 181, 182, 183, 185, 188,
	189, 190, 191, 192, 195, 197, 198, 199, 200, 201,
	202, 209, 212, 218, 219, 220, 221, 222, 223, 224,
	226, 227, 228, 229, 235, 238, 244, 245, 254, 261,
	265, 187, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 0, 0, 0, 0, 159, 0, 0, 0, 0,
	161, 0, 0, 233, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 338, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 0, 0, 0, 262, 0, 0, 0, 206, 0,
	237, 144, 158, 119, 105, 115, 0, 143, 184, 213,
	217, 0, 0, 0, 0, 0, 127, 0, 215, 194,
	253, 0, 0, 196, 214, 162, 243, 207, 252, 263,
	264, 240, 260, 268, 230, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 108, 239, 251, 124, 225,
	110, 249, 236, 173, 153, 154, 109, 0, 211, 132,
	139, 129, 186, 0, 0, 0, 246, 247, 128, 271,
	116, 259, 112, 117, 258, 180, 0, 0, 0, 242,
	250, 174, 167, 0, 111, 248, 172, 166, 157, 136,
	146, 204, 164, 205, 147, 177, 176, 178, 0, 0,
	0, 234, 256, 272, 121, 0, 0, 241, 266, 267,
	0, 0, 122, 140, 135, 203, 179, 118, 149, 231,
	156, 163, 210, 270, 193, 216, 125, 255, 232, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 113,
	160, 269, 208, 138, 257, 0, 0, 131, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 107, 114, 120, 126, 130, 134, 137, 142, 145,
	148, 150, 151, 152, 155, 165, 168, 169, 170, 171,
	181, 182, 183, 185, 188, 189, 190, 191, 192, 195,
	197, 198, 199, 200, 201, 202, 209, 212, 218, 219,
	220, 221, 222, 223, 224, 226, 227, 228, 229, 235,
	238, 244, 245, 254, 261, 265, 187, 0, 0, 0,
	0, 0, 0, 0, 0, 133, 0, 0, 0, 0,
	159, 0, 0, 0, 0, 161, 0, 0, 233, 175,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 338, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 0, 0, 0, 0, 0, 0, 262,
	0, 0, 0, 206, 0, 237, 144, 158, 119, 105,
	115, 0, 143, 184, 213, 217, 0, 0, 0, 0,
	0, 127, 0, 215, 194, 253, 0, 0, 196, 214,
	162, 243, 207, 252, 263, 264, 240, 260, 268, 230,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	108, 239, 750, 124, 225, 110, 249, 236, 173, 153,
	154, 109, 0, 211, 132, 139, 129, 186, 0, 0,
	0, 246, 247, 128, 271, 116, 259, 112, 416, 258,
	180, 0, 0, 0, 242, 250, 174, 167, 0, 111,
	248, 172, 166, 157, 136, 146, 204, 164, 205, 147,
	177, 176, 178, 0, 0, 0, 234, 256, 272, 121,
	0, 0, 241, 266, 267, 0, 0, 122, 140, 135,
	203, 417, 415, 149, 231, 156, 163, 210, 270, 193,
	216, 125, 255, 232, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 113, 160, 269, 208, 138, 257,
	0, 0, 131, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 107, 114, 120, 126,
	130, 134, 137, 142, 145, 148, 150, 151, 152, 155,
	165, 168, 169, 170, 171, 181, 182, 183, 185, 188,
	189, 190, 191, 192, 195, 197, 198, 199, 200, 201,
	202, 209, 212, 218, 219, 220, 221, 222, 223, 224,
	226, 227, 228, 229, 235, 238, 244, 245, 254, 261,
	265, 187, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 0, 0, 0, 0, 159, 0, 0, 0, 0,
	161, 0, 0, 233, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 338, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 0, 0, 0, 262, 0, 0, 0, 206, 0,
	237, 144, 158, 119, 105, 115, 0, 143, 184, 213,
	217, 0, 0, 0, 0, 0, 127, 0, 215, 194,
	253, 0, 0, 196, 214, 162, 243, 207, 252, 263,
	264, 240, 260, 268, 230, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 108, 239, 407, 124, 225,
	110, 249, 236, 173, 153, 154, 109, 0, 211, 132,
	139, 129, 186, 0, 0, 0, 246, 247, 128, 271,
	116, 259, 112, 416, 258, 180, 0, 0, 0, 242,
	250, 174, 167, 0, 111, 248, 172, 166, 157, 136,
	146, 204, 164, 205, 147, 177, 176, 178, 0, 0,
	0, 234, 256, 272, 121, 0, 0, 241, 266, 267,
	0, 0, 122, 140, 135, 203, 417, 415, 410, 409,
	156, 163, 210, 270, 193, 216, 125, 255, 232, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 113,
	160, 269, 208, 138, 257, 0, 0, 131, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 107, 114, 120, 126, 130, 134, 137, 142, 145,
	148, 150, 151, 152, 155, 165, 168, 169, 170, 171,
	181, 182, 183, 185, 188, 189, 190, 191, 192, 195,
	197, 198, 199, 200, 201, 202, 209, 212, 218, 219,
	220, 221, 222, 223, 224, 226, 227, 228, 229, 235,
	238, 244, 245, 254, 261, 265,
}
var yyPact = [...]int{

	2245, -1000, -260, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1309, 1354, -1000, -1000, -1000,
	-1000, -1000, -1000, 407, 559, -1000, -1000, -1000, 211, 39,
	15813, 208, 1823, 16543, -1000, 18, -1000, -1000, 160, 16543,
	-1000, -1000, -71, -73, -1000, 22, 1048, -1000, -1000, 69,
	-1000, -1000, -1000, -1000, -1000, -1000, 1272, 1305, 1111, 1283,
	1171, -1000, 7740, 165, 165, 15448, 18003, -1000, -1000, 454,
	16543, 203, 16543, -137, 155, 155, 86, 155, -1000, 436,
	-1000, -1000, -1000, 16543, 156, 16178, 156, 156, 156, 16543,
	-1000, 300, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 16543, 924, 1232, 4755, 193, 4755, 4755,
	-1000, 446, -1000, 4755, 85, 4755, -64, 495, 48, 10,
	-1000, 4755, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	154, 1048, 430, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1230, 1322, 728, 205, 16543, 362, -1000, 1249, 9212, 9212,
	1309, -1000, 1048, -1000, -1000, -1000, 1202, -1000, -1000, 512,
	1336, -1000, 11767, 297, -1000, 9212, 2244, 1063, -1000, -1000,
	1063, -1000, -1000, 229, -1000, -1000, 10307, 10307, 10307, 10307,
	10307, 10307, 10307, 10307, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1063, -1000,
	8847, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063,
	1063, 9212, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063,
	1063, 1063, 1063, 1063, 1063, 1063, 1063, 15076, 14346, 16543,
	987, 944, -1000, -1000, 290, 956, 17638, -108, -1000, -1000,
	-1000, 429, 13616, -1000, 287, -1000, 1216, -1000, 929, 16543,
	-1000, 1966, -1000, 16178, 1275, 157, 918, 473, 917, 914,
	16543, 911, 1059, 187, 16543, 1260, 1126, -1000, -1000, 16543,
	902, 900, -1000, 6645, -1000, 4755, 4755, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 155, 155, 4755, 4755, 16543, 4755, 16543, -1000,
	-1000, 16543, -1000, -1000, -1000, 4755, 4755, -1000, 1326, 441,
	-1000, -1000, -1000, -1000, 9212, -1000, 10307, 372, -1000, 1125,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 899, -1000, -1000,
	56, -1000, 988, -1000, -1000, 16543, 4755, 96, 129, 122,
	16543, -1000, 1347, 341, 617, 250, 1055, -1000, 606, 1272,
	728, 1171, 13251, 1136, -1000, -1000, -1000, 16543, -1000, 9212,
	9212, 810, -1000, 14711, -1000, -1000, 5511, 380, 10307, 601,
	487, 10307, 10307, 10307, 10307, 10307, 10307, 10307, 10307, 10307,
	10307, 10307, 10307, 10307, 10307, 10307, 550, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 897, -1000, 1048, 988, 988,
	314, 314, 314, 314, 314, 314, 314, 10672, 1267, 728,
	896, 609, 8847, 7740, 7740, 728, 9212, 9212, 8470, 8105,
	7740, 7740, 1267, 471, 609, 17273, -1000, -1000, 9942, -1000,
	-1000, -1000, -1000, -1000, 728, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 16178, 16178, 7740, 7740, 7740, 7740, 109, 16543,
	-1000, 1061, 1109, -1000, -1000, -1000, 1270, 12886, 11402, 109,
	969, 14346, 16543, -1000, -1000, 14346, 16543, 5133, 16908, 956,
	-108, 1007, -1000, -103, -82, 7010, 234, -1000, -1000, -1000,
	6267, -1000, 3999, 525, 942, -1000, -58, -1000, -1000, -1000,
	1077, -1000, 1077, 175, -11, 1077, 1077, 1077, 1077, 1077,
	-22, -22, -22, -22, -21, -1000, -1000, -1000, -1000, -1000,
	1093, 1092, -1000, 1077, 1077, 1077, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1090, 148, 1090, 1084, 1084, 1084,
	1084, 1108, -1000, 16543, 4755, 1257, 4755, 97, -1000, -1000,
	16543, 16543, 1052, -1000, 16543, 1049, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 891, 890, -1000, -1000, -1000, -1000,
	-1000, 445, -1000, -1000, 16543, 1269, 16543, 16543, 609, 522,
	-1000, 658, 16543, -1000, 1045, -1000, 427, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	188, -1000, 16543, 16543, 16543, 16543, 16543, 220, -1000, 1177,
	9212, 9212, 6267, 9212, -1000, -1000, -1000, 1249, -1000, 1267,
	1303, -1000, 1184, 1183, 7740, -1000, -1000, 380, 499, -1000,
	-1000, 750, -1000, -1000, -1000, -1000, 249, 1063, -1000, 2446,
	-1000, -1000, -1000, -1000, 601, 10307, 10307, 10307, 522, 2446,
	2421, 822, 2205, 314, 926, 926, 374, 374, 374, 374,
	374, 862, 862, -1000, -1000, -1000, 728, -1000, -1000, -1000,
	7740, -1000, 9212, -1000, 728, 889, -1000, 889, -1000, 665,
	766, 406, 1323, 889, 393, 1316, 889, 889, 889, 7740,
	503, -1000, 9212, 728, -1000, 1150, 1044, 1037, 889, 728,
	1011, 889, 889, 946, 1063, -1000, 16908, 14346, 14346, 14346,
	14346, 14346, -1000, 1160, 1158, -1000, 1157, 1141, 1165, 16543,
	-1000, 873, 12886, -1000, 1063, -1000, 12509, 277, 202, 199,
	198, -1000, -1000, 1314, 14346, 1002, -1000, 1002, -1000, 241,
	-1000, -1000, 1007, -108, -96, -1000, -1000, -1000, -1000, 609,
	-1000, 673, -1000, 240, 1006, 3621, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1091, 856, -1000, 1208, 316, 409, 733,
	1198, -1000, -1000, -1000, 580, -78, -1000, -1000, 632, -22,
	-22, 1077, 1077, 145, 1077, -1000, -22, -1000, -1000, -1000,
	234, 1215, 234, 234, 234, 234, -22, 657, 657, -1000,
	-1000, -1000, -1000, 613, -1000, 1090, -1000, -1000, 554, -1000,
	-1000, -1000, 1124, 16178, 1048, 1264, -1000, -1000, -1000, 1333,
	-1000, -1000, 173, -1000, 4755, 16543, 4755, 4755, 1314, 855,
	833, 441, 459, -194, -1000, -1000, -1000, 10307, -1000, -1000,
	56, 988, -1000, 773, 581, 428, 139, 139, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 108,
	1103, -1000, -1000, -1000, -1000, 26, 95, 1175, 609, 609,
	-1000, -1000, 16543, -1000, -1000, -1000, -1000, 1034, -1000, -1000,
	-1000, 4377, 7740, -1000, 522, 2446, 2406, -1000, 10307, -1000,
	728, 609, -1000, 7740, -1000, -1000, 320, 550, 320, 10307,
	10307, -1000, 10307, 10307, -1000, -152, -1000, 981, 440, -1000,
	9212, 727, -1000, -1000, 10307, 10307, -1000, -1000, -1000, -1000,
	1123, 16908, 1063, -1000, 12144, 16178, 1009, 1109, 1088, 1122,
	1285, -1000, -1000, -1000, -1000, 1156, -1000, 1147, -1000, -1000,
	-1000, -1000, 16178, 10307, 277, -1000, 1063, 1063, 1063, 1309,
	9212, 1002, -1000, -1000, 323, -1000, -1000, -120, -99, -1000,
	-1000, -1000, 5889, 3999, -1000, 3999, 16178, 126, -1000, 733,
	733, -1000, -1000, -1000, 1085, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 486, 10307, 1346, -1000, 1207, -1000, 1201, 653,
	-1000, -1000, 936, 234, 234, -22, -1000, -1000, 1077, -1000,
	234, -1000, 400, -1000, -1000, -1000, -1000, 234, 853, -1000,
	843, 1004, -1000, 841, 16543, -1000, -1000, -1000, 1121, -1000,
	-1000, -1000, 16543, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	459, -1000, 643, 9212, 10307, 2446, -1000, -1000, -1000, 670,
	-1000, 733, 304, -1000, -1000, -1000, 825, 1198, -1000, -1000,
	820, -1000, 817, 16178, 1196, 794, 16543, 16178, -1000, -1000,
	753, 790, 16178, -157, 787, 16178, 16178, 16178, -1000, -1000,
	1314, 14346, -1000, -1000, 728, -1000, 10307, 2446, -1000, -1000,
	728, 1077, 1077, -1000, 1077, 1084, -1000, 1077, 9, 1077,
	6, 728, 728, 2365, 2307, 2138, 1807, 1063, -145, -1000,
	609, 9212, 2008, 1763, -1000, 1235, 950, 982, -1000, -1000,
	7375, 728, 839, 232, 830, -1000, 1309, -1000, -1000, 9212,
	1078, -1000, 9212, -1000, -1000, -1000, 830, 838, -1000, 16178,
	16178, 16178, 1272, 609, -1000, -1000, -1000, -1000, 3621, -1000,
	816, -1000, 1077, -1000, -1000, -1000, 16178, -1000, 2446, -148,
	-1000, -1000, -1000, -1000, -1000, -1000, 234, -1000, -1000, -1000,
	-1000, -1000, -22, 642, -22, 542, -1000, 531, 1076, -1000,
	1048, 16543, -1000, -1000, -1000, 609, 2446, 753, 125, -1000,
	1108, 316, 126, -1000, -1000, -1000, -1000, 783, 269, -1000,
	171, 125, 753, 1245, -1000, 5889, -1000, -1000, 1074, 1110,
	-1000, 1306, 998, -1000, 2446, -1000, -1000, 134, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 10307, 10307, 10307, 10307,
	10307, 728, 638, 609, 10307, 10307, 1190, -1000, 1063, -1000,
	-1000, 1067, 16178, 16178, -1000, 16178, 1272, 609, 16178, 609,
	11037, -1000, 13981, 805, -1000, 805, 805, -1000, 228, 16178,
	1252, 780, -1000, -1000, 234, -1000, 234, 854, 806, 16178,
	-1000, 1297, 781, -1000, -1000, 739, 1073, 733, -1000, -1000,
	690, -1000, -1000, 16178, -1000, 125, 1063, 990, -1000, 416,
	16178, 16543, 1311, 1304, -1000, -1000, 1150, 1150, 1150, 1150,
	123, -1000, -1000, 1150, 1150, 1344, -1000, 1063, -1000, 1048,
	227, -1000, -1000, -1000, 760, -1000, 277, 16178, -1000, -1000,
	-1000, 228, -1000, 686, 401, 618, -1000, -1000, 121, -1000,
	-1000, -1000, -1000, 757, -1000, 43, -1000, -1000, -1000, 16178,
	1108, -1000, -1000, -1000, -1000, 106, 5889, 3999, 746, -1000,
	-1000, 9212, 9212, -1000, -1000, -1000, -1000, 728, 107, -160,
	-1000, -1000, 16908, 982, 728, 16178, -1000, -1000, -1000, -1000,
	-1000, 528, -1000, -1000, 16543, 228, 41, -1000, 707, 1065,
	-1000, 703, -1000, 16178, -1000, -1000, 1103, 609, 980, -1000,
	1169, -155, -173, 956, -1000, -1000, -1000, 1064, -1000, 228,
	73, 228, 16178, -1000, 106, 1182, -157, -1000, 1153, -1000,
	16178, -1000, 676, 583, -1000, 698, -1000, 103, -1000, -158,
	695, 142, -1000, -1000, 228, 100, -162, 1120, -1000, -1000,
	-1000, -1000, -1000, -1000, 420, -1000, 1063, -174, 1118, 1117,
	1335, -1000, -264, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 9212, 9212, 9577, -1000, -1000, 1337, -1000,
	1341, 425, 425, 521, 719, 656, 1150, 728, -1000, -1000,
	-1000, 135, 573, -1000, -1000, -1000, 567, -1000, 9212, 420,
	-1000, -1000, -1000, -1000, -1000, 455, 420, -1000, 614, -265,
	-1000, -268, 420, 176, 510, -272, 153, 420, 479, -1000,
	9212, 447, 420, -1000, -274, 151, 420, -1000, 571, -1000,
	469, -1000, -275, 420, 147, 353, -276, -1000, 144, 420,
	-1000,
}
var yyPgo = [...]int{

	0, 1590, 112, 571, 1589, 1588, 1586, 21, 16, 14,
	23, 1585, 1584, 1583, 1579, 1577, 1576, 10, 2, 1575,
	1573, 1373, 19, 1571, 4, 1566, 3, 68, 1565, 1556,
	1555, 1553, 1552, 1549, 1548, 1547, 1546, 1542, 1538, 1537,
	1535, 1532, 1531, 1530, 1528, 1525, 1524, 1523, 1521, 124,
	1520, 1519, 1518, 88, 1517, 91, 1515, 1514, 1513, 66,
	129, 74, 65, 87, 1511, 1510, 54, 79, 121, 1505,
	63, 1504, 1503, 97, 1501, 1500, 1498, 90, 1495, 1494,
	1958, 1493, 85, 1492, 40, 33, 106, 1488, 1486, 1485,
	1484, 99, 422, 1483, 1482, 1481, 45, 1480, 1479, 117,
	1477, 81, 28, 34, 35, 42, 1476, 147, 110, 1473,
	72, 1471, 1468, 1467, 1466, 77, 1465, 36, 1464, 80,
	13, 38, 47, 82, 1463, 7, 93, 62, 50, 31,
	83, 1462, 86, 76, 1461, 1459, 707, 1458, 1456, 71,
	1455, 1453, 60, 1452, 573, 92, 56, 1450, 1449, 1446,
	1444, 46, 59, 1443, 1442, 43, 1545, 100, 20, 1393,
	26, 89, 1440, 30, 1438, 2053, 104, 39, 58, 1436,
	1435, 55, 1433, 1429, 1428, 1427, 1426, 1425, 1424, 1423,
	951, 1422, 1421, 1420, 84, 122, 1416, 1415, 78, 51,
	1414, 1413, 1412, 73, 49, 1411, 75, 44, 1409, 1408,
	1407, 1405, 48, 1404, 1402, 1400, 1399, 1398, 52, 29,
	1395, 37, 18, 27, 41, 8, 53, 1394, 9, 1389,
	32, 1388, 12, 1381, 25, 67, 5, 6, 11, 1380,
	1377, 1376, 0, 326, 102, 1365, 1362, 105,
}
var yyR1 = [...]int{

	0, 230, 231, 231, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	6, 3, 4, 4, 5, 5, 7, 7, 52, 52,
	8, 9, 9, 9, 9, 234, 234, 75, 75, 73,
	73, 74, 74, 126, 126, 10, 10, 10, 10, 130,
	130, 133, 133, 133, 134, 134, 134, 134, 169, 169,
	120, 12, 12, 12, 12, 12, 12, 12, 12, 154,
	154, 31, 31, 32, 32, 32, 118, 118, 118, 11,
	11, 11, 11, 11, 17, 19, 19, 23, 23, 24,
	20, 20, 20, 20, 25, 25, 26, 21, 21, 30,
	30, 28, 28, 27, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 22, 22, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 224, 224, 223,
	222, 222, 221, 221, 220, 37, 204, 206, 206, 205,
	205, 205, 205, 194, 173, 173, 173, 173, 173, 173,
	173, 172, 172, 172, 172, 176, 176, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 175, 175, 175, 175,
	175, 175, 175, 175, 177, 177, 177, 177, 177, 178,
	178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
	178, 178, 178, 178, 179, 179, 179, 179, 179, 179,
	179, 179, 193, 193, 180, 180, 188, 188, 189, 189,
	189, 186, 186, 187, 187, 190, 190, 182, 183, 191,
	184, 184, 184, 185, 185, 185, 192, 192, 192, 192,
	181, 195, 195, 215, 215, 214, 214, 213, 213, 213,
	203, 203, 210, 210, 210, 210, 210, 198, 198, 198,
	197, 197, 199, 199, 202, 202, 212, 212, 211, 196,
	196, 216, 216, 216, 216, 216, 200, 200, 201, 201,
	201, 227, 228, 226, 226, 226, 226, 226, 207, 207,
	207, 208, 208, 208, 209, 209, 209, 229, 229, 33,
	33, 33, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	117, 117, 117, 35, 36, 36, 36, 36, 36, 36,
	36, 36, 152, 152, 225, 225, 225, 225, 225, 219,
	217, 217, 218, 218, 13, 38, 38, 14, 14, 14,
	14, 14, 15, 15, 39, 40, 40, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 40, 40, 40, 40, 64, 140, 140, 138, 138,
	141, 141, 139, 139, 139, 142, 142, 142, 143, 143,
	170, 170, 170, 41, 41, 46, 46, 47, 48, 153,
	153, 44, 44, 45, 45, 45, 45, 58, 58, 235,
	235, 43, 43, 42, 42, 42, 42, 16, 236, 49,
	50, 50, 51, 51, 51, 55, 55, 55, 53, 53,
	53, 54, 54, 61, 61, 60, 60, 62, 62, 62,
	62, 162, 162, 162, 161, 161, 65, 65, 66, 66,
	67, 67, 68, 68, 68, 68, 83, 83, 84, 84,
	84, 84, 84, 94, 94, 125, 125, 127, 127, 69,
	69, 69, 69, 70, 70, 71, 71, 72, 72, 151,
	151, 167, 167, 76, 76, 76, 78, 77, 77, 77,
	77, 79, 79, 81, 81, 80, 80, 82, 85, 85,
	85, 85, 86, 86, 63, 63, 63, 63, 63, 63,
	63, 137, 137, 88, 88, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 100, 100, 100, 100, 100,
	100, 89, 89, 89, 89, 89, 89, 89, 59, 59,
	101, 101, 101, 107, 102, 102, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 97, 97,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 96, 96, 96, 96, 96,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 237, 237, 99, 98, 98, 98, 98, 98, 98,
	56, 56, 56, 56, 56, 168, 168, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	111, 111, 57, 57, 109, 109, 110, 112, 112, 108,
	108, 108, 91, 91, 91, 91, 91, 91, 91, 91,
	93, 93, 93, 113, 113, 114, 114, 115, 115, 116,
	116, 119, 121, 121, 121, 122, 122, 122, 122, 123,
	123, 123, 90, 90, 90, 90, 90, 90, 124, 124,
	124, 124, 128, 128, 103, 103, 105, 105, 104, 106,
	129, 129, 132, 132, 132, 132, 131, 131, 131, 164,
	164, 164, 135, 135, 144, 144, 145, 145, 136, 136,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	150, 150, 149, 149, 149, 146, 146, 146, 147, 147,
	163, 163, 159, 159, 160, 160, 165, 165, 166, 166,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 232,
	233, 155, 156, 156, 156,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 4, 6, 7,
	5, 10, 1, 3, 1, 3, 7, 8, 1, 1,
	9, 8, 7, 6, 6, 1, 1, 1, 3, 1,
	3, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	0, 2, 2, 11, 7, 9, 5, 5, 15, 0,
	3, 1, 1, 1, 1, 1, 0, 2, 2, 1,
	1, 1, 1, 1, 4, 5, 8, 1, 2, 5,
	7, 10, 8, 11, 1, 2, 5, 2, 4, 2,
	3, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	0, 2, 1, 3, 3, 4, 4, 2, 4, 1,
	3, 3, 3, 3, 0, 2, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 3, 2,
	2, 2, 2, 2, 1, 2, 2, 2, 1, 4,
	4, 3, 3, 2, 4, 5, 2, 3, 4, 2,
	2, 3, 3, 3, 3, 3, 4, 1, 1, 1,
	1, 1, 6, 6, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 3, 0, 5, 0, 3,
	5, 0, 1, 0, 1, 1, 2, 2, 3, 1,
	0, 3, 3, 0, 2, 2, 2, 1, 2, 1,
	2, 5, 4, 0, 1, 1, 2, 2, 3, 2,
	0, 1, 2, 3, 3, 2, 2, 1, 1, 1,
	1, 1, 0, 1, 0, 1, 1, 3, 3, 3,
	1, 10, 11, 11, 12, 12, 1, 1, 0, 2,
	2, 3, 3, 1, 1, 2, 2, 2, 0, 1,
	3, 1, 2, 3, 1, 1, 1, 0, 2, 1,
	1, 1, 6, 10, 9, 7, 7, 7, 9, 7,
	12, 14, 7, 7, 9, 9, 10, 5, 6, 8,
	0, 1, 2, 4, 7, 5, 5, 5, 12, 7,
	5, 9, 0, 1, 1, 1, 1, 1, 1, 7,
	1, 3, 8, 8, 3, 3, 5, 4, 6, 4,
	4, 4, 3, 2, 3, 4, 4, 3, 6, 6,
	4, 4, 4, 4, 4, 3, 3, 2, 6, 2,
	3, 4, 3, 7, 6, 4, 2, 4, 3, 4,
	3, 3, 5, 2, 3, 3, 1, 1, 0, 1,
	1, 1, 0, 2, 2, 0, 2, 2, 0, 2,
	0, 1, 1, 2, 1, 1, 2, 1, 1, 1,
	1, 3, 3, 1, 1, 1, 1, 0, 3, 1,
	1, 2, 2, 2, 2, 3, 3, 2, 0, 2,
	0, 2, 1, 2, 2, 0, 1, 1, 0, 1,
	1, 0, 1, 0, 1, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 1, 0, 2, 1, 3,
	1, 1, 1, 3, 1, 3, 2, 6, 1, 4,
	6, 3, 2, 0, 3, 1, 3, 1, 3, 4,
	4, 4, 3, 2, 4, 0, 1, 0, 2, 0,
	1, 1, 1, 1, 2, 2, 1, 2, 3, 2,
	3, 2, 2, 2, 1, 1, 3, 3, 0, 5,
	5, 5, 0, 2, 1, 3, 3, 2, 3, 1,
	2, 0, 3, 1, 1, 3, 3, 4, 4, 5,
	3, 4, 5, 6, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 2, 2,
	2, 2, 2, 3, 1, 1, 1, 1, 5, 6,
	4, 4, 3, 6, 6, 6, 8, 8, 8, 8,
	9, 4, 7, 5, 4, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 8,
	8, 0, 2, 3, 4, 4, 4, 4, 4, 4,
	0, 3, 4, 7, 3, 1, 1, 2, 3, 3,
	1, 2, 2, 1, 2, 1, 2, 2, 1, 2,
	0, 1, 0, 2, 1, 2, 4, 0, 2, 1,
	3, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 0, 3, 0, 2, 0, 3, 1,
	3, 2, 0, 1, 1, 0, 2, 4, 4, 0,
	2, 4, 2, 1, 3, 5, 4, 6, 1, 3,
	3, 5, 0, 5, 1, 3, 1, 2, 3, 1,
	1, 3, 3, 3, 3, 3, 1, 2, 1, 1,
	1, 1, 1, 1, 0, 2, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 1, 0, 1,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -230, -1, -2, -6, -7, -8, -9, -10, -12,
	-33, -13, -14, -15, -39, -40, -41, -46, -47, -48,
	-44, -43, -42, -16, -21, -3, -4, 6, 7, -52,
	9, 10, 29, -37, 118, -34, -35, -36, 121, 120,
	157, 122, 150, 52, 192, 193, 195, 196, -235, -153,
	155, 156, 30, 31, 124, 190, -232, 8, 285, 119,
	152, 151, 25, 56, -231, 383, -115, 15, -51, 5,
	-49, -236, -49, -49, -49, -49, -49, -204, -206, 56,
	93, -147, 131, 74, 277, 127, -154, 128, -146, 177,
	33, 138, 137, 128, 128, 129, 131, 277, 127, 128,
	-80, -165, 59, -158, 295, 141, 327, 328, 192, 203,
	197, 231, 219, 296, 329, 142, 217, 220, 264, 140,
	330, 251, 259, 68, 195, 273, 331, 153, 215, 208,
	332, 304, 206, 27, 333, 261, 236, 334, 300, 207,
	260, 124, 335, 144, 138, 336, 237, 241, 337, 265,
	338, 339, 340, 201, 202, 341, 267, 235, 139, 32,
	297, 37, 162, 268, 239, 342, 234, 229, 343, 344,
	345, 346, 233, 200, 228, 41, 243, 242, 244, 263,
	222, 347, 348, 349, 145, 350, 209, 18, 351, 352,
	353, 354, 355, 271, 156, 356, 160, 357, 358, 359,
	360, 361, 362, 262, 238, 240, 135, 164, 299, 363,
	269, 205, 364, 146, 161, 155, 272, 147, 365, 366,
	367, 368, 369, 370, 371, 196, 372, 373, 374, 375,
	171, 266, 275, 40, 248, 376, 199, 137, 377, 193,
	168, 254, 226, 163, 378, 379, 213, 214, 232, 198,
	227, 194, 165, 157, 380, 274, 249, 301, 221, 218,
	169, 381, 131, 166, 167, 382, 255, 256, 170, 298,
	270, 216, 250, 128, 111, 220, 264, 118, 252, 253,
	261, -198, 262, 164, -170, 128, -138, 251, 255, 256,
	170, 59, 129, 130, 32, 266, 265, 257, -165, 194,
	-58, 122, 158, -80, -155, -155, -155, 254, 254, -155,
	-30, 191, -2, -136, 131, 256, 133, -122, 17, 16,
	-5, -3, -232, 6, 20, 21, -55, 42, 43, -50,
	-62, 102, -63, -165, -87, 76, -92, 28, 59, -158,
	23, -91, -88, -108, -106, -107, 111, 112, 113, 100,
	101, 108, 77, 114, -97, -95, -96, -98, 61, 60,
	69, 62, 63, 64, 65, 70, 71, 72, -159, -104,
	-232, 46, 47, 127, 286, 287, 288, 289, 294, 148,
	290, 79, 36, 276, 284, 283, 282, 280, 281, 278,
	279, 292, 293, 134, 277, 106, 285, -136, -136, 11,
	-73, -74, -80, -82, -165, -129, -169, 194, -132, 266,
	265, -108, -131, -159, -165, 264, 220, 263, -205, 93,
	-194, 59, -80, 129, -80, 285, -145, 134, -145, 165,
	-145, 85, -38, -80, -144, 134, -159, 59, -158, -144,
	-144, -144, -80, 115, -80, 59, 29, -156, -232, -160,
	-159, -157, 123, 149, 302, 75, 22, 24, 246, 78,
	111, 16, 79, 110, 286, 118, 50, 303, 278, 279,
	276, 288, 289, 277, 252, 28, 10, 305, 25, 151,
	21, 104, 120, 82, 83, 84, 154, 23, 152, 72,
	148, 308, 19, 53, 11, 13, 309, 310, 14, 134,
	133, 95, 129, 48, 8, 114, 26, 92, 44, 311,
	34, 312, 313, 314, 315, 46, 93, 17, 280, 281,
	30, 316, 294, 159, 106, 51, 38, 76, 317, 318,
	70, 319, 73, 54, 74, 15, 49, 320, 321, 322,
	323, 94, 121, 285, 47, 324, 127, 6, 291, 29,
	150, 45, 325, 128, 81, 292, 293, 132, 71, 5,
	33, 31, 9, 52, 55, 282, 283, 284, 36, 80,
	12, 326, 277, 127, 59, 164, 128, 165, 131, -156,
	-156, -200, 11, 95, -156, 168, 169, -156, -141, -140,
	259, 260, 254, 258, 12, -64, 93, 169, 254, 167,
	-156, -45, -2, -9, -7, -8, -2, 85, -155, -155,
	29, -91, 39, -233, 58, 128, -80, 118, 120, 123,
	54, -123, 19, 30, -63, -165, -116, -119, -63, -115,
	-2, -49, 38, -53, 20, 21, 67, 11, -162, 75,
	74, 92, -161, 22, -159, 61, 115, -63, -89, 95,
	76, 93, 94, 78, 97, 96, 107, 100, 101, 102,
	103, 104, 105, 106, 98, 99, 110, 85, 86, 87,
	88, 89, 90, 91, -137, -232, -107, -232, 116, 117,
	-92, -92, -92, -92, -92, -92, -92, -92, -232, -2,
	-102, -63, -232, -232, -232, -232, -232, -232, -232, -232,
	-232, -232, -232, -111, -63, -232, -237, -99, -232, -237,
	-99, -237, -99, -237, -232, -237, -99, -237, -99, -237,
	-237, -99, -232, -232, -232, -232, -232, -232, -81, 26,
	-80, -66, -67, -68, -69, -83, -107, -232, -80, -80,
	-73, -234, 57, 11, 55, -234, 57, 115, 57, -129,
	194, -130, -133, 267, 269, 85, -164, -159, 61, 28,
	115, 29, 58, 57, -80, -172, -176, -178, -177, -179,
	-174, -175, 217, 220, 224, 222, 218, 223, 111, 221,
	226, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	236, 29, 153, 213, 214, 215, 216, 237, 238, 239,
	240, 241, 242, 243, 244, 197, 219, 296, 198, 199,
	200, 201, 202, 203, 205, 206, 207, 208, 209, 210,
	211, -159, 22, 131, 59, 76, 59, 59, -80, 59,
	57, 132, -73, 23, 54, -75, -80, 59, 59, -166,
	-165, -157, -156, -156, -145, -145, -156, -156, -80, -156,
	-80, -80, -156, -156, 11, -139, 11, 95, -63, -92,
	-143, 93, 54, 59, -28, -27, -29, 178, 179, 180,
	181, 182, 183, 184, 185, 186, 187, 188, 189, -91,
	-80, -156, 166, 166, 128, 128, 171, -80, 9, 95,
	57, 18, 115, 57, -121, 24, 25, -122, -233, -55,
	-93, -159, 62, 65, -54, 45, -80, -63, -63, -100,
	70, 76, 71, 72, -161, 102, -166, -160, -157, -92,
	-101, -104, -107, 66, 95, 93, 94, 78, -92, -92,
	-92, -92, -92, -92, -92, -92, -92, -92, -92, -92,
	-92, -92, -92, -168, 59, 61, 59, -91, -91, -159,
	-53, -233, 57, -233, -2, -60, -62, -60, -233, -63,
	-63, -108, 61, -60, -108, 61, -60, -60, -60, -53,
	-109, -110, 80, -108, -233, -92, -159, -159, -60, -61,
	-60, -60, -60, -126, 160, -80, 29, 57, -76, -78,
	-77, -79, 44, 48, 50, 45, 46, 47, 51, -151,
	22, -66, -232, -84, 160, -85, 22, -167, 52, 133,
	53, -165, 61, -126, 55, -66, -80, -66, -82, -165,
	102, -132, -130, 57, 268, 270, 271, 54, 73, -63,
	-185, 110, -160, -166, -207, -208, -209, -160, 61, 62,
	-194, -195, -196, -210, 143, -216, 135, 137, 33, -197,
	144, 129, 34, 58, -173, -186, 249, -180, 56, -180,
	-180, 225, 217, 220, 218, -180, -180, -180, -180, -180,
	-184, 220, -184, -184, -184, -184, 218, 56, 56, -180,
	-180, -180, -188, 56, -188, 212, -188, -189, 56, -189,
	-189, -189, -163, 55, -120, -80, -156, 23, -156, -31,
	174, 149, -80, -80, -80, 57, 59, 59, -201, 11,
	95, -80, -94, 22, -165, -165, -59, 154, 61, -80,
	57, 85, -148, 123, 120, 121, 125, 126, -219, 119,
	246, 220, 68, 28, 15, 286, 160, 301, 59, 161,
	-80, -80, -80, -80, -80, 123, 120, 40, -63, -63,
	-119, -123, -135, 19, 11, 36, 36, -60, 70, 71,
	72, 115, -232, -101, -92, -92, -92, -59, 75, -233,
	-61, -63, -233, 57, -233, -233, 57, 55, 22, 11,
	11, -233, 11, 11, -233, -233, -233, -60, -112, -110,
	82, -63, -233, -233, 57, 57, -233, -233, -233, -233,
	-90, 29, 36, -2, -232, -232, -129, -67, -68, -68,
	-67, -68, 44, 44, 44, 49, 44, 49, 44, -77,
	-165, -233, -232, 319, -167, -85, 129, 129, 129, -86,
	12, -66, -86, -86, 115, -133, -134, 272, 269, 275,
	59, 61, 115, 57, -209, 85, 56, 59, 34, -197,
	-197, -202, 59, -202, 34, -190, -182, -183, -191, -192,
	-181, 70, 76, 28, 54, 246, 135, 34, 33, 68,
	-187, 250, 62, -184, -184, -180, -180, -180, 225, -180,
	-184, -185, 29, -185, -185, -185, -185, -184, -193, 61,
	-193, 62, -188, 62, 54, -159, -2, 22, -32, 8,
	9, 10, 132, -156, -80, -156, -156, -86, 59, 59,
	-139, -142, 93, 12, 319, -92, -27, -91, -155, -152,
	-225, -197, -229, -196, 136, 140, 143, 144, 135, 160,
	-152, -225, 143, -197, 144, 136, -149, -197, 132, 22,
	-152, -152, 160, -224, 55, 166, 246, 166, 41, -80,
	-65, 11, 102, -160, -61, -59, 75, -92, -233, -62,
	-171, 111, 217, 153, 215, 208, 235, 222, 248, 213,
	249, -168, -171, -92, -92, -92, -92, 295, -115, 84,
	-63, 81, -92, -92, -128, 54, -129, -103, -105, -104,
	-232, -2, -124, -159, -127, -159, -86, -71, -70, 54,
	55, -72, 54, -70, 44, 44, -127, -92, -85, -232,
	-232, -232, -115, -63, -86, 269, 273, 274, -208, -209,
	-212, -211, -159, -216, -202, -202, 56, 70, -92, 9,
	34, 34, 61, 58, -185, -185, -184, -180, -185, 59,
	111, -185, 58, 57, 58, 57, 58, 57, -80, -120,
	-120, 54, -80, -142, 61, -63, -92, 56, -194, -155,
	-202, -146, 59, 59, -155, 59, -159, 34, 59, -80,
	-159, -194, 59, -159, -222, 298, -223, 59, -159, -159,
	-159, -86, -66, -233, -92, -233, -180, -180, -180, -189,
	-180, 202, -180, 202, -233, -233, 19, 19, 19, 19,
	-232, -57, 291, -63, 57, 57, 27, -128, 57, -233,
	-233, -233, 57, 115, -233, 57, -115, -63, 56, -63,
	-233, -85, -151, -125, -159, -125, -125, -122, 58, 57,
	-180, -125, -96, -185, -184, 61, -184, 62, 62, 56,
	-2, -80, -194, -117, 148, 149, -163, -199, -197, 59,
	-150, 132, 22, 132, -117, -194, 26, -221, -220, -160,
	56, 55, -113, 13, -184, 59, -92, -92, -92, -92,
	-92, -233, 61, -92, -92, 34, -105, 36, -2, -232,
	-159, -159, -159, -122, -125, -84, -167, 57, -233, -233,
	-233, -214, -213, 55, 139, 68, -211, -121, 58, -185,
	-185, 58, 58, -212, -120, 19, 58, -155, 59, 56,
	-202, 59, -159, -155, -117, -232, 57, 85, -125, -80,
	-114, 14, 16, -233, -233, -233, -233, -56, 95, 298,
	-233, -233, 9, -103, -2, 115, 58, -85, -159, -213,
	59, -203, 85, 61, 146, 58, 172, -155, -212, -163,
	-155, -217, -218, 160, -220, -209, 58, -63, -102, -233,
	296, 51, 299, -129, -233, -159, 62, -80, -215, -214,
	173, 58, 56, -233, 57, -159, -224, 41, 297, 300,
	56, -118, 175, 176, -215, -212, -218, 36, -222, 41,
	-125, -120, 59, 59, 58, 162, 298, 58, -11, -17,
	-10, -7, -8, -9, 192, -215, 163, 299, -227, -228,
	54, -120, -22, -18, -2, -7, -8, -9, -10, -19,
	-20, -21, -17, 79, 134, -232, 300, -228, 54, -227,
	54, 10, 9, 383, -63, -63, -92, 159, -226, 147,
	142, 145, 29, -226, 84, -18, -23, -24, 80, 81,
	-233, -233, 141, 28, 70, 84, 82, -24, -63, -22,
	79, -22, 81, 383, 383, -22, 84, 82, -25, -26,
	83, 84, 383, 134, -22, 84, 82, -26, -63, 79,
	383, 134, -22, 81, 84, 383, -22, 134, 84, 383,
	134,
}
var yyDef = [...]int{

	26, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 687, 0, 438, 438, 438,
	438, 438, 438, 0, -2, 309, 310, 311, 0, 0,
	0, 0, -2, 414, 415, 0, 417, 418, 427, -2,
	1061, 1061, 0, 0, 1061, 0, 0, 38, 39, 738,
	430, 419, 420, 1059, 1, 3, 695, 0, 0, 442,
	445, 440, 0, 738, 738, 0, 0, 71, 72, 0,
	0, 0, 0, 0, 736, 736, 0, 736, 759, 0,
	755, 756, 757, 0, 734, 0, 734, 734, 734, 0,
	363, 515, 766, 767, 890, 891, 892, 893, 894, 895,
	896, 897, 898, 899, 900, 901, 902, 903, 904, 905,
	906, 907, 908, 909, 910, 911, 912, 913, 914, 915,
	916, 917, 918, 919, 920, 921, 922, 923, 924, 925,
	926, 927, 928, 929, 930, 931, 932, 933, 934, 935,
	936, 937, 938, 939, 940, 941, 942, 943, 944, 945,
	946, 947, 948, 949, 950, 951, 952, 953, 954, 955,
	956, 957, 958, 959, 960, 961, 962, 963, 964, 965,
	966, 967, 968, 969, 970, 971, 972, 973, 974, 975,
	976, 977, 978, 979, 980, 981, 982, 983, 984, 985,
	986, 987, 988, 989, 990, 991, 992, 993, 994, 995,
	996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005,
	1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015,
	1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025,
	1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035,
	1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045,
	1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055,
	1056, 1057, 1058, 0, 0, 0, 1062, 0, 1062, 1062,
	377, 0, 379, 1062, 0, 1062, 0, 386, 0, 0,
	393, 1062, 267, 268, 269, 411, 412, 399, 413, 416,
	0, 0, 0, 431, 432, 433, 434, 1061, 1061, 437,
	107, 0, 32, 0, 0, 0, 739, 699, 0, 0,
	687, 34, 0, 438, 443, 444, 448, 446, 447, 439,
	0, 457, 461, 0, 524, 0, 529, 531, -2, -2,
	0, 566, 567, 568, 569, 570, 0, 0, 0, 0,
	0, 0, 0, 0, 594, 595, 596, 597, 672, 673,
	674, 675, 676, 677, 678, 679, 533, 534, 669, 719,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 660, 0, 631, 631, 631, 631, 631, 631, 631,
	631, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 49, 51, 515, 55, 0, 1037, 720, -2,
	-2, 0, 0, 669, 0, -2, 903, -2, 0, 0,
	149, 0, 147, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 354, 0, 0, 0, 0, 762, 763, 0,
	0, 0, 362, 0, 364, 1062, 1062, 367, 1063, 1064,
	764, 765, 770, 771, 772, 773, 774, 775, 776, 777,
	778, 779, 780, 781, 782, 783, 784, 785, 786, 787,
	788, 789, 790, 791, 792, 793, 794, 795, 796, 797,
	798, 799, 800, 801, 802, 803, 804, 805, 806, 807,
	808, 809, 810, 811, 812, 813, 814, 815, 816, 817,
	818, 819, 820, 821, 822, 823, 824, 825, 826, 827,
	828, 829, 830, 831, 832, 833, 834, 835, 836, 837,
	838, 839, 840, 841, 842, 843, 844, 845, 846, 847,
	848, 849, 850, 851, 852, 853, 854, 855, 856, 857,
	858, 859, 860, 861, 862, 863, 864, 865, 866, 867,
	868, 869, 870, 871, 872, 873, 874, 875, 876, 877,
	878, 879, 880, 881, 882, 883, 884, 885, 886, 887,
	888, 889, 736, 736, 1062, 1062, 0, 1062, 0, 375,
	376, 0, 286, 287, 380, 1062, 1062, 382, 0, 402,
	400, 401, 396, 397, 0, 388, 0, 408, 390, 391,
	394, 421, -2, 424, 425, 426, -2, 0, 435, 436,
	0, 109, 0, 33, 1060, 0, 1062, 0, 0, 0,
	0, 27, 0, 0, 696, 0, 688, 689, 692, 695,
	32, 445, 0, 451, 449, 450, 441, 0, 458, 0,
	0, 0, 462, 0, 464, 465, 0, 527, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 551, 552, 553,
	554, 555, 556, 557, 530, 0, 544, 0, 0, 0,
	586, 587, 588, 589, 590, 591, 592, 0, 448, 32,
	0, 564, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 448, 0, 661, 0, 615, 623, 0, 616,
	624, 617, 625, 618, 0, 619, 626, 620, 627, 621,
	622, 628, 0, 0, 0, 453, 0, 0, 53, 0,
	514, 0, 468, 470, 471, 472, -2, 0, 518, -2,
	0, 0, 0, 45, 46, 0, 0, 0, 0, 56,
	1037, 58, 59, 0, 0, 0, 243, 729, 730, 731,
	0, 727, 298, 0, 0, 154, 231, 162, 163, 164,
	224, 166, 224, 224, 0, 224, 224, 224, 224, 224,
	240, 240, 240, 240, 240, 207, 208, 209, 210, 211,
	0, 0, 184, 224, 224, 224, 188, 214, 215, 216,
	217, 218, 219, 220, 221, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 226, 226, 226, 228, 228, 228,
	228, 760, 70, 0, 1062, 0, 1062, 0, 145, 80,
	0, 0, 357, 735, 0, 359, 47, 360, 361, 516,
	768, 769, 365, 366, 0, 0, 370, 371, 372, 373,
	374, 288, 381, 385, 0, 483, 0, 0, 387, 558,
	389, 0, 0, 428, 108, 111, 0, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 125, 110,
	0, 333, 0, 0, 0, 0, 0, 0, 700, 0,
	0, 0, 0, 0, 691, 693, 694, 699, 35, 448,
	0, 680, 0, 0, 0, 452, 30, 525, 526, 528,
	545, 0, 547, 549, 463, 459, 0, 670, -2, 535,
	536, 560, 561, 562, 0, 0, 0, 0, 558, 540,
	0, 571, 572, 573, 574, 575, 576, 577, 578, 579,
	580, 581, 582, 585, 645, 646, 0, 583, 584, 593,
	453, 563, 0, 718, 32, 0, 455, 0, 602, 0,
	0, 568, 672, 0, 568, 672, 0, 0, 0, 0,
	667, 664, 0, 0, 632, 0, 0, 0, 0, 0,
	454, 0, 0, 0, 0, 513, 0, 0, 0, 0,
	0, 0, 503, 0, 0, 506, 0, 0, 0, 0,
	500, 0, 0, 476, 982, 478, 0, 518, 0, 0,
	0, 501, 502, 522, 0, 522, 50, 522, 52, 0,
	517, 721, 57, 0, 0, 62, 63, 722, 723, 724,
	725, 0, 670, 0, 146, 299, 301, 304, 305, 306,
	150, 151, 152, 0, 0, 280, 0, 0, 274, 274,
	0, 270, 271, 148, 153, 233, 232, 165, 0, 240,
	240, 224, 224, 224, 224, 193, 240, 196, 199, 200,
	243, 0, 243, 243, 243, 243, 240, 0, 0, 185,
	186, 187, 176, 0, 177, 226, 179, 180, 0, 181,
	182, 183, 0, 0, 0, 0, 76, 737, 77, 0,
	81, 82, 0, 355, 1062, 0, 1062, 1062, 522, 0,
	0, 402, 405, 0, 403, 404, 395, 0, 409, 392,
	0, 0, 1061, -2, 342, 752, 342, 342, 327, 740,
	741, 742, 743, 744, 745, 746, 747, 748, 749, 0,
	137, 335, 337, 336, 340, 0, 0, 0, 697, 698,
	690, 28, 0, 732, 733, 681, 682, 466, 546, 548,
	550, 0, 453, 537, 558, 541, 0, 538, 0, 532,
	0, 565, -2, 0, 600, 601, 0, 0, 0, 0,
	0, 638, 0, 0, 639, 0, 611, 687, 0, 665,
	0, 0, 614, 633, 0, 0, 634, 635, 636, 637,
	712, 0, 0, -2, 0, 0, 522, 469, 495, 497,
	0, 492, 504, 505, 507, 0, 509, 0, 511, 512,
	473, 475, 0, 0, 518, 482, 0, 0, 0, 687,
	0, 522, 43, 44, 0, 60, 61, 0, 0, 67,
	244, 245, 0, 0, 302, 0, 0, 0, 262, 274,
	274, 265, 275, 266, 0, 155, 156, 157, 158, 159,
	160, 235, 0, 0, 0, 239, 0, 247, 249, 0,
	161, 234, 0, 243, 243, 240, 191, 192, 224, 197,
	243, 201, 0, 202, 203, 204, 205, 243, 0, 222,
	0, 0, 178, 0, 0, 761, -2, 70, 0, 83,
	84, 85, 0, 358, 48, 368, 369, 378, 289, 290,
	405, 384, 0, 0, 0, 559, 112, 113, 312, 0,
	1061, 274, 0, 328, 343, 344, 345, 346, 347, 348,
	0, 1061, 345, 0, 346, 0, 0, 0, 753, 754,
	0, 0, 0, 140, 0, 0, 0, 0, 701, 29,
	522, 0, 460, 671, 0, 539, 0, 542, 598, 456,
	0, 224, 224, 650, 224, 228, 653, 224, 655, 224,
	658, 0, 0, 0, 0, 0, 0, 0, 662, 613,
	668, 0, 0, 0, 36, 0, 712, 702, 714, 716,
	0, 32, 0, 708, 0, 487, 687, 489, 496, 0,
	0, 490, 0, 491, 508, 510, 0, -2, 481, 0,
	0, 0, 695, 523, 42, 64, 65, 66, 300, 303,
	0, 276, 224, 279, 263, 264, 0, 236, 237, 0,
	246, 248, 250, 225, 189, 190, 243, 198, 194, 241,
	242, 206, 240, 0, 240, 0, 229, 0, 0, 74,
	0, 0, 356, 383, 406, 407, 484, 0, 330, 315,
	760, 272, 308, 316, 317, 322, 323, 0, 0, 319,
	0, 330, 0, 0, 334, 0, 138, 139, 0, 0,
	339, 683, 467, 599, 543, 603, 647, 240, 651, 652,
	654, 656, 657, 659, 605, 604, 0, 0, 0, 0,
	0, 0, 0, 666, 0, 0, 0, 37, 0, 717,
	-2, 0, 0, 0, 54, 0, 695, 493, 0, 498,
	518, 479, 0, 0, 485, 0, 0, 41, 252, 0,
	692, 0, 238, 195, 243, 223, 243, 0, 0, 0,
	-2, 0, 0, 1061, 331, 0, 0, 274, 273, 329,
	0, 750, 751, 0, 1061, 330, 0, 141, 142, 0,
	0, 0, 685, 0, 648, 649, 0, 0, 0, 0,
	640, 612, 663, 0, 0, 0, 715, 0, -2, 0,
	710, 709, 488, 40, 0, 477, 518, 0, 519, 520,
	521, 251, 255, 0, 260, 0, 277, 278, 0, 212,
	213, 227, 230, 0, 75, 0, 1061, 314, 332, 0,
	760, 318, 324, 325, 1061, 0, 0, 0, 0, 341,
	31, 0, 0, 606, 608, 607, 609, 0, 0, 0,
	629, 630, 0, 705, 32, 0, 494, 480, 486, 256,
	257, 0, 261, 259, 0, 253, 0, 313, 0, 0,
	326, 0, 350, 0, 143, 144, 137, 686, 684, 610,
	0, 0, 0, 713, -2, 711, 258, 0, 73, 254,
	86, 253, 0, 349, 0, 0, 140, 641, 0, 644,
	0, 70, 0, 0, 320, 0, 351, 0, 338, 642,
	0, 0, 87, 88, 253, 0, 0, 281, 70, 89,
	90, 91, 92, 93, 0, 321, 0, 0, 282, 283,
	0, 78, 0, 126, -2, 129, 130, 131, 132, 133,
	134, 135, 136, 0, 0, 0, 643, 284, 0, 285,
	0, 0, 0, 0, 0, 0, 0, 0, 291, 293,
	294, 0, 0, 292, 94, 127, 0, 97, 0, 0,
	352, 353, 295, 296, 297, 0, 0, 98, 0, 0,
	95, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 0, 99, 100, 0, 0, 0, 105, 0, 96,
	0, 102, 0, 0, 0, 0, 0, 101, 0, 106,
	103,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 77, 3, 3, 3, 105, 97, 3,
	56, 58, 102, 100, 57, 101, 115, 103, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 383,
	86, 85, 87, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 107, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 96, 3, 108,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 78, 79, 80, 81, 82, 83, 84, 88,
	89, 90, 91, 92, 93, 94, 95, 98, 99, 104,
	106, 109, 110, 111, 112, 113, 114, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:360
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:365
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:366
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:370
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 26:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:395
		{
			setParseTree(yylex, nil)
		}
	case 27:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:401
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 28:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:409
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 29:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:413
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 30:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:419
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 31:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:426
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:432
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:436
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:442
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:446
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:453
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].setExprs)
			yyVAL.statement = ins
		}
	case 37:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:465
		{
			cols := make(Columns, 0, len(yyDollar[7].setExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].setExprs))
			for _, updateList := range yyDollar[7].setExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].setExprs)}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:477
		{
			yyVAL.str = InsertStr
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:481
		{
			yyVAL.str = ReplaceStr
		}
	case 40:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:487
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].setExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 41:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:493
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 42:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:497
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:501
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 44:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:505
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:510
		{
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:511
		{
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:515
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName.ToViewName()}
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:519
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName.ToViewName())
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:525
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:529
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:535
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:539
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:544
		{
			yyVAL.partitions = nil
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:548
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:554
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:558
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:562
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 58:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:566
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:572
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:576
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:582
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:586
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:590
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:596
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:600
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:604
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:608
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:614
		{
			yyVAL.str = SessionStr
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:618
		{
			yyVAL.str = GlobalStr
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:623
		{
			yyVAL.int = yyPosition(yylex)
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:629
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			if len(yyDollar[1].ddl.TableSpec.Constraints) > 0 {
				yyDollar[1].ddl.ConstraintAction = AddStr
			}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:637
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 73:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:643
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: yyDollar[4].colIdent, Using: yyDollar[5].colIdent, Type: yyDollar[2].str, Columns: yyDollar[9].indexColumns, Options: yyDollar[11].indexOptions}}
		}
	case 74:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:647
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[3].tableName.ToViewName(), ViewExpr: yyDollar[6].selStmt, SubStatementPositionStart: yyDollar[5].int, SubStatementPositionEnd: yyDollar[7].int - 1}
		}
	case 75:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:651
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[5].tableName.ToViewName(), ViewExpr: yyDollar[8].selStmt, SubStatementPositionStart: yyDollar[7].int, SubStatementPositionEnd: yyDollar[9].int - 1, OrReplace: true}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:655
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 77:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:659
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 78:
		yyDollar = yyS[yypt-15 : yypt+1]
//line sql.y:663
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[8].tableName, TriggerSpec: &TriggerSpec{Name: string(yyDollar[4].bytes), Time: yyDollar[5].str, Event: yyDollar[6].str, Order: yyDollar[12].triggerOrder, Body: yyDollar[14].statement}}
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:668
		{
			yyVAL.empty = struct{}{}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:672
		{
			yyVAL.empty = struct{}{}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:678
		{
			yyVAL.str = BeforeStr
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:682
		{
			yyVAL.str = AfterStr
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:688
		{
			yyVAL.str = InsertStr
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:692
		{
			yyVAL.str = UpdateStr
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:696
		{
			yyVAL.str = DeleteStr
		}
	case 86:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:701
		{
			yyVAL.triggerOrder = nil
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:705
		{
			yyVAL.triggerOrder = &TriggerOrder{PrecedesOrFollows: FollowsStr, OtherTriggerName: string(yyDollar[2].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:709
		{
			yyVAL.triggerOrder = &TriggerOrder{PrecedesOrFollows: PrecedesStr, OtherTriggerName: string(yyDollar[2].bytes)}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:715
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:725
		{
			yyVAL.statement = &BeginEndBlock{Statements: yyDollar[2].statements}
		}
	case 95:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:731
		{
			yyVAL.statement = &CaseStatement{Expr: yyDollar[2].expr, Cases: yyDollar[3].caseStatementCases}
		}
	case 96:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:735
		{
			yyVAL.statement = &CaseStatement{Expr: yyDollar[2].expr, Cases: yyDollar[3].caseStatementCases, Else: yyDollar[5].statements}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:741
		{
			yyVAL.caseStatementCases = []CaseStatementCase{yyDollar[1].caseStatementCase}
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:745
		{
			yyVAL.caseStatementCases = append(yyVAL.caseStatementCases, yyDollar[2].caseStatementCase)
		}
	case 99:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:751
		{
			yyVAL.caseStatementCase = CaseStatementCase{Case: yyDollar[2].expr, Statements: yyDollar[4].statements}
		}
	case 100:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:757
		{
			conds := []IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}
			yyVAL.statement = &IfStatement{Conditions: conds}
		}
	case 101:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:762
		{
			conds := []IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}
			yyVAL.statement = &IfStatement{Conditions: conds, Else: yyDollar[7].statements}
		}
	case 102:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:767
		{
			conds := yyDollar[6].ifStatementConditions
			conds = append([]IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}, conds...)
			yyVAL.statement = &IfStatement{Conditions: conds}
		}
	case 103:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:773
		{
			conds := yyDollar[6].ifStatementConditions
			conds = append([]IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}, conds...)
			yyVAL.statement = &IfStatement{Conditions: conds, Else: yyDollar[8].statements}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:781
		{
			yyVAL.ifStatementConditions = []IfStatementCondition{yyDollar[1].ifStatementCondition}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:785
		{
			yyVAL.ifStatementConditions = append(yyVAL.ifStatementConditions, yyDollar[2].ifStatementCondition)
		}
	case 106:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:791
		{
			yyVAL.ifStatementCondition = IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:797
		{
			yyVAL.statement = &SignalStatement{SqlStateValue: yyDollar[2].bytes}
		}
	case 108:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:801
		{
			yyVAL.statement = &SignalStatement{SqlStateValue: yyDollar[2].bytes, Info: yyDollar[4].signalInfos}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:807
		{
			yyVAL.bytes = yyDollar[2].expr
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:811
		{
			yyVAL.bytes = yyDollar[3].expr
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:817
		{
			yyVAL.signalInfos = []SignalInfo{yyDollar[1].signalInfo}
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:821
		{
			yyVAL.signalInfos = append(yyVAL.signalInfos, yyDollar[3].signalInfo)
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:827
		{
			yyVAL.signalInfo = SignalInfo{Name: string(yyDollar[1].bytes), Value: yyDollar[3].expr}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:833
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:850
		{
			yyVAL.statements = Statements{yyDollar[1].statement}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:854
		{
			yyVAL.statements = append(yyVAL.statements, yyDollar[3].statement)
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:860
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:873
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:877
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:883
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:888
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:893
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:899
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:904
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:910
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 145:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:916
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName, IfNotExists: ne}
			setDDL(yylex, yyVAL.ddl)
		}
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:927
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:934
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:938
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:944
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:949
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:953
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:957
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:963
		{
			if err := yyDollar[2].columnType.merge(yyDollar[3].columnType); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:972
		{
			yyVAL.columnType = ColumnType{}
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:976
		{
			opt := ColumnType{NotNull: yyDollar[2].boolVal, sawnull: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:985
		{
			opt := ColumnType{Default: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:994
		{
			opt := ColumnType{OnUpdate: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1003
		{
			opt := ColumnType{Autoincrement: yyDollar[2].boolVal, sawai: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1012
		{
			opt := ColumnType{KeyOpt: yyDollar[2].colKeyOpt}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1021
		{
			opt := ColumnType{Comment: yyDollar[2].sqlVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1032
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1043
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1048
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1054
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1058
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1062
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1066
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1070
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1074
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1078
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1082
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1086
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1092
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1098
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1104
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1110
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1116
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1122
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1128
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1134
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1142
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1146
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1150
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1154
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1158
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 189:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1164
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 190:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1168
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1172
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1176
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1180
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 194:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1184
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 195:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1188
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1192
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1196
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 198:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1200
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Length: yyDollar[4].sqlVal}
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1204
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1208
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1212
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1216
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1220
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1224
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1228
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 206:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1232
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1236
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1240
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1244
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1248
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1252
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 212:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1256
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 213:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1261
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1267
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1271
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1275
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1279
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1283
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1287
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1291
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1295
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1301
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[1].bytes))
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1306
		{
			yyVAL.strs = append(yyDollar[1].strs, string(yyDollar[3].bytes))
		}
	case 224:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1311
		{
			yyVAL.sqlVal = nil
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1315
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 226:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1320
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 227:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1324
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 228:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1332
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1336
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 230:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1342
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 231:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1350
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1354
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 233:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1359
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1363
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1370
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1374
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1380
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1386
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1392
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 240:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1397
		{
			yyVAL.str = ""
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1401
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1405
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 243:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1410
		{
			yyVAL.str = ""
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1414
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1418
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1424
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1428
		{
			yyVAL.colKeyOpt = colKey
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1432
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1436
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1442
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 251:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1448
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1452
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 253:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1457
		{
			yyVAL.indexOptions = nil
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1461
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1467
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1471
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1477
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1481
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1486
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1492
		{
			yyVAL.str = ""
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1496
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1502
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1506
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1510
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1514
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1518
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1524
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1528
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1532
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1538
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1542
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 272:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1547
		{
			yyVAL.str = ""
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1551
		{
			yyVAL.str = yyDollar[1].str
		}
	case 274:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1556
		{
			yyVAL.str = ""
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1560
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1566
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1570
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1576
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal, Order: yyDollar[3].str}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1582
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1586
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 281:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1593
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 282:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1597
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 283:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1601
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 284:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1605
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 285:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1609
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[12].ReferenceAction, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1615
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1619
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1624
		{
			yyVAL.str = ""
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1628
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1632
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1638
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1644
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1650
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1654
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1658
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1662
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1666
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1671
		{
			yyVAL.str = ""
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1675
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1679
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1687
		{
			yyVAL.str = yyDollar[1].str
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1691
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1695
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1701
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1705
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1709
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1714
		{
			yyVAL.str = ""
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1718
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 312:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1729
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 313:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1733
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			ddl.Column = yyDollar[8].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 314:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1740
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 315:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1747
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 316:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1751
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: DropStr, Column: NewColIdent(string(yyDollar[7].bytes)), Table: yyDollar[4].tableName}
		}
	case 317:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1755
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 318:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1759
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: RenameStr, Table: yyDollar[4].tableName, Column: NewColIdent(string(yyDollar[7].bytes)), ToColumn: NewColIdent(string(yyDollar[9].bytes))}
		}
	case 319:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1763
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 320:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1768
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[7].str), Using: yyDollar[8].colIdent, Columns: yyDollar[10].indexColumns, Options: yyDollar[12].indexOptions}}
		}
	case 321:
		yyDollar = yyS[yypt-14 : yypt+1]
//line sql.y:1772
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[9].str), Type: yyDollar[7].str, Using: yyDollar[10].colIdent, Columns: yyDollar[12].indexColumns, Options: yyDollar[14].indexOptions}}
		}
	case 322:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1776
		{
			yyVAL.statement = &DDL{Action: AlterStr, ConstraintAction: DropStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[7].bytes)}}}}
		}
	case 323:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1781
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[7].colIdent}}
		}
	case 324:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1785
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: RenameStr, FromName: yyDollar[7].colIdent, ToName: yyDollar[9].colIdent}}
		}
	case 325:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1789
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ModifyStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 326:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1796
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ChangeStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, Column: NewColIdent(string(yyDollar[7].bytes)), ColumnOrder: yyDollar[9].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			yyVAL.statement = ddl
		}
	case 327:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1802
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 328:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1806
		{
			ddl := &DDL{Action: AlterStr, ConstraintAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddConstraint(yyDollar[6].constraintDefinition)
			yyVAL.statement = ddl
		}
	case 329:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1812
		{
			yyVAL.statement = &DDL{Action: AlterStr, ConstraintAction: DropStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[8].bytes), Details: &ForeignKeyDefinition{}}}}}
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1818
		{
			yyVAL.columnOrder = nil
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1822
		{
			yyVAL.columnOrder = &ColumnOrder{First: true}
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1826
		{
			yyVAL.columnOrder = &ColumnOrder{AfterColumn: NewColIdent(string(yyDollar[2].bytes))}
		}
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1832
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 334:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1838
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 335:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1850
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 336:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1860
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 337:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1864
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 338:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1868
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 339:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1881
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 340:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1891
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 341:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1895
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1908
		{
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1910
		{
		}
	case 349:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1921
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1927
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1931
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 352:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1937
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 353:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1941
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1947
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1953
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 356:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1957
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 357:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1965
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 358:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1973
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[3].colIdent}}
		}
	case 359:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1977
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromViews: yyDollar[4].tableNames, IfExists: exists}
		}
	case 360:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1985
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1989
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1995
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1999
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2004
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 365:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2010
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 366:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2015
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2019
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 368:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2023
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 369:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2027
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 370:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2032
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 371:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2036
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 372:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2040
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 373:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2044
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2048
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2052
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2056
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2060
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 378:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2064
		{
			yyVAL.statement = &Show{Type: IndexStr, Table: yyDollar[4].tableName, Database: yyDollar[5].str, ShowIndexFilterOpt: yyDollar[6].expr}
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2068
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2072
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 381:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2076
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2080
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 383:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2084
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 384:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2089
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[6].showFilter, AsOf: yyDollar[5].expr}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 385:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2099
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2103
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 387:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2107
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2113
		{
			// Cannot dereference $3 directly, or else the parser stackcannot be pooled. See yyParsePooled
			cmp := yyDollar[3].expr.(*ComparisonExpr)
			cmp.Left = &ColName{Name: NewColIdent("collation")}
			var ex Expr = cmp
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &ex}
		}
	case 389:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2121
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2126
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2130
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 392:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2134
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2138
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2152
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2158
		{
			yyVAL.expr = &ComparisonExpr{Operator: LikeStr, Right: yyDollar[2].expr, Escape: yyDollar[3].expr}
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2164
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2168
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 398:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2174
		{
			yyVAL.str = ""
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2178
		{
			yyVAL.str = "full "
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2184
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2188
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2194
		{
			yyVAL.str = ""
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2198
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2202
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 405:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2208
		{
			yyVAL.showFilter = nil
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2212
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2216
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 408:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2222
		{
			yyVAL.showFilter = nil
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2226
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 410:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2232
		{
			yyVAL.str = ""
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2236
		{
			yyVAL.str = SessionStr
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2240
		{
			yyVAL.str = GlobalStr
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2246
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2250
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2256
		{
			yyVAL.statement = &Begin{}
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2260
		{
			yyVAL.statement = &Begin{}
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2266
		{
			yyVAL.statement = &Commit{}
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2272
		{
			yyVAL.statement = &Rollback{}
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2277
		{
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2278
		{
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2282
		{
			yyVAL.statement = &Explain{ExplainFormat: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2286
		{
			yyVAL.statement = &Explain{Analyze: true, ExplainFormat: TreeStr, Statement: yyDollar[3].selStmt}
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2292
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2300
		{
			yyVAL.str = ""
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2304
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2315
		{
			yyVAL.statement = &Show{Type: "columns", OnTable: yyDollar[2].tableName}
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2319
		{
			yyVAL.statement = &OtherRead{}
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2325
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2329
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2333
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2337
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2343
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 438:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2347
		{
			setAllowComments(yylex, true)
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2351
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 440:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2357
		{
			yyVAL.bytes2 = nil
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2361
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2367
		{
			yyVAL.str = UnionStr
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2371
		{
			yyVAL.str = UnionAllStr
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2375
		{
			yyVAL.str = UnionDistinctStr
		}
	case 445:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2380
		{
			yyVAL.str = ""
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2384
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2388
		{
			yyVAL.str = SQLCacheStr
		}
	case 448:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2393
		{
			yyVAL.str = ""
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2397
		{
			yyVAL.str = ""
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2401
		{
			yyVAL.str = DistinctStr
		}
	case 451:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2406
		{
			yyVAL.str = ""
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2410
		{
			yyVAL.str = StraightJoinHint
		}
	case 453:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2415
		{
			yyVAL.selectExprs = nil
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2419
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2425
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2429
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2435
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2439
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2443
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 460:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2447
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 461:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2452
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2456
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2460
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2467
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2472
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2476
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2482
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2486
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2496
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2500
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2504
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2510
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2516
		{
			yyVAL.aliasedTableName = yyDollar[2].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
		}
	case 477:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2521
		{
			yyVAL.aliasedTableName = yyDollar[6].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
			yyVAL.aliasedTableName.Partitions = yyDollar[4].partitions
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2532
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Hints: yyDollar[1].indexHints}
		}
	case 479:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2536
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, Hints: yyDollar[4].indexHints}
		}
	case 480:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2540
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, As: yyDollar[5].tableIdent, Hints: yyDollar[6].indexHints}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2544
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2548
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[1].tableIdent, Hints: yyDollar[2].indexHints}
		}
	case 483:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2559
		{
			yyVAL.expr = nil
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2563
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2569
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2573
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2579
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2583
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 489:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2596
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 490:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2600
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 491:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2604
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2608
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2614
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 494:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2616
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 495:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2620
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2622
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 497:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2626
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2628
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 499:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2631
		{
			yyVAL.empty = struct{}{}
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2633
		{
			yyVAL.empty = struct{}{}
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2638
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2644
		{
			yyVAL.str = JoinStr
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2648
		{
			yyVAL.str = JoinStr
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2652
		{
			yyVAL.str = JoinStr
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2658
		{
			yyVAL.str = StraightJoinStr
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2664
		{
			yyVAL.str = LeftJoinStr
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2668
		{
			yyVAL.str = LeftJoinStr
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2672
		{
			yyVAL.str = RightJoinStr
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2676
		{
			yyVAL.str = RightJoinStr
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2682
		{
			yyVAL.str = NaturalJoinStr
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2686
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2696
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2700
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2706
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2710
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2716
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 518:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2721
		{
			yyVAL.indexHints = nil
		}
	case 519:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2725
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 520:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2729
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 521:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2733
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 522:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2738
		{
			yyVAL.expr = nil
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2742
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2748
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2752
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2756
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2760
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2764
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2768
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2772
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 531:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2778
		{
			yyVAL.str = ""
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2782
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2788
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2792
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2798
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2802
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 537:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2806
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 538:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2810
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 539:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2814
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2818
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 541:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2822
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 542:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2826
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 543:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2830
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2834
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2840
		{
			yyVAL.str = IsNullStr
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2844
		{
			yyVAL.str = IsNotNullStr
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2848
		{
			yyVAL.str = IsTrueStr
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2852
		{
			yyVAL.str = IsNotTrueStr
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2856
		{
			yyVAL.str = IsFalseStr
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2860
		{
			yyVAL.str = IsNotFalseStr
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2866
		{
			yyVAL.str = EqualStr
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2870
		{
			yyVAL.str = LessThanStr
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2874
		{
			yyVAL.str = GreaterThanStr
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2878
		{
			yyVAL.str = LessEqualStr
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2882
		{
			yyVAL.str = GreaterEqualStr
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2886
		{
			yyVAL.str = NotEqualStr
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2890
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 558:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2895
		{
			yyVAL.expr = nil
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2899
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2905
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2909
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2913
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2919
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2925
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2929
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2935
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2939
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2943
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2947
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2951
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2955
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2959
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2963
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2967
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2971
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2975
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2979
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2983
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2987
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2991
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2995
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2999
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3003
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3007
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3011
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3015
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3019
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3023
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3027
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3035
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3049
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3053
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3057
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 598:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3075
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: yyDollar[3].str == DistinctStr, Exprs: yyDollar[4].selectExprs}
		}
	case 599:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3079
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 600:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3089
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 601:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3093
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3097
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema")}
		}
	case 603:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3101
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 604:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3105
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 605:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3109
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 606:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3113
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 607:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3117
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 608:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3121
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 609:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3125
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 610:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3129
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 611:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3133
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("first"), Exprs: yyDollar[3].selectExprs}
		}
	case 612:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3137
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 613:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3141
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 614:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3145
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 615:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3155
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3159
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3163
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3168
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3173
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3178
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3184
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3189
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3194
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3198
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3202
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3207
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 627:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3212
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3217
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 629:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3221
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 630:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3225
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3235
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 634:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3245
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 635:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3249
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 636:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3253
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 637:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3257
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 638:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3261
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 639:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3265
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 640:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3271
		{
			yyVAL.str = ""
		}
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3275
		{
			yyVAL.str = BooleanModeStr
		}
	case 642:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3279
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 643:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3283
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3287
		{
			yyVAL.str = QueryExpansionStr
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3293
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3297
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3303
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3307
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 649:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3311
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3315
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3319
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3323
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3329
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 654:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3333
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3337
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 656:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3341
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3345
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3349
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3353
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 660:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3358
		{
			yyVAL.expr = nil
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3362
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 662:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3367
		{
			yyVAL.str = string("")
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3371
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3377
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3381
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 666:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3387
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 667:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3392
		{
			yyVAL.expr = nil
		}
	case 668:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3396
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3402
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 670:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3406
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 671:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3410
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3416
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3420
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3424
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3428
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3432
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3436
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3440
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3444
		{
			yyVAL.expr = &NullVal{}
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3450
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3459
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3463
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 683:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3468
		{
			yyVAL.exprs = nil
		}
	case 684:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3472
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 685:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3477
		{
			yyVAL.expr = nil
		}
	case 686:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3481
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 687:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3486
		{
			yyVAL.orderBy = nil
		}
	case 688:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3490
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3496
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 690:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3500
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 691:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3506
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 692:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3511
		{
			yyVAL.str = AscScr
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3515
		{
			yyVAL.str = AscScr
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3519
		{
			yyVAL.str = DescScr
		}
	case 695:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3524
		{
			yyVAL.limit = nil
		}
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3528
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 697:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3532
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 698:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3536
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 699:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3541
		{
			yyVAL.str = ""
		}
	case 700:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3545
		{
			yyVAL.str = ForUpdateStr
		}
	case 701:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3549
		{
			yyVAL.str = ShareModeStr
		}
	case 702:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3562
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3566
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 704:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3570
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 705:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3575
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 706:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3579
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 707:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3583
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3590
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 709:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3594
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 710:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3598
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 711:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3602
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 712:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3607
		{
			yyVAL.setExprs = nil
		}
	case 713:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3611
		{
			yyVAL.setExprs = yyDollar[5].setExprs
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3617
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 715:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3621
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3627
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 717:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3631
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 718:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3637
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3643
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3653
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 721:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3657
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 722:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3663
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: NewStrVal([]byte("on"))}
		}
	case 723:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3667
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: NewStrVal([]byte("off"))}
		}
	case 724:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3671
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 725:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3675
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 727:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3682
		{
			yyVAL.bytes = []byte("charset")
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3689
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3693
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3697
		{
			yyVAL.expr = &Default{}
		}
	case 734:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3706
		{
			yyVAL.byt = 0
		}
	case 735:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3708
		{
			yyVAL.byt = 1
		}
	case 736:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3711
		{
			yyVAL.byt = 0
		}
	case 737:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3713
		{
			yyVAL.byt = 1
		}
	case 738:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3716
		{
			yyVAL.str = ""
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3718
		{
			yyVAL.str = IgnoreStr
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3722
		{
			yyVAL.empty = struct{}{}
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3724
		{
			yyVAL.empty = struct{}{}
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3726
		{
			yyVAL.empty = struct{}{}
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3728
		{
			yyVAL.empty = struct{}{}
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3730
		{
			yyVAL.empty = struct{}{}
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3732
		{
			yyVAL.empty = struct{}{}
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3734
		{
			yyVAL.empty = struct{}{}
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3736
		{
			yyVAL.empty = struct{}{}
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3738
		{
			yyVAL.empty = struct{}{}
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3740
		{
			yyVAL.empty = struct{}{}
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3744
		{
			yyVAL.empty = struct{}{}
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3746
		{
			yyVAL.empty = struct{}{}
		}
	case 752:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3749
		{
			yyVAL.empty = struct{}{}
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3751
		{
			yyVAL.empty = struct{}{}
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3753
		{
			yyVAL.empty = struct{}{}
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3757
		{
			yyVAL.str = UniqueStr
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3759
		{
			yyVAL.str = FulltextStr
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3761
		{
			yyVAL.str = SpatialStr
		}
	case 758:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3764
		{
			yyVAL.str = ""
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3766
		{
			yyVAL.str = yyDollar[1].str
		}
	case 760:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3769
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 761:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3771
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3775
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3779
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3786
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3792
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3796
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3803
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1059:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4118
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1060:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4127
		{
			decNesting(yylex)
		}
	case 1061:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4132
		{
			skipToEnd(yylex)
		}
	case 1062:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4137
		{
			skipToEnd(yylex)
		}
	case 1063:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4141
		{
			skipToEnd(yylex)
		}
	case 1064:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4145
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
