// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func yyPosition(yylex interface{}) int {
	return yylex.(*Tokenizer).Position
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:57
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	int                  int
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	asOf                 *AsOf
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	columnOrder          *ColumnOrder
	triggerOrder         *TriggerOrder
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const UNLOCK = 57373
const KEYS = 57374
const UNIQUE = 57375
const KEY = 57376
const SYSTEM_TIME = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const INTEGRAL = 57401
const FLOAT = 57402
const HEXNUM = 57403
const VALUE_ARG = 57404
const LIST_ARG = 57405
const COMMENT = 57406
const COMMENT_KEYWORD = 57407
const BIT_LITERAL = 57408
const NULL = 57409
const TRUE = 57410
const FALSE = 57411
const OFF = 57412
const OR = 57413
const AND = 57414
const NOT = 57415
const BETWEEN = 57416
const CASE = 57417
const WHEN = 57418
const THEN = 57419
const ELSE = 57420
const END = 57421
const LE = 57422
const GE = 57423
const NE = 57424
const NULL_SAFE_EQUAL = 57425
const IS = 57426
const LIKE = 57427
const REGEXP = 57428
const IN = 57429
const SHIFT_LEFT = 57430
const SHIFT_RIGHT = 57431
const DIV = 57432
const MOD = 57433
const UNARY = 57434
const COLLATE = 57435
const BINARY = 57436
const UNDERSCORE_BINARY = 57437
const UNDERSCORE_UTF8MB4 = 57438
const INTERVAL = 57439
const JSON_EXTRACT_OP = 57440
const JSON_UNQUOTE_EXTRACT_OP = 57441
const CREATE = 57442
const ALTER = 57443
const DROP = 57444
const RENAME = 57445
const ANALYZE = 57446
const ADD = 57447
const FLUSH = 57448
const MODIFY = 57449
const CHANGE = 57450
const SCHEMA = 57451
const TABLE = 57452
const INDEX = 57453
const INDEXES = 57454
const VIEW = 57455
const TO = 57456
const IGNORE = 57457
const IF = 57458
const PRIMARY = 57459
const COLUMN = 57460
const SPATIAL = 57461
const FULLTEXT = 57462
const KEY_BLOCK_SIZE = 57463
const CHECK = 57464
const ACTION = 57465
const CASCADE = 57466
const CONSTRAINT = 57467
const FOREIGN = 57468
const NO = 57469
const REFERENCES = 57470
const RESTRICT = 57471
const FIRST = 57472
const AFTER = 57473
const SHOW = 57474
const DESCRIBE = 57475
const EXPLAIN = 57476
const DATE = 57477
const ESCAPE = 57478
const REPAIR = 57479
const OPTIMIZE = 57480
const TRUNCATE = 57481
const FORMAT = 57482
const MAXVALUE = 57483
const PARTITION = 57484
const REORGANIZE = 57485
const LESS = 57486
const THAN = 57487
const PROCEDURE = 57488
const TRIGGER = 57489
const VINDEX = 57490
const VINDEXES = 57491
const STATUS = 57492
const VARIABLES = 57493
const WARNINGS = 57494
const SEQUENCE = 57495
const EACH = 57496
const ROW = 57497
const BEFORE = 57498
const FOLLOWS = 57499
const PRECEDES = 57500
const BEGIN = 57501
const START = 57502
const TRANSACTION = 57503
const COMMIT = 57504
const ROLLBACK = 57505
const BIT = 57506
const TINYINT = 57507
const SMALLINT = 57508
const MEDIUMINT = 57509
const INT = 57510
const INTEGER = 57511
const BIGINT = 57512
const INTNUM = 57513
const REAL = 57514
const DOUBLE = 57515
const FLOAT_TYPE = 57516
const DECIMAL = 57517
const NUMERIC = 57518
const DEC = 57519
const FIXED = 57520
const PRECISION = 57521
const TIME = 57522
const TIMESTAMP = 57523
const DATETIME = 57524
const YEAR = 57525
const CHAR = 57526
const VARCHAR = 57527
const BOOL = 57528
const CHARACTER = 57529
const VARBINARY = 57530
const NCHAR = 57531
const NVARCHAR = 57532
const NATIONAL = 57533
const VARYING = 57534
const TEXT = 57535
const TINYTEXT = 57536
const MEDIUMTEXT = 57537
const LONGTEXT = 57538
const LONG = 57539
const BLOB = 57540
const TINYBLOB = 57541
const MEDIUMBLOB = 57542
const LONGBLOB = 57543
const JSON = 57544
const ENUM = 57545
const GEOMETRY = 57546
const POINT = 57547
const LINESTRING = 57548
const POLYGON = 57549
const GEOMETRYCOLLECTION = 57550
const MULTIPOINT = 57551
const MULTILINESTRING = 57552
const MULTIPOLYGON = 57553
const NULLX = 57554
const AUTO_INCREMENT = 57555
const APPROXNUM = 57556
const SIGNED = 57557
const UNSIGNED = 57558
const ZEROFILL = 57559
const COLLATION = 57560
const DATABASES = 57561
const SCHEMAS = 57562
const TABLES = 57563
const VITESS_METADATA = 57564
const VSCHEMA = 57565
const FULL = 57566
const PROCESSLIST = 57567
const COLUMNS = 57568
const FIELDS = 57569
const ENGINES = 57570
const PLUGINS = 57571
const NAMES = 57572
const CHARSET = 57573
const GLOBAL = 57574
const SESSION = 57575
const ISOLATION = 57576
const LEVEL = 57577
const READ = 57578
const WRITE = 57579
const ONLY = 57580
const REPEATABLE = 57581
const COMMITTED = 57582
const UNCOMMITTED = 57583
const SERIALIZABLE = 57584
const CURRENT_TIMESTAMP = 57585
const DATABASE = 57586
const CURRENT_DATE = 57587
const CURRENT_TIME = 57588
const LOCALTIME = 57589
const LOCALTIMESTAMP = 57590
const UTC_DATE = 57591
const UTC_TIME = 57592
const UTC_TIMESTAMP = 57593
const REPLACE = 57594
const CONVERT = 57595
const CAST = 57596
const SUBSTR = 57597
const SUBSTRING = 57598
const GROUP_CONCAT = 57599
const SEPARATOR = 57600
const TIMESTAMPADD = 57601
const TIMESTAMPDIFF = 57602
const MATCH = 57603
const AGAINST = 57604
const BOOLEAN = 57605
const LANGUAGE = 57606
const WITH = 57607
const QUERY = 57608
const EXPANSION = 57609
const UNUSED = 57610
const ARRAY = 57611
const CUME_DIST = 57612
const DESCRIPTION = 57613
const DENSE_RANK = 57614
const EMPTY = 57615
const EXCEPT = 57616
const FIRST_VALUE = 57617
const GROUPING = 57618
const GROUPS = 57619
const JSON_TABLE = 57620
const LAG = 57621
const LAST_VALUE = 57622
const LATERAL = 57623
const LEAD = 57624
const MEMBER = 57625
const NTH_VALUE = 57626
const NTILE = 57627
const OF = 57628
const OVER = 57629
const PERCENT_RANK = 57630
const RANK = 57631
const RECURSIVE = 57632
const ROW_NUMBER = 57633
const SYSTEM = 57634
const WINDOW = 57635
const ACTIVE = 57636
const ADMIN = 57637
const BUCKETS = 57638
const CLONE = 57639
const COMPONENT = 57640
const DEFINITION = 57641
const ENFORCED = 57642
const EXCLUDE = 57643
const FOLLOWING = 57644
const GEOMCOLLECTION = 57645
const GET_MASTER_PUBLIC_KEY = 57646
const HISTOGRAM = 57647
const HISTORY = 57648
const INACTIVE = 57649
const INVISIBLE = 57650
const LOCKED = 57651
const MASTER_COMPRESSION_ALGORITHMS = 57652
const MASTER_PUBLIC_KEY_PATH = 57653
const MASTER_TLS_CIPHERSUITES = 57654
const MASTER_ZSTD_COMPRESSION_LEVEL = 57655
const NESTED = 57656
const NETWORK_NAMESPACE = 57657
const NOWAIT = 57658
const NULLS = 57659
const OJ = 57660
const OLD = 57661
const OPTIONAL = 57662
const ORDINALITY = 57663
const ORGANIZATION = 57664
const OTHERS = 57665
const PATH = 57666
const PERSIST = 57667
const PERSIST_ONLY = 57668
const PRECEDING = 57669
const PRIVILEGE_CHECKS_USER = 57670
const PROCESS = 57671
const RANDOM = 57672
const REFERENCE = 57673
const REQUIRE_ROW_FORMAT = 57674
const RESOURCE = 57675
const RESPECT = 57676
const RESTART = 57677
const RETAIN = 57678
const REUSE = 57679
const ROLE = 57680
const SECONDARY = 57681
const SECONDARY_ENGINE = 57682
const SECONDARY_LOAD = 57683
const SECONDARY_UNLOAD = 57684
const SKIP = 57685
const SRID = 57686
const THREAD_PRIORITY = 57687
const TIES = 57688
const UNBOUNDED = 57689
const VCPU = 57690
const VISIBLE = 57691

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"UNIQUE",
	"KEY",
	"SYSTEM_TIME",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"MODIFY",
	"CHANGE",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"INDEXES",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"FIRST",
	"AFTER",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"FORMAT",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"EACH",
	"ROW",
	"BEFORE",
	"FOLLOWS",
	"PRECEDES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DEC",
	"FIXED",
	"PRECISION",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NATIONAL",
	"VARYING",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"LONG",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 31,
	-2, 4,
	-1, 41,
	167, 362,
	168, 362,
	-2, 350,
	-1, 48,
	1, 1015,
	367, 1015,
	-2, 381,
	-1, 333,
	114, 721,
	-2, 717,
	-1, 334,
	114, 722,
	-2, 718,
	-1, 404,
	84, 971,
	-2, 67,
	-1, 405,
	84, 889,
	-2, 68,
	-1, 410,
	84, 858,
	-2, 681,
	-1, 412,
	84, 919,
	-2, 683,
	-1, 593,
	5, 31,
	-2, 375,
	-1, 597,
	5, 31,
	-2, 374,
	-1, 724,
	1, 426,
	5, 426,
	12, 426,
	13, 426,
	14, 426,
	15, 426,
	17, 426,
	19, 426,
	29, 426,
	30, 426,
	44, 426,
	45, 426,
	46, 426,
	47, 426,
	48, 426,
	50, 426,
	51, 426,
	54, 426,
	55, 426,
	57, 426,
	58, 426,
	367, 426,
	-2, 451,
	-1, 727,
	55, 48,
	57, 48,
	-2, 52,
	-1, 890,
	114, 724,
	-2, 720,
	-1, 1094,
	56, 294,
	59, 294,
	-2, 259,
	-1, 1144,
	5, 32,
	-2, 515,
	-1, 1176,
	5, 31,
	-2, 655,
	-1, 1270,
	5, 31,
	-2, 69,
	-1, 1380,
	1, 470,
	5, 470,
	12, 470,
	13, 470,
	14, 470,
	15, 470,
	17, 470,
	19, 470,
	29, 470,
	30, 470,
	44, 470,
	45, 470,
	46, 470,
	47, 470,
	48, 470,
	50, 470,
	51, 470,
	54, 470,
	55, 470,
	57, 470,
	58, 470,
	367, 470,
	-2, 451,
	-1, 1483,
	5, 32,
	-2, 656,
	-1, 1515,
	5, 31,
	-2, 69,
	-1, 1553,
	5, 31,
	-2, 658,
	-1, 1639,
	5, 32,
	-2, 659,
	-1, 1659,
	5, 31,
	-2, 86,
}

const yyPrivate = 57344

const yyLast = 17039

var yyAct = [...]int{

	334, 1691, 1678, 1447, 1679, 1312, 1393, 1627, 7, 6,
	338, 1179, 1643, 1533, 678, 1567, 1008, 1064, 364, 1358,
	1518, 1394, 866, 977, 981, 1066, 1644, 1359, 973, 351,
	1225, 1017, 1180, 1498, 1007, 979, 1021, 536, 975, 86,
	100, 1355, 562, 100, 312, 1282, 1004, 1371, 827, 100,
	1330, 64, 1365, 915, 1059, 1089, 928, 409, 560, 1014,
	953, 843, 892, 1042, 1289, 1054, 1262, 740, 720, 609,
	1288, 964, 943, 403, 100, 414, 615, 739, 957, 100,
	398, 100, 948, 365, 54, 621, 336, 630, 321, 542,
	395, 100, 400, 414, 729, 63, 1285, 100, 5, 1682,
	1656, 68, 1677, 695, 721, 1637, 1673, 1105, 1448, 1655,
	1347, 1636, 1475, 954, 541, 694, 1213, 406, 1388, 1212,
	1104, 26, 1214, 55, 29, 30, 87, 325, 998, 70,
	71, 72, 73, 74, 305, 565, 1389, 1390, 54, 1245,
	95, 91, 92, 590, 93, 1204, 999, 1000, 304, 1028,
	317, 1109, 741, 583, 742, 1030, 1314, 584, 581, 582,
	1103, 1030, 1048, 309, 1043, 311, 1540, 81, 1043, 1034,
	1036, 61, 1035, 544, 301, 546, 1331, 1603, 643, 642,
	652, 653, 645, 646, 647, 648, 649, 650, 651, 644,
	1055, 378, 654, 384, 385, 382, 383, 381, 380, 379,
	296, 1466, 564, 567, 677, 3, 569, 386, 387, 1464,
	1100, 1095, 1096, 1621, 1094, 589, 1097, 1098, 1333, 83,
	85, 1315, 816, 80, 302, 303, 1646, 1647, 306, 89,
	88, 588, 1580, 1316, 576, 577, 857, 854, 1237, 566,
	568, 1676, 1672, 1242, 1241, 1628, 856, 815, 1311, 958,
	543, 1107, 1110, 1022, 298, 1519, 1520, 84, 1335, 307,
	1699, 1619, 1293, 1339, 1238, 1334, 87, 1332, 1695, 1568,
	550, 100, 1337, 310, 414, 94, 414, 414, 1243, 858,
	1235, 414, 1570, 414, 855, 1336, 1236, 311, 1527, 414,
	299, 1528, 1273, 819, 982, 984, 1102, 1308, 1338, 1340,
	810, 1203, 1202, 1201, 1024, 1024, 594, 596, 1252, 1024,
	100, 1043, 539, 1024, 1033, 603, 270, 1024, 90, 1154,
	1610, 1117, 1101, 608, 1116, 1486, 1151, 1318, 414, 1209,
	1057, 666, 667, 1165, 570, 571, 1133, 563, 1226, 575,
	1635, 578, 864, 735, 1240, 634, 556, 591, 861, 1412,
	644, 994, 1569, 654, 82, 1005, 654, 561, 844, 561,
	561, 1617, 1106, 1082, 561, 1604, 561, 617, 1284, 89,
	88, 627, 561, 340, 983, 1592, 849, 1108, 77, 629,
	1693, 54, 54, 1694, 56, 1692, 605, 629, 606, 1369,
	601, 607, 1029, 100, 100, 100, 595, 1526, 1023, 1023,
	1413, 54, 414, 1023, 1297, 1293, 1307, 1023, 414, 1294,
	1304, 1023, 1301, 1303, 78, 743, 663, 1297, 1293, 665,
	619, 598, 1294, 666, 667, 1295, 1296, 1349, 944, 1298,
	666, 667, 719, 812, 1020, 1024, 585, 573, 549, 1700,
	1239, 845, 1298, 537, 406, 1400, 1083, 676, 1283, 680,
	681, 682, 683, 684, 685, 686, 687, 688, 689, 690,
	537, 693, 696, 696, 696, 702, 696, 696, 702, 696,
	710, 711, 712, 713, 714, 715, 535, 725, 24, 599,
	600, 1701, 624, 698, 700, 728, 704, 706, 944, 709,
	1162, 733, 1641, 1513, 737, 697, 699, 701, 703, 705,
	707, 708, 593, 597, 643, 642, 652, 653, 645, 646,
	647, 648, 649, 650, 651, 644, 587, 1512, 654, 1149,
	574, 1148, 618, 647, 648, 649, 650, 651, 644, 1023,
	1267, 654, 552, 553, 554, 1018, 100, 1019, 628, 627,
	414, 61, 602, 1016, 1022, 316, 916, 100, 917, 899,
	100, 895, 1265, 100, 1246, 629, 1618, 100, 1430, 414,
	414, 537, 1090, 897, 898, 896, 414, 414, 100, 414,
	100, 1547, 1510, 100, 628, 627, 1427, 414, 414, 643,
	642, 652, 653, 645, 646, 647, 648, 649, 650, 651,
	644, 629, 1405, 654, 652, 653, 645, 646, 647, 648,
	649, 650, 651, 644, 100, 414, 654, 1263, 1091, 100,
	882, 884, 885, 1215, 829, 1216, 883, 830, 831, 1562,
	1674, 414, 308, 602, 834, 835, 100, 837, 1581, 867,
	868, 1663, 414, 1150, 1662, 840, 841, 1615, 628, 627,
	820, 1586, 561, 561, 1326, 1351, 1130, 1131, 1132, 561,
	561, 1226, 561, 832, 833, 629, 893, 1504, 1671, 1577,
	561, 561, 869, 853, 643, 642, 652, 653, 645, 646,
	647, 648, 649, 650, 651, 644, 414, 889, 654, 628,
	627, 1651, 602, 888, 1583, 628, 627, 537, 561, 1504,
	1648, 1576, 890, 1524, 392, 393, 629, 933, 936, 1450,
	1445, 870, 629, 1441, 945, 1562, 1631, 1406, 871, 664,
	1438, 414, 414, 26, 1504, 1620, 29, 30, 100, 886,
	1562, 1611, 1562, 1573, 1562, 602, 100, 100, 1504, 1503,
	100, 100, 1488, 602, 100, 100, 100, 414, 642, 652,
	653, 645, 646, 647, 648, 649, 650, 651, 644, 54,
	414, 654, 1436, 919, 920, 1485, 602, 61, 1435, 1280,
	923, 925, 922, 61, 680, 863, 930, 724, 989, 1420,
	1419, 1025, 991, 1416, 1417, 1368, 941, 1416, 1415, 406,
	645, 646, 647, 648, 649, 650, 651, 644, 1012, 1279,
	654, 1221, 1009, 829, 1080, 927, 929, 1472, 961, 602,
	935, 938, 939, 940, 862, 1079, 987, 1145, 602, 976,
	995, 100, 414, 725, 414, 992, 996, 725, 918, 100,
	100, 628, 627, 100, 924, 602, 952, 851, 955, 956,
	826, 825, 1044, 1045, 1046, 1047, 813, 363, 629, 811,
	750, 749, 1657, 100, 558, 100, 100, 545, 988, 1356,
	730, 100, 1368, 924, 65, 100, 100, 100, 100, 100,
	1061, 1062, 1063, 1481, 731, 1591, 961, 1418, 1056, 1058,
	1068, 1217, 1070, 643, 642, 652, 653, 645, 646, 647,
	648, 649, 650, 651, 644, 926, 26, 654, 731, 354,
	353, 356, 357, 358, 359, 561, 1145, 561, 355, 360,
	997, 960, 1145, 1168, 1167, 1478, 1078, 889, 732, 1174,
	734, 26, 408, 1121, 1321, 893, 1175, 966, 969, 970,
	971, 967, 890, 968, 972, 1205, 730, 1372, 1373, 961,
	551, 1205, 732, 736, 730, 26, 61, 318, 865, 1123,
	818, 1552, 1122, 643, 642, 652, 653, 645, 646, 647,
	648, 649, 650, 651, 644, 1649, 1139, 654, 1584, 1135,
	1145, 61, 100, 100, 100, 100, 100, 1535, 1514, 1313,
	961, 1181, 1030, 1134, 100, 1065, 1368, 100, 1493, 1060,
	1399, 100, 1055, 1142, 1220, 61, 1050, 61, 1049, 100,
	1129, 966, 969, 970, 971, 967, 1536, 968, 972, 1372,
	1373, 1141, 1686, 1684, 1680, 1199, 1375, 1356, 414, 1144,
	1146, 894, 1147, 1272, 1268, 1161, 850, 1200, 1153, 822,
	1191, 1156, 1157, 1158, 1218, 1192, 331, 1206, 1164, 1189,
	1182, 877, 1166, 1185, 1190, 1169, 1170, 1378, 1171, 1172,
	1377, 1177, 1178, 1188, 1194, 725, 725, 725, 725, 725,
	1009, 1193, 1227, 970, 971, 1159, 1223, 1224, 1196, 1187,
	976, 1669, 1197, 322, 323, 1210, 414, 1183, 1184, 1654,
	1186, 1317, 725, 1118, 1667, 1128, 1127, 1550, 414, 100,
	414, 414, 622, 623, 1440, 1228, 1404, 1403, 1222, 1255,
	610, 1257, 1258, 1259, 1260, 1247, 1248, 1256, 748, 724,
	620, 611, 1254, 724, 559, 1479, 1531, 724, 867, 868,
	1069, 408, 1261, 408, 408, 821, 1271, 1264, 408, 1086,
	408, 622, 623, 1266, 974, 100, 408, 809, 319, 320,
	1516, 1290, 1302, 1306, 414, 1207, 1274, 1208, 1276, 1277,
	1126, 313, 1597, 314, 1538, 65, 1281, 1596, 1125, 1205,
	54, 1155, 1031, 1032, 1292, 1037, 1038, 1039, 1040, 1041,
	1300, 561, 1176, 561, 561, 632, 1299, 726, 1309, 1310,
	1072, 1073, 1074, 1051, 1052, 1053, 1323, 1152, 414, 414,
	842, 926, 1688, 1687, 1687, 1181, 1357, 625, 1688, 1607,
	1402, 860, 1325, 67, 1360, 1324, 69, 47, 414, 62,
	1, 1342, 1329, 1341, 1291, 1449, 1532, 97, 1352, 1099,
	1626, 1348, 1015, 1006, 1121, 76, 300, 534, 414, 75,
	414, 414, 1616, 890, 1081, 1328, 572, 1278, 1522, 278,
	1013, 1233, 1232, 1376, 1229, 1381, 1392, 1244, 1027, 408,
	1231, 397, 1230, 1234, 756, 745, 538, 754, 540, 613,
	1379, 755, 1391, 1396, 1397, 1398, 1385, 753, 548, 1361,
	1009, 54, 1009, 758, 555, 757, 1026, 752, 1287, 100,
	894, 1270, 281, 100, 100, 401, 744, 626, 48, 1525,
	1305, 1093, 79, 848, 579, 1382, 1383, 1384, 580, 98,
	283, 662, 295, 1124, 1407, 1408, 1422, 1423, 98, 1211,
	407, 1411, 1363, 414, 1645, 614, 100, 414, 1414, 1595,
	1537, 1160, 414, 1409, 691, 414, 414, 414, 942, 414,
	328, 1433, 100, 399, 339, 1367, 1431, 1426, 98, 881,
	98, 1434, 352, 349, 350, 724, 724, 724, 724, 724,
	98, 1085, 872, 1173, 636, 337, 98, 1444, 329, 723,
	724, 716, 1387, 965, 963, 962, 823, 396, 1374, 1370,
	1455, 1323, 724, 722, 1320, 586, 297, 1474, 668, 669,
	670, 671, 672, 673, 674, 675, 1602, 808, 876, 1181,
	28, 66, 1362, 414, 414, 414, 324, 19, 18, 17,
	1462, 592, 414, 20, 21, 22, 408, 408, 16, 1480,
	414, 1490, 15, 408, 408, 725, 408, 1456, 1218, 1497,
	14, 547, 32, 1458, 408, 408, 1496, 1500, 1501, 1489,
	36, 35, 34, 10, 1467, 1468, 1249, 1250, 1251, 1253,
	1502, 1473, 1507, 1506, 1009, 1071, 814, 23, 557, 13,
	12, 11, 408, 9, 1482, 1483, 1484, 1658, 1487, 414,
	8, 1521, 327, 4, 315, 25, 1508, 2, 873, 0,
	0, 0, 1495, 0, 1432, 1529, 1454, 1396, 1517, 632,
	0, 1523, 408, 0, 0, 1437, 0, 604, 0, 1509,
	0, 1511, 0, 1530, 0, 0, 414, 414, 0, 414,
	0, 1534, 0, 0, 414, 0, 100, 0, 100, 0,
	1360, 0, 0, 0, 0, 414, 0, 54, 0, 1551,
	0, 0, 0, 921, 0, 414, 0, 0, 0, 1560,
	98, 1578, 1561, 0, 1539, 0, 1571, 1559, 1572, 414,
	1566, 946, 0, 0, 1558, 0, 414, 100, 0, 0,
	0, 1579, 0, 0, 0, 0, 0, 0, 950, 951,
	0, 1589, 0, 1585, 0, 0, 1574, 1546, 1575, 98,
	718, 0, 727, 414, 0, 1361, 0, 0, 1554, 1593,
	0, 1360, 1608, 0, 408, 0, 0, 0, 0, 0,
	0, 1563, 1614, 1564, 1565, 414, 0, 408, 0, 0,
	0, 1623, 414, 414, 0, 0, 0, 1612, 0, 0,
	0, 0, 0, 1624, 0, 1629, 0, 0, 0, 1630,
	0, 414, 1633, 0, 847, 1590, 0, 0, 1181, 1638,
	100, 0, 0, 0, 1598, 1599, 1600, 1601, 1515, 414,
	0, 1605, 1606, 0, 1534, 1009, 1361, 1653, 54, 0,
	0, 0, 98, 98, 98, 1410, 0, 0, 0, 408,
	414, 408, 0, 0, 1661, 1660, 1665, 1668, 414, 1666,
	1614, 1664, 0, 891, 0, 0, 900, 901, 902, 903,
	904, 905, 906, 907, 908, 909, 910, 911, 912, 913,
	914, 0, 1685, 1683, 1675, 1634, 0, 0, 0, 1553,
	1696, 1670, 1639, 1582, 0, 724, 0, 0, 0, 0,
	0, 0, 408, 751, 1588, 1477, 0, 0, 0, 1650,
	0, 0, 0, 0, 817, 0, 0, 397, 0, 0,
	824, 0, 0, 949, 1459, 1460, 0, 1461, 0, 54,
	1463, 0, 1465, 0, 0, 836, 0, 838, 0, 0,
	839, 0, 291, 643, 642, 652, 653, 645, 646, 647,
	648, 649, 650, 651, 644, 0, 1622, 654, 0, 1609,
	1681, 0, 0, 0, 1625, 0, 612, 616, 0, 288,
	0, 852, 1697, 1698, 0, 0, 859, 0, 0, 0,
	0, 0, 0, 635, 1471, 98, 0, 0, 1505, 0,
	0, 0, 0, 878, 0, 0, 98, 0, 946, 98,
	0, 0, 98, 0, 0, 0, 828, 0, 0, 0,
	0, 0, 0, 974, 0, 0, 0, 98, 679, 98,
	271, 0, 98, 0, 0, 0, 0, 274, 0, 692,
	0, 0, 0, 0, 0, 0, 0, 282, 289, 290,
	0, 0, 0, 982, 984, 408, 0, 0, 0, 0,
	1659, 0, 0, 98, 0, 0, 0, 0, 98, 0,
	643, 642, 652, 653, 645, 646, 647, 648, 649, 650,
	651, 644, 0, 280, 654, 98, 0, 0, 0, 287,
	0, 0, 0, 0, 828, 959, 643, 642, 652, 653,
	645, 646, 647, 648, 649, 650, 651, 644, 990, 0,
	654, 0, 0, 1269, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 272, 408, 0, 408, 408, 0,
	0, 0, 0, 983, 1136, 1137, 1138, 0, 0, 0,
	0, 328, 328, 0, 0, 0, 328, 328, 328, 328,
	0, 0, 0, 947, 0, 284, 275, 276, 0, 285,
	286, 294, 0, 0, 0, 277, 279, 0, 273, 293,
	292, 0, 328, 328, 328, 328, 1470, 98, 0, 0,
	0, 408, 0, 0, 0, 98, 985, 0, 1067, 98,
	98, 0, 0, 98, 993, 828, 1075, 1076, 0, 0,
	1077, 643, 642, 652, 653, 645, 646, 647, 648, 649,
	650, 651, 644, 408, 0, 654, 0, 0, 0, 0,
	1084, 0, 946, 0, 0, 1364, 1366, 0, 1092, 0,
	0, 0, 1111, 1112, 1113, 1114, 1115, 0, 0, 0,
	0, 0, 0, 0, 0, 1366, 0, 0, 846, 0,
	0, 0, 643, 642, 652, 653, 645, 646, 647, 648,
	649, 650, 651, 644, 0, 408, 654, 408, 1395, 0,
	98, 0, 0, 0, 0, 0, 0, 0, 98, 98,
	0, 0, 98, 0, 0, 0, 0, 0, 0, 0,
	879, 880, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 0, 1087, 1088, 0, 0, 0, 0,
	98, 0, 0, 0, 98, 98, 98, 98, 98, 0,
	0, 0, 0, 0, 828, 0, 0, 1286, 0, 0,
	0, 0, 0, 0, 0, 0, 328, 0, 0, 0,
	0, 0, 0, 679, 0, 0, 0, 931, 932, 0,
	1439, 0, 0, 0, 1443, 0, 0, 0, 0, 1446,
	0, 0, 1451, 1452, 1453, 0, 408, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1327, 0, 0,
	0, 0, 328, 0, 0, 0, 0, 0, 1343, 1344,
	0, 1345, 1346, 0, 0, 0, 0, 0, 0, 0,
	0, 328, 0, 0, 1353, 1354, 1003, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 946, 0, 0, 0,
	947, 98, 98, 98, 98, 98, 0, 1469, 0, 0,
	1499, 1499, 1499, 1195, 0, 1380, 98, 0, 0, 408,
	985, 0, 0, 0, 0, 0, 0, 1499, 98, 0,
	0, 0, 0, 0, 0, 0, 1275, 0, 0, 638,
	0, 641, 0, 0, 0, 0, 0, 655, 656, 657,
	658, 659, 660, 661, 1401, 639, 640, 637, 643, 642,
	652, 653, 645, 646, 647, 648, 649, 650, 651, 644,
	0, 0, 654, 0, 0, 0, 408, 0, 0, 0,
	0, 0, 1319, 643, 642, 652, 653, 645, 646, 647,
	648, 649, 650, 651, 644, 0, 0, 654, 0, 0,
	0, 0, 1429, 0, 0, 1119, 1120, 0, 616, 0,
	0, 0, 0, 1555, 1556, 0, 1557, 0, 98, 0,
	0, 1499, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1395, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1395, 1457, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1587, 26, 27, 55,
	29, 30, 0, 1499, 98, 0, 0, 1143, 0, 0,
	0, 0, 0, 0, 328, 0, 60, 0, 0, 0,
	31, 51, 52, 0, 0, 328, 0, 1163, 0, 0,
	1613, 0, 0, 0, 778, 0, 0, 0, 0, 0,
	0, 0, 0, 42, 0, 828, 0, 61, 0, 0,
	0, 0, 1395, 0, 947, 0, 0, 0, 0, 408,
	408, 1140, 0, 0, 0, 0, 1421, 0, 0, 0,
	1424, 1425, 0, 0, 0, 946, 0, 0, 1640, 0,
	0, 643, 642, 652, 653, 645, 646, 647, 648, 649,
	650, 651, 644, 0, 0, 654, 1652, 0, 0, 0,
	0, 0, 0, 1442, 0, 0, 0, 0, 33, 57,
	38, 37, 40, 0, 53, 765, 0, 1395, 0, 0,
	0, 0, 0, 0, 0, 1499, 1541, 1542, 1543, 1544,
	1545, 0, 0, 0, 1548, 1549, 0, 0, 0, 0,
	41, 59, 58, 0, 0, 49, 50, 39, 98, 0,
	0, 0, 98, 98, 0, 0, 0, 779, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 43, 44, 0,
	45, 46, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 98, 792, 795, 796, 797,
	798, 799, 800, 0, 801, 802, 803, 804, 805, 806,
	807, 98, 780, 781, 782, 783, 759, 763, 793, 760,
	766, 762, 764, 761, 0, 767, 768, 769, 770, 771,
	772, 773, 774, 775, 776, 777, 784, 785, 786, 787,
	788, 789, 790, 791, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1350, 0, 0, 947, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	56, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 794, 0, 0, 1386, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1594, 0, 0, 0, 1689, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1428, 0, 0,
	0, 0, 0, 0, 0, 985, 0, 985, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 98, 1642, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1476, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 679, 0, 0, 0, 0, 0,
	0, 0, 1491, 0, 0, 1492, 0, 0, 1494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 947, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	521, 509, 0, 466, 524, 439, 456, 532, 457, 460,
	497, 424, 479, 184, 454, 0, 443, 419, 449, 420,
	441, 468, 130, 438, 511, 482, 523, 156, 522, 472,
	0, 530, 158, 488, 0, 230, 172, 0, 0, 470,
	513, 477, 506, 465, 498, 429, 487, 525, 455, 495,
	526, 0, 0, 0, 413, 0, 1010, 1011, 0, 0,
	0, 0, 0, 120, 0, 492, 520, 451, 494, 496,
	418, 489, 0, 422, 425, 531, 516, 446, 447, 1219,
	0, 0, 0, 0, 0, 0, 469, 478, 503, 463,
	0, 0, 0, 0, 0, 0, 0, 0, 444, 0,
	486, 0, 0, 0, 426, 423, 0, 0, 467, 0,
	0, 0, 428, 0, 445, 504, 0, 415, 138, 0,
	0, 508, 515, 464, 0, 259, 519, 462, 461, 203,
	0, 234, 141, 155, 116, 102, 112, 0, 140, 181,
	210, 214, 452, 416, 512, 442, 450, 124, 448, 212,
	191, 250, 0, 485, 193, 211, 159, 240, 204, 249,
	260, 261, 237, 257, 265, 227, 0, 0, 0, 1632,
	679, 105, 236, 248, 121, 222, 107, 246, 233, 170,
	150, 151, 106, 0, 208, 129, 136, 126, 183, 0,
	0, 0, 243, 244, 125, 268, 113, 256, 109, 114,
	255, 177, 0, 0, 0, 239, 247, 171, 164, 0,
	108, 245, 169, 163, 154, 133, 143, 201, 161, 202,
	144, 174, 173, 175, 0, 421, 0, 231, 253, 269,
	118, 437, 0, 238, 263, 264, 0, 0, 119, 137,
	132, 200, 176, 115, 146, 228, 153, 160, 207, 267,
	190, 213, 122, 252, 229, 433, 436, 431, 432, 480,
	481, 527, 528, 529, 505, 427, 0, 434, 435, 0,
	510, 517, 518, 484, 101, 110, 157, 266, 205, 135,
	254, 417, 430, 128, 440, 0, 0, 453, 458, 459,
	471, 473, 474, 475, 476, 483, 490, 491, 493, 499,
	500, 501, 502, 507, 514, 533, 103, 104, 111, 117,
	123, 127, 131, 134, 139, 142, 145, 147, 148, 149,
	152, 162, 165, 166, 167, 168, 178, 179, 180, 182,
	185, 186, 187, 188, 189, 192, 194, 195, 196, 197,
	198, 199, 206, 209, 215, 216, 217, 218, 219, 220,
	221, 223, 224, 225, 226, 232, 235, 241, 242, 251,
	258, 262, 521, 509, 0, 466, 524, 439, 456, 532,
	457, 460, 497, 424, 479, 184, 454, 0, 443, 419,
	449, 420, 441, 468, 130, 438, 511, 482, 523, 156,
	522, 472, 0, 530, 158, 488, 0, 230, 172, 0,
	0, 470, 513, 477, 506, 465, 498, 429, 487, 525,
	455, 495, 526, 0, 0, 0, 413, 0, 1010, 1011,
	0, 0, 0, 0, 0, 120, 0, 492, 520, 451,
	494, 496, 418, 489, 0, 422, 425, 531, 516, 446,
	447, 0, 0, 0, 0, 0, 0, 0, 469, 478,
	503, 463, 0, 0, 0, 0, 0, 0, 0, 0,
	444, 0, 486, 0, 0, 0, 426, 423, 0, 0,
	467, 0, 0, 0, 428, 0, 445, 504, 0, 415,
	138, 0, 0, 508, 515, 464, 0, 259, 519, 462,
	461, 203, 0, 234, 141, 155, 116, 102, 112, 0,
	140, 181, 210, 214, 452, 416, 512, 442, 450, 124,
	448, 212, 191, 250, 0, 485, 193, 211, 159, 240,
	204, 249, 260, 261, 237, 257, 265, 227, 0, 0,
	0, 0, 0, 105, 236, 248, 121, 222, 107, 246,
	233, 170, 150, 151, 106, 0, 208, 129, 136, 126,
	183, 0, 0, 0, 243, 244, 125, 268, 113, 256,
	109, 114, 255, 177, 0, 0, 0, 239, 247, 171,
	164, 0, 108, 245, 169, 163, 154, 133, 143, 201,
	161, 202, 144, 174, 173, 175, 0, 421, 0, 231,
	253, 269, 118, 437, 0, 238, 263, 264, 0, 0,
	119, 137, 132, 200, 176, 115, 146, 228, 153, 160,
	207, 267, 190, 213, 122, 252, 229, 433, 436, 431,
	432, 480, 481, 527, 528, 529, 505, 427, 0, 434,
	435, 0, 510, 517, 518, 484, 101, 110, 157, 266,
	205, 135, 254, 417, 430, 128, 440, 0, 0, 453,
	458, 459, 471, 473, 474, 475, 476, 483, 490, 491,
	493, 499, 500, 501, 502, 507, 514, 533, 103, 104,
	111, 117, 123, 127, 131, 134, 139, 142, 145, 147,
	148, 149, 152, 162, 165, 166, 167, 168, 178, 179,
	180, 182, 185, 186, 187, 188, 189, 192, 194, 195,
	196, 197, 198, 199, 206, 209, 215, 216, 217, 218,
	219, 220, 221, 223, 224, 225, 226, 232, 235, 241,
	242, 251, 258, 262, 521, 509, 0, 466, 524, 439,
	456, 532, 457, 460, 497, 424, 479, 184, 454, 0,
	443, 419, 449, 420, 441, 468, 130, 438, 511, 482,
	523, 156, 522, 472, 0, 530, 158, 488, 0, 230,
	172, 0, 0, 470, 513, 477, 506, 465, 498, 429,
	487, 525, 455, 495, 526, 0, 0, 0, 413, 0,
	0, 0, 0, 0, 0, 0, 0, 120, 0, 492,
	520, 451, 494, 496, 418, 489, 0, 422, 425, 531,
	516, 446, 447, 0, 0, 0, 0, 0, 0, 0,
	469, 478, 503, 463, 0, 0, 0, 0, 0, 0,
	1322, 0, 444, 0, 486, 0, 0, 0, 426, 423,
	0, 0, 467, 0, 0, 0, 428, 0, 445, 504,
	0, 415, 138, 0, 0, 508, 515, 464, 0, 259,
	519, 462, 461, 203, 0, 234, 141, 155, 116, 102,
	112, 0, 140, 181, 210, 214, 452, 416, 512, 442,
	450, 124, 448, 212, 191, 250, 0, 485, 193, 211,
	159, 240, 204, 249, 260, 261, 237, 257, 265, 227,
	0, 0, 0, 0, 0, 105, 236, 248, 121, 222,
	107, 246, 233, 170, 150, 151, 106, 0, 208, 129,
	136, 126, 183, 0, 0, 0, 243, 244, 125, 268,
	113, 256, 109, 114, 255, 177, 0, 0, 0, 239,
	247, 171, 164, 0, 108, 245, 169, 163, 154, 133,
	143, 201, 161, 202, 144, 174, 173, 175, 0, 421,
	0, 231, 253, 269, 118, 437, 0, 238, 263, 264,
	0, 0, 119, 137, 132, 200, 176, 115, 146, 228,
	153, 160, 207, 267, 190, 213, 122, 252, 229, 433,
	436, 431, 432, 480, 481, 527, 528, 529, 505, 427,
	0, 434, 435, 0, 510, 517, 518, 484, 101, 110,
	157, 266, 205, 135, 254, 417, 430, 128, 440, 0,
	0, 453, 458, 459, 471, 473, 474, 475, 476, 483,
	490, 491, 493, 499, 500, 501, 502, 507, 514, 533,
	103, 104, 111, 117, 123, 127, 131, 134, 139, 142,
	145, 147, 148, 149, 152, 162, 165, 166, 167, 168,
	178, 179, 180, 182, 185, 186, 187, 188, 189, 192,
	194, 195, 196, 197, 198, 199, 206, 209, 215, 216,
	217, 218, 219, 220, 221, 223, 224, 225, 226, 232,
	235, 241, 242, 251, 258, 262, 521, 509, 0, 466,
	524, 439, 456, 532, 457, 460, 497, 424, 479, 184,
	454, 0, 443, 419, 449, 420, 441, 468, 130, 438,
	511, 482, 523, 156, 522, 472, 0, 530, 158, 488,
	0, 230, 172, 0, 0, 470, 513, 477, 506, 465,
	498, 429, 487, 525, 455, 495, 526, 61, 0, 0,
	413, 0, 0, 0, 0, 0, 0, 0, 0, 120,
	0, 492, 520, 451, 494, 496, 418, 489, 0, 422,
	425, 531, 516, 446, 447, 0, 0, 0, 0, 0,
	0, 0, 469, 478, 503, 463, 0, 0, 0, 0,
	0, 0, 0, 0, 444, 0, 486, 0, 0, 0,
	426, 423, 0, 0, 467, 0, 0, 0, 428, 0,
	445, 504, 0, 415, 138, 0, 0, 508, 515, 464,
	0, 259, 519, 462, 461, 203, 0, 234, 141, 155,
	116, 102, 112, 0, 140, 181, 210, 214, 452, 416,
	512, 442, 450, 124, 448, 212, 191, 250, 0, 485,
	193, 211, 159, 240, 204, 249, 260, 261, 237, 257,
	265, 227, 0, 0, 0, 0, 0, 105, 236, 248,
	121, 222, 107, 246, 233, 170, 150, 151, 106, 0,
	208, 129, 136, 126, 183, 0, 0, 0, 243, 244,
	125, 268, 113, 256, 109, 114, 255, 177, 0, 0,
	0, 239, 247, 171, 164, 0, 108, 245, 169, 163,
	154, 133, 143, 201, 161, 202, 144, 174, 173, 175,
	0, 421, 0, 231, 253, 269, 118, 437, 0, 238,
	263, 264, 0, 0, 119, 137, 132, 200, 176, 115,
	146, 228, 153, 160, 207, 267, 190, 213, 122, 252,
	229, 433, 436, 431, 432, 480, 481, 527, 528, 529,
	505, 427, 0, 434, 435, 0, 510, 517, 518, 484,
	101, 110, 157, 266, 205, 135, 254, 417, 430, 128,
	440, 0, 0, 453, 458, 459, 471, 473, 474, 475,
	476, 483, 490, 491, 493, 499, 500, 501, 502, 507,
	514, 533, 103, 104, 111, 117, 123, 127, 131, 134,
	139, 142, 145, 147, 148, 149, 152, 162, 165, 166,
	167, 168, 178, 179, 180, 182, 185, 186, 187, 188,
	189, 192, 194, 195, 196, 197, 198, 199, 206, 209,
	215, 216, 217, 218, 219, 220, 221, 223, 224, 225,
	226, 232, 235, 241, 242, 251, 258, 262, 521, 509,
	0, 466, 524, 439, 456, 532, 457, 460, 497, 424,
	479, 184, 454, 0, 443, 419, 449, 420, 441, 468,
	130, 438, 511, 482, 523, 156, 522, 472, 0, 530,
	158, 488, 0, 230, 172, 0, 0, 470, 513, 477,
	506, 465, 498, 429, 487, 525, 455, 495, 526, 0,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 0,
	0, 120, 0, 492, 520, 451, 494, 496, 418, 489,
	0, 422, 425, 531, 516, 446, 447, 0, 0, 0,
	0, 0, 0, 0, 469, 478, 503, 463, 0, 0,
	0, 0, 0, 0, 994, 0, 444, 0, 486, 0,
	0, 0, 426, 423, 0, 0, 467, 0, 0, 0,
	428, 0, 445, 504, 0, 415, 138, 0, 0, 508,
	515, 464, 0, 259, 519, 462, 461, 203, 0, 234,
	141, 155, 116, 102, 112, 0, 140, 181, 210, 214,
	452, 416, 512, 442, 450, 124, 448, 212, 191, 250,
	0, 485, 193, 211, 159, 240, 204, 249, 260, 261,
	237, 257, 265, 227, 0, 0, 0, 0, 0, 105,
	236, 248, 121, 222, 107, 246, 233, 170, 150, 151,
	106, 0, 208, 129, 136, 126, 183, 0, 0, 0,
	243, 244, 125, 268, 113, 256, 109, 114, 255, 177,
	0, 0, 0, 239, 247, 171, 164, 0, 108, 245,
	169, 163, 154, 133, 143, 201, 161, 202, 144, 174,
	173, 175, 0, 421, 0, 231, 253, 269, 118, 437,
	0, 238, 263, 264, 0, 0, 119, 137, 132, 200,
	176, 115, 146, 228, 153, 160, 207, 267, 190, 213,
	122, 252, 229, 433, 436, 431, 432, 480, 481, 527,
	528, 529, 505, 427, 0, 434, 435, 0, 510, 517,
	518, 484, 101, 110, 157, 266, 205, 135, 254, 417,
	430, 128, 440, 0, 0, 453, 458, 459, 471, 473,
	474, 475, 476, 483, 490, 491, 493, 499, 500, 501,
	502, 507, 514, 533, 103, 104, 111, 117, 123, 127,
	131, 134, 139, 142, 145, 147, 148, 149, 152, 162,
	165, 166, 167, 168, 178, 179, 180, 182, 185, 186,
	187, 188, 189, 192, 194, 195, 196, 197, 198, 199,
	206, 209, 215, 216, 217, 218, 219, 220, 221, 223,
	224, 225, 226, 232, 235, 241, 242, 251, 258, 262,
	521, 509, 0, 466, 524, 439, 456, 532, 457, 460,
	497, 424, 479, 184, 454, 0, 443, 419, 449, 420,
	441, 468, 130, 438, 511, 482, 523, 156, 522, 472,
	0, 530, 158, 488, 0, 230, 172, 0, 0, 470,
	513, 477, 506, 465, 498, 429, 487, 525, 455, 495,
	526, 0, 0, 0, 333, 0, 0, 0, 0, 0,
	0, 0, 0, 120, 0, 492, 520, 451, 494, 496,
	418, 489, 0, 422, 425, 531, 516, 446, 447, 0,
	0, 0, 0, 0, 0, 0, 469, 478, 503, 463,
	0, 0, 0, 0, 0, 0, 887, 0, 444, 0,
	486, 0, 0, 0, 426, 423, 0, 0, 467, 0,
	0, 0, 428, 0, 445, 504, 0, 415, 138, 0,
	0, 508, 515, 464, 0, 259, 519, 462, 461, 203,
	0, 234, 141, 155, 116, 102, 112, 0, 140, 181,
	210, 214, 452, 416, 512, 442, 450, 124, 448, 212,
	191, 250, 0, 485, 193, 211, 159, 240, 204, 249,
	260, 261, 237, 257, 265, 227, 0, 0, 0, 0,
	0, 105, 236, 248, 121, 222, 107, 246, 233, 170,
	150, 151, 106, 0, 208, 129, 136, 126, 183, 0,
	0, 0, 243, 244, 125, 268, 113, 256, 109, 114,
	255, 177, 0, 0, 0, 239, 247, 171, 164, 0,
	108, 245, 169, 163, 154, 133, 143, 201, 161, 202,
	144, 174, 173, 175, 0, 421, 0, 231, 253, 269,
	118, 437, 0, 238, 263, 264, 0, 0, 119, 137,
	132, 200, 176, 115, 146, 228, 153, 160, 207, 267,
	190, 213, 122, 252, 229, 433, 436, 431, 432, 480,
	481, 527, 528, 529, 505, 427, 0, 434, 435, 0,
	510, 517, 518, 484, 101, 110, 157, 266, 205, 135,
	254, 417, 430, 128, 440, 0, 0, 453, 458, 459,
	471, 473, 474, 475, 476, 483, 490, 491, 493, 499,
	500, 501, 502, 507, 514, 533, 103, 104, 111, 117,
	123, 127, 131, 134, 139, 142, 145, 147, 148, 149,
	152, 162, 165, 166, 167, 168, 178, 179, 180, 182,
	185, 186, 187, 188, 189, 192, 194, 195, 196, 197,
	198, 199, 206, 209, 215, 216, 217, 218, 219, 220,
	221, 223, 224, 225, 226, 232, 235, 241, 242, 251,
	258, 262, 521, 509, 0, 466, 524, 439, 456, 532,
	457, 460, 497, 424, 479, 184, 454, 0, 443, 419,
	449, 420, 441, 468, 130, 438, 511, 482, 523, 156,
	522, 472, 0, 530, 158, 488, 0, 230, 172, 0,
	0, 470, 513, 477, 506, 465, 498, 429, 487, 525,
	455, 495, 526, 0, 0, 0, 413, 0, 0, 0,
	0, 0, 0, 0, 0, 120, 0, 492, 520, 451,
	494, 496, 418, 489, 0, 422, 425, 531, 516, 446,
	447, 0, 0, 0, 0, 0, 0, 0, 469, 478,
	503, 463, 0, 0, 0, 0, 0, 0, 0, 0,
	444, 0, 486, 0, 0, 0, 426, 423, 0, 0,
	467, 0, 0, 0, 428, 0, 445, 504, 0, 415,
	138, 0, 0, 508, 515, 464, 0, 259, 519, 462,
	461, 203, 0, 234, 141, 155, 116, 102, 112, 0,
	140, 181, 210, 214, 452, 416, 512, 442, 450, 124,
	448, 212, 191, 250, 0, 485, 193, 211, 159, 240,
	204, 249, 260, 261, 237, 257, 265, 227, 0, 0,
	0, 0, 0, 105, 236, 248, 121, 222, 107, 246,
	233, 170, 150, 151, 106, 0, 208, 129, 136, 126,
	183, 0, 0, 0, 243, 244, 125, 268, 113, 256,
	109, 114, 255, 177, 0, 0, 0, 239, 247, 171,
	164, 0, 108, 245, 169, 163, 154, 133, 143, 201,
	161, 202, 144, 174, 173, 175, 0, 421, 0, 231,
	253, 269, 118, 437, 0, 238, 263, 264, 0, 0,
	119, 137, 132, 200, 176, 115, 146, 228, 153, 160,
	207, 267, 190, 213, 122, 252, 229, 433, 436, 431,
	432, 480, 481, 527, 528, 529, 505, 427, 0, 434,
	435, 0, 510, 517, 518, 484, 101, 110, 157, 266,
	205, 135, 254, 417, 430, 128, 440, 0, 0, 453,
	458, 459, 471, 473, 474, 475, 476, 483, 490, 491,
	493, 499, 500, 501, 502, 507, 514, 533, 103, 104,
	111, 117, 123, 127, 131, 134, 139, 142, 145, 147,
	148, 149, 152, 162, 165, 166, 167, 168, 178, 179,
	180, 182, 185, 186, 187, 188, 189, 192, 194, 195,
	196, 197, 198, 199, 206, 209, 215, 216, 217, 218,
	219, 220, 221, 223, 224, 225, 226, 232, 235, 241,
	242, 251, 258, 262, 521, 509, 0, 466, 524, 439,
	456, 532, 457, 460, 497, 424, 479, 184, 454, 0,
	443, 419, 449, 420, 441, 468, 130, 438, 511, 482,
	523, 156, 522, 472, 0, 530, 158, 488, 0, 230,
	172, 0, 0, 470, 513, 477, 506, 465, 498, 429,
	487, 525, 455, 495, 526, 0, 0, 0, 333, 0,
	0, 0, 0, 0, 0, 0, 0, 120, 0, 492,
	520, 451, 494, 496, 418, 489, 0, 422, 425, 531,
	516, 446, 447, 0, 0, 0, 0, 0, 0, 0,
	469, 478, 503, 463, 0, 0, 0, 0, 0, 0,
	0, 0, 444, 0, 486, 0, 0, 0, 426, 423,
	0, 0, 467, 0, 0, 0, 428, 0, 445, 504,
	0, 415, 138, 0, 0, 508, 515, 464, 0, 259,
	519, 462, 461, 203, 0, 234, 141, 155, 116, 102,
	112, 0, 140, 181, 210, 214, 452, 416, 512, 442,
	450, 124, 448, 212, 191, 250, 0, 485, 193, 211,
	159, 240, 204, 249, 260, 261, 237, 257, 265, 227,
	0, 0, 0, 0, 0, 105, 236, 248, 121, 222,
	107, 246, 233, 170, 150, 151, 106, 0, 208, 129,
	136, 126, 183, 0, 0, 0, 243, 244, 125, 268,
	113, 256, 109, 114, 255, 177, 0, 0, 0, 239,
	247, 171, 164, 0, 108, 245, 169, 163, 154, 133,
	143, 201, 161, 202, 144, 174, 173, 175, 0, 421,
	0, 231, 253, 269, 118, 437, 0, 238, 263, 264,
	0, 0, 119, 137, 132, 200, 176, 115, 146, 228,
	153, 160, 207, 267, 190, 213, 122, 252, 229, 433,
	436, 431, 432, 480, 481, 527, 528, 529, 505, 427,
	0, 434, 435, 0, 510, 517, 518, 484, 101, 110,
	157, 266, 205, 135, 254, 417, 430, 128, 440, 0,
	0, 453, 458, 459, 471, 473, 474, 475, 476, 483,
	490, 491, 493, 499, 500, 501, 502, 507, 514, 533,
	103, 104, 111, 117, 123, 127, 131, 134, 139, 142,
	145, 147, 148, 149, 152, 162, 165, 166, 167, 168,
	178, 179, 180, 182, 185, 186, 187, 188, 189, 192,
	194, 195, 196, 197, 198, 199, 206, 209, 215, 216,
	217, 218, 219, 220, 221, 223, 224, 225, 226, 232,
	235, 241, 242, 251, 258, 262, 521, 509, 0, 466,
	524, 439, 456, 532, 457, 460, 497, 424, 479, 184,
	454, 0, 443, 419, 449, 420, 441, 468, 130, 438,
	511, 482, 523, 156, 522, 472, 0, 530, 158, 488,
	0, 230, 172, 0, 0, 470, 513, 477, 506, 465,
	498, 429, 487, 525, 455, 495, 526, 0, 0, 0,
	413, 0, 0, 0, 0, 0, 0, 0, 0, 120,
	0, 492, 520, 451, 494, 496, 418, 489, 0, 422,
	425, 531, 516, 446, 447, 0, 0, 0, 0, 0,
	0, 0, 469, 478, 503, 463, 0, 0, 0, 0,
	0, 0, 0, 0, 444, 0, 486, 0, 0, 0,
	426, 423, 0, 0, 467, 0, 0, 0, 428, 0,
	445, 504, 0, 415, 138, 0, 0, 508, 515, 464,
	0, 259, 519, 462, 461, 203, 0, 234, 141, 155,
	116, 102, 112, 0, 140, 181, 210, 214, 452, 416,
	512, 442, 450, 124, 448, 212, 191, 250, 0, 485,
	193, 211, 159, 240, 204, 249, 260, 261, 237, 257,
	265, 227, 0, 0, 0, 0, 0, 105, 236, 248,
	121, 222, 107, 246, 233, 170, 150, 151, 106, 0,
	208, 129, 136, 126, 183, 0, 0, 0, 243, 244,
	125, 268, 113, 256, 109, 411, 255, 177, 0, 0,
	0, 239, 247, 171, 164, 0, 108, 245, 169, 163,
	154, 133, 143, 201, 161, 202, 144, 174, 173, 175,
	0, 421, 0, 231, 253, 269, 118, 437, 0, 238,
	263, 264, 0, 0, 119, 137, 132, 200, 412, 410,
	146, 228, 153, 160, 207, 267, 190, 213, 122, 252,
	229, 433, 436, 431, 432, 480, 481, 527, 528, 529,
	505, 427, 0, 434, 435, 0, 510, 517, 518, 484,
	101, 110, 157, 266, 205, 135, 254, 417, 430, 128,
	440, 0, 0, 453, 458, 459, 471, 473, 474, 475,
	476, 483, 490, 491, 493, 499, 500, 501, 502, 507,
	514, 533, 103, 104, 111, 117, 123, 127, 131, 134,
	139, 142, 145, 147, 148, 149, 152, 162, 165, 166,
	167, 168, 178, 179, 180, 182, 185, 186, 187, 188,
	189, 192, 194, 195, 196, 197, 198, 199, 206, 209,
	215, 216, 217, 218, 219, 220, 221, 223, 224, 225,
	226, 232, 235, 241, 242, 251, 258, 262, 521, 509,
	0, 466, 524, 439, 456, 532, 457, 460, 497, 424,
	479, 184, 454, 0, 443, 419, 449, 420, 441, 468,
	130, 438, 511, 482, 523, 156, 522, 472, 0, 530,
	158, 488, 0, 230, 172, 0, 0, 470, 513, 477,
	506, 465, 498, 429, 487, 525, 455, 495, 526, 0,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 0,
	0, 120, 0, 492, 520, 451, 494, 496, 418, 489,
	0, 422, 425, 531, 516, 446, 447, 0, 0, 0,
	0, 0, 0, 0, 469, 478, 503, 463, 0, 0,
	0, 0, 0, 0, 0, 0, 444, 0, 486, 0,
	0, 0, 426, 423, 0, 0, 467, 0, 0, 0,
	428, 0, 445, 504, 0, 415, 138, 0, 0, 508,
	515, 464, 0, 259, 519, 462, 461, 203, 0, 234,
	141, 155, 116, 102, 112, 0, 140, 181, 210, 214,
	452, 416, 512, 442, 450, 124, 448, 212, 191, 250,
	0, 485, 193, 211, 159, 240, 204, 249, 260, 261,
	237, 257, 265, 227, 0, 0, 0, 0, 0, 105,
	236, 248, 121, 222, 107, 246, 233, 170, 150, 151,
	106, 0, 208, 129, 136, 126, 183, 0, 0, 0,
	243, 244, 125, 268, 113, 256, 109, 114, 255, 177,
	0, 0, 0, 239, 247, 171, 164, 0, 108, 245,
	169, 163, 154, 133, 143, 201, 161, 202, 144, 174,
	173, 175, 0, 421, 0, 231, 253, 269, 118, 437,
	0, 238, 263, 264, 0, 0, 119, 137, 132, 200,
	176, 115, 146, 228, 153, 160, 207, 267, 190, 213,
	122, 252, 229, 433, 436, 431, 432, 480, 481, 527,
	528, 529, 505, 427, 0, 434, 435, 0, 510, 517,
	518, 484, 101, 110, 157, 266, 205, 135, 254, 417,
	430, 128, 440, 0, 0, 453, 458, 459, 471, 473,
	474, 475, 476, 483, 490, 491, 493, 499, 500, 501,
	502, 507, 514, 533, 103, 104, 111, 117, 123, 127,
	131, 134, 139, 142, 145, 147, 148, 149, 152, 162,
	165, 166, 167, 168, 178, 179, 180, 182, 185, 186,
	187, 188, 189, 192, 194, 195, 196, 197, 198, 199,
	206, 209, 215, 216, 217, 218, 219, 220, 221, 223,
	224, 225, 226, 232, 235, 241, 242, 251, 258, 262,
	521, 509, 0, 466, 524, 439, 456, 532, 457, 460,
	497, 424, 479, 184, 454, 0, 443, 419, 449, 420,
	441, 468, 130, 438, 511, 482, 523, 156, 522, 472,
	0, 530, 158, 488, 0, 230, 172, 0, 0, 470,
	513, 477, 506, 465, 498, 429, 487, 525, 455, 495,
	526, 0, 0, 0, 413, 0, 0, 0, 0, 0,
	0, 0, 0, 120, 0, 492, 520, 451, 494, 496,
	418, 489, 0, 422, 425, 531, 516, 446, 447, 0,
	0, 0, 0, 0, 0, 0, 469, 478, 503, 463,
	0, 0, 0, 0, 0, 0, 0, 0, 444, 0,
	486, 0, 0, 0, 426, 423, 0, 0, 467, 0,
	0, 0, 428, 0, 445, 504, 0, 415, 138, 0,
	0, 508, 515, 464, 0, 259, 519, 462, 461, 203,
	0, 234, 141, 155, 116, 102, 112, 0, 140, 181,
	210, 214, 452, 416, 512, 442, 450, 124, 448, 212,
	191, 250, 0, 485, 193, 211, 159, 240, 204, 249,
	260, 261, 237, 257, 265, 227, 0, 0, 0, 0,
	0, 105, 236, 738, 121, 222, 107, 246, 233, 170,
	150, 151, 106, 0, 208, 129, 136, 126, 183, 0,
	0, 0, 243, 244, 125, 268, 113, 256, 109, 411,
	255, 177, 0, 0, 0, 239, 247, 171, 164, 0,
	108, 245, 169, 163, 154, 133, 143, 201, 161, 202,
	144, 174, 173, 175, 0, 421, 0, 231, 253, 269,
	118, 437, 0, 238, 263, 264, 0, 0, 119, 137,
	132, 200, 412, 410, 146, 228, 153, 160, 207, 267,
	190, 213, 122, 252, 229, 433, 436, 431, 432, 480,
	481, 527, 528, 529, 505, 427, 0, 434, 435, 0,
	510, 517, 518, 484, 101, 110, 157, 266, 205, 135,
	254, 417, 430, 128, 440, 0, 0, 453, 458, 459,
	471, 473, 474, 475, 476, 483, 490, 491, 493, 499,
	500, 501, 502, 507, 514, 533, 103, 104, 111, 117,
	123, 127, 131, 134, 139, 142, 145, 147, 148, 149,
	152, 162, 165, 166, 167, 168, 178, 179, 180, 182,
	185, 186, 187, 188, 189, 192, 194, 195, 196, 197,
	198, 199, 206, 209, 215, 216, 217, 218, 219, 220,
	221, 223, 224, 225, 226, 232, 235, 241, 242, 251,
	258, 262, 521, 509, 0, 466, 524, 439, 456, 532,
	457, 460, 497, 424, 479, 184, 454, 0, 443, 419,
	449, 420, 441, 468, 130, 438, 511, 482, 523, 156,
	522, 472, 0, 530, 158, 488, 0, 230, 172, 0,
	0, 470, 513, 477, 506, 465, 498, 429, 487, 525,
	455, 495, 526, 0, 0, 0, 413, 0, 0, 0,
	0, 0, 0, 0, 0, 120, 0, 492, 520, 451,
	494, 496, 418, 489, 0, 422, 425, 531, 516, 446,
	447, 0, 0, 0, 0, 0, 0, 0, 469, 478,
	503, 463, 0, 0, 0, 0, 0, 0, 0, 0,
	444, 0, 486, 0, 0, 0, 426, 423, 0, 0,
	467, 0, 0, 0, 428, 0, 445, 504, 0, 415,
	138, 0, 0, 508, 515, 464, 0, 259, 519, 462,
	461, 203, 0, 234, 141, 155, 116, 102, 112, 0,
	140, 181, 210, 214, 452, 416, 512, 442, 450, 124,
	448, 212, 191, 250, 0, 485, 193, 211, 159, 240,
	204, 249, 260, 261, 237, 257, 265, 227, 0, 0,
	0, 0, 0, 105, 236, 402, 121, 222, 107, 246,
	233, 170, 150, 151, 106, 0, 208, 129, 136, 126,
	183, 0, 0, 0, 243, 244, 125, 268, 113, 256,
	109, 411, 255, 177, 0, 0, 0, 239, 247, 171,
	164, 0, 108, 245, 169, 163, 154, 133, 143, 201,
	161, 202, 144, 174, 173, 175, 0, 421, 0, 231,
	253, 269, 118, 437, 0, 238, 263, 264, 0, 0,
	119, 137, 132, 200, 412, 410, 405, 404, 153, 160,
	207, 267, 190, 213, 122, 252, 229, 433, 436, 431,
	432, 480, 481, 527, 528, 529, 505, 427, 0, 434,
	435, 0, 510, 517, 518, 484, 101, 110, 157, 266,
	205, 135, 254, 417, 430, 128, 440, 0, 0, 453,
	458, 459, 471, 473, 474, 475, 476, 483, 490, 491,
	493, 499, 500, 501, 502, 507, 514, 533, 103, 104,
	111, 117, 123, 127, 131, 134, 139, 142, 145, 147,
	148, 149, 152, 162, 165, 166, 167, 168, 178, 179,
	180, 182, 185, 186, 187, 188, 189, 192, 194, 195,
	196, 197, 198, 199, 206, 209, 215, 216, 217, 218,
	219, 220, 221, 223, 224, 225, 226, 232, 235, 241,
	242, 251, 258, 262, 184, 0, 0, 0, 0, 335,
	0, 0, 0, 130, 332, 0, 0, 0, 156, 0,
	0, 0, 377, 158, 0, 0, 230, 172, 0, 0,
	0, 0, 366, 367, 0, 0, 0, 0, 0, 0,
	1001, 0, 61, 0, 0, 333, 354, 353, 356, 357,
	358, 359, 0, 0, 120, 355, 360, 361, 362, 1002,
	0, 0, 330, 347, 0, 376, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 344, 345, 0, 0, 0,
	0, 390, 0, 346, 0, 0, 341, 342, 343, 348,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	0, 0, 368, 0, 0, 0, 259, 0, 0, 388,
	203, 0, 234, 141, 155, 116, 102, 112, 0, 140,
	181, 210, 214, 374, 0, 0, 0, 0, 124, 0,
	212, 191, 250, 0, 0, 193, 211, 159, 240, 204,
	249, 260, 261, 237, 257, 265, 227, 0, 0, 0,
	0, 0, 105, 236, 248, 121, 222, 107, 246, 233,
	170, 150, 151, 106, 0, 208, 129, 136, 126, 183,
	0, 0, 0, 243, 244, 125, 268, 113, 256, 109,
	114, 255, 177, 0, 0, 0, 239, 247, 171, 164,
	0, 108, 245, 169, 163, 154, 133, 143, 201, 161,
	202, 144, 174, 173, 175, 0, 0, 0, 231, 253,
	269, 118, 0, 0, 238, 263, 264, 0, 0, 119,
	137, 132, 200, 176, 115, 146, 228, 153, 160, 207,
	267, 190, 213, 122, 252, 229, 378, 389, 384, 385,
	382, 383, 381, 380, 379, 391, 369, 370, 371, 372,
	375, 0, 386, 387, 373, 101, 110, 157, 266, 205,
	135, 254, 0, 0, 128, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 104, 111,
	117, 123, 127, 131, 134, 139, 142, 145, 147, 148,
	149, 152, 162, 165, 166, 167, 168, 178, 179, 180,
	182, 185, 186, 187, 188, 189, 192, 194, 195, 196,
	197, 198, 199, 206, 209, 215, 216, 217, 218, 219,
	220, 221, 223, 224, 225, 226, 232, 235, 241, 242,
	251, 258, 262, 184, 0, 0, 0, 0, 335, 0,
	0, 0, 130, 332, 0, 0, 0, 156, 0, 0,
	0, 377, 158, 0, 0, 230, 172, 0, 0, 0,
	0, 366, 367, 0, 0, 0, 0, 0, 0, 0,
	0, 61, 0, 602, 333, 354, 353, 356, 357, 358,
	359, 0, 0, 120, 355, 360, 361, 362, 0, 0,
	0, 330, 347, 0, 376, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 344, 345, 0, 0, 0, 0,
	390, 0, 346, 0, 0, 341, 342, 343, 348, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 0,
	0, 368, 0, 0, 0, 259, 0, 0, 388, 203,
	0, 234, 141, 155, 116, 102, 112, 0, 140, 181,
	210, 214, 374, 0, 0, 0, 0, 124, 0, 212,
	191, 250, 0, 0, 193, 211, 159, 240, 204, 249,
	260, 261, 237, 257, 265, 227, 0, 0, 0, 0,
	0, 105, 236, 248, 121, 222, 107, 246, 233, 170,
	150, 151, 106, 0, 208, 129, 136, 126, 183, 0,
	0, 0, 243, 244, 125, 268, 113, 256, 109, 114,
	255, 177, 0, 0, 0, 239, 247, 171, 164, 0,
	108, 245, 169, 163, 154, 133, 143, 201, 161, 202,
	144, 174, 173, 175, 0, 0, 0, 231, 253, 269,
	118, 0, 0, 238, 263, 264, 0, 0, 119, 137,
	132, 200, 176, 115, 146, 228, 153, 160, 207, 267,
	190, 213, 122, 252, 229, 378, 389, 384, 385, 382,
	383, 381, 380, 379, 391, 369, 370, 371, 372, 375,
	0, 386, 387, 373, 101, 110, 157, 266, 205, 135,
	254, 0, 0, 128, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 103, 104, 111, 117,
	123, 127, 131, 134, 139, 142, 145, 147, 148, 149,
	152, 162, 165, 166, 167, 168, 178, 179, 180, 182,
	185, 186, 187, 188, 189, 192, 194, 195, 196, 197,
	198, 199, 206, 209, 215, 216, 217, 218, 219, 220,
	221, 223, 224, 225, 226, 232, 235, 241, 242, 251,
	258, 262, 184, 0, 0, 0, 0, 335, 0, 0,
	0, 130, 332, 0, 0, 0, 156, 0, 0, 0,
	377, 158, 0, 0, 230, 172, 0, 0, 0, 0,
	366, 367, 0, 0, 0, 0, 0, 0, 0, 0,
	61, 0, 0, 333, 354, 353, 356, 357, 358, 359,
	0, 0, 120, 355, 360, 361, 362, 0, 0, 0,
	330, 347, 0, 376, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 344, 345, 326, 0, 0, 0, 390,
	0, 346, 0, 0, 341, 342, 343, 348, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 138, 0, 0,
	368, 0, 0, 0, 259, 0, 0, 388, 203, 0,
	234, 141, 155, 116, 102, 112, 0, 140, 181, 210,
	214, 374, 0, 0, 0, 0, 124, 0, 212, 191,
	250, 0, 0, 193, 211, 159, 240, 204, 249, 260,
	261, 237, 257, 265, 227, 0, 0, 0, 0, 0,
	105, 236, 248, 121, 222, 107, 246, 233, 170, 150,
	151, 106, 0, 208, 129, 136, 126, 183, 0, 0,
	0, 243, 244, 125, 268, 113, 256, 109, 114, 255,
	177, 0, 0, 0, 239, 247, 171, 164, 0, 108,
	245, 169, 163, 154, 133, 143, 201, 161, 202, 144,
	174, 173, 175, 0, 0, 0, 231, 253, 269, 118,
	0, 0, 238, 263, 264, 0, 0, 119, 137, 132,
	200, 176, 115, 146, 228, 153, 160, 207, 267, 190,
	213, 122, 252, 229, 378, 389, 384, 385, 382, 383,
	381, 380, 379, 391, 369, 370, 371, 372, 375, 0,
	386, 387, 373, 101, 110, 157, 266, 205, 135, 254,
	0, 0, 128, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 103, 104, 111, 117, 123,
	127, 131, 134, 139, 142, 145, 147, 148, 149, 152,
	162, 165, 166, 167, 168, 178, 179, 180, 182, 185,
	186, 187, 188, 189, 192, 194, 195, 196, 197, 198,
	199, 206, 209, 215, 216, 217, 218, 219, 220, 221,
	223, 224, 225, 226, 232, 235, 241, 242, 251, 258,
	262, 184, 0, 0, 0, 0, 335, 0, 0, 0,
	130, 332, 0, 0, 0, 156, 0, 0, 0, 377,
	158, 0, 0, 230, 172, 0, 0, 0, 0, 366,
	367, 0, 0, 0, 0, 0, 0, 0, 0, 61,
	0, 0, 333, 354, 937, 356, 357, 358, 359, 0,
	0, 120, 355, 360, 361, 362, 0, 0, 0, 330,
	347, 0, 376, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 344, 345, 326, 0, 0, 0, 390, 0,
	346, 0, 0, 341, 342, 343, 348, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 138, 0, 0, 368,
	0, 0, 0, 259, 0, 0, 388, 203, 0, 234,
	141, 155, 116, 102, 112, 0, 140, 181, 210, 214,
	374, 0, 0, 0, 0, 124, 0, 212, 191, 250,
	0, 0, 193, 211, 159, 240, 204, 249, 260, 261,
	237, 257, 265, 227, 0, 0, 0, 0, 0, 105,
	236, 248, 121, 222, 107, 246, 233, 170, 150, 151,
	106, 0, 208, 129, 136, 126, 183, 0, 0, 0,
	243, 244, 125, 268, 113, 256, 109, 114, 255, 177,
	0, 0, 0, 239, 247, 171, 164, 0, 108, 245,
	169, 163, 154, 133, 143, 201, 161, 202, 144, 174,
	173, 175, 0, 0, 0, 231, 253, 269, 118, 0,
	0, 238, 263, 264, 0, 0, 119, 137, 132, 200,
	176, 115, 146, 228, 153, 160, 207, 267, 190, 213,
	122, 252, 229, 378, 389, 384, 385, 382, 383, 381,
	380, 379, 391, 369, 370, 371, 372, 375, 0, 386,
	387, 373, 101, 110, 157, 266, 205, 135, 254, 0,
	0, 128, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 103, 104, 111, 117, 123, 127,
	131, 134, 139, 142, 145, 147, 148, 149, 152, 162,
	165, 166, 167, 168, 178, 179, 180, 182, 185, 186,
	187, 188, 189, 192, 194, 195, 196, 197, 198, 199,
	206, 209, 215, 216, 217, 218, 219, 220, 221, 223,
	224, 225, 226, 232, 235, 241, 242, 251, 258, 262,
	184, 0, 0, 0, 0, 335, 0, 0, 0, 130,
	332, 0, 0, 0, 156, 0, 0, 0, 377, 158,
	0, 0, 230, 172, 0, 0, 0, 0, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 0, 61, 0,
	0, 333, 354, 934, 356, 357, 358, 359, 0, 0,
	120, 355, 360, 361, 362, 0, 0, 0, 330, 347,
	0, 376, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 344, 345, 326, 0, 0, 0, 390, 0, 346,
	0, 0, 341, 342, 343, 348, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 0, 368, 0,
	0, 0, 259, 0, 0, 388, 203, 0, 234, 141,
	155, 116, 102, 112, 0, 140, 181, 210, 214, 374,
	0, 0, 0, 0, 124, 0, 212, 191, 250, 0,
	0, 193, 211, 159, 240, 204, 249, 260, 261, 237,
	257, 265, 227, 0, 0, 0, 0, 0, 105, 236,
	248, 121, 222, 107, 246, 233, 170, 150, 151, 106,
	0, 208, 129, 136, 126, 183, 0, 0, 0, 243,
	244, 125, 268, 113, 256, 109, 114, 255, 177, 0,
	0, 0, 239, 247, 171, 164, 0, 108, 245, 169,
	163, 154, 133, 143, 201, 161, 202, 144, 174, 173,
	175, 0, 0, 0, 231, 253, 269, 118, 0, 0,
	238, 263, 264, 0, 0, 119, 137, 132, 200, 176,
	115, 146, 228, 153, 160, 207, 267, 190, 213, 122,
	252, 229, 378, 389, 384, 385, 382, 383, 381, 380,
	379, 391, 369, 370, 371, 372, 375, 0, 386, 387,
	373, 101, 110, 157, 266, 205, 135, 254, 0, 0,
	128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 104, 111, 117, 123, 127, 131,
	134, 139, 142, 145, 147, 148, 149, 152, 162, 165,
	166, 167, 168, 178, 179, 180, 182, 185, 186, 187,
	188, 189, 192, 194, 195, 196, 197, 198, 199, 206,
	209, 215, 216, 217, 218, 219, 220, 221, 223, 224,
	225, 226, 232, 235, 241, 242, 251, 258, 262, 26,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 184, 0, 0, 0, 0, 335, 0, 0, 0,
	130, 332, 0, 0, 0, 156, 0, 0, 0, 377,
	158, 0, 0, 230, 172, 0, 0, 0, 0, 366,
	367, 0, 0, 0, 0, 0, 0, 0, 0, 61,
	0, 0, 333, 354, 353, 356, 357, 358, 359, 0,
	0, 120, 355, 360, 361, 362, 0, 0, 0, 330,
	347, 0, 376, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 344, 345, 0, 0, 0, 0, 390, 0,
	346, 0, 0, 341, 342, 343, 348, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 138, 0, 0, 368,
	0, 0, 0, 259, 0, 0, 388, 203, 0, 234,
	141, 155, 116, 102, 112, 0, 140, 181, 210, 214,
	374, 0, 0, 0, 0, 124, 0, 212, 191, 250,
	0, 0, 193, 211, 159, 240, 204, 249, 260, 261,
	237, 257, 265, 227, 0, 0, 0, 0, 0, 105,
	236, 248, 121, 222, 107, 246, 233, 170, 150, 151,
	106, 0, 208, 129, 136, 126, 183, 0, 0, 0,
	243, 244, 125, 268, 113, 256, 109, 114, 255, 177,
	0, 0, 0, 239, 247, 171, 164, 0, 108, 245,
	169, 163, 154, 133, 143, 201, 161, 202, 144, 174,
	173, 175, 0, 0, 0, 231, 253, 269, 118, 0,
	0, 238, 263, 264, 0, 0, 119, 137, 132, 200,
	176, 115, 146, 228, 153, 160, 207, 267, 190, 213,
	122, 252, 229, 378, 389, 384, 385, 382, 383, 381,
	380, 379, 391, 369, 370, 371, 372, 375, 0, 386,
	387, 373, 101, 110, 157, 266, 205, 135, 254, 0,
	0, 128, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 103, 104, 111, 117, 123, 127,
	131, 134, 139, 142, 145, 147, 148, 149, 152, 162,
	165, 166, 167, 168, 178, 179, 180, 182, 185, 186,
	187, 188, 189, 192, 194, 195, 196, 197, 198, 199,
	206, 209, 215, 216, 217, 218, 219, 220, 221, 223,
	224, 225, 226, 232, 235, 241, 242, 251, 258, 262,
	184, 0, 0, 0, 0, 335, 0, 0, 0, 130,
	332, 0, 0, 0, 156, 0, 0, 0, 377, 158,
	0, 0, 230, 172, 0, 0, 0, 0, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 0, 61, 0,
	0, 333, 354, 353, 356, 357, 358, 359, 0, 0,
	120, 355, 360, 361, 362, 0, 0, 0, 330, 347,
	0, 376, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 344, 345, 0, 0, 0, 0, 390, 0, 346,
	0, 0, 341, 342, 343, 348, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 0, 368, 0,
	0, 0, 259, 0, 0, 388, 203, 0, 234, 141,
	155, 116, 102, 112, 0, 140, 181, 210, 214, 374,
	0, 0, 0, 0, 124, 0, 212, 191, 250, 0,
	0, 193, 211, 159, 240, 204, 249, 260, 261, 237,
	257, 265, 227, 0, 0, 0, 0, 0, 105, 236,
	248, 121, 222, 107, 246, 233, 170, 150, 151, 106,
	0, 208, 129, 136, 126, 183, 0, 0, 0, 243,
	244, 125, 268, 113, 256, 109, 114, 255, 177, 0,
	0, 0, 239, 247, 171, 164, 0, 108, 245, 169,
	163, 154, 133, 143, 201, 161, 202, 144, 174, 173,
	175, 0, 0, 0, 231, 253, 269, 118, 0, 0,
	238, 263, 264, 0, 0, 119, 137, 132, 200, 176,
	115, 146, 228, 153, 160, 207, 267, 190, 213, 122,
	252, 229, 378, 389, 384, 385, 382, 383, 381, 380,
	379, 391, 369, 370, 371, 372, 375, 0, 386, 387,
	373, 101, 110, 157, 266, 205, 135, 254, 0, 0,
	128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 104, 111, 117, 123, 127, 131,
	134, 139, 142, 145, 147, 148, 149, 152, 162, 165,
	166, 167, 168, 178, 179, 180, 182, 185, 186, 187,
	188, 189, 192, 194, 195, 196, 197, 198, 199, 206,
	209, 215, 216, 217, 218, 219, 220, 221, 223, 224,
	225, 226, 232, 235, 241, 242, 251, 258, 262, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 130, 0,
	0, 0, 0, 156, 0, 0, 0, 377, 158, 0,
	0, 230, 172, 0, 0, 0, 0, 366, 367, 0,
	0, 0, 0, 0, 0, 0, 0, 61, 0, 0,
	333, 354, 353, 356, 357, 358, 359, 0, 0, 120,
	355, 360, 361, 362, 0, 0, 0, 0, 347, 0,
	376, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	344, 345, 0, 0, 0, 0, 390, 0, 346, 0,
	0, 341, 342, 343, 348, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 138, 0, 0, 368, 0, 0,
	0, 259, 0, 0, 388, 203, 0, 234, 141, 155,
	116, 102, 112, 0, 140, 181, 210, 214, 374, 0,
	0, 0, 0, 124, 0, 212, 191, 250, 0, 1690,
	193, 211, 159, 240, 204, 249, 260, 261, 237, 257,
	265, 227, 0, 0, 0, 0, 0, 105, 236, 248,
	121, 222, 107, 246, 233, 170, 150, 151, 106, 0,
	208, 129, 136, 126, 183, 0, 0, 0, 243, 244,
	125, 268, 113, 256, 109, 114, 255, 177, 0, 0,
	0, 239, 247, 171, 164, 0, 108, 245, 169, 163,
	154, 133, 143, 201, 161, 202, 144, 174, 173, 175,
	0, 0, 0, 231, 253, 269, 118, 0, 0, 238,
	263, 264, 0, 0, 119, 137, 132, 200, 176, 115,
	146, 228, 153, 160, 207, 267, 190, 213, 122, 252,
	229, 378, 389, 384, 385, 382, 383, 381, 380, 379,
	391, 369, 370, 371, 372, 375, 0, 386, 387, 373,
	101, 110, 157, 266, 205, 135, 254, 0, 0, 128,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 103, 104, 111, 117, 123, 127, 131, 134,
	139, 142, 145, 147, 148, 149, 152, 162, 165, 166,
	167, 168, 178, 179, 180, 182, 185, 186, 187, 188,
	189, 192, 194, 195, 196, 197, 198, 199, 206, 209,
	215, 216, 217, 218, 219, 220, 221, 223, 224, 225,
	226, 232, 235, 241, 242, 251, 258, 262, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 130, 0, 0,
	0, 0, 156, 0, 0, 0, 377, 158, 0, 0,
	230, 172, 0, 0, 0, 0, 366, 367, 0, 0,
	0, 0, 0, 0, 0, 0, 61, 0, 602, 333,
	354, 353, 356, 357, 358, 359, 0, 0, 120, 355,
	360, 361, 362, 0, 0, 0, 0, 347, 0, 376,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 344,
	345, 0, 0, 0, 0, 390, 0, 346, 0, 0,
	341, 342, 343, 348, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 138, 0, 0, 368, 0, 0, 0,
	259, 0, 0, 388, 203, 0, 234, 141, 155, 116,
	102, 112, 0, 140, 181, 210, 214, 374, 0, 0,
	0, 0, 124, 0, 212, 191, 250, 0, 0, 193,
	211, 159, 240, 204, 249, 260, 261, 237, 257, 265,
	227, 0, 0, 0, 0, 0, 105, 236, 248, 121,
	222, 107, 246, 233, 170, 150, 151, 106, 0, 208,
	129, 136, 126, 183, 0, 0, 0, 243, 244, 125,
	268, 113, 256, 109, 114, 255, 177, 0, 0, 0,
	239, 247, 171, 164, 0, 108, 245, 169, 163, 154,
	133, 143, 201, 161, 202, 144, 174, 173, 175, 0,
	0, 0, 231, 253, 269, 118, 0, 0, 238, 263,
	264, 0, 0, 119, 137, 132, 200, 176, 115, 146,
	228, 153, 160, 207, 267, 190, 213, 122, 252, 229,
	378, 389, 384, 385, 382, 383, 381, 380, 379, 391,
	369, 370, 371, 372, 375, 0, 386, 387, 373, 101,
	110, 157, 266, 205, 135, 254, 0, 0, 128, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 104, 111, 117, 123, 127, 131, 134, 139,
	142, 145, 147, 148, 149, 152, 162, 165, 166, 167,
	168, 178, 179, 180, 182, 185, 186, 187, 188, 189,
	192, 194, 195, 196, 197, 198, 199, 206, 209, 215,
	216, 217, 218, 219, 220, 221, 223, 224, 225, 226,
	232, 235, 241, 242, 251, 258, 262, 184, 0, 0,
	0, 0, 0, 0, 0, 0, 130, 0, 0, 0,
	0, 156, 0, 0, 0, 377, 158, 0, 0, 230,
	172, 0, 0, 0, 0, 366, 367, 0, 0, 0,
	0, 0, 0, 0, 0, 61, 0, 0, 333, 354,
	353, 356, 357, 358, 359, 0, 0, 120, 355, 360,
	361, 362, 0, 0, 0, 0, 347, 0, 376, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 344, 345,
	0, 0, 0, 0, 390, 0, 346, 0, 0, 341,
	342, 343, 348, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 0, 0, 368, 0, 0, 0, 259,
	0, 0, 388, 203, 0, 234, 141, 155, 116, 102,
	112, 0, 140, 181, 210, 214, 374, 0, 0, 0,
	0, 124, 0, 212, 191, 250, 0, 0, 193, 211,
	159, 240, 204, 249, 260, 261, 237, 257, 265, 227,
	0, 0, 0, 0, 0, 105, 236, 248, 121, 222,
	107, 246, 233, 170, 150, 151, 106, 0, 208, 129,
	136, 126, 183, 0, 0, 0, 243, 244, 125, 268,
	113, 256, 109, 114, 255, 177, 0, 0, 0, 239,
	247, 171, 164, 0, 108, 245, 169, 163, 154, 133,
	143, 201, 161, 202, 144, 174, 173, 175, 0, 0,
	0, 231, 253, 269, 118, 0, 0, 238, 263, 264,
	0, 0, 119, 137, 132, 200, 176, 115, 146, 228,
	153, 160, 207, 267, 190, 213, 122, 252, 229, 378,
	389, 384, 385, 382, 383, 381, 380, 379, 391, 369,
	370, 371, 372, 375, 0, 386, 387, 373, 101, 110,
	157, 266, 205, 135, 254, 0, 0, 128, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	103, 104, 111, 117, 123, 127, 131, 134, 139, 142,
	145, 147, 148, 149, 152, 162, 165, 166, 167, 168,
	178, 179, 180, 182, 185, 186, 187, 188, 189, 192,
	194, 195, 196, 197, 198, 199, 206, 209, 215, 216,
	217, 218, 219, 220, 221, 223, 224, 225, 226, 232,
	235, 241, 242, 251, 258, 262, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 130, 0, 0, 0, 0,
	156, 0, 0, 0, 0, 158, 0, 0, 230, 172,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 413, 0, 0,
	0, 0, 0, 0, 0, 0, 120, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 643, 642, 652, 653, 645, 646, 647,
	648, 649, 650, 651, 644, 0, 0, 654, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 138, 0, 0, 0, 0, 0, 0, 259, 0,
	0, 0, 203, 0, 234, 141, 155, 116, 102, 112,
	0, 140, 181, 210, 214, 0, 0, 0, 0, 0,
	124, 0, 212, 191, 250, 0, 0, 193, 211, 159,
	240, 204, 249, 260, 261, 237, 257, 265, 227, 0,
	0, 0, 0, 0, 105, 236, 248, 121, 222, 107,
	246, 233, 170, 150, 151, 106, 0, 208, 129, 136,
	126, 183, 0, 0, 0, 243, 244, 125, 268, 113,
	256, 109, 114, 255, 177, 0, 0, 0, 239, 247,
	171, 164, 0, 108, 245, 169, 163, 154, 133, 143,
	201, 161, 202, 144, 174, 173, 175, 0, 0, 0,
	231, 253, 269, 118, 0, 0, 238, 263, 264, 0,
	0, 119, 137, 132, 200, 176, 115, 146, 228, 153,
	160, 207, 267, 190, 213, 122, 252, 229, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 110, 157,
	266, 205, 135, 254, 0, 0, 128, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 103,
	104, 111, 117, 123, 127, 131, 134, 139, 142, 145,
	147, 148, 149, 152, 162, 165, 166, 167, 168, 178,
	179, 180, 182, 185, 186, 187, 188, 189, 192, 194,
	195, 196, 197, 198, 199, 206, 209, 215, 216, 217,
	218, 219, 220, 221, 223, 224, 225, 226, 232, 235,
	241, 242, 251, 258, 262, 184, 0, 0, 0, 980,
	0, 0, 0, 0, 130, 0, 0, 0, 0, 156,
	0, 0, 0, 0, 158, 0, 0, 230, 172, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 982,
	984, 0, 0, 0, 0, 0, 99, 0, 986, 0,
	0, 0, 0, 0, 0, 120, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	138, 0, 0, 0, 0, 0, 0, 259, 0, 983,
	0, 203, 0, 234, 141, 155, 116, 102, 112, 0,
	140, 181, 210, 214, 0, 0, 0, 0, 0, 124,
	0, 212, 191, 250, 0, 0, 193, 211, 159, 240,
	204, 249, 260, 261, 237, 257, 265, 227, 0, 0,
	0, 0, 0, 105, 236, 248, 121, 222, 107, 246,
	233, 170, 150, 151, 106, 0, 208, 129, 136, 126,
	183, 0, 0, 0, 243, 244, 125, 268, 113, 256,
	109, 114, 255, 177, 0, 0, 0, 239, 247, 171,
	164, 0, 108, 245, 169, 163, 154, 133, 143, 201,
	161, 202, 144, 174, 173, 175, 0, 0, 0, 231,
	253, 269, 118, 0, 0, 238, 263, 264, 0, 0,
	119, 137, 132, 200, 176, 115, 146, 228, 153, 160,
	207, 267, 190, 213, 122, 252, 229, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 110, 157, 266,
	205, 135, 254, 0, 0, 128, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 103, 104,
	111, 117, 123, 127, 131, 134, 139, 142, 145, 147,
	148, 149, 152, 162, 165, 166, 167, 168, 178, 179,
	180, 182, 185, 186, 187, 188, 189, 192, 194, 195,
	196, 197, 198, 199, 206, 209, 215, 216, 217, 218,
	219, 220, 221, 223, 224, 225, 226, 232, 235, 241,
	242, 251, 258, 262, 184, 0, 0, 0, 980, 0,
	0, 0, 0, 130, 0, 0, 0, 0, 156, 0,
	0, 0, 0, 158, 0, 0, 230, 172, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 982, 984,
	0, 0, 0, 0, 0, 99, 0, 986, 0, 0,
	0, 0, 0, 0, 120, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	0, 0, 0, 0, 0, 0, 259, 0, 983, 0,
	203, 0, 234, 141, 155, 116, 102, 112, 0, 140,
	181, 210, 214, 0, 0, 0, 0, 0, 124, 0,
	212, 191, 250, 0, 0, 978, 211, 159, 240, 204,
	249, 260, 261, 237, 257, 265, 227, 0, 0, 0,
	0, 0, 105, 236, 248, 121, 222, 107, 246, 233,
	170, 150, 151, 106, 0, 208, 129, 136, 126, 183,
	0, 0, 0, 243, 244, 125, 268, 113, 256, 109,
	114, 255, 177, 0, 0, 0, 239, 247, 171, 164,
	0, 108, 245, 169, 163, 154, 133, 143, 201, 161,
	202, 144, 174, 173, 175, 0, 0, 0, 231, 253,
	269, 118, 0, 0, 238, 263, 264, 0, 0, 119,
	137, 132, 200, 176, 115, 146, 228, 153, 160, 207,
	267, 190, 213, 122, 252, 229, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 110, 157, 266, 205,
	135, 254, 0, 0, 128, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 104, 111,
	117, 123, 127, 131, 134, 139, 142, 145, 147, 148,
	149, 152, 162, 165, 166, 167, 168, 178, 179, 180,
	182, 185, 186, 187, 188, 189, 192, 194, 195, 196,
	197, 198, 199, 206, 209, 215, 216, 217, 218, 219,
	220, 221, 223, 224, 225, 226, 232, 235, 241, 242,
	251, 258, 262, 184, 0, 0, 0, 631, 0, 0,
	0, 0, 130, 0, 0, 0, 0, 156, 0, 0,
	0, 0, 158, 0, 0, 230, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 413, 0, 633, 0, 0, 0,
	0, 0, 0, 120, 0, 0, 0, 0, 0, 628,
	627, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 629, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 0,
	0, 0, 0, 0, 0, 259, 0, 0, 0, 203,
	0, 234, 141, 155, 116, 102, 112, 0, 140, 181,
	210, 214, 0, 0, 0, 0, 0, 124, 0, 212,
	191, 250, 0, 0, 193, 211, 159, 240, 204, 249,
	260, 261, 237, 257, 265, 227, 0, 0, 0, 0,
	0, 105, 236, 248, 121, 222, 107, 246, 233, 170,
	150, 151, 106, 0, 208, 129, 136, 126, 183, 0,
	0, 0, 243, 244, 125, 268, 113, 256, 109, 114,
	255, 177, 0, 0, 0, 239, 247, 171, 164, 0,
	108, 245, 169, 163, 154, 133, 143, 201, 161, 202,
	144, 174, 173, 175, 0, 0, 0, 231, 253, 269,
	118, 0, 0, 238, 263, 264, 0, 0, 119, 137,
	132, 200, 176, 115, 146, 228, 153, 160, 207, 267,
	190, 213, 122, 252, 229, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 110, 157, 266, 205, 135,
	254, 0, 0, 128, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 103, 104, 111, 117,
	123, 127, 131, 134, 139, 142, 145, 147, 148, 149,
	152, 162, 165, 166, 167, 168, 178, 179, 180, 182,
	185, 186, 187, 188, 189, 192, 194, 195, 196, 197,
	198, 199, 206, 209, 215, 216, 217, 218, 219, 220,
	221, 223, 224, 225, 226, 232, 235, 241, 242, 251,
	258, 262, 26, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 130, 0, 0, 0, 0, 156, 0,
	0, 0, 0, 158, 0, 0, 230, 172, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 61, 0, 0, 413, 0, 0, 0, 0,
	0, 0, 0, 0, 120, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	0, 0, 0, 0, 0, 0, 259, 0, 0, 0,
	203, 0, 234, 141, 155, 116, 102, 112, 0, 140,
	181, 210, 214, 0, 0, 0, 0, 0, 124, 0,
	212, 191, 250, 0, 0, 193, 211, 159, 240, 204,
	249, 260, 261, 237, 257, 265, 227, 0, 0, 0,
	0, 0, 105, 236, 248, 121, 222, 107, 246, 233,
	170, 150, 151, 106, 0, 208, 129, 136, 126, 183,
	0, 0, 0, 243, 244, 125, 268, 113, 256, 109,
	114, 255, 177, 0, 0, 0, 239, 247, 171, 164,
	0, 108, 245, 169, 163, 154, 133, 143, 201, 161,
	202, 144, 174, 173, 175, 0, 0, 0, 231, 253,
	269, 118, 0, 0, 238, 263, 264, 0, 0, 119,
	137, 132, 200, 176, 115, 146, 228, 153, 160, 207,
	267, 190, 213, 122, 252, 229, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 110, 157, 266, 205,
	135, 254, 0, 0, 128, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 104, 111,
	117, 123, 127, 131, 134, 139, 142, 145, 147, 148,
	149, 152, 162, 165, 166, 167, 168, 178, 179, 180,
	182, 185, 186, 187, 188, 189, 192, 194, 195, 196,
	197, 198, 199, 206, 209, 215, 216, 217, 218, 219,
	220, 221, 223, 224, 225, 226, 232, 235, 241, 242,
	251, 258, 262, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 0, 0, 0, 0, 156, 0, 0,
	0, 0, 158, 0, 0, 230, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 0, 986, 0, 0, 0,
	0, 0, 0, 120, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 0,
	0, 0, 0, 0, 0, 259, 0, 0, 0, 203,
	0, 234, 141, 155, 116, 102, 112, 0, 140, 181,
	210, 214, 0, 0, 0, 0, 0, 124, 0, 212,
	191, 250, 0, 0, 193, 211, 159, 240, 204, 249,
	260, 261, 237, 257, 265, 227, 0, 0, 0, 0,
	0, 105, 236, 248, 121, 222, 107, 246, 233, 170,
	150, 151, 106, 0, 208, 129, 136, 126, 183, 0,
	0, 0, 243, 244, 125, 268, 113, 256, 109, 114,
	255, 177, 0, 0, 0, 239, 247, 171, 164, 0,
	108, 245, 169, 163, 154, 133, 143, 201, 161, 202,
	144, 174, 173, 175, 0, 0, 0, 231, 253, 269,
	118, 0, 0, 238, 263, 264, 0, 0, 119, 137,
	132, 200, 176, 115, 146, 228, 153, 160, 207, 267,
	190, 213, 122, 252, 229, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 110, 157, 266, 205, 135,
	254, 0, 0, 128, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1198, 0,
	0, 0, 0, 0, 0, 0, 103, 104, 111, 117,
	123, 127, 131, 134, 139, 142, 145, 147, 148, 149,
	152, 162, 165, 166, 167, 168, 178, 179, 180, 182,
	185, 186, 187, 188, 189, 192, 194, 195, 196, 197,
	198, 199, 206, 209, 215, 216, 217, 218, 219, 220,
	221, 223, 224, 225, 226, 232, 235, 241, 242, 251,
	258, 262, 26, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 130, 0, 0, 0, 0, 156, 0,
	0, 0, 0, 158, 0, 0, 230, 172, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 61, 0, 0, 99, 0, 0, 0, 0,
	0, 0, 0, 0, 120, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	0, 0, 0, 0, 0, 0, 259, 0, 0, 0,
	203, 0, 234, 141, 155, 116, 102, 112, 0, 140,
	181, 210, 214, 0, 0, 0, 0, 0, 124, 0,
	212, 191, 250, 0, 0, 193, 211, 159, 240, 204,
	249, 260, 261, 237, 257, 265, 227, 0, 0, 0,
	0, 0, 105, 236, 248, 121, 222, 107, 246, 233,
	170, 150, 151, 106, 0, 208, 129, 136, 126, 183,
	0, 0, 0, 243, 244, 125, 268, 113, 256, 109,
	114, 255, 177, 0, 0, 0, 239, 247, 171, 164,
	0, 108, 245, 169, 163, 154, 133, 143, 201, 161,
	202, 144, 174, 173, 175, 0, 0, 0, 231, 253,
	269, 118, 0, 0, 238, 263, 264, 0, 0, 119,
	137, 132, 200, 176, 115, 146, 228, 153, 160, 207,
	267, 190, 213, 122, 252, 229, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 110, 157, 266, 205,
	135, 254, 0, 0, 128, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 104, 111,
	117, 123, 127, 131, 134, 139, 142, 145, 147, 148,
	149, 152, 162, 165, 166, 167, 168, 178, 179, 180,
	182, 185, 186, 187, 188, 189, 192, 194, 195, 196,
	197, 198, 199, 206, 209, 215, 216, 217, 218, 219,
	220, 221, 223, 224, 225, 226, 232, 235, 241, 242,
	251, 258, 262, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 0, 0, 0, 0, 156, 0, 0,
	0, 0, 158, 0, 0, 230, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 413, 0, 0, 874, 0, 0,
	875, 0, 0, 120, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 0,
	0, 0, 0, 0, 0, 259, 0, 0, 0, 203,
	0, 234, 141, 155, 116, 102, 112, 0, 140, 181,
	210, 214, 0, 0, 0, 0, 0, 124, 0, 212,
	191, 250, 0, 0, 193, 211, 159, 240, 204, 249,
	260, 261, 237, 257, 265, 227, 0, 0, 0, 0,
	0, 105, 236, 248, 121, 222, 107, 246, 233, 170,
	150, 151, 106, 0, 208, 129, 136, 126, 183, 0,
	0, 0, 243, 244, 125, 268, 113, 256, 109, 114,
	255, 177, 0, 0, 0, 239, 247, 171, 164, 0,
	108, 245, 169, 163, 154, 133, 143, 201, 161, 202,
	144, 174, 173, 175, 0, 0, 0, 231, 253, 269,
	118, 0, 0, 238, 263, 264, 0, 0, 119, 137,
	132, 200, 176, 115, 146, 228, 153, 160, 207, 267,
	190, 213, 122, 252, 229, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 110, 157, 266, 205, 135,
	254, 0, 0, 128, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 103, 104, 111, 117,
	123, 127, 131, 134, 139, 142, 145, 147, 148, 149,
	152, 162, 165, 166, 167, 168, 178, 179, 180, 182,
	185, 186, 187, 188, 189, 192, 194, 195, 196, 197,
	198, 199, 206, 209, 215, 216, 217, 218, 219, 220,
	221, 223, 224, 225, 226, 232, 235, 241, 242, 251,
	258, 262, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 130, 747, 0, 0, 0, 156, 0, 0, 0,
	0, 158, 0, 0, 230, 172, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 413, 0, 746, 0, 0, 0, 0,
	0, 0, 120, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 259, 0, 0, 0, 203, 0,
	234, 141, 155, 116, 102, 112, 0, 140, 181, 210,
	214, 0, 0, 0, 0, 0, 124, 0, 212, 191,
	250, 0, 0, 193, 211, 159, 240, 204, 249, 260,
	261, 237, 257, 265, 227, 0, 0, 0, 0, 0,
	105, 236, 248, 121, 222, 107, 246, 233, 170, 150,
	151, 106, 0, 208, 129, 136, 126, 183, 0, 0,
	0, 243, 244, 125, 268, 113, 256, 109, 114, 255,
	177, 0, 0, 0, 239, 247, 171, 164, 0, 108,
	245, 169, 163, 154, 133, 143, 201, 161, 202, 144,
	174, 173, 175, 0, 0, 0, 231, 253, 269, 118,
	0, 0, 238, 263, 264, 0, 0, 119, 137, 132,
	200, 176, 115, 146, 228, 153, 160, 207, 267, 190,
	213, 122, 252, 229, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 110, 157, 266, 205, 135, 254,
	0, 0, 128, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 103, 104, 111, 117, 123,
	127, 131, 134, 139, 142, 145, 147, 148, 149, 152,
	162, 165, 166, 167, 168, 178, 179, 180, 182, 185,
	186, 187, 188, 189, 192, 194, 195, 196, 197, 198,
	199, 206, 209, 215, 216, 217, 218, 219, 220, 221,
	223, 224, 225, 226, 232, 235, 241, 242, 251, 258,
	262, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	130, 0, 0, 0, 0, 156, 0, 0, 0, 0,
	158, 0, 0, 230, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 0, 986, 0, 0, 0, 0, 0,
	0, 120, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 259, 0, 0, 0, 203, 0, 234,
	141, 155, 116, 102, 112, 0, 140, 181, 210, 214,
	0, 0, 0, 0, 0, 124, 0, 212, 191, 250,
	0, 0, 193, 211, 159, 240, 204, 249, 260, 261,
	237, 257, 265, 227, 0, 0, 0, 0, 0, 105,
	236, 248, 121, 222, 107, 246, 233, 170, 150, 151,
	106, 0, 208, 129, 136, 126, 183, 0, 0, 0,
	243, 244, 125, 268, 113, 256, 109, 114, 255, 177,
	0, 0, 0, 239, 247, 171, 164, 0, 108, 245,
	169, 163, 154, 133, 143, 201, 161, 202, 144, 174,
	173, 175, 0, 0, 0, 231, 253, 269, 118, 0,
	0, 238, 263, 264, 0, 0, 119, 137, 132, 200,
	176, 115, 146, 228, 153, 160, 207, 267, 190, 213,
	122, 252, 229, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 110, 157, 266, 205, 135, 254, 0,
	0, 128, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 103, 104, 111, 117, 123, 127,
	131, 134, 139, 142, 145, 147, 148, 149, 152, 162,
	165, 166, 167, 168, 178, 179, 180, 182, 185, 186,
	187, 188, 189, 192, 194, 195, 196, 197, 198, 199,
	206, 209, 215, 216, 217, 218, 219, 220, 221, 223,
	224, 225, 226, 232, 235, 241, 242, 251, 258, 262,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 130,
	0, 0, 0, 0, 156, 0, 0, 0, 0, 158,
	0, 0, 230, 172, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 61, 0,
	0, 99, 0, 0, 0, 0, 0, 0, 0, 0,
	120, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 0, 0, 0,
	0, 0, 259, 0, 0, 0, 203, 0, 234, 141,
	155, 116, 102, 112, 0, 140, 181, 210, 214, 0,
	0, 0, 0, 0, 124, 0, 212, 191, 250, 0,
	0, 193, 211, 159, 240, 204, 249, 260, 261, 237,
	257, 265, 227, 0, 0, 0, 0, 0, 105, 236,
	248, 121, 222, 107, 246, 233, 170, 150, 151, 106,
	0, 208, 129, 136, 126, 183, 0, 0, 0, 243,
	244, 125, 268, 113, 256, 109, 114, 255, 177, 0,
	0, 0, 239, 247, 171, 164, 0, 108, 245, 169,
	163, 154, 133, 143, 201, 161, 202, 144, 174, 173,
	175, 0, 0, 0, 231, 253, 269, 118, 0, 0,
	238, 263, 264, 0, 0, 119, 137, 132, 200, 176,
	115, 146, 228, 153, 160, 207, 267, 190, 213, 122,
	252, 229, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 110, 157, 266, 205, 135, 254, 0, 0,
	128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 104, 111, 117, 123, 127, 131,
	134, 139, 142, 145, 147, 148, 149, 152, 162, 165,
	166, 167, 168, 178, 179, 180, 182, 185, 186, 187,
	188, 189, 192, 194, 195, 196, 197, 198, 199, 206,
	209, 215, 216, 217, 218, 219, 220, 221, 223, 224,
	225, 226, 232, 235, 241, 242, 251, 258, 262, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 130, 0,
	0, 0, 0, 156, 0, 0, 0, 0, 158, 0,
	0, 230, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	413, 0, 633, 0, 0, 0, 0, 0, 0, 120,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 138, 0, 0, 0, 0, 0,
	0, 259, 0, 0, 0, 203, 0, 234, 141, 155,
	116, 102, 112, 0, 140, 181, 210, 214, 0, 0,
	0, 0, 0, 124, 0, 212, 191, 250, 0, 0,
	193, 211, 159, 240, 204, 249, 260, 261, 237, 257,
	265, 227, 0, 0, 0, 0, 0, 105, 236, 248,
	121, 222, 107, 246, 233, 170, 150, 151, 106, 0,
	208, 129, 136, 126, 183, 0, 0, 0, 243, 244,
	125, 268, 113, 256, 109, 114, 255, 177, 0, 0,
	0, 239, 247, 171, 164, 0, 108, 245, 169, 163,
	154, 133, 143, 201, 161, 202, 144, 174, 173, 175,
	0, 0, 0, 231, 253, 269, 118, 0, 0, 238,
	263, 264, 0, 0, 119, 137, 132, 200, 176, 115,
	146, 228, 153, 160, 207, 267, 190, 213, 122, 252,
	229, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 110, 157, 266, 205, 135, 254, 0, 0, 128,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 103, 104, 111, 117, 123, 127, 131, 134,
	139, 142, 145, 147, 148, 149, 152, 162, 165, 166,
	167, 168, 178, 179, 180, 182, 185, 186, 187, 188,
	189, 192, 194, 195, 196, 197, 198, 199, 206, 209,
	215, 216, 217, 218, 219, 220, 221, 223, 224, 225,
	226, 232, 235, 241, 242, 251, 258, 262, 184, 0,
	0, 0, 0, 0, 0, 0, 717, 130, 0, 0,
	0, 0, 156, 0, 0, 0, 0, 158, 0, 0,
	230, 172, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	0, 0, 0, 0, 0, 0, 0, 0, 120, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 138, 0, 0, 0, 0, 0, 0,
	259, 0, 0, 0, 203, 0, 234, 141, 155, 116,
	102, 112, 0, 140, 181, 210, 214, 0, 0, 0,
	0, 0, 124, 0, 212, 191, 250, 0, 0, 193,
	211, 159, 240, 204, 249, 260, 261, 237, 257, 265,
	227, 0, 0, 0, 0, 0, 105, 236, 248, 121,
	222, 107, 246, 233, 170, 150, 151, 106, 0, 208,
	129, 136, 126, 183, 0, 0, 0, 243, 244, 125,
	268, 113, 256, 109, 114, 255, 177, 0, 0, 0,
	239, 247, 171, 164, 0, 108, 245, 169, 163, 154,
	133, 143, 201, 161, 202, 144, 174, 173, 175, 0,
	0, 0, 231, 253, 269, 118, 0, 0, 238, 263,
	264, 0, 0, 119, 137, 132, 200, 176, 115, 146,
	228, 153, 160, 207, 267, 190, 213, 122, 252, 229,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	110, 157, 266, 205, 135, 254, 0, 0, 128, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 104, 111, 117, 123, 127, 131, 134, 139,
	142, 145, 147, 148, 149, 152, 162, 165, 166, 167,
	168, 178, 179, 180, 182, 185, 186, 187, 188, 189,
	192, 194, 195, 196, 197, 198, 199, 206, 209, 215,
	216, 217, 218, 219, 220, 221, 223, 224, 225, 226,
	232, 235, 241, 242, 251, 258, 262, 394, 0, 0,
	0, 0, 0, 0, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 130, 0, 0, 0, 0, 156, 0,
	0, 0, 0, 158, 0, 0, 230, 172, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 0, 0, 0, 0,
	0, 0, 0, 0, 120, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	0, 0, 0, 0, 0, 0, 259, 0, 0, 0,
	203, 0, 234, 141, 155, 116, 102, 112, 0, 140,
	181, 210, 214, 0, 0, 0, 0, 0, 124, 0,
	212, 191, 250, 0, 0, 193, 211, 159, 240, 204,
	249, 260, 261, 237, 257, 265, 227, 0, 0, 0,
	0, 0, 105, 236, 248, 121, 222, 107, 246, 233,
	170, 150, 151, 106, 0, 208, 129, 136, 126, 183,
	0, 0, 0, 243, 244, 125, 268, 113, 256, 109,
	114, 255, 177, 0, 0, 0, 239, 247, 171, 164,
	0, 108, 245, 169, 163, 154, 133, 143, 201, 161,
	202, 144, 174, 173, 175, 0, 0, 0, 231, 253,
	269, 118, 0, 0, 238, 263, 264, 0, 0, 119,
	137, 132, 200, 176, 115, 146, 228, 153, 160, 207,
	267, 190, 213, 122, 252, 229, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 110, 157, 266, 205,
	135, 254, 0, 0, 128, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 104, 111,
	117, 123, 127, 131, 134, 139, 142, 145, 147, 148,
	149, 152, 162, 165, 166, 167, 168, 178, 179, 180,
	182, 185, 186, 187, 188, 189, 192, 194, 195, 196,
	197, 198, 199, 206, 209, 215, 216, 217, 218, 219,
	220, 221, 223, 224, 225, 226, 232, 235, 241, 242,
	251, 258, 262, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 0, 0, 0, 0, 156, 0, 0,
	0, 0, 158, 0, 0, 230, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 0, 0, 0, 0, 0,
	0, 0, 0, 120, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 0,
	0, 0, 96, 0, 0, 259, 0, 0, 0, 203,
	0, 234, 141, 155, 116, 102, 112, 0, 140, 181,
	210, 214, 0, 0, 0, 0, 0, 124, 0, 212,
	191, 250, 0, 0, 193, 211, 159, 240, 204, 249,
	260, 261, 237, 257, 265, 227, 0, 0, 0, 0,
	0, 105, 236, 248, 121, 222, 107, 246, 233, 170,
	150, 151, 106, 0, 208, 129, 136, 126, 183, 0,
	0, 0, 243, 244, 125, 268, 113, 256, 109, 114,
	255, 177, 0, 0, 0, 239, 247, 171, 164, 0,
	108, 245, 169, 163, 154, 133, 143, 201, 161, 202,
	144, 174, 173, 175, 0, 0, 0, 231, 253, 269,
	118, 0, 0, 238, 263, 264, 0, 0, 119, 137,
	132, 200, 176, 115, 146, 228, 153, 160, 207, 267,
	190, 213, 122, 252, 229, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 110, 157, 266, 205, 135,
	254, 0, 0, 128, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 103, 104, 111, 117,
	123, 127, 131, 134, 139, 142, 145, 147, 148, 149,
	152, 162, 165, 166, 167, 168, 178, 179, 180, 182,
	185, 186, 187, 188, 189, 192, 194, 195, 196, 197,
	198, 199, 206, 209, 215, 216, 217, 218, 219, 220,
	221, 223, 224, 225, 226, 232, 235, 241, 242, 251,
	258, 262, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 130, 0, 0, 0, 0, 156, 0, 0, 0,
	0, 158, 0, 0, 230, 172, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 413, 0, 0, 0, 0, 0, 0,
	0, 0, 120, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 259, 0, 0, 0, 203, 0,
	234, 141, 155, 116, 102, 112, 0, 140, 181, 210,
	214, 0, 0, 0, 0, 0, 124, 0, 212, 191,
	250, 0, 0, 193, 211, 159, 240, 204, 249, 260,
	261, 237, 257, 265, 227, 0, 0, 0, 0, 0,
	105, 236, 248, 121, 222, 107, 246, 233, 170, 150,
	151, 106, 0, 208, 129, 136, 126, 183, 0, 0,
	0, 243, 244, 125, 268, 113, 256, 109, 114, 255,
	177, 0, 0, 0, 239, 247, 171, 164, 0, 108,
	245, 169, 163, 154, 133, 143, 201, 161, 202, 144,
	174, 173, 175, 0, 0, 0, 231, 253, 269, 118,
	0, 0, 238, 263, 264, 0, 0, 119, 137, 132,
	200, 176, 115, 146, 228, 153, 160, 207, 267, 190,
	213, 122, 252, 229, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 110, 157, 266, 205, 135, 254,
	0, 0, 128, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 103, 104, 111, 117, 123,
	127, 131, 134, 139, 142, 145, 147, 148, 149, 152,
	162, 165, 166, 167, 168, 178, 179, 180, 182, 185,
	186, 187, 188, 189, 192, 194, 195, 196, 197, 198,
	199, 206, 209, 215, 216, 217, 218, 219, 220, 221,
	223, 224, 225, 226, 232, 235, 241, 242, 251, 258,
	262, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	130, 0, 0, 0, 0, 156, 0, 0, 0, 0,
	158, 0, 0, 230, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 0,
	0, 120, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 259, 0, 0, 0, 203, 0, 234,
	141, 155, 116, 102, 112, 0, 140, 181, 210, 214,
	0, 0, 0, 0, 0, 124, 0, 212, 191, 250,
	0, 0, 193, 211, 159, 240, 204, 249, 260, 261,
	237, 257, 265, 227, 0, 0, 0, 0, 0, 105,
	236, 248, 121, 222, 107, 246, 233, 170, 150, 151,
	106, 0, 208, 129, 136, 126, 183, 0, 0, 0,
	243, 244, 125, 268, 113, 256, 109, 114, 255, 177,
	0, 0, 0, 239, 247, 171, 164, 0, 108, 245,
	169, 163, 154, 133, 143, 201, 161, 202, 144, 174,
	173, 175, 0, 0, 0, 231, 253, 269, 118, 0,
	0, 238, 263, 264, 0, 0, 119, 137, 132, 200,
	176, 115, 146, 228, 153, 160, 207, 267, 190, 213,
	122, 252, 229, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 110, 157, 266, 205, 135, 254, 0,
	0, 128, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 103, 104, 111, 117, 123, 127,
	131, 134, 139, 142, 145, 147, 148, 149, 152, 162,
	165, 166, 167, 168, 178, 179, 180, 182, 185, 186,
	187, 188, 189, 192, 194, 195, 196, 197, 198, 199,
	206, 209, 215, 216, 217, 218, 219, 220, 221, 223,
	224, 225, 226, 232, 235, 241, 242, 251, 258, 262,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 130,
	0, 0, 0, 0, 156, 0, 0, 0, 0, 158,
	0, 0, 230, 172, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 333, 0, 0, 0, 0, 0, 0, 0, 0,
	120, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 0, 0, 0,
	0, 0, 259, 0, 0, 0, 203, 0, 234, 141,
	155, 116, 102, 112, 0, 140, 181, 210, 214, 0,
	0, 0, 0, 0, 124, 0, 212, 191, 250, 0,
	0, 193, 211, 159, 240, 204, 249, 260, 261, 237,
	257, 265, 227, 0, 0, 0, 0, 0, 105, 236,
	248, 121, 222, 107, 246, 233, 170, 150, 151, 106,
	0, 208, 129, 136, 126, 183, 0, 0, 0, 243,
	244, 125, 268, 113, 256, 109, 114, 255, 177, 0,
	0, 0, 239, 247, 171, 164, 0, 108, 245, 169,
	163, 154, 133, 143, 201, 161, 202, 144, 174, 173,
	175, 0, 0, 0, 231, 253, 269, 118, 0, 0,
	238, 263, 264, 0, 0, 119, 137, 132, 200, 176,
	115, 146, 228, 153, 160, 207, 267, 190, 213, 122,
	252, 229, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 110, 157, 266, 205, 135, 254, 0, 0,
	128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 104, 111, 117, 123, 127, 131,
	134, 139, 142, 145, 147, 148, 149, 152, 162, 165,
	166, 167, 168, 178, 179, 180, 182, 185, 186, 187,
	188, 189, 192, 194, 195, 196, 197, 198, 199, 206,
	209, 215, 216, 217, 218, 219, 220, 221, 223, 224,
	225, 226, 232, 235, 241, 242, 251, 258, 262,
}
var yyPact = [...]int{

	2361, -1000, -272, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1130, 1188, -1000, -1000, -1000, -1000,
	-1000, -1000, 322, 93, -1000, -1000, -1000, 191, 14, 15625,
	189, 1710, 16323, -1000, 22, -1000, -1000, 133, 16323, -1000,
	-1000, -90, -104, -1000, 929, -1000, -1000, 33, -1000, -1000,
	-1000, -1000, -1000, -1000, 1124, 1127, 931, 1108, 1021, -1000,
	7904, 155, 155, 15276, 6857, -1000, -1000, 384, 16323, 184,
	16323, -155, 117, 117, 788, 117, -1000, -1000, -1000, -1000,
	16323, 137, 15974, 137, 137, 137, 16323, -1000, 232, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	16323, 785, 1075, 3961, 76, 3961, 3961, -1000, 426, -1000,
	3961, 67, 3961, -85, 424, 63, -23, -1000, 3961, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 115, 929, 337,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 565, 188, 16323,
	269, -1000, 1071, 9312, 9312, 1130, -1000, 929, -1000, -1000,
	-1000, 1062, -1000, -1000, 415, 1176, -1000, 11755, 231, -1000,
	9312, 2173, 701, -1000, -1000, 701, -1000, -1000, 216, -1000,
	-1000, 10359, 10359, 10359, 10359, 10359, 10359, 10359, 10359, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 701, -1000, 8963, 701, 701, 701, 701,
	701, 701, 701, 701, 701, 701, 9312, 701, 701, 701,
	701, 701, 701, 701, 701, 701, 701, 701, 701, 701,
	701, 701, 14920, 14222, 16323, 877, 853, -1000, -1000, 229,
	876, 6495, -99, -1000, -1000, -1000, 331, 13524, -1000, -1000,
	-1000, 1069, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 783, 16323, -1000, 2375, -1000, 15974,
	1105, 170, 780, 357, 777, 74, 16323, 883, 162, 16323,
	1092, 965, 16323, 772, 771, -1000, 6133, -1000, 3961, 3961,
	-1000, -1000, -1000, 117, 117, 3961, 3961, 16323, 3961, 16323,
	-1000, -1000, 16323, -1000, -1000, -1000, 3961, 3961, -1000, 1169,
	347, -1000, -1000, -1000, -1000, 9312, -1000, 10359, 284, -1000,
	962, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 768, -1000,
	-1000, -1000, -1000, 16323, 3961, 72, 119, 109, 16323, -1000,
	1182, 254, 747, 228, 881, -1000, 605, 1124, 565, 1021,
	13175, 986, -1000, -1000, -1000, 16323, -1000, 9312, 9312, 540,
	-1000, 14571, -1000, -1000, 4685, 288, 10359, 485, 471, 10359,
	10359, 10359, 10359, 10359, 10359, 10359, 10359, 10359, 10359, 10359,
	10359, 10359, 10359, 10359, 487, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 759, -1000, 929, 829, 829, 247, 247,
	247, 247, 247, 247, 247, 10708, 1101, 565, 767, 500,
	8963, 7904, 7904, 565, 9312, 9312, 8602, 8253, 7904, 7904,
	1101, 348, 500, 16672, -1000, -1000, 10010, -1000, -1000, -1000,
	-1000, -1000, 565, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	15974, 15974, 7904, 7904, 7904, 7904, 90, 16323, -1000, 872,
	947, -1000, -1000, -1000, 1102, 12826, 11406, 90, 793, 14222,
	16323, -1000, -1000, 14222, 16323, 4323, 5771, 876, -99, 843,
	-1000, -124, -108, 7206, 246, -1000, -1000, -1000, -1000, 3237,
	401, 713, -1000, -84, -1000, -1000, -1000, 916, -1000, 916,
	105, -32, 916, 916, 916, 916, 916, -36, -36, -36,
	-36, -40, -1000, -1000, -1000, -1000, -1000, 932, 930, -1000,
	916, 916, 916, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 926, 134, 926, 923, 923, 923, 923, 920, -1000,
	16323, 3961, 1087, 3961, 1162, -1000, -1000, -1000, 16323, 16323,
	869, -1000, 16323, 849, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 746, 735, -1000, -1000, -1000, -1000, -1000, 352,
	-1000, -1000, 16323, 1097, 16323, 16323, 500, 409, -1000, 547,
	16323, -1000, 92, -1000, 16323, 16323, 16323, 16323, 16323, 202,
	-1000, 1033, 9312, 9312, 5409, 9312, -1000, -1000, -1000, 1071,
	-1000, 1101, 1129, -1000, 1040, 1039, 7904, -1000, -1000, 288,
	296, -1000, -1000, 576, -1000, -1000, -1000, -1000, 222, 701,
	-1000, 1896, -1000, -1000, -1000, -1000, 485, 10359, 10359, 10359,
	409, 1896, 2356, 497, 642, 247, 422, 422, 244, 244,
	244, 244, 244, 681, 681, -1000, -1000, -1000, 565, -1000,
	-1000, -1000, 7904, -1000, 9312, -1000, 565, 750, -1000, 750,
	-1000, 464, 611, 315, 1166, 750, 308, 1140, 750, 750,
	750, 7904, 408, -1000, 9312, 565, -1000, 219, -1000, 484,
	847, 846, 750, 565, 845, 750, 750, 880, 701, -1000,
	16672, 14222, 14222, 14222, 14222, 14222, -1000, 1015, 999, -1000,
	985, 976, 1007, 16323, -1000, 741, 12826, -1000, 701, -1000,
	12465, 242, 175, 174, 173, -1000, -1000, 1137, 14222, 913,
	-1000, 913, -1000, 215, -1000, -1000, 843, -99, -137, -1000,
	-1000, -1000, -1000, 500, -1000, 554, 814, 2875, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 928, 732, -1000, 1054, 271,
	279, 592, 1051, -1000, -1000, -1000, 210, -95, -1000, -1000,
	492, -36, -36, 916, 916, 99, 916, -1000, -36, -1000,
	-1000, -1000, 246, 1068, 246, 246, 246, 246, -36, 546,
	546, -1000, -1000, -1000, -1000, 490, -1000, 926, -1000, -1000,
	468, -1000, -1000, -1000, 960, 15974, 929, 1094, -1000, -1000,
	-1000, 959, -1000, -1000, -1000, 161, -1000, 3961, 16323, 3961,
	3961, 1137, 730, 700, 347, 356, -207, -1000, -1000, -1000,
	10359, -1000, -1000, -1000, 283, 270, 275, 127, 127, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	89, 914, -1000, -1000, -1000, -1000, -9, 68, 1030, 500,
	500, 213, -1000, -1000, 16323, -1000, -1000, -1000, -1000, 903,
	-1000, -1000, -1000, 3599, 7904, -1000, 409, 1896, 569, -1000,
	10359, -1000, 565, 500, -1000, 7904, -1000, -1000, 66, 487,
	66, 10359, 10359, -1000, 10359, 10359, -1000, -169, -1000, 839,
	344, -1000, 9312, 564, -1000, 5409, -1000, 10359, 10359, -1000,
	-1000, -1000, -1000, 953, 16672, 701, -1000, 12116, 15974, 919,
	-1000, 305, 947, 945, 952, 873, -1000, -1000, -1000, -1000,
	996, -1000, 993, -1000, -1000, -1000, -1000, 15974, 10359, 242,
	-1000, 701, 701, 701, 1130, 9312, 913, -1000, -1000, 250,
	-1000, -1000, -135, -121, -1000, -1000, -1000, 3237, -1000, 3237,
	15974, 110, -1000, 592, 592, -1000, -1000, -1000, 924, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 375, 10359, 1181, -1000,
	1053, -1000, 1052, 531, -1000, -1000, 649, 246, 246, -36,
	-1000, -1000, 916, -1000, 246, -1000, 290, -1000, -1000, -1000,
	-1000, 246, 720, -1000, 716, 810, -1000, 712, 16323, -1000,
	-1000, -1000, 16323, 16323, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 356, -1000, 515, 9312, 10359, 1896, -1000, 502, -1000,
	592, 233, -1000, -1000, -1000, 699, 1051, -1000, -1000, 693,
	-1000, 651, 15974, 1050, 644, 16323, 15974, -1000, -1000, 628,
	641, 15974, -174, 640, 15974, 15974, 15974, -1000, 5047, -1000,
	1137, 14222, -1000, -1000, 565, -1000, 10359, 1896, -1000, -1000,
	565, 916, 916, -1000, 916, 923, -1000, 916, 23, 916,
	15, 565, 565, 2198, 1947, 1765, 778, 701, -163, -1000,
	500, 9312, -1000, 1648, 848, -1000, 1078, 795, 806, -1000,
	-1000, 7555, 565, 698, 211, 675, -1000, 1130, 16672, 9312,
	-1000, -1000, 9312, 922, -1000, 9312, -1000, -1000, -1000, 675,
	1791, -1000, 15974, 15974, 15974, 1124, 500, -1000, -1000, -1000,
	-1000, 2875, -1000, 671, -1000, 916, -1000, -1000, -1000, 15974,
	-1000, 1896, -69, -1000, -1000, -1000, -1000, -1000, -1000, 246,
	-1000, -1000, -1000, -1000, -1000, -36, 511, -36, 455, -1000,
	431, 912, -1000, 929, 1111, -1000, -1000, -1000, 500, 1896,
	628, 108, -1000, 920, 271, 110, -1000, -1000, -1000, -1000,
	634, 266, -1000, 160, 108, 628, 1080, -1000, 5047, -1000,
	-1000, 911, 941, -1000, 1131, 809, -1000, 1896, -1000, -1000,
	107, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10359,
	10359, 10359, 10359, 10359, 565, 510, 500, 10359, 10359, 1043,
	-1000, 701, -1000, -1000, 905, 15974, 15974, -1000, 15974, 1124,
	-1000, 500, 500, 15974, 500, 11057, -1000, 13873, 667, -1000,
	667, 667, -1000, 214, 15974, 1084, 665, -1000, -1000, 246,
	-1000, 246, 633, 601, 15974, -1000, 61, 570, -1000, -1000,
	625, 902, 592, -1000, -1000, 582, -1000, -1000, 15974, -1000,
	108, 701, 808, -1000, 291, 15974, 16323, 1133, 1126, -1000,
	-1000, 484, 484, 484, 484, 83, -1000, -1000, 484, 484,
	1180, -1000, 701, -1000, 929, 206, -1000, -1000, -1000, 663,
	-1000, 242, 15974, -1000, -1000, -1000, 214, -1000, 578, 277,
	495, -1000, -1000, 116, -1000, -1000, -1000, -1000, 657, -1000,
	41, -1000, -1000, -1000, 15974, 920, -1000, -1000, -1000, -1000,
	86, 5047, 3237, 648, -1000, -1000, 9312, 9312, -1000, -1000,
	-1000, -1000, 565, 60, -178, -1000, -1000, 16672, 806, 565,
	15974, -1000, -1000, -1000, -1000, -1000, 430, -1000, -1000, 16323,
	214, 52, -1000, 632, 899, -1000, 624, -1000, 15974, -1000,
	-1000, 914, 500, 796, -1000, 1028, -172, -184, 718, -1000,
	-1000, -1000, 786, -1000, 214, 707, 575, 572, 214, 15974,
	-1000, 86, 1038, -174, -1000, 1020, -1000, 15974, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 600, -1000, 81, -1000, -176,
	562, 214, 79, -181, 950, -1000, 701, -185, 949, 948,
	1173, 9661, -1000, -1000, 1179, -1000, 1174, 239, 239, 484,
	565, -1000, -1000, -1000, 120, 411, -1000, -1000, -1000, -1000,
	-1000, -1000,
}
var yyPgo = [...]int{

	0, 1457, 204, 478, 1455, 1454, 1453, 98, 9, 8,
	1450, 1447, 1443, 1441, 1440, 1439, 1437, 1436, 1435, 1423,
	1422, 1421, 1420, 1412, 1411, 1410, 1402, 1398, 1395, 1394,
	1393, 1391, 1389, 1388, 1387, 101, 1386, 1381, 1380, 85,
	1378, 88, 1376, 1367, 1366, 55, 113, 60, 56, 1452,
	1365, 1364, 38, 68, 104, 1363, 47, 1359, 1358, 90,
	1357, 1356, 1355, 71, 1354, 1353, 1167, 1351, 80, 1349,
	23, 35, 145, 1348, 1345, 1344, 1343, 86, 1026, 1342,
	1341, 1334, 29, 1333, 1332, 103, 1329, 62, 14, 19,
	18, 27, 1324, 373, 10, 1318, 72, 1314, 1311, 1310,
	1309, 51, 1305, 20, 1304, 76, 25, 22, 44, 69,
	1302, 33, 78, 52, 41, 11, 92, 77, 1300, 32,
	73, 67, 1299, 1293, 622, 1291, 1290, 61, 1288, 1284,
	45, 1283, 438, 89, 39, 1282, 1281, 1280, 1279, 28,
	70, 1278, 174, 58, 57, 0, 837, 42, 87, 1277,
	17, 1276, 1249, 48, 24, 53, 1275, 1272, 50, 1267,
	1266, 1265, 1263, 1257, 1251, 1247, 1244, 392, 1243, 1242,
	1240, 63, 46, 1238, 1237, 65, 54, 1234, 1232, 1231,
	66, 37, 1230, 59, 36, 1229, 1228, 1226, 1224, 30,
	1222, 1219, 1217, 1215, 1213, 34, 16, 1212, 21, 6,
	15, 26, 12, 31, 1210, 7, 1209, 13, 1206, 3,
	1205, 5, 64, 1, 2, 4, 1204, 1200, 1199, 83,
	82, 94, 1197, 1196, 115,
}
var yyR1 = [...]int{

	0, 217, 218, 218, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 6,
	3, 4, 4, 5, 5, 7, 7, 38, 38, 8,
	9, 9, 9, 9, 221, 221, 61, 61, 59, 59,
	60, 60, 112, 112, 10, 10, 10, 10, 117, 117,
	121, 121, 121, 122, 122, 122, 122, 156, 156, 106,
	12, 12, 12, 12, 12, 12, 12, 12, 17, 17,
	18, 18, 18, 104, 104, 104, 11, 11, 11, 211,
	211, 210, 209, 209, 208, 208, 207, 23, 191, 193,
	193, 192, 192, 192, 192, 181, 160, 160, 160, 160,
	160, 160, 160, 159, 159, 159, 159, 163, 163, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 162, 162,
	162, 162, 162, 162, 162, 162, 164, 164, 164, 164,
	164, 165, 165, 165, 165, 165, 165, 165, 165, 165,
	165, 165, 165, 165, 165, 165, 165, 165, 165, 165,
	165, 165, 165, 165, 165, 165, 166, 166, 166, 166,
	166, 166, 166, 166, 180, 180, 167, 167, 175, 175,
	176, 176, 176, 173, 173, 174, 174, 177, 177, 169,
	170, 178, 171, 171, 171, 172, 172, 172, 179, 179,
	179, 179, 168, 182, 182, 202, 202, 201, 201, 200,
	200, 200, 190, 190, 197, 197, 197, 197, 197, 185,
	185, 185, 184, 184, 186, 186, 189, 189, 199, 199,
	198, 183, 183, 203, 203, 203, 203, 203, 187, 187,
	188, 188, 188, 214, 215, 213, 213, 213, 213, 213,
	194, 194, 194, 195, 195, 195, 196, 196, 196, 216,
	216, 19, 19, 19, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 103, 103, 103, 21, 22, 22, 22, 22,
	22, 22, 22, 22, 140, 140, 212, 212, 212, 212,
	212, 206, 204, 204, 205, 205, 13, 24, 24, 14,
	14, 14, 14, 14, 15, 15, 25, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 50, 128, 128,
	126, 126, 129, 129, 127, 127, 127, 130, 130, 130,
	131, 131, 157, 157, 157, 27, 27, 32, 32, 33,
	34, 141, 141, 30, 30, 31, 31, 31, 31, 44,
	44, 222, 222, 29, 29, 28, 28, 28, 28, 16,
	223, 35, 36, 36, 37, 37, 37, 41, 41, 41,
	39, 39, 39, 40, 40, 47, 47, 46, 46, 48,
	48, 48, 48, 149, 149, 149, 148, 148, 51, 51,
	52, 52, 53, 53, 54, 54, 54, 54, 69, 69,
	70, 70, 70, 70, 70, 80, 80, 111, 111, 113,
	113, 55, 55, 55, 55, 56, 56, 57, 57, 58,
	58, 139, 139, 154, 154, 62, 62, 62, 64, 63,
	63, 63, 63, 65, 65, 67, 67, 66, 66, 68,
	71, 71, 71, 71, 72, 72, 49, 49, 49, 49,
	49, 49, 49, 125, 125, 74, 74, 73, 73, 73,
	73, 73, 73, 73, 73, 73, 73, 86, 86, 86,
	86, 86, 86, 75, 75, 75, 75, 75, 75, 75,
	45, 45, 87, 87, 87, 93, 88, 88, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	83, 83, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 224, 224, 85, 84, 84, 84, 84,
	84, 84, 42, 42, 42, 42, 42, 155, 155, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 97, 97, 43, 43, 95, 95, 96, 98,
	98, 94, 94, 94, 77, 77, 77, 77, 77, 77,
	77, 77, 79, 79, 79, 99, 99, 100, 100, 101,
	101, 102, 102, 105, 107, 107, 107, 108, 108, 108,
	108, 109, 109, 109, 76, 76, 76, 76, 76, 76,
	110, 110, 110, 110, 114, 114, 89, 89, 91, 91,
	90, 92, 115, 115, 119, 116, 116, 120, 120, 120,
	120, 118, 118, 118, 151, 151, 151, 123, 123, 132,
	132, 133, 133, 124, 124, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 138, 138, 137, 137, 137,
	134, 134, 134, 135, 135, 150, 150, 146, 146, 147,
	147, 152, 152, 153, 153, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 219, 220, 142, 143, 143, 143,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 4, 6, 7, 5,
	10, 1, 3, 1, 3, 7, 8, 1, 1, 9,
	8, 7, 6, 6, 1, 1, 1, 3, 1, 3,
	1, 3, 0, 4, 3, 4, 5, 4, 1, 3,
	3, 2, 2, 2, 2, 2, 1, 1, 1, 0,
	2, 2, 11, 7, 9, 5, 5, 12, 1, 1,
	1, 1, 1, 0, 2, 2, 1, 1, 1, 0,
	2, 1, 0, 2, 1, 3, 3, 4, 4, 2,
	4, 1, 3, 3, 3, 3, 0, 2, 2, 2,
	2, 2, 2, 3, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	3, 2, 2, 2, 2, 2, 1, 2, 2, 2,
	1, 4, 4, 3, 3, 2, 4, 5, 2, 3,
	4, 2, 2, 3, 3, 3, 3, 3, 4, 1,
	1, 1, 1, 1, 6, 6, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 3, 0, 5,
	0, 3, 5, 0, 1, 0, 1, 1, 2, 2,
	3, 1, 0, 3, 3, 0, 2, 2, 2, 1,
	2, 1, 2, 5, 4, 0, 1, 1, 2, 2,
	3, 2, 0, 1, 2, 3, 3, 2, 2, 1,
	1, 1, 1, 1, 0, 1, 0, 1, 1, 3,
	3, 3, 1, 10, 11, 11, 12, 12, 1, 1,
	0, 2, 2, 3, 3, 1, 1, 2, 2, 2,
	0, 1, 3, 1, 2, 3, 1, 1, 1, 0,
	2, 1, 1, 1, 6, 10, 9, 7, 7, 7,
	9, 7, 12, 14, 7, 7, 9, 9, 10, 5,
	6, 8, 0, 1, 2, 4, 7, 5, 5, 5,
	12, 7, 5, 9, 0, 1, 1, 1, 1, 1,
	1, 7, 1, 3, 8, 8, 3, 3, 5, 4,
	6, 4, 4, 4, 3, 2, 3, 4, 4, 3,
	6, 6, 4, 4, 4, 4, 4, 3, 3, 2,
	6, 2, 3, 4, 3, 7, 6, 4, 2, 4,
	3, 4, 3, 3, 5, 2, 3, 3, 1, 1,
	0, 1, 1, 1, 0, 2, 2, 0, 2, 2,
	0, 2, 0, 1, 1, 2, 1, 1, 2, 1,
	1, 1, 1, 3, 3, 1, 1, 1, 1, 0,
	3, 1, 1, 2, 2, 2, 2, 3, 3, 2,
	0, 2, 0, 2, 1, 2, 2, 0, 1, 1,
	0, 1, 1, 0, 1, 0, 1, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 1, 0, 2,
	1, 3, 1, 1, 1, 3, 1, 3, 2, 6,
	1, 4, 6, 3, 2, 0, 3, 1, 3, 1,
	3, 4, 4, 4, 3, 2, 4, 0, 1, 0,
	2, 0, 1, 1, 1, 1, 2, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 1, 1, 3, 3,
	0, 5, 5, 5, 0, 2, 1, 3, 3, 2,
	3, 1, 2, 0, 3, 1, 1, 3, 3, 4,
	4, 5, 3, 4, 5, 6, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	2, 2, 2, 2, 2, 3, 1, 1, 1, 1,
	5, 6, 4, 4, 3, 6, 6, 6, 8, 8,
	8, 8, 9, 4, 7, 5, 4, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 8, 8, 0, 2, 3, 4, 4, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 2, 1, 2, 2,
	1, 2, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 0, 3, 0, 2, 0,
	3, 1, 3, 2, 0, 1, 1, 0, 2, 4,
	4, 0, 2, 4, 2, 1, 3, 5, 4, 6,
	1, 3, 3, 5, 0, 5, 1, 3, 1, 2,
	3, 1, 1, 3, 3, 1, 3, 3, 3, 3,
	3, 1, 2, 1, 1, 1, 1, 1, 1, 0,
	2, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 1, 0, 1, 0, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -217, -1, -2, -6, -7, -8, -9, -10, -12,
	-19, -13, -14, -15, -25, -26, -27, -32, -33, -34,
	-30, -29, -28, -16, -3, -4, 6, 7, -38, 9,
	10, 29, -23, 117, -20, -21, -22, 120, 119, 156,
	121, 149, 52, 176, 177, 179, 180, -222, -141, 154,
	155, 30, 31, 123, -219, 8, 269, 118, 151, 150,
	25, 56, -218, 367, -101, 15, -37, 5, -35, -223,
	-35, -35, -35, -35, -35, -191, -193, 56, 92, -135,
	130, 74, 261, 126, 164, 127, -134, 33, 137, 136,
	127, 127, 128, 130, 261, 126, 127, -66, -152, 59,
	-145, 279, 140, 311, 312, 176, 187, 181, 215, 203,
	280, 313, 141, 201, 204, 248, 139, 314, 235, 243,
	68, 179, 257, 315, 152, 199, 192, 316, 288, 190,
	27, 317, 245, 220, 318, 284, 191, 244, 123, 319,
	143, 137, 320, 221, 225, 321, 249, 322, 323, 324,
	185, 186, 325, 251, 219, 138, 32, 281, 37, 161,
	252, 223, 326, 218, 213, 327, 328, 329, 330, 217,
	184, 212, 41, 227, 226, 228, 247, 206, 331, 332,
	333, 144, 334, 193, 18, 335, 336, 337, 338, 339,
	255, 155, 340, 159, 341, 342, 343, 344, 345, 346,
	246, 222, 224, 134, 163, 283, 347, 253, 189, 348,
	145, 160, 154, 256, 146, 349, 350, 351, 352, 353,
	354, 355, 180, 356, 357, 358, 359, 170, 250, 259,
	40, 232, 360, 183, 136, 361, 177, 167, 238, 210,
	162, 362, 363, 197, 198, 216, 182, 211, 178, 164,
	156, 364, 258, 233, 285, 205, 202, 168, 365, 130,
	165, 166, 366, 239, 240, 169, 282, 254, 200, 234,
	127, 110, 204, 248, 117, 236, 237, 245, -185, 246,
	163, -157, 127, -126, 235, 239, 240, 169, 59, 128,
	129, 32, 250, 249, 241, -152, 178, -44, 121, 157,
	-66, -142, -142, -142, 238, 238, -142, -2, -124, 130,
	240, 132, -108, 17, 16, -5, -3, -219, 6, 20,
	21, -41, 42, 43, -36, -48, 101, -49, -152, -73,
	76, -78, 28, 59, -145, 23, -77, -74, -94, -92,
	-93, 110, 111, 112, 99, 100, 107, 77, 113, -83,
	-81, -82, -84, 61, 60, 69, 62, 63, 64, 65,
	70, 71, 72, -146, -90, -219, 46, 47, 126, 270,
	271, 272, 273, 278, 147, 274, 79, 36, 260, 268,
	267, 266, 264, 265, 262, 263, 276, 277, 133, 261,
	105, 269, -124, -124, 11, -59, -60, -66, -68, -152,
	-116, -156, 178, -120, 250, 249, -147, -118, -146, -144,
	248, 204, 247, 59, -145, 122, 148, 286, 75, 22,
	24, 230, 78, 110, 16, 79, 109, 270, 117, 50,
	287, 262, 263, 260, 272, 273, 261, 236, 28, 10,
	289, 25, 150, 21, 103, 119, 82, 83, 153, 23,
	151, 72, 147, 292, 19, 53, 11, 13, 293, 294,
	14, 133, 132, 94, 128, 48, 8, 113, 26, 91,
	44, 295, 34, 296, 297, 298, 299, 46, 92, 17,
	264, 265, 30, 300, 278, 158, 105, 51, 38, 76,
	301, 302, 70, 303, 73, 54, 74, 15, 49, 304,
	305, 306, 307, 93, 120, 269, 47, 308, 126, 6,
	275, 29, 149, 45, 309, 127, 81, 276, 277, 131,
	71, 5, 33, 31, 9, 52, 55, 266, 267, 268,
	36, 80, 12, 310, -192, 92, -181, 59, -66, 128,
	-66, 269, -133, 133, -133, 59, -133, -24, -66, -132,
	133, -146, -132, -132, -132, -66, 114, -66, 59, 29,
	-143, -219, -147, 261, 126, 59, 163, 127, 164, 130,
	-143, -143, -187, 11, 94, -143, 167, 168, -143, -129,
	-128, 243, 244, 238, 242, 12, -50, 92, 168, 238,
	166, -143, -31, -2, -9, -7, -8, -2, 84, -142,
	-142, -220, 58, 127, -66, 117, 119, 122, 54, -109,
	19, 30, -49, -152, -102, -105, -49, -101, -2, -35,
	38, -39, 20, 21, 67, 11, -149, 75, 74, 91,
	-148, 22, -146, 61, 114, -49, -75, 94, 76, 92,
	93, 78, 96, 95, 106, 99, 100, 101, 102, 103,
	104, 105, 97, 98, 109, 84, 85, 86, 87, 88,
	89, 90, -125, -219, -93, -219, 115, 116, -78, -78,
	-78, -78, -78, -78, -78, -78, -219, -2, -88, -49,
	-219, -219, -219, -219, -219, -219, -219, -219, -219, -219,
	-219, -97, -49, -219, -224, -85, -219, -224, -85, -224,
	-85, -224, -219, -224, -85, -224, -85, -224, -224, -85,
	-219, -219, -219, -219, -219, -219, -67, 26, -66, -52,
	-53, -54, -55, -69, -93, -219, -66, -66, -59, -221,
	57, 11, 55, -221, 57, 114, 57, -116, 178, -117,
	-121, 251, 253, 84, -151, -146, 61, 28, 29, 58,
	57, -66, -159, -163, -165, -164, -166, -161, -162, 201,
	204, 208, 206, 202, 207, 110, 205, 210, 211, 212,
	213, 214, 215, 216, 217, 218, 219, 220, 29, 152,
	197, 198, 199, 200, 221, 222, 223, 224, 225, 226,
	227, 228, 181, 203, 280, 182, 183, 184, 185, 186,
	187, 189, 190, 191, 192, 193, 194, 195, -146, 22,
	130, 59, 76, 59, -17, 173, 148, -66, 57, 131,
	-59, 23, 54, -61, -66, 59, 59, -153, -152, -144,
	-143, -143, -133, -133, -143, -143, -66, -143, -66, -66,
	-143, -143, 11, -127, 11, 94, -49, -78, -131, 92,
	54, 59, -66, -143, 165, 165, 127, 127, 170, -66,
	9, 94, 57, 18, 114, 57, -107, 24, 25, -108,
	-220, -41, -79, -146, 62, 65, -40, 45, -66, -49,
	-49, -86, 70, 76, 71, 72, -148, 101, -153, -147,
	-144, -78, -87, -90, -93, 66, 94, 92, 93, 78,
	-78, -78, -78, -78, -78, -78, -78, -78, -78, -78,
	-78, -78, -78, -78, -78, -155, 59, 61, 59, -77,
	-77, -146, -39, -220, 57, -220, -2, -46, -48, -46,
	-220, -49, -49, -94, 61, -46, -94, 61, -46, -46,
	-46, -39, -95, -96, 80, -94, -146, -152, -220, -78,
	-146, -146, -46, -47, -46, -46, -46, -112, 159, -66,
	29, 57, -62, -64, -63, -65, 44, 48, 50, 45,
	46, 47, 51, -139, 22, -52, -219, -70, 159, -71,
	22, -154, 52, 132, 53, -152, 61, -112, 55, -52,
	-66, -52, -68, -152, 101, -120, -117, 57, 252, 254,
	255, 54, 73, -49, -172, 109, -194, -195, -196, -147,
	61, 62, -181, -182, -183, -197, 142, -203, 134, 136,
	33, -184, 143, 128, 34, 58, -160, -173, 233, -167,
	56, -167, -167, 209, 201, 204, 202, -167, -167, -167,
	-167, -167, -171, 204, -171, -171, -171, -171, 202, 56,
	56, -167, -167, -167, -175, 56, -175, 196, -175, -176,
	56, -176, -176, -176, -150, 55, -106, -66, -143, 23,
	-143, -18, 8, 9, 10, -66, -66, -66, 57, 59,
	59, -188, 11, 94, -66, -80, 22, -152, -152, -45,
	153, 61, -66, -136, 122, 119, 120, 124, 125, -206,
	118, 230, 204, 68, 28, 15, 270, 159, 285, 59,
	160, -66, -66, -66, -66, -66, 122, 119, 40, -49,
	-49, -153, -105, -109, -123, 19, 11, 36, 36, -46,
	70, 71, 72, 114, -219, -87, -78, -78, -78, -45,
	75, -220, -47, -49, -220, 57, -220, -220, 57, 55,
	22, 11, 11, -220, 11, 11, -220, -220, -220, -46,
	-98, -96, 82, -49, -220, 114, -220, 57, 57, -220,
	-220, -220, -220, -76, 29, 36, -2, -219, -219, -115,
	-119, -94, -53, -54, -54, -53, -54, 44, 44, 44,
	49, 44, 49, 44, -63, -152, -220, -219, 303, -154,
	-71, 128, 128, 128, -72, 12, -52, -72, -72, 114,
	-121, -122, 256, 253, 259, 59, 61, 57, -196, 84,
	56, 59, 34, -184, -184, -189, 59, -189, 34, -177,
	-169, -170, -178, -179, -168, 70, 76, 28, 54, 230,
	134, 34, 33, 68, -174, 234, 62, -171, -171, -167,
	-167, -167, 209, -167, -171, -172, 29, -172, -172, -172,
	-172, -171, -180, 61, -180, 62, -175, 62, 54, -146,
	-2, 22, 54, 131, -143, -66, -143, -143, -72, 59,
	59, -127, -130, 92, 12, 303, -78, -142, -140, -212,
	-184, -216, -183, 135, 139, 142, 143, 134, 159, -140,
	-212, 142, -184, 143, 135, -137, -184, 131, 22, -140,
	-140, 159, -211, 55, 165, 230, 165, 41, 114, -66,
	-51, 11, 101, -147, -47, -45, 75, -78, -220, -48,
	-158, 110, 201, 152, 199, 192, 219, 206, 232, 197,
	233, -155, -158, -78, -78, -78, -78, 279, -101, 83,
	-49, 81, -147, -78, -78, -114, 54, -115, -89, -91,
	-90, -219, -2, -110, -146, -113, -146, -72, 57, 84,
	-57, -56, 54, 55, -58, 54, -56, 44, 44, -113,
	-78, -71, -219, -219, -219, -101, -49, -72, 253, 257,
	258, -195, -196, -199, -198, -146, -203, -189, -189, 56,
	70, -78, 9, 34, 34, 61, 58, -172, -172, -171,
	-167, -172, 59, 110, -172, 58, 57, 58, 57, 58,
	57, -66, -106, -106, -66, -66, -130, 61, -49, -78,
	56, -181, -142, -189, -134, 59, 59, -142, 59, -146,
	34, 59, -66, -146, -181, 59, -146, -209, 282, -210,
	59, -146, -146, -146, -72, -52, -220, -78, -220, -167,
	-167, -167, -176, -167, 186, -167, 186, -220, -220, 19,
	19, 19, 19, -219, -43, 275, -49, 57, 57, 27,
	-114, 57, -220, -220, -220, 57, 114, -220, 57, -101,
	-119, -49, -49, 56, -49, -220, -71, -139, -111, -146,
	-111, -111, -108, 58, 57, -167, -111, -82, -172, -171,
	61, -171, 62, 62, 56, -2, 19, -181, -103, 147,
	148, -150, -186, -184, 59, -138, 131, 22, 131, -103,
	-181, 26, -208, -207, -147, 56, 55, -99, 13, -171,
	59, -78, -78, -78, -78, -78, -220, 61, -78, -78,
	34, -91, 36, -2, -219, -146, -146, -146, -108, -111,
	-70, -154, 57, -220, -220, -220, -201, -200, 55, 138,
	68, -198, -107, 58, -172, -172, 58, 58, -199, -106,
	171, 58, -142, 59, 56, -189, 59, -146, -142, -103,
	-219, 57, 84, -111, -66, -100, 14, 16, -220, -220,
	-220, -220, -42, 94, 282, -220, -220, 9, -89, -2,
	114, 58, -71, -146, -200, 59, -190, 84, 61, 145,
	58, 172, -142, -199, -150, -142, -204, -205, 159, -207,
	-196, 58, -49, -88, -220, 280, 51, 283, -115, -220,
	-146, 62, -66, -202, -201, -104, 174, 175, 58, 56,
	-220, 57, -146, -211, 41, 281, 284, 56, -11, -2,
	-8, -9, 59, 59, -202, -199, -205, 36, -209, 41,
	-111, 58, 161, 282, 58, -202, 162, 283, -214, -215,
	54, -219, 284, -215, 54, -214, 54, 10, 9, -78,
	158, -213, 146, 141, 144, 29, -213, -220, -220, 140,
	28, 70,
}
var yyDef = [...]int{

	25, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 639, 0, 390, 390, 390, 390,
	390, 390, 0, 713, 261, 262, 263, 0, 0, 0,
	0, -2, 366, 367, 0, 369, 370, 379, -2, 1015,
	1015, 0, 0, 1015, 0, 37, 38, 693, 382, 371,
	372, 1013, 1, 3, 647, 0, 0, 394, 397, 392,
	0, 693, 693, 0, 0, 70, 71, 0, 0, 0,
	0, 0, 691, 691, 0, 691, 714, 710, 711, 712,
	0, 689, 0, 689, 689, 689, 0, 315, 467, 721,
	722, 844, 845, 846, 847, 848, 849, 850, 851, 852,
	853, 854, 855, 856, 857, 858, 859, 860, 861, 862,
	863, 864, 865, 866, 867, 868, 869, 870, 871, 872,
	873, 874, 875, 876, 877, 878, 879, 880, 881, 882,
	883, 884, 885, 886, 887, 888, 889, 890, 891, 892,
	893, 894, 895, 896, 897, 898, 899, 900, 901, 902,
	903, 904, 905, 906, 907, 908, 909, 910, 911, 912,
	913, 914, 915, 916, 917, 918, 919, 920, 921, 922,
	923, 924, 925, 926, 927, 928, 929, 930, 931, 932,
	933, 934, 935, 936, 937, 938, 939, 940, 941, 942,
	943, 944, 945, 946, 947, 948, 949, 950, 951, 952,
	953, 954, 955, 956, 957, 958, 959, 960, 961, 962,
	963, 964, 965, 966, 967, 968, 969, 970, 971, 972,
	973, 974, 975, 976, 977, 978, 979, 980, 981, 982,
	983, 984, 985, 986, 987, 988, 989, 990, 991, 992,
	993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002,
	1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012,
	0, 0, 0, 1016, 0, 1016, 1016, 329, 0, 331,
	1016, 0, 1016, 0, 338, 0, 0, 345, 1016, 219,
	220, 221, 363, 364, 351, 365, 368, 0, 0, 0,
	383, 384, 385, 386, 1015, 1015, 389, 31, 0, 0,
	0, 694, 651, 0, 0, 639, 33, 0, 390, 395,
	396, 400, 398, 399, 391, 0, 409, 413, 0, 476,
	0, 481, 483, -2, -2, 0, 518, 519, 520, 521,
	522, 0, 0, 0, 0, 0, 0, 0, 0, 546,
	547, 548, 549, 624, 625, 626, 627, 628, 629, 630,
	631, 485, 486, 621, 671, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 612, 0, 583, 583,
	583, 583, 583, 583, 583, 583, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 48, 50, 467,
	54, 0, 991, 675, -2, -2, 0, 0, 719, 720,
	-2, 857, -2, 717, 718, 725, 726, 727, 728, 729,
	730, 731, 732, 733, 734, 735, 736, 737, 738, 739,
	740, 741, 742, 743, 744, 745, 746, 747, 748, 749,
	750, 751, 752, 753, 754, 755, 756, 757, 758, 759,
	760, 761, 762, 763, 764, 765, 766, 767, 768, 769,
	770, 771, 772, 773, 774, 775, 776, 777, 778, 779,
	780, 781, 782, 783, 784, 785, 786, 787, 788, 789,
	790, 791, 792, 793, 794, 795, 796, 797, 798, 799,
	800, 801, 802, 803, 804, 805, 806, 807, 808, 809,
	810, 811, 812, 813, 814, 815, 816, 817, 818, 819,
	820, 821, 822, 823, 824, 825, 826, 827, 828, 829,
	830, 831, 832, 833, 834, 835, 836, 837, 838, 839,
	840, 841, 842, 843, 0, 0, 101, 0, 99, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 314, 0, 316, 1016, 1016,
	319, 1017, 1018, 691, 691, 1016, 1016, 0, 1016, 0,
	327, 328, 0, 238, 239, 332, 1016, 1016, 334, 0,
	354, 352, 353, 348, 349, 0, 340, 0, 360, 342,
	343, 346, 373, -2, 376, 377, 378, -2, 0, 387,
	388, 32, 1014, 0, 1016, 0, 0, 0, 0, 26,
	0, 0, 648, 0, 640, 641, 644, 647, 31, 397,
	0, 403, 401, 402, 393, 0, 410, 0, 0, 0,
	414, 0, 416, 417, 0, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 503, 504, 505, 506, 507,
	508, 509, 482, 0, 496, 0, 0, 0, 538, 539,
	540, 541, 542, 543, 544, 0, 400, 31, 0, 516,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	400, 0, 613, 0, 567, 575, 0, 568, 576, 569,
	577, 570, 0, 571, 578, 572, 579, 573, 574, 580,
	0, 0, 0, 405, 0, 0, 52, 0, 466, 0,
	420, 422, 423, 424, -2, 0, 470, -2, 0, 0,
	0, 44, 45, 0, 0, 0, 0, 55, 991, 57,
	58, 0, 0, 0, 195, 684, 685, 686, 682, 250,
	0, 0, 106, 183, 114, 115, 116, 176, 118, 176,
	176, 0, 176, 176, 176, 176, 176, 192, 192, 192,
	192, 192, 159, 160, 161, 162, 163, 0, 0, 136,
	176, 176, 176, 140, 166, 167, 168, 169, 170, 171,
	172, 173, 119, 120, 121, 122, 123, 124, 125, 126,
	127, 178, 178, 178, 180, 180, 180, 180, 715, 69,
	0, 1016, 0, 1016, 0, 78, 79, 97, 0, 0,
	309, 690, 0, 311, 46, 312, 313, 468, 723, 724,
	317, 318, 0, 0, 322, 323, 324, 325, 326, 240,
	333, 337, 0, 435, 0, 0, 339, 510, 341, 0,
	0, 380, 0, 285, 0, 0, 0, 0, 0, 0,
	652, 0, 0, 0, 0, 0, 643, 645, 646, 651,
	34, 400, 0, 632, 0, 0, 0, 404, 29, 477,
	478, 480, 497, 0, 499, 501, 415, 411, 0, 622,
	-2, 487, 488, 512, 513, 514, 0, 0, 0, 0,
	510, 492, 0, 523, 524, 525, 526, 527, 528, 529,
	530, 531, 532, 533, 534, 537, 597, 598, 0, 535,
	536, 545, 405, 515, 0, 670, 31, 0, 407, 0,
	554, 0, 0, 520, 624, 0, 520, 624, 0, 0,
	0, 0, 619, 616, 0, 0, 621, 0, 584, 0,
	0, 0, 0, 0, 406, 0, 0, 0, 0, 465,
	0, 0, 0, 0, 0, 0, 455, 0, 0, 458,
	0, 0, 0, 0, 452, 0, 0, 428, 936, 430,
	0, 470, 0, 0, 0, 453, 454, 474, 0, 474,
	49, 474, 51, 0, 469, 676, 56, 0, 0, 61,
	62, 677, 678, 679, 680, 0, 98, 251, 253, 256,
	257, 258, 102, 103, 104, 0, 0, 232, 0, 0,
	226, 226, 0, 222, 223, 100, 105, 185, 184, 117,
	0, 192, 192, 176, 176, 176, 176, 145, 192, 148,
	151, 152, 195, 0, 195, 195, 195, 195, 192, 0,
	0, 137, 138, 139, 128, 0, 129, 178, 131, 132,
	0, 133, 134, 135, 0, 0, 0, 0, 75, 692,
	76, 0, 80, 81, 82, 0, 307, 1016, 0, 1016,
	1016, 474, 0, 0, 354, 357, 0, 355, 356, 347,
	0, 361, 344, 1015, -2, 294, 707, 294, 294, 279,
	695, 696, 697, 698, 699, 700, 701, 702, 703, 704,
	0, 89, 287, 289, 288, 292, 0, 0, 0, 649,
	650, 0, 642, 27, 0, 687, 688, 633, 634, 418,
	498, 500, 502, 0, 405, 489, 510, 493, 0, 490,
	0, 484, 0, 517, -2, 0, 552, 553, 0, 0,
	0, 0, 0, 590, 0, 0, 591, 0, 563, 639,
	0, 617, 0, 0, 566, 0, 585, 0, 0, 586,
	587, 588, 589, 664, 0, 0, -2, 0, 0, 474,
	672, 0, 421, 447, 449, 0, 444, 456, 457, 459,
	0, 461, 0, 463, 464, 425, 427, 0, 0, 470,
	434, 0, 0, 0, 639, 0, 474, 42, 43, 0,
	59, 60, 0, 0, 66, 196, 197, 0, 254, 0,
	0, 0, 214, 226, 226, 217, 227, 218, 0, 107,
	108, 109, 110, 111, 112, 187, 0, 0, 0, 191,
	0, 199, 201, 0, 113, 186, 0, 195, 195, 192,
	143, 144, 176, 149, 195, 153, 0, 154, 155, 156,
	157, 195, 0, 174, 0, 0, 130, 0, 0, 716,
	-2, 69, 0, 0, 310, 47, 320, 321, 330, 241,
	242, 357, 336, 0, 0, 0, 511, 264, 0, 1015,
	226, 0, 280, 295, 296, 297, 298, 299, 300, 0,
	1015, 297, 0, 298, 0, 0, 0, 708, 709, 0,
	0, 0, 92, 0, 0, 0, 0, 653, 0, 28,
	474, 0, 412, 623, 0, 491, 0, 494, 550, 408,
	0, 176, 176, 602, 176, 180, 605, 176, 607, 176,
	610, 0, 0, 0, 0, 0, 0, 0, 614, 565,
	620, 0, 622, 0, 0, 35, 0, 664, 654, 666,
	668, 0, 31, 0, 660, 0, 439, 639, 0, 0,
	441, 448, 0, 0, 442, 0, 443, 460, 462, 0,
	-2, 433, 0, 0, 0, 647, 475, 41, 63, 64,
	65, 252, 255, 0, 228, 176, 231, 215, 216, 0,
	188, 189, 0, 198, 200, 202, 177, 141, 142, 195,
	150, 146, 193, 194, 158, 192, 0, 192, 0, 181,
	0, 0, 73, 0, 0, 308, 335, 358, 359, 436,
	0, 282, 267, 715, 224, 260, 268, 269, 274, 275,
	0, 0, 271, 0, 282, 0, 0, 286, 0, 90,
	91, 0, 0, 291, 635, 419, 551, 495, 555, 599,
	192, 603, 604, 606, 608, 609, 611, 557, 556, 0,
	0, 0, 0, 0, 0, 0, 618, 0, 0, 0,
	36, 0, 669, -2, 0, 0, 0, 53, 0, 647,
	673, 674, 445, 0, 450, 470, 431, 0, 0, 437,
	0, 0, 40, 204, 0, 644, 0, 190, 147, 195,
	175, 195, 0, 0, 0, -2, 0, 0, 1015, 283,
	0, 0, 226, 225, 281, 0, 705, 706, 0, 1015,
	282, 0, 93, 94, 0, 0, 0, 637, 0, 600,
	601, 0, 0, 0, 0, 592, 564, 615, 0, 0,
	0, 667, 0, -2, 0, 662, 661, 440, 39, 0,
	429, 470, 0, 471, 472, 473, 203, 207, 0, 212,
	0, 229, 230, 0, 164, 165, 179, 182, 0, 74,
	0, 1015, 266, 284, 0, 715, 270, 276, 277, 1015,
	0, 0, 0, 0, 293, 30, 0, 0, 558, 560,
	559, 561, 0, 0, 0, 581, 582, 0, 657, 31,
	0, 446, 432, 438, 208, 209, 0, 213, 211, 0,
	205, 83, 265, 0, 0, 278, 0, 302, 0, 95,
	96, 89, 638, 636, 562, 0, 0, 0, 665, -2,
	663, 210, 0, 72, 206, 0, 0, 0, 205, 0,
	301, 0, 0, 92, 593, 0, 596, 0, 77, -2,
	87, 88, 84, 85, 272, 0, 303, 0, 290, 594,
	0, 205, 0, 0, 233, 273, 0, 0, 234, 235,
	0, 0, 595, 236, 0, 237, 0, 0, 0, 0,
	0, 243, 245, 246, 0, 0, 244, 304, 305, 247,
	248, 249,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 77, 3, 3, 3, 104, 96, 3,
	56, 58, 101, 99, 57, 100, 114, 102, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 367,
	85, 84, 86, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 106, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 95, 3, 107,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 78, 79, 80, 81, 82, 83, 87, 88,
	89, 90, 91, 92, 93, 94, 97, 98, 103, 105,
	108, 109, 110, 111, 112, 113, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:344
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:349
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:350
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:354
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:378
		{
			setParseTree(yylex, nil)
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:384
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 27:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:392
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 28:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:396
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 29:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:402
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 30:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:409
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:415
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:419
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:425
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:429
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 35:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:436
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:448
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:460
		{
			yyVAL.str = InsertStr
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:464
		{
			yyVAL.str = ReplaceStr
		}
	case 39:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:470
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:476
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:480
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:484
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:488
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:493
		{
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:494
		{
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:498
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName.ToViewName()}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:502
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName.ToViewName())
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:508
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:512
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:518
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:522
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:527
		{
			yyVAL.partitions = nil
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:531
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:537
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:541
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:545
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:549
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:555
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:559
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:565
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:569
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:573
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:579
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:583
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:587
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:591
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:597
		{
			yyVAL.str = SessionStr
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:601
		{
			yyVAL.str = GlobalStr
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:606
		{
			yyVAL.int = yyPosition(yylex)
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:612
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			if len(yyDollar[1].ddl.TableSpec.Constraints) > 0 {
				yyDollar[1].ddl.ConstraintAction = AddStr
			}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:620
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 72:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:626
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: yyDollar[4].colIdent, Using: yyDollar[5].colIdent, Type: yyDollar[2].str, Columns: yyDollar[9].indexColumns, Options: yyDollar[11].indexOptions}}
		}
	case 73:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:630
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[3].tableName.ToViewName(), ViewExpr: yyDollar[6].selStmt, ViewSelectPositionStart: yyDollar[5].int, ViewSelectPositionEnd: yyDollar[7].int - 1}
		}
	case 74:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:634
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[5].tableName.ToViewName(), ViewExpr: yyDollar[8].selStmt, ViewSelectPositionStart: yyDollar[7].int, ViewSelectPositionEnd: yyDollar[9].int - 1, OrReplace: true}
		}
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:638
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:642
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 77:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:646
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[7].tableName, TriggerSpec: &TriggerSpec{Name: string(yyDollar[3].bytes), Time: yyDollar[4].str, Event: yyDollar[5].str, Order: yyDollar[11].triggerOrder, Body: yyDollar[12].statement}}
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:652
		{
			yyVAL.str = BeforeStr
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:656
		{
			yyVAL.str = AfterStr
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:662
		{
			yyVAL.str = InsertStr
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:666
		{
			yyVAL.str = UpdateStr
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:670
		{
			yyVAL.str = DeleteStr
		}
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:675
		{
			yyVAL.triggerOrder = nil
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:679
		{
			yyVAL.triggerOrder = &TriggerOrder{PrecedesOrFollows: FollowsStr, OtherTriggerName: string(yyDollar[2].bytes)}
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:683
		{
			yyVAL.triggerOrder = &TriggerOrder{PrecedesOrFollows: PrecedesStr, OtherTriggerName: string(yyDollar[2].bytes)}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:689
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:696
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:700
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:706
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:711
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:716
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:722
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:727
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:733
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:739
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName, IfNotExists: ne}
			setDDL(yylex, yyVAL.ddl)
		}
	case 98:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:750
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:757
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 100:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:761
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:767
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:772
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:776
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:780
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:786
		{
			if err := yyDollar[2].columnType.merge(yyDollar[3].columnType); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:795
		{
			yyVAL.columnType = ColumnType{}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:799
		{
			opt := ColumnType{NotNull: yyDollar[2].boolVal, sawnull: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:808
		{
			opt := ColumnType{Default: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:817
		{
			opt := ColumnType{OnUpdate: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:826
		{
			opt := ColumnType{Autoincrement: yyDollar[2].boolVal, sawai: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:835
		{
			opt := ColumnType{KeyOpt: yyDollar[2].colKeyOpt}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:844
		{
			opt := ColumnType{Comment: yyDollar[2].sqlVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:855
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:866
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:871
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:877
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:881
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:885
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:889
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:893
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:897
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:901
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:905
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:909
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:915
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:921
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:927
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:933
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:939
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:945
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:951
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:957
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:965
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:969
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:973
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:977
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:981
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:987
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:991
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:995
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:999
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1003
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1007
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 147:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1011
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1015
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1019
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 150:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1023
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Length: yyDollar[4].sqlVal}
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1027
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1031
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1035
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1039
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1043
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1047
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1051
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 158:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1055
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1059
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1063
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1067
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1071
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1075
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 164:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1079
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 165:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1084
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1090
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1094
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1098
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1102
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1106
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1110
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1114
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1118
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1124
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[1].bytes))
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1129
		{
			yyVAL.strs = append(yyDollar[1].strs, string(yyDollar[3].bytes))
		}
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1134
		{
			yyVAL.sqlVal = nil
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1138
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1143
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 179:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1147
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 180:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1155
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1159
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 182:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1165
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1173
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1177
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1182
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1186
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1193
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1197
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1203
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1209
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1215
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 192:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1220
		{
			yyVAL.str = ""
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1224
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1228
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1233
		{
			yyVAL.str = ""
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1237
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1241
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1247
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1251
		{
			yyVAL.colKeyOpt = colKey
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1255
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1259
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1265
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 203:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1271
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 204:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1275
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 205:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1280
		{
			yyVAL.indexOptions = nil
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1284
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1290
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1294
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1300
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1304
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1309
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 212:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1315
		{
			yyVAL.str = ""
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1319
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1325
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1329
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1333
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1337
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1341
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1347
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1351
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1355
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1361
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1365
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 224:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1370
		{
			yyVAL.str = ""
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1374
		{
			yyVAL.str = yyDollar[1].str
		}
	case 226:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1379
		{
			yyVAL.str = ""
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1383
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1389
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1393
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1399
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal, Order: yyDollar[3].str}
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1405
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1409
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 233:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1416
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 234:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1420
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 235:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1424
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 236:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1428
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 237:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1432
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[12].ReferenceAction, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1438
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1442
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 240:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1447
		{
			yyVAL.str = ""
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1451
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1455
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1461
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1467
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1473
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1477
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1481
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1485
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1489
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 250:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1494
		{
			yyVAL.str = ""
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1498
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1502
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1510
		{
			yyVAL.str = yyDollar[1].str
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1514
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1518
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1524
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1528
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1532
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 259:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1537
		{
			yyVAL.str = ""
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1541
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 264:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1552
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 265:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1556
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			ddl.Column = yyDollar[8].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 266:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1563
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 267:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1570
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 268:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1574
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: DropStr, Column: NewColIdent(string(yyDollar[7].bytes)), Table: yyDollar[4].tableName}
		}
	case 269:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1578
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 270:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1582
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: RenameStr, Table: yyDollar[4].tableName, Column: NewColIdent(string(yyDollar[7].bytes)), ToColumn: NewColIdent(string(yyDollar[9].bytes))}
		}
	case 271:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1586
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 272:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1591
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[7].str), Using: yyDollar[8].colIdent, Columns: yyDollar[10].indexColumns, Options: yyDollar[12].indexOptions}}
		}
	case 273:
		yyDollar = yyS[yypt-14 : yypt+1]
//line sql.y:1595
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[9].str), Type: yyDollar[7].str, Using: yyDollar[10].colIdent, Columns: yyDollar[12].indexColumns, Options: yyDollar[14].indexOptions}}
		}
	case 274:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1599
		{
			yyVAL.statement = &DDL{Action: AlterStr, ConstraintAction: DropStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[7].bytes)}}}}
		}
	case 275:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1604
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[7].colIdent}}
		}
	case 276:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1608
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: RenameStr, FromName: yyDollar[7].colIdent, ToName: yyDollar[9].colIdent}}
		}
	case 277:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1612
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ModifyStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 278:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1619
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ChangeStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, Column: NewColIdent(string(yyDollar[7].bytes)), ColumnOrder: yyDollar[9].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			yyVAL.statement = ddl
		}
	case 279:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1625
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 280:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1629
		{
			ddl := &DDL{Action: AlterStr, ConstraintAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddConstraint(yyDollar[6].constraintDefinition)
			yyVAL.statement = ddl
		}
	case 281:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1635
		{
			yyVAL.statement = &DDL{Action: AlterStr, ConstraintAction: DropStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[8].bytes), Details: &ForeignKeyDefinition{}}}}}
		}
	case 282:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1641
		{
			yyVAL.columnOrder = nil
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1645
		{
			yyVAL.columnOrder = &ColumnOrder{First: true}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1649
		{
			yyVAL.columnOrder = &ColumnOrder{AfterColumn: NewColIdent(string(yyDollar[2].bytes))}
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1655
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 286:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1661
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 287:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1673
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 288:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1683
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 289:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1687
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 290:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1691
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 291:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1704
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 292:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1714
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 293:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1718
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1731
		{
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1733
		{
		}
	case 301:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1744
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1750
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1754
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 304:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1760
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 305:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1764
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1770
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1776
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 308:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1780
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 309:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1788
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 310:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1796
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[3].colIdent}}
		}
	case 311:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1800
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromViews: yyDollar[4].tableNames, IfExists: exists}
		}
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1808
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1812
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1818
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1822
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1827
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 317:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1833
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1838
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1842
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 320:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1846
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 321:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1850
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 322:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1855
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 323:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1859
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 324:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1863
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 325:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1867
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1871
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1875
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1879
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1883
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 330:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1887
		{
			yyVAL.statement = &Show{Type: IndexStr, Table: yyDollar[4].tableName, Database: yyDollar[5].str, ShowIndexFilterOpt: yyDollar[6].expr}
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1891
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1895
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1899
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1903
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 335:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1907
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 336:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1912
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[6].showFilter, AsOf: yyDollar[5].expr}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 337:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1922
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1926
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1930
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1936
		{
			// Cannot dereference $3 directly, or else the parser stackcannot be pooled. See yyParsePooled
			cmp := yyDollar[3].expr.(*ComparisonExpr)
			cmp.Left = &ColName{Name: NewColIdent("collation")}
			var ex Expr = cmp
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &ex}
		}
	case 341:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1944
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1949
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1953
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 344:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1957
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1961
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1975
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1981
		{
			yyVAL.expr = &ComparisonExpr{Operator: LikeStr, Right: yyDollar[2].expr, Escape: yyDollar[3].expr}
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1987
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1991
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1997
		{
			yyVAL.str = ""
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2001
		{
			yyVAL.str = "full "
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2007
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2011
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2017
		{
			yyVAL.str = ""
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2021
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2025
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 357:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2031
		{
			yyVAL.showFilter = nil
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2035
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2039
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 360:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2045
		{
			yyVAL.showFilter = nil
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2049
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2055
		{
			yyVAL.str = ""
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2059
		{
			yyVAL.str = SessionStr
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2063
		{
			yyVAL.str = GlobalStr
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2069
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2073
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2079
		{
			yyVAL.statement = &Begin{}
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2083
		{
			yyVAL.statement = &Begin{}
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2089
		{
			yyVAL.statement = &Commit{}
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2095
		{
			yyVAL.statement = &Rollback{}
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2100
		{
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2101
		{
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2105
		{
			yyVAL.statement = &Explain{ExplainFormat: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2109
		{
			yyVAL.statement = &Explain{Analyze: true, ExplainFormat: TreeStr, Statement: yyDollar[3].selStmt}
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2115
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2123
		{
			yyVAL.str = ""
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2127
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2138
		{
			yyVAL.statement = &Show{Type: "columns", OnTable: yyDollar[2].tableName}
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2142
		{
			yyVAL.statement = &OtherRead{}
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2148
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2152
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2156
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2160
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2166
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 390:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2170
		{
			setAllowComments(yylex, true)
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2174
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2180
		{
			yyVAL.bytes2 = nil
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2184
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2190
		{
			yyVAL.str = UnionStr
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2194
		{
			yyVAL.str = UnionAllStr
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2198
		{
			yyVAL.str = UnionDistinctStr
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2203
		{
			yyVAL.str = ""
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2207
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2211
		{
			yyVAL.str = SQLCacheStr
		}
	case 400:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2216
		{
			yyVAL.str = ""
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2220
		{
			yyVAL.str = ""
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2224
		{
			yyVAL.str = DistinctStr
		}
	case 403:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2229
		{
			yyVAL.str = ""
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2233
		{
			yyVAL.str = StraightJoinHint
		}
	case 405:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2238
		{
			yyVAL.selectExprs = nil
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2242
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2248
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2252
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2258
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2262
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2266
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 412:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2270
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 413:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2275
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2279
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2283
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2290
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 418:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2295
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2299
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2305
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2309
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2319
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2323
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2327
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2333
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2339
		{
			yyVAL.aliasedTableName = yyDollar[2].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
		}
	case 429:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2344
		{
			yyVAL.aliasedTableName = yyDollar[6].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
			yyVAL.aliasedTableName.Partitions = yyDollar[4].partitions
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2355
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Hints: yyDollar[1].indexHints}
		}
	case 431:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2359
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, Hints: yyDollar[4].indexHints}
		}
	case 432:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2363
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, As: yyDollar[5].tableIdent, Hints: yyDollar[6].indexHints}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2367
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2371
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[1].tableIdent, Hints: yyDollar[2].indexHints}
		}
	case 435:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2382
		{
			yyVAL.expr = nil
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2386
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2392
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2396
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2402
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2406
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 441:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2419
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 442:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2423
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 443:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2427
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2431
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2437
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 446:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2439
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 447:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2443
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2445
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2449
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2451
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 451:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2454
		{
			yyVAL.empty = struct{}{}
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2456
		{
			yyVAL.empty = struct{}{}
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2461
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2467
		{
			yyVAL.str = JoinStr
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2471
		{
			yyVAL.str = JoinStr
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2475
		{
			yyVAL.str = JoinStr
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2481
		{
			yyVAL.str = StraightJoinStr
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2487
		{
			yyVAL.str = LeftJoinStr
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2491
		{
			yyVAL.str = LeftJoinStr
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2495
		{
			yyVAL.str = RightJoinStr
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2499
		{
			yyVAL.str = RightJoinStr
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2505
		{
			yyVAL.str = NaturalJoinStr
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2509
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2519
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2523
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2529
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2533
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2539
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 470:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2544
		{
			yyVAL.indexHints = nil
		}
	case 471:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2548
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 472:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2552
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 473:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2556
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 474:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2561
		{
			yyVAL.expr = nil
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2565
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2571
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2575
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2579
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2583
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2587
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2591
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2595
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 483:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2601
		{
			yyVAL.str = ""
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2605
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2611
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2615
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2621
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2625
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 489:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2629
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 490:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2633
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 491:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2637
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2641
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 493:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2645
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 494:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2649
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 495:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2653
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2657
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2663
		{
			yyVAL.str = IsNullStr
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2667
		{
			yyVAL.str = IsNotNullStr
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2671
		{
			yyVAL.str = IsTrueStr
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2675
		{
			yyVAL.str = IsNotTrueStr
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2679
		{
			yyVAL.str = IsFalseStr
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2683
		{
			yyVAL.str = IsNotFalseStr
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2689
		{
			yyVAL.str = EqualStr
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2693
		{
			yyVAL.str = LessThanStr
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2697
		{
			yyVAL.str = GreaterThanStr
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2701
		{
			yyVAL.str = LessEqualStr
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2705
		{
			yyVAL.str = GreaterEqualStr
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2709
		{
			yyVAL.str = NotEqualStr
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2713
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 510:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2718
		{
			yyVAL.expr = nil
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2722
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2728
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2732
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2736
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2742
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2748
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2752
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2758
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2762
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2766
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2770
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2774
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2778
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2782
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2786
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2790
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2794
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2798
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2802
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2806
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2810
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2814
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2818
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2822
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2826
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2830
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2834
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2838
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2842
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2846
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2850
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2858
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2872
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2876
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2880
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 550:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2898
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: yyDollar[3].str == DistinctStr, Exprs: yyDollar[4].selectExprs}
		}
	case 551:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2902
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 552:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2912
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 553:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2916
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2920
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema")}
		}
	case 555:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2924
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 556:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2928
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 557:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2932
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 558:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2936
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 559:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2940
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 560:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2944
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 561:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2948
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 562:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2952
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 563:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2956
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("first"), Exprs: yyDollar[3].selectExprs}
		}
	case 564:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2960
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 565:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2964
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 566:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2968
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2978
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2982
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2986
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2991
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2996
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3001
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3007
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3012
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3017
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3021
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3025
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3030
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3035
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3040
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 581:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3044
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 582:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3048
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3058
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 586:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3068
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 587:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3072
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3076
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 589:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3080
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 590:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3084
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 591:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3088
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3094
		{
			yyVAL.str = ""
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3098
		{
			yyVAL.str = BooleanModeStr
		}
	case 594:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3102
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 595:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3106
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3110
		{
			yyVAL.str = QueryExpansionStr
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3116
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3120
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3126
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3130
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3134
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3138
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3142
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3146
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3152
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3156
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3160
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3164
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3168
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3172
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3176
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 612:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3181
		{
			yyVAL.expr = nil
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3185
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 614:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3190
		{
			yyVAL.str = string("")
		}
	case 615:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3194
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3200
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3204
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 618:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3210
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 619:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3215
		{
			yyVAL.expr = nil
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3219
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3225
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3229
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 623:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3233
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3239
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3243
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3247
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3251
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3255
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3259
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3263
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3267
		{
			yyVAL.expr = &NullVal{}
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3273
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3282
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3286
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 635:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3291
		{
			yyVAL.exprs = nil
		}
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3295
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 637:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3300
		{
			yyVAL.expr = nil
		}
	case 638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3304
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 639:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3309
		{
			yyVAL.orderBy = nil
		}
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3313
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3319
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3323
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3329
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 644:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3334
		{
			yyVAL.str = AscScr
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3338
		{
			yyVAL.str = AscScr
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3342
		{
			yyVAL.str = DescScr
		}
	case 647:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3347
		{
			yyVAL.limit = nil
		}
	case 648:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3351
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 649:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3355
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 650:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3359
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 651:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3364
		{
			yyVAL.str = ""
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3368
		{
			yyVAL.str = ForUpdateStr
		}
	case 653:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3372
		{
			yyVAL.str = ShareModeStr
		}
	case 654:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3385
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3389
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3393
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 657:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3398
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 658:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3402
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 659:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3406
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3413
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3417
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 662:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3421
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 663:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3425
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 664:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3430
		{
			yyVAL.updateExprs = nil
		}
	case 665:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3434
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3440
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 667:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3444
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3450
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3454
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 670:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3460
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3466
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3476
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3480
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 674:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3486
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3492
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3496
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3502
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 678:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3506
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 679:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3510
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3514
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3521
		{
			yyVAL.bytes = []byte("charset")
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3528
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3532
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3536
		{
			yyVAL.expr = &Default{}
		}
	case 689:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3545
		{
			yyVAL.byt = 0
		}
	case 690:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3547
		{
			yyVAL.byt = 1
		}
	case 691:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3550
		{
			yyVAL.byt = 0
		}
	case 692:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3552
		{
			yyVAL.byt = 1
		}
	case 693:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3555
		{
			yyVAL.str = ""
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3557
		{
			yyVAL.str = IgnoreStr
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3561
		{
			yyVAL.empty = struct{}{}
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3563
		{
			yyVAL.empty = struct{}{}
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3565
		{
			yyVAL.empty = struct{}{}
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3567
		{
			yyVAL.empty = struct{}{}
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3569
		{
			yyVAL.empty = struct{}{}
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3571
		{
			yyVAL.empty = struct{}{}
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3573
		{
			yyVAL.empty = struct{}{}
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3575
		{
			yyVAL.empty = struct{}{}
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3577
		{
			yyVAL.empty = struct{}{}
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3579
		{
			yyVAL.empty = struct{}{}
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3583
		{
			yyVAL.empty = struct{}{}
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3585
		{
			yyVAL.empty = struct{}{}
		}
	case 707:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3588
		{
			yyVAL.empty = struct{}{}
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3590
		{
			yyVAL.empty = struct{}{}
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3592
		{
			yyVAL.empty = struct{}{}
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3596
		{
			yyVAL.str = UniqueStr
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3598
		{
			yyVAL.str = FulltextStr
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3600
		{
			yyVAL.str = SpatialStr
		}
	case 713:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3603
		{
			yyVAL.str = ""
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3605
		{
			yyVAL.str = yyDollar[1].str
		}
	case 715:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3608
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 716:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3610
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3614
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3618
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3625
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3631
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3635
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3642
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3956
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3965
		{
			decNesting(yylex)
		}
	case 1015:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3970
		{
			skipToEnd(yylex)
		}
	case 1016:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3975
		{
			skipToEnd(yylex)
		}
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3979
		{
			skipToEnd(yylex)
		}
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3983
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
