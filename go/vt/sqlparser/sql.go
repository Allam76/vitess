// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func yyPosition(yylex interface{}) int {
	return yylex.(*Tokenizer).Position
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:57
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	int                   int
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	statements            Statements
	partitions            Partitions
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	joinCondition         JoinCondition
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	asOf                  *AsOf
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	sqlVal                *SQLVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	setExprs              SetExprs
	setExpr               *SetExpr
	colIdent              ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	TableSpec             *TableSpec
	columnType            ColumnType
	columnOrder           *ColumnOrder
	triggerOrder          *TriggerOrder
	colKeyOpt             ColumnKeyOption
	optVal                Expr
	LengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexInfo             *IndexInfo
	indexOption           *IndexOption
	indexOptions          []*IndexOption
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	constraintDefinition  *ConstraintDefinition
	constraintInfo        ConstraintInfo
	ReferenceAction       ReferenceAction
	partDefs              []*PartitionDefinition
	partDef               *PartitionDefinition
	partSpec              *PartitionSpec
	vindexParam           VindexParam
	vindexParams          []VindexParam
	showFilter            *ShowFilter
	optLike               *OptLike
	over                  *Over
	caseStatementCases    []CaseStatementCase
	caseStatementCase     CaseStatementCase
	ifStatementConditions []IfStatementCondition
	ifStatementCondition  IfStatementCondition
	signalInfo            SignalInfo
	signalInfos           []SignalInfo
	procedureParam        ProcedureParam
	procedureParams       []ProcedureParam
	characteristic        Characteristic
	characteristics       []Characteristic
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const CALL = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const OF = 57376
const UNIQUE = 57377
const KEY = 57378
const SYSTEM_TIME = 57379
const VALUES = 57380
const LAST_INSERT_ID = 57381
const NEXT = 57382
const VALUE = 57383
const SHARE = 57384
const MODE = 57385
const SQL_NO_CACHE = 57386
const SQL_CACHE = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LEFT = 57390
const RIGHT = 57391
const INNER = 57392
const OUTER = 57393
const CROSS = 57394
const NATURAL = 57395
const USE = 57396
const FORCE = 57397
const ON = 57398
const USING = 57399
const ID = 57400
const HEX = 57401
const STRING = 57402
const INTEGRAL = 57403
const FLOAT = 57404
const HEXNUM = 57405
const VALUE_ARG = 57406
const LIST_ARG = 57407
const COMMENT = 57408
const COMMENT_KEYWORD = 57409
const BIT_LITERAL = 57410
const NULL = 57411
const TRUE = 57412
const FALSE = 57413
const OFF = 57414
const OR = 57415
const AND = 57416
const NOT = 57417
const BETWEEN = 57418
const CASE = 57419
const WHEN = 57420
const THEN = 57421
const ELSE = 57422
const ELSEIF = 57423
const END = 57424
const LE = 57425
const GE = 57426
const NE = 57427
const NULL_SAFE_EQUAL = 57428
const IS = 57429
const LIKE = 57430
const REGEXP = 57431
const IN = 57432
const SHIFT_LEFT = 57433
const SHIFT_RIGHT = 57434
const DIV = 57435
const MOD = 57436
const UNARY = 57437
const COLLATE = 57438
const BINARY = 57439
const UNDERSCORE_BINARY = 57440
const UNDERSCORE_UTF8MB4 = 57441
const INTERVAL = 57442
const JSON_EXTRACT_OP = 57443
const JSON_UNQUOTE_EXTRACT_OP = 57444
const CREATE = 57445
const ALTER = 57446
const DROP = 57447
const RENAME = 57448
const ANALYZE = 57449
const ADD = 57450
const FLUSH = 57451
const MODIFY = 57452
const CHANGE = 57453
const SCHEMA = 57454
const TABLE = 57455
const INDEX = 57456
const INDEXES = 57457
const VIEW = 57458
const TO = 57459
const IGNORE = 57460
const IF = 57461
const PRIMARY = 57462
const COLUMN = 57463
const SPATIAL = 57464
const FULLTEXT = 57465
const KEY_BLOCK_SIZE = 57466
const CHECK = 57467
const ACTION = 57468
const CASCADE = 57469
const CONSTRAINT = 57470
const FOREIGN = 57471
const NO = 57472
const REFERENCES = 57473
const RESTRICT = 57474
const FIRST = 57475
const AFTER = 57476
const SHOW = 57477
const DESCRIBE = 57478
const EXPLAIN = 57479
const DATE = 57480
const ESCAPE = 57481
const REPAIR = 57482
const OPTIMIZE = 57483
const TRUNCATE = 57484
const FORMAT = 57485
const MAXVALUE = 57486
const PARTITION = 57487
const REORGANIZE = 57488
const LESS = 57489
const THAN = 57490
const PROCEDURE = 57491
const TRIGGER = 57492
const TRIGGERS = 57493
const FUNCTION = 57494
const VINDEX = 57495
const VINDEXES = 57496
const STATUS = 57497
const VARIABLES = 57498
const WARNINGS = 57499
const CODE = 57500
const SEQUENCE = 57501
const EACH = 57502
const ROW = 57503
const BEFORE = 57504
const FOLLOWS = 57505
const PRECEDES = 57506
const DEFINER = 57507
const INVOKER = 57508
const INOUT = 57509
const OUT = 57510
const DETERMINISTIC = 57511
const CONTAINS = 57512
const READS = 57513
const MODIFIES = 57514
const SQL = 57515
const DATA = 57516
const SECURITY = 57517
const CLASS_ORIGIN = 57518
const SUBCLASS_ORIGIN = 57519
const MESSAGE_TEXT = 57520
const MYSQL_ERRNO = 57521
const CONSTRAINT_CATALOG = 57522
const CONSTRAINT_SCHEMA = 57523
const CONSTRAINT_NAME = 57524
const CATALOG_NAME = 57525
const SCHEMA_NAME = 57526
const TABLE_NAME = 57527
const COLUMN_NAME = 57528
const CURSOR_NAME = 57529
const SIGNAL = 57530
const SQLSTATE = 57531
const BEGIN = 57532
const START = 57533
const TRANSACTION = 57534
const COMMIT = 57535
const ROLLBACK = 57536
const BIT = 57537
const TINYINT = 57538
const SMALLINT = 57539
const MEDIUMINT = 57540
const INT = 57541
const INTEGER = 57542
const BIGINT = 57543
const INTNUM = 57544
const REAL = 57545
const DOUBLE = 57546
const FLOAT_TYPE = 57547
const DECIMAL = 57548
const NUMERIC = 57549
const DEC = 57550
const FIXED = 57551
const PRECISION = 57552
const TIME = 57553
const TIMESTAMP = 57554
const DATETIME = 57555
const YEAR = 57556
const CHAR = 57557
const VARCHAR = 57558
const BOOL = 57559
const CHARACTER = 57560
const VARBINARY = 57561
const NCHAR = 57562
const NVARCHAR = 57563
const NATIONAL = 57564
const VARYING = 57565
const TEXT = 57566
const TINYTEXT = 57567
const MEDIUMTEXT = 57568
const LONGTEXT = 57569
const LONG = 57570
const BLOB = 57571
const TINYBLOB = 57572
const MEDIUMBLOB = 57573
const LONGBLOB = 57574
const JSON = 57575
const ENUM = 57576
const GEOMETRY = 57577
const POINT = 57578
const LINESTRING = 57579
const POLYGON = 57580
const GEOMETRYCOLLECTION = 57581
const MULTIPOINT = 57582
const MULTILINESTRING = 57583
const MULTIPOLYGON = 57584
const NULLX = 57585
const AUTO_INCREMENT = 57586
const APPROXNUM = 57587
const SIGNED = 57588
const UNSIGNED = 57589
const ZEROFILL = 57590
const COLLATION = 57591
const DATABASES = 57592
const SCHEMAS = 57593
const TABLES = 57594
const VITESS_METADATA = 57595
const VSCHEMA = 57596
const FULL = 57597
const PROCESSLIST = 57598
const COLUMNS = 57599
const FIELDS = 57600
const ENGINES = 57601
const PLUGINS = 57602
const NAMES = 57603
const CHARSET = 57604
const GLOBAL = 57605
const SESSION = 57606
const ISOLATION = 57607
const LEVEL = 57608
const READ = 57609
const WRITE = 57610
const ONLY = 57611
const REPEATABLE = 57612
const COMMITTED = 57613
const UNCOMMITTED = 57614
const SERIALIZABLE = 57615
const CURRENT_TIMESTAMP = 57616
const DATABASE = 57617
const CURRENT_DATE = 57618
const CURRENT_USER = 57619
const CURRENT_TIME = 57620
const LOCALTIME = 57621
const LOCALTIMESTAMP = 57622
const UTC_DATE = 57623
const UTC_TIME = 57624
const UTC_TIMESTAMP = 57625
const REPLACE = 57626
const CONVERT = 57627
const CAST = 57628
const SUBSTR = 57629
const SUBSTRING = 57630
const GROUP_CONCAT = 57631
const SEPARATOR = 57632
const TIMESTAMPADD = 57633
const TIMESTAMPDIFF = 57634
const OVER = 57635
const WINDOW = 57636
const GROUPING = 57637
const GROUPS = 57638
const AVG = 57639
const BIT_AND = 57640
const BIT_OR = 57641
const BIT_XOR = 57642
const COUNT = 57643
const JSON_ARRAYAGG = 57644
const JSON_OBJECTAGG = 57645
const MAX = 57646
const MIN = 57647
const STDDEV_POP = 57648
const STDDEV = 57649
const STD = 57650
const STDDEV_SAMP = 57651
const SUM = 57652
const VAR_POP = 57653
const VARIANCE = 57654
const VAR_SAMP = 57655
const CUME_DIST = 57656
const DENSE_RANK = 57657
const FIRST_VALUE = 57658
const LAG = 57659
const LAST_VALUE = 57660
const LEAD = 57661
const NTH_VALUE = 57662
const NTILE = 57663
const ROW_NUMBER = 57664
const PERCENT_RANK = 57665
const RANK = 57666
const MATCH = 57667
const AGAINST = 57668
const BOOLEAN = 57669
const LANGUAGE = 57670
const WITH = 57671
const QUERY = 57672
const EXPANSION = 57673
const UNUSED = 57674
const ARRAY = 57675
const DESCRIPTION = 57676
const EMPTY = 57677
const EXCEPT = 57678
const JSON_TABLE = 57679
const LATERAL = 57680
const MEMBER = 57681
const RECURSIVE = 57682
const ACTIVE = 57683
const ADMIN = 57684
const BUCKETS = 57685
const CLONE = 57686
const COMPONENT = 57687
const DEFINITION = 57688
const ENFORCED = 57689
const EXCLUDE = 57690
const FOLLOWING = 57691
const GEOMCOLLECTION = 57692
const GET_MASTER_PUBLIC_KEY = 57693
const HISTOGRAM = 57694
const HISTORY = 57695
const INACTIVE = 57696
const INVISIBLE = 57697
const LOCKED = 57698
const MASTER_COMPRESSION_ALGORITHMS = 57699
const MASTER_PUBLIC_KEY_PATH = 57700
const MASTER_TLS_CIPHERSUITES = 57701
const MASTER_ZSTD_COMPRESSION_LEVEL = 57702
const NESTED = 57703
const NETWORK_NAMESPACE = 57704
const NOWAIT = 57705
const NULLS = 57706
const OJ = 57707
const OLD = 57708
const OPTIONAL = 57709
const ORDINALITY = 57710
const ORGANIZATION = 57711
const OTHERS = 57712
const PATH = 57713
const PERSIST = 57714
const PERSIST_ONLY = 57715
const PRECEDING = 57716
const PRIVILEGE_CHECKS_USER = 57717
const PROCESS = 57718
const RANDOM = 57719
const REFERENCE = 57720
const REQUIRE_ROW_FORMAT = 57721
const RESOURCE = 57722
const RESPECT = 57723
const RESTART = 57724
const RETAIN = 57725
const REUSE = 57726
const ROLE = 57727
const SECONDARY = 57728
const SECONDARY_ENGINE = 57729
const SECONDARY_LOAD = 57730
const SECONDARY_UNLOAD = 57731
const SKIP = 57732
const SRID = 57733
const THREAD_PRIORITY = 57734
const TIES = 57735
const UNBOUNDED = 57736
const VCPU = 57737
const VISIBLE = 57738
const SYSTEM = 57739

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CALL",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"OF",
	"UNIQUE",
	"KEY",
	"SYSTEM_TIME",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"ELSEIF",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"MODIFY",
	"CHANGE",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"INDEXES",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"FIRST",
	"AFTER",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"FORMAT",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TRIGGERS",
	"FUNCTION",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"CODE",
	"SEQUENCE",
	"EACH",
	"ROW",
	"BEFORE",
	"FOLLOWS",
	"PRECEDES",
	"DEFINER",
	"INVOKER",
	"INOUT",
	"OUT",
	"DETERMINISTIC",
	"CONTAINS",
	"READS",
	"MODIFIES",
	"SQL",
	"DATA",
	"SECURITY",
	"CLASS_ORIGIN",
	"SUBCLASS_ORIGIN",
	"MESSAGE_TEXT",
	"MYSQL_ERRNO",
	"CONSTRAINT_CATALOG",
	"CONSTRAINT_SCHEMA",
	"CONSTRAINT_NAME",
	"CATALOG_NAME",
	"SCHEMA_NAME",
	"TABLE_NAME",
	"COLUMN_NAME",
	"CURSOR_NAME",
	"SIGNAL",
	"SQLSTATE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DEC",
	"FIXED",
	"PRECISION",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NATIONAL",
	"VARYING",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"LONG",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"OVER",
	"WINDOW",
	"GROUPING",
	"GROUPS",
	"AVG",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"COUNT",
	"JSON_ARRAYAGG",
	"JSON_OBJECTAGG",
	"MAX",
	"MIN",
	"STDDEV_POP",
	"STDDEV",
	"STD",
	"STDDEV_SAMP",
	"SUM",
	"VAR_POP",
	"VARIANCE",
	"VAR_SAMP",
	"CUME_DIST",
	"DENSE_RANK",
	"FIRST_VALUE",
	"LAG",
	"LAST_VALUE",
	"LEAD",
	"NTH_VALUE",
	"NTILE",
	"ROW_NUMBER",
	"PERCENT_RANK",
	"RANK",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"DESCRIPTION",
	"EMPTY",
	"EXCEPT",
	"JSON_TABLE",
	"LATERAL",
	"MEMBER",
	"RECURSIVE",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"SYSTEM",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 33,
	-2, 4,
	-1, 35,
	131, 866,
	-2, 128,
	-1, 43,
	172, 472,
	173, 472,
	-2, 460,
	-1, 50,
	1, 1231,
	415, 1231,
	-2, 492,
	-1, 367,
	117, 874,
	-2, 870,
	-1, 368,
	117, 875,
	-2, 871,
	-1, 469,
	87, 1155,
	117, 1155,
	-2, 69,
	-1, 470,
	87, 1066,
	117, 1066,
	-2, 70,
	-1, 475,
	87, 1025,
	117, 1025,
	-2, 835,
	-1, 477,
	87, 1099,
	117, 1099,
	-2, 837,
	-1, 682,
	5, 33,
	-2, 486,
	-1, 686,
	5, 33,
	-2, 485,
	-1, 906,
	1, 544,
	5, 544,
	12, 544,
	13, 544,
	14, 544,
	15, 544,
	17, 544,
	19, 544,
	30, 544,
	31, 544,
	46, 544,
	47, 544,
	48, 544,
	49, 544,
	50, 544,
	52, 544,
	53, 544,
	56, 544,
	57, 544,
	59, 544,
	60, 544,
	415, 544,
	-2, 569,
	-1, 909,
	57, 50,
	59, 50,
	-2, 54,
	-1, 1102,
	117, 877,
	-2, 873,
	-1, 1262,
	58, 328,
	-2, 995,
	-1, 1265,
	58, 324,
	61, 324,
	-2, 931,
	-1, 1266,
	58, 325,
	61, 325,
	-2, 941,
	-1, 1342,
	58, 397,
	61, 397,
	-2, 361,
	-1, 1391,
	5, 34,
	-2, 634,
	-1, 1451,
	5, 33,
	-2, 812,
	-1, 1547,
	5, 33,
	-2, 71,
	-1, 1690,
	1, 589,
	5, 589,
	12, 589,
	13, 589,
	14, 589,
	15, 589,
	17, 589,
	19, 589,
	30, 589,
	31, 589,
	46, 589,
	47, 589,
	48, 589,
	49, 589,
	50, 589,
	52, 589,
	53, 589,
	56, 589,
	57, 589,
	59, 589,
	60, 589,
	415, 589,
	-2, 569,
	-1, 1807,
	5, 34,
	-2, 813,
	-1, 1837,
	5, 33,
	-2, 71,
	-1, 1893,
	5, 33,
	-2, 815,
	-1, 1973,
	5, 33,
	-2, 103,
	-1, 2025,
	5, 34,
	-2, 816,
	-1, 2074,
	415, 181,
	-2, 33,
}

const yyPrivate = 57344

const yyLast = 21666

var yyAct = [...]int{

	401, 58, 2105, 2072, 1308, 2073, 2082, 2114, 2136, 2029,
	2104, 2016, 2053, 1704, 1972, 1764, 1224, 2081, 24, 1907,
	372, 465, 2077, 7, 1601, 2080, 1217, 69, 331, 1249,
	400, 1820, 1871, 1502, 1670, 2007, 1841, 1306, 1856, 1598,
	2076, 6, 1705, 1215, 1077, 2030, 346, 2075, 5, 1671,
	1555, 385, 91, 1219, 480, 1211, 1213, 1248, 1667, 58,
	831, 1259, 1268, 1681, 1652, 1677, 2079, 1618, 1334, 2078,
	8, 1263, 351, 1301, 1576, 1127, 1163, 1255, 1575, 1027,
	332, 333, 935, 370, 336, 1140, 1539, 1046, 1202, 922,
	1035, 703, 1155, 921, 514, 1012, 1296, 1104, 902, 709,
	471, 468, 463, 1195, 753, 355, 460, 911, 847, 2157,
	486, 1477, 2153, 2143, 2126, 2116, 848, 903, 2108, 2099,
	2056, 68, 1158, 2118, 73, 2046, 1284, 1953, 796, 795,
	805, 806, 798, 799, 800, 801, 802, 803, 804, 797,
	744, 2103, 807, 2022, 2088, 1765, 2045, 2074, 3, 1635,
	1420, 1792, 485, 1698, 75, 76, 77, 78, 79, 649,
	1237, 359, 1699, 1700, 1238, 1239, 28, 2021, 59, 31,
	32, 669, 510, 28, 335, 59, 31, 32, 414, 1243,
	420, 422, 421, 418, 419, 417, 416, 415, 28, 679,
	59, 31, 32, 1522, 1270, 423, 424, 33, 334, 488,
	512, 491, 59, 31, 32, 1842, 340, 923, 1486, 924,
	1603, 1485, 33, 1844, 1487, 1272, 1272, 1878, 66, 101,
	97, 98, 1285, 99, 33, 66, 1783, 648, 652, 1781,
	1297, 654, 93, 1276, 1278, 342, 1277, 344, 345, 1290,
	66, 1285, 338, 1930, 365, 1999, 1998, 1353, 1995, 1929,
	1928, 2111, 2115, 2110, 1927, 1926, 103, 102, 1924, 1925,
	1556, 1352, 1315, 1995, 650, 653, 2031, 651, 2156, 2000,
	2001, 1068, 672, 86, 2050, 2051, 673, 670, 671, 677,
	1971, 663, 1847, 2102, 662, 661, 1605, 678, 660, 2008,
	1314, 664, 665, 1357, 1067, 1065, 1557, 490, 489, 1600,
	2087, 1604, 1351, 1996, 511, 1196, 511, 511, 1708, 1857,
	1858, 1969, 2149, 70, 511, 328, 1580, 1069, 1996, 2158,
	511, 1845, 1846, 1848, 1849, 1850, 88, 90, 58, 58,
	85, 2155, 1220, 1222, 1066, 344, 95, 94, 1048, 1049,
	1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059,
	683, 329, 58, 1349, 1343, 1344, 2144, 1342, 2127, 1345,
	1346, 487, 496, 688, 689, 711, 993, 816, 685, 1866,
	818, 374, 56, 343, 2083, 684, 1954, 740, 757, 92,
	1908, 1560, 100, 1558, 1559, 1002, 2140, 56, 1476, 2083,
	647, 1285, 93, 1910, 1355, 1358, 1865, 1529, 1275, 1299,
	829, 2083, 833, 834, 835, 836, 837, 838, 839, 840,
	841, 842, 843, 1221, 846, 849, 849, 849, 855, 849,
	849, 855, 849, 855, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 873, 874, 875, 876, 877, 878, 879,
	880, 881, 882, 883, 884, 885, 886, 887, 888, 889,
	890, 891, 892, 893, 894, 895, 896, 897, 2020, 907,
	1797, 60, 1500, 695, 1909, 1475, 1500, 1350, 60, 1474,
	28, 483, 59, 31, 32, 682, 686, 742, 655, 656,
	1843, 697, 300, 60, 1500, 96, 666, 471, 919, 87,
	702, 1401, 680, 1348, 33, 60, 95, 94, 1595, 741,
	2138, 1365, 1961, 2139, 1364, 2137, 1810, 1864, 1490, 511,
	511, 1500, 1500, 819, 820, 901, 1482, 1380, 1075, 930,
	917, 1398, 66, 787, 850, 852, 854, 856, 858, 860,
	861, 863, 851, 853, 1354, 857, 859, 1503, 862, 800,
	801, 802, 803, 804, 797, 1995, 1514, 807, 506, 830,
	2152, 1724, 1519, 1518, 699, 797, 700, 1499, 807, 701,
	322, 1499, 1244, 807, 1233, 1072, 910, 1584, 1580, 915,
	1036, 752, 1581, 1515, 481, 1588, 1590, 1042, 1599, 1499,
	28, 1356, 59, 31, 32, 1584, 1580, 1520, 319, 1512,
	1581, 1942, 1585, 1582, 1583, 1513, 1339, 1637, 819, 820,
	1996, 1014, 1003, 1725, 33, 1324, 1499, 1499, 479, 1594,
	1585, 658, 28, 1591, 59, 31, 32, 1029, 1111, 674,
	821, 822, 823, 824, 825, 826, 827, 828, 819, 820,
	751, 750, 66, 1109, 1110, 1108, 33, 2146, 925, 687,
	301, 2142, 492, 1078, 1079, 750, 1156, 304, 752, 1712,
	511, 511, 511, 2096, 1517, 1995, 1037, 313, 320, 321,
	2133, 511, 752, 511, 66, 511, 511, 751, 750, 56,
	1396, 2083, 1395, 798, 799, 800, 801, 802, 803, 804,
	797, 1015, 1016, 807, 2054, 752, 2069, 1995, 2068, 751,
	750, 1325, 2125, 310, 751, 750, 311, 659, 995, 511,
	1028, 318, 676, 2130, 2115, 2129, 1156, 752, 1409, 361,
	1996, 747, 752, 882, 883, 884, 885, 886, 870, 871,
	872, 887, 888, 873, 874, 875, 881, 889, 876, 877,
	878, 879, 880, 892, 891, 890, 893, 894, 896, 895,
	897, 817, 1996, 1031, 795, 805, 806, 798, 799, 800,
	801, 802, 803, 804, 797, 1062, 1080, 807, 1017, 1018,
	1038, 2027, 302, 1835, 1651, 60, 28, 341, 59, 31,
	32, 757, 1397, 1074, 1619, 82, 495, 2150, 1516, 56,
	1834, 2083, 751, 750, 751, 750, 26, 1081, 1544, 2098,
	33, 2055, 1542, 315, 305, 306, 1523, 316, 317, 325,
	752, 1968, 752, 307, 309, 1923, 303, 324, 323, 751,
	750, 56, 83, 2083, 1073, 2054, 1621, 1885, 66, 58,
	2151, 1105, 1019, 1020, 1021, 751, 750, 752, 1832, 1717,
	906, 751, 750, 1026, 833, 1030, 1540, 1032, 1033, 751,
	750, 1995, 1085, 752, 457, 458, 1639, 692, 1083, 752,
	1094, 1096, 1097, 1377, 1378, 1379, 1095, 752, 350, 1098,
	1145, 1148, 66, 1336, 1082, 1086, 1326, 1157, 1087, 691,
	1060, 1064, 1107, 1902, 2089, 60, 500, 501, 502, 503,
	504, 2067, 1102, 1100, 1623, 1128, 1488, 1129, 1489, 1627,
	696, 1622, 1746, 1620, 2066, 481, 1996, 1966, 1625, 1826,
	2086, 2040, 696, 1131, 1132, 1826, 2037, 60, 1214, 1902,
	2011, 1624, 907, 1826, 1970, 1931, 907, 1902, 1962, 918,
	1936, 1040, 1503, 1933, 1626, 1628, 481, 796, 795, 805,
	806, 798, 799, 800, 801, 802, 803, 804, 797, 471,
	1862, 807, 1767, 805, 806, 798, 799, 800, 801, 802,
	803, 804, 797, 1135, 1137, 807, 1902, 1913, 1169, 1142,
	1171, 1902, 696, 1826, 1825, 56, 830, 2083, 1228, 1761,
	1134, 1757, 1230, 390, 389, 392, 393, 394, 395, 1812,
	696, 1138, 391, 396, 1153, 1335, 1809, 696, 1101, 1754,
	1752, 1751, 1742, 1167, 1168, 511, 1741, 511, 1740, 1567,
	1174, 1175, 1176, 1177, 1732, 1731, 1728, 1729, 1728, 1727,
	1392, 696, 1014, 1226, 1235, 1566, 1496, 1199, 696, 1231,
	1234, 1322, 1178, 1179, 368, 1102, 1246, 1183, 1136, 1340,
	1186, 1321, 1136, 696, 1103, 1191, 28, 1112, 1113, 1114,
	1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124,
	1125, 1126, 1130, 1044, 1011, 830, 1010, 706, 710, 1009,
	1449, 60, 1303, 1304, 1305, 1212, 108, 1008, 1450, 108,
	1000, 998, 997, 996, 788, 108, 994, 508, 1286, 1287,
	1288, 1289, 1298, 1300, 933, 932, 70, 339, 66, 913,
	913, 1917, 1916, 711, 1159, 1668, 1220, 1222, 918, 1198,
	28, 1737, 1381, 108, 1718, 1789, 1267, 1609, 108, 1478,
	108, 832, 1478, 70, 1227, 2043, 912, 1805, 1333, 1941,
	28, 108, 845, 499, 1199, 1738, 1730, 1491, 1199, 108,
	1136, 1245, 1892, 1250, 1256, 914, 914, 916, 912, 1105,
	796, 795, 805, 806, 798, 799, 800, 801, 802, 803,
	804, 797, 66, 352, 807, 1392, 1199, 1392, 1236, 918,
	1392, 1414, 1106, 1413, 1338, 1320, 912, 1310, 1076, 1312,
	1102, 1246, 66, 1370, 1001, 66, 1369, 1221, 2048, 2038,
	1934, 1386, 1873, 1836, 796, 795, 805, 806, 798, 799,
	800, 801, 802, 803, 804, 797, 1452, 1453, 807, 1272,
	907, 907, 907, 907, 907, 66, 1382, 1815, 1302, 1711,
	1297, 1389, 1682, 1683, 1602, 1214, 1495, 1470, 1316, 471,
	1454, 1292, 1291, 694, 1307, 1874, 2122, 2120, 907, 1271,
	2106, 1736, 1419, 1421, 1685, 1668, 1545, 1043, 1005, 1427,
	1428, 1429, 1430, 1089, 1688, 1687, 1473, 1408, 1204, 1207,
	1208, 1209, 1205, 1388, 1206, 1210, 1461, 1460, 1682, 1683,
	1366, 1391, 1393, 1464, 1394, 1468, 1462, 2063, 1465, 2044,
	1400, 1463, 1472, 1403, 1404, 1405, 1101, 1606, 1492, 906,
	1411, 2060, 1412, 906, 1479, 1415, 1416, 906, 1417, 1418,
	356, 357, 1422, 1423, 1424, 1425, 1426, 1504, 1455, 1467,
	1375, 1458, 1374, 1433, 1434, 1435, 1890, 1437, 1438, 58,
	1440, 1441, 1442, 1443, 1505, 1445, 1446, 1447, 1456, 1457,
	511, 1459, 511, 511, 1756, 108, 1483, 1716, 499, 1715,
	499, 499, 1497, 1498, 1501, 1570, 1469, 1533, 499, 1494,
	1480, 704, 1481, 1451, 499, 1204, 1207, 1208, 1209, 1205,
	931, 1206, 1210, 705, 1383, 1384, 1385, 1466, 690, 1208,
	1209, 509, 1138, 745, 746, 1803, 1869, 108, 1078, 1079,
	1574, 1311, 1004, 1548, 745, 746, 347, 1330, 1212, 1541,
	992, 1373, 743, 1920, 1039, 1947, 756, 353, 354, 1372,
	1889, 348, 70, 1946, 1876, 1478, 1543, 1402, 696, 1399,
	1524, 1525, 2124, 2123, 832, 1034, 748, 1531, 2123, 1569,
	1550, 1551, 1552, 2124, 1577, 1589, 1593, 1538, 1587, 1568,
	1579, 1643, 1586, 1573, 1596, 1597, 1572, 1958, 1714, 1071,
	72, 1987, 46, 74, 1636, 1565, 796, 795, 805, 806,
	798, 799, 800, 801, 802, 803, 804, 797, 49, 1250,
	807, 1673, 1613, 58, 1989, 19, 1547, 67, 1612, 1,
	1091, 1092, 1988, 18, 1532, 1630, 1534, 1535, 1536, 1537,
	471, 1669, 1629, 1990, 20, 1692, 1693, 1694, 1617, 1840,
	1106, 1672, 108, 108, 108, 1991, 21, 1644, 1645, 1646,
	1647, 1648, 1561, 1839, 1563, 1564, 1554, 499, 1553, 1691,
	1986, 15, 1985, 14, 108, 1695, 1979, 10, 499, 1993,
	25, 693, 1616, 1984, 13, 1578, 108, 1981, 12, 1766,
	108, 1870, 1686, 1702, 1347, 108, 1980, 11, 1978, 9,
	2006, 108, 1709, 499, 499, 1710, 1689, 1257, 1247, 81,
	478, 80, 1323, 832, 657, 1860, 308, 1143, 1144, 1701,
	1254, 1253, 1734, 1735, 1649, 1650, 1510, 1703, 1707, 1655,
	1509, 1506, 1658, 1521, 1269, 1508, 1679, 1663, 1507, 1511,
	939, 906, 906, 906, 906, 906, 937, 938, 936, 941,
	1571, 1611, 940, 312, 466, 926, 906, 749, 89, 50,
	1863, 1697, 1592, 1341, 84, 1041, 667, 668, 314, 906,
	1674, 815, 1371, 1484, 472, 1748, 1675, 2049, 708, 2012,
	907, 1749, 1945, 1875, 1407, 844, 1753, 1154, 373, 2015,
	1093, 388, 387, 386, 383, 384, 1329, 1084, 1448, 789,
	1747, 1750, 1615, 371, 363, 1242, 1790, 905, 898, 1739,
	1203, 1201, 1200, 1631, 1632, 1006, 1633, 1634, 1744, 461,
	1684, 1760, 1680, 1721, 904, 1608, 675, 327, 1640, 1641,
	1791, 1952, 1088, 30, 71, 358, 1772, 17, 681, 22,
	16, 1796, 493, 34, 499, 499, 499, 108, 108, 108,
	38, 37, 108, 36, 1549, 499, 1313, 499, 337, 499,
	499, 1611, 1250, 1047, 1250, 1045, 2112, 1779, 2052, 2035,
	1994, 23, 2090, 4, 1719, 1720, 349, 1813, 27, 2,
	0, 1723, 0, 0, 0, 0, 1690, 1818, 1726, 0,
	1771, 0, 108, 499, 0, 1822, 1823, 108, 1804, 0,
	0, 1492, 0, 0, 0, 1773, 58, 0, 0, 1327,
	0, 1775, 1824, 1828, 0, 0, 1819, 0, 0, 0,
	0, 0, 1784, 1785, 0, 0, 0, 0, 0, 1713,
	0, 0, 0, 0, 0, 0, 1829, 0, 0, 0,
	0, 0, 0, 108, 0, 0, 0, 0, 0, 756,
	0, 0, 0, 1367, 1368, 0, 710, 1859, 0, 1851,
	0, 0, 0, 0, 0, 0, 1806, 1807, 1808, 1867,
	1811, 1855, 0, 0, 399, 0, 1673, 0, 0, 1894,
	0, 0, 1817, 1707, 0, 1745, 1868, 0, 0, 0,
	0, 0, 1861, 1852, 1853, 1854, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1672, 0, 0, 0,
	0, 0, 1919, 0, 1921, 0, 1390, 1899, 0, 0,
	1918, 0, 0, 499, 1831, 1891, 1833, 0, 0, 1774,
	1898, 1900, 0, 0, 0, 0, 1410, 0, 0, 1911,
	1940, 1906, 1912, 1901, 0, 0, 0, 1922, 0, 0,
	0, 0, 0, 1837, 473, 1932, 0, 0, 0, 499,
	499, 0, 0, 1673, 1935, 58, 1938, 0, 0, 0,
	0, 1830, 1250, 497, 1877, 1943, 0, 1939, 0, 0,
	0, 0, 0, 0, 1884, 0, 0, 0, 0, 1888,
	0, 0, 58, 1672, 108, 0, 1965, 1959, 1963, 0,
	0, 0, 108, 108, 0, 0, 108, 108, 0, 1992,
	108, 108, 108, 1903, 1976, 1904, 1905, 1983, 2003, 1967,
	1957, 0, 0, 0, 0, 0, 1893, 499, 499, 0,
	2002, 0, 1975, 2014, 2018, 0, 1872, 0, 2005, 1974,
	0, 0, 2010, 2004, 2009, 0, 0, 2032, 0, 471,
	2024, 906, 0, 0, 0, 2023, 0, 0, 1982, 0,
	0, 1977, 0, 0, 0, 0, 0, 0, 58, 0,
	0, 0, 1948, 1949, 1950, 1951, 0, 0, 0, 1955,
	1956, 1914, 2036, 1915, 0, 1992, 0, 0, 108, 499,
	1976, 499, 0, 1983, 0, 0, 108, 108, 0, 0,
	108, 1879, 1880, 1881, 1882, 1883, 2042, 0, 1975, 1886,
	1887, 0, 1960, 0, 0, 1974, 0, 2057, 0, 0,
	1965, 0, 2058, 0, 2065, 2062, 58, 58, 2061, 108,
	2018, 108, 108, 0, 1982, 2070, 0, 1977, 108, 1973,
	58, 2085, 2091, 2097, 1992, 2019, 2059, 0, 0, 1976,
	2064, 0, 1983, 2025, 58, 0, 0, 2100, 2095, 0,
	108, 108, 108, 108, 108, 2107, 2101, 1975, 0, 58,
	58, 0, 2109, 2117, 1974, 2113, 2094, 2119, 513, 58,
	513, 513, 58, 2093, 2113, 2128, 2121, 58, 513, 1638,
	2131, 0, 2113, 1982, 513, 0, 1977, 58, 0, 2039,
	0, 58, 2113, 2141, 2145, 2092, 0, 0, 0, 0,
	0, 0, 1872, 1250, 58, 1973, 2047, 58, 0, 2113,
	2154, 0, 0, 0, 58, 0, 0, 0, 58, 2113,
	0, 0, 0, 2113, 0, 0, 0, 0, 0, 0,
	0, 0, 1273, 1274, 0, 1279, 1280, 1281, 1282, 1283,
	0, 0, 0, 0, 0, 0, 0, 0, 1696, 0,
	0, 0, 0, 1293, 1294, 1295, 0, 0, 0, 1653,
	1654, 0, 1656, 1657, 1973, 1659, 1660, 1661, 1662, 0,
	1664, 1665, 1666, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 108, 108, 108, 108, 108, 0,
	0, 0, 0, 0, 0, 0, 108, 0, 0, 108,
	0, 0, 0, 108, 0, 0, 0, 0, 0, 0,
	0, 0, 108, 0, 0, 0, 0, 2147, 2148, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 473, 0, 499, 0, 1164, 1795, 927, 0, 0,
	0, 0, 0, 28, 0, 59, 31, 32, 991, 0,
	0, 0, 0, 0, 0, 0, 0, 57, 0, 0,
	0, 0, 0, 65, 0, 0, 0, 33, 1762, 0,
	0, 0, 0, 513, 513, 796, 795, 805, 806, 798,
	799, 800, 801, 802, 803, 804, 797, 1794, 0, 807,
	0, 0, 499, 0, 0, 66, 0, 0, 0, 0,
	0, 0, 0, 0, 499, 108, 499, 499, 0, 1793,
	0, 0, 0, 0, 0, 0, 0, 0, 1995, 0,
	0, 0, 2134, 2084, 0, 0, 796, 795, 805, 806,
	798, 799, 800, 801, 802, 803, 804, 797, 0, 0,
	807, 0, 0, 832, 0, 0, 0, 0, 0, 0,
	0, 0, 1814, 0, 0, 1816, 108, 35, 61, 40,
	39, 42, 0, 0, 0, 499, 0, 0, 0, 0,
	0, 0, 0, 1996, 1798, 1799, 0, 0, 0, 0,
	1800, 0, 0, 1801, 0, 0, 0, 0, 1802, 43,
	64, 63, 0, 0, 0, 0, 41, 0, 0, 0,
	0, 0, 0, 0, 0, 499, 0, 0, 0, 0,
	0, 0, 0, 0, 513, 513, 513, 0, 0, 0,
	0, 0, 1788, 0, 0, 513, 0, 513, 0, 513,
	513, 0, 0, 0, 0, 0, 0, 499, 499, 0,
	0, 0, 56, 707, 1997, 62, 0, 47, 48, 0,
	0, 0, 0, 0, 0, 499, 0, 0, 0, 0,
	0, 0, 0, 513, 0, 1526, 1527, 1528, 1530, 0,
	0, 0, 0, 0, 0, 499, 499, 0, 499, 0,
	499, 0, 1787, 0, 0, 106, 0, 0, 326, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	908, 796, 795, 805, 806, 798, 799, 800, 801, 802,
	803, 804, 797, 0, 0, 807, 0, 0, 0, 362,
	0, 0, 464, 474, 0, 0, 0, 106, 0, 106,
	108, 0, 0, 0, 0, 0, 0, 0, 60, 0,
	106, 0, 105, 0, 0, 108, 0, 0, 106, 0,
	0, 330, 513, 0, 0, 0, 0, 0, 0, 832,
	0, 796, 795, 805, 806, 798, 799, 800, 801, 802,
	803, 804, 797, 0, 499, 807, 0, 108, 499, 462,
	0, 0, 0, 0, 482, 499, 484, 0, 499, 499,
	499, 0, 0, 1133, 108, 0, 0, 494, 0, 0,
	0, 0, 0, 0, 0, 505, 0, 0, 0, 0,
	0, 473, 0, 0, 0, 0, 2013, 2017, 0, 0,
	0, 28, 29, 59, 31, 32, 0, 1614, 0, 1160,
	1161, 0, 0, 0, 0, 57, 0, 0, 0, 0,
	0, 65, 0, 0, 0, 33, 53, 54, 796, 795,
	805, 806, 798, 799, 800, 801, 802, 803, 804, 797,
	0, 0, 807, 0, 0, 2033, 2034, 0, 0, 44,
	0, 0, 0, 66, 0, 0, 0, 499, 499, 499,
	1387, 0, 0, 473, 0, 0, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 513, 499, 513, 513, 0,
	0, 796, 795, 805, 806, 798, 799, 800, 801, 802,
	803, 804, 797, 2017, 0, 807, 0, 0, 0, 1722,
	0, 108, 0, 0, 2071, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 35, 61, 40, 39, 42,
	0, 55, 0, 0, 106, 0, 0, 0, 1786, 0,
	499, 0, 0, 0, 0, 0, 0, 0, 0, 513,
	0, 513, 0, 0, 0, 0, 0, 43, 64, 63,
	0, 0, 51, 52, 41, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2132, 106, 0, 0, 0,
	0, 0, 0, 0, 499, 499, 0, 499, 0, 0,
	499, 507, 108, 0, 108, 0, 0, 0, 0, 1776,
	1777, 499, 1778, 0, 0, 1780, 0, 1782, 0, 0,
	56, 499, 45, 62, 0, 47, 48, 796, 795, 805,
	806, 798, 799, 800, 801, 802, 803, 804, 797, 0,
	513, 807, 0, 698, 0, 0, 0, 0, 0, 0,
	0, 499, 0, 0, 0, 0, 0, 0, 499, 108,
	0, 28, 0, 59, 31, 32, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 57, 0, 0, 0, 0,
	0, 65, 0, 0, 0, 33, 0, 499, 0, 0,
	0, 0, 0, 0, 0, 0, 1827, 0, 0, 0,
	0, 106, 106, 106, 0, 0, 0, 0, 0, 0,
	474, 0, 0, 66, 0, 0, 60, 0, 0, 499,
	0, 0, 0, 106, 0, 0, 499, 499, 0, 0,
	0, 0, 0, 0, 0, 106, 1995, 0, 0, 106,
	0, 0, 0, 0, 106, 0, 499, 0, 0, 0,
	1013, 0, 0, 0, 108, 0, 0, 0, 900, 0,
	909, 0, 0, 473, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 35, 61, 40, 39, 42,
	934, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1996, 999, 499, 0, 0, 462, 0, 0, 0,
	0, 1007, 0, 0, 0, 0, 0, 43, 64, 63,
	0, 0, 0, 513, 41, 0, 0, 791, 0, 794,
	0, 0, 0, 499, 0, 0, 808, 809, 810, 811,
	812, 813, 814, 499, 792, 793, 790, 796, 795, 805,
	806, 798, 799, 800, 801, 802, 803, 804, 797, 0,
	0, 807, 0, 0, 0, 0, 0, 0, 0, 0,
	56, 0, 1997, 62, 0, 47, 48, 0, 0, 0,
	1139, 1141, 1546, 0, 0, 1147, 1150, 1151, 1152, 0,
	0, 0, 0, 0, 513, 0, 513, 513, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 106, 106, 0,
	0, 106, 1162, 0, 1165, 1166, 0, 0, 0, 1170,
	0, 1172, 1173, 0, 0, 0, 0, 0, 0, 1180,
	1181, 1182, 0, 1184, 1185, 0, 1187, 1188, 1189, 1190,
	0, 1192, 1193, 1194, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 0, 0, 513, 106, 0, 0, 0,
	0, 0, 0, 1022, 1023, 1024, 60, 0, 1025, 796,
	795, 805, 806, 798, 799, 800, 801, 802, 803, 804,
	797, 0, 0, 807, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1642, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 1063, 0,
	0, 0, 0, 1070, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 473, 0, 0, 1676, 1678, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1013, 0, 0, 0, 1678, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1090,
	0, 0, 0, 0, 0, 513, 513, 0, 513, 0,
	1706, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 362, 362,
	0, 0, 0, 362, 362, 362, 362, 0, 0, 0,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	362, 362, 362, 362, 0, 0, 362, 362, 362, 362,
	362, 0, 0, 0, 1376, 0, 0, 362, 362, 362,
	0, 362, 362, 0, 362, 362, 362, 362, 0, 362,
	362, 362, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 106, 1223, 0, 1755, 106, 106, 0, 1759, 106,
	1232, 1013, 474, 0, 0, 1763, 0, 0, 1768, 1769,
	1770, 0, 0, 0, 1013, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1406,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1197, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1229, 1431, 1432, 0, 0, 0, 1436,
	0, 0, 1439, 0, 0, 0, 0, 1444, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 0, 0,
	0, 0, 0, 0, 0, 106, 106, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 1821, 1821, 1821,
	0, 0, 0, 0, 0, 0, 513, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1821, 0, 106, 0,
	1331, 1332, 0, 0, 0, 0, 0, 106, 0, 0,
	0, 0, 0, 0, 1309, 0, 0, 0, 0, 0,
	0, 0, 1317, 1318, 0, 0, 1319, 0, 0, 106,
	106, 106, 106, 106, 0, 0, 0, 0, 0, 1013,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	513, 0, 362, 0, 0, 1328, 0, 0, 0, 0,
	0, 0, 0, 0, 1337, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1359, 1360, 1361, 1362,
	1363, 0, 0, 0, 1895, 1896, 0, 1897, 362, 0,
	1821, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1706, 0, 0, 0, 0, 0, 362, 0, 0,
	0, 1706, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 362, 362, 0, 0, 0, 362, 0, 0,
	362, 1937, 0, 0, 0, 362, 0, 0, 1821, 0,
	0, 0, 474, 106, 106, 106, 106, 106, 0, 0,
	0, 0, 0, 0, 0, 1223, 0, 0, 106, 0,
	0, 0, 1223, 0, 0, 0, 0, 1964, 0, 0,
	0, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 961, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1706,
	0, 0, 0, 0, 0, 0, 513, 513, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 473, 0, 0, 2026, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 948, 0, 0, 0,
	0, 0, 0, 2041, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1706, 0, 0, 0, 0, 962, 0,
	0, 0, 0, 1821, 0, 106, 0, 0, 0, 0,
	0, 1562, 0, 0, 0, 362, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 362, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 975, 978, 979, 980, 981,
	982, 983, 1607, 984, 985, 986, 987, 988, 989, 990,
	0, 963, 964, 965, 966, 942, 946, 976, 943, 949,
	945, 947, 944, 474, 950, 951, 952, 953, 954, 955,
	956, 957, 958, 959, 960, 967, 968, 969, 970, 971,
	972, 973, 974, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 977, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1733, 0, 0, 0,
	0, 0, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 1743, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1758, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1838, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1223, 0, 1223, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1944, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 631, 611, 0, 570, 634,
	542, 559, 645, 560, 563, 601, 528, 582, 206, 557,
	529, 0, 546, 519, 553, 520, 543, 572, 148, 541,
	613, 585, 633, 175, 597, 632, 578, 0, 640, 178,
	594, 0, 255, 193, 0, 0, 574, 620, 580, 609,
	569, 603, 535, 593, 635, 558, 599, 636, 0, 0,
	2028, 498, 0, 1251, 1252, 0, 0, 0, 0, 0,
	132, 0, 596, 630, 555, 598, 600, 517, 595, 0,
	523, 530, 644, 626, 549, 550, 551, 1493, 0, 0,
	0, 0, 0, 0, 573, 581, 606, 566, 0, 0,
	0, 0, 0, 0, 0, 0, 547, 0, 591, 0,
	0, 0, 531, 524, 0, 0, 571, 0, 0, 0,
	534, 0, 548, 607, 0, 515, 156, 0, 0, 610,
	625, 568, 0, 289, 629, 565, 564, 223, 0, 260,
	159, 176, 125, 110, 120, 0, 158, 202, 233, 241,
	556, 516, 614, 544, 554, 142, 552, 235, 210, 280,
	0, 588, 215, 234, 179, 269, 225, 278, 279, 160,
	290, 291, 264, 287, 295, 128, 252, 0, 0, 0,
	0, 0, 0, 172, 567, 602, 545, 139, 230, 592,
	619, 141, 251, 126, 265, 192, 197, 136, 138, 137,
	121, 246, 267, 131, 140, 256, 261, 113, 263, 277,
	133, 245, 115, 275, 259, 190, 169, 170, 114, 0,
	231, 147, 155, 144, 205, 0, 0, 0, 272, 273,
	143, 298, 122, 286, 117, 123, 285, 199, 0, 0,
	0, 268, 276, 191, 184, 0, 116, 274, 189, 183,
	174, 151, 162, 220, 181, 221, 163, 195, 194, 196,
	0, 521, 0, 257, 283, 299, 129, 540, 0, 266,
	293, 294, 0, 0, 130, 154, 150, 219, 198, 124,
	165, 254, 173, 180, 229, 297, 209, 236, 134, 282,
	253, 538, 539, 536, 0, 537, 583, 584, 637, 638,
	639, 608, 532, 0, 621, 622, 0, 612, 627, 628,
	604, 646, 561, 562, 522, 525, 526, 527, 533, 575,
	576, 587, 590, 617, 616, 615, 618, 623, 642, 641,
	643, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 586, 109, 118, 177, 296, 227, 153, 284,
	518, 146, 0, 0, 577, 579, 589, 605, 111, 112,
	119, 127, 135, 145, 149, 152, 157, 161, 164, 166,
	167, 168, 171, 182, 185, 186, 187, 188, 200, 201,
	203, 204, 207, 208, 211, 212, 213, 214, 216, 217,
	218, 222, 224, 226, 228, 232, 237, 238, 239, 240,
	242, 243, 244, 247, 248, 249, 250, 258, 262, 270,
	271, 281, 288, 292, 624, 631, 611, 0, 570, 634,
	542, 559, 645, 560, 563, 601, 528, 582, 206, 557,
	529, 0, 546, 519, 553, 520, 543, 572, 148, 541,
	613, 585, 633, 175, 597, 632, 578, 0, 640, 178,
	594, 0, 255, 193, 0, 0, 574, 620, 580, 609,
	569, 603, 535, 593, 635, 558, 599, 636, 0, 0,
	0, 498, 0, 1251, 1252, 0, 0, 0, 0, 0,
	132, 0, 596, 630, 555, 598, 600, 517, 595, 0,
	523, 530, 644, 626, 549, 550, 551, 0, 0, 0,
	0, 0, 0, 0, 573, 581, 606, 566, 0, 0,
	0, 0, 0, 0, 0, 0, 547, 0, 591, 0,
	0, 0, 531, 524, 0, 0, 571, 0, 0, 0,
	534, 0, 548, 607, 0, 515, 156, 0, 0, 610,
	625, 568, 0, 289, 629, 565, 564, 223, 0, 260,
	159, 176, 125, 110, 120, 0, 158, 202, 233, 241,
	556, 516, 614, 544, 554, 142, 552, 235, 210, 280,
	0, 588, 215, 234, 179, 269, 225, 278, 279, 160,
	290, 291, 264, 287, 295, 128, 252, 0, 0, 0,
	0, 0, 0, 172, 567, 602, 545, 139, 230, 592,
	619, 141, 251, 126, 265, 192, 197, 136, 138, 137,
	121, 246, 267, 131, 140, 256, 261, 113, 263, 277,
	133, 245, 115, 275, 259, 190, 169, 170, 114, 0,
	231, 147, 155, 144, 205, 0, 0, 0, 272, 273,
	143, 298, 122, 286, 117, 123, 285, 199, 0, 0,
	0, 268, 276, 191, 184, 0, 116, 274, 189, 183,
	174, 151, 162, 220, 181, 221, 163, 195, 194, 196,
	0, 521, 0, 257, 283, 299, 129, 540, 0, 266,
	293, 294, 0, 0, 130, 154, 150, 219, 198, 124,
	165, 254, 173, 180, 229, 297, 209, 236, 134, 282,
	253, 538, 539, 536, 0, 537, 583, 584, 637, 638,
	639, 608, 532, 0, 621, 622, 0, 612, 627, 628,
	604, 646, 561, 562, 522, 525, 526, 527, 533, 575,
	576, 587, 590, 617, 616, 615, 618, 623, 642, 641,
	643, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 586, 109, 118, 177, 296, 227, 153, 284,
	518, 146, 0, 0, 577, 579, 589, 605, 111, 112,
	119, 127, 135, 145, 149, 152, 157, 161, 164, 166,
	167, 168, 171, 182, 185, 186, 187, 188, 200, 201,
	203, 204, 207, 208, 211, 212, 213, 214, 216, 217,
	218, 222, 224, 226, 228, 232, 237, 238, 239, 240,
	242, 243, 244, 247, 248, 249, 250, 258, 262, 270,
	271, 281, 288, 292, 624, 631, 611, 0, 570, 634,
	542, 559, 645, 560, 563, 601, 528, 582, 206, 557,
	529, 0, 546, 519, 553, 520, 543, 572, 148, 541,
	613, 585, 633, 175, 597, 632, 578, 0, 640, 178,
	594, 0, 255, 193, 0, 0, 574, 620, 580, 609,
	569, 603, 535, 593, 635, 558, 599, 636, 0, 0,
	0, 498, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 0, 596, 630, 555, 598, 600, 517, 595, 0,
	523, 530, 644, 626, 549, 550, 551, 0, 0, 0,
	0, 0, 0, 0, 573, 581, 606, 566, 0, 0,
	0, 0, 0, 0, 1610, 0, 547, 0, 591, 0,
	0, 0, 531, 524, 0, 0, 571, 0, 0, 0,
	534, 0, 548, 607, 0, 515, 156, 0, 0, 610,
	625, 568, 0, 289, 629, 565, 564, 223, 0, 260,
	159, 176, 125, 110, 120, 0, 158, 202, 233, 241,
	556, 516, 614, 544, 554, 142, 552, 235, 210, 280,
	0, 588, 215, 234, 179, 269, 225, 278, 279, 160,
	290, 291, 264, 287, 295, 128, 252, 0, 0, 0,
	0, 0, 0, 172, 567, 602, 545, 139, 230, 592,
	619, 141, 251, 126, 265, 192, 197, 136, 138, 137,
	121, 246, 267, 131, 140, 256, 261, 113, 263, 277,
	133, 245, 115, 275, 259, 190, 169, 170, 114, 0,
	231, 147, 155, 144, 205, 0, 0, 0, 272, 273,
	143, 298, 122, 286, 117, 123, 285, 199, 0, 0,
	0, 268, 276, 191, 184, 0, 116, 274, 189, 183,
	174, 151, 162, 220, 181, 221, 163, 195, 194, 196,
	0, 521, 0, 257, 283, 299, 129, 540, 0, 266,
	293, 294, 0, 0, 130, 154, 150, 219, 198, 124,
	165, 254, 173, 180, 229, 297, 209, 236, 134, 282,
	253, 538, 539, 536, 0, 537, 583, 584, 637, 638,
	639, 608, 532, 0, 621, 622, 0, 612, 627, 628,
	604, 646, 561, 562, 522, 525, 526, 527, 533, 575,
	576, 587, 590, 617, 616, 615, 618, 623, 642, 641,
	643, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 586, 109, 118, 177, 296, 227, 153, 284,
	518, 146, 0, 0, 577, 579, 589, 605, 111, 112,
	119, 127, 135, 145, 149, 152, 157, 161, 164, 166,
	167, 168, 171, 182, 185, 186, 187, 188, 200, 201,
	203, 204, 207, 208, 211, 212, 213, 214, 216, 217,
	218, 222, 224, 226, 228, 232, 237, 238, 239, 240,
	242, 243, 244, 247, 248, 249, 250, 258, 262, 270,
	271, 281, 288, 292, 624, 631, 611, 0, 570, 634,
	542, 559, 645, 560, 563, 601, 528, 582, 206, 557,
	529, 0, 546, 519, 553, 520, 543, 572, 148, 541,
	613, 585, 633, 175, 597, 632, 578, 0, 640, 178,
	594, 0, 255, 193, 0, 0, 574, 620, 580, 609,
	569, 603, 535, 593, 635, 558, 599, 636, 66, 0,
	0, 498, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 0, 596, 630, 555, 598, 600, 517, 595, 0,
	523, 530, 644, 626, 549, 550, 551, 0, 0, 0,
	0, 0, 0, 0, 573, 581, 606, 566, 0, 0,
	0, 0, 0, 0, 0, 0, 547, 0, 591, 0,
	0, 0, 531, 524, 0, 0, 571, 0, 0, 0,
	534, 0, 548, 607, 0, 515, 156, 0, 0, 610,
	625, 568, 0, 289, 629, 565, 564, 223, 0, 260,
	159, 176, 125, 110, 120, 0, 158, 202, 233, 241,
	556, 516, 614, 544, 554, 142, 552, 235, 210, 280,
	0, 588, 215, 234, 179, 269, 225, 278, 279, 160,
	290, 291, 264, 287, 295, 128, 252, 0, 0, 0,
	0, 0, 0, 172, 567, 602, 545, 139, 230, 592,
	619, 141, 251, 126, 265, 192, 197, 136, 138, 137,
	121, 246, 267, 131, 140, 256, 261, 113, 263, 277,
	133, 245, 115, 275, 259, 190, 169, 170, 114, 0,
	231, 147, 155, 144, 205, 0, 0, 0, 272, 273,
	143, 298, 122, 286, 117, 123, 285, 199, 0, 0,
	0, 268, 276, 191, 184, 0, 116, 274, 189, 183,
	174, 151, 162, 220, 181, 221, 163, 195, 194, 196,
	0, 521, 0, 257, 283, 299, 129, 540, 0, 266,
	293, 294, 0, 0, 130, 154, 150, 219, 198, 124,
	165, 254, 173, 180, 229, 297, 209, 236, 134, 282,
	253, 538, 539, 536, 0, 537, 583, 584, 637, 638,
	639, 608, 532, 0, 621, 622, 0, 612, 627, 628,
	604, 646, 561, 562, 522, 525, 526, 527, 533, 575,
	576, 587, 590, 617, 616, 615, 618, 623, 642, 641,
	643, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 586, 109, 118, 177, 296, 227, 153, 284,
	518, 146, 0, 0, 577, 579, 589, 605, 111, 112,
	119, 127, 135, 145, 149, 152, 157, 161, 164, 166,
	167, 168, 171, 182, 185, 186, 187, 188, 200, 201,
	203, 204, 207, 208, 211, 212, 213, 214, 216, 217,
	218, 222, 224, 226, 228, 232, 237, 238, 239, 240,
	242, 243, 244, 247, 248, 249, 250, 258, 262, 270,
	271, 281, 288, 292, 624, 631, 611, 0, 570, 634,
	542, 559, 645, 560, 563, 601, 528, 582, 206, 557,
	529, 0, 546, 519, 553, 520, 543, 572, 148, 541,
	613, 585, 633, 175, 597, 1262, 1266, 0, 640, 178,
	594, 0, 255, 193, 0, 0, 574, 620, 580, 609,
	569, 603, 535, 593, 635, 558, 599, 636, 0, 0,
	0, 498, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 0, 596, 630, 555, 598, 600, 517, 595, 0,
	523, 530, 644, 626, 549, 550, 551, 0, 0, 0,
	0, 0, 0, 0, 573, 581, 606, 566, 0, 0,
	0, 0, 0, 0, 0, 0, 547, 0, 591, 0,
	0, 0, 531, 524, 0, 0, 571, 0, 0, 0,
	534, 0, 548, 607, 0, 515, 156, 0, 0, 610,
	625, 1265, 0, 289, 629, 565, 564, 1260, 0, 1261,
	159, 176, 125, 110, 120, 1258, 1264, 202, 233, 241,
	556, 516, 614, 544, 554, 142, 552, 235, 210, 280,
	0, 588, 215, 234, 179, 269, 225, 278, 279, 160,
	290, 291, 264, 287, 295, 128, 252, 0, 0, 0,
	0, 0, 0, 172, 567, 602, 545, 139, 230, 592,
	619, 141, 251, 126, 265, 192, 197, 136, 138, 137,
	121, 246, 267, 131, 140, 256, 261, 113, 263, 277,
	133, 245, 115, 275, 259, 190, 169, 170, 114, 0,
	231, 147, 155, 144, 205, 0, 0, 0, 272, 273,
	143, 298, 122, 286, 117, 123, 285, 199, 0, 0,
	0, 268, 276, 191, 184, 0, 116, 274, 189, 183,
	174, 151, 162, 220, 181, 221, 163, 195, 194, 196,
	0, 521, 0, 257, 283, 299, 129, 540, 0, 266,
	293, 294, 0, 0, 130, 154, 150, 219, 198, 124,
	165, 254, 173, 180, 229, 297, 209, 236, 134, 282,
	253, 538, 539, 536, 0, 537, 583, 584, 637, 638,
	639, 608, 532, 0, 621, 622, 0, 612, 627, 628,
	604, 646, 561, 562, 522, 525, 526, 527, 533, 575,
	576, 587, 590, 617, 616, 615, 618, 623, 642, 641,
	643, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 586, 109, 118, 177, 296, 227, 153, 284,
	518, 146, 0, 0, 577, 579, 589, 605, 111, 112,
	119, 127, 135, 145, 149, 152, 157, 161, 164, 166,
	167, 168, 171, 182, 185, 186, 187, 188, 200, 201,
	203, 204, 207, 208, 211, 212, 213, 214, 216, 217,
	218, 222, 224, 226, 228, 232, 237, 238, 239, 240,
	242, 243, 244, 247, 248, 249, 250, 258, 262, 270,
	271, 281, 288, 292, 624, 631, 611, 0, 570, 634,
	542, 559, 645, 560, 563, 601, 528, 582, 206, 557,
	529, 0, 546, 519, 553, 520, 543, 572, 148, 541,
	613, 585, 633, 175, 597, 632, 578, 0, 640, 178,
	594, 0, 255, 193, 0, 0, 574, 620, 580, 609,
	569, 603, 535, 593, 635, 558, 599, 636, 0, 0,
	0, 107, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 0, 596, 630, 555, 598, 600, 517, 595, 0,
	523, 530, 644, 626, 549, 550, 551, 0, 0, 0,
	0, 0, 0, 0, 573, 581, 606, 566, 0, 0,
	0, 0, 0, 0, 1233, 0, 547, 0, 591, 0,
	0, 0, 531, 524, 0, 0, 571, 0, 0, 0,
	534, 0, 548, 607, 0, 515, 156, 0, 0, 610,
	625, 568, 0, 289, 629, 565, 564, 223, 0, 260,
	159, 176, 125, 110, 120, 0, 158, 202, 233, 241,
	556, 516, 614, 544, 554, 142, 552, 235, 210, 280,
	0, 588, 215, 234, 179, 269, 225, 278, 279, 160,
	290, 291, 264, 287, 295, 128, 252, 0, 0, 0,
	0, 0, 0, 172, 567, 602, 545, 139, 230, 592,
	619, 141, 251, 126, 265, 192, 197, 136, 138, 137,
	121, 246, 267, 131, 140, 256, 261, 113, 263, 277,
	133, 245, 115, 275, 259, 190, 169, 170, 114, 0,
	231, 147, 155, 144, 205, 0, 0, 0, 272, 273,
	143, 298, 122, 286, 117, 123, 285, 199, 0, 0,
	0, 268, 276, 191, 184, 0, 116, 274, 189, 183,
	174, 151, 162, 220, 181, 221, 163, 195, 194, 196,
	0, 521, 0, 257, 283, 299, 129, 540, 0, 266,
	293, 294, 0, 0, 130, 154, 150, 219, 198, 124,
	165, 254, 173, 180, 229, 297, 209, 236, 134, 282,
	253, 538, 539, 536, 0, 537, 583, 584, 637, 638,
	639, 608, 532, 0, 621, 622, 0, 612, 627, 628,
	604, 646, 561, 562, 522, 525, 526, 527, 533, 575,
	576, 587, 590, 617, 616, 615, 618, 623, 642, 641,
	643, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 586, 109, 118, 177, 296, 227, 153, 284,
	518, 146, 0, 0, 577, 579, 589, 605, 111, 112,
	119, 127, 135, 145, 149, 152, 157, 161, 164, 166,
	167, 168, 171, 182, 185, 186, 187, 188, 200, 201,
	203, 204, 207, 208, 211, 212, 213, 214, 216, 217,
	218, 222, 224, 226, 228, 232, 237, 238, 239, 240,
	242, 243, 244, 247, 248, 249, 250, 258, 262, 270,
	271, 281, 288, 292, 624, 631, 611, 0, 570, 634,
	542, 559, 645, 560, 563, 601, 528, 582, 206, 557,
	529, 0, 546, 519, 553, 520, 543, 572, 148, 541,
	613, 585, 633, 175, 597, 632, 578, 0, 640, 178,
	594, 0, 255, 193, 0, 0, 574, 620, 580, 609,
	569, 603, 535, 593, 635, 558, 599, 636, 0, 0,
	0, 367, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 0, 596, 630, 555, 598, 600, 517, 595, 0,
	523, 530, 644, 626, 549, 550, 551, 0, 0, 0,
	0, 0, 0, 0, 573, 581, 606, 566, 0, 0,
	0, 0, 0, 0, 1099, 0, 547, 0, 591, 0,
	0, 0, 531, 524, 0, 0, 571, 0, 0, 0,
	534, 0, 548, 607, 0, 515, 156, 0, 0, 610,
	625, 568, 0, 289, 629, 565, 564, 223, 0, 260,
	159, 176, 125, 110, 120, 0, 158, 202, 233, 241,
	556, 516, 614, 544, 554, 142, 552, 235, 210, 280,
	0, 588, 215, 234, 179, 269, 225, 278, 279, 160,
	290, 291, 264, 287, 295, 128, 252, 0, 0, 0,
	0, 0, 0, 172, 567, 602, 545, 139, 230, 592,
	619, 141, 251, 126, 265, 192, 197, 136, 138, 137,
	121, 246, 267, 131, 140, 256, 261, 113, 263, 277,
	133, 245, 115, 275, 259, 190, 169, 170, 114, 0,
	231, 147, 155, 144, 205, 0, 0, 0, 272, 273,
	143, 298, 122, 286, 117, 123, 285, 199, 0, 0,
	0, 268, 276, 191, 184, 0, 116, 274, 189, 183,
	174, 151, 162, 220, 181, 221, 163, 195, 194, 196,
	0, 521, 0, 257, 283, 299, 129, 540, 0, 266,
	293, 294, 0, 0, 130, 154, 150, 219, 198, 124,
	165, 254, 173, 180, 229, 297, 209, 236, 134, 282,
	253, 538, 539, 536, 0, 537, 583, 584, 637, 638,
	639, 608, 532, 0, 621, 622, 0, 612, 627, 628,
	604, 646, 561, 562, 522, 525, 526, 527, 533, 575,
	576, 587, 590, 617, 616, 615, 618, 623, 642, 641,
	643, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 586, 109, 118, 177, 296, 227, 153, 284,
	518, 146, 0, 0, 577, 579, 589, 605, 111, 112,
	119, 127, 135, 145, 149, 152, 157, 161, 164, 166,
	167, 168, 171, 182, 185, 186, 187, 188, 200, 201,
	203, 204, 207, 208, 211, 212, 213, 214, 216, 217,
	218, 222, 224, 226, 228, 232, 237, 238, 239, 240,
	242, 243, 244, 247, 248, 249, 250, 258, 262, 270,
	271, 281, 288, 292, 624, 631, 611, 0, 570, 634,
	542, 559, 645, 560, 563, 601, 528, 582, 206, 557,
	529, 0, 546, 519, 553, 520, 543, 572, 148, 541,
	613, 585, 633, 175, 597, 632, 578, 0, 640, 178,
	594, 0, 255, 193, 0, 0, 574, 620, 580, 609,
	569, 603, 535, 593, 635, 558, 599, 636, 0, 0,
	0, 498, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 0, 596, 630, 555, 598, 600, 517, 595, 0,
	523, 530, 644, 626, 549, 550, 551, 0, 0, 0,
	0, 0, 0, 0, 573, 581, 606, 566, 0, 0,
	0, 0, 0, 0, 0, 0, 547, 0, 591, 0,
	0, 0, 531, 524, 0, 0, 571, 0, 0, 0,
	534, 0, 548, 607, 0, 515, 156, 0, 0, 610,
	625, 568, 0, 289, 629, 565, 564, 223, 0, 260,
	159, 176, 125, 110, 120, 0, 158, 202, 233, 241,
	556, 516, 614, 544, 554, 142, 552, 235, 210, 280,
	0, 588, 215, 234, 179, 269, 225, 278, 279, 160,
	290, 291, 264, 287, 295, 128, 252, 0, 0, 0,
	0, 0, 0, 172, 567, 602, 545, 139, 230, 592,
	619, 141, 251, 126, 265, 192, 197, 136, 138, 137,
	121, 246, 267, 131, 140, 256, 261, 113, 263, 277,
	133, 245, 115, 275, 259, 190, 169, 170, 114, 0,
	231, 147, 155, 144, 205, 0, 0, 0, 272, 273,
	143, 298, 122, 286, 117, 123, 285, 199, 0, 0,
	0, 268, 276, 191, 184, 0, 116, 274, 189, 183,
	174, 151, 162, 220, 181, 221, 163, 195, 194, 196,
	0, 521, 0, 257, 283, 299, 129, 540, 0, 266,
	293, 294, 0, 0, 130, 154, 150, 219, 198, 124,
	165, 254, 173, 180, 229, 297, 209, 236, 134, 282,
	253, 538, 539, 536, 0, 537, 583, 584, 637, 638,
	639, 608, 532, 0, 621, 622, 0, 612, 627, 628,
	604, 646, 561, 562, 522, 525, 526, 527, 533, 575,
	576, 587, 590, 617, 616, 615, 618, 623, 642, 641,
	643, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 586, 109, 118, 177, 296, 227, 153, 284,
	518, 146, 0, 0, 577, 579, 589, 605, 111, 112,
	119, 127, 135, 145, 149, 152, 157, 161, 164, 166,
	167, 168, 171, 182, 185, 186, 187, 188, 200, 201,
	203, 204, 207, 208, 211, 212, 213, 214, 216, 217,
	218, 222, 224, 226, 228, 232, 237, 238, 239, 240,
	242, 243, 244, 247, 248, 249, 250, 258, 262, 270,
	271, 281, 288, 292, 624, 631, 611, 0, 570, 634,
	542, 559, 645, 560, 563, 601, 528, 582, 206, 557,
	529, 0, 546, 519, 553, 520, 543, 572, 148, 541,
	613, 585, 633, 175, 597, 632, 578, 0, 640, 178,
	594, 0, 255, 193, 0, 0, 574, 620, 580, 609,
	569, 603, 535, 593, 635, 558, 599, 636, 0, 0,
	0, 367, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 0, 596, 630, 555, 598, 600, 517, 595, 0,
	523, 530, 644, 626, 549, 550, 551, 0, 0, 0,
	0, 0, 0, 0, 573, 581, 606, 566, 0, 0,
	0, 0, 0, 0, 0, 0, 547, 0, 591, 0,
	0, 0, 531, 524, 0, 0, 571, 0, 0, 0,
	534, 0, 548, 607, 0, 515, 156, 0, 0, 610,
	625, 568, 0, 289, 629, 565, 564, 223, 0, 260,
	159, 176, 125, 110, 120, 0, 158, 202, 233, 241,
	556, 516, 614, 544, 554, 142, 552, 235, 210, 280,
	0, 588, 215, 234, 179, 269, 225, 278, 279, 160,
	290, 291, 264, 287, 295, 128, 252, 0, 0, 0,
	0, 0, 0, 172, 567, 602, 545, 139, 230, 592,
	619, 141, 251, 126, 265, 192, 197, 136, 138, 137,
	121, 246, 267, 131, 140, 256, 261, 113, 263, 277,
	133, 245, 115, 275, 259, 190, 169, 170, 114, 0,
	231, 147, 155, 144, 205, 0, 0, 0, 272, 273,
	143, 298, 122, 286, 117, 123, 285, 199, 0, 0,
	0, 268, 276, 191, 184, 0, 116, 274, 189, 183,
	174, 151, 162, 220, 181, 221, 163, 195, 194, 196,
	0, 521, 0, 257, 283, 299, 129, 540, 0, 266,
	293, 294, 0, 0, 130, 154, 150, 219, 198, 124,
	165, 254, 173, 180, 229, 297, 209, 236, 134, 282,
	253, 538, 539, 536, 0, 537, 583, 584, 637, 638,
	639, 608, 532, 0, 621, 622, 0, 612, 627, 628,
	604, 646, 561, 562, 522, 525, 526, 527, 533, 575,
	576, 587, 590, 617, 616, 615, 618, 623, 642, 641,
	643, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 586, 109, 118, 177, 296, 227, 153, 284,
	518, 146, 0, 0, 577, 579, 589, 605, 111, 112,
	119, 127, 135, 145, 149, 152, 157, 161, 164, 166,
	167, 168, 171, 182, 185, 186, 187, 188, 200, 201,
	203, 204, 207, 208, 211, 212, 213, 214, 216, 217,
	218, 222, 224, 226, 228, 232, 237, 238, 239, 240,
	242, 243, 244, 247, 248, 249, 250, 258, 262, 270,
	271, 281, 288, 292, 624, 631, 611, 0, 570, 634,
	542, 559, 645, 560, 563, 601, 528, 582, 206, 557,
	529, 0, 546, 519, 553, 520, 543, 572, 148, 541,
	613, 585, 633, 175, 597, 632, 578, 0, 640, 178,
	594, 0, 255, 193, 0, 0, 574, 620, 580, 609,
	569, 603, 535, 593, 635, 558, 599, 636, 0, 0,
	0, 107, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 0, 596, 630, 555, 598, 600, 517, 595, 0,
	523, 530, 644, 626, 549, 550, 551, 0, 0, 0,
	0, 0, 0, 0, 573, 581, 606, 566, 0, 0,
	0, 0, 0, 0, 0, 0, 547, 0, 591, 0,
	0, 0, 531, 524, 0, 0, 571, 0, 0, 0,
	534, 0, 548, 607, 0, 515, 156, 0, 0, 610,
	625, 568, 0, 289, 629, 565, 564, 223, 0, 260,
	159, 176, 125, 110, 120, 0, 158, 202, 233, 241,
	556, 516, 614, 544, 554, 142, 552, 235, 210, 280,
	0, 588, 215, 234, 179, 269, 225, 278, 279, 160,
	290, 291, 264, 287, 295, 128, 252, 0, 0, 0,
	0, 0, 0, 172, 567, 602, 545, 139, 230, 592,
	619, 141, 251, 126, 265, 192, 197, 136, 138, 137,
	121, 246, 267, 131, 140, 256, 261, 113, 263, 277,
	133, 245, 115, 275, 259, 190, 169, 170, 114, 0,
	231, 147, 155, 144, 205, 0, 0, 0, 272, 273,
	143, 298, 122, 286, 117, 123, 285, 199, 0, 0,
	0, 268, 276, 191, 184, 0, 116, 274, 189, 183,
	174, 151, 162, 220, 181, 221, 163, 195, 194, 196,
	0, 521, 0, 257, 283, 299, 129, 540, 0, 266,
	293, 294, 0, 0, 130, 154, 150, 219, 198, 124,
	165, 254, 173, 180, 229, 297, 209, 236, 134, 282,
	253, 538, 539, 536, 0, 537, 583, 584, 637, 638,
	639, 608, 532, 0, 621, 622, 0, 612, 627, 628,
	604, 646, 561, 562, 522, 525, 526, 527, 533, 575,
	576, 587, 590, 617, 616, 615, 618, 623, 642, 641,
	643, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 586, 109, 118, 177, 296, 227, 153, 284,
	518, 146, 0, 0, 577, 579, 589, 605, 111, 112,
	119, 127, 135, 145, 149, 152, 157, 161, 164, 166,
	167, 168, 171, 182, 185, 186, 187, 188, 200, 201,
	203, 204, 207, 208, 211, 212, 213, 214, 216, 217,
	218, 222, 224, 226, 228, 232, 237, 238, 239, 240,
	242, 243, 244, 247, 248, 249, 250, 258, 262, 270,
	271, 281, 288, 292, 624, 206, 0, 0, 0, 0,
	0, 369, 0, 0, 0, 148, 366, 0, 0, 0,
	175, 0, 0, 0, 0, 413, 178, 0, 0, 255,
	193, 0, 0, 0, 0, 402, 403, 0, 0, 0,
	0, 0, 0, 1240, 0, 66, 0, 0, 367, 390,
	389, 392, 393, 394, 395, 0, 0, 132, 391, 396,
	397, 398, 1241, 0, 0, 364, 381, 0, 412, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 378,
	379, 0, 0, 0, 0, 427, 0, 380, 0, 0,
	375, 376, 377, 382, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 156, 0, 0, 404, 0, 0, 0,
	289, 0, 0, 425, 223, 0, 260, 159, 176, 125,
	110, 120, 0, 158, 202, 233, 241, 410, 0, 0,
	0, 0, 142, 0, 235, 210, 280, 0, 0, 215,
	234, 179, 269, 225, 278, 279, 160, 290, 291, 264,
	287, 295, 128, 252, 0, 0, 0, 0, 0, 0,
	172, 0, 0, 0, 139, 230, 0, 0, 141, 251,
	126, 265, 192, 197, 136, 138, 137, 121, 246, 267,
	131, 140, 256, 261, 113, 263, 277, 133, 245, 115,
	275, 259, 190, 169, 170, 114, 0, 231, 147, 155,
	144, 205, 0, 0, 0, 272, 273, 143, 298, 122,
	286, 117, 123, 285, 199, 0, 0, 0, 268, 276,
	191, 184, 0, 116, 274, 189, 183, 174, 151, 162,
	220, 181, 221, 163, 195, 194, 196, 0, 0, 0,
	257, 283, 299, 129, 0, 0, 266, 293, 294, 0,
	0, 130, 154, 150, 219, 198, 124, 165, 254, 173,
	180, 229, 297, 209, 236, 134, 282, 253, 414, 426,
	420, 422, 421, 418, 419, 417, 416, 415, 428, 405,
	406, 407, 408, 411, 0, 423, 424, 0, 0, 0,
	0, 441, 442, 443, 444, 445, 446, 447, 440, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 429, 430,
	431, 432, 433, 434, 435, 436, 439, 437, 438, 409,
	109, 118, 177, 296, 227, 153, 284, 0, 146, 0,
	0, 0, 0, 0, 0, 111, 112, 119, 127, 135,
	145, 149, 152, 157, 161, 164, 166, 167, 168, 171,
	182, 185, 186, 187, 188, 200, 201, 203, 204, 207,
	208, 211, 212, 213, 214, 216, 217, 218, 222, 224,
	226, 228, 232, 237, 238, 239, 240, 242, 243, 244,
	247, 248, 249, 250, 258, 262, 270, 271, 281, 288,
	292, 206, 0, 0, 0, 0, 0, 369, 0, 0,
	0, 148, 366, 0, 0, 0, 175, 0, 0, 0,
	0, 413, 178, 0, 0, 255, 193, 0, 0, 0,
	0, 402, 403, 0, 0, 0, 0, 0, 0, 0,
	0, 66, 0, 696, 367, 390, 389, 392, 393, 394,
	395, 0, 0, 132, 391, 396, 397, 398, 0, 0,
	0, 364, 381, 0, 412, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 378, 379, 0, 0, 0,
	0, 427, 0, 380, 0, 0, 375, 376, 377, 382,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 156,
	0, 0, 404, 0, 0, 0, 289, 0, 0, 425,
	223, 0, 260, 159, 176, 125, 110, 120, 0, 158,
	202, 233, 241, 410, 0, 0, 0, 0, 142, 0,
	235, 210, 280, 0, 0, 215, 234, 179, 269, 225,
	278, 279, 160, 290, 291, 264, 287, 295, 128, 252,
	0, 0, 0, 0, 0, 0, 172, 0, 0, 0,
	139, 230, 0, 0, 141, 251, 126, 265, 192, 197,
	136, 138, 137, 121, 246, 267, 131, 140, 256, 261,
	113, 263, 277, 133, 245, 115, 275, 259, 190, 169,
	170, 114, 0, 231, 147, 155, 144, 205, 0, 0,
	0, 272, 273, 143, 298, 122, 286, 117, 123, 285,
	199, 0, 0, 0, 268, 276, 191, 184, 0, 116,
	274, 189, 183, 174, 151, 162, 220, 181, 221, 163,
	195, 194, 196, 0, 0, 0, 257, 283, 299, 129,
	0, 0, 266, 293, 294, 0, 0, 130, 154, 150,
	219, 198, 124, 165, 254, 173, 180, 229, 297, 209,
	236, 134, 282, 253, 414, 426, 420, 422, 421, 418,
	419, 417, 416, 415, 428, 405, 406, 407, 408, 411,
	0, 423, 424, 0, 0, 0, 0, 441, 442, 443,
	444, 445, 446, 447, 440, 448, 449, 450, 451, 452,
	453, 454, 455, 456, 429, 430, 431, 432, 433, 434,
	435, 436, 439, 437, 438, 409, 109, 118, 177, 296,
	227, 153, 284, 0, 146, 0, 0, 0, 0, 0,
	0, 111, 112, 119, 127, 135, 145, 149, 152, 157,
	161, 164, 166, 167, 168, 171, 182, 185, 186, 187,
	188, 200, 201, 203, 204, 207, 208, 211, 212, 213,
	214, 216, 217, 218, 222, 224, 226, 228, 232, 237,
	238, 239, 240, 242, 243, 244, 247, 248, 249, 250,
	258, 262, 270, 271, 281, 288, 292, 206, 0, 0,
	0, 0, 0, 369, 0, 0, 0, 148, 366, 0,
	0, 0, 175, 0, 0, 0, 0, 413, 178, 0,
	0, 255, 193, 0, 0, 0, 0, 402, 403, 0,
	0, 0, 0, 0, 0, 0, 0, 66, 0, 0,
	367, 390, 389, 392, 393, 394, 395, 0, 0, 132,
	391, 396, 397, 398, 0, 0, 0, 364, 381, 0,
	412, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 378, 379, 360, 0, 0, 0, 427, 0, 380,
	0, 0, 375, 376, 377, 382, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 156, 0, 0, 404, 0,
	0, 0, 289, 0, 0, 425, 223, 0, 260, 159,
	176, 125, 110, 120, 0, 158, 202, 233, 241, 410,
	0, 0, 0, 0, 142, 0, 235, 210, 280, 0,
	0, 215, 234, 179, 269, 225, 278, 279, 160, 290,
	291, 264, 287, 295, 128, 252, 0, 0, 0, 0,
	0, 0, 172, 0, 0, 0, 139, 230, 0, 0,
	141, 251, 126, 265, 192, 197, 136, 138, 137, 121,
	246, 267, 131, 140, 256, 261, 113, 263, 277, 133,
	245, 115, 275, 259, 190, 169, 170, 114, 0, 231,
	147, 155, 144, 205, 0, 0, 0, 272, 273, 143,
	298, 122, 286, 117, 123, 285, 199, 0, 0, 0,
	268, 276, 191, 184, 0, 116, 274, 189, 183, 174,
	151, 162, 220, 181, 221, 163, 195, 194, 196, 0,
	0, 0, 257, 283, 299, 129, 0, 0, 266, 293,
	294, 0, 0, 130, 154, 150, 219, 198, 124, 165,
	254, 173, 180, 229, 297, 209, 236, 134, 282, 253,
	414, 426, 420, 422, 421, 418, 419, 417, 416, 415,
	428, 405, 406, 407, 408, 411, 0, 423, 424, 0,
	0, 0, 0, 441, 442, 443, 444, 445, 446, 447,
	440, 448, 449, 450, 451, 452, 453, 454, 455, 456,
	429, 430, 431, 432, 433, 434, 435, 436, 439, 437,
	438, 409, 109, 118, 177, 296, 227, 153, 284, 0,
	146, 0, 0, 0, 0, 0, 0, 111, 112, 119,
	127, 135, 145, 149, 152, 157, 161, 164, 166, 167,
	168, 171, 182, 185, 186, 187, 188, 200, 201, 203,
	204, 207, 208, 211, 212, 213, 214, 216, 217, 218,
	222, 224, 226, 228, 232, 237, 238, 239, 240, 242,
	243, 244, 247, 248, 249, 250, 258, 262, 270, 271,
	281, 288, 292, 206, 0, 0, 0, 0, 0, 369,
	0, 0, 0, 148, 366, 0, 0, 0, 175, 0,
	0, 0, 0, 413, 178, 0, 0, 255, 193, 0,
	0, 0, 0, 402, 403, 0, 0, 0, 0, 0,
	0, 0, 0, 66, 0, 0, 367, 390, 1149, 392,
	393, 394, 395, 0, 0, 132, 391, 396, 397, 398,
	0, 0, 0, 364, 381, 0, 412, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 378, 379, 360,
	0, 0, 0, 427, 0, 380, 0, 0, 375, 376,
	377, 382, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 156, 0, 0, 404, 0, 0, 0, 289, 0,
	0, 425, 223, 0, 260, 159, 176, 125, 110, 120,
	0, 158, 202, 233, 241, 410, 0, 0, 0, 0,
	142, 0, 235, 210, 280, 0, 0, 215, 234, 179,
	269, 225, 278, 279, 160, 290, 291, 264, 287, 295,
	128, 252, 0, 0, 0, 0, 0, 0, 172, 0,
	0, 0, 139, 230, 0, 0, 141, 251, 126, 265,
	192, 197, 136, 138, 137, 121, 246, 267, 131, 140,
	256, 261, 113, 263, 277, 133, 245, 115, 275, 259,
	190, 169, 170, 114, 0, 231, 147, 155, 144, 205,
	0, 0, 0, 272, 273, 143, 298, 122, 286, 117,
	123, 285, 199, 0, 0, 0, 268, 276, 191, 184,
	0, 116, 274, 189, 183, 174, 151, 162, 220, 181,
	221, 163, 195, 194, 196, 0, 0, 0, 257, 283,
	299, 129, 0, 0, 266, 293, 294, 0, 0, 130,
	154, 150, 219, 198, 124, 165, 254, 173, 180, 229,
	297, 209, 236, 134, 282, 253, 414, 426, 420, 422,
	421, 418, 419, 417, 416, 415, 428, 405, 406, 407,
	408, 411, 0, 423, 424, 0, 0, 0, 0, 441,
	442, 443, 444, 445, 446, 447, 440, 448, 449, 450,
	451, 452, 453, 454, 455, 456, 429, 430, 431, 432,
	433, 434, 435, 436, 439, 437, 438, 409, 109, 118,
	177, 296, 227, 153, 284, 0, 146, 0, 0, 0,
	0, 0, 0, 111, 112, 119, 127, 135, 145, 149,
	152, 157, 161, 164, 166, 167, 168, 171, 182, 185,
	186, 187, 188, 200, 201, 203, 204, 207, 208, 211,
	212, 213, 214, 216, 217, 218, 222, 224, 226, 228,
	232, 237, 238, 239, 240, 242, 243, 244, 247, 248,
	249, 250, 258, 262, 270, 271, 281, 288, 292, 206,
	0, 0, 0, 0, 0, 369, 0, 0, 0, 148,
	366, 0, 0, 0, 175, 0, 0, 0, 0, 413,
	178, 0, 0, 255, 193, 0, 0, 0, 0, 402,
	403, 0, 0, 0, 0, 0, 0, 0, 0, 66,
	0, 0, 367, 390, 1146, 392, 393, 394, 395, 0,
	0, 132, 391, 396, 397, 398, 0, 0, 0, 364,
	381, 0, 412, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 378, 379, 360, 0, 0, 0, 427,
	0, 380, 0, 0, 375, 376, 377, 382, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 156, 0, 0,
	404, 0, 0, 0, 289, 0, 0, 425, 223, 0,
	260, 159, 176, 125, 110, 120, 0, 158, 202, 233,
	241, 410, 0, 0, 0, 0, 142, 0, 235, 210,
	280, 0, 0, 215, 234, 179, 269, 225, 278, 279,
	160, 290, 291, 264, 287, 295, 128, 252, 0, 0,
	0, 0, 0, 0, 172, 0, 0, 0, 139, 230,
	0, 0, 141, 251, 126, 265, 192, 197, 136, 138,
	137, 121, 246, 267, 131, 140, 256, 261, 113, 263,
	277, 133, 245, 115, 275, 259, 190, 169, 170, 114,
	0, 231, 147, 155, 144, 205, 0, 0, 0, 272,
	273, 143, 298, 122, 286, 117, 123, 285, 199, 0,
	0, 0, 268, 276, 191, 184, 0, 116, 274, 189,
	183, 174, 151, 162, 220, 181, 221, 163, 195, 194,
	196, 0, 0, 0, 257, 283, 299, 129, 0, 0,
	266, 293, 294, 0, 0, 130, 154, 150, 219, 198,
	124, 165, 254, 173, 180, 229, 297, 209, 236, 134,
	282, 253, 414, 426, 420, 422, 421, 418, 419, 417,
	416, 415, 428, 405, 406, 407, 408, 411, 0, 423,
	424, 0, 0, 0, 0, 441, 442, 443, 444, 445,
	446, 447, 440, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 429, 430, 431, 432, 433, 434, 435, 436,
	439, 437, 438, 409, 109, 118, 177, 296, 227, 153,
	284, 0, 146, 0, 0, 0, 0, 0, 0, 111,
	112, 119, 127, 135, 145, 149, 152, 157, 161, 164,
	166, 167, 168, 171, 182, 185, 186, 187, 188, 200,
	201, 203, 204, 207, 208, 211, 212, 213, 214, 216,
	217, 218, 222, 224, 226, 228, 232, 237, 238, 239,
	240, 242, 243, 244, 247, 248, 249, 250, 258, 262,
	270, 271, 281, 288, 292, 28, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 206, 0, 0,
	0, 0, 0, 369, 0, 0, 0, 148, 366, 0,
	0, 0, 175, 0, 0, 0, 0, 413, 178, 0,
	0, 255, 193, 0, 0, 0, 0, 402, 403, 0,
	0, 0, 0, 0, 0, 0, 0, 66, 0, 0,
	367, 390, 389, 392, 393, 394, 395, 0, 0, 132,
	391, 396, 397, 398, 0, 0, 0, 364, 381, 0,
	412, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 378, 379, 0, 0, 0, 0, 427, 0, 380,
	0, 0, 375, 376, 377, 382, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 156, 0, 0, 404, 0,
	0, 0, 289, 0, 0, 425, 223, 0, 260, 159,
	176, 125, 110, 120, 0, 158, 202, 233, 241, 410,
	0, 0, 0, 0, 142, 0, 235, 210, 280, 0,
	0, 215, 234, 179, 269, 225, 278, 279, 160, 290,
	291, 264, 287, 295, 128, 252, 0, 0, 0, 0,
	0, 0, 172, 0, 0, 0, 139, 230, 0, 0,
	141, 251, 126, 265, 192, 197, 136, 138, 137, 121,
	246, 267, 131, 140, 256, 261, 113, 263, 277, 133,
	245, 115, 275, 259, 190, 169, 170, 114, 0, 231,
	147, 155, 144, 205, 0, 0, 0, 272, 273, 143,
	298, 122, 286, 117, 123, 285, 199, 0, 0, 0,
	268, 276, 191, 184, 0, 116, 274, 189, 183, 174,
	151, 162, 220, 181, 221, 163, 195, 194, 196, 0,
	0, 0, 257, 283, 299, 129, 0, 0, 266, 293,
	294, 0, 0, 130, 154, 150, 219, 198, 124, 165,
	254, 173, 180, 229, 297, 209, 236, 134, 282, 253,
	414, 426, 420, 422, 421, 418, 419, 417, 416, 415,
	428, 405, 406, 407, 408, 411, 0, 423, 424, 0,
	0, 0, 0, 441, 442, 443, 444, 445, 446, 447,
	440, 448, 449, 450, 451, 452, 453, 454, 455, 456,
	429, 430, 431, 432, 433, 434, 435, 436, 439, 437,
	438, 409, 109, 118, 177, 296, 227, 153, 284, 0,
	146, 0, 0, 0, 0, 0, 0, 111, 112, 119,
	127, 135, 145, 149, 152, 157, 161, 164, 166, 167,
	168, 171, 182, 185, 186, 187, 188, 200, 201, 203,
	204, 207, 208, 211, 212, 213, 214, 216, 217, 218,
	222, 224, 226, 228, 232, 237, 238, 239, 240, 242,
	243, 244, 247, 248, 249, 250, 258, 262, 270, 271,
	281, 288, 292, 206, 0, 0, 0, 0, 0, 369,
	0, 0, 0, 148, 366, 0, 0, 0, 175, 0,
	0, 0, 0, 413, 178, 0, 0, 255, 193, 0,
	0, 0, 0, 402, 403, 0, 0, 0, 0, 0,
	0, 0, 0, 66, 0, 1061, 367, 390, 389, 392,
	393, 394, 395, 0, 0, 132, 391, 396, 397, 398,
	0, 0, 0, 364, 381, 0, 412, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 378, 379, 0,
	0, 0, 0, 427, 0, 380, 0, 0, 375, 376,
	377, 382, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 156, 0, 0, 404, 0, 0, 0, 289, 0,
	0, 425, 223, 0, 260, 159, 176, 125, 110, 120,
	0, 158, 202, 233, 241, 410, 0, 0, 0, 0,
	142, 0, 235, 210, 280, 0, 0, 215, 234, 179,
	269, 225, 278, 279, 160, 290, 291, 264, 287, 295,
	128, 252, 0, 0, 0, 0, 0, 0, 172, 0,
	0, 0, 139, 230, 0, 0, 141, 251, 126, 265,
	192, 197, 136, 138, 137, 121, 246, 267, 131, 140,
	256, 261, 113, 263, 277, 133, 245, 115, 275, 259,
	190, 169, 170, 114, 0, 231, 147, 155, 144, 205,
	0, 0, 0, 272, 273, 143, 298, 122, 286, 117,
	123, 285, 199, 0, 0, 0, 268, 276, 191, 184,
	0, 116, 274, 189, 183, 174, 151, 162, 220, 181,
	221, 163, 195, 194, 196, 0, 0, 0, 257, 283,
	299, 129, 0, 0, 266, 293, 294, 0, 0, 130,
	154, 150, 219, 198, 124, 165, 254, 173, 180, 229,
	297, 209, 236, 134, 282, 253, 414, 426, 420, 422,
	421, 418, 419, 417, 416, 415, 428, 405, 406, 407,
	408, 411, 0, 423, 424, 0, 0, 0, 0, 441,
	442, 443, 444, 445, 446, 447, 440, 448, 449, 450,
	451, 452, 453, 454, 455, 456, 429, 430, 431, 432,
	433, 434, 435, 436, 439, 437, 438, 409, 109, 118,
	177, 296, 227, 153, 284, 0, 146, 0, 0, 0,
	0, 0, 0, 111, 112, 119, 127, 135, 145, 149,
	152, 157, 161, 164, 166, 167, 168, 171, 182, 185,
	186, 187, 188, 200, 201, 203, 204, 207, 208, 211,
	212, 213, 214, 216, 217, 218, 222, 224, 226, 228,
	232, 237, 238, 239, 240, 242, 243, 244, 247, 248,
	249, 250, 258, 262, 270, 271, 281, 288, 292, 206,
	0, 0, 0, 0, 0, 369, 0, 0, 0, 148,
	366, 0, 0, 0, 175, 0, 0, 0, 0, 413,
	178, 0, 0, 255, 193, 0, 0, 0, 0, 402,
	403, 0, 0, 0, 0, 0, 0, 0, 0, 66,
	0, 0, 367, 390, 389, 392, 393, 394, 395, 0,
	0, 132, 391, 396, 397, 398, 0, 0, 0, 364,
	381, 0, 412, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 378, 379, 0, 0, 0, 0, 427,
	0, 380, 0, 0, 375, 376, 377, 382, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 156, 0, 0,
	404, 0, 0, 0, 289, 0, 0, 425, 223, 0,
	260, 159, 176, 125, 110, 120, 0, 158, 202, 233,
	241, 410, 0, 0, 0, 0, 142, 0, 235, 210,
	280, 0, 0, 215, 234, 179, 269, 225, 278, 279,
	160, 290, 291, 264, 287, 295, 128, 252, 0, 0,
	0, 0, 0, 0, 172, 0, 0, 0, 139, 230,
	0, 0, 141, 251, 126, 265, 192, 197, 136, 138,
	137, 121, 246, 267, 131, 140, 256, 261, 113, 263,
	277, 133, 245, 115, 275, 259, 190, 169, 170, 114,
	0, 231, 147, 155, 144, 205, 0, 0, 0, 272,
	273, 143, 298, 122, 286, 117, 123, 285, 199, 0,
	0, 0, 268, 276, 191, 184, 0, 116, 274, 189,
	183, 174, 151, 162, 220, 181, 221, 163, 195, 194,
	196, 0, 0, 0, 257, 283, 299, 129, 0, 0,
	266, 293, 294, 0, 0, 130, 154, 150, 219, 198,
	124, 165, 254, 173, 180, 229, 297, 209, 236, 134,
	282, 253, 414, 426, 420, 422, 421, 418, 419, 417,
	416, 415, 428, 405, 406, 407, 408, 411, 0, 423,
	424, 0, 0, 0, 0, 441, 442, 443, 444, 445,
	446, 447, 440, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 429, 430, 431, 432, 433, 434, 435, 436,
	439, 437, 438, 409, 109, 118, 177, 296, 227, 153,
	284, 0, 146, 0, 0, 0, 0, 0, 0, 111,
	112, 119, 127, 135, 145, 149, 152, 157, 161, 164,
	166, 167, 168, 171, 182, 185, 186, 187, 188, 200,
	201, 203, 204, 207, 208, 211, 212, 213, 214, 216,
	217, 218, 222, 224, 226, 228, 232, 237, 238, 239,
	240, 242, 243, 244, 247, 248, 249, 250, 258, 262,
	270, 271, 281, 288, 292, 206, 0, 0, 0, 0,
	0, 369, 0, 0, 0, 148, 366, 0, 0, 0,
	175, 0, 0, 0, 0, 413, 178, 0, 0, 255,
	193, 0, 0, 0, 0, 402, 403, 0, 0, 0,
	0, 0, 0, 0, 0, 66, 0, 0, 367, 390,
	389, 392, 393, 394, 395, 0, 0, 132, 391, 396,
	397, 398, 0, 0, 0, 364, 381, 0, 412, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 378,
	379, 0, 0, 0, 0, 427, 0, 380, 0, 0,
	375, 376, 377, 382, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 156, 0, 0, 404, 0, 0, 0,
	289, 0, 0, 425, 223, 0, 260, 159, 176, 125,
	110, 120, 0, 158, 202, 233, 241, 410, 0, 0,
	0, 0, 142, 0, 235, 210, 280, 0, 0, 215,
	234, 179, 269, 225, 278, 279, 160, 290, 291, 264,
	287, 295, 128, 252, 0, 0, 0, 0, 0, 0,
	172, 0, 0, 0, 139, 230, 0, 0, 141, 251,
	126, 265, 192, 197, 136, 138, 137, 121, 246, 267,
	131, 140, 256, 261, 113, 263, 277, 133, 245, 115,
	275, 259, 190, 169, 170, 114, 0, 231, 147, 155,
	144, 205, 0, 0, 0, 272, 273, 143, 298, 122,
	286, 117, 123, 285, 199, 0, 0, 0, 268, 276,
	191, 184, 0, 116, 274, 189, 183, 174, 151, 162,
	220, 181, 221, 163, 195, 194, 196, 0, 0, 0,
	257, 283, 299, 129, 0, 0, 266, 293, 294, 0,
	0, 130, 154, 150, 219, 198, 124, 165, 254, 173,
	180, 229, 297, 209, 236, 134, 282, 253, 414, 426,
	420, 422, 421, 418, 419, 417, 416, 415, 428, 405,
	406, 407, 408, 411, 0, 423, 424, 0, 0, 0,
	0, 712, 713, 714, 715, 716, 720, 721, 725, 726,
	734, 733, 732, 735, 736, 738, 737, 739, 717, 718,
	719, 722, 723, 724, 727, 728, 731, 729, 730, 409,
	109, 118, 177, 296, 227, 153, 284, 0, 146, 0,
	0, 0, 0, 0, 0, 111, 112, 119, 127, 135,
	145, 149, 152, 157, 161, 164, 166, 167, 168, 171,
	182, 185, 186, 187, 188, 200, 201, 203, 204, 207,
	208, 211, 212, 213, 214, 216, 217, 218, 222, 224,
	226, 228, 232, 237, 238, 239, 240, 242, 243, 244,
	247, 248, 249, 250, 258, 262, 270, 271, 281, 288,
	292, 206, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 148, 0, 0, 0, 0, 175, 0, 0, 0,
	0, 413, 178, 0, 0, 255, 193, 0, 0, 0,
	0, 402, 403, 0, 0, 0, 0, 0, 0, 0,
	0, 66, 0, 0, 367, 390, 389, 392, 393, 394,
	395, 0, 0, 132, 391, 396, 397, 398, 0, 0,
	0, 0, 381, 0, 412, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 378, 379, 0, 0, 0,
	0, 427, 0, 380, 0, 0, 375, 376, 377, 382,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 156,
	0, 0, 404, 0, 0, 0, 289, 0, 0, 425,
	223, 0, 260, 159, 176, 125, 110, 120, 0, 158,
	202, 233, 241, 410, 0, 0, 0, 0, 142, 0,
	235, 210, 280, 0, 2135, 215, 234, 179, 269, 225,
	278, 279, 160, 290, 291, 264, 287, 295, 128, 252,
	0, 0, 0, 0, 0, 0, 172, 0, 0, 0,
	139, 230, 0, 0, 141, 251, 126, 265, 192, 197,
	136, 138, 137, 121, 246, 267, 131, 140, 256, 261,
	113, 263, 277, 133, 245, 115, 275, 259, 190, 169,
	170, 114, 0, 231, 147, 155, 144, 205, 0, 0,
	0, 272, 273, 143, 298, 122, 286, 117, 123, 285,
	199, 0, 0, 0, 268, 276, 191, 184, 0, 116,
	274, 189, 183, 174, 151, 162, 220, 181, 221, 163,
	195, 194, 196, 0, 0, 0, 257, 283, 299, 129,
	0, 0, 266, 293, 294, 0, 0, 130, 154, 150,
	219, 198, 124, 165, 254, 173, 180, 229, 297, 209,
	236, 134, 282, 253, 414, 426, 420, 422, 421, 418,
	419, 417, 416, 415, 428, 405, 406, 407, 408, 411,
	0, 423, 424, 0, 0, 0, 0, 441, 442, 443,
	444, 445, 446, 447, 440, 448, 449, 450, 451, 452,
	453, 454, 455, 456, 429, 430, 431, 432, 433, 434,
	435, 436, 439, 437, 438, 409, 109, 118, 177, 296,
	227, 153, 284, 0, 146, 0, 0, 0, 0, 0,
	0, 111, 112, 119, 127, 135, 145, 149, 152, 157,
	161, 164, 166, 167, 168, 171, 182, 185, 186, 187,
	188, 200, 201, 203, 204, 207, 208, 211, 212, 213,
	214, 216, 217, 218, 222, 224, 226, 228, 232, 237,
	238, 239, 240, 242, 243, 244, 247, 248, 249, 250,
	258, 262, 270, 271, 281, 288, 292, 206, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 148, 0, 0,
	0, 0, 175, 0, 0, 0, 0, 413, 178, 0,
	0, 255, 193, 0, 0, 0, 0, 402, 403, 0,
	0, 0, 0, 0, 0, 0, 0, 66, 0, 696,
	367, 390, 389, 392, 393, 394, 395, 0, 0, 132,
	391, 396, 397, 398, 0, 0, 0, 0, 381, 0,
	412, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 378, 379, 0, 0, 0, 0, 427, 0, 380,
	0, 0, 375, 376, 377, 382, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 156, 0, 0, 404, 0,
	0, 0, 289, 0, 0, 425, 223, 0, 260, 159,
	176, 125, 110, 120, 0, 158, 202, 233, 241, 410,
	0, 0, 0, 0, 142, 0, 235, 210, 280, 0,
	0, 215, 234, 179, 269, 225, 278, 279, 160, 290,
	291, 264, 287, 295, 128, 252, 0, 0, 0, 0,
	0, 0, 172, 0, 0, 0, 139, 230, 0, 0,
	141, 251, 126, 265, 192, 197, 136, 138, 137, 121,
	246, 267, 131, 140, 256, 261, 113, 263, 277, 133,
	245, 115, 275, 259, 190, 169, 170, 114, 0, 231,
	147, 155, 144, 205, 0, 0, 0, 272, 273, 143,
	298, 122, 286, 117, 123, 285, 199, 0, 0, 0,
	268, 276, 191, 184, 0, 116, 274, 189, 183, 174,
	151, 162, 220, 181, 221, 163, 195, 194, 196, 0,
	0, 0, 257, 283, 299, 129, 0, 0, 266, 293,
	294, 0, 0, 130, 154, 150, 219, 198, 124, 165,
	254, 173, 180, 229, 297, 209, 236, 134, 282, 253,
	414, 426, 420, 422, 421, 418, 419, 417, 416, 415,
	428, 405, 406, 407, 408, 411, 0, 423, 424, 0,
	0, 0, 0, 441, 442, 443, 444, 445, 446, 447,
	440, 448, 449, 450, 451, 452, 453, 454, 455, 456,
	429, 430, 431, 432, 433, 434, 435, 436, 439, 437,
	438, 409, 109, 118, 177, 296, 227, 153, 284, 0,
	146, 0, 0, 0, 0, 0, 0, 111, 112, 119,
	127, 135, 145, 149, 152, 157, 161, 164, 166, 167,
	168, 171, 182, 185, 186, 187, 188, 200, 201, 203,
	204, 207, 208, 211, 212, 213, 214, 216, 217, 218,
	222, 224, 226, 228, 232, 237, 238, 239, 240, 242,
	243, 244, 247, 248, 249, 250, 258, 262, 270, 271,
	281, 288, 292, 206, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 148, 0, 0, 0, 0, 175, 0,
	0, 0, 0, 413, 178, 0, 0, 255, 193, 0,
	0, 0, 0, 402, 403, 0, 0, 0, 0, 0,
	0, 0, 0, 66, 0, 0, 367, 390, 389, 392,
	393, 394, 395, 0, 0, 132, 391, 396, 397, 398,
	0, 0, 0, 0, 381, 0, 412, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 378, 379, 0,
	0, 0, 0, 427, 0, 380, 0, 0, 375, 376,
	377, 382, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 156, 0, 0, 404, 0, 0, 0, 289, 0,
	0, 425, 223, 0, 260, 159, 176, 125, 110, 120,
	0, 158, 202, 233, 241, 410, 0, 0, 0, 0,
	142, 0, 235, 210, 280, 0, 0, 215, 234, 179,
	269, 225, 278, 279, 160, 290, 291, 264, 287, 295,
	128, 252, 0, 0, 0, 0, 0, 0, 172, 0,
	0, 0, 139, 230, 0, 0, 141, 251, 126, 265,
	192, 197, 136, 138, 137, 121, 246, 267, 131, 140,
	256, 261, 113, 263, 277, 133, 245, 115, 275, 259,
	190, 169, 170, 114, 0, 231, 147, 155, 144, 205,
	0, 0, 0, 272, 273, 143, 298, 122, 286, 117,
	123, 285, 199, 0, 0, 0, 268, 276, 191, 184,
	0, 116, 274, 189, 183, 174, 151, 162, 220, 181,
	221, 163, 195, 194, 196, 0, 0, 0, 257, 283,
	299, 129, 0, 0, 266, 293, 294, 0, 0, 130,
	154, 150, 219, 198, 124, 165, 254, 173, 180, 229,
	297, 209, 236, 134, 282, 253, 414, 426, 420, 422,
	421, 418, 419, 417, 416, 415, 428, 405, 406, 407,
	408, 411, 0, 423, 424, 0, 0, 0, 0, 441,
	442, 443, 444, 445, 446, 447, 440, 448, 449, 450,
	451, 452, 453, 454, 455, 456, 429, 430, 431, 432,
	433, 434, 435, 436, 439, 437, 438, 409, 109, 118,
	177, 296, 227, 153, 284, 0, 146, 0, 0, 0,
	0, 0, 0, 111, 112, 119, 127, 135, 145, 149,
	152, 157, 161, 164, 166, 167, 168, 171, 182, 185,
	186, 187, 188, 200, 201, 203, 204, 207, 208, 211,
	212, 213, 214, 216, 217, 218, 222, 224, 226, 228,
	232, 237, 238, 239, 240, 242, 243, 244, 247, 248,
	249, 250, 258, 262, 270, 271, 281, 288, 292, 206,
	0, 0, 0, 0, 1218, 0, 0, 0, 0, 148,
	0, 0, 0, 0, 175, 0, 0, 0, 0, 0,
	178, 0, 0, 255, 193, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1220, 1222, 0, 0, 0,
	0, 0, 107, 0, 1225, 0, 0, 0, 0, 0,
	0, 132, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 156, 0, 0,
	0, 0, 0, 0, 289, 0, 1221, 0, 223, 0,
	260, 159, 176, 125, 110, 120, 0, 158, 202, 233,
	241, 0, 0, 0, 0, 0, 142, 0, 235, 210,
	280, 0, 0, 215, 234, 179, 269, 225, 278, 279,
	160, 290, 291, 264, 287, 295, 128, 252, 0, 0,
	0, 0, 0, 0, 172, 0, 0, 0, 139, 230,
	0, 0, 141, 251, 126, 265, 192, 197, 136, 138,
	137, 121, 246, 267, 131, 140, 256, 261, 113, 263,
	277, 133, 245, 115, 275, 259, 190, 169, 170, 114,
	0, 231, 147, 155, 144, 205, 0, 0, 0, 272,
	273, 143, 298, 122, 286, 117, 123, 285, 199, 0,
	0, 0, 268, 276, 191, 184, 0, 116, 274, 189,
	183, 174, 151, 162, 220, 181, 221, 163, 195, 194,
	196, 0, 0, 0, 257, 283, 299, 129, 0, 0,
	266, 293, 294, 0, 0, 130, 154, 150, 219, 198,
	124, 165, 254, 173, 180, 229, 297, 209, 236, 134,
	282, 253, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 759, 760, 761, 762, 763,
	767, 768, 772, 773, 781, 780, 779, 782, 783, 785,
	784, 786, 764, 765, 766, 769, 770, 771, 774, 775,
	778, 776, 777, 0, 109, 118, 177, 296, 227, 153,
	284, 0, 146, 0, 0, 0, 0, 0, 0, 111,
	112, 119, 127, 135, 145, 149, 152, 157, 161, 164,
	166, 167, 168, 171, 182, 185, 186, 187, 188, 200,
	201, 203, 204, 207, 208, 211, 212, 213, 214, 216,
	217, 218, 222, 224, 226, 228, 232, 237, 238, 239,
	240, 242, 243, 244, 247, 248, 249, 250, 258, 262,
	270, 271, 281, 288, 292, 206, 0, 0, 0, 0,
	1218, 0, 0, 0, 0, 148, 0, 0, 0, 0,
	175, 0, 0, 0, 0, 0, 178, 0, 0, 255,
	193, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1220, 1222, 0, 0, 0, 0, 0, 107, 0,
	1225, 0, 0, 0, 0, 0, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 156, 0, 0, 0, 0, 0, 0,
	289, 0, 1221, 0, 223, 0, 260, 159, 176, 125,
	110, 120, 0, 158, 202, 233, 241, 0, 0, 0,
	0, 0, 142, 0, 235, 210, 280, 0, 0, 1216,
	234, 179, 269, 225, 278, 279, 160, 290, 291, 264,
	287, 295, 128, 252, 0, 0, 0, 0, 0, 0,
	172, 0, 0, 0, 139, 230, 0, 0, 141, 251,
	126, 265, 192, 197, 136, 138, 137, 121, 246, 267,
	131, 140, 256, 261, 113, 263, 277, 133, 245, 115,
	275, 259, 190, 169, 170, 114, 0, 231, 147, 155,
	144, 205, 0, 0, 0, 272, 273, 143, 298, 122,
	286, 117, 123, 285, 199, 0, 0, 0, 268, 276,
	191, 184, 0, 116, 274, 189, 183, 174, 151, 162,
	220, 181, 221, 163, 195, 194, 196, 0, 0, 0,
	257, 283, 299, 129, 0, 0, 266, 293, 294, 0,
	0, 130, 154, 150, 219, 198, 124, 165, 254, 173,
	180, 229, 297, 209, 236, 134, 282, 253, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 759, 760, 761, 762, 763, 767, 768, 772, 773,
	781, 780, 779, 782, 783, 785, 784, 786, 764, 765,
	766, 769, 770, 771, 774, 775, 778, 776, 777, 0,
	109, 118, 177, 296, 227, 153, 284, 0, 146, 0,
	0, 0, 0, 0, 0, 111, 112, 119, 127, 135,
	145, 149, 152, 157, 161, 164, 166, 167, 168, 171,
	182, 185, 186, 187, 188, 200, 201, 203, 204, 207,
	208, 211, 212, 213, 214, 216, 217, 218, 222, 224,
	226, 228, 232, 237, 238, 239, 240, 242, 243, 244,
	247, 248, 249, 250, 258, 262, 270, 271, 281, 288,
	292, 206, 0, 0, 0, 0, 754, 0, 0, 0,
	0, 148, 0, 0, 0, 0, 175, 0, 0, 0,
	0, 0, 178, 0, 0, 255, 193, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 755, 0, 758, 0, 0, 0,
	0, 0, 0, 132, 0, 0, 0, 0, 0, 751,
	750, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 752, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 156,
	0, 0, 0, 0, 0, 0, 289, 0, 0, 0,
	223, 0, 260, 159, 176, 125, 110, 120, 0, 158,
	202, 233, 241, 0, 0, 0, 0, 0, 142, 0,
	235, 210, 280, 0, 0, 215, 234, 179, 269, 225,
	278, 279, 160, 290, 291, 264, 287, 295, 128, 252,
	0, 0, 0, 0, 0, 0, 172, 0, 0, 0,
	139, 230, 0, 0, 141, 251, 126, 265, 192, 197,
	136, 138, 137, 121, 246, 267, 131, 140, 256, 261,
	113, 263, 277, 133, 245, 115, 275, 259, 190, 169,
	170, 114, 0, 231, 147, 155, 144, 205, 0, 0,
	0, 272, 273, 143, 298, 122, 286, 117, 123, 285,
	199, 0, 0, 0, 268, 276, 191, 184, 0, 116,
	274, 189, 183, 174, 151, 162, 220, 181, 221, 163,
	195, 194, 196, 0, 0, 0, 257, 283, 299, 129,
	0, 0, 266, 293, 294, 0, 0, 130, 154, 150,
	219, 198, 124, 165, 254, 173, 180, 229, 297, 209,
	236, 134, 282, 253, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 759, 760, 761,
	762, 763, 767, 768, 772, 773, 781, 780, 779, 782,
	783, 785, 784, 786, 764, 765, 766, 769, 770, 771,
	774, 775, 778, 776, 777, 0, 109, 118, 177, 296,
	227, 153, 284, 0, 146, 0, 0, 0, 0, 0,
	0, 111, 112, 119, 127, 135, 145, 149, 152, 157,
	161, 164, 166, 167, 168, 171, 182, 185, 186, 187,
	188, 200, 201, 203, 204, 207, 208, 211, 212, 213,
	214, 216, 217, 218, 222, 224, 226, 228, 232, 237,
	238, 239, 240, 242, 243, 244, 247, 248, 249, 250,
	258, 262, 270, 271, 281, 288, 292, 206, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 148, 0, 0,
	0, 0, 175, 1471, 0, 0, 0, 0, 178, 0,
	0, 255, 193, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	107, 0, 1225, 0, 0, 0, 0, 0, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 156, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 223, 0, 260, 159,
	176, 125, 110, 120, 0, 158, 202, 233, 241, 0,
	0, 0, 0, 0, 142, 0, 235, 210, 280, 0,
	0, 215, 234, 179, 269, 225, 278, 279, 160, 290,
	291, 264, 287, 295, 128, 252, 0, 0, 0, 0,
	0, 0, 172, 0, 0, 0, 139, 230, 0, 0,
	141, 251, 126, 265, 192, 197, 136, 138, 137, 121,
	246, 267, 131, 140, 256, 261, 113, 263, 277, 133,
	245, 115, 275, 259, 190, 169, 170, 114, 0, 231,
	147, 155, 144, 205, 0, 0, 0, 272, 273, 143,
	298, 122, 286, 117, 123, 285, 199, 0, 0, 0,
	268, 276, 191, 184, 0, 116, 274, 189, 183, 174,
	151, 162, 220, 181, 221, 163, 195, 194, 196, 0,
	0, 0, 257, 283, 299, 129, 0, 0, 266, 293,
	294, 0, 0, 130, 154, 150, 219, 198, 124, 165,
	254, 173, 180, 229, 297, 209, 236, 134, 282, 253,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 759, 760, 761, 762, 763, 767, 768,
	772, 773, 781, 780, 779, 782, 783, 785, 784, 786,
	764, 765, 766, 769, 770, 771, 774, 775, 778, 776,
	777, 0, 109, 118, 177, 296, 227, 153, 284, 0,
	146, 0, 0, 0, 0, 0, 0, 111, 112, 119,
	127, 135, 145, 149, 152, 157, 161, 164, 166, 167,
	168, 171, 182, 185, 186, 187, 188, 200, 201, 203,
	204, 207, 208, 211, 212, 213, 214, 216, 217, 218,
	222, 224, 226, 228, 232, 237, 238, 239, 240, 242,
	243, 244, 247, 248, 249, 250, 258, 262, 270, 271,
	281, 288, 292, 206, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 148, 0, 0, 0, 0, 175, 0,
	0, 0, 0, 0, 178, 0, 0, 255, 193, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 107, 0, 1225, 0,
	0, 0, 0, 0, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 156, 0, 0, 0, 0, 0, 0, 289, 0,
	0, 0, 223, 0, 260, 159, 176, 125, 110, 120,
	0, 158, 202, 233, 241, 0, 0, 0, 0, 0,
	142, 0, 235, 210, 280, 0, 0, 215, 234, 179,
	269, 225, 278, 279, 160, 290, 291, 264, 287, 295,
	128, 252, 0, 0, 0, 0, 0, 0, 172, 0,
	0, 0, 139, 230, 0, 0, 141, 251, 126, 265,
	192, 197, 136, 138, 137, 121, 246, 267, 131, 140,
	256, 261, 113, 263, 277, 133, 245, 115, 275, 259,
	190, 169, 170, 114, 0, 231, 147, 155, 144, 205,
	0, 0, 0, 272, 273, 143, 298, 122, 286, 117,
	123, 285, 199, 0, 0, 0, 268, 276, 191, 184,
	0, 116, 274, 189, 183, 174, 151, 162, 220, 181,
	221, 163, 195, 194, 196, 0, 0, 0, 257, 283,
	299, 129, 0, 0, 266, 293, 294, 0, 0, 130,
	154, 150, 219, 198, 124, 165, 254, 173, 180, 229,
	297, 209, 236, 134, 282, 253, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 759,
	760, 761, 762, 763, 767, 768, 772, 773, 781, 780,
	779, 782, 783, 785, 784, 786, 764, 765, 766, 769,
	770, 771, 774, 775, 778, 776, 777, 0, 109, 118,
	177, 296, 227, 153, 284, 0, 146, 0, 0, 0,
	0, 0, 0, 111, 112, 119, 127, 135, 145, 149,
	152, 157, 161, 164, 166, 167, 168, 171, 182, 185,
	186, 187, 188, 200, 201, 203, 204, 207, 208, 211,
	212, 213, 214, 216, 217, 218, 222, 224, 226, 228,
	232, 237, 238, 239, 240, 242, 243, 244, 247, 248,
	249, 250, 258, 262, 270, 271, 281, 288, 292, 206,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 148,
	0, 0, 0, 0, 175, 0, 0, 0, 0, 0,
	178, 0, 0, 255, 193, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 755, 0, 758, 0, 0, 0, 0, 0,
	0, 132, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 156, 0, 0,
	0, 0, 0, 0, 289, 0, 0, 0, 223, 0,
	260, 159, 176, 125, 110, 120, 0, 158, 202, 233,
	241, 0, 0, 0, 0, 0, 142, 0, 235, 210,
	280, 0, 0, 215, 234, 179, 269, 225, 278, 279,
	160, 290, 291, 264, 287, 295, 128, 252, 0, 0,
	0, 0, 0, 0, 172, 0, 0, 0, 139, 230,
	0, 0, 141, 251, 126, 265, 192, 197, 136, 138,
	137, 121, 246, 267, 131, 140, 256, 261, 113, 263,
	277, 133, 245, 115, 275, 259, 190, 169, 170, 114,
	0, 231, 147, 155, 144, 205, 0, 0, 0, 272,
	273, 143, 298, 122, 286, 117, 123, 285, 199, 0,
	0, 0, 268, 276, 191, 184, 0, 116, 274, 189,
	183, 174, 151, 162, 220, 181, 221, 163, 195, 194,
	196, 0, 0, 0, 257, 283, 299, 129, 0, 0,
	266, 293, 294, 0, 0, 130, 154, 150, 219, 198,
	124, 165, 254, 173, 180, 229, 297, 209, 236, 134,
	282, 253, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 759, 760, 761, 762, 763,
	767, 768, 772, 773, 781, 780, 779, 782, 783, 785,
	784, 786, 764, 765, 766, 769, 770, 771, 774, 775,
	778, 776, 777, 0, 109, 118, 177, 296, 227, 153,
	284, 0, 146, 0, 0, 0, 0, 0, 0, 111,
	112, 119, 127, 135, 145, 149, 152, 157, 161, 164,
	166, 167, 168, 171, 182, 185, 186, 187, 188, 200,
	201, 203, 204, 207, 208, 211, 212, 213, 214, 216,
	217, 218, 222, 224, 226, 228, 232, 237, 238, 239,
	240, 242, 243, 244, 247, 248, 249, 250, 258, 262,
	270, 271, 281, 288, 292, 206, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 148, 0, 0, 0, 0,
	175, 0, 0, 0, 0, 0, 178, 0, 0, 255,
	193, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 498, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 796, 795, 805, 806, 798,
	799, 800, 801, 802, 803, 804, 797, 0, 0, 807,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 156, 0, 0, 0, 0, 0, 0,
	289, 0, 0, 0, 223, 0, 260, 159, 176, 125,
	110, 120, 0, 158, 202, 233, 241, 0, 0, 0,
	0, 0, 142, 0, 235, 210, 280, 0, 0, 215,
	234, 179, 269, 225, 278, 279, 160, 290, 291, 264,
	287, 295, 128, 252, 0, 0, 0, 0, 0, 0,
	172, 0, 0, 0, 139, 230, 0, 0, 141, 251,
	126, 265, 192, 197, 136, 138, 137, 121, 246, 267,
	131, 140, 256, 261, 113, 263, 277, 133, 245, 115,
	275, 259, 190, 169, 170, 114, 0, 231, 147, 155,
	144, 205, 0, 0, 0, 272, 273, 143, 298, 122,
	286, 117, 123, 285, 199, 0, 0, 0, 268, 276,
	191, 184, 0, 116, 274, 189, 183, 174, 151, 162,
	220, 181, 221, 163, 195, 194, 196, 0, 0, 0,
	257, 283, 299, 129, 0, 0, 266, 293, 294, 0,
	0, 130, 154, 150, 219, 198, 124, 165, 254, 173,
	180, 229, 297, 209, 236, 134, 282, 253, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 118, 177, 296, 227, 153, 284, 0, 146, 0,
	0, 0, 0, 0, 0, 111, 112, 119, 127, 135,
	145, 149, 152, 157, 161, 164, 166, 167, 168, 171,
	182, 185, 186, 187, 188, 200, 201, 203, 204, 207,
	208, 211, 212, 213, 214, 216, 217, 218, 222, 224,
	226, 228, 232, 237, 238, 239, 240, 242, 243, 244,
	247, 248, 249, 250, 258, 262, 270, 271, 281, 288,
	292, 28, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 206, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 148, 0, 0, 0, 0, 175, 0,
	0, 0, 0, 0, 178, 0, 0, 255, 193, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 66, 0, 0, 498, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 156, 0, 0, 0, 0, 0, 0, 289, 0,
	0, 0, 223, 0, 260, 159, 176, 125, 110, 120,
	0, 158, 202, 233, 241, 0, 0, 0, 0, 0,
	142, 0, 235, 210, 280, 0, 0, 215, 234, 179,
	269, 225, 278, 279, 160, 290, 291, 264, 287, 295,
	128, 252, 0, 0, 0, 0, 0, 0, 172, 0,
	0, 0, 139, 230, 0, 0, 141, 251, 126, 265,
	192, 197, 136, 138, 137, 121, 246, 267, 131, 140,
	256, 261, 113, 263, 277, 133, 245, 115, 275, 259,
	190, 169, 170, 114, 0, 231, 147, 155, 144, 205,
	0, 0, 0, 272, 273, 143, 298, 122, 286, 117,
	123, 285, 199, 0, 0, 0, 268, 276, 191, 184,
	0, 116, 274, 189, 183, 174, 151, 162, 220, 181,
	221, 163, 195, 194, 196, 0, 0, 0, 257, 283,
	299, 129, 0, 0, 266, 293, 294, 0, 0, 130,
	154, 150, 219, 198, 124, 165, 254, 173, 180, 229,
	297, 209, 236, 134, 282, 253, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 118,
	177, 296, 227, 153, 284, 0, 146, 0, 0, 0,
	0, 0, 0, 111, 112, 119, 127, 135, 145, 149,
	152, 157, 161, 164, 166, 167, 168, 171, 182, 185,
	186, 187, 188, 200, 201, 203, 204, 207, 208, 211,
	212, 213, 214, 216, 217, 218, 222, 224, 226, 228,
	232, 237, 238, 239, 240, 242, 243, 244, 247, 248,
	249, 250, 258, 262, 270, 271, 281, 288, 292, 28,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 206, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 148, 0, 0, 0, 0, 175, 0, 0, 0,
	0, 0, 178, 0, 0, 255, 193, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 66, 0, 0, 107, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 156,
	0, 0, 0, 0, 0, 0, 289, 0, 0, 0,
	223, 0, 260, 159, 176, 125, 110, 120, 0, 158,
	202, 233, 241, 0, 0, 0, 0, 0, 142, 0,
	235, 210, 280, 0, 0, 215, 234, 179, 269, 225,
	278, 279, 160, 290, 291, 264, 287, 295, 128, 252,
	0, 0, 0, 0, 0, 0, 172, 0, 0, 0,
	139, 230, 0, 0, 141, 251, 126, 265, 192, 197,
	136, 138, 137, 121, 246, 267, 131, 140, 256, 261,
	113, 263, 277, 133, 245, 115, 275, 259, 190, 169,
	170, 114, 0, 231, 147, 155, 144, 205, 0, 0,
	0, 272, 273, 143, 298, 122, 286, 117, 123, 285,
	199, 0, 0, 0, 268, 276, 191, 184, 0, 116,
	274, 189, 183, 174, 151, 162, 220, 181, 221, 163,
	195, 194, 196, 0, 0, 0, 257, 283, 299, 129,
	0, 0, 266, 293, 294, 0, 0, 130, 154, 150,
	219, 198, 124, 165, 254, 173, 180, 229, 297, 209,
	236, 134, 282, 253, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 118, 177, 296,
	227, 153, 284, 0, 146, 0, 0, 0, 0, 0,
	0, 111, 112, 119, 127, 135, 145, 149, 152, 157,
	161, 164, 166, 167, 168, 171, 182, 185, 186, 187,
	188, 200, 201, 203, 204, 207, 208, 211, 212, 213,
	214, 216, 217, 218, 222, 224, 226, 228, 232, 237,
	238, 239, 240, 242, 243, 244, 247, 248, 249, 250,
	258, 262, 270, 271, 281, 288, 292, 206, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 148, 929, 0,
	0, 0, 175, 0, 0, 0, 0, 0, 178, 0,
	0, 255, 193, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	498, 0, 928, 0, 0, 0, 0, 0, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 156, 0, 0, 0, 0,
	0, 0, 289, 0, 0, 0, 223, 0, 260, 159,
	176, 125, 110, 120, 0, 158, 202, 233, 241, 0,
	0, 0, 0, 0, 142, 0, 235, 210, 280, 0,
	0, 215, 234, 179, 269, 225, 278, 279, 160, 290,
	291, 264, 287, 295, 128, 252, 0, 0, 0, 0,
	0, 0, 172, 0, 0, 0, 139, 230, 0, 0,
	141, 251, 126, 265, 192, 197, 136, 138, 137, 121,
	246, 267, 131, 140, 256, 261, 113, 263, 277, 133,
	245, 115, 275, 259, 190, 169, 170, 114, 0, 231,
	147, 155, 144, 205, 0, 0, 0, 272, 273, 143,
	298, 122, 286, 117, 123, 285, 199, 0, 0, 0,
	268, 276, 191, 184, 0, 116, 274, 189, 183, 174,
	151, 162, 220, 181, 221, 163, 195, 194, 196, 0,
	0, 0, 257, 283, 299, 129, 0, 0, 266, 293,
	294, 0, 0, 130, 154, 150, 219, 198, 124, 165,
	254, 173, 180, 229, 297, 209, 236, 134, 282, 253,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 118, 177, 296, 227, 153, 284, 0,
	146, 0, 0, 0, 0, 0, 0, 111, 112, 119,
	127, 135, 145, 149, 152, 157, 161, 164, 166, 167,
	168, 171, 182, 185, 186, 187, 188, 200, 201, 203,
	204, 207, 208, 211, 212, 213, 214, 216, 217, 218,
	222, 224, 226, 228, 232, 237, 238, 239, 240, 242,
	243, 244, 247, 248, 249, 250, 258, 262, 270, 271,
	281, 288, 292, 206, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 148, 0, 0, 0, 0, 175, 0,
	0, 0, 0, 0, 178, 0, 0, 255, 193, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 66, 0, 0, 107, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 156, 0, 0, 0, 0, 0, 0, 289, 0,
	0, 0, 223, 0, 260, 159, 176, 125, 110, 120,
	0, 158, 202, 233, 241, 0, 0, 0, 0, 0,
	142, 0, 235, 210, 280, 0, 0, 215, 234, 179,
	269, 225, 278, 279, 160, 290, 291, 264, 287, 295,
	128, 252, 0, 0, 0, 0, 0, 0, 172, 0,
	0, 0, 139, 230, 0, 0, 141, 251, 126, 265,
	192, 197, 136, 138, 137, 121, 246, 267, 131, 140,
	256, 261, 113, 263, 277, 133, 245, 115, 275, 259,
	190, 169, 170, 114, 0, 231, 147, 155, 144, 205,
	0, 0, 0, 272, 273, 143, 298, 122, 286, 117,
	123, 285, 199, 0, 0, 0, 268, 276, 191, 184,
	0, 116, 274, 189, 183, 174, 151, 162, 220, 181,
	221, 163, 195, 194, 196, 0, 0, 0, 257, 283,
	299, 129, 0, 0, 266, 293, 294, 0, 0, 130,
	154, 150, 219, 198, 124, 165, 254, 173, 180, 229,
	297, 209, 236, 134, 282, 253, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 109, 118,
	177, 296, 227, 153, 284, 0, 146, 0, 0, 0,
	0, 0, 0, 111, 112, 119, 127, 135, 145, 149,
	152, 157, 161, 164, 166, 167, 168, 171, 182, 185,
	186, 187, 188, 200, 201, 203, 204, 207, 208, 211,
	212, 213, 214, 216, 217, 218, 222, 224, 226, 228,
	232, 237, 238, 239, 240, 242, 243, 244, 247, 248,
	249, 250, 258, 262, 270, 271, 281, 288, 292, 206,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 148,
	0, 0, 0, 0, 175, 0, 0, 0, 0, 0,
	178, 0, 0, 255, 193, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 66,
	0, 0, 498, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 156, 0, 0,
	0, 0, 0, 0, 289, 0, 0, 0, 223, 0,
	260, 159, 176, 125, 110, 120, 0, 158, 202, 233,
	241, 0, 0, 0, 0, 0, 142, 0, 235, 210,
	280, 0, 0, 215, 234, 179, 269, 225, 278, 279,
	160, 290, 291, 264, 287, 295, 128, 252, 0, 0,
	0, 0, 0, 0, 172, 0, 0, 0, 139, 230,
	0, 0, 141, 251, 126, 265, 192, 197, 136, 138,
	137, 121, 246, 267, 131, 140, 256, 261, 113, 263,
	277, 133, 245, 115, 275, 259, 190, 169, 170, 114,
	0, 231, 147, 155, 144, 205, 0, 0, 0, 272,
	273, 143, 298, 122, 286, 117, 123, 285, 199, 0,
	0, 0, 268, 276, 191, 184, 0, 116, 274, 189,
	183, 174, 151, 162, 220, 181, 221, 163, 195, 194,
	196, 0, 0, 0, 257, 283, 299, 129, 0, 0,
	266, 293, 294, 0, 0, 130, 154, 150, 219, 198,
	124, 165, 254, 173, 180, 229, 297, 209, 236, 134,
	282, 253, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 118, 177, 296, 227, 153,
	284, 0, 146, 0, 0, 0, 0, 0, 0, 111,
	112, 119, 127, 135, 145, 149, 152, 157, 161, 164,
	166, 167, 168, 171, 182, 185, 186, 187, 188, 200,
	201, 203, 204, 207, 208, 211, 212, 213, 214, 216,
	217, 218, 222, 224, 226, 228, 232, 237, 238, 239,
	240, 242, 243, 244, 247, 248, 249, 250, 258, 262,
	270, 271, 281, 288, 292, 206, 0, 0, 0, 0,
	0, 0, 0, 0, 899, 148, 0, 0, 0, 0,
	175, 0, 0, 0, 0, 0, 178, 0, 0, 255,
	193, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 107, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 156, 0, 0, 0, 0, 0, 0,
	289, 0, 0, 0, 223, 0, 260, 159, 176, 125,
	110, 120, 0, 158, 202, 233, 241, 0, 0, 0,
	0, 0, 142, 0, 235, 210, 280, 0, 0, 215,
	234, 179, 269, 225, 278, 279, 160, 290, 291, 264,
	287, 295, 128, 252, 0, 0, 0, 0, 0, 0,
	172, 0, 0, 0, 139, 230, 0, 0, 141, 251,
	126, 265, 192, 197, 136, 138, 137, 121, 246, 267,
	131, 140, 256, 261, 113, 263, 277, 133, 245, 115,
	275, 259, 190, 169, 170, 114, 0, 231, 147, 155,
	144, 205, 0, 0, 0, 272, 273, 143, 298, 122,
	286, 117, 123, 285, 199, 0, 0, 0, 268, 276,
	191, 184, 0, 116, 274, 189, 183, 174, 151, 162,
	220, 181, 221, 163, 195, 194, 196, 0, 0, 0,
	257, 283, 299, 129, 0, 0, 266, 293, 294, 0,
	0, 130, 154, 150, 219, 198, 124, 165, 254, 173,
	180, 229, 297, 209, 236, 134, 282, 253, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 118, 177, 296, 227, 153, 284, 0, 146, 0,
	0, 0, 0, 0, 0, 111, 112, 119, 127, 135,
	145, 149, 152, 157, 161, 164, 166, 167, 168, 171,
	182, 185, 186, 187, 188, 200, 201, 203, 204, 207,
	208, 211, 212, 213, 214, 216, 217, 218, 222, 224,
	226, 228, 232, 237, 238, 239, 240, 242, 243, 244,
	247, 248, 249, 250, 258, 262, 270, 271, 281, 288,
	292, 459, 0, 0, 0, 0, 0, 0, 206, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 148, 0,
	0, 0, 0, 175, 0, 0, 0, 0, 0, 178,
	0, 0, 255, 193, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 107, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 156, 0, 0, 0,
	0, 0, 0, 289, 0, 0, 0, 223, 0, 260,
	159, 176, 125, 110, 120, 0, 158, 202, 233, 241,
	0, 0, 0, 0, 0, 142, 0, 235, 210, 280,
	0, 0, 215, 234, 179, 269, 225, 278, 279, 160,
	290, 291, 264, 287, 295, 128, 252, 0, 0, 0,
	0, 0, 0, 172, 0, 0, 0, 139, 230, 0,
	0, 141, 251, 126, 265, 192, 197, 136, 138, 137,
	121, 246, 267, 131, 140, 256, 261, 113, 263, 277,
	133, 245, 115, 275, 259, 190, 169, 170, 114, 0,
	231, 147, 155, 144, 205, 0, 0, 0, 272, 273,
	143, 298, 122, 286, 117, 123, 285, 199, 0, 0,
	0, 268, 276, 191, 184, 0, 116, 274, 189, 183,
	174, 151, 162, 220, 181, 221, 163, 195, 194, 196,
	0, 0, 0, 257, 283, 299, 129, 0, 0, 266,
	293, 294, 0, 0, 130, 154, 150, 219, 198, 124,
	165, 254, 173, 180, 229, 297, 209, 236, 134, 282,
	253, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 118, 177, 296, 227, 153, 284,
	0, 146, 0, 0, 0, 0, 0, 0, 111, 112,
	119, 127, 135, 145, 149, 152, 157, 161, 164, 166,
	167, 168, 171, 182, 185, 186, 187, 188, 200, 201,
	203, 204, 207, 208, 211, 212, 213, 214, 216, 217,
	218, 222, 224, 226, 228, 232, 237, 238, 239, 240,
	242, 243, 244, 247, 248, 249, 250, 258, 262, 270,
	271, 281, 288, 292, 206, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 148, 0, 0, 0, 0, 175,
	0, 0, 0, 0, 0, 178, 0, 0, 255, 193,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 107, 0, 0,
	0, 0, 0, 0, 0, 0, 132, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 156, 0, 0, 0, 104, 0, 0, 289,
	0, 0, 0, 223, 0, 260, 159, 176, 125, 110,
	120, 0, 158, 202, 233, 241, 0, 0, 0, 0,
	0, 142, 0, 235, 210, 280, 0, 0, 215, 234,
	179, 269, 225, 278, 279, 160, 290, 291, 264, 287,
	295, 128, 252, 0, 0, 0, 0, 0, 0, 172,
	0, 0, 0, 139, 230, 0, 0, 141, 251, 126,
	265, 192, 197, 136, 138, 137, 121, 246, 267, 131,
	140, 256, 261, 113, 263, 277, 133, 245, 115, 275,
	259, 190, 169, 170, 114, 0, 231, 147, 155, 144,
	205, 0, 0, 0, 272, 273, 143, 298, 122, 286,
	117, 123, 285, 199, 0, 0, 0, 268, 276, 191,
	184, 0, 116, 274, 189, 183, 174, 151, 162, 220,
	181, 221, 163, 195, 194, 196, 0, 0, 0, 257,
	283, 299, 129, 0, 0, 266, 293, 294, 0, 0,
	130, 154, 150, 219, 198, 124, 165, 254, 173, 180,
	229, 297, 209, 236, 134, 282, 253, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	118, 177, 296, 227, 153, 284, 0, 146, 0, 0,
	0, 0, 0, 0, 111, 112, 119, 127, 135, 145,
	149, 152, 157, 161, 164, 166, 167, 168, 171, 182,
	185, 186, 187, 188, 200, 201, 203, 204, 207, 208,
	211, 212, 213, 214, 216, 217, 218, 222, 224, 226,
	228, 232, 237, 238, 239, 240, 242, 243, 244, 247,
	248, 249, 250, 258, 262, 270, 271, 281, 288, 292,
	206, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	148, 0, 0, 0, 0, 175, 0, 0, 0, 0,
	0, 178, 0, 0, 255, 193, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 498, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 156, 0,
	0, 0, 0, 0, 0, 289, 0, 0, 0, 223,
	0, 260, 159, 176, 125, 110, 120, 0, 158, 202,
	233, 241, 0, 0, 0, 0, 0, 142, 0, 235,
	210, 280, 0, 0, 215, 234, 179, 269, 225, 278,
	279, 160, 290, 291, 264, 287, 295, 128, 252, 0,
	0, 0, 0, 0, 0, 172, 0, 0, 0, 139,
	230, 0, 0, 141, 251, 126, 265, 192, 197, 136,
	138, 137, 121, 246, 267, 131, 140, 256, 261, 113,
	263, 277, 133, 245, 115, 275, 259, 190, 169, 170,
	114, 0, 231, 147, 155, 144, 205, 0, 0, 0,
	272, 273, 143, 298, 122, 286, 117, 123, 285, 199,
	0, 0, 0, 268, 276, 191, 184, 0, 116, 274,
	189, 183, 174, 151, 162, 220, 181, 221, 163, 195,
	194, 196, 0, 0, 0, 257, 283, 299, 129, 0,
	0, 266, 293, 294, 0, 0, 130, 154, 150, 219,
	198, 124, 165, 254, 173, 180, 229, 297, 209, 236,
	134, 282, 253, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 118, 177, 296, 227,
	153, 284, 0, 146, 0, 0, 0, 0, 0, 0,
	111, 112, 119, 127, 135, 145, 149, 152, 157, 161,
	164, 166, 167, 168, 171, 182, 185, 186, 187, 188,
	200, 201, 203, 204, 207, 208, 211, 212, 213, 214,
	216, 217, 218, 222, 224, 226, 228, 232, 237, 238,
	239, 240, 242, 243, 244, 247, 248, 249, 250, 258,
	262, 270, 271, 281, 288, 292, 206, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 148, 0, 0, 0,
	0, 175, 0, 0, 0, 0, 0, 178, 0, 0,
	255, 193, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 107,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 156, 0, 0, 0, 0, 0,
	0, 289, 0, 0, 0, 223, 0, 260, 159, 176,
	125, 110, 120, 0, 158, 202, 233, 241, 0, 0,
	0, 0, 0, 142, 0, 235, 210, 280, 0, 0,
	215, 234, 179, 269, 225, 278, 279, 160, 290, 291,
	264, 287, 295, 128, 252, 0, 0, 0, 0, 0,
	0, 172, 0, 0, 0, 139, 230, 0, 0, 141,
	251, 126, 265, 192, 197, 136, 138, 137, 121, 246,
	267, 131, 140, 256, 261, 113, 263, 277, 133, 245,
	115, 275, 259, 190, 169, 170, 114, 0, 231, 147,
	155, 144, 205, 0, 0, 0, 272, 273, 143, 298,
	122, 286, 117, 123, 285, 199, 0, 0, 0, 268,
	276, 191, 184, 0, 116, 274, 189, 183, 174, 151,
	162, 220, 181, 221, 163, 195, 194, 196, 0, 0,
	0, 257, 283, 299, 129, 0, 0, 266, 293, 294,
	0, 0, 130, 154, 150, 219, 198, 124, 165, 254,
	173, 180, 229, 297, 209, 236, 134, 282, 253, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 118, 177, 296, 227, 153, 284, 0, 146,
	0, 0, 0, 0, 0, 0, 111, 112, 119, 127,
	135, 145, 149, 152, 157, 161, 164, 166, 167, 168,
	171, 182, 185, 186, 187, 188, 200, 201, 203, 204,
	207, 208, 211, 212, 213, 214, 216, 217, 218, 222,
	224, 226, 228, 232, 237, 238, 239, 240, 242, 243,
	244, 247, 248, 249, 250, 258, 262, 270, 271, 281,
	288, 292, 206, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 148, 0, 0, 0, 0, 175, 0, 0,
	0, 0, 0, 178, 0, 0, 255, 193, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 367, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	156, 0, 0, 0, 0, 0, 0, 289, 0, 0,
	0, 223, 0, 260, 159, 176, 125, 110, 120, 0,
	158, 202, 233, 241, 0, 0, 0, 0, 0, 142,
	0, 235, 210, 280, 0, 0, 215, 234, 179, 269,
	225, 278, 279, 160, 290, 291, 264, 287, 295, 128,
	252, 0, 0, 0, 0, 0, 0, 172, 0, 0,
	0, 139, 230, 0, 0, 141, 251, 126, 265, 192,
	197, 136, 138, 137, 121, 246, 267, 131, 140, 256,
	261, 113, 263, 277, 133, 245, 115, 275, 259, 190,
	169, 170, 114, 0, 231, 147, 155, 144, 205, 0,
	0, 0, 272, 273, 143, 298, 122, 286, 117, 476,
	285, 199, 0, 0, 0, 268, 276, 191, 184, 0,
	116, 274, 189, 183, 174, 151, 162, 220, 181, 221,
	163, 195, 194, 196, 0, 0, 0, 257, 283, 299,
	129, 0, 0, 266, 293, 294, 0, 0, 130, 154,
	150, 219, 477, 475, 165, 254, 173, 180, 229, 297,
	209, 236, 134, 282, 253, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 118, 177,
	296, 227, 153, 284, 0, 146, 0, 0, 0, 0,
	0, 0, 111, 112, 119, 127, 135, 145, 149, 152,
	157, 161, 164, 166, 167, 168, 171, 182, 185, 186,
	187, 188, 200, 201, 203, 204, 207, 208, 211, 212,
	213, 214, 216, 217, 218, 222, 224, 226, 228, 232,
	237, 238, 239, 240, 242, 243, 244, 247, 248, 249,
	250, 258, 262, 270, 271, 281, 288, 292, 206, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 148, 0,
	0, 0, 0, 175, 0, 0, 0, 0, 0, 178,
	0, 0, 255, 193, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 367, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 156, 0, 0, 0,
	0, 0, 0, 289, 0, 0, 0, 223, 0, 260,
	159, 176, 125, 110, 120, 0, 158, 202, 233, 241,
	0, 0, 0, 0, 0, 142, 0, 235, 210, 280,
	0, 0, 215, 234, 179, 269, 225, 278, 279, 160,
	290, 291, 264, 287, 295, 128, 252, 0, 0, 0,
	0, 0, 0, 172, 0, 0, 0, 139, 230, 0,
	0, 141, 251, 126, 265, 192, 197, 136, 138, 137,
	121, 246, 267, 131, 140, 256, 261, 113, 263, 277,
	133, 245, 115, 275, 259, 190, 169, 170, 114, 0,
	231, 147, 155, 144, 205, 0, 0, 0, 272, 273,
	143, 298, 122, 286, 117, 123, 285, 199, 0, 0,
	0, 268, 276, 191, 184, 0, 116, 274, 189, 183,
	174, 151, 162, 220, 181, 221, 163, 195, 194, 196,
	0, 0, 0, 257, 283, 299, 129, 0, 0, 266,
	293, 294, 0, 0, 130, 154, 150, 219, 198, 124,
	165, 254, 173, 180, 229, 297, 209, 236, 134, 282,
	253, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 118, 177, 296, 227, 153, 284,
	0, 146, 0, 0, 0, 0, 0, 0, 111, 112,
	119, 127, 135, 145, 149, 152, 157, 161, 164, 166,
	167, 168, 171, 182, 185, 186, 187, 188, 200, 201,
	203, 204, 207, 208, 211, 212, 213, 214, 216, 217,
	218, 222, 224, 226, 228, 232, 237, 238, 239, 240,
	242, 243, 244, 247, 248, 249, 250, 258, 262, 270,
	271, 281, 288, 292, 206, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 148, 0, 0, 0, 0, 175,
	0, 0, 0, 0, 0, 178, 0, 0, 255, 193,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 367, 0, 0,
	0, 0, 0, 0, 0, 0, 132, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 156, 0, 0, 0, 0, 0, 0, 289,
	0, 0, 0, 223, 0, 260, 159, 176, 125, 110,
	120, 0, 158, 202, 233, 241, 0, 0, 0, 0,
	0, 142, 0, 235, 210, 280, 0, 0, 215, 234,
	179, 269, 225, 278, 279, 160, 290, 291, 264, 287,
	295, 128, 252, 0, 0, 0, 0, 0, 0, 172,
	0, 0, 0, 139, 230, 0, 0, 141, 251, 126,
	265, 192, 197, 136, 138, 137, 121, 246, 267, 131,
	140, 256, 261, 113, 263, 920, 133, 245, 115, 275,
	259, 190, 169, 170, 114, 0, 231, 147, 155, 144,
	205, 0, 0, 0, 272, 273, 143, 298, 122, 286,
	117, 476, 285, 199, 0, 0, 0, 268, 276, 191,
	184, 0, 116, 274, 189, 183, 174, 151, 162, 220,
	181, 221, 163, 195, 194, 196, 0, 0, 0, 257,
	283, 299, 129, 0, 0, 266, 293, 294, 0, 0,
	130, 154, 150, 219, 477, 475, 165, 254, 173, 180,
	229, 297, 209, 236, 134, 282, 253, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	118, 177, 296, 227, 153, 284, 0, 146, 0, 0,
	0, 0, 0, 0, 111, 112, 119, 127, 135, 145,
	149, 152, 157, 161, 164, 166, 167, 168, 171, 182,
	185, 186, 187, 188, 200, 201, 203, 204, 207, 208,
	211, 212, 213, 214, 216, 217, 218, 222, 224, 226,
	228, 232, 237, 238, 239, 240, 242, 243, 244, 247,
	248, 249, 250, 258, 262, 270, 271, 281, 288, 292,
	206, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	148, 0, 0, 0, 0, 175, 0, 0, 0, 0,
	0, 178, 0, 0, 255, 193, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 367, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 156, 0,
	0, 0, 0, 0, 0, 289, 0, 0, 0, 223,
	0, 260, 159, 176, 125, 110, 120, 0, 158, 202,
	233, 241, 0, 0, 0, 0, 0, 142, 0, 235,
	210, 280, 0, 0, 215, 234, 179, 269, 225, 278,
	279, 160, 290, 291, 264, 287, 295, 128, 252, 0,
	0, 0, 0, 0, 0, 172, 0, 0, 0, 139,
	230, 0, 0, 141, 251, 126, 265, 192, 197, 136,
	138, 137, 121, 246, 267, 131, 140, 256, 261, 113,
	263, 467, 133, 245, 115, 275, 259, 190, 169, 170,
	114, 0, 231, 147, 155, 144, 205, 0, 0, 0,
	272, 273, 143, 298, 122, 286, 117, 476, 285, 199,
	0, 0, 0, 268, 276, 191, 184, 0, 116, 274,
	189, 183, 174, 151, 162, 220, 181, 221, 163, 195,
	194, 196, 0, 0, 0, 257, 283, 299, 129, 0,
	0, 266, 293, 294, 0, 0, 130, 154, 150, 219,
	477, 475, 470, 469, 173, 180, 229, 297, 209, 236,
	134, 282, 253, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 118, 177, 296, 227,
	153, 284, 0, 146, 0, 0, 0, 0, 0, 0,
	111, 112, 119, 127, 135, 145, 149, 152, 157, 161,
	164, 166, 167, 168, 171, 182, 185, 186, 187, 188,
	200, 201, 203, 204, 207, 208, 211, 212, 213, 214,
	216, 217, 218, 222, 224, 226, 228, 232, 237, 238,
	239, 240, 242, 243, 244, 247, 248, 249, 250, 258,
	262, 270, 271, 281, 288, 292,
}
var yyPact = [...]int{

	2655, -1000, -294, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1377, 1425, -1000, -1000,
	-1000, -1000, -1000, -1000, 717, 197, -1000, -1000, -1000, 355,
	90, 18876, 352, 527, 19668, -1000, -1000, -1000, -1000, 191,
	19668, -1000, -1000, -71, -95, -1000, 36, 1026, 1114, -1000,
	-1000, 102, 29, -1000, -1000, -1000, -1000, -1000, -1000, 1359,
	1375, 1147, 1366, 1246, -1000, 9329, 200, 200, 18480, 21252,
	-1000, -1000, 513, 19668, 340, 19668, -149, 225, 225, 131,
	225, -1000, 555, -1000, -1000, -1000, 19668, 226, 19272, 226,
	226, 226, 226, 226, 19668, -1000, 431, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	19668, 1016, 1331, 5680, 98, 5680, 5680, -1000, 600, -1000,
	113, 109, 119, 5680, 3, 607, 106, 18, -1000, 5680,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 160, 1114, 552,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1328, 806, 1165,
	830, 351, 19668, 434, -1000, -1000, 1322, 11321, 11717, 1377,
	-1000, 1114, -1000, -1000, -1000, 1342, -1000, -1000, 642, 1395,
	-1000, 14093, 406, -1000, 11321, 2979, 1117, -1000, -1000, 1117,
	-1000, -1000, 395, -1000, -1000, 12905, 12905, 12905, 12905, 12905,
	12905, 12905, 12905, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1117,
	-1000, 10529, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117,
	1117, 1117, 11321, 1117, 1117, 1117, 1117, 1117, 1117, 1117,
	1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117,
	1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117,
	1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117,
	1117, 1117, 1117, 1117, 1117, 1117, 1117, 18077, 17285, 19668,
	1079, 1078, -1000, -1000, 403, 860, 20856, -75, -1000, -1000,
	-1000, 551, 16889, -1000, 402, -1000, 1320, -1000, 1025, 19668,
	-1000, 3693, -1000, 19272, 1357, 233, 1015, 620, 1012, 1011,
	1010, 19668, 1009, 1115, 251, 19668, 1348, 1182, -1000, -1000,
	19668, 1006, 998, 995, 993, -1000, 8140, -1000, 5680, 5680,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 225, 225, 5680,
	5680, 5680, 19668, 19668, 19668, -1000, -1000, 19668, -1000, -1000,
	5680, 605, 5680, 605, 5680, 5680, -1000, 1394, 559, 559,
	-1000, -1000, -1000, -1000, 11321, -1000, 12905, 482, -1000, 1181,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 992, -1000, -1000,
	145, -1000, 807, -1000, 10925, -1000, -1000, 19668, 5680, 125,
	164, 141, 19668, -1000, 1420, 468, 755, 401, 1109, -1000,
	618, 1343, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117,
	1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117,
	1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117,
	1359, 830, 1246, 801, 1196, -1000, -1000, -1000, 19668, -1000,
	11321, 11321, 778, -1000, 15281, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 6910, 477, 12905,
	804, 538, 12905, 12905, 12905, 12905, 12905, 12905, 12905, 12905,
	12905, 12905, 12905, 12905, 12905, 12905, 12905, 824, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 991, -1000, 1114, 911,
	911, 451, 451, 451, 451, 451, 451, 451, 15677, 1353,
	830, 973, 591, 10529, 9329, 9329, 830, 11321, 11321, 10121,
	9725, 9329, 9329, 1353, 564, 591, 20460, -1000, -1000, 12509,
	-1000, -1000, -1000, -1000, -1000, 830, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 19272, 19272, 9329, 9329, 9329, 9329,
	830, 830, 9329, 9329, 9329, 9329, 9329, 830, 830, 830,
	830, 1353, 1353, 9329, 9329, 9329, 1353, 9329, 9329, 1353,
	9329, 9329, 9329, 9329, 1353, 9329, 9329, 9329, 143, 19668,
	-1000, 1069, 1299, -1000, -1000, -1000, 1355, 16493, 13697, 143,
	1057, 17285, 19668, -1000, -1000, 17285, 19668, 6500, 20064, 860,
	-75, 1099, -1000, -123, -121, 8537, 450, -1000, -1000, -1000,
	7730, -1000, 4860, 6090, 1046, -1000, -70, -1000, -1000, -1000,
	1141, -1000, 1141, 158, 1, 1141, 1141, 1141, 1141, 1141,
	-13, -13, -13, -13, 6, -1000, -1000, -1000, -1000, -1000,
	1164, 1163, -1000, 1141, 1141, 1141, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1152, 172, 1152, 1150, 1150, 1150,
	1150, 1167, -1000, 19668, 5680, 1347, 5680, 111, 1160, -1000,
	-1000, 19668, 19668, 1107, -1000, 19668, 1106, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 970, 960, -1000,
	-1000, -1000, -1000, -1000, -1000, 594, -1000, -1000, 803, 11321,
	-1000, -1000, -1000, -1000, 19668, 1354, 19668, 19668, 605, 591,
	829, -1000, 800, 19668, -1000, 1105, -1000, 509, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 969, 232, -1000, 19668, 19668, 19668, 19668, 19668,
	379, -1000, 1218, 11321, 11321, 7730, 11717, -1000, -1000, -1000,
	-1000, 1322, -1000, 1353, 1370, -1000, 1264, 1262, 9329, -1000,
	-1000, 477, 568, -1000, -1000, 781, -1000, -1000, -1000, -1000,
	400, 1117, -1000, 3101, -1000, -1000, -1000, -1000, 804, 12905,
	12905, 12905, 829, 3101, 2643, 843, 645, 451, 435, 435,
	446, 446, 446, 446, 446, 571, 571, -1000, -1000, -1000,
	830, -1000, -1000, -1000, 9329, -1000, 11321, -1000, 830, 951,
	-1000, 951, -1000, 613, 749, 510, 1388, 951, 480, 1386,
	951, 951, 951, 9329, 624, -1000, 11321, 830, -1000, 1338,
	1104, 1102, 951, 830, 1101, 951, 951, -160, -160, 830,
	951, 830, 951, 951, -160, -160, -160, -160, 9329, 9329,
	951, 951, 951, 9329, 951, 951, 9329, 951, 951, 951,
	951, 9329, 951, 951, 951, 1030, 1117, -1000, 20064, 17285,
	17285, 17285, 17285, 17285, -1000, 1211, 1210, -1000, 1220, 1217,
	1311, 14885, -1000, 958, 16493, -1000, 1117, -1000, 14489, 278,
	338, 334, 257, -1000, -1000, -1000, 1383, 17285, 1097, -1000,
	1097, -1000, 399, -1000, -1000, 1099, -75, -76, -1000, -1000,
	-1000, -1000, 591, -1000, 825, -1000, 391, 1068, 4450, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 3693, 1158, 955, -1000,
	1296, 426, 476, 861, 1278, -1000, -1000, -1000, 517, -72,
	-1000, -1000, 732, -13, -13, 1141, 1141, 157, 1141, -1000,
	-13, -1000, -1000, -1000, 450, 1307, 450, 450, 450, 450,
	-13, 773, 773, -1000, -1000, -1000, -1000, 728, -1000, 1152,
	-1000, -1000, 724, -1000, -1000, -1000, 1180, 19272, 1114, 1350,
	-1000, -1000, -1000, 1402, -1000, -1000, 199, 247, -1000, 5680,
	19668, 5680, 5680, 1383, 954, 938, -1000, 591, 559, 605,
	1301, -1000, -1000, -1000, -1000, 12905, -1000, -1000, 145, 911,
	-1000, -1000, 448, 430, 475, 178, 178, -1000, 491, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 137, 1157,
	-1000, -1000, -1000, -1000, 40, 116, 1234, 591, 591, -1000,
	-1000, 19668, -1000, -1000, -1000, -1000, 1096, -1000, -1000, -1000,
	5270, 9329, -1000, 829, 3101, 2590, -1000, 12905, -1000, 830,
	591, -1000, 9329, -1000, -1000, 661, 824, 661, 12905, 12905,
	-1000, 12905, 12905, -1000, -194, -1000, 1098, 511, -1000, 11321,
	763, -1000, -1000, 12905, 12905, -1000, -1000, -1000, -1000, -1000,
	17681, -1000, -160, -160, -160, -160, -160, -1000, -1000, -1000,
	-1000, 951, 951, -160, -160, -160, 951, -160, -160, 951,
	-160, -160, -160, -160, 951, -160, -160, -160, 1179, 20064,
	1117, -1000, 16085, 19272, 1100, 1299, 1156, 1178, 1202, -1000,
	-1000, -1000, -1000, 1199, -1000, 1198, -1000, -1000, -1000, -1000,
	19272, 12905, 278, -1000, 1117, 1117, 1117, 1377, 11321, 1097,
	-1000, -1000, 460, -1000, -1000, -131, -126, -1000, -1000, -1000,
	7320, 4860, -1000, 4860, -1000, 19272, 162, -1000, 861, -1000,
	-1000, 861, -1000, -1000, -1000, 1151, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 577, 12905, 1419, -1000, 1293, -1000, 1291,
	766, -1000, -1000, 1044, 450, 450, -13, -1000, -1000, 1141,
	-1000, 450, -1000, 490, -1000, -1000, -1000, -1000, 450, 949,
	-1000, 947, 1067, -1000, 945, 19668, -1000, -1000, -1000, 1175,
	-1000, -1000, -1000, 1041, 1066, -1000, 3693, 937, 935, 931,
	19668, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 605, -1000,
	12905, 3101, -1000, -1000, -1000, 834, -1000, 861, 357, -1000,
	-1000, -1000, 930, 1278, -1000, -1000, 929, -1000, 928, 19272,
	1288, 910, 19668, 19272, -1000, -1000, 865, 908, 11321, -1000,
	19272, -201, 881, 19272, 19272, 19272, -1000, -1000, 1383, 17285,
	-1000, -1000, 830, -1000, 12905, 3101, -1000, -1000, 830, 1141,
	1141, -1000, 1141, 1150, -1000, 1141, 12, 1141, 9, 830,
	830, 2769, 2503, 2443, 1086, 1117, -156, -1000, 591, 11321,
	2268, 2217, -1000, 298, -1000, -1000, -1000, -1000, -1000, -160,
	-160, -1000, -1000, -1000, -1000, -160, -1000, -1000, -160, -1000,
	-1000, -1000, -1000, -160, -1000, -1000, -1000, -1000, 1337, 1039,
	1058, -1000, -1000, 8933, 830, 927, 389, 920, -1000, 1377,
	-1000, -1000, 11321, 1149, -1000, 11321, -1000, -1000, -1000, 920,
	1042, -1000, 19272, 19272, 19272, 1359, 591, -1000, -1000, -1000,
	-1000, 4450, -1000, 517, 904, -1000, 1141, -1000, 1278, -1000,
	-1000, 19272, -1000, 3101, -113, -1000, -1000, -1000, -1000, -1000,
	-1000, 450, -1000, -1000, -1000, -1000, -1000, -13, 765, -13,
	716, -1000, 699, 1125, -1000, 1114, 19668, 135, 199, -1000,
	3693, 3693, 3693, -1000, -1000, 3101, 865, 159, -1000, 1167,
	426, 162, -1000, -1000, -1000, -1000, 879, 373, -1000, 235,
	159, 865, 591, 1339, -1000, 7320, -1000, -1000, 1124, 1168,
	-1000, 1381, 1065, -1000, 3101, -1000, -1000, 156, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 12905, 12905, 12905, 12905,
	12905, 830, 754, 591, 12905, 12905, 830, 1374, -1000, -1000,
	-1000, -1000, -1000, 1270, -1000, 1117, -1000, -1000, 1094, 19272,
	19272, -1000, 19272, 1359, 591, 19272, 591, 13301, -1000, 14885,
	902, -1000, 902, 902, -1000, 323, 19272, 1343, 897, -1000,
	-1000, 450, -1000, 450, 1032, 1031, 19272, -1000, 1364, -1000,
	135, -1000, 742, 68, 73, -1000, 65, 64, 60, 59,
	51, -1000, -1000, -1000, -1000, 855, -1000, -1000, 862, 1122,
	861, -1000, -1000, 859, -1000, -1000, 19272, -1000, 159, 1117,
	1060, -1000, 504, 19272, 19668, 1379, 1369, -1000, -1000, 1338,
	1338, 1338, 1338, 30, -1000, -1000, 1338, 1338, -1000, 11321,
	1418, -1000, 1117, -1000, 1114, 385, -1000, -1000, -1000, 858,
	-1000, 278, 19272, -1000, -1000, -1000, 323, -1000, 836, 491,
	738, -1000, -1000, 163, -1000, -1000, -1000, -1000, 854, -1000,
	103, 2895, -1000, -1000, -1000, -1000, -1000, -1000, 55, 54,
	87, -1000, -1000, -1000, 19272, 1167, -1000, -1000, -1000, -1000,
	127, 7320, 4860, 850, -1000, -1000, 11717, 11717, -1000, -1000,
	-1000, -1000, 830, 114, -204, -1000, -1000, 1071, 20064, 1058,
	830, 19272, -1000, -1000, -1000, -1000, -1000, 697, -1000, 19668,
	323, 88, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 11321, 11321, 2895, -1000, -1000,
	-1000, -1000, -1000, 846, 1121, -1000, 842, -1000, 19272, -1000,
	-1000, 1157, -1000, 591, -1000, 1056, -1000, 591, -1000, -1000,
	1226, -199, -223, 830, 860, -1000, -1000, -1000, 1120, -1000,
	323, 94, -1000, 733, 708, -295, -1000, 323, 19272, -1000,
	127, 1243, -201, 11717, -1000, 1224, -1000, -1000, 19272, -1000,
	833, 820, 602, -1000, 11321, 760, 2277, -1000, 840, -1000,
	136, -1000, -1000, -202, 814, 194, -1000, -1000, 572, 760,
	-1000, 706, -296, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 760, -1000, -1000, 323, 118, -206, 1174,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -297, 760, 167,
	-300, -1000, 1117, -225, 1171, 1170, 1393, -1000, 606, -301,
	222, 760, 619, -1000, -1000, 11321, 574, 12113, -1000, -1000,
	1404, -1000, 1398, 356, 356, 560, 760, -1000, -302, 220,
	760, -1000, 554, -1000, 1338, 830, -1000, -1000, -1000, 169,
	748, -1000, -1000, 464, -1000, -303, 760, -1000, -1000, -1000,
	-1000, -1000, 195, 182, -306, -1000, 183, 760, -1000,
}
var yyPgo = [...]int{

	0, 1709, 147, 786, 1708, 1706, 1703, 47, 40, 22,
	69, 1702, 1528, 1526, 1517, 1513, 1701, 1509, 6, 5,
	66, 25, 17, 14, 1700, 3, 1699, 1698, 12, 1696,
	7, 87, 1695, 1693, 1688, 1686, 1684, 1506, 1683, 1681,
	1680, 1673, 1672, 1502, 1500, 1670, 1669, 1485, 1473, 1668,
	1667, 1462, 1454, 1431, 124, 1665, 1664, 1663, 140, 1662,
	105, 1661, 1660, 1657, 68, 2275, 76, 85, 709, 1656,
	11, 1655, 56, 98, 117, 1654, 63, 1652, 1650, 106,
	1649, 1645, 1642, 88, 1641, 1640, 2540, 1638, 102, 1637,
	43, 26, 111, 1634, 1633, 1629, 1628, 83, 244, 1627,
	1626, 1625, 51, 1624, 1623, 116, 1622, 1621, 1620, 97,
	60, 1619, 34, 30, 49, 1618, 371, 20, 1617, 92,
	1615, 1614, 1613, 1612, 1609, 27, 1608, 38, 1607, 99,
	64, 764, 4, 44, 46, 91, 1606, 31, 103, 65,
	58, 21, 93, 1604, 101, 89, 1603, 1602, 767, 1601,
	1598, 90, 1597, 1596, 79, 1595, 776, 110, 52, 1594,
	1593, 1592, 1590, 55, 78, 1589, 1588, 28, 172, 94,
	1024, 16, 1804, 200, 104, 1587, 37, 1585, 2483, 95,
	53, 75, 1584, 1583, 67, 82, 62, 1582, 1579, 1578,
	1577, 1576, 1570, 1229, 1569, 1568, 1565, 126, 179, 1564,
	1563, 96, 73, 1561, 1560, 1556, 86, 54, 1551, 1550,
	77, 71, 1546, 1545, 1544, 1542, 33, 39, 1541, 1540,
	1539, 1538, 57, 29, 1537, 42, 13, 19, 45, 9,
	61, 1530, 35, 1524, 32, 1521, 15, 1519, 24, 74,
	8, 10, 2, 1515, 1511, 1498, 1496, 50, 1493, 1479,
	36, 1459, 1457, 0, 122, 107, 1448, 1433, 108,
}
var yyR1 = [...]int{

	0, 251, 252, 252, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 6, 3, 4, 4, 5, 5, 7, 7, 57,
	57, 8, 9, 9, 9, 9, 255, 255, 81, 81,
	79, 79, 80, 80, 138, 138, 10, 10, 10, 10,
	142, 142, 145, 145, 145, 146, 146, 146, 146, 182,
	182, 132, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 245, 245, 246, 246, 247, 247, 247, 247, 248,
	248, 249, 249, 250, 250, 250, 250, 250, 250, 250,
	250, 250, 250, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 24, 26, 26, 166, 166,
	35, 35, 36, 36, 36, 128, 128, 128, 11, 11,
	11, 11, 11, 18, 20, 20, 27, 27, 28, 21,
	21, 21, 21, 29, 29, 30, 22, 22, 34, 34,
	32, 32, 31, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 17, 244, 244, 244, 25,
	25, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	238, 238, 237, 236, 236, 235, 235, 234, 41, 218,
	220, 220, 219, 219, 219, 219, 207, 208, 186, 186,
	186, 186, 186, 186, 186, 185, 185, 185, 185, 189,
	189, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	188, 188, 188, 188, 188, 188, 188, 188, 190, 190,
	190, 190, 190, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 192, 192,
	192, 192, 192, 192, 192, 192, 206, 206, 193, 193,
	201, 201, 202, 202, 202, 199, 199, 200, 200, 203,
	203, 195, 196, 204, 197, 197, 197, 198, 198, 198,
	205, 205, 205, 205, 194, 209, 209, 229, 229, 228,
	228, 227, 227, 227, 217, 217, 224, 224, 224, 224,
	224, 212, 212, 212, 211, 211, 213, 213, 216, 216,
	226, 226, 225, 210, 210, 230, 230, 230, 230, 230,
	214, 214, 215, 215, 215, 241, 242, 240, 240, 240,
	240, 240, 221, 221, 221, 222, 222, 222, 223, 223,
	223, 243, 243, 37, 37, 37, 38, 38, 38, 38,
	38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
	38, 38, 38, 38, 38, 127, 127, 127, 39, 40,
	40, 40, 40, 40, 40, 40, 40, 164, 164, 239,
	239, 239, 239, 239, 233, 231, 231, 232, 232, 13,
	42, 42, 14, 14, 14, 14, 14, 14, 14, 15,
	15, 43, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 69, 152, 152,
	150, 150, 153, 153, 151, 151, 151, 154, 154, 154,
	155, 155, 183, 183, 183, 45, 45, 50, 50, 53,
	51, 52, 165, 165, 48, 48, 49, 49, 49, 49,
	63, 63, 256, 256, 47, 47, 46, 46, 46, 46,
	16, 257, 54, 55, 55, 56, 56, 56, 60, 60,
	60, 58, 58, 58, 59, 59, 66, 66, 65, 65,
	67, 67, 67, 67, 130, 130, 130, 131, 131, 175,
	175, 175, 174, 174, 174, 174, 71, 71, 72, 72,
	73, 73, 74, 74, 74, 74, 89, 89, 90, 90,
	90, 90, 90, 100, 100, 137, 137, 139, 139, 75,
	75, 75, 75, 76, 76, 77, 77, 78, 78, 163,
	163, 180, 180, 180, 82, 82, 82, 84, 83, 83,
	83, 83, 85, 85, 87, 87, 86, 86, 88, 91,
	91, 91, 91, 92, 92, 68, 68, 68, 68, 68,
	68, 68, 149, 149, 94, 94, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 108, 108, 108, 108,
	108, 108, 95, 95, 95, 95, 95, 95, 95, 64,
	64, 109, 109, 109, 116, 110, 110, 98, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 103, 103, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 258, 258, 105, 104, 104, 104, 104,
	104, 104, 61, 61, 61, 61, 61, 181, 181, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
	184, 184, 120, 120, 62, 62, 118, 118, 119, 121,
	121, 117, 117, 117, 97, 97, 97, 97, 97, 97,
	97, 97, 99, 99, 99, 122, 122, 111, 111, 70,
	70, 123, 123, 124, 124, 125, 125, 126, 126, 129,
	129, 133, 133, 133, 134, 134, 134, 134, 135, 135,
	135, 96, 96, 96, 96, 96, 96, 136, 136, 136,
	136, 140, 140, 112, 112, 114, 114, 113, 115, 141,
	141, 144, 144, 144, 144, 143, 143, 143, 177, 177,
	177, 147, 147, 156, 156, 157, 157, 148, 148, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 162, 162,
	161, 161, 161, 158, 158, 158, 159, 159, 176, 176,
	172, 172, 173, 173, 178, 178, 179, 179, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 253,
	254, 167, 168, 168, 168,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 4, 6,
	7, 5, 10, 1, 3, 1, 3, 7, 8, 1,
	1, 9, 8, 7, 6, 6, 1, 1, 1, 3,
	1, 3, 1, 3, 0, 4, 3, 4, 5, 4,
	1, 3, 3, 2, 2, 2, 2, 2, 1, 1,
	1, 0, 2, 2, 11, 7, 9, 5, 5, 15,
	11, 0, 1, 1, 3, 2, 3, 3, 3, 0,
	1, 1, 2, 2, 2, 2, 1, 2, 2, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 1, 3, 0, 3,
	1, 1, 1, 1, 1, 0, 2, 2, 1, 1,
	1, 1, 1, 4, 5, 8, 1, 2, 5, 7,
	10, 8, 11, 1, 2, 5, 2, 4, 2, 3,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 2, 3, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 0, 2, 1, 3, 3, 4, 4,
	2, 4, 1, 3, 3, 3, 3, 3, 0, 2,
	2, 2, 2, 2, 2, 3, 1, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 3, 2, 2, 2, 2, 2, 1, 2,
	2, 2, 1, 4, 4, 3, 3, 2, 4, 5,
	2, 3, 4, 2, 2, 3, 3, 3, 3, 3,
	4, 1, 1, 1, 1, 1, 6, 6, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 3,
	0, 5, 0, 3, 5, 0, 1, 0, 1, 1,
	2, 2, 3, 1, 0, 3, 3, 0, 2, 2,
	2, 1, 2, 1, 2, 5, 4, 0, 1, 1,
	2, 2, 3, 2, 0, 1, 2, 3, 3, 2,
	2, 1, 1, 1, 1, 1, 0, 1, 0, 1,
	1, 3, 3, 3, 1, 10, 11, 11, 12, 12,
	1, 1, 0, 2, 2, 3, 3, 1, 1, 2,
	2, 2, 0, 1, 3, 1, 2, 3, 1, 1,
	1, 0, 2, 1, 1, 1, 6, 10, 9, 7,
	7, 7, 9, 7, 12, 14, 7, 7, 9, 9,
	10, 5, 6, 8, 7, 0, 1, 2, 4, 7,
	5, 5, 5, 12, 7, 5, 9, 0, 1, 1,
	1, 1, 1, 1, 7, 1, 3, 8, 8, 3,
	3, 5, 4, 6, 4, 4, 4, 4, 4, 3,
	2, 3, 4, 4, 3, 6, 6, 4, 4, 4,
	4, 4, 4, 3, 3, 2, 6, 2, 4, 4,
	4, 4, 4, 3, 7, 6, 5, 4, 2, 4,
	3, 4, 3, 3, 5, 2, 3, 3, 1, 1,
	0, 1, 1, 1, 0, 2, 2, 0, 2, 2,
	0, 2, 0, 1, 1, 2, 1, 1, 1, 2,
	1, 1, 1, 1, 3, 3, 1, 1, 1, 1,
	0, 3, 1, 1, 2, 2, 2, 2, 3, 3,
	2, 0, 2, 0, 2, 1, 2, 2, 0, 1,
	1, 0, 1, 1, 0, 1, 0, 1, 1, 3,
	1, 2, 3, 5, 2, 4, 7, 0, 1, 0,
	1, 2, 1, 1, 1, 1, 0, 2, 1, 3,
	1, 1, 1, 3, 1, 3, 2, 6, 1, 4,
	6, 3, 2, 0, 3, 1, 3, 1, 3, 4,
	4, 4, 3, 2, 4, 0, 1, 0, 2, 0,
	1, 1, 1, 1, 1, 2, 2, 1, 2, 3,
	2, 3, 2, 2, 2, 1, 1, 3, 3, 0,
	5, 5, 5, 0, 2, 1, 3, 3, 2, 3,
	1, 2, 0, 3, 1, 1, 3, 3, 4, 4,
	5, 3, 4, 5, 6, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 0,
	2, 1, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 2,
	2, 2, 2, 2, 3, 1, 1, 1, 1, 1,
	1, 5, 6, 6, 6, 5, 5, 5, 6, 5,
	5, 6, 5, 5, 5, 5, 6, 5, 5, 5,
	4, 4, 5, 5, 5, 5, 5, 4, 4, 4,
	4, 4, 4, 3, 6, 6, 6, 8, 8, 8,
	8, 9, 4, 7, 5, 4, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 8, 8, 0, 2, 3, 4, 4, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 2, 1, 2, 2,
	1, 2, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 0, 3, 1, 3, 1,
	1, 0, 2, 1, 1, 0, 3, 1, 3, 2,
	2, 0, 1, 1, 0, 2, 4, 4, 0, 2,
	4, 2, 1, 3, 5, 4, 6, 1, 3, 3,
	5, 0, 5, 1, 3, 1, 2, 3, 1, 1,
	3, 3, 3, 3, 3, 1, 2, 1, 1, 1,
	1, 1, 1, 0, 2, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 1, 0, 1, 0, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -251, -1, -2, -6, -7, -8, -9, -10, -12,
	-37, -13, -14, -15, -43, -44, -45, -50, -51, -52,
	-48, -47, -46, -16, -22, -17, -3, -4, 6, 7,
	-57, 9, 10, 30, -41, 120, -38, -39, -40, 123,
	122, 159, 124, 152, 54, 207, -53, 210, 211, -256,
	-165, 157, 158, 31, 32, 126, 205, 20, -253, 8,
	301, 121, 208, 154, 153, 26, 58, -252, 415, -125,
	15, -56, 5, -54, -257, -54, -54, -54, -54, -54,
	-218, -220, 58, 95, -159, 133, 76, 292, 129, -166,
	130, -158, 182, 35, 140, 139, 130, 130, 131, 133,
	292, 129, 167, 166, 130, -86, -178, 61, -170, 343,
	143, 358, 359, 207, 218, 212, 246, 234, 344, 360,
	144, 200, 232, 235, 279, 142, 193, 361, 175, 266,
	274, 203, 70, 210, 288, 362, 197, 199, 198, 187,
	204, 191, 155, 230, 223, 363, 351, 221, 28, 364,
	276, 251, 365, 348, 275, 222, 126, 366, 146, 140,
	169, 367, 252, 256, 368, 280, 369, 370, 371, 216,
	217, 372, 183, 282, 250, 33, 141, 345, 39, 164,
	283, 254, 373, 249, 244, 374, 375, 376, 377, 248,
	215, 243, 195, 43, 258, 257, 259, 196, 278, 237,
	378, 379, 147, 380, 381, 224, 18, 382, 383, 286,
	158, 384, 385, 386, 387, 162, 388, 389, 390, 277,
	253, 255, 391, 137, 392, 166, 393, 347, 394, 284,
	188, 220, 395, 148, 163, 157, 287, 396, 397, 398,
	399, 149, 400, 401, 402, 211, 201, 403, 404, 405,
	406, 192, 176, 290, 281, 42, 205, 263, 407, 214,
	139, 206, 408, 208, 172, 194, 269, 202, 241, 165,
	409, 410, 228, 229, 247, 213, 242, 209, 167, 168,
	159, 411, 289, 264, 349, 236, 233, 173, 412, 133,
	170, 171, 413, 270, 271, 174, 346, 285, 231, 265,
	130, 113, 235, 279, 120, 267, 268, 276, -212, 277,
	166, 169, -183, 130, -150, 266, 270, 271, 174, 61,
	131, 132, 33, 281, 280, 272, -178, -63, 124, 160,
	-86, -167, -167, -167, 269, 269, -167, -34, 206, 61,
	-2, -148, 133, 271, 135, 209, -134, 17, 16, -5,
	-3, -253, 6, 21, 22, -60, 44, 45, -55, -67,
	104, -68, -178, -93, 78, -98, 29, 61, -170, 24,
	-97, -94, -117, -115, -116, 113, 114, 115, 102, 103,
	110, 79, 116, -103, -101, -102, -104, -106, -107, 63,
	62, 71, 64, 65, 66, 67, 72, 73, 74, -172,
	-113, -253, 48, 49, 129, 302, 303, 304, 305, 342,
	150, 306, 81, 38, 291, 300, 299, 298, 296, 297,
	293, 295, 294, 308, 309, 136, 292, 108, 301, 331,
	332, 333, 334, 335, 336, 337, 338, 340, 341, 339,
	321, 314, 315, 316, 317, 318, 319, 320, 322, 323,
	324, 325, 326, 327, 328, 329, 330, -148, -148, 11,
	-79, -80, -86, -88, -178, -141, -182, 209, -144, 281,
	280, -117, -143, -172, -178, 279, 235, 278, -219, 95,
	-207, 61, -86, 131, -86, 301, -157, 136, -157, 167,
	166, -157, 87, -42, -86, -156, 136, -172, 61, -170,
	-156, -156, -156, -156, -156, -86, 117, -86, 61, 30,
	-168, -253, -173, -172, -169, 125, 151, 77, 350, 23,
	25, 261, 314, 80, 113, 315, 316, 317, 16, 20,
	81, 112, 302, 318, 120, 52, 293, 295, 291, 292,
	267, 29, 10, 26, 153, 186, 22, 106, 122, 84,
	85, 86, 156, 24, 154, 74, 150, 19, 55, 11,
	13, 312, 313, 14, 136, 135, 97, 184, 131, 50,
	8, 116, 27, 94, 46, 319, 320, 354, 36, 355,
	48, 95, 17, 296, 297, 31, 342, 321, 161, 356,
	322, 108, 189, 53, 40, 78, 72, 34, 75, 56,
	76, 15, 185, 51, 310, 357, 96, 123, 301, 49,
	129, 6, 307, 30, 152, 325, 324, 323, 326, 190,
	47, 304, 305, 327, 414, 130, 83, 308, 309, 134,
	73, 5, 35, 32, 9, 54, 57, 298, 299, 300,
	38, 329, 328, 330, 82, 12, 311, 292, 129, 61,
	166, 169, 130, 167, 133, -168, -168, -214, 11, 97,
	175, 172, 175, 172, 172, 173, -168, -153, -152, 168,
	274, 275, 269, 273, 12, -69, 95, 173, 269, 171,
	-168, -49, -2, -9, -7, -8, -2, 87, -167, -167,
	30, 63, 41, -244, 58, -254, 60, 130, -86, 120,
	122, 125, 56, -135, 19, 31, -68, -178, -126, -129,
	-68, -171, 314, 315, 316, 317, 318, 331, 332, 333,
	319, 320, 334, 335, 336, 321, 322, 337, 338, 340,
	341, 339, 325, 324, 323, 326, 327, 329, 328, 330,
	-125, -2, -54, 40, -58, 21, 22, 69, 11, -175,
	77, 76, 94, -174, 23, 61, -170, -171, 63, 314,
	315, 316, 317, 318, 331, 332, 333, 319, 320, 334,
	335, 336, 321, 322, 337, 338, 340, 341, 339, 325,
	324, 323, 326, 327, 329, 328, 330, 117, -68, -95,
	97, 78, 95, 96, 80, 99, 98, 109, 102, 103,
	104, 105, 106, 107, 108, 100, 101, 112, 87, 88,
	89, 90, 91, 92, 93, -149, -253, -116, -253, 118,
	119, -98, -98, -98, -98, -98, -98, -98, -98, -253,
	-2, -110, -68, -253, -253, -253, -253, -253, -253, -253,
	-253, -253, -253, -253, -120, -68, -253, -258, -105, -253,
	-258, -105, -258, -105, -258, -253, -258, -105, -258, -105,
	-258, -258, -105, -258, -253, -253, -253, -253, -253, -253,
	-253, -253, -253, -253, -253, -253, -253, -253, -253, -253,
	-253, -253, -253, -253, -253, -253, -253, -253, -253, -253,
	-253, -253, -253, -253, -253, -253, -253, -253, -87, 27,
	-86, -72, -73, -74, -75, -89, -116, -253, -86, -86,
	-79, -255, 59, 11, 57, -255, 59, 117, 59, -141,
	209, -142, -145, 282, 284, 87, -177, -172, 63, 29,
	117, 30, 60, 59, -86, -185, -189, -191, -190, -192,
	-187, -188, 232, 235, 239, 237, 233, 238, 113, 236,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	251, 30, 155, 228, 229, 230, 231, 252, 253, 254,
	255, 256, 257, 258, 259, 212, 234, 344, 213, 214,
	215, 216, 217, 218, 220, 221, 222, 223, 224, 225,
	226, -172, 23, 133, 61, 78, 61, 61, 61, -86,
	61, 59, 134, -79, 24, 56, -81, -86, 61, 61,
	61, 61, -179, -178, -169, -168, -168, -157, -157, -168,
	-168, -168, -86, -86, -86, -86, -168, -154, 95, 12,
	-168, -154, -168, -168, 11, -151, 11, 97, -151, -68,
	-98, -155, 95, 56, 61, -32, -31, -33, 193, 194,
	195, 196, 197, 198, 199, 200, 201, 202, 203, 204,
	63, 60, -110, -86, -168, 170, 170, 130, 130, 176,
	-86, 9, 97, 59, 18, 117, 59, -133, 25, 26,
	-133, -134, -254, -60, -99, 41, 64, 67, -59, 47,
	-86, -68, -68, -108, 72, 78, 73, 74, -174, 104,
	-179, -173, -169, -98, -109, -113, -116, 68, 97, 95,
	96, 80, -98, -98, -98, -98, -98, -98, -98, -98,
	-98, -98, -98, -98, -98, -98, -98, -181, 61, 63,
	61, -97, -97, -172, -58, -254, 59, -254, -2, -65,
	-67, -65, -254, -68, -68, -117, 63, -65, -117, 63,
	-65, -65, -65, -58, -118, -119, 82, -117, -254, -98,
	-172, -172, -65, -66, -65, -65, -65, -254, -254, -67,
	-65, -67, -65, -65, -254, -254, -254, -254, -58, -58,
	-65, -65, -65, -58, -65, -65, -58, -65, -65, -65,
	-65, -58, -65, -65, -65, -138, 162, -86, 30, 59,
	-82, -84, -83, -85, 46, 50, 52, 47, 48, 49,
	53, -163, 23, -72, -253, -90, 162, -91, 23, -180,
	54, 135, 55, -178, -171, 63, -138, 57, -72, -86,
	-72, -88, -178, 104, -144, -142, 59, 283, 285, 286,
	56, 75, -68, -198, 112, -173, -179, -221, -222, -223,
	-173, 63, 64, -208, -209, -210, -173, -224, 145, -230,
	137, 139, 35, -211, 146, 131, 36, 60, -186, -199,
	264, -193, 58, -193, -193, 240, 232, 235, 233, -193,
	-193, -193, -193, -193, -197, 235, -197, -197, -197, -197,
	233, 58, 58, -193, -193, -193, -201, 58, -201, 227,
	-201, -202, 58, -202, -202, -202, -176, 57, -132, -86,
	-168, 24, -168, -35, 179, 151, 58, -86, -86, -86,
	59, 61, 61, -215, 11, 97, 63, -68, -86, -100,
	23, -178, -178, -154, -64, 156, 63, -86, 59, 87,
	60, -160, 125, 122, 123, 127, 128, -233, 261, 121,
	235, 70, 29, 15, 302, 162, 349, 61, 163, -86,
	-86, -86, -86, -86, 125, 122, 42, -68, -68, -129,
	-135, -147, 19, 11, 38, 38, -65, 72, 73, 74,
	117, -253, -109, -98, -98, -98, -64, 77, -254, -66,
	-68, -254, 59, -254, -254, 59, 57, 23, 11, 11,
	-254, 11, 11, -254, -254, -254, -65, -121, -119, 84,
	-68, -254, -254, 59, 59, -254, -254, -254, -254, -130,
	310, -130, -254, -254, -254, -254, -254, -130, -130, -130,
	-130, -65, -65, -254, -254, -254, -65, -254, -254, -65,
	-254, -254, -254, -254, -65, -254, -254, -254, -96, 30,
	38, -2, -253, -253, -141, -73, -74, -74, -73, -74,
	46, 46, 46, 51, 46, 51, 46, -83, -180, -254,
	-253, 34, -180, -91, 131, 131, 131, -92, 12, -72,
	-92, -92, 117, -145, -146, 287, 284, 290, 61, 63,
	117, 59, -223, 87, -185, 58, 61, 36, -211, 131,
	36, -211, -216, 61, -216, 36, -203, -195, -196, -204,
	-205, -194, 72, 78, 29, 56, 261, 137, 36, 35,
	70, -200, 265, 64, -197, -197, -193, -193, -193, 240,
	-193, -197, -198, 30, -198, -198, -198, -198, -197, -206,
	63, -206, 64, -201, 64, 56, -172, -2, 23, -36,
	8, 9, 10, -245, -246, -247, 61, 97, 184, 185,
	134, -168, -86, -168, -168, -92, 61, 61, -151, -154,
	34, -98, -31, -97, -167, -164, -239, -211, -243, -210,
	138, 142, 145, 146, 137, 162, -164, -239, 145, -211,
	146, 138, -161, -211, 134, 23, -164, -164, -217, 87,
	162, -238, 57, 170, 261, 170, 43, -86, -71, 11,
	104, -173, -66, -64, 77, -98, -254, -67, -184, 113,
	232, 155, 230, 223, 250, 237, 263, 228, 264, -181,
	-184, -98, -98, -98, -98, 343, -125, 86, -68, 83,
	-98, -98, -172, -253, -130, -130, -130, -130, -130, -254,
	-254, -131, -130, -131, -131, -254, -131, -131, -254, -131,
	-131, -131, -131, -254, -131, -131, -131, -140, 56, -141,
	-112, -114, -113, -253, -2, -136, -172, -139, -172, -92,
	-77, -76, 56, 57, -78, 56, -76, 46, 46, -139,
	-98, -91, -253, -253, -253, -125, -68, -92, 284, 288,
	289, -222, -223, -186, -226, -225, -172, -230, 146, -216,
	-216, 58, 72, -98, 9, 36, 36, 63, 60, -198,
	-198, -197, -193, -198, 61, 113, -198, 60, 59, 60,
	59, 60, 59, -86, -132, -132, 56, 60, 59, -185,
	61, 61, 61, -86, -154, -98, 58, -207, -167, -216,
	-158, 61, 61, -167, 61, -172, 36, 61, -86, -172,
	-207, 61, -68, -172, -236, 346, -237, 61, -172, -172,
	-172, -92, -72, -254, -98, -254, -193, -193, -193, -202,
	-193, 217, -193, 217, -254, -254, 19, 19, 19, 19,
	-253, -62, 307, -68, 59, 59, -125, 162, -131, -131,
	-131, -131, -131, 28, -140, 59, -254, -254, -254, 59,
	117, -254, 59, -125, -68, 58, -68, -254, -91, -163,
	-137, -172, -137, -137, -134, 60, 59, -193, -137, -102,
	-198, -197, 63, -197, 64, 64, 58, -2, -86, -248,
	-249, -250, 70, 345, 78, 186, 187, 147, 188, 189,
	190, -247, -185, -185, -185, -207, -127, 150, 151, -176,
	-213, -211, 61, -162, 134, 23, 134, -127, -207, 27,
	-235, -234, -173, 58, 57, -122, 13, -197, 61, -98,
	-98, -98, -98, -98, -254, 63, -98, -98, -254, 16,
	36, -114, 38, -2, -253, -172, -172, -172, -134, -137,
	-90, -180, 59, -254, -254, -254, -228, -227, 57, 141,
	70, -225, -133, 60, -198, -198, 60, 60, -226, -132,
	19, -132, -250, 63, 190, 186, 190, 190, 190, 190,
	192, 60, -167, 61, 58, -216, 61, -172, -167, -127,
	-253, 59, 87, -137, -86, -123, 14, 16, -254, -254,
	-254, -254, -61, 97, 346, -254, -254, -110, 9, -112,
	-2, 117, 60, -91, -172, -227, 61, -217, 63, 148,
	60, 177, -23, -2, -7, -8, -9, -10, -12, -37,
	-13, -14, -20, -21, -15, -43, -44, -53, -51, -52,
	-48, -47, -22, -17, -24, 81, 136, 207, 191, 191,
	182, 183, -167, -226, -176, -167, -231, -232, 162, -234,
	-223, 60, -124, -68, -171, -111, -70, -68, -171, -254,
	344, 53, 347, -125, -141, -254, -172, 64, -86, -229,
	-228, 178, -132, -68, -68, -26, -23, 60, 58, -254,
	59, -172, -238, 59, 43, 345, 348, -254, 58, -128,
	180, 181, -27, -28, 82, 83, 415, -229, -226, -232,
	38, -236, -70, 43, -137, -132, 61, 61, 86, 84,
	-28, -68, -25, -19, -2, -7, -8, -9, -10, -20,
	-21, -22, -18, 207, 86, -23, 60, 164, 346, 60,
	-11, -18, -10, -7, -8, -9, 81, -25, 83, 415,
	-25, -229, 165, 347, -241, -242, 56, -132, 415, -25,
	86, 84, -29, -19, -30, 85, 415, -253, 348, -242,
	56, -241, 56, 10, 9, 86, 415, 136, -25, 86,
	84, -30, -68, 86, -98, 161, -240, 149, 144, 147,
	30, -240, 81, 415, 136, -25, 83, -254, -254, 143,
	29, 72, 86, 415, -25, 136, 86, 415, 136,
}
var yyDef = [...]int{

	27, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 795, 0, 501, 501,
	501, 501, 501, 501, 0, -2, 363, 364, 365, 0,
	0, 0, 0, -2, 476, 477, 478, 480, 481, 490,
	-2, 1231, 1231, 0, 0, 1231, 0, 0, 0, 39,
	40, 847, 0, 493, 482, 483, 1229, 1, 3, 804,
	0, 0, 505, 508, 503, 0, 847, 847, 0, 0,
	72, 73, 0, 0, 0, 0, 0, 845, 845, 0,
	845, 867, 0, 863, 864, 865, 0, 843, 0, 843,
	843, 843, 843, 843, 0, 420, 586, 874, 875, 1010,
	1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020,
	1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030,
	1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040,
	1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050,
	1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060,
	1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070,
	1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080,
	1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090,
	1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100,
	1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110,
	1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120,
	1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130,
	1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140,
	1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150,
	1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160,
	1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170,
	1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180,
	1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190,
	1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200,
	0, 0, 0, 1232, 0, 1232, 1232, 435, 0, 437,
	0, 0, 0, 1232, 0, 448, 0, 0, 455, 1232,
	321, 322, 323, 473, 474, 461, 475, 0, 0, 0,
	494, 495, 496, 497, 1231, 1231, 500, 156, 0, 176,
	33, 0, 0, 0, 848, 479, 808, 0, 0, 795,
	35, 0, 501, 506, 507, 511, 509, 510, 502, 0,
	520, 529, 0, 595, 0, 600, 602, -2, -2, 0,
	637, 638, 639, 640, 641, 0, 0, 0, 0, 0,
	0, 0, 0, 665, 666, 667, 668, 669, 670, 774,
	775, 776, 777, 778, 779, 780, 781, 604, 605, 771,
	828, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 762, 0, 733, 733, 733, 733, 733, 733,
	733, 733, 733, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 52, 586, 56, 0, 1178, 829, -2,
	-2, 0, 0, 771, 0, -2, 1024, -2, 0, 0,
	202, 0, 200, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 409, 0, 0, 0, 0, 870, 871,
	0, 0, 0, 0, 0, 419, 0, 421, 1232, 1232,
	424, 1233, 1234, 872, 873, 878, 879, 880, 881, 882,
	883, 884, 885, 886, 887, 888, 889, 890, 891, 892,
	893, 894, 895, 896, 897, 898, 899, 900, 901, 902,
	903, 904, 905, 906, 907, 908, 909, 910, 911, 912,
	913, 914, 915, 916, 917, 918, 919, 920, 921, 922,
	923, 924, 925, 926, 927, 928, 929, 930, 931, 932,
	933, 934, 935, 936, 937, 938, 939, 940, 941, 942,
	943, 944, 945, 946, 947, 948, 949, 950, 951, 952,
	953, 954, 955, 956, 957, 958, 959, 960, 961, 962,
	963, 964, 965, 966, 967, 968, 969, 970, 971, 972,
	973, 974, 975, 976, 977, 978, 979, 980, 981, 982,
	983, 984, 985, 986, 987, 988, 989, 990, 991, 992,
	993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002,
	1003, 1004, 1005, 1006, 1007, 1008, 1009, 845, 845, 1232,
	1232, 1232, 0, 0, 0, 433, 434, 0, 340, 341,
	1232, 467, 1232, 467, 1232, 1232, 443, 0, 464, 464,
	462, 463, 458, 459, 0, 450, 0, 470, 452, 453,
	456, 484, -2, 487, 488, 489, -2, 0, 498, 499,
	0, 158, 0, 175, 0, 34, 1230, 0, 1232, 0,
	0, 0, 0, 28, 0, 0, 805, 0, 796, 797,
	801, 801, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208,
	1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218,
	1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228,
	804, 33, 508, 0, 514, 512, 513, 504, 0, 521,
	0, 0, 0, 530, 0, 532, 533, 534, 535, 1201,
	1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211,
	1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221,
	1222, 1223, 1224, 1225, 1226, 1227, 1228, 0, 598, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 622, 623,
	624, 625, 626, 627, 628, 601, 0, 615, 0, 0,
	0, 657, 658, 659, 660, 661, 662, 663, 0, 511,
	33, 0, 635, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 511, 0, 763, 0, 716, 725, 0,
	717, 726, 718, 727, 719, 0, 720, 728, 721, 729,
	722, 723, 730, 724, 0, 0, 0, 516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 511, 511, 0, 0, 0, 511, 0, 0, 511,
	0, 0, 0, 0, 511, 0, 0, 0, 54, 0,
	585, 0, 538, 540, 541, 542, -2, 0, 589, -2,
	0, 0, 0, 46, 47, 0, 0, 0, 0, 57,
	1178, 59, 60, 0, 0, 0, 297, 838, 839, 840,
	0, 836, 352, 0, 0, 208, 285, 216, 217, 218,
	278, 220, 278, 278, 0, 278, 278, 278, 278, 278,
	294, 294, 294, 294, 294, 261, 262, 263, 264, 265,
	0, 0, 238, 278, 278, 278, 242, 268, 269, 270,
	271, 272, 273, 274, 275, 221, 222, 223, 224, 225,
	226, 227, 228, 229, 280, 280, 280, 282, 282, 282,
	282, 868, 71, 0, 1232, 0, 1232, 0, 0, 198,
	129, 0, 0, 412, 844, 0, 414, 48, 415, 416,
	417, 418, 587, 876, 877, 422, 423, 0, 0, 427,
	428, 429, 430, 431, 432, 342, 438, 439, 0, 0,
	440, 441, 442, 447, 0, 553, 0, 0, 467, 449,
	629, 451, 0, 0, 491, 157, 160, 0, 163, 164,
	165, 166, 167, 168, 169, 170, 171, 172, 173, 174,
	159, 177, 0, 0, 388, 0, 0, 0, 0, 0,
	0, 809, 0, 0, 0, 0, 0, 799, 802, 803,
	800, 808, 36, 511, 0, 782, 0, 0, 0, 515,
	31, 596, 597, 599, 616, 0, 618, 620, 531, 522,
	0, 772, -2, 606, 607, 631, 632, 633, 0, 0,
	0, 0, 629, 611, 0, 642, 643, 644, 645, 646,
	647, 648, 649, 650, 651, 652, 653, 656, 747, 748,
	0, 654, 655, 664, 516, 634, 0, 827, 33, 0,
	518, 0, 703, 0, 0, 639, 774, 0, 639, 774,
	0, 0, 0, 0, 769, 766, 0, 0, 734, 0,
	0, 0, 0, 0, 517, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 0, 0,
	0, 0, 0, 0, 574, 0, 0, 577, 0, 0,
	0, 0, 570, 0, 0, 546, 1116, 548, 0, 589,
	0, 0, 0, 571, 572, 573, 593, 0, 593, 51,
	593, 53, 0, 588, 830, 58, 0, 0, 63, 64,
	831, 832, 833, 834, 0, 772, 0, 199, 353, 355,
	358, 359, 360, 203, 204, 205, 0, 0, 0, 334,
	1124, 1161, -2, 328, 1059, -2, -2, 201, 206, 287,
	286, 219, 0, 294, 294, 278, 278, 278, 278, 247,
	294, 250, 253, 254, 297, 0, 297, 297, 297, 297,
	294, 0, 0, 239, 240, 241, 230, 0, 231, 280,
	233, 234, 0, 235, 236, 237, 0, 0, 0, 0,
	77, 846, 78, 0, 130, 131, 81, 0, 410, 1232,
	0, 1232, 1232, 593, 0, 0, 468, 469, 464, 467,
	0, 465, 466, 446, 457, 0, 471, 454, 0, 0,
	178, 1231, -2, 397, 860, 397, 397, 381, 314, 849,
	850, 851, 852, 853, 854, 855, 856, 857, 0, 190,
	390, 392, 391, 395, 0, 0, 0, 806, 807, 798,
	29, 0, 841, 842, 783, 784, 536, 617, 619, 621,
	0, 516, 608, 629, 612, 0, 609, 0, 603, 0,
	636, -2, 0, 701, 702, 0, 0, 0, 0, 0,
	740, 0, 0, 741, 0, 712, 795, 0, 767, 0,
	0, 715, 735, 0, 0, 736, 737, 738, 739, 690,
	0, 691, 0, 0, 0, 0, 0, 697, 698, 699,
	700, 0, 0, 527, 527, 527, 0, 527, 527, 0,
	527, 527, 527, 527, 0, 527, 527, 527, 821, 0,
	0, -2, 0, 0, 593, 539, 565, 567, 0, 562,
	575, 576, 578, 0, 580, 0, 582, 583, 543, 545,
	0, 0, 589, 552, 0, 0, 0, 795, 0, 593,
	44, 45, 0, 61, 62, 0, 0, 68, 298, 299,
	0, 0, 356, 0, 208, 0, 0, 316, 328, 324,
	325, 328, 319, 329, 320, 0, 209, 210, 211, 212,
	213, 214, 289, 0, 0, 0, 293, 0, 301, 303,
	0, 215, 288, 0, 297, 297, 294, 245, 246, 278,
	251, 297, 255, 0, 256, 257, 258, 259, 297, 0,
	276, 0, 0, 232, 0, 0, 869, -2, 71, 0,
	132, 133, 134, 0, 82, 83, 0, 0, 0, 0,
	0, 413, 49, 425, 426, 436, 343, 344, 467, 445,
	0, 630, 161, 162, 366, 0, 1231, 328, 0, 382,
	398, 399, 400, 401, 402, 403, 0, 1231, 400, 0,
	401, 0, 0, 0, 861, 862, 0, 0, 0, 315,
	0, 193, 0, 0, 0, 0, 810, 30, 593, 0,
	523, 773, 0, 610, 0, 613, 671, 519, 0, 278,
	278, 752, 278, 282, 755, 278, 757, 278, 760, 0,
	0, 0, 0, 0, 0, 0, 764, 714, 770, 0,
	0, 0, 524, 795, 692, 693, 694, 695, 696, 527,
	527, 675, 528, 676, 677, 527, 679, 680, 527, 682,
	683, 684, 685, 527, 687, 688, 689, 37, 0, 821,
	811, 823, 825, 0, 33, 0, 817, 0, 557, 795,
	559, 566, 0, 0, 560, 0, 561, 579, 581, 0,
	-2, 551, 0, 0, 0, 804, 594, 43, 65, 66,
	67, 354, 357, 207, 0, 330, 278, 333, 0, 317,
	318, 0, 290, 291, 0, 300, 302, 304, 279, 243,
	244, 297, 252, 248, 295, 296, 260, 294, 0, 294,
	0, 283, 0, 0, 75, 0, 0, 89, 0, 85,
	0, 0, 0, 411, 444, 554, 0, 385, 369, 868,
	326, 362, 370, 371, 376, 377, 0, 0, 373, 0,
	385, 0, 384, 0, 389, 0, 191, 192, 0, 0,
	394, 785, 537, 672, 614, 704, 749, 294, 753, 754,
	756, 758, 759, 761, 706, 705, 0, 0, 0, 0,
	0, 0, 0, 768, 0, 0, 0, 0, 673, 674,
	678, 681, 686, 0, 38, 0, 826, -2, 0, 0,
	0, 55, 0, 804, 563, 0, 568, 589, 549, 0,
	0, 555, 0, 0, 42, 306, 0, 801, 0, 292,
	249, 297, 277, 297, 0, 0, 0, -2, 0, 71,
	90, 91, 0, 0, 0, 96, 0, 0, 0, 0,
	0, 84, 86, 87, 88, 0, 1231, 386, 0, 0,
	328, 327, 383, 0, 858, 859, 0, 1231, 385, 0,
	194, 195, 0, 0, 0, 791, 0, 750, 751, 0,
	0, 0, 0, 742, 713, 765, 0, 0, 525, 0,
	0, 824, 0, -2, 0, 819, 818, 558, 41, 0,
	547, 589, 0, 590, 591, 592, 305, 309, 0, 314,
	0, 331, 332, 0, 266, 267, 281, 284, 0, 76,
	0, 0, 92, 93, 94, 95, 97, 98, 0, 0,
	0, 1231, 368, 387, 0, 868, 372, 378, 379, 1231,
	0, 0, 0, 0, 396, 32, 0, 0, 707, 709,
	708, 710, 0, 0, 0, 731, 732, 795, 0, 814,
	33, 0, 564, 550, 556, 310, 311, 0, 313, 0,
	307, 0, 71, -2, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 0, 0, 0, 99, 100,
	101, 102, 367, 0, 0, 380, 0, 405, 0, 196,
	197, 190, 792, 793, 794, 786, 787, 789, 790, 711,
	0, 0, 0, 0, 822, -2, 820, 312, 0, 74,
	308, 135, 80, 0, 0, 0, 126, 307, 0, 404,
	0, 0, 193, 0, 743, 0, 746, 526, 0, 71,
	0, 0, 0, 146, 0, 0, 0, 374, 0, 406,
	0, 393, 788, 744, 0, 0, 136, 137, 0, 0,
	147, 0, 0, 179, -2, 182, 183, 184, 185, 186,
	187, 188, 189, 0, 125, 127, 307, 0, 0, 335,
	71, 138, 139, 140, 141, 142, 144, 0, 0, 0,
	0, 375, 0, 0, 336, 337, 0, 79, 0, 0,
	0, 0, 0, 180, 153, 0, 0, 0, 745, 338,
	0, 339, 0, 0, 0, 0, 148, 149, 0, 0,
	0, 154, 0, 143, 0, 0, 345, 347, 348, 0,
	0, 346, 145, 0, 151, 0, 0, 407, 408, 349,
	350, 351, 0, 0, 0, 150, 0, 155, 152,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 79, 3, 3, 3, 107, 99, 3,
	58, 60, 104, 102, 59, 103, 117, 105, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 415,
	88, 87, 89, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 109, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 98, 3, 110,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 80, 81, 82, 83, 84, 85,
	86, 90, 91, 92, 93, 94, 95, 96, 97, 100,
	101, 106, 108, 111, 112, 113, 114, 115, 116, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:380
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:385
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:386
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:390
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 27:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:416
		{
			setParseTree(yylex, nil)
		}
	case 28:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:422
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 29:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:430
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:434
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 31:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:440
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 32:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:447
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:453
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:457
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:463
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:467
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:474
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].setExprs)
			yyVAL.statement = ins
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:486
		{
			cols := make(Columns, 0, len(yyDollar[7].setExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].setExprs))
			for _, updateList := range yyDollar[7].setExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].setExprs)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:498
		{
			yyVAL.str = InsertStr
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:502
		{
			yyVAL.str = ReplaceStr
		}
	case 41:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:508
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].setExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 42:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:514
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:518
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 44:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:522
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 45:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:526
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:531
		{
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:532
		{
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:536
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName.ToViewName()}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:540
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName.ToViewName())
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:546
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:550
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:556
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:560
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:565
		{
			yyVAL.partitions = nil
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:569
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:575
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:579
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 58:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:583
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 59:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:587
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:593
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:597
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:603
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:607
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:611
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:617
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:621
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:625
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:629
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:635
		{
			yyVAL.str = SessionStr
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:639
		{
			yyVAL.str = GlobalStr
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:644
		{
			yyVAL.int = yyPosition(yylex)
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:650
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			if len(yyDollar[1].ddl.TableSpec.Constraints) > 0 {
				yyDollar[1].ddl.ConstraintAction = AddStr
			}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:658
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 74:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:664
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: yyDollar[4].colIdent, Using: yyDollar[5].colIdent, Type: yyDollar[2].str, Columns: yyDollar[9].indexColumns, Options: yyDollar[11].indexOptions}}
		}
	case 75:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:668
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[3].tableName.ToViewName(), ViewExpr: yyDollar[6].selStmt, SubStatementPositionStart: yyDollar[5].int, SubStatementPositionEnd: yyDollar[7].int - 1}
		}
	case 76:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:672
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[5].tableName.ToViewName(), ViewExpr: yyDollar[8].selStmt, SubStatementPositionStart: yyDollar[7].int, SubStatementPositionEnd: yyDollar[9].int - 1, OrReplace: true}
		}
	case 77:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:676
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes), IfNotExists: ne}
		}
	case 78:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:684
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes), IfNotExists: ne}
		}
	case 79:
		yyDollar = yyS[yypt-15 : yypt+1]
//line sql.y:692
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[8].tableName, TriggerSpec: &TriggerSpec{Name: string(yyDollar[4].bytes), Time: yyDollar[5].str, Event: yyDollar[6].str, Order: yyDollar[12].triggerOrder, Body: yyDollar[14].statement}, SubStatementPositionStart: yyDollar[13].int, SubStatementPositionEnd: yyDollar[15].int - 1}
		}
	case 80:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:696
		{
			yyVAL.statement = &DDL{Action: CreateStr, ProcedureSpec: &ProcedureSpec{Name: string(yyDollar[4].bytes), Definer: yyDollar[2].str, Params: yyDollar[6].procedureParams, Characteristics: yyDollar[8].characteristics, Body: yyDollar[10].statement}, SubStatementPositionStart: yyDollar[9].int, SubStatementPositionEnd: yyDollar[11].int - 1}
		}
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:701
		{
			yyVAL.procedureParams = nil
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:705
		{
			yyVAL.procedureParams = yyDollar[1].procedureParams
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:711
		{
			yyVAL.procedureParams = []ProcedureParam{yyDollar[1].procedureParam}
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:715
		{
			yyVAL.procedureParams = append(yyVAL.procedureParams, yyDollar[3].procedureParam)
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:721
		{
			yyVAL.procedureParam = ProcedureParam{Direction: ProcedureParamDirection_In, Name: string(yyDollar[1].bytes), Type: yyDollar[2].columnType}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:725
		{
			yyVAL.procedureParam = ProcedureParam{Direction: ProcedureParamDirection_In, Name: string(yyDollar[2].bytes), Type: yyDollar[3].columnType}
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:729
		{
			yyVAL.procedureParam = ProcedureParam{Direction: ProcedureParamDirection_Inout, Name: string(yyDollar[2].bytes), Type: yyDollar[3].columnType}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:733
		{
			yyVAL.procedureParam = ProcedureParam{Direction: ProcedureParamDirection_Out, Name: string(yyDollar[2].bytes), Type: yyDollar[3].columnType}
		}
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:738
		{
			yyVAL.characteristics = nil
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:742
		{
			yyVAL.characteristics = yyDollar[1].characteristics
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:748
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:752
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[2].characteristic)
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:758
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_Comment, Comment: string(yyDollar[2].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:762
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_LanguageSql}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:766
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_NotDeterministic}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:770
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_Deterministic}
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:774
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_ContainsSql}
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:778
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_NoSql}
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:782
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_ReadsSqlData}
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:786
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_ModifiesSqlData}
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:790
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_SqlSecurityDefiner}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:794
		{
			yyVAL.characteristic = Characteristic{Type: CharacteristicValue_SqlSecurityInvoker}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:800
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:827
		{
			yyVAL.statement = &BeginEndBlock{Statements: yyDollar[2].statements}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:833
		{
			yyVAL.statements = Statements{yyDollar[1].statement}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:837
		{
			yyVAL.statements = append(yyVAL.statements, yyDollar[3].statement)
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:842
		{
			yyVAL.str = ""
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:846
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:852
		{
			yyVAL.str = BeforeStr
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:856
		{
			yyVAL.str = AfterStr
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:862
		{
			yyVAL.str = InsertStr
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:866
		{
			yyVAL.str = UpdateStr
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:870
		{
			yyVAL.str = DeleteStr
		}
	case 135:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:875
		{
			yyVAL.triggerOrder = nil
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:879
		{
			yyVAL.triggerOrder = &TriggerOrder{PrecedesOrFollows: FollowsStr, OtherTriggerName: string(yyDollar[2].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:883
		{
			yyVAL.triggerOrder = &TriggerOrder{PrecedesOrFollows: PrecedesStr, OtherTriggerName: string(yyDollar[2].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:889
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 143:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:899
		{
			yyVAL.statement = &BeginEndBlock{Statements: yyDollar[2].statements}
		}
	case 144:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:905
		{
			yyVAL.statement = &CaseStatement{Expr: yyDollar[2].expr, Cases: yyDollar[3].caseStatementCases}
		}
	case 145:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:909
		{
			yyVAL.statement = &CaseStatement{Expr: yyDollar[2].expr, Cases: yyDollar[3].caseStatementCases, Else: yyDollar[5].statements}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:915
		{
			yyVAL.caseStatementCases = []CaseStatementCase{yyDollar[1].caseStatementCase}
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:919
		{
			yyVAL.caseStatementCases = append(yyVAL.caseStatementCases, yyDollar[2].caseStatementCase)
		}
	case 148:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:925
		{
			yyVAL.caseStatementCase = CaseStatementCase{Case: yyDollar[2].expr, Statements: yyDollar[4].statements}
		}
	case 149:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:931
		{
			conds := []IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}
			yyVAL.statement = &IfStatement{Conditions: conds}
		}
	case 150:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:936
		{
			conds := []IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}
			yyVAL.statement = &IfStatement{Conditions: conds, Else: yyDollar[7].statements}
		}
	case 151:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:941
		{
			conds := yyDollar[6].ifStatementConditions
			conds = append([]IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}, conds...)
			yyVAL.statement = &IfStatement{Conditions: conds}
		}
	case 152:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:947
		{
			conds := yyDollar[6].ifStatementConditions
			conds = append([]IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}, conds...)
			yyVAL.statement = &IfStatement{Conditions: conds, Else: yyDollar[8].statements}
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:955
		{
			yyVAL.ifStatementConditions = []IfStatementCondition{yyDollar[1].ifStatementCondition}
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:959
		{
			yyVAL.ifStatementConditions = append(yyVAL.ifStatementConditions, yyDollar[2].ifStatementCondition)
		}
	case 155:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:965
		{
			yyVAL.ifStatementCondition = IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:971
		{
			yyVAL.statement = &Signal{SqlStateValue: string(yyDollar[2].bytes)}
		}
	case 157:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:975
		{
			yyVAL.statement = &Signal{SqlStateValue: string(yyDollar[2].bytes), Info: yyDollar[4].signalInfos}
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:981
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:985
		{
			yyVAL.bytes = yyDollar[3].bytes
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:991
		{
			yyVAL.signalInfos = []SignalInfo{yyDollar[1].signalInfo}
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:995
		{
			yyVAL.signalInfos = append(yyVAL.signalInfos, yyDollar[3].signalInfo)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1001
		{
			yyVAL.signalInfo = SignalInfo{Name: string(yyDollar[1].bytes), Value: yyDollar[3].expr.(*SQLVal)}
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1007
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1024
		{
			yyVAL.statement = &Call{FuncName: string(yyDollar[2].bytes), Params: yyDollar[3].exprs}
		}
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1029
		{
			yyVAL.exprs = nil
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1033
		{
			yyVAL.exprs = nil
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1037
		{
			yyVAL.exprs = yyDollar[2].exprs
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1043
		{
			yyVAL.statements = Statements{yyDollar[1].statement}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1047
		{
			yyVAL.statements = append(yyVAL.statements, yyDollar[3].statement)
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1053
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 190:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1066
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1070
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1076
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1081
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1086
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1092
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1097
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1103
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 198:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1109
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName, IfNotExists: ne}
			setDDL(yylex, yyVAL.ddl)
		}
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1120
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1127
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1131
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1137
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1142
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1146
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1150
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1156
		{
			if err := yyDollar[2].columnType.merge(yyDollar[3].columnType); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1166
		{
			if err := yyDollar[2].columnType.merge(yyDollar[3].columnType); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].colIdent)), Type: yyDollar[2].columnType}
		}
	case 208:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1175
		{
			yyVAL.columnType = ColumnType{}
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1179
		{
			opt := ColumnType{NotNull: yyDollar[2].boolVal, sawnull: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1188
		{
			opt := ColumnType{Default: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1197
		{
			opt := ColumnType{OnUpdate: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1206
		{
			opt := ColumnType{Autoincrement: yyDollar[2].boolVal, sawai: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1215
		{
			opt := ColumnType{KeyOpt: yyDollar[2].colKeyOpt}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1224
		{
			opt := ColumnType{Comment: yyDollar[2].sqlVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1235
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1246
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1251
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1257
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1261
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1265
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1269
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1273
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1277
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1281
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1285
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1289
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1295
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1301
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1307
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1313
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1319
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1325
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1331
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1337
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1345
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1349
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1353
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1357
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1361
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1367
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1371
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1375
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1379
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1383
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1387
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 249:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1391
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1395
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1399
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1403
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Length: yyDollar[4].sqlVal}
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1407
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1411
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1415
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1419
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1423
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1427
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1431
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1435
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1439
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1443
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1447
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1451
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1455
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1459
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 267:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1464
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1470
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1474
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1478
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1482
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1486
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1490
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1494
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1498
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1504
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[1].bytes))
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1509
		{
			yyVAL.strs = append(yyDollar[1].strs, string(yyDollar[3].bytes))
		}
	case 278:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1514
		{
			yyVAL.sqlVal = nil
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1518
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 280:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1523
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 281:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1527
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 282:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1535
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1539
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 284:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1545
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 285:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1553
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1557
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1562
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1566
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1573
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1577
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1583
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1589
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1595
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1600
		{
			yyVAL.str = ""
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1604
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1608
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1613
		{
			yyVAL.str = ""
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1617
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1621
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1627
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1631
		{
			yyVAL.colKeyOpt = colKey
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1635
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1639
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1645
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 305:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1651
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 306:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1655
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1660
		{
			yyVAL.indexOptions = nil
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1664
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1670
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1674
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1680
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1684
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1689
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1695
		{
			yyVAL.str = ""
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1699
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1705
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1709
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1713
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1717
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1721
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1727
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1731
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1735
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1741
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1745
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1750
		{
			yyVAL.str = ""
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1754
		{
			yyVAL.str = yyDollar[1].str
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1759
		{
			yyVAL.str = ""
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1763
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1769
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1773
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1779
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal, Order: yyDollar[3].str}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1785
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1789
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 335:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1796
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 336:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1800
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 337:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1804
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 338:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1808
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 339:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1812
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[12].ReferenceAction, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1818
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1822
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1827
		{
			yyVAL.str = ""
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1831
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1835
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1841
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1847
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1853
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1857
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1861
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1865
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1869
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1874
		{
			yyVAL.str = ""
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1878
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1882
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1890
		{
			yyVAL.str = yyDollar[1].str
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1894
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1898
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1904
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1908
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1912
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 361:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1917
		{
			yyVAL.str = ""
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1921
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 366:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1932
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 367:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1936
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			ddl.Column = yyDollar[8].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 368:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1943
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 369:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1950
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 370:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1954
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: DropStr, Column: NewColIdent(string(yyDollar[7].bytes)), Table: yyDollar[4].tableName}
		}
	case 371:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1958
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 372:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1962
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: RenameStr, Table: yyDollar[4].tableName, Column: NewColIdent(string(yyDollar[7].bytes)), ToColumn: NewColIdent(string(yyDollar[9].bytes))}
		}
	case 373:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1966
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 374:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1971
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[7].str), Using: yyDollar[8].colIdent, Columns: yyDollar[10].indexColumns, Options: yyDollar[12].indexOptions}}
		}
	case 375:
		yyDollar = yyS[yypt-14 : yypt+1]
//line sql.y:1975
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[9].str), Type: yyDollar[7].str, Using: yyDollar[10].colIdent, Columns: yyDollar[12].indexColumns, Options: yyDollar[14].indexOptions}}
		}
	case 376:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1979
		{
			yyVAL.statement = &DDL{Action: AlterStr, ConstraintAction: DropStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[7].bytes)}}}}
		}
	case 377:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1984
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[7].colIdent}}
		}
	case 378:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1988
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: RenameStr, FromName: yyDollar[7].colIdent, ToName: yyDollar[9].colIdent}}
		}
	case 379:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1992
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ModifyStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 380:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1999
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ChangeStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, Column: NewColIdent(string(yyDollar[7].bytes)), ColumnOrder: yyDollar[9].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			yyVAL.statement = ddl
		}
	case 381:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2005
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 382:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2009
		{
			ddl := &DDL{Action: AlterStr, ConstraintAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddConstraint(yyDollar[6].constraintDefinition)
			yyVAL.statement = ddl
		}
	case 383:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2015
		{
			yyVAL.statement = &DDL{Action: AlterStr, ConstraintAction: DropStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[8].bytes), Details: &ForeignKeyDefinition{}}}}}
		}
	case 384:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2020
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, AutoIncSpec: &AutoIncSpec{Value: yyDollar[7].expr}}
		}
	case 385:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2025
		{
			yyVAL.columnOrder = nil
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2029
		{
			yyVAL.columnOrder = &ColumnOrder{First: true}
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2033
		{
			yyVAL.columnOrder = &ColumnOrder{AfterColumn: NewColIdent(string(yyDollar[2].bytes))}
		}
	case 388:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2039
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 389:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2045
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 390:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2057
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 391:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2067
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 392:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2071
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 393:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:2075
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 394:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2088
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 395:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2098
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 396:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2102
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2115
		{
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2117
		{
		}
	case 404:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2128
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2134
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2138
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 407:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2144
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 408:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2148
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2154
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2160
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 411:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2164
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 412:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2172
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 413:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2180
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[3].colIdent}}
		}
	case 414:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2184
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromViews: yyDollar[4].tableNames, IfExists: exists}
		}
	case 415:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2192
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes), IfExists: exists}
		}
	case 416:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2200
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes), IfExists: exists}
		}
	case 417:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2208
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, TriggerSpec: &TriggerSpec{Name: string(yyDollar[4].bytes)}, IfExists: exists}
		}
	case 418:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2216
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, ProcedureSpec: &ProcedureSpec{Name: string(yyDollar[4].bytes)}, IfExists: exists}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2226
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2230
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2235
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 422:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2241
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 423:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2246
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2250
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 425:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2254
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 426:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2258
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 427:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2263
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 428:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2267
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 429:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2271
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 430:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2275
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 431:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2279
		{
			yyVAL.statement = &Show{Type: CreateTriggerStr, Table: yyDollar[4].tableName}
		}
	case 432:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2283
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2287
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2291
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2295
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 436:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2299
		{
			yyVAL.statement = &Show{Type: IndexStr, Table: yyDollar[4].tableName, Database: yyDollar[5].str, ShowIndexFilterOpt: yyDollar[6].expr}
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2303
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 438:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2307
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 439:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2311
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), ProcFuncFilter: yyDollar[4].showFilter}
		}
	case 440:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2315
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 441:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2319
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), ProcFuncFilter: yyDollar[4].showFilter}
		}
	case 442:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2323
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2327
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 444:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2331
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 445:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2336
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[6].showFilter, AsOf: yyDollar[5].expr}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 446:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2346
		{
			yyVAL.statement = &Show{Type: string(yyDollar[3].bytes), ShowTablesOpt: &ShowTablesOpt{DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}}
		}
	case 447:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2350
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2354
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 449:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2358
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2364
		{
			// Cannot dereference $3 directly, or else the parser stackcannot be pooled. See yyParsePooled
			cmp := yyDollar[3].expr.(*ComparisonExpr)
			cmp.Left = &ColName{Name: NewColIdent("collation")}
			var ex Expr = cmp
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &ex}
		}
	case 451:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2372
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2377
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2381
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 454:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2385
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2389
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2403
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2409
		{
			yyVAL.expr = &ComparisonExpr{Operator: LikeStr, Right: yyDollar[2].expr, Escape: yyDollar[3].expr}
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2415
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2419
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 460:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2425
		{
			yyVAL.str = ""
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2429
		{
			yyVAL.str = "full "
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2435
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2439
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 464:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2445
		{
			yyVAL.str = ""
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2449
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2453
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 467:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2459
		{
			yyVAL.showFilter = nil
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2463
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2467
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 470:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2473
		{
			yyVAL.showFilter = nil
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2477
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 472:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2483
		{
			yyVAL.str = ""
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2487
		{
			yyVAL.str = SessionStr
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2491
		{
			yyVAL.str = GlobalStr
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2497
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2501
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2507
		{
			yyVAL.statement = &Begin{}
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2511
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2517
		{
			yyVAL.statement = &Begin{}
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2523
		{
			yyVAL.statement = &Commit{}
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2529
		{
			yyVAL.statement = &Rollback{}
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2534
		{
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2535
		{
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2539
		{
			yyVAL.statement = &Explain{ExplainFormat: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2543
		{
			yyVAL.statement = &Explain{Analyze: true, ExplainFormat: TreeStr, Statement: yyDollar[3].selStmt}
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2549
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 490:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2557
		{
			yyVAL.str = ""
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2561
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2572
		{
			yyVAL.statement = &Show{Type: "columns", OnTable: yyDollar[2].tableName}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2576
		{
			yyVAL.statement = &OtherRead{}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2582
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2586
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2590
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2594
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2600
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 501:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2604
		{
			setAllowComments(yylex, true)
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2608
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 503:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2614
		{
			yyVAL.bytes2 = nil
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2618
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2624
		{
			yyVAL.str = UnionStr
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2628
		{
			yyVAL.str = UnionAllStr
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2632
		{
			yyVAL.str = UnionDistinctStr
		}
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2637
		{
			yyVAL.str = ""
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2641
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2645
		{
			yyVAL.str = SQLCacheStr
		}
	case 511:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2650
		{
			yyVAL.str = ""
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2654
		{
			yyVAL.str = ""
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2658
		{
			yyVAL.str = DistinctStr
		}
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2663
		{
			yyVAL.str = ""
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2667
		{
			yyVAL.str = StraightJoinHint
		}
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2672
		{
			yyVAL.selectExprs = nil
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2676
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2682
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2686
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2692
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2696
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2700
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 523:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2704
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2711
		{
			yyVAL.over = &Over{WindowName: yyDollar[2].colIdent}
		}
	case 525:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2715
		{
			yyVAL.over = &Over{OrderBy: yyDollar[3].orderBy}
		}
	case 526:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2719
		{
			yyVAL.over = &Over{PartitionBy: yyDollar[5].exprs, OrderBy: yyDollar[6].orderBy}
		}
	case 527:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2724
		{
			yyVAL.over = nil
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2728
		{
			yyVAL.over = yyDollar[1].over
		}
	case 529:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2733
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2737
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2741
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2747
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2751
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2755
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2759
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 536:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2764
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2768
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2774
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2778
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2788
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2792
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2796
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2802
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2808
		{
			yyVAL.aliasedTableName = yyDollar[2].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
		}
	case 547:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2813
		{
			yyVAL.aliasedTableName = yyDollar[6].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
			yyVAL.aliasedTableName.Partitions = yyDollar[4].partitions
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2824
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Hints: yyDollar[1].indexHints}
		}
	case 549:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2828
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, Hints: yyDollar[4].indexHints}
		}
	case 550:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2832
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, As: yyDollar[5].tableIdent, Hints: yyDollar[6].indexHints}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2836
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2840
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[1].tableIdent, Hints: yyDollar[2].indexHints}
		}
	case 553:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2851
		{
			yyVAL.expr = nil
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2855
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2861
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2865
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2871
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2875
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 559:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2888
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 560:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2892
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 561:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2896
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2900
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2906
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 564:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2908
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 565:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2912
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2914
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2918
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2920
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2923
		{
			yyVAL.empty = struct{}{}
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2925
		{
			yyVAL.empty = struct{}{}
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2930
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2934
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2940
		{
			yyVAL.str = JoinStr
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2944
		{
			yyVAL.str = JoinStr
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2948
		{
			yyVAL.str = JoinStr
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2954
		{
			yyVAL.str = StraightJoinStr
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2960
		{
			yyVAL.str = LeftJoinStr
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2964
		{
			yyVAL.str = LeftJoinStr
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2968
		{
			yyVAL.str = RightJoinStr
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2972
		{
			yyVAL.str = RightJoinStr
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2978
		{
			yyVAL.str = NaturalJoinStr
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2982
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2992
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2996
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3002
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3006
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3012
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 589:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3017
		{
			yyVAL.indexHints = nil
		}
	case 590:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3021
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 591:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3025
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 592:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3029
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 593:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3034
		{
			yyVAL.expr = nil
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3038
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3044
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3048
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3052
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3056
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3060
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3064
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3068
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 602:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3074
		{
			yyVAL.str = ""
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3078
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3084
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3088
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3094
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3098
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 608:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3102
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 609:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3106
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 610:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3110
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3114
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 612:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3118
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 613:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3122
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 614:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3126
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 615:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3130
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3136
		{
			yyVAL.str = IsNullStr
		}
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3140
		{
			yyVAL.str = IsNotNullStr
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3144
		{
			yyVAL.str = IsTrueStr
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3148
		{
			yyVAL.str = IsNotTrueStr
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3152
		{
			yyVAL.str = IsFalseStr
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3156
		{
			yyVAL.str = IsNotFalseStr
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3162
		{
			yyVAL.str = EqualStr
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3166
		{
			yyVAL.str = LessThanStr
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3170
		{
			yyVAL.str = GreaterThanStr
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3174
		{
			yyVAL.str = LessEqualStr
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3178
		{
			yyVAL.str = GreaterEqualStr
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3182
		{
			yyVAL.str = NotEqualStr
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3186
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 629:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3191
		{
			yyVAL.expr = nil
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3195
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3201
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3205
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3209
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3215
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3221
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3225
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3231
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3235
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3239
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3243
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3247
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3251
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3255
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3259
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3263
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3267
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3271
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3275
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 649:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3279
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 650:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3283
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 651:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3287
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3291
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3295
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3299
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3303
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3307
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3311
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 658:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3315
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3319
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3323
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3331
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3345
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3349
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 664:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3353
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 671:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3373
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: yyDollar[3].str == DistinctStr, Exprs: yyDollar[4].selectExprs}
		}
	case 672:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3377
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 673:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3387
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 674:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3391
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 675:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3395
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 676:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3399
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 677:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3403
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 678:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3407
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 679:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3411
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 680:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3415
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 681:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3419
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 682:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3423
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 683:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3427
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 684:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3431
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 685:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3435
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 686:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3439
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[4].selectExprs, Distinct: yyDollar[3].str == DistinctStr, Over: yyDollar[6].over}
		}
	case 687:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3443
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 688:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3447
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 689:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3451
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 690:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3460
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 691:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3464
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 692:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3468
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: SelectExprs{yyDollar[3].selectExpr}, Over: yyDollar[5].over}
		}
	case 693:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3472
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 694:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3476
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: SelectExprs{yyDollar[3].selectExpr}, Over: yyDollar[5].over}
		}
	case 695:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3480
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 696:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3484
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Exprs: yyDollar[3].selectExprs, Over: yyDollar[5].over}
		}
	case 697:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3488
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 698:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3492
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 699:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3496
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 700:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3500
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Over: yyDollar[4].over}
		}
	case 701:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3510
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 702:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3514
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 703:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3518
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema")}
		}
	case 704:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3522
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 705:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3526
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 706:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3530
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 707:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3534
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 708:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3538
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 709:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3542
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 710:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3546
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 711:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3550
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 712:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3554
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("first"), Exprs: yyDollar[3].selectExprs}
		}
	case 713:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3558
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 714:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3562
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 715:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3566
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 716:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3576
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 717:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3580
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 718:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3584
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 719:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3589
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 720:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3594
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 721:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3599
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 722:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3605
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 723:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3610
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 724:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3614
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_user")}
		}
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3619
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 726:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3623
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 727:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3627
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 728:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3632
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 729:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3637
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 730:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3642
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 731:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3646
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 732:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3650
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 735:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3660
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 736:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3670
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 737:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3674
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 738:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3678
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 739:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3682
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 740:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3686
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 741:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3690
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 742:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3696
		{
			yyVAL.str = ""
		}
	case 743:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3700
		{
			yyVAL.str = BooleanModeStr
		}
	case 744:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3704
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 745:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3708
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 746:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3712
		{
			yyVAL.str = QueryExpansionStr
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3718
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3722
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 749:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3728
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 750:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3732
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 751:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3736
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3740
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 753:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3744
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 754:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3748
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3754
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 756:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3758
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3762
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 758:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3766
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 759:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3770
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3774
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 761:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3778
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 762:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3783
		{
			yyVAL.expr = nil
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3787
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 764:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3792
		{
			yyVAL.str = string("")
		}
	case 765:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3796
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3802
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 767:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3806
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 768:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3812
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 769:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3817
		{
			yyVAL.expr = nil
		}
	case 770:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3821
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3827
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 772:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3831
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 773:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3835
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3841
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3845
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3849
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3853
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3857
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3861
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3865
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3869
		{
			yyVAL.expr = &NullVal{}
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3875
		{
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 783:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3879
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 784:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3883
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 785:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3888
		{
			yyVAL.exprs = nil
		}
	case 786:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3892
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3898
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 788:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3902
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3908
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3912
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 791:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3917
		{
			yyVAL.expr = nil
		}
	case 792:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3921
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3927
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3931
		{
			yyVAL.expr = &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}
		}
	case 795:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3936
		{
			yyVAL.orderBy = nil
		}
	case 796:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3940
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3946
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 798:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3950
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 799:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3956
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 800:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3960
		{
			yyVAL.order = &Order{Expr: &ColName{Name: NewColIdent(string(yyDollar[1].bytes))}, Direction: yyDollar[2].str}
		}
	case 801:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3965
		{
			yyVAL.str = AscScr
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3969
		{
			yyVAL.str = AscScr
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3973
		{
			yyVAL.str = DescScr
		}
	case 804:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3978
		{
			yyVAL.limit = nil
		}
	case 805:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3982
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 806:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3986
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 807:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3990
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 808:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3995
		{
			yyVAL.str = ""
		}
	case 809:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3999
		{
			yyVAL.str = ForUpdateStr
		}
	case 810:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4003
		{
			yyVAL.str = ShareModeStr
		}
	case 811:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4016
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4020
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 813:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4024
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 814:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4029
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 815:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:4033
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 816:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:4037
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4044
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 818:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4048
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 819:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4052
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 820:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4056
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 821:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4061
		{
			yyVAL.setExprs = nil
		}
	case 822:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:4065
		{
			yyVAL.setExprs = yyDollar[5].setExprs
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4071
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 824:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4075
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4081
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 826:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4085
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 827:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4091
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4097
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4107
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 830:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4111
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 831:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4117
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: NewStrVal([]byte("on"))}
		}
	case 832:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4121
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: NewStrVal([]byte("off"))}
		}
	case 833:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4125
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 834:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4129
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 836:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4136
		{
			yyVAL.bytes = []byte("charset")
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4143
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4147
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4151
		{
			yyVAL.expr = &Default{}
		}
	case 843:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4160
		{
			yyVAL.byt = 0
		}
	case 844:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4162
		{
			yyVAL.byt = 1
		}
	case 845:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4165
		{
			yyVAL.byt = 0
		}
	case 846:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:4167
		{
			yyVAL.byt = 1
		}
	case 847:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4170
		{
			yyVAL.str = ""
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4172
		{
			yyVAL.str = IgnoreStr
		}
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4176
		{
			yyVAL.empty = struct{}{}
		}
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4178
		{
			yyVAL.empty = struct{}{}
		}
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4180
		{
			yyVAL.empty = struct{}{}
		}
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4182
		{
			yyVAL.empty = struct{}{}
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4184
		{
			yyVAL.empty = struct{}{}
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4186
		{
			yyVAL.empty = struct{}{}
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4188
		{
			yyVAL.empty = struct{}{}
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4190
		{
			yyVAL.empty = struct{}{}
		}
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4192
		{
			yyVAL.empty = struct{}{}
		}
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4196
		{
			yyVAL.empty = struct{}{}
		}
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4198
		{
			yyVAL.empty = struct{}{}
		}
	case 860:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4201
		{
			yyVAL.empty = struct{}{}
		}
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4203
		{
			yyVAL.empty = struct{}{}
		}
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4205
		{
			yyVAL.empty = struct{}{}
		}
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4209
		{
			yyVAL.str = UniqueStr
		}
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4211
		{
			yyVAL.str = FulltextStr
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4213
		{
			yyVAL.str = SpatialStr
		}
	case 866:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4216
		{
			yyVAL.str = ""
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4218
		{
			yyVAL.str = yyDollar[1].str
		}
	case 868:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4221
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 869:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:4223
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4227
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4231
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4238
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4244
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4248
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4255
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4636
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4645
		{
			decNesting(yylex)
		}
	case 1231:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4650
		{
			skipToEnd(yylex)
		}
	case 1232:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4655
		{
			skipToEnd(yylex)
		}
	case 1233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4659
		{
			skipToEnd(yylex)
		}
	case 1234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4663
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
