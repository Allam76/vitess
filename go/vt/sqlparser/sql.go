// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func yyPosition(yylex interface{}) int {
	return yylex.(*Tokenizer).Position
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:57
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	int                   int
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	statements            Statements
	partitions            Partitions
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	joinCondition         JoinCondition
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	asOf                  *AsOf
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	sqlVal                *SQLVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	setExprs              SetExprs
	setExpr               *SetExpr
	colIdent              ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	TableSpec             *TableSpec
	columnType            ColumnType
	columnOrder           *ColumnOrder
	triggerOrder          *TriggerOrder
	colKeyOpt             ColumnKeyOption
	optVal                Expr
	LengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexInfo             *IndexInfo
	indexOption           *IndexOption
	indexOptions          []*IndexOption
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	constraintDefinition  *ConstraintDefinition
	constraintInfo        ConstraintInfo
	ReferenceAction       ReferenceAction
	partDefs              []*PartitionDefinition
	partDef               *PartitionDefinition
	partSpec              *PartitionSpec
	vindexParam           VindexParam
	vindexParams          []VindexParam
	showFilter            *ShowFilter
	optLike               *OptLike
	caseStatementCases    []CaseStatementCase
	caseStatementCase     CaseStatementCase
	ifStatementConditions []IfStatementCondition
	ifStatementCondition  IfStatementCondition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const UNLOCK = 57373
const KEYS = 57374
const UNIQUE = 57375
const KEY = 57376
const SYSTEM_TIME = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const INTEGRAL = 57401
const FLOAT = 57402
const HEXNUM = 57403
const VALUE_ARG = 57404
const LIST_ARG = 57405
const COMMENT = 57406
const COMMENT_KEYWORD = 57407
const BIT_LITERAL = 57408
const NULL = 57409
const TRUE = 57410
const FALSE = 57411
const OFF = 57412
const OR = 57413
const AND = 57414
const NOT = 57415
const BETWEEN = 57416
const CASE = 57417
const WHEN = 57418
const THEN = 57419
const ELSE = 57420
const ELSEIF = 57421
const END = 57422
const LE = 57423
const GE = 57424
const NE = 57425
const NULL_SAFE_EQUAL = 57426
const IS = 57427
const LIKE = 57428
const REGEXP = 57429
const IN = 57430
const SHIFT_LEFT = 57431
const SHIFT_RIGHT = 57432
const DIV = 57433
const MOD = 57434
const UNARY = 57435
const COLLATE = 57436
const BINARY = 57437
const UNDERSCORE_BINARY = 57438
const UNDERSCORE_UTF8MB4 = 57439
const INTERVAL = 57440
const JSON_EXTRACT_OP = 57441
const JSON_UNQUOTE_EXTRACT_OP = 57442
const CREATE = 57443
const ALTER = 57444
const DROP = 57445
const RENAME = 57446
const ANALYZE = 57447
const ADD = 57448
const FLUSH = 57449
const MODIFY = 57450
const CHANGE = 57451
const SCHEMA = 57452
const TABLE = 57453
const INDEX = 57454
const INDEXES = 57455
const VIEW = 57456
const TO = 57457
const IGNORE = 57458
const IF = 57459
const PRIMARY = 57460
const COLUMN = 57461
const SPATIAL = 57462
const FULLTEXT = 57463
const KEY_BLOCK_SIZE = 57464
const CHECK = 57465
const ACTION = 57466
const CASCADE = 57467
const CONSTRAINT = 57468
const FOREIGN = 57469
const NO = 57470
const REFERENCES = 57471
const RESTRICT = 57472
const FIRST = 57473
const AFTER = 57474
const SHOW = 57475
const DESCRIBE = 57476
const EXPLAIN = 57477
const DATE = 57478
const ESCAPE = 57479
const REPAIR = 57480
const OPTIMIZE = 57481
const TRUNCATE = 57482
const FORMAT = 57483
const MAXVALUE = 57484
const PARTITION = 57485
const REORGANIZE = 57486
const LESS = 57487
const THAN = 57488
const PROCEDURE = 57489
const TRIGGER = 57490
const VINDEX = 57491
const VINDEXES = 57492
const STATUS = 57493
const VARIABLES = 57494
const WARNINGS = 57495
const SEQUENCE = 57496
const EACH = 57497
const ROW = 57498
const BEFORE = 57499
const FOLLOWS = 57500
const PRECEDES = 57501
const DEFINER = 57502
const BEGIN = 57503
const START = 57504
const TRANSACTION = 57505
const COMMIT = 57506
const ROLLBACK = 57507
const BIT = 57508
const TINYINT = 57509
const SMALLINT = 57510
const MEDIUMINT = 57511
const INT = 57512
const INTEGER = 57513
const BIGINT = 57514
const INTNUM = 57515
const REAL = 57516
const DOUBLE = 57517
const FLOAT_TYPE = 57518
const DECIMAL = 57519
const NUMERIC = 57520
const DEC = 57521
const FIXED = 57522
const PRECISION = 57523
const TIME = 57524
const TIMESTAMP = 57525
const DATETIME = 57526
const YEAR = 57527
const CHAR = 57528
const VARCHAR = 57529
const BOOL = 57530
const CHARACTER = 57531
const VARBINARY = 57532
const NCHAR = 57533
const NVARCHAR = 57534
const NATIONAL = 57535
const VARYING = 57536
const TEXT = 57537
const TINYTEXT = 57538
const MEDIUMTEXT = 57539
const LONGTEXT = 57540
const LONG = 57541
const BLOB = 57542
const TINYBLOB = 57543
const MEDIUMBLOB = 57544
const LONGBLOB = 57545
const JSON = 57546
const ENUM = 57547
const GEOMETRY = 57548
const POINT = 57549
const LINESTRING = 57550
const POLYGON = 57551
const GEOMETRYCOLLECTION = 57552
const MULTIPOINT = 57553
const MULTILINESTRING = 57554
const MULTIPOLYGON = 57555
const NULLX = 57556
const AUTO_INCREMENT = 57557
const APPROXNUM = 57558
const SIGNED = 57559
const UNSIGNED = 57560
const ZEROFILL = 57561
const COLLATION = 57562
const DATABASES = 57563
const SCHEMAS = 57564
const TABLES = 57565
const VITESS_METADATA = 57566
const VSCHEMA = 57567
const FULL = 57568
const PROCESSLIST = 57569
const COLUMNS = 57570
const FIELDS = 57571
const ENGINES = 57572
const PLUGINS = 57573
const NAMES = 57574
const CHARSET = 57575
const GLOBAL = 57576
const SESSION = 57577
const ISOLATION = 57578
const LEVEL = 57579
const READ = 57580
const WRITE = 57581
const ONLY = 57582
const REPEATABLE = 57583
const COMMITTED = 57584
const UNCOMMITTED = 57585
const SERIALIZABLE = 57586
const CURRENT_TIMESTAMP = 57587
const DATABASE = 57588
const CURRENT_DATE = 57589
const CURRENT_TIME = 57590
const LOCALTIME = 57591
const LOCALTIMESTAMP = 57592
const UTC_DATE = 57593
const UTC_TIME = 57594
const UTC_TIMESTAMP = 57595
const REPLACE = 57596
const CONVERT = 57597
const CAST = 57598
const SUBSTR = 57599
const SUBSTRING = 57600
const GROUP_CONCAT = 57601
const SEPARATOR = 57602
const TIMESTAMPADD = 57603
const TIMESTAMPDIFF = 57604
const MATCH = 57605
const AGAINST = 57606
const BOOLEAN = 57607
const LANGUAGE = 57608
const WITH = 57609
const QUERY = 57610
const EXPANSION = 57611
const UNUSED = 57612
const ARRAY = 57613
const CUME_DIST = 57614
const DESCRIPTION = 57615
const DENSE_RANK = 57616
const EMPTY = 57617
const EXCEPT = 57618
const FIRST_VALUE = 57619
const GROUPING = 57620
const GROUPS = 57621
const JSON_TABLE = 57622
const LAG = 57623
const LAST_VALUE = 57624
const LATERAL = 57625
const LEAD = 57626
const MEMBER = 57627
const NTH_VALUE = 57628
const NTILE = 57629
const OF = 57630
const OVER = 57631
const PERCENT_RANK = 57632
const RANK = 57633
const RECURSIVE = 57634
const ROW_NUMBER = 57635
const SYSTEM = 57636
const WINDOW = 57637
const ACTIVE = 57638
const ADMIN = 57639
const BUCKETS = 57640
const CLONE = 57641
const COMPONENT = 57642
const DEFINITION = 57643
const ENFORCED = 57644
const EXCLUDE = 57645
const FOLLOWING = 57646
const GEOMCOLLECTION = 57647
const GET_MASTER_PUBLIC_KEY = 57648
const HISTOGRAM = 57649
const HISTORY = 57650
const INACTIVE = 57651
const INVISIBLE = 57652
const LOCKED = 57653
const MASTER_COMPRESSION_ALGORITHMS = 57654
const MASTER_PUBLIC_KEY_PATH = 57655
const MASTER_TLS_CIPHERSUITES = 57656
const MASTER_ZSTD_COMPRESSION_LEVEL = 57657
const NESTED = 57658
const NETWORK_NAMESPACE = 57659
const NOWAIT = 57660
const NULLS = 57661
const OJ = 57662
const OLD = 57663
const OPTIONAL = 57664
const ORDINALITY = 57665
const ORGANIZATION = 57666
const OTHERS = 57667
const PATH = 57668
const PERSIST = 57669
const PERSIST_ONLY = 57670
const PRECEDING = 57671
const PRIVILEGE_CHECKS_USER = 57672
const PROCESS = 57673
const RANDOM = 57674
const REFERENCE = 57675
const REQUIRE_ROW_FORMAT = 57676
const RESOURCE = 57677
const RESPECT = 57678
const RESTART = 57679
const RETAIN = 57680
const REUSE = 57681
const ROLE = 57682
const SECONDARY = 57683
const SECONDARY_ENGINE = 57684
const SECONDARY_LOAD = 57685
const SECONDARY_UNLOAD = 57686
const SKIP = 57687
const SRID = 57688
const THREAD_PRIORITY = 57689
const TIES = 57690
const UNBOUNDED = 57691
const VCPU = 57692
const VISIBLE = 57693

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"UNIQUE",
	"KEY",
	"SYSTEM_TIME",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"ELSEIF",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"MODIFY",
	"CHANGE",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"INDEXES",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"FIRST",
	"AFTER",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"FORMAT",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"EACH",
	"ROW",
	"BEFORE",
	"FOLLOWS",
	"PRECEDES",
	"DEFINER",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DEC",
	"FIXED",
	"PRECISION",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NATIONAL",
	"VARYING",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"LONG",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 31,
	-2, 4,
	-1, 33,
	165, 78,
	-2, 735,
	-1, 41,
	168, 387,
	169, 387,
	-2, 375,
	-1, 48,
	1, 1038,
	369, 1038,
	-2, 406,
	-1, 334,
	115, 743,
	-2, 739,
	-1, 335,
	115, 744,
	-2, 740,
	-1, 405,
	85, 994,
	115, 994,
	-2, 67,
	-1, 406,
	85, 912,
	115, 912,
	-2, 68,
	-1, 411,
	85, 881,
	115, 881,
	-2, 703,
	-1, 413,
	85, 942,
	115, 942,
	-2, 705,
	-1, 598,
	5, 31,
	-2, 400,
	-1, 602,
	5, 31,
	-2, 399,
	-1, 729,
	1, 451,
	5, 451,
	12, 451,
	13, 451,
	14, 451,
	15, 451,
	17, 451,
	19, 451,
	29, 451,
	30, 451,
	44, 451,
	45, 451,
	46, 451,
	47, 451,
	48, 451,
	50, 451,
	51, 451,
	54, 451,
	55, 451,
	57, 451,
	58, 451,
	369, 451,
	-2, 476,
	-1, 732,
	55, 48,
	57, 48,
	-2, 52,
	-1, 895,
	115, 746,
	-2, 742,
	-1, 1098,
	56, 319,
	59, 319,
	-2, 284,
	-1, 1147,
	5, 32,
	-2, 540,
	-1, 1178,
	5, 31,
	-2, 680,
	-1, 1271,
	5, 31,
	-2, 69,
	-1, 1380,
	1, 495,
	5, 495,
	12, 495,
	13, 495,
	14, 495,
	15, 495,
	17, 495,
	19, 495,
	29, 495,
	30, 495,
	44, 495,
	45, 495,
	46, 495,
	47, 495,
	48, 495,
	50, 495,
	51, 495,
	54, 495,
	55, 495,
	57, 495,
	58, 495,
	369, 495,
	-2, 476,
	-1, 1483,
	5, 32,
	-2, 681,
	-1, 1513,
	5, 31,
	-2, 69,
	-1, 1551,
	5, 31,
	-2, 683,
	-1, 1637,
	5, 32,
	-2, 684,
	-1, 1687,
	369, 106,
	-2, 31,
}

const yyPrivate = 57344

const yyLast = 17637

var yyAct = [...]int{

	366, 54, 1719, 1685, 1686, 1739, 1710, 1682, 1681, 1496,
	1690, 7, 1447, 1641, 1689, 6, 1625, 1565, 1316, 1694,
	335, 302, 1071, 1013, 1393, 1531, 1360, 1688, 5, 401,
	1691, 8, 683, 365, 980, 1516, 982, 871, 1642, 1069,
	1687, 3, 1394, 984, 313, 1361, 352, 1022, 976, 1064,
	1357, 1026, 86, 416, 1367, 54, 1286, 1012, 1333, 1226,
	101, 920, 1371, 101, 933, 1292, 1293, 318, 1093, 101,
	339, 303, 304, 1019, 848, 307, 1059, 726, 745, 956,
	1263, 967, 64, 948, 614, 404, 978, 328, 897, 620,
	725, 744, 399, 447, 101, 308, 422, 635, 322, 101,
	960, 101, 337, 396, 1204, 832, 734, 1754, 1751, 1742,
	1736, 1735, 101, 1705, 434, 63, 1289, 1698, 101, 1652,
	1680, 1635, 1669, 1448, 699, 68, 626, 1651, 1350, 1634,
	1475, 700, 421, 1388, 1007, 326, 957, 746, 570, 747,
	445, 1001, 55, 29, 30, 407, 1213, 306, 332, 1212,
	305, 1047, 1214, 70, 71, 72, 73, 74, 96, 92,
	93, 1109, 94, 31, 1389, 1390, 341, 1002, 1003, 595,
	310, 588, 312, 1246, 1108, 589, 586, 587, 1033, 1318,
	424, 379, 426, 385, 386, 383, 384, 382, 381, 380,
	26, 1035, 55, 29, 30, 1035, 1538, 387, 388, 26,
	1048, 55, 29, 30, 1466, 1113, 569, 572, 1039, 1041,
	574, 1040, 1060, 31, 1107, 1601, 648, 647, 657, 658,
	650, 651, 652, 653, 654, 655, 656, 649, 1464, 1053,
	659, 1048, 297, 1655, 1656, 1078, 1643, 1619, 581, 582,
	61, 593, 594, 571, 573, 1319, 1320, 859, 425, 61,
	862, 1679, 1668, 861, 1626, 1315, 961, 1517, 1518, 1617,
	1077, 1027, 1724, 1695, 1297, 1104, 1099, 1100, 1753, 1098,
	1755, 1101, 1102, 1566, 1748, 444, 423, 444, 444, 299,
	312, 311, 444, 431, 444, 26, 1568, 55, 29, 30,
	444, 860, 101, 863, 95, 434, 88, 434, 434, 54,
	54, 1526, 434, 1277, 434, 824, 1111, 1114, 31, 599,
	434, 1525, 1677, 601, 816, 300, 1029, 1312, 1696, 54,
	1203, 1202, 951, 1201, 419, 1029, 600, 604, 605, 1029,
	608, 101, 271, 91, 668, 61, 1608, 670, 1486, 598,
	602, 1227, 568, 1048, 985, 987, 1253, 1157, 1121, 434,
	1038, 1120, 1106, 1154, 1062, 1217, 1714, 1567, 1695, 623,
	1633, 1209, 1677, 1741, 1136, 681, 869, 685, 686, 687,
	688, 689, 690, 691, 692, 693, 694, 695, 1105, 698,
	701, 701, 701, 707, 701, 701, 707, 701, 715, 716,
	717, 718, 719, 720, 26, 730, 55, 29, 30, 622,
	90, 89, 617, 621, 1602, 56, 1008, 682, 659, 671,
	672, 1028, 753, 1696, 101, 101, 101, 31, 1110, 640,
	1028, 1524, 740, 639, 1028, 986, 439, 1311, 1412, 434,
	866, 1308, 742, 1112, 997, 649, 101, 1029, 659, 849,
	434, 1086, 444, 444, 61, 624, 854, 101, 417, 1025,
	1029, 101, 671, 672, 684, 56, 101, 1677, 671, 672,
	101, 904, 434, 434, 56, 697, 634, 1695, 1352, 1712,
	632, 1740, 1713, 407, 1711, 417, 902, 903, 901, 1615,
	1413, 724, 415, 88, 633, 632, 578, 634, 613, 430,
	1720, 673, 674, 675, 676, 677, 678, 679, 680, 733,
	77, 949, 634, 669, 738, 702, 704, 706, 708, 710,
	712, 713, 703, 705, 1029, 709, 711, 26, 714, 55,
	29, 30, 1696, 850, 81, 1087, 26, 1590, 55, 29,
	30, 748, 1028, 834, 825, 818, 603, 78, 1301, 1297,
	31, 427, 1747, 1298, 1153, 1028, 1305, 1307, 1400, 31,
	56, 1023, 610, 1024, 611, 633, 632, 612, 1288, 1021,
	1027, 729, 1750, 1302, 1732, 61, 1677, 61, 872, 873,
	579, 444, 444, 634, 444, 900, 61, 83, 85, 590,
	1334, 80, 444, 444, 435, 436, 437, 90, 89, 309,
	1695, 434, 434, 101, 434, 101, 633, 632, 101, 1695,
	1725, 629, 434, 434, 1716, 1639, 1152, 1238, 1151, 1028,
	444, 1511, 1243, 1242, 634, 1301, 1297, 868, 633, 632,
	1298, 24, 1336, 1299, 1300, 633, 632, 87, 1510, 101,
	434, 606, 1268, 1239, 101, 949, 634, 1165, 1266, 1287,
	1302, 1616, 1726, 634, 1247, 1696, 434, 1244, 1720, 1236,
	1728, 101, 1727, 1545, 1696, 1237, 867, 434, 1508, 56,
	592, 393, 394, 1338, 1427, 837, 838, 874, 1342, 1405,
	1337, 54, 1335, 633, 632, 1264, 898, 1340, 851, 652,
	653, 654, 655, 656, 649, 1095, 685, 659, 317, 1677,
	1339, 634, 633, 632, 633, 632, 1560, 1670, 1677, 1734,
	921, 434, 922, 1341, 1343, 1744, 1740, 1743, 1502, 1667,
	634, 682, 634, 82, 1241, 1666, 887, 889, 890, 1665,
	884, 885, 888, 876, 1647, 607, 931, 1133, 1134, 1135,
	1215, 979, 1216, 895, 891, 730, 434, 434, 1613, 730,
	1584, 852, 1227, 101, 1581, 893, 633, 632, 417, 1502,
	1644, 101, 101, 1721, 1430, 101, 101, 417, 1522, 101,
	101, 101, 938, 941, 634, 633, 632, 1560, 1629, 950,
	1450, 682, 1354, 684, 924, 925, 434, 936, 937, 1445,
	894, 1441, 56, 634, 1502, 1618, 1560, 1609, 1560, 1571,
	896, 56, 1438, 905, 906, 907, 908, 909, 910, 911,
	912, 913, 914, 915, 916, 917, 918, 919, 927, 899,
	1017, 1240, 407, 1560, 607, 1502, 1501, 607, 444, 1436,
	444, 992, 946, 932, 934, 994, 1435, 998, 940, 943,
	944, 945, 995, 990, 834, 999, 1006, 101, 434, 1284,
	434, 1488, 607, 1579, 101, 101, 1283, 895, 101, 1222,
	952, 1485, 607, 1575, 955, 1084, 958, 959, 1083, 1010,
	923, 1066, 1067, 1068, 1420, 1419, 1416, 1417, 101, 26,
	101, 101, 1416, 1415, 964, 607, 101, 1148, 607, 736,
	101, 101, 101, 101, 101, 1061, 1063, 929, 607, 1205,
	856, 831, 1176, 830, 1009, 1137, 1014, 729, 822, 1177,
	820, 729, 819, 817, 441, 729, 648, 647, 657, 658,
	650, 651, 652, 653, 654, 655, 656, 649, 1574, 61,
	659, 756, 755, 737, 1406, 739, 1049, 1050, 1051, 1052,
	1358, 65, 736, 741, 964, 898, 657, 658, 650, 651,
	652, 653, 654, 655, 656, 649, 875, 1030, 659, 26,
	1205, 991, 1324, 735, 741, 1123, 1124, 929, 621, 1126,
	1125, 1179, 1180, 895, 1094, 730, 730, 730, 730, 730,
	1481, 1589, 26, 1148, 1142, 1010, 737, 964, 735, 1550,
	979, 963, 1197, 1418, 1218, 101, 101, 101, 101, 101,
	1138, 1000, 730, 1181, 1148, 741, 1170, 101, 1148, 61,
	101, 1178, 1169, 1082, 101, 928, 930, 1145, 735, 964,
	894, 935, 101, 870, 823, 61, 1317, 1146, 1132, 1653,
	931, 1200, 61, 319, 1645, 1582, 1533, 1199, 1512, 1035,
	1491, 1164, 1065, 434, 407, 1399, 1219, 1166, 1372, 1373,
	882, 1060, 1221, 1183, 1184, 1055, 1186, 1054, 1070, 1534,
	1702, 1139, 1140, 1141, 1700, 1182, 1683, 1194, 1185, 1424,
	650, 651, 652, 653, 654, 655, 656, 649, 899, 1034,
	659, 1662, 54, 61, 1375, 1358, 1224, 1225, 1206, 1210,
	1269, 855, 444, 1162, 444, 444, 1228, 827, 1191, 1189,
	1650, 434, 1378, 1192, 1190, 1377, 1188, 1207, 1193, 1208,
	973, 974, 434, 101, 434, 434, 355, 354, 357, 358,
	359, 360, 1271, 1187, 1321, 356, 361, 323, 324, 1291,
	969, 972, 973, 974, 970, 1122, 971, 975, 1660, 627,
	628, 729, 729, 729, 729, 729, 1265, 1131, 1130, 1267,
	1548, 1440, 1229, 615, 1404, 1403, 729, 625, 101, 1223,
	1294, 1306, 1310, 1014, 616, 1257, 754, 434, 729, 442,
	1479, 872, 873, 1285, 1529, 1303, 1304, 1313, 1314, 1074,
	826, 1272, 1296, 627, 628, 1578, 1090, 977, 1363, 815,
	54, 314, 1256, 607, 1258, 1259, 1260, 1261, 1248, 1249,
	1282, 320, 321, 1595, 315, 1255, 65, 364, 1594, 1129,
	434, 434, 1382, 1383, 1384, 1262, 1359, 1128, 1328, 1536,
	1205, 1362, 1345, 1332, 1344, 1704, 1703, 1327, 434, 1158,
	1364, 648, 647, 657, 658, 650, 651, 652, 653, 654,
	655, 656, 649, 1155, 847, 659, 1381, 630, 434, 434,
	1703, 434, 434, 1290, 1392, 1351, 1144, 407, 1376, 1274,
	1275, 1276, 1379, 1353, 1147, 1149, 1704, 1150, 1605, 1402,
	865, 67, 69, 1156, 47, 62, 1159, 1160, 1161, 1,
	1396, 1295, 409, 1167, 1449, 1168, 1391, 1326, 1171, 1172,
	1530, 1173, 1174, 1103, 1397, 1398, 1369, 1385, 1624, 1020,
	101, 432, 1330, 1386, 1422, 1423, 1011, 76, 101, 414,
	75, 1196, 1614, 1346, 1347, 1085, 1348, 1349, 577, 1520,
	279, 1387, 1018, 1234, 1233, 1432, 1230, 1245, 1355, 1356,
	1032, 1232, 1231, 1235, 762, 730, 1437, 434, 760, 761,
	101, 434, 759, 764, 763, 1031, 434, 758, 282, 434,
	434, 434, 1426, 402, 749, 101, 1431, 1380, 1434, 631,
	84, 1473, 48, 1523, 1433, 1309, 1097, 79, 1326, 1014,
	853, 1014, 969, 972, 973, 974, 970, 1444, 971, 975,
	584, 585, 1372, 1373, 284, 667, 1428, 1127, 1211, 408,
	1365, 1654, 619, 1407, 1408, 1593, 1535, 1401, 1462, 1163,
	1411, 696, 947, 1498, 1499, 340, 886, 1414, 353, 350,
	351, 1089, 1409, 434, 434, 434, 877, 1175, 641, 1504,
	1480, 1455, 434, 338, 330, 1219, 728, 1494, 721, 968,
	434, 966, 965, 828, 54, 397, 1374, 1370, 1454, 1495,
	1500, 727, 1323, 591, 298, 1474, 1600, 881, 1429, 28,
	66, 325, 1476, 19, 18, 101, 17, 597, 20, 1505,
	21, 684, 1489, 22, 16, 15, 14, 428, 32, 36,
	1490, 35, 34, 1492, 1513, 10, 1273, 1076, 1331, 434,
	1738, 1718, 446, 1519, 446, 446, 1693, 1692, 1457, 446,
	1527, 446, 1363, 1396, 1515, 1552, 1521, 446, 23, 13,
	12, 729, 11, 9, 1671, 4, 316, 25, 2, 1528,
	0, 1557, 0, 0, 0, 0, 434, 434, 0, 434,
	0, 0, 434, 0, 101, 1362, 101, 0, 0, 0,
	0, 0, 0, 434, 0, 1551, 637, 1549, 1558, 0,
	1588, 0, 1014, 434, 1556, 0, 1577, 1576, 1580, 1559,
	1564, 1570, 0, 1591, 1506, 1569, 0, 434, 0, 1586,
	0, 1363, 0, 54, 434, 101, 0, 0, 0, 0,
	0, 0, 0, 0, 1587, 0, 0, 1507, 0, 1509,
	0, 0, 0, 0, 0, 0, 0, 1606, 0, 0,
	1583, 434, 1612, 0, 1362, 0, 0, 0, 0, 1532,
	0, 0, 0, 1607, 0, 0, 1610, 0, 0, 0,
	409, 1620, 0, 434, 0, 0, 750, 1621, 0, 1623,
	434, 434, 1537, 0, 1628, 1627, 0, 814, 1539, 1540,
	1541, 1542, 1543, 1622, 0, 0, 1546, 1547, 1631, 434,
	0, 0, 0, 0, 0, 1636, 0, 0, 101, 446,
	446, 0, 1572, 443, 1573, 0, 0, 434, 1649, 0,
	1456, 0, 0, 0, 0, 0, 1458, 0, 1657, 0,
	1612, 0, 1661, 1663, 1659, 0, 434, 1467, 1468, 0,
	1658, 0, 0, 0, 434, 1676, 407, 1664, 54, 1675,
	1697, 1678, 1630, 684, 1672, 0, 1482, 1483, 1484, 1699,
	1487, 1701, 1674, 0, 1684, 1673, 0, 0, 0, 0,
	0, 0, 1493, 0, 0, 0, 54, 0, 0, 0,
	1717, 1715, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1729, 54, 0, 0, 1731, 0, 0, 0, 54,
	1532, 1014, 1733, 0, 0, 54, 54, 54, 1737, 0,
	1717, 1717, 0, 54, 1745, 54, 1478, 1717, 1749, 0,
	0, 54, 54, 0, 1752, 54, 1717, 0, 0, 1717,
	0, 0, 0, 0, 0, 0, 0, 0, 446, 446,
	0, 446, 0, 0, 0, 0, 0, 0, 0, 446,
	446, 0, 0, 1706, 1707, 648, 647, 657, 658, 650,
	651, 652, 653, 654, 655, 656, 649, 1544, 0, 659,
	0, 0, 0, 292, 0, 0, 0, 446, 1730, 0,
	0, 731, 0, 0, 0, 0, 0, 0, 0, 1561,
	0, 1562, 1563, 878, 0, 0, 0, 0, 1746, 0,
	289, 0, 0, 0, 637, 1036, 1037, 446, 1042, 1043,
	1044, 1045, 1046, 0, 0, 0, 1708, 0, 0, 0,
	0, 98, 0, 0, 0, 0, 1056, 1057, 1058, 0,
	301, 0, 1596, 1597, 1598, 1599, 0, 0, 0, 1603,
	1604, 0, 0, 0, 0, 0, 0, 0, 926, 0,
	0, 0, 272, 0, 0, 398, 0, 0, 0, 275,
	418, 618, 420, 0, 0, 0, 409, 0, 0, 283,
	290, 291, 0, 429, 0, 0, 0, 0, 0, 438,
	0, 0, 0, 953, 954, 0, 0, 0, 0, 0,
	575, 576, 0, 1632, 0, 580, 0, 583, 0, 0,
	1637, 99, 0, 596, 296, 281, 0, 0, 0, 409,
	99, 288, 0, 0, 0, 0, 0, 1646, 0, 0,
	0, 446, 0, 446, 0, 0, 26, 27, 55, 29,
	30, 0, 329, 0, 977, 400, 410, 0, 0, 0,
	99, 0, 99, 0, 0, 60, 0, 273, 0, 31,
	51, 52, 0, 99, 0, 0, 0, 0, 0, 99,
	0, 0, 0, 0, 985, 987, 0, 0, 0, 0,
	0, 0, 42, 0, 0, 0, 61, 0, 285, 276,
	277, 0, 286, 287, 295, 446, 0, 446, 278, 280,
	0, 274, 294, 293, 0, 0, 0, 0, 0, 0,
	0, 1722, 1723, 0, 0, 0, 0, 0, 648, 647,
	657, 658, 650, 651, 652, 653, 654, 655, 656, 649,
	0, 0, 659, 647, 657, 658, 650, 651, 652, 653,
	654, 655, 656, 649, 0, 0, 659, 446, 33, 57,
	38, 37, 40, 0, 53, 986, 0, 0, 0, 0,
	0, 0, 0, 440, 0, 835, 836, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	41, 59, 58, 1472, 0, 49, 50, 39, 1250, 1251,
	1252, 1254, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 609, 0, 643, 1477, 646, 0, 43, 44,
	0, 45, 46, 660, 661, 662, 663, 664, 665, 666,
	0, 644, 645, 642, 648, 647, 657, 658, 650, 651,
	652, 653, 654, 655, 656, 649, 0, 0, 659, 0,
	0, 409, 0, 99, 648, 647, 657, 658, 650, 651,
	652, 653, 654, 655, 656, 649, 0, 0, 659, 1471,
	648, 647, 657, 658, 650, 651, 652, 653, 654, 655,
	656, 649, 0, 0, 659, 0, 0, 0, 0, 0,
	0, 0, 99, 0, 0, 723, 0, 732, 0, 0,
	446, 0, 0, 0, 839, 840, 0, 842, 1470, 0,
	0, 56, 0, 0, 0, 845, 846, 757, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 821, 0,
	0, 0, 398, 0, 0, 0, 0, 829, 0, 0,
	0, 0, 0, 858, 0, 0, 648, 647, 657, 658,
	650, 651, 652, 653, 654, 655, 656, 649, 1270, 1469,
	659, 0, 0, 0, 0, 0, 0, 0, 0, 446,
	0, 446, 446, 0, 0, 99, 99, 99, 0, 0,
	0, 0, 0, 0, 410, 648, 647, 657, 658, 650,
	651, 652, 653, 654, 655, 656, 649, 99, 0, 659,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 0,
	0, 0, 99, 1410, 0, 0, 0, 99, 0, 0,
	0, 833, 0, 0, 446, 0, 0, 0, 0, 0,
	1329, 0, 0, 0, 0, 0, 648, 647, 657, 658,
	650, 651, 652, 653, 654, 655, 656, 649, 0, 0,
	659, 648, 647, 657, 658, 650, 651, 652, 653, 654,
	655, 656, 649, 0, 409, 659, 0, 1366, 1368, 0,
	0, 0, 0, 0, 841, 0, 843, 0, 0, 844,
	0, 0, 0, 0, 0, 1368, 0, 0, 0, 0,
	0, 0, 0, 0, 1459, 1460, 1143, 1461, 0, 0,
	1463, 0, 1465, 0, 0, 446, 446, 0, 446, 1395,
	857, 0, 0, 0, 0, 864, 0, 648, 647, 657,
	658, 650, 651, 652, 653, 654, 655, 656, 649, 0,
	0, 659, 883, 648, 647, 657, 658, 650, 651, 652,
	653, 654, 655, 656, 649, 0, 0, 659, 0, 0,
	0, 1073, 0, 1075, 99, 1503, 99, 0, 0, 99,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 0, 0, 0, 1439, 99, 0, 0, 1443, 0,
	0, 0, 0, 1446, 0, 0, 1451, 1452, 1453, 0,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 0,
	0, 833, 0, 0, 962, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 993, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 329, 329,
	1497, 1497, 1497, 329, 329, 329, 329, 0, 0, 446,
	410, 0, 0, 0, 0, 0, 0, 1497, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 329,
	329, 329, 329, 0, 99, 0, 0, 0, 0, 0,
	0, 0, 99, 988, 0, 0, 99, 99, 1072, 0,
	99, 996, 833, 410, 0, 1079, 1080, 0, 0, 1081,
	0, 0, 0, 0, 0, 833, 446, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1088,
	0, 0, 0, 0, 0, 0, 0, 1096, 0, 0,
	0, 1115, 1116, 1117, 1118, 1119, 0, 0, 0, 0,
	0, 0, 0, 1553, 1554, 0, 1555, 0, 0, 1497,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1395, 0, 0, 0, 0, 0, 0, 0, 99, 0,
	1395, 0, 0, 0, 0, 99, 99, 0, 0, 99,
	0, 0, 0, 0, 1585, 1278, 0, 1280, 1281, 0,
	0, 1497, 0, 0, 0, 0, 0, 0, 0, 99,
	0, 1091, 1092, 0, 0, 0, 0, 99, 0, 0,
	0, 99, 99, 99, 99, 99, 0, 784, 1611, 0,
	0, 833, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 329, 0, 0, 0, 0, 0, 0,
	1395, 0, 0, 0, 0, 0, 0, 446, 446, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 409, 0, 0, 1638, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 329,
	0, 0, 0, 0, 1648, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 329, 771,
	0, 0, 0, 1395, 0, 0, 0, 0, 0, 0,
	0, 1497, 0, 0, 0, 410, 99, 99, 99, 99,
	99, 0, 0, 0, 0, 0, 0, 0, 1195, 0,
	0, 99, 0, 0, 0, 988, 0, 0, 0, 0,
	0, 785, 0, 99, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1279, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 798, 801, 802, 803, 804, 805, 806, 0, 807,
	808, 809, 810, 811, 812, 813, 0, 786, 787, 788,
	789, 765, 769, 799, 766, 772, 768, 770, 767, 1322,
	773, 774, 775, 776, 777, 778, 779, 780, 781, 782,
	783, 790, 791, 792, 793, 794, 795, 796, 797, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	800, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 329,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 410, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1421, 0, 0, 0, 0, 0, 0, 0, 1425,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1442, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 0, 0, 0, 0, 0, 0, 0, 99,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1514, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1592, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 988, 0, 988, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 0, 0, 1640,
	0, 0, 0, 0, 0, 0, 0, 555, 543, 0,
	500, 558, 472, 490, 566, 491, 494, 531, 457, 513,
	185, 488, 0, 476, 452, 483, 453, 474, 502, 131,
	471, 545, 516, 557, 157, 556, 506, 0, 564, 159,
	522, 0, 231, 173, 0, 0, 504, 547, 511, 540,
	499, 532, 462, 521, 559, 489, 529, 560, 0, 0,
	0, 433, 0, 1015, 1016, 0, 0, 410, 0, 0,
	121, 0, 526, 554, 485, 528, 530, 451, 523, 99,
	455, 458, 565, 550, 479, 480, 481, 1220, 0, 0,
	0, 0, 0, 0, 503, 512, 537, 497, 0, 0,
	0, 0, 0, 0, 0, 0, 477, 0, 520, 0,
	0, 0, 459, 456, 0, 0, 501, 0, 0, 0,
	461, 0, 478, 538, 0, 448, 139, 0, 0, 542,
	549, 498, 0, 260, 553, 496, 495, 204, 0, 235,
	142, 156, 117, 103, 113, 0, 141, 182, 211, 215,
	486, 449, 546, 475, 484, 125, 482, 213, 192, 251,
	0, 519, 194, 212, 160, 241, 205, 250, 261, 262,
	238, 258, 266, 228, 0, 0, 0, 0, 0, 0,
	106, 237, 249, 122, 223, 108, 247, 234, 171, 151,
	152, 107, 0, 209, 130, 137, 127, 184, 0, 0,
	0, 244, 245, 126, 269, 114, 257, 110, 115, 256,
	178, 0, 0, 0, 240, 248, 172, 165, 0, 109,
	246, 170, 164, 155, 134, 144, 202, 162, 203, 145,
	175, 174, 176, 0, 454, 0, 232, 254, 270, 119,
	470, 0, 239, 264, 265, 0, 0, 120, 138, 133,
	201, 177, 116, 147, 229, 154, 161, 208, 268, 191,
	214, 123, 253, 230, 466, 469, 464, 465, 514, 515,
	561, 562, 563, 539, 460, 0, 467, 468, 0, 544,
	551, 552, 518, 102, 111, 158, 267, 206, 136, 255,
	450, 463, 129, 473, 0, 0, 487, 492, 493, 505,
	507, 508, 509, 510, 517, 524, 525, 527, 533, 534,
	535, 536, 541, 548, 567, 104, 105, 112, 118, 124,
	128, 132, 135, 140, 143, 146, 148, 149, 150, 153,
	163, 166, 167, 168, 169, 179, 180, 181, 183, 186,
	187, 188, 189, 190, 193, 195, 196, 197, 198, 199,
	200, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	224, 225, 226, 227, 233, 236, 242, 243, 252, 259,
	263, 555, 543, 0, 500, 558, 472, 490, 566, 491,
	494, 531, 457, 513, 185, 488, 0, 476, 452, 483,
	453, 474, 502, 131, 471, 545, 516, 557, 157, 556,
	506, 0, 564, 159, 522, 0, 231, 173, 0, 0,
	504, 547, 511, 540, 499, 532, 462, 521, 559, 489,
	529, 560, 0, 0, 0, 433, 0, 1015, 1016, 0,
	0, 0, 0, 0, 121, 0, 526, 554, 485, 528,
	530, 451, 523, 0, 455, 458, 565, 550, 479, 480,
	481, 0, 0, 0, 0, 0, 0, 0, 503, 512,
	537, 497, 0, 0, 0, 0, 0, 0, 0, 0,
	477, 0, 520, 0, 0, 0, 459, 456, 0, 0,
	501, 0, 0, 0, 461, 0, 478, 538, 0, 448,
	139, 0, 0, 542, 549, 498, 0, 260, 553, 496,
	495, 204, 0, 235, 142, 156, 117, 103, 113, 0,
	141, 182, 211, 215, 486, 449, 546, 475, 484, 125,
	482, 213, 192, 251, 0, 519, 194, 212, 160, 241,
	205, 250, 261, 262, 238, 258, 266, 228, 0, 0,
	0, 0, 0, 0, 106, 237, 249, 122, 223, 108,
	247, 234, 171, 151, 152, 107, 0, 209, 130, 137,
	127, 184, 0, 0, 0, 244, 245, 126, 269, 114,
	257, 110, 115, 256, 178, 0, 0, 0, 240, 248,
	172, 165, 0, 109, 246, 170, 164, 155, 134, 144,
	202, 162, 203, 145, 175, 174, 176, 0, 454, 0,
	232, 254, 270, 119, 470, 0, 239, 264, 265, 0,
	0, 120, 138, 133, 201, 177, 116, 147, 229, 154,
	161, 208, 268, 191, 214, 123, 253, 230, 466, 469,
	464, 465, 514, 515, 561, 562, 563, 539, 460, 0,
	467, 468, 0, 544, 551, 552, 518, 102, 111, 158,
	267, 206, 136, 255, 450, 463, 129, 473, 0, 0,
	487, 492, 493, 505, 507, 508, 509, 510, 517, 524,
	525, 527, 533, 534, 535, 536, 541, 548, 567, 104,
	105, 112, 118, 124, 128, 132, 135, 140, 143, 146,
	148, 149, 150, 153, 163, 166, 167, 168, 169, 179,
	180, 181, 183, 186, 187, 188, 189, 190, 193, 195,
	196, 197, 198, 199, 200, 207, 210, 216, 217, 218,
	219, 220, 221, 222, 224, 225, 226, 227, 233, 236,
	242, 243, 252, 259, 263, 555, 543, 0, 500, 558,
	472, 490, 566, 491, 494, 531, 457, 513, 185, 488,
	0, 476, 452, 483, 453, 474, 502, 131, 471, 545,
	516, 557, 157, 556, 506, 0, 564, 159, 522, 0,
	231, 173, 0, 0, 504, 547, 511, 540, 499, 532,
	462, 521, 559, 489, 529, 560, 0, 0, 0, 433,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 0,
	526, 554, 485, 528, 530, 451, 523, 0, 455, 458,
	565, 550, 479, 480, 481, 0, 0, 0, 0, 0,
	0, 0, 503, 512, 537, 497, 0, 0, 0, 0,
	0, 0, 1325, 0, 477, 0, 520, 0, 0, 0,
	459, 456, 0, 0, 501, 0, 0, 0, 461, 0,
	478, 538, 0, 448, 139, 0, 0, 542, 549, 498,
	0, 260, 553, 496, 495, 204, 0, 235, 142, 156,
	117, 103, 113, 0, 141, 182, 211, 215, 486, 449,
	546, 475, 484, 125, 482, 213, 192, 251, 0, 519,
	194, 212, 160, 241, 205, 250, 261, 262, 238, 258,
	266, 228, 0, 0, 0, 0, 0, 0, 106, 237,
	249, 122, 223, 108, 247, 234, 171, 151, 152, 107,
	0, 209, 130, 137, 127, 184, 0, 0, 0, 244,
	245, 126, 269, 114, 257, 110, 115, 256, 178, 0,
	0, 0, 240, 248, 172, 165, 0, 109, 246, 170,
	164, 155, 134, 144, 202, 162, 203, 145, 175, 174,
	176, 0, 454, 0, 232, 254, 270, 119, 470, 0,
	239, 264, 265, 0, 0, 120, 138, 133, 201, 177,
	116, 147, 229, 154, 161, 208, 268, 191, 214, 123,
	253, 230, 466, 469, 464, 465, 514, 515, 561, 562,
	563, 539, 460, 0, 467, 468, 0, 544, 551, 552,
	518, 102, 111, 158, 267, 206, 136, 255, 450, 463,
	129, 473, 0, 0, 487, 492, 493, 505, 507, 508,
	509, 510, 517, 524, 525, 527, 533, 534, 535, 536,
	541, 548, 567, 104, 105, 112, 118, 124, 128, 132,
	135, 140, 143, 146, 148, 149, 150, 153, 163, 166,
	167, 168, 169, 179, 180, 181, 183, 186, 187, 188,
	189, 190, 193, 195, 196, 197, 198, 199, 200, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 252, 259, 263, 555,
	543, 0, 500, 558, 472, 490, 566, 491, 494, 531,
	457, 513, 185, 488, 0, 476, 452, 483, 453, 474,
	502, 131, 471, 545, 516, 557, 157, 556, 506, 0,
	564, 159, 522, 0, 231, 173, 0, 0, 504, 547,
	511, 540, 499, 532, 462, 521, 559, 489, 529, 560,
	61, 0, 0, 433, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 526, 554, 485, 528, 530, 451,
	523, 0, 455, 458, 565, 550, 479, 480, 481, 0,
	0, 0, 0, 0, 0, 0, 503, 512, 537, 497,
	0, 0, 0, 0, 0, 0, 0, 0, 477, 0,
	520, 0, 0, 0, 459, 456, 0, 0, 501, 0,
	0, 0, 461, 0, 478, 538, 0, 448, 139, 0,
	0, 542, 549, 498, 0, 260, 553, 496, 495, 204,
	0, 235, 142, 156, 117, 103, 113, 0, 141, 182,
	211, 215, 486, 449, 546, 475, 484, 125, 482, 213,
	192, 251, 0, 519, 194, 212, 160, 241, 205, 250,
	261, 262, 238, 258, 266, 228, 0, 0, 0, 0,
	0, 0, 106, 237, 249, 122, 223, 108, 247, 234,
	171, 151, 152, 107, 0, 209, 130, 137, 127, 184,
	0, 0, 0, 244, 245, 126, 269, 114, 257, 110,
	115, 256, 178, 0, 0, 0, 240, 248, 172, 165,
	0, 109, 246, 170, 164, 155, 134, 144, 202, 162,
	203, 145, 175, 174, 176, 0, 454, 0, 232, 254,
	270, 119, 470, 0, 239, 264, 265, 0, 0, 120,
	138, 133, 201, 177, 116, 147, 229, 154, 161, 208,
	268, 191, 214, 123, 253, 230, 466, 469, 464, 465,
	514, 515, 561, 562, 563, 539, 460, 0, 467, 468,
	0, 544, 551, 552, 518, 102, 111, 158, 267, 206,
	136, 255, 450, 463, 129, 473, 0, 0, 487, 492,
	493, 505, 507, 508, 509, 510, 517, 524, 525, 527,
	533, 534, 535, 536, 541, 548, 567, 104, 105, 112,
	118, 124, 128, 132, 135, 140, 143, 146, 148, 149,
	150, 153, 163, 166, 167, 168, 169, 179, 180, 181,
	183, 186, 187, 188, 189, 190, 193, 195, 196, 197,
	198, 199, 200, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	252, 259, 263, 555, 543, 0, 500, 558, 472, 490,
	566, 491, 494, 531, 457, 513, 185, 488, 0, 476,
	452, 483, 453, 474, 502, 131, 471, 545, 516, 557,
	157, 556, 506, 0, 564, 159, 522, 0, 231, 173,
	0, 0, 504, 547, 511, 540, 499, 532, 462, 521,
	559, 489, 529, 560, 0, 0, 0, 100, 0, 0,
	0, 0, 0, 0, 0, 0, 121, 0, 526, 554,
	485, 528, 530, 451, 523, 0, 455, 458, 565, 550,
	479, 480, 481, 0, 0, 0, 0, 0, 0, 0,
	503, 512, 537, 497, 0, 0, 0, 0, 0, 0,
	997, 0, 477, 0, 520, 0, 0, 0, 459, 456,
	0, 0, 501, 0, 0, 0, 461, 0, 478, 538,
	0, 448, 139, 0, 0, 542, 549, 498, 0, 260,
	553, 496, 495, 204, 0, 235, 142, 156, 117, 103,
	113, 0, 141, 182, 211, 215, 486, 449, 546, 475,
	484, 125, 482, 213, 192, 251, 0, 519, 194, 212,
	160, 241, 205, 250, 261, 262, 238, 258, 266, 228,
	0, 0, 0, 0, 0, 0, 106, 237, 249, 122,
	223, 108, 247, 234, 171, 151, 152, 107, 0, 209,
	130, 137, 127, 184, 0, 0, 0, 244, 245, 126,
	269, 114, 257, 110, 115, 256, 178, 0, 0, 0,
	240, 248, 172, 165, 0, 109, 246, 170, 164, 155,
	134, 144, 202, 162, 203, 145, 175, 174, 176, 0,
	454, 0, 232, 254, 270, 119, 470, 0, 239, 264,
	265, 0, 0, 120, 138, 133, 201, 177, 116, 147,
	229, 154, 161, 208, 268, 191, 214, 123, 253, 230,
	466, 469, 464, 465, 514, 515, 561, 562, 563, 539,
	460, 0, 467, 468, 0, 544, 551, 552, 518, 102,
	111, 158, 267, 206, 136, 255, 450, 463, 129, 473,
	0, 0, 487, 492, 493, 505, 507, 508, 509, 510,
	517, 524, 525, 527, 533, 534, 535, 536, 541, 548,
	567, 104, 105, 112, 118, 124, 128, 132, 135, 140,
	143, 146, 148, 149, 150, 153, 163, 166, 167, 168,
	169, 179, 180, 181, 183, 186, 187, 188, 189, 190,
	193, 195, 196, 197, 198, 199, 200, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 224, 225, 226, 227,
	233, 236, 242, 243, 252, 259, 263, 555, 543, 0,
	500, 558, 472, 490, 566, 491, 494, 531, 457, 513,
	185, 488, 0, 476, 452, 483, 453, 474, 502, 131,
	471, 545, 516, 557, 157, 556, 506, 0, 564, 159,
	522, 0, 231, 173, 0, 0, 504, 547, 511, 540,
	499, 532, 462, 521, 559, 489, 529, 560, 0, 0,
	0, 334, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 526, 554, 485, 528, 530, 451, 523, 0,
	455, 458, 565, 550, 479, 480, 481, 0, 0, 0,
	0, 0, 0, 0, 503, 512, 537, 497, 0, 0,
	0, 0, 0, 0, 892, 0, 477, 0, 520, 0,
	0, 0, 459, 456, 0, 0, 501, 0, 0, 0,
	461, 0, 478, 538, 0, 448, 139, 0, 0, 542,
	549, 498, 0, 260, 553, 496, 495, 204, 0, 235,
	142, 156, 117, 103, 113, 0, 141, 182, 211, 215,
	486, 449, 546, 475, 484, 125, 482, 213, 192, 251,
	0, 519, 194, 212, 160, 241, 205, 250, 261, 262,
	238, 258, 266, 228, 0, 0, 0, 0, 0, 0,
	106, 237, 249, 122, 223, 108, 247, 234, 171, 151,
	152, 107, 0, 209, 130, 137, 127, 184, 0, 0,
	0, 244, 245, 126, 269, 114, 257, 110, 115, 256,
	178, 0, 0, 0, 240, 248, 172, 165, 0, 109,
	246, 170, 164, 155, 134, 144, 202, 162, 203, 145,
	175, 174, 176, 0, 454, 0, 232, 254, 270, 119,
	470, 0, 239, 264, 265, 0, 0, 120, 138, 133,
	201, 177, 116, 147, 229, 154, 161, 208, 268, 191,
	214, 123, 253, 230, 466, 469, 464, 465, 514, 515,
	561, 562, 563, 539, 460, 0, 467, 468, 0, 544,
	551, 552, 518, 102, 111, 158, 267, 206, 136, 255,
	450, 463, 129, 473, 0, 0, 487, 492, 493, 505,
	507, 508, 509, 510, 517, 524, 525, 527, 533, 534,
	535, 536, 541, 548, 567, 104, 105, 112, 118, 124,
	128, 132, 135, 140, 143, 146, 148, 149, 150, 153,
	163, 166, 167, 168, 169, 179, 180, 181, 183, 186,
	187, 188, 189, 190, 193, 195, 196, 197, 198, 199,
	200, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	224, 225, 226, 227, 233, 236, 242, 243, 252, 259,
	263, 555, 543, 0, 500, 558, 472, 490, 566, 491,
	494, 531, 457, 513, 185, 488, 0, 476, 452, 483,
	453, 474, 502, 131, 471, 545, 516, 557, 157, 556,
	506, 0, 564, 159, 522, 0, 231, 173, 0, 0,
	504, 547, 511, 540, 499, 532, 462, 521, 559, 489,
	529, 560, 0, 0, 0, 433, 0, 0, 0, 0,
	0, 0, 0, 0, 121, 0, 526, 554, 485, 528,
	530, 451, 523, 0, 455, 458, 565, 550, 479, 480,
	481, 0, 0, 0, 0, 0, 0, 0, 503, 512,
	537, 497, 0, 0, 0, 0, 0, 0, 0, 0,
	477, 0, 520, 0, 0, 0, 459, 456, 0, 0,
	501, 0, 0, 0, 461, 0, 478, 538, 0, 448,
	139, 0, 0, 542, 549, 498, 0, 260, 553, 496,
	495, 204, 0, 235, 142, 156, 117, 103, 113, 0,
	141, 182, 211, 215, 486, 449, 546, 475, 484, 125,
	482, 213, 192, 251, 0, 519, 194, 212, 160, 241,
	205, 250, 261, 262, 238, 258, 266, 228, 0, 0,
	0, 0, 0, 0, 106, 237, 249, 122, 223, 108,
	247, 234, 171, 151, 152, 107, 0, 209, 130, 137,
	127, 184, 0, 0, 0, 244, 245, 126, 269, 114,
	257, 110, 115, 256, 178, 0, 0, 0, 240, 248,
	172, 165, 0, 109, 246, 170, 164, 155, 134, 144,
	202, 162, 203, 145, 175, 174, 176, 0, 454, 0,
	232, 254, 270, 119, 470, 0, 239, 264, 265, 0,
	0, 120, 138, 133, 201, 177, 116, 147, 229, 154,
	161, 208, 268, 191, 214, 123, 253, 230, 466, 469,
	464, 465, 514, 515, 561, 562, 563, 539, 460, 0,
	467, 468, 0, 544, 551, 552, 518, 102, 111, 158,
	267, 206, 136, 255, 450, 463, 129, 473, 0, 0,
	487, 492, 493, 505, 507, 508, 509, 510, 517, 524,
	525, 527, 533, 534, 535, 536, 541, 548, 567, 104,
	105, 112, 118, 124, 128, 132, 135, 140, 143, 146,
	148, 149, 150, 153, 163, 166, 167, 168, 169, 179,
	180, 181, 183, 186, 187, 188, 189, 190, 193, 195,
	196, 197, 198, 199, 200, 207, 210, 216, 217, 218,
	219, 220, 221, 222, 224, 225, 226, 227, 233, 236,
	242, 243, 252, 259, 263, 555, 543, 0, 500, 558,
	472, 490, 566, 491, 494, 531, 457, 513, 185, 488,
	0, 476, 452, 483, 453, 474, 502, 131, 471, 545,
	516, 557, 157, 556, 506, 0, 564, 159, 522, 0,
	231, 173, 0, 0, 504, 547, 511, 540, 499, 532,
	462, 521, 559, 489, 529, 560, 0, 0, 0, 334,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 0,
	526, 554, 485, 528, 530, 451, 523, 0, 455, 458,
	565, 550, 479, 480, 481, 0, 0, 0, 0, 0,
	0, 0, 503, 512, 537, 497, 0, 0, 0, 0,
	0, 0, 0, 0, 477, 0, 520, 0, 0, 0,
	459, 456, 0, 0, 501, 0, 0, 0, 461, 0,
	478, 538, 0, 448, 139, 0, 0, 542, 549, 498,
	0, 260, 553, 496, 495, 204, 0, 235, 142, 156,
	117, 103, 113, 0, 141, 182, 211, 215, 486, 449,
	546, 475, 484, 125, 482, 213, 192, 251, 0, 519,
	194, 212, 160, 241, 205, 250, 261, 262, 238, 258,
	266, 228, 0, 0, 0, 0, 0, 0, 106, 237,
	249, 122, 223, 108, 247, 234, 171, 151, 152, 107,
	0, 209, 130, 137, 127, 184, 0, 0, 0, 244,
	245, 126, 269, 114, 257, 110, 115, 256, 178, 0,
	0, 0, 240, 248, 172, 165, 0, 109, 246, 170,
	164, 155, 134, 144, 202, 162, 203, 145, 175, 174,
	176, 0, 454, 0, 232, 254, 270, 119, 470, 0,
	239, 264, 265, 0, 0, 120, 138, 133, 201, 177,
	116, 147, 229, 154, 161, 208, 268, 191, 214, 123,
	253, 230, 466, 469, 464, 465, 514, 515, 561, 562,
	563, 539, 460, 0, 467, 468, 0, 544, 551, 552,
	518, 102, 111, 158, 267, 206, 136, 255, 450, 463,
	129, 473, 0, 0, 487, 492, 493, 505, 507, 508,
	509, 510, 517, 524, 525, 527, 533, 534, 535, 536,
	541, 548, 567, 104, 105, 112, 118, 124, 128, 132,
	135, 140, 143, 146, 148, 149, 150, 153, 163, 166,
	167, 168, 169, 179, 180, 181, 183, 186, 187, 188,
	189, 190, 193, 195, 196, 197, 198, 199, 200, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 252, 259, 263, 555,
	543, 0, 500, 558, 472, 490, 566, 491, 494, 531,
	457, 513, 185, 488, 0, 476, 452, 483, 453, 474,
	502, 131, 471, 545, 516, 557, 157, 556, 506, 0,
	564, 159, 522, 0, 231, 173, 0, 0, 504, 547,
	511, 540, 499, 532, 462, 521, 559, 489, 529, 560,
	0, 0, 0, 100, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 526, 554, 485, 528, 530, 451,
	523, 0, 455, 458, 565, 550, 479, 480, 481, 0,
	0, 0, 0, 0, 0, 0, 503, 512, 537, 497,
	0, 0, 0, 0, 0, 0, 0, 0, 477, 0,
	520, 0, 0, 0, 459, 456, 0, 0, 501, 0,
	0, 0, 461, 0, 478, 538, 0, 448, 139, 0,
	0, 542, 549, 498, 0, 260, 553, 496, 495, 204,
	0, 235, 142, 156, 117, 103, 113, 0, 141, 182,
	211, 215, 486, 449, 546, 475, 484, 125, 482, 213,
	192, 251, 0, 519, 194, 212, 160, 241, 205, 250,
	261, 262, 238, 258, 266, 228, 0, 0, 0, 0,
	0, 0, 106, 237, 249, 122, 223, 108, 247, 234,
	171, 151, 152, 107, 0, 209, 130, 137, 127, 184,
	0, 0, 0, 244, 245, 126, 269, 114, 257, 110,
	115, 256, 178, 0, 0, 0, 240, 248, 172, 165,
	0, 109, 246, 170, 164, 155, 134, 144, 202, 162,
	203, 145, 175, 174, 176, 0, 454, 0, 232, 254,
	270, 119, 470, 0, 239, 264, 265, 0, 0, 120,
	138, 133, 201, 177, 116, 147, 229, 154, 161, 208,
	268, 191, 214, 123, 253, 230, 466, 469, 464, 465,
	514, 515, 561, 562, 563, 539, 460, 0, 467, 468,
	0, 544, 551, 552, 518, 102, 111, 158, 267, 206,
	136, 255, 450, 463, 129, 473, 0, 0, 487, 492,
	493, 505, 507, 508, 509, 510, 517, 524, 525, 527,
	533, 534, 535, 536, 541, 548, 567, 104, 105, 112,
	118, 124, 128, 132, 135, 140, 143, 146, 148, 149,
	150, 153, 163, 166, 167, 168, 169, 179, 180, 181,
	183, 186, 187, 188, 189, 190, 193, 195, 196, 197,
	198, 199, 200, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	252, 259, 263, 185, 0, 0, 0, 0, 336, 0,
	0, 0, 131, 333, 0, 0, 0, 157, 0, 0,
	0, 378, 159, 0, 0, 231, 173, 0, 0, 0,
	0, 367, 368, 0, 0, 0, 0, 0, 0, 1004,
	0, 61, 0, 0, 334, 355, 354, 357, 358, 359,
	360, 0, 0, 121, 356, 361, 362, 363, 1005, 0,
	0, 331, 348, 0, 377, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 345, 346, 0, 0, 0,
	0, 391, 0, 347, 0, 0, 342, 343, 344, 349,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	0, 0, 369, 0, 0, 0, 260, 0, 0, 389,
	204, 0, 235, 142, 156, 117, 103, 113, 0, 141,
	182, 211, 215, 375, 0, 0, 0, 0, 125, 0,
	213, 192, 251, 0, 0, 194, 212, 160, 241, 205,
	250, 261, 262, 238, 258, 266, 228, 0, 0, 0,
	0, 0, 0, 106, 237, 249, 122, 223, 108, 247,
	234, 171, 151, 152, 107, 0, 209, 130, 137, 127,
	184, 0, 0, 0, 244, 245, 126, 269, 114, 257,
	110, 115, 256, 178, 0, 0, 0, 240, 248, 172,
	165, 0, 109, 246, 170, 164, 155, 134, 144, 202,
	162, 203, 145, 175, 174, 176, 0, 0, 0, 232,
	254, 270, 119, 0, 0, 239, 264, 265, 0, 0,
	120, 138, 133, 201, 177, 116, 147, 229, 154, 161,
	208, 268, 191, 214, 123, 253, 230, 379, 390, 385,
	386, 383, 384, 382, 381, 380, 392, 370, 371, 372,
	373, 376, 0, 387, 388, 374, 102, 111, 158, 267,
	206, 136, 255, 0, 0, 129, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 105,
	112, 118, 124, 128, 132, 135, 140, 143, 146, 148,
	149, 150, 153, 163, 166, 167, 168, 169, 179, 180,
	181, 183, 186, 187, 188, 189, 190, 193, 195, 196,
	197, 198, 199, 200, 207, 210, 216, 217, 218, 219,
	220, 221, 222, 224, 225, 226, 227, 233, 236, 242,
	243, 252, 259, 263, 185, 0, 0, 0, 0, 336,
	0, 0, 0, 131, 333, 0, 0, 0, 157, 0,
	0, 0, 378, 159, 0, 0, 231, 173, 0, 0,
	0, 0, 367, 368, 0, 0, 0, 0, 0, 0,
	0, 0, 61, 0, 607, 334, 355, 354, 357, 358,
	359, 360, 0, 0, 121, 356, 361, 362, 363, 0,
	0, 0, 331, 348, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 345, 346, 0, 0,
	0, 0, 391, 0, 347, 0, 0, 342, 343, 344,
	349, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 0, 0, 369, 0, 0, 0, 260, 0, 0,
	389, 204, 0, 235, 142, 156, 117, 103, 113, 0,
	141, 182, 211, 215, 375, 0, 0, 0, 0, 125,
	0, 213, 192, 251, 0, 0, 194, 212, 160, 241,
	205, 250, 261, 262, 238, 258, 266, 228, 0, 0,
	0, 0, 0, 0, 106, 237, 249, 122, 223, 108,
	247, 234, 171, 151, 152, 107, 0, 209, 130, 137,
	127, 184, 0, 0, 0, 244, 245, 126, 269, 114,
	257, 110, 115, 256, 178, 0, 0, 0, 240, 248,
	172, 165, 0, 109, 246, 170, 164, 155, 134, 144,
	202, 162, 203, 145, 175, 174, 176, 0, 0, 0,
	232, 254, 270, 119, 0, 0, 239, 264, 265, 0,
	0, 120, 138, 133, 201, 177, 116, 147, 229, 154,
	161, 208, 268, 191, 214, 123, 253, 230, 379, 390,
	385, 386, 383, 384, 382, 381, 380, 392, 370, 371,
	372, 373, 376, 0, 387, 388, 374, 102, 111, 158,
	267, 206, 136, 255, 0, 0, 129, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	105, 112, 118, 124, 128, 132, 135, 140, 143, 146,
	148, 149, 150, 153, 163, 166, 167, 168, 169, 179,
	180, 181, 183, 186, 187, 188, 189, 190, 193, 195,
	196, 197, 198, 199, 200, 207, 210, 216, 217, 218,
	219, 220, 221, 222, 224, 225, 226, 227, 233, 236,
	242, 243, 252, 259, 263, 185, 0, 0, 0, 0,
	336, 0, 0, 0, 131, 333, 0, 0, 0, 157,
	0, 0, 0, 378, 159, 0, 0, 231, 173, 0,
	0, 0, 0, 367, 368, 0, 0, 0, 0, 0,
	0, 0, 0, 61, 0, 0, 334, 355, 354, 357,
	358, 359, 360, 0, 0, 121, 356, 361, 362, 363,
	0, 0, 0, 331, 348, 0, 377, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 345, 346, 327,
	0, 0, 0, 391, 0, 347, 0, 0, 342, 343,
	344, 349, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 0, 369, 0, 0, 0, 260, 0,
	0, 389, 204, 0, 235, 142, 156, 117, 103, 113,
	0, 141, 182, 211, 215, 375, 0, 0, 0, 0,
	125, 0, 213, 192, 251, 0, 0, 194, 212, 160,
	241, 205, 250, 261, 262, 238, 258, 266, 228, 0,
	0, 0, 0, 0, 0, 106, 237, 249, 122, 223,
	108, 247, 234, 171, 151, 152, 107, 0, 209, 130,
	137, 127, 184, 0, 0, 0, 244, 245, 126, 269,
	114, 257, 110, 115, 256, 178, 0, 0, 0, 240,
	248, 172, 165, 0, 109, 246, 170, 164, 155, 134,
	144, 202, 162, 203, 145, 175, 174, 176, 0, 0,
	0, 232, 254, 270, 119, 0, 0, 239, 264, 265,
	0, 0, 120, 138, 133, 201, 177, 116, 147, 229,
	154, 161, 208, 268, 191, 214, 123, 253, 230, 379,
	390, 385, 386, 383, 384, 382, 381, 380, 392, 370,
	371, 372, 373, 376, 0, 387, 388, 374, 102, 111,
	158, 267, 206, 136, 255, 0, 0, 129, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 105, 112, 118, 124, 128, 132, 135, 140, 143,
	146, 148, 149, 150, 153, 163, 166, 167, 168, 169,
	179, 180, 181, 183, 186, 187, 188, 189, 190, 193,
	195, 196, 197, 198, 199, 200, 207, 210, 216, 217,
	218, 219, 220, 221, 222, 224, 225, 226, 227, 233,
	236, 242, 243, 252, 259, 263, 185, 0, 0, 0,
	0, 336, 0, 0, 0, 131, 333, 0, 0, 0,
	157, 0, 0, 0, 378, 159, 0, 0, 231, 173,
	0, 0, 0, 0, 367, 368, 0, 0, 0, 0,
	0, 0, 0, 0, 61, 0, 0, 334, 355, 942,
	357, 358, 359, 360, 0, 0, 121, 356, 361, 362,
	363, 0, 0, 0, 331, 348, 0, 377, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 345, 346,
	327, 0, 0, 0, 391, 0, 347, 0, 0, 342,
	343, 344, 349, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 0, 369, 0, 0, 0, 260,
	0, 0, 389, 204, 0, 235, 142, 156, 117, 103,
	113, 0, 141, 182, 211, 215, 375, 0, 0, 0,
	0, 125, 0, 213, 192, 251, 0, 0, 194, 212,
	160, 241, 205, 250, 261, 262, 238, 258, 266, 228,
	0, 0, 0, 0, 0, 0, 106, 237, 249, 122,
	223, 108, 247, 234, 171, 151, 152, 107, 0, 209,
	130, 137, 127, 184, 0, 0, 0, 244, 245, 126,
	269, 114, 257, 110, 115, 256, 178, 0, 0, 0,
	240, 248, 172, 165, 0, 109, 246, 170, 164, 155,
	134, 144, 202, 162, 203, 145, 175, 174, 176, 0,
	0, 0, 232, 254, 270, 119, 0, 0, 239, 264,
	265, 0, 0, 120, 138, 133, 201, 177, 116, 147,
	229, 154, 161, 208, 268, 191, 214, 123, 253, 230,
	379, 390, 385, 386, 383, 384, 382, 381, 380, 392,
	370, 371, 372, 373, 376, 0, 387, 388, 374, 102,
	111, 158, 267, 206, 136, 255, 0, 0, 129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 105, 112, 118, 124, 128, 132, 135, 140,
	143, 146, 148, 149, 150, 153, 163, 166, 167, 168,
	169, 179, 180, 181, 183, 186, 187, 188, 189, 190,
	193, 195, 196, 197, 198, 199, 200, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 224, 225, 226, 227,
	233, 236, 242, 243, 252, 259, 263, 185, 0, 0,
	0, 0, 336, 0, 0, 0, 131, 333, 0, 0,
	0, 157, 0, 0, 0, 378, 159, 0, 0, 231,
	173, 0, 0, 0, 0, 367, 368, 0, 0, 0,
	0, 0, 0, 0, 0, 61, 0, 0, 334, 355,
	939, 357, 358, 359, 360, 0, 0, 121, 356, 361,
	362, 363, 0, 0, 0, 331, 348, 0, 377, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 345,
	346, 327, 0, 0, 0, 391, 0, 347, 0, 0,
	342, 343, 344, 349, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 0, 369, 0, 0, 0,
	260, 0, 0, 389, 204, 0, 235, 142, 156, 117,
	103, 113, 0, 141, 182, 211, 215, 375, 0, 0,
	0, 0, 125, 0, 213, 192, 251, 0, 0, 194,
	212, 160, 241, 205, 250, 261, 262, 238, 258, 266,
	228, 0, 0, 0, 0, 0, 0, 106, 237, 249,
	122, 223, 108, 247, 234, 171, 151, 152, 107, 0,
	209, 130, 137, 127, 184, 0, 0, 0, 244, 245,
	126, 269, 114, 257, 110, 115, 256, 178, 0, 0,
	0, 240, 248, 172, 165, 0, 109, 246, 170, 164,
	155, 134, 144, 202, 162, 203, 145, 175, 174, 176,
	0, 0, 0, 232, 254, 270, 119, 0, 0, 239,
	264, 265, 0, 0, 120, 138, 133, 201, 177, 116,
	147, 229, 154, 161, 208, 268, 191, 214, 123, 253,
	230, 379, 390, 385, 386, 383, 384, 382, 381, 380,
	392, 370, 371, 372, 373, 376, 0, 387, 388, 374,
	102, 111, 158, 267, 206, 136, 255, 0, 0, 129,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 105, 112, 118, 124, 128, 132, 135,
	140, 143, 146, 148, 149, 150, 153, 163, 166, 167,
	168, 169, 179, 180, 181, 183, 186, 187, 188, 189,
	190, 193, 195, 196, 197, 198, 199, 200, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 224, 225, 226,
	227, 233, 236, 242, 243, 252, 259, 263, 26, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 0, 0, 0, 0, 336, 0, 0, 0, 131,
	333, 0, 0, 0, 157, 0, 0, 0, 378, 159,
	0, 0, 231, 173, 0, 0, 0, 0, 367, 368,
	0, 0, 0, 0, 0, 0, 0, 0, 61, 0,
	0, 334, 355, 354, 357, 358, 359, 360, 0, 0,
	121, 356, 361, 362, 363, 0, 0, 0, 331, 348,
	0, 377, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 345, 346, 0, 0, 0, 0, 391, 0,
	347, 0, 0, 342, 343, 344, 349, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 0, 0, 369,
	0, 0, 0, 260, 0, 0, 389, 204, 0, 235,
	142, 156, 117, 103, 113, 0, 141, 182, 211, 215,
	375, 0, 0, 0, 0, 125, 0, 213, 192, 251,
	0, 0, 194, 212, 160, 241, 205, 250, 261, 262,
	238, 258, 266, 228, 0, 0, 0, 0, 0, 0,
	106, 237, 249, 122, 223, 108, 247, 234, 171, 151,
	152, 107, 0, 209, 130, 137, 127, 184, 0, 0,
	0, 244, 245, 126, 269, 114, 257, 110, 115, 256,
	178, 0, 0, 0, 240, 248, 172, 165, 0, 109,
	246, 170, 164, 155, 134, 144, 202, 162, 203, 145,
	175, 174, 176, 0, 0, 0, 232, 254, 270, 119,
	0, 0, 239, 264, 265, 0, 0, 120, 138, 133,
	201, 177, 116, 147, 229, 154, 161, 208, 268, 191,
	214, 123, 253, 230, 379, 390, 385, 386, 383, 384,
	382, 381, 380, 392, 370, 371, 372, 373, 376, 0,
	387, 388, 374, 102, 111, 158, 267, 206, 136, 255,
	0, 0, 129, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 105, 112, 118, 124,
	128, 132, 135, 140, 143, 146, 148, 149, 150, 153,
	163, 166, 167, 168, 169, 179, 180, 181, 183, 186,
	187, 188, 189, 190, 193, 195, 196, 197, 198, 199,
	200, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	224, 225, 226, 227, 233, 236, 242, 243, 252, 259,
	263, 185, 0, 0, 0, 0, 336, 0, 0, 0,
	131, 333, 0, 0, 0, 157, 0, 0, 0, 378,
	159, 0, 0, 231, 173, 0, 0, 0, 0, 367,
	368, 0, 0, 0, 0, 0, 0, 0, 0, 61,
	0, 0, 334, 355, 354, 357, 358, 359, 360, 0,
	0, 121, 356, 361, 362, 363, 0, 0, 0, 331,
	348, 0, 377, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 345, 346, 0, 0, 0, 0, 391,
	0, 347, 0, 0, 342, 343, 344, 349, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 0, 0,
	369, 0, 0, 0, 260, 0, 0, 389, 204, 0,
	235, 142, 156, 117, 103, 113, 0, 141, 182, 211,
	215, 375, 0, 0, 0, 0, 125, 0, 213, 192,
	251, 0, 0, 194, 212, 160, 241, 205, 250, 261,
	262, 238, 258, 266, 228, 0, 0, 0, 0, 0,
	0, 106, 237, 249, 122, 223, 108, 247, 234, 171,
	151, 152, 107, 0, 209, 130, 137, 127, 184, 0,
	0, 0, 244, 245, 126, 269, 114, 257, 110, 115,
	256, 178, 0, 0, 0, 240, 248, 172, 165, 0,
	109, 246, 170, 164, 155, 134, 144, 202, 162, 203,
	145, 175, 174, 176, 0, 0, 0, 232, 254, 270,
	119, 0, 0, 239, 264, 265, 0, 0, 120, 138,
	133, 201, 177, 116, 147, 229, 154, 161, 208, 268,
	191, 214, 123, 253, 230, 379, 390, 385, 386, 383,
	384, 382, 381, 380, 392, 370, 371, 372, 373, 376,
	0, 387, 388, 374, 102, 111, 158, 267, 206, 136,
	255, 0, 0, 129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 105, 112, 118,
	124, 128, 132, 135, 140, 143, 146, 148, 149, 150,
	153, 163, 166, 167, 168, 169, 179, 180, 181, 183,
	186, 187, 188, 189, 190, 193, 195, 196, 197, 198,
	199, 200, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 224, 225, 226, 227, 233, 236, 242, 243, 252,
	259, 263, 185, 0, 0, 0, 0, 0, 0, 0,
	0, 131, 0, 0, 0, 0, 157, 0, 0, 0,
	378, 159, 0, 0, 231, 173, 0, 0, 0, 0,
	367, 368, 0, 0, 0, 0, 0, 0, 0, 0,
	61, 0, 0, 334, 355, 354, 357, 358, 359, 360,
	0, 0, 121, 356, 361, 362, 363, 0, 0, 0,
	0, 348, 0, 377, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 345, 346, 0, 0, 0, 0,
	391, 0, 347, 0, 0, 342, 343, 344, 349, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
	0, 369, 0, 0, 0, 260, 0, 0, 389, 204,
	0, 235, 142, 156, 117, 103, 113, 0, 141, 182,
	211, 215, 375, 0, 0, 0, 0, 125, 0, 213,
	192, 251, 0, 1709, 194, 212, 160, 241, 205, 250,
	261, 262, 238, 258, 266, 228, 0, 0, 0, 0,
	0, 0, 106, 237, 249, 122, 223, 108, 247, 234,
	171, 151, 152, 107, 0, 209, 130, 137, 127, 184,
	0, 0, 0, 244, 245, 126, 269, 114, 257, 110,
	115, 256, 178, 0, 0, 0, 240, 248, 172, 165,
	0, 109, 246, 170, 164, 155, 134, 144, 202, 162,
	203, 145, 175, 174, 176, 0, 0, 0, 232, 254,
	270, 119, 0, 0, 239, 264, 265, 0, 0, 120,
	138, 133, 201, 177, 116, 147, 229, 154, 161, 208,
	268, 191, 214, 123, 253, 230, 379, 390, 385, 386,
	383, 384, 382, 381, 380, 392, 370, 371, 372, 373,
	376, 0, 387, 388, 374, 102, 111, 158, 267, 206,
	136, 255, 0, 0, 129, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 105, 112,
	118, 124, 128, 132, 135, 140, 143, 146, 148, 149,
	150, 153, 163, 166, 167, 168, 169, 179, 180, 181,
	183, 186, 187, 188, 189, 190, 193, 195, 196, 197,
	198, 199, 200, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	252, 259, 263, 185, 0, 0, 0, 0, 0, 0,
	0, 0, 131, 0, 0, 0, 0, 157, 0, 0,
	0, 378, 159, 0, 0, 231, 173, 0, 0, 0,
	0, 367, 368, 0, 0, 0, 0, 0, 0, 0,
	0, 61, 0, 607, 334, 355, 354, 357, 358, 359,
	360, 0, 0, 121, 356, 361, 362, 363, 0, 0,
	0, 0, 348, 0, 377, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 345, 346, 0, 0, 0,
	0, 391, 0, 347, 0, 0, 342, 343, 344, 349,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	0, 0, 369, 0, 0, 0, 260, 0, 0, 389,
	204, 0, 235, 142, 156, 117, 103, 113, 0, 141,
	182, 211, 215, 375, 0, 0, 0, 0, 125, 0,
	213, 192, 251, 0, 0, 194, 212, 160, 241, 205,
	250, 261, 262, 238, 258, 266, 228, 0, 0, 0,
	0, 0, 0, 106, 237, 249, 122, 223, 108, 247,
	234, 171, 151, 152, 107, 0, 209, 130, 137, 127,
	184, 0, 0, 0, 244, 245, 126, 269, 114, 257,
	110, 115, 256, 178, 0, 0, 0, 240, 248, 172,
	165, 0, 109, 246, 170, 164, 155, 134, 144, 202,
	162, 203, 145, 175, 174, 176, 0, 0, 0, 232,
	254, 270, 119, 0, 0, 239, 264, 265, 0, 0,
	120, 138, 133, 201, 177, 116, 147, 229, 154, 161,
	208, 268, 191, 214, 123, 253, 230, 379, 390, 385,
	386, 383, 384, 382, 381, 380, 392, 370, 371, 372,
	373, 376, 0, 387, 388, 374, 102, 111, 158, 267,
	206, 136, 255, 0, 0, 129, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 105,
	112, 118, 124, 128, 132, 135, 140, 143, 146, 148,
	149, 150, 153, 163, 166, 167, 168, 169, 179, 180,
	181, 183, 186, 187, 188, 189, 190, 193, 195, 196,
	197, 198, 199, 200, 207, 210, 216, 217, 218, 219,
	220, 221, 222, 224, 225, 226, 227, 233, 236, 242,
	243, 252, 259, 263, 185, 0, 0, 0, 0, 0,
	0, 0, 0, 131, 0, 0, 0, 0, 157, 0,
	0, 0, 378, 159, 0, 0, 231, 173, 0, 0,
	0, 0, 367, 368, 0, 0, 0, 0, 0, 0,
	0, 0, 61, 0, 0, 334, 355, 354, 357, 358,
	359, 360, 0, 0, 121, 356, 361, 362, 363, 0,
	0, 0, 0, 348, 0, 377, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 345, 346, 0, 0,
	0, 0, 391, 0, 347, 0, 0, 342, 343, 344,
	349, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 0, 0, 369, 0, 0, 0, 260, 0, 0,
	389, 204, 0, 235, 142, 156, 117, 103, 113, 0,
	141, 182, 211, 215, 375, 0, 0, 0, 0, 125,
	0, 213, 192, 251, 0, 0, 194, 212, 160, 241,
	205, 250, 261, 262, 238, 258, 266, 228, 0, 0,
	0, 0, 0, 0, 106, 237, 249, 122, 223, 108,
	247, 234, 171, 151, 152, 107, 0, 209, 130, 137,
	127, 184, 0, 0, 0, 244, 245, 126, 269, 114,
	257, 110, 115, 256, 178, 0, 0, 0, 240, 248,
	172, 165, 0, 109, 246, 170, 164, 155, 134, 144,
	202, 162, 203, 145, 175, 174, 176, 0, 0, 0,
	232, 254, 270, 119, 0, 0, 239, 264, 265, 0,
	0, 120, 138, 133, 201, 177, 116, 147, 229, 154,
	161, 208, 268, 191, 214, 123, 253, 230, 379, 390,
	385, 386, 383, 384, 382, 381, 380, 392, 370, 371,
	372, 373, 376, 0, 387, 388, 374, 102, 111, 158,
	267, 206, 136, 255, 0, 0, 129, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	105, 112, 118, 124, 128, 132, 135, 140, 143, 146,
	148, 149, 150, 153, 163, 166, 167, 168, 169, 179,
	180, 181, 183, 186, 187, 188, 189, 190, 193, 195,
	196, 197, 198, 199, 200, 207, 210, 216, 217, 218,
	219, 220, 221, 222, 224, 225, 226, 227, 233, 236,
	242, 243, 252, 259, 263, 185, 0, 0, 0, 0,
	0, 0, 0, 0, 131, 0, 0, 0, 0, 157,
	0, 0, 0, 0, 159, 0, 0, 231, 173, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 433, 0, 0, 0,
	0, 0, 0, 0, 0, 121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 648, 647, 657, 658, 650, 651, 652,
	653, 654, 655, 656, 649, 0, 0, 659, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 0, 0, 0, 0, 0, 260, 0,
	0, 0, 204, 0, 235, 142, 156, 117, 103, 113,
	0, 141, 182, 211, 215, 0, 0, 0, 0, 0,
	125, 0, 213, 192, 251, 0, 0, 194, 212, 160,
	241, 205, 250, 261, 262, 238, 258, 266, 228, 0,
	0, 0, 0, 0, 0, 106, 237, 249, 122, 223,
	108, 247, 234, 171, 151, 152, 107, 0, 209, 130,
	137, 127, 184, 0, 0, 0, 244, 245, 126, 269,
	114, 257, 110, 115, 256, 178, 0, 0, 0, 240,
	248, 172, 165, 0, 109, 246, 170, 164, 155, 134,
	144, 202, 162, 203, 145, 175, 174, 176, 0, 0,
	0, 232, 254, 270, 119, 0, 0, 239, 264, 265,
	0, 0, 120, 138, 133, 201, 177, 116, 147, 229,
	154, 161, 208, 268, 191, 214, 123, 253, 230, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 102, 111,
	158, 267, 206, 136, 255, 0, 0, 129, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 105, 112, 118, 124, 128, 132, 135, 140, 143,
	146, 148, 149, 150, 153, 163, 166, 167, 168, 169,
	179, 180, 181, 183, 186, 187, 188, 189, 190, 193,
	195, 196, 197, 198, 199, 200, 207, 210, 216, 217,
	218, 219, 220, 221, 222, 224, 225, 226, 227, 233,
	236, 242, 243, 252, 259, 263, 185, 0, 0, 0,
	983, 0, 0, 0, 0, 131, 0, 0, 0, 0,
	157, 0, 0, 0, 0, 159, 0, 0, 231, 173,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	985, 987, 0, 0, 0, 0, 0, 100, 0, 989,
	0, 0, 0, 0, 0, 0, 121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 0, 0, 0, 0, 0, 260,
	0, 986, 0, 204, 0, 235, 142, 156, 117, 103,
	113, 0, 141, 182, 211, 215, 0, 0, 0, 0,
	0, 125, 0, 213, 192, 251, 0, 0, 194, 212,
	160, 241, 205, 250, 261, 262, 238, 258, 266, 228,
	0, 0, 0, 0, 0, 0, 106, 237, 249, 122,
	223, 108, 247, 234, 171, 151, 152, 107, 0, 209,
	130, 137, 127, 184, 0, 0, 0, 244, 245, 126,
	269, 114, 257, 110, 115, 256, 178, 0, 0, 0,
	240, 248, 172, 165, 0, 109, 246, 170, 164, 155,
	134, 144, 202, 162, 203, 145, 175, 174, 176, 0,
	0, 0, 232, 254, 270, 119, 0, 0, 239, 264,
	265, 0, 0, 120, 138, 133, 201, 177, 116, 147,
	229, 154, 161, 208, 268, 191, 214, 123, 253, 230,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	111, 158, 267, 206, 136, 255, 0, 0, 129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 105, 112, 118, 124, 128, 132, 135, 140,
	143, 146, 148, 149, 150, 153, 163, 166, 167, 168,
	169, 179, 180, 181, 183, 186, 187, 188, 189, 190,
	193, 195, 196, 197, 198, 199, 200, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 224, 225, 226, 227,
	233, 236, 242, 243, 252, 259, 263, 185, 0, 0,
	0, 983, 0, 0, 0, 0, 131, 0, 0, 0,
	0, 157, 0, 0, 0, 0, 159, 0, 0, 231,
	173, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 985, 987, 0, 0, 0, 0, 0, 100, 0,
	989, 0, 0, 0, 0, 0, 0, 121, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 0, 0, 0, 0, 0,
	260, 0, 986, 0, 204, 0, 235, 142, 156, 117,
	103, 113, 0, 141, 182, 211, 215, 0, 0, 0,
	0, 0, 125, 0, 213, 192, 251, 0, 0, 981,
	212, 160, 241, 205, 250, 261, 262, 238, 258, 266,
	228, 0, 0, 0, 0, 0, 0, 106, 237, 249,
	122, 223, 108, 247, 234, 171, 151, 152, 107, 0,
	209, 130, 137, 127, 184, 0, 0, 0, 244, 245,
	126, 269, 114, 257, 110, 115, 256, 178, 0, 0,
	0, 240, 248, 172, 165, 0, 109, 246, 170, 164,
	155, 134, 144, 202, 162, 203, 145, 175, 174, 176,
	0, 0, 0, 232, 254, 270, 119, 0, 0, 239,
	264, 265, 0, 0, 120, 138, 133, 201, 177, 116,
	147, 229, 154, 161, 208, 268, 191, 214, 123, 253,
	230, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	102, 111, 158, 267, 206, 136, 255, 0, 0, 129,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 105, 112, 118, 124, 128, 132, 135,
	140, 143, 146, 148, 149, 150, 153, 163, 166, 167,
	168, 169, 179, 180, 181, 183, 186, 187, 188, 189,
	190, 193, 195, 196, 197, 198, 199, 200, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 224, 225, 226,
	227, 233, 236, 242, 243, 252, 259, 263, 185, 0,
	0, 0, 636, 0, 0, 0, 0, 131, 0, 0,
	0, 0, 157, 0, 0, 0, 0, 159, 0, 0,
	231, 173, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 433,
	0, 638, 0, 0, 0, 0, 0, 0, 121, 0,
	0, 0, 0, 0, 633, 632, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 634, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 0, 0, 0, 0, 0,
	0, 260, 0, 0, 0, 204, 0, 235, 142, 156,
	117, 103, 113, 0, 141, 182, 211, 215, 0, 0,
	0, 0, 0, 125, 0, 213, 192, 251, 0, 0,
	194, 212, 160, 241, 205, 250, 261, 262, 238, 258,
	266, 228, 0, 0, 0, 0, 0, 0, 106, 237,
	249, 122, 223, 108, 247, 234, 171, 151, 152, 107,
	0, 209, 130, 137, 127, 184, 0, 0, 0, 244,
	245, 126, 269, 114, 257, 110, 115, 256, 178, 0,
	0, 0, 240, 248, 172, 165, 0, 109, 246, 170,
	164, 155, 134, 144, 202, 162, 203, 145, 175, 174,
	176, 0, 0, 0, 232, 254, 270, 119, 0, 0,
	239, 264, 265, 0, 0, 120, 138, 133, 201, 177,
	116, 147, 229, 154, 161, 208, 268, 191, 214, 123,
	253, 230, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 102, 111, 158, 267, 206, 136, 255, 0, 0,
	129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 105, 112, 118, 124, 128, 132,
	135, 140, 143, 146, 148, 149, 150, 153, 163, 166,
	167, 168, 169, 179, 180, 181, 183, 186, 187, 188,
	189, 190, 193, 195, 196, 197, 198, 199, 200, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 252, 259, 263, 26,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 0, 0, 0, 0, 0, 0, 0, 0,
	131, 0, 0, 0, 0, 157, 0, 0, 0, 0,
	159, 0, 0, 231, 173, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 61,
	0, 0, 433, 0, 0, 0, 0, 0, 0, 0,
	0, 121, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 0, 0,
	0, 0, 0, 0, 260, 0, 0, 0, 204, 0,
	235, 142, 156, 117, 103, 113, 0, 141, 182, 211,
	215, 0, 0, 0, 0, 0, 125, 0, 213, 192,
	251, 0, 0, 194, 212, 160, 241, 205, 250, 261,
	262, 238, 258, 266, 228, 0, 0, 0, 0, 0,
	0, 106, 237, 249, 122, 223, 108, 247, 234, 171,
	151, 152, 107, 0, 209, 130, 137, 127, 184, 0,
	0, 0, 244, 245, 126, 269, 114, 257, 110, 115,
	256, 178, 0, 0, 0, 240, 248, 172, 165, 0,
	109, 246, 170, 164, 155, 134, 144, 202, 162, 203,
	145, 175, 174, 176, 0, 0, 0, 232, 254, 270,
	119, 0, 0, 239, 264, 265, 0, 0, 120, 138,
	133, 201, 177, 116, 147, 229, 154, 161, 208, 268,
	191, 214, 123, 253, 230, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 111, 158, 267, 206, 136,
	255, 0, 0, 129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 105, 112, 118,
	124, 128, 132, 135, 140, 143, 146, 148, 149, 150,
	153, 163, 166, 167, 168, 169, 179, 180, 181, 183,
	186, 187, 188, 189, 190, 193, 195, 196, 197, 198,
	199, 200, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 224, 225, 226, 227, 233, 236, 242, 243, 252,
	259, 263, 185, 0, 0, 0, 0, 0, 0, 0,
	0, 131, 0, 0, 0, 0, 157, 0, 0, 0,
	0, 159, 0, 0, 231, 173, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 0, 989, 0, 0, 0, 0,
	0, 0, 121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
	0, 0, 0, 0, 0, 260, 0, 0, 0, 204,
	0, 235, 142, 156, 117, 103, 113, 0, 141, 182,
	211, 215, 0, 0, 0, 0, 0, 125, 0, 213,
	192, 251, 0, 0, 194, 212, 160, 241, 205, 250,
	261, 262, 238, 258, 266, 228, 0, 0, 0, 0,
	0, 0, 106, 237, 249, 122, 223, 108, 247, 234,
	171, 151, 152, 107, 0, 209, 130, 137, 127, 184,
	0, 0, 0, 244, 245, 126, 269, 114, 257, 110,
	115, 256, 178, 0, 0, 0, 240, 248, 172, 165,
	0, 109, 246, 170, 164, 155, 134, 144, 202, 162,
	203, 145, 175, 174, 176, 0, 0, 0, 232, 254,
	270, 119, 0, 0, 239, 264, 265, 0, 0, 120,
	138, 133, 201, 177, 116, 147, 229, 154, 161, 208,
	268, 191, 214, 123, 253, 230, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 102, 111, 158, 267, 206,
	136, 255, 0, 0, 129, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1198,
	0, 0, 0, 0, 0, 0, 0, 104, 105, 112,
	118, 124, 128, 132, 135, 140, 143, 146, 148, 149,
	150, 153, 163, 166, 167, 168, 169, 179, 180, 181,
	183, 186, 187, 188, 189, 190, 193, 195, 196, 197,
	198, 199, 200, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	252, 259, 263, 26, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 0, 0, 0, 0,
	0, 0, 0, 0, 131, 0, 0, 0, 0, 157,
	0, 0, 0, 0, 159, 0, 0, 231, 173, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 61, 0, 0, 100, 0, 0, 0,
	0, 0, 0, 0, 0, 121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 0, 0, 0, 0, 0, 260, 0,
	0, 0, 204, 0, 235, 142, 156, 117, 103, 113,
	0, 141, 182, 211, 215, 0, 0, 0, 0, 0,
	125, 0, 213, 192, 251, 0, 0, 194, 212, 160,
	241, 205, 250, 261, 262, 238, 258, 266, 228, 0,
	0, 0, 0, 0, 0, 106, 237, 249, 122, 223,
	108, 247, 234, 171, 151, 152, 107, 0, 209, 130,
	137, 127, 184, 0, 0, 0, 244, 245, 126, 269,
	114, 257, 110, 115, 256, 178, 0, 0, 0, 240,
	248, 172, 165, 0, 109, 246, 170, 164, 155, 134,
	144, 202, 162, 203, 145, 175, 174, 176, 0, 0,
	0, 232, 254, 270, 119, 0, 0, 239, 264, 265,
	0, 0, 120, 138, 133, 201, 177, 116, 147, 229,
	154, 161, 208, 268, 191, 214, 123, 253, 230, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 102, 111,
	158, 267, 206, 136, 255, 0, 0, 129, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 105, 112, 118, 124, 128, 132, 135, 140, 143,
	146, 148, 149, 150, 153, 163, 166, 167, 168, 169,
	179, 180, 181, 183, 186, 187, 188, 189, 190, 193,
	195, 196, 197, 198, 199, 200, 207, 210, 216, 217,
	218, 219, 220, 221, 222, 224, 225, 226, 227, 233,
	236, 242, 243, 252, 259, 263, 185, 0, 0, 0,
	0, 0, 0, 0, 0, 131, 0, 0, 0, 0,
	157, 0, 0, 0, 0, 159, 0, 0, 231, 173,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 433, 0, 0,
	879, 0, 0, 880, 0, 0, 121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 0, 0, 0, 0, 0, 260,
	0, 0, 0, 204, 0, 235, 142, 156, 117, 103,
	113, 0, 141, 182, 211, 215, 0, 0, 0, 0,
	0, 125, 0, 213, 192, 251, 0, 0, 194, 212,
	160, 241, 205, 250, 261, 262, 238, 258, 266, 228,
	0, 0, 0, 0, 0, 0, 106, 237, 249, 122,
	223, 108, 247, 234, 171, 151, 152, 107, 0, 209,
	130, 137, 127, 184, 0, 0, 0, 244, 245, 126,
	269, 114, 257, 110, 115, 256, 178, 0, 0, 0,
	240, 248, 172, 165, 0, 109, 246, 170, 164, 155,
	134, 144, 202, 162, 203, 145, 175, 174, 176, 0,
	0, 0, 232, 254, 270, 119, 0, 0, 239, 264,
	265, 0, 0, 120, 138, 133, 201, 177, 116, 147,
	229, 154, 161, 208, 268, 191, 214, 123, 253, 230,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	111, 158, 267, 206, 136, 255, 0, 0, 129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 105, 112, 118, 124, 128, 132, 135, 140,
	143, 146, 148, 149, 150, 153, 163, 166, 167, 168,
	169, 179, 180, 181, 183, 186, 187, 188, 189, 190,
	193, 195, 196, 197, 198, 199, 200, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 224, 225, 226, 227,
	233, 236, 242, 243, 252, 259, 263, 185, 0, 0,
	0, 0, 0, 0, 0, 0, 131, 752, 0, 0,
	0, 157, 0, 0, 0, 0, 159, 0, 0, 231,
	173, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 433, 0,
	751, 0, 0, 0, 0, 0, 0, 121, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 0, 0, 0, 0, 0,
	260, 0, 0, 0, 204, 0, 235, 142, 156, 117,
	103, 113, 0, 141, 182, 211, 215, 0, 0, 0,
	0, 0, 125, 0, 213, 192, 251, 0, 0, 194,
	212, 160, 241, 205, 250, 261, 262, 238, 258, 266,
	228, 0, 0, 0, 0, 0, 0, 106, 237, 249,
	122, 223, 108, 247, 234, 171, 151, 152, 107, 0,
	209, 130, 137, 127, 184, 0, 0, 0, 244, 245,
	126, 269, 114, 257, 110, 115, 256, 178, 0, 0,
	0, 240, 248, 172, 165, 0, 109, 246, 170, 164,
	155, 134, 144, 202, 162, 203, 145, 175, 174, 176,
	0, 0, 0, 232, 254, 270, 119, 0, 0, 239,
	264, 265, 0, 0, 120, 138, 133, 201, 177, 116,
	147, 229, 154, 161, 208, 268, 191, 214, 123, 253,
	230, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	102, 111, 158, 267, 206, 136, 255, 0, 0, 129,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 105, 112, 118, 124, 128, 132, 135,
	140, 143, 146, 148, 149, 150, 153, 163, 166, 167,
	168, 169, 179, 180, 181, 183, 186, 187, 188, 189,
	190, 193, 195, 196, 197, 198, 199, 200, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 224, 225, 226,
	227, 233, 236, 242, 243, 252, 259, 263, 185, 0,
	0, 0, 0, 0, 0, 0, 0, 131, 0, 0,
	0, 0, 157, 0, 0, 0, 0, 159, 0, 0,
	231, 173, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 100,
	0, 989, 0, 0, 0, 0, 0, 0, 121, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 0, 0, 0, 0, 0,
	0, 260, 0, 0, 0, 204, 0, 235, 142, 156,
	117, 103, 113, 0, 141, 182, 211, 215, 0, 0,
	0, 0, 0, 125, 0, 213, 192, 251, 0, 0,
	194, 212, 160, 241, 205, 250, 261, 262, 238, 258,
	266, 228, 0, 0, 0, 0, 0, 0, 106, 237,
	249, 122, 223, 108, 247, 234, 171, 151, 152, 107,
	0, 209, 130, 137, 127, 184, 0, 0, 0, 244,
	245, 126, 269, 114, 257, 110, 115, 256, 178, 0,
	0, 0, 240, 248, 172, 165, 0, 109, 246, 170,
	164, 155, 134, 144, 202, 162, 203, 145, 175, 174,
	176, 0, 0, 0, 232, 254, 270, 119, 0, 0,
	239, 264, 265, 0, 0, 120, 138, 133, 201, 177,
	116, 147, 229, 154, 161, 208, 268, 191, 214, 123,
	253, 230, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 102, 111, 158, 267, 206, 136, 255, 0, 0,
	129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 105, 112, 118, 124, 128, 132,
	135, 140, 143, 146, 148, 149, 150, 153, 163, 166,
	167, 168, 169, 179, 180, 181, 183, 186, 187, 188,
	189, 190, 193, 195, 196, 197, 198, 199, 200, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 224, 225,
	226, 227, 233, 236, 242, 243, 252, 259, 263, 185,
	0, 0, 0, 0, 0, 0, 0, 0, 131, 0,
	0, 0, 0, 157, 0, 0, 0, 0, 159, 0,
	0, 231, 173, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 61, 0, 0,
	100, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 0, 0, 0,
	0, 0, 260, 0, 0, 0, 204, 0, 235, 142,
	156, 117, 103, 113, 0, 141, 182, 211, 215, 0,
	0, 0, 0, 0, 125, 0, 213, 192, 251, 0,
	0, 194, 212, 160, 241, 205, 250, 261, 262, 238,
	258, 266, 228, 0, 0, 0, 0, 0, 0, 106,
	237, 249, 122, 223, 108, 247, 234, 171, 151, 152,
	107, 0, 209, 130, 137, 127, 184, 0, 0, 0,
	244, 245, 126, 269, 114, 257, 110, 115, 256, 178,
	0, 0, 0, 240, 248, 172, 165, 0, 109, 246,
	170, 164, 155, 134, 144, 202, 162, 203, 145, 175,
	174, 176, 0, 0, 0, 232, 254, 270, 119, 0,
	0, 239, 264, 265, 0, 0, 120, 138, 133, 201,
	177, 116, 147, 229, 154, 161, 208, 268, 191, 214,
	123, 253, 230, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 111, 158, 267, 206, 136, 255, 0,
	0, 129, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 105, 112, 118, 124, 128,
	132, 135, 140, 143, 146, 148, 149, 150, 153, 163,
	166, 167, 168, 169, 179, 180, 181, 183, 186, 187,
	188, 189, 190, 193, 195, 196, 197, 198, 199, 200,
	207, 210, 216, 217, 218, 219, 220, 221, 222, 224,
	225, 226, 227, 233, 236, 242, 243, 252, 259, 263,
	185, 0, 0, 0, 0, 0, 0, 0, 0, 131,
	0, 0, 0, 0, 157, 0, 0, 0, 0, 159,
	0, 0, 231, 173, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 433, 0, 638, 0, 0, 0, 0, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 0, 0, 0,
	0, 0, 0, 260, 0, 0, 0, 204, 0, 235,
	142, 156, 117, 103, 113, 0, 141, 182, 211, 215,
	0, 0, 0, 0, 0, 125, 0, 213, 192, 251,
	0, 0, 194, 212, 160, 241, 205, 250, 261, 262,
	238, 258, 266, 228, 0, 0, 0, 0, 0, 0,
	106, 237, 249, 122, 223, 108, 247, 234, 171, 151,
	152, 107, 0, 209, 130, 137, 127, 184, 0, 0,
	0, 244, 245, 126, 269, 114, 257, 110, 115, 256,
	178, 0, 0, 0, 240, 248, 172, 165, 0, 109,
	246, 170, 164, 155, 134, 144, 202, 162, 203, 145,
	175, 174, 176, 0, 0, 0, 232, 254, 270, 119,
	0, 0, 239, 264, 265, 0, 0, 120, 138, 133,
	201, 177, 116, 147, 229, 154, 161, 208, 268, 191,
	214, 123, 253, 230, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 102, 111, 158, 267, 206, 136, 255,
	0, 0, 129, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 105, 112, 118, 124,
	128, 132, 135, 140, 143, 146, 148, 149, 150, 153,
	163, 166, 167, 168, 169, 179, 180, 181, 183, 186,
	187, 188, 189, 190, 193, 195, 196, 197, 198, 199,
	200, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	224, 225, 226, 227, 233, 236, 242, 243, 252, 259,
	263, 185, 0, 0, 0, 0, 0, 0, 0, 722,
	131, 0, 0, 0, 0, 157, 0, 0, 0, 0,
	159, 0, 0, 231, 173, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 100, 0, 0, 0, 0, 0, 0, 0,
	0, 121, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 0, 0,
	0, 0, 0, 0, 260, 0, 0, 0, 204, 0,
	235, 142, 156, 117, 103, 113, 0, 141, 182, 211,
	215, 0, 0, 0, 0, 0, 125, 0, 213, 192,
	251, 0, 0, 194, 212, 160, 241, 205, 250, 261,
	262, 238, 258, 266, 228, 0, 0, 0, 0, 0,
	0, 106, 237, 249, 122, 223, 108, 247, 234, 171,
	151, 152, 107, 0, 209, 130, 137, 127, 184, 0,
	0, 0, 244, 245, 126, 269, 114, 257, 110, 115,
	256, 178, 0, 0, 0, 240, 248, 172, 165, 0,
	109, 246, 170, 164, 155, 134, 144, 202, 162, 203,
	145, 175, 174, 176, 0, 0, 0, 232, 254, 270,
	119, 0, 0, 239, 264, 265, 0, 0, 120, 138,
	133, 201, 177, 116, 147, 229, 154, 161, 208, 268,
	191, 214, 123, 253, 230, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 111, 158, 267, 206, 136,
	255, 0, 0, 129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 105, 112, 118,
	124, 128, 132, 135, 140, 143, 146, 148, 149, 150,
	153, 163, 166, 167, 168, 169, 179, 180, 181, 183,
	186, 187, 188, 189, 190, 193, 195, 196, 197, 198,
	199, 200, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 224, 225, 226, 227, 233, 236, 242, 243, 252,
	259, 263, 395, 0, 0, 0, 0, 0, 0, 185,
	0, 0, 0, 0, 0, 0, 0, 0, 131, 0,
	0, 0, 0, 157, 0, 0, 0, 0, 159, 0,
	0, 231, 173, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	100, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 0, 0, 0,
	0, 0, 260, 0, 0, 0, 204, 0, 235, 142,
	156, 117, 103, 113, 0, 141, 182, 211, 215, 0,
	0, 0, 0, 0, 125, 0, 213, 192, 251, 0,
	0, 194, 212, 160, 241, 205, 250, 261, 262, 238,
	258, 266, 228, 0, 0, 0, 0, 0, 0, 106,
	237, 249, 122, 223, 108, 247, 234, 171, 151, 152,
	107, 0, 209, 130, 137, 127, 184, 0, 0, 0,
	244, 245, 126, 269, 114, 257, 110, 115, 256, 178,
	0, 0, 0, 240, 248, 172, 165, 0, 109, 246,
	170, 164, 155, 134, 144, 202, 162, 203, 145, 175,
	174, 176, 0, 0, 0, 232, 254, 270, 119, 0,
	0, 239, 264, 265, 0, 0, 120, 138, 133, 201,
	177, 116, 147, 229, 154, 161, 208, 268, 191, 214,
	123, 253, 230, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 111, 158, 267, 206, 136, 255, 0,
	0, 129, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 105, 112, 118, 124, 128,
	132, 135, 140, 143, 146, 148, 149, 150, 153, 163,
	166, 167, 168, 169, 179, 180, 181, 183, 186, 187,
	188, 189, 190, 193, 195, 196, 197, 198, 199, 200,
	207, 210, 216, 217, 218, 219, 220, 221, 222, 224,
	225, 226, 227, 233, 236, 242, 243, 252, 259, 263,
	185, 0, 0, 0, 0, 0, 0, 0, 0, 131,
	0, 0, 0, 0, 157, 0, 0, 0, 0, 159,
	0, 0, 231, 173, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 100, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 0, 0, 0,
	97, 0, 0, 260, 0, 0, 0, 204, 0, 235,
	142, 156, 117, 103, 113, 0, 141, 182, 211, 215,
	0, 0, 0, 0, 0, 125, 0, 213, 192, 251,
	0, 0, 194, 212, 160, 241, 205, 250, 261, 262,
	238, 258, 266, 228, 0, 0, 0, 0, 0, 0,
	106, 237, 249, 122, 223, 108, 247, 234, 171, 151,
	152, 107, 0, 209, 130, 137, 127, 184, 0, 0,
	0, 244, 245, 126, 269, 114, 257, 110, 115, 256,
	178, 0, 0, 0, 240, 248, 172, 165, 0, 109,
	246, 170, 164, 155, 134, 144, 202, 162, 203, 145,
	175, 174, 176, 0, 0, 0, 232, 254, 270, 119,
	0, 0, 239, 264, 265, 0, 0, 120, 138, 133,
	201, 177, 116, 147, 229, 154, 161, 208, 268, 191,
	214, 123, 253, 230, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 102, 111, 158, 267, 206, 136, 255,
	0, 0, 129, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 105, 112, 118, 124,
	128, 132, 135, 140, 143, 146, 148, 149, 150, 153,
	163, 166, 167, 168, 169, 179, 180, 181, 183, 186,
	187, 188, 189, 190, 193, 195, 196, 197, 198, 199,
	200, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	224, 225, 226, 227, 233, 236, 242, 243, 252, 259,
	263, 185, 0, 0, 0, 0, 0, 0, 0, 0,
	131, 0, 0, 0, 0, 157, 0, 0, 0, 0,
	159, 0, 0, 231, 173, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 433, 0, 0, 0, 0, 0, 0, 0,
	0, 121, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 0, 0,
	0, 0, 0, 0, 260, 0, 0, 0, 204, 0,
	235, 142, 156, 117, 103, 113, 0, 141, 182, 211,
	215, 0, 0, 0, 0, 0, 125, 0, 213, 192,
	251, 0, 0, 194, 212, 160, 241, 205, 250, 261,
	262, 238, 258, 266, 228, 0, 0, 0, 0, 0,
	0, 106, 237, 249, 122, 223, 108, 247, 234, 171,
	151, 152, 107, 0, 209, 130, 137, 127, 184, 0,
	0, 0, 244, 245, 126, 269, 114, 257, 110, 115,
	256, 178, 0, 0, 0, 240, 248, 172, 165, 0,
	109, 246, 170, 164, 155, 134, 144, 202, 162, 203,
	145, 175, 174, 176, 0, 0, 0, 232, 254, 270,
	119, 0, 0, 239, 264, 265, 0, 0, 120, 138,
	133, 201, 177, 116, 147, 229, 154, 161, 208, 268,
	191, 214, 123, 253, 230, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 111, 158, 267, 206, 136,
	255, 0, 0, 129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 105, 112, 118,
	124, 128, 132, 135, 140, 143, 146, 148, 149, 150,
	153, 163, 166, 167, 168, 169, 179, 180, 181, 183,
	186, 187, 188, 189, 190, 193, 195, 196, 197, 198,
	199, 200, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 224, 225, 226, 227, 233, 236, 242, 243, 252,
	259, 263, 185, 0, 0, 0, 0, 0, 0, 0,
	0, 131, 0, 0, 0, 0, 157, 0, 0, 0,
	0, 159, 0, 0, 231, 173, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
	0, 0, 0, 0, 0, 260, 0, 0, 0, 204,
	0, 235, 142, 156, 117, 103, 113, 0, 141, 182,
	211, 215, 0, 0, 0, 0, 0, 125, 0, 213,
	192, 251, 0, 0, 194, 212, 160, 241, 205, 250,
	261, 262, 238, 258, 266, 228, 0, 0, 0, 0,
	0, 0, 106, 237, 249, 122, 223, 108, 247, 234,
	171, 151, 152, 107, 0, 209, 130, 137, 127, 184,
	0, 0, 0, 244, 245, 126, 269, 114, 257, 110,
	115, 256, 178, 0, 0, 0, 240, 248, 172, 165,
	0, 109, 246, 170, 164, 155, 134, 144, 202, 162,
	203, 145, 175, 174, 176, 0, 0, 0, 232, 254,
	270, 119, 0, 0, 239, 264, 265, 0, 0, 120,
	138, 133, 201, 177, 116, 147, 229, 154, 161, 208,
	268, 191, 214, 123, 253, 230, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 102, 111, 158, 267, 206,
	136, 255, 0, 0, 129, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 105, 112,
	118, 124, 128, 132, 135, 140, 143, 146, 148, 149,
	150, 153, 163, 166, 167, 168, 169, 179, 180, 181,
	183, 186, 187, 188, 189, 190, 193, 195, 196, 197,
	198, 199, 200, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 224, 225, 226, 227, 233, 236, 242, 243,
	252, 259, 263, 185, 0, 0, 0, 0, 0, 0,
	0, 0, 131, 0, 0, 0, 0, 157, 0, 0,
	0, 0, 159, 0, 0, 231, 173, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 334, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	0, 0, 0, 0, 0, 0, 260, 0, 0, 0,
	204, 0, 235, 142, 156, 117, 103, 113, 0, 141,
	182, 211, 215, 0, 0, 0, 0, 0, 125, 0,
	213, 192, 251, 0, 0, 194, 212, 160, 241, 205,
	250, 261, 262, 238, 258, 266, 228, 0, 0, 0,
	0, 0, 0, 106, 237, 249, 122, 223, 108, 247,
	234, 171, 151, 152, 107, 0, 209, 130, 137, 127,
	184, 0, 0, 0, 244, 245, 126, 269, 114, 257,
	110, 412, 256, 178, 0, 0, 0, 240, 248, 172,
	165, 0, 109, 246, 170, 164, 155, 134, 144, 202,
	162, 203, 145, 175, 174, 176, 0, 0, 0, 232,
	254, 270, 119, 0, 0, 239, 264, 265, 0, 0,
	120, 138, 133, 201, 413, 411, 147, 229, 154, 161,
	208, 268, 191, 214, 123, 253, 230, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 102, 111, 158, 267,
	206, 136, 255, 0, 0, 129, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 105,
	112, 118, 124, 128, 132, 135, 140, 143, 146, 148,
	149, 150, 153, 163, 166, 167, 168, 169, 179, 180,
	181, 183, 186, 187, 188, 189, 190, 193, 195, 196,
	197, 198, 199, 200, 207, 210, 216, 217, 218, 219,
	220, 221, 222, 224, 225, 226, 227, 233, 236, 242,
	243, 252, 259, 263, 185, 0, 0, 0, 0, 0,
	0, 0, 0, 131, 0, 0, 0, 0, 157, 0,
	0, 0, 0, 159, 0, 0, 231, 173, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 334, 0, 0, 0, 0,
	0, 0, 0, 0, 121, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 0, 0, 0, 0, 0, 0, 260, 0, 0,
	0, 204, 0, 235, 142, 156, 117, 103, 113, 0,
	141, 182, 211, 215, 0, 0, 0, 0, 0, 125,
	0, 213, 192, 251, 0, 0, 194, 212, 160, 241,
	205, 250, 261, 262, 238, 258, 266, 228, 0, 0,
	0, 0, 0, 0, 106, 237, 249, 122, 223, 108,
	247, 234, 171, 151, 152, 107, 0, 209, 130, 137,
	127, 184, 0, 0, 0, 244, 245, 126, 269, 114,
	257, 110, 115, 256, 178, 0, 0, 0, 240, 248,
	172, 165, 0, 109, 246, 170, 164, 155, 134, 144,
	202, 162, 203, 145, 175, 174, 176, 0, 0, 0,
	232, 254, 270, 119, 0, 0, 239, 264, 265, 0,
	0, 120, 138, 133, 201, 177, 116, 147, 229, 154,
	161, 208, 268, 191, 214, 123, 253, 230, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 102, 111, 158,
	267, 206, 136, 255, 0, 0, 129, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	105, 112, 118, 124, 128, 132, 135, 140, 143, 146,
	148, 149, 150, 153, 163, 166, 167, 168, 169, 179,
	180, 181, 183, 186, 187, 188, 189, 190, 193, 195,
	196, 197, 198, 199, 200, 207, 210, 216, 217, 218,
	219, 220, 221, 222, 224, 225, 226, 227, 233, 236,
	242, 243, 252, 259, 263, 185, 0, 0, 0, 0,
	0, 0, 0, 0, 131, 0, 0, 0, 0, 157,
	0, 0, 0, 0, 159, 0, 0, 231, 173, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 334, 0, 0, 0,
	0, 0, 0, 0, 0, 121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 0, 0, 0, 0, 0, 260, 0,
	0, 0, 204, 0, 235, 142, 156, 117, 103, 113,
	0, 141, 182, 211, 215, 0, 0, 0, 0, 0,
	125, 0, 213, 192, 251, 0, 0, 194, 212, 160,
	241, 205, 250, 261, 262, 238, 258, 266, 228, 0,
	0, 0, 0, 0, 0, 106, 237, 743, 122, 223,
	108, 247, 234, 171, 151, 152, 107, 0, 209, 130,
	137, 127, 184, 0, 0, 0, 244, 245, 126, 269,
	114, 257, 110, 412, 256, 178, 0, 0, 0, 240,
	248, 172, 165, 0, 109, 246, 170, 164, 155, 134,
	144, 202, 162, 203, 145, 175, 174, 176, 0, 0,
	0, 232, 254, 270, 119, 0, 0, 239, 264, 265,
	0, 0, 120, 138, 133, 201, 413, 411, 147, 229,
	154, 161, 208, 268, 191, 214, 123, 253, 230, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 102, 111,
	158, 267, 206, 136, 255, 0, 0, 129, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 105, 112, 118, 124, 128, 132, 135, 140, 143,
	146, 148, 149, 150, 153, 163, 166, 167, 168, 169,
	179, 180, 181, 183, 186, 187, 188, 189, 190, 193,
	195, 196, 197, 198, 199, 200, 207, 210, 216, 217,
	218, 219, 220, 221, 222, 224, 225, 226, 227, 233,
	236, 242, 243, 252, 259, 263, 185, 0, 0, 0,
	0, 0, 0, 0, 0, 131, 0, 0, 0, 0,
	157, 0, 0, 0, 0, 159, 0, 0, 231, 173,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 334, 0, 0,
	0, 0, 0, 0, 0, 0, 121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 0, 0, 0, 0, 0, 260,
	0, 0, 0, 204, 0, 235, 142, 156, 117, 103,
	113, 0, 141, 182, 211, 215, 0, 0, 0, 0,
	0, 125, 0, 213, 192, 251, 0, 0, 194, 212,
	160, 241, 205, 250, 261, 262, 238, 258, 266, 228,
	0, 0, 0, 0, 0, 0, 106, 237, 403, 122,
	223, 108, 247, 234, 171, 151, 152, 107, 0, 209,
	130, 137, 127, 184, 0, 0, 0, 244, 245, 126,
	269, 114, 257, 110, 412, 256, 178, 0, 0, 0,
	240, 248, 172, 165, 0, 109, 246, 170, 164, 155,
	134, 144, 202, 162, 203, 145, 175, 174, 176, 0,
	0, 0, 232, 254, 270, 119, 0, 0, 239, 264,
	265, 0, 0, 120, 138, 133, 201, 413, 411, 406,
	405, 154, 161, 208, 268, 191, 214, 123, 253, 230,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	111, 158, 267, 206, 136, 255, 0, 0, 129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 105, 112, 118, 124, 128, 132, 135, 140,
	143, 146, 148, 149, 150, 153, 163, 166, 167, 168,
	169, 179, 180, 181, 183, 186, 187, 188, 189, 190,
	193, 195, 196, 197, 198, 199, 200, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 224, 225, 226, 227,
	233, 236, 242, 243, 252, 259, 263,
}
var yyPact = [...]int{

	1950, -1000, -254, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1181, 1256, -1000, -1000, -1000, -1000,
	-1000, -1000, 444, 450, -1000, -1000, -1000, 205, 31, 15162,
	204, 1771, 15864, -1000, 52, -1000, -1000, 157, 15864, -1000,
	-1000, -90, -93, -1000, 966, -1000, -1000, 39, -1000, -1000,
	-1000, -1000, -1000, -1000, 1164, 1178, 1017, 1171, 1075, -1000,
	7397, 147, 147, 14811, 17268, -1000, -1000, 389, 15864, 195,
	15864, -139, 142, 142, 83, 142, -1000, 456, -1000, -1000,
	-1000, 15864, 149, 15513, 149, 149, 149, 15864, -1000, 311,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 15864, 845, 1130, 4524, 79, 4524, 4524, -1000, 475,
	-1000, 4524, 70, 4524, -69, 567, 72, 2, -1000, 4524,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 193, 966,
	451, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 759, 202,
	15864, 434, -1000, 1124, 8813, 8813, 1181, -1000, 966, -1000,
	-1000, -1000, 1109, -1000, -1000, 534, 1226, -1000, 11270, 308,
	-1000, 8813, 2048, 959, -1000, -1000, 959, -1000, -1000, 293,
	-1000, -1000, 9866, 9866, 9866, 9866, 9866, 9866, 9866, 9866,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 959, -1000, 8462, 959, 959, 959,
	959, 959, 959, 959, 959, 959, 959, 8813, 959, 959,
	959, 959, 959, 959, 959, 959, 959, 959, 959, 959,
	959, 959, 959, 14453, 13751, 15864, 921, 868, -1000, -1000,
	307, 897, 16917, -116, -1000, -1000, -1000, 446, 13049, -1000,
	297, -1000, 1127, -1000, 864, 15864, -1000, 2728, -1000, 15513,
	1157, 183, 844, 459, 843, 841, 15864, 839, 957, 173,
	15864, 1147, 1033, -1000, -1000, 15864, 834, 832, -1000, 6344,
	-1000, 4524, 4524, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 142, 142,
	4524, 4524, 15864, 4524, 15864, -1000, -1000, 15864, -1000, -1000,
	-1000, 4524, 4524, -1000, 1223, 428, -1000, -1000, -1000, -1000,
	8813, -1000, 9866, 353, -1000, 1027, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 831, -1000, -1000, -1000, -1000, 15864, 4524,
	81, 125, 122, 15864, -1000, 1251, 335, 599, 251, 956,
	-1000, 544, 1164, 759, 1075, 12698, 995, -1000, -1000, -1000,
	15864, -1000, 8813, 8813, 646, -1000, 14102, -1000, -1000, 5252,
	374, 9866, 509, 383, 9866, 9866, 9866, 9866, 9866, 9866,
	9866, 9866, 9866, 9866, 9866, 9866, 9866, 9866, 9866, 641,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 801, -1000,
	966, 1046, 1046, 298, 298, 298, 298, 298, 298, 298,
	10217, 1153, 759, 830, 620, 8462, 7397, 7397, 759, 8813,
	8813, 8099, 7748, 7397, 7397, 1153, 421, 620, 16566, -1000,
	-1000, 9515, -1000, -1000, -1000, -1000, -1000, 759, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 15513, 15513, 7397, 7397, 7397,
	7397, 96, 15864, -1000, 952, 1076, -1000, -1000, -1000, 1155,
	12347, 10919, 96, 896, 13751, 15864, -1000, -1000, 13751, 15864,
	4888, 16215, 897, -116, 934, -1000, -113, -89, 6695, 296,
	-1000, -1000, -1000, 5980, -1000, 3796, 416, 889, -1000, -57,
	-1000, -1000, -1000, 973, -1000, 973, 139, 5, 973, 973,
	973, 973, 973, -6, -6, -6, -6, 25, -1000, -1000,
	-1000, -1000, -1000, 991, 989, -1000, 973, 973, 973, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 985, 156, 985,
	976, 976, 976, 976, 993, -1000, 15864, 4524, 1146, 4524,
	86, -1000, -1000, 15864, 15864, 951, -1000, 15864, 946, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 799, 796, -1000,
	-1000, -1000, -1000, -1000, 430, -1000, -1000, 15864, 1154, 15864,
	15864, 620, 810, -1000, 624, 15864, -1000, 146, -1000, 15864,
	15864, 15864, 15864, 15864, 228, -1000, 1085, 8813, 8813, 5980,
	8813, -1000, -1000, -1000, 1124, -1000, 1153, 1188, -1000, 1102,
	1101, 7397, -1000, -1000, 374, 395, -1000, -1000, 657, -1000,
	-1000, -1000, -1000, 249, 959, -1000, 2347, -1000, -1000, -1000,
	-1000, 509, 9866, 9866, 9866, 810, 2347, 2331, 838, 1956,
	298, 577, 577, 328, 328, 328, 328, 328, 960, 960,
	-1000, -1000, -1000, 759, -1000, -1000, -1000, 7397, -1000, 8813,
	-1000, 759, 820, -1000, 820, -1000, 551, 522, 342, 1222,
	820, 336, 1208, 820, 820, 820, 7397, 555, -1000, 8813,
	759, -1000, 1125, 945, 939, 820, 759, 937, 820, 820,
	863, 959, -1000, 16215, 13751, 13751, 13751, 13751, 13751, -1000,
	1069, 1052, -1000, 1045, 1044, 1054, 15864, -1000, 817, 12347,
	-1000, 959, -1000, 11984, 292, 194, 192, 191, -1000, -1000,
	1198, 13751, 877, -1000, 877, -1000, 246, -1000, -1000, 934,
	-116, -109, -1000, -1000, -1000, -1000, 620, -1000, 671, -1000,
	240, 927, 3432, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	986, 790, -1000, 1115, 291, 282, 683, 1108, -1000, -1000,
	-1000, 579, -63, -1000, -1000, 582, -6, -6, 973, 973,
	135, 973, -1000, -6, -1000, -1000, -1000, 296, 1126, 296,
	296, 296, 296, -6, 614, 614, -1000, -1000, -1000, -1000,
	576, -1000, 985, -1000, -1000, 570, -1000, -1000, -1000, 1026,
	15513, 966, 1149, -1000, -1000, -1000, 1241, -1000, -1000, 171,
	-1000, 4524, 15864, 4524, 4524, 1198, 787, 780, 428, 546,
	-189, -1000, -1000, -1000, 9866, -1000, -1000, -1000, 480, 403,
	295, 128, 128, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 95, 961, -1000, -1000, -1000, -1000,
	13, 80, 1073, 620, 620, -1000, -1000, 15864, -1000, -1000,
	-1000, -1000, 941, -1000, -1000, -1000, 4160, 7397, -1000, 810,
	2347, 2265, -1000, 9866, -1000, 759, 620, -1000, 7397, -1000,
	-1000, 469, 641, 469, 9866, 9866, -1000, 9866, 9866, -1000,
	-153, -1000, 916, 384, -1000, 8813, 691, -1000, -1000, 9866,
	9866, -1000, -1000, -1000, -1000, 1021, 16215, 959, -1000, 11633,
	15513, 938, 1076, 984, 1020, 1318, -1000, -1000, -1000, -1000,
	1051, -1000, 1048, -1000, -1000, -1000, -1000, 15513, 9866, 292,
	-1000, 959, 959, 959, 1181, 8813, 877, -1000, -1000, 332,
	-1000, -1000, -122, -95, -1000, -1000, -1000, 5616, 3796, -1000,
	3796, 15513, 117, -1000, 683, 683, -1000, -1000, -1000, 979,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 478, 9866, 1250,
	-1000, 1111, -1000, 1110, 608, -1000, -1000, 866, 296, 296,
	-6, -1000, -1000, 973, -1000, 296, -1000, 369, -1000, -1000,
	-1000, -1000, 296, 815, -1000, 809, 926, -1000, 807, 15864,
	-1000, -1000, -1000, 1005, -1000, -1000, -1000, 15864, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 546, -1000, 603, 8813, 9866,
	2347, -1000, 698, -1000, 683, 263, -1000, -1000, -1000, 767,
	1108, -1000, -1000, 760, -1000, 733, 15513, 1107, 722, 15864,
	15513, -1000, -1000, 689, 720, 15513, -161, 711, 15513, 15513,
	15513, -1000, -1000, 1198, 13751, -1000, -1000, 759, -1000, 9866,
	2347, -1000, -1000, 759, 973, 973, -1000, 973, 976, -1000,
	973, 40, 973, 16, 759, 759, 2250, 2199, 2160, 2084,
	959, -147, -1000, 620, 8813, 2068, 1689, -1000, 1133, 876,
	913, -1000, -1000, 7046, 759, 794, 223, 784, -1000, 1181,
	-1000, -1000, 8813, 974, -1000, 8813, -1000, -1000, -1000, 784,
	1942, -1000, 15513, 15513, 15513, 1164, 620, -1000, -1000, -1000,
	-1000, 3432, -1000, 758, -1000, 973, -1000, -1000, -1000, 15513,
	-1000, 2347, -81, -1000, -1000, -1000, -1000, -1000, -1000, 296,
	-1000, -1000, -1000, -1000, -1000, -6, 597, -6, 566, -1000,
	549, 972, -1000, 966, 15864, -1000, -1000, -1000, 620, 2347,
	689, 109, -1000, 993, 291, 117, -1000, -1000, -1000, -1000,
	699, 289, -1000, 169, 109, 689, 1138, -1000, 5616, -1000,
	-1000, 970, 994, -1000, 1196, 920, -1000, 2347, -1000, -1000,
	137, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 9866,
	9866, 9866, 9866, 9866, 759, 592, 620, 9866, 9866, 1106,
	-1000, 959, -1000, -1000, 943, 15513, 15513, -1000, 15513, 1164,
	620, 15513, 620, 10568, -1000, 13400, 756, -1000, 756, 756,
	-1000, 218, 15513, 1137, 731, -1000, -1000, 296, -1000, 296,
	860, 795, 15513, -1000, 1156, 785, -1000, -1000, 685, 969,
	683, -1000, -1000, 681, -1000, -1000, 15513, -1000, 109, 959,
	914, -1000, 442, 15513, 15864, 1184, 1177, -1000, -1000, 1125,
	1125, 1125, 1125, 120, -1000, -1000, 1125, 1125, 1249, -1000,
	959, -1000, 966, 221, -1000, -1000, -1000, 729, -1000, 292,
	15513, -1000, -1000, -1000, 218, -1000, 679, 394, 580, -1000,
	-1000, 113, -1000, -1000, -1000, -1000, 727, -1000, 65, -1000,
	-1000, -1000, 15513, 993, -1000, -1000, -1000, -1000, 94, 5616,
	3796, 710, -1000, -1000, 8813, 8813, -1000, -1000, -1000, -1000,
	759, 78, -164, -1000, -1000, 16215, 913, 759, 15513, -1000,
	-1000, -1000, -1000, -1000, 543, -1000, -1000, 15864, 218, 63,
	-1000, 692, 968, -1000, 667, -1000, 15513, -1000, -1000, 961,
	620, 900, -1000, 1049, -156, -167, 897, -1000, -1000, -1000,
	963, -1000, 218, 58, 218, 15513, -1000, 94, 1092, -161,
	-1000, 1030, -1000, 15513, -1000, 660, 656, -1000, 651, -1000,
	90, -1000, -162, 639, 134, -1000, -1000, 218, 88, -165,
	1002, -1000, -1000, -1000, -1000, -1000, -1000, 511, -1000, 959,
	-169, 1000, 996, 1206, -1000, -256, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 8813, 8813, 9164, -1000, -1000,
	1247, -1000, 1230, 327, 327, 520, 410, 672, 1125, 759,
	-1000, -1000, -1000, 121, 572, -1000, -1000, -1000, 568, -1000,
	8813, 511, -1000, -1000, -1000, -1000, -1000, 485, 511, -1000,
	618, -258, -1000, -259, 511, 388, 279, -260, 623, -1000,
	8813, 463, 511, 140, 511, -1000, 481, -1000, -1000, -261,
	511, 184, -262, 136, 511, -1000,
}
var yyPgo = [...]int{

	0, 1498, 40, 621, 1497, 1496, 1495, 27, 14, 10,
	30, 1494, 1493, 1492, 1490, 1489, 1488, 19, 4, 1477,
	1476, 3, 1471, 2, 1470, 5, 1467, 1466, 1465, 1462,
	1461, 1459, 1458, 1457, 1456, 1455, 1454, 1453, 1450, 1448,
	1447, 1446, 1444, 1443, 125, 1441, 1440, 1439, 126, 1437,
	98, 1436, 1435, 1434, 68, 136, 79, 64, 87, 1433,
	1432, 86, 90, 77, 1431, 62, 1427, 1426, 103, 1425,
	1423, 1422, 81, 1421, 1419, 1811, 1418, 92, 1416, 34,
	36, 104, 1414, 1413, 1408, 1407, 102, 148, 1406, 1401,
	1400, 46, 1399, 1398, 131, 1396, 88, 32, 26, 33,
	45, 1395, 166, 70, 1392, 83, 1391, 1389, 1386, 1385,
	82, 1382, 35, 1381, 89, 22, 37, 44, 84, 1380,
	9, 100, 54, 50, 29, 91, 1379, 85, 78, 1378,
	1377, 589, 1375, 1374, 74, 1371, 1370, 56, 1360, 489,
	96, 52, 1357, 1356, 1355, 1353, 48, 65, 1352, 1350,
	21, 1643, 93, 20, 1197, 140, 97, 1349, 39, 1344,
	1891, 105, 43, 61, 1343, 1338, 58, 1337, 1335, 1334,
	1333, 1332, 1329, 1328, 1324, 1069, 1323, 1322, 1321, 151,
	134, 1320, 1317, 76, 49, 1316, 1314, 1313, 80, 53,
	1312, 73, 51, 1310, 1309, 1308, 1305, 59, 1302, 1300,
	1299, 1297, 1296, 57, 23, 1289, 42, 24, 17, 38,
	13, 47, 1288, 16, 1283, 25, 1280, 12, 1274, 18,
	66, 6, 8, 7, 1271, 1269, 1265, 0, 322, 106,
	1264, 1262, 124,
}
var yyR1 = [...]int{

	0, 225, 226, 226, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 6,
	3, 4, 4, 5, 5, 7, 7, 47, 47, 8,
	9, 9, 9, 9, 229, 229, 70, 70, 68, 68,
	69, 69, 121, 121, 10, 10, 10, 10, 125, 125,
	128, 128, 128, 129, 129, 129, 129, 164, 164, 115,
	12, 12, 12, 12, 12, 12, 12, 12, 149, 149,
	26, 26, 27, 27, 27, 113, 113, 113, 11, 11,
	11, 11, 11, 17, 19, 19, 22, 22, 23, 20,
	20, 24, 24, 25, 21, 21, 18, 18, 18, 18,
	18, 18, 18, 18, 219, 219, 218, 217, 217, 216,
	216, 215, 32, 199, 201, 201, 200, 200, 200, 200,
	189, 168, 168, 168, 168, 168, 168, 168, 167, 167,
	167, 167, 171, 171, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 170, 170, 170, 170, 170, 170, 170,
	170, 172, 172, 172, 172, 172, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 174, 174, 174, 174, 174, 174, 174, 174, 188,
	188, 175, 175, 183, 183, 184, 184, 184, 181, 181,
	182, 182, 185, 185, 177, 178, 186, 179, 179, 179,
	180, 180, 180, 187, 187, 187, 187, 176, 190, 190,
	210, 210, 209, 209, 208, 208, 208, 198, 198, 205,
	205, 205, 205, 205, 193, 193, 193, 192, 192, 194,
	194, 197, 197, 207, 207, 206, 191, 191, 211, 211,
	211, 211, 211, 195, 195, 196, 196, 196, 222, 223,
	221, 221, 221, 221, 221, 202, 202, 202, 203, 203,
	203, 204, 204, 204, 224, 224, 28, 28, 28, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 112, 112, 112,
	30, 31, 31, 31, 31, 31, 31, 31, 31, 147,
	147, 220, 220, 220, 220, 220, 214, 212, 212, 213,
	213, 13, 33, 33, 14, 14, 14, 14, 14, 15,
	15, 34, 35, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 59, 135, 135, 133, 133, 136, 136, 134,
	134, 134, 137, 137, 137, 138, 138, 165, 165, 165,
	36, 36, 41, 41, 42, 43, 148, 148, 39, 39,
	40, 40, 40, 40, 53, 53, 230, 230, 38, 38,
	37, 37, 37, 37, 16, 231, 44, 45, 45, 46,
	46, 46, 50, 50, 50, 48, 48, 48, 49, 49,
	56, 56, 55, 55, 57, 57, 57, 57, 157, 157,
	157, 156, 156, 60, 60, 61, 61, 62, 62, 63,
	63, 63, 63, 78, 78, 79, 79, 79, 79, 79,
	89, 89, 120, 120, 122, 122, 64, 64, 64, 64,
	65, 65, 66, 66, 67, 67, 146, 146, 162, 162,
	71, 71, 71, 73, 72, 72, 72, 72, 74, 74,
	76, 76, 75, 75, 77, 80, 80, 80, 80, 81,
	81, 58, 58, 58, 58, 58, 58, 58, 132, 132,
	83, 83, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 95, 95, 95, 95, 95, 95, 84, 84,
	84, 84, 84, 84, 84, 54, 54, 96, 96, 96,
	102, 97, 97, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 92, 92, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 91, 91, 91, 91, 91, 91, 91, 91,
	91, 91, 91, 91, 91, 91, 91, 91, 232, 232,
	94, 93, 93, 93, 93, 93, 93, 51, 51, 51,
	51, 51, 163, 163, 166, 166, 166, 166, 166, 166,
	166, 166, 166, 166, 166, 166, 166, 106, 106, 52,
	52, 104, 104, 105, 107, 107, 103, 103, 103, 86,
	86, 86, 86, 86, 86, 86, 86, 88, 88, 88,
	108, 108, 109, 109, 110, 110, 111, 111, 114, 116,
	116, 116, 117, 117, 117, 117, 118, 118, 118, 85,
	85, 85, 85, 85, 85, 119, 119, 119, 119, 123,
	123, 98, 98, 100, 100, 99, 101, 124, 124, 127,
	127, 127, 127, 126, 126, 126, 159, 159, 159, 130,
	130, 139, 139, 140, 140, 131, 131, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 145, 145, 144,
	144, 144, 141, 141, 141, 142, 142, 158, 158, 154,
	154, 155, 155, 160, 160, 161, 161, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 227, 228, 150, 151,
	151, 151,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 4, 6, 7, 5,
	10, 1, 3, 1, 3, 7, 8, 1, 1, 9,
	8, 7, 6, 6, 1, 1, 1, 3, 1, 3,
	1, 3, 0, 4, 3, 4, 5, 4, 1, 3,
	3, 2, 2, 2, 2, 2, 1, 1, 1, 0,
	2, 2, 11, 7, 9, 5, 5, 15, 0, 3,
	1, 1, 1, 1, 1, 0, 2, 2, 1, 1,
	1, 1, 1, 4, 5, 8, 1, 2, 5, 8,
	11, 1, 2, 5, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 0, 2, 1,
	3, 3, 4, 4, 2, 4, 1, 3, 3, 3,
	3, 0, 2, 2, 2, 2, 2, 2, 3, 1,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 3, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 1, 4, 4, 3, 3,
	2, 4, 5, 2, 3, 4, 2, 2, 3, 3,
	3, 3, 3, 4, 1, 1, 1, 1, 1, 6,
	6, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 1,
	0, 1, 1, 2, 2, 3, 1, 0, 3, 3,
	0, 2, 2, 2, 1, 2, 1, 2, 5, 4,
	0, 1, 1, 2, 2, 3, 2, 0, 1, 2,
	3, 3, 2, 2, 1, 1, 1, 1, 1, 0,
	1, 0, 1, 1, 3, 3, 3, 1, 10, 11,
	11, 12, 12, 1, 1, 0, 2, 2, 3, 3,
	1, 1, 2, 2, 2, 0, 1, 3, 1, 2,
	3, 1, 1, 1, 0, 2, 1, 1, 1, 6,
	10, 9, 7, 7, 7, 9, 7, 12, 14, 7,
	7, 9, 9, 10, 5, 6, 8, 0, 1, 2,
	4, 7, 5, 5, 5, 12, 7, 5, 9, 0,
	1, 1, 1, 1, 1, 1, 7, 1, 3, 8,
	8, 3, 3, 5, 4, 6, 4, 4, 4, 3,
	2, 3, 4, 4, 3, 6, 6, 4, 4, 4,
	4, 4, 3, 3, 2, 6, 2, 3, 4, 3,
	7, 6, 4, 2, 4, 3, 4, 3, 3, 5,
	2, 3, 3, 1, 1, 0, 1, 1, 1, 0,
	2, 2, 0, 2, 2, 0, 2, 0, 1, 1,
	2, 1, 1, 2, 1, 1, 1, 1, 3, 3,
	1, 1, 1, 1, 0, 3, 1, 1, 2, 2,
	2, 2, 3, 3, 2, 0, 2, 0, 2, 1,
	2, 2, 0, 1, 1, 0, 1, 1, 0, 1,
	0, 1, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 1, 0, 2, 1, 3, 1, 1, 1,
	3, 1, 3, 2, 6, 1, 4, 6, 3, 2,
	0, 3, 1, 3, 1, 3, 4, 4, 4, 3,
	2, 4, 0, 1, 0, 2, 0, 1, 1, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 3, 0, 5, 5, 5, 0,
	2, 1, 3, 3, 2, 3, 1, 2, 0, 3,
	1, 1, 3, 3, 4, 4, 5, 3, 4, 5,
	6, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 2, 2, 2, 2, 2,
	3, 1, 1, 1, 1, 5, 6, 4, 4, 3,
	6, 6, 6, 8, 8, 8, 8, 9, 4, 7,
	5, 4, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 8, 8, 0, 2,
	3, 4, 4, 4, 4, 4, 4, 0, 3, 4,
	7, 3, 1, 1, 2, 3, 3, 1, 2, 2,
	1, 2, 1, 2, 2, 1, 2, 0, 1, 0,
	2, 1, 2, 4, 0, 2, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	0, 3, 0, 2, 0, 3, 1, 3, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 4, 2,
	1, 3, 5, 4, 6, 1, 3, 3, 5, 0,
	5, 1, 3, 1, 2, 3, 1, 1, 3, 3,
	3, 3, 3, 1, 2, 1, 1, 1, 1, 1,
	1, 0, 2, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 1, 0, 1, 0, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
	1, 1,
}
var yyChk = [...]int{

	-1000, -225, -1, -2, -6, -7, -8, -9, -10, -12,
	-28, -13, -14, -15, -34, -35, -36, -41, -42, -43,
	-39, -38, -37, -16, -3, -4, 6, 7, -47, 9,
	10, 29, -32, 118, -29, -30, -31, 121, 120, 157,
	122, 150, 52, 178, 179, 181, 182, -230, -148, 155,
	156, 30, 31, 124, -227, 8, 271, 119, 152, 151,
	25, 56, -226, 369, -110, 15, -46, 5, -44, -231,
	-44, -44, -44, -44, -44, -199, -201, 56, 93, -142,
	131, 74, 263, 127, -149, 128, -141, 177, 33, 138,
	137, 128, 128, 129, 131, 263, 127, 128, -75, -160,
	59, -153, 281, 141, 313, 314, 178, 189, 183, 217,
	205, 282, 315, 142, 203, 206, 250, 140, 316, 237,
	245, 68, 181, 259, 317, 153, 201, 194, 318, 290,
	192, 27, 319, 247, 222, 320, 286, 193, 246, 124,
	321, 144, 138, 322, 223, 227, 323, 251, 324, 325,
	326, 187, 188, 327, 253, 221, 139, 32, 283, 37,
	162, 254, 225, 328, 220, 215, 329, 330, 331, 332,
	219, 186, 214, 41, 229, 228, 230, 249, 208, 333,
	334, 335, 145, 336, 195, 18, 337, 338, 339, 340,
	341, 257, 156, 342, 160, 343, 344, 345, 346, 347,
	348, 248, 224, 226, 135, 164, 285, 349, 255, 191,
	350, 146, 161, 155, 258, 147, 351, 352, 353, 354,
	355, 356, 357, 182, 358, 359, 360, 361, 171, 252,
	261, 40, 234, 362, 185, 137, 363, 179, 168, 240,
	212, 163, 364, 365, 199, 200, 218, 184, 213, 180,
	165, 157, 366, 260, 235, 287, 207, 204, 169, 367,
	131, 166, 167, 368, 241, 242, 170, 284, 256, 202,
	236, 128, 111, 206, 250, 118, 238, 239, 247, -193,
	248, 164, -165, 128, -133, 237, 241, 242, 170, 59,
	129, 130, 32, 252, 251, 243, -160, 180, -53, 122,
	158, -75, -150, -150, -150, 240, 240, -150, -2, -131,
	131, 242, 133, -117, 17, 16, -5, -3, -227, 6,
	20, 21, -50, 42, 43, -45, -57, 102, -58, -160,
	-82, 76, -87, 28, 59, -153, 23, -86, -83, -103,
	-101, -102, 111, 112, 113, 100, 101, 108, 77, 114,
	-92, -90, -91, -93, 61, 60, 69, 62, 63, 64,
	65, 70, 71, 72, -154, -99, -227, 46, 47, 127,
	272, 273, 274, 275, 280, 148, 276, 79, 36, 262,
	270, 269, 268, 266, 267, 264, 265, 278, 279, 134,
	263, 106, 271, -131, -131, 11, -68, -69, -75, -77,
	-160, -124, -164, 180, -127, 252, 251, -103, -126, -154,
	-160, 250, 206, 249, -200, 93, -189, 59, -75, 129,
	-75, 271, -140, 134, -140, 165, -140, 85, -33, -75,
	-139, 134, -154, 59, -153, -139, -139, -139, -75, 115,
	-75, 59, 29, -151, -227, -155, -154, -152, 123, 149,
	288, 75, 22, 24, 232, 78, 111, 16, 79, 110,
	272, 118, 50, 289, 264, 265, 262, 274, 275, 263,
	238, 28, 10, 291, 25, 151, 21, 104, 120, 82,
	83, 84, 154, 23, 152, 72, 148, 294, 19, 53,
	11, 13, 295, 296, 14, 134, 133, 95, 129, 48,
	8, 114, 26, 92, 44, 297, 34, 298, 299, 300,
	301, 46, 93, 17, 266, 267, 30, 302, 280, 159,
	106, 51, 38, 76, 303, 304, 70, 305, 73, 54,
	74, 15, 49, 306, 307, 308, 309, 94, 121, 271,
	47, 310, 127, 6, 277, 29, 150, 45, 311, 128,
	81, 278, 279, 132, 71, 5, 33, 31, 9, 52,
	55, 268, 269, 270, 36, 80, 12, 312, 263, 127,
	59, 164, 128, 165, 131, -151, -151, -195, 11, 95,
	-151, 168, 169, -151, -136, -135, 245, 246, 240, 244,
	12, -59, 93, 169, 240, 167, -151, -40, -2, -9,
	-7, -8, -2, 85, -150, -150, -228, 58, 128, -75,
	118, 120, 123, 54, -118, 19, 30, -58, -160, -111,
	-114, -58, -110, -2, -44, 38, -48, 20, 21, 67,
	11, -157, 75, 74, 92, -156, 22, -154, 61, 115,
	-58, -84, 95, 76, 93, 94, 78, 97, 96, 107,
	100, 101, 102, 103, 104, 105, 106, 98, 99, 110,
	85, 86, 87, 88, 89, 90, 91, -132, -227, -102,
	-227, 116, 117, -87, -87, -87, -87, -87, -87, -87,
	-87, -227, -2, -97, -58, -227, -227, -227, -227, -227,
	-227, -227, -227, -227, -227, -227, -106, -58, -227, -232,
	-94, -227, -232, -94, -232, -94, -232, -227, -232, -94,
	-232, -94, -232, -232, -94, -227, -227, -227, -227, -227,
	-227, -76, 26, -75, -61, -62, -63, -64, -78, -102,
	-227, -75, -75, -68, -229, 57, 11, 55, -229, 57,
	115, 57, -124, 180, -125, -128, 253, 255, 85, -159,
	-154, 61, 28, 115, 29, 58, 57, -75, -167, -171,
	-173, -172, -174, -169, -170, 203, 206, 210, 208, 204,
	209, 111, 207, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 29, 153, 199, 200, 201, 202,
	223, 224, 225, 226, 227, 228, 229, 230, 183, 205,
	282, 184, 185, 186, 187, 188, 189, 191, 192, 193,
	194, 195, 196, 197, -154, 22, 131, 59, 76, 59,
	59, -75, 59, 57, 132, -68, 23, 54, -70, -75,
	59, 59, -161, -160, -152, -151, -151, -140, -140, -151,
	-151, -75, -151, -75, -75, -151, -151, 11, -134, 11,
	95, -58, -87, -138, 93, 54, 59, -75, -151, 166,
	166, 128, 128, 171, -75, 9, 95, 57, 18, 115,
	57, -116, 24, 25, -117, -228, -50, -88, -154, 62,
	65, -49, 45, -75, -58, -58, -95, 70, 76, 71,
	72, -156, 102, -161, -155, -152, -87, -96, -99, -102,
	66, 95, 93, 94, 78, -87, -87, -87, -87, -87,
	-87, -87, -87, -87, -87, -87, -87, -87, -87, -87,
	-163, 59, 61, 59, -86, -86, -154, -48, -228, 57,
	-228, -2, -55, -57, -55, -228, -58, -58, -103, 61,
	-55, -103, 61, -55, -55, -55, -48, -104, -105, 80,
	-103, -228, -87, -154, -154, -55, -56, -55, -55, -55,
	-121, 160, -75, 29, 57, -71, -73, -72, -74, 44,
	48, 50, 45, 46, 47, 51, -146, 22, -61, -227,
	-79, 160, -80, 22, -162, 52, 133, 53, -160, 61,
	-121, 55, -61, -75, -61, -77, -160, 102, -127, -125,
	57, 254, 256, 257, 54, 73, -58, -180, 110, -155,
	-161, -202, -203, -204, -155, 61, 62, -189, -190, -191,
	-205, 143, -211, 135, 137, 33, -192, 144, 129, 34,
	58, -168, -181, 235, -175, 56, -175, -175, 211, 203,
	206, 204, -175, -175, -175, -175, -175, -179, 206, -179,
	-179, -179, -179, 204, 56, 56, -175, -175, -175, -183,
	56, -183, 198, -183, -184, 56, -184, -184, -184, -158,
	55, -115, -75, -151, 23, -151, -26, 174, 149, -75,
	-75, -75, 57, 59, 59, -196, 11, 95, -75, -89,
	22, -160, -160, -54, 154, 61, -75, -143, 123, 120,
	121, 125, 126, -214, 119, 232, 206, 68, 28, 15,
	272, 160, 287, 59, 161, -75, -75, -75, -75, -75,
	123, 120, 40, -58, -58, -114, -118, -130, 19, 11,
	36, 36, -55, 70, 71, 72, 115, -227, -96, -87,
	-87, -87, -54, 75, -228, -56, -58, -228, 57, -228,
	-228, 57, 55, 22, 11, 11, -228, 11, 11, -228,
	-228, -228, -55, -107, -105, 82, -58, -228, -228, 57,
	57, -228, -228, -228, -228, -85, 29, 36, -2, -227,
	-227, -124, -62, -63, -63, -62, -63, 44, 44, 44,
	49, 44, 49, 44, -72, -160, -228, -227, 305, -162,
	-80, 129, 129, 129, -81, 12, -61, -81, -81, 115,
	-128, -129, 258, 255, 261, 59, 61, 115, 57, -204,
	85, 56, 59, 34, -192, -192, -197, 59, -197, 34,
	-185, -177, -178, -186, -187, -176, 70, 76, 28, 54,
	232, 135, 34, 33, 68, -182, 236, 62, -179, -179,
	-175, -175, -175, 211, -175, -179, -180, 29, -180, -180,
	-180, -180, -179, -188, 61, -188, 62, -183, 62, 54,
	-154, -2, 22, -27, 8, 9, 10, 132, -151, -75,
	-151, -151, -81, 59, 59, -134, -137, 93, 12, 305,
	-87, -150, -147, -220, -192, -224, -191, 136, 140, 143,
	144, 135, 160, -147, -220, 143, -192, 144, 136, -144,
	-192, 132, 22, -147, -147, 160, -219, 55, 166, 232,
	166, 41, -75, -60, 11, 102, -155, -56, -54, 75,
	-87, -228, -57, -166, 111, 203, 153, 201, 194, 221,
	208, 234, 199, 235, -163, -166, -87, -87, -87, -87,
	281, -110, 84, -58, 81, -87, -87, -123, 54, -124,
	-98, -100, -99, -227, -2, -119, -154, -122, -154, -81,
	-66, -65, 54, 55, -67, 54, -65, 44, 44, -122,
	-87, -80, -227, -227, -227, -110, -58, -81, 255, 259,
	260, -203, -204, -207, -206, -154, -211, -197, -197, 56,
	70, -87, 9, 34, 34, 61, 58, -180, -180, -179,
	-175, -180, 59, 111, -180, 58, 57, 58, 57, 58,
	57, -75, -115, -115, 54, -75, -137, 61, -58, -87,
	56, -189, -150, -197, -141, 59, 59, -150, 59, -154,
	34, 59, -75, -154, -189, 59, -154, -217, 284, -218,
	59, -154, -154, -154, -81, -61, -228, -87, -228, -175,
	-175, -175, -184, -175, 188, -175, 188, -228, -228, 19,
	19, 19, 19, -227, -52, 277, -58, 57, 57, 27,
	-123, 57, -228, -228, -228, 57, 115, -228, 57, -110,
	-58, 56, -58, -228, -80, -146, -120, -154, -120, -120,
	-117, 58, 57, -175, -120, -91, -180, -179, 61, -179,
	62, 62, 56, -2, -75, -189, -112, 148, 149, -158,
	-194, -192, 59, -145, 132, 22, 132, -112, -189, 26,
	-216, -215, -155, 56, 55, -108, 13, -179, 59, -87,
	-87, -87, -87, -87, -228, 61, -87, -87, 34, -100,
	36, -2, -227, -154, -154, -154, -117, -120, -79, -162,
	57, -228, -228, -228, -209, -208, 55, 139, 68, -206,
	-116, 58, -180, -180, 58, 58, -207, -115, 19, 58,
	-150, 59, 56, -197, 59, -154, -150, -112, -227, 57,
	85, -120, -75, -109, 14, 16, -228, -228, -228, -228,
	-51, 95, 284, -228, -228, 9, -98, -2, 115, 58,
	-80, -154, -208, 59, -198, 85, 61, 146, 58, 172,
	-150, -207, -158, -150, -212, -213, 160, -215, -204, 58,
	-58, -97, -228, 282, 51, 285, -124, -228, -154, 62,
	-75, -210, -209, 173, 58, 56, -228, 57, -154, -219,
	41, 283, 286, 56, -113, 175, 176, -210, -207, -213,
	36, -217, 41, -120, -115, 59, 59, 58, 162, 284,
	58, -11, -17, -10, -7, -8, -9, 178, -210, 163,
	285, -222, -223, 54, -115, -21, -18, -2, -7, -8,
	-9, -10, -19, -20, -17, 79, 134, -227, 286, -223,
	54, -222, 54, 10, 9, 369, -58, -58, -87, 159,
	-221, 147, 142, 145, 29, -221, 84, -18, -22, -23,
	80, 81, -228, -228, 141, 28, 70, 84, 82, -23,
	-58, -21, 79, -21, 81, 369, 369, -21, -24, -25,
	83, 84, 369, 84, 82, -25, -58, 79, 134, -21,
	81, 369, -21, 84, 369, 134,
}
var yyDef = [...]int{

	25, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 664, 0, 415, 415, 415, 415,
	415, 415, 0, -2, 286, 287, 288, 0, 0, 0,
	0, -2, 391, 392, 0, 394, 395, 404, -2, 1038,
	1038, 0, 0, 1038, 0, 37, 38, 715, 407, 396,
	397, 1036, 1, 3, 672, 0, 0, 419, 422, 417,
	0, 715, 715, 0, 0, 70, 71, 0, 0, 0,
	0, 0, 713, 713, 0, 713, 736, 0, 732, 733,
	734, 0, 711, 0, 711, 711, 711, 0, 340, 492,
	743, 744, 867, 868, 869, 870, 871, 872, 873, 874,
	875, 876, 877, 878, 879, 880, 881, 882, 883, 884,
	885, 886, 887, 888, 889, 890, 891, 892, 893, 894,
	895, 896, 897, 898, 899, 900, 901, 902, 903, 904,
	905, 906, 907, 908, 909, 910, 911, 912, 913, 914,
	915, 916, 917, 918, 919, 920, 921, 922, 923, 924,
	925, 926, 927, 928, 929, 930, 931, 932, 933, 934,
	935, 936, 937, 938, 939, 940, 941, 942, 943, 944,
	945, 946, 947, 948, 949, 950, 951, 952, 953, 954,
	955, 956, 957, 958, 959, 960, 961, 962, 963, 964,
	965, 966, 967, 968, 969, 970, 971, 972, 973, 974,
	975, 976, 977, 978, 979, 980, 981, 982, 983, 984,
	985, 986, 987, 988, 989, 990, 991, 992, 993, 994,
	995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004,
	1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014,
	1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024,
	1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034,
	1035, 0, 0, 0, 1039, 0, 1039, 1039, 354, 0,
	356, 1039, 0, 1039, 0, 363, 0, 0, 370, 1039,
	244, 245, 246, 388, 389, 376, 390, 393, 0, 0,
	0, 408, 409, 410, 411, 1038, 1038, 414, 31, 0,
	0, 0, 716, 676, 0, 0, 664, 33, 0, 415,
	420, 421, 425, 423, 424, 416, 0, 434, 438, 0,
	501, 0, 506, 508, -2, -2, 0, 543, 544, 545,
	546, 547, 0, 0, 0, 0, 0, 0, 0, 0,
	571, 572, 573, 574, 649, 650, 651, 652, 653, 654,
	655, 656, 510, 511, 646, 696, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 637, 0, 608,
	608, 608, 608, 608, 608, 608, 608, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 48, 50,
	492, 54, 0, 1014, 697, -2, -2, 0, 0, 646,
	0, -2, 880, -2, 0, 0, 126, 0, 124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 331, 0,
	0, 0, 0, 739, 740, 0, 0, 0, 339, 0,
	341, 1039, 1039, 344, 1040, 1041, 741, 742, 747, 748,
	749, 750, 751, 752, 753, 754, 755, 756, 757, 758,
	759, 760, 761, 762, 763, 764, 765, 766, 767, 768,
	769, 770, 771, 772, 773, 774, 775, 776, 777, 778,
	779, 780, 781, 782, 783, 784, 785, 786, 787, 788,
	789, 790, 791, 792, 793, 794, 795, 796, 797, 798,
	799, 800, 801, 802, 803, 804, 805, 806, 807, 808,
	809, 810, 811, 812, 813, 814, 815, 816, 817, 818,
	819, 820, 821, 822, 823, 824, 825, 826, 827, 828,
	829, 830, 831, 832, 833, 834, 835, 836, 837, 838,
	839, 840, 841, 842, 843, 844, 845, 846, 847, 848,
	849, 850, 851, 852, 853, 854, 855, 856, 857, 858,
	859, 860, 861, 862, 863, 864, 865, 866, 713, 713,
	1039, 1039, 0, 1039, 0, 352, 353, 0, 263, 264,
	357, 1039, 1039, 359, 0, 379, 377, 378, 373, 374,
	0, 365, 0, 385, 367, 368, 371, 398, -2, 401,
	402, 403, -2, 0, 412, 413, 32, 1037, 0, 1039,
	0, 0, 0, 0, 26, 0, 0, 673, 0, 665,
	666, 669, 672, 31, 422, 0, 428, 426, 427, 418,
	0, 435, 0, 0, 0, 439, 0, 441, 442, 0,
	504, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	528, 529, 530, 531, 532, 533, 534, 507, 0, 521,
	0, 0, 0, 563, 564, 565, 566, 567, 568, 569,
	0, 425, 31, 0, 541, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 425, 0, 638, 0, 592,
	600, 0, 593, 601, 594, 602, 595, 0, 596, 603,
	597, 604, 598, 599, 605, 0, 0, 0, 430, 0,
	0, 52, 0, 491, 0, 445, 447, 448, 449, -2,
	0, 495, -2, 0, 0, 0, 44, 45, 0, 0,
	0, 0, 55, 1014, 57, 58, 0, 0, 0, 220,
	706, 707, 708, 0, 704, 275, 0, 0, 131, 208,
	139, 140, 141, 201, 143, 201, 201, 0, 201, 201,
	201, 201, 201, 217, 217, 217, 217, 217, 184, 185,
	186, 187, 188, 0, 0, 161, 201, 201, 201, 165,
	191, 192, 193, 194, 195, 196, 197, 198, 144, 145,
	146, 147, 148, 149, 150, 151, 152, 203, 203, 203,
	205, 205, 205, 205, 737, 69, 0, 1039, 0, 1039,
	0, 122, 79, 0, 0, 334, 712, 0, 336, 46,
	337, 338, 493, 745, 746, 342, 343, 0, 0, 347,
	348, 349, 350, 351, 265, 358, 362, 0, 460, 0,
	0, 364, 535, 366, 0, 0, 405, 0, 310, 0,
	0, 0, 0, 0, 0, 677, 0, 0, 0, 0,
	0, 668, 670, 671, 676, 34, 425, 0, 657, 0,
	0, 0, 429, 29, 502, 503, 505, 522, 0, 524,
	526, 440, 436, 0, 647, -2, 512, 513, 537, 538,
	539, 0, 0, 0, 0, 535, 517, 0, 548, 549,
	550, 551, 552, 553, 554, 555, 556, 557, 558, 559,
	562, 622, 623, 0, 560, 561, 570, 430, 540, 0,
	695, 31, 0, 432, 0, 579, 0, 0, 545, 649,
	0, 545, 649, 0, 0, 0, 0, 644, 641, 0,
	0, 609, 0, 0, 0, 0, 0, 431, 0, 0,
	0, 0, 490, 0, 0, 0, 0, 0, 0, 480,
	0, 0, 483, 0, 0, 0, 0, 477, 0, 0,
	453, 959, 455, 0, 495, 0, 0, 0, 478, 479,
	499, 0, 499, 49, 499, 51, 0, 494, 698, 56,
	0, 0, 61, 62, 699, 700, 701, 702, 0, 647,
	0, 123, 276, 278, 281, 282, 283, 127, 128, 129,
	0, 0, 257, 0, 0, 251, 251, 0, 247, 248,
	125, 130, 210, 209, 142, 0, 217, 217, 201, 201,
	201, 201, 170, 217, 173, 176, 177, 220, 0, 220,
	220, 220, 220, 217, 0, 0, 162, 163, 164, 153,
	0, 154, 203, 156, 157, 0, 158, 159, 160, 0,
	0, 0, 0, 75, 714, 76, 0, 80, 81, 0,
	332, 1039, 0, 1039, 1039, 499, 0, 0, 379, 382,
	0, 380, 381, 372, 0, 386, 369, 1038, -2, 319,
	729, 319, 319, 304, 717, 718, 719, 720, 721, 722,
	723, 724, 725, 726, 0, 114, 312, 314, 313, 317,
	0, 0, 0, 674, 675, 667, 27, 0, 709, 710,
	658, 659, 443, 523, 525, 527, 0, 430, 514, 535,
	518, 0, 515, 0, 509, 0, 542, -2, 0, 577,
	578, 0, 0, 0, 0, 0, 615, 0, 0, 616,
	0, 588, 664, 0, 642, 0, 0, 591, 610, 0,
	0, 611, 612, 613, 614, 689, 0, 0, -2, 0,
	0, 499, 446, 472, 474, 0, 469, 481, 482, 484,
	0, 486, 0, 488, 489, 450, 452, 0, 0, 495,
	459, 0, 0, 0, 664, 0, 499, 42, 43, 0,
	59, 60, 0, 0, 66, 221, 222, 0, 0, 279,
	0, 0, 0, 239, 251, 251, 242, 252, 243, 0,
	132, 133, 134, 135, 136, 137, 212, 0, 0, 0,
	216, 0, 224, 226, 0, 138, 211, 0, 220, 220,
	217, 168, 169, 201, 174, 220, 178, 0, 179, 180,
	181, 182, 220, 0, 199, 0, 0, 155, 0, 0,
	738, -2, 69, 0, 82, 83, 84, 0, 335, 47,
	345, 346, 355, 266, 267, 382, 361, 0, 0, 0,
	536, 289, 0, 1038, 251, 0, 305, 320, 321, 322,
	323, 324, 325, 0, 1038, 322, 0, 323, 0, 0,
	0, 730, 731, 0, 0, 0, 117, 0, 0, 0,
	0, 678, 28, 499, 0, 437, 648, 0, 516, 0,
	519, 575, 433, 0, 201, 201, 627, 201, 205, 630,
	201, 632, 201, 635, 0, 0, 0, 0, 0, 0,
	0, 639, 590, 645, 0, 0, 0, 35, 0, 689,
	679, 691, 693, 0, 31, 0, 685, 0, 464, 664,
	466, 473, 0, 0, 467, 0, 468, 485, 487, 0,
	-2, 458, 0, 0, 0, 672, 500, 41, 63, 64,
	65, 277, 280, 0, 253, 201, 256, 240, 241, 0,
	213, 214, 0, 223, 225, 227, 202, 166, 167, 220,
	175, 171, 218, 219, 183, 217, 0, 217, 0, 206,
	0, 0, 73, 0, 0, 333, 360, 383, 384, 461,
	0, 307, 292, 737, 249, 285, 293, 294, 299, 300,
	0, 0, 296, 0, 307, 0, 0, 311, 0, 115,
	116, 0, 0, 316, 660, 444, 576, 520, 580, 624,
	217, 628, 629, 631, 633, 634, 636, 582, 581, 0,
	0, 0, 0, 0, 0, 0, 643, 0, 0, 0,
	36, 0, 694, -2, 0, 0, 0, 53, 0, 672,
	470, 0, 475, 495, 456, 0, 0, 462, 0, 0,
	40, 229, 0, 669, 0, 215, 172, 220, 200, 220,
	0, 0, 0, -2, 0, 0, 1038, 308, 0, 0,
	251, 250, 306, 0, 727, 728, 0, 1038, 307, 0,
	118, 119, 0, 0, 0, 662, 0, 625, 626, 0,
	0, 0, 0, 617, 589, 640, 0, 0, 0, 692,
	0, -2, 0, 687, 686, 465, 39, 0, 454, 495,
	0, 496, 497, 498, 228, 232, 0, 237, 0, 254,
	255, 0, 189, 190, 204, 207, 0, 74, 0, 1038,
	291, 309, 0, 737, 295, 301, 302, 1038, 0, 0,
	0, 0, 318, 30, 0, 0, 583, 585, 584, 586,
	0, 0, 0, 606, 607, 0, 682, 31, 0, 471,
	457, 463, 233, 234, 0, 238, 236, 0, 230, 0,
	290, 0, 0, 303, 0, 327, 0, 120, 121, 114,
	663, 661, 587, 0, 0, 0, 690, -2, 688, 235,
	0, 72, 231, 85, 230, 0, 326, 0, 0, 117,
	618, 0, 621, 0, 69, 0, 0, 297, 0, 328,
	0, 315, 619, 0, 0, 86, 87, 230, 0, 0,
	258, 69, 88, 89, 90, 91, 92, 0, 298, 0,
	0, 259, 260, 0, 77, 0, 104, -2, 107, 108,
	109, 110, 111, 112, 113, 0, 0, 0, 620, 261,
	0, 262, 0, 0, 0, 0, 0, 0, 0, 0,
	268, 270, 271, 0, 0, 269, 93, 105, 0, 96,
	0, 0, 329, 330, 272, 273, 274, 0, 0, 97,
	0, 0, 94, 0, 0, 0, 0, 0, 0, 101,
	0, 0, 98, 0, 0, 102, 0, 95, 99, 0,
	0, 0, 0, 0, 103, 100,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 77, 3, 3, 3, 105, 97, 3,
	56, 58, 102, 100, 57, 101, 115, 103, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 369,
	86, 85, 87, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 107, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 96, 3, 108,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 78, 79, 80, 81, 82, 83, 84, 88,
	89, 90, 91, 92, 93, 94, 95, 98, 99, 104,
	106, 109, 110, 111, 112, 113, 114, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:351
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:356
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:357
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:361
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:385
		{
			setParseTree(yylex, nil)
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:391
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 27:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:399
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 28:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:403
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 29:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:409
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 30:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:416
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:422
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:426
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:432
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:436
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 35:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:443
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].setExprs)
			yyVAL.statement = ins
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:455
		{
			cols := make(Columns, 0, len(yyDollar[7].setExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].setExprs))
			for _, updateList := range yyDollar[7].setExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].setExprs)}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:467
		{
			yyVAL.str = InsertStr
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:471
		{
			yyVAL.str = ReplaceStr
		}
	case 39:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:477
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].setExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:483
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:487
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:491
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:495
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:500
		{
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:501
		{
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:505
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName.ToViewName()}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:509
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName.ToViewName())
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:515
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:519
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:525
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:529
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:534
		{
			yyVAL.partitions = nil
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:538
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:544
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:548
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:552
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:556
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:562
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:566
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:572
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:576
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:580
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:586
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:590
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:594
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:598
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:604
		{
			yyVAL.str = SessionStr
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:608
		{
			yyVAL.str = GlobalStr
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:613
		{
			yyVAL.int = yyPosition(yylex)
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:619
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			if len(yyDollar[1].ddl.TableSpec.Constraints) > 0 {
				yyDollar[1].ddl.ConstraintAction = AddStr
			}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:627
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 72:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:633
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: yyDollar[4].colIdent, Using: yyDollar[5].colIdent, Type: yyDollar[2].str, Columns: yyDollar[9].indexColumns, Options: yyDollar[11].indexOptions}}
		}
	case 73:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:637
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[3].tableName.ToViewName(), ViewExpr: yyDollar[6].selStmt, SubStatementPositionStart: yyDollar[5].int, SubStatementPositionEnd: yyDollar[7].int - 1}
		}
	case 74:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:641
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[5].tableName.ToViewName(), ViewExpr: yyDollar[8].selStmt, SubStatementPositionStart: yyDollar[7].int, SubStatementPositionEnd: yyDollar[9].int - 1, OrReplace: true}
		}
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:645
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:649
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 77:
		yyDollar = yyS[yypt-15 : yypt+1]
//line sql.y:653
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[8].tableName, TriggerSpec: &TriggerSpec{Name: string(yyDollar[4].bytes), Time: yyDollar[5].str, Event: yyDollar[6].str, Order: yyDollar[12].triggerOrder, Body: yyDollar[14].statement}}
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:658
		{
			yyVAL.empty = struct{}{}
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:662
		{
			yyVAL.empty = struct{}{}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:668
		{
			yyVAL.str = BeforeStr
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:672
		{
			yyVAL.str = AfterStr
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:678
		{
			yyVAL.str = InsertStr
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:682
		{
			yyVAL.str = UpdateStr
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:686
		{
			yyVAL.str = DeleteStr
		}
	case 85:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:691
		{
			yyVAL.triggerOrder = nil
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:695
		{
			yyVAL.triggerOrder = &TriggerOrder{PrecedesOrFollows: FollowsStr, OtherTriggerName: string(yyDollar[2].bytes)}
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:699
		{
			yyVAL.triggerOrder = &TriggerOrder{PrecedesOrFollows: PrecedesStr, OtherTriggerName: string(yyDollar[2].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:705
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:715
		{
			yyVAL.statement = &BeginEndBlock{Statements: yyDollar[2].statements}
		}
	case 94:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:721
		{
			yyVAL.statement = &CaseStatement{Expr: yyDollar[2].expr, Cases: yyDollar[3].caseStatementCases}
		}
	case 95:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:725
		{
			yyVAL.statement = &CaseStatement{Expr: yyDollar[2].expr, Cases: yyDollar[3].caseStatementCases, Else: yyDollar[5].statements}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:731
		{
			yyVAL.caseStatementCases = []CaseStatementCase{yyDollar[1].caseStatementCase}
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:735
		{
			yyVAL.caseStatementCases = append(yyVAL.caseStatementCases, yyDollar[2].caseStatementCase)
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:741
		{
			yyVAL.caseStatementCase = CaseStatementCase{Case: yyDollar[2].expr, Statements: yyDollar[4].statements}
		}
	case 99:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:747
		{
			conds := yyDollar[6].ifStatementConditions
			conds = append([]IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}, conds...)
			yyVAL.statement = &IfStatement{Conditions: conds}
		}
	case 100:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:753
		{
			conds := yyDollar[6].ifStatementConditions
			conds = append([]IfStatementCondition{IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}}, conds...)
			yyVAL.statement = &IfStatement{Conditions: conds, Else: yyDollar[8].statements}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:761
		{
			yyVAL.ifStatementConditions = []IfStatementCondition{yyDollar[1].ifStatementCondition}
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:765
		{
			yyVAL.ifStatementConditions = append(yyVAL.ifStatementConditions, yyDollar[2].ifStatementCondition)
		}
	case 103:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:771
		{
			yyVAL.ifStatementCondition = IfStatementCondition{Expr: yyDollar[2].expr, Statements: yyDollar[4].statements}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:777
		{
			yyVAL.statements = Statements{yyDollar[1].statement}
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:781
		{
			yyVAL.statements = append(yyVAL.statements, yyDollar[3].statement)
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:787
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 114:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:799
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:803
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:809
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:814
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:819
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:825
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:830
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:836
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 122:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:842
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName, IfNotExists: ne}
			setDDL(yylex, yyVAL.ddl)
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:853
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:860
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:864
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:870
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:875
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:879
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:883
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:889
		{
			if err := yyDollar[2].columnType.merge(yyDollar[3].columnType); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:898
		{
			yyVAL.columnType = ColumnType{}
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:902
		{
			opt := ColumnType{NotNull: yyDollar[2].boolVal, sawnull: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:911
		{
			opt := ColumnType{Default: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:920
		{
			opt := ColumnType{OnUpdate: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:929
		{
			opt := ColumnType{Autoincrement: yyDollar[2].boolVal, sawai: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:938
		{
			opt := ColumnType{KeyOpt: yyDollar[2].colKeyOpt}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:947
		{
			opt := ColumnType{Comment: yyDollar[2].sqlVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:958
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:969
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:974
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:980
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:984
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:988
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:992
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:996
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1000
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1004
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1008
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1012
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1018
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1024
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1030
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1036
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1042
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1048
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1054
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1060
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1068
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1072
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1076
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1080
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1084
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 166:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1090
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1094
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1098
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1102
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1106
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 171:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1110
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 172:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1114
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1118
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1122
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].sqlVal}
		}
	case 175:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1126
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Length: yyDollar[4].sqlVal}
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1130
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1134
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1138
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1142
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1146
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1150
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1154
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 183:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1158
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1162
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1166
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1170
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1174
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1178
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 189:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1182
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 190:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1187
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1193
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1197
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1201
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1205
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1209
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1213
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1217
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1221
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1227
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[1].bytes))
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1232
		{
			yyVAL.strs = append(yyDollar[1].strs, string(yyDollar[3].bytes))
		}
	case 201:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1237
		{
			yyVAL.sqlVal = nil
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1241
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 203:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1246
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 204:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1250
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 205:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1258
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1262
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 207:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1268
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 208:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1276
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1280
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 210:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1285
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1289
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1296
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1300
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1306
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1312
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1318
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 217:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1323
		{
			yyVAL.str = ""
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1327
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1331
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 220:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1336
		{
			yyVAL.str = ""
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1340
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1344
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1350
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1354
		{
			yyVAL.colKeyOpt = colKey
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1358
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1362
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1368
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 228:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1374
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1378
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 230:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1383
		{
			yyVAL.indexOptions = nil
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1387
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1393
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1397
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1403
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1407
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1412
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1418
		{
			yyVAL.str = ""
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1422
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1428
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1432
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1436
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1440
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1444
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1450
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1454
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1458
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1464
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1468
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 249:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1473
		{
			yyVAL.str = ""
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1477
		{
			yyVAL.str = yyDollar[1].str
		}
	case 251:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1482
		{
			yyVAL.str = ""
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1486
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1492
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1496
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1502
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal, Order: yyDollar[3].str}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1508
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1512
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 258:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1519
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 259:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1523
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 260:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1527
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 261:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1531
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 262:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1535
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[12].ReferenceAction, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1541
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1545
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 265:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1550
		{
			yyVAL.str = ""
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1554
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1558
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1564
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1570
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1576
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1580
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1584
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1588
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1592
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 275:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1597
		{
			yyVAL.str = ""
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1601
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1605
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1613
		{
			yyVAL.str = yyDollar[1].str
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1617
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1621
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1627
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1631
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1635
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 284:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1640
		{
			yyVAL.str = ""
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1644
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 289:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1655
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 290:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1659
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			ddl.Column = yyDollar[8].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 291:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1666
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 292:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1673
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 293:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1677
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: DropStr, Column: NewColIdent(string(yyDollar[7].bytes)), Table: yyDollar[4].tableName}
		}
	case 294:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1681
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 295:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1685
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: RenameStr, Table: yyDollar[4].tableName, Column: NewColIdent(string(yyDollar[7].bytes)), ToColumn: NewColIdent(string(yyDollar[9].bytes))}
		}
	case 296:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1689
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 297:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1694
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[7].str), Using: yyDollar[8].colIdent, Columns: yyDollar[10].indexColumns, Options: yyDollar[12].indexOptions}}
		}
	case 298:
		yyDollar = yyS[yypt-14 : yypt+1]
//line sql.y:1698
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: CreateStr, ToName: NewColIdent(yyDollar[9].str), Type: yyDollar[7].str, Using: yyDollar[10].colIdent, Columns: yyDollar[12].indexColumns, Options: yyDollar[14].indexOptions}}
		}
	case 299:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1702
		{
			yyVAL.statement = &DDL{Action: AlterStr, ConstraintAction: DropStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[7].bytes)}}}}
		}
	case 300:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1707
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[7].colIdent}}
		}
	case 301:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1711
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, IndexSpec: &IndexSpec{Action: RenameStr, FromName: yyDollar[7].colIdent, ToName: yyDollar[9].colIdent}}
		}
	case 302:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1715
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ModifyStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 303:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1722
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ChangeStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, Column: NewColIdent(string(yyDollar[7].bytes)), ColumnOrder: yyDollar[9].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			yyVAL.statement = ddl
		}
	case 304:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1728
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 305:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1732
		{
			ddl := &DDL{Action: AlterStr, ConstraintAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddConstraint(yyDollar[6].constraintDefinition)
			yyVAL.statement = ddl
		}
	case 306:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1738
		{
			yyVAL.statement = &DDL{Action: AlterStr, ConstraintAction: DropStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{Constraints: []*ConstraintDefinition{&ConstraintDefinition{Name: string(yyDollar[8].bytes), Details: &ForeignKeyDefinition{}}}}}
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1744
		{
			yyVAL.columnOrder = nil
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1748
		{
			yyVAL.columnOrder = &ColumnOrder{First: true}
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1752
		{
			yyVAL.columnOrder = &ColumnOrder{AfterColumn: NewColIdent(string(yyDollar[2].bytes))}
		}
	case 310:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1758
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 311:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1764
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 312:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1776
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 313:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1786
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 314:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1790
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 315:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1794
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 316:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1807
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 317:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1817
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 318:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1821
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1834
		{
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1836
		{
		}
	case 326:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1847
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1853
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1857
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 329:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1863
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 330:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1867
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1873
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1879
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 333:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1883
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1891
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 335:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1899
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, IndexSpec: &IndexSpec{Action: DropStr, ToName: yyDollar[3].colIdent}}
		}
	case 336:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1903
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromViews: yyDollar[4].tableNames, IfExists: exists}
		}
	case 337:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1911
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1915
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1921
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1925
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1930
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 342:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1936
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1941
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1945
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 345:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1949
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 346:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1953
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 347:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1958
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 348:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1962
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 349:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1966
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 350:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1970
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 351:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1974
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1978
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1982
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1986
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 355:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1990
		{
			yyVAL.statement = &Show{Type: IndexStr, Table: yyDollar[4].tableName, Database: yyDollar[5].str, ShowIndexFilterOpt: yyDollar[6].expr}
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1994
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1998
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 358:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2002
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2006
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 360:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2010
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 361:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2015
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[6].showFilter, AsOf: yyDollar[5].expr}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 362:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2025
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2029
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 364:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2033
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2039
		{
			// Cannot dereference $3 directly, or else the parser stackcannot be pooled. See yyParsePooled
			cmp := yyDollar[3].expr.(*ComparisonExpr)
			cmp.Left = &ColName{Name: NewColIdent("collation")}
			var ex Expr = cmp
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &ex}
		}
	case 366:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2047
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2052
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2056
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 369:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2060
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2064
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2078
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2084
		{
			yyVAL.expr = &ComparisonExpr{Operator: LikeStr, Right: yyDollar[2].expr, Escape: yyDollar[3].expr}
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2090
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2094
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2100
		{
			yyVAL.str = ""
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2104
		{
			yyVAL.str = "full "
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2110
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2114
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2120
		{
			yyVAL.str = ""
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2124
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2128
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 382:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2134
		{
			yyVAL.showFilter = nil
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2138
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2142
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 385:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2148
		{
			yyVAL.showFilter = nil
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2152
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 387:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2158
		{
			yyVAL.str = ""
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2162
		{
			yyVAL.str = SessionStr
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2166
		{
			yyVAL.str = GlobalStr
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2172
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2176
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2182
		{
			yyVAL.statement = &Begin{}
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2186
		{
			yyVAL.statement = &Begin{}
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2192
		{
			yyVAL.statement = &Commit{}
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2198
		{
			yyVAL.statement = &Rollback{}
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2203
		{
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2204
		{
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2208
		{
			yyVAL.statement = &Explain{ExplainFormat: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2212
		{
			yyVAL.statement = &Explain{Analyze: true, ExplainFormat: TreeStr, Statement: yyDollar[3].selStmt}
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2218
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2226
		{
			yyVAL.str = ""
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2230
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2241
		{
			yyVAL.statement = &Show{Type: "columns", OnTable: yyDollar[2].tableName}
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2245
		{
			yyVAL.statement = &OtherRead{}
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2251
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2255
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2259
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2263
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2269
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 415:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2273
		{
			setAllowComments(yylex, true)
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2277
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 417:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2283
		{
			yyVAL.bytes2 = nil
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2287
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2293
		{
			yyVAL.str = UnionStr
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2297
		{
			yyVAL.str = UnionAllStr
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2301
		{
			yyVAL.str = UnionDistinctStr
		}
	case 422:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2306
		{
			yyVAL.str = ""
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2310
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2314
		{
			yyVAL.str = SQLCacheStr
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2319
		{
			yyVAL.str = ""
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2323
		{
			yyVAL.str = ""
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2327
		{
			yyVAL.str = DistinctStr
		}
	case 428:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2332
		{
			yyVAL.str = ""
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2336
		{
			yyVAL.str = StraightJoinHint
		}
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2341
		{
			yyVAL.selectExprs = nil
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2345
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2351
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2355
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2361
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2365
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2369
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 437:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2373
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 438:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2378
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2382
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2386
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2393
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 443:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2398
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2402
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2408
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2412
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2422
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2426
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2430
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2436
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2442
		{
			yyVAL.aliasedTableName = yyDollar[2].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
		}
	case 454:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2447
		{
			yyVAL.aliasedTableName = yyDollar[6].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
			yyVAL.aliasedTableName.Partitions = yyDollar[4].partitions
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2458
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Hints: yyDollar[1].indexHints}
		}
	case 456:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2462
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, Hints: yyDollar[4].indexHints}
		}
	case 457:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2466
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, As: yyDollar[5].tableIdent, Hints: yyDollar[6].indexHints}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2470
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2474
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[1].tableIdent, Hints: yyDollar[2].indexHints}
		}
	case 460:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2485
		{
			yyVAL.expr = nil
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2489
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2495
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2499
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2505
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2509
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2522
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 467:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2526
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 468:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2530
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2534
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2540
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 471:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2542
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 472:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2546
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2548
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 474:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2552
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2554
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 476:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2557
		{
			yyVAL.empty = struct{}{}
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2559
		{
			yyVAL.empty = struct{}{}
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2564
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2570
		{
			yyVAL.str = JoinStr
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2574
		{
			yyVAL.str = JoinStr
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2578
		{
			yyVAL.str = JoinStr
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2584
		{
			yyVAL.str = StraightJoinStr
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2590
		{
			yyVAL.str = LeftJoinStr
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2594
		{
			yyVAL.str = LeftJoinStr
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2598
		{
			yyVAL.str = RightJoinStr
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2602
		{
			yyVAL.str = RightJoinStr
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2608
		{
			yyVAL.str = NaturalJoinStr
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2612
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2622
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2626
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2632
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2636
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2642
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 495:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2647
		{
			yyVAL.indexHints = nil
		}
	case 496:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2651
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 497:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2655
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 498:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2659
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 499:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2664
		{
			yyVAL.expr = nil
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2668
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2674
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2678
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2682
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2686
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2690
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2694
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2698
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2704
		{
			yyVAL.str = ""
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2708
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2714
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2718
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2724
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2728
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 514:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2732
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 515:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2736
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 516:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2740
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2744
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2748
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 519:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2752
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 520:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2756
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2760
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2766
		{
			yyVAL.str = IsNullStr
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2770
		{
			yyVAL.str = IsNotNullStr
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2774
		{
			yyVAL.str = IsTrueStr
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2778
		{
			yyVAL.str = IsNotTrueStr
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2782
		{
			yyVAL.str = IsFalseStr
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2786
		{
			yyVAL.str = IsNotFalseStr
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2792
		{
			yyVAL.str = EqualStr
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2796
		{
			yyVAL.str = LessThanStr
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2800
		{
			yyVAL.str = GreaterThanStr
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2804
		{
			yyVAL.str = LessEqualStr
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2808
		{
			yyVAL.str = GreaterEqualStr
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2812
		{
			yyVAL.str = NotEqualStr
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2816
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 535:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2821
		{
			yyVAL.expr = nil
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2825
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2831
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2835
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2839
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2845
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2851
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2855
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2861
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2865
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2869
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2873
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2877
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2881
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2885
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2889
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2893
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2897
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2901
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2905
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2909
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2913
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2917
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2921
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2925
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2929
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2933
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2937
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2941
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2945
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2949
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2953
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2961
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2975
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2979
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2983
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 575:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3001
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: yyDollar[3].str == DistinctStr, Exprs: yyDollar[4].selectExprs}
		}
	case 576:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3005
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 577:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3015
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 578:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3019
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3023
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema")}
		}
	case 580:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3027
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 581:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3031
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 582:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3035
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 583:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3039
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 584:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3043
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 585:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3047
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 586:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3051
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 587:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:3055
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3059
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("first"), Exprs: yyDollar[3].selectExprs}
		}
	case 589:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3063
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 590:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3067
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 591:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3071
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3081
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3085
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3089
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3094
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3099
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3104
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3110
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3115
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3120
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3124
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3128
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3133
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3138
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3143
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 606:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3147
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 607:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:3151
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3161
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 611:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3171
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 612:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3175
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 613:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3179
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 614:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3183
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 615:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3187
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 616:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3191
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 617:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3197
		{
			yyVAL.str = ""
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3201
		{
			yyVAL.str = BooleanModeStr
		}
	case 619:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3205
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 620:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3209
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3213
		{
			yyVAL.str = QueryExpansionStr
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3219
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3223
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3229
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3233
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3237
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3241
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3245
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3249
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3255
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3259
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3263
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3267
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3271
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3275
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3279
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 637:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3284
		{
			yyVAL.expr = nil
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3288
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 639:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3293
		{
			yyVAL.str = string("")
		}
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3297
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3303
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3307
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 643:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3313
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 644:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3318
		{
			yyVAL.expr = nil
		}
	case 645:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3322
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3328
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3332
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 648:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3336
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3342
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3346
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3350
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3354
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3358
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3362
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3366
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3370
		{
			yyVAL.expr = &NullVal{}
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3376
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 658:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3385
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3389
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 660:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3394
		{
			yyVAL.exprs = nil
		}
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3398
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 662:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3403
		{
			yyVAL.expr = nil
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3407
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 664:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3412
		{
			yyVAL.orderBy = nil
		}
	case 665:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3416
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3422
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 667:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3426
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 668:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3432
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 669:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3437
		{
			yyVAL.str = AscScr
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3441
		{
			yyVAL.str = AscScr
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3445
		{
			yyVAL.str = DescScr
		}
	case 672:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3450
		{
			yyVAL.limit = nil
		}
	case 673:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3454
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 674:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3458
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 675:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3462
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 676:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3467
		{
			yyVAL.str = ""
		}
	case 677:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3471
		{
			yyVAL.str = ForUpdateStr
		}
	case 678:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3475
		{
			yyVAL.str = ShareModeStr
		}
	case 679:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3488
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3492
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3496
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 682:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3501
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 683:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3505
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 684:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3509
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3516
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3520
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 687:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3524
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 688:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3528
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 689:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3533
		{
			yyVAL.setExprs = nil
		}
	case 690:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3537
		{
			yyVAL.setExprs = yyDollar[5].setExprs
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3543
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 692:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3547
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3553
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 694:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3557
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3563
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3569
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3579
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 698:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3583
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 699:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3589
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: NewStrVal([]byte("on"))}
		}
	case 700:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3593
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: NewStrVal([]byte("off"))}
		}
	case 701:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3597
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 702:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3601
		{
			yyVAL.setExpr = &SetExpr{Name: NewColName(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 704:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3608
		{
			yyVAL.bytes = []byte("charset")
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3615
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3619
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3623
		{
			yyVAL.expr = &Default{}
		}
	case 711:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3632
		{
			yyVAL.byt = 0
		}
	case 712:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3634
		{
			yyVAL.byt = 1
		}
	case 713:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3637
		{
			yyVAL.byt = 0
		}
	case 714:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3639
		{
			yyVAL.byt = 1
		}
	case 715:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3642
		{
			yyVAL.str = ""
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3644
		{
			yyVAL.str = IgnoreStr
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3648
		{
			yyVAL.empty = struct{}{}
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3650
		{
			yyVAL.empty = struct{}{}
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3652
		{
			yyVAL.empty = struct{}{}
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3654
		{
			yyVAL.empty = struct{}{}
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3656
		{
			yyVAL.empty = struct{}{}
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3658
		{
			yyVAL.empty = struct{}{}
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3660
		{
			yyVAL.empty = struct{}{}
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3662
		{
			yyVAL.empty = struct{}{}
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3664
		{
			yyVAL.empty = struct{}{}
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3666
		{
			yyVAL.empty = struct{}{}
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3670
		{
			yyVAL.empty = struct{}{}
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3672
		{
			yyVAL.empty = struct{}{}
		}
	case 729:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3675
		{
			yyVAL.empty = struct{}{}
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3677
		{
			yyVAL.empty = struct{}{}
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3679
		{
			yyVAL.empty = struct{}{}
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3683
		{
			yyVAL.str = UniqueStr
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3685
		{
			yyVAL.str = FulltextStr
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3687
		{
			yyVAL.str = SpatialStr
		}
	case 735:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3690
		{
			yyVAL.str = ""
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3692
		{
			yyVAL.str = yyDollar[1].str
		}
	case 737:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3695
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 738:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3697
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3701
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3705
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3712
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3718
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3722
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3729
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4044
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4053
		{
			decNesting(yylex)
		}
	case 1038:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4058
		{
			skipToEnd(yylex)
		}
	case 1039:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:4063
		{
			skipToEnd(yylex)
		}
	case 1040:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4067
		{
			skipToEnd(yylex)
		}
	case 1041:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:4071
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
