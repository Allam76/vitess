//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func yyPosition(yylex interface{}) int {
	return yylex.(*Tokenizer).Position
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:57
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	int                  int
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	asOf                 *AsOf
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	columnOrder          *ColumnOrder
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const UNLOCK = 57373
const KEYS = 57374
const UNIQUE = 57375
const KEY = 57376
const SYSTEM_TIME = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const INTEGRAL = 57401
const FLOAT = 57402
const HEXNUM = 57403
const VALUE_ARG = 57404
const LIST_ARG = 57405
const COMMENT = 57406
const COMMENT_KEYWORD = 57407
const BIT_LITERAL = 57408
const NULL = 57409
const TRUE = 57410
const FALSE = 57411
const OFF = 57412
const OR = 57413
const AND = 57414
const NOT = 57415
const BETWEEN = 57416
const CASE = 57417
const WHEN = 57418
const THEN = 57419
const ELSE = 57420
const END = 57421
const LE = 57422
const GE = 57423
const NE = 57424
const NULL_SAFE_EQUAL = 57425
const IS = 57426
const LIKE = 57427
const REGEXP = 57428
const IN = 57429
const SHIFT_LEFT = 57430
const SHIFT_RIGHT = 57431
const DIV = 57432
const MOD = 57433
const UNARY = 57434
const COLLATE = 57435
const BINARY = 57436
const UNDERSCORE_BINARY = 57437
const UNDERSCORE_UTF8MB4 = 57438
const INTERVAL = 57439
const JSON_EXTRACT_OP = 57440
const JSON_UNQUOTE_EXTRACT_OP = 57441
const CREATE = 57442
const ALTER = 57443
const DROP = 57444
const RENAME = 57445
const ANALYZE = 57446
const ADD = 57447
const FLUSH = 57448
const MODIFY = 57449
const CHANGE = 57450
const SCHEMA = 57451
const TABLE = 57452
const INDEX = 57453
const VIEW = 57454
const TO = 57455
const IGNORE = 57456
const IF = 57457
const PRIMARY = 57458
const COLUMN = 57459
const SPATIAL = 57460
const FULLTEXT = 57461
const KEY_BLOCK_SIZE = 57462
const CHECK = 57463
const ACTION = 57464
const CASCADE = 57465
const CONSTRAINT = 57466
const FOREIGN = 57467
const NO = 57468
const REFERENCES = 57469
const RESTRICT = 57470
const FIRST = 57471
const AFTER = 57472
const SHOW = 57473
const DESCRIBE = 57474
const EXPLAIN = 57475
const DATE = 57476
const ESCAPE = 57477
const REPAIR = 57478
const OPTIMIZE = 57479
const TRUNCATE = 57480
const FORMAT = 57481
const MAXVALUE = 57482
const PARTITION = 57483
const REORGANIZE = 57484
const LESS = 57485
const THAN = 57486
const PROCEDURE = 57487
const TRIGGER = 57488
const VINDEX = 57489
const VINDEXES = 57490
const STATUS = 57491
const VARIABLES = 57492
const WARNINGS = 57493
const SEQUENCE = 57494
const BEGIN = 57495
const START = 57496
const TRANSACTION = 57497
const COMMIT = 57498
const ROLLBACK = 57499
const BIT = 57500
const TINYINT = 57501
const SMALLINT = 57502
const MEDIUMINT = 57503
const INT = 57504
const INTEGER = 57505
const BIGINT = 57506
const INTNUM = 57507
const REAL = 57508
const DOUBLE = 57509
const FLOAT_TYPE = 57510
const DECIMAL = 57511
const NUMERIC = 57512
const TIME = 57513
const TIMESTAMP = 57514
const DATETIME = 57515
const YEAR = 57516
const CHAR = 57517
const VARCHAR = 57518
const BOOL = 57519
const CHARACTER = 57520
const VARBINARY = 57521
const NCHAR = 57522
const TEXT = 57523
const TINYTEXT = 57524
const MEDIUMTEXT = 57525
const LONGTEXT = 57526
const BLOB = 57527
const TINYBLOB = 57528
const MEDIUMBLOB = 57529
const LONGBLOB = 57530
const JSON = 57531
const ENUM = 57532
const GEOMETRY = 57533
const POINT = 57534
const LINESTRING = 57535
const POLYGON = 57536
const GEOMETRYCOLLECTION = 57537
const MULTIPOINT = 57538
const MULTILINESTRING = 57539
const MULTIPOLYGON = 57540
const NULLX = 57541
const AUTO_INCREMENT = 57542
const APPROXNUM = 57543
const SIGNED = 57544
const UNSIGNED = 57545
const ZEROFILL = 57546
const COLLATION = 57547
const DATABASES = 57548
const SCHEMAS = 57549
const TABLES = 57550
const VITESS_METADATA = 57551
const VSCHEMA = 57552
const FULL = 57553
const PROCESSLIST = 57554
const COLUMNS = 57555
const FIELDS = 57556
const ENGINES = 57557
const PLUGINS = 57558
const NAMES = 57559
const CHARSET = 57560
const GLOBAL = 57561
const SESSION = 57562
const ISOLATION = 57563
const LEVEL = 57564
const READ = 57565
const WRITE = 57566
const ONLY = 57567
const REPEATABLE = 57568
const COMMITTED = 57569
const UNCOMMITTED = 57570
const SERIALIZABLE = 57571
const CURRENT_TIMESTAMP = 57572
const DATABASE = 57573
const CURRENT_DATE = 57574
const CURRENT_TIME = 57575
const LOCALTIME = 57576
const LOCALTIMESTAMP = 57577
const UTC_DATE = 57578
const UTC_TIME = 57579
const UTC_TIMESTAMP = 57580
const REPLACE = 57581
const CONVERT = 57582
const CAST = 57583
const SUBSTR = 57584
const SUBSTRING = 57585
const GROUP_CONCAT = 57586
const SEPARATOR = 57587
const TIMESTAMPADD = 57588
const TIMESTAMPDIFF = 57589
const MATCH = 57590
const AGAINST = 57591
const BOOLEAN = 57592
const LANGUAGE = 57593
const WITH = 57594
const QUERY = 57595
const EXPANSION = 57596
const UNUSED = 57597
const ARRAY = 57598
const CUME_DIST = 57599
const DESCRIPTION = 57600
const DENSE_RANK = 57601
const EMPTY = 57602
const EXCEPT = 57603
const FIRST_VALUE = 57604
const GROUPING = 57605
const GROUPS = 57606
const JSON_TABLE = 57607
const LAG = 57608
const LAST_VALUE = 57609
const LATERAL = 57610
const LEAD = 57611
const MEMBER = 57612
const NTH_VALUE = 57613
const NTILE = 57614
const OF = 57615
const OVER = 57616
const PERCENT_RANK = 57617
const RANK = 57618
const RECURSIVE = 57619
const ROW_NUMBER = 57620
const SYSTEM = 57621
const WINDOW = 57622
const ACTIVE = 57623
const ADMIN = 57624
const BUCKETS = 57625
const CLONE = 57626
const COMPONENT = 57627
const DEFINITION = 57628
const ENFORCED = 57629
const EXCLUDE = 57630
const FOLLOWING = 57631
const GEOMCOLLECTION = 57632
const GET_MASTER_PUBLIC_KEY = 57633
const HISTOGRAM = 57634
const HISTORY = 57635
const INACTIVE = 57636
const INVISIBLE = 57637
const LOCKED = 57638
const MASTER_COMPRESSION_ALGORITHMS = 57639
const MASTER_PUBLIC_KEY_PATH = 57640
const MASTER_TLS_CIPHERSUITES = 57641
const MASTER_ZSTD_COMPRESSION_LEVEL = 57642
const NESTED = 57643
const NETWORK_NAMESPACE = 57644
const NOWAIT = 57645
const NULLS = 57646
const OJ = 57647
const OLD = 57648
const OPTIONAL = 57649
const ORDINALITY = 57650
const ORGANIZATION = 57651
const OTHERS = 57652
const PATH = 57653
const PERSIST = 57654
const PERSIST_ONLY = 57655
const PRECEDING = 57656
const PRIVILEGE_CHECKS_USER = 57657
const PROCESS = 57658
const RANDOM = 57659
const REFERENCE = 57660
const REQUIRE_ROW_FORMAT = 57661
const RESOURCE = 57662
const RESPECT = 57663
const RESTART = 57664
const RETAIN = 57665
const REUSE = 57666
const ROLE = 57667
const SECONDARY = 57668
const SECONDARY_ENGINE = 57669
const SECONDARY_LOAD = 57670
const SECONDARY_UNLOAD = 57671
const SKIP = 57672
const SRID = 57673
const THREAD_PRIORITY = 57674
const TIES = 57675
const UNBOUNDED = 57676
const VCPU = 57677
const VISIBLE = 57678

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"UNIQUE",
	"KEY",
	"SYSTEM_TIME",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"MODIFY",
	"CHANGE",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"FIRST",
	"AFTER",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"FORMAT",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 31,
	-2, 4,
	-1, 41,
	166, 320,
	167, 320,
	-2, 308,
	-1, 48,
	1, 971,
	354, 971,
	-2, 339,
	-1, 329,
	114, 677,
	-2, 673,
	-1, 330,
	114, 678,
	-2, 674,
	-1, 399,
	84, 927,
	-2, 67,
	-1, 400,
	84, 845,
	-2, 68,
	-1, 405,
	84, 814,
	-2, 636,
	-1, 407,
	84, 875,
	-2, 638,
	-1, 584,
	5, 31,
	-2, 333,
	-1, 588,
	5, 31,
	-2, 332,
	-1, 714,
	1, 384,
	5, 384,
	12, 384,
	13, 384,
	14, 384,
	15, 384,
	17, 384,
	19, 384,
	29, 384,
	30, 384,
	44, 384,
	45, 384,
	46, 384,
	47, 384,
	48, 384,
	50, 384,
	51, 384,
	54, 384,
	55, 384,
	57, 384,
	58, 384,
	354, 384,
	-2, 407,
	-1, 717,
	55, 48,
	57, 48,
	-2, 52,
	-1, 868,
	114, 680,
	-2, 676,
	-1, 1102,
	5, 32,
	-2, 471,
	-1, 1134,
	5, 31,
	-2, 610,
	-1, 1219,
	5, 31,
	-2, 69,
	-1, 1324,
	1, 426,
	5, 426,
	12, 426,
	13, 426,
	14, 426,
	15, 426,
	17, 426,
	19, 426,
	29, 426,
	30, 426,
	44, 426,
	45, 426,
	46, 426,
	47, 426,
	48, 426,
	50, 426,
	51, 426,
	54, 426,
	55, 426,
	57, 426,
	58, 426,
	354, 426,
	-2, 407,
	-1, 1413,
	5, 32,
	-2, 611,
	-1, 1444,
	5, 31,
	-2, 69,
	-1, 1476,
	5, 31,
	-2, 613,
	-1, 1552,
	5, 32,
	-2, 614,
}

const yyPrivate = 57344

const yyLast = 16514

var yyAct = [...]int{

	330, 1585, 1575, 1428, 1540, 327, 334, 1255, 1377, 1137,
	1456, 669, 1490, 956, 1302, 1446, 1031, 1338, 958, 985,
	308, 954, 1303, 347, 360, 1006, 950, 668, 3, 1043,
	64, 1299, 1138, 1309, 297, 981, 1026, 1315, 984, 893,
	98, 994, 1162, 98, 807, 1274, 952, 1096, 336, 98,
	1183, 906, 930, 822, 1012, 531, 941, 1230, 1231, 1212,
	998, 710, 920, 730, 600, 606, 1022, 711, 612, 729,
	870, 390, 621, 332, 98, 409, 393, 398, 395, 98,
	317, 98, 303, 63, 298, 299, 719, 7, 302, 98,
	934, 684, 6, 537, 1578, 98, 1562, 68, 685, 1573,
	5, 1550, 1570, 1378, 404, 1561, 1291, 1549, 1405, 931,
	1062, 536, 26, 1332, 55, 29, 30, 975, 554, 559,
	1333, 1334, 321, 1061, 581, 70, 71, 72, 73, 74,
	976, 977, 301, 361, 54, 1520, 634, 633, 643, 644,
	636, 637, 638, 639, 640, 641, 642, 635, 300, 731,
	645, 732, 1203, 373, 1066, 379, 380, 377, 378, 376,
	375, 374, 61, 1060, 305, 277, 307, 1005, 1257, 381,
	382, 93, 89, 90, 91, 1463, 1171, 539, 540, 1170,
	1013, 1396, 1172, 1394, 580, 292, 558, 561, 54, 563,
	576, 835, 287, 579, 577, 574, 575, 569, 570, 834,
	313, 1259, 832, 1572, 1569, 1541, 1254, 1275, 935, 294,
	1536, 85, 999, 1057, 1052, 1053, 1593, 1051, 1491, 1054,
	1055, 1258, 560, 562, 1232, 997, 1001, 1447, 1448, 1451,
	538, 1493, 544, 836, 307, 1221, 833, 799, 1001, 959,
	961, 793, 1161, 269, 295, 1001, 1160, 1159, 1277, 534,
	272, 532, 81, 1064, 1067, 594, 268, 88, 1527, 1112,
	281, 276, 306, 1589, 1074, 556, 1416, 1073, 1261, 98,
	1184, 1109, 409, 1167, 409, 409, 1123, 409, 409, 1249,
	409, 1090, 409, 1279, 842, 1283, 925, 1278, 409, 1276,
	1059, 1251, 982, 92, 1281, 279, 657, 658, 725, 625,
	1492, 286, 550, 1280, 83, 84, 98, 80, 557, 645,
	1521, 1013, 1058, 87, 86, 971, 1282, 1284, 960, 823,
	1000, 584, 588, 1548, 409, 995, 635, 996, 270, 645,
	839, 1353, 1000, 993, 999, 590, 591, 1450, 543, 1000,
	401, 609, 608, 659, 660, 661, 662, 663, 664, 665,
	666, 599, 1063, 1045, 827, 283, 273, 274, 620, 284,
	285, 290, 56, 657, 658, 275, 278, 1065, 271, 289,
	288, 532, 1534, 1402, 1587, 657, 658, 1588, 1509, 1586,
	655, 585, 1354, 1313, 77, 1250, 587, 1248, 98, 98,
	98, 1245, 564, 565, 586, 566, 567, 409, 568, 733,
	571, 589, 824, 409, 530, 555, 582, 555, 555, 877,
	555, 555, 610, 555, 596, 555, 597, 619, 618, 598,
	78, 555, 921, 875, 876, 874, 82, 54, 54, 1293,
	546, 547, 548, 1044, 620, 709, 795, 714, 636, 637,
	638, 639, 640, 641, 642, 635, 1344, 54, 645, 634,
	633, 643, 644, 636, 637, 638, 639, 640, 641, 642,
	635, 718, 654, 645, 304, 656, 687, 689, 691, 693,
	695, 697, 698, 688, 690, 727, 694, 696, 723, 699,
	1108, 61, 841, 359, 638, 639, 640, 641, 642, 635,
	615, 873, 645, 667, 1554, 671, 672, 673, 674, 675,
	676, 677, 678, 679, 680, 1442, 683, 686, 686, 686,
	692, 686, 686, 692, 686, 700, 701, 702, 703, 704,
	705, 840, 715, 1107, 618, 1106, 845, 846, 619, 618,
	24, 98, 619, 618, 1441, 1295, 387, 388, 619, 618,
	620, 98, 619, 618, 98, 620, 921, 98, 1120, 620,
	1594, 98, 1216, 409, 409, 620, 1215, 1204, 403, 620,
	409, 409, 98, 409, 409, 1535, 860, 862, 863, 1470,
	409, 409, 861, 1087, 1088, 1089, 619, 618, 1439, 894,
	1195, 895, 1173, 1532, 1174, 1200, 1199, 1349, 1227, 1213,
	592, 1048, 1595, 620, 1504, 98, 409, 312, 1366, 1503,
	98, 532, 1485, 1571, 1557, 593, 1196, 1485, 1544, 593,
	1242, 1238, 409, 1485, 1528, 800, 532, 98, 1485, 1495,
	1201, 1380, 1193, 409, 1485, 593, 1434, 1433, 1194, 847,
	1418, 593, 1501, 869, 1375, 1371, 878, 879, 880, 881,
	882, 883, 884, 885, 886, 887, 888, 889, 890, 891,
	892, 812, 813, 871, 1369, 809, 350, 349, 352, 353,
	354, 355, 401, 1415, 593, 351, 356, 409, 1360, 1359,
	866, 810, 811, 1356, 1357, 1356, 1355, 872, 814, 815,
	1184, 817, 818, 910, 913, 1198, 555, 555, 819, 820,
	922, 849, 926, 555, 555, 864, 555, 555, 1179, 904,
	1041, 409, 409, 555, 555, 1237, 938, 593, 98, 1040,
	1239, 1232, 1240, 1236, 831, 1233, 98, 98, 1234, 1235,
	98, 98, 896, 26, 98, 98, 98, 409, 829, 555,
	868, 897, 898, 1103, 593, 1241, 900, 902, 593, 1499,
	409, 943, 946, 947, 948, 944, 1132, 945, 949, 918,
	806, 1316, 1317, 1133, 805, 403, 1498, 403, 403, 796,
	403, 403, 794, 403, 714, 403, 966, 791, 714, 1197,
	968, 403, 714, 61, 721, 1008, 1009, 1010, 1011, 740,
	739, 1350, 905, 907, 552, 545, 912, 915, 916, 917,
	54, 1019, 1020, 1021, 98, 409, 989, 409, 973, 98,
	98, 969, 1002, 98, 972, 671, 721, 623, 964, 1014,
	1015, 1016, 929, 1300, 932, 933, 1312, 965, 722, 720,
	724, 26, 98, 1312, 98, 98, 26, 1028, 902, 98,
	809, 1411, 65, 98, 98, 98, 98, 98, 633, 643,
	644, 636, 637, 638, 639, 640, 641, 642, 635, 953,
	722, 645, 720, 715, 1024, 1025, 1475, 715, 1163, 634,
	633, 643, 644, 636, 637, 638, 639, 640, 641, 642,
	635, 61, 1163, 645, 1103, 1264, 61, 937, 1508, 938,
	403, 1093, 1094, 1095, 1358, 1175, 735, 1078, 974, 1103,
	1126, 867, 1125, 1039, 720, 726, 848, 843, 798, 871,
	314, 61, 1256, 938, 1459, 938, 1563, 1458, 1007, 1079,
	1423, 1027, 1080, 1033, 1343, 1035, 1097, 1312, 1178, 1316,
	1317, 1103, 1023, 872, 1018, 1017, 1030, 1580, 555, 1576,
	555, 943, 946, 947, 948, 944, 1319, 945, 949, 98,
	98, 98, 98, 98, 1139, 1092, 1300, 868, 1322, 1217,
	61, 98, 828, 1100, 98, 901, 903, 802, 98, 855,
	1149, 1321, 1134, 1147, 1086, 1150, 98, 1151, 1148, 947,
	948, 1146, 1158, 1145, 318, 319, 1157, 1567, 593, 1560,
	1260, 904, 1119, 1075, 1565, 409, 1085, 714, 714, 714,
	714, 714, 401, 1084, 1473, 613, 614, 1348, 1347, 1186,
	1140, 1091, 714, 1143, 1176, 986, 1152, 1141, 1142, 1165,
	1144, 1166, 1164, 611, 714, 634, 633, 643, 644, 636,
	637, 638, 639, 640, 641, 642, 635, 1180, 1117, 645,
	1208, 409, 738, 553, 601, 1409, 403, 403, 1168, 409,
	98, 409, 409, 403, 403, 602, 403, 403, 1207, 1185,
	1209, 1210, 1211, 403, 403, 1454, 1034, 1181, 1182, 1219,
	801, 1220, 951, 1205, 1206, 613, 614, 309, 1135, 1136,
	792, 1514, 715, 715, 715, 715, 715, 310, 1214, 403,
	315, 316, 98, 65, 1083, 1229, 1513, 953, 1461, 1155,
	1163, 409, 1082, 578, 1113, 851, 1226, 1582, 1581, 715,
	1110, 821, 616, 1270, 1271, 1582, 623, 1524, 867, 403,
	1243, 1244, 1252, 1253, 1346, 1287, 1288, 838, 1289, 1290,
	67, 643, 644, 636, 637, 638, 639, 640, 641, 642,
	635, 1297, 1298, 645, 69, 47, 409, 409, 62, 1139,
	1, 1268, 1301, 1574, 1267, 1379, 323, 1285, 1292, 1455,
	899, 1056, 1539, 1489, 1286, 1273, 409, 1222, 1304, 1224,
	1225, 1337, 1324, 1306, 992, 54, 983, 923, 1078, 76,
	529, 1325, 555, 75, 555, 555, 409, 1533, 409, 409,
	1311, 1320, 991, 1099, 927, 928, 990, 1191, 1190, 1323,
	1187, 1102, 1104, 1329, 1105, 1202, 1004, 1336, 1189, 1111,
	1188, 1345, 1114, 1115, 1116, 1192, 746, 1331, 744, 1122,
	403, 745, 743, 1124, 1335, 748, 1127, 1128, 98, 1129,
	1130, 1340, 98, 403, 747, 1003, 742, 280, 868, 396,
	734, 1029, 1341, 1342, 617, 48, 1362, 1363, 1449, 1154,
	1246, 1351, 1352, 79, 1247, 1050, 826, 98, 572, 573,
	986, 282, 653, 1081, 1169, 409, 1365, 402, 409, 409,
	409, 1307, 409, 844, 605, 98, 1368, 1305, 1512, 54,
	1460, 1118, 681, 919, 335, 1387, 859, 348, 403, 1370,
	403, 345, 1373, 346, 850, 1131, 1367, 627, 333, 325,
	713, 706, 942, 1326, 1327, 1328, 940, 604, 939, 803,
	391, 1389, 1390, 1318, 1391, 1314, 1384, 1393, 1374, 1395,
	712, 1385, 1263, 714, 293, 1404, 1392, 1519, 854, 1139,
	28, 66, 320, 19, 18, 17, 403, 409, 409, 409,
	583, 1430, 1431, 1410, 20, 21, 409, 96, 1426, 22,
	291, 16, 1419, 15, 409, 1420, 96, 1436, 14, 541,
	1432, 1427, 32, 36, 35, 1176, 1266, 34, 10, 23,
	13, 12, 409, 11, 9, 1435, 8, 4, 324, 311,
	1437, 394, 25, 2, 0, 0, 96, 0, 96, 409,
	0, 0, 0, 0, 0, 0, 96, 1272, 0, 1296,
	1452, 1444, 96, 0, 0, 0, 0, 0, 715, 0,
	0, 0, 0, 0, 0, 1464, 1465, 1466, 1467, 1468,
	1438, 0, 1440, 1471, 1472, 0, 409, 409, 0, 409,
	0, 923, 1445, 0, 409, 1403, 98, 1482, 98, 0,
	0, 1453, 0, 0, 1474, 409, 1304, 0, 0, 0,
	1481, 986, 1476, 986, 0, 1462, 1484, 1483, 0, 0,
	0, 0, 1494, 0, 0, 0, 603, 607, 0, 409,
	98, 1500, 1510, 0, 0, 0, 0, 0, 403, 1506,
	0, 0, 0, 626, 1496, 0, 1497, 0, 0, 0,
	1443, 1502, 0, 0, 0, 0, 409, 1505, 0, 0,
	1525, 0, 0, 0, 0, 555, 0, 54, 1529, 0,
	1304, 0, 1531, 0, 0, 1526, 0, 0, 670, 409,
	409, 0, 0, 0, 1218, 0, 0, 0, 682, 1542,
	0, 0, 403, 0, 403, 403, 1546, 1266, 409, 1543,
	0, 1139, 0, 0, 1551, 0, 1537, 98, 0, 0,
	0, 1538, 409, 0, 0, 1305, 0, 0, 1477, 0,
	0, 716, 1559, 0, 1386, 0, 0, 0, 0, 0,
	0, 1388, 1564, 0, 409, 0, 96, 1568, 1566, 0,
	0, 0, 1397, 1398, 403, 0, 0, 1579, 0, 0,
	0, 0, 0, 1583, 1590, 0, 0, 0, 1507, 0,
	0, 95, 1412, 1413, 1414, 0, 1417, 0, 0, 0,
	296, 986, 0, 96, 0, 0, 0, 403, 0, 1305,
	1425, 54, 0, 0, 0, 0, 923, 0, 0, 1308,
	1310, 951, 0, 0, 0, 392, 1408, 0, 0, 0,
	533, 0, 535, 0, 0, 0, 0, 0, 0, 1310,
	542, 0, 0, 0, 1457, 0, 549, 0, 0, 0,
	0, 959, 961, 0, 0, 0, 0, 0, 0, 403,
	0, 403, 1339, 0, 634, 633, 643, 644, 636, 637,
	638, 639, 640, 641, 642, 635, 0, 0, 645, 0,
	0, 0, 0, 0, 0, 96, 96, 96, 0, 0,
	0, 1469, 0, 0, 634, 633, 643, 644, 636, 637,
	638, 639, 640, 641, 642, 635, 1577, 0, 645, 0,
	0, 0, 0, 0, 0, 1486, 0, 1487, 1488, 0,
	0, 0, 0, 0, 0, 825, 0, 0, 0, 0,
	960, 0, 0, 0, 0, 0, 0, 0, 1376, 1407,
	0, 1381, 1382, 1383, 0, 403, 0, 0, 0, 0,
	0, 1515, 1516, 1517, 1518, 0, 0, 0, 1522, 1523,
	0, 0, 0, 0, 0, 857, 858, 0, 0, 0,
	0, 0, 0, 0, 1457, 986, 0, 634, 633, 643,
	644, 636, 637, 638, 639, 640, 641, 642, 635, 0,
	0, 645, 0, 0, 0, 0, 923, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1547, 0, 0, 0,
	1429, 1429, 1429, 1552, 0, 0, 0, 0, 670, 403,
	551, 908, 909, 0, 0, 0, 1556, 1429, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 0,
	0, 96, 0, 0, 96, 403, 0, 0, 808, 0,
	1401, 0, 0, 0, 0, 0, 0, 595, 0, 96,
	0, 0, 403, 0, 0, 0, 0, 1400, 0, 0,
	1591, 1592, 0, 0, 0, 0, 0, 0, 0, 0,
	980, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 0, 0, 0, 0, 96, 0, 1478,
	1479, 0, 1480, 0, 0, 0, 0, 1429, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 1339, 0,
	0, 0, 0, 808, 0, 0, 634, 633, 643, 644,
	636, 637, 638, 639, 640, 641, 642, 635, 0, 708,
	645, 717, 1429, 634, 633, 643, 644, 636, 637, 638,
	639, 640, 641, 642, 635, 1399, 0, 645, 0, 0,
	26, 27, 55, 29, 30, 0, 0, 0, 0, 1530,
	324, 324, 0, 0, 324, 324, 324, 324, 0, 60,
	0, 924, 0, 31, 51, 52, 0, 1076, 1077, 0,
	607, 0, 403, 403, 0, 0, 0, 0, 0, 0,
	324, 324, 324, 324, 0, 96, 42, 0, 923, 0,
	61, 1553, 0, 96, 962, 0, 0, 96, 96, 0,
	0, 96, 970, 808, 0, 1558, 0, 0, 0, 0,
	1269, 634, 633, 643, 644, 636, 637, 638, 639, 640,
	641, 642, 635, 0, 0, 645, 0, 1429, 0, 1101,
	634, 633, 643, 644, 636, 637, 638, 639, 640, 641,
	642, 635, 0, 0, 645, 0, 0, 0, 1121, 0,
	0, 33, 57, 38, 37, 40, 0, 53, 0, 0,
	0, 0, 741, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 797, 0, 0, 392, 96, 96, 804, 0,
	96, 0, 41, 59, 58, 0, 0, 49, 50, 39,
	0, 0, 0, 816, 0, 0, 0, 0, 0, 96,
	0, 1046, 1047, 0, 43, 44, 96, 45, 46, 0,
	96, 96, 96, 96, 96, 0, 0, 0, 0, 0,
	808, 0, 0, 0, 763, 0, 830, 0, 0, 0,
	0, 837, 324, 629, 0, 632, 0, 0, 0, 0,
	0, 646, 647, 648, 649, 650, 651, 652, 856, 630,
	631, 628, 634, 633, 643, 644, 636, 637, 638, 639,
	640, 641, 642, 635, 0, 0, 645, 0, 0, 0,
	0, 0, 1228, 0, 0, 0, 0, 0, 324, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	56, 0, 0, 0, 0, 0, 324, 0, 0, 0,
	0, 0, 0, 0, 0, 751, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 924, 96, 96, 96, 96,
	96, 0, 0, 0, 0, 0, 0, 0, 1153, 0,
	0, 96, 0, 1098, 0, 962, 0, 0, 0, 936,
	0, 0, 0, 96, 0, 0, 764, 1294, 0, 0,
	0, 0, 967, 634, 633, 643, 644, 636, 637, 638,
	639, 640, 641, 642, 635, 0, 0, 645, 0, 0,
	777, 780, 781, 782, 783, 784, 785, 0, 786, 787,
	788, 789, 790, 765, 766, 767, 768, 749, 750, 778,
	1330, 752, 0, 753, 754, 755, 756, 757, 758, 759,
	760, 761, 762, 769, 770, 771, 772, 773, 774, 775,
	776, 0, 0, 0, 0, 0, 0, 96, 0, 0,
	0, 0, 0, 0, 0, 1032, 0, 0, 0, 0,
	1036, 1037, 0, 0, 1038, 634, 633, 643, 644, 636,
	637, 638, 639, 640, 641, 642, 635, 0, 0, 645,
	0, 0, 0, 1042, 0, 0, 0, 0, 0, 96,
	1049, 0, 779, 0, 1068, 1069, 1070, 1071, 1072, 324,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 324, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 808, 0, 0, 0, 0, 0, 0, 0, 0,
	924, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1406, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 670, 0, 0, 0, 0, 0, 0, 0,
	1421, 0, 0, 1422, 0, 0, 1424, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 0, 0, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1223, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	924, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1262, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1545, 670, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 962, 0, 962, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1361,
	0, 0, 0, 1364, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1372, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 924, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 516, 504, 0, 461, 519,
	434, 451, 527, 452, 455, 492, 419, 474, 182, 449,
	0, 438, 414, 444, 415, 436, 463, 128, 433, 506,
	477, 518, 154, 517, 467, 0, 525, 156, 483, 0,
	228, 170, 0, 0, 465, 508, 472, 501, 460, 493,
	424, 482, 520, 450, 490, 521, 0, 0, 0, 408,
	0, 987, 988, 0, 0, 0, 0, 0, 118, 0,
	487, 515, 446, 489, 491, 413, 484, 0, 417, 420,
	526, 511, 441, 442, 1177, 0, 0, 0, 0, 0,
	0, 464, 473, 498, 458, 0, 0, 0, 0, 0,
	0, 0, 0, 439, 0, 481, 0, 0, 0, 421,
	418, 0, 0, 462, 0, 0, 0, 423, 0, 440,
	499, 0, 410, 136, 0, 0, 503, 510, 459, 257,
	514, 457, 456, 201, 0, 232, 139, 153, 114, 100,
	110, 1511, 138, 179, 208, 212, 447, 411, 507, 437,
	445, 122, 443, 210, 189, 248, 0, 480, 191, 209,
	157, 238, 202, 247, 258, 259, 235, 255, 263, 225,
	103, 234, 246, 119, 220, 105, 244, 231, 168, 148,
	149, 104, 0, 206, 127, 134, 124, 181, 241, 242,
	123, 266, 111, 254, 107, 112, 253, 175, 237, 245,
	169, 162, 106, 243, 167, 161, 152, 131, 141, 199,
	159, 200, 142, 172, 171, 173, 0, 416, 1555, 229,
	251, 267, 116, 432, 0, 236, 261, 262, 0, 0,
	117, 135, 130, 198, 174, 113, 144, 226, 151, 158,
	205, 265, 188, 211, 120, 250, 227, 428, 431, 426,
	427, 475, 476, 522, 523, 524, 500, 422, 0, 429,
	430, 0, 505, 512, 513, 479, 99, 108, 155, 264,
	203, 133, 252, 412, 425, 126, 435, 0, 0, 448,
	453, 454, 466, 468, 469, 470, 471, 478, 485, 486,
	488, 494, 495, 496, 497, 502, 509, 528, 101, 102,
	109, 115, 121, 125, 129, 132, 137, 140, 143, 145,
	146, 147, 150, 160, 163, 164, 165, 166, 176, 177,
	178, 180, 183, 184, 185, 186, 187, 190, 192, 193,
	194, 195, 196, 197, 204, 207, 213, 214, 215, 216,
	217, 218, 219, 221, 222, 223, 224, 230, 233, 239,
	240, 249, 256, 260, 516, 504, 0, 461, 519, 434,
	451, 527, 452, 455, 492, 419, 474, 182, 449, 0,
	438, 414, 444, 415, 436, 463, 128, 433, 506, 477,
	518, 154, 517, 467, 0, 525, 156, 483, 0, 228,
	170, 0, 0, 465, 508, 472, 501, 460, 493, 424,
	482, 520, 450, 490, 521, 0, 0, 0, 408, 0,
	987, 988, 0, 0, 0, 0, 0, 118, 0, 487,
	515, 446, 489, 491, 413, 484, 0, 417, 420, 526,
	511, 441, 442, 0, 0, 0, 0, 0, 0, 0,
	464, 473, 498, 458, 0, 0, 0, 0, 0, 0,
	0, 0, 439, 0, 481, 0, 0, 0, 421, 418,
	0, 0, 462, 0, 0, 0, 423, 0, 440, 499,
	0, 410, 136, 0, 0, 503, 510, 459, 257, 514,
	457, 456, 201, 0, 232, 139, 153, 114, 100, 110,
	0, 138, 179, 208, 212, 447, 411, 507, 437, 445,
	122, 443, 210, 189, 248, 0, 480, 191, 209, 157,
	238, 202, 247, 258, 259, 235, 255, 263, 225, 103,
	234, 246, 119, 220, 105, 244, 231, 168, 148, 149,
	104, 0, 206, 127, 134, 124, 181, 241, 242, 123,
	266, 111, 254, 107, 112, 253, 175, 237, 245, 169,
	162, 106, 243, 167, 161, 152, 131, 141, 199, 159,
	200, 142, 172, 171, 173, 0, 416, 0, 229, 251,
	267, 116, 432, 0, 236, 261, 262, 0, 0, 117,
	135, 130, 198, 174, 113, 144, 226, 151, 158, 205,
	265, 188, 211, 120, 250, 227, 428, 431, 426, 427,
	475, 476, 522, 523, 524, 500, 422, 0, 429, 430,
	0, 505, 512, 513, 479, 99, 108, 155, 264, 203,
	133, 252, 412, 425, 126, 435, 0, 0, 448, 453,
	454, 466, 468, 469, 470, 471, 478, 485, 486, 488,
	494, 495, 496, 497, 502, 509, 528, 101, 102, 109,
	115, 121, 125, 129, 132, 137, 140, 143, 145, 146,
	147, 150, 160, 163, 164, 165, 166, 176, 177, 178,
	180, 183, 184, 185, 186, 187, 190, 192, 193, 194,
	195, 196, 197, 204, 207, 213, 214, 215, 216, 217,
	218, 219, 221, 222, 223, 224, 230, 233, 239, 240,
	249, 256, 260, 516, 504, 0, 461, 519, 434, 451,
	527, 452, 455, 492, 419, 474, 182, 449, 0, 438,
	414, 444, 415, 436, 463, 128, 433, 506, 477, 518,
	154, 517, 467, 0, 525, 156, 483, 0, 228, 170,
	0, 0, 465, 508, 472, 501, 460, 493, 424, 482,
	520, 450, 490, 521, 61, 0, 0, 408, 0, 0,
	0, 0, 0, 0, 0, 0, 118, 0, 487, 515,
	446, 489, 491, 413, 484, 0, 417, 420, 526, 511,
	441, 442, 0, 0, 0, 0, 0, 0, 0, 464,
	473, 498, 458, 0, 0, 0, 0, 0, 0, 0,
	0, 439, 0, 481, 0, 0, 0, 421, 418, 0,
	0, 462, 0, 0, 0, 423, 0, 440, 499, 0,
	410, 136, 0, 0, 503, 510, 459, 257, 514, 457,
	456, 201, 0, 232, 139, 153, 114, 100, 110, 0,
	138, 179, 208, 212, 447, 411, 507, 437, 445, 122,
	443, 210, 189, 248, 0, 480, 191, 209, 157, 238,
	202, 247, 258, 259, 235, 255, 263, 225, 103, 234,
	246, 119, 220, 105, 244, 231, 168, 148, 149, 104,
	0, 206, 127, 134, 124, 181, 241, 242, 123, 266,
	111, 254, 107, 112, 253, 175, 237, 245, 169, 162,
	106, 243, 167, 161, 152, 131, 141, 199, 159, 200,
	142, 172, 171, 173, 0, 416, 0, 229, 251, 267,
	116, 432, 0, 236, 261, 262, 0, 0, 117, 135,
	130, 198, 174, 113, 144, 226, 151, 158, 205, 265,
	188, 211, 120, 250, 227, 428, 431, 426, 427, 475,
	476, 522, 523, 524, 500, 422, 0, 429, 430, 0,
	505, 512, 513, 479, 99, 108, 155, 264, 203, 133,
	252, 412, 425, 126, 435, 0, 0, 448, 453, 454,
	466, 468, 469, 470, 471, 478, 485, 486, 488, 494,
	495, 496, 497, 502, 509, 528, 101, 102, 109, 115,
	121, 125, 129, 132, 137, 140, 143, 145, 146, 147,
	150, 160, 163, 164, 165, 166, 176, 177, 178, 180,
	183, 184, 185, 186, 187, 190, 192, 193, 194, 195,
	196, 197, 204, 207, 213, 214, 215, 216, 217, 218,
	219, 221, 222, 223, 224, 230, 233, 239, 240, 249,
	256, 260, 516, 504, 0, 461, 519, 434, 451, 527,
	452, 455, 492, 419, 474, 182, 449, 0, 438, 414,
	444, 415, 436, 463, 128, 433, 506, 477, 518, 154,
	517, 467, 0, 525, 156, 483, 0, 228, 170, 0,
	0, 465, 508, 472, 501, 460, 493, 424, 482, 520,
	450, 490, 521, 0, 0, 0, 408, 0, 0, 0,
	0, 0, 0, 0, 0, 118, 0, 487, 515, 446,
	489, 491, 413, 484, 0, 417, 420, 526, 511, 441,
	442, 0, 0, 0, 0, 0, 0, 0, 464, 473,
	498, 458, 0, 0, 0, 0, 0, 0, 1265, 0,
	439, 0, 481, 0, 0, 0, 421, 418, 0, 0,
	462, 0, 0, 0, 423, 0, 440, 499, 0, 410,
	136, 0, 0, 503, 510, 459, 257, 514, 457, 456,
	201, 0, 232, 139, 153, 114, 100, 110, 0, 138,
	179, 208, 212, 447, 411, 507, 437, 445, 122, 443,
	210, 189, 248, 0, 480, 191, 209, 157, 238, 202,
	247, 258, 259, 235, 255, 263, 225, 103, 234, 246,
	119, 220, 105, 244, 231, 168, 148, 149, 104, 0,
	206, 127, 134, 124, 181, 241, 242, 123, 266, 111,
	254, 107, 112, 253, 175, 237, 245, 169, 162, 106,
	243, 167, 161, 152, 131, 141, 199, 159, 200, 142,
	172, 171, 173, 0, 416, 0, 229, 251, 267, 116,
	432, 0, 236, 261, 262, 0, 0, 117, 135, 130,
	198, 174, 113, 144, 226, 151, 158, 205, 265, 188,
	211, 120, 250, 227, 428, 431, 426, 427, 475, 476,
	522, 523, 524, 500, 422, 0, 429, 430, 0, 505,
	512, 513, 479, 99, 108, 155, 264, 203, 133, 252,
	412, 425, 126, 435, 0, 0, 448, 453, 454, 466,
	468, 469, 470, 471, 478, 485, 486, 488, 494, 495,
	496, 497, 502, 509, 528, 101, 102, 109, 115, 121,
	125, 129, 132, 137, 140, 143, 145, 146, 147, 150,
	160, 163, 164, 165, 166, 176, 177, 178, 180, 183,
	184, 185, 186, 187, 190, 192, 193, 194, 195, 196,
	197, 204, 207, 213, 214, 215, 216, 217, 218, 219,
	221, 222, 223, 224, 230, 233, 239, 240, 249, 256,
	260, 516, 504, 0, 461, 519, 434, 451, 527, 452,
	455, 492, 419, 474, 182, 449, 0, 438, 414, 444,
	415, 436, 463, 128, 433, 506, 477, 518, 154, 517,
	467, 0, 525, 156, 483, 0, 228, 170, 0, 0,
	465, 508, 472, 501, 460, 493, 424, 482, 520, 450,
	490, 521, 0, 0, 0, 97, 0, 0, 0, 0,
	0, 0, 0, 0, 118, 0, 487, 515, 446, 489,
	491, 413, 484, 0, 417, 420, 526, 511, 441, 442,
	0, 0, 0, 0, 0, 0, 0, 464, 473, 498,
	458, 0, 0, 0, 0, 0, 0, 971, 0, 439,
	0, 481, 0, 0, 0, 421, 418, 0, 0, 462,
	0, 0, 0, 423, 0, 440, 499, 0, 410, 136,
	0, 0, 503, 510, 459, 257, 514, 457, 456, 201,
	0, 232, 139, 153, 114, 100, 110, 0, 138, 179,
	208, 212, 447, 411, 507, 437, 445, 122, 443, 210,
	189, 248, 0, 480, 191, 209, 157, 238, 202, 247,
	258, 259, 235, 255, 263, 225, 103, 234, 246, 119,
	220, 105, 244, 231, 168, 148, 149, 104, 0, 206,
	127, 134, 124, 181, 241, 242, 123, 266, 111, 254,
	107, 112, 253, 175, 237, 245, 169, 162, 106, 243,
	167, 161, 152, 131, 141, 199, 159, 200, 142, 172,
	171, 173, 0, 416, 0, 229, 251, 267, 116, 432,
	0, 236, 261, 262, 0, 0, 117, 135, 130, 198,
	174, 113, 144, 226, 151, 158, 205, 265, 188, 211,
	120, 250, 227, 428, 431, 426, 427, 475, 476, 522,
	523, 524, 500, 422, 0, 429, 430, 0, 505, 512,
	513, 479, 99, 108, 155, 264, 203, 133, 252, 412,
	425, 126, 435, 0, 0, 448, 453, 454, 466, 468,
	469, 470, 471, 478, 485, 486, 488, 494, 495, 496,
	497, 502, 509, 528, 101, 102, 109, 115, 121, 125,
	129, 132, 137, 140, 143, 145, 146, 147, 150, 160,
	163, 164, 165, 166, 176, 177, 178, 180, 183, 184,
	185, 186, 187, 190, 192, 193, 194, 195, 196, 197,
	204, 207, 213, 214, 215, 216, 217, 218, 219, 221,
	222, 223, 224, 230, 233, 239, 240, 249, 256, 260,
	516, 504, 0, 461, 519, 434, 451, 527, 452, 455,
	492, 419, 474, 182, 449, 0, 438, 414, 444, 415,
	436, 463, 128, 433, 506, 477, 518, 154, 517, 467,
	0, 525, 156, 483, 0, 228, 170, 0, 0, 465,
	508, 472, 501, 460, 493, 424, 482, 520, 450, 490,
	521, 0, 0, 0, 329, 0, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 487, 515, 446, 489, 491,
	413, 484, 0, 417, 420, 526, 511, 441, 442, 0,
	0, 0, 0, 0, 0, 0, 464, 473, 498, 458,
	0, 0, 0, 0, 0, 0, 865, 0, 439, 0,
	481, 0, 0, 0, 421, 418, 0, 0, 462, 0,
	0, 0, 423, 0, 440, 499, 0, 410, 136, 0,
	0, 503, 510, 459, 257, 514, 457, 456, 201, 0,
	232, 139, 153, 114, 100, 110, 0, 138, 179, 208,
	212, 447, 411, 507, 437, 445, 122, 443, 210, 189,
	248, 0, 480, 191, 209, 157, 238, 202, 247, 258,
	259, 235, 255, 263, 225, 103, 234, 246, 119, 220,
	105, 244, 231, 168, 148, 149, 104, 0, 206, 127,
	134, 124, 181, 241, 242, 123, 266, 111, 254, 107,
	112, 253, 175, 237, 245, 169, 162, 106, 243, 167,
	161, 152, 131, 141, 199, 159, 200, 142, 172, 171,
	173, 0, 416, 0, 229, 251, 267, 116, 432, 0,
	236, 261, 262, 0, 0, 117, 135, 130, 198, 174,
	113, 144, 226, 151, 158, 205, 265, 188, 211, 120,
	250, 227, 428, 431, 426, 427, 475, 476, 522, 523,
	524, 500, 422, 0, 429, 430, 0, 505, 512, 513,
	479, 99, 108, 155, 264, 203, 133, 252, 412, 425,
	126, 435, 0, 0, 448, 453, 454, 466, 468, 469,
	470, 471, 478, 485, 486, 488, 494, 495, 496, 497,
	502, 509, 528, 101, 102, 109, 115, 121, 125, 129,
	132, 137, 140, 143, 145, 146, 147, 150, 160, 163,
	164, 165, 166, 176, 177, 178, 180, 183, 184, 185,
	186, 187, 190, 192, 193, 194, 195, 196, 197, 204,
	207, 213, 214, 215, 216, 217, 218, 219, 221, 222,
	223, 224, 230, 233, 239, 240, 249, 256, 260, 516,
	504, 0, 461, 519, 434, 451, 527, 452, 455, 492,
	419, 474, 182, 449, 0, 438, 414, 444, 415, 436,
	463, 128, 433, 506, 477, 518, 154, 517, 467, 0,
	525, 156, 483, 0, 228, 170, 0, 0, 465, 508,
	472, 501, 460, 493, 424, 482, 520, 450, 490, 521,
	0, 0, 0, 408, 0, 0, 0, 0, 0, 0,
	0, 0, 118, 0, 487, 515, 446, 489, 491, 413,
	484, 0, 417, 420, 526, 511, 441, 442, 0, 0,
	0, 0, 0, 0, 0, 464, 473, 498, 458, 0,
	0, 0, 0, 0, 0, 0, 0, 439, 0, 481,
	0, 0, 0, 421, 418, 0, 0, 462, 0, 0,
	0, 423, 0, 440, 499, 0, 410, 136, 0, 0,
	503, 510, 459, 257, 514, 457, 456, 201, 0, 232,
	139, 153, 114, 100, 110, 0, 138, 179, 208, 212,
	447, 411, 507, 437, 445, 122, 443, 210, 189, 248,
	0, 480, 191, 209, 157, 238, 202, 247, 258, 259,
	235, 255, 263, 225, 103, 234, 246, 119, 220, 105,
	244, 231, 168, 148, 149, 104, 0, 206, 127, 134,
	124, 181, 241, 242, 123, 266, 111, 254, 107, 112,
	253, 175, 237, 245, 169, 162, 106, 243, 167, 161,
	152, 131, 141, 199, 159, 200, 142, 172, 171, 173,
	0, 416, 0, 229, 251, 267, 116, 432, 0, 236,
	261, 262, 0, 0, 117, 135, 130, 198, 174, 113,
	144, 226, 151, 158, 205, 265, 188, 211, 120, 250,
	227, 428, 431, 426, 427, 475, 476, 522, 523, 524,
	500, 422, 0, 429, 430, 0, 505, 512, 513, 479,
	99, 108, 155, 264, 203, 133, 252, 412, 425, 126,
	435, 0, 0, 448, 453, 454, 466, 468, 469, 470,
	471, 478, 485, 486, 488, 494, 495, 496, 497, 502,
	509, 528, 101, 102, 109, 115, 121, 125, 129, 132,
	137, 140, 143, 145, 146, 147, 150, 160, 163, 164,
	165, 166, 176, 177, 178, 180, 183, 184, 185, 186,
	187, 190, 192, 193, 194, 195, 196, 197, 204, 207,
	213, 214, 215, 216, 217, 218, 219, 221, 222, 223,
	224, 230, 233, 239, 240, 249, 256, 260, 516, 504,
	0, 461, 519, 434, 451, 527, 452, 455, 492, 419,
	474, 182, 449, 0, 438, 414, 444, 415, 436, 463,
	128, 433, 506, 477, 518, 154, 517, 467, 0, 525,
	156, 483, 0, 228, 170, 0, 0, 465, 508, 472,
	501, 460, 493, 424, 482, 520, 450, 490, 521, 0,
	0, 0, 329, 0, 0, 0, 0, 0, 0, 0,
	0, 118, 0, 487, 515, 446, 489, 491, 413, 484,
	0, 417, 420, 526, 511, 441, 442, 0, 0, 0,
	0, 0, 0, 0, 464, 473, 498, 458, 0, 0,
	0, 0, 0, 0, 0, 0, 439, 0, 481, 0,
	0, 0, 421, 418, 0, 0, 462, 0, 0, 0,
	423, 0, 440, 499, 0, 410, 136, 0, 0, 503,
	510, 459, 257, 514, 457, 456, 201, 0, 232, 139,
	153, 114, 100, 110, 0, 138, 179, 208, 212, 447,
	411, 507, 437, 445, 122, 443, 210, 189, 248, 0,
	480, 191, 209, 157, 238, 202, 247, 258, 259, 235,
	255, 263, 225, 103, 234, 246, 119, 220, 105, 244,
	231, 168, 148, 149, 104, 0, 206, 127, 134, 124,
	181, 241, 242, 123, 266, 111, 254, 107, 112, 253,
	175, 237, 245, 169, 162, 106, 243, 167, 161, 152,
	131, 141, 199, 159, 200, 142, 172, 171, 173, 0,
	416, 0, 229, 251, 267, 116, 432, 0, 236, 261,
	262, 0, 0, 117, 135, 130, 198, 174, 113, 144,
	226, 151, 158, 205, 265, 188, 211, 120, 250, 227,
	428, 431, 426, 427, 475, 476, 522, 523, 524, 500,
	422, 0, 429, 430, 0, 505, 512, 513, 479, 99,
	108, 155, 264, 203, 133, 252, 412, 425, 126, 435,
	0, 0, 448, 453, 454, 466, 468, 469, 470, 471,
	478, 485, 486, 488, 494, 495, 496, 497, 502, 509,
	528, 101, 102, 109, 115, 121, 125, 129, 132, 137,
	140, 143, 145, 146, 147, 150, 160, 163, 164, 165,
	166, 176, 177, 178, 180, 183, 184, 185, 186, 187,
	190, 192, 193, 194, 195, 196, 197, 204, 207, 213,
	214, 215, 216, 217, 218, 219, 221, 222, 223, 224,
	230, 233, 239, 240, 249, 256, 260, 516, 504, 0,
	461, 519, 434, 451, 527, 452, 455, 492, 419, 474,
	182, 449, 0, 438, 414, 444, 415, 436, 463, 128,
	433, 506, 477, 518, 154, 517, 467, 0, 525, 156,
	483, 0, 228, 170, 0, 0, 465, 508, 472, 501,
	460, 493, 424, 482, 520, 450, 490, 521, 0, 0,
	0, 408, 0, 0, 0, 0, 0, 0, 0, 0,
	118, 0, 487, 515, 446, 489, 491, 413, 484, 0,
	417, 420, 526, 511, 441, 442, 0, 0, 0, 0,
	0, 0, 0, 464, 473, 498, 458, 0, 0, 0,
	0, 0, 0, 0, 0, 439, 0, 481, 0, 0,
	0, 421, 418, 0, 0, 462, 0, 0, 0, 423,
	0, 440, 499, 0, 410, 136, 0, 0, 503, 510,
	459, 257, 514, 457, 456, 201, 0, 232, 139, 153,
	114, 100, 110, 0, 138, 179, 208, 212, 447, 411,
	507, 437, 445, 122, 443, 210, 189, 248, 0, 480,
	191, 209, 157, 238, 202, 247, 258, 259, 235, 255,
	263, 225, 103, 234, 246, 119, 220, 105, 244, 231,
	168, 148, 149, 104, 0, 206, 127, 134, 124, 181,
	241, 242, 123, 266, 111, 254, 107, 406, 253, 175,
	237, 245, 169, 162, 106, 243, 167, 161, 152, 131,
	141, 199, 159, 200, 142, 172, 171, 173, 0, 416,
	0, 229, 251, 267, 116, 432, 0, 236, 261, 262,
	0, 0, 117, 135, 130, 198, 407, 405, 144, 226,
	151, 158, 205, 265, 188, 211, 120, 250, 227, 428,
	431, 426, 427, 475, 476, 522, 523, 524, 500, 422,
	0, 429, 430, 0, 505, 512, 513, 479, 99, 108,
	155, 264, 203, 133, 252, 412, 425, 126, 435, 0,
	0, 448, 453, 454, 466, 468, 469, 470, 471, 478,
	485, 486, 488, 494, 495, 496, 497, 502, 509, 528,
	101, 102, 109, 115, 121, 125, 129, 132, 137, 140,
	143, 145, 146, 147, 150, 160, 163, 164, 165, 166,
	176, 177, 178, 180, 183, 184, 185, 186, 187, 190,
	192, 193, 194, 195, 196, 197, 204, 207, 213, 214,
	215, 216, 217, 218, 219, 221, 222, 223, 224, 230,
	233, 239, 240, 249, 256, 260, 516, 504, 0, 461,
	519, 434, 451, 527, 452, 455, 492, 419, 474, 182,
	449, 0, 438, 414, 444, 415, 436, 463, 128, 433,
	506, 477, 518, 154, 517, 467, 0, 525, 156, 483,
	0, 228, 170, 0, 0, 465, 508, 472, 501, 460,
	493, 424, 482, 520, 450, 490, 521, 0, 0, 0,
	97, 0, 0, 0, 0, 0, 0, 0, 0, 118,
	0, 487, 515, 446, 489, 491, 413, 484, 0, 417,
	420, 526, 511, 441, 442, 0, 0, 0, 0, 0,
	0, 0, 464, 473, 498, 458, 0, 0, 0, 0,
	0, 0, 0, 0, 439, 0, 481, 0, 0, 0,
	421, 418, 0, 0, 462, 0, 0, 0, 423, 0,
	440, 499, 0, 410, 136, 0, 0, 503, 510, 459,
	257, 514, 457, 456, 201, 0, 232, 139, 153, 114,
	100, 110, 0, 138, 179, 208, 212, 447, 411, 507,
	437, 445, 122, 443, 210, 189, 248, 0, 480, 191,
	209, 157, 238, 202, 247, 258, 259, 235, 255, 263,
	225, 103, 234, 246, 119, 220, 105, 244, 231, 168,
	148, 149, 104, 0, 206, 127, 134, 124, 181, 241,
	242, 123, 266, 111, 254, 107, 112, 253, 175, 237,
	245, 169, 162, 106, 243, 167, 161, 152, 131, 141,
	199, 159, 200, 142, 172, 171, 173, 0, 416, 0,
	229, 251, 267, 116, 432, 0, 236, 261, 262, 0,
	0, 117, 135, 130, 198, 174, 113, 144, 226, 151,
	158, 205, 265, 188, 211, 120, 250, 227, 428, 431,
	426, 427, 475, 476, 522, 523, 524, 500, 422, 0,
	429, 430, 0, 505, 512, 513, 479, 99, 108, 155,
	264, 203, 133, 252, 412, 425, 126, 435, 0, 0,
	448, 453, 454, 466, 468, 469, 470, 471, 478, 485,
	486, 488, 494, 495, 496, 497, 502, 509, 528, 101,
	102, 109, 115, 121, 125, 129, 132, 137, 140, 143,
	145, 146, 147, 150, 160, 163, 164, 165, 166, 176,
	177, 178, 180, 183, 184, 185, 186, 187, 190, 192,
	193, 194, 195, 196, 197, 204, 207, 213, 214, 215,
	216, 217, 218, 219, 221, 222, 223, 224, 230, 233,
	239, 240, 249, 256, 260, 516, 504, 0, 461, 519,
	434, 451, 527, 452, 455, 492, 419, 474, 182, 449,
	0, 438, 414, 444, 415, 436, 463, 128, 433, 506,
	477, 518, 154, 517, 467, 0, 525, 156, 483, 0,
	228, 170, 0, 0, 465, 508, 472, 501, 460, 493,
	424, 482, 520, 450, 490, 521, 0, 0, 0, 408,
	0, 0, 0, 0, 0, 0, 0, 0, 118, 0,
	487, 515, 446, 489, 491, 413, 484, 0, 417, 420,
	526, 511, 441, 442, 0, 0, 0, 0, 0, 0,
	0, 464, 473, 498, 458, 0, 0, 0, 0, 0,
	0, 0, 0, 439, 0, 481, 0, 0, 0, 421,
	418, 0, 0, 462, 0, 0, 0, 423, 0, 440,
	499, 0, 410, 136, 0, 0, 503, 510, 459, 257,
	514, 457, 456, 201, 0, 232, 139, 153, 114, 100,
	110, 0, 138, 179, 208, 212, 447, 411, 507, 437,
	445, 122, 443, 210, 189, 248, 0, 480, 191, 209,
	157, 238, 202, 247, 258, 259, 235, 255, 263, 225,
	103, 234, 728, 119, 220, 105, 244, 231, 168, 148,
	149, 104, 0, 206, 127, 134, 124, 181, 241, 242,
	123, 266, 111, 254, 107, 406, 253, 175, 237, 245,
	169, 162, 106, 243, 167, 161, 152, 131, 141, 199,
	159, 200, 142, 172, 171, 173, 0, 416, 0, 229,
	251, 267, 116, 432, 0, 236, 261, 262, 0, 0,
	117, 135, 130, 198, 407, 405, 144, 226, 151, 158,
	205, 265, 188, 211, 120, 250, 227, 428, 431, 426,
	427, 475, 476, 522, 523, 524, 500, 422, 0, 429,
	430, 0, 505, 512, 513, 479, 99, 108, 155, 264,
	203, 133, 252, 412, 425, 126, 435, 0, 0, 448,
	453, 454, 466, 468, 469, 470, 471, 478, 485, 486,
	488, 494, 495, 496, 497, 502, 509, 528, 101, 102,
	109, 115, 121, 125, 129, 132, 137, 140, 143, 145,
	146, 147, 150, 160, 163, 164, 165, 166, 176, 177,
	178, 180, 183, 184, 185, 186, 187, 190, 192, 193,
	194, 195, 196, 197, 204, 207, 213, 214, 215, 216,
	217, 218, 219, 221, 222, 223, 224, 230, 233, 239,
	240, 249, 256, 260, 516, 504, 0, 461, 519, 434,
	451, 527, 452, 455, 492, 419, 474, 182, 449, 0,
	438, 414, 444, 415, 436, 463, 128, 433, 506, 477,
	518, 154, 517, 467, 0, 525, 156, 483, 0, 228,
	170, 0, 0, 465, 508, 472, 501, 460, 493, 424,
	482, 520, 450, 490, 521, 0, 0, 0, 408, 0,
	0, 0, 0, 0, 0, 0, 0, 118, 0, 487,
	515, 446, 489, 491, 413, 484, 0, 417, 420, 526,
	511, 441, 442, 0, 0, 0, 0, 0, 0, 0,
	464, 473, 498, 458, 0, 0, 0, 0, 0, 0,
	0, 0, 439, 0, 481, 0, 0, 0, 421, 418,
	0, 0, 462, 0, 0, 0, 423, 0, 440, 499,
	0, 410, 136, 0, 0, 503, 510, 459, 257, 514,
	457, 456, 201, 0, 232, 139, 153, 114, 100, 110,
	0, 138, 179, 208, 212, 447, 411, 507, 437, 445,
	122, 443, 210, 189, 248, 0, 480, 191, 209, 157,
	238, 202, 247, 258, 259, 235, 255, 263, 225, 103,
	234, 397, 119, 220, 105, 244, 231, 168, 148, 149,
	104, 0, 206, 127, 134, 124, 181, 241, 242, 123,
	266, 111, 254, 107, 406, 253, 175, 237, 245, 169,
	162, 106, 243, 167, 161, 152, 131, 141, 199, 159,
	200, 142, 172, 171, 173, 0, 416, 0, 229, 251,
	267, 116, 432, 0, 236, 261, 262, 0, 0, 117,
	135, 130, 198, 407, 405, 400, 399, 151, 158, 205,
	265, 188, 211, 120, 250, 227, 428, 431, 426, 427,
	475, 476, 522, 523, 524, 500, 422, 0, 429, 430,
	0, 505, 512, 513, 479, 99, 108, 155, 264, 203,
	133, 252, 412, 425, 126, 435, 0, 0, 448, 453,
	454, 466, 468, 469, 470, 471, 478, 485, 486, 488,
	494, 495, 496, 497, 502, 509, 528, 101, 102, 109,
	115, 121, 125, 129, 132, 137, 140, 143, 145, 146,
	147, 150, 160, 163, 164, 165, 166, 176, 177, 178,
	180, 183, 184, 185, 186, 187, 190, 192, 193, 194,
	195, 196, 197, 204, 207, 213, 214, 215, 216, 217,
	218, 219, 221, 222, 223, 224, 230, 233, 239, 240,
	249, 256, 260, 182, 0, 0, 0, 0, 331, 0,
	0, 0, 128, 328, 0, 0, 0, 154, 0, 0,
	0, 372, 156, 0, 0, 228, 170, 0, 0, 0,
	0, 362, 363, 0, 0, 0, 0, 0, 0, 978,
	0, 61, 0, 0, 329, 350, 349, 352, 353, 354,
	355, 0, 0, 118, 351, 356, 357, 358, 979, 0,
	0, 326, 343, 0, 371, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 340, 341, 0, 0, 0, 0,
	385, 0, 342, 0, 0, 337, 338, 339, 344, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 0,
	0, 0, 0, 0, 257, 0, 0, 383, 201, 0,
	232, 139, 153, 114, 100, 110, 0, 138, 179, 208,
	212, 369, 0, 0, 0, 0, 122, 0, 210, 189,
	248, 0, 0, 191, 209, 157, 238, 202, 247, 258,
	259, 235, 255, 263, 225, 103, 234, 246, 119, 220,
	105, 244, 231, 168, 148, 149, 104, 0, 206, 127,
	134, 124, 181, 241, 242, 123, 266, 111, 254, 107,
	112, 253, 175, 237, 245, 169, 162, 106, 243, 167,
	161, 152, 131, 141, 199, 159, 200, 142, 172, 171,
	173, 0, 0, 0, 229, 251, 267, 116, 0, 0,
	236, 261, 262, 0, 0, 117, 135, 130, 198, 174,
	113, 144, 226, 151, 158, 205, 265, 188, 211, 120,
	250, 227, 373, 384, 379, 380, 377, 378, 376, 375,
	374, 386, 364, 365, 366, 367, 370, 0, 381, 382,
	368, 99, 108, 155, 264, 203, 133, 252, 0, 0,
	126, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 102, 109, 115, 121, 125, 129,
	132, 137, 140, 143, 145, 146, 147, 150, 160, 163,
	164, 165, 166, 176, 177, 178, 180, 183, 184, 185,
	186, 187, 190, 192, 193, 194, 195, 196, 197, 204,
	207, 213, 214, 215, 216, 217, 218, 219, 221, 222,
	223, 224, 230, 233, 239, 240, 249, 256, 260, 182,
	0, 0, 0, 0, 331, 0, 0, 0, 128, 328,
	0, 0, 0, 154, 0, 0, 0, 372, 156, 0,
	0, 228, 170, 0, 0, 0, 0, 362, 363, 0,
	0, 0, 0, 0, 0, 0, 0, 61, 0, 593,
	329, 350, 349, 352, 353, 354, 355, 0, 0, 118,
	351, 356, 357, 358, 0, 0, 0, 326, 343, 0,
	371, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	340, 341, 0, 0, 0, 0, 385, 0, 342, 0,
	0, 337, 338, 339, 344, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 0, 0, 0, 0, 0,
	257, 0, 0, 383, 201, 0, 232, 139, 153, 114,
	100, 110, 0, 138, 179, 208, 212, 369, 0, 0,
	0, 0, 122, 0, 210, 189, 248, 0, 0, 191,
	209, 157, 238, 202, 247, 258, 259, 235, 255, 263,
	225, 103, 234, 246, 119, 220, 105, 244, 231, 168,
	148, 149, 104, 0, 206, 127, 134, 124, 181, 241,
	242, 123, 266, 111, 254, 107, 112, 253, 175, 237,
	245, 169, 162, 106, 243, 167, 161, 152, 131, 141,
	199, 159, 200, 142, 172, 171, 173, 0, 0, 0,
	229, 251, 267, 116, 0, 0, 236, 261, 262, 0,
	0, 117, 135, 130, 198, 174, 113, 144, 226, 151,
	158, 205, 265, 188, 211, 120, 250, 227, 373, 384,
	379, 380, 377, 378, 376, 375, 374, 386, 364, 365,
	366, 367, 370, 0, 381, 382, 368, 99, 108, 155,
	264, 203, 133, 252, 0, 0, 126, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	102, 109, 115, 121, 125, 129, 132, 137, 140, 143,
	145, 146, 147, 150, 160, 163, 164, 165, 166, 176,
	177, 178, 180, 183, 184, 185, 186, 187, 190, 192,
	193, 194, 195, 196, 197, 204, 207, 213, 214, 215,
	216, 217, 218, 219, 221, 222, 223, 224, 230, 233,
	239, 240, 249, 256, 260, 182, 0, 0, 0, 0,
	331, 0, 0, 0, 128, 328, 0, 0, 0, 154,
	0, 0, 0, 372, 156, 0, 0, 228, 170, 0,
	0, 0, 0, 362, 363, 0, 0, 0, 0, 0,
	0, 0, 0, 61, 0, 0, 329, 350, 349, 352,
	353, 354, 355, 0, 0, 118, 351, 356, 357, 358,
	0, 0, 0, 326, 343, 0, 371, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 340, 341, 322, 0,
	0, 0, 385, 0, 342, 0, 0, 337, 338, 339,
	344, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	136, 0, 0, 0, 0, 0, 257, 0, 0, 383,
	201, 0, 232, 139, 153, 114, 100, 110, 0, 138,
	179, 208, 212, 369, 0, 0, 0, 0, 122, 0,
	210, 189, 248, 0, 0, 191, 209, 157, 238, 202,
	247, 258, 259, 235, 255, 263, 225, 103, 234, 246,
	119, 220, 105, 244, 231, 168, 148, 149, 104, 0,
	206, 127, 134, 124, 181, 241, 242, 123, 266, 111,
	254, 107, 112, 253, 175, 237, 245, 169, 162, 106,
	243, 167, 161, 152, 131, 141, 199, 159, 200, 142,
	172, 171, 173, 0, 0, 0, 229, 251, 267, 116,
	0, 0, 236, 261, 262, 0, 0, 117, 135, 130,
	198, 174, 113, 144, 226, 151, 158, 205, 265, 188,
	211, 120, 250, 227, 373, 384, 379, 380, 377, 378,
	376, 375, 374, 386, 364, 365, 366, 367, 370, 0,
	381, 382, 368, 99, 108, 155, 264, 203, 133, 252,
	0, 0, 126, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 102, 109, 115, 121,
	125, 129, 132, 137, 140, 143, 145, 146, 147, 150,
	160, 163, 164, 165, 166, 176, 177, 178, 180, 183,
	184, 185, 186, 187, 190, 192, 193, 194, 195, 196,
	197, 204, 207, 213, 214, 215, 216, 217, 218, 219,
	221, 222, 223, 224, 230, 233, 239, 240, 249, 256,
	260, 182, 0, 0, 0, 0, 331, 0, 0, 0,
	128, 328, 0, 0, 0, 154, 0, 0, 0, 372,
	156, 0, 0, 228, 170, 0, 0, 0, 0, 362,
	363, 0, 0, 0, 0, 0, 0, 0, 0, 61,
	0, 0, 329, 350, 914, 352, 353, 354, 355, 0,
	0, 118, 351, 356, 357, 358, 0, 0, 0, 326,
	343, 0, 371, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 340, 341, 322, 0, 0, 0, 385, 0,
	342, 0, 0, 337, 338, 339, 344, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 136, 0, 0, 0,
	0, 0, 257, 0, 0, 383, 201, 0, 232, 139,
	153, 114, 100, 110, 0, 138, 179, 208, 212, 369,
	0, 0, 0, 0, 122, 0, 210, 189, 248, 0,
	0, 191, 209, 157, 238, 202, 247, 258, 259, 235,
	255, 263, 225, 103, 234, 246, 119, 220, 105, 244,
	231, 168, 148, 149, 104, 0, 206, 127, 134, 124,
	181, 241, 242, 123, 266, 111, 254, 107, 112, 253,
	175, 237, 245, 169, 162, 106, 243, 167, 161, 152,
	131, 141, 199, 159, 200, 142, 172, 171, 173, 0,
	0, 0, 229, 251, 267, 116, 0, 0, 236, 261,
	262, 0, 0, 117, 135, 130, 198, 174, 113, 144,
	226, 151, 158, 205, 265, 188, 211, 120, 250, 227,
	373, 384, 379, 380, 377, 378, 376, 375, 374, 386,
	364, 365, 366, 367, 370, 0, 381, 382, 368, 99,
	108, 155, 264, 203, 133, 252, 0, 0, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 102, 109, 115, 121, 125, 129, 132, 137,
	140, 143, 145, 146, 147, 150, 160, 163, 164, 165,
	166, 176, 177, 178, 180, 183, 184, 185, 186, 187,
	190, 192, 193, 194, 195, 196, 197, 204, 207, 213,
	214, 215, 216, 217, 218, 219, 221, 222, 223, 224,
	230, 233, 239, 240, 249, 256, 260, 182, 0, 0,
	0, 0, 331, 0, 0, 0, 128, 328, 0, 0,
	0, 154, 0, 0, 0, 372, 156, 0, 0, 228,
	170, 0, 0, 0, 0, 362, 363, 0, 0, 0,
	0, 0, 0, 0, 0, 61, 0, 0, 329, 350,
	911, 352, 353, 354, 355, 0, 0, 118, 351, 356,
	357, 358, 0, 0, 0, 326, 343, 0, 371, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 340, 341,
	322, 0, 0, 0, 385, 0, 342, 0, 0, 337,
	338, 339, 344, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 136, 0, 0, 0, 0, 0, 257, 0,
	0, 383, 201, 0, 232, 139, 153, 114, 100, 110,
	0, 138, 179, 208, 212, 369, 0, 0, 0, 0,
	122, 0, 210, 189, 248, 0, 0, 191, 209, 157,
	238, 202, 247, 258, 259, 235, 255, 263, 225, 103,
	234, 246, 119, 220, 105, 244, 231, 168, 148, 149,
	104, 0, 206, 127, 134, 124, 181, 241, 242, 123,
	266, 111, 254, 107, 112, 253, 175, 237, 245, 169,
	162, 106, 243, 167, 161, 152, 131, 141, 199, 159,
	200, 142, 172, 171, 173, 0, 0, 0, 229, 251,
	267, 116, 0, 0, 236, 261, 262, 0, 0, 117,
	135, 130, 198, 174, 113, 144, 226, 151, 158, 205,
	265, 188, 211, 120, 250, 227, 373, 384, 379, 380,
	377, 378, 376, 375, 374, 386, 364, 365, 366, 367,
	370, 0, 381, 382, 368, 99, 108, 155, 264, 203,
	133, 252, 0, 0, 126, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 102, 109,
	115, 121, 125, 129, 132, 137, 140, 143, 145, 146,
	147, 150, 160, 163, 164, 165, 166, 176, 177, 178,
	180, 183, 184, 185, 186, 187, 190, 192, 193, 194,
	195, 196, 197, 204, 207, 213, 214, 215, 216, 217,
	218, 219, 221, 222, 223, 224, 230, 233, 239, 240,
	249, 256, 260, 26, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 182, 0, 0, 0, 0,
	331, 0, 0, 0, 128, 328, 0, 0, 0, 154,
	0, 0, 0, 372, 156, 0, 0, 228, 170, 0,
	0, 0, 0, 362, 363, 0, 0, 0, 0, 0,
	0, 0, 0, 61, 0, 0, 329, 350, 349, 352,
	353, 354, 355, 0, 0, 118, 351, 356, 357, 358,
	0, 0, 0, 326, 343, 0, 371, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 340, 341, 0, 0,
	0, 0, 385, 0, 342, 0, 0, 337, 338, 339,
	344, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	136, 0, 0, 0, 0, 0, 257, 0, 0, 383,
	201, 0, 232, 139, 153, 114, 100, 110, 0, 138,
	179, 208, 212, 369, 0, 0, 0, 0, 122, 0,
	210, 189, 248, 0, 0, 191, 209, 157, 238, 202,
	247, 258, 259, 235, 255, 263, 225, 103, 234, 246,
	119, 220, 105, 244, 231, 168, 148, 149, 104, 0,
	206, 127, 134, 124, 181, 241, 242, 123, 266, 111,
	254, 107, 112, 253, 175, 237, 245, 169, 162, 106,
	243, 167, 161, 152, 131, 141, 199, 159, 200, 142,
	172, 171, 173, 0, 0, 0, 229, 251, 267, 116,
	0, 0, 236, 261, 262, 0, 0, 117, 135, 130,
	198, 174, 113, 144, 226, 151, 158, 205, 265, 188,
	211, 120, 250, 227, 373, 384, 379, 380, 377, 378,
	376, 375, 374, 386, 364, 365, 366, 367, 370, 0,
	381, 382, 368, 99, 108, 155, 264, 203, 133, 252,
	0, 0, 126, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 102, 109, 115, 121,
	125, 129, 132, 137, 140, 143, 145, 146, 147, 150,
	160, 163, 164, 165, 166, 176, 177, 178, 180, 183,
	184, 185, 186, 187, 190, 192, 193, 194, 195, 196,
	197, 204, 207, 213, 214, 215, 216, 217, 218, 219,
	221, 222, 223, 224, 230, 233, 239, 240, 249, 256,
	260, 182, 0, 0, 0, 0, 331, 0, 0, 0,
	128, 328, 0, 0, 0, 154, 0, 0, 0, 372,
	156, 0, 0, 228, 170, 0, 0, 0, 0, 362,
	363, 0, 0, 0, 0, 0, 0, 0, 0, 61,
	0, 0, 329, 350, 349, 352, 353, 354, 355, 0,
	0, 118, 351, 356, 357, 358, 0, 0, 0, 326,
	343, 0, 371, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 340, 341, 0, 0, 0, 0, 385, 0,
	342, 0, 0, 337, 338, 339, 344, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 136, 0, 0, 0,
	0, 0, 257, 0, 0, 383, 201, 0, 232, 139,
	153, 114, 100, 110, 0, 138, 179, 208, 212, 369,
	0, 0, 0, 0, 122, 0, 210, 189, 248, 0,
	0, 191, 209, 157, 238, 202, 247, 258, 259, 235,
	255, 263, 225, 103, 234, 246, 119, 220, 105, 244,
	231, 168, 148, 149, 104, 0, 206, 127, 134, 124,
	181, 241, 242, 123, 266, 111, 254, 107, 112, 253,
	175, 237, 245, 169, 162, 106, 243, 167, 161, 152,
	131, 141, 199, 159, 200, 142, 172, 171, 173, 0,
	0, 0, 229, 251, 267, 116, 0, 0, 236, 261,
	262, 0, 0, 117, 135, 130, 198, 174, 113, 144,
	226, 151, 158, 205, 265, 188, 211, 120, 250, 227,
	373, 384, 379, 380, 377, 378, 376, 375, 374, 386,
	364, 365, 366, 367, 370, 0, 381, 382, 368, 99,
	108, 155, 264, 203, 133, 252, 0, 0, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 102, 109, 115, 121, 125, 129, 132, 137,
	140, 143, 145, 146, 147, 150, 160, 163, 164, 165,
	166, 176, 177, 178, 180, 183, 184, 185, 186, 187,
	190, 192, 193, 194, 195, 196, 197, 204, 207, 213,
	214, 215, 216, 217, 218, 219, 221, 222, 223, 224,
	230, 233, 239, 240, 249, 256, 260, 182, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 0, 0, 0,
	0, 154, 0, 0, 0, 372, 156, 0, 0, 228,
	170, 0, 0, 0, 0, 362, 363, 0, 0, 0,
	0, 0, 0, 0, 0, 61, 0, 0, 329, 350,
	349, 352, 353, 354, 355, 0, 0, 118, 351, 356,
	357, 358, 0, 0, 0, 0, 343, 0, 371, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 340, 341,
	0, 0, 0, 0, 385, 0, 342, 0, 0, 337,
	338, 339, 344, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 136, 0, 0, 0, 0, 0, 257, 0,
	0, 383, 201, 0, 232, 139, 153, 114, 100, 110,
	0, 138, 179, 208, 212, 369, 0, 0, 0, 0,
	122, 0, 210, 189, 248, 0, 1584, 191, 209, 157,
	238, 202, 247, 258, 259, 235, 255, 263, 225, 103,
	234, 246, 119, 220, 105, 244, 231, 168, 148, 149,
	104, 0, 206, 127, 134, 124, 181, 241, 242, 123,
	266, 111, 254, 107, 112, 253, 175, 237, 245, 169,
	162, 106, 243, 167, 161, 152, 131, 141, 199, 159,
	200, 142, 172, 171, 173, 0, 0, 0, 229, 251,
	267, 116, 0, 0, 236, 261, 262, 0, 0, 117,
	135, 130, 198, 174, 113, 144, 226, 151, 158, 205,
	265, 188, 211, 120, 250, 227, 373, 384, 379, 380,
	377, 378, 376, 375, 374, 386, 364, 365, 366, 367,
	370, 0, 381, 382, 368, 99, 108, 155, 264, 203,
	133, 252, 0, 0, 126, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 102, 109,
	115, 121, 125, 129, 132, 137, 140, 143, 145, 146,
	147, 150, 160, 163, 164, 165, 166, 176, 177, 178,
	180, 183, 184, 185, 186, 187, 190, 192, 193, 194,
	195, 196, 197, 204, 207, 213, 214, 215, 216, 217,
	218, 219, 221, 222, 223, 224, 230, 233, 239, 240,
	249, 256, 260, 182, 0, 0, 0, 0, 0, 0,
	0, 0, 128, 0, 0, 0, 0, 154, 0, 0,
	0, 372, 156, 0, 0, 228, 170, 0, 0, 0,
	0, 362, 363, 0, 0, 0, 0, 0, 0, 0,
	0, 61, 0, 593, 329, 350, 349, 352, 353, 354,
	355, 0, 0, 118, 351, 356, 357, 358, 0, 0,
	0, 0, 343, 0, 371, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 340, 341, 0, 0, 0, 0,
	385, 0, 342, 0, 0, 337, 338, 339, 344, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 0,
	0, 0, 0, 0, 257, 0, 0, 383, 201, 0,
	232, 139, 153, 114, 100, 110, 0, 138, 179, 208,
	212, 369, 0, 0, 0, 0, 122, 0, 210, 189,
	248, 0, 0, 191, 209, 157, 238, 202, 247, 258,
	259, 235, 255, 263, 225, 103, 234, 246, 119, 220,
	105, 244, 231, 168, 148, 149, 104, 0, 206, 127,
	134, 124, 181, 241, 242, 123, 266, 111, 254, 107,
	112, 253, 175, 237, 245, 169, 162, 106, 243, 167,
	161, 152, 131, 141, 199, 159, 200, 142, 172, 171,
	173, 0, 0, 0, 229, 251, 267, 116, 0, 0,
	236, 261, 262, 0, 0, 117, 135, 130, 198, 174,
	113, 144, 226, 151, 158, 205, 265, 188, 211, 120,
	250, 227, 373, 384, 379, 380, 377, 378, 376, 375,
	374, 386, 364, 365, 366, 367, 370, 0, 381, 382,
	368, 99, 108, 155, 264, 203, 133, 252, 0, 0,
	126, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 102, 109, 115, 121, 125, 129,
	132, 137, 140, 143, 145, 146, 147, 150, 160, 163,
	164, 165, 166, 176, 177, 178, 180, 183, 184, 185,
	186, 187, 190, 192, 193, 194, 195, 196, 197, 204,
	207, 213, 214, 215, 216, 217, 218, 219, 221, 222,
	223, 224, 230, 233, 239, 240, 249, 256, 260, 182,
	0, 0, 0, 0, 0, 0, 0, 0, 128, 0,
	0, 0, 0, 154, 0, 0, 0, 372, 156, 0,
	0, 228, 170, 0, 0, 0, 0, 362, 363, 0,
	0, 0, 0, 0, 0, 0, 0, 61, 0, 0,
	329, 350, 349, 352, 353, 354, 355, 0, 0, 118,
	351, 356, 357, 358, 0, 0, 0, 0, 343, 0,
	371, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	340, 341, 0, 0, 0, 0, 385, 0, 342, 0,
	0, 337, 338, 339, 344, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 0, 0, 0, 0, 0,
	257, 0, 0, 383, 201, 0, 232, 139, 153, 114,
	100, 110, 0, 138, 179, 208, 212, 369, 0, 0,
	0, 0, 122, 0, 210, 189, 248, 0, 0, 191,
	209, 157, 238, 202, 247, 258, 259, 235, 255, 263,
	225, 103, 234, 246, 119, 220, 105, 244, 231, 168,
	148, 149, 104, 0, 206, 127, 134, 124, 181, 241,
	242, 123, 266, 111, 254, 107, 112, 253, 175, 237,
	245, 169, 162, 106, 243, 167, 161, 152, 131, 141,
	199, 159, 200, 142, 172, 171, 173, 0, 0, 0,
	229, 251, 267, 116, 0, 0, 236, 261, 262, 0,
	0, 117, 135, 130, 198, 174, 113, 144, 226, 151,
	158, 205, 265, 188, 211, 120, 250, 227, 373, 384,
	379, 380, 377, 378, 376, 375, 374, 386, 364, 365,
	366, 367, 370, 0, 381, 382, 368, 99, 108, 155,
	264, 203, 133, 252, 0, 0, 126, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	102, 109, 115, 121, 125, 129, 132, 137, 140, 143,
	145, 146, 147, 150, 160, 163, 164, 165, 166, 176,
	177, 178, 180, 183, 184, 185, 186, 187, 190, 192,
	193, 194, 195, 196, 197, 204, 207, 213, 214, 215,
	216, 217, 218, 219, 221, 222, 223, 224, 230, 233,
	239, 240, 249, 256, 260, 182, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 0, 0, 0, 0, 154,
	0, 0, 0, 0, 156, 0, 0, 228, 170, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 408, 0, 0, 0,
	0, 0, 0, 0, 0, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 634, 633, 643, 644, 636, 637, 638, 639,
	640, 641, 642, 635, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	136, 0, 0, 0, 0, 0, 257, 0, 0, 0,
	201, 0, 232, 139, 153, 114, 100, 110, 0, 138,
	179, 208, 212, 0, 0, 0, 0, 0, 122, 0,
	210, 189, 248, 0, 0, 191, 209, 157, 238, 202,
	247, 258, 259, 235, 255, 263, 225, 103, 234, 246,
	119, 220, 105, 244, 231, 168, 148, 149, 104, 0,
	206, 127, 134, 124, 181, 241, 242, 123, 266, 111,
	254, 107, 112, 253, 175, 237, 245, 169, 162, 106,
	243, 167, 161, 152, 131, 141, 199, 159, 200, 142,
	172, 171, 173, 0, 0, 0, 229, 251, 267, 116,
	0, 0, 236, 261, 262, 0, 0, 117, 135, 130,
	198, 174, 113, 144, 226, 151, 158, 205, 265, 188,
	211, 120, 250, 227, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 108, 155, 264, 203, 133, 252,
	0, 0, 126, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 102, 109, 115, 121,
	125, 129, 132, 137, 140, 143, 145, 146, 147, 150,
	160, 163, 164, 165, 166, 176, 177, 178, 180, 183,
	184, 185, 186, 187, 190, 192, 193, 194, 195, 196,
	197, 204, 207, 213, 214, 215, 216, 217, 218, 219,
	221, 222, 223, 224, 230, 233, 239, 240, 249, 256,
	260, 182, 0, 0, 0, 957, 0, 0, 0, 0,
	128, 0, 0, 0, 0, 154, 0, 0, 0, 0,
	156, 0, 0, 228, 170, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 959, 961, 0, 0, 0,
	0, 0, 97, 0, 963, 0, 0, 0, 0, 0,
	0, 118, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 136, 0, 0, 0,
	0, 0, 257, 0, 960, 0, 201, 0, 232, 139,
	153, 114, 100, 110, 0, 138, 179, 208, 212, 0,
	0, 0, 0, 0, 122, 0, 210, 189, 248, 0,
	0, 191, 209, 157, 238, 202, 247, 258, 259, 235,
	255, 263, 225, 103, 234, 246, 119, 220, 105, 244,
	231, 168, 148, 149, 104, 0, 206, 127, 134, 124,
	181, 241, 242, 123, 266, 111, 254, 107, 112, 253,
	175, 237, 245, 169, 162, 106, 243, 167, 161, 152,
	131, 141, 199, 159, 200, 142, 172, 171, 173, 0,
	0, 0, 229, 251, 267, 116, 0, 0, 236, 261,
	262, 0, 0, 117, 135, 130, 198, 174, 113, 144,
	226, 151, 158, 205, 265, 188, 211, 120, 250, 227,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	108, 155, 264, 203, 133, 252, 0, 0, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 102, 109, 115, 121, 125, 129, 132, 137,
	140, 143, 145, 146, 147, 150, 160, 163, 164, 165,
	166, 176, 177, 178, 180, 183, 184, 185, 186, 187,
	190, 192, 193, 194, 195, 196, 197, 204, 207, 213,
	214, 215, 216, 217, 218, 219, 221, 222, 223, 224,
	230, 233, 239, 240, 249, 256, 260, 182, 0, 0,
	0, 957, 0, 0, 0, 0, 128, 0, 0, 0,
	0, 154, 0, 0, 0, 0, 156, 0, 0, 228,
	170, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 959, 961, 0, 0, 0, 0, 0, 97, 0,
	963, 0, 0, 0, 0, 0, 0, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 136, 0, 0, 0, 0, 0, 257, 0,
	960, 0, 201, 0, 232, 139, 153, 114, 100, 110,
	0, 138, 179, 208, 212, 0, 0, 0, 0, 0,
	122, 0, 210, 189, 248, 0, 0, 955, 209, 157,
	238, 202, 247, 258, 259, 235, 255, 263, 225, 103,
	234, 246, 119, 220, 105, 244, 231, 168, 148, 149,
	104, 0, 206, 127, 134, 124, 181, 241, 242, 123,
	266, 111, 254, 107, 112, 253, 175, 237, 245, 169,
	162, 106, 243, 167, 161, 152, 131, 141, 199, 159,
	200, 142, 172, 171, 173, 0, 0, 0, 229, 251,
	267, 116, 0, 0, 236, 261, 262, 0, 0, 117,
	135, 130, 198, 174, 113, 144, 226, 151, 158, 205,
	265, 188, 211, 120, 250, 227, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 108, 155, 264, 203,
	133, 252, 0, 0, 126, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 102, 109,
	115, 121, 125, 129, 132, 137, 140, 143, 145, 146,
	147, 150, 160, 163, 164, 165, 166, 176, 177, 178,
	180, 183, 184, 185, 186, 187, 190, 192, 193, 194,
	195, 196, 197, 204, 207, 213, 214, 215, 216, 217,
	218, 219, 221, 222, 223, 224, 230, 233, 239, 240,
	249, 256, 260, 182, 0, 0, 0, 622, 0, 0,
	0, 0, 128, 0, 0, 0, 0, 154, 0, 0,
	0, 0, 156, 0, 0, 228, 170, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 408, 0, 624, 0, 0, 0,
	0, 0, 0, 118, 0, 0, 0, 0, 0, 619,
	618, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 0,
	0, 0, 0, 0, 257, 0, 0, 0, 201, 0,
	232, 139, 153, 114, 100, 110, 0, 138, 179, 208,
	212, 0, 0, 0, 0, 0, 122, 0, 210, 189,
	248, 0, 0, 191, 209, 157, 238, 202, 247, 258,
	259, 235, 255, 263, 225, 103, 234, 246, 119, 220,
	105, 244, 231, 168, 148, 149, 104, 0, 206, 127,
	134, 124, 181, 241, 242, 123, 266, 111, 254, 107,
	112, 253, 175, 237, 245, 169, 162, 106, 243, 167,
	161, 152, 131, 141, 199, 159, 200, 142, 172, 171,
	173, 0, 0, 0, 229, 251, 267, 116, 0, 0,
	236, 261, 262, 0, 0, 117, 135, 130, 198, 174,
	113, 144, 226, 151, 158, 205, 265, 188, 211, 120,
	250, 227, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 108, 155, 264, 203, 133, 252, 0, 0,
	126, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 102, 109, 115, 121, 125, 129,
	132, 137, 140, 143, 145, 146, 147, 150, 160, 163,
	164, 165, 166, 176, 177, 178, 180, 183, 184, 185,
	186, 187, 190, 192, 193, 194, 195, 196, 197, 204,
	207, 213, 214, 215, 216, 217, 218, 219, 221, 222,
	223, 224, 230, 233, 239, 240, 249, 256, 260, 26,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 182, 0, 0, 0, 0, 0, 0, 0, 0,
	128, 0, 0, 0, 0, 154, 0, 0, 0, 0,
	156, 0, 0, 228, 170, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 61,
	0, 0, 408, 0, 0, 0, 0, 0, 0, 0,
	0, 118, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 136, 0, 0, 0,
	0, 0, 257, 0, 0, 0, 201, 0, 232, 139,
	153, 114, 100, 110, 0, 138, 179, 208, 212, 0,
	0, 0, 0, 0, 122, 0, 210, 189, 248, 0,
	0, 191, 209, 157, 238, 202, 247, 258, 259, 235,
	255, 263, 225, 103, 234, 246, 119, 220, 105, 244,
	231, 168, 148, 149, 104, 0, 206, 127, 134, 124,
	181, 241, 242, 123, 266, 111, 254, 107, 112, 253,
	175, 237, 245, 169, 162, 106, 243, 167, 161, 152,
	131, 141, 199, 159, 200, 142, 172, 171, 173, 0,
	0, 0, 229, 251, 267, 116, 0, 0, 236, 261,
	262, 0, 0, 117, 135, 130, 198, 174, 113, 144,
	226, 151, 158, 205, 265, 188, 211, 120, 250, 227,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	108, 155, 264, 203, 133, 252, 0, 0, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 102, 109, 115, 121, 125, 129, 132, 137,
	140, 143, 145, 146, 147, 150, 160, 163, 164, 165,
	166, 176, 177, 178, 180, 183, 184, 185, 186, 187,
	190, 192, 193, 194, 195, 196, 197, 204, 207, 213,
	214, 215, 216, 217, 218, 219, 221, 222, 223, 224,
	230, 233, 239, 240, 249, 256, 260, 182, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 0, 0, 0,
	0, 154, 0, 0, 0, 0, 156, 0, 0, 228,
	170, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 0,
	963, 0, 0, 0, 0, 0, 0, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 136, 0, 0, 0, 0, 0, 257, 0,
	0, 0, 201, 0, 232, 139, 153, 114, 100, 110,
	0, 138, 179, 208, 212, 0, 0, 0, 0, 0,
	122, 0, 210, 189, 248, 0, 0, 191, 209, 157,
	238, 202, 247, 258, 259, 235, 255, 263, 225, 103,
	234, 246, 119, 220, 105, 244, 231, 168, 148, 149,
	104, 0, 206, 127, 134, 124, 181, 241, 242, 123,
	266, 111, 254, 107, 112, 253, 175, 237, 245, 169,
	162, 106, 243, 167, 161, 152, 131, 141, 199, 159,
	200, 142, 172, 171, 173, 0, 0, 0, 229, 251,
	267, 116, 0, 0, 236, 261, 262, 0, 0, 117,
	135, 130, 198, 174, 113, 144, 226, 151, 158, 205,
	265, 188, 211, 120, 250, 227, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 108, 155, 264, 203,
	133, 252, 0, 0, 126, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1156,
	0, 0, 0, 0, 0, 0, 0, 101, 102, 109,
	115, 121, 125, 129, 132, 137, 140, 143, 145, 146,
	147, 150, 160, 163, 164, 165, 166, 176, 177, 178,
	180, 183, 184, 185, 186, 187, 190, 192, 193, 194,
	195, 196, 197, 204, 207, 213, 214, 215, 216, 217,
	218, 219, 221, 222, 223, 224, 230, 233, 239, 240,
	249, 256, 260, 26, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 182, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 0, 0, 0, 0, 154,
	0, 0, 0, 0, 156, 0, 0, 228, 170, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 61, 0, 0, 97, 0, 0, 0,
	0, 0, 0, 0, 0, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	136, 0, 0, 0, 0, 0, 257, 0, 0, 0,
	201, 0, 232, 139, 153, 114, 100, 110, 0, 138,
	179, 208, 212, 0, 0, 0, 0, 0, 122, 0,
	210, 189, 248, 0, 0, 191, 209, 157, 238, 202,
	247, 258, 259, 235, 255, 263, 225, 103, 234, 246,
	119, 220, 105, 244, 231, 168, 148, 149, 104, 0,
	206, 127, 134, 124, 181, 241, 242, 123, 266, 111,
	254, 107, 112, 253, 175, 237, 245, 169, 162, 106,
	243, 167, 161, 152, 131, 141, 199, 159, 200, 142,
	172, 171, 173, 0, 0, 0, 229, 251, 267, 116,
	0, 0, 236, 261, 262, 0, 0, 117, 135, 130,
	198, 174, 113, 144, 226, 151, 158, 205, 265, 188,
	211, 120, 250, 227, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 108, 155, 264, 203, 133, 252,
	0, 0, 126, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 102, 109, 115, 121,
	125, 129, 132, 137, 140, 143, 145, 146, 147, 150,
	160, 163, 164, 165, 166, 176, 177, 178, 180, 183,
	184, 185, 186, 187, 190, 192, 193, 194, 195, 196,
	197, 204, 207, 213, 214, 215, 216, 217, 218, 219,
	221, 222, 223, 224, 230, 233, 239, 240, 249, 256,
	260, 182, 0, 0, 0, 0, 0, 0, 0, 0,
	128, 0, 0, 0, 0, 154, 0, 0, 0, 0,
	156, 0, 0, 228, 170, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 408, 0, 0, 852, 0, 0, 853, 0,
	0, 118, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 136, 0, 0, 0,
	0, 0, 257, 0, 0, 0, 201, 0, 232, 139,
	153, 114, 100, 110, 0, 138, 179, 208, 212, 0,
	0, 0, 0, 0, 122, 0, 210, 189, 248, 0,
	0, 191, 209, 157, 238, 202, 247, 258, 259, 235,
	255, 263, 225, 103, 234, 246, 119, 220, 105, 244,
	231, 168, 148, 149, 104, 0, 206, 127, 134, 124,
	181, 241, 242, 123, 266, 111, 254, 107, 112, 253,
	175, 237, 245, 169, 162, 106, 243, 167, 161, 152,
	131, 141, 199, 159, 200, 142, 172, 171, 173, 0,
	0, 0, 229, 251, 267, 116, 0, 0, 236, 261,
	262, 0, 0, 117, 135, 130, 198, 174, 113, 144,
	226, 151, 158, 205, 265, 188, 211, 120, 250, 227,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	108, 155, 264, 203, 133, 252, 0, 0, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 102, 109, 115, 121, 125, 129, 132, 137,
	140, 143, 145, 146, 147, 150, 160, 163, 164, 165,
	166, 176, 177, 178, 180, 183, 184, 185, 186, 187,
	190, 192, 193, 194, 195, 196, 197, 204, 207, 213,
	214, 215, 216, 217, 218, 219, 221, 222, 223, 224,
	230, 233, 239, 240, 249, 256, 260, 182, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 737, 0, 0,
	0, 154, 0, 0, 0, 0, 156, 0, 0, 228,
	170, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 408, 0,
	736, 0, 0, 0, 0, 0, 0, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 136, 0, 0, 0, 0, 0, 257, 0,
	0, 0, 201, 0, 232, 139, 153, 114, 100, 110,
	0, 138, 179, 208, 212, 0, 0, 0, 0, 0,
	122, 0, 210, 189, 248, 0, 0, 191, 209, 157,
	238, 202, 247, 258, 259, 235, 255, 263, 225, 103,
	234, 246, 119, 220, 105, 244, 231, 168, 148, 149,
	104, 0, 206, 127, 134, 124, 181, 241, 242, 123,
	266, 111, 254, 107, 112, 253, 175, 237, 245, 169,
	162, 106, 243, 167, 161, 152, 131, 141, 199, 159,
	200, 142, 172, 171, 173, 0, 0, 0, 229, 251,
	267, 116, 0, 0, 236, 261, 262, 0, 0, 117,
	135, 130, 198, 174, 113, 144, 226, 151, 158, 205,
	265, 188, 211, 120, 250, 227, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 108, 155, 264, 203,
	133, 252, 0, 0, 126, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 102, 109,
	115, 121, 125, 129, 132, 137, 140, 143, 145, 146,
	147, 150, 160, 163, 164, 165, 166, 176, 177, 178,
	180, 183, 184, 185, 186, 187, 190, 192, 193, 194,
	195, 196, 197, 204, 207, 213, 214, 215, 216, 217,
	218, 219, 221, 222, 223, 224, 230, 233, 239, 240,
	249, 256, 260, 182, 0, 0, 0, 0, 0, 0,
	0, 0, 128, 0, 0, 0, 0, 154, 0, 0,
	0, 0, 156, 0, 0, 228, 170, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 0, 963, 0, 0, 0,
	0, 0, 0, 118, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 0,
	0, 0, 0, 0, 257, 0, 0, 0, 201, 0,
	232, 139, 153, 114, 100, 110, 0, 138, 179, 208,
	212, 0, 0, 0, 0, 0, 122, 0, 210, 189,
	248, 0, 0, 191, 209, 157, 238, 202, 247, 258,
	259, 235, 255, 263, 225, 103, 234, 246, 119, 220,
	105, 244, 231, 168, 148, 149, 104, 0, 206, 127,
	134, 124, 181, 241, 242, 123, 266, 111, 254, 107,
	112, 253, 175, 237, 245, 169, 162, 106, 243, 167,
	161, 152, 131, 141, 199, 159, 200, 142, 172, 171,
	173, 0, 0, 0, 229, 251, 267, 116, 0, 0,
	236, 261, 262, 0, 0, 117, 135, 130, 198, 174,
	113, 144, 226, 151, 158, 205, 265, 188, 211, 120,
	250, 227, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 108, 155, 264, 203, 133, 252, 0, 0,
	126, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 102, 109, 115, 121, 125, 129,
	132, 137, 140, 143, 145, 146, 147, 150, 160, 163,
	164, 165, 166, 176, 177, 178, 180, 183, 184, 185,
	186, 187, 190, 192, 193, 194, 195, 196, 197, 204,
	207, 213, 214, 215, 216, 217, 218, 219, 221, 222,
	223, 224, 230, 233, 239, 240, 249, 256, 260, 182,
	0, 0, 0, 0, 0, 0, 0, 0, 128, 0,
	0, 0, 0, 154, 0, 0, 0, 0, 156, 0,
	0, 228, 170, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 61, 0, 0,
	97, 0, 0, 0, 0, 0, 0, 0, 0, 118,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 0, 0, 0, 0, 0,
	257, 0, 0, 0, 201, 0, 232, 139, 153, 114,
	100, 110, 0, 138, 179, 208, 212, 0, 0, 0,
	0, 0, 122, 0, 210, 189, 248, 0, 0, 191,
	209, 157, 238, 202, 247, 258, 259, 235, 255, 263,
	225, 103, 234, 246, 119, 220, 105, 244, 231, 168,
	148, 149, 104, 0, 206, 127, 134, 124, 181, 241,
	242, 123, 266, 111, 254, 107, 112, 253, 175, 237,
	245, 169, 162, 106, 243, 167, 161, 152, 131, 141,
	199, 159, 200, 142, 172, 171, 173, 0, 0, 0,
	229, 251, 267, 116, 0, 0, 236, 261, 262, 0,
	0, 117, 135, 130, 198, 174, 113, 144, 226, 151,
	158, 205, 265, 188, 211, 120, 250, 227, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 108, 155,
	264, 203, 133, 252, 0, 0, 126, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	102, 109, 115, 121, 125, 129, 132, 137, 140, 143,
	145, 146, 147, 150, 160, 163, 164, 165, 166, 176,
	177, 178, 180, 183, 184, 185, 186, 187, 190, 192,
	193, 194, 195, 196, 197, 204, 207, 213, 214, 215,
	216, 217, 218, 219, 221, 222, 223, 224, 230, 233,
	239, 240, 249, 256, 260, 182, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 0, 0, 0, 0, 154,
	0, 0, 0, 0, 156, 0, 0, 228, 170, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 408, 0, 624, 0,
	0, 0, 0, 0, 0, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	136, 0, 0, 0, 0, 0, 257, 0, 0, 0,
	201, 0, 232, 139, 153, 114, 100, 110, 0, 138,
	179, 208, 212, 0, 0, 0, 0, 0, 122, 0,
	210, 189, 248, 0, 0, 191, 209, 157, 238, 202,
	247, 258, 259, 235, 255, 263, 225, 103, 234, 246,
	119, 220, 105, 244, 231, 168, 148, 149, 104, 0,
	206, 127, 134, 124, 181, 241, 242, 123, 266, 111,
	254, 107, 112, 253, 175, 237, 245, 169, 162, 106,
	243, 167, 161, 152, 131, 141, 199, 159, 200, 142,
	172, 171, 173, 0, 0, 0, 229, 251, 267, 116,
	0, 0, 236, 261, 262, 0, 0, 117, 135, 130,
	198, 174, 113, 144, 226, 151, 158, 205, 265, 188,
	211, 120, 250, 227, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 108, 155, 264, 203, 133, 252,
	0, 0, 126, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 102, 109, 115, 121,
	125, 129, 132, 137, 140, 143, 145, 146, 147, 150,
	160, 163, 164, 165, 166, 176, 177, 178, 180, 183,
	184, 185, 186, 187, 190, 192, 193, 194, 195, 196,
	197, 204, 207, 213, 214, 215, 216, 217, 218, 219,
	221, 222, 223, 224, 230, 233, 239, 240, 249, 256,
	260, 182, 0, 0, 0, 0, 0, 0, 0, 707,
	128, 0, 0, 0, 0, 154, 0, 0, 0, 0,
	156, 0, 0, 228, 170, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 0, 0, 0, 0, 0, 0, 0,
	0, 118, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 136, 0, 0, 0,
	0, 0, 257, 0, 0, 0, 201, 0, 232, 139,
	153, 114, 100, 110, 0, 138, 179, 208, 212, 0,
	0, 0, 0, 0, 122, 0, 210, 189, 248, 0,
	0, 191, 209, 157, 238, 202, 247, 258, 259, 235,
	255, 263, 225, 103, 234, 246, 119, 220, 105, 244,
	231, 168, 148, 149, 104, 0, 206, 127, 134, 124,
	181, 241, 242, 123, 266, 111, 254, 107, 112, 253,
	175, 237, 245, 169, 162, 106, 243, 167, 161, 152,
	131, 141, 199, 159, 200, 142, 172, 171, 173, 0,
	0, 0, 229, 251, 267, 116, 0, 0, 236, 261,
	262, 0, 0, 117, 135, 130, 198, 174, 113, 144,
	226, 151, 158, 205, 265, 188, 211, 120, 250, 227,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	108, 155, 264, 203, 133, 252, 0, 0, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 102, 109, 115, 121, 125, 129, 132, 137,
	140, 143, 145, 146, 147, 150, 160, 163, 164, 165,
	166, 176, 177, 178, 180, 183, 184, 185, 186, 187,
	190, 192, 193, 194, 195, 196, 197, 204, 207, 213,
	214, 215, 216, 217, 218, 219, 221, 222, 223, 224,
	230, 233, 239, 240, 249, 256, 260, 389, 0, 0,
	0, 0, 0, 0, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 0, 0, 0, 0, 154, 0,
	0, 0, 0, 156, 0, 0, 228, 170, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 0, 0, 0, 0,
	0, 0, 0, 0, 118, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 136,
	0, 0, 0, 0, 0, 257, 0, 0, 0, 201,
	0, 232, 139, 153, 114, 100, 110, 0, 138, 179,
	208, 212, 0, 0, 0, 0, 0, 122, 0, 210,
	189, 248, 0, 0, 191, 209, 157, 238, 202, 247,
	258, 259, 235, 255, 263, 225, 103, 234, 246, 119,
	220, 105, 244, 231, 168, 148, 149, 104, 0, 206,
	127, 134, 124, 181, 241, 242, 123, 266, 111, 254,
	107, 112, 253, 175, 237, 245, 169, 162, 106, 243,
	167, 161, 152, 131, 141, 199, 159, 200, 142, 172,
	171, 173, 0, 0, 0, 229, 251, 267, 116, 0,
	0, 236, 261, 262, 0, 0, 117, 135, 130, 198,
	174, 113, 144, 226, 151, 158, 205, 265, 188, 211,
	120, 250, 227, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 108, 155, 264, 203, 133, 252, 0,
	0, 126, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 102, 109, 115, 121, 125,
	129, 132, 137, 140, 143, 145, 146, 147, 150, 160,
	163, 164, 165, 166, 176, 177, 178, 180, 183, 184,
	185, 186, 187, 190, 192, 193, 194, 195, 196, 197,
	204, 207, 213, 214, 215, 216, 217, 218, 219, 221,
	222, 223, 224, 230, 233, 239, 240, 249, 256, 260,
	182, 0, 0, 0, 0, 0, 0, 0, 0, 128,
	0, 0, 0, 0, 154, 0, 0, 0, 0, 156,
	0, 0, 228, 170, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 0, 0, 0, 0, 0, 0, 0, 0,
	118, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 136, 0, 0, 0, 94,
	0, 257, 0, 0, 0, 201, 0, 232, 139, 153,
	114, 100, 110, 0, 138, 179, 208, 212, 0, 0,
	0, 0, 0, 122, 0, 210, 189, 248, 0, 0,
	191, 209, 157, 238, 202, 247, 258, 259, 235, 255,
	263, 225, 103, 234, 246, 119, 220, 105, 244, 231,
	168, 148, 149, 104, 0, 206, 127, 134, 124, 181,
	241, 242, 123, 266, 111, 254, 107, 112, 253, 175,
	237, 245, 169, 162, 106, 243, 167, 161, 152, 131,
	141, 199, 159, 200, 142, 172, 171, 173, 0, 0,
	0, 229, 251, 267, 116, 0, 0, 236, 261, 262,
	0, 0, 117, 135, 130, 198, 174, 113, 144, 226,
	151, 158, 205, 265, 188, 211, 120, 250, 227, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 108,
	155, 264, 203, 133, 252, 0, 0, 126, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 102, 109, 115, 121, 125, 129, 132, 137, 140,
	143, 145, 146, 147, 150, 160, 163, 164, 165, 166,
	176, 177, 178, 180, 183, 184, 185, 186, 187, 190,
	192, 193, 194, 195, 196, 197, 204, 207, 213, 214,
	215, 216, 217, 218, 219, 221, 222, 223, 224, 230,
	233, 239, 240, 249, 256, 260, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 0, 0, 0, 0,
	154, 0, 0, 0, 0, 156, 0, 0, 228, 170,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 408, 0, 0,
	0, 0, 0, 0, 0, 0, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 136, 0, 0, 0, 0, 0, 257, 0, 0,
	0, 201, 0, 232, 139, 153, 114, 100, 110, 0,
	138, 179, 208, 212, 0, 0, 0, 0, 0, 122,
	0, 210, 189, 248, 0, 0, 191, 209, 157, 238,
	202, 247, 258, 259, 235, 255, 263, 225, 103, 234,
	246, 119, 220, 105, 244, 231, 168, 148, 149, 104,
	0, 206, 127, 134, 124, 181, 241, 242, 123, 266,
	111, 254, 107, 112, 253, 175, 237, 245, 169, 162,
	106, 243, 167, 161, 152, 131, 141, 199, 159, 200,
	142, 172, 171, 173, 0, 0, 0, 229, 251, 267,
	116, 0, 0, 236, 261, 262, 0, 0, 117, 135,
	130, 198, 174, 113, 144, 226, 151, 158, 205, 265,
	188, 211, 120, 250, 227, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 108, 155, 264, 203, 133,
	252, 0, 0, 126, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 102, 109, 115,
	121, 125, 129, 132, 137, 140, 143, 145, 146, 147,
	150, 160, 163, 164, 165, 166, 176, 177, 178, 180,
	183, 184, 185, 186, 187, 190, 192, 193, 194, 195,
	196, 197, 204, 207, 213, 214, 215, 216, 217, 218,
	219, 221, 222, 223, 224, 230, 233, 239, 240, 249,
	256, 260, 182, 0, 0, 0, 0, 0, 0, 0,
	0, 128, 0, 0, 0, 0, 154, 0, 0, 0,
	0, 156, 0, 0, 228, 170, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 0, 0, 0, 0, 0, 0,
	0, 0, 118, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 136, 0, 0,
	0, 0, 0, 257, 0, 0, 0, 201, 0, 232,
	139, 153, 114, 100, 110, 0, 138, 179, 208, 212,
	0, 0, 0, 0, 0, 122, 0, 210, 189, 248,
	0, 0, 191, 209, 157, 238, 202, 247, 258, 259,
	235, 255, 263, 225, 103, 234, 246, 119, 220, 105,
	244, 231, 168, 148, 149, 104, 0, 206, 127, 134,
	124, 181, 241, 242, 123, 266, 111, 254, 107, 112,
	253, 175, 237, 245, 169, 162, 106, 243, 167, 161,
	152, 131, 141, 199, 159, 200, 142, 172, 171, 173,
	0, 0, 0, 229, 251, 267, 116, 0, 0, 236,
	261, 262, 0, 0, 117, 135, 130, 198, 174, 113,
	144, 226, 151, 158, 205, 265, 188, 211, 120, 250,
	227, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 108, 155, 264, 203, 133, 252, 0, 0, 126,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 102, 109, 115, 121, 125, 129, 132,
	137, 140, 143, 145, 146, 147, 150, 160, 163, 164,
	165, 166, 176, 177, 178, 180, 183, 184, 185, 186,
	187, 190, 192, 193, 194, 195, 196, 197, 204, 207,
	213, 214, 215, 216, 217, 218, 219, 221, 222, 223,
	224, 230, 233, 239, 240, 249, 256, 260, 182, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 0, 0,
	0, 0, 154, 0, 0, 0, 0, 156, 0, 0,
	228, 170, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 329,
	0, 0, 0, 0, 0, 0, 0, 0, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 0, 0, 0, 0, 0, 257,
	0, 0, 0, 201, 0, 232, 139, 153, 114, 100,
	110, 0, 138, 179, 208, 212, 0, 0, 0, 0,
	0, 122, 0, 210, 189, 248, 0, 0, 191, 209,
	157, 238, 202, 247, 258, 259, 235, 255, 263, 225,
	103, 234, 246, 119, 220, 105, 244, 231, 168, 148,
	149, 104, 0, 206, 127, 134, 124, 181, 241, 242,
	123, 266, 111, 254, 107, 112, 253, 175, 237, 245,
	169, 162, 106, 243, 167, 161, 152, 131, 141, 199,
	159, 200, 142, 172, 171, 173, 0, 0, 0, 229,
	251, 267, 116, 0, 0, 236, 261, 262, 0, 0,
	117, 135, 130, 198, 174, 113, 144, 226, 151, 158,
	205, 265, 188, 211, 120, 250, 227, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 108, 155, 264,
	203, 133, 252, 0, 0, 126, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 102,
	109, 115, 121, 125, 129, 132, 137, 140, 143, 145,
	146, 147, 150, 160, 163, 164, 165, 166, 176, 177,
	178, 180, 183, 184, 185, 186, 187, 190, 192, 193,
	194, 195, 196, 197, 204, 207, 213, 214, 215, 216,
	217, 218, 219, 221, 222, 223, 224, 230, 233, 239,
	240, 249, 256, 260,
}
var yyPact = [...]int{

	1954, -1000, -271, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1068, 1115, -1000, -1000, -1000, -1000,
	-1000, -1000, 328, 178, -1000, -1000, -1000, 130, 45, 15152,
	129, 133, 15824, -1000, 13, -1000, -1000, 88, 15824, -1000,
	-1000, -77, -93, -1000, 815, -1000, -1000, 35, -1000, -1000,
	-1000, -1000, -1000, -1000, 1050, 1061, 894, 1060, 932, -1000,
	7717, 103, 103, 14816, 6709, -1000, -1000, 312, 15824, 121,
	15824, -145, 98, 98, 98, -1000, -1000, -1000, 15824, 100,
	726, 100, 100, 100, 15824, -1000, 188, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 15824, 725,
	1004, 3568, 60, 3568, 3568, -1000, 3568, 3568, -1000, 3568,
	31, 3568, -35, 1081, 26, -41, -1000, 3568, -1000, -1000,
	-1000, -1000, -1000, 106, 815, 317, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 551, 128, 15824, 297, -1000, 1015, 9073,
	9073, 1068, -1000, 815, -1000, -1000, -1000, 975, -1000, -1000,
	423, 1091, -1000, 11425, 185, -1000, 9073, 2077, 845, -1000,
	-1000, 845, -1000, -1000, 181, -1000, -1000, 10081, 10081, 10081,
	10081, 10081, 10081, 10081, 10081, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 845,
	-1000, 8737, 845, 845, 845, 845, 845, 845, 845, 845,
	845, 9073, 845, 845, 845, 845, 845, 845, 845, 845,
	845, 845, 845, 845, 845, 845, 845, 14473, 13801, 15824,
	795, 763, -1000, -1000, 184, 838, 6360, -89, -1000, -1000,
	-1000, 315, 13129, -1000, -1000, -1000, 1003, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 722,
	15824, -1000, 2115, -1000, 708, 1048, 112, 703, 360, 700,
	15824, 841, 107, 15824, 1037, 903, 15824, 695, 691, -1000,
	6011, -1000, 3568, 3568, -1000, -1000, -1000, 98, 98, 3568,
	3568, 15824, 3568, 3568, -1000, -1000, -1000, -1000, -1000, 3568,
	3568, -1000, 1090, 308, -1000, -1000, -1000, -1000, 9073, 262,
	-1000, 898, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 669,
	-1000, -1000, -1000, -1000, 15824, 3568, 38, 72, 64, 15824,
	-1000, 1108, 236, 464, 170, 840, -1000, 502, 1050, 551,
	932, 12793, 914, -1000, -1000, -1000, 15824, -1000, 9073, 9073,
	496, -1000, 14137, -1000, -1000, 4615, 267, 10081, 425, 331,
	10081, 10081, 10081, 10081, 10081, 10081, 10081, 10081, 10081, 10081,
	10081, 10081, 10081, 10081, 10081, 520, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 663, -1000, 815, 596, 596, 200,
	200, 200, 200, 200, 200, 200, 10417, 1045, 551, 680,
	343, 8737, 7717, 7717, 9073, 9073, 8389, 8053, 7717, 7717,
	1045, 342, 343, 16160, -1000, -1000, 9745, -1000, -1000, -1000,
	-1000, -1000, 551, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	15488, 15488, 7717, 7717, 7717, 7717, 50, 15824, -1000, 848,
	887, -1000, -1000, -1000, 1040, 12457, 11089, 50, 762, 13801,
	15824, -1000, -1000, 13801, 15824, 4266, 5662, 838, -89, 831,
	-1000, -122, -111, 7045, 183, -1000, -1000, -1000, -1000, 3219,
	192, 744, -1000, -53, -1000, -1000, -1000, 852, -1000, 852,
	852, 852, 852, -15, -15, -15, -15, -1000, -1000, -1000,
	-1000, -1000, 869, 868, -1000, 852, 852, 852, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 866, 866, 866, 855,
	855, 871, -1000, 15824, 3568, 1033, 3568, -1000, 15824, 15824,
	837, -1000, 15824, 836, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 650, 641, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 15824, 341, 15824, 15824, 343, -1000, 530, 15824, -1000,
	95, -1000, 15824, 15824, 15824, 15824, 15824, 145, -1000, 943,
	9073, 9073, 5313, 9073, -1000, -1000, -1000, 1015, -1000, 1045,
	1073, -1000, 957, 950, 7717, -1000, -1000, 267, 449, -1000,
	-1000, 503, -1000, -1000, -1000, -1000, 167, 845, -1000, 2260,
	-1000, -1000, -1000, -1000, 425, 10081, 10081, 10081, 764, 2260,
	2178, 1024, 742, 200, 383, 383, 220, 220, 220, 220,
	220, 339, 339, -1000, -1000, -1000, 551, -1000, -1000, -1000,
	7717, -1000, 9073, -1000, 551, 676, -1000, 676, 468, 458,
	260, 1089, 676, 248, 1083, 676, 676, 676, 7717, 466,
	-1000, 9073, 551, -1000, 162, -1000, 920, 835, 833, 676,
	551, 832, 676, 676, 717, 845, -1000, 16160, 13801, 13801,
	13801, 13801, 13801, -1000, 929, 927, -1000, 919, 916, 923,
	15824, -1000, 649, 12457, -1000, 845, -1000, 12109, 187, 119,
	118, 114, -1000, -1000, 1078, 13801, 846, -1000, 846, -1000,
	159, -1000, -1000, 831, -89, -64, -1000, -1000, -1000, -1000,
	343, -1000, 523, 828, 2870, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 862, 639, -1000, 993, 204, 211, 621, 965,
	-1000, -1000, -1000, 552, -69, -1000, -1000, 495, -15, -15,
	-1000, -1000, 183, 1001, 183, 183, 183, 528, 528, -1000,
	-1000, -1000, -1000, 494, -1000, -1000, -1000, 490, -1000, 895,
	15488, 815, 1039, -1000, -1000, -1000, 105, -1000, 3568, 15824,
	3568, 3568, 308, -1000, 527, 9073, -1000, -1000, -1000, -1000,
	-1000, 577, 577, 257, 90, 90, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 48, 847, -1000,
	-1000, -1000, -1000, 4, 37, 939, 343, 343, 154, -1000,
	-1000, 15824, -1000, -1000, -1000, -1000, 864, -1000, -1000, -1000,
	3917, 7717, -1000, 764, 2260, 1955, -1000, 10081, 10081, -1000,
	551, 343, -1000, 7717, -1000, -1000, 97, 520, 97, 10081,
	10081, -1000, 10081, 10081, -1000, -160, -1000, 817, 346, -1000,
	9073, 454, -1000, 5313, -1000, 10081, 10081, -1000, -1000, -1000,
	-1000, 892, 16160, 845, -1000, 11773, 15488, 860, -1000, 299,
	887, 865, 882, 697, -1000, -1000, -1000, -1000, 917, -1000,
	904, -1000, -1000, -1000, -1000, 15488, 10081, 187, -1000, 845,
	845, 845, 1068, 9073, 846, -1000, -1000, 214, -1000, -1000,
	-127, -124, -1000, -1000, -1000, 3219, -1000, 3219, 15488, 70,
	-1000, 621, 621, -1000, -1000, -1000, 858, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 376, 10081, 1105, -1000, 964, -1000,
	963, 526, -1000, -1000, 723, 183, 183, -1000, 272, -1000,
	-1000, -1000, 618, -1000, 616, 827, 611, 15824, -1000, -1000,
	-1000, 15824, -1000, -1000, -1000, -1000, 341, -1000, 343, -1000,
	542, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 595, -1000, 576, 15824, -1000, -1000, -1000,
	-1000, -1000, 557, 575, 15488, -166, 562, 15488, 15488, 15488,
	-1000, 4964, -1000, 1078, 13801, -1000, -1000, 551, -1000, 10081,
	2260, 2260, -1000, -1000, 551, 852, 852, -1000, 852, 855,
	-1000, 852, 3, 852, 1, 551, 551, 1936, 1848, 1831,
	354, 845, -154, -1000, 343, 9073, -1000, 1682, 1569, -1000,
	1008, 759, 774, -1000, -1000, 7381, 551, 606, 152, 573,
	-1000, 1068, 16160, 9073, -1000, -1000, 9073, 854, -1000, 9073,
	-1000, -1000, -1000, 573, 1599, -1000, 15488, 15488, 15488, 1050,
	343, -1000, -1000, -1000, -1000, 2870, -1000, 569, -1000, 852,
	-1000, -1000, -1000, 15488, -1000, 2260, -94, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -15, 517, -15, 472, -1000,
	443, 3568, -1000, 815, -1000, -1000, 557, 81, -1000, -1000,
	-1000, 207, -1000, -1000, 81, 557, 1029, -1000, 4964, -1000,
	-1000, 851, 849, -1000, 1075, 822, -1000, 2260, -1000, -1000,
	116, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10081,
	10081, 10081, 10081, 10081, 551, 508, 343, 10081, 10081, 960,
	-1000, 845, -1000, -1000, 820, 15488, 15488, -1000, 15488, 1050,
	-1000, 343, 343, 15488, 343, 10753, -1000, 13465, 567, -1000,
	567, 567, -1000, 163, 15488, -1000, 561, -1000, 183, -1000,
	183, 698, 681, -1000, -1000, 574, -1000, -1000, 540, 535,
	-1000, -1000, -1000, 81, 845, 821, -1000, 294, 15488, 15824,
	1072, 1055, -1000, -1000, 920, 920, 920, 920, 41, -1000,
	-1000, 920, 920, 1098, -1000, 845, -1000, 815, 144, -1000,
	-1000, -1000, 556, -1000, 187, 15488, -1000, -1000, -1000, 163,
	-1000, 524, 288, 504, -1000, 66, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 47, 4964, 3219,
	550, -1000, -1000, 9073, 9073, -1000, -1000, -1000, -1000, 551,
	56, -169, -1000, -1000, 16160, 774, 551, 15488, -1000, -1000,
	-1000, -1000, -1000, 432, -1000, -1000, 15824, -1000, -1000, 547,
	-1000, 15488, -1000, -1000, 847, 343, 771, -1000, 938, -163,
	-175, 766, -1000, -1000, -1000, 850, -1000, 47, 948, -166,
	-1000, 936, -1000, 15488, -1000, 44, -1000, -167, 545, 42,
	-171, 875, 845, -177, 873, -1000, 1088, 9409, -1000, -1000,
	1096, 234, 234, 920, 551, -1000, -1000, -1000, 77, 522,
	-1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1373, 27, 530, 1372, 1369, 1367, 100, 92, 87,
	1366, 1364, 1363, 1361, 1360, 1359, 1358, 1357, 1354, 1353,
	1352, 1349, 1348, 1343, 1341, 1339, 1335, 1334, 1330, 1325,
	1324, 1323, 97, 1322, 1321, 1320, 68, 1318, 80, 1317,
	1315, 1314, 47, 109, 52, 51, 1146, 1312, 46, 61,
	67, 1310, 37, 1305, 1303, 71, 1300, 1299, 1298, 56,
	1296, 1292, 1551, 1291, 76, 1290, 21, 13, 42, 1289,
	1288, 1287, 1285, 73, 5, 1284, 1283, 23, 1281, 1277,
	98, 1276, 70, 11, 14, 24, 22, 1274, 48, 6,
	1273, 62, 1272, 1271, 1270, 1268, 30, 1264, 15, 65,
	16, 1263, 20, 64, 1261, 3, 90, 33, 31, 9,
	78, 69, 1257, 32, 77, 63, 1254, 1253, 464, 1252,
	1251, 53, 1249, 1248, 29, 1246, 338, 93, 1245, 1244,
	1243, 1240, 1238, 26, 57, 1235, 34, 118, 104, 0,
	483, 265, 72, 1234, 1231, 1230, 1297, 44, 18, 39,
	1229, 1227, 45, 1226, 1225, 1224, 1215, 1212, 1211, 1208,
	1206, 25, 1205, 1200, 1198, 54, 35, 1196, 1195, 66,
	36, 1190, 1188, 1187, 59, 55, 1186, 1182, 60, 50,
	1177, 1173, 1170, 1169, 1166, 38, 19, 1164, 17, 1161,
	12, 1153, 41, 1152, 4, 1151, 10, 1149, 8, 1145,
	7, 58, 1, 1143, 2, 1140, 1138, 133, 286, 86,
	1135, 1134, 91,
}
var yyR1 = [...]int{

	0, 205, 206, 206, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 6,
	3, 4, 4, 5, 5, 7, 7, 35, 35, 8,
	9, 9, 9, 9, 209, 209, 57, 57, 55, 55,
	56, 56, 106, 106, 10, 10, 10, 10, 111, 111,
	115, 115, 115, 116, 116, 116, 116, 150, 150, 100,
	11, 11, 11, 11, 11, 11, 11, 200, 200, 199,
	198, 198, 197, 197, 196, 20, 181, 183, 183, 182,
	182, 182, 182, 175, 154, 154, 154, 154, 154, 154,
	154, 153, 153, 153, 153, 157, 157, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 156, 156, 156, 156,
	156, 158, 158, 158, 158, 158, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 160, 160, 160, 160, 160, 160, 160, 160, 174,
	174, 161, 161, 169, 169, 170, 170, 170, 167, 167,
	168, 168, 171, 171, 163, 164, 172, 165, 165, 165,
	166, 166, 166, 173, 173, 173, 173, 162, 176, 176,
	191, 191, 190, 190, 190, 180, 180, 187, 187, 187,
	187, 187, 178, 178, 179, 179, 189, 189, 188, 177,
	177, 192, 192, 192, 192, 203, 204, 202, 202, 202,
	202, 202, 184, 184, 184, 185, 185, 185, 186, 186,
	186, 16, 16, 16, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 98, 98, 98, 18,
	19, 19, 19, 19, 19, 19, 19, 19, 134, 134,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	195, 193, 193, 194, 194, 12, 21, 21, 13, 13,
	13, 13, 13, 14, 14, 22, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 122, 122, 120, 120,
	123, 123, 121, 121, 121, 124, 124, 124, 125, 125,
	151, 151, 151, 24, 24, 29, 29, 30, 31, 135,
	135, 27, 27, 28, 28, 28, 28, 41, 41, 210,
	210, 26, 26, 25, 25, 25, 25, 15, 211, 32,
	33, 33, 34, 34, 34, 38, 38, 38, 36, 36,
	36, 37, 37, 44, 44, 43, 43, 45, 45, 45,
	45, 143, 143, 143, 142, 142, 47, 47, 48, 48,
	49, 49, 50, 50, 50, 50, 65, 65, 66, 66,
	66, 66, 66, 105, 105, 107, 107, 51, 51, 51,
	51, 52, 52, 53, 53, 54, 54, 133, 133, 148,
	148, 58, 58, 58, 60, 59, 59, 59, 59, 61,
	61, 63, 63, 62, 62, 64, 67, 67, 67, 67,
	68, 68, 46, 46, 46, 46, 46, 46, 46, 119,
	119, 70, 70, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 81, 81, 81, 81, 81, 81, 71,
	71, 71, 71, 71, 71, 71, 42, 42, 82, 82,
	82, 88, 83, 83, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 78, 78, 76, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 212, 212,
	80, 79, 79, 79, 79, 79, 79, 39, 39, 39,
	39, 39, 149, 149, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 92, 92, 40,
	40, 90, 90, 91, 93, 93, 89, 89, 89, 73,
	73, 73, 73, 73, 73, 73, 73, 75, 75, 75,
	94, 94, 95, 95, 96, 96, 97, 97, 99, 101,
	101, 101, 102, 102, 102, 102, 103, 103, 103, 72,
	72, 72, 72, 72, 72, 104, 104, 104, 104, 108,
	108, 84, 84, 86, 86, 85, 87, 109, 109, 113,
	110, 110, 114, 114, 114, 114, 112, 112, 112, 145,
	145, 145, 117, 117, 126, 126, 127, 127, 118, 118,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	132, 132, 131, 131, 131, 129, 129, 130, 130, 130,
	130, 144, 144, 140, 140, 141, 141, 146, 146, 147,
	147, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 207,
	208, 136, 137, 137, 137,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 4, 6, 7, 5,
	10, 1, 3, 1, 3, 7, 8, 1, 1, 9,
	8, 7, 6, 6, 1, 1, 1, 3, 1, 3,
	1, 3, 0, 4, 3, 4, 5, 4, 1, 3,
	3, 2, 2, 2, 2, 2, 1, 1, 1, 0,
	2, 2, 8, 7, 9, 5, 5, 0, 2, 1,
	0, 2, 1, 3, 3, 4, 4, 2, 4, 1,
	3, 3, 3, 3, 0, 2, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 1, 4, 4, 2, 2,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 6,
	6, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 1,
	0, 1, 1, 2, 2, 3, 1, 0, 3, 3,
	0, 2, 2, 2, 1, 2, 1, 2, 5, 4,
	1, 2, 2, 3, 2, 0, 1, 2, 3, 3,
	2, 2, 1, 1, 0, 1, 1, 3, 2, 3,
	1, 10, 11, 11, 12, 3, 3, 1, 1, 2,
	2, 2, 0, 1, 3, 1, 2, 3, 1, 1,
	1, 1, 1, 1, 6, 10, 9, 7, 7, 7,
	9, 7, 7, 9, 10, 5, 0, 1, 2, 4,
	7, 5, 5, 5, 12, 7, 5, 9, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	7, 1, 3, 8, 8, 3, 3, 5, 4, 6,
	4, 4, 4, 3, 2, 3, 4, 4, 3, 6,
	6, 4, 4, 4, 4, 4, 3, 3, 2, 3,
	3, 2, 3, 4, 3, 7, 5, 4, 2, 4,
	4, 3, 3, 5, 2, 3, 1, 1, 0, 1,
	1, 1, 0, 2, 2, 0, 2, 2, 0, 2,
	0, 1, 1, 2, 1, 1, 2, 1, 1, 1,
	1, 3, 3, 1, 1, 1, 1, 0, 3, 1,
	1, 2, 2, 2, 2, 3, 3, 2, 0, 2,
	0, 2, 1, 2, 2, 0, 1, 1, 0, 1,
	1, 0, 1, 0, 1, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 1, 0, 2, 1, 3,
	1, 1, 1, 3, 1, 3, 2, 6, 1, 4,
	6, 3, 2, 1, 3, 1, 3, 4, 4, 4,
	3, 2, 4, 0, 1, 0, 2, 0, 1, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 3, 0, 5, 5, 5,
	0, 2, 1, 3, 3, 2, 3, 1, 2, 0,
	3, 1, 1, 3, 3, 4, 4, 5, 3, 4,
	5, 6, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 1,
	1, 3, 1, 3, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 1, 5, 6, 4, 4,
	6, 6, 6, 8, 8, 8, 8, 9, 4, 7,
	5, 4, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 8, 8, 0, 2,
	3, 4, 4, 4, 4, 4, 4, 0, 3, 4,
	7, 3, 1, 1, 2, 3, 3, 1, 2, 2,
	1, 2, 1, 2, 2, 1, 2, 0, 1, 0,
	2, 1, 2, 4, 0, 2, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	0, 3, 0, 2, 0, 3, 1, 3, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 4, 2,
	1, 3, 5, 4, 6, 1, 3, 3, 5, 0,
	5, 1, 3, 1, 2, 3, 1, 1, 3, 3,
	1, 3, 3, 3, 3, 3, 1, 2, 1, 1,
	1, 1, 1, 1, 0, 2, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 0, 1, 1,
	1, 0, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -205, -1, -2, -6, -7, -8, -9, -10, -11,
	-16, -12, -13, -14, -22, -23, -24, -29, -30, -31,
	-27, -26, -25, -15, -3, -4, 6, 7, -35, 9,
	10, 29, -20, 117, -17, -18, -19, 120, 119, 155,
	121, 148, 52, 170, 171, 173, 174, -210, -135, 153,
	154, 30, 31, 123, -207, 8, 256, 118, 150, 149,
	25, 56, -206, 354, -96, 15, -34, 5, -32, -211,
	-32, -32, -32, -32, -32, -181, -183, 56, 92, -130,
	129, 74, 248, 126, 127, 33, 136, 135, 127, 127,
	128, 129, 248, 126, 127, -62, -146, 59, -139, 266,
	139, 298, 299, 170, 181, 175, 202, 194, 267, 300,
	140, 192, 195, 235, 138, 301, 222, 230, 68, 173,
	244, 302, 151, 190, 186, 303, 275, 184, 27, 304,
	232, 207, 305, 271, 185, 231, 123, 306, 142, 136,
	307, 208, 212, 308, 236, 309, 310, 311, 179, 180,
	312, 238, 206, 137, 32, 268, 37, 160, 239, 210,
	313, 205, 201, 314, 315, 316, 317, 204, 178, 200,
	41, 214, 213, 215, 234, 197, 318, 319, 320, 143,
	321, 187, 18, 322, 323, 324, 325, 326, 242, 154,
	327, 158, 328, 329, 330, 331, 332, 333, 233, 209,
	211, 133, 162, 270, 334, 240, 183, 335, 144, 159,
	153, 243, 145, 336, 337, 338, 339, 340, 341, 342,
	174, 343, 344, 345, 346, 169, 237, 246, 40, 219,
	347, 177, 135, 348, 171, 166, 225, 198, 161, 349,
	350, 188, 189, 203, 176, 199, 172, 163, 155, 351,
	245, 220, 272, 196, 193, 167, 352, 129, 164, 165,
	353, 226, 227, 168, 269, 241, 191, 221, 127, 110,
	195, 235, 117, 223, 224, 232, 128, 32, 233, 162,
	-151, 127, -120, 222, 226, 227, 168, 59, 237, 236,
	228, -146, 172, -41, 121, 156, -62, -136, -136, -136,
	225, 225, -136, -2, -118, 129, 227, 131, -102, 17,
	16, -5, -3, -207, 6, 20, 21, -38, 42, 43,
	-33, -45, 101, -46, -146, -69, 76, -74, 28, 59,
	-139, 23, -73, -70, -89, -87, -88, 110, 111, 112,
	99, 100, 107, 77, 113, -78, -76, -77, -79, 61,
	60, 69, 62, 63, 64, 65, 70, 71, 72, -140,
	-85, -207, 46, 47, 257, 258, 259, 260, 265, 146,
	261, 79, 36, 247, 255, 254, 253, 251, 252, 249,
	250, 263, 264, 132, 248, 105, 256, -118, -118, 11,
	-55, -56, -62, -64, -146, -110, -150, 172, -114, 237,
	236, -141, -112, -140, -138, 235, 195, 234, 59, -139,
	122, 147, 273, 75, 22, 24, 217, 78, 110, 16,
	79, 109, 257, 117, 50, 274, 249, 250, 247, 259,
	260, 248, 223, 28, 10, 276, 25, 149, 21, 103,
	119, 82, 83, 152, 23, 150, 72, 146, 279, 19,
	53, 11, 13, 280, 281, 14, 132, 131, 94, 128,
	48, 8, 113, 26, 91, 44, 282, 34, 283, 284,
	285, 286, 46, 92, 17, 251, 252, 30, 287, 265,
	157, 105, 51, 38, 76, 288, 289, 70, 290, 73,
	54, 74, 15, 49, 291, 292, 293, 294, 93, 120,
	256, 47, 295, 126, 6, 262, 29, 148, 45, 296,
	127, 81, 263, 264, 130, 71, 5, 33, 31, 9,
	52, 55, 253, 254, 255, 36, 80, 12, 297, -182,
	92, -175, 59, -62, 128, -62, 256, -127, 132, -127,
	-127, -21, -62, -126, 132, 59, -126, -126, -126, -62,
	114, -62, 59, 29, -137, -207, -141, 248, 126, 59,
	162, 127, 163, 129, -137, -137, -137, -137, -137, 166,
	167, -137, -123, -122, 230, 231, 225, 229, 12, 167,
	225, 165, -137, -28, -2, -9, -7, -8, -2, 84,
	-136, -136, -208, 58, 127, -62, 117, 119, 122, 54,
	-103, 19, 30, -46, -146, -97, -99, -46, -96, -2,
	-32, 38, -36, 20, 21, 67, 11, -143, 75, 74,
	91, -142, 22, -140, 61, 114, -46, -71, 94, 76,
	92, 93, 78, 96, 95, 106, 99, 100, 101, 102,
	103, 104, 105, 97, 98, 109, 84, 85, 86, 87,
	88, 89, 90, -119, -207, -88, -207, 115, 116, -74,
	-74, -74, -74, -74, -74, -74, -74, -207, -2, -83,
	-46, -207, -207, -207, -207, -207, -207, -207, -207, -207,
	-207, -92, -46, -207, -212, -80, -207, -212, -80, -212,
	-80, -212, -207, -212, -80, -212, -80, -212, -212, -80,
	-207, -207, -207, -207, -207, -207, -63, 26, -62, -48,
	-49, -50, -51, -65, -88, -207, -62, -62, -55, -209,
	57, 11, 55, -209, 57, 114, 57, -110, 172, -111,
	-115, 238, 240, 84, -145, -140, 61, 28, 29, 58,
	57, -62, -153, -157, -159, -158, -160, -155, -156, 192,
	193, 110, 196, 198, 199, 200, 201, 202, 203, 204,
	205, 206, 207, 29, 151, 188, 189, 190, 191, 208,
	209, 210, 211, 212, 213, 214, 215, 175, 194, 267,
	176, 177, 178, 179, 180, 181, 183, 184, 185, 186,
	187, 59, 22, 129, 59, 76, 59, -62, 57, 130,
	-55, 23, 54, -57, -62, 59, 59, -147, -146, -138,
	-137, -137, -127, -127, -137, -137, -62, -137, -137, -137,
	-137, 11, -121, 11, 94, -46, -125, 92, 54, 59,
	-62, -137, 164, 164, 127, 127, 169, -62, 9, 94,
	57, 18, 114, 57, -101, 24, 25, -102, -208, -38,
	-75, -140, 62, 65, -37, 45, -62, -46, -46, -81,
	70, 76, 71, 72, -142, 101, -147, -141, -138, -74,
	-82, -85, -88, 66, 94, 92, 93, 78, -74, -74,
	-74, -74, -74, -74, -74, -74, -74, -74, -74, -74,
	-74, -74, -74, -149, 59, 61, 59, -73, -73, -140,
	-36, -208, 57, -208, -2, -43, -45, -43, -46, -46,
	-89, 61, -43, -89, 61, -43, -43, -43, -36, -90,
	-91, 80, -89, -140, -146, -208, -74, -140, -140, -43,
	-44, -43, -43, -43, -106, 158, -62, 29, 57, -58,
	-60, -59, -61, 44, 48, 50, 45, 46, 47, 51,
	-133, 22, -48, -207, -66, 158, -67, 22, -148, 52,
	131, 53, -146, 61, -106, 55, -48, -62, -48, -64,
	-146, 101, -114, -111, 57, 239, 241, 242, 54, 73,
	-46, -166, 109, -184, -185, -186, -141, 61, 62, -175,
	-176, -177, -187, 141, -192, 133, 135, 33, -178, 142,
	128, 34, 58, -154, -167, 220, -161, 56, -161, -161,
	-161, -161, -165, 195, -165, -165, -165, 56, 56, -161,
	-161, -161, -169, 56, -169, -169, -170, 56, -170, -144,
	55, -100, -62, -137, 23, -137, -62, -62, -62, 57,
	59, 59, -62, -124, 92, 12, -146, -146, 61, -62,
	-128, 122, 119, 120, 124, 125, -195, 118, 217, 195,
	68, 28, 15, 257, 158, 272, 59, 159, -62, -62,
	-62, -62, -62, 122, 119, 40, -46, -46, -147, -99,
	-103, -117, 19, 11, 36, 36, -43, 70, 71, 72,
	114, -207, -82, -74, -74, -74, -42, 152, 75, -208,
	-44, -46, -208, 57, -208, -208, 57, 55, 22, 11,
	11, -208, 11, 11, -208, -208, -208, -43, -93, -91,
	82, -46, -208, 114, -208, 57, 57, -208, -208, -208,
	-208, -72, 29, 36, -2, -207, -207, -109, -113, -89,
	-49, -50, -50, -49, -50, 44, 44, 44, 49, 44,
	49, 44, -59, -146, -208, -207, 290, -148, -67, 128,
	128, 128, -68, 12, -48, -68, -68, 114, -115, -116,
	243, 240, 246, 59, 61, 57, -186, 84, 56, 59,
	34, -178, -178, -179, 59, -179, 34, -171, -163, -164,
	-172, -173, -162, 70, 76, 28, 54, 217, 133, 34,
	33, 68, -168, 221, 62, -165, -165, -166, 29, -166,
	-166, -166, -174, 61, -174, 62, 62, 54, -140, -2,
	22, 130, -137, -62, -137, -137, -121, 61, -46, -136,
	-134, -201, 134, 138, 141, 142, 136, 128, 34, 133,
	135, 158, 33, -134, -201, 134, -131, -129, 130, 22,
	128, 34, -134, -134, 158, -200, 55, 164, 217, 164,
	41, 114, -62, -47, 11, 101, -141, -44, -42, 75,
	-74, -74, -208, -45, -152, 110, 192, 151, 190, 186,
	206, 197, 219, 188, 220, -149, -152, -74, -74, -74,
	-74, 266, -96, 83, -46, 81, -141, -74, -74, -108,
	54, -109, -84, -86, -85, -207, -2, -104, -140, -107,
	-140, -68, 57, 84, -53, -52, 54, 55, -54, 54,
	-52, 44, 44, -107, -74, -67, -207, -207, -207, -96,
	-46, -68, 240, 244, 245, -185, -186, -189, -188, -140,
	-192, -179, -179, 56, 70, -74, 9, 34, 34, 61,
	58, -166, -166, 59, 110, 58, 57, 58, 57, 58,
	57, -62, -100, -100, -62, -124, 56, -175, -136, 59,
	-136, 59, -62, -136, -175, 59, -140, -198, 269, -199,
	59, -140, -140, -140, -68, -48, -208, -74, -208, -161,
	-161, -161, -170, -161, 180, -161, 180, -208, -208, 19,
	19, 19, 19, -207, -40, 262, -46, 57, 57, 27,
	-108, 57, -208, -208, -208, 57, 114, -208, 57, -96,
	-113, -46, -46, 56, -46, -208, -67, -133, -105, -140,
	-105, -105, -102, 58, 57, -161, -105, -77, -165, 61,
	-165, 62, 62, -137, -2, -175, -98, 146, 147, -132,
	130, 22, -98, -175, 26, -197, -196, -141, 56, 55,
	-94, 13, -165, 59, -74, -74, -74, -74, -74, -208,
	61, -74, -74, 34, -86, 36, -2, -207, -140, -140,
	-140, -102, -105, -66, -148, 57, -208, -208, -208, -191,
	-190, 55, 137, 68, -188, 58, -166, -166, 58, 58,
	-100, 58, -136, 59, 59, -136, -98, -207, 57, 84,
	-105, -62, -95, 14, 16, -208, -208, -208, -208, -39,
	94, 269, -208, -208, 9, -84, -2, 114, 58, -67,
	-140, -190, 59, -180, 84, 61, 144, -136, -136, -193,
	-194, 158, -196, -186, 58, -46, -83, -208, 267, 51,
	270, -109, -208, -140, 62, -62, -208, 57, -140, -200,
	41, 268, 271, 56, -194, 36, -198, 41, -105, 160,
	269, 58, 161, 270, -203, -204, 54, -207, 271, -204,
	54, 10, 9, -74, 157, -202, 145, 140, 143, 29,
	-202, -208, -208, 139, 28, 70,
}
var yyDef = [...]int{

	25, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 594, 0, 348, 348, 348, 348,
	348, 348, 0, 667, 221, 222, 223, 0, 0, 0,
	0, -2, 324, 325, 0, 327, 328, 337, -2, 971,
	971, 0, 0, 971, 0, 37, 38, 648, 340, 329,
	330, 969, 1, 3, 602, 0, 0, 352, 355, 350,
	0, 648, 648, 0, 0, 70, 71, 0, 0, 0,
	0, 0, 646, 646, 646, 668, 669, 670, 0, 644,
	0, 644, 644, 644, 0, 274, 423, 677, 678, 800,
	801, 802, 803, 804, 805, 806, 807, 808, 809, 810,
	811, 812, 813, 814, 815, 816, 817, 818, 819, 820,
	821, 822, 823, 824, 825, 826, 827, 828, 829, 830,
	831, 832, 833, 834, 835, 836, 837, 838, 839, 840,
	841, 842, 843, 844, 845, 846, 847, 848, 849, 850,
	851, 852, 853, 854, 855, 856, 857, 858, 859, 860,
	861, 862, 863, 864, 865, 866, 867, 868, 869, 870,
	871, 872, 873, 874, 875, 876, 877, 878, 879, 880,
	881, 882, 883, 884, 885, 886, 887, 888, 889, 890,
	891, 892, 893, 894, 895, 896, 897, 898, 899, 900,
	901, 902, 903, 904, 905, 906, 907, 908, 909, 910,
	911, 912, 913, 914, 915, 916, 917, 918, 919, 920,
	921, 922, 923, 924, 925, 926, 927, 928, 929, 930,
	931, 932, 933, 934, 935, 936, 937, 938, 939, 940,
	941, 942, 943, 944, 945, 946, 947, 948, 949, 950,
	951, 952, 953, 954, 955, 956, 957, 958, 959, 960,
	961, 962, 963, 964, 965, 966, 967, 968, 0, 0,
	0, 972, 0, 972, 972, 288, 972, 972, 291, 972,
	0, 972, 0, 298, 0, 0, 304, 972, 321, 322,
	309, 323, 326, 0, 0, 0, 341, 342, 343, 344,
	971, 971, 347, 31, 0, 0, 0, 649, 606, 0,
	0, 594, 33, 0, 348, 353, 354, 358, 356, 357,
	349, 0, 367, 371, 0, 432, 0, 437, 439, -2,
	-2, 0, 474, 475, 476, 477, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 502, 503, 504, 505, 579,
	580, 581, 582, 583, 584, 585, 586, 441, 442, 576,
	626, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 567, 0, 538, 538, 538, 538, 538, 538, 538,
	538, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 48, 50, 423, 54, 0, 947, 630, -2,
	-2, 0, 0, 675, 676, -2, 813, -2, 673, 674,
	681, 682, 683, 684, 685, 686, 687, 688, 689, 690,
	691, 692, 693, 694, 695, 696, 697, 698, 699, 700,
	701, 702, 703, 704, 705, 706, 707, 708, 709, 710,
	711, 712, 713, 714, 715, 716, 717, 718, 719, 720,
	721, 722, 723, 724, 725, 726, 727, 728, 729, 730,
	731, 732, 733, 734, 735, 736, 737, 738, 739, 740,
	741, 742, 743, 744, 745, 746, 747, 748, 749, 750,
	751, 752, 753, 754, 755, 756, 757, 758, 759, 760,
	761, 762, 763, 764, 765, 766, 767, 768, 769, 770,
	771, 772, 773, 774, 775, 776, 777, 778, 779, 780,
	781, 782, 783, 784, 785, 786, 787, 788, 789, 790,
	791, 792, 793, 794, 795, 796, 797, 798, 799, 0,
	0, 89, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 265, 0, 0, 0, 0, 0, 0, 0, 273,
	0, 275, 972, 972, 278, 973, 974, 646, 646, 972,
	972, 0, 972, 972, 286, 287, 289, 290, 292, 972,
	972, 294, 0, 312, 310, 311, 306, 307, 0, 318,
	301, 302, 305, 331, -2, 334, 335, 336, -2, 0,
	345, 346, 32, 970, 0, 972, 0, 0, 0, 0,
	26, 0, 0, 603, 0, 595, 596, 599, 602, 31,
	355, 0, 361, 359, 360, 351, 0, 368, 0, 0,
	0, 372, 0, 374, 375, 0, 435, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 459, 460, 461, 462,
	463, 464, 465, 438, 0, 452, 0, 0, 0, 494,
	495, 496, 497, 498, 499, 500, 0, 358, 31, 0,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	358, 0, 568, 0, 522, 530, 0, 523, 531, 524,
	532, 525, 0, 526, 533, 527, 534, 528, 529, 535,
	0, 0, 0, 363, 0, 0, 52, 0, 422, 0,
	378, 380, 381, 382, -2, 0, 426, -2, 0, 0,
	0, 44, 45, 0, 0, 0, 0, 55, 947, 57,
	58, 0, 0, 0, 170, 639, 640, 641, 637, 212,
	0, 0, 94, 158, 102, 103, 104, 151, 106, 151,
	151, 151, 151, 167, 167, 167, 167, 134, 135, 136,
	137, 138, 0, 0, 121, 151, 151, 151, 125, 141,
	142, 143, 144, 145, 146, 147, 148, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 153, 153, 153, 155,
	155, 671, 69, 0, 972, 0, 972, 85, 0, 0,
	268, 645, 0, 270, 46, 271, 272, 424, 679, 680,
	276, 277, 0, 0, 281, 282, 283, 284, 285, 293,
	297, 0, 315, 0, 0, 299, 300, 0, 0, 338,
	0, 239, 0, 0, 0, 0, 0, 0, 607, 0,
	0, 0, 0, 0, 598, 600, 601, 606, 34, 358,
	0, 587, 0, 0, 0, 362, 29, 433, 434, 436,
	453, 0, 455, 457, 373, 369, 0, 577, -2, 443,
	444, 468, 469, 470, 0, 0, 0, 0, 466, 448,
	0, 479, 480, 481, 482, 483, 484, 485, 486, 487,
	488, 489, 490, 493, 552, 553, 0, 491, 492, 501,
	363, 471, 0, 625, 31, 0, 365, 0, 0, 0,
	476, 579, 0, 476, 579, 0, 0, 0, 0, 574,
	571, 0, 0, 576, 0, 539, 0, 0, 0, 0,
	0, 364, 0, 0, 0, 0, 421, 0, 0, 0,
	0, 0, 0, 411, 0, 0, 414, 0, 0, 0,
	0, 408, 0, 0, 386, 892, 388, 0, 426, 0,
	0, 0, 409, 410, 430, 0, 430, 49, 430, 51,
	0, 425, 631, 56, 0, 0, 61, 62, 632, 633,
	634, 635, 0, 86, 213, 215, 218, 219, 220, 90,
	91, 92, 0, 0, 200, 0, 0, 194, 194, 0,
	192, 193, 88, 93, 160, 159, 105, 0, 167, 167,
	128, 129, 170, 0, 170, 170, 170, 0, 0, 122,
	123, 124, 116, 0, 117, 118, 119, 0, 120, 0,
	0, 0, 0, 75, 647, 76, 0, 266, 972, 0,
	972, 972, 312, 296, 0, 0, 313, 314, 319, 303,
	971, 248, 248, 662, 248, 248, 235, 650, 651, 652,
	653, 654, 655, 656, 657, 658, 659, 0, 77, 241,
	243, 242, 246, 0, 0, 0, 604, 605, 0, 597,
	27, 0, 642, 643, 588, 589, 376, 454, 456, 458,
	0, 363, 445, 466, 449, 0, 446, 0, 0, 440,
	0, 473, -2, 0, 508, 509, 0, 0, 0, 0,
	0, 545, 0, 0, 546, 0, 518, 594, 0, 572,
	0, 0, 521, 0, 540, 0, 0, 541, 542, 543,
	544, 619, 0, 0, -2, 0, 0, 430, 627, 0,
	379, 403, 405, 0, 400, 412, 413, 415, 0, 417,
	0, 419, 420, 383, 385, 0, 0, 426, 392, 0,
	0, 0, 594, 0, 430, 42, 43, 0, 59, 60,
	0, 0, 66, 171, 172, 0, 216, 0, 0, 0,
	187, 194, 194, 190, 195, 191, 0, 95, 96, 97,
	98, 99, 100, 162, 0, 0, 0, 166, 0, 174,
	176, 0, 101, 161, 0, 170, 170, 130, 0, 131,
	132, 133, 0, 149, 0, 0, 0, 0, 672, -2,
	69, 0, 269, 47, 279, 280, 315, 316, 317, 224,
	0, 971, 249, 250, 251, 252, 253, 254, 255, 256,
	257, 258, 259, 0, 971, 0, 0, 971, 663, 664,
	665, 666, 0, 0, 0, 80, 0, 0, 0, 0,
	608, 0, 28, 430, 0, 370, 578, 0, 447, 0,
	467, 450, 506, 366, 0, 151, 151, 557, 151, 155,
	560, 151, 562, 151, 565, 0, 0, 0, 0, 0,
	0, 0, 569, 520, 575, 0, 577, 0, 0, 35,
	0, 619, 609, 621, 623, 0, 31, 0, 615, 0,
	395, 594, 0, 0, 397, 404, 0, 0, 398, 0,
	399, 416, 418, 0, -2, 391, 0, 0, 0, 602,
	431, 41, 63, 64, 65, 214, 217, 0, 196, 151,
	199, 188, 189, 0, 163, 164, 0, 173, 175, 177,
	152, 126, 127, 168, 169, 167, 0, 167, 0, 156,
	0, 972, 73, 0, 267, 295, 0, 236, 227, 228,
	229, 0, 231, 232, 236, 0, 0, 240, 0, 78,
	79, 0, 0, 245, 590, 377, 507, 451, 510, 554,
	167, 558, 559, 561, 563, 564, 566, 512, 511, 0,
	0, 0, 0, 0, 0, 0, 573, 0, 0, 0,
	36, 0, 624, -2, 0, 0, 0, 53, 0, 602,
	628, 629, 401, 0, 406, 426, 389, 0, 0, 393,
	0, 0, 40, 179, 0, 198, 0, 165, 170, 150,
	170, 0, 0, 72, -2, 0, 971, 237, 0, 0,
	660, 661, 971, 236, 0, 81, 82, 0, 0, 0,
	592, 0, 555, 556, 0, 0, 0, 0, 547, 519,
	570, 0, 0, 0, 622, 0, -2, 0, 617, 616,
	396, 39, 0, 387, 426, 0, 427, 428, 429, 178,
	180, 0, 185, 0, 197, 0, 139, 140, 154, 157,
	74, 971, 226, 238, 230, 233, 971, 0, 0, 0,
	0, 247, 30, 0, 0, 513, 515, 514, 516, 0,
	0, 0, 536, 537, 0, 612, 31, 0, 402, 390,
	394, 181, 182, 0, 186, 184, 0, 225, 234, 0,
	261, 0, 83, 84, 77, 593, 591, 517, 0, 0,
	0, 620, -2, 618, 183, 0, 260, 0, 0, 80,
	548, 0, 551, 0, 262, 0, 244, 549, 0, 0,
	0, 201, 0, 0, 202, 203, 0, 0, 550, 204,
	0, 0, 0, 0, 0, 205, 207, 208, 0, 0,
	206, 263, 264, 209, 210, 211,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 77, 3, 3, 3, 104, 96, 3,
	56, 58, 101, 99, 57, 100, 114, 102, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 354,
	85, 84, 86, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 106, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 95, 3, 107,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 78, 79, 80, 81, 82, 83, 87, 88,
	89, 90, 91, 92, 93, 94, 97, 98, 103, 105,
	108, 109, 110, 111, 112, 113, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:337
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:342
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:343
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:347
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:371
		{
			setParseTree(yylex, nil)
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:377
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 27:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:385
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 28:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:389
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 29:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:395
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 30:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:402
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:408
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:412
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:418
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:422
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 35:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:429
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:441
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:453
		{
			yyVAL.str = InsertStr
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:457
		{
			yyVAL.str = ReplaceStr
		}
	case 39:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:463
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:469
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:473
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:477
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:481
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:486
		{
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:487
		{
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:491
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName.ToViewName()}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:495
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName.ToViewName())
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:501
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:505
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:511
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:515
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:520
		{
			yyVAL.partitions = nil
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:524
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:530
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:534
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:538
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:542
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:548
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:552
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:558
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:562
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:566
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:572
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:576
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:580
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:584
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:590
		{
			yyVAL.str = SessionStr
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:594
		{
			yyVAL.str = GlobalStr
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:599
		{
			yyVAL.int = yyPosition(yylex)
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:605
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:610
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 72:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:616
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 73:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:621
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[3].tableName.ToViewName(), ViewExpr: yyDollar[6].selStmt, ViewSelectPositionStart: yyDollar[5].int, ViewSelectPositionEnd: yyDollar[7].int - 1}
		}
	case 74:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:625
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[5].tableName.ToViewName(), ViewExpr: yyDollar[8].selStmt, ViewSelectPositionStart: yyDollar[7].int, ViewSelectPositionEnd: yyDollar[9].int - 1, OrReplace: true}
		}
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:629
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:633
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:638
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:642
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:648
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:653
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:658
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:664
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:669
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:675
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:681
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName, IfNotExists: ne}
			setDDL(yylex, yyVAL.ddl)
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:692
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:699
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:703
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:709
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:714
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:718
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:722
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:728
		{
			if err := yyDollar[2].columnType.merge(yyDollar[3].columnType); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:737
		{
			yyVAL.columnType = ColumnType{}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:741
		{
			opt := ColumnType{NotNull: yyDollar[2].boolVal, sawnull: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:750
		{
			opt := ColumnType{Default: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:759
		{
			opt := ColumnType{OnUpdate: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:768
		{
			opt := ColumnType{Autoincrement: yyDollar[2].boolVal, sawai: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:777
		{
			opt := ColumnType{KeyOpt: yyDollar[2].colKeyOpt}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:786
		{
			opt := ColumnType{Comment: yyDollar[2].sqlVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:797
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:808
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:813
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:819
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:823
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:827
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:831
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:835
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:839
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:843
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:847
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:851
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:857
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:863
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:869
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:875
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:881
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:889
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:893
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:897
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:901
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:905
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:911
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:915
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:919
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:923
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:927
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:931
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:935
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:939
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:943
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:947
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:951
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:955
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:959
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:963
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 140:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:968
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:974
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:978
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:982
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:986
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:990
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:994
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:998
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1002
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1008
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1013
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1018
		{
			yyVAL.sqlVal = nil
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1022
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1027
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 154:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1031
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1039
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1043
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 157:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1049
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1057
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1061
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1066
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1070
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1077
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1081
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1087
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1093
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1099
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1104
		{
			yyVAL.str = ""
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1108
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1112
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1117
		{
			yyVAL.str = ""
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1121
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1125
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1131
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1135
		{
			yyVAL.colKeyOpt = colKey
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1139
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1143
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1149
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 178:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1155
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 179:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1159
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1165
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1169
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1175
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1179
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1184
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1190
		{
			yyVAL.str = ""
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1194
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1200
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1204
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1208
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1212
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1216
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1222
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1226
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1231
		{
			yyVAL.str = ""
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1235
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1241
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1245
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1251
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1257
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1261
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 201:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1268
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 202:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1272
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 203:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1276
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 204:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1280
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1286
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1292
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1298
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1302
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1306
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1310
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1314
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 212:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1319
		{
			yyVAL.str = ""
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1323
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1327
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1335
		{
			yyVAL.str = yyDollar[1].str
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1339
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1343
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1349
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1353
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1357
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 224:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1368
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1372
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			ddl.Column = yyDollar[8].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 226:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1379
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1386
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 228:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1390
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: DropStr, Column: NewColIdent(string(yyDollar[7].bytes)), Table: yyDollar[4].tableName}
		}
	case 229:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1394
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 230:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1398
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: RenameStr, Table: yyDollar[4].tableName, Column: NewColIdent(string(yyDollar[7].bytes)), ToColumn: NewColIdent(string(yyDollar[9].bytes))}
		}
	case 231:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1402
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 232:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1407
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 233:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1412
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ModifyStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 234:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1419
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ChangeStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, Column: NewColIdent(string(yyDollar[7].bytes)), ColumnOrder: yyDollar[9].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			yyVAL.statement = ddl
		}
	case 235:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1425
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 236:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1430
		{
			yyVAL.columnOrder = nil
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1434
		{
			yyVAL.columnOrder = &ColumnOrder{First: true}
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1438
		{
			yyVAL.columnOrder = &ColumnOrder{AfterColumn: NewColIdent(string(yyDollar[2].bytes))}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1444
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 240:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1450
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 241:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1462
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 242:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1472
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 243:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1476
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 244:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1480
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 245:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1493
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 246:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1503
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 247:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1507
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 248:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1520
		{
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1522
		{
		}
	case 260:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1538
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1544
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1548
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 263:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1554
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 264:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1558
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1564
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1570
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 267:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1574
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1582
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 269:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1590
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1595
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromViews: yyDollar[4].tableNames, IfExists: exists}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1603
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1607
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1613
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1617
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1622
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1628
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1633
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1637
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1641
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1645
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1650
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1654
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1658
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1662
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1666
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1670
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1674
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1678
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1682
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1686
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1690
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1694
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1698
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1702
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1706
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 296:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1711
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1721
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1725
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1729
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1735
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1740
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1744
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1748
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1752
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1766
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1772
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1776
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1782
		{
			yyVAL.str = ""
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1786
		{
			yyVAL.str = "full "
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1792
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1796
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1802
		{
			yyVAL.str = ""
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1806
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1810
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1816
		{
			yyVAL.showFilter = nil
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1820
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1824
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1830
		{
			yyVAL.showFilter = nil
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1834
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1840
		{
			yyVAL.str = ""
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1844
		{
			yyVAL.str = SessionStr
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1848
		{
			yyVAL.str = GlobalStr
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1854
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1858
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1864
		{
			yyVAL.statement = &Begin{}
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1868
		{
			yyVAL.statement = &Begin{}
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1874
		{
			yyVAL.statement = &Commit{}
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1880
		{
			yyVAL.statement = &Rollback{}
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1885
		{
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1886
		{
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1890
		{
			yyVAL.statement = &Explain{ExplainFormat: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1894
		{
			yyVAL.statement = &Explain{Analyze: true, ExplainFormat: TreeStr, Statement: yyDollar[3].selStmt}
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1900
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1908
		{
			yyVAL.str = ""
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1912
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1923
		{
			yyVAL.statement = &Show{Type: "columns", OnTable: yyDollar[2].tableName}
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1927
		{
			yyVAL.statement = &OtherRead{}
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1933
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1937
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1941
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1945
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1951
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1955
		{
			setAllowComments(yylex, true)
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1959
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1965
		{
			yyVAL.bytes2 = nil
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1969
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1975
		{
			yyVAL.str = UnionStr
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1979
		{
			yyVAL.str = UnionAllStr
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1983
		{
			yyVAL.str = UnionDistinctStr
		}
	case 355:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1988
		{
			yyVAL.str = ""
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1992
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1996
		{
			yyVAL.str = SQLCacheStr
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2001
		{
			yyVAL.str = ""
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2005
		{
			yyVAL.str = ""
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2009
		{
			yyVAL.str = DistinctStr
		}
	case 361:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2014
		{
			yyVAL.str = ""
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2018
		{
			yyVAL.str = StraightJoinHint
		}
	case 363:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2023
		{
			yyVAL.selectExprs = nil
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2027
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2033
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2037
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2043
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2047
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2051
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 370:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2055
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2060
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2064
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2068
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2075
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2080
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2084
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2090
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2094
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2104
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2108
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2112
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2118
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2124
		{
			yyVAL.aliasedTableName = yyDollar[2].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
		}
	case 387:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2129
		{
			yyVAL.aliasedTableName = yyDollar[6].aliasedTableName
			yyVAL.aliasedTableName.Expr = yyDollar[1].tableName
			yyVAL.aliasedTableName.Partitions = yyDollar[4].partitions
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2140
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Hints: yyDollar[1].indexHints}
		}
	case 389:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2144
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, Hints: yyDollar[4].indexHints}
		}
	case 390:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2148
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{AsOf: &AsOf{Time: yyDollar[3].expr}, As: yyDollar[5].tableIdent, Hints: yyDollar[6].indexHints}
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2152
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2156
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{As: yyDollar[1].tableIdent, Hints: yyDollar[2].indexHints}
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2168
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2172
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2178
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2182
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 397:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2195
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 398:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2199
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 399:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2203
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2207
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2213
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 402:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2215
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 403:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2219
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2221
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 405:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2225
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2227
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 407:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2230
		{
			yyVAL.empty = struct{}{}
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2232
		{
			yyVAL.empty = struct{}{}
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2237
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2243
		{
			yyVAL.str = JoinStr
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2247
		{
			yyVAL.str = JoinStr
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2251
		{
			yyVAL.str = JoinStr
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2257
		{
			yyVAL.str = StraightJoinStr
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2263
		{
			yyVAL.str = LeftJoinStr
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2267
		{
			yyVAL.str = LeftJoinStr
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2271
		{
			yyVAL.str = RightJoinStr
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2275
		{
			yyVAL.str = RightJoinStr
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2281
		{
			yyVAL.str = NaturalJoinStr
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2285
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2295
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2299
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2305
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2309
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2315
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 426:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2320
		{
			yyVAL.indexHints = nil
		}
	case 427:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2324
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 428:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2328
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 429:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2332
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2337
		{
			yyVAL.expr = nil
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2341
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2347
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2351
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2355
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2359
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2363
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2367
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2371
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 439:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2377
		{
			yyVAL.str = ""
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2381
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2387
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2391
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2397
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2401
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 445:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2405
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 446:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2409
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 447:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2413
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2417
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 449:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2421
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 450:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2425
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 451:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2429
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2433
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2439
		{
			yyVAL.str = IsNullStr
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2443
		{
			yyVAL.str = IsNotNullStr
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2447
		{
			yyVAL.str = IsTrueStr
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2451
		{
			yyVAL.str = IsNotTrueStr
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2455
		{
			yyVAL.str = IsFalseStr
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2459
		{
			yyVAL.str = IsNotFalseStr
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2465
		{
			yyVAL.str = EqualStr
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2469
		{
			yyVAL.str = LessThanStr
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2473
		{
			yyVAL.str = GreaterThanStr
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2477
		{
			yyVAL.str = LessEqualStr
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2481
		{
			yyVAL.str = GreaterEqualStr
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2485
		{
			yyVAL.str = NotEqualStr
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2489
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2494
		{
			yyVAL.expr = nil
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2498
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2504
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2508
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2512
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2518
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2524
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2528
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2534
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2538
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2542
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2546
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2550
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2554
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2558
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2562
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2566
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2570
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2574
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2578
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2582
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2586
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2590
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2594
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2598
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2602
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2606
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2610
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2614
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2618
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2622
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2626
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2634
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2648
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2652
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2656
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 506:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2674
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: yyDollar[3].str == DistinctStr, Exprs: yyDollar[4].selectExprs}
		}
	case 507:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2678
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 508:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2688
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 509:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2692
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 510:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2696
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 511:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2700
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 512:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2704
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 513:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2708
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 514:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2712
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 515:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2716
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 516:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2720
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 517:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2724
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2728
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("first"), Exprs: yyDollar[3].selectExprs}
		}
	case 519:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2732
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 520:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2736
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 521:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2740
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2750
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2754
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2758
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2763
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2768
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2773
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2779
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2784
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2789
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2793
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2797
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2802
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2807
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2812
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 536:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2816
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 537:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2820
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2830
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 541:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2840
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 542:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2844
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 543:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2848
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 544:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2852
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 545:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2856
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 546:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2860
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 547:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2866
		{
			yyVAL.str = ""
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2870
		{
			yyVAL.str = BooleanModeStr
		}
	case 549:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2874
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 550:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2878
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2882
		{
			yyVAL.str = QueryExpansionStr
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2888
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2892
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2898
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2902
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2906
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2910
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2914
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2918
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2924
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2928
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2932
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2936
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2940
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2944
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2948
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2953
		{
			yyVAL.expr = nil
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2957
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2962
		{
			yyVAL.str = string("")
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2966
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2972
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2976
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 573:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2982
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 574:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2987
		{
			yyVAL.expr = nil
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2991
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2997
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3001
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 578:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3005
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3011
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3015
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3019
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3023
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3027
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3031
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3035
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3039
		{
			yyVAL.expr = &NullVal{}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3045
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3054
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3058
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3063
		{
			yyVAL.exprs = nil
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3067
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3072
		{
			yyVAL.expr = nil
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3076
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 594:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3081
		{
			yyVAL.orderBy = nil
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3085
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3091
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3095
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3101
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 599:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3106
		{
			yyVAL.str = AscScr
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3110
		{
			yyVAL.str = AscScr
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3114
		{
			yyVAL.str = DescScr
		}
	case 602:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3119
		{
			yyVAL.limit = nil
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3123
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 604:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3127
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 605:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3131
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 606:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3136
		{
			yyVAL.str = ""
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3140
		{
			yyVAL.str = ForUpdateStr
		}
	case 608:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3144
		{
			yyVAL.str = ShareModeStr
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3157
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3161
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3165
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 612:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3170
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 613:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3174
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 614:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3178
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3185
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3189
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3193
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 618:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3197
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 619:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3202
		{
			yyVAL.updateExprs = nil
		}
	case 620:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3206
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3212
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3216
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3222
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3226
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3232
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3238
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3248
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3252
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3258
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3264
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3268
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3274
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3278
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3282
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3286
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3293
		{
			yyVAL.bytes = []byte("charset")
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3300
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3304
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3308
		{
			yyVAL.expr = &Default{}
		}
	case 644:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3317
		{
			yyVAL.byt = 0
		}
	case 645:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3319
		{
			yyVAL.byt = 1
		}
	case 646:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3322
		{
			yyVAL.byt = 0
		}
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3324
		{
			yyVAL.byt = 1
		}
	case 648:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3327
		{
			yyVAL.str = ""
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3329
		{
			yyVAL.str = IgnoreStr
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3333
		{
			yyVAL.empty = struct{}{}
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3335
		{
			yyVAL.empty = struct{}{}
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3337
		{
			yyVAL.empty = struct{}{}
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3339
		{
			yyVAL.empty = struct{}{}
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3341
		{
			yyVAL.empty = struct{}{}
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3343
		{
			yyVAL.empty = struct{}{}
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3345
		{
			yyVAL.empty = struct{}{}
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3347
		{
			yyVAL.empty = struct{}{}
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3349
		{
			yyVAL.empty = struct{}{}
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3351
		{
			yyVAL.empty = struct{}{}
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3355
		{
			yyVAL.empty = struct{}{}
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3357
		{
			yyVAL.empty = struct{}{}
		}
	case 662:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3360
		{
			yyVAL.empty = struct{}{}
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3362
		{
			yyVAL.empty = struct{}{}
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3364
		{
			yyVAL.empty = struct{}{}
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3368
		{
			yyVAL.empty = struct{}{}
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3370
		{
			yyVAL.empty = struct{}{}
		}
	case 667:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3373
		{
			yyVAL.empty = struct{}{}
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3375
		{
			yyVAL.empty = struct{}{}
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3377
		{
			yyVAL.empty = struct{}{}
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3379
		{
			yyVAL.empty = struct{}{}
		}
	case 671:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3382
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 672:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3384
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3388
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3392
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3399
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3405
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3409
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3416
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3730
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3739
		{
			decNesting(yylex)
		}
	case 971:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3744
		{
			skipToEnd(yylex)
		}
	case 972:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3749
		{
			skipToEnd(yylex)
		}
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3753
		{
			skipToEnd(yylex)
		}
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3757
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
