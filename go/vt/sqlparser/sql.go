//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func yyPosition(yylex interface{}) int {
	return yylex.(*Tokenizer).Position
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:57
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	int                  int
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	asOf                 *AsOf
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	columnOrder          *ColumnOrder
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const UNLOCK = 57373
const KEYS = 57374
const UNIQUE = 57375
const KEY = 57376
const SYSTEM_TIME = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const USING = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const INTEGRAL = 57401
const FLOAT = 57402
const HEXNUM = 57403
const VALUE_ARG = 57404
const LIST_ARG = 57405
const COMMENT = 57406
const COMMENT_KEYWORD = 57407
const BIT_LITERAL = 57408
const NULL = 57409
const TRUE = 57410
const FALSE = 57411
const OFF = 57412
const OR = 57413
const AND = 57414
const NOT = 57415
const BETWEEN = 57416
const CASE = 57417
const WHEN = 57418
const THEN = 57419
const ELSE = 57420
const END = 57421
const LE = 57422
const GE = 57423
const NE = 57424
const NULL_SAFE_EQUAL = 57425
const IS = 57426
const LIKE = 57427
const REGEXP = 57428
const IN = 57429
const SHIFT_LEFT = 57430
const SHIFT_RIGHT = 57431
const DIV = 57432
const MOD = 57433
const UNARY = 57434
const COLLATE = 57435
const BINARY = 57436
const UNDERSCORE_BINARY = 57437
const UNDERSCORE_UTF8MB4 = 57438
const INTERVAL = 57439
const JSON_EXTRACT_OP = 57440
const JSON_UNQUOTE_EXTRACT_OP = 57441
const CREATE = 57442
const ALTER = 57443
const DROP = 57444
const RENAME = 57445
const ANALYZE = 57446
const ADD = 57447
const FLUSH = 57448
const MODIFY = 57449
const CHANGE = 57450
const SCHEMA = 57451
const TABLE = 57452
const INDEX = 57453
const VIEW = 57454
const TO = 57455
const IGNORE = 57456
const IF = 57457
const PRIMARY = 57458
const COLUMN = 57459
const SPATIAL = 57460
const FULLTEXT = 57461
const KEY_BLOCK_SIZE = 57462
const CHECK = 57463
const ACTION = 57464
const CASCADE = 57465
const CONSTRAINT = 57466
const FOREIGN = 57467
const NO = 57468
const REFERENCES = 57469
const RESTRICT = 57470
const FIRST = 57471
const AFTER = 57472
const SHOW = 57473
const DESCRIBE = 57474
const EXPLAIN = 57475
const DATE = 57476
const ESCAPE = 57477
const REPAIR = 57478
const OPTIMIZE = 57479
const TRUNCATE = 57480
const FORMAT = 57481
const MAXVALUE = 57482
const PARTITION = 57483
const REORGANIZE = 57484
const LESS = 57485
const THAN = 57486
const PROCEDURE = 57487
const TRIGGER = 57488
const VINDEX = 57489
const VINDEXES = 57490
const STATUS = 57491
const VARIABLES = 57492
const WARNINGS = 57493
const SEQUENCE = 57494
const BEGIN = 57495
const START = 57496
const TRANSACTION = 57497
const COMMIT = 57498
const ROLLBACK = 57499
const BIT = 57500
const TINYINT = 57501
const SMALLINT = 57502
const MEDIUMINT = 57503
const INT = 57504
const INTEGER = 57505
const BIGINT = 57506
const INTNUM = 57507
const REAL = 57508
const DOUBLE = 57509
const FLOAT_TYPE = 57510
const DECIMAL = 57511
const NUMERIC = 57512
const TIME = 57513
const TIMESTAMP = 57514
const DATETIME = 57515
const YEAR = 57516
const CHAR = 57517
const VARCHAR = 57518
const BOOL = 57519
const CHARACTER = 57520
const VARBINARY = 57521
const NCHAR = 57522
const TEXT = 57523
const TINYTEXT = 57524
const MEDIUMTEXT = 57525
const LONGTEXT = 57526
const BLOB = 57527
const TINYBLOB = 57528
const MEDIUMBLOB = 57529
const LONGBLOB = 57530
const JSON = 57531
const ENUM = 57532
const GEOMETRY = 57533
const POINT = 57534
const LINESTRING = 57535
const POLYGON = 57536
const GEOMETRYCOLLECTION = 57537
const MULTIPOINT = 57538
const MULTILINESTRING = 57539
const MULTIPOLYGON = 57540
const NULLX = 57541
const AUTO_INCREMENT = 57542
const APPROXNUM = 57543
const SIGNED = 57544
const UNSIGNED = 57545
const ZEROFILL = 57546
const COLLATION = 57547
const DATABASES = 57548
const SCHEMAS = 57549
const TABLES = 57550
const VITESS_METADATA = 57551
const VSCHEMA = 57552
const FULL = 57553
const PROCESSLIST = 57554
const COLUMNS = 57555
const FIELDS = 57556
const ENGINES = 57557
const PLUGINS = 57558
const NAMES = 57559
const CHARSET = 57560
const GLOBAL = 57561
const SESSION = 57562
const ISOLATION = 57563
const LEVEL = 57564
const READ = 57565
const WRITE = 57566
const ONLY = 57567
const REPEATABLE = 57568
const COMMITTED = 57569
const UNCOMMITTED = 57570
const SERIALIZABLE = 57571
const CURRENT_TIMESTAMP = 57572
const DATABASE = 57573
const CURRENT_DATE = 57574
const CURRENT_TIME = 57575
const LOCALTIME = 57576
const LOCALTIMESTAMP = 57577
const UTC_DATE = 57578
const UTC_TIME = 57579
const UTC_TIMESTAMP = 57580
const REPLACE = 57581
const CONVERT = 57582
const CAST = 57583
const SUBSTR = 57584
const SUBSTRING = 57585
const GROUP_CONCAT = 57586
const SEPARATOR = 57587
const TIMESTAMPADD = 57588
const TIMESTAMPDIFF = 57589
const MATCH = 57590
const AGAINST = 57591
const BOOLEAN = 57592
const LANGUAGE = 57593
const WITH = 57594
const QUERY = 57595
const EXPANSION = 57596
const UNUSED = 57597
const ARRAY = 57598
const CUME_DIST = 57599
const DESCRIPTION = 57600
const DENSE_RANK = 57601
const EMPTY = 57602
const EXCEPT = 57603
const FIRST_VALUE = 57604
const GROUPING = 57605
const GROUPS = 57606
const JSON_TABLE = 57607
const LAG = 57608
const LAST_VALUE = 57609
const LATERAL = 57610
const LEAD = 57611
const MEMBER = 57612
const NTH_VALUE = 57613
const NTILE = 57614
const OF = 57615
const OVER = 57616
const PERCENT_RANK = 57617
const RANK = 57618
const RECURSIVE = 57619
const ROW_NUMBER = 57620
const SYSTEM = 57621
const WINDOW = 57622
const ACTIVE = 57623
const ADMIN = 57624
const BUCKETS = 57625
const CLONE = 57626
const COMPONENT = 57627
const DEFINITION = 57628
const ENFORCED = 57629
const EXCLUDE = 57630
const FOLLOWING = 57631
const GEOMCOLLECTION = 57632
const GET_MASTER_PUBLIC_KEY = 57633
const HISTOGRAM = 57634
const HISTORY = 57635
const INACTIVE = 57636
const INVISIBLE = 57637
const LOCKED = 57638
const MASTER_COMPRESSION_ALGORITHMS = 57639
const MASTER_PUBLIC_KEY_PATH = 57640
const MASTER_TLS_CIPHERSUITES = 57641
const MASTER_ZSTD_COMPRESSION_LEVEL = 57642
const NESTED = 57643
const NETWORK_NAMESPACE = 57644
const NOWAIT = 57645
const NULLS = 57646
const OJ = 57647
const OLD = 57648
const OPTIONAL = 57649
const ORDINALITY = 57650
const ORGANIZATION = 57651
const OTHERS = 57652
const PATH = 57653
const PERSIST = 57654
const PERSIST_ONLY = 57655
const PRECEDING = 57656
const PRIVILEGE_CHECKS_USER = 57657
const PROCESS = 57658
const RANDOM = 57659
const REFERENCE = 57660
const REQUIRE_ROW_FORMAT = 57661
const RESOURCE = 57662
const RESPECT = 57663
const RESTART = 57664
const RETAIN = 57665
const REUSE = 57666
const ROLE = 57667
const SECONDARY = 57668
const SECONDARY_ENGINE = 57669
const SECONDARY_LOAD = 57670
const SECONDARY_UNLOAD = 57671
const SKIP = 57672
const SRID = 57673
const THREAD_PRIORITY = 57674
const TIES = 57675
const UNBOUNDED = 57676
const VCPU = 57677
const VISIBLE = 57678

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"UNIQUE",
	"KEY",
	"SYSTEM_TIME",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"MODIFY",
	"CHANGE",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"FIRST",
	"AFTER",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"FORMAT",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 31,
	-2, 4,
	-1, 41,
	166, 320,
	167, 320,
	-2, 308,
	-1, 48,
	1, 970,
	354, 970,
	-2, 339,
	-1, 329,
	114, 676,
	-2, 672,
	-1, 330,
	114, 677,
	-2, 673,
	-1, 399,
	84, 926,
	-2, 67,
	-1, 400,
	84, 844,
	-2, 68,
	-1, 405,
	84, 813,
	-2, 635,
	-1, 407,
	84, 874,
	-2, 637,
	-1, 584,
	5, 31,
	-2, 333,
	-1, 588,
	5, 31,
	-2, 332,
	-1, 713,
	1, 384,
	5, 384,
	12, 384,
	13, 384,
	14, 384,
	15, 384,
	17, 384,
	29, 384,
	30, 384,
	44, 384,
	45, 384,
	46, 384,
	47, 384,
	48, 384,
	50, 384,
	51, 384,
	54, 384,
	55, 384,
	57, 384,
	58, 384,
	354, 384,
	-2, 405,
	-1, 716,
	55, 48,
	57, 48,
	-2, 52,
	-1, 866,
	114, 679,
	-2, 675,
	-1, 1092,
	5, 32,
	-2, 471,
	-1, 1124,
	5, 31,
	-2, 609,
	-1, 1145,
	1, 407,
	5, 407,
	12, 407,
	13, 407,
	14, 407,
	15, 407,
	17, 407,
	29, 407,
	30, 407,
	44, 407,
	45, 407,
	46, 407,
	47, 407,
	48, 407,
	50, 407,
	51, 407,
	52, 407,
	53, 407,
	54, 407,
	55, 407,
	57, 407,
	58, 407,
	131, 407,
	354, 407,
	-2, 405,
	-1, 1205,
	5, 31,
	-2, 69,
	-1, 1397,
	5, 32,
	-2, 610,
	-1, 1431,
	5, 31,
	-2, 69,
	-1, 1463,
	5, 31,
	-2, 612,
	-1, 1542,
	5, 32,
	-2, 613,
}

const yyPrivate = 57344

const yyLast = 15411

var yyAct = [...]int{

	330, 1581, 1571, 1530, 668, 1422, 1241, 1443, 1361, 334,
	1476, 360, 1433, 1127, 975, 1288, 308, 347, 297, 1322,
	1002, 1289, 531, 1021, 1295, 1128, 1285, 1016, 1169, 1033,
	336, 950, 984, 667, 3, 948, 1301, 64, 1148, 974,
	98, 1260, 971, 98, 806, 1086, 891, 404, 904, 98,
	1217, 928, 821, 1198, 939, 988, 709, 868, 729, 600,
	918, 1012, 605, 728, 398, 1216, 361, 54, 298, 299,
	932, 393, 302, 332, 98, 409, 611, 317, 395, 98,
	620, 98, 537, 683, 390, 718, 63, 1473, 303, 98,
	684, 7, 1574, 554, 68, 98, 1555, 710, 6, 5,
	1569, 373, 996, 379, 380, 377, 378, 376, 375, 374,
	1540, 1566, 1362, 1554, 1539, 1052, 1277, 381, 382, 321,
	1389, 54, 70, 71, 72, 73, 74, 536, 1051, 1317,
	1318, 1316, 559, 313, 965, 929, 85, 1507, 633, 632,
	642, 643, 635, 636, 637, 638, 639, 640, 641, 634,
	581, 26, 644, 55, 29, 30, 966, 967, 730, 1056,
	731, 93, 89, 90, 91, 301, 539, 540, 1050, 1157,
	300, 1189, 1156, 995, 576, 1158, 1003, 81, 577, 574,
	575, 305, 1450, 307, 1243, 1380, 1378, 292, 923, 834,
	579, 1228, 1224, 569, 570, 1245, 833, 831, 1568, 558,
	561, 61, 563, 1531, 1565, 1240, 1147, 933, 1525, 989,
	580, 1434, 1435, 1589, 1218, 1585, 538, 544, 1047, 1042,
	1043, 307, 1041, 1207, 1044, 1045, 294, 1261, 798, 83,
	84, 835, 80, 832, 1438, 560, 562, 1244, 87, 86,
	1477, 633, 632, 642, 643, 635, 636, 637, 638, 639,
	640, 641, 634, 1479, 792, 644, 1410, 1412, 1054, 1057,
	1472, 295, 991, 1471, 991, 1470, 534, 594, 1263, 98,
	268, 88, 409, 1064, 409, 409, 1063, 409, 409, 306,
	409, 1514, 409, 92, 656, 657, 1223, 1170, 409, 1400,
	1247, 1225, 1218, 1226, 1222, 1049, 1219, 1153, 1087, 1220,
	1221, 599, 556, 1265, 1113, 1269, 98, 1264, 1102, 1262,
	1099, 359, 1508, 1080, 1267, 840, 1227, 1048, 1003, 590,
	591, 557, 1478, 1266, 409, 724, 1583, 584, 588, 1584,
	1538, 1582, 624, 550, 972, 1411, 1268, 1270, 555, 961,
	555, 555, 1437, 555, 555, 1337, 555, 608, 555, 607,
	634, 82, 644, 644, 555, 822, 990, 1053, 990, 837,
	54, 54, 654, 77, 596, 826, 597, 564, 565, 598,
	566, 567, 1055, 568, 1035, 571, 619, 401, 987, 991,
	54, 582, 1235, 618, 617, 585, 403, 1523, 98, 98,
	98, 875, 587, 586, 1237, 653, 1338, 409, 655, 78,
	619, 56, 617, 409, 532, 873, 874, 872, 1496, 609,
	1299, 1279, 656, 657, 656, 657, 732, 589, 619, 713,
	708, 919, 919, 1110, 532, 794, 666, 1386, 670, 671,
	672, 673, 674, 675, 676, 677, 678, 679, 823, 682,
	685, 685, 685, 691, 685, 685, 691, 685, 699, 700,
	701, 702, 703, 704, 1034, 714, 543, 530, 686, 688,
	690, 692, 694, 696, 697, 687, 689, 1328, 693, 695,
	614, 698, 1524, 990, 717, 726, 1181, 722, 985, 61,
	986, 1186, 1185, 304, 618, 617, 983, 989, 1236, 871,
	1234, 1281, 592, 1547, 1231, 1077, 1078, 1079, 1590, 24,
	1429, 619, 1182, 633, 632, 642, 643, 635, 636, 637,
	638, 639, 640, 641, 634, 1428, 1187, 644, 1179, 858,
	860, 861, 1202, 1201, 1180, 859, 892, 1190, 893, 1519,
	1457, 98, 635, 636, 637, 638, 639, 640, 641, 634,
	1591, 98, 644, 1159, 98, 1160, 1426, 98, 546, 547,
	548, 98, 1333, 409, 409, 387, 388, 1213, 1199, 1038,
	409, 409, 98, 409, 409, 1521, 312, 843, 844, 1491,
	409, 409, 637, 638, 639, 640, 641, 634, 1490, 1350,
	644, 1184, 532, 403, 532, 403, 403, 1364, 403, 403,
	1098, 403, 1359, 403, 839, 98, 409, 1355, 808, 403,
	98, 642, 643, 635, 636, 637, 638, 639, 640, 641,
	634, 409, 1097, 644, 1096, 1353, 98, 618, 617, 555,
	555, 1170, 409, 1165, 845, 1031, 555, 555, 799, 555,
	555, 618, 617, 838, 619, 622, 555, 555, 1030, 869,
	811, 812, 618, 617, 1482, 1567, 809, 810, 619, 894,
	618, 617, 323, 813, 814, 828, 816, 817, 870, 619,
	1482, 593, 555, 818, 819, 1183, 409, 619, 805, 864,
	804, 795, 866, 350, 349, 352, 353, 354, 355, 1550,
	593, 593, 351, 356, 793, 908, 911, 847, 790, 830,
	1482, 1534, 920, 1482, 1515, 1482, 1481, 1402, 593, 401,
	409, 409, 862, 552, 902, 1420, 1419, 98, 403, 1399,
	593, 1344, 1343, 1488, 734, 98, 1340, 1341, 1486, 98,
	98, 26, 54, 98, 98, 98, 409, 1340, 1339, 1485,
	895, 896, 936, 593, 1093, 593, 720, 670, 545, 409,
	900, 593, 720, 898, 1122, 713, 739, 738, 1334, 713,
	956, 1123, 1286, 713, 958, 1298, 916, 941, 944, 945,
	946, 942, 979, 943, 947, 1149, 992, 1302, 1303, 1250,
	26, 61, 808, 1149, 1004, 1005, 1006, 65, 935, 1298,
	721, 951, 723, 900, 1395, 714, 721, 954, 719, 714,
	962, 963, 26, 98, 409, 959, 409, 846, 98, 98,
	1462, 955, 98, 719, 1495, 936, 936, 903, 905, 1342,
	936, 910, 913, 914, 915, 1093, 1161, 1018, 1298, 1093,
	61, 98, 964, 98, 98, 1093, 1116, 1115, 98, 1029,
	719, 725, 98, 98, 98, 98, 98, 927, 841, 930,
	931, 797, 61, 61, 1559, 314, 1445, 997, 1014, 1015,
	1407, 998, 999, 1000, 1001, 1017, 899, 901, 1327, 1164,
	555, 1013, 555, 1008, 403, 403, 1007, 1009, 1010, 1011,
	1576, 403, 403, 593, 403, 403, 1302, 1303, 1242, 1446,
	1020, 403, 403, 1572, 869, 1068, 1305, 1023, 866, 1025,
	941, 944, 945, 946, 942, 61, 943, 947, 1286, 1203,
	853, 827, 801, 870, 1069, 1070, 1141, 403, 945, 946,
	633, 632, 642, 643, 635, 636, 637, 638, 639, 640,
	641, 634, 849, 1139, 644, 1308, 1137, 865, 1140, 1307,
	1082, 1138, 1081, 622, 1136, 1135, 403, 98, 98, 98,
	98, 98, 318, 319, 1563, 1129, 1553, 1246, 1065, 98,
	1090, 1561, 98, 1075, 612, 613, 98, 1074, 327, 1311,
	1460, 1332, 602, 606, 1331, 1172, 1124, 713, 713, 713,
	713, 713, 610, 1166, 601, 409, 1194, 897, 1109, 625,
	737, 553, 713, 1393, 1441, 902, 713, 1150, 1076, 1162,
	1024, 800, 1416, 1130, 921, 1151, 1133, 1152, 949, 1125,
	1126, 1206, 1142, 714, 714, 714, 714, 714, 612, 613,
	309, 925, 926, 791, 669, 315, 316, 1171, 951, 1191,
	1192, 409, 714, 1154, 681, 1073, 1146, 1501, 401, 409,
	98, 409, 409, 1072, 310, 1131, 1132, 403, 1134, 65,
	1500, 976, 1167, 1168, 1448, 1193, 1149, 1195, 1196, 1197,
	403, 578, 1107, 1578, 1577, 1205, 1103, 1100, 820, 1215,
	615, 1578, 1200, 1511, 1330, 67, 953, 69, 47, 62,
	1, 1570, 98, 1363, 1442, 1046, 1529, 1475, 1321, 982,
	973, 409, 76, 1089, 529, 1212, 75, 1522, 54, 981,
	980, 1092, 1094, 1230, 1095, 555, 1177, 555, 555, 1101,
	1176, 1173, 1104, 1105, 1106, 403, 1188, 403, 1229, 1112,
	1238, 1239, 994, 1114, 1175, 1174, 1117, 1118, 1178, 1119,
	1120, 745, 1208, 743, 1210, 1211, 409, 409, 744, 1254,
	742, 747, 1129, 1253, 746, 1290, 1287, 993, 741, 1144,
	1272, 280, 1259, 865, 1271, 1278, 396, 1145, 1309, 1413,
	733, 1019, 403, 616, 48, 1436, 1232, 79, 1068, 1292,
	1233, 866, 409, 1040, 409, 409, 1297, 825, 572, 573,
	1306, 282, 652, 1071, 1155, 402, 952, 1293, 1320, 603,
	842, 1310, 604, 1499, 1447, 1108, 1313, 680, 917, 1315,
	1291, 335, 54, 857, 348, 345, 1325, 1326, 1324, 346,
	848, 1319, 1121, 626, 98, 333, 325, 1409, 98, 712,
	705, 940, 938, 937, 1312, 802, 391, 1304, 1300, 96,
	711, 1249, 291, 293, 1388, 1506, 852, 28, 96, 1346,
	1347, 824, 66, 98, 1335, 1336, 1352, 320, 19, 1351,
	18, 409, 1349, 17, 409, 409, 409, 921, 409, 1354,
	324, 98, 1357, 394, 583, 20, 21, 22, 96, 16,
	96, 1358, 15, 14, 541, 32, 36, 35, 96, 34,
	855, 856, 10, 23, 96, 13, 12, 976, 11, 1258,
	9, 713, 1369, 8, 4, 311, 403, 25, 1368, 2,
	0, 0, 0, 1376, 0, 0, 658, 659, 660, 661,
	662, 663, 664, 665, 0, 0, 0, 0, 1129, 0,
	0, 98, 0, 409, 1394, 0, 0, 714, 0, 0,
	409, 0, 0, 669, 1404, 0, 906, 907, 409, 0,
	1418, 0, 1204, 0, 1162, 1403, 0, 1417, 0, 0,
	403, 0, 403, 403, 1387, 0, 409, 0, 1424, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1425, 0, 1427, 409, 1373, 1374, 0, 1375, 0, 0,
	1377, 1439, 1379, 1432, 0, 0, 0, 0, 0, 0,
	0, 1431, 1440, 1252, 0, 970, 0, 0, 0, 0,
	0, 0, 403, 0, 0, 1449, 0, 0, 0, 0,
	409, 409, 0, 409, 0, 0, 0, 1290, 409, 0,
	0, 0, 555, 1469, 54, 0, 1282, 1461, 0, 0,
	1468, 409, 0, 0, 0, 403, 1421, 0, 0, 0,
	0, 0, 1463, 0, 921, 0, 0, 1294, 1296, 1430,
	1480, 0, 1370, 0, 0, 0, 409, 98, 96, 1372,
	0, 1497, 1489, 1493, 0, 1487, 0, 0, 1492, 0,
	1381, 1382, 1291, 0, 976, 1464, 976, 0, 1483, 0,
	1484, 0, 0, 403, 1290, 403, 1323, 0, 1512, 0,
	1396, 1397, 1398, 409, 1401, 96, 1520, 0, 0, 0,
	0, 1066, 1067, 0, 606, 0, 409, 409, 1513, 0,
	0, 0, 0, 1532, 0, 0, 1536, 1527, 1494, 0,
	0, 1533, 1528, 0, 0, 409, 0, 409, 409, 409,
	0, 1129, 1544, 1545, 1546, 1541, 98, 0, 0, 1291,
	0, 54, 409, 0, 0, 0, 0, 1516, 1517, 1518,
	0, 1552, 0, 0, 0, 0, 0, 0, 0, 0,
	1252, 0, 1360, 1091, 1560, 1365, 1366, 1367, 0, 403,
	409, 1562, 0, 0, 0, 1564, 0, 96, 96, 96,
	0, 0, 1111, 1575, 0, 0, 0, 1456, 0, 0,
	1586, 0, 0, 0, 0, 867, 277, 0, 876, 877,
	878, 879, 880, 881, 882, 883, 884, 885, 886, 887,
	888, 889, 890, 0, 0, 715, 1474, 0, 0, 0,
	921, 0, 0, 287, 0, 0, 0, 0, 0, 0,
	0, 0, 976, 0, 1296, 0, 0, 0, 0, 0,
	0, 403, 0, 0, 0, 1573, 0, 0, 0, 1423,
	1502, 1503, 1504, 1505, 924, 95, 0, 1509, 1510, 0,
	0, 0, 0, 0, 296, 0, 0, 403, 0, 0,
	0, 0, 0, 0, 269, 1444, 0, 0, 0, 0,
	0, 272, 0, 0, 403, 0, 0, 0, 0, 392,
	0, 281, 276, 0, 533, 0, 535, 0, 1214, 0,
	0, 0, 0, 0, 542, 1537, 0, 0, 0, 0,
	549, 0, 1542, 0, 0, 0, 0, 0, 0, 0,
	96, 1465, 1466, 0, 1467, 0, 279, 0, 1549, 1423,
	96, 0, 286, 96, 0, 0, 96, 0, 0, 0,
	807, 0, 1323, 1556, 1557, 1558, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 270,
	0, 0, 0, 0, 0, 0, 0, 1423, 0, 0,
	0, 0, 0, 1280, 0, 0, 0, 0, 1587, 1588,
	0, 0, 1392, 0, 96, 0, 283, 273, 274, 96,
	284, 285, 290, 0, 0, 0, 275, 278, 0, 271,
	289, 288, 0, 0, 1526, 96, 0, 0, 1444, 976,
	0, 0, 1314, 0, 807, 0, 0, 403, 403, 0,
	633, 632, 642, 643, 635, 636, 637, 638, 639, 640,
	641, 634, 0, 921, 644, 0, 1543, 0, 1423, 1423,
	1423, 0, 1083, 1084, 1085, 0, 0, 0, 0, 0,
	0, 0, 0, 1551, 0, 0, 0, 0, 0, 0,
	0, 324, 324, 0, 0, 324, 324, 324, 324, 0,
	0, 0, 922, 0, 0, 0, 0, 0, 0, 0,
	0, 1423, 0, 0, 551, 0, 0, 0, 0, 0,
	0, 324, 324, 324, 324, 0, 96, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 96, 96,
	0, 0, 96, 960, 807, 0, 0, 0, 0, 0,
	0, 595, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 26, 27, 55, 29, 30, 0, 0,
	0, 0, 0, 0, 1390, 0, 0, 0, 0, 0,
	0, 0, 60, 0, 669, 0, 31, 51, 52, 0,
	0, 0, 1405, 0, 0, 1406, 0, 0, 1408, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 42,
	0, 0, 96, 61, 0, 0, 0, 96, 96, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 707, 0, 716, 0, 0, 0, 0,
	96, 0, 1036, 1037, 0, 0, 0, 96, 0, 0,
	0, 96, 96, 96, 96, 96, 0, 0, 0, 0,
	807, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 324, 0, 33, 57, 38, 37, 40, 0,
	53, 0, 0, 0, 0, 0, 1256, 1257, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1273, 1274,
	1391, 1275, 1276, 0, 0, 41, 59, 58, 0, 0,
	49, 50, 39, 0, 1283, 1284, 0, 0, 324, 0,
	0, 0, 0, 0, 0, 0, 0, 43, 44, 0,
	45, 46, 0, 0, 0, 0, 324, 0, 633, 632,
	642, 643, 635, 636, 637, 638, 639, 640, 641, 634,
	0, 0, 644, 0, 0, 922, 96, 96, 96, 96,
	96, 0, 0, 0, 0, 0, 0, 0, 1143, 0,
	0, 96, 0, 0, 0, 96, 740, 0, 0, 0,
	1329, 0, 0, 0, 0, 0, 796, 1385, 0, 392,
	0, 0, 803, 1535, 669, 0, 0, 0, 0, 0,
	0, 0, 1384, 0, 0, 0, 628, 815, 631, 0,
	0, 0, 0, 56, 645, 646, 647, 648, 649, 650,
	651, 0, 629, 630, 627, 633, 632, 642, 643, 635,
	636, 637, 638, 639, 640, 641, 634, 0, 1383, 644,
	829, 0, 0, 0, 0, 836, 0, 0, 0, 96,
	0, 0, 0, 0, 1371, 0, 0, 0, 0, 0,
	0, 854, 0, 633, 632, 642, 643, 635, 636, 637,
	638, 639, 640, 641, 634, 0, 0, 644, 633, 632,
	642, 643, 635, 636, 637, 638, 639, 640, 641, 634,
	0, 96, 644, 0, 0, 0, 0, 0, 0, 0,
	0, 324, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 324, 633, 632, 642, 643, 635, 636,
	637, 638, 639, 640, 641, 634, 0, 0, 644, 0,
	0, 0, 0, 807, 0, 0, 0, 0, 0, 0,
	0, 0, 922, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 934, 633, 632, 642, 643, 635, 636, 637,
	638, 639, 640, 641, 634, 957, 0, 644, 0, 0,
	0, 0, 1255, 0, 0, 0, 0, 762, 0, 0,
	0, 0, 1451, 1452, 1453, 1454, 1455, 1088, 0, 0,
	1458, 1459, 633, 632, 642, 643, 635, 636, 637, 638,
	639, 640, 641, 634, 0, 0, 644, 633, 632, 642,
	643, 635, 636, 637, 638, 639, 640, 641, 634, 0,
	0, 644, 0, 96, 0, 0, 0, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1022, 0,
	0, 0, 0, 1026, 1027, 0, 0, 1028, 0, 0,
	0, 0, 96, 0, 0, 0, 0, 0, 750, 0,
	0, 0, 0, 0, 0, 0, 1032, 0, 0, 0,
	96, 0, 0, 1039, 0, 0, 0, 1058, 1059, 1060,
	1061, 1062, 632, 642, 643, 635, 636, 637, 638, 639,
	640, 641, 634, 0, 0, 644, 0, 0, 0, 763,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 922, 0,
	0, 0, 0, 776, 779, 780, 781, 782, 783, 784,
	1414, 785, 786, 787, 788, 789, 764, 765, 766, 767,
	748, 749, 777, 0, 751, 0, 752, 753, 754, 755,
	756, 757, 758, 759, 760, 761, 768, 769, 770, 771,
	772, 773, 774, 775, 0, 0, 0, 0, 0, 0,
	0, 0, 1579, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 778, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 1209, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 922, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 516,
	504, 0, 461, 519, 434, 451, 527, 452, 455, 492,
	419, 474, 182, 449, 0, 438, 414, 444, 415, 436,
	463, 128, 433, 506, 477, 518, 154, 517, 467, 1345,
	525, 156, 483, 1348, 228, 170, 0, 0, 465, 508,
	472, 501, 460, 493, 424, 482, 520, 450, 490, 521,
	0, 0, 0, 408, 0, 977, 978, 0, 1356, 0,
	0, 0, 118, 0, 487, 515, 446, 489, 491, 413,
	484, 0, 417, 420, 526, 511, 441, 442, 1163, 0,
	0, 0, 0, 0, 0, 464, 473, 498, 458, 0,
	0, 0, 0, 0, 0, 0, 0, 439, 0, 481,
	0, 0, 0, 421, 418, 0, 0, 462, 0, 0,
	0, 423, 0, 440, 499, 0, 410, 136, 0, 0,
	503, 510, 459, 257, 514, 457, 456, 201, 0, 232,
	139, 153, 114, 100, 110, 0, 138, 179, 208, 212,
	447, 411, 507, 437, 445, 122, 443, 210, 189, 248,
	0, 480, 191, 209, 157, 238, 202, 247, 258, 259,
	235, 255, 263, 225, 103, 234, 246, 119, 220, 105,
	244, 231, 168, 148, 149, 104, 0, 206, 127, 134,
	124, 181, 241, 242, 123, 266, 111, 254, 107, 112,
	253, 175, 237, 245, 169, 162, 106, 243, 167, 161,
	152, 131, 141, 199, 159, 200, 142, 172, 171, 173,
	0, 416, 0, 229, 251, 267, 116, 432, 0, 236,
	261, 262, 0, 0, 117, 135, 130, 198, 174, 113,
	144, 226, 151, 158, 205, 265, 188, 211, 120, 250,
	227, 428, 431, 426, 427, 475, 476, 522, 523, 524,
	500, 422, 0, 429, 430, 0, 505, 512, 513, 479,
	99, 108, 155, 264, 203, 133, 252, 412, 425, 126,
	435, 0, 1498, 448, 453, 454, 466, 468, 469, 470,
	471, 478, 485, 486, 488, 494, 495, 496, 497, 502,
	509, 528, 101, 102, 109, 115, 121, 125, 129, 132,
	137, 140, 143, 145, 146, 147, 150, 160, 163, 164,
	165, 166, 176, 177, 178, 180, 183, 184, 185, 186,
	187, 190, 192, 193, 194, 195, 196, 197, 204, 207,
	213, 214, 215, 216, 217, 218, 219, 221, 222, 223,
	224, 230, 233, 239, 240, 249, 256, 260, 0, 516,
	504, 1548, 461, 519, 434, 451, 527, 452, 455, 492,
	419, 474, 182, 449, 0, 438, 414, 444, 415, 436,
	463, 128, 433, 506, 477, 518, 154, 517, 467, 0,
	525, 156, 483, 0, 228, 170, 0, 0, 465, 508,
	472, 501, 460, 493, 424, 482, 520, 450, 490, 521,
	0, 0, 0, 408, 0, 977, 978, 0, 0, 0,
	0, 0, 118, 0, 487, 515, 446, 489, 491, 413,
	484, 0, 417, 420, 526, 511, 441, 442, 0, 0,
	0, 0, 0, 0, 0, 464, 473, 498, 458, 0,
	0, 0, 0, 0, 0, 0, 0, 439, 0, 481,
	0, 0, 0, 421, 418, 0, 0, 462, 0, 0,
	0, 423, 0, 440, 499, 0, 410, 136, 0, 0,
	503, 510, 459, 257, 514, 457, 456, 201, 0, 232,
	139, 153, 114, 100, 110, 0, 138, 179, 208, 212,
	447, 411, 507, 437, 445, 122, 443, 210, 189, 248,
	0, 480, 191, 209, 157, 238, 202, 247, 258, 259,
	235, 255, 263, 225, 103, 234, 246, 119, 220, 105,
	244, 231, 168, 148, 149, 104, 0, 206, 127, 134,
	124, 181, 241, 242, 123, 266, 111, 254, 107, 112,
	253, 175, 237, 245, 169, 162, 106, 243, 167, 161,
	152, 131, 141, 199, 159, 200, 142, 172, 171, 173,
	0, 416, 0, 229, 251, 267, 116, 432, 0, 236,
	261, 262, 0, 0, 117, 135, 130, 198, 174, 113,
	144, 226, 151, 158, 205, 265, 188, 211, 120, 250,
	227, 428, 431, 426, 427, 475, 476, 522, 523, 524,
	500, 422, 0, 429, 430, 0, 505, 512, 513, 479,
	99, 108, 155, 264, 203, 133, 252, 412, 425, 126,
	435, 0, 0, 448, 453, 454, 466, 468, 469, 470,
	471, 478, 485, 486, 488, 494, 495, 496, 497, 502,
	509, 528, 101, 102, 109, 115, 121, 125, 129, 132,
	137, 140, 143, 145, 146, 147, 150, 160, 163, 164,
	165, 166, 176, 177, 178, 180, 183, 184, 185, 186,
	187, 190, 192, 193, 194, 195, 196, 197, 204, 207,
	213, 214, 215, 216, 217, 218, 219, 221, 222, 223,
	224, 230, 233, 239, 240, 249, 256, 260, 516, 504,
	0, 461, 519, 434, 451, 527, 452, 455, 492, 419,
	474, 182, 449, 0, 438, 414, 444, 415, 436, 463,
	128, 433, 506, 477, 518, 154, 517, 467, 0, 525,
	156, 483, 0, 228, 170, 0, 0, 465, 508, 472,
	501, 460, 493, 424, 482, 520, 450, 490, 521, 61,
	0, 0, 408, 0, 0, 0, 0, 0, 0, 0,
	0, 118, 0, 487, 515, 446, 489, 491, 413, 484,
	0, 417, 420, 526, 511, 441, 442, 0, 0, 0,
	0, 0, 0, 0, 464, 473, 498, 458, 0, 0,
	0, 0, 0, 0, 0, 0, 439, 0, 481, 0,
	0, 0, 421, 418, 0, 0, 462, 0, 0, 0,
	423, 0, 440, 499, 0, 410, 136, 0, 0, 503,
	510, 459, 257, 514, 457, 456, 201, 0, 232, 139,
	153, 114, 100, 110, 0, 138, 179, 208, 212, 447,
	411, 507, 437, 445, 122, 443, 210, 189, 248, 0,
	480, 191, 209, 157, 238, 202, 247, 258, 259, 235,
	255, 263, 225, 103, 234, 246, 119, 220, 105, 244,
	231, 168, 148, 149, 104, 0, 206, 127, 134, 124,
	181, 241, 242, 123, 266, 111, 254, 107, 112, 253,
	175, 237, 245, 169, 162, 106, 243, 167, 161, 152,
	131, 141, 199, 159, 200, 142, 172, 171, 173, 0,
	416, 0, 229, 251, 267, 116, 432, 0, 236, 261,
	262, 0, 0, 117, 135, 130, 198, 174, 113, 144,
	226, 151, 158, 205, 265, 188, 211, 120, 250, 227,
	428, 431, 426, 427, 475, 476, 522, 523, 524, 500,
	422, 0, 429, 430, 0, 505, 512, 513, 479, 99,
	108, 155, 264, 203, 133, 252, 412, 425, 126, 435,
	0, 0, 448, 453, 454, 466, 468, 469, 470, 471,
	478, 485, 486, 488, 494, 495, 496, 497, 502, 509,
	528, 101, 102, 109, 115, 121, 125, 129, 132, 137,
	140, 143, 145, 146, 147, 150, 160, 163, 164, 165,
	166, 176, 177, 178, 180, 183, 184, 185, 186, 187,
	190, 192, 193, 194, 195, 196, 197, 204, 207, 213,
	214, 215, 216, 217, 218, 219, 221, 222, 223, 224,
	230, 233, 239, 240, 249, 256, 260, 516, 504, 0,
	461, 519, 434, 451, 527, 452, 455, 492, 419, 474,
	182, 449, 0, 438, 414, 444, 415, 436, 463, 128,
	433, 506, 477, 518, 154, 517, 467, 0, 525, 156,
	483, 0, 228, 170, 0, 0, 465, 508, 472, 501,
	460, 493, 424, 482, 520, 450, 490, 521, 0, 0,
	0, 408, 0, 0, 0, 0, 0, 0, 0, 0,
	118, 0, 487, 515, 446, 489, 491, 413, 484, 0,
	417, 420, 526, 511, 441, 442, 0, 0, 0, 0,
	0, 0, 0, 464, 473, 498, 458, 0, 0, 0,
	0, 0, 0, 1251, 0, 439, 0, 481, 0, 0,
	0, 421, 418, 0, 0, 462, 0, 0, 0, 423,
	0, 440, 499, 0, 410, 136, 0, 0, 503, 510,
	459, 257, 514, 457, 456, 201, 0, 232, 139, 153,
	114, 100, 110, 0, 138, 179, 208, 212, 447, 411,
	507, 437, 445, 122, 443, 210, 189, 248, 0, 480,
	191, 209, 157, 238, 202, 247, 258, 259, 235, 255,
	263, 225, 103, 234, 246, 119, 220, 105, 244, 231,
	168, 148, 149, 104, 0, 206, 127, 134, 124, 181,
	241, 242, 123, 266, 111, 254, 107, 112, 253, 175,
	237, 245, 169, 162, 106, 243, 167, 161, 152, 131,
	141, 199, 159, 200, 142, 172, 171, 173, 0, 416,
	0, 229, 251, 267, 116, 432, 0, 236, 261, 262,
	0, 0, 117, 135, 130, 198, 174, 113, 144, 226,
	151, 158, 205, 265, 188, 211, 120, 250, 227, 428,
	431, 426, 427, 475, 476, 522, 523, 524, 500, 422,
	0, 429, 430, 0, 505, 512, 513, 479, 99, 108,
	155, 264, 203, 133, 252, 412, 425, 126, 435, 0,
	0, 448, 453, 454, 466, 468, 469, 470, 471, 478,
	485, 486, 488, 494, 495, 496, 497, 502, 509, 528,
	101, 102, 109, 115, 121, 125, 129, 132, 137, 140,
	143, 145, 146, 147, 150, 160, 163, 164, 165, 166,
	176, 177, 178, 180, 183, 184, 185, 186, 187, 190,
	192, 193, 194, 195, 196, 197, 204, 207, 213, 214,
	215, 216, 217, 218, 219, 221, 222, 223, 224, 230,
	233, 239, 240, 249, 256, 260, 516, 504, 0, 461,
	519, 434, 451, 527, 452, 455, 492, 419, 474, 182,
	449, 0, 438, 414, 444, 415, 436, 463, 128, 433,
	506, 477, 518, 154, 517, 467, 0, 525, 156, 483,
	0, 228, 170, 0, 0, 465, 508, 472, 501, 460,
	493, 424, 482, 520, 450, 490, 521, 0, 0, 0,
	97, 0, 0, 0, 0, 0, 0, 0, 0, 118,
	0, 487, 515, 446, 489, 491, 413, 484, 0, 417,
	420, 526, 511, 441, 442, 0, 0, 0, 0, 0,
	0, 0, 464, 473, 498, 458, 0, 0, 0, 0,
	0, 0, 961, 0, 439, 0, 481, 0, 0, 0,
	421, 418, 0, 0, 462, 0, 0, 0, 423, 0,
	440, 499, 0, 410, 136, 0, 0, 503, 510, 459,
	257, 514, 457, 456, 201, 0, 232, 139, 153, 114,
	100, 110, 0, 138, 179, 208, 212, 447, 411, 507,
	437, 445, 122, 443, 210, 189, 248, 0, 480, 191,
	209, 157, 238, 202, 247, 258, 259, 235, 255, 263,
	225, 103, 234, 246, 119, 220, 105, 244, 231, 168,
	148, 149, 104, 0, 206, 127, 134, 124, 181, 241,
	242, 123, 266, 111, 254, 107, 112, 253, 175, 237,
	245, 169, 162, 106, 243, 167, 161, 152, 131, 141,
	199, 159, 200, 142, 172, 171, 173, 0, 416, 0,
	229, 251, 267, 116, 432, 0, 236, 261, 262, 0,
	0, 117, 135, 130, 198, 174, 113, 144, 226, 151,
	158, 205, 265, 188, 211, 120, 250, 227, 428, 431,
	426, 427, 475, 476, 522, 523, 524, 500, 422, 0,
	429, 430, 0, 505, 512, 513, 479, 99, 108, 155,
	264, 203, 133, 252, 412, 425, 126, 435, 0, 0,
	448, 453, 454, 466, 468, 469, 470, 471, 478, 485,
	486, 488, 494, 495, 496, 497, 502, 509, 528, 101,
	102, 109, 115, 121, 125, 129, 132, 137, 140, 143,
	145, 146, 147, 150, 160, 163, 164, 165, 166, 176,
	177, 178, 180, 183, 184, 185, 186, 187, 190, 192,
	193, 194, 195, 196, 197, 204, 207, 213, 214, 215,
	216, 217, 218, 219, 221, 222, 223, 224, 230, 233,
	239, 240, 249, 256, 260, 516, 504, 0, 461, 519,
	434, 451, 527, 452, 455, 492, 419, 474, 182, 449,
	0, 438, 414, 444, 415, 436, 463, 128, 433, 506,
	477, 518, 154, 517, 467, 0, 525, 156, 483, 0,
	228, 170, 0, 0, 465, 508, 472, 501, 460, 493,
	424, 482, 520, 450, 490, 521, 0, 0, 0, 329,
	0, 0, 0, 0, 0, 0, 0, 0, 118, 0,
	487, 515, 446, 489, 491, 413, 484, 0, 417, 420,
	526, 511, 441, 442, 0, 0, 0, 0, 0, 0,
	0, 464, 473, 498, 458, 0, 0, 0, 0, 0,
	0, 863, 0, 439, 0, 481, 0, 0, 0, 421,
	418, 0, 0, 462, 0, 0, 0, 423, 0, 440,
	499, 0, 410, 136, 0, 0, 503, 510, 459, 257,
	514, 457, 456, 201, 0, 232, 139, 153, 114, 100,
	110, 0, 138, 179, 208, 212, 447, 411, 507, 437,
	445, 122, 443, 210, 189, 248, 0, 480, 191, 209,
	157, 238, 202, 247, 258, 259, 235, 255, 263, 225,
	103, 234, 246, 119, 220, 105, 244, 231, 168, 148,
	149, 104, 0, 206, 127, 134, 124, 181, 241, 242,
	123, 266, 111, 254, 107, 112, 253, 175, 237, 245,
	169, 162, 106, 243, 167, 161, 152, 131, 141, 199,
	159, 200, 142, 172, 171, 173, 0, 416, 0, 229,
	251, 267, 116, 432, 0, 236, 261, 262, 0, 0,
	117, 135, 130, 198, 174, 113, 144, 226, 151, 158,
	205, 265, 188, 211, 120, 250, 227, 428, 431, 426,
	427, 475, 476, 522, 523, 524, 500, 422, 0, 429,
	430, 0, 505, 512, 513, 479, 99, 108, 155, 264,
	203, 133, 252, 412, 425, 126, 435, 0, 0, 448,
	453, 454, 466, 468, 469, 470, 471, 478, 485, 486,
	488, 494, 495, 496, 497, 502, 509, 528, 101, 102,
	109, 115, 121, 125, 129, 132, 137, 140, 143, 145,
	146, 147, 150, 160, 163, 164, 165, 166, 176, 177,
	178, 180, 183, 184, 185, 186, 187, 190, 192, 193,
	194, 195, 196, 197, 204, 207, 213, 214, 215, 216,
	217, 218, 219, 221, 222, 223, 224, 230, 233, 239,
	240, 249, 256, 260, 516, 504, 0, 461, 519, 434,
	451, 527, 452, 455, 492, 419, 474, 182, 449, 0,
	438, 414, 444, 415, 436, 463, 128, 433, 506, 477,
	518, 154, 517, 467, 0, 525, 156, 483, 0, 228,
	170, 0, 0, 465, 508, 472, 501, 460, 493, 424,
	482, 520, 450, 490, 521, 0, 0, 0, 408, 0,
	0, 0, 0, 0, 0, 0, 0, 118, 0, 487,
	515, 446, 489, 491, 413, 484, 0, 417, 420, 526,
	511, 441, 442, 0, 0, 0, 0, 0, 0, 0,
	464, 473, 498, 458, 0, 0, 0, 0, 0, 0,
	0, 0, 439, 0, 481, 0, 0, 0, 421, 418,
	0, 0, 462, 0, 0, 0, 423, 0, 440, 499,
	0, 410, 136, 0, 0, 503, 510, 459, 257, 514,
	457, 456, 201, 0, 232, 139, 153, 114, 100, 110,
	0, 138, 179, 208, 212, 447, 411, 507, 437, 445,
	122, 443, 210, 189, 248, 0, 480, 191, 209, 157,
	238, 202, 247, 258, 259, 235, 255, 263, 225, 103,
	234, 246, 119, 220, 105, 244, 231, 168, 148, 149,
	104, 0, 206, 127, 134, 124, 181, 241, 242, 123,
	266, 111, 254, 107, 112, 253, 175, 237, 245, 169,
	162, 106, 243, 167, 161, 152, 131, 141, 199, 159,
	200, 142, 172, 171, 173, 0, 416, 0, 229, 251,
	267, 116, 432, 0, 236, 261, 262, 0, 0, 117,
	135, 130, 198, 174, 113, 144, 226, 151, 158, 205,
	265, 188, 211, 120, 250, 227, 428, 431, 426, 427,
	475, 476, 522, 523, 524, 500, 422, 0, 429, 430,
	0, 505, 512, 513, 479, 99, 108, 155, 264, 203,
	133, 252, 412, 425, 126, 435, 0, 0, 448, 453,
	454, 466, 468, 469, 470, 471, 478, 485, 486, 488,
	494, 495, 496, 497, 502, 509, 528, 101, 102, 109,
	115, 121, 125, 129, 132, 137, 140, 143, 145, 146,
	147, 150, 160, 163, 164, 165, 166, 176, 177, 178,
	180, 183, 184, 185, 186, 187, 190, 192, 193, 194,
	195, 196, 197, 204, 207, 213, 214, 215, 216, 217,
	218, 219, 221, 222, 223, 224, 230, 233, 239, 240,
	249, 256, 260, 516, 504, 0, 461, 519, 434, 451,
	527, 452, 455, 492, 419, 474, 182, 449, 0, 438,
	414, 444, 415, 436, 463, 128, 433, 506, 477, 518,
	154, 517, 467, 0, 525, 156, 483, 0, 228, 170,
	0, 0, 465, 508, 472, 501, 460, 493, 424, 482,
	520, 450, 490, 521, 0, 0, 0, 329, 0, 0,
	0, 0, 0, 0, 0, 0, 118, 0, 487, 515,
	446, 489, 491, 413, 484, 0, 417, 420, 526, 511,
	441, 442, 0, 0, 0, 0, 0, 0, 0, 464,
	473, 498, 458, 0, 0, 0, 0, 0, 0, 0,
	0, 439, 0, 481, 0, 0, 0, 421, 418, 0,
	0, 462, 0, 0, 0, 423, 0, 440, 499, 0,
	410, 136, 0, 0, 503, 510, 459, 257, 514, 457,
	456, 201, 0, 232, 139, 153, 114, 100, 110, 0,
	138, 179, 208, 212, 447, 411, 507, 437, 445, 122,
	443, 210, 189, 248, 0, 480, 191, 209, 157, 238,
	202, 247, 258, 259, 235, 255, 263, 225, 103, 234,
	246, 119, 220, 105, 244, 231, 168, 148, 149, 104,
	0, 206, 127, 134, 124, 181, 241, 242, 123, 266,
	111, 254, 107, 112, 253, 175, 237, 245, 169, 162,
	106, 243, 167, 161, 152, 131, 141, 199, 159, 200,
	142, 172, 171, 173, 0, 416, 0, 229, 251, 267,
	116, 432, 0, 236, 261, 262, 0, 0, 117, 135,
	130, 198, 174, 113, 144, 226, 151, 158, 205, 265,
	188, 211, 120, 250, 227, 428, 431, 426, 427, 475,
	476, 522, 523, 524, 500, 422, 0, 429, 430, 0,
	505, 512, 513, 479, 99, 108, 155, 264, 203, 133,
	252, 412, 425, 126, 435, 0, 0, 448, 453, 454,
	466, 468, 469, 470, 471, 478, 485, 486, 488, 494,
	495, 496, 497, 502, 509, 528, 101, 102, 109, 115,
	121, 125, 129, 132, 137, 140, 143, 145, 146, 147,
	150, 160, 163, 164, 165, 166, 176, 177, 178, 180,
	183, 184, 185, 186, 187, 190, 192, 193, 194, 195,
	196, 197, 204, 207, 213, 214, 215, 216, 217, 218,
	219, 221, 222, 223, 224, 230, 233, 239, 240, 249,
	256, 260, 516, 504, 0, 461, 519, 434, 451, 527,
	452, 455, 492, 419, 474, 182, 449, 0, 438, 414,
	444, 415, 436, 463, 128, 433, 506, 477, 518, 154,
	517, 467, 0, 525, 156, 483, 0, 228, 170, 0,
	0, 465, 508, 472, 501, 460, 493, 424, 482, 520,
	450, 490, 521, 0, 0, 0, 408, 0, 0, 0,
	0, 0, 0, 0, 0, 118, 0, 487, 515, 446,
	489, 491, 413, 484, 0, 417, 420, 526, 511, 441,
	442, 0, 0, 0, 0, 0, 0, 0, 464, 473,
	498, 458, 0, 0, 0, 0, 0, 0, 0, 0,
	439, 0, 481, 0, 0, 0, 421, 418, 0, 0,
	462, 0, 0, 0, 423, 0, 440, 499, 0, 410,
	136, 0, 0, 503, 510, 459, 257, 514, 457, 456,
	201, 0, 232, 139, 153, 114, 100, 110, 0, 138,
	179, 208, 212, 447, 411, 507, 437, 445, 122, 443,
	210, 189, 248, 0, 480, 191, 209, 157, 238, 202,
	247, 258, 259, 235, 255, 263, 225, 103, 234, 246,
	119, 220, 105, 244, 231, 168, 148, 149, 104, 0,
	206, 127, 134, 124, 181, 241, 242, 123, 266, 111,
	254, 107, 406, 253, 175, 237, 245, 169, 162, 106,
	243, 167, 161, 152, 131, 141, 199, 159, 200, 142,
	172, 171, 173, 0, 416, 0, 229, 251, 267, 116,
	432, 0, 236, 261, 262, 0, 0, 117, 135, 130,
	198, 407, 405, 144, 226, 151, 158, 205, 265, 188,
	211, 120, 250, 227, 428, 431, 426, 427, 475, 476,
	522, 523, 524, 500, 422, 0, 429, 430, 0, 505,
	512, 513, 479, 99, 108, 155, 264, 203, 133, 252,
	412, 425, 126, 435, 0, 0, 448, 453, 454, 466,
	468, 469, 470, 471, 478, 485, 486, 488, 494, 495,
	496, 497, 502, 509, 528, 101, 102, 109, 115, 121,
	125, 129, 132, 137, 140, 143, 145, 146, 147, 150,
	160, 163, 164, 165, 166, 176, 177, 178, 180, 183,
	184, 185, 186, 187, 190, 192, 193, 194, 195, 196,
	197, 204, 207, 213, 214, 215, 216, 217, 218, 219,
	221, 222, 223, 224, 230, 233, 239, 240, 249, 256,
	260, 516, 504, 0, 461, 519, 434, 451, 527, 452,
	455, 492, 419, 474, 182, 449, 0, 438, 414, 444,
	415, 436, 463, 128, 433, 506, 477, 518, 154, 517,
	467, 0, 525, 156, 483, 0, 228, 170, 0, 0,
	465, 508, 472, 501, 460, 493, 424, 482, 520, 450,
	490, 521, 0, 0, 0, 97, 0, 0, 0, 0,
	0, 0, 0, 0, 118, 0, 487, 515, 446, 489,
	491, 413, 484, 0, 417, 420, 526, 511, 441, 442,
	0, 0, 0, 0, 0, 0, 0, 464, 473, 498,
	458, 0, 0, 0, 0, 0, 0, 0, 0, 439,
	0, 481, 0, 0, 0, 421, 418, 0, 0, 462,
	0, 0, 0, 423, 0, 440, 499, 0, 410, 136,
	0, 0, 503, 510, 459, 257, 514, 457, 456, 201,
	0, 232, 139, 153, 114, 100, 110, 0, 138, 179,
	208, 212, 447, 411, 507, 437, 445, 122, 443, 210,
	189, 248, 0, 480, 191, 209, 157, 238, 202, 247,
	258, 259, 235, 255, 263, 225, 103, 234, 246, 119,
	220, 105, 244, 231, 168, 148, 149, 104, 0, 206,
	127, 134, 124, 181, 241, 242, 123, 266, 111, 254,
	107, 112, 253, 175, 237, 245, 169, 162, 106, 243,
	167, 161, 152, 131, 141, 199, 159, 200, 142, 172,
	171, 173, 0, 416, 0, 229, 251, 267, 116, 432,
	0, 236, 261, 262, 0, 0, 117, 135, 130, 198,
	174, 113, 144, 226, 151, 158, 205, 265, 188, 211,
	120, 250, 227, 428, 431, 426, 427, 475, 476, 522,
	523, 524, 500, 422, 0, 429, 430, 0, 505, 512,
	513, 479, 99, 108, 155, 264, 203, 133, 252, 412,
	425, 126, 435, 0, 0, 448, 453, 454, 466, 468,
	469, 470, 471, 478, 485, 486, 488, 494, 495, 496,
	497, 502, 509, 528, 101, 102, 109, 115, 121, 125,
	129, 132, 137, 140, 143, 145, 146, 147, 150, 160,
	163, 164, 165, 166, 176, 177, 178, 180, 183, 184,
	185, 186, 187, 190, 192, 193, 194, 195, 196, 197,
	204, 207, 213, 214, 215, 216, 217, 218, 219, 221,
	222, 223, 224, 230, 233, 239, 240, 249, 256, 260,
	516, 504, 0, 461, 519, 434, 451, 527, 452, 455,
	492, 419, 474, 182, 449, 0, 438, 414, 444, 415,
	436, 463, 128, 433, 506, 477, 518, 154, 517, 467,
	0, 525, 156, 483, 0, 228, 170, 0, 0, 465,
	508, 472, 501, 460, 493, 424, 482, 520, 450, 490,
	521, 0, 0, 0, 408, 0, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 487, 515, 446, 489, 491,
	413, 484, 0, 417, 420, 526, 511, 441, 442, 0,
	0, 0, 0, 0, 0, 0, 464, 473, 498, 458,
	0, 0, 0, 0, 0, 0, 0, 0, 439, 0,
	481, 0, 0, 0, 421, 418, 0, 0, 462, 0,
	0, 0, 423, 0, 440, 499, 0, 410, 136, 0,
	0, 503, 510, 459, 257, 514, 457, 456, 201, 0,
	232, 139, 153, 114, 100, 110, 0, 138, 179, 208,
	212, 447, 411, 507, 437, 445, 122, 443, 210, 189,
	248, 0, 480, 191, 209, 157, 238, 202, 247, 258,
	259, 235, 255, 263, 225, 103, 234, 727, 119, 220,
	105, 244, 231, 168, 148, 149, 104, 0, 206, 127,
	134, 124, 181, 241, 242, 123, 266, 111, 254, 107,
	406, 253, 175, 237, 245, 169, 162, 106, 243, 167,
	161, 152, 131, 141, 199, 159, 200, 142, 172, 171,
	173, 0, 416, 0, 229, 251, 267, 116, 432, 0,
	236, 261, 262, 0, 0, 117, 135, 130, 198, 407,
	405, 144, 226, 151, 158, 205, 265, 188, 211, 120,
	250, 227, 428, 431, 426, 427, 475, 476, 522, 523,
	524, 500, 422, 0, 429, 430, 0, 505, 512, 513,
	479, 99, 108, 155, 264, 203, 133, 252, 412, 425,
	126, 435, 0, 0, 448, 453, 454, 466, 468, 469,
	470, 471, 478, 485, 486, 488, 494, 495, 496, 497,
	502, 509, 528, 101, 102, 109, 115, 121, 125, 129,
	132, 137, 140, 143, 145, 146, 147, 150, 160, 163,
	164, 165, 166, 176, 177, 178, 180, 183, 184, 185,
	186, 187, 190, 192, 193, 194, 195, 196, 197, 204,
	207, 213, 214, 215, 216, 217, 218, 219, 221, 222,
	223, 224, 230, 233, 239, 240, 249, 256, 260, 516,
	504, 0, 461, 519, 434, 451, 527, 452, 455, 492,
	419, 474, 182, 449, 0, 438, 414, 444, 415, 436,
	463, 128, 433, 506, 477, 518, 154, 517, 467, 0,
	525, 156, 483, 0, 228, 170, 0, 0, 465, 508,
	472, 501, 460, 493, 424, 482, 520, 450, 490, 521,
	0, 0, 0, 408, 0, 0, 0, 0, 0, 0,
	0, 0, 118, 0, 487, 515, 446, 489, 491, 413,
	484, 0, 417, 420, 526, 511, 441, 442, 0, 0,
	0, 0, 0, 0, 0, 464, 473, 498, 458, 0,
	0, 0, 0, 0, 0, 0, 0, 439, 0, 481,
	0, 0, 0, 421, 418, 0, 0, 462, 0, 0,
	0, 423, 0, 440, 499, 0, 410, 136, 0, 0,
	503, 510, 459, 257, 514, 457, 456, 201, 0, 232,
	139, 153, 114, 100, 110, 0, 138, 179, 208, 212,
	447, 411, 507, 437, 445, 122, 443, 210, 189, 248,
	0, 480, 191, 209, 157, 238, 202, 247, 258, 259,
	235, 255, 263, 225, 103, 234, 397, 119, 220, 105,
	244, 231, 168, 148, 149, 104, 0, 206, 127, 134,
	124, 181, 241, 242, 123, 266, 111, 254, 107, 406,
	253, 175, 237, 245, 169, 162, 106, 243, 167, 161,
	152, 131, 141, 199, 159, 200, 142, 172, 171, 173,
	0, 416, 0, 229, 251, 267, 116, 432, 0, 236,
	261, 262, 0, 0, 117, 135, 130, 198, 407, 405,
	400, 399, 151, 158, 205, 265, 188, 211, 120, 250,
	227, 428, 431, 426, 427, 475, 476, 522, 523, 524,
	500, 422, 0, 429, 430, 0, 505, 512, 513, 479,
	99, 108, 155, 264, 203, 133, 252, 412, 425, 126,
	435, 0, 0, 448, 453, 454, 466, 468, 469, 470,
	471, 478, 485, 486, 488, 494, 495, 496, 497, 502,
	509, 528, 101, 102, 109, 115, 121, 125, 129, 132,
	137, 140, 143, 145, 146, 147, 150, 160, 163, 164,
	165, 166, 176, 177, 178, 180, 183, 184, 185, 186,
	187, 190, 192, 193, 194, 195, 196, 197, 204, 207,
	213, 214, 215, 216, 217, 218, 219, 221, 222, 223,
	224, 230, 233, 239, 240, 249, 256, 260, 182, 0,
	0, 0, 0, 331, 0, 0, 0, 128, 328, 0,
	0, 0, 154, 0, 0, 0, 372, 156, 0, 0,
	228, 170, 0, 0, 0, 0, 362, 363, 0, 0,
	0, 0, 0, 0, 968, 0, 61, 0, 0, 329,
	350, 349, 352, 353, 354, 355, 0, 0, 118, 351,
	356, 357, 358, 969, 0, 0, 326, 343, 0, 371,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 340,
	341, 0, 0, 0, 0, 385, 0, 342, 0, 0,
	337, 338, 339, 344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 0, 0, 0, 0, 0, 257,
	0, 0, 383, 201, 0, 232, 139, 153, 114, 100,
	110, 0, 138, 179, 208, 212, 369, 0, 0, 0,
	0, 122, 0, 210, 189, 248, 0, 0, 191, 209,
	157, 238, 202, 247, 258, 259, 235, 255, 263, 225,
	103, 234, 246, 119, 220, 105, 244, 231, 168, 148,
	149, 104, 0, 206, 127, 134, 124, 181, 241, 242,
	123, 266, 111, 254, 107, 112, 253, 175, 237, 245,
	169, 162, 106, 243, 167, 161, 152, 131, 141, 199,
	159, 200, 142, 172, 171, 173, 0, 0, 0, 229,
	251, 267, 116, 0, 0, 236, 261, 262, 0, 0,
	117, 135, 130, 198, 174, 113, 144, 226, 151, 158,
	205, 265, 188, 211, 120, 250, 227, 373, 384, 379,
	380, 377, 378, 376, 375, 374, 386, 364, 365, 366,
	367, 370, 0, 381, 382, 368, 99, 108, 155, 264,
	203, 133, 252, 0, 0, 126, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 102,
	109, 115, 121, 125, 129, 132, 137, 140, 143, 145,
	146, 147, 150, 160, 163, 164, 165, 166, 176, 177,
	178, 180, 183, 184, 185, 186, 187, 190, 192, 193,
	194, 195, 196, 197, 204, 207, 213, 214, 215, 216,
	217, 218, 219, 221, 222, 223, 224, 230, 233, 239,
	240, 249, 256, 260, 182, 0, 0, 0, 0, 331,
	0, 0, 0, 128, 328, 0, 0, 0, 154, 0,
	0, 0, 372, 156, 0, 0, 228, 170, 0, 0,
	0, 0, 362, 363, 0, 0, 0, 0, 0, 0,
	0, 0, 61, 0, 593, 329, 350, 349, 352, 353,
	354, 355, 0, 0, 118, 351, 356, 357, 358, 0,
	0, 0, 326, 343, 0, 371, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 340, 341, 0, 0, 0,
	0, 385, 0, 342, 0, 0, 337, 338, 339, 344,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 136,
	0, 0, 0, 0, 0, 257, 0, 0, 383, 201,
	0, 232, 139, 153, 114, 100, 110, 0, 138, 179,
	208, 212, 369, 0, 0, 0, 0, 122, 0, 210,
	189, 248, 0, 0, 191, 209, 157, 238, 202, 247,
	258, 259, 235, 255, 263, 225, 103, 234, 246, 119,
	220, 105, 244, 231, 168, 148, 149, 104, 0, 206,
	127, 134, 124, 181, 241, 242, 123, 266, 111, 254,
	107, 112, 253, 175, 237, 245, 169, 162, 106, 243,
	167, 161, 152, 131, 141, 199, 159, 200, 142, 172,
	171, 173, 0, 0, 0, 229, 251, 267, 116, 0,
	0, 236, 261, 262, 0, 0, 117, 135, 130, 198,
	174, 113, 144, 226, 151, 158, 205, 265, 188, 211,
	120, 250, 227, 373, 384, 379, 380, 377, 378, 376,
	375, 374, 386, 364, 365, 366, 367, 370, 0, 381,
	382, 368, 99, 108, 155, 264, 203, 133, 252, 0,
	0, 126, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 102, 109, 115, 121, 125,
	129, 132, 137, 140, 143, 145, 146, 147, 150, 160,
	163, 164, 165, 166, 176, 177, 178, 180, 183, 184,
	185, 186, 187, 190, 192, 193, 194, 195, 196, 197,
	204, 207, 213, 214, 215, 216, 217, 218, 219, 221,
	222, 223, 224, 230, 233, 239, 240, 249, 256, 260,
	182, 0, 0, 0, 0, 331, 0, 0, 0, 128,
	328, 0, 0, 0, 154, 0, 0, 0, 372, 156,
	0, 0, 228, 170, 0, 0, 0, 0, 362, 363,
	0, 0, 0, 0, 0, 0, 0, 0, 61, 0,
	0, 329, 350, 349, 352, 353, 354, 355, 0, 0,
	118, 351, 356, 357, 358, 0, 0, 0, 326, 343,
	0, 371, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 340, 341, 322, 0, 0, 0, 385, 0, 342,
	0, 0, 337, 338, 339, 344, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 136, 0, 0, 0, 0,
	0, 257, 0, 0, 383, 201, 0, 232, 139, 153,
	114, 100, 110, 0, 138, 179, 208, 212, 369, 0,
	0, 0, 0, 122, 0, 210, 189, 248, 0, 0,
	191, 209, 157, 238, 202, 247, 258, 259, 235, 255,
	263, 225, 103, 234, 246, 119, 220, 105, 244, 231,
	168, 148, 149, 104, 0, 206, 127, 134, 124, 181,
	241, 242, 123, 266, 111, 254, 107, 112, 253, 175,
	237, 245, 169, 162, 106, 243, 167, 161, 152, 131,
	141, 199, 159, 200, 142, 172, 171, 173, 0, 0,
	0, 229, 251, 267, 116, 0, 0, 236, 261, 262,
	0, 0, 117, 135, 130, 198, 174, 113, 144, 226,
	151, 158, 205, 265, 188, 211, 120, 250, 227, 373,
	384, 379, 380, 377, 378, 376, 375, 374, 386, 364,
	365, 366, 367, 370, 0, 381, 382, 368, 99, 108,
	155, 264, 203, 133, 252, 0, 0, 126, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 102, 109, 115, 121, 125, 129, 132, 137, 140,
	143, 145, 146, 147, 150, 160, 163, 164, 165, 166,
	176, 177, 178, 180, 183, 184, 185, 186, 187, 190,
	192, 193, 194, 195, 196, 197, 204, 207, 213, 214,
	215, 216, 217, 218, 219, 221, 222, 223, 224, 230,
	233, 239, 240, 249, 256, 260, 182, 0, 0, 0,
	0, 331, 0, 0, 0, 128, 328, 0, 0, 0,
	154, 0, 0, 0, 372, 156, 0, 0, 228, 170,
	0, 0, 0, 0, 362, 363, 0, 0, 0, 0,
	0, 0, 0, 0, 61, 0, 0, 329, 350, 912,
	352, 353, 354, 355, 0, 0, 118, 351, 356, 357,
	358, 0, 0, 0, 326, 343, 0, 371, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 340, 341, 322,
	0, 0, 0, 385, 0, 342, 0, 0, 337, 338,
	339, 344, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 136, 0, 0, 0, 0, 0, 257, 0, 0,
	383, 201, 0, 232, 139, 153, 114, 100, 110, 0,
	138, 179, 208, 212, 369, 0, 0, 0, 0, 122,
	0, 210, 189, 248, 0, 0, 191, 209, 157, 238,
	202, 247, 258, 259, 235, 255, 263, 225, 103, 234,
	246, 119, 220, 105, 244, 231, 168, 148, 149, 104,
	0, 206, 127, 134, 124, 181, 241, 242, 123, 266,
	111, 254, 107, 112, 253, 175, 237, 245, 169, 162,
	106, 243, 167, 161, 152, 131, 141, 199, 159, 200,
	142, 172, 171, 173, 0, 0, 0, 229, 251, 267,
	116, 0, 0, 236, 261, 262, 0, 0, 117, 135,
	130, 198, 174, 113, 144, 226, 151, 158, 205, 265,
	188, 211, 120, 250, 227, 373, 384, 379, 380, 377,
	378, 376, 375, 374, 386, 364, 365, 366, 367, 370,
	0, 381, 382, 368, 99, 108, 155, 264, 203, 133,
	252, 0, 0, 126, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 102, 109, 115,
	121, 125, 129, 132, 137, 140, 143, 145, 146, 147,
	150, 160, 163, 164, 165, 166, 176, 177, 178, 180,
	183, 184, 185, 186, 187, 190, 192, 193, 194, 195,
	196, 197, 204, 207, 213, 214, 215, 216, 217, 218,
	219, 221, 222, 223, 224, 230, 233, 239, 240, 249,
	256, 260, 182, 0, 0, 0, 0, 331, 0, 0,
	0, 128, 328, 0, 0, 0, 154, 0, 0, 0,
	372, 156, 0, 0, 228, 170, 0, 0, 0, 0,
	362, 363, 0, 0, 0, 0, 0, 0, 0, 0,
	61, 0, 0, 329, 350, 909, 352, 353, 354, 355,
	0, 0, 118, 351, 356, 357, 358, 0, 0, 0,
	326, 343, 0, 371, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 340, 341, 322, 0, 0, 0, 385,
	0, 342, 0, 0, 337, 338, 339, 344, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 136, 0, 0,
	0, 0, 0, 257, 0, 0, 383, 201, 0, 232,
	139, 153, 114, 100, 110, 0, 138, 179, 208, 212,
	369, 0, 0, 0, 0, 122, 0, 210, 189, 248,
	0, 0, 191, 209, 157, 238, 202, 247, 258, 259,
	235, 255, 263, 225, 103, 234, 246, 119, 220, 105,
	244, 231, 168, 148, 149, 104, 0, 206, 127, 134,
	124, 181, 241, 242, 123, 266, 111, 254, 107, 112,
	253, 175, 237, 245, 169, 162, 106, 243, 167, 161,
	152, 131, 141, 199, 159, 200, 142, 172, 171, 173,
	0, 0, 0, 229, 251, 267, 116, 0, 0, 236,
	261, 262, 0, 0, 117, 135, 130, 198, 174, 113,
	144, 226, 151, 158, 205, 265, 188, 211, 120, 250,
	227, 373, 384, 379, 380, 377, 378, 376, 375, 374,
	386, 364, 365, 366, 367, 370, 0, 381, 382, 368,
	99, 108, 155, 264, 203, 133, 252, 0, 0, 126,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 102, 109, 115, 121, 125, 129, 132,
	137, 140, 143, 145, 146, 147, 150, 160, 163, 164,
	165, 166, 176, 177, 178, 180, 183, 184, 185, 186,
	187, 190, 192, 193, 194, 195, 196, 197, 204, 207,
	213, 214, 215, 216, 217, 218, 219, 221, 222, 223,
	224, 230, 233, 239, 240, 249, 256, 260, 26, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 0, 0, 0, 0, 331, 0, 0, 0, 128,
	328, 0, 0, 0, 154, 0, 0, 0, 372, 156,
	0, 0, 228, 170, 0, 0, 0, 0, 362, 363,
	0, 0, 0, 0, 0, 0, 0, 0, 61, 0,
	0, 329, 350, 349, 352, 353, 354, 355, 0, 0,
	118, 351, 356, 357, 358, 0, 0, 0, 326, 343,
	0, 371, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 340, 341, 0, 0, 0, 0, 385, 0, 342,
	0, 0, 337, 338, 339, 344, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 136, 0, 0, 0, 0,
	0, 257, 0, 0, 383, 201, 0, 232, 139, 153,
	114, 100, 110, 0, 138, 179, 208, 212, 369, 0,
	0, 0, 0, 122, 0, 210, 189, 248, 0, 0,
	191, 209, 157, 238, 202, 247, 258, 259, 235, 255,
	263, 225, 103, 234, 246, 119, 220, 105, 244, 231,
	168, 148, 149, 104, 0, 206, 127, 134, 124, 181,
	241, 242, 123, 266, 111, 254, 107, 112, 253, 175,
	237, 245, 169, 162, 106, 243, 167, 161, 152, 131,
	141, 199, 159, 200, 142, 172, 171, 173, 0, 0,
	0, 229, 251, 267, 116, 0, 0, 236, 261, 262,
	0, 0, 117, 135, 130, 198, 174, 113, 144, 226,
	151, 158, 205, 265, 188, 211, 120, 250, 227, 373,
	384, 379, 380, 377, 378, 376, 375, 374, 386, 364,
	365, 366, 367, 370, 0, 381, 382, 368, 99, 108,
	155, 264, 203, 133, 252, 0, 0, 126, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 102, 109, 115, 121, 125, 129, 132, 137, 140,
	143, 145, 146, 147, 150, 160, 163, 164, 165, 166,
	176, 177, 178, 180, 183, 184, 185, 186, 187, 190,
	192, 193, 194, 195, 196, 197, 204, 207, 213, 214,
	215, 216, 217, 218, 219, 221, 222, 223, 224, 230,
	233, 239, 240, 249, 256, 260, 182, 0, 0, 0,
	0, 331, 0, 0, 0, 128, 328, 0, 0, 0,
	154, 0, 0, 0, 372, 156, 0, 0, 228, 170,
	0, 0, 0, 0, 362, 363, 0, 0, 0, 0,
	0, 0, 0, 0, 61, 0, 0, 329, 350, 349,
	352, 353, 354, 355, 0, 0, 118, 351, 356, 357,
	358, 0, 0, 0, 326, 343, 0, 371, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 340, 341, 0,
	0, 0, 0, 385, 0, 342, 0, 0, 337, 338,
	339, 344, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 136, 0, 0, 0, 0, 0, 257, 0, 0,
	383, 201, 0, 232, 139, 153, 114, 100, 110, 0,
	138, 179, 208, 212, 369, 0, 0, 0, 0, 122,
	0, 210, 189, 248, 0, 0, 191, 209, 157, 238,
	202, 247, 258, 259, 235, 255, 263, 225, 103, 234,
	246, 119, 220, 105, 244, 231, 168, 148, 149, 104,
	0, 206, 127, 134, 124, 181, 241, 242, 123, 266,
	111, 254, 107, 112, 253, 175, 237, 245, 169, 162,
	106, 243, 167, 161, 152, 131, 141, 199, 159, 200,
	142, 172, 171, 173, 0, 0, 0, 229, 251, 267,
	116, 0, 0, 236, 261, 262, 0, 0, 117, 135,
	130, 198, 174, 113, 144, 226, 151, 158, 205, 265,
	188, 211, 120, 250, 227, 373, 384, 379, 380, 377,
	378, 376, 375, 374, 386, 364, 365, 366, 367, 370,
	0, 381, 382, 368, 99, 108, 155, 264, 203, 133,
	252, 0, 0, 126, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 102, 109, 115,
	121, 125, 129, 132, 137, 140, 143, 145, 146, 147,
	150, 160, 163, 164, 165, 166, 176, 177, 178, 180,
	183, 184, 185, 186, 187, 190, 192, 193, 194, 195,
	196, 197, 204, 207, 213, 214, 215, 216, 217, 218,
	219, 221, 222, 223, 224, 230, 233, 239, 240, 249,
	256, 260, 182, 0, 0, 0, 0, 0, 0, 0,
	0, 128, 0, 0, 0, 0, 154, 0, 0, 0,
	372, 156, 0, 0, 228, 170, 0, 0, 0, 0,
	362, 363, 0, 0, 0, 0, 0, 0, 0, 0,
	61, 0, 0, 329, 350, 349, 352, 353, 354, 355,
	0, 0, 118, 351, 356, 357, 358, 0, 0, 0,
	0, 343, 0, 371, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 340, 341, 0, 0, 0, 0, 385,
	0, 342, 0, 0, 337, 338, 339, 344, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 136, 0, 0,
	0, 0, 0, 257, 0, 0, 383, 201, 0, 232,
	139, 153, 114, 100, 110, 0, 138, 179, 208, 212,
	369, 0, 0, 0, 0, 122, 0, 210, 189, 248,
	0, 1580, 191, 209, 157, 238, 202, 247, 258, 259,
	235, 255, 263, 225, 103, 234, 246, 119, 220, 105,
	244, 231, 168, 148, 149, 104, 0, 206, 127, 134,
	124, 181, 241, 242, 123, 266, 111, 254, 107, 112,
	253, 175, 237, 245, 169, 162, 106, 243, 167, 161,
	152, 131, 141, 199, 159, 200, 142, 172, 171, 173,
	0, 0, 0, 229, 251, 267, 116, 0, 0, 236,
	261, 262, 0, 0, 117, 135, 130, 198, 174, 113,
	144, 226, 151, 158, 205, 265, 188, 211, 120, 250,
	227, 373, 384, 379, 380, 377, 378, 376, 375, 374,
	386, 364, 365, 366, 367, 370, 0, 381, 382, 368,
	99, 108, 155, 264, 203, 133, 252, 0, 0, 126,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 102, 109, 115, 121, 125, 129, 132,
	137, 140, 143, 145, 146, 147, 150, 160, 163, 164,
	165, 166, 176, 177, 178, 180, 183, 184, 185, 186,
	187, 190, 192, 193, 194, 195, 196, 197, 204, 207,
	213, 214, 215, 216, 217, 218, 219, 221, 222, 223,
	224, 230, 233, 239, 240, 249, 256, 260, 182, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 0, 0,
	0, 0, 154, 0, 0, 0, 372, 156, 0, 0,
	228, 170, 0, 0, 0, 0, 362, 363, 0, 0,
	0, 0, 0, 0, 0, 0, 61, 0, 593, 329,
	350, 349, 352, 353, 354, 355, 0, 0, 118, 351,
	356, 357, 358, 0, 0, 0, 0, 343, 0, 371,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 340,
	341, 0, 0, 0, 0, 385, 0, 342, 0, 0,
	337, 338, 339, 344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 0, 0, 0, 0, 0, 257,
	0, 0, 383, 201, 0, 232, 139, 153, 114, 100,
	110, 0, 138, 179, 208, 212, 369, 0, 0, 0,
	0, 122, 0, 210, 189, 248, 0, 0, 191, 209,
	157, 238, 202, 247, 258, 259, 235, 255, 263, 225,
	103, 234, 246, 119, 220, 105, 244, 231, 168, 148,
	149, 104, 0, 206, 127, 134, 124, 181, 241, 242,
	123, 266, 111, 254, 107, 112, 253, 175, 237, 245,
	169, 162, 106, 243, 167, 161, 152, 131, 141, 199,
	159, 200, 142, 172, 171, 173, 0, 0, 0, 229,
	251, 267, 116, 0, 0, 236, 261, 262, 0, 0,
	117, 135, 130, 198, 174, 113, 144, 226, 151, 158,
	205, 265, 188, 211, 120, 250, 227, 373, 384, 379,
	380, 377, 378, 376, 375, 374, 386, 364, 365, 366,
	367, 370, 0, 381, 382, 368, 99, 108, 155, 264,
	203, 133, 252, 0, 0, 126, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 102,
	109, 115, 121, 125, 129, 132, 137, 140, 143, 145,
	146, 147, 150, 160, 163, 164, 165, 166, 176, 177,
	178, 180, 183, 184, 185, 186, 187, 190, 192, 193,
	194, 195, 196, 197, 204, 207, 213, 214, 215, 216,
	217, 218, 219, 221, 222, 223, 224, 230, 233, 239,
	240, 249, 256, 260, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 0, 0, 0, 0, 154, 0,
	0, 0, 372, 156, 0, 0, 228, 170, 0, 0,
	0, 0, 362, 363, 0, 0, 0, 0, 0, 0,
	0, 0, 61, 0, 0, 329, 350, 349, 352, 353,
	354, 355, 0, 0, 118, 351, 356, 357, 358, 0,
	0, 0, 0, 343, 0, 371, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 340, 341, 0, 0, 0,
	0, 385, 0, 342, 0, 0, 337, 338, 339, 344,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 136,
	0, 0, 0, 0, 0, 257, 0, 0, 383, 201,
	0, 232, 139, 153, 114, 100, 110, 0, 138, 179,
	208, 212, 369, 0, 0, 0, 0, 122, 0, 210,
	189, 248, 0, 0, 191, 209, 157, 238, 202, 247,
	258, 259, 235, 255, 263, 225, 103, 234, 246, 119,
	220, 105, 244, 231, 168, 148, 149, 104, 0, 206,
	127, 134, 124, 181, 241, 242, 123, 266, 111, 254,
	107, 112, 253, 175, 237, 245, 169, 162, 106, 243,
	167, 161, 152, 131, 141, 199, 159, 200, 142, 172,
	171, 173, 0, 0, 0, 229, 251, 267, 116, 0,
	0, 236, 261, 262, 0, 0, 117, 135, 130, 198,
	174, 113, 144, 226, 151, 158, 205, 265, 188, 211,
	120, 250, 227, 373, 384, 379, 380, 377, 378, 376,
	375, 374, 386, 364, 365, 366, 367, 370, 0, 381,
	382, 368, 99, 108, 155, 264, 203, 133, 252, 0,
	0, 126, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 102, 109, 115, 121, 125,
	129, 132, 137, 140, 143, 145, 146, 147, 150, 160,
	163, 164, 165, 166, 176, 177, 178, 180, 183, 184,
	185, 186, 187, 190, 192, 193, 194, 195, 196, 197,
	204, 207, 213, 214, 215, 216, 217, 218, 219, 221,
	222, 223, 224, 230, 233, 239, 240, 249, 256, 260,
	182, 0, 0, 0, 0, 0, 0, 0, 0, 128,
	0, 0, 0, 0, 154, 0, 0, 0, 0, 156,
	0, 0, 228, 170, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 408, 0, 0, 0, 0, 0, 0, 0, 0,
	118, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 633, 632, 642,
	643, 635, 636, 637, 638, 639, 640, 641, 634, 0,
	0, 644, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 136, 0, 0, 0, 0,
	0, 257, 0, 0, 0, 201, 0, 232, 139, 153,
	114, 100, 110, 0, 138, 179, 208, 212, 0, 0,
	0, 0, 0, 122, 0, 210, 189, 248, 0, 0,
	191, 209, 157, 238, 202, 247, 258, 259, 235, 255,
	263, 225, 103, 234, 246, 119, 220, 105, 244, 231,
	168, 148, 149, 104, 0, 206, 127, 134, 124, 181,
	241, 242, 123, 266, 111, 254, 107, 112, 253, 175,
	237, 245, 169, 162, 106, 243, 167, 161, 152, 131,
	141, 199, 159, 200, 142, 172, 171, 173, 0, 0,
	0, 229, 251, 267, 116, 0, 0, 236, 261, 262,
	0, 0, 117, 135, 130, 198, 174, 113, 144, 226,
	151, 158, 205, 265, 188, 211, 120, 250, 227, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 108,
	155, 264, 203, 133, 252, 0, 0, 126, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 102, 109, 115, 121, 125, 129, 132, 137, 140,
	143, 145, 146, 147, 150, 160, 163, 164, 165, 166,
	176, 177, 178, 180, 183, 184, 185, 186, 187, 190,
	192, 193, 194, 195, 196, 197, 204, 207, 213, 214,
	215, 216, 217, 218, 219, 221, 222, 223, 224, 230,
	233, 239, 240, 249, 256, 260, 182, 0, 0, 0,
	621, 0, 0, 0, 0, 128, 0, 0, 0, 0,
	154, 0, 0, 0, 0, 156, 0, 0, 228, 170,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 408, 0, 623,
	0, 0, 0, 0, 0, 0, 118, 0, 0, 0,
	0, 0, 618, 617, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 619,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 136, 0, 0, 0, 0, 0, 257, 0, 0,
	0, 201, 0, 232, 139, 153, 114, 100, 110, 0,
	138, 179, 208, 212, 0, 0, 0, 0, 0, 122,
	0, 210, 189, 248, 0, 0, 191, 209, 157, 238,
	202, 247, 258, 259, 235, 255, 263, 225, 103, 234,
	246, 119, 220, 105, 244, 231, 168, 148, 149, 104,
	0, 206, 127, 134, 124, 181, 241, 242, 123, 266,
	111, 254, 107, 112, 253, 175, 237, 245, 169, 162,
	106, 243, 167, 161, 152, 131, 141, 199, 159, 200,
	142, 172, 171, 173, 0, 0, 0, 229, 251, 267,
	116, 0, 0, 236, 261, 262, 0, 0, 117, 135,
	130, 198, 174, 113, 144, 226, 151, 158, 205, 265,
	188, 211, 120, 250, 227, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 108, 155, 264, 203, 133,
	252, 0, 0, 126, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 102, 109, 115,
	121, 125, 129, 132, 137, 140, 143, 145, 146, 147,
	150, 160, 163, 164, 165, 166, 176, 177, 178, 180,
	183, 184, 185, 186, 187, 190, 192, 193, 194, 195,
	196, 197, 204, 207, 213, 214, 215, 216, 217, 218,
	219, 221, 222, 223, 224, 230, 233, 239, 240, 249,
	256, 260, 26, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 0, 0, 0, 0, 154, 0,
	0, 0, 0, 156, 0, 0, 228, 170, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 61, 0, 0, 408, 0, 0, 0, 0,
	0, 0, 0, 0, 118, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 136,
	0, 0, 0, 0, 0, 257, 0, 0, 0, 201,
	0, 232, 139, 153, 114, 100, 110, 0, 138, 179,
	208, 212, 0, 0, 0, 0, 0, 122, 0, 210,
	189, 248, 0, 0, 191, 209, 157, 238, 202, 247,
	258, 259, 235, 255, 263, 225, 103, 234, 246, 119,
	220, 105, 244, 231, 168, 148, 149, 104, 0, 206,
	127, 134, 124, 181, 241, 242, 123, 266, 111, 254,
	107, 112, 253, 175, 237, 245, 169, 162, 106, 243,
	167, 161, 152, 131, 141, 199, 159, 200, 142, 172,
	171, 173, 0, 0, 0, 229, 251, 267, 116, 0,
	0, 236, 261, 262, 0, 0, 117, 135, 130, 198,
	174, 113, 144, 226, 151, 158, 205, 265, 188, 211,
	120, 250, 227, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 108, 155, 264, 203, 133, 252, 0,
	0, 126, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 102, 109, 115, 121, 125,
	129, 132, 137, 140, 143, 145, 146, 147, 150, 160,
	163, 164, 165, 166, 176, 177, 178, 180, 183, 184,
	185, 186, 187, 190, 192, 193, 194, 195, 196, 197,
	204, 207, 213, 214, 215, 216, 217, 218, 219, 221,
	222, 223, 224, 230, 233, 239, 240, 249, 256, 260,
	26, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 182, 0, 0, 0, 0, 0, 0, 0,
	0, 128, 0, 0, 0, 0, 154, 0, 0, 0,
	0, 156, 0, 0, 228, 170, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	61, 0, 0, 97, 0, 0, 0, 0, 0, 0,
	0, 0, 118, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 136, 0, 0,
	0, 0, 0, 257, 0, 0, 0, 201, 0, 232,
	139, 153, 114, 100, 110, 0, 138, 179, 208, 212,
	0, 0, 0, 0, 0, 122, 0, 210, 189, 248,
	0, 0, 191, 209, 157, 238, 202, 247, 258, 259,
	235, 255, 263, 225, 103, 234, 246, 119, 220, 105,
	244, 231, 168, 148, 149, 104, 0, 206, 127, 134,
	124, 181, 241, 242, 123, 266, 111, 254, 107, 112,
	253, 175, 237, 245, 169, 162, 106, 243, 167, 161,
	152, 131, 141, 199, 159, 200, 142, 172, 171, 173,
	0, 0, 0, 229, 251, 267, 116, 0, 0, 236,
	261, 262, 0, 0, 117, 135, 130, 198, 174, 113,
	144, 226, 151, 158, 205, 265, 188, 211, 120, 250,
	227, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 108, 155, 264, 203, 133, 252, 0, 0, 126,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 102, 109, 115, 121, 125, 129, 132,
	137, 140, 143, 145, 146, 147, 150, 160, 163, 164,
	165, 166, 176, 177, 178, 180, 183, 184, 185, 186,
	187, 190, 192, 193, 194, 195, 196, 197, 204, 207,
	213, 214, 215, 216, 217, 218, 219, 221, 222, 223,
	224, 230, 233, 239, 240, 249, 256, 260, 182, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 0, 0,
	0, 0, 154, 0, 0, 0, 0, 156, 0, 0,
	228, 170, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 408,
	0, 0, 850, 0, 0, 851, 0, 0, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 0, 0, 0, 0, 0, 257,
	0, 0, 0, 201, 0, 232, 139, 153, 114, 100,
	110, 0, 138, 179, 208, 212, 0, 0, 0, 0,
	0, 122, 0, 210, 189, 248, 0, 0, 191, 209,
	157, 238, 202, 247, 258, 259, 235, 255, 263, 225,
	103, 234, 246, 119, 220, 105, 244, 231, 168, 148,
	149, 104, 0, 206, 127, 134, 124, 181, 241, 242,
	123, 266, 111, 254, 107, 112, 253, 175, 237, 245,
	169, 162, 106, 243, 167, 161, 152, 131, 141, 199,
	159, 200, 142, 172, 171, 173, 0, 0, 0, 229,
	251, 267, 116, 0, 0, 236, 261, 262, 0, 0,
	117, 135, 130, 198, 174, 113, 144, 226, 151, 158,
	205, 265, 188, 211, 120, 250, 227, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 108, 155, 264,
	203, 133, 252, 0, 0, 126, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 102,
	109, 115, 121, 125, 129, 132, 137, 140, 143, 145,
	146, 147, 150, 160, 163, 164, 165, 166, 176, 177,
	178, 180, 183, 184, 185, 186, 187, 190, 192, 193,
	194, 195, 196, 197, 204, 207, 213, 214, 215, 216,
	217, 218, 219, 221, 222, 223, 224, 230, 233, 239,
	240, 249, 256, 260, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 736, 0, 0, 0, 154, 0,
	0, 0, 0, 156, 0, 0, 228, 170, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 408, 0, 735, 0, 0,
	0, 0, 0, 0, 118, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 136,
	0, 0, 0, 0, 0, 257, 0, 0, 0, 201,
	0, 232, 139, 153, 114, 100, 110, 0, 138, 179,
	208, 212, 0, 0, 0, 0, 0, 122, 0, 210,
	189, 248, 0, 0, 191, 209, 157, 238, 202, 247,
	258, 259, 235, 255, 263, 225, 103, 234, 246, 119,
	220, 105, 244, 231, 168, 148, 149, 104, 0, 206,
	127, 134, 124, 181, 241, 242, 123, 266, 111, 254,
	107, 112, 253, 175, 237, 245, 169, 162, 106, 243,
	167, 161, 152, 131, 141, 199, 159, 200, 142, 172,
	171, 173, 0, 0, 0, 229, 251, 267, 116, 0,
	0, 236, 261, 262, 0, 0, 117, 135, 130, 198,
	174, 113, 144, 226, 151, 158, 205, 265, 188, 211,
	120, 250, 227, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 108, 155, 264, 203, 133, 252, 0,
	0, 126, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 102, 109, 115, 121, 125,
	129, 132, 137, 140, 143, 145, 146, 147, 150, 160,
	163, 164, 165, 166, 176, 177, 178, 180, 183, 184,
	185, 186, 187, 190, 192, 193, 194, 195, 196, 197,
	204, 207, 213, 214, 215, 216, 217, 218, 219, 221,
	222, 223, 224, 230, 233, 239, 240, 249, 256, 260,
	182, 0, 0, 0, 0, 0, 0, 0, 0, 128,
	0, 0, 0, 0, 154, 0, 0, 0, 0, 156,
	0, 0, 228, 170, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 0, 1415, 0, 0, 0, 0, 0, 0,
	118, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 136, 0, 0, 0, 0,
	0, 257, 0, 0, 0, 201, 0, 232, 139, 153,
	114, 100, 110, 0, 138, 179, 208, 212, 0, 0,
	0, 0, 0, 122, 0, 210, 189, 248, 0, 0,
	191, 209, 157, 238, 202, 247, 258, 259, 235, 255,
	263, 225, 103, 234, 246, 119, 220, 105, 244, 231,
	168, 148, 149, 104, 0, 206, 127, 134, 124, 181,
	241, 242, 123, 266, 111, 254, 107, 112, 253, 175,
	237, 245, 169, 162, 106, 243, 167, 161, 152, 131,
	141, 199, 159, 200, 142, 172, 171, 173, 0, 0,
	0, 229, 251, 267, 116, 0, 0, 236, 261, 262,
	0, 0, 117, 135, 130, 198, 174, 113, 144, 226,
	151, 158, 205, 265, 188, 211, 120, 250, 227, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 108,
	155, 264, 203, 133, 252, 0, 0, 126, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 102, 109, 115, 121, 125, 129, 132, 137, 140,
	143, 145, 146, 147, 150, 160, 163, 164, 165, 166,
	176, 177, 178, 180, 183, 184, 185, 186, 187, 190,
	192, 193, 194, 195, 196, 197, 204, 207, 213, 214,
	215, 216, 217, 218, 219, 221, 222, 223, 224, 230,
	233, 239, 240, 249, 256, 260, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 0, 0, 0, 0,
	154, 0, 0, 0, 0, 156, 0, 0, 228, 170,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 61, 0, 0, 97, 0, 0,
	0, 0, 0, 0, 0, 0, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 136, 0, 0, 0, 0, 0, 257, 0, 0,
	0, 201, 0, 232, 139, 153, 114, 100, 110, 0,
	138, 179, 208, 212, 0, 0, 0, 0, 0, 122,
	0, 210, 189, 248, 0, 0, 191, 209, 157, 238,
	202, 247, 258, 259, 235, 255, 263, 225, 103, 234,
	246, 119, 220, 105, 244, 231, 168, 148, 149, 104,
	0, 206, 127, 134, 124, 181, 241, 242, 123, 266,
	111, 254, 107, 112, 253, 175, 237, 245, 169, 162,
	106, 243, 167, 161, 152, 131, 141, 199, 159, 200,
	142, 172, 171, 173, 0, 0, 0, 229, 251, 267,
	116, 0, 0, 236, 261, 262, 0, 0, 117, 135,
	130, 198, 174, 113, 144, 226, 151, 158, 205, 265,
	188, 211, 120, 250, 227, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 108, 155, 264, 203, 133,
	252, 0, 0, 126, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 102, 109, 115,
	121, 125, 129, 132, 137, 140, 143, 145, 146, 147,
	150, 160, 163, 164, 165, 166, 176, 177, 178, 180,
	183, 184, 185, 186, 187, 190, 192, 193, 194, 195,
	196, 197, 204, 207, 213, 214, 215, 216, 217, 218,
	219, 221, 222, 223, 224, 230, 233, 239, 240, 249,
	256, 260, 182, 0, 0, 0, 0, 0, 0, 0,
	0, 128, 0, 0, 0, 0, 154, 0, 0, 0,
	0, 156, 0, 0, 228, 170, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 408, 0, 623, 0, 0, 0, 0,
	0, 0, 118, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 136, 0, 0,
	0, 0, 0, 257, 0, 0, 0, 201, 0, 232,
	139, 153, 114, 100, 110, 0, 138, 179, 208, 212,
	0, 0, 0, 0, 0, 122, 0, 210, 189, 248,
	0, 0, 191, 209, 157, 238, 202, 247, 258, 259,
	235, 255, 263, 225, 103, 234, 246, 119, 220, 105,
	244, 231, 168, 148, 149, 104, 0, 206, 127, 134,
	124, 181, 241, 242, 123, 266, 111, 254, 107, 112,
	253, 175, 237, 245, 169, 162, 106, 243, 167, 161,
	152, 131, 141, 199, 159, 200, 142, 172, 171, 173,
	0, 0, 0, 229, 251, 267, 116, 0, 0, 236,
	261, 262, 0, 0, 117, 135, 130, 198, 174, 113,
	144, 226, 151, 158, 205, 265, 188, 211, 120, 250,
	227, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 108, 155, 264, 203, 133, 252, 0, 0, 126,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 102, 109, 115, 121, 125, 129, 132,
	137, 140, 143, 145, 146, 147, 150, 160, 163, 164,
	165, 166, 176, 177, 178, 180, 183, 184, 185, 186,
	187, 190, 192, 193, 194, 195, 196, 197, 204, 207,
	213, 214, 215, 216, 217, 218, 219, 221, 222, 223,
	224, 230, 233, 239, 240, 249, 256, 260, 182, 0,
	0, 0, 0, 0, 0, 0, 706, 128, 0, 0,
	0, 0, 154, 0, 0, 0, 0, 156, 0, 0,
	228, 170, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	0, 0, 0, 0, 0, 0, 0, 0, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 0, 0, 0, 0, 0, 257,
	0, 0, 0, 201, 0, 232, 139, 153, 114, 100,
	110, 0, 138, 179, 208, 212, 0, 0, 0, 0,
	0, 122, 0, 210, 189, 248, 0, 0, 191, 209,
	157, 238, 202, 247, 258, 259, 235, 255, 263, 225,
	103, 234, 246, 119, 220, 105, 244, 231, 168, 148,
	149, 104, 0, 206, 127, 134, 124, 181, 241, 242,
	123, 266, 111, 254, 107, 112, 253, 175, 237, 245,
	169, 162, 106, 243, 167, 161, 152, 131, 141, 199,
	159, 200, 142, 172, 171, 173, 0, 0, 0, 229,
	251, 267, 116, 0, 0, 236, 261, 262, 0, 0,
	117, 135, 130, 198, 174, 113, 144, 226, 151, 158,
	205, 265, 188, 211, 120, 250, 227, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 108, 155, 264,
	203, 133, 252, 0, 0, 126, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 102,
	109, 115, 121, 125, 129, 132, 137, 140, 143, 145,
	146, 147, 150, 160, 163, 164, 165, 166, 176, 177,
	178, 180, 183, 184, 185, 186, 187, 190, 192, 193,
	194, 195, 196, 197, 204, 207, 213, 214, 215, 216,
	217, 218, 219, 221, 222, 223, 224, 230, 233, 239,
	240, 249, 256, 260, 389, 0, 0, 0, 0, 0,
	0, 182, 0, 0, 0, 0, 0, 0, 0, 0,
	128, 0, 0, 0, 0, 154, 0, 0, 0, 0,
	156, 0, 0, 228, 170, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 0, 0, 0, 0, 0, 0, 0,
	0, 118, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 136, 0, 0, 0,
	0, 0, 257, 0, 0, 0, 201, 0, 232, 139,
	153, 114, 100, 110, 0, 138, 179, 208, 212, 0,
	0, 0, 0, 0, 122, 0, 210, 189, 248, 0,
	0, 191, 209, 157, 238, 202, 247, 258, 259, 235,
	255, 263, 225, 103, 234, 246, 119, 220, 105, 244,
	231, 168, 148, 149, 104, 0, 206, 127, 134, 124,
	181, 241, 242, 123, 266, 111, 254, 107, 112, 253,
	175, 237, 245, 169, 162, 106, 243, 167, 161, 152,
	131, 141, 199, 159, 200, 142, 172, 171, 173, 0,
	0, 0, 229, 251, 267, 116, 0, 0, 236, 261,
	262, 0, 0, 117, 135, 130, 198, 174, 113, 144,
	226, 151, 158, 205, 265, 188, 211, 120, 250, 227,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	108, 155, 264, 203, 133, 252, 0, 0, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 102, 109, 115, 121, 125, 129, 132, 137,
	140, 143, 145, 146, 147, 150, 160, 163, 164, 165,
	166, 176, 177, 178, 180, 183, 184, 185, 186, 187,
	190, 192, 193, 194, 195, 196, 197, 204, 207, 213,
	214, 215, 216, 217, 218, 219, 221, 222, 223, 224,
	230, 233, 239, 240, 249, 256, 260, 182, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 0, 0, 0,
	0, 154, 0, 0, 0, 0, 156, 0, 0, 228,
	170, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 0,
	0, 0, 0, 0, 0, 0, 0, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 136, 0, 0, 0, 94, 0, 257, 0,
	0, 0, 201, 0, 232, 139, 153, 114, 100, 110,
	0, 138, 179, 208, 212, 0, 0, 0, 0, 0,
	122, 0, 210, 189, 248, 0, 0, 191, 209, 157,
	238, 202, 247, 258, 259, 235, 255, 263, 225, 103,
	234, 246, 119, 220, 105, 244, 231, 168, 148, 149,
	104, 0, 206, 127, 134, 124, 181, 241, 242, 123,
	266, 111, 254, 107, 112, 253, 175, 237, 245, 169,
	162, 106, 243, 167, 161, 152, 131, 141, 199, 159,
	200, 142, 172, 171, 173, 0, 0, 0, 229, 251,
	267, 116, 0, 0, 236, 261, 262, 0, 0, 117,
	135, 130, 198, 174, 113, 144, 226, 151, 158, 205,
	265, 188, 211, 120, 250, 227, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 108, 155, 264, 203,
	133, 252, 0, 0, 126, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 102, 109,
	115, 121, 125, 129, 132, 137, 140, 143, 145, 146,
	147, 150, 160, 163, 164, 165, 166, 176, 177, 178,
	180, 183, 184, 185, 186, 187, 190, 192, 193, 194,
	195, 196, 197, 204, 207, 213, 214, 215, 216, 217,
	218, 219, 221, 222, 223, 224, 230, 233, 239, 240,
	249, 256, 260, 182, 0, 0, 0, 0, 0, 0,
	0, 0, 128, 0, 0, 0, 0, 154, 0, 0,
	0, 0, 156, 0, 0, 228, 170, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 408, 0, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 0,
	0, 0, 0, 0, 257, 0, 0, 0, 201, 0,
	232, 139, 153, 114, 100, 110, 0, 138, 179, 208,
	212, 0, 0, 0, 0, 0, 122, 0, 210, 189,
	248, 0, 0, 191, 209, 157, 238, 202, 247, 258,
	259, 235, 255, 263, 225, 103, 234, 246, 119, 220,
	105, 244, 231, 168, 148, 149, 104, 0, 206, 127,
	134, 124, 181, 241, 242, 123, 266, 111, 254, 107,
	112, 253, 175, 237, 245, 169, 162, 106, 243, 167,
	161, 152, 131, 141, 199, 159, 200, 142, 172, 171,
	173, 0, 0, 0, 229, 251, 267, 116, 0, 0,
	236, 261, 262, 0, 0, 117, 135, 130, 198, 174,
	113, 144, 226, 151, 158, 205, 265, 188, 211, 120,
	250, 227, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 108, 155, 264, 203, 133, 252, 0, 0,
	126, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 102, 109, 115, 121, 125, 129,
	132, 137, 140, 143, 145, 146, 147, 150, 160, 163,
	164, 165, 166, 176, 177, 178, 180, 183, 184, 185,
	186, 187, 190, 192, 193, 194, 195, 196, 197, 204,
	207, 213, 214, 215, 216, 217, 218, 219, 221, 222,
	223, 224, 230, 233, 239, 240, 249, 256, 260, 182,
	0, 0, 0, 0, 0, 0, 0, 0, 128, 0,
	0, 0, 0, 154, 0, 0, 0, 0, 156, 0,
	0, 228, 170, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 0, 0, 0, 0, 0, 0, 0, 0, 118,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 0, 0, 0, 0, 0,
	257, 0, 0, 0, 201, 0, 232, 139, 153, 114,
	100, 110, 0, 138, 179, 208, 212, 0, 0, 0,
	0, 0, 122, 0, 210, 189, 248, 0, 0, 191,
	209, 157, 238, 202, 247, 258, 259, 235, 255, 263,
	225, 103, 234, 246, 119, 220, 105, 244, 231, 168,
	148, 149, 104, 0, 206, 127, 134, 124, 181, 241,
	242, 123, 266, 111, 254, 107, 112, 253, 175, 237,
	245, 169, 162, 106, 243, 167, 161, 152, 131, 141,
	199, 159, 200, 142, 172, 171, 173, 0, 0, 0,
	229, 251, 267, 116, 0, 0, 236, 261, 262, 0,
	0, 117, 135, 130, 198, 174, 113, 144, 226, 151,
	158, 205, 265, 188, 211, 120, 250, 227, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 108, 155,
	264, 203, 133, 252, 0, 0, 126, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	102, 109, 115, 121, 125, 129, 132, 137, 140, 143,
	145, 146, 147, 150, 160, 163, 164, 165, 166, 176,
	177, 178, 180, 183, 184, 185, 186, 187, 190, 192,
	193, 194, 195, 196, 197, 204, 207, 213, 214, 215,
	216, 217, 218, 219, 221, 222, 223, 224, 230, 233,
	239, 240, 249, 256, 260, 182, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 0, 0, 0, 0, 154,
	0, 0, 0, 0, 156, 0, 0, 228, 170, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	136, 0, 0, 0, 0, 0, 257, 0, 0, 0,
	201, 0, 232, 139, 153, 114, 100, 110, 0, 138,
	179, 208, 212, 0, 0, 0, 0, 0, 122, 0,
	210, 189, 248, 0, 0, 191, 209, 157, 238, 202,
	247, 258, 259, 235, 255, 263, 225, 103, 234, 246,
	119, 220, 105, 244, 231, 168, 148, 149, 104, 0,
	206, 127, 134, 124, 181, 241, 242, 123, 266, 111,
	254, 107, 112, 253, 175, 237, 245, 169, 162, 106,
	243, 167, 161, 152, 131, 141, 199, 159, 200, 142,
	172, 171, 173, 0, 0, 0, 229, 251, 267, 116,
	0, 0, 236, 261, 262, 0, 0, 117, 135, 130,
	198, 174, 113, 144, 226, 151, 158, 205, 265, 188,
	211, 120, 250, 227, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 108, 155, 264, 203, 133, 252,
	0, 0, 126, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 102, 109, 115, 121,
	125, 129, 132, 137, 140, 143, 145, 146, 147, 150,
	160, 163, 164, 165, 166, 176, 177, 178, 180, 183,
	184, 185, 186, 187, 190, 192, 193, 194, 195, 196,
	197, 204, 207, 213, 214, 215, 216, 217, 218, 219,
	221, 222, 223, 224, 230, 233, 239, 240, 249, 256,
	260,
}
var yyPact = [...]int{

	1917, -1000, -268, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1024, 1060, -1000, -1000, -1000, -1000,
	-1000, -1000, 307, 103, -1000, -1000, -1000, 144, 35, 14049,
	143, 1554, 14721, -1000, 15, -1000, -1000, 105, 14721, -1000,
	-1000, -55, -60, -1000, 786, -1000, -1000, 52, -1000, -1000,
	-1000, -1000, -1000, -1000, 993, 1018, 839, 995, 900, -1000,
	7622, 90, 90, 13713, 6614, -1000, -1000, 365, 14721, 138,
	14721, -129, 84, 84, 84, -1000, -1000, -1000, 14721, 85,
	679, 85, 85, 85, 14721, -1000, 219, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 14721, 644,
	952, 3473, 73, 3473, 3473, -1000, 3473, 3473, -1000, 3473,
	27, 3473, -51, 1039, 23, -15, -1000, 3473, -1000, -1000,
	-1000, -1000, -1000, 145, 786, 333, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 623, 140, 14721, 247, -1000, 944, 8978,
	8978, 1024, -1000, 786, -1000, -1000, -1000, 934, -1000, -1000,
	403, 1049, -1000, 10658, 218, -1000, 8978, 2090, 787, -1000,
	-1000, 787, -1000, -1000, 169, -1000, -1000, 9986, 9986, 9986,
	9986, 9986, 9986, 9986, 9986, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 787,
	-1000, 8642, 787, 787, 787, 787, 787, 787, 787, 787,
	787, 8978, 787, 787, 787, 787, 787, 787, 787, 787,
	787, 787, 787, 787, 787, 787, 787, 13370, 12698, 14721,
	731, 725, -1000, -1000, 211, 774, 6265, -80, -1000, -1000,
	-1000, 332, 12026, -1000, -1000, -1000, 951, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 689,
	14721, -1000, 2308, -1000, 629, 991, 125, 625, 349, 612,
	14721, 784, 98, 14721, 968, 848, 14721, 611, 609, -1000,
	5916, -1000, 3473, 3473, -1000, -1000, -1000, 84, 84, 3473,
	3473, 14721, 3473, 3473, -1000, -1000, -1000, -1000, -1000, 3473,
	3473, -1000, 1047, 344, -1000, -1000, -1000, -1000, 8978, 273,
	-1000, 847, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 596,
	-1000, -1000, -1000, -1000, 14721, 3473, 33, 69, 62, 14721,
	-1000, 265, 576, 201, 781, -1000, 543, 993, 623, 900,
	11690, 855, -1000, -1000, -1000, 14721, -1000, 8978, 8978, 449,
	-1000, 13034, -1000, -1000, 4520, 285, 9986, 423, 313, 9986,
	9986, 9986, 9986, 9986, 9986, 9986, 9986, 9986, 9986, 9986,
	9986, 9986, 9986, 9986, 467, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 590, -1000, 786, 613, 613, 243, 243,
	243, 243, 243, 243, 243, 10322, 988, 623, 683, 309,
	8642, 7622, 7622, 8978, 8978, 8294, 7958, 7622, 7622, 988,
	342, 309, 15057, -1000, -1000, 9650, -1000, -1000, -1000, -1000,
	-1000, 623, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 14385,
	14385, 7622, 7622, 7622, 7622, 49, 14721, -1000, 749, 846,
	-1000, -1000, -1000, 976, 11354, -1000, 49, 746, 12698, 14721,
	-1000, -1000, 12698, 14721, 4171, 5567, 774, -80, 765, -1000,
	-105, -85, 6950, 225, -1000, -1000, -1000, -1000, 3124, 345,
	708, -1000, -47, -1000, -1000, -1000, 791, -1000, 791, 791,
	791, 791, -19, -19, -19, -19, -1000, -1000, -1000, -1000,
	-1000, 810, 807, -1000, 791, 791, 791, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 805, 805, 805, 799, 799,
	825, -1000, 14721, 3473, 967, 3473, -1000, 14721, 14721, 773,
	-1000, 14721, 772, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 579, 566, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	14721, 362, 14721, 14721, 309, -1000, 498, 14721, -1000, 100,
	-1000, 14721, 14721, 14721, 14721, 14721, 154, 908, 8978, 8978,
	5218, 8978, -1000, -1000, -1000, 944, -1000, 988, 1014, -1000,
	921, 917, 7622, -1000, -1000, 285, 327, -1000, -1000, 425,
	-1000, -1000, -1000, -1000, 199, 787, -1000, 2218, -1000, -1000,
	-1000, -1000, 423, 9986, 9986, 9986, 146, 2218, 2272, 504,
	2346, 243, 471, 471, 244, 244, 244, 244, 244, 433,
	433, -1000, -1000, -1000, 623, -1000, -1000, -1000, 7622, -1000,
	8978, -1000, 623, 677, -1000, 677, 557, 568, 299, 1046,
	677, 297, 1045, 677, 677, 677, 7622, 341, -1000, 8978,
	623, -1000, 190, -1000, 815, 770, 769, 677, 623, 768,
	677, 677, 715, 787, -1000, 15057, 12698, 12698, 12698, 12698,
	12698, -1000, 891, 890, -1000, 882, 879, 862, 14721, -1000,
	675, 11354, 1007, 48, 1034, 12698, 753, -1000, 753, -1000,
	183, -1000, -1000, 765, -80, -71, -1000, -1000, -1000, -1000,
	309, -1000, 484, 759, 2774, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 803, 564, -1000, 939, 230, 228, 562, 931,
	-1000, -1000, -1000, 448, -50, -1000, -1000, 465, -19, -19,
	-1000, -1000, 225, 947, 225, 225, 225, 497, 497, -1000,
	-1000, -1000, -1000, 461, -1000, -1000, -1000, 460, -1000, 845,
	14385, 786, 979, -1000, -1000, -1000, 93, -1000, 3473, 14721,
	3473, 3473, 344, -1000, 496, 8978, -1000, -1000, -1000, -1000,
	-1000, 158, 158, 360, 80, 80, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 47, 823, -1000,
	-1000, -1000, -1000, 20, 31, 906, 309, 309, 176, -1000,
	-1000, 14721, -1000, -1000, -1000, -1000, 758, -1000, -1000, -1000,
	3822, 7622, -1000, 146, 2218, 2257, -1000, 9986, 9986, -1000,
	623, 309, -1000, 7622, -1000, -1000, 117, 467, 117, 9986,
	9986, -1000, 9986, 9986, -1000, -150, -1000, 762, 328, -1000,
	8978, 410, -1000, 5218, -1000, 9986, 9986, -1000, -1000, -1000,
	-1000, 844, 15057, 787, -1000, 11006, 14385, 761, -1000, 326,
	846, 822, 832, 713, -1000, -1000, -1000, -1000, 885, -1000,
	881, -1000, -1000, -1000, -1000, 976, 924, 787, 1024, 8978,
	753, -1000, -1000, 238, -1000, -1000, -109, -115, -1000, -1000,
	-1000, 3124, -1000, 3124, 14385, 67, -1000, 562, 562, -1000,
	-1000, -1000, 802, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	397, 9986, 1055, -1000, 930, -1000, 927, 491, -1000, -1000,
	690, 225, 225, -1000, 286, -1000, -1000, -1000, 670, -1000,
	659, 752, 654, 14721, -1000, -1000, -1000, 14721, -1000, -1000,
	-1000, -1000, 362, -1000, 309, -1000, 523, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 556,
	-1000, 538, 14721, -1000, -1000, -1000, -1000, -1000, 525, 533,
	14385, -157, 528, 14385, 14385, 14385, -1000, 4869, -1000, 1034,
	12698, -1000, -1000, 623, -1000, 9986, 2218, 2218, -1000, -1000,
	623, 791, 791, -1000, 791, 799, -1000, 791, 6, 791,
	5, 623, 623, 2179, 2143, 2128, 408, 787, -142, -1000,
	309, 8978, -1000, 2003, 1715, -1000, 956, 698, 727, -1000,
	-1000, 7286, 623, 652, 175, 640, -1000, 1024, 15057, 8978,
	-1000, -1000, 8978, 794, -1000, 8978, -1000, -1000, -1000, 204,
	12362, 970, 14385, 993, 309, -1000, -1000, -1000, -1000, 2774,
	-1000, 648, -1000, 791, -1000, -1000, -1000, 14385, -1000, 2218,
	-146, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -19,
	485, -19, 453, -1000, 438, 3473, -1000, 786, -1000, -1000,
	525, 65, -1000, -1000, -1000, 212, -1000, -1000, 65, 525,
	958, -1000, 4869, -1000, -1000, 790, 824, -1000, 1031, 748,
	-1000, 2218, -1000, -1000, 123, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 9986, 9986, 9986, 9986, 9986, 623, 469,
	309, 9986, 9986, 926, -1000, 787, -1000, -1000, 764, 14385,
	14385, -1000, 14385, 993, -1000, 309, 309, 14385, 309, -1000,
	137, 135, 132, -1000, -1000, -1000, -203, 640, -1000, 185,
	14385, -1000, 638, -1000, -1000, 225, -1000, 225, 671, 660,
	-1000, -1000, 655, -1000, -1000, 519, 510, -1000, -1000, -1000,
	65, 787, 747, -1000, 324, 14385, 14721, 1026, 1011, -1000,
	-1000, 815, 815, 815, 815, 43, -1000, -1000, 815, 815,
	1054, -1000, 787, -1000, 786, 167, -1000, -1000, -1000, 636,
	787, 787, 787, 468, -1000, 185, -1000, 506, 303, 411,
	-1000, 64, 14385, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 45, 4869, 3124, 633, -1000, -1000,
	8978, 8978, -1000, -1000, -1000, -1000, 623, 63, -160, -1000,
	-1000, 15057, 727, 623, 14385, -1000, 14385, 14385, 14385, -1000,
	-1000, -1000, 431, -1000, -1000, 14721, -1000, -1000, -1000, 622,
	-1000, 14385, -1000, -1000, 823, 309, 726, -1000, 905, -155,
	-175, 722, -1000, -1000, 603, 603, 603, -1000, 788, -1000,
	45, 915, -157, -1000, 903, -1000, -1000, -1000, -1000, 14385,
	-1000, 44, -1000, -158, 587, 37, -170, 829, 787, -179,
	816, -1000, 1044, 9314, -1000, -1000, 1052, 186, 186, 815,
	623, -1000, -1000, -1000, 74, 470, -1000, -1000, -1000, -1000,
	-1000, -1000,
}
var yyPgo = [...]int{

	0, 1289, 33, 499, 1287, 1285, 1284, 99, 98, 91,
	1283, 1280, 1278, 1276, 1275, 1273, 1272, 1269, 1267, 1266,
	1265, 1264, 1263, 1262, 1259, 1257, 1256, 1255, 1254, 1243,
	1240, 1238, 94, 1237, 1232, 1227, 76, 1226, 77, 1225,
	1224, 1223, 45, 135, 51, 48, 652, 1221, 31, 56,
	97, 1220, 36, 1218, 1217, 84, 1216, 1215, 1213, 54,
	1212, 1211, 1605, 1210, 71, 1209, 1207, 38, 1206, 1205,
	1203, 1202, 73, 958, 1200, 1199, 17, 1195, 1194, 90,
	1193, 57, 4, 15, 11, 21, 1191, 30, 9, 1188,
	60, 1187, 1185, 1184, 1183, 37, 1182, 12, 62, 23,
	1180, 16, 59, 1177, 5, 70, 24, 1176, 26, 13,
	78, 63, 1175, 25, 64, 58, 1174, 1173, 483, 1172,
	1171, 52, 1169, 1168, 29, 1167, 456, 82, 1163, 1160,
	1157, 1156, 1155, 35, 65, 1154, 18, 93, 47, 0,
	311, 302, 80, 1153, 1151, 1150, 1179, 44, 1149, 1148,
	1147, 46, 1146, 1141, 41, 1138, 1137, 1134, 1131, 1130,
	1128, 1123, 1121, 102, 1118, 1115, 1114, 20, 42, 1112,
	1106, 61, 27, 1101, 1100, 1096, 53, 22, 1090, 1089,
	55, 28, 1087, 1086, 1084, 1082, 1080, 39, 14, 1079,
	19, 1078, 10, 1077, 32, 1076, 3, 1075, 7, 1074,
	8, 1073, 6, 50, 1, 1071, 2, 1070, 1069, 66,
	188, 85, 1068, 1067, 1066, 83,
}
var yyR1 = [...]int{

	0, 207, 208, 208, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 6,
	3, 4, 4, 5, 5, 7, 7, 35, 35, 8,
	9, 9, 9, 9, 211, 211, 57, 57, 55, 55,
	56, 56, 105, 105, 10, 10, 10, 10, 111, 111,
	115, 115, 115, 116, 116, 116, 116, 152, 152, 99,
	11, 11, 11, 11, 11, 11, 11, 202, 202, 201,
	200, 200, 199, 199, 198, 20, 183, 185, 185, 184,
	184, 184, 184, 177, 156, 156, 156, 156, 156, 156,
	156, 155, 155, 155, 155, 159, 159, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 158, 158, 158, 158,
	158, 160, 160, 160, 160, 160, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 162, 162, 162, 162, 162, 162, 162, 162, 176,
	176, 163, 163, 171, 171, 172, 172, 172, 169, 169,
	170, 170, 173, 173, 165, 166, 174, 167, 167, 167,
	168, 168, 168, 175, 175, 175, 175, 164, 178, 178,
	193, 193, 192, 192, 192, 182, 182, 189, 189, 189,
	189, 189, 180, 180, 181, 181, 191, 191, 190, 179,
	179, 194, 194, 194, 194, 205, 206, 204, 204, 204,
	204, 204, 186, 186, 186, 187, 187, 187, 188, 188,
	188, 16, 16, 16, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 97, 97, 97, 18,
	19, 19, 19, 19, 19, 19, 19, 19, 134, 134,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	197, 195, 195, 196, 196, 12, 21, 21, 13, 13,
	13, 13, 13, 14, 14, 22, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 122, 122, 120, 120,
	123, 123, 121, 121, 121, 124, 124, 124, 125, 125,
	153, 153, 153, 24, 24, 29, 29, 30, 31, 135,
	135, 27, 27, 28, 28, 28, 28, 41, 41, 212,
	212, 26, 26, 25, 25, 25, 25, 15, 213, 32,
	33, 33, 34, 34, 34, 38, 38, 38, 36, 36,
	36, 37, 37, 44, 44, 43, 43, 45, 45, 45,
	45, 143, 143, 143, 142, 142, 47, 47, 48, 48,
	49, 49, 50, 50, 50, 50, 65, 214, 107, 150,
	150, 104, 104, 106, 106, 51, 51, 51, 51, 52,
	52, 53, 53, 54, 54, 133, 133, 149, 149, 148,
	148, 58, 58, 58, 60, 59, 59, 59, 59, 61,
	61, 63, 63, 62, 62, 64, 66, 66, 66, 66,
	67, 67, 46, 46, 46, 46, 46, 46, 46, 119,
	119, 69, 69, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 80, 80, 80, 80, 80, 80, 70,
	70, 70, 70, 70, 70, 70, 42, 42, 81, 81,
	81, 87, 82, 82, 73, 73, 73, 73, 73, 73,
	73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
	73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
	73, 73, 73, 73, 73, 73, 77, 77, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 215, 215,
	79, 78, 78, 78, 78, 78, 78, 39, 39, 39,
	39, 39, 151, 151, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 91, 91, 40,
	40, 89, 89, 90, 92, 92, 88, 88, 88, 72,
	72, 72, 72, 72, 72, 72, 72, 74, 74, 74,
	93, 93, 94, 94, 95, 95, 96, 96, 98, 100,
	100, 100, 101, 101, 101, 101, 102, 102, 71, 71,
	71, 71, 71, 71, 103, 103, 103, 103, 108, 108,
	83, 83, 85, 85, 84, 86, 109, 109, 113, 110,
	110, 114, 114, 114, 114, 112, 112, 112, 145, 145,
	145, 117, 117, 126, 126, 127, 127, 118, 118, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 132,
	132, 131, 131, 131, 129, 129, 130, 130, 130, 130,
	144, 144, 140, 140, 141, 141, 146, 146, 147, 147,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 209, 210,
	136, 137, 137, 137,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 4, 6, 7, 5,
	10, 1, 3, 1, 3, 7, 8, 1, 1, 9,
	8, 7, 6, 6, 1, 1, 1, 3, 1, 3,
	1, 3, 0, 4, 3, 4, 5, 4, 1, 3,
	3, 2, 2, 2, 2, 2, 1, 1, 1, 0,
	2, 2, 8, 7, 9, 5, 5, 0, 2, 1,
	0, 2, 1, 3, 3, 4, 4, 2, 4, 1,
	3, 3, 3, 3, 0, 2, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 1, 4, 4, 2, 2,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 6,
	6, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 1,
	0, 1, 1, 2, 2, 3, 1, 0, 3, 3,
	0, 2, 2, 2, 1, 2, 1, 2, 5, 4,
	1, 2, 2, 3, 2, 0, 1, 2, 3, 3,
	2, 2, 1, 1, 0, 1, 1, 3, 2, 3,
	1, 10, 11, 11, 12, 3, 3, 1, 1, 2,
	2, 2, 0, 1, 3, 1, 2, 3, 1, 1,
	1, 1, 1, 1, 6, 10, 9, 7, 7, 7,
	9, 7, 7, 9, 10, 5, 0, 1, 2, 4,
	7, 5, 5, 5, 12, 7, 5, 9, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	7, 1, 3, 8, 8, 3, 3, 5, 4, 6,
	4, 4, 4, 3, 2, 3, 4, 4, 3, 6,
	6, 4, 4, 4, 4, 4, 3, 3, 2, 3,
	3, 2, 3, 4, 3, 7, 5, 4, 2, 4,
	4, 3, 3, 5, 2, 3, 1, 1, 0, 1,
	1, 1, 0, 2, 2, 0, 2, 2, 0, 2,
	0, 1, 1, 2, 1, 1, 2, 1, 1, 1,
	1, 3, 3, 1, 1, 1, 1, 0, 3, 1,
	1, 2, 2, 2, 2, 3, 3, 2, 0, 2,
	0, 2, 1, 2, 2, 0, 1, 1, 0, 1,
	1, 0, 1, 0, 1, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 1, 0, 2, 1, 3,
	1, 1, 1, 3, 1, 3, 5, 0, 5, 0,
	5, 1, 3, 1, 3, 4, 4, 4, 3, 2,
	4, 0, 1, 0, 2, 0, 1, 0, 2, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 3, 0, 5, 5, 5,
	0, 2, 1, 3, 3, 2, 3, 1, 2, 0,
	3, 1, 1, 3, 3, 4, 4, 5, 3, 4,
	5, 6, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 1,
	1, 3, 1, 3, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 1, 5, 6, 4, 4,
	6, 6, 6, 8, 8, 8, 8, 9, 4, 7,
	5, 4, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 8, 8, 0, 2,
	3, 4, 4, 4, 4, 4, 4, 0, 3, 4,
	7, 3, 1, 1, 2, 3, 3, 1, 2, 2,
	1, 2, 1, 2, 2, 1, 2, 0, 1, 0,
	2, 1, 2, 4, 0, 2, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	0, 3, 0, 2, 0, 3, 1, 3, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 4, 2, 1,
	3, 5, 4, 6, 1, 3, 3, 5, 0, 5,
	1, 3, 1, 2, 3, 1, 1, 3, 3, 1,
	3, 3, 3, 3, 3, 1, 2, 1, 1, 1,
	1, 1, 1, 0, 2, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 0, 1, 1, 1,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -207, -1, -2, -6, -7, -8, -9, -10, -11,
	-16, -12, -13, -14, -22, -23, -24, -29, -30, -31,
	-27, -26, -25, -15, -3, -4, 6, 7, -35, 9,
	10, 29, -20, 117, -17, -18, -19, 120, 119, 155,
	121, 148, 52, 170, 171, 173, 174, -212, -135, 153,
	154, 30, 31, 123, -209, 8, 256, 118, 150, 149,
	25, 56, -208, 354, -95, 15, -34, 5, -32, -213,
	-32, -32, -32, -32, -32, -183, -185, 56, 92, -130,
	129, 74, 248, 126, 127, 33, 136, 135, 127, 127,
	128, 129, 248, 126, 127, -62, -146, 59, -139, 266,
	139, 298, 299, 170, 181, 175, 202, 194, 267, 300,
	140, 192, 195, 235, 138, 301, 222, 230, 68, 173,
	244, 302, 151, 190, 186, 303, 275, 184, 27, 304,
	232, 207, 305, 271, 185, 231, 123, 306, 142, 136,
	307, 208, 212, 308, 236, 309, 310, 311, 179, 180,
	312, 238, 206, 137, 32, 268, 37, 160, 239, 210,
	313, 205, 201, 314, 315, 316, 317, 204, 178, 200,
	41, 214, 213, 215, 234, 197, 318, 319, 320, 143,
	321, 187, 18, 322, 323, 324, 325, 326, 242, 154,
	327, 158, 328, 329, 330, 331, 332, 333, 233, 209,
	211, 133, 162, 270, 334, 240, 183, 335, 144, 159,
	153, 243, 145, 336, 337, 338, 339, 340, 341, 342,
	174, 343, 344, 345, 346, 169, 237, 246, 40, 219,
	347, 177, 135, 348, 171, 166, 225, 198, 161, 349,
	350, 188, 189, 203, 176, 199, 172, 163, 155, 351,
	245, 220, 272, 196, 193, 167, 352, 129, 164, 165,
	353, 226, 227, 168, 269, 241, 191, 221, 127, 110,
	195, 235, 117, 223, 224, 232, 128, 32, 233, 162,
	-153, 127, -120, 222, 226, 227, 168, 59, 237, 236,
	228, -146, 172, -41, 121, 156, -62, -136, -136, -136,
	225, 225, -136, -2, -118, 129, 227, 131, -101, 17,
	16, -5, -3, -209, 6, 20, 21, -38, 42, 43,
	-33, -45, 101, -46, -146, -68, 76, -73, 28, 59,
	-139, 23, -72, -69, -88, -86, -87, 110, 111, 112,
	99, 100, 107, 77, 113, -77, -75, -76, -78, 61,
	60, 69, 62, 63, 64, 65, 70, 71, 72, -140,
	-84, -209, 46, 47, 257, 258, 259, 260, 265, 146,
	261, 79, 36, 247, 255, 254, 253, 251, 252, 249,
	250, 263, 264, 132, 248, 105, 256, -118, -118, 11,
	-55, -56, -62, -64, -146, -110, -152, 172, -114, 237,
	236, -141, -112, -140, -138, 235, 195, 234, 59, -139,
	122, 147, 273, 75, 22, 24, 217, 78, 110, 16,
	79, 109, 257, 117, 50, 274, 249, 250, 247, 259,
	260, 248, 223, 28, 10, 276, 25, 149, 21, 103,
	119, 82, 83, 152, 23, 150, 72, 146, 279, 19,
	53, 11, 13, 280, 281, 14, 132, 131, 94, 128,
	48, 8, 113, 26, 91, 44, 282, 34, 283, 284,
	285, 286, 46, 92, 17, 251, 252, 30, 287, 265,
	157, 105, 51, 38, 76, 288, 289, 70, 290, 73,
	54, 74, 15, 49, 291, 292, 293, 294, 93, 120,
	256, 47, 295, 126, 6, 262, 29, 148, 45, 296,
	127, 81, 263, 264, 130, 71, 5, 33, 31, 9,
	52, 55, 253, 254, 255, 36, 80, 12, 297, -184,
	92, -177, 59, -62, 128, -62, 256, -127, 132, -127,
	-127, -21, -62, -126, 132, 59, -126, -126, -126, -62,
	114, -62, 59, 29, -137, -209, -141, 248, 126, 59,
	162, 127, 163, 129, -137, -137, -137, -137, -137, 166,
	167, -137, -123, -122, 230, 231, 225, 229, 12, 167,
	225, 165, -137, -28, -2, -9, -7, -8, -2, 84,
	-136, -136, -210, 58, 127, -62, 117, 119, 122, 54,
	-102, 30, -46, -146, -96, -98, -46, -95, -2, -32,
	38, -36, 20, 21, 67, 11, -143, 75, 74, 91,
	-142, 22, -140, 61, 114, -46, -70, 94, 76, 92,
	93, 78, 96, 95, 106, 99, 100, 101, 102, 103,
	104, 105, 97, 98, 109, 84, 85, 86, 87, 88,
	89, 90, -119, -209, -87, -209, 115, 116, -73, -73,
	-73, -73, -73, -73, -73, -73, -209, -2, -82, -46,
	-209, -209, -209, -209, -209, -209, -209, -209, -209, -209,
	-91, -46, -209, -215, -79, -209, -215, -79, -215, -79,
	-215, -209, -215, -79, -215, -79, -215, -215, -79, -209,
	-209, -209, -209, -209, -209, -63, 26, -62, -48, -49,
	-50, -51, -65, -87, -209, -62, -62, -55, -211, 57,
	11, 55, -211, 57, 114, 57, -110, 172, -111, -115,
	238, 240, 84, -145, -140, 61, 28, 29, 58, 57,
	-62, -155, -159, -161, -160, -162, -157, -158, 192, 193,
	110, 196, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 207, 29, 151, 188, 189, 190, 191, 208, 209,
	210, 211, 212, 213, 214, 215, 175, 194, 267, 176,
	177, 178, 179, 180, 181, 183, 184, 185, 186, 187,
	59, 22, 129, 59, 76, 59, -62, 57, 130, -55,
	23, 54, -57, -62, 59, 59, -147, -146, -138, -137,
	-137, -127, -127, -137, -137, -62, -137, -137, -137, -137,
	11, -121, 11, 94, -46, -125, 92, 54, 59, -62,
	-137, 164, 164, 127, 127, 169, -62, 94, 57, 18,
	114, 57, -100, 24, 25, -101, -210, -38, -74, -140,
	62, 65, -37, 45, -62, -46, -46, -80, 70, 76,
	71, 72, -142, 101, -147, -141, -138, -73, -81, -84,
	-87, 66, 94, 92, 93, 78, -73, -73, -73, -73,
	-73, -73, -73, -73, -73, -73, -73, -73, -73, -73,
	-73, -151, 59, 61, 59, -72, -72, -140, -36, -210,
	57, -210, -2, -43, -45, -43, -46, -46, -88, 61,
	-43, -88, 61, -43, -43, -43, -36, -89, -90, 80,
	-88, -140, -146, -210, -73, -140, -140, -43, -44, -43,
	-43, -43, -105, 158, -62, 29, 57, -58, -60, -59,
	-61, 44, 48, 50, 45, 46, 47, 51, -133, 22,
	-48, -209, -107, -214, -105, 55, -48, -62, -48, -64,
	-146, 101, -114, -111, 57, 239, 241, 242, 54, 73,
	-46, -168, 109, -186, -187, -188, -141, 61, 62, -177,
	-178, -179, -189, 141, -194, 133, 135, 33, -180, 142,
	128, 34, 58, -156, -169, 220, -163, 56, -163, -163,
	-163, -163, -167, 195, -167, -167, -167, 56, 56, -163,
	-163, -163, -171, 56, -171, -171, -172, 56, -172, -144,
	55, -99, -62, -137, 23, -137, -62, -62, -62, 57,
	59, 59, -62, -124, 92, 12, -146, -146, 61, -62,
	-128, 122, 119, 120, 124, 125, -197, 118, 217, 195,
	68, 28, 15, 257, 158, 272, 59, 159, -62, -62,
	-62, -62, -62, 122, 119, 40, -46, -46, -147, -98,
	-102, -117, 19, 11, 36, 36, -43, 70, 71, 72,
	114, -209, -81, -73, -73, -73, -42, 152, 75, -210,
	-44, -46, -210, 57, -210, -210, 57, 55, 22, 11,
	11, -210, 11, 11, -210, -210, -210, -43, -92, -90,
	82, -46, -210, 114, -210, 57, 57, -210, -210, -210,
	-210, -71, 29, 36, -2, -209, -209, -109, -113, -88,
	-49, -50, -50, -49, -50, 44, 44, 44, 49, 44,
	49, 44, -59, -146, -210, -150, 19, 158, -67, 12,
	-48, -67, -67, 114, -115, -116, 243, 240, 246, 59,
	61, 57, -188, 84, 56, 59, 34, -180, -180, -181,
	59, -181, 34, -173, -165, -166, -174, -175, -164, 70,
	76, 28, 54, 217, 133, 34, 33, 68, -170, 221,
	62, -167, -167, -168, 29, -168, -168, -168, -176, 61,
	-176, 62, 62, 54, -140, -2, 22, 130, -137, -62,
	-137, -137, -121, 61, -46, -136, -134, -203, 134, 138,
	141, 142, 136, 128, 34, 133, 135, 158, 33, -134,
	-203, 134, -131, -129, 130, 22, 128, 34, -134, -134,
	158, -202, 55, 164, 217, 164, 41, 114, -62, -47,
	11, 101, -141, -44, -42, 75, -73, -73, -210, -45,
	-154, 110, 192, 151, 190, 186, 206, 197, 219, 188,
	220, -151, -154, -73, -73, -73, -73, 266, -95, 83,
	-46, 81, -141, -73, -73, -108, 54, -109, -83, -85,
	-84, -209, -2, -103, -140, -106, -140, -67, 57, 84,
	-53, -52, 54, 55, -54, 54, -52, 44, 44, -149,
	-133, 35, -209, -95, -46, -67, 240, 244, 245, -187,
	-188, -191, -190, -140, -194, -181, -181, 56, 70, -73,
	9, 34, 34, 61, 58, -168, -168, 59, 110, 58,
	57, 58, 57, 58, 57, -62, -99, -99, -62, -124,
	56, -177, -136, 59, -136, 59, -62, -136, -177, 59,
	-140, -200, 269, -201, 59, -140, -140, -140, -67, -48,
	-210, -73, -210, -163, -163, -163, -172, -163, 180, -163,
	180, -210, -210, 19, 19, 19, 19, -209, -40, 262,
	-46, 57, 57, 27, -108, 57, -210, -210, -210, 57,
	114, -210, 57, -95, -113, -46, -46, 56, -46, -66,
	52, 131, 53, -148, -146, 61, 22, -106, -101, 58,
	57, -163, -104, -140, -76, -167, 61, -167, 62, 62,
	-137, -2, -177, -97, 146, 147, -132, 130, 22, -97,
	-177, 26, -199, -198, -141, 56, 55, -93, 13, -167,
	59, -73, -73, -73, -73, -73, -210, 61, -73, -73,
	34, -85, 36, -2, -209, -140, -140, -140, -101, -104,
	128, 128, 128, 290, -210, -193, -192, 55, 137, 68,
	-190, 58, 57, -168, -168, 58, 58, -99, 58, -136,
	59, 59, -136, -97, -209, 57, 84, -104, -62, -94,
	14, 16, -210, -210, -210, -210, -39, 94, 269, -210,
	-210, 9, -83, -2, 114, 58, -209, -209, -209, 61,
	-192, 59, -182, 84, 61, 144, -140, -136, -136, -195,
	-196, 158, -198, -188, 58, -46, -82, -210, 267, 51,
	270, -109, -210, -140, -104, -104, -104, 62, -62, -210,
	57, -140, -202, 41, 268, 271, -210, -210, -210, 56,
	-196, 36, -200, 41, -104, 160, 269, 58, 161, 270,
	-205, -206, 54, -209, 271, -206, 54, 10, 9, -73,
	157, -204, 145, 140, 143, 29, -204, -210, -210, 139,
	28, 70,
}
var yyDef = [...]int{

	25, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 594, 0, 348, 348, 348, 348,
	348, 348, 0, 666, 221, 222, 223, 0, 0, 0,
	0, -2, 324, 325, 0, 327, 328, 337, -2, 970,
	970, 0, 0, 970, 0, 37, 38, 647, 340, 329,
	330, 968, 1, 3, 602, 0, 0, 352, 355, 350,
	0, 647, 647, 0, 0, 70, 71, 0, 0, 0,
	0, 0, 645, 645, 645, 667, 668, 669, 0, 643,
	0, 643, 643, 643, 0, 274, 423, 676, 677, 799,
	800, 801, 802, 803, 804, 805, 806, 807, 808, 809,
	810, 811, 812, 813, 814, 815, 816, 817, 818, 819,
	820, 821, 822, 823, 824, 825, 826, 827, 828, 829,
	830, 831, 832, 833, 834, 835, 836, 837, 838, 839,
	840, 841, 842, 843, 844, 845, 846, 847, 848, 849,
	850, 851, 852, 853, 854, 855, 856, 857, 858, 859,
	860, 861, 862, 863, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 873, 874, 875, 876, 877, 878, 879,
	880, 881, 882, 883, 884, 885, 886, 887, 888, 889,
	890, 891, 892, 893, 894, 895, 896, 897, 898, 899,
	900, 901, 902, 903, 904, 905, 906, 907, 908, 909,
	910, 911, 912, 913, 914, 915, 916, 917, 918, 919,
	920, 921, 922, 923, 924, 925, 926, 927, 928, 929,
	930, 931, 932, 933, 934, 935, 936, 937, 938, 939,
	940, 941, 942, 943, 944, 945, 946, 947, 948, 949,
	950, 951, 952, 953, 954, 955, 956, 957, 958, 959,
	960, 961, 962, 963, 964, 965, 966, 967, 0, 0,
	0, 971, 0, 971, 971, 288, 971, 971, 291, 971,
	0, 971, 0, 298, 0, 0, 304, 971, 321, 322,
	309, 323, 326, 0, 0, 0, 341, 342, 343, 344,
	970, 970, 347, 31, 0, 0, 0, 648, 606, 0,
	0, 594, 33, 0, 348, 353, 354, 358, 356, 357,
	349, 0, 367, 371, 0, 432, 0, 437, 439, -2,
	-2, 0, 474, 475, 476, 477, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 502, 503, 504, 505, 579,
	580, 581, 582, 583, 584, 585, 586, 441, 442, 576,
	625, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 567, 0, 538, 538, 538, 538, 538, 538, 538,
	538, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 48, 50, 423, 54, 0, 946, 629, -2,
	-2, 0, 0, 674, 675, -2, 812, -2, 672, 673,
	680, 681, 682, 683, 684, 685, 686, 687, 688, 689,
	690, 691, 692, 693, 694, 695, 696, 697, 698, 699,
	700, 701, 702, 703, 704, 705, 706, 707, 708, 709,
	710, 711, 712, 713, 714, 715, 716, 717, 718, 719,
	720, 721, 722, 723, 724, 725, 726, 727, 728, 729,
	730, 731, 732, 733, 734, 735, 736, 737, 738, 739,
	740, 741, 742, 743, 744, 745, 746, 747, 748, 749,
	750, 751, 752, 753, 754, 755, 756, 757, 758, 759,
	760, 761, 762, 763, 764, 765, 766, 767, 768, 769,
	770, 771, 772, 773, 774, 775, 776, 777, 778, 779,
	780, 781, 782, 783, 784, 785, 786, 787, 788, 789,
	790, 791, 792, 793, 794, 795, 796, 797, 798, 0,
	0, 89, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 265, 0, 0, 0, 0, 0, 0, 0, 273,
	0, 275, 971, 971, 278, 972, 973, 645, 645, 971,
	971, 0, 971, 971, 286, 287, 289, 290, 292, 971,
	971, 294, 0, 312, 310, 311, 306, 307, 0, 318,
	301, 302, 305, 331, -2, 334, 335, 336, -2, 0,
	345, 346, 32, 969, 0, 971, 0, 0, 0, 0,
	26, 0, 603, 0, 595, 596, 599, 602, 31, 355,
	0, 361, 359, 360, 351, 0, 368, 0, 0, 0,
	372, 0, 374, 375, 0, 435, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 459, 460, 461, 462, 463,
	464, 465, 438, 0, 452, 0, 0, 0, 494, 495,
	496, 497, 498, 499, 500, 0, 358, 31, 0, 472,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 358,
	0, 568, 0, 522, 530, 0, 523, 531, 524, 532,
	525, 0, 526, 533, 527, 534, 528, 529, 535, 0,
	0, 0, 363, 0, 0, 52, 0, 422, 0, 378,
	380, 381, 382, -2, 0, 387, -2, 0, 0, 0,
	44, 45, 0, 0, 0, 0, 55, 946, 57, 58,
	0, 0, 0, 170, 638, 639, 640, 636, 212, 0,
	0, 94, 158, 102, 103, 104, 151, 106, 151, 151,
	151, 151, 167, 167, 167, 167, 134, 135, 136, 137,
	138, 0, 0, 121, 151, 151, 151, 125, 141, 142,
	143, 144, 145, 146, 147, 148, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 153, 153, 153, 155, 155,
	670, 69, 0, 971, 0, 971, 85, 0, 0, 268,
	644, 0, 270, 46, 271, 272, 424, 678, 679, 276,
	277, 0, 0, 281, 282, 283, 284, 285, 293, 297,
	0, 315, 0, 0, 299, 300, 0, 0, 338, 0,
	239, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 598, 600, 601, 606, 34, 358, 0, 587,
	0, 0, 0, 362, 29, 433, 434, 436, 453, 0,
	455, 457, 373, 369, 0, 577, -2, 443, 444, 468,
	469, 470, 0, 0, 0, 0, 466, 448, 0, 479,
	480, 481, 482, 483, 484, 485, 486, 487, 488, 489,
	490, 493, 552, 553, 0, 491, 492, 501, 363, 471,
	0, 624, 31, 0, 365, 0, 0, 0, 476, 579,
	0, 476, 579, 0, 0, 0, 0, 574, 571, 0,
	0, 576, 0, 539, 0, 0, 0, 0, 0, 364,
	0, 0, 0, 0, 421, 0, 0, 0, 0, 0,
	0, 411, 0, 0, 414, 0, 0, 0, 0, 406,
	0, 0, 389, 0, 430, 0, 430, 49, 430, 51,
	0, 425, 630, 56, 0, 0, 61, 62, 631, 632,
	633, 634, 0, 86, 213, 215, 218, 219, 220, 90,
	91, 92, 0, 0, 200, 0, 0, 194, 194, 0,
	192, 193, 88, 93, 160, 159, 105, 0, 167, 167,
	128, 129, 170, 0, 170, 170, 170, 0, 0, 122,
	123, 124, 116, 0, 117, 118, 119, 0, 120, 0,
	0, 0, 0, 75, 646, 76, 0, 266, 971, 0,
	971, 971, 312, 296, 0, 0, 313, 314, 319, 303,
	970, 248, 248, 661, 248, 248, 235, 649, 650, 651,
	652, 653, 654, 655, 656, 657, 658, 0, 77, 241,
	243, 242, 246, 0, 0, 0, 604, 605, 0, 597,
	27, 0, 641, 642, 588, 589, 376, 454, 456, 458,
	0, 363, 445, 466, 449, 0, 446, 0, 0, 440,
	0, 473, -2, 0, 508, 509, 0, 0, 0, 0,
	0, 545, 0, 0, 546, 0, 518, 594, 0, 572,
	0, 0, 521, 0, 540, 0, 0, 541, 542, 543,
	544, 618, 0, 0, -2, 0, 0, 430, 626, 0,
	379, 401, 403, 0, 398, 412, 413, 415, 0, 417,
	0, 419, 420, 383, 385, -2, 0, 0, 594, 0,
	430, 42, 43, 0, 59, 60, 0, 0, 66, 171,
	172, 0, 216, 0, 0, 0, 187, 194, 194, 190,
	195, 191, 0, 95, 96, 97, 98, 99, 100, 162,
	0, 0, 0, 166, 0, 174, 176, 0, 101, 161,
	0, 170, 170, 130, 0, 131, 132, 133, 0, 149,
	0, 0, 0, 0, 671, -2, 69, 0, 269, 47,
	279, 280, 315, 316, 317, 224, 0, 970, 249, 250,
	251, 252, 253, 254, 255, 256, 257, 258, 259, 0,
	970, 0, 0, 970, 662, 663, 664, 665, 0, 0,
	0, 80, 0, 0, 0, 0, 607, 0, 28, 430,
	0, 370, 578, 0, 447, 0, 467, 450, 506, 366,
	0, 151, 151, 557, 151, 155, 560, 151, 562, 151,
	565, 0, 0, 0, 0, 0, 0, 0, 569, 520,
	575, 0, 577, 0, 0, 35, 0, 618, 608, 620,
	622, 0, 31, 0, 614, 0, 393, 594, 0, 0,
	395, 402, 0, 0, 396, 0, 397, 416, 418, 426,
	0, 0, 0, 602, 431, 41, 63, 64, 65, 214,
	217, 0, 196, 151, 199, 188, 189, 0, 163, 164,
	0, 173, 175, 177, 152, 126, 127, 168, 169, 167,
	0, 167, 0, 156, 0, 971, 73, 0, 267, 295,
	0, 236, 227, 228, 229, 0, 231, 232, 236, 0,
	0, 240, 0, 78, 79, 0, 0, 245, 590, 377,
	507, 451, 510, 554, 167, 558, 559, 561, 563, 564,
	566, 512, 511, 0, 0, 0, 0, 0, 0, 0,
	573, 0, 0, 0, 36, 0, 623, -2, 0, 0,
	0, 53, 0, 602, 627, 628, 399, 0, 404, 386,
	0, 0, 0, 408, 409, 410, 0, 0, 40, 179,
	0, 198, 0, 391, 165, 170, 150, 170, 0, 0,
	72, -2, 0, 970, 237, 0, 0, 659, 660, 970,
	236, 0, 81, 82, 0, 0, 0, 592, 0, 555,
	556, 0, 0, 0, 0, 547, 519, 570, 0, 0,
	0, 621, 0, -2, 0, 616, 615, 394, 39, 0,
	0, 0, 0, 0, 388, 178, 180, 0, 185, 0,
	197, 0, 0, 139, 140, 154, 157, 74, 970, 226,
	238, 230, 233, 970, 0, 0, 0, 0, 247, 30,
	0, 0, 513, 515, 514, 516, 0, 0, 0, 536,
	537, 0, 611, 31, 0, 400, 0, 0, 0, 390,
	181, 182, 0, 186, 184, 0, 392, 225, 234, 0,
	261, 0, 83, 84, 77, 593, 591, 517, 0, 0,
	0, 619, -2, 617, 0, 0, 0, 183, 0, 260,
	0, 0, 80, 548, 0, 551, 427, 428, 429, 0,
	262, 0, 244, 549, 0, 0, 0, 201, 0, 0,
	202, 203, 0, 0, 550, 204, 0, 0, 0, 0,
	0, 205, 207, 208, 0, 0, 206, 263, 264, 209,
	210, 211,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 77, 3, 3, 3, 104, 96, 3,
	56, 58, 101, 99, 57, 100, 114, 102, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 354,
	85, 84, 86, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 106, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 95, 3, 107,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 78, 79, 80, 81, 82, 83, 87, 88,
	89, 90, 91, 92, 93, 94, 97, 98, 103, 105,
	108, 109, 110, 111, 112, 113, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:338
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:343
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:344
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:348
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 25:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:372
		{
			setParseTree(yylex, nil)
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:378
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 27:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:386
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 28:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:390
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 29:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:396
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 30:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:403
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:409
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:413
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:419
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:423
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 35:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:430
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:442
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:454
		{
			yyVAL.str = InsertStr
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:458
		{
			yyVAL.str = ReplaceStr
		}
	case 39:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:464
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:470
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:474
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:478
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:482
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:487
		{
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:488
		{
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:492
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName.ToViewName()}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:496
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName.ToViewName())
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:502
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:506
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:512
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:516
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:521
		{
			yyVAL.partitions = nil
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:525
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:531
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:535
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:539
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:543
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:549
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:553
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:559
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:563
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:567
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:573
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:577
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:581
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:585
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:591
		{
			yyVAL.str = SessionStr
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:595
		{
			yyVAL.str = GlobalStr
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:600
		{
			yyVAL.int = yyPosition(yylex)
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:606
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:611
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 72:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:617
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 73:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:622
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[3].tableName.ToViewName(), ViewExpr: yyDollar[6].selStmt, ViewSelectPositionStart: yyDollar[5].int, ViewSelectPositionEnd: yyDollar[7].int - 1}
		}
	case 74:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:626
		{
			yyVAL.statement = &DDL{Action: CreateStr, View: yyDollar[5].tableName.ToViewName(), ViewExpr: yyDollar[8].selStmt, ViewSelectPositionStart: yyDollar[7].int, ViewSelectPositionEnd: yyDollar[9].int - 1, OrReplace: true}
		}
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:630
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:634
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:639
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:643
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:649
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:654
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:659
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:665
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:670
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:676
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:682
		{
			var ne bool
			if yyDollar[3].byt != 0 {
				ne = true
			}
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName, IfNotExists: ne}
			setDDL(yylex, yyVAL.ddl)
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:693
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:700
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:704
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:710
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:715
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:719
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:723
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:729
		{
			if err := yyDollar[2].columnType.merge(yyDollar[3].columnType); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:738
		{
			yyVAL.columnType = ColumnType{}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:742
		{
			opt := ColumnType{NotNull: yyDollar[2].boolVal, sawnull: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:751
		{
			opt := ColumnType{Default: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:760
		{
			opt := ColumnType{OnUpdate: yyDollar[2].optVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:769
		{
			opt := ColumnType{Autoincrement: yyDollar[2].boolVal, sawai: true}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:778
		{
			opt := ColumnType{KeyOpt: yyDollar[2].colKeyOpt}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:787
		{
			opt := ColumnType{Comment: yyDollar[2].sqlVal}
			if err := yyDollar[1].columnType.merge(opt); err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:798
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:809
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:814
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:820
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:824
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:828
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:832
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:836
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:840
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:844
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:848
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:852
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:858
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:864
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:870
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:876
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:882
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:890
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:894
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:898
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:902
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:906
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:912
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:916
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:920
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:924
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:928
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:932
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:936
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:940
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:944
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:948
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:952
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:956
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:960
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:964
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 140:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:969
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:975
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:979
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:983
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:987
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:991
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:995
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:999
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1003
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1009
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1014
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1019
		{
			yyVAL.sqlVal = nil
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1023
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1028
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 154:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1032
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1040
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1044
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 157:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1050
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1058
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1062
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1067
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1071
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1078
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1082
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1088
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1094
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1100
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1105
		{
			yyVAL.str = ""
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1109
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1113
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1118
		{
			yyVAL.str = ""
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1122
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1126
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1132
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1136
		{
			yyVAL.colKeyOpt = colKey
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1140
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1144
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1150
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 178:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1156
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 179:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1160
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1166
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1170
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1176
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1180
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1185
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1191
		{
			yyVAL.str = ""
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1195
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1201
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1205
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1209
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1213
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1217
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1223
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1227
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1232
		{
			yyVAL.str = ""
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1236
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1242
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1246
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1252
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1258
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1262
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 201:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1269
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 202:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1273
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 203:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1277
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 204:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1281
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1287
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1293
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1299
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1303
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1307
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1311
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1315
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 212:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1320
		{
			yyVAL.str = ""
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1324
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1328
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1336
		{
			yyVAL.str = yyDollar[1].str
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1340
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1344
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1350
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1354
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1358
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 224:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1369
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1373
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			ddl.Column = yyDollar[8].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 226:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1380
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: AddStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1387
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 228:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1391
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: DropStr, Column: NewColIdent(string(yyDollar[7].bytes)), Table: yyDollar[4].tableName}
		}
	case 229:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1395
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 230:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1399
		{
			yyVAL.statement = &DDL{Action: AlterStr, ColumnAction: RenameStr, Table: yyDollar[4].tableName, Column: NewColIdent(string(yyDollar[7].bytes)), ToColumn: NewColIdent(string(yyDollar[9].bytes))}
		}
	case 231:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1403
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 232:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1408
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 233:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1413
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ModifyStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, ColumnOrder: yyDollar[8].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[7].columnDefinition)
			ddl.Column = yyDollar[7].columnDefinition.Name
			yyVAL.statement = ddl
		}
	case 234:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1420
		{
			ddl := &DDL{Action: AlterStr, ColumnAction: ChangeStr, Table: yyDollar[4].tableName, TableSpec: &TableSpec{}, Column: NewColIdent(string(yyDollar[7].bytes)), ColumnOrder: yyDollar[9].columnOrder}
			ddl.TableSpec.AddColumn(yyDollar[8].columnDefinition)
			yyVAL.statement = ddl
		}
	case 235:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1426
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 236:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1431
		{
			yyVAL.columnOrder = nil
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1435
		{
			yyVAL.columnOrder = &ColumnOrder{First: true}
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1439
		{
			yyVAL.columnOrder = &ColumnOrder{AfterColumn: NewColIdent(string(yyDollar[2].bytes))}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1445
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 240:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1451
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 241:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1463
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 242:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1473
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 243:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1477
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 244:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1481
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 245:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1494
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 246:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1504
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 247:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1508
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 248:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1521
		{
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1523
		{
		}
	case 260:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1539
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1545
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1549
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 263:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1555
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 264:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1559
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1565
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1571
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 267:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1575
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1583
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 269:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1591
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1596
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromViews: yyDollar[4].tableNames, IfExists: exists}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1604
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1608
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1614
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1618
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1623
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1629
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1634
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1638
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1642
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1646
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), IfNotExists: yyDollar[4].byt == 1, Database: string(yyDollar[5].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1651
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1655
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1659
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1663
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1667
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1671
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1675
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1679
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1683
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1687
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1691
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1695
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1699
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1703
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1707
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 296:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1712
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1722
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1726
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1730
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1736
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1741
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1745
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1749
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1753
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1767
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1773
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1777
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1783
		{
			yyVAL.str = ""
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1787
		{
			yyVAL.str = "full "
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1793
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1797
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1803
		{
			yyVAL.str = ""
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1807
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1811
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1817
		{
			yyVAL.showFilter = nil
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1821
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1825
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1831
		{
			yyVAL.showFilter = nil
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1835
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1841
		{
			yyVAL.str = ""
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1845
		{
			yyVAL.str = SessionStr
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1849
		{
			yyVAL.str = GlobalStr
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1855
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1859
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1865
		{
			yyVAL.statement = &Begin{}
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1869
		{
			yyVAL.statement = &Begin{}
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1875
		{
			yyVAL.statement = &Commit{}
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1881
		{
			yyVAL.statement = &Rollback{}
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1886
		{
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1887
		{
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1891
		{
			yyVAL.statement = &Explain{ExplainFormat: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1895
		{
			yyVAL.statement = &Explain{Analyze: true, ExplainFormat: TreeStr, Statement: yyDollar[3].selStmt}
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1901
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1909
		{
			yyVAL.str = ""
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1913
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1924
		{
			yyVAL.statement = &Show{Type: "columns", OnTable: yyDollar[2].tableName}
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1928
		{
			yyVAL.statement = &OtherRead{}
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1934
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1938
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1942
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1946
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1952
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1956
		{
			setAllowComments(yylex, true)
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1960
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1966
		{
			yyVAL.bytes2 = nil
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1970
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1976
		{
			yyVAL.str = UnionStr
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1980
		{
			yyVAL.str = UnionAllStr
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1984
		{
			yyVAL.str = UnionDistinctStr
		}
	case 355:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1989
		{
			yyVAL.str = ""
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1993
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1997
		{
			yyVAL.str = SQLCacheStr
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2002
		{
			yyVAL.str = ""
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2006
		{
			yyVAL.str = ""
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2010
		{
			yyVAL.str = DistinctStr
		}
	case 361:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2015
		{
			yyVAL.str = ""
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2019
		{
			yyVAL.str = StraightJoinHint
		}
	case 363:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2024
		{
			yyVAL.selectExprs = nil
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2028
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2034
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2038
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2044
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2048
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2052
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 370:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2056
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2061
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2065
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2069
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2076
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2081
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2085
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2091
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2095
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2105
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2109
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2113
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2119
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 386:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2125
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[2].partitions, AsOf: yyDollar[3].asOf, As: yyDollar[4].tableIdent, Hints: yyDollar[5].indexHints}
		}
	case 387:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2130
		{
			yyVAL.partitions = nil
		}
	case 388:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2134
		{
			yyVAL.partitions = yyDollar[4].partitions
		}
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2139
		{
			yyVAL.asOf = nil
		}
	case 390:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2143
		{
			yyVAL.asOf = &AsOf{Time: string(yyDollar[5].bytes)}
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2155
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2159
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2165
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2169
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 395:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2182
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 396:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2186
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 397:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2190
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2194
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2200
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 400:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2202
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 401:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2206
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2208
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 403:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2212
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2214
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 405:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2217
		{
			yyVAL.empty = struct{}{}
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2219
		{
			yyVAL.empty = struct{}{}
		}
	case 407:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2222
		{
			yyVAL.tableIdent = TableIdent{}
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2226
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2233
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2239
		{
			yyVAL.str = JoinStr
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2243
		{
			yyVAL.str = JoinStr
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2247
		{
			yyVAL.str = JoinStr
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2253
		{
			yyVAL.str = StraightJoinStr
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2259
		{
			yyVAL.str = LeftJoinStr
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2263
		{
			yyVAL.str = LeftJoinStr
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2267
		{
			yyVAL.str = RightJoinStr
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2271
		{
			yyVAL.str = RightJoinStr
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2277
		{
			yyVAL.str = NaturalJoinStr
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2281
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2291
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2295
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2301
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2305
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2311
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 426:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2316
		{
			yyVAL.indexHints = nil
		}
	case 427:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2320
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 428:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2324
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 429:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2328
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2333
		{
			yyVAL.expr = nil
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2337
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2343
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2347
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2351
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2355
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2359
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2363
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2367
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 439:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2373
		{
			yyVAL.str = ""
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2377
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2383
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2387
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2393
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2397
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 445:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2401
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 446:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2405
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 447:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2409
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2413
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 449:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2417
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 450:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2421
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 451:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2425
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2429
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2435
		{
			yyVAL.str = IsNullStr
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2439
		{
			yyVAL.str = IsNotNullStr
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2443
		{
			yyVAL.str = IsTrueStr
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2447
		{
			yyVAL.str = IsNotTrueStr
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2451
		{
			yyVAL.str = IsFalseStr
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2455
		{
			yyVAL.str = IsNotFalseStr
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2461
		{
			yyVAL.str = EqualStr
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2465
		{
			yyVAL.str = LessThanStr
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2469
		{
			yyVAL.str = GreaterThanStr
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2473
		{
			yyVAL.str = LessEqualStr
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2477
		{
			yyVAL.str = GreaterEqualStr
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2481
		{
			yyVAL.str = NotEqualStr
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2485
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2490
		{
			yyVAL.expr = nil
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2494
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2500
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2504
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2508
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2514
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2520
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2524
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2530
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2534
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2538
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2542
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2546
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2550
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2554
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2558
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2562
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2566
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2570
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2574
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2578
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2582
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2586
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2590
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2594
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2598
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2602
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2606
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2610
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2614
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2618
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2622
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2630
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2644
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2648
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2652
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 506:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2670
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: yyDollar[3].str == DistinctStr, Exprs: yyDollar[4].selectExprs}
		}
	case 507:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2674
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 508:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2684
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 509:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2688
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 510:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2692
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 511:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2696
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 512:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2700
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 513:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2704
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 514:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2708
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 515:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2712
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 516:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2716
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 517:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2720
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2724
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("first"), Exprs: yyDollar[3].selectExprs}
		}
	case 519:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2728
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 520:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2732
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 521:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2736
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2746
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2750
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2754
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2759
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2764
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2769
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2775
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2780
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2785
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2789
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2793
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2798
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2803
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2808
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 536:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2812
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 537:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2816
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2826
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 541:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2836
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 542:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2840
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 543:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2844
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 544:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2848
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 545:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2852
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 546:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2856
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 547:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2862
		{
			yyVAL.str = ""
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2866
		{
			yyVAL.str = BooleanModeStr
		}
	case 549:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2870
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 550:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2874
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2878
		{
			yyVAL.str = QueryExpansionStr
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2884
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2888
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2894
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2898
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2902
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2906
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2910
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2914
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2920
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2924
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2928
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2932
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2936
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2940
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2944
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2949
		{
			yyVAL.expr = nil
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2953
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2958
		{
			yyVAL.str = string("")
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2962
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2968
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2972
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 573:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2978
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 574:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2983
		{
			yyVAL.expr = nil
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2987
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2993
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2997
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 578:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3001
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3007
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3011
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3015
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3019
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3023
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3027
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3031
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3035
		{
			yyVAL.expr = &NullVal{}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3041
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3050
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3054
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3059
		{
			yyVAL.exprs = nil
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3063
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3068
		{
			yyVAL.expr = nil
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3072
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 594:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3077
		{
			yyVAL.orderBy = nil
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3081
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3087
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3091
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3097
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 599:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3102
		{
			yyVAL.str = AscScr
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3106
		{
			yyVAL.str = AscScr
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3110
		{
			yyVAL.str = DescScr
		}
	case 602:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3115
		{
			yyVAL.limit = nil
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3119
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 604:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3123
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 605:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3127
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 606:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3132
		{
			yyVAL.str = ""
		}
	case 607:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3140
		{
			yyVAL.str = ShareModeStr
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3153
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3157
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3161
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 611:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3166
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 612:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3170
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 613:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3174
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3181
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3185
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3189
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 617:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3193
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 618:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3198
		{
			yyVAL.updateExprs = nil
		}
	case 619:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3202
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3208
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3212
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3218
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3222
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3228
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3234
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3244
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3248
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3254
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3260
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3264
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3270
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3274
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3278
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3282
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3289
		{
			yyVAL.bytes = []byte("charset")
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3296
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3300
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3304
		{
			yyVAL.expr = &Default{}
		}
	case 643:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3313
		{
			yyVAL.byt = 0
		}
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3315
		{
			yyVAL.byt = 1
		}
	case 645:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3318
		{
			yyVAL.byt = 0
		}
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3320
		{
			yyVAL.byt = 1
		}
	case 647:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3323
		{
			yyVAL.str = ""
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3325
		{
			yyVAL.str = IgnoreStr
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3329
		{
			yyVAL.empty = struct{}{}
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3331
		{
			yyVAL.empty = struct{}{}
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3333
		{
			yyVAL.empty = struct{}{}
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3335
		{
			yyVAL.empty = struct{}{}
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3337
		{
			yyVAL.empty = struct{}{}
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3339
		{
			yyVAL.empty = struct{}{}
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3341
		{
			yyVAL.empty = struct{}{}
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3343
		{
			yyVAL.empty = struct{}{}
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3345
		{
			yyVAL.empty = struct{}{}
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3347
		{
			yyVAL.empty = struct{}{}
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3351
		{
			yyVAL.empty = struct{}{}
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3353
		{
			yyVAL.empty = struct{}{}
		}
	case 661:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3356
		{
			yyVAL.empty = struct{}{}
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3358
		{
			yyVAL.empty = struct{}{}
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3360
		{
			yyVAL.empty = struct{}{}
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3364
		{
			yyVAL.empty = struct{}{}
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3366
		{
			yyVAL.empty = struct{}{}
		}
	case 666:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3369
		{
			yyVAL.empty = struct{}{}
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3371
		{
			yyVAL.empty = struct{}{}
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3373
		{
			yyVAL.empty = struct{}{}
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3375
		{
			yyVAL.empty = struct{}{}
		}
	case 670:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3378
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 671:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3380
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3384
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3388
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3395
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3401
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3405
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3412
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3726
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3735
		{
			decNesting(yylex)
		}
	case 970:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3740
		{
			skipToEnd(yylex)
		}
	case 971:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3745
		{
			skipToEnd(yylex)
		}
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3749
		{
			skipToEnd(yylex)
		}
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3753
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
